{
    "900": {
        "input": "4 5 6 10",
        "step_1": {
            "steps": [
                "10 - 6 = 4 (left: 4 5 10)",
                "10 - 6 = 4 (left: 4 5 10)",
                "6 + 4 = 10 (left: 5 10 10)",
                "6 + 4 = 10 (left: 5 10 10)",
                "10 - 4 = 6 (left: 6 5 10)"
            ],
            "values": [
                22.0,
                22.0,
                1.002,
                0.003,
                41.0
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 4",
                "2 <- 1",
                "3 <- 1",
                "4 <- 4"
            ],
            "resampled_steps": [
                "6 + 4 = 10 (left: 5 10 10)",
                "10 - 4 = 6 (left: 6 5 10)",
                "10 - 6 = 4 (left: 4 5 10)",
                "10 - 6 = 4 (left: 4 5 10)",
                "10 - 4 = 6 (left: 6 5 10)"
            ]
        },
        "step_2": {
            "steps": [
                "6 + 4 = 10 (left: 5 10 10)\n10 / 5 = 2 (left: 2 10)",
                "10 - 4 = 6 (left: 6 5 10)\n5 - 4 = 1 (left: 1 20)",
                "10 - 6 = 4 (left: 4 5 10)\n4 + 5 = 9 (left: 9 10)",
                "10 - 6 = 4 (left: 4 5 10)\n5 - 4 = 1 (left: 1 10)",
                "10 - 4 = 6 (left: 6 5 10)\n7 + 2 = 9 (left: 4 3 9)"
            ],
            "values": [
                3.0,
                41.0,
                1.002,
                60.0,
                2.001
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 3",
                "3 <- 3",
                "4 <- 3"
            ],
            "resampled_steps": [
                "10 - 6 = 4 (left: 4 5 10)\n5 - 4 = 1 (left: 1 10)",
                "10 - 6 = 4 (left: 4 5 10)\n5 - 4 = 1 (left: 1 10)",
                "10 - 6 = 4 (left: 4 5 10)\n5 - 4 = 1 (left: 1 10)",
                "10 - 6 = 4 (left: 4 5 10)\n5 - 4 = 1 (left: 1 10)",
                "10 - 6 = 4 (left: 4 5 10)\n5 - 4 = 1 (left: 1 10)"
            ]
        },
        "step_3": {
            "steps": [
                "10 - 6 = 4 (left: 4 5 10)\n5 - 4 = 1 (left: 1 10)\n1 + 10 = 11 (left: 11)",
                "10 - 6 = 4 (left: 4 5 10)\n5 - 4 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "10 - 6 = 4 (left: 4 5 10)\n5 - 4 = 1 (left: 1 10)\n10 + 1 = 11 (left: 11)",
                "10 - 6 = 4 (left: 4 5 10)\n5 - 4 = 1 (left: 1 10)\n1 + 10 = 11 (left: 10 11)",
                "10 - 6 = 4 (left: 4 5 10)\n5 - 4 = 1 (left: 1 10)\n1 + 10 = 11 (left: 10)"
            ],
            "values": [
                0.002,
                0.003,
                0.002,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 0",
                "2 <- 3",
                "3 <- 3",
                "4 <- 0"
            ],
            "resampled_steps": [
                "10 - 6 = 4 (left: 4 5 10)\n5 - 4 = 1 (left: 1 10)\n1 + 10 = 11 (left: 10)",
                "10 - 6 = 4 (left: 4 5 10)\n5 - 4 = 1 (left: 1 10)\n1 + 10 = 11 (left: 11)",
                "10 - 6 = 4 (left: 4 5 10)\n5 - 4 = 1 (left: 1 10)\n1 + 10 = 11 (left: 10 11)",
                "10 - 6 = 4 (left: 4 5 10)\n5 - 4 = 1 (left: 1 10)\n1 + 10 = 11 (left: 10 11)",
                "10 - 6 = 4 (left: 4 5 10)\n5 - 4 = 1 (left: 1 10)\n1 + 10 = 11 (left: 11)"
            ]
        },
        "step_4": {
            "steps": [
                "10 - 6 = 4 (left: 4 5 10)\n5 - 4 = 1 (left: 1 10)\n1 + 10 = 11 (left: 10)\n10 / 2 = 5",
                "10 - 6 = 4 (left: 4 5 10)\n5 - 4 = 1 (left: 1 10)\n1 + 10 = 11 (left: 11)\n11 / 2 = 5.5 (left: 5.5)",
                "10 - 6 = 4 (left: 4 5 10)\n5 - 4 = 1 (left: 1 10)\n1 + 10 = 11 (left: 10 11)\n10 + 11 = 21 (left: 21)",
                "10 - 6 = 4 (left: 4 5 10)\n5 - 4 = 1 (left: 1 10)\n1 + 10 = 11 (left: 10 11)\n10 + 11 = 21 (left: 21)",
                "10 - 6 = 4 (left: 4 5 10)\n5 - 4 = 1 (left: 1 10)\n1 + 10 = 11 (left: 11)\nThere are no possible next steps for the input 11."
            ],
            "values": [
                0.003,
                0.002,
                0.002,
                60.0,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.0106005
    },
    "901": {
        "input": "1 2 4 7",
        "step_1": {
            "steps": [
                "7 - 1 = 6 (left: 2 4 6)",
                "4 / 2 = 2 (left: 1 2 7)",
                "7 - 4 = 3 (left: 1, 2, 3)",
                "4 * 2 = 8 (left: 1 8 7)",
                "2 * 4 = 8 (left: 1 8 7)"
            ],
            "values": [
                0.003,
                1.002,
                1.002,
                2.001,
                1.002
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 2",
                "2 <- 2",
                "3 <- 4",
                "4 <- 2"
            ],
            "resampled_steps": [
                "4 * 2 = 8 (left: 1 8 7)",
                "7 - 4 = 3 (left: 1, 2, 3)",
                "7 - 4 = 3 (left: 1, 2, 3)",
                "2 * 4 = 8 (left: 1 8 7)",
                "7 - 4 = 3 (left: 1, 2, 3)"
            ]
        },
        "step_2": {
            "steps": [
                "4 * 2 = 8 (left: 1 8 7)\n5 / 2 = 2.5 (left: 3 2 4)",
                "7 - 4 = 3 (left: 1, 2, 3)\n6 - 5 = 1 (left: 4 1)",
                "7 - 4 = 3 (left: 1, 2, 3)\n3 / 1 = 3 (left: 2, 3)",
                "2 * 4 = 8 (left: 1 8 7)\n8 - 1 = 7 (left: 7 7)",
                "7 - 4 = 3 (left: 1, 2, 3)\n1 * 2 = 2 (left: 2 3)"
            ],
            "values": [
                60.0,
                0.002,
                0.003,
                0.002,
                0.0
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 0",
                "3 <- 0",
                "4 <- 0"
            ],
            "resampled_steps": [
                "4 * 2 = 8 (left: 1 8 7)\n5 / 2 = 2.5 (left: 3 2 4)",
                "4 * 2 = 8 (left: 1 8 7)\n5 / 2 = 2.5 (left: 3 2 4)",
                "4 * 2 = 8 (left: 1 8 7)\n5 / 2 = 2.5 (left: 3 2 4)",
                "4 * 2 = 8 (left: 1 8 7)\n5 / 2 = 2.5 (left: 3 2 4)",
                "4 * 2 = 8 (left: 1 8 7)\n5 / 2 = 2.5 (left: 3 2 4)"
            ]
        },
        "step_3": {
            "steps": [
                "4 * 2 = 8 (left: 1 8 7)\n5 / 2 = 2.5 (left: 3 2 4)\n2 - 4 = -2 (left: -2 4)",
                "4 * 2 = 8 (left: 1 8 7)\n5 / 2 = 2.5 (left: 3 2 4)\n5 + 5 = 10 (left: 5 10)",
                "4 * 2 = 8 (left: 1 8 7)\n5 / 2 = 2.5 (left: 3 2 4)\n6 + 3 = 9 (left: 9 2)",
                "4 * 2 = 8 (left: 1 8 7)\n5 / 2 = 2.5 (left: 3 2 4)\nPossible next steps:",
                "4 * 2 = 8 (left: 1 8 7)\n5 / 2 = 2.5 (left: 3 2 4)\n3 - 2 = 1 (left: 1 4)"
            ],
            "values": [
                2.001,
                0.002,
                0.0,
                0.003,
                20.002
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 4",
                "2 <- 4",
                "3 <- 4",
                "4 <- 4"
            ],
            "resampled_steps": [
                "4 * 2 = 8 (left: 1 8 7)\n5 / 2 = 2.5 (left: 3 2 4)\n3 - 2 = 1 (left: 1 4)",
                "4 * 2 = 8 (left: 1 8 7)\n5 / 2 = 2.5 (left: 3 2 4)\n3 - 2 = 1 (left: 1 4)",
                "4 * 2 = 8 (left: 1 8 7)\n5 / 2 = 2.5 (left: 3 2 4)\n3 - 2 = 1 (left: 1 4)",
                "4 * 2 = 8 (left: 1 8 7)\n5 / 2 = 2.5 (left: 3 2 4)\n3 - 2 = 1 (left: 1 4)",
                "4 * 2 = 8 (left: 1 8 7)\n5 / 2 = 2.5 (left: 3 2 4)\n3 - 2 = 1 (left: 1 4)"
            ]
        },
        "step_4": {
            "steps": [
                "4 * 2 = 8 (left: 1 8 7)\n5 / 2 = 2.5 (left: 3 2 4)\n3 - 2 = 1 (left: 1 4)\n1 + 4 = 5 (left: 5)",
                "4 * 2 = 8 (left: 1 8 7)\n5 / 2 = 2.5 (left: 3 2 4)\n3 - 2 = 1 (left: 1 4)\n4 - 1 = 3 (left: 3)",
                "4 * 2 = 8 (left: 1 8 7)\n5 / 2 = 2.5 (left: 3 2 4)\n3 - 2 = 1 (left: 1 4)\n1 * 4 = 4 (left: 4)",
                "4 * 2 = 8 (left: 1 8 7)\n5 / 2 = 2.5 (left: 3 2 4)\n3 - 2 = 1 (left: 1 4)\n1 * 4 = 4 (left: 4)",
                "4 * 2 = 8 (left: 1 8 7)\n5 / 2 = 2.5 (left: 3 2 4)\n3 - 2 = 1 (left: 1 4)\n1 * 4 = 4 (left: 4)"
            ],
            "values": [
                0.002,
                0.003,
                0.003,
                0.001,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.022179
    },
    "902": {
        "input": "2 5 8 11",
        "step_1": {
            "steps": [
                "8 - 2 = 6 (left: 6 5 11)",
                "2 + 5 = 7 (left: 7 8 11)",
                "9 / 3 = 3 (left: 3 9 12)",
                "11 - 8 = 3 (left: 2 3 8)",
                "8 - 5 = 3 (left: 2 3 11)"
            ],
            "values": [
                22.0,
                3.0,
                1.002,
                2.001,
                0.002
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 0",
                "3 <- 0",
                "4 <- 3"
            ],
            "resampled_steps": [
                "8 - 2 = 6 (left: 6 5 11)",
                "8 - 2 = 6 (left: 6 5 11)",
                "8 - 2 = 6 (left: 6 5 11)",
                "8 - 2 = 6 (left: 6 5 11)",
                "11 - 8 = 3 (left: 2 3 8)"
            ]
        },
        "step_2": {
            "steps": [
                "8 - 2 = 6 (left: 6 5 11)\n5 + 11 = 16 (left: 6 16)",
                "8 - 2 = 6 (left: 6 5 11)\n12 / 3 = 4 (left: 4 12)",
                "8 - 2 = 6 (left: 6 5 11)\n6 * 5 = 30 (left: 11 30)",
                "8 - 2 = 6 (left: 6 5 11)\n3 + 7 = 10 (left: 3 10 10)",
                "11 - 8 = 3 (left: 2 3 8)\n8 - 2 = 6 (left: 6 8)"
            ],
            "values": [
                0.002,
                0.002,
                1.002,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 2",
                "2 <- 2",
                "3 <- 2",
                "4 <- 2"
            ],
            "resampled_steps": [
                "8 - 2 = 6 (left: 6 5 11)\n6 * 5 = 30 (left: 11 30)",
                "8 - 2 = 6 (left: 6 5 11)\n6 * 5 = 30 (left: 11 30)",
                "8 - 2 = 6 (left: 6 5 11)\n6 * 5 = 30 (left: 11 30)",
                "8 - 2 = 6 (left: 6 5 11)\n6 * 5 = 30 (left: 11 30)",
                "8 - 2 = 6 (left: 6 5 11)\n6 * 5 = 30 (left: 11 30)"
            ]
        },
        "step_3": {
            "steps": [
                "8 - 2 = 6 (left: 6 5 11)\n6 * 5 = 30 (left: 11 30)\n11 * 30 = 330 (left: 330)",
                "8 - 2 = 6 (left: 6 5 11)\n6 * 5 = 30 (left: 11 30)\n11 - 30 = -19 (left: -19)",
                "8 - 2 = 6 (left: 6 5 11)\n6 * 5 = 30 (left: 11 30)\n11 + 30 = 41 (left: 41)",
                "8 - 2 = 6 (left: 6 5 11)\n6 * 5 = 30 (left: 11 30)\n30 / 11 = 2.72727272727 (left: 2.72727272727)",
                "8 - 2 = 6 (left: 6 5 11)\n6 * 5 = 30 (left: 11 30)\n11 - 30 = -19 (left: -19)"
            ],
            "values": [
                0.003,
                0.001,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 4",
                "2 <- 2",
                "3 <- 0",
                "4 <- 4"
            ],
            "resampled_steps": [
                "8 - 2 = 6 (left: 6 5 11)\n6 * 5 = 30 (left: 11 30)\n30 / 11 = 2.72727272727 (left: 2.72727272727)",
                "8 - 2 = 6 (left: 6 5 11)\n6 * 5 = 30 (left: 11 30)\n11 - 30 = -19 (left: -19)",
                "8 - 2 = 6 (left: 6 5 11)\n6 * 5 = 30 (left: 11 30)\n11 + 30 = 41 (left: 41)",
                "8 - 2 = 6 (left: 6 5 11)\n6 * 5 = 30 (left: 11 30)\n11 * 30 = 330 (left: 330)",
                "8 - 2 = 6 (left: 6 5 11)\n6 * 5 = 30 (left: 11 30)\n11 - 30 = -19 (left: -19)"
            ]
        },
        "step_4": {
            "steps": [
                "8 - 2 = 6 (left: 6 5 11)\n6 * 5 = 30 (left: 11 30)\n30 / 11 = 2.72727272727 (left: 2.72727272727)\n2.72727272727 - 2 = 0.72727272727",
                "8 - 2 = 6 (left: 6 5 11)\n6 * 5 = 30 (left: 11 30)\n11 - 30 = -19 (left: -19)\nThere are no possible next steps with the given input of -19.",
                "8 - 2 = 6 (left: 6 5 11)\n6 * 5 = 30 (left: 11 30)\n11 + 30 = 41 (left: 41)\n41 + 2 = 43",
                "8 - 2 = 6 (left: 6 5 11)\n6 * 5 = 30 (left: 11 30)\n11 * 30 = 330 (left: 330)\n3 + 3 + 0 = 6 (left: 6 3 0)",
                "8 - 2 = 6 (left: 6 5 11)\n6 * 5 = 30 (left: 11 30)\n11 - 30 = -19 (left: -19)\n-19 * 2 = -38 (left: -38)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                20.002,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.033599000000000004
    },
    "903": {
        "input": "3 4 4 13",
        "step_1": {
            "steps": [
                "3 * 4 = 12 (left: 4 12 13)",
                "15 - 6 = 9 (left: 5 6 9)",
                "3 + 4 = 7 (left: 4 7 13)",
                "3 * 4 = 12 (left: 4 12 13)",
                "3 * 4 = 12 (left: 4 12 13)"
            ],
            "values": [
                1.002,
                22.0,
                20.002,
                1.002,
                2.001
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 1",
                "3 <- 1",
                "4 <- 1"
            ],
            "resampled_steps": [
                "15 - 6 = 9 (left: 5 6 9)",
                "15 - 6 = 9 (left: 5 6 9)",
                "15 - 6 = 9 (left: 5 6 9)",
                "15 - 6 = 9 (left: 5 6 9)",
                "15 - 6 = 9 (left: 5 6 9)"
            ]
        },
        "step_2": {
            "steps": [
                "15 - 6 = 9 (left: 5 6 9)\n7 / 3 = 2.33 (left: 2.33 9)",
                "15 - 6 = 9 (left: 5 6 9)\n6 - 5 = 1 (left: 1 9)",
                "15 - 6 = 9 (left: 5 6 9)\n5 * 6 = 30 (left: 30 9)",
                "15 - 6 = 9 (left: 5 6 9)\nInput: 4 7 11 12",
                "15 - 6 = 9 (left: 5 6 9)\n5 * 6 = 30 (left: 9 30)"
            ],
            "values": [
                2.0,
                60.0,
                2.001,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 1",
                "3 <- 1",
                "4 <- 1"
            ],
            "resampled_steps": [
                "15 - 6 = 9 (left: 5 6 9)\n6 - 5 = 1 (left: 1 9)",
                "15 - 6 = 9 (left: 5 6 9)\n6 - 5 = 1 (left: 1 9)",
                "15 - 6 = 9 (left: 5 6 9)\n6 - 5 = 1 (left: 1 9)",
                "15 - 6 = 9 (left: 5 6 9)\n6 - 5 = 1 (left: 1 9)",
                "15 - 6 = 9 (left: 5 6 9)\n6 - 5 = 1 (left: 1 9)"
            ]
        },
        "step_3": {
            "steps": [
                "15 - 6 = 9 (left: 5 6 9)\n6 - 5 = 1 (left: 1 9)\n9 / 1 = 9 (left: 9)",
                "15 - 6 = 9 (left: 5 6 9)\n6 - 5 = 1 (left: 1 9)\n1 + 9 = 10 (left: 9 10)",
                "15 - 6 = 9 (left: 5 6 9)\n6 - 5 = 1 (left: 1 9)\n1 + 9 = 10 (left: 10)",
                "15 - 6 = 9 (left: 5 6 9)\n6 - 5 = 1 (left: 1 9)\n9 / 1 = 9 (left: 9)",
                "15 - 6 = 9 (left: 5 6 9)\n6 - 5 = 1 (left: 1 9)\n1 * 9 = 9 (left: 9)"
            ],
            "values": [
                0.002,
                1.002,
                0.001,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 1",
                "3 <- 1",
                "4 <- 1"
            ],
            "resampled_steps": [
                "15 - 6 = 9 (left: 5 6 9)\n6 - 5 = 1 (left: 1 9)\n1 + 9 = 10 (left: 9 10)",
                "15 - 6 = 9 (left: 5 6 9)\n6 - 5 = 1 (left: 1 9)\n1 + 9 = 10 (left: 9 10)",
                "15 - 6 = 9 (left: 5 6 9)\n6 - 5 = 1 (left: 1 9)\n1 + 9 = 10 (left: 9 10)",
                "15 - 6 = 9 (left: 5 6 9)\n6 - 5 = 1 (left: 1 9)\n1 + 9 = 10 (left: 9 10)",
                "15 - 6 = 9 (left: 5 6 9)\n6 - 5 = 1 (left: 1 9)\n1 + 9 = 10 (left: 9 10)"
            ]
        },
        "step_4": {
            "steps": [
                "15 - 6 = 9 (left: 5 6 9)\n6 - 5 = 1 (left: 1 9)\n1 + 9 = 10 (left: 9 10)\n9 + 10 = 19 (left: 19)",
                "15 - 6 = 9 (left: 5 6 9)\n6 - 5 = 1 (left: 1 9)\n1 + 9 = 10 (left: 9 10)\n9 + 10 = 19 (left: 19)",
                "15 - 6 = 9 (left: 5 6 9)\n6 - 5 = 1 (left: 1 9)\n1 + 9 = 10 (left: 9 10)\n9 + 10 = 19 (left: 19)",
                "15 - 6 = 9 (left: 5 6 9)\n6 - 5 = 1 (left: 1 9)\n1 + 9 = 10 (left: 9 10)\n10 - 9 = 1 (left: 1)",
                "15 - 6 = 9 (left: 5 6 9)\n6 - 5 = 1 (left: 1 9)\n1 + 9 = 10 (left: 9 10)\n9 - 10 = -1 (left: -1)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.044518
    },
    "904": {
        "input": "6 7 8 9",
        "step_1": {
            "steps": [
                "9 / 6 = 1.5 (left: 1.5 7 8)",
                "8 + 9 = 17 (left: 6 7 17)",
                "7 + 8 = 15 (left: 6 9 15)",
                "7 + 8 = 15 (left: 6 9 15)",
                "7 * 8 = 56 (left: 6 9 56)"
            ],
            "values": [
                3.0,
                3.0,
                1.002,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 2",
                "3 <- 3",
                "4 <- 0"
            ],
            "resampled_steps": [
                "7 + 8 = 15 (left: 6 9 15)",
                "7 + 8 = 15 (left: 6 9 15)",
                "7 + 8 = 15 (left: 6 9 15)",
                "7 + 8 = 15 (left: 6 9 15)",
                "9 / 6 = 1.5 (left: 1.5 7 8)"
            ]
        },
        "step_2": {
            "steps": [
                "7 + 8 = 15 (left: 6 9 15)\n9 / 6 = 1.5 (left: 1.5 15)",
                "7 + 8 = 15 (left: 6 9 15)\n9 * 6 = 54 (left: 54)",
                "7 + 8 = 15 (left: 6 9 15)\n15 - 6 = 9 (left: 9 15)",
                "7 + 8 = 15 (left: 6 9 15)\n15 / 3 = 5 (left: 5 15)",
                "9 / 6 = 1.5 (left: 1.5 7 8)\n8 - 1.5 = 6.5 (left: 6.5 8)"
            ],
            "values": [
                1.0,
                0.002,
                60.0,
                0.003,
                2.001
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 2",
                "2 <- 2",
                "3 <- 2",
                "4 <- 2"
            ],
            "resampled_steps": [
                "7 + 8 = 15 (left: 6 9 15)\n15 - 6 = 9 (left: 9 15)",
                "7 + 8 = 15 (left: 6 9 15)\n15 - 6 = 9 (left: 9 15)",
                "7 + 8 = 15 (left: 6 9 15)\n15 - 6 = 9 (left: 9 15)",
                "7 + 8 = 15 (left: 6 9 15)\n15 - 6 = 9 (left: 9 15)",
                "7 + 8 = 15 (left: 6 9 15)\n15 - 6 = 9 (left: 9 15)"
            ]
        },
        "step_3": {
            "steps": [
                "7 + 8 = 15 (left: 6 9 15)\n15 - 6 = 9 (left: 9 15)\n15 / 9 = 1.67 (left: 1.67)",
                "7 + 8 = 15 (left: 6 9 15)\n15 - 6 = 9 (left: 9 15)\n9 + 15 = 24 (left: 24)",
                "7 + 8 = 15 (left: 6 9 15)\n15 - 6 = 9 (left: 9 15)\n9 - 15 = -6 (left: -6 15)",
                "7 + 8 = 15 (left: 6 9 15)\n15 - 6 = 9 (left: 9 15)\n9 / 15 = 0.6 (left: 0.6 15)",
                "7 + 8 = 15 (left: 6 9 15)\n15 - 6 = 9 (left: 9 15)\n15 + 9 = 24 (left: 24)"
            ],
            "values": [
                0.002,
                60.0,
                1.001,
                0.003,
                40.0
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 4",
                "2 <- 4",
                "3 <- 1",
                "4 <- 4"
            ],
            "resampled_steps": [
                "7 + 8 = 15 (left: 6 9 15)\n15 - 6 = 9 (left: 9 15)\n9 + 15 = 24 (left: 24)",
                "7 + 8 = 15 (left: 6 9 15)\n15 - 6 = 9 (left: 9 15)\n15 + 9 = 24 (left: 24)",
                "7 + 8 = 15 (left: 6 9 15)\n15 - 6 = 9 (left: 9 15)\n15 + 9 = 24 (left: 24)",
                "7 + 8 = 15 (left: 6 9 15)\n15 - 6 = 9 (left: 9 15)\n9 + 15 = 24 (left: 24)",
                "7 + 8 = 15 (left: 6 9 15)\n15 - 6 = 9 (left: 9 15)\n15 + 9 = 24 (left: 24)"
            ]
        },
        "step_4": {
            "steps": [
                "7 + 8 = 15 (left: 6 9 15)\n15 - 6 = 9 (left: 9 15)\n9 + 15 = 24 (left: 24)\nAnswer: (7 + 8) + (9 + 15) = 24",
                "7 + 8 = 15 (left: 6 9 15)\n15 - 6 = 9 (left: 9 15)\n15 + 9 = 24 (left: 24)\nAnswer: (7 + 8) + (6 - 9) = 24",
                "7 + 8 = 15 (left: 6 9 15)\n15 - 6 = 9 (left: 9 15)\n15 + 9 = 24 (left: 24)\nAnswer: (7 + 8) + (6 - 9) = 24",
                "7 + 8 = 15 (left: 6 9 15)\n15 - 6 = 9 (left: 9 15)\n9 + 15 = 24 (left: 24)\nAnswer: ((7 + 8) - 6) + 9 = 24",
                "7 + 8 = 15 (left: 6 9 15)\n15 - 6 = 9 (left: 9 15)\n15 + 9 = 24 (left: 24)\nAnswer: ((7 + 8) - 6) + 9 = 24"
            ],
            "values": [
                0.003,
                0.003,
                20.002,
                60.0,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.055917
    },
    "905": {
        "input": "1 11 11 13",
        "step_1": {
            "steps": [
                "13 - 1 = 12 (left: 11 11 12)",
                "13 - 1 = 12 (left: 11 11 12)",
                "11 + 1 = 12 (left: 11 13 12)",
                "13 / 1 = 13 (left: 11 11 13)",
                "11 - 1 = 10 (left: 10 11 13)"
            ],
            "values": [
                0.003,
                0.003,
                60.0,
                2.001,
                21.001
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 2",
                "2 <- 2",
                "3 <- 4",
                "4 <- 2"
            ],
            "resampled_steps": [
                "11 + 1 = 12 (left: 11 13 12)",
                "11 + 1 = 12 (left: 11 13 12)",
                "11 + 1 = 12 (left: 11 13 12)",
                "11 - 1 = 10 (left: 10 11 13)",
                "11 + 1 = 12 (left: 11 13 12)"
            ]
        },
        "step_2": {
            "steps": [
                "11 + 1 = 12 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)",
                "11 + 1 = 12 (left: 11 13 12)\nPossible next steps:",
                "11 + 1 = 12 (left: 11 13 12)\n7 + 6 = 13 (left: 5 8 13)",
                "11 - 1 = 10 (left: 10 11 13)\n11 - 10 = 1 (left: 1 13)",
                "11 + 1 = 12 (left: 11 13 12)\nPossible next steps:"
            ],
            "values": [
                60.0,
                0.003,
                3.0,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 0",
                "3 <- 0",
                "4 <- 0"
            ],
            "resampled_steps": [
                "11 + 1 = 12 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)",
                "11 + 1 = 12 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)",
                "11 + 1 = 12 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)",
                "11 + 1 = 12 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)",
                "11 + 1 = 12 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)"
            ]
        },
        "step_3": {
            "steps": [
                "11 + 1 = 12 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "11 + 1 = 12 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "11 + 1 = 12 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "11 + 1 = 12 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "11 + 1 = 12 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)"
            ],
            "values": [
                0.003,
                0.003,
                0.002,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 1",
                "3 <- 3",
                "4 <- 1"
            ],
            "resampled_steps": [
                "11 + 1 = 12 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "11 + 1 = 12 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "11 + 1 = 12 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "11 + 1 = 12 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "11 + 1 = 12 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)"
            ]
        },
        "step_4": {
            "steps": [
                "11 + 1 = 12 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)\nNo more possible next steps.",
                "11 + 1 = 12 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)\n14 / 2 = 7",
                "11 + 1 = 12 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)\n6 / 2 = 3 (left: 3)",
                "11 + 1 = 12 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)\n10 + 10 = 20",
                "11 + 1 = 12 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)\n6 * 6 = 36 (left: 36)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                20.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.066982
    },
    "906": {
        "input": "1 8 10 11",
        "step_1": {
            "steps": [
                "11 - 1 = 10 (left: 8 10 10)",
                "1 * 8 = 8 (left: 8 10 11)",
                "10 / 1 = 10 (left: 8 10 11)",
                "11 / 1 = 11 (left: 8 10 11)",
                "8 / 1 = 8 (left: 8 10 11)"
            ],
            "values": [
                2.001,
                0.003,
                3.0,
                2.001,
                2.001
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 2",
                "2 <- 4",
                "3 <- 3",
                "4 <- 2"
            ],
            "resampled_steps": [
                "10 / 1 = 10 (left: 8 10 11)",
                "10 / 1 = 10 (left: 8 10 11)",
                "8 / 1 = 8 (left: 8 10 11)",
                "11 / 1 = 11 (left: 8 10 11)",
                "10 / 1 = 10 (left: 8 10 11)"
            ]
        },
        "step_2": {
            "steps": [
                "10 / 1 = 10 (left: 8 10 11)\n2 * 5 = 10 (left: 10 7 8)",
                "10 / 1 = 10 (left: 8 10 11)\n2 + 4 = 6 (left: 6 6 8)",
                "8 / 1 = 8 (left: 8 10 11)\n11 - 8 = 3 (left: 8 3)",
                "11 / 1 = 11 (left: 8 10 11)\n8 / 10 = 0.8 (left: 0.8 11)",
                "10 / 1 = 10 (left: 8 10 11)\n10 + 11 = 21 (left: 8 21)"
            ],
            "values": [
                22.0,
                3.0,
                60.0,
                2.001,
                2.001
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 4",
                "2 <- 2",
                "3 <- 1",
                "4 <- 2"
            ],
            "resampled_steps": [
                "8 / 1 = 8 (left: 8 10 11)\n11 - 8 = 3 (left: 8 3)",
                "10 / 1 = 10 (left: 8 10 11)\n10 + 11 = 21 (left: 8 21)",
                "8 / 1 = 8 (left: 8 10 11)\n11 - 8 = 3 (left: 8 3)",
                "10 / 1 = 10 (left: 8 10 11)\n2 + 4 = 6 (left: 6 6 8)",
                "8 / 1 = 8 (left: 8 10 11)\n11 - 8 = 3 (left: 8 3)"
            ]
        },
        "step_3": {
            "steps": [
                "8 / 1 = 8 (left: 8 10 11)\n11 - 8 = 3 (left: 8 3)\n8 + 3 = 11 (left: 11)",
                "10 / 1 = 10 (left: 8 10 11)\n10 + 11 = 21 (left: 8 21)\n8 / 21 = 0.38 (left: 0.38)",
                "8 / 1 = 8 (left: 8 10 11)\n11 - 8 = 3 (left: 8 3)\n8 - 3 = 5 (left: 5)",
                "10 / 1 = 10 (left: 8 10 11)\n2 + 4 = 6 (left: 6 6 8)\n6 - 6 = 0 (left: 0 8)",
                "8 / 1 = 8 (left: 8 10 11)\n11 - 8 = 3 (left: 8 3)\n8 / 3 = 2.67 (left: 2.67)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.001,
                0.003
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 4",
                "3 <- 4",
                "4 <- 0"
            ],
            "resampled_steps": [
                "8 / 1 = 8 (left: 8 10 11)\n11 - 8 = 3 (left: 8 3)\n8 + 3 = 11 (left: 11)",
                "8 / 1 = 8 (left: 8 10 11)\n11 - 8 = 3 (left: 8 3)\n8 + 3 = 11 (left: 11)",
                "8 / 1 = 8 (left: 8 10 11)\n11 - 8 = 3 (left: 8 3)\n8 / 3 = 2.67 (left: 2.67)",
                "8 / 1 = 8 (left: 8 10 11)\n11 - 8 = 3 (left: 8 3)\n8 / 3 = 2.67 (left: 2.67)",
                "8 / 1 = 8 (left: 8 10 11)\n11 - 8 = 3 (left: 8 3)\n8 + 3 = 11 (left: 11)"
            ]
        },
        "step_4": {
            "steps": [
                "8 / 1 = 8 (left: 8 10 11)\n11 - 8 = 3 (left: 8 3)\n8 + 3 = 11 (left: 11)\nThere are no possible next steps as there are no other numbers given to perform operations with.",
                "8 / 1 = 8 (left: 8 10 11)\n11 - 8 = 3 (left: 8 3)\n8 + 3 = 11 (left: 11)\nThere are no possible next steps with the number 11.",
                "8 / 1 = 8 (left: 8 10 11)\n11 - 8 = 3 (left: 8 3)\n8 / 3 = 2.67 (left: 2.67)\nThere is only one number provided, so there are no possible next steps to calculate.",
                "8 / 1 = 8 (left: 8 10 11)\n11 - 8 = 3 (left: 8 3)\n8 / 3 = 2.67 (left: 2.67)\nThere are no possible next steps for the input 2.67 with the numbers 2, 8, 8, and 14.",
                "8 / 1 = 8 (left: 8 10 11)\n11 - 8 = 3 (left: 8 3)\n8 + 3 = 11 (left: 11)\nThere is only one possible next step with the input of 11:"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.076874
    },
    "907": {
        "input": "2 3 6 9",
        "step_1": {
            "steps": [
                "9 - 3 = 6 (left: 2 6 6)",
                "9 - 6 = 3 (left: 2 3 3)",
                "2 + 3 = 5 (left: 5 6 9)",
                "6 / 3 = 2 (left: 2 3 9)",
                "6 / 2 = 3 (left: 3 6 9)"
            ],
            "values": [
                41.0,
                1.0,
                2.001,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 0",
                "3 <- 0",
                "4 <- 0"
            ],
            "resampled_steps": [
                "9 - 3 = 6 (left: 2 6 6)",
                "9 - 3 = 6 (left: 2 6 6)",
                "9 - 3 = 6 (left: 2 6 6)",
                "9 - 3 = 6 (left: 2 6 6)",
                "9 - 3 = 6 (left: 2 6 6)"
            ]
        },
        "step_2": {
            "steps": [
                "9 - 3 = 6 (left: 2 6 6)\n6 * 2 = 12 (left: 6 12)",
                "9 - 3 = 6 (left: 2 6 6)\n6 / 2 = 3 (left: 3 6)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)",
                "9 - 3 = 6 (left: 2 6 6)\n5 / 3 = 1.66666666667 (approx.) (left: 1.66666666667 5)",
                "9 - 3 = 6 (left: 2 6 6)\n6 * 2 = 12 (left: 6 12)"
            ],
            "values": [
                0.003,
                1.0,
                60.0,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 2",
                "2 <- 2",
                "3 <- 2",
                "4 <- 2"
            ],
            "resampled_steps": [
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)"
            ]
        },
        "step_3": {
            "steps": [
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n3 * 9 = 27 (left: 27)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)"
            ],
            "values": [
                0.002,
                60.0,
                60.0,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 2",
                "2 <- 1",
                "3 <- 2",
                "4 <- 1"
            ],
            "resampled_steps": [
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)"
            ]
        },
        "step_4": {
            "steps": [
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (9 - 3) * (6 - 2) = 24",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (9 - 3) * (6 - 2) = 24",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (9 - 3) * (6 - 2) = 24",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (9 - 3) * (6 - 2) = 24",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (9 - 3) * (6 - 2) = 24"
            ],
            "values": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ]
        },
        "results": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            }
        ],
        "cost": 0.08621000000000001
    },
    "908": {
        "input": "1 3 5 9",
        "step_1": {
            "steps": [
                "1 * 5 = 5 (left: 5 3 9)",
                "3 * 5 = 15 (left: 1 9 15)",
                "1 + 5 = 6 (left: 6 3 9)",
                "5 + 9 = 14 (left: 1 3 14)",
                "9 - 5 = 4 (left: 1 3 4)"
            ],
            "values": [
                60.0,
                0.003,
                0.003,
                1.001,
                3.0
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 0",
                "3 <- 0",
                "4 <- 0"
            ],
            "resampled_steps": [
                "1 * 5 = 5 (left: 5 3 9)",
                "1 * 5 = 5 (left: 5 3 9)",
                "1 * 5 = 5 (left: 5 3 9)",
                "1 * 5 = 5 (left: 5 3 9)",
                "1 * 5 = 5 (left: 5 3 9)"
            ]
        },
        "step_2": {
            "steps": [
                "1 * 5 = 5 (left: 5 3 9)\n6 * 6 = 36 (left: 3 9 36)",
                "1 * 5 = 5 (left: 5 3 9)\n5 - 3 = 2 (left: 2 9)",
                "1 * 5 = 5 (left: 5 3 9)\n2 * 12 = 24 (left: 4 6 24)",
                "1 * 5 = 5 (left: 5 3 9)\n6 - 2 = 4 (left: 4 4 12)",
                "1 * 5 = 5 (left: 5 3 9)\n10 / 2 = 5 (left: 4 5 6)"
            ],
            "values": [
                0.003,
                1.0,
                60.0,
                20.002,
                1.002
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 2",
                "3 <- 2",
                "4 <- 3"
            ],
            "resampled_steps": [
                "1 * 5 = 5 (left: 5 3 9)\n6 - 2 = 4 (left: 4 4 12)",
                "1 * 5 = 5 (left: 5 3 9)\n6 - 2 = 4 (left: 4 4 12)",
                "1 * 5 = 5 (left: 5 3 9)\n2 * 12 = 24 (left: 4 6 24)",
                "1 * 5 = 5 (left: 5 3 9)\n2 * 12 = 24 (left: 4 6 24)",
                "1 * 5 = 5 (left: 5 3 9)\n6 - 2 = 4 (left: 4 4 12)"
            ]
        },
        "step_3": {
            "steps": [
                "1 * 5 = 5 (left: 5 3 9)\n6 - 2 = 4 (left: 4 4 12)\n4 / 4 = 1 (left: 1 12)",
                "1 * 5 = 5 (left: 5 3 9)\n6 - 2 = 4 (left: 4 4 12)\n1 + 1 = 2 (left: 2 3 5)",
                "1 * 5 = 5 (left: 5 3 9)\n2 * 12 = 24 (left: 4 6 24)\n4 * 6 = 24 (left: 24)",
                "1 * 5 = 5 (left: 5 3 9)\n2 * 12 = 24 (left: 4 6 24)\n24 / 4 = 6 (left: 6 24)",
                "1 * 5 = 5 (left: 5 3 9)\n6 - 2 = 4 (left: 4 4 12)\n12 - 4 = 8 (left: 8 4)"
            ],
            "values": [
                21.001,
                3.0,
                60.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 2",
                "2 <- 2",
                "3 <- 0",
                "4 <- 0"
            ],
            "resampled_steps": [
                "1 * 5 = 5 (left: 5 3 9)\n2 * 12 = 24 (left: 4 6 24)\n4 * 6 = 24 (left: 24)",
                "1 * 5 = 5 (left: 5 3 9)\n2 * 12 = 24 (left: 4 6 24)\n4 * 6 = 24 (left: 24)",
                "1 * 5 = 5 (left: 5 3 9)\n2 * 12 = 24 (left: 4 6 24)\n4 * 6 = 24 (left: 24)",
                "1 * 5 = 5 (left: 5 3 9)\n6 - 2 = 4 (left: 4 4 12)\n4 / 4 = 1 (left: 1 12)",
                "1 * 5 = 5 (left: 5 3 9)\n6 - 2 = 4 (left: 4 4 12)\n4 / 4 = 1 (left: 1 12)"
            ]
        },
        "step_4": {
            "steps": [
                "1 * 5 = 5 (left: 5 3 9)\n2 * 12 = 24 (left: 4 6 24)\n4 * 6 = 24 (left: 24)\nAnswer: (1 * 5) * (3 + 9) = 24",
                "1 * 5 = 5 (left: 5 3 9)\n2 * 12 = 24 (left: 4 6 24)\n4 * 6 = 24 (left: 24)\nAnswer: (1 * 5) * (3 + 9) = 24",
                "1 * 5 = 5 (left: 5 3 9)\n2 * 12 = 24 (left: 4 6 24)\n4 * 6 = 24 (left: 24)\nAnswer: (1 * 5) * (3 * 9) = 24",
                "1 * 5 = 5 (left: 5 3 9)\n6 - 2 = 4 (left: 4 4 12)\n4 / 4 = 1 (left: 1 12)\n1 + 12 = 13",
                "1 * 5 = 5 (left: 5 3 9)\n6 - 2 = 4 (left: 4 4 12)\n4 / 4 = 1 (left: 1 12)\n1 + 12 = 13 (left: 13)"
            ],
            "values": [
                40.001,
                60.0,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.098576
    },
    "909": {
        "input": "3 3 7 12",
        "step_1": {
            "steps": [
                "7 / 3 = 2 (left: 3 2 12)",
                "12 - 3 = 9 (left: 3 7 9)",
                "12 - 3 = 9 (left: 3 7 9)",
                "7 + 3 = 10 (left: 10 3 12)",
                "12 / 3 = 4 (left: 3 4 7)"
            ],
            "values": [
                0.003,
                3.0,
                2.001,
                0.003,
                3.0
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 4",
                "2 <- 1",
                "3 <- 2",
                "4 <- 4"
            ],
            "resampled_steps": [
                "12 - 3 = 9 (left: 3 7 9)",
                "12 / 3 = 4 (left: 3 4 7)",
                "12 - 3 = 9 (left: 3 7 9)",
                "12 - 3 = 9 (left: 3 7 9)",
                "12 / 3 = 4 (left: 3 4 7)"
            ]
        },
        "step_2": {
            "steps": [
                "12 - 3 = 9 (left: 3 7 9)\n9 - 3 = 6 (left: 6 7)",
                "12 / 3 = 4 (left: 3 4 7)\n10 / 5 = 2 (left: 2 15)",
                "12 - 3 = 9 (left: 3 7 9)\n3 - 6 = -3 (left: -3 15)",
                "12 - 3 = 9 (left: 3 7 9)\n4 + 9 = 13 (left: 13)",
                "12 / 3 = 4 (left: 3 4 7)\n3 + 4 = 7 (left: 7 7)"
            ],
            "values": [
                0.003,
                0.003,
                0.002,
                0.002,
                0.002
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 2",
                "2 <- 4",
                "3 <- 1",
                "4 <- 1"
            ],
            "resampled_steps": [
                "12 - 3 = 9 (left: 3 7 9)\n3 - 6 = -3 (left: -3 15)",
                "12 - 3 = 9 (left: 3 7 9)\n3 - 6 = -3 (left: -3 15)",
                "12 / 3 = 4 (left: 3 4 7)\n3 + 4 = 7 (left: 7 7)",
                "12 / 3 = 4 (left: 3 4 7)\n10 / 5 = 2 (left: 2 15)",
                "12 / 3 = 4 (left: 3 4 7)\n10 / 5 = 2 (left: 2 15)"
            ]
        },
        "step_3": {
            "steps": [
                "12 - 3 = 9 (left: 3 7 9)\n3 - 6 = -3 (left: -3 15)\n-3 / 15 = -0.2 (left: -0.2)",
                "12 - 3 = 9 (left: 3 7 9)\n3 - 6 = -3 (left: -3 15)\n15 / -3 = -5 (left: -5)",
                "12 / 3 = 4 (left: 3 4 7)\n3 + 4 = 7 (left: 7 7)\n7 + 7 = 14 (left: 14) ",
                "12 / 3 = 4 (left: 3 4 7)\n10 / 5 = 2 (left: 2 15)\n15 - 2 = 13 (left: 2 13)",
                "12 / 3 = 4 (left: 3 4 7)\n10 / 5 = 2 (left: 2 15)\n15 - 2 = 13 (left: 2 13)"
            ],
            "values": [
                0.003,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 2",
                "2 <- 1",
                "3 <- 4",
                "4 <- 1"
            ],
            "resampled_steps": [
                "12 - 3 = 9 (left: 3 7 9)\n3 - 6 = -3 (left: -3 15)\n-3 / 15 = -0.2 (left: -0.2)",
                "12 / 3 = 4 (left: 3 4 7)\n3 + 4 = 7 (left: 7 7)\n7 + 7 = 14 (left: 14) ",
                "12 - 3 = 9 (left: 3 7 9)\n3 - 6 = -3 (left: -3 15)\n15 / -3 = -5 (left: -5)",
                "12 / 3 = 4 (left: 3 4 7)\n10 / 5 = 2 (left: 2 15)\n15 - 2 = 13 (left: 2 13)",
                "12 - 3 = 9 (left: 3 7 9)\n3 - 6 = -3 (left: -3 15)\n15 / -3 = -5 (left: -5)"
            ]
        },
        "step_4": {
            "steps": [
                "12 - 3 = 9 (left: 3 7 9)\n3 - 6 = -3 (left: -3 15)\n-3 / 15 = -0.2 (left: -0.2)\n-0.2 / 2 = -0.1 (left: -0.1)",
                "12 / 3 = 4 (left: 3 4 7)\n3 + 4 = 7 (left: 7 7)\n7 + 7 = 14 (left: 14) \nNo possible next steps as there is only one number given.",
                "12 - 3 = 9 (left: 3 7 9)\n3 - 6 = -3 (left: -3 15)\n15 / -3 = -5 (left: -5)\nThere are no possible next steps with the input of -5.",
                "12 / 3 = 4 (left: 3 4 7)\n10 / 5 = 2 (left: 2 15)\n15 - 2 = 13 (left: 2 13)\n13 - 2 = 11 (left: 11)",
                "12 - 3 = 9 (left: 3 7 9)\n3 - 6 = -3 (left: -3 15)\n15 / -3 = -5 (left: -5)\n-5 - 2 = -7 (left: -7)"
            ],
            "values": [
                0.001,
                0.003,
                0.003,
                0.002,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.1091105
    },
    "910": {
        "input": "4 5 7 9",
        "step_1": {
            "steps": [
                "5 * 9 = 45 (left: 4 7 45)",
                "5 + 7 = 12 (left: 1 3 12)",
                "Possible next steps:",
                "4 * 7 = 28 (left: 5 9 28)",
                "9 + 12 = 21 (left: 3 6 21)"
            ],
            "values": [
                2.001,
                40.001,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 1",
                "3 <- 1",
                "4 <- 1"
            ],
            "resampled_steps": [
                "5 + 7 = 12 (left: 1 3 12)",
                "5 + 7 = 12 (left: 1 3 12)",
                "5 + 7 = 12 (left: 1 3 12)",
                "5 + 7 = 12 (left: 1 3 12)",
                "5 + 7 = 12 (left: 1 3 12)"
            ]
        },
        "step_2": {
            "steps": [
                "5 + 7 = 12 (left: 1 3 12)\n3 * 1 = 3 (left: 3 12)",
                "5 + 7 = 12 (left: 1 3 12)\n12 - 3 = 9 (left: 1 9)",
                "5 + 7 = 12 (left: 1 3 12)\n4 / 5 = 0.8 (left: 4 0.8)",
                "5 + 7 = 12 (left: 1 3 12)\n20 / 10 = 2 (left: 7 2 20)",
                "5 + 7 = 12 (left: 1 3 12)\n3 * 1 = 3 (left: 3 12)"
            ],
            "values": [
                60.0,
                60.0,
                0.003,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 1",
                "3 <- 0",
                "4 <- 1"
            ],
            "resampled_steps": [
                "5 + 7 = 12 (left: 1 3 12)\n3 * 1 = 3 (left: 3 12)",
                "5 + 7 = 12 (left: 1 3 12)\n3 * 1 = 3 (left: 3 12)",
                "5 + 7 = 12 (left: 1 3 12)\n12 - 3 = 9 (left: 1 9)",
                "5 + 7 = 12 (left: 1 3 12)\n3 * 1 = 3 (left: 3 12)",
                "5 + 7 = 12 (left: 1 3 12)\n12 - 3 = 9 (left: 1 9)"
            ]
        },
        "step_3": {
            "steps": [
                "5 + 7 = 12 (left: 1 3 12)\n3 * 1 = 3 (left: 3 12)\n12 - 3 = 9 (left: 9 12)",
                "5 + 7 = 12 (left: 1 3 12)\n3 * 1 = 3 (left: 3 12)\n3 / 12 = 0.25 (left: 0.25)",
                "5 + 7 = 12 (left: 1 3 12)\n12 - 3 = 9 (left: 1 9)\n9 - 1 = 8 (left: 8)",
                "5 + 7 = 12 (left: 1 3 12)\n3 * 1 = 3 (left: 3 12)\n12 / 3 = 4 (left: 4)",
                "5 + 7 = 12 (left: 1 3 12)\n12 - 3 = 9 (left: 1 9)\n9 / 1 = 9 (left: 9)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.001
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 0",
                "2 <- 1",
                "3 <- 2",
                "4 <- 1"
            ],
            "resampled_steps": [
                "5 + 7 = 12 (left: 1 3 12)\n3 * 1 = 3 (left: 3 12)\n3 / 12 = 0.25 (left: 0.25)",
                "5 + 7 = 12 (left: 1 3 12)\n3 * 1 = 3 (left: 3 12)\n12 - 3 = 9 (left: 9 12)",
                "5 + 7 = 12 (left: 1 3 12)\n3 * 1 = 3 (left: 3 12)\n3 / 12 = 0.25 (left: 0.25)",
                "5 + 7 = 12 (left: 1 3 12)\n12 - 3 = 9 (left: 1 9)\n9 - 1 = 8 (left: 8)",
                "5 + 7 = 12 (left: 1 3 12)\n3 * 1 = 3 (left: 3 12)\n3 / 12 = 0.25 (left: 0.25)"
            ]
        },
        "step_4": {
            "steps": [
                "5 + 7 = 12 (left: 1 3 12)\n3 * 1 = 3 (left: 3 12)\n3 / 12 = 0.25 (left: 0.25)\n0.25 * 2 = 0.5 (left: 0.5)",
                "5 + 7 = 12 (left: 1 3 12)\n3 * 1 = 3 (left: 3 12)\n12 - 3 = 9 (left: 9 12)\n12 - 9 = 3 (left: 3)",
                "5 + 7 = 12 (left: 1 3 12)\n3 * 1 = 3 (left: 3 12)\n3 / 12 = 0.25 (left: 0.25)\nThere are no possible next steps for the input 0.25.",
                "5 + 7 = 12 (left: 1 3 12)\n12 - 3 = 9 (left: 1 9)\n9 - 1 = 8 (left: 8)\nThere is only one number provided, so there are no possible next steps.",
                "5 + 7 = 12 (left: 1 3 12)\n3 * 1 = 3 (left: 3 12)\n3 / 12 = 0.25 (left: 0.25)\nThere are no possible next steps for the input 0.25."
            ],
            "values": [
                0.001,
                0.001,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.12009449999999999
    },
    "911": {
        "input": "1 2 8 13",
        "step_1": {
            "steps": [
                "2 * 8 = 16 (left: 1 16 13)",
                "8 - 2 = 6 (left: 1 6 13)",
                "1 * 2 = 2 (left: 2 8 13)",
                "8 - 2 = 6 (left: 1 6 13)",
                "13 - 1 = 12 (left: 2 8 12)"
            ],
            "values": [
                1.002,
                0.002,
                2.001,
                0.002,
                1.002
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 2",
                "2 <- 0",
                "3 <- 4",
                "4 <- 0"
            ],
            "resampled_steps": [
                "1 * 2 = 2 (left: 2 8 13)",
                "1 * 2 = 2 (left: 2 8 13)",
                "2 * 8 = 16 (left: 1 16 13)",
                "13 - 1 = 12 (left: 2 8 12)",
                "2 * 8 = 16 (left: 1 16 13)"
            ]
        },
        "step_2": {
            "steps": [
                "1 * 2 = 2 (left: 2 8 13)\n2 * 8 = 16 (left: 16 13)",
                "1 * 2 = 2 (left: 2 8 13)\n13 - 8 = 5 (left: 2 5)",
                "2 * 8 = 16 (left: 1 16 13)\n16 - 13 = 3 (left: 1 3)",
                "13 - 1 = 12 (left: 2 8 12)\n2 + 8 = 10 (left: 10 12)",
                "2 * 8 = 16 (left: 1 16 13)\n1 * 16 = 16 (left: 16 13)"
            ],
            "values": [
                0.003,
                60.0,
                1.002,
                1.001,
                0.003
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 1",
                "3 <- 1",
                "4 <- 1"
            ],
            "resampled_steps": [
                "1 * 2 = 2 (left: 2 8 13)\n13 - 8 = 5 (left: 2 5)",
                "1 * 2 = 2 (left: 2 8 13)\n13 - 8 = 5 (left: 2 5)",
                "1 * 2 = 2 (left: 2 8 13)\n13 - 8 = 5 (left: 2 5)",
                "1 * 2 = 2 (left: 2 8 13)\n13 - 8 = 5 (left: 2 5)",
                "1 * 2 = 2 (left: 2 8 13)\n13 - 8 = 5 (left: 2 5)"
            ]
        },
        "step_3": {
            "steps": [
                "1 * 2 = 2 (left: 2 8 13)\n13 - 8 = 5 (left: 2 5)\n2 * 5 = 10 (left: 10)",
                "1 * 2 = 2 (left: 2 8 13)\n13 - 8 = 5 (left: 2 5)\n2 + 5 = 7 (left: 7)",
                "1 * 2 = 2 (left: 2 8 13)\n13 - 8 = 5 (left: 2 5)\n2 + 5 = 7 (left: 7)",
                "1 * 2 = 2 (left: 2 8 13)\n13 - 8 = 5 (left: 2 5)\n2 - 5 = -3 (left: -3)",
                "1 * 2 = 2 (left: 2 8 13)\n13 - 8 = 5 (left: 2 5)\n10 * 5 = 50 (left: 50)"
            ],
            "values": [
                0.002,
                0.002,
                0.002,
                0.001,
                0.002
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 2",
                "2 <- 2",
                "3 <- 3",
                "4 <- 0"
            ],
            "resampled_steps": [
                "1 * 2 = 2 (left: 2 8 13)\n13 - 8 = 5 (left: 2 5)\n10 * 5 = 50 (left: 50)",
                "1 * 2 = 2 (left: 2 8 13)\n13 - 8 = 5 (left: 2 5)\n2 + 5 = 7 (left: 7)",
                "1 * 2 = 2 (left: 2 8 13)\n13 - 8 = 5 (left: 2 5)\n2 + 5 = 7 (left: 7)",
                "1 * 2 = 2 (left: 2 8 13)\n13 - 8 = 5 (left: 2 5)\n2 - 5 = -3 (left: -3)",
                "1 * 2 = 2 (left: 2 8 13)\n13 - 8 = 5 (left: 2 5)\n2 * 5 = 10 (left: 10)"
            ]
        },
        "step_4": {
            "steps": [
                "1 * 2 = 2 (left: 2 8 13)\n13 - 8 = 5 (left: 2 5)\n10 * 5 = 50 (left: 50)\n50 * 2 = 100 (left: 2)",
                "1 * 2 = 2 (left: 2 8 13)\n13 - 8 = 5 (left: 2 5)\n2 + 5 = 7 (left: 7)\n8 - 7 = 1 (left: 1 8)",
                "1 * 2 = 2 (left: 2 8 13)\n13 - 8 = 5 (left: 2 5)\n2 + 5 = 7 (left: 7)\n7 + 8 = 15 (left: 8 15)",
                "1 * 2 = 2 (left: 2 8 13)\n13 - 8 = 5 (left: 2 5)\n2 - 5 = -3 (left: -3)\n-3 - 2 = -5 (left: -5)",
                "1 * 2 = 2 (left: 2 8 13)\n13 - 8 = 5 (left: 2 5)\n2 * 5 = 10 (left: 10)\n10 + 8 = 18 (left: 8 18)"
            ],
            "values": [
                0.002,
                60.0,
                0.001,
                0.003,
                1.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.1307815
    },
    "912": {
        "input": "4 6 6 9",
        "step_1": {
            "steps": [
                "6 - 4 = 2 (left: 2 6 9)",
                "9 - 6 = 3 (left: 4 6 3)",
                "9 - 6 = 3 (left: 4 6 3)",
                "6 - 4 = 2 (left: 2 6 9)",
                "6 - 4 = 2 (left: 2 6 9)"
            ],
            "values": [
                2.001,
                41.0,
                22.0,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 1",
                "3 <- 1",
                "4 <- 2"
            ],
            "resampled_steps": [
                "9 - 6 = 3 (left: 4 6 3)",
                "9 - 6 = 3 (left: 4 6 3)",
                "9 - 6 = 3 (left: 4 6 3)",
                "9 - 6 = 3 (left: 4 6 3)",
                "9 - 6 = 3 (left: 4 6 3)"
            ]
        },
        "step_2": {
            "steps": [
                "9 - 6 = 3 (left: 4 6 3)\n4 + 6 = 10 (left: 3 10)",
                "9 - 6 = 3 (left: 4 6 3)\n7 / 5 = 1.4 (left: 1.4 7)",
                "9 - 6 = 3 (left: 4 6 3)\nInput: 3 5 7 2",
                "9 - 6 = 3 (left: 4 6 3)\n3 - 6 = -3 (left: -3 3)",
                "9 - 6 = 3 (left: 4 6 3)\n5 - 2 = 3 (left: 3 9)"
            ],
            "values": [
                0.003,
                0.001,
                0.003,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 1",
                "2 <- 0",
                "3 <- 0",
                "4 <- 4"
            ],
            "resampled_steps": [
                "9 - 6 = 3 (left: 4 6 3)\nInput: 3 5 7 2",
                "9 - 6 = 3 (left: 4 6 3)\n7 / 5 = 1.4 (left: 1.4 7)",
                "9 - 6 = 3 (left: 4 6 3)\n4 + 6 = 10 (left: 3 10)",
                "9 - 6 = 3 (left: 4 6 3)\n4 + 6 = 10 (left: 3 10)",
                "9 - 6 = 3 (left: 4 6 3)\n5 - 2 = 3 (left: 3 9)"
            ]
        },
        "step_3": {
            "steps": [
                "9 - 6 = 3 (left: 4 6 3)\nInput: 3 5 7 2\n5 - 3 = 2 (left: 2 7 2)",
                "9 - 6 = 3 (left: 4 6 3)\n7 / 5 = 1.4 (left: 1.4 7)\n1.4 * 7 = 9.8 (left: 9.8)",
                "9 - 6 = 3 (left: 4 6 3)\n4 + 6 = 10 (left: 3 10)\n10 / 3 = 3.33 (left: 3.33)",
                "9 - 6 = 3 (left: 4 6 3)\n4 + 6 = 10 (left: 3 10)\n3 + 10 = 13 (left: 13)",
                "9 - 6 = 3 (left: 4 6 3)\n5 - 2 = 3 (left: 3 9)\n3 + 9 = 12 (left: 12)"
            ],
            "values": [
                3.0,
                0.003,
                0.002,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 0",
                "3 <- 0",
                "4 <- 0"
            ],
            "resampled_steps": [
                "9 - 6 = 3 (left: 4 6 3)\nInput: 3 5 7 2\n5 - 3 = 2 (left: 2 7 2)",
                "9 - 6 = 3 (left: 4 6 3)\nInput: 3 5 7 2\n5 - 3 = 2 (left: 2 7 2)",
                "9 - 6 = 3 (left: 4 6 3)\nInput: 3 5 7 2\n5 - 3 = 2 (left: 2 7 2)",
                "9 - 6 = 3 (left: 4 6 3)\nInput: 3 5 7 2\n5 - 3 = 2 (left: 2 7 2)",
                "9 - 6 = 3 (left: 4 6 3)\nInput: 3 5 7 2\n5 - 3 = 2 (left: 2 7 2)"
            ]
        },
        "step_4": {
            "steps": [
                "9 - 6 = 3 (left: 4 6 3)\nInput: 3 5 7 2\n5 - 3 = 2 (left: 2 7 2)\n7 - 2 = 5 (left: 5 2)",
                "9 - 6 = 3 (left: 4 6 3)\nInput: 3 5 7 2\n5 - 3 = 2 (left: 2 7 2)\n2 * 7 = 14 (left: 14 2)",
                "9 - 6 = 3 (left: 4 6 3)\nInput: 3 5 7 2\n5 - 3 = 2 (left: 2 7 2)\n7 / 2 = 3.5 (left: 3.5 2)",
                "9 - 6 = 3 (left: 4 6 3)\nInput: 3 5 7 2\n5 - 3 = 2 (left: 2 7 2)\n7 / 2 = 3.5 (left: 3.5 2)",
                "9 - 6 = 3 (left: 4 6 3)\nInput: 3 5 7 2\n5 - 3 = 2 (left: 2 7 2)\n7 - 2 = 5 (left: 5 2)"
            ],
            "values": [
                41.0,
                0.003,
                0.003,
                0.002,
                40.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.14303350000000004
    },
    "913": {
        "input": "1 4 4 8",
        "step_1": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8)",
                "4 + 4 = 8 (left: 4 8 8)",
                "8 - 4 = 4 (left: 4 4 4)",
                "1 * 4 = 4 (left: 4 4 8)",
                "8 / 1 = 8 (left: 4 8 8)"
            ],
            "values": [
                41.0,
                21.001,
                1.001,
                21.001,
                41.0
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 4",
                "3 <- 4",
                "4 <- 0"
            ],
            "resampled_steps": [
                "4 * 1 = 4 (left: 4 4 8)",
                "4 * 1 = 4 (left: 4 4 8)",
                "8 / 1 = 8 (left: 4 8 8)",
                "8 / 1 = 8 (left: 4 8 8)",
                "4 * 1 = 4 (left: 4 4 8)"
            ]
        },
        "step_2": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8)\n3 + 5 = 8 (left: 8 7)",
                "4 * 1 = 4 (left: 4 4 8)\n8 - 4 = 4 (left: 4 8)",
                "8 / 1 = 8 (left: 4 8 8)\n8 / 4 = 2 (left: 2 8)",
                "8 / 1 = 8 (left: 4 8 8)\n4 + 8 = 12 (left: 8 8 12)",
                "4 * 1 = 4 (left: 4 4 8)\n8 - 4 = 4 (left: 4 8)"
            ],
            "values": [
                0.001,
                0.003,
                0.001,
                2.001,
                0.002
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 3",
                "3 <- 3",
                "4 <- 3"
            ],
            "resampled_steps": [
                "8 / 1 = 8 (left: 4 8 8)\n4 + 8 = 12 (left: 8 8 12)",
                "8 / 1 = 8 (left: 4 8 8)\n4 + 8 = 12 (left: 8 8 12)",
                "8 / 1 = 8 (left: 4 8 8)\n4 + 8 = 12 (left: 8 8 12)",
                "8 / 1 = 8 (left: 4 8 8)\n4 + 8 = 12 (left: 8 8 12)",
                "8 / 1 = 8 (left: 4 8 8)\n4 + 8 = 12 (left: 8 8 12)"
            ]
        },
        "step_3": {
            "steps": [
                "8 / 1 = 8 (left: 4 8 8)\n4 + 8 = 12 (left: 8 8 12)\n12 / 8 = 1.5 (left: 1.5 8)",
                "8 / 1 = 8 (left: 4 8 8)\n4 + 8 = 12 (left: 8 8 12)\n8 * 8 = 64 (left: 64 12)",
                "8 / 1 = 8 (left: 4 8 8)\n4 + 8 = 12 (left: 8 8 12)\n12 - 8 = 4 (left: 8 4)",
                "8 / 1 = 8 (left: 4 8 8)\n4 + 8 = 12 (left: 8 8 12)\n12 + 8 = 20 (left: 8 20)",
                "8 / 1 = 8 (left: 4 8 8)\n4 + 8 = 12 (left: 8 8 12)\n8 + 8 = 16 (left: 16 12)"
            ],
            "values": [
                1.001,
                2.0,
                0.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 1",
                "3 <- 0",
                "4 <- 1"
            ],
            "resampled_steps": [
                "8 / 1 = 8 (left: 4 8 8)\n4 + 8 = 12 (left: 8 8 12)\n8 * 8 = 64 (left: 64 12)",
                "8 / 1 = 8 (left: 4 8 8)\n4 + 8 = 12 (left: 8 8 12)\n8 * 8 = 64 (left: 64 12)",
                "8 / 1 = 8 (left: 4 8 8)\n4 + 8 = 12 (left: 8 8 12)\n8 * 8 = 64 (left: 64 12)",
                "8 / 1 = 8 (left: 4 8 8)\n4 + 8 = 12 (left: 8 8 12)\n12 / 8 = 1.5 (left: 1.5 8)",
                "8 / 1 = 8 (left: 4 8 8)\n4 + 8 = 12 (left: 8 8 12)\n8 * 8 = 64 (left: 64 12)"
            ]
        },
        "step_4": {
            "steps": [
                "8 / 1 = 8 (left: 4 8 8)\n4 + 8 = 12 (left: 8 8 12)\n8 * 8 = 64 (left: 64 12)\n64 + 12 = 76 (left: 76)",
                "8 / 1 = 8 (left: 4 8 8)\n4 + 8 = 12 (left: 8 8 12)\n8 * 8 = 64 (left: 64 12)\n64 + 12 = 76 (left: 76)",
                "8 / 1 = 8 (left: 4 8 8)\n4 + 8 = 12 (left: 8 8 12)\n8 * 8 = 64 (left: 64 12)\n64 / 12 = 5.33 (left: 5.33)",
                "8 / 1 = 8 (left: 4 8 8)\n4 + 8 = 12 (left: 8 8 12)\n12 / 8 = 1.5 (left: 1.5 8)\n1.5 + 8 = 9.5 (left: 9.5)",
                "8 / 1 = 8 (left: 4 8 8)\n4 + 8 = 12 (left: 8 8 12)\n8 * 8 = 64 (left: 64 12)\n64 * 12 = 768 (left: 768)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.153237
    },
    "914": {
        "input": "1 5 10 11",
        "step_1": {
            "steps": [
                "5 * 10 = 50 (left: 1 50 11)",
                "1 * 5 = 5 (left: 5 10 11)",
                "11 - 1 = 10 (left: 5 10 11)",
                "9 / 3 = 3 (left: 3 9 27)",
                "10 + 1 = 11 (left: 5 11 11)"
            ],
            "values": [
                2.001,
                3.0,
                3.0,
                40.0,
                20.002
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 3",
                "3 <- 4",
                "4 <- 4"
            ],
            "resampled_steps": [
                "9 / 3 = 3 (left: 3 9 27)",
                "9 / 3 = 3 (left: 3 9 27)",
                "9 / 3 = 3 (left: 3 9 27)",
                "10 + 1 = 11 (left: 5 11 11)",
                "10 + 1 = 11 (left: 5 11 11)"
            ]
        },
        "step_2": {
            "steps": [
                "9 / 3 = 3 (left: 3 9 27)\n9 / 3 = 3 (left: 3 27)",
                "9 / 3 = 3 (left: 3 9 27)\n9 - 3 = 6 (left: 6 9)",
                "9 / 3 = 3 (left: 3 9 27)\n16 - 4 = 12 (left: 12 64)",
                "10 + 1 = 11 (left: 5 11 11)\n5 / 11 = 0.45 (left: 0.45 11)",
                "10 + 1 = 11 (left: 5 11 11)\n5 - 3 = 2 (left: 2 5)"
            ],
            "values": [
                20.002,
                0.003,
                0.003,
                1.002,
                60.0
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 0",
                "2 <- 4",
                "3 <- 0",
                "4 <- 4"
            ],
            "resampled_steps": [
                "10 + 1 = 11 (left: 5 11 11)\n5 - 3 = 2 (left: 2 5)",
                "9 / 3 = 3 (left: 3 9 27)\n9 / 3 = 3 (left: 3 27)",
                "10 + 1 = 11 (left: 5 11 11)\n5 - 3 = 2 (left: 2 5)",
                "9 / 3 = 3 (left: 3 9 27)\n9 / 3 = 3 (left: 3 27)",
                "10 + 1 = 11 (left: 5 11 11)\n5 - 3 = 2 (left: 2 5)"
            ]
        },
        "step_3": {
            "steps": [
                "10 + 1 = 11 (left: 5 11 11)\n5 - 3 = 2 (left: 2 5)\n2 - 5 = -3 (left: -3)",
                "9 / 3 = 3 (left: 3 9 27)\n9 / 3 = 3 (left: 3 27)\n27 - 3 = 24 (left: 24)",
                "10 + 1 = 11 (left: 5 11 11)\n5 - 3 = 2 (left: 2 5)\n5 - 2 = 3 (left: 3)",
                "9 / 3 = 3 (left: 3 9 27)\n9 / 3 = 3 (left: 3 27)\n3 * 27 = 81 (left: 81)",
                "10 + 1 = 11 (left: 5 11 11)\n5 - 3 = 2 (left: 2 5)\n2 * 5 = 10 (left: 10)"
            ],
            "values": [
                0.002,
                60.0,
                0.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 1",
                "3 <- 1",
                "4 <- 1"
            ],
            "resampled_steps": [
                "9 / 3 = 3 (left: 3 9 27)\n9 / 3 = 3 (left: 3 27)\n27 - 3 = 24 (left: 24)",
                "9 / 3 = 3 (left: 3 9 27)\n9 / 3 = 3 (left: 3 27)\n27 - 3 = 24 (left: 24)",
                "9 / 3 = 3 (left: 3 9 27)\n9 / 3 = 3 (left: 3 27)\n27 - 3 = 24 (left: 24)",
                "9 / 3 = 3 (left: 3 9 27)\n9 / 3 = 3 (left: 3 27)\n27 - 3 = 24 (left: 24)",
                "9 / 3 = 3 (left: 3 9 27)\n9 / 3 = 3 (left: 3 27)\n27 - 3 = 24 (left: 24)"
            ]
        },
        "step_4": {
            "steps": [
                "9 / 3 = 3 (left: 3 9 27)\n9 / 3 = 3 (left: 3 27)\n27 - 3 = 24 (left: 24)\nAnswer: ((1 * 5) + 10) + 11 = 24",
                "9 / 3 = 3 (left: 3 9 27)\n9 / 3 = 3 (left: 3 27)\n27 - 3 = 24 (left: 24)\nAnswer: (1 + 5) * (10 + 11) = 24",
                "9 / 3 = 3 (left: 3 9 27)\n9 / 3 = 3 (left: 3 27)\n27 - 3 = 24 (left: 24)\nAnswer: ((1 * 5) + 10) * 11 = 24",
                "9 / 3 = 3 (left: 3 9 27)\n9 / 3 = 3 (left: 3 27)\n27 - 3 = 24 (left: 24)\nAnswer: ((1 * 5) + 10) - 11 = 24",
                "9 / 3 = 3 (left: 3 9 27)\n9 / 3 = 3 (left: 3 27)\n27 - 3 = 24 (left: 24)\nAnswer: ((1 * 5) + 10) + 11 = 24"
            ],
            "values": [
                60.0,
                0.003,
                60.0,
                60.0,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.1635395
    },
    "915": {
        "input": "3 4 6 11",
        "step_1": {
            "steps": [
                "4 + 6 = 10 (left: 3 10 11)",
                "11 - 6 = 5 (left: 3 5 11)",
                "8 - 1 = 7 (left: 5 7 7)",
                "11 - 6 = 5 (left: 3 4 5)",
                "6 + 4 = 10 (left: 3 10 11)"
            ],
            "values": [
                1.002,
                3.0,
                3.0,
                3.0,
                0.003
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 3",
                "2 <- 3",
                "3 <- 0",
                "4 <- 1"
            ],
            "resampled_steps": [
                "8 - 1 = 7 (left: 5 7 7)",
                "11 - 6 = 5 (left: 3 4 5)",
                "11 - 6 = 5 (left: 3 4 5)",
                "4 + 6 = 10 (left: 3 10 11)",
                "11 - 6 = 5 (left: 3 5 11)"
            ]
        },
        "step_2": {
            "steps": [
                "8 - 1 = 7 (left: 5 7 7)\n4 / 3 = 1.33 (left: 1.33 4 4)",
                "11 - 6 = 5 (left: 3 4 5)\n5 - 4 = 1 (left: 1 5)",
                "11 - 6 = 5 (left: 3 4 5)\n5 - 4 = 1 (left: 1 5)",
                "4 + 6 = 10 (left: 3 10 11)\nInput: 4 5 20 25",
                "11 - 6 = 5 (left: 3 5 11)\nInput: 4 6 10"
            ],
            "values": [
                2.001,
                40.0,
                20.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 1",
                "3 <- 0",
                "4 <- 1"
            ],
            "resampled_steps": [
                "11 - 6 = 5 (left: 3 4 5)\n5 - 4 = 1 (left: 1 5)",
                "11 - 6 = 5 (left: 3 4 5)\n5 - 4 = 1 (left: 1 5)",
                "11 - 6 = 5 (left: 3 4 5)\n5 - 4 = 1 (left: 1 5)",
                "8 - 1 = 7 (left: 5 7 7)\n4 / 3 = 1.33 (left: 1.33 4 4)",
                "11 - 6 = 5 (left: 3 4 5)\n5 - 4 = 1 (left: 1 5)"
            ]
        },
        "step_3": {
            "steps": [
                "11 - 6 = 5 (left: 3 4 5)\n5 - 4 = 1 (left: 1 5)\n1 * 5 = 5 (left: 5)",
                "11 - 6 = 5 (left: 3 4 5)\n5 - 4 = 1 (left: 1 5)\n5 / 1 = 5 (left: 5)",
                "11 - 6 = 5 (left: 3 4 5)\n5 - 4 = 1 (left: 1 5)\n5 - 1 = 4 (left: 4)",
                "8 - 1 = 7 (left: 5 7 7)\n4 / 3 = 1.33 (left: 1.33 4 4)\n10 * 5 = 50 (left: 25 50)",
                "11 - 6 = 5 (left: 3 4 5)\n5 - 4 = 1 (left: 1 5)\n5 / 1 = 5 (left: 5)"
            ],
            "values": [
                0.002,
                0.003,
                0.003,
                60.0,
                0.001
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 3",
                "3 <- 3",
                "4 <- 3"
            ],
            "resampled_steps": [
                "8 - 1 = 7 (left: 5 7 7)\n4 / 3 = 1.33 (left: 1.33 4 4)\n10 * 5 = 50 (left: 25 50)",
                "8 - 1 = 7 (left: 5 7 7)\n4 / 3 = 1.33 (left: 1.33 4 4)\n10 * 5 = 50 (left: 25 50)",
                "8 - 1 = 7 (left: 5 7 7)\n4 / 3 = 1.33 (left: 1.33 4 4)\n10 * 5 = 50 (left: 25 50)",
                "8 - 1 = 7 (left: 5 7 7)\n4 / 3 = 1.33 (left: 1.33 4 4)\n10 * 5 = 50 (left: 25 50)",
                "8 - 1 = 7 (left: 5 7 7)\n4 / 3 = 1.33 (left: 1.33 4 4)\n10 * 5 = 50 (left: 25 50)"
            ]
        },
        "step_4": {
            "steps": [
                "8 - 1 = 7 (left: 5 7 7)\n4 / 3 = 1.33 (left: 1.33 4 4)\n10 * 5 = 50 (left: 25 50)\n25 * 50 = 1250 (left: 1250)",
                "8 - 1 = 7 (left: 5 7 7)\n4 / 3 = 1.33 (left: 1.33 4 4)\n10 * 5 = 50 (left: 25 50)\n25 * 50 = 1250 (left: 1250)",
                "8 - 1 = 7 (left: 5 7 7)\n4 / 3 = 1.33 (left: 1.33 4 4)\n10 * 5 = 50 (left: 25 50)\n25 * 50 = 1250 (left: 1250)",
                "8 - 1 = 7 (left: 5 7 7)\n4 / 3 = 1.33 (left: 1.33 4 4)\n10 * 5 = 50 (left: 25 50)\n25 - 50 = -25 (left: -25)",
                "8 - 1 = 7 (left: 5 7 7)\n4 / 3 = 1.33 (left: 1.33 4 4)\n10 * 5 = 50 (left: 25 50)\n50 / 25 = 2 (left: 2)"
            ],
            "values": [
                0.003,
                0.002,
                0.002,
                0.003,
                0.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.174608
    },
    "916": {
        "input": "2 4 8 9",
        "step_1": {
            "steps": [
                "9 / 2 = 4.5 (left: 4.5 4 8)",
                "4 + 2 = 6 (left: 6 8 9)",
                "8 - 2 = 6 (left: 4 6 9)",
                "8 + 2 = 10 (left: 4 8 9)",
                "4 * 2 = 8 (left: 8 8 9)"
            ],
            "values": [
                3.0,
                3.0,
                22.0,
                2.001,
                2.001
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 2",
                "2 <- 2",
                "3 <- 2",
                "4 <- 2"
            ],
            "resampled_steps": [
                "8 - 2 = 6 (left: 4 6 9)",
                "8 - 2 = 6 (left: 4 6 9)",
                "8 - 2 = 6 (left: 4 6 9)",
                "8 - 2 = 6 (left: 4 6 9)",
                "8 - 2 = 6 (left: 4 6 9)"
            ]
        },
        "step_2": {
            "steps": [
                "8 - 2 = 6 (left: 4 6 9)\n6 * 9 = 54 (left: 4 54)",
                "8 - 2 = 6 (left: 4 6 9)\n6 / 4 = 1.5 (left: 1.5 9)",
                "8 - 2 = 6 (left: 4 6 9)\nInput: 1 2 3 4",
                "8 - 2 = 6 (left: 4 6 9)\n9 - 7 = 2 (left: 2 5 9)",
                "8 - 2 = 6 (left: 4 6 9)\n3 * 5 = 15 (left: 7 15)"
            ],
            "values": [
                0.003,
                0.002,
                0.003,
                3.0,
                0.002
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 3",
                "3 <- 3",
                "4 <- 3"
            ],
            "resampled_steps": [
                "8 - 2 = 6 (left: 4 6 9)\n9 - 7 = 2 (left: 2 5 9)",
                "8 - 2 = 6 (left: 4 6 9)\n9 - 7 = 2 (left: 2 5 9)",
                "8 - 2 = 6 (left: 4 6 9)\n9 - 7 = 2 (left: 2 5 9)",
                "8 - 2 = 6 (left: 4 6 9)\n9 - 7 = 2 (left: 2 5 9)",
                "8 - 2 = 6 (left: 4 6 9)\n9 - 7 = 2 (left: 2 5 9)"
            ]
        },
        "step_3": {
            "steps": [
                "8 - 2 = 6 (left: 4 6 9)\n9 - 7 = 2 (left: 2 5 9)\n2 + 5 = 7 (left: 7 9)",
                "8 - 2 = 6 (left: 4 6 9)\n9 - 7 = 2 (left: 2 5 9)\n24 - 12 = 12 (left: 3 6 12)",
                "8 - 2 = 6 (left: 4 6 9)\n9 - 7 = 2 (left: 2 5 9)\nInput: 3 3 7",
                "8 - 2 = 6 (left: 4 6 9)\n9 - 7 = 2 (left: 2 5 9)\nInput: 4 7 11",
                "8 - 2 = 6 (left: 4 6 9)\n9 - 7 = 2 (left: 2 5 9)\n9 / 5 = 1.8 (left: 2 1.8)"
            ],
            "values": [
                0.002,
                0.003,
                0.003,
                0.003,
                2.001
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 4",
                "2 <- 4",
                "3 <- 4",
                "4 <- 4"
            ],
            "resampled_steps": [
                "8 - 2 = 6 (left: 4 6 9)\n9 - 7 = 2 (left: 2 5 9)\n9 / 5 = 1.8 (left: 2 1.8)",
                "8 - 2 = 6 (left: 4 6 9)\n9 - 7 = 2 (left: 2 5 9)\n9 / 5 = 1.8 (left: 2 1.8)",
                "8 - 2 = 6 (left: 4 6 9)\n9 - 7 = 2 (left: 2 5 9)\n9 / 5 = 1.8 (left: 2 1.8)",
                "8 - 2 = 6 (left: 4 6 9)\n9 - 7 = 2 (left: 2 5 9)\n9 / 5 = 1.8 (left: 2 1.8)",
                "8 - 2 = 6 (left: 4 6 9)\n9 - 7 = 2 (left: 2 5 9)\n9 / 5 = 1.8 (left: 2 1.8)"
            ]
        },
        "step_4": {
            "steps": [
                "8 - 2 = 6 (left: 4 6 9)\n9 - 7 = 2 (left: 2 5 9)\n9 / 5 = 1.8 (left: 2 1.8)\n2 + 1.8 = 3.8",
                "8 - 2 = 6 (left: 4 6 9)\n9 - 7 = 2 (left: 2 5 9)\n9 / 5 = 1.8 (left: 2 1.8)\n2 + 1.8 = 3.8",
                "8 - 2 = 6 (left: 4 6 9)\n9 - 7 = 2 (left: 2 5 9)\n9 / 5 = 1.8 (left: 2 1.8)\n2 - 1.8 = 0.2 (left: 0.2)",
                "8 - 2 = 6 (left: 4 6 9)\n9 - 7 = 2 (left: 2 5 9)\n9 / 5 = 1.8 (left: 2 1.8)\n2 / 1.8 = 1.1111 (left: 1.1111)",
                "8 - 2 = 6 (left: 4 6 9)\n9 - 7 = 2 (left: 2 5 9)\n9 / 5 = 1.8 (left: 2 1.8)\n2 - 1.8 = 0.2 (left: 0.2 1.8)"
            ],
            "values": [
                0.003,
                0.003,
                0.0,
                0.003,
                1.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.18715
    },
    "917": {
        "input": "1 4 5 13",
        "step_1": {
            "steps": [
                "10 - 7 = 3 (left: 3 6 10)",
                "13 - 4 = 9 (left: 1 5 9)",
                "4 + 5 = 9 (left: 1 9 13)",
                "5 + 1 = 6 (left: 6 4 13)",
                "5 + 1 = 6 (left: 4 6 13)"
            ],
            "values": [
                2.001,
                3.0,
                2.001,
                60.0,
                41.0
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 0",
                "2 <- 3",
                "3 <- 4",
                "4 <- 3"
            ],
            "resampled_steps": [
                "5 + 1 = 6 (left: 4 6 13)",
                "10 - 7 = 3 (left: 3 6 10)",
                "5 + 1 = 6 (left: 6 4 13)",
                "5 + 1 = 6 (left: 4 6 13)",
                "5 + 1 = 6 (left: 6 4 13)"
            ]
        },
        "step_2": {
            "steps": [
                "5 + 1 = 6 (left: 4 6 13)\n6 * 13 = 78 (left: 4 78)",
                "10 - 7 = 3 (left: 3 6 10)\n4 - 5 = -1 (left: -1 7 9)",
                "5 + 1 = 6 (left: 6 4 13)\n6 * 4 = 24 (left: 24 13)",
                "5 + 1 = 6 (left: 4 6 13)\n6 / 4 = 1.5 (left: 1.5 13)",
                "5 + 1 = 6 (left: 6 4 13)\n5 / 7 = 0.71 (left: 9 0.71)"
            ],
            "values": [
                20.0,
                1.002,
                0.003,
                1.001,
                1.001
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 0",
                "2 <- 0",
                "3 <- 0",
                "4 <- 1"
            ],
            "resampled_steps": [
                "5 + 1 = 6 (left: 4 6 13)\n6 / 4 = 1.5 (left: 1.5 13)",
                "5 + 1 = 6 (left: 4 6 13)\n6 * 13 = 78 (left: 4 78)",
                "5 + 1 = 6 (left: 4 6 13)\n6 * 13 = 78 (left: 4 78)",
                "5 + 1 = 6 (left: 4 6 13)\n6 * 13 = 78 (left: 4 78)",
                "10 - 7 = 3 (left: 3 6 10)\n4 - 5 = -1 (left: -1 7 9)"
            ]
        },
        "step_3": {
            "steps": [
                "5 + 1 = 6 (left: 4 6 13)\n6 / 4 = 1.5 (left: 1.5 13)\n1.5 + 13 = 14.5 (left: 14.5)",
                "5 + 1 = 6 (left: 4 6 13)\n6 * 13 = 78 (left: 4 78)\nInput: 5 25",
                "5 + 1 = 6 (left: 4 6 13)\n6 * 13 = 78 (left: 4 78)\n4 * 78 = 312 (left: 312)",
                "5 + 1 = 6 (left: 4 6 13)\n6 * 13 = 78 (left: 4 78)\n78 - 4 = 74 (left: 74)",
                "10 - 7 = 3 (left: 3 6 10)\n4 - 5 = -1 (left: -1 7 9)\n-1 - 7 = -8 (left: -8 9)"
            ],
            "values": [
                0.002,
                0.003,
                0.001,
                0.003,
                2.001
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 4",
                "2 <- 4",
                "3 <- 4",
                "4 <- 4"
            ],
            "resampled_steps": [
                "10 - 7 = 3 (left: 3 6 10)\n4 - 5 = -1 (left: -1 7 9)\n-1 - 7 = -8 (left: -8 9)",
                "10 - 7 = 3 (left: 3 6 10)\n4 - 5 = -1 (left: -1 7 9)\n-1 - 7 = -8 (left: -8 9)",
                "10 - 7 = 3 (left: 3 6 10)\n4 - 5 = -1 (left: -1 7 9)\n-1 - 7 = -8 (left: -8 9)",
                "10 - 7 = 3 (left: 3 6 10)\n4 - 5 = -1 (left: -1 7 9)\n-1 - 7 = -8 (left: -8 9)",
                "10 - 7 = 3 (left: 3 6 10)\n4 - 5 = -1 (left: -1 7 9)\n-1 - 7 = -8 (left: -8 9)"
            ]
        },
        "step_4": {
            "steps": [
                "10 - 7 = 3 (left: 3 6 10)\n4 - 5 = -1 (left: -1 7 9)\n-1 - 7 = -8 (left: -8 9)\n-8 / 9 = -0.888888888888889 (left: -0.888888888888889)",
                "10 - 7 = 3 (left: 3 6 10)\n4 - 5 = -1 (left: -1 7 9)\n-1 - 7 = -8 (left: -8 9)\n-8 / 9 = -0.888888889 (left: -0.888888889)",
                "10 - 7 = 3 (left: 3 6 10)\n4 - 5 = -1 (left: -1 7 9)\n-1 - 7 = -8 (left: -8 9)\n-8 * 9 = -72 (left: -72)",
                "10 - 7 = 3 (left: 3 6 10)\n4 - 5 = -1 (left: -1 7 9)\n-1 - 7 = -8 (left: -8 9)\n-8 - 9 = -17 (left: -17)",
                "10 - 7 = 3 (left: 3 6 10)\n4 - 5 = -1 (left: -1 7 9)\n-1 - 7 = -8 (left: -8 9)\n-8 / 9 = -0.8889 (left: -0.8889)"
            ],
            "values": [
                0.001,
                1.001,
                0.002,
                0.003,
                0.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.198627
    },
    "918": {
        "input": "2 2 7 12",
        "step_1": {
            "steps": [
                "12 - 2 = 10 (left: 2 7 10)",
                "2 + 2 = 4 (left: 4 7 12)",
                "2 * 7 = 14 (left: 14 2 12)",
                "7 + 2 = 9 (left: 2 4 9)",
                "12 / 2 = 6 (left: 2 6 12)"
            ],
            "values": [
                41.0,
                2.001,
                1.002,
                1.002,
                1.002
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 0",
                "3 <- 0",
                "4 <- 0"
            ],
            "resampled_steps": [
                "12 - 2 = 10 (left: 2 7 10)",
                "12 - 2 = 10 (left: 2 7 10)",
                "12 - 2 = 10 (left: 2 7 10)",
                "12 - 2 = 10 (left: 2 7 10)",
                "12 - 2 = 10 (left: 2 7 10)"
            ]
        },
        "step_2": {
            "steps": [
                "12 - 2 = 10 (left: 2 7 10)\n10 - 2 = 8 (left: 8 10)",
                "12 - 2 = 10 (left: 2 7 10)\n10 / 2 = 5 (left: 5 10)",
                "12 - 2 = 10 (left: 2 7 10)\n10 - 2 = 8 (left: 8 7)",
                "12 - 2 = 10 (left: 2 7 10)\n2 + 7 = 9 (left: 9 10)",
                "12 - 2 = 10 (left: 2 7 10)\n10 - 2 = 8 (left: 7 8)"
            ],
            "values": [
                0.003,
                1.001,
                0.003,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 1",
                "3 <- 1",
                "4 <- 1"
            ],
            "resampled_steps": [
                "12 - 2 = 10 (left: 2 7 10)\n10 / 2 = 5 (left: 5 10)",
                "12 - 2 = 10 (left: 2 7 10)\n10 / 2 = 5 (left: 5 10)",
                "12 - 2 = 10 (left: 2 7 10)\n10 / 2 = 5 (left: 5 10)",
                "12 - 2 = 10 (left: 2 7 10)\n10 / 2 = 5 (left: 5 10)",
                "12 - 2 = 10 (left: 2 7 10)\n10 / 2 = 5 (left: 5 10)"
            ]
        },
        "step_3": {
            "steps": [
                "12 - 2 = 10 (left: 2 7 10)\n10 / 2 = 5 (left: 5 10)\n10 - 5 = 5 (left: 5 10)",
                "12 - 2 = 10 (left: 2 7 10)\n10 / 2 = 5 (left: 5 10)\n5 + 10 = 15 (left: 15)",
                "12 - 2 = 10 (left: 2 7 10)\n10 / 2 = 5 (left: 5 10)\n9 / 3 = 3 (left: 3)",
                "12 - 2 = 10 (left: 2 7 10)\n10 / 2 = 5 (left: 5 10)\nPossible next steps:",
                "12 - 2 = 10 (left: 2 7 10)\n10 / 2 = 5 (left: 5 10)\n5 / 10 = 0.5 (left: 0.5)"
            ],
            "values": [
                20.002,
                0.002,
                0.003,
                0.003,
                1.0
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 0",
                "3 <- 0",
                "4 <- 0"
            ],
            "resampled_steps": [
                "12 - 2 = 10 (left: 2 7 10)\n10 / 2 = 5 (left: 5 10)\n10 - 5 = 5 (left: 5 10)",
                "12 - 2 = 10 (left: 2 7 10)\n10 / 2 = 5 (left: 5 10)\n10 - 5 = 5 (left: 5 10)",
                "12 - 2 = 10 (left: 2 7 10)\n10 / 2 = 5 (left: 5 10)\n10 - 5 = 5 (left: 5 10)",
                "12 - 2 = 10 (left: 2 7 10)\n10 / 2 = 5 (left: 5 10)\n10 - 5 = 5 (left: 5 10)",
                "12 - 2 = 10 (left: 2 7 10)\n10 / 2 = 5 (left: 5 10)\n10 - 5 = 5 (left: 5 10)"
            ]
        },
        "step_4": {
            "steps": [
                "12 - 2 = 10 (left: 2 7 10)\n10 / 2 = 5 (left: 5 10)\n10 - 5 = 5 (left: 5 10)\n3 * 6 = 18 (left: 9 18)",
                "12 - 2 = 10 (left: 2 7 10)\n10 / 2 = 5 (left: 5 10)\n10 - 5 = 5 (left: 5 10)\n10 - 5 = 5 (left: 5)",
                "12 - 2 = 10 (left: 2 7 10)\n10 / 2 = 5 (left: 5 10)\n10 - 5 = 5 (left: 5 10)\n5 + 10 = 15 (left: 15)",
                "12 - 2 = 10 (left: 2 7 10)\n10 / 2 = 5 (left: 5 10)\n10 - 5 = 5 (left: 5 10)\n5 + 10 = 15 (left: 15)",
                "12 - 2 = 10 (left: 2 7 10)\n10 / 2 = 5 (left: 5 10)\n10 - 5 = 5 (left: 5 10)\n10 - 5 = 5 (left: 5)"
            ],
            "values": [
                0.003,
                0.001,
                0.003,
                0.001,
                0.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.2094375
    },
    "919": {
        "input": "3 3 6 7",
        "step_1": {
            "steps": [
                "7 - 3 = 4 (left: 3 6 4)",
                "3 - 1 = 2 (left: 2 4 2)",
                "7 - 4 = 3 (left: 2 3 8)",
                "6 / 3 = 2 (left: 3 2 7)",
                "7 - 3 = 4 (left: 3 4 7)"
            ],
            "values": [
                3.0,
                3.0,
                1.002,
                2.001,
                1.0
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 3",
                "2 <- 1",
                "3 <- 3",
                "4 <- 3"
            ],
            "resampled_steps": [
                "3 - 1 = 2 (left: 2 4 2)",
                "6 / 3 = 2 (left: 3 2 7)",
                "3 - 1 = 2 (left: 2 4 2)",
                "6 / 3 = 2 (left: 3 2 7)",
                "6 / 3 = 2 (left: 3 2 7)"
            ]
        },
        "step_2": {
            "steps": [
                "3 - 1 = 2 (left: 2 4 2)\n2 * 4 = 8 (left: 8 2)",
                "6 / 3 = 2 (left: 3 2 7)\n3 * 7 = 21 (left: 21)",
                "3 - 1 = 2 (left: 2 4 2)\n5 + 3 = 8 (left: 8 10)",
                "6 / 3 = 2 (left: 3 2 7)\n3 + 2 = 5 (left: 5 7)",
                "6 / 3 = 2 (left: 3 2 7)\n3 + 2 = 5 (left: 5 7)"
            ],
            "values": [
                1.002,
                20.001,
                0.001,
                0.0,
                0.0
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 1",
                "3 <- 1",
                "4 <- 1"
            ],
            "resampled_steps": [
                "6 / 3 = 2 (left: 3 2 7)\n3 * 7 = 21 (left: 21)",
                "6 / 3 = 2 (left: 3 2 7)\n3 * 7 = 21 (left: 21)",
                "6 / 3 = 2 (left: 3 2 7)\n3 * 7 = 21 (left: 21)",
                "6 / 3 = 2 (left: 3 2 7)\n3 * 7 = 21 (left: 21)",
                "6 / 3 = 2 (left: 3 2 7)\n3 * 7 = 21 (left: 21)"
            ]
        },
        "step_3": {
            "steps": [
                "6 / 3 = 2 (left: 3 2 7)\n3 * 7 = 21 (left: 21)\nThere are no possible next steps with just the number 21.",
                "6 / 3 = 2 (left: 3 2 7)\n3 * 7 = 21 (left: 21)\n21 + 2 = 23",
                "6 / 3 = 2 (left: 3 2 7)\n3 * 7 = 21 (left: 21)\nNone, as there is only one number provided.",
                "6 / 3 = 2 (left: 3 2 7)\n3 * 7 = 21 (left: 21)\nNone, as there is only one number provided.",
                "6 / 3 = 2 (left: 3 2 7)\n3 * 7 = 21 (left: 21)\n21 + 2 = 23"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 2",
                "2 <- 3",
                "3 <- 1",
                "4 <- 2"
            ],
            "resampled_steps": [
                "6 / 3 = 2 (left: 3 2 7)\n3 * 7 = 21 (left: 21)\nNone, as there is only one number provided.",
                "6 / 3 = 2 (left: 3 2 7)\n3 * 7 = 21 (left: 21)\nNone, as there is only one number provided.",
                "6 / 3 = 2 (left: 3 2 7)\n3 * 7 = 21 (left: 21)\nNone, as there is only one number provided.",
                "6 / 3 = 2 (left: 3 2 7)\n3 * 7 = 21 (left: 21)\n21 + 2 = 23",
                "6 / 3 = 2 (left: 3 2 7)\n3 * 7 = 21 (left: 21)\nNone, as there is only one number provided."
            ]
        },
        "step_4": {
            "steps": [
                "6 / 3 = 2 (left: 3 2 7)\n3 * 7 = 21 (left: 21)\nNone, as there is only one number provided.\nThere is only one number provided, so there are no possible next steps.",
                "6 / 3 = 2 (left: 3 2 7)\n3 * 7 = 21 (left: 21)\nNone, as there is only one number provided.\nThere are no possible next steps as there is only one number provided.",
                "6 / 3 = 2 (left: 3 2 7)\n3 * 7 = 21 (left: 21)\nNone, as there is only one number provided.\nThere are no possible next steps as there is only one number provided.",
                "6 / 3 = 2 (left: 3 2 7)\n3 * 7 = 21 (left: 21)\n21 + 2 = 23\n2 * 21 = 42 (left: 42)",
                "6 / 3 = 2 (left: 3 2 7)\n3 * 7 = 21 (left: 21)\nNone, as there is only one number provided.\nThere are no possible next steps as there is only one number provided."
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.21972950000000002
    },
    "920": {
        "input": "1 5 9 13",
        "step_1": {
            "steps": [
                "1 * 5 = 5 (left: 5 9 13)",
                "1 * 5 = 5 (left: 5 9 13)",
                "13 - 1 = 12 (left: 5 9 12)",
                "5 - 1 = 4 (left: 4 9 13)",
                "1 * 5 = 5 (left: 5 9 13)"
            ],
            "values": [
                1.002,
                1.002,
                0.003,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 1",
                "3 <- 3",
                "4 <- 1"
            ],
            "resampled_steps": [
                "5 - 1 = 4 (left: 4 9 13)",
                "5 - 1 = 4 (left: 4 9 13)",
                "1 * 5 = 5 (left: 5 9 13)",
                "5 - 1 = 4 (left: 4 9 13)",
                "1 * 5 = 5 (left: 5 9 13)"
            ]
        },
        "step_2": {
            "steps": [
                "5 - 1 = 4 (left: 4 9 13)\n4 / 9 = 0.44 (left: 0.44)",
                "5 - 1 = 4 (left: 4 9 13)\n9 + 4 = 13 (left: 13)",
                "1 * 5 = 5 (left: 5 9 13)\n7 / 3 = 2.33 (left: 2.33 11 15)",
                "5 - 1 = 4 (left: 4 9 13)\n12 - 9 = 3 (left: 3 9)",
                "1 * 5 = 5 (left: 5 9 13)\n9 / 5 = 1.8 (left: 1.8 13)"
            ],
            "values": [
                0.003,
                0.002,
                2.001,
                0.003,
                1.001
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 2",
                "2 <- 4",
                "3 <- 2",
                "4 <- 2"
            ],
            "resampled_steps": [
                "1 * 5 = 5 (left: 5 9 13)\n9 / 5 = 1.8 (left: 1.8 13)",
                "1 * 5 = 5 (left: 5 9 13)\n7 / 3 = 2.33 (left: 2.33 11 15)",
                "1 * 5 = 5 (left: 5 9 13)\n9 / 5 = 1.8 (left: 1.8 13)",
                "1 * 5 = 5 (left: 5 9 13)\n7 / 3 = 2.33 (left: 2.33 11 15)",
                "1 * 5 = 5 (left: 5 9 13)\n7 / 3 = 2.33 (left: 2.33 11 15)"
            ]
        },
        "step_3": {
            "steps": [
                "1 * 5 = 5 (left: 5 9 13)\n9 / 5 = 1.8 (left: 1.8 13)\n1.8 * 13 = 23.4 (left: 23.4)",
                "1 * 5 = 5 (left: 5 9 13)\n7 / 3 = 2.33 (left: 2.33 11 15)\n15 + 2.33 = 17.33 (left: 11 17.33)",
                "1 * 5 = 5 (left: 5 9 13)\n9 / 5 = 1.8 (left: 1.8 13)\n1.8 + 13 = 14.8 (left: 14.8)",
                "1 * 5 = 5 (left: 5 9 13)\n7 / 3 = 2.33 (left: 2.33 11 15)\n15 / 2.33 = 6.44 (left: 6.44 15)",
                "1 * 5 = 5 (left: 5 9 13)\n7 / 3 = 2.33 (left: 2.33 11 15)\n2.33 * 11 = 25.63 (left: 15 25.63)"
            ],
            "values": [
                0.002,
                0.002,
                0.003,
                2.0,
                0.001
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 3",
                "3 <- 3",
                "4 <- 3"
            ],
            "resampled_steps": [
                "1 * 5 = 5 (left: 5 9 13)\n7 / 3 = 2.33 (left: 2.33 11 15)\n15 / 2.33 = 6.44 (left: 6.44 15)",
                "1 * 5 = 5 (left: 5 9 13)\n7 / 3 = 2.33 (left: 2.33 11 15)\n15 / 2.33 = 6.44 (left: 6.44 15)",
                "1 * 5 = 5 (left: 5 9 13)\n7 / 3 = 2.33 (left: 2.33 11 15)\n15 / 2.33 = 6.44 (left: 6.44 15)",
                "1 * 5 = 5 (left: 5 9 13)\n7 / 3 = 2.33 (left: 2.33 11 15)\n15 / 2.33 = 6.44 (left: 6.44 15)",
                "1 * 5 = 5 (left: 5 9 13)\n7 / 3 = 2.33 (left: 2.33 11 15)\n15 / 2.33 = 6.44 (left: 6.44 15)"
            ]
        },
        "step_4": {
            "steps": [
                "1 * 5 = 5 (left: 5 9 13)\n7 / 3 = 2.33 (left: 2.33 11 15)\n15 / 2.33 = 6.44 (left: 6.44 15)\n6.44 * 15 = 96.6 (left: 15 96.6)",
                "1 * 5 = 5 (left: 5 9 13)\n7 / 3 = 2.33 (left: 2.33 11 15)\n15 / 2.33 = 6.44 (left: 6.44 15)\n15 - 6.44 = 8.56 (left: 8.56)",
                "1 * 5 = 5 (left: 5 9 13)\n7 / 3 = 2.33 (left: 2.33 11 15)\n15 / 2.33 = 6.44 (left: 6.44 15)\n15 - 6.44 = 8.56 (left: 6.44 8.56)",
                "1 * 5 = 5 (left: 5 9 13)\n7 / 3 = 2.33 (left: 2.33 11 15)\n15 / 2.33 = 6.44 (left: 6.44 15)\n15 - 6.44 = 8.56 (left: 6.44 8.56)",
                "1 * 5 = 5 (left: 5 9 13)\n7 / 3 = 2.33 (left: 2.33 11 15)\n15 / 2.33 = 6.44 (left: 6.44 15)\n6.44 + 15 = 21.44 (left: 15 21.44)"
            ],
            "values": [
                0.002,
                0.002,
                3.0,
                3.0,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.23228300000000002
    },
    "921": {
        "input": "5 6 7 13",
        "step_1": {
            "steps": [
                "Input: 4 9 3 12",
                "5 + 6 = 11 (left: 7 11 13)",
                "5 * 6 = 30 (left: 7 13 30)",
                "6 / 5 = 1.2 (left: 1.2 7 13)",
                "13 - 6 = 7 (left: 5 7 7)"
            ],
            "values": [
                0.003,
                21.001,
                1.002,
                3.0,
                3.0
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 1",
                "2 <- 1",
                "3 <- 3",
                "4 <- 4"
            ],
            "resampled_steps": [
                "6 / 5 = 1.2 (left: 1.2 7 13)",
                "5 + 6 = 11 (left: 7 11 13)",
                "5 + 6 = 11 (left: 7 11 13)",
                "6 / 5 = 1.2 (left: 1.2 7 13)",
                "13 - 6 = 7 (left: 5 7 7)"
            ]
        },
        "step_2": {
            "steps": [
                "6 / 5 = 1.2 (left: 1.2 7 13)\n13 / 1.2 = 10.833 (left: 7 10.833)",
                "5 + 6 = 11 (left: 7 11 13)\n11 + 13 = 24 (left: 7 24)",
                "5 + 6 = 11 (left: 7 11 13)\n7 + 11 = 18 (left: 11 13 18)",
                "6 / 5 = 1.2 (left: 1.2 7 13)\n13 - 1.2 = 11.8 (left: 7 11.8)",
                "13 - 6 = 7 (left: 5 7 7)\n7 - 5 = 2 (left: 2 7)"
            ],
            "values": [
                3.0,
                1.002,
                0.003,
                2.0,
                0.002
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 0",
                "3 <- 3",
                "4 <- 0"
            ],
            "resampled_steps": [
                "6 / 5 = 1.2 (left: 1.2 7 13)\n13 / 1.2 = 10.833 (left: 7 10.833)",
                "6 / 5 = 1.2 (left: 1.2 7 13)\n13 / 1.2 = 10.833 (left: 7 10.833)",
                "6 / 5 = 1.2 (left: 1.2 7 13)\n13 / 1.2 = 10.833 (left: 7 10.833)",
                "6 / 5 = 1.2 (left: 1.2 7 13)\n13 - 1.2 = 11.8 (left: 7 11.8)",
                "6 / 5 = 1.2 (left: 1.2 7 13)\n13 / 1.2 = 10.833 (left: 7 10.833)"
            ]
        },
        "step_3": {
            "steps": [
                "6 / 5 = 1.2 (left: 1.2 7 13)\n13 / 1.2 = 10.833 (left: 7 10.833)\n10.833 - 7 = 3.833",
                "6 / 5 = 1.2 (left: 1.2 7 13)\n13 / 1.2 = 10.833 (left: 7 10.833)\n7 * 10.833 = 75.831 (left: 10.833 75.831)",
                "6 / 5 = 1.2 (left: 1.2 7 13)\n13 / 1.2 = 10.833 (left: 7 10.833)\n7 + 10.833 = 17.833 (left: 10.833 17.833)",
                "6 / 5 = 1.2 (left: 1.2 7 13)\n13 - 1.2 = 11.8 (left: 7 11.8)\n7 * 11.8 = 82.6 (left: 82.6)",
                "6 / 5 = 1.2 (left: 1.2 7 13)\n13 / 1.2 = 10.833 (left: 7 10.833)\n10.833 / 7 = 1.54757142857 (left: 1.54757142857)"
            ],
            "values": [
                0.003,
                2.0,
                2.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 2",
                "2 <- 1",
                "3 <- 1",
                "4 <- 2"
            ],
            "resampled_steps": [
                "6 / 5 = 1.2 (left: 1.2 7 13)\n13 / 1.2 = 10.833 (left: 7 10.833)\n7 + 10.833 = 17.833 (left: 10.833 17.833)",
                "6 / 5 = 1.2 (left: 1.2 7 13)\n13 / 1.2 = 10.833 (left: 7 10.833)\n7 + 10.833 = 17.833 (left: 10.833 17.833)",
                "6 / 5 = 1.2 (left: 1.2 7 13)\n13 / 1.2 = 10.833 (left: 7 10.833)\n7 * 10.833 = 75.831 (left: 10.833 75.831)",
                "6 / 5 = 1.2 (left: 1.2 7 13)\n13 / 1.2 = 10.833 (left: 7 10.833)\n7 * 10.833 = 75.831 (left: 10.833 75.831)",
                "6 / 5 = 1.2 (left: 1.2 7 13)\n13 / 1.2 = 10.833 (left: 7 10.833)\n7 + 10.833 = 17.833 (left: 10.833 17.833)"
            ]
        },
        "step_4": {
            "steps": [
                "6 / 5 = 1.2 (left: 1.2 7 13)\n13 / 1.2 = 10.833 (left: 7 10.833)\n7 + 10.833 = 17.833 (left: 10.833 17.833)\n10.833 + 17.833 = 28.666 (left: 17.833 28.666)",
                "6 / 5 = 1.2 (left: 1.2 7 13)\n13 / 1.2 = 10.833 (left: 7 10.833)\n7 + 10.833 = 17.833 (left: 10.833 17.833)\n10.833 / 17.833 \u2248 0.606 (left: 0.606)",
                "6 / 5 = 1.2 (left: 1.2 7 13)\n13 / 1.2 = 10.833 (left: 7 10.833)\n7 * 10.833 = 75.831 (left: 10.833 75.831)\n10.833 + 75.831 = 86.664 (left: 86.664)",
                "6 / 5 = 1.2 (left: 1.2 7 13)\n13 / 1.2 = 10.833 (left: 7 10.833)\n7 * 10.833 = 75.831 (left: 10.833 75.831)\n10.833 * 75.831 = 820.615 (left: 820.615)",
                "6 / 5 = 1.2 (left: 1.2 7 13)\n13 / 1.2 = 10.833 (left: 7 10.833)\n7 + 10.833 = 17.833 (left: 10.833 17.833)\n10.833 * 17.833 = 193.320889 (left: 193.320889)"
            ],
            "values": [
                1.002,
                0.003,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.244457
    },
    "922": {
        "input": "5 5 8 10",
        "step_1": {
            "steps": [
                "10 / 5 = 2 (left: 5 8 2)",
                "5 + 5 = 10 (left: 8 10 10)",
                "5 + 5 = 10 (left: 8 10 10)",
                "Input: 3 9 12 15",
                "10 - 5 = 5 (left: 5 8 10)"
            ],
            "values": [
                2.001,
                3.0,
                3.0,
                0.003,
                3.0
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 4",
                "2 <- 4",
                "3 <- 4",
                "4 <- 0"
            ],
            "resampled_steps": [
                "10 - 5 = 5 (left: 5 8 10)",
                "10 - 5 = 5 (left: 5 8 10)",
                "10 - 5 = 5 (left: 5 8 10)",
                "10 - 5 = 5 (left: 5 8 10)",
                "10 / 5 = 2 (left: 5 8 2)"
            ]
        },
        "step_2": {
            "steps": [
                "10 - 5 = 5 (left: 5 8 10)\n7 * 3 = 21 (left: 21 9)",
                "10 - 5 = 5 (left: 5 8 10)\n8 / 5 = 1.6 (left: 1.6 10)",
                "10 - 5 = 5 (left: 5 8 10)\n10 - 5 = 5 (left: 5 8)",
                "10 - 5 = 5 (left: 5 8 10)\n10 - 5 = 5 (left: 5 10)",
                "10 / 5 = 2 (left: 5 8 2)\n8 - 2 = 6 (left: 5 6)"
            ],
            "values": [
                0.003,
                0.001,
                0.003,
                1.001,
                1.002
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 4",
                "3 <- 2",
                "4 <- 3"
            ],
            "resampled_steps": [
                "10 - 5 = 5 (left: 5 8 10)\n10 - 5 = 5 (left: 5 10)",
                "10 - 5 = 5 (left: 5 8 10)\n10 - 5 = 5 (left: 5 10)",
                "10 / 5 = 2 (left: 5 8 2)\n8 - 2 = 6 (left: 5 6)",
                "10 - 5 = 5 (left: 5 8 10)\n10 - 5 = 5 (left: 5 8)",
                "10 - 5 = 5 (left: 5 8 10)\n10 - 5 = 5 (left: 5 10)"
            ]
        },
        "step_3": {
            "steps": [
                "10 - 5 = 5 (left: 5 8 10)\n10 - 5 = 5 (left: 5 10)\n5 * 10 = 50 (left: 50)",
                "10 - 5 = 5 (left: 5 8 10)\n10 - 5 = 5 (left: 5 10)\n10 / 5 = 2 (left: 2)",
                "10 / 5 = 2 (left: 5 8 2)\n8 - 2 = 6 (left: 5 6)\n5 * 6 = 30 (left: 30)",
                "10 - 5 = 5 (left: 5 8 10)\n10 - 5 = 5 (left: 5 8)\n8 - 5 = 3 (left: 3)",
                "10 - 5 = 5 (left: 5 8 10)\n10 - 5 = 5 (left: 5 10)\n10 + 5 = 15 (left: 15)"
            ],
            "values": [
                0.003,
                0.003,
                0.002,
                1.0,
                0.001
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 3",
                "3 <- 3",
                "4 <- 3"
            ],
            "resampled_steps": [
                "10 - 5 = 5 (left: 5 8 10)\n10 - 5 = 5 (left: 5 8)\n8 - 5 = 3 (left: 3)",
                "10 - 5 = 5 (left: 5 8 10)\n10 - 5 = 5 (left: 5 8)\n8 - 5 = 3 (left: 3)",
                "10 - 5 = 5 (left: 5 8 10)\n10 - 5 = 5 (left: 5 8)\n8 - 5 = 3 (left: 3)",
                "10 - 5 = 5 (left: 5 8 10)\n10 - 5 = 5 (left: 5 8)\n8 - 5 = 3 (left: 3)",
                "10 - 5 = 5 (left: 5 8 10)\n10 - 5 = 5 (left: 5 8)\n8 - 5 = 3 (left: 3)"
            ]
        },
        "step_4": {
            "steps": [
                "10 - 5 = 5 (left: 5 8 10)\n10 - 5 = 5 (left: 5 8)\n8 - 5 = 3 (left: 3)\nThere are no possible next steps with only one number.",
                "10 - 5 = 5 (left: 5 8 10)\n10 - 5 = 5 (left: 5 8)\n8 - 5 = 3 (left: 3)\nCannot provide possible next steps with only one input number.",
                "10 - 5 = 5 (left: 5 8 10)\n10 - 5 = 5 (left: 5 8)\n8 - 5 = 3 (left: 3)\n3 * 3 = 9 (left: 9)",
                "10 - 5 = 5 (left: 5 8 10)\n10 - 5 = 5 (left: 5 8)\n8 - 5 = 3 (left: 3)\nThere are no possible next steps with the input 3.",
                "10 - 5 = 5 (left: 5 8 10)\n10 - 5 = 5 (left: 5 8)\n8 - 5 = 3 (left: 3)\n8 + 3 = 11 (left: 3 11)"
            ],
            "values": [
                0.003,
                0.003,
                0.002,
                0.003,
                1.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.255478
    },
    "923": {
        "input": "2 4 6 12",
        "step_1": {
            "steps": [
                "6 * 2 = 12 (left: 4 12 12)",
                "2 + 4 = 6 (left: 6 6 12)",
                "12 - 6 = 6 (left: 2 4 6)",
                "6 * 2 = 12 (left: 4 12 12)",
                "10 - 6 = 4 (left: 2 4 6)"
            ],
            "values": [
                2.0,
                41.0,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 1",
                "3 <- 1",
                "4 <- 1"
            ],
            "resampled_steps": [
                "2 + 4 = 6 (left: 6 6 12)",
                "2 + 4 = 6 (left: 6 6 12)",
                "2 + 4 = 6 (left: 6 6 12)",
                "2 + 4 = 6 (left: 6 6 12)",
                "2 + 4 = 6 (left: 6 6 12)"
            ]
        },
        "step_2": {
            "steps": [
                "2 + 4 = 6 (left: 6 6 12)\n6 / 6 = 1 (left: 1 12)",
                "2 + 4 = 6 (left: 6 6 12)\n12 * 1 = 12 (left: 12 12)",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "2 + 4 = 6 (left: 6 6 12)\n1 - 0 = 1 (left: 1)"
            ],
            "values": [
                0.002,
                40.001,
                40.001,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 2",
                "2 <- 3",
                "3 <- 1",
                "4 <- 1"
            ],
            "resampled_steps": [
                "2 + 4 = 6 (left: 6 6 12)\n12 * 1 = 12 (left: 12 12)",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "2 + 4 = 6 (left: 6 6 12)\n12 * 1 = 12 (left: 12 12)",
                "2 + 4 = 6 (left: 6 6 12)\n12 * 1 = 12 (left: 12 12)"
            ]
        },
        "step_3": {
            "steps": [
                "2 + 4 = 6 (left: 6 6 12)\n12 * 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24",
                "2 + 4 = 6 (left: 6 6 12)\n12 * 1 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)",
                "2 + 4 = 6 (left: 6 6 12)\n12 * 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.001
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 2",
                "2 <- 4",
                "3 <- 0",
                "4 <- 0"
            ],
            "resampled_steps": [
                "2 + 4 = 6 (left: 6 6 12)\n12 * 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24",
                "2 + 4 = 6 (left: 6 6 12)\n12 * 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "2 + 4 = 6 (left: 6 6 12)\n12 * 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "2 + 4 = 6 (left: 6 6 12)\n12 * 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)"
            ]
        },
        "step_4": {
            "steps": [
                "2 + 4 = 6 (left: 6 6 12)\n12 * 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)\nThere are no possible next steps as there is no input provided.",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24\n12 / 12 = 1 (left: 1 12 24)",
                "2 + 4 = 6 (left: 6 6 12)\n12 * 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)\nThere are no possible next steps as there are no numbers provided in the input.",
                "2 + 4 = 6 (left: 6 6 12)\n12 * 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)\nNo possible next steps, as there is no input provided.",
                "2 + 4 = 6 (left: 6 6 12)\n12 * 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)\nNo possible next steps as there are no numbers provided."
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.26486750000000003
    },
    "924": {
        "input": "6 7 8 11",
        "step_1": {
            "steps": [
                "11 - 6 = 5 (left: 5 7 8)",
                "8 - 6 = 2 (left: 2 7 11)",
                "8 / 6 = 1.33 (left: 1.33 7 11)",
                "7 * 8 = 56 (left: 6 11 56)",
                "8 - 6 = 2 (left: 2 7 11)"
            ],
            "values": [
                3.0,
                0.003,
                2.001,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 3",
                "3 <- 0",
                "4 <- 0"
            ],
            "resampled_steps": [
                "11 - 6 = 5 (left: 5 7 8)",
                "11 - 6 = 5 (left: 5 7 8)",
                "7 * 8 = 56 (left: 6 11 56)",
                "11 - 6 = 5 (left: 5 7 8)",
                "11 - 6 = 5 (left: 5 7 8)"
            ]
        },
        "step_2": {
            "steps": [
                "11 - 6 = 5 (left: 5 7 8)\n8 / 5 = 1.6 (left: 1.6 8)",
                "11 - 6 = 5 (left: 5 7 8)\n9 / 3 = 3 (left: 3 12 15)",
                "7 * 8 = 56 (left: 6 11 56)\n11 - 6 = 5 (left: 5 11 56)",
                "11 - 6 = 5 (left: 5 7 8)\n7 - 5 = 2 (left: 2 8)",
                "11 - 6 = 5 (left: 5 7 8)\n3 + 9 = 12 (left: 6 12 3)"
            ],
            "values": [
                2.001,
                2.001,
                2.001,
                0.003,
                2.001
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 1",
                "2 <- 0",
                "3 <- 2",
                "4 <- 1"
            ],
            "resampled_steps": [
                "11 - 6 = 5 (left: 5 7 8)\n3 + 9 = 12 (left: 6 12 3)",
                "11 - 6 = 5 (left: 5 7 8)\n9 / 3 = 3 (left: 3 12 15)",
                "11 - 6 = 5 (left: 5 7 8)\n8 / 5 = 1.6 (left: 1.6 8)",
                "7 * 8 = 56 (left: 6 11 56)\n11 - 6 = 5 (left: 5 11 56)",
                "11 - 6 = 5 (left: 5 7 8)\n9 / 3 = 3 (left: 3 12 15)"
            ]
        },
        "step_3": {
            "steps": [
                "11 - 6 = 5 (left: 5 7 8)\n3 + 9 = 12 (left: 6 12 3)\n4 / 4 = 1 (left: 1 4)",
                "11 - 6 = 5 (left: 5 7 8)\n9 / 3 = 3 (left: 3 12 15)\n15 / 3 = 5 (left: 5 15)",
                "11 - 6 = 5 (left: 5 7 8)\n8 / 5 = 1.6 (left: 1.6 8)\n1.6 + 8 = 9.6 (left: 9.6)",
                "7 * 8 = 56 (left: 6 11 56)\n11 - 6 = 5 (left: 5 11 56)\n56 - 11 = 45 (left: 5 45)",
                "11 - 6 = 5 (left: 5 7 8)\n9 / 3 = 3 (left: 3 12 15)\n15 - 12 = 3 (left: 3 15)"
            ],
            "values": [
                60.0,
                0.003,
                0.002,
                20.001,
                0.003
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 0",
                "2 <- 3",
                "3 <- 3",
                "4 <- 3"
            ],
            "resampled_steps": [
                "7 * 8 = 56 (left: 6 11 56)\n11 - 6 = 5 (left: 5 11 56)\n56 - 11 = 45 (left: 5 45)",
                "11 - 6 = 5 (left: 5 7 8)\n3 + 9 = 12 (left: 6 12 3)\n4 / 4 = 1 (left: 1 4)",
                "7 * 8 = 56 (left: 6 11 56)\n11 - 6 = 5 (left: 5 11 56)\n56 - 11 = 45 (left: 5 45)",
                "7 * 8 = 56 (left: 6 11 56)\n11 - 6 = 5 (left: 5 11 56)\n56 - 11 = 45 (left: 5 45)",
                "7 * 8 = 56 (left: 6 11 56)\n11 - 6 = 5 (left: 5 11 56)\n56 - 11 = 45 (left: 5 45)"
            ]
        },
        "step_4": {
            "steps": [
                "7 * 8 = 56 (left: 6 11 56)\n11 - 6 = 5 (left: 5 11 56)\n56 - 11 = 45 (left: 5 45)\n45 / 5 = 9 (left: 9)",
                "11 - 6 = 5 (left: 5 7 8)\n3 + 9 = 12 (left: 6 12 3)\n4 / 4 = 1 (left: 1 4)\n4 / 1 = 4 (left: 4)",
                "7 * 8 = 56 (left: 6 11 56)\n11 - 6 = 5 (left: 5 11 56)\n56 - 11 = 45 (left: 5 45)\n45 / 5 = 9 (left: 9)",
                "7 * 8 = 56 (left: 6 11 56)\n11 - 6 = 5 (left: 5 11 56)\n56 - 11 = 45 (left: 5 45)\n5 * 45 = 225 (left: 225)",
                "7 * 8 = 56 (left: 6 11 56)\n11 - 6 = 5 (left: 5 11 56)\n56 - 11 = 45 (left: 5 45)\n45 - 5 = 40 (left: 40)"
            ],
            "values": [
                0.001,
                0.002,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.277189
    },
    "925": {
        "input": "7 9 9 13",
        "step_1": {
            "steps": [
                "7 * 9 = 63 (left: 9 13 63)",
                "Possible next steps:",
                "7 - 9 = -2 (left: -2 9 13)",
                "9 / 3 = 3 (left: 7 9 13)",
                "13 - 9 = 4 (left: 7 9 4)"
            ],
            "values": [
                0.003,
                0.003,
                2.001,
                2.001,
                3.0
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 2",
                "2 <- 3",
                "3 <- 3",
                "4 <- 2"
            ],
            "resampled_steps": [
                "13 - 9 = 4 (left: 7 9 4)",
                "7 - 9 = -2 (left: -2 9 13)",
                "9 / 3 = 3 (left: 7 9 13)",
                "9 / 3 = 3 (left: 7 9 13)",
                "7 - 9 = -2 (left: -2 9 13)"
            ]
        },
        "step_2": {
            "steps": [
                "13 - 9 = 4 (left: 7 9 4)\nInput: 5 3 11 2",
                "7 - 9 = -2 (left: -2 9 13)\n13 / -2 = -6.5 (left: -2 -6.5)",
                "9 / 3 = 3 (left: 7 9 13)\n13 - 7 = 6 (left: 7 6)",
                "9 / 3 = 3 (left: 7 9 13)\n9 / 7 = 1 (left: 1 13)",
                "7 - 9 = -2 (left: -2 9 13)\n9 / 13 = 0.6923076923076923 (left: -2 0.6923076923076923)"
            ],
            "values": [
                0.003,
                0.001,
                0.003,
                1.002,
                2.001
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 4",
                "2 <- 4",
                "3 <- 3",
                "4 <- 3"
            ],
            "resampled_steps": [
                "9 / 3 = 3 (left: 7 9 13)\n9 / 7 = 1 (left: 1 13)",
                "7 - 9 = -2 (left: -2 9 13)\n9 / 13 = 0.6923076923076923 (left: -2 0.6923076923076923)",
                "7 - 9 = -2 (left: -2 9 13)\n9 / 13 = 0.6923076923076923 (left: -2 0.6923076923076923)",
                "9 / 3 = 3 (left: 7 9 13)\n9 / 7 = 1 (left: 1 13)",
                "9 / 3 = 3 (left: 7 9 13)\n9 / 7 = 1 (left: 1 13)"
            ]
        },
        "step_3": {
            "steps": [
                "9 / 3 = 3 (left: 7 9 13)\n9 / 7 = 1 (left: 1 13)\n13 / 1 = 13 (left: 13)",
                "7 - 9 = -2 (left: -2 9 13)\n9 / 13 = 0.6923076923076923 (left: -2 0.6923076923076923)\n-2 - 0.6923076923076923 = -2.6923076923076925 (left: -2.6923076923076925 0.6923076923076923)",
                "7 - 9 = -2 (left: -2 9 13)\n9 / 13 = 0.6923076923076923 (left: -2 0.6923076923076923)\n-2 / 0.6923076923076923 = -2.888888888888889 (left: -2.888888888888889)",
                "9 / 3 = 3 (left: 7 9 13)\n9 / 7 = 1 (left: 1 13)\n13 - 1 = 12 (left: 12)",
                "9 / 3 = 3 (left: 7 9 13)\n9 / 7 = 1 (left: 1 13)\n1 * 13 = 13 (left: 13)"
            ],
            "values": [
                0.003,
                1.0,
                0.002,
                0.002,
                0.002
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 1",
                "3 <- 1",
                "4 <- 1"
            ],
            "resampled_steps": [
                "7 - 9 = -2 (left: -2 9 13)\n9 / 13 = 0.6923076923076923 (left: -2 0.6923076923076923)\n-2 - 0.6923076923076923 = -2.6923076923076925 (left: -2.6923076923076925 0.6923076923076923)",
                "7 - 9 = -2 (left: -2 9 13)\n9 / 13 = 0.6923076923076923 (left: -2 0.6923076923076923)\n-2 - 0.6923076923076923 = -2.6923076923076925 (left: -2.6923076923076925 0.6923076923076923)",
                "7 - 9 = -2 (left: -2 9 13)\n9 / 13 = 0.6923076923076923 (left: -2 0.6923076923076923)\n-2 - 0.6923076923076923 = -2.6923076923076925 (left: -2.6923076923076925 0.6923076923076923)",
                "7 - 9 = -2 (left: -2 9 13)\n9 / 13 = 0.6923076923076923 (left: -2 0.6923076923076923)\n-2 - 0.6923076923076923 = -2.6923076923076925 (left: -2.6923076923076925 0.6923076923076923)",
                "7 - 9 = -2 (left: -2 9 13)\n9 / 13 = 0.6923076923076923 (left: -2 0.6923076923076923)\n-2 - 0.6923076923076923 = -2.6923076923076925 (left: -2.6923076923076925 0.6923076923076923)"
            ]
        },
        "step_4": {
            "steps": [
                "7 - 9 = -2 (left: -2 9 13)\n9 / 13 = 0.6923076923076923 (left: -2 0.6923076923076923)\n-2 - 0.6923076923076923 = -2.6923076923076925 (left: -2.6923076923076925 0.6923076923076923)\n-2.6923076923076925 * 0.6923076923076923 = -1.8615384615384613 (left: -1.8615384615384613 0.6923076923076923)",
                "7 - 9 = -2 (left: -2 9 13)\n9 / 13 = 0.6923076923076923 (left: -2 0.6923076923076923)\n-2 - 0.6923076923076923 = -2.6923076923076925 (left: -2.6923076923076925 0.6923076923076923)\n-2.6923076923076925 - 0.6923076923076923 = -3.3846153846153846 (left: -3.3846153846153846)",
                "7 - 9 = -2 (left: -2 9 13)\n9 / 13 = 0.6923076923076923 (left: -2 0.6923076923076923)\n-2 - 0.6923076923076923 = -2.6923076923076925 (left: -2.6923076923076925 0.6923076923076923)\n-2.6923076923076925 + 0.6923076923076923 = -2 (left: -2 0.6923076923076923)",
                "7 - 9 = -2 (left: -2 9 13)\n9 / 13 = 0.6923076923076923 (left: -2 0.6923076923076923)\n-2 - 0.6923076923076923 = -2.6923076923076925 (left: -2.6923076923076925 0.6923076923076923)\n-2.6923076923076925 - 0.6923076923076923 = -3.3846153846153846 (left: -3.3846153846153846)",
                "7 - 9 = -2 (left: -2 9 13)\n9 / 13 = 0.6923076923076923 (left: -2 0.6923076923076923)\n-2 - 0.6923076923076923 = -2.6923076923076925 (left: -2.6923076923076925 0.6923076923076923)\n-2.6923076923076925 + 0.6923076923076923 = -2 (left: -2 0.6923076923076923)"
            ],
            "values": [
                0.002,
                0.001,
                1.002,
                0.001,
                1.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.2896235
    },
    "926": {
        "input": "3 6 9 12",
        "step_1": {
            "steps": [
                "12 - 3 = 9 (left: 9 9 9)",
                "12 - 3 = 9 (left: 3 6 9 9)",
                "12 - 3 = 9 (left: 6 9 9)",
                "12 - 6 = 6 (left: 3 6 12)",
                "12 - 6 = 6 (left: 3 6 12)"
            ],
            "values": [
                0.003,
                21.001,
                21.001,
                21.001,
                0.003
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 2",
                "2 <- 1",
                "3 <- 3",
                "4 <- 2"
            ],
            "resampled_steps": [
                "12 - 3 = 9 (left: 3 6 9 9)",
                "12 - 3 = 9 (left: 6 9 9)",
                "12 - 3 = 9 (left: 3 6 9 9)",
                "12 - 6 = 6 (left: 3 6 12)",
                "12 - 3 = 9 (left: 6 9 9)"
            ]
        },
        "step_2": {
            "steps": [
                "12 - 3 = 9 (left: 3 6 9 9)\n9 / 3 = 3 (left: 3 9 9)",
                "12 - 3 = 9 (left: 6 9 9)\n9 * 6 = 54 (left: 9 9 54)",
                "12 - 3 = 9 (left: 3 6 9 9)\n9 - 6 = 3 (left: 3 9 9)",
                "12 - 6 = 6 (left: 3 6 12)\n12 / 3 = 4 (left: 4 6)",
                "12 - 3 = 9 (left: 6 9 9)\n6 + 9 = 15 (left: 9 9 15)"
            ],
            "values": [
                20.002,
                2.001,
                21.001,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 0",
                "3 <- 3",
                "4 <- 3"
            ],
            "resampled_steps": [
                "12 - 6 = 6 (left: 3 6 12)\n12 / 3 = 4 (left: 4 6)",
                "12 - 6 = 6 (left: 3 6 12)\n12 / 3 = 4 (left: 4 6)",
                "12 - 3 = 9 (left: 3 6 9 9)\n9 / 3 = 3 (left: 3 9 9)",
                "12 - 6 = 6 (left: 3 6 12)\n12 / 3 = 4 (left: 4 6)",
                "12 - 6 = 6 (left: 3 6 12)\n12 / 3 = 4 (left: 4 6)"
            ]
        },
        "step_3": {
            "steps": [
                "12 - 6 = 6 (left: 3 6 12)\n12 / 3 = 4 (left: 4 6)\n6 / 4 = 1.5 (left: 1.5)",
                "12 - 6 = 6 (left: 3 6 12)\n12 / 3 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)",
                "12 - 3 = 9 (left: 3 6 9 9)\n9 / 3 = 3 (left: 3 9 9)\n9 / 3 = 3 (left: 3 9)",
                "12 - 6 = 6 (left: 3 6 12)\n12 / 3 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)",
                "12 - 6 = 6 (left: 3 6 12)\n12 / 3 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)"
            ],
            "values": [
                0.001,
                0.003,
                0.002,
                0.002,
                0.0
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 3",
                "3 <- 3",
                "4 <- 2"
            ],
            "resampled_steps": [
                "12 - 6 = 6 (left: 3 6 12)\n12 / 3 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)",
                "12 - 6 = 6 (left: 3 6 12)\n12 / 3 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)",
                "12 - 6 = 6 (left: 3 6 12)\n12 / 3 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)",
                "12 - 6 = 6 (left: 3 6 12)\n12 / 3 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)",
                "12 - 3 = 9 (left: 3 6 9 9)\n9 / 3 = 3 (left: 3 9 9)\n9 / 3 = 3 (left: 3 9)"
            ]
        },
        "step_4": {
            "steps": [
                "12 - 6 = 6 (left: 3 6 12)\n12 / 3 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)\nNone, as there is only one number provided.",
                "12 - 6 = 6 (left: 3 6 12)\n12 / 3 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)\n2 + 2 = 4",
                "12 - 6 = 6 (left: 3 6 12)\n12 / 3 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)\nThere are no possible next steps with only one number given.",
                "12 - 6 = 6 (left: 3 6 12)\n12 / 3 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)\nThere is only one number, so there are no possible next steps.",
                "12 - 3 = 9 (left: 3 6 9 9)\n9 / 3 = 3 (left: 3 9 9)\n9 / 3 = 3 (left: 3 9)\nPossible next steps:"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.3004405
    },
    "927": {
        "input": "6 9 12 13",
        "step_1": {
            "steps": [
                "9 / 6 = 1.5 (left: 1.5 12 13)",
                "13 / 1 = 13 (left: 6 9 13)",
                "6 * 9 = 54 (left: 12 13 54)",
                "13 - 12 = 1 (left: 6 9 1)",
                "5 - 3 = 2 (left: 1 2 7)"
            ],
            "values": [
                0.003,
                1.002,
                1.002,
                1.002,
                21.001
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 4",
                "2 <- 4",
                "3 <- 4",
                "4 <- 4"
            ],
            "resampled_steps": [
                "5 - 3 = 2 (left: 1 2 7)",
                "5 - 3 = 2 (left: 1 2 7)",
                "5 - 3 = 2 (left: 1 2 7)",
                "5 - 3 = 2 (left: 1 2 7)",
                "5 - 3 = 2 (left: 1 2 7)"
            ]
        },
        "step_2": {
            "steps": [
                "5 - 3 = 2 (left: 1 2 7)\n9 / 3 = 3 (left: 3 3)",
                "5 - 3 = 2 (left: 1 2 7)\nPossible next steps:",
                "5 - 3 = 2 (left: 1 2 7)\n7 / 2 = 3.5 (left: 1 3.5)",
                "5 - 3 = 2 (left: 1 2 7)\n9 - 3 = 6 (left: 5 6 6)",
                "5 - 3 = 2 (left: 1 2 7)\n11 - 3 = 8 (left: 5 8)"
            ],
            "values": [
                21.001,
                0.003,
                1.001,
                3.0,
                1.002
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 3",
                "3 <- 0",
                "4 <- 3"
            ],
            "resampled_steps": [
                "5 - 3 = 2 (left: 1 2 7)\n9 / 3 = 3 (left: 3 3)",
                "5 - 3 = 2 (left: 1 2 7)\n9 / 3 = 3 (left: 3 3)",
                "5 - 3 = 2 (left: 1 2 7)\n9 - 3 = 6 (left: 5 6 6)",
                "5 - 3 = 2 (left: 1 2 7)\n9 / 3 = 3 (left: 3 3)",
                "5 - 3 = 2 (left: 1 2 7)\n9 - 3 = 6 (left: 5 6 6)"
            ]
        },
        "step_3": {
            "steps": [
                "5 - 3 = 2 (left: 1 2 7)\n9 / 3 = 3 (left: 3 3)\n3 - 3 = 0 (left: 0)",
                "5 - 3 = 2 (left: 1 2 7)\n9 / 3 = 3 (left: 3 3)\n3 / 3 = 1 (left: 1)",
                "5 - 3 = 2 (left: 1 2 7)\n9 - 3 = 6 (left: 5 6 6)\n6 - 5 = 1 (left: 1 6)",
                "5 - 3 = 2 (left: 1 2 7)\n9 / 3 = 3 (left: 3 3)\n3 - 3 = 0 (left: 0)",
                "5 - 3 = 2 (left: 1 2 7)\n9 - 3 = 6 (left: 5 6 6)\nInput: 3 9 9 12"
            ],
            "values": [
                0.002,
                0.003,
                60.0,
                20.001,
                0.003
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 2",
                "2 <- 2",
                "3 <- 2",
                "4 <- 2"
            ],
            "resampled_steps": [
                "5 - 3 = 2 (left: 1 2 7)\n9 / 3 = 3 (left: 3 3)\n3 - 3 = 0 (left: 0)",
                "5 - 3 = 2 (left: 1 2 7)\n9 - 3 = 6 (left: 5 6 6)\n6 - 5 = 1 (left: 1 6)",
                "5 - 3 = 2 (left: 1 2 7)\n9 - 3 = 6 (left: 5 6 6)\n6 - 5 = 1 (left: 1 6)",
                "5 - 3 = 2 (left: 1 2 7)\n9 - 3 = 6 (left: 5 6 6)\n6 - 5 = 1 (left: 1 6)",
                "5 - 3 = 2 (left: 1 2 7)\n9 - 3 = 6 (left: 5 6 6)\n6 - 5 = 1 (left: 1 6)"
            ]
        },
        "step_4": {
            "steps": [
                "5 - 3 = 2 (left: 1 2 7)\n9 / 3 = 3 (left: 3 3)\n3 - 3 = 0 (left: 0)\nThere are no possible next steps as there are no numbers provided in the input.",
                "5 - 3 = 2 (left: 1 2 7)\n9 - 3 = 6 (left: 5 6 6)\n6 - 5 = 1 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "5 - 3 = 2 (left: 1 2 7)\n9 - 3 = 6 (left: 5 6 6)\n6 - 5 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "5 - 3 = 2 (left: 1 2 7)\n9 - 3 = 6 (left: 5 6 6)\n6 - 5 = 1 (left: 1 6)\n6 / 1 = 6 (left: 6) ",
                "5 - 3 = 2 (left: 1 2 7)\n9 - 3 = 6 (left: 5 6 6)\n6 - 5 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7)"
            ],
            "values": [
                0.003,
                0.003,
                0.001,
                0.002,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.31253549999999997
    },
    "928": {
        "input": "4 7 9 13",
        "step_1": {
            "steps": [
                "5 - 3 = 2 (left: 2 11 15)",
                "4 + 7 = 11 (left: 9 11 13)",
                "9 - 4 = 5 (left: 5 7 13)",
                "7 - 4 = 3 (left: 3 9 13)",
                "13 - 7 = 6 (left: 4 6 9)"
            ],
            "values": [
                0.003,
                0.003,
                1.002,
                1.002,
                40.001
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 4",
                "2 <- 4",
                "3 <- 4",
                "4 <- 4"
            ],
            "resampled_steps": [
                "13 - 7 = 6 (left: 4 6 9)",
                "13 - 7 = 6 (left: 4 6 9)",
                "13 - 7 = 6 (left: 4 6 9)",
                "13 - 7 = 6 (left: 4 6 9)",
                "13 - 7 = 6 (left: 4 6 9)"
            ]
        },
        "step_2": {
            "steps": [
                "13 - 7 = 6 (left: 4 6 9)\nInput: 3 7 5",
                "13 - 7 = 6 (left: 4 6 9)\n9 / 4 = 2.25 (left: 2.25 6)",
                "13 - 7 = 6 (left: 4 6 9)\n6 * 4 = 24 (left: 9 24)",
                "13 - 7 = 6 (left: 4 6 9)\n3 / 2 = 1.5 (left: 5 1.5)",
                "13 - 7 = 6 (left: 4 6 9)\n7 - 3 = 4 (left: 4 5)"
            ],
            "values": [
                0.003,
                2.001,
                1.002,
                1.002,
                40.0
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 4",
                "2 <- 4",
                "3 <- 4",
                "4 <- 4"
            ],
            "resampled_steps": [
                "13 - 7 = 6 (left: 4 6 9)\n7 - 3 = 4 (left: 4 5)",
                "13 - 7 = 6 (left: 4 6 9)\n7 - 3 = 4 (left: 4 5)",
                "13 - 7 = 6 (left: 4 6 9)\n7 - 3 = 4 (left: 4 5)",
                "13 - 7 = 6 (left: 4 6 9)\n7 - 3 = 4 (left: 4 5)",
                "13 - 7 = 6 (left: 4 6 9)\n7 - 3 = 4 (left: 4 5)"
            ]
        },
        "step_3": {
            "steps": [
                "13 - 7 = 6 (left: 4 6 9)\n7 - 3 = 4 (left: 4 5)\n4 - 5 = -1 (left: -1)",
                "13 - 7 = 6 (left: 4 6 9)\n7 - 3 = 4 (left: 4 5)\n4 / 5 = 0.8 (left: 0.8 5)",
                "13 - 7 = 6 (left: 4 6 9)\n7 - 3 = 4 (left: 4 5)\nPossible next steps:",
                "13 - 7 = 6 (left: 4 6 9)\n7 - 3 = 4 (left: 4 5)\n10 + 3 = 13 (left: 13)",
                "13 - 7 = 6 (left: 4 6 9)\n7 - 3 = 4 (left: 4 5)\n10 + 2 = 12 (left: 2)"
            ],
            "values": [
                0.0,
                0.002,
                0.003,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 2",
                "2 <- 4",
                "3 <- 3",
                "4 <- 1"
            ],
            "resampled_steps": [
                "13 - 7 = 6 (left: 4 6 9)\n7 - 3 = 4 (left: 4 5)\n10 + 2 = 12 (left: 2)",
                "13 - 7 = 6 (left: 4 6 9)\n7 - 3 = 4 (left: 4 5)\nPossible next steps:",
                "13 - 7 = 6 (left: 4 6 9)\n7 - 3 = 4 (left: 4 5)\n10 + 2 = 12 (left: 2)",
                "13 - 7 = 6 (left: 4 6 9)\n7 - 3 = 4 (left: 4 5)\n10 + 3 = 13 (left: 13)",
                "13 - 7 = 6 (left: 4 6 9)\n7 - 3 = 4 (left: 4 5)\n4 / 5 = 0.8 (left: 0.8 5)"
            ]
        },
        "step_4": {
            "steps": [
                "13 - 7 = 6 (left: 4 6 9)\n7 - 3 = 4 (left: 4 5)\n10 + 2 = 12 (left: 2)\nThere are no possible next steps with only one number provided.",
                "13 - 7 = 6 (left: 4 6 9)\n7 - 3 = 4 (left: 4 5)\nPossible next steps:\nThere are no possible next steps as the input numbers are the same.",
                "13 - 7 = 6 (left: 4 6 9)\n7 - 3 = 4 (left: 4 5)\n10 + 2 = 12 (left: 2)\n2 + 2 = 4",
                "13 - 7 = 6 (left: 4 6 9)\n7 - 3 = 4 (left: 4 5)\n10 + 3 = 13 (left: 13)\nThere are no possible next steps with the number 13.",
                "13 - 7 = 6 (left: 4 6 9)\n7 - 3 = 4 (left: 4 5)\n4 / 5 = 0.8 (left: 0.8 5)\n5 / 0.8 = 6.25 (left: 6.25)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.3237985
    },
    "929": {
        "input": "5 6 8 12",
        "step_1": {
            "steps": [
                "12 - 8 = 4 (left: 5 4 12)",
                "5 * 6 = 30 (left: 30 8 12)",
                "5 * 6 = 30 (left: 8 30 12)",
                "6 / 5 = 1.2 (left: 1.2 6 12)",
                "5 * 6 = 30 (left: 8 30 12)"
            ],
            "values": [
                0.003,
                3.0,
                3.0,
                21.001,
                2.0
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 1",
                "3 <- 3",
                "4 <- 4"
            ],
            "resampled_steps": [
                "6 / 5 = 1.2 (left: 1.2 6 12)",
                "6 / 5 = 1.2 (left: 1.2 6 12)",
                "5 * 6 = 30 (left: 30 8 12)",
                "6 / 5 = 1.2 (left: 1.2 6 12)",
                "5 * 6 = 30 (left: 8 30 12)"
            ]
        },
        "step_2": {
            "steps": [
                "6 / 5 = 1.2 (left: 1.2 6 12)\n12 - 6 = 6 (left: 1.2 6)",
                "6 / 5 = 1.2 (left: 1.2 6 12)\n6 * 1.2 = 7.2 (left: 7.2 12)",
                "5 * 6 = 30 (left: 30 8 12)\n12 - 8 = 4 (left: 30 4 12)",
                "6 / 5 = 1.2 (left: 1.2 6 12)\n1.2 * 6 = 7.2 (left: 7.2 12)",
                "5 * 6 = 30 (left: 8 30 12)\n13 / 2 = 6.5 (left: 5 7 6.5)"
            ],
            "values": [
                0.002,
                0.003,
                2.001,
                0.002,
                3.0
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 4",
                "2 <- 4",
                "3 <- 4",
                "4 <- 2"
            ],
            "resampled_steps": [
                "5 * 6 = 30 (left: 8 30 12)\n13 / 2 = 6.5 (left: 5 7 6.5)",
                "5 * 6 = 30 (left: 8 30 12)\n13 / 2 = 6.5 (left: 5 7 6.5)",
                "5 * 6 = 30 (left: 8 30 12)\n13 / 2 = 6.5 (left: 5 7 6.5)",
                "5 * 6 = 30 (left: 8 30 12)\n13 / 2 = 6.5 (left: 5 7 6.5)",
                "5 * 6 = 30 (left: 30 8 12)\n12 - 8 = 4 (left: 30 4 12)"
            ]
        },
        "step_3": {
            "steps": [
                "5 * 6 = 30 (left: 8 30 12)\n13 / 2 = 6.5 (left: 5 7 6.5)\n6.5 + 5 = 11.5 (left: 7 11.5)",
                "5 * 6 = 30 (left: 8 30 12)\n13 / 2 = 6.5 (left: 5 7 6.5)\n6.5 - 5 = 1.5 (left: 1.5 6.5)",
                "5 * 6 = 30 (left: 8 30 12)\n13 / 2 = 6.5 (left: 5 7 6.5)\n6.5 + 5 = 11.5 (left: 7 11.5)",
                "5 * 6 = 30 (left: 8 30 12)\n13 / 2 = 6.5 (left: 5 7 6.5)\n6.5 / 5 = 1.3 (left: 1.3 7)",
                "5 * 6 = 30 (left: 30 8 12)\n12 - 8 = 4 (left: 30 4 12)\n30 / 4 = 7.5 (left: 7.5 12)"
            ],
            "values": [
                1.002,
                2.001,
                2.001,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 2",
                "2 <- 2",
                "3 <- 1",
                "4 <- 1"
            ],
            "resampled_steps": [
                "5 * 6 = 30 (left: 8 30 12)\n13 / 2 = 6.5 (left: 5 7 6.5)\n6.5 - 5 = 1.5 (left: 1.5 6.5)",
                "5 * 6 = 30 (left: 8 30 12)\n13 / 2 = 6.5 (left: 5 7 6.5)\n6.5 + 5 = 11.5 (left: 7 11.5)",
                "5 * 6 = 30 (left: 8 30 12)\n13 / 2 = 6.5 (left: 5 7 6.5)\n6.5 + 5 = 11.5 (left: 7 11.5)",
                "5 * 6 = 30 (left: 8 30 12)\n13 / 2 = 6.5 (left: 5 7 6.5)\n6.5 - 5 = 1.5 (left: 1.5 6.5)",
                "5 * 6 = 30 (left: 8 30 12)\n13 / 2 = 6.5 (left: 5 7 6.5)\n6.5 - 5 = 1.5 (left: 1.5 6.5)"
            ]
        },
        "step_4": {
            "steps": [
                "5 * 6 = 30 (left: 8 30 12)\n13 / 2 = 6.5 (left: 5 7 6.5)\n6.5 - 5 = 1.5 (left: 1.5 6.5)\n1.5 * 6.5 = 9.75 (left: 9.75)",
                "5 * 6 = 30 (left: 8 30 12)\n13 / 2 = 6.5 (left: 5 7 6.5)\n6.5 + 5 = 11.5 (left: 7 11.5)\n7 - 11.5 = -4.5 (left: -4.5)",
                "5 * 6 = 30 (left: 8 30 12)\n13 / 2 = 6.5 (left: 5 7 6.5)\n6.5 + 5 = 11.5 (left: 7 11.5)\n7 / 11.5 = 0.6087 (left: 0.6087)",
                "5 * 6 = 30 (left: 8 30 12)\n13 / 2 = 6.5 (left: 5 7 6.5)\n6.5 - 5 = 1.5 (left: 1.5 6.5)\n6.5 - 1.5 = 5 (left: 5)",
                "5 * 6 = 30 (left: 8 30 12)\n13 / 2 = 6.5 (left: 5 7 6.5)\n6.5 - 5 = 1.5 (left: 1.5 6.5)\n6.5 - 1.5 = 5 (left: 5)"
            ],
            "values": [
                0.002,
                0.002,
                0.003,
                0.003,
                0.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.33680550000000004
    },
    "930": {
        "input": "2 4 6 7",
        "step_1": {
            "steps": [
                "4 * 6 = 24 (left: 2 24 7)",
                "5 + 7 = 12 (left: 3 12 9)",
                "5 / 9 = 0.5556 (left: 0.5556 3 15)",
                "7 - 2 = 5 (left: 2 4 5)",
                "4 * 6 = 24 (left: 2 24 7)"
            ],
            "values": [
                1.002,
                3.0,
                22.0,
                2.0,
                2.001
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 4",
                "2 <- 2",
                "3 <- 2",
                "4 <- 2"
            ],
            "resampled_steps": [
                "5 / 9 = 0.5556 (left: 0.5556 3 15)",
                "4 * 6 = 24 (left: 2 24 7)",
                "5 / 9 = 0.5556 (left: 0.5556 3 15)",
                "5 / 9 = 0.5556 (left: 0.5556 3 15)",
                "5 / 9 = 0.5556 (left: 0.5556 3 15)"
            ]
        },
        "step_2": {
            "steps": [
                "5 / 9 = 0.5556 (left: 0.5556 3 15)\n0.5556 * 3 = 1.6668 (left: 1.6668 15)",
                "4 * 6 = 24 (left: 2 24 7)\n9 - 6 = 3 (left: 3 3 12)",
                "5 / 9 = 0.5556 (left: 0.5556 3 15)\n3 / 0.5556 = 5.4005 (left: 5.4005 15)",
                "5 / 9 = 0.5556 (left: 0.5556 3 15)\n15 + 3 = 18 (left: 0.5556 18)",
                "5 / 9 = 0.5556 (left: 0.5556 3 15)\n10 - 4.5 = 5.5 (left: 5.5 10)"
            ],
            "values": [
                22.0,
                1.002,
                2.001,
                1.001,
                1.001
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 0",
                "2 <- 0",
                "3 <- 0",
                "4 <- 0"
            ],
            "resampled_steps": [
                "5 / 9 = 0.5556 (left: 0.5556 3 15)\n15 + 3 = 18 (left: 0.5556 18)",
                "5 / 9 = 0.5556 (left: 0.5556 3 15)\n0.5556 * 3 = 1.6668 (left: 1.6668 15)",
                "5 / 9 = 0.5556 (left: 0.5556 3 15)\n0.5556 * 3 = 1.6668 (left: 1.6668 15)",
                "5 / 9 = 0.5556 (left: 0.5556 3 15)\n0.5556 * 3 = 1.6668 (left: 1.6668 15)",
                "5 / 9 = 0.5556 (left: 0.5556 3 15)\n0.5556 * 3 = 1.6668 (left: 1.6668 15)"
            ]
        },
        "step_3": {
            "steps": [
                "5 / 9 = 0.5556 (left: 0.5556 3 15)\n15 + 3 = 18 (left: 0.5556 18)\n18 / 0.5556 = 32.4003 (left: 32.4003)",
                "5 / 9 = 0.5556 (left: 0.5556 3 15)\n0.5556 * 3 = 1.6668 (left: 1.6668 15)\n1.6668 + 15 = 16.6668 (left: 15)",
                "5 / 9 = 0.5556 (left: 0.5556 3 15)\n0.5556 * 3 = 1.6668 (left: 1.6668 15)\n5 + 6 = 11 (left: 11 7)",
                "5 / 9 = 0.5556 (left: 0.5556 3 15)\n0.5556 * 3 = 1.6668 (left: 1.6668 15)\n1.6668 * 15 = 24.999 (left: 15 24.999)",
                "5 / 9 = 0.5556 (left: 0.5556 3 15)\n0.5556 * 3 = 1.6668 (left: 1.6668 15)\n15 / 1.6668 = 9 (left: 9)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.001
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 4",
                "3 <- 2",
                "4 <- 2"
            ],
            "resampled_steps": [
                "5 / 9 = 0.5556 (left: 0.5556 3 15)\n0.5556 * 3 = 1.6668 (left: 1.6668 15)\n1.6668 + 15 = 16.6668 (left: 15)",
                "5 / 9 = 0.5556 (left: 0.5556 3 15)\n0.5556 * 3 = 1.6668 (left: 1.6668 15)\n1.6668 + 15 = 16.6668 (left: 15)",
                "5 / 9 = 0.5556 (left: 0.5556 3 15)\n0.5556 * 3 = 1.6668 (left: 1.6668 15)\n15 / 1.6668 = 9 (left: 9)",
                "5 / 9 = 0.5556 (left: 0.5556 3 15)\n0.5556 * 3 = 1.6668 (left: 1.6668 15)\n5 + 6 = 11 (left: 11 7)",
                "5 / 9 = 0.5556 (left: 0.5556 3 15)\n0.5556 * 3 = 1.6668 (left: 1.6668 15)\n5 + 6 = 11 (left: 11 7)"
            ]
        },
        "step_4": {
            "steps": [
                "5 / 9 = 0.5556 (left: 0.5556 3 15)\n0.5556 * 3 = 1.6668 (left: 1.6668 15)\n1.6668 + 15 = 16.6668 (left: 15)\nNo possible next steps with just one number.",
                "5 / 9 = 0.5556 (left: 0.5556 3 15)\n0.5556 * 3 = 1.6668 (left: 1.6668 15)\n1.6668 + 15 = 16.6668 (left: 15)\n15 / 8 = 1.875 (left: 8)",
                "5 / 9 = 0.5556 (left: 0.5556 3 15)\n0.5556 * 3 = 1.6668 (left: 1.6668 15)\n15 / 1.6668 = 9 (left: 9)\n9 + 9 = 18 (left: 9)",
                "5 / 9 = 0.5556 (left: 0.5556 3 15)\n0.5556 * 3 = 1.6668 (left: 1.6668 15)\n5 + 6 = 11 (left: 11 7)\n11 / 7 = 1.57 (left: 1.57)",
                "5 / 9 = 0.5556 (left: 0.5556 3 15)\n0.5556 * 3 = 1.6668 (left: 1.6668 15)\n5 + 6 = 11 (left: 11 7)\n11 + 7 = 18 (left: 18)"
            ],
            "values": [
                0.003,
                0.002,
                0.002,
                0.002,
                20.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.34924900000000003
    },
    "931": {
        "input": "2 5 10 10",
        "step_1": {
            "steps": [
                "2 + 5 = 7 (left: 7 10 10)",
                "2 * 5 = 10 (left: 10 10 10)",
                "10 / 2 = 5 (left: 5 10 10)",
                "10 * 2 = 20 (left: 5 10 20)",
                "10 / 2 = 5 (left: 5 10 10)"
            ],
            "values": [
                1.002,
                20.002,
                2.001,
                1.002,
                1.002
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 1",
                "3 <- 2",
                "4 <- 0"
            ],
            "resampled_steps": [
                "2 * 5 = 10 (left: 10 10 10)",
                "2 * 5 = 10 (left: 10 10 10)",
                "2 * 5 = 10 (left: 10 10 10)",
                "10 / 2 = 5 (left: 5 10 10)",
                "2 + 5 = 7 (left: 7 10 10)"
            ]
        },
        "step_2": {
            "steps": [
                "2 * 5 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)",
                "2 * 5 = 10 (left: 10 10 10)\n7 - 5 = 2 (left: 1 2 3)",
                "2 * 5 = 10 (left: 10 10 10)\nInput: 5 5 5 5",
                "10 / 2 = 5 (left: 5 10 10)\n5 * 10 = 50 (left: 10 50)",
                "2 + 5 = 7 (left: 7 10 10)\n10 / 7 = 1.43 (left: 1.43 10)"
            ],
            "values": [
                60.0,
                0.003,
                0.003,
                20.001,
                0.002
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 3",
                "3 <- 0",
                "4 <- 3"
            ],
            "resampled_steps": [
                "2 * 5 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)",
                "2 * 5 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)",
                "10 / 2 = 5 (left: 5 10 10)\n5 * 10 = 50 (left: 10 50)",
                "2 * 5 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)",
                "10 / 2 = 5 (left: 5 10 10)\n5 * 10 = 50 (left: 10 50)"
            ]
        },
        "step_3": {
            "steps": [
                "2 * 5 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "2 * 5 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)\n1 + 10 = 11 (left: 11)",
                "10 / 2 = 5 (left: 5 10 10)\n5 * 10 = 50 (left: 10 50)\n50 / 10 = 5 (left: 5 50)",
                "2 * 5 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "10 / 2 = 5 (left: 5 10 10)\n5 * 10 = 50 (left: 10 50)\n10 + 50 = 60 (left: 50)"
            ],
            "values": [
                0.001,
                0.003,
                0.001,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 3",
                "3 <- 4",
                "4 <- 2"
            ],
            "resampled_steps": [
                "2 * 5 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)\n1 + 10 = 11 (left: 11)",
                "2 * 5 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)\n1 + 10 = 11 (left: 11)",
                "2 * 5 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "10 / 2 = 5 (left: 5 10 10)\n5 * 10 = 50 (left: 10 50)\n10 + 50 = 60 (left: 50)",
                "10 / 2 = 5 (left: 5 10 10)\n5 * 10 = 50 (left: 10 50)\n50 / 10 = 5 (left: 5 50)"
            ]
        },
        "step_4": {
            "steps": [
                "2 * 5 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)\n1 + 10 = 11 (left: 11)\nThere are no possible next steps for the input 11.",
                "2 * 5 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)\n1 + 10 = 11 (left: 11)\nThere are no possible next steps with the input of 11.",
                "2 * 5 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)\n10 - 1 = 9 (left: 9)\n9 * 8 = 72 (left: 72)",
                "10 / 2 = 5 (left: 5 10 10)\n5 * 10 = 50 (left: 10 50)\n10 + 50 = 60 (left: 50)\n50 - 8 = 42 (left: 8)",
                "10 / 2 = 5 (left: 5 10 10)\n5 * 10 = 50 (left: 10 50)\n50 / 10 = 5 (left: 5 50)\n5 * 50 = 250 (left: 250)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.35851
    },
    "932": {
        "input": "6 6 7 12",
        "step_1": {
            "steps": [
                "Input: 1.1666666666666667 6 12 ",
                "18 - 6 = 12 (left: 6 12 18)",
                "12 + 6 = 18 (left: 6 18)",
                "12 - 6 = 6 (left: 6 6)",
                "6 * 7 = 42 (left: 42 12)"
            ],
            "values": [
                0.003,
                3.0,
                40.001,
                0.003,
                20.002
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 2",
                "2 <- 2",
                "3 <- 2",
                "4 <- 4"
            ],
            "resampled_steps": [
                "12 + 6 = 18 (left: 6 18)",
                "12 + 6 = 18 (left: 6 18)",
                "12 + 6 = 18 (left: 6 18)",
                "12 + 6 = 18 (left: 6 18)",
                "6 * 7 = 42 (left: 42 12)"
            ]
        },
        "step_2": {
            "steps": [
                "12 + 6 = 18 (left: 6 18)\nPossible next steps:",
                "12 + 6 = 18 (left: 6 18)\n10 - 20 = -10 (left: -10 30)",
                "12 + 6 = 18 (left: 6 18)\n18 / 6 = 3 (left: 3 18)",
                "12 + 6 = 18 (left: 6 18)\n6 + 18 = 24 (left: 24)",
                "6 * 7 = 42 (left: 42 12)\n42 - 12 = 30 (left: 30)"
            ],
            "values": [
                0.003,
                2.0,
                0.002,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 3",
                "3 <- 3",
                "4 <- 3"
            ],
            "resampled_steps": [
                "12 + 6 = 18 (left: 6 18)\n6 + 18 = 24 (left: 24)",
                "12 + 6 = 18 (left: 6 18)\n6 + 18 = 24 (left: 24)",
                "12 + 6 = 18 (left: 6 18)\n6 + 18 = 24 (left: 24)",
                "12 + 6 = 18 (left: 6 18)\n6 + 18 = 24 (left: 24)",
                "12 + 6 = 18 (left: 6 18)\n6 + 18 = 24 (left: 24)"
            ]
        },
        "step_3": {
            "steps": [
                "12 + 6 = 18 (left: 6 18)\n6 + 18 = 24 (left: 24)\nAnswer: (12 + 6) + (6 + 7) = 24",
                "12 + 6 = 18 (left: 6 18)\n6 + 18 = 24 (left: 24)\nAnswer: (12 + 6) + 6 = 24",
                "12 + 6 = 18 (left: 6 18)\n6 + 18 = 24 (left: 24)\nAnswer: (6 + 6) + (12 + 7) = 24",
                "12 + 6 = 18 (left: 6 18)\n6 + 18 = 24 (left: 24)\nAnswer: (12 + 6) + (6 + 18) = 24",
                "12 + 6 = 18 (left: 6 18)\n6 + 18 = 24 (left: 24)\nAnswer: (12 + 6) + 6 = 24"
            ],
            "values": [
                0.003,
                40.001,
                0.003,
                0.003,
                20.002
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 4",
                "2 <- 1",
                "3 <- 1",
                "4 <- 1"
            ],
            "resampled_steps": [
                "12 + 6 = 18 (left: 6 18)\n6 + 18 = 24 (left: 24)\nAnswer: (12 + 6) + 6 = 24",
                "12 + 6 = 18 (left: 6 18)\n6 + 18 = 24 (left: 24)\nAnswer: (12 + 6) + 6 = 24",
                "12 + 6 = 18 (left: 6 18)\n6 + 18 = 24 (left: 24)\nAnswer: (12 + 6) + 6 = 24",
                "12 + 6 = 18 (left: 6 18)\n6 + 18 = 24 (left: 24)\nAnswer: (12 + 6) + 6 = 24",
                "12 + 6 = 18 (left: 6 18)\n6 + 18 = 24 (left: 24)\nAnswer: (12 + 6) + 6 = 24"
            ]
        },
        "step_4": {
            "steps": [
                "12 + 6 = 18 (left: 6 18)\n6 + 18 = 24 (left: 24)\nAnswer: (12 + 6) + 6 = 24\nInput: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n1 * 9 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 - 9 = 18 (left: 18)\n18 - 9 = 9 (left: 9)\n9 * 9 = 81 (left: 81)\n81 / 3 = 27 (left: 27)\n27 - 18 = 9 (left: 9)\n9 - 9 = 0 (left: 0)\n0 + 27 = 27 (left: 27)\n27 - 9 = 18 (left: 18)\n18 + 9 = 27 (left: 27)\n27 - 27 = 0 (left: 0)\n0 + 9 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: (((3 * 3) - 8) + 9) * 3 = 27",
                "12 + 6 = 18 (left: 6 18)\n6 + 18 = 24 (left: 24)\nAnswer: (12 + 6) + 6 = 24\nInput: 3 3 5 8\nSteps:\n3 + 5 = 8 (left: 3 8 8)\n8 - 3 = 5 (left: 5 8)\n5 * 8 = 40 (left: 40)\nAnswer: (3 + 5) * 8 = 40",
                "12 + 6 = 18 (left: 6 18)\n6 + 18 = 24 (left: 24)\nAnswer: (12 + 6) + 6 = 24\nInput: 3 3 5 9\nSteps:\n3 * 5 = 15 (left: 3 9 15)\n15 - 9 = 6 (left: 3 6)\n6 * 3 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((3 * 5) - 9) * 3 + 6 = 24",
                "12 + 6 = 18 (left: 6 18)\n6 + 18 = 24 (left: 24)\nAnswer: (12 + 6) + 6 = 24\nInput: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 - 3 = 13 (left: 13)\n13 + 3 = 16 (left: 16)\n16 + 5 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: ((3 * 7) - 5) - 3 + 5 + 3 = 24",
                "12 + 6 = 18 (left: 6 18)\n6 + 18 = 24 (left: 24)\nAnswer: (12 + 6) + 6 = 24\nInput: 3 3 4 7\nSteps:\n3 * 4 = 12 (left: 3 7 12)\n7 + 3 = 10 (left: 10 12)\n10 + 12 = 22 (left: 22)\n22 + 2 = 24 (left: 24)\nAnswer: ((3 * 4) + 7) + 3 = 24"
            ],
            "values": [
                60.0,
                40.0,
                60.0,
                60.0,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.37012
    },
    "933": {
        "input": "6 9 9 11",
        "step_1": {
            "steps": [
                "9 - 6 = 3 (left: 3 9 11)",
                "9 - 6 = 3 (left: 3 9 11)",
                "9 + 6 = 15 (left: 9 15 11)",
                "6 * 9 = 54 (left: 9 11 54)",
                "6 / 9 = 0.67 (left: 0.67 9 11)"
            ],
            "values": [
                0.003,
                1.002,
                0.003,
                2.001,
                3.0
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 4",
                "2 <- 4",
                "3 <- 1",
                "4 <- 1"
            ],
            "resampled_steps": [
                "6 * 9 = 54 (left: 9 11 54)",
                "6 / 9 = 0.67 (left: 0.67 9 11)",
                "6 / 9 = 0.67 (left: 0.67 9 11)",
                "9 - 6 = 3 (left: 3 9 11)",
                "9 - 6 = 3 (left: 3 9 11)"
            ]
        },
        "step_2": {
            "steps": [
                "6 * 9 = 54 (left: 9 11 54)\n54 - 9 = 45 (left: 11 45)",
                "6 / 9 = 0.67 (left: 0.67 9 11)\nPossible next steps:",
                "6 / 9 = 0.67 (left: 0.67 9 11)\n9 - 0.67 = 8.33 (left: 8.33 11)",
                "9 - 6 = 3 (left: 3 9 11)\n9 - 3 = 6 (left: 6 11)",
                "9 - 6 = 3 (left: 3 9 11)\n11 - 9 = 2 (left: 2 9)"
            ],
            "values": [
                0.002,
                0.003,
                2.0,
                0.002,
                0.0
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 2",
                "2 <- 2",
                "3 <- 2",
                "4 <- 2"
            ],
            "resampled_steps": [
                "6 / 9 = 0.67 (left: 0.67 9 11)\n9 - 0.67 = 8.33 (left: 8.33 11)",
                "6 / 9 = 0.67 (left: 0.67 9 11)\n9 - 0.67 = 8.33 (left: 8.33 11)",
                "6 / 9 = 0.67 (left: 0.67 9 11)\n9 - 0.67 = 8.33 (left: 8.33 11)",
                "6 / 9 = 0.67 (left: 0.67 9 11)\n9 - 0.67 = 8.33 (left: 8.33 11)",
                "6 / 9 = 0.67 (left: 0.67 9 11)\n9 - 0.67 = 8.33 (left: 8.33 11)"
            ]
        },
        "step_3": {
            "steps": [
                "6 / 9 = 0.67 (left: 0.67 9 11)\n9 - 0.67 = 8.33 (left: 8.33 11)\n11 / 8.33 = 1.32 (left: 1.32 11)",
                "6 / 9 = 0.67 (left: 0.67 9 11)\n9 - 0.67 = 8.33 (left: 8.33 11)\n11 - 8.33 = 2.67 (left: 2.67 11)",
                "6 / 9 = 0.67 (left: 0.67 9 11)\n9 - 0.67 = 8.33 (left: 8.33 11)\n8.33 + 11 = 19.33 (left: 19.33)",
                "6 / 9 = 0.67 (left: 0.67 9 11)\n9 - 0.67 = 8.33 (left: 8.33 11)\n6 - 3 = 3 (left: 3 2)",
                "6 / 9 = 0.67 (left: 0.67 9 11)\n9 - 0.67 = 8.33 (left: 8.33 11)\n11 - 8.33 = 2.67 (left: 2.67 11)"
            ],
            "values": [
                0.003,
                1.001,
                0.003,
                0.002,
                2.001
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 4",
                "2 <- 4",
                "3 <- 4",
                "4 <- 1"
            ],
            "resampled_steps": [
                "6 / 9 = 0.67 (left: 0.67 9 11)\n9 - 0.67 = 8.33 (left: 8.33 11)\n11 - 8.33 = 2.67 (left: 2.67 11)",
                "6 / 9 = 0.67 (left: 0.67 9 11)\n9 - 0.67 = 8.33 (left: 8.33 11)\n11 - 8.33 = 2.67 (left: 2.67 11)",
                "6 / 9 = 0.67 (left: 0.67 9 11)\n9 - 0.67 = 8.33 (left: 8.33 11)\n11 - 8.33 = 2.67 (left: 2.67 11)",
                "6 / 9 = 0.67 (left: 0.67 9 11)\n9 - 0.67 = 8.33 (left: 8.33 11)\n11 - 8.33 = 2.67 (left: 2.67 11)",
                "6 / 9 = 0.67 (left: 0.67 9 11)\n9 - 0.67 = 8.33 (left: 8.33 11)\n11 - 8.33 = 2.67 (left: 2.67 11)"
            ]
        },
        "step_4": {
            "steps": [
                "6 / 9 = 0.67 (left: 0.67 9 11)\n9 - 0.67 = 8.33 (left: 8.33 11)\n11 - 8.33 = 2.67 (left: 2.67 11)\n2.67 + 11 = 13.67 (left: 13.67)",
                "6 / 9 = 0.67 (left: 0.67 9 11)\n9 - 0.67 = 8.33 (left: 8.33 11)\n11 - 8.33 = 2.67 (left: 2.67 11)\n2.67 * 11 = 29.37 (left: 29.37)",
                "6 / 9 = 0.67 (left: 0.67 9 11)\n9 - 0.67 = 8.33 (left: 8.33 11)\n11 - 8.33 = 2.67 (left: 2.67 11)\n11 / 2.67 = 4.12 (left: 4.12)",
                "6 / 9 = 0.67 (left: 0.67 9 11)\n9 - 0.67 = 8.33 (left: 8.33 11)\n11 - 8.33 = 2.67 (left: 2.67 11)\n11 / 2.67 = 4.12 (left: 4.12)",
                "6 / 9 = 0.67 (left: 0.67 9 11)\n9 - 0.67 = 8.33 (left: 8.33 11)\n11 - 8.33 = 2.67 (left: 2.67 11)\n3 + 6 = 9 (left: 9 9)"
            ],
            "values": [
                0.003,
                0.003,
                0.002,
                0.002,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.382371
    },
    "934": {
        "input": "5 8 11 12",
        "step_1": {
            "steps": [
                "12 - 5 = 7 (left: 7 8 11)",
                "11 / 5 = 2.2 (left: 2.2 8 12)",
                "12 - 5 = 7 (left: 7 8 11)",
                "8 - 5 = 3 (left: 3 11 12)",
                "12 - 11 = 1 (left: 5 8 1)"
            ],
            "values": [
                3.0,
                2.001,
                3.0,
                1.002,
                2.001
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 0",
                "2 <- 4",
                "3 <- 0",
                "4 <- 1"
            ],
            "resampled_steps": [
                "8 - 5 = 3 (left: 3 11 12)",
                "12 - 5 = 7 (left: 7 8 11)",
                "12 - 11 = 1 (left: 5 8 1)",
                "12 - 5 = 7 (left: 7 8 11)",
                "11 / 5 = 2.2 (left: 2.2 8 12)"
            ]
        },
        "step_2": {
            "steps": [
                "8 - 5 = 3 (left: 3 11 12)\n3 + 11 = 14 (left: 14 12)",
                "12 - 5 = 7 (left: 7 8 11)\n5 / 3 = 1.67 (left: 1.67 2 10)",
                "12 - 11 = 1 (left: 5 8 1)\n8 - 5 = 3 (left: 3 1)",
                "12 - 5 = 7 (left: 7 8 11)\n9 / 3 = 3 (left: 1 3 3)",
                "11 / 5 = 2.2 (left: 2.2 8 12)\n8 * 2.2 = 17.6 (left: 17.6 12)"
            ],
            "values": [
                0.003,
                3.0,
                40.0,
                1.002,
                1.001
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 2",
                "2 <- 2",
                "3 <- 1",
                "4 <- 1"
            ],
            "resampled_steps": [
                "12 - 11 = 1 (left: 5 8 1)\n8 - 5 = 3 (left: 3 1)",
                "12 - 11 = 1 (left: 5 8 1)\n8 - 5 = 3 (left: 3 1)",
                "12 - 11 = 1 (left: 5 8 1)\n8 - 5 = 3 (left: 3 1)",
                "12 - 5 = 7 (left: 7 8 11)\n5 / 3 = 1.67 (left: 1.67 2 10)",
                "12 - 5 = 7 (left: 7 8 11)\n5 / 3 = 1.67 (left: 1.67 2 10)"
            ]
        },
        "step_3": {
            "steps": [
                "12 - 11 = 1 (left: 5 8 1)\n8 - 5 = 3 (left: 3 1)\nPossible next steps:",
                "12 - 11 = 1 (left: 5 8 1)\n8 - 5 = 3 (left: 3 1)\n3 + 1 = 4",
                "12 - 11 = 1 (left: 5 8 1)\n8 - 5 = 3 (left: 3 1)\n3 - 1 = 2 (left: 2)",
                "12 - 5 = 7 (left: 7 8 11)\n5 / 3 = 1.67 (left: 1.67 2 10)\n1.67 * 2 = 3.34 (left: 3.34 10)",
                "12 - 5 = 7 (left: 7 8 11)\n5 / 3 = 1.67 (left: 1.67 2 10)\n2 * 1.67 = 3.34 (left: 3.34 10)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                1.0,
                2.001
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 4",
                "2 <- 4",
                "3 <- 4",
                "4 <- 4"
            ],
            "resampled_steps": [
                "12 - 5 = 7 (left: 7 8 11)\n5 / 3 = 1.67 (left: 1.67 2 10)\n2 * 1.67 = 3.34 (left: 3.34 10)",
                "12 - 5 = 7 (left: 7 8 11)\n5 / 3 = 1.67 (left: 1.67 2 10)\n2 * 1.67 = 3.34 (left: 3.34 10)",
                "12 - 5 = 7 (left: 7 8 11)\n5 / 3 = 1.67 (left: 1.67 2 10)\n2 * 1.67 = 3.34 (left: 3.34 10)",
                "12 - 5 = 7 (left: 7 8 11)\n5 / 3 = 1.67 (left: 1.67 2 10)\n2 * 1.67 = 3.34 (left: 3.34 10)",
                "12 - 5 = 7 (left: 7 8 11)\n5 / 3 = 1.67 (left: 1.67 2 10)\n2 * 1.67 = 3.34 (left: 3.34 10)"
            ]
        },
        "step_4": {
            "steps": [
                "12 - 5 = 7 (left: 7 8 11)\n5 / 3 = 1.67 (left: 1.67 2 10)\n2 * 1.67 = 3.34 (left: 3.34 10)\n7 / 3 = 2.333 (left: 2.333)",
                "12 - 5 = 7 (left: 7 8 11)\n5 / 3 = 1.67 (left: 1.67 2 10)\n2 * 1.67 = 3.34 (left: 3.34 10)\n10 / 3.34 = 2.994 (left: 2.994)",
                "12 - 5 = 7 (left: 7 8 11)\n5 / 3 = 1.67 (left: 1.67 2 10)\n2 * 1.67 = 3.34 (left: 3.34 10)\n3.34 * 10 = 33.4 (left: 33.4)",
                "12 - 5 = 7 (left: 7 8 11)\n5 / 3 = 1.67 (left: 1.67 2 10)\n2 * 1.67 = 3.34 (left: 3.34 10)\n3.34 - 10 = -6.66 (left: -6.66 10)",
                "12 - 5 = 7 (left: 7 8 11)\n5 / 3 = 1.67 (left: 1.67 2 10)\n2 * 1.67 = 3.34 (left: 3.34 10)\n10 - 3.34 = 6.66 (left: 6.66)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.3943955
    },
    "935": {
        "input": "5 6 8 10",
        "step_1": {
            "steps": [
                "5 * 3 = 15 (left: 7 15)",
                "10 - 8 = 2 (left: 2 6 10)",
                "5 * 6 = 30 (left: 8 10 30)",
                "5 + 6 = 11 (left: 8 10 11)",
                "10 - 6 = 4 (left: 5 4 8)"
            ],
            "values": [
                0.003,
                2.001,
                1.002,
                1.002,
                1.002
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 1",
                "2 <- 4",
                "3 <- 3",
                "4 <- 2"
            ],
            "resampled_steps": [
                "5 * 6 = 30 (left: 8 10 30)",
                "10 - 8 = 2 (left: 2 6 10)",
                "10 - 6 = 4 (left: 5 4 8)",
                "5 + 6 = 11 (left: 8 10 11)",
                "5 * 6 = 30 (left: 8 10 30)"
            ]
        },
        "step_2": {
            "steps": [
                "5 * 6 = 30 (left: 8 10 30)\n10 + 30 = 40 (left: 8 40)",
                "10 - 8 = 2 (left: 2 6 10)\n10 - 6 = 4 (left: 2 4)",
                "10 - 6 = 4 (left: 5 4 8)\n4 + 8 = 12 (left: 5 12)",
                "5 + 6 = 11 (left: 8 10 11)\n10 - 8 = 2 (left: 2 11)",
                "5 * 6 = 30 (left: 8 10 30)\n30 - 8 = 22 (left: 8 22)"
            ],
            "values": [
                21.001,
                1.001,
                1.001,
                1.001,
                0.002
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 0",
                "2 <- 0",
                "3 <- 0",
                "4 <- 2"
            ],
            "resampled_steps": [
                "10 - 6 = 4 (left: 5 4 8)\n4 + 8 = 12 (left: 5 12)",
                "5 * 6 = 30 (left: 8 10 30)\n10 + 30 = 40 (left: 8 40)",
                "5 * 6 = 30 (left: 8 10 30)\n10 + 30 = 40 (left: 8 40)",
                "5 * 6 = 30 (left: 8 10 30)\n10 + 30 = 40 (left: 8 40)",
                "10 - 6 = 4 (left: 5 4 8)\n4 + 8 = 12 (left: 5 12)"
            ]
        },
        "step_3": {
            "steps": [
                "10 - 6 = 4 (left: 5 4 8)\n4 + 8 = 12 (left: 5 12)\n3 - 9 = -6 (left: -6 27)",
                "5 * 6 = 30 (left: 8 10 30)\n10 + 30 = 40 (left: 8 40)\n40 + 8 = 48 (left: 48)",
                "5 * 6 = 30 (left: 8 10 30)\n10 + 30 = 40 (left: 8 40)\n8 * 5 = 40 (left: 40)",
                "5 * 6 = 30 (left: 8 10 30)\n10 + 30 = 40 (left: 8 40)\n40 - 8 = 32 (left: 32)",
                "10 - 6 = 4 (left: 5 4 8)\n4 + 8 = 12 (left: 5 12)\n12 / 5 = 2.4 (left: 2.4)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 3",
                "2 <- 3",
                "3 <- 0",
                "4 <- 3"
            ],
            "resampled_steps": [
                "5 * 6 = 30 (left: 8 10 30)\n10 + 30 = 40 (left: 8 40)\n8 * 5 = 40 (left: 40)",
                "5 * 6 = 30 (left: 8 10 30)\n10 + 30 = 40 (left: 8 40)\n40 - 8 = 32 (left: 32)",
                "5 * 6 = 30 (left: 8 10 30)\n10 + 30 = 40 (left: 8 40)\n40 - 8 = 32 (left: 32)",
                "10 - 6 = 4 (left: 5 4 8)\n4 + 8 = 12 (left: 5 12)\n3 - 9 = -6 (left: -6 27)",
                "5 * 6 = 30 (left: 8 10 30)\n10 + 30 = 40 (left: 8 40)\n40 - 8 = 32 (left: 32)"
            ]
        },
        "step_4": {
            "steps": [
                "5 * 6 = 30 (left: 8 10 30)\n10 + 30 = 40 (left: 8 40)\n8 * 5 = 40 (left: 40)\n40 - 2 = 38 (left: 38)",
                "5 * 6 = 30 (left: 8 10 30)\n10 + 30 = 40 (left: 8 40)\n40 - 8 = 32 (left: 32)\nThere are no possible next steps with the input 32.",
                "5 * 6 = 30 (left: 8 10 30)\n10 + 30 = 40 (left: 8 40)\n40 - 8 = 32 (left: 32)\n32 + 2 = 34",
                "10 - 6 = 4 (left: 5 4 8)\n4 + 8 = 12 (left: 5 12)\n3 - 9 = -6 (left: -6 27)\n-6 * 27 = -162 (left: -162)",
                "5 * 6 = 30 (left: 8 10 30)\n10 + 30 = 40 (left: 8 40)\n40 - 8 = 32 (left: 32)\n32 + 2 = 34"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.404849
    },
    "936": {
        "input": "6 11 12 13",
        "step_1": {
            "steps": [
                "13 - 6 = 7 (left: 11 12 7)",
                "3 + 4 = 7 (left: 5 6 7)",
                "11 + 12 = 23 (left: 6 13 23)",
                "12 * 13 = 156 (left: 6 11 156)",
                "13 - 6 = 7 (left: 6 11 7)"
            ],
            "values": [
                0.003,
                2.001,
                2.0,
                2.001,
                21.001
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 4",
                "2 <- 4",
                "3 <- 4",
                "4 <- 4"
            ],
            "resampled_steps": [
                "13 - 6 = 7 (left: 6 11 7)",
                "13 - 6 = 7 (left: 6 11 7)",
                "13 - 6 = 7 (left: 6 11 7)",
                "13 - 6 = 7 (left: 6 11 7)",
                "13 - 6 = 7 (left: 6 11 7)"
            ]
        },
        "step_2": {
            "steps": [
                "13 - 6 = 7 (left: 6 11 7)\n9 - 5 = 4 (left: 3 4 6)",
                "13 - 6 = 7 (left: 6 11 7)\nPossible next steps:",
                "13 - 6 = 7 (left: 6 11 7)\n8 + 4 = 12 (left: 10 12)",
                "13 - 6 = 7 (left: 6 11 7)\n3 * 9 = 27 (left: 27 5 12)",
                "13 - 6 = 7 (left: 6 11 7)\n11 + 7 = 18 (left: 18)"
            ],
            "values": [
                21.001,
                0.003,
                0.003,
                2.001,
                40.0
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 4",
                "2 <- 4",
                "3 <- 4",
                "4 <- 4"
            ],
            "resampled_steps": [
                "13 - 6 = 7 (left: 6 11 7)\n11 + 7 = 18 (left: 18)",
                "13 - 6 = 7 (left: 6 11 7)\n11 + 7 = 18 (left: 18)",
                "13 - 6 = 7 (left: 6 11 7)\n11 + 7 = 18 (left: 18)",
                "13 - 6 = 7 (left: 6 11 7)\n11 + 7 = 18 (left: 18)",
                "13 - 6 = 7 (left: 6 11 7)\n11 + 7 = 18 (left: 18)"
            ]
        },
        "step_3": {
            "steps": [
                "13 - 6 = 7 (left: 6 11 7)\n11 + 7 = 18 (left: 18)\nThere are no possible next steps for the input 18.",
                "13 - 6 = 7 (left: 6 11 7)\n11 + 7 = 18 (left: 18)\n18 / 2 = 9",
                "13 - 6 = 7 (left: 6 11 7)\n11 + 7 = 18 (left: 18)\nThere are no possible next steps with the number 18.",
                "13 - 6 = 7 (left: 6 11 7)\n11 + 7 = 18 (left: 18)\nNone, as there is only one number left.",
                "13 - 6 = 7 (left: 6 11 7)\n11 + 7 = 18 (left: 18)\n18 / 2 = 9"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 3",
                "2 <- 4",
                "3 <- 2",
                "4 <- 2"
            ],
            "resampled_steps": [
                "13 - 6 = 7 (left: 6 11 7)\n11 + 7 = 18 (left: 18)\nThere are no possible next steps with the number 18.",
                "13 - 6 = 7 (left: 6 11 7)\n11 + 7 = 18 (left: 18)\nNone, as there is only one number left.",
                "13 - 6 = 7 (left: 6 11 7)\n11 + 7 = 18 (left: 18)\n18 / 2 = 9",
                "13 - 6 = 7 (left: 6 11 7)\n11 + 7 = 18 (left: 18)\nThere are no possible next steps with the number 18.",
                "13 - 6 = 7 (left: 6 11 7)\n11 + 7 = 18 (left: 18)\nThere are no possible next steps with the number 18."
            ]
        },
        "step_4": {
            "steps": [
                "13 - 6 = 7 (left: 6 11 7)\n11 + 7 = 18 (left: 18)\nThere are no possible next steps with the number 18.\nThere are no possible next steps with the number 18.",
                "13 - 6 = 7 (left: 6 11 7)\n11 + 7 = 18 (left: 18)\nNone, as there is only one number left.\nThere are no possible next steps as there is only one number left.",
                "13 - 6 = 7 (left: 6 11 7)\n11 + 7 = 18 (left: 18)\n18 / 2 = 9\n18 - 2 = 16 (left: 9 16)",
                "13 - 6 = 7 (left: 6 11 7)\n11 + 7 = 18 (left: 18)\nThere are no possible next steps with the number 18.\nThere are no possible next steps with the number 18.",
                "13 - 6 = 7 (left: 6 11 7)\n11 + 7 = 18 (left: 18)\nThere are no possible next steps with the number 18.\nThere are no possible next steps with the number 18."
            ],
            "values": [
                0.003,
                0.003,
                1.001,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.416047
    },
    "937": {
        "input": "2 2 8 8",
        "step_1": {
            "steps": [
                "2 + 2 = 4 (left: 4 8 8)",
                "8 - 2 = 6 (left: 2 6 8)",
                "8 / 2 = 4 (left: 2 4 8)",
                "8 - 2 = 6 (left: 2 6 8)",
                "2 * 2 = 4 (left: 4 8 8)"
            ],
            "values": [
                41.0,
                1.002,
                20.002,
                1.001,
                41.0
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 4",
                "2 <- 4",
                "3 <- 0",
                "4 <- 0"
            ],
            "resampled_steps": [
                "2 * 2 = 4 (left: 4 8 8)",
                "2 * 2 = 4 (left: 4 8 8)",
                "2 * 2 = 4 (left: 4 8 8)",
                "2 + 2 = 4 (left: 4 8 8)",
                "2 + 2 = 4 (left: 4 8 8)"
            ]
        },
        "step_2": {
            "steps": [
                "2 * 2 = 4 (left: 4 8 8)\n8 / 4 = 2 (left: 2 8)",
                "2 * 2 = 4 (left: 4 8 8)\n8 / 4 = 2 (left: 2 8 8)",
                "2 * 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)",
                "2 + 2 = 4 (left: 4 8 8)\n8 / 4 = 2 (left: 2 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8)"
            ],
            "values": [
                1.002,
                2.001,
                20.001,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 0",
                "2 <- 2",
                "3 <- 2",
                "4 <- 2"
            ],
            "resampled_steps": [
                "2 * 2 = 4 (left: 4 8 8)\n8 / 4 = 2 (left: 2 8 8)",
                "2 * 2 = 4 (left: 4 8 8)\n8 / 4 = 2 (left: 2 8)",
                "2 * 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)",
                "2 * 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)",
                "2 * 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)"
            ]
        },
        "step_3": {
            "steps": [
                "2 * 2 = 4 (left: 4 8 8)\n8 / 4 = 2 (left: 2 8 8)\nInput: 2 8",
                "2 * 2 = 4 (left: 4 8 8)\n8 / 4 = 2 (left: 2 8)\n2 + 8 = 10 (left: 10)",
                "2 * 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n8 + 32 = 40 (left: 40)",
                "2 * 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n10 / 5 = 2 (left: 2 15)",
                "2 * 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n32 - 8 = 24 (left: 8 24)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                21.0
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 4",
                "2 <- 4",
                "3 <- 4",
                "4 <- 4"
            ],
            "resampled_steps": [
                "2 * 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n32 - 8 = 24 (left: 8 24)",
                "2 * 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n32 - 8 = 24 (left: 8 24)",
                "2 * 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n32 - 8 = 24 (left: 8 24)",
                "2 * 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n32 - 8 = 24 (left: 8 24)",
                "2 * 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n32 - 8 = 24 (left: 8 24)"
            ]
        },
        "step_4": {
            "steps": [
                "2 * 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n32 - 8 = 24 (left: 8 24)\n8 / 24 = 0.3333 (left: 0.3333 8)",
                "2 * 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n32 - 8 = 24 (left: 8 24)\n24 - 8 = 16 (left: 16)",
                "2 * 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n32 - 8 = 24 (left: 8 24)\n8 + 24 = 32 (left: 24)",
                "2 * 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n32 - 8 = 24 (left: 8 24)\n8 * 3 = 24 (left: 24)",
                "2 * 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n32 - 8 = 24 (left: 8 24)\nPossible next steps:"
            ],
            "values": [
                2.0,
                0.003,
                60.0,
                40.0,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.42628150000000004
    },
    "938": {
        "input": "2 7 12 13",
        "step_1": {
            "steps": [
                "12 - 7 = 5 (left: 2 5 13)",
                "12 + 2 = 14 (left: 7 14 13)",
                "7 + 12 = 19 (left: 2 19 13)",
                "2 + 12 = 14 (left: 7 13 14)",
                "7 * 2 = 14 (left: 14 12 13)"
            ],
            "values": [
                1.002,
                22.0,
                0.003,
                1.002,
                2.001
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 1",
                "2 <- 1",
                "3 <- 1",
                "4 <- 3"
            ],
            "resampled_steps": [
                "7 * 2 = 14 (left: 14 12 13)",
                "12 + 2 = 14 (left: 7 14 13)",
                "12 + 2 = 14 (left: 7 14 13)",
                "12 + 2 = 14 (left: 7 14 13)",
                "2 + 12 = 14 (left: 7 13 14)"
            ]
        },
        "step_2": {
            "steps": [
                "7 * 2 = 14 (left: 14 12 13)\n14 / 12 = 1.16666666667 (left: 1.16666666667 13)",
                "12 + 2 = 14 (left: 7 14 13)\n13 - 7 = 6 (left: 6 14)",
                "12 + 2 = 14 (left: 7 14 13)\n14 - 7 = 7 (left: 7 13)",
                "12 + 2 = 14 (left: 7 14 13)\n7 * 14 = 98 (left: 13 98)",
                "2 + 12 = 14 (left: 7 13 14)\n14 + 7 = 21 (left: 21)"
            ],
            "values": [
                1.001,
                0.003,
                0.0,
                1.002,
                20.001
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 4",
                "2 <- 4",
                "3 <- 4",
                "4 <- 4"
            ],
            "resampled_steps": [
                "2 + 12 = 14 (left: 7 13 14)\n14 + 7 = 21 (left: 21)",
                "2 + 12 = 14 (left: 7 13 14)\n14 + 7 = 21 (left: 21)",
                "2 + 12 = 14 (left: 7 13 14)\n14 + 7 = 21 (left: 21)",
                "2 + 12 = 14 (left: 7 13 14)\n14 + 7 = 21 (left: 21)",
                "2 + 12 = 14 (left: 7 13 14)\n14 + 7 = 21 (left: 21)"
            ]
        },
        "step_3": {
            "steps": [
                "2 + 12 = 14 (left: 7 13 14)\n14 + 7 = 21 (left: 21)\n21 + 2 = 23",
                "2 + 12 = 14 (left: 7 13 14)\n14 + 7 = 21 (left: 21)\n21 - 8 = 13 (left: 8)",
                "2 + 12 = 14 (left: 7 13 14)\n14 + 7 = 21 (left: 21)\n21 / 2 = 10.5",
                "2 + 12 = 14 (left: 7 13 14)\n14 + 7 = 21 (left: 21)\n21 / 2 = 10.5",
                "2 + 12 = 14 (left: 7 13 14)\n14 + 7 = 21 (left: 21)\n21 / 2 = 10.5"
            ],
            "values": [
                0.003,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 0",
                "3 <- 4",
                "4 <- 2"
            ],
            "resampled_steps": [
                "2 + 12 = 14 (left: 7 13 14)\n14 + 7 = 21 (left: 21)\n21 - 8 = 13 (left: 8)",
                "2 + 12 = 14 (left: 7 13 14)\n14 + 7 = 21 (left: 21)\n21 - 8 = 13 (left: 8)",
                "2 + 12 = 14 (left: 7 13 14)\n14 + 7 = 21 (left: 21)\n21 + 2 = 23",
                "2 + 12 = 14 (left: 7 13 14)\n14 + 7 = 21 (left: 21)\n21 / 2 = 10.5",
                "2 + 12 = 14 (left: 7 13 14)\n14 + 7 = 21 (left: 21)\n21 / 2 = 10.5"
            ]
        },
        "step_4": {
            "steps": [
                "2 + 12 = 14 (left: 7 13 14)\n14 + 7 = 21 (left: 21)\n21 - 8 = 13 (left: 8)\n8 - 8 = 0 (left: 0)",
                "2 + 12 = 14 (left: 7 13 14)\n14 + 7 = 21 (left: 21)\n21 - 8 = 13 (left: 8)\n8 / 8 = 1 (left: 1)",
                "2 + 12 = 14 (left: 7 13 14)\n14 + 7 = 21 (left: 21)\n21 + 2 = 23\n21 * 2 = 42 (left: 2)",
                "2 + 12 = 14 (left: 7 13 14)\n14 + 7 = 21 (left: 21)\n21 / 2 = 10.5\n21 + 2 = 23 (left: 23 / 2 = 11.5)",
                "2 + 12 = 14 (left: 7 13 14)\n14 + 7 = 21 (left: 21)\n21 / 2 = 10.5\nNone"
            ],
            "values": [
                0.002,
                0.003,
                0.002,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.435256
    },
    "939": {
        "input": "2 6 8 12",
        "step_1": {
            "steps": [
                "12 / 6 = 2 (left: 2 8 6)",
                "12 - 6 = 6 (left: 2 6 8)",
                "8 - 2 = 6 (left: 6 8 12)",
                "2 + 6 = 8 (left: 8 8 12)",
                "6 / 2 = 3 (left: 3 8 12)"
            ],
            "values": [
                3.0,
                0.003,
                22.0,
                1.002,
                60.0
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 4",
                "2 <- 4",
                "3 <- 2",
                "4 <- 4"
            ],
            "resampled_steps": [
                "6 / 2 = 3 (left: 3 8 12)",
                "6 / 2 = 3 (left: 3 8 12)",
                "6 / 2 = 3 (left: 3 8 12)",
                "8 - 2 = 6 (left: 6 8 12)",
                "6 / 2 = 3 (left: 3 8 12)"
            ]
        },
        "step_2": {
            "steps": [
                "6 / 2 = 3 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)",
                "6 / 2 = 3 (left: 3 8 12)\n12 - 3 = 9 (left: 8 9)",
                "6 / 2 = 3 (left: 3 8 12)\n3 * 8 = 24 (left: 12 24)",
                "8 - 2 = 6 (left: 6 8 12)\n6 * 8 = 48 (left: 48 12)",
                "6 / 2 = 3 (left: 3 8 12)\n12 - 3 = 9 (left: 3 9 12)"
            ],
            "values": [
                1.001,
                0.003,
                0.003,
                0.002,
                2.001
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 4",
                "2 <- 4",
                "3 <- 4",
                "4 <- 0"
            ],
            "resampled_steps": [
                "6 / 2 = 3 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)",
                "6 / 2 = 3 (left: 3 8 12)\n12 - 3 = 9 (left: 3 9 12)",
                "6 / 2 = 3 (left: 3 8 12)\n12 - 3 = 9 (left: 3 9 12)",
                "6 / 2 = 3 (left: 3 8 12)\n12 - 3 = 9 (left: 3 9 12)",
                "6 / 2 = 3 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)"
            ]
        },
        "step_3": {
            "steps": [
                "6 / 2 = 3 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)\n5 * 12 = 60 (left: 60)",
                "6 / 2 = 3 (left: 3 8 12)\n12 - 3 = 9 (left: 3 9 12)\n9 - 3 = 6 (left: 6 12)",
                "6 / 2 = 3 (left: 3 8 12)\n12 - 3 = 9 (left: 3 9 12)\n9 / 3 = 3 (left: 3 12)",
                "6 / 2 = 3 (left: 3 8 12)\n12 - 3 = 9 (left: 3 9 12)\n12 / 3 = 4 (left: 4 12)",
                "6 / 2 = 3 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)\n12 - 5 = 7 (left: 7)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 0",
                "2 <- 4",
                "3 <- 4",
                "4 <- 2"
            ],
            "resampled_steps": [
                "6 / 2 = 3 (left: 3 8 12)\n12 - 3 = 9 (left: 3 9 12)\n9 / 3 = 3 (left: 3 12)",
                "6 / 2 = 3 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)\n5 * 12 = 60 (left: 60)",
                "6 / 2 = 3 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)\n12 - 5 = 7 (left: 7)",
                "6 / 2 = 3 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)\n12 - 5 = 7 (left: 7)",
                "6 / 2 = 3 (left: 3 8 12)\n12 - 3 = 9 (left: 3 9 12)\n9 / 3 = 3 (left: 3 12)"
            ]
        },
        "step_4": {
            "steps": [
                "6 / 2 = 3 (left: 3 8 12)\n12 - 3 = 9 (left: 3 9 12)\n9 / 3 = 3 (left: 3 12)\n3 + 12 = 15 (left: 15)",
                "6 / 2 = 3 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)\n5 * 12 = 60 (left: 60)\nThere are no possible next steps for the number 60.",
                "6 / 2 = 3 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)\n12 - 5 = 7 (left: 7)\nInput: 15",
                "6 / 2 = 3 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)\n12 - 5 = 7 (left: 7)\n7 / 8 = 0.875 (left: 0.875)",
                "6 / 2 = 3 (left: 3 8 12)\n12 - 3 = 9 (left: 3 9 12)\n9 / 3 = 3 (left: 3 12)\n12 - 3 = 9 (left: 9 12)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                1.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.44532200000000005
    },
    "940": {
        "input": "3 4 9 13",
        "step_1": {
            "steps": [
                "13 - 4 = 9 (left: 3 9 9)",
                "13 - 3 = 10 (left: 4 9 10)",
                "3 + 4 = 7 (left: 7 9 13)",
                "13 - 9 = 4 (left: 3 4 4)",
                "4 / 3 = 1.33 (left: 1.33 9 13)"
            ],
            "values": [
                0.003,
                3.0,
                1.002,
                2.001,
                2.0
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 2",
                "2 <- 1",
                "3 <- 4",
                "4 <- 3"
            ],
            "resampled_steps": [
                "13 - 3 = 10 (left: 4 9 10)",
                "3 + 4 = 7 (left: 7 9 13)",
                "13 - 3 = 10 (left: 4 9 10)",
                "4 / 3 = 1.33 (left: 1.33 9 13)",
                "13 - 9 = 4 (left: 3 4 4)"
            ]
        },
        "step_2": {
            "steps": [
                "13 - 3 = 10 (left: 4 9 10)\n4 * 9 = 36 (left: 10 36)",
                "3 + 4 = 7 (left: 7 9 13)\n9 / 7 = 1.2857142857 (left: 1.2857142857 13)",
                "13 - 3 = 10 (left: 4 9 10)\n7 - 3 = 4 (left: 4 5 11)",
                "4 / 3 = 1.33 (left: 1.33 9 13)\n10 - 5 = 5 (left: 5 15 20)",
                "13 - 9 = 4 (left: 3 4 4)\n6 / 5 = 1.2 (left: 1.2 7 8)"
            ],
            "values": [
                0.002,
                2.0,
                1.002,
                22.0,
                2.001
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 3",
                "3 <- 3",
                "4 <- 2"
            ],
            "resampled_steps": [
                "4 / 3 = 1.33 (left: 1.33 9 13)\n10 - 5 = 5 (left: 5 15 20)",
                "4 / 3 = 1.33 (left: 1.33 9 13)\n10 - 5 = 5 (left: 5 15 20)",
                "4 / 3 = 1.33 (left: 1.33 9 13)\n10 - 5 = 5 (left: 5 15 20)",
                "4 / 3 = 1.33 (left: 1.33 9 13)\n10 - 5 = 5 (left: 5 15 20)",
                "13 - 3 = 10 (left: 4 9 10)\n7 - 3 = 4 (left: 4 5 11)"
            ]
        },
        "step_3": {
            "steps": [
                "4 / 3 = 1.33 (left: 1.33 9 13)\n10 - 5 = 5 (left: 5 15 20)\n5 + 15 = 20 (left: 20 20)",
                "4 / 3 = 1.33 (left: 1.33 9 13)\n10 - 5 = 5 (left: 5 15 20)\n15 / 5 = 3 (left: 3 20)",
                "4 / 3 = 1.33 (left: 1.33 9 13)\n10 - 5 = 5 (left: 5 15 20)\n15 / 5 = 3 (left: 3 20)",
                "4 / 3 = 1.33 (left: 1.33 9 13)\n10 - 5 = 5 (left: 5 15 20)\n5 * 15 = 75 (left: 20 75)",
                "13 - 3 = 10 (left: 4 9 10)\n7 - 3 = 4 (left: 4 5 11)\n11 / 4 = 2.75 (left: 2.75 5)"
            ],
            "values": [
                20.002,
                1.002,
                1.001,
                60.0,
                2.001
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 0",
                "3 <- 0",
                "4 <- 3"
            ],
            "resampled_steps": [
                "4 / 3 = 1.33 (left: 1.33 9 13)\n10 - 5 = 5 (left: 5 15 20)\n5 * 15 = 75 (left: 20 75)",
                "4 / 3 = 1.33 (left: 1.33 9 13)\n10 - 5 = 5 (left: 5 15 20)\n5 * 15 = 75 (left: 20 75)",
                "4 / 3 = 1.33 (left: 1.33 9 13)\n10 - 5 = 5 (left: 5 15 20)\n5 + 15 = 20 (left: 20 20)",
                "4 / 3 = 1.33 (left: 1.33 9 13)\n10 - 5 = 5 (left: 5 15 20)\n5 + 15 = 20 (left: 20 20)",
                "4 / 3 = 1.33 (left: 1.33 9 13)\n10 - 5 = 5 (left: 5 15 20)\n5 * 15 = 75 (left: 20 75)"
            ]
        },
        "step_4": {
            "steps": [
                "4 / 3 = 1.33 (left: 1.33 9 13)\n10 - 5 = 5 (left: 5 15 20)\n5 * 15 = 75 (left: 20 75)\n20 * 75 = 1500 (left: 1500)",
                "4 / 3 = 1.33 (left: 1.33 9 13)\n10 - 5 = 5 (left: 5 15 20)\n5 * 15 = 75 (left: 20 75)\n20 / 75 = 0.2667 (left: 0.2667)",
                "4 / 3 = 1.33 (left: 1.33 9 13)\n10 - 5 = 5 (left: 5 15 20)\n5 + 15 = 20 (left: 20 20)\n20 / 20 = 1 (left: 1)",
                "4 / 3 = 1.33 (left: 1.33 9 13)\n10 - 5 = 5 (left: 5 15 20)\n5 + 15 = 20 (left: 20 20)\n20 * 20 = 400 (left: 400)",
                "4 / 3 = 1.33 (left: 1.33 9 13)\n10 - 5 = 5 (left: 5 15 20)\n5 * 15 = 75 (left: 20 75)\n75 / 20 = 3.75 (left: 3.75)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.45694
    },
    "941": {
        "input": "4 5 10 12",
        "step_1": {
            "steps": [
                "12 - 4 = 8 (left: 8 5 12)",
                "12 - 4 = 8 (left: 8 10 12)",
                "5 + 10 = 15 (left: 4 15 12)",
                "4 * 5 = 20 (left: 20 10 12)",
                "10 - 4 = 6 (left: 6 10 12)"
            ],
            "values": [
                3.0,
                1.002,
                2.001,
                2.001,
                22.0
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 4",
                "2 <- 4",
                "3 <- 4",
                "4 <- 4"
            ],
            "resampled_steps": [
                "10 - 4 = 6 (left: 6 10 12)",
                "10 - 4 = 6 (left: 6 10 12)",
                "10 - 4 = 6 (left: 6 10 12)",
                "10 - 4 = 6 (left: 6 10 12)",
                "10 - 4 = 6 (left: 6 10 12)"
            ]
        },
        "step_2": {
            "steps": [
                "10 - 4 = 6 (left: 6 10 12)\n10 - 6 = 4 (left: 4 12)",
                "10 - 4 = 6 (left: 6 10 12)\n10 + 12 = 22 (left: 6 22)",
                "10 - 4 = 6 (left: 6 10 12)\n6 + 12 = 18 (left: 18 10)",
                "10 - 4 = 6 (left: 6 10 12)\n10 - 6 = 4 (left: 4 12)",
                "10 - 4 = 6 (left: 6 10 12)\n10 / 6 = 1.6666666666666667 (left: 1.67 12)"
            ],
            "values": [
                0.002,
                0.002,
                0.003,
                1.002,
                0.001
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 3",
                "3 <- 3",
                "4 <- 3"
            ],
            "resampled_steps": [
                "10 - 4 = 6 (left: 6 10 12)\n10 - 6 = 4 (left: 4 12)",
                "10 - 4 = 6 (left: 6 10 12)\n10 - 6 = 4 (left: 4 12)",
                "10 - 4 = 6 (left: 6 10 12)\n10 - 6 = 4 (left: 4 12)",
                "10 - 4 = 6 (left: 6 10 12)\n10 - 6 = 4 (left: 4 12)",
                "10 - 4 = 6 (left: 6 10 12)\n10 - 6 = 4 (left: 4 12)"
            ]
        },
        "step_3": {
            "steps": [
                "10 - 4 = 6 (left: 6 10 12)\n10 - 6 = 4 (left: 4 12)\n4 * 3 = 12 (left: 12)",
                "10 - 4 = 6 (left: 6 10 12)\n10 - 6 = 4 (left: 4 12)\n12 - 4 = 8 (left: 8)",
                "10 - 4 = 6 (left: 6 10 12)\n10 - 6 = 4 (left: 4 12)\n4 + 12 = 16 (left: 16)",
                "10 - 4 = 6 (left: 6 10 12)\n10 - 6 = 4 (left: 4 12)\n12 / 4 = 3 (left: 3 12)",
                "10 - 4 = 6 (left: 6 10 12)\n10 - 6 = 4 (left: 4 12)\n12 / 4 = 3 (left: 3)"
            ],
            "values": [
                0.003,
                0.003,
                0.002,
                0.003,
                0.0
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 1",
                "3 <- 0",
                "4 <- 3"
            ],
            "resampled_steps": [
                "10 - 4 = 6 (left: 6 10 12)\n10 - 6 = 4 (left: 4 12)\n4 * 3 = 12 (left: 12)",
                "10 - 4 = 6 (left: 6 10 12)\n10 - 6 = 4 (left: 4 12)\n4 * 3 = 12 (left: 12)",
                "10 - 4 = 6 (left: 6 10 12)\n10 - 6 = 4 (left: 4 12)\n12 - 4 = 8 (left: 8)",
                "10 - 4 = 6 (left: 6 10 12)\n10 - 6 = 4 (left: 4 12)\n4 * 3 = 12 (left: 12)",
                "10 - 4 = 6 (left: 6 10 12)\n10 - 6 = 4 (left: 4 12)\n12 / 4 = 3 (left: 3 12)"
            ]
        },
        "step_4": {
            "steps": [
                "10 - 4 = 6 (left: 6 10 12)\n10 - 6 = 4 (left: 4 12)\n4 * 3 = 12 (left: 12)\n12 - 2 = 10 (left: 10)",
                "10 - 4 = 6 (left: 6 10 12)\n10 - 6 = 4 (left: 4 12)\n4 * 3 = 12 (left: 12)\n12 / 2 = 6",
                "10 - 4 = 6 (left: 6 10 12)\n10 - 6 = 4 (left: 4 12)\n12 - 4 = 8 (left: 8)\n8 + 2 = 10 (left: 10)",
                "10 - 4 = 6 (left: 6 10 12)\n10 - 6 = 4 (left: 4 12)\n4 * 3 = 12 (left: 12)\n12 - 2 = 10 (left: 10)",
                "10 - 4 = 6 (left: 6 10 12)\n10 - 6 = 4 (left: 4 12)\n12 / 4 = 3 (left: 3 12)\n12 - 3 = 9 (left: 9)"
            ],
            "values": [
                0.001,
                0.003,
                0.002,
                0.002,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.46669950000000004
    },
    "942": {
        "input": "1 2 7 11",
        "step_1": {
            "steps": [
                "7 + 11 = 18 (left: 1 2 18)",
                "11 - 2 = 9 (left: 1 7 9)",
                "11 - 7 = 4 (left: 1 2 4)",
                "1 + 2 = 3 (left: 3 7 11)",
                "7 * 2 = 14 (left: 1 14 11)"
            ],
            "values": [
                0.003,
                1.001,
                1.002,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 2",
                "2 <- 1",
                "3 <- 2",
                "4 <- 2"
            ],
            "resampled_steps": [
                "11 - 2 = 9 (left: 1 7 9)",
                "11 - 7 = 4 (left: 1 2 4)",
                "11 - 2 = 9 (left: 1 7 9)",
                "11 - 7 = 4 (left: 1 2 4)",
                "11 - 7 = 4 (left: 1 2 4)"
            ]
        },
        "step_2": {
            "steps": [
                "11 - 2 = 9 (left: 1 7 9)\n1 + 7 = 8 (left: 8 9)",
                "11 - 7 = 4 (left: 1 2 4)\nPossible next steps:",
                "11 - 2 = 9 (left: 1 7 9)\n7 / 1 = 7 (left: 7 9)",
                "11 - 7 = 4 (left: 1 2 4)\n3 + 5 = 8 (left: 6 7 8)",
                "11 - 7 = 4 (left: 1 2 4)\n1 * 2 = 2 (left: 2)"
            ],
            "values": [
                1.002,
                0.003,
                0.003,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 0",
                "3 <- 3",
                "4 <- 0"
            ],
            "resampled_steps": [
                "11 - 2 = 9 (left: 1 7 9)\n1 + 7 = 8 (left: 8 9)",
                "11 - 2 = 9 (left: 1 7 9)\n1 + 7 = 8 (left: 8 9)",
                "11 - 2 = 9 (left: 1 7 9)\n1 + 7 = 8 (left: 8 9)",
                "11 - 7 = 4 (left: 1 2 4)\n3 + 5 = 8 (left: 6 7 8)",
                "11 - 2 = 9 (left: 1 7 9)\n1 + 7 = 8 (left: 8 9)"
            ]
        },
        "step_3": {
            "steps": [
                "11 - 2 = 9 (left: 1 7 9)\n1 + 7 = 8 (left: 8 9)\n8 / 9 = 0.888888888 (left: 0.888888888)",
                "11 - 2 = 9 (left: 1 7 9)\n1 + 7 = 8 (left: 8 9)\n8 * 9 = 72 (left: 72)",
                "11 - 2 = 9 (left: 1 7 9)\n1 + 7 = 8 (left: 8 9)\n8 - 9 = -1 (left: -1)",
                "11 - 7 = 4 (left: 1 2 4)\n3 + 5 = 8 (left: 6 7 8)\n8 / 6 = 1.33 (left: 1 6)",
                "11 - 2 = 9 (left: 1 7 9)\n1 + 7 = 8 (left: 8 9)\n8 / 9 \u2248 0.8889 (left: 0.8889)"
            ],
            "values": [
                0.002,
                0.003,
                0.0,
                60.0,
                0.002
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 3",
                "3 <- 3",
                "4 <- 3"
            ],
            "resampled_steps": [
                "11 - 7 = 4 (left: 1 2 4)\n3 + 5 = 8 (left: 6 7 8)\n8 / 6 = 1.33 (left: 1 6)",
                "11 - 7 = 4 (left: 1 2 4)\n3 + 5 = 8 (left: 6 7 8)\n8 / 6 = 1.33 (left: 1 6)",
                "11 - 7 = 4 (left: 1 2 4)\n3 + 5 = 8 (left: 6 7 8)\n8 / 6 = 1.33 (left: 1 6)",
                "11 - 7 = 4 (left: 1 2 4)\n3 + 5 = 8 (left: 6 7 8)\n8 / 6 = 1.33 (left: 1 6)",
                "11 - 7 = 4 (left: 1 2 4)\n3 + 5 = 8 (left: 6 7 8)\n8 / 6 = 1.33 (left: 1 6)"
            ]
        },
        "step_4": {
            "steps": [
                "11 - 7 = 4 (left: 1 2 4)\n3 + 5 = 8 (left: 6 7 8)\n8 / 6 = 1.33 (left: 1 6)\n6 - 1 = 5 (left: 5)",
                "11 - 7 = 4 (left: 1 2 4)\n3 + 5 = 8 (left: 6 7 8)\n8 / 6 = 1.33 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "11 - 7 = 4 (left: 1 2 4)\n3 + 5 = 8 (left: 6 7 8)\n8 / 6 = 1.33 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "11 - 7 = 4 (left: 1 2 4)\n3 + 5 = 8 (left: 6 7 8)\n8 / 6 = 1.33 (left: 1 6)\n6 - 1 = 5 (left: 5)",
                "11 - 7 = 4 (left: 1 2 4)\n3 + 5 = 8 (left: 6 7 8)\n8 / 6 = 1.33 (left: 1 6)\n1 + 6 = 7 (left: 7)"
            ],
            "values": [
                0.002,
                0.003,
                0.0,
                0.0,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.4773455
    },
    "943": {
        "input": "4 5 6 8",
        "step_1": {
            "steps": [
                "6 * 8 = 48 (left: 4 5 48)",
                "6 * 8 = 48 (left: 4 5 48)",
                "Input: 1 2 3 4",
                "6 / 8 = 0.75 (left: 4 5 0.75)",
                "5 * 6 = 30 (left: 4 8 30)"
            ],
            "values": [
                2.001,
                2.0,
                0.003,
                3.0,
                2.001
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 4",
                "2 <- 0",
                "3 <- 4",
                "4 <- 3"
            ],
            "resampled_steps": [
                "6 * 8 = 48 (left: 4 5 48)",
                "5 * 6 = 30 (left: 4 8 30)",
                "6 * 8 = 48 (left: 4 5 48)",
                "5 * 6 = 30 (left: 4 8 30)",
                "6 / 8 = 0.75 (left: 4 5 0.75)"
            ]
        },
        "step_2": {
            "steps": [
                "6 * 8 = 48 (left: 4 5 48)\n4 * 5 = 20 (left: 20 48)",
                "5 * 6 = 30 (left: 4 8 30)\n4 * 8 = 32 (left: 8 30 32)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9.6 (left: 4 9.6)",
                "5 * 6 = 30 (left: 4 8 30)\n30 - 4 = 26 (left: 8 26)",
                "6 / 8 = 0.75 (left: 4 5 0.75)\n4 / 0.75 = 5.33 (left: 5.33)"
            ],
            "values": [
                0.002,
                22.0,
                40.001,
                1.001,
                0.002
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 1",
                "2 <- 2",
                "3 <- 2",
                "4 <- 2"
            ],
            "resampled_steps": [
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9.6 (left: 4 9.6)",
                "5 * 6 = 30 (left: 4 8 30)\n4 * 8 = 32 (left: 8 30 32)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9.6 (left: 4 9.6)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9.6 (left: 4 9.6)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9.6 (left: 4 9.6)"
            ]
        },
        "step_3": {
            "steps": [
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9.6 (left: 4 9.6)\n4 + 1 = 5 (left: 2 5)",
                "5 * 6 = 30 (left: 4 8 30)\n4 * 8 = 32 (left: 8 30 32)\n32 + 8 = 40 (left: 30 40)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9.6 (left: 4 9.6)\n9.6 / 4 = 2.4 (left: 2.4)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9.6 (left: 4 9.6)\n3 * 3 = 9 (left: 3 9)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9.6 (left: 4 9.6)\n4 + 9.6 = 13.6"
            ],
            "values": [
                60.0,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 0",
                "3 <- 0",
                "4 <- 0"
            ],
            "resampled_steps": [
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9.6 (left: 4 9.6)\n4 + 1 = 5 (left: 2 5)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9.6 (left: 4 9.6)\n4 + 1 = 5 (left: 2 5)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9.6 (left: 4 9.6)\n4 + 1 = 5 (left: 2 5)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9.6 (left: 4 9.6)\n4 + 1 = 5 (left: 2 5)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9.6 (left: 4 9.6)\n4 + 1 = 5 (left: 2 5)"
            ]
        },
        "step_4": {
            "steps": [
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9.6 (left: 4 9.6)\n4 + 1 = 5 (left: 2 5)\n2 + 5 = 7 (left: 7)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9.6 (left: 4 9.6)\n4 + 1 = 5 (left: 2 5)\n2 * 5 = 10 (left: 10)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9.6 (left: 4 9.6)\n4 + 1 = 5 (left: 2 5)\n5 - 2 = 3 (left: 3)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9.6 (left: 4 9.6)\n4 + 1 = 5 (left: 2 5)\n2 + 5 = 7 (left: 7)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9.6 (left: 4 9.6)\n4 + 1 = 5 (left: 2 5)\n2 * 5 = 10 (left: 10)"
            ],
            "values": [
                0.001,
                0.003,
                0.002,
                0.002,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.488767
    },
    "944": {
        "input": "6 10 12 13",
        "step_1": {
            "steps": [
                "12 * 13 = 156 (left: 6 10 156)",
                "13 - 10 = 3 (left: 6 12 3)",
                "10 + 12 = 22 (left: 6 13 22)",
                "12 + 6 = 18 (left: 10 18 13)",
                "10 - 6 = 4 (left: 4 10 12)"
            ],
            "values": [
                0.003,
                40.0,
                1.002,
                0.003,
                2.001
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 1",
                "3 <- 1",
                "4 <- 1"
            ],
            "resampled_steps": [
                "13 - 10 = 3 (left: 6 12 3)",
                "13 - 10 = 3 (left: 6 12 3)",
                "13 - 10 = 3 (left: 6 12 3)",
                "13 - 10 = 3 (left: 6 12 3)",
                "13 - 10 = 3 (left: 6 12 3)"
            ]
        },
        "step_2": {
            "steps": [
                "13 - 10 = 3 (left: 6 12 3)\n3 + 0.5 = 3.5 (left: 3.5 72)",
                "13 - 10 = 3 (left: 6 12 3)\n6 / 3 = 2 (left: 12 2)",
                "13 - 10 = 3 (left: 6 12 3)\n6 * 3 = 18 (left: 12 18)",
                "13 - 10 = 3 (left: 6 12 3)\n3 - 1 = 2 (left: 1 2)",
                "13 - 10 = 3 (left: 6 12 3)\n6 * 3 = 18 (left: 12 18)"
            ],
            "values": [
                0.002,
                41.0,
                0.003,
                40.0,
                0.003
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 3",
                "3 <- 3",
                "4 <- 3"
            ],
            "resampled_steps": [
                "13 - 10 = 3 (left: 6 12 3)\n6 / 3 = 2 (left: 12 2)",
                "13 - 10 = 3 (left: 6 12 3)\n6 / 3 = 2 (left: 12 2)",
                "13 - 10 = 3 (left: 6 12 3)\n3 - 1 = 2 (left: 1 2)",
                "13 - 10 = 3 (left: 6 12 3)\n3 - 1 = 2 (left: 1 2)",
                "13 - 10 = 3 (left: 6 12 3)\n3 - 1 = 2 (left: 1 2)"
            ]
        },
        "step_3": {
            "steps": [
                "13 - 10 = 3 (left: 6 12 3)\n6 / 3 = 2 (left: 12 2)\n12 / 2 = 6 (left: 6)",
                "13 - 10 = 3 (left: 6 12 3)\n6 / 3 = 2 (left: 12 2)\n12 + 2 = 14",
                "13 - 10 = 3 (left: 6 12 3)\n3 - 1 = 2 (left: 1 2)\n1 + 2 = 3 (left: 3)",
                "13 - 10 = 3 (left: 6 12 3)\n3 - 1 = 2 (left: 1 2)\n2 / 1 = 2 (left: 2)",
                "13 - 10 = 3 (left: 6 12 3)\n3 - 1 = 2 (left: 1 2)\nNo possible next steps with the given input."
            ],
            "values": [
                0.002,
                0.003,
                0.001,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 0",
                "2 <- 3",
                "3 <- 1",
                "4 <- 0"
            ],
            "resampled_steps": [
                "13 - 10 = 3 (left: 6 12 3)\n3 - 1 = 2 (left: 1 2)\nNo possible next steps with the given input.",
                "13 - 10 = 3 (left: 6 12 3)\n6 / 3 = 2 (left: 12 2)\n12 / 2 = 6 (left: 6)",
                "13 - 10 = 3 (left: 6 12 3)\n3 - 1 = 2 (left: 1 2)\n2 / 1 = 2 (left: 2)",
                "13 - 10 = 3 (left: 6 12 3)\n6 / 3 = 2 (left: 12 2)\n12 + 2 = 14",
                "13 - 10 = 3 (left: 6 12 3)\n6 / 3 = 2 (left: 12 2)\n12 / 2 = 6 (left: 6)"
            ]
        },
        "step_4": {
            "steps": [
                "13 - 10 = 3 (left: 6 12 3)\n3 - 1 = 2 (left: 1 2)\nNo possible next steps with the given input.\nNo possible next steps with the given input.",
                "13 - 10 = 3 (left: 6 12 3)\n6 / 3 = 2 (left: 12 2)\n12 / 2 = 6 (left: 6)\n8 / 6 = 1.33 (left: 1.33 8)",
                "13 - 10 = 3 (left: 6 12 3)\n3 - 1 = 2 (left: 1 2)\n2 / 1 = 2 (left: 2)\n2 + 2 = 4",
                "13 - 10 = 3 (left: 6 12 3)\n6 / 3 = 2 (left: 12 2)\n12 + 2 = 14\n12 / 2 = 6 (left: 6 14)",
                "13 - 10 = 3 (left: 6 12 3)\n6 / 3 = 2 (left: 12 2)\n12 / 2 = 6 (left: 6)\n6 - 8 = -2 (left: -2 8)"
            ],
            "values": [
                0.003,
                0.0,
                0.003,
                0.003,
                1.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.4988545
    },
    "945": {
        "input": "1 3 9 9",
        "step_1": {
            "steps": [
                "9 / 3 = 3 (left: 1 3 9)",
                "3 * 9 = 27 (left: 1 9 27)",
                "9 / 3 = 3 (left: 1 3 9)",
                "9 / 1 = 9 (left: 3 9 9)",
                "9 - 3 = 6 (left: 1 6 9)"
            ],
            "values": [
                1.002,
                1.002,
                40.0,
                0.003,
                2.0
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 2",
                "2 <- 2",
                "3 <- 2",
                "4 <- 2"
            ],
            "resampled_steps": [
                "9 / 3 = 3 (left: 1 3 9)",
                "9 / 3 = 3 (left: 1 3 9)",
                "9 / 3 = 3 (left: 1 3 9)",
                "9 / 3 = 3 (left: 1 3 9)",
                "9 / 3 = 3 (left: 1 3 9)"
            ]
        },
        "step_2": {
            "steps": [
                "9 / 3 = 3 (left: 1 3 9)\n3 * 1 = 3 (left: 3 9)",
                "9 / 3 = 3 (left: 1 3 9)\n5 * 10 = 50 (left: 5 20 50)",
                "9 / 3 = 3 (left: 1 3 9)\n1 + 3 = 4 (left: 4 9)",
                "9 / 3 = 3 (left: 1 3 9)\n5 / 2 = 2.5 (left: 4 2.5)",
                "9 / 3 = 3 (left: 1 3 9)\n9 / 3 = 3 (left: 1 3)"
            ],
            "values": [
                0.003,
                22.0,
                21.001,
                60.0,
                20.0
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 3",
                "2 <- 3",
                "3 <- 2",
                "4 <- 3"
            ],
            "resampled_steps": [
                "9 / 3 = 3 (left: 1 3 9)\n1 + 3 = 4 (left: 4 9)",
                "9 / 3 = 3 (left: 1 3 9)\n5 / 2 = 2.5 (left: 4 2.5)",
                "9 / 3 = 3 (left: 1 3 9)\n5 / 2 = 2.5 (left: 4 2.5)",
                "9 / 3 = 3 (left: 1 3 9)\n1 + 3 = 4 (left: 4 9)",
                "9 / 3 = 3 (left: 1 3 9)\n5 / 2 = 2.5 (left: 4 2.5)"
            ]
        },
        "step_3": {
            "steps": [
                "9 / 3 = 3 (left: 1 3 9)\n1 + 3 = 4 (left: 4 9)\n9 - 4 = 5 (left: 5 9)",
                "9 / 3 = 3 (left: 1 3 9)\n5 / 2 = 2.5 (left: 4 2.5)\n4 + 2.5 = 6.5 (left: 6.5)",
                "9 / 3 = 3 (left: 1 3 9)\n5 / 2 = 2.5 (left: 4 2.5)\n4 - 2.5 = 1.5 (left: 1.5 2.5)",
                "9 / 3 = 3 (left: 1 3 9)\n1 + 3 = 4 (left: 4 9)\n4 + 9 = 13 (left: 9 13)",
                "9 / 3 = 3 (left: 1 3 9)\n5 / 2 = 2.5 (left: 4 2.5)\n4 + 2.5 = 6.5 (left: 2.5 6.5)"
            ],
            "values": [
                0.003,
                0.003,
                2.0,
                1.002,
                2.001
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 2",
                "2 <- 4",
                "3 <- 2",
                "4 <- 4"
            ],
            "resampled_steps": [
                "9 / 3 = 3 (left: 1 3 9)\n5 / 2 = 2.5 (left: 4 2.5)\n4 + 2.5 = 6.5 (left: 2.5 6.5)",
                "9 / 3 = 3 (left: 1 3 9)\n5 / 2 = 2.5 (left: 4 2.5)\n4 - 2.5 = 1.5 (left: 1.5 2.5)",
                "9 / 3 = 3 (left: 1 3 9)\n5 / 2 = 2.5 (left: 4 2.5)\n4 + 2.5 = 6.5 (left: 2.5 6.5)",
                "9 / 3 = 3 (left: 1 3 9)\n5 / 2 = 2.5 (left: 4 2.5)\n4 - 2.5 = 1.5 (left: 1.5 2.5)",
                "9 / 3 = 3 (left: 1 3 9)\n5 / 2 = 2.5 (left: 4 2.5)\n4 + 2.5 = 6.5 (left: 2.5 6.5)"
            ]
        },
        "step_4": {
            "steps": [
                "9 / 3 = 3 (left: 1 3 9)\n5 / 2 = 2.5 (left: 4 2.5)\n4 + 2.5 = 6.5 (left: 2.5 6.5)\n6.5 / 2.5 = 2.6 (left: 2.6)",
                "9 / 3 = 3 (left: 1 3 9)\n5 / 2 = 2.5 (left: 4 2.5)\n4 - 2.5 = 1.5 (left: 1.5 2.5)\n2.5 - 1.5 = 1 (left: 1)",
                "9 / 3 = 3 (left: 1 3 9)\n5 / 2 = 2.5 (left: 4 2.5)\n4 + 2.5 = 6.5 (left: 2.5 6.5)\n6.5 / 2.5 = 2.6 (left: 2.6)",
                "9 / 3 = 3 (left: 1 3 9)\n5 / 2 = 2.5 (left: 4 2.5)\n4 - 2.5 = 1.5 (left: 1.5 2.5)\n2.5 / 1.5 = 1.66666666667 (left: 1.66666666667)",
                "9 / 3 = 3 (left: 1 3 9)\n5 / 2 = 2.5 (left: 4 2.5)\n4 + 2.5 = 6.5 (left: 2.5 6.5)\n2.5 + 6.5 = 9 (left: 9)"
            ],
            "values": [
                0.002,
                0.002,
                0.003,
                0.0,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.5096715
    },
    "946": {
        "input": "1 4 4 11",
        "step_1": {
            "steps": [
                "4 / 1 = 4 (left: 4 4 11)",
                "4 / 1 = 4 (left: 4 4 11)",
                "11 - 4 = 7 (left: 1 4 7)",
                "1 + 4 = 5 (left: 4 5 11)",
                "4 / 1 = 4 (left: 4 4 11)"
            ],
            "values": [
                22.0,
                3.0,
                21.001,
                1.002,
                3.0
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 2",
                "3 <- 0",
                "4 <- 0"
            ],
            "resampled_steps": [
                "4 / 1 = 4 (left: 4 4 11)",
                "4 / 1 = 4 (left: 4 4 11)",
                "11 - 4 = 7 (left: 1 4 7)",
                "4 / 1 = 4 (left: 4 4 11)",
                "4 / 1 = 4 (left: 4 4 11)"
            ]
        },
        "step_2": {
            "steps": [
                "4 / 1 = 4 (left: 4 4 11)\n11 - 4 = 7 (left: 4 7)",
                "4 / 1 = 4 (left: 4 4 11)\n12 - 3 = 9 (left: 9 9 12)",
                "11 - 4 = 7 (left: 1 4 7)\n9 + 3 = 12 (left: 6 12)",
                "4 / 1 = 4 (left: 4 4 11)\n4 * 4 = 16 (left: 16 11)",
                "4 / 1 = 4 (left: 4 4 11)\nPossible next steps:"
            ],
            "values": [
                0.003,
                2.001,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 1",
                "3 <- 1",
                "4 <- 1"
            ],
            "resampled_steps": [
                "4 / 1 = 4 (left: 4 4 11)\n12 - 3 = 9 (left: 9 9 12)",
                "4 / 1 = 4 (left: 4 4 11)\n12 - 3 = 9 (left: 9 9 12)",
                "4 / 1 = 4 (left: 4 4 11)\n12 - 3 = 9 (left: 9 9 12)",
                "4 / 1 = 4 (left: 4 4 11)\n12 - 3 = 9 (left: 9 9 12)",
                "4 / 1 = 4 (left: 4 4 11)\n12 - 3 = 9 (left: 9 9 12)"
            ]
        },
        "step_3": {
            "steps": [
                "4 / 1 = 4 (left: 4 4 11)\n12 - 3 = 9 (left: 9 9 12)\n9 + 9 = 18 (left: 18 12)",
                "4 / 1 = 4 (left: 4 4 11)\n12 - 3 = 9 (left: 9 9 12)\n9 * 9 = 81 (left: 81 12)",
                "4 / 1 = 4 (left: 4 4 11)\n12 - 3 = 9 (left: 9 9 12)\n9 * 9 = 81 (left: 12 81)",
                "4 / 1 = 4 (left: 4 4 11)\n12 - 3 = 9 (left: 9 9 12)\n12 - 9 = 3 (left: 9 3)",
                "4 / 1 = 4 (left: 4 4 11)\n12 - 3 = 9 (left: 9 9 12)\n4 * 6 = 24 (left: 24 3 8)"
            ],
            "values": [
                0.002,
                40.001,
                0.002,
                0.003,
                21.001
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 1",
                "3 <- 1",
                "4 <- 4"
            ],
            "resampled_steps": [
                "4 / 1 = 4 (left: 4 4 11)\n12 - 3 = 9 (left: 9 9 12)\n9 * 9 = 81 (left: 81 12)",
                "4 / 1 = 4 (left: 4 4 11)\n12 - 3 = 9 (left: 9 9 12)\n9 * 9 = 81 (left: 81 12)",
                "4 / 1 = 4 (left: 4 4 11)\n12 - 3 = 9 (left: 9 9 12)\n9 * 9 = 81 (left: 81 12)",
                "4 / 1 = 4 (left: 4 4 11)\n12 - 3 = 9 (left: 9 9 12)\n9 * 9 = 81 (left: 81 12)",
                "4 / 1 = 4 (left: 4 4 11)\n12 - 3 = 9 (left: 9 9 12)\n4 * 6 = 24 (left: 24 3 8)"
            ]
        },
        "step_4": {
            "steps": [
                "4 / 1 = 4 (left: 4 4 11)\n12 - 3 = 9 (left: 9 9 12)\n9 * 9 = 81 (left: 81 12)\n81 + 12 = 93 (left: 93)",
                "4 / 1 = 4 (left: 4 4 11)\n12 - 3 = 9 (left: 9 9 12)\n9 * 9 = 81 (left: 81 12)\n81 / 12 = 6.75 (left: 6.75)",
                "4 / 1 = 4 (left: 4 4 11)\n12 - 3 = 9 (left: 9 9 12)\n9 * 9 = 81 (left: 81 12)\n81 - 12 = 69 (left: 69)",
                "4 / 1 = 4 (left: 4 4 11)\n12 - 3 = 9 (left: 9 9 12)\n9 * 9 = 81 (left: 81 12)\n81 + 12 = 93 (left: 93)",
                "4 / 1 = 4 (left: 4 4 11)\n12 - 3 = 9 (left: 9 9 12)\n4 * 6 = 24 (left: 24 3 8)\n24 - 3 = 21 (left: 21 8)"
            ],
            "values": [
                0.003,
                0.002,
                0.001,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.5215055
    },
    "947": {
        "input": "2 3 9 10",
        "step_1": {
            "steps": [
                "10 / 2 = 5 (left: 3 9 5)",
                "2 + 3 = 5 (left: 5 9 10)",
                "10 - 3 = 7 (left: 3 7 10)",
                "9 / 3 = 3 (left: 2 3 10)",
                "3 * 2 = 6 (left: 6 9 10)"
            ],
            "values": [
                3.0,
                21.0,
                0.003,
                41.0,
                3.0
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 3",
                "3 <- 1",
                "4 <- 3"
            ],
            "resampled_steps": [
                "9 / 3 = 3 (left: 2 3 10)",
                "9 / 3 = 3 (left: 2 3 10)",
                "9 / 3 = 3 (left: 2 3 10)",
                "2 + 3 = 5 (left: 5 9 10)",
                "9 / 3 = 3 (left: 2 3 10)"
            ]
        },
        "step_2": {
            "steps": [
                "9 / 3 = 3 (left: 2 3 10)\n3 * 2 = 6 (left: 6 10)",
                "9 / 3 = 3 (left: 2 3 10)\n10 / 2 = 5 (left: 3 5)",
                "9 / 3 = 3 (left: 2 3 10)\n3 * 2 = 6 (left: 6 10)",
                "2 + 3 = 5 (left: 5 9 10)\n5 * 9 = 45 (left: 10 45)",
                "9 / 3 = 3 (left: 2 3 10)\n10 - 2 = 8 (left: 8 10)"
            ],
            "values": [
                0.002,
                2.001,
                0.003,
                0.003,
                21.0
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 4",
                "2 <- 4",
                "3 <- 4",
                "4 <- 4"
            ],
            "resampled_steps": [
                "9 / 3 = 3 (left: 2 3 10)\n10 - 2 = 8 (left: 8 10)",
                "9 / 3 = 3 (left: 2 3 10)\n10 - 2 = 8 (left: 8 10)",
                "9 / 3 = 3 (left: 2 3 10)\n10 - 2 = 8 (left: 8 10)",
                "9 / 3 = 3 (left: 2 3 10)\n10 - 2 = 8 (left: 8 10)",
                "9 / 3 = 3 (left: 2 3 10)\n10 - 2 = 8 (left: 8 10)"
            ]
        },
        "step_3": {
            "steps": [
                "9 / 3 = 3 (left: 2 3 10)\n10 - 2 = 8 (left: 8 10)\n10 - 8 = 2 (left: 2)",
                "9 / 3 = 3 (left: 2 3 10)\n10 - 2 = 8 (left: 8 10)\n10 / 8 = 1.25 (left: 1.25)",
                "9 / 3 = 3 (left: 2 3 10)\n10 - 2 = 8 (left: 8 10)\n8 * 10 = 80 (left: 80)",
                "9 / 3 = 3 (left: 2 3 10)\n10 - 2 = 8 (left: 8 10)\n10 - 8 = 2 (left: 2)",
                "9 / 3 = 3 (left: 2 3 10)\n10 - 2 = 8 (left: 8 10)\n8 + 10 = 18 (left: 18)"
            ],
            "values": [
                0.002,
                0.002,
                0.003,
                0.002,
                40.0
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 4",
                "2 <- 4",
                "3 <- 4",
                "4 <- 4"
            ],
            "resampled_steps": [
                "9 / 3 = 3 (left: 2 3 10)\n10 - 2 = 8 (left: 8 10)\n8 + 10 = 18 (left: 18)",
                "9 / 3 = 3 (left: 2 3 10)\n10 - 2 = 8 (left: 8 10)\n8 + 10 = 18 (left: 18)",
                "9 / 3 = 3 (left: 2 3 10)\n10 - 2 = 8 (left: 8 10)\n8 + 10 = 18 (left: 18)",
                "9 / 3 = 3 (left: 2 3 10)\n10 - 2 = 8 (left: 8 10)\n8 + 10 = 18 (left: 18)",
                "9 / 3 = 3 (left: 2 3 10)\n10 - 2 = 8 (left: 8 10)\n8 + 10 = 18 (left: 18)"
            ]
        },
        "step_4": {
            "steps": [
                "9 / 3 = 3 (left: 2 3 10)\n10 - 2 = 8 (left: 8 10)\n8 + 10 = 18 (left: 18)\n18 + 8 = 26",
                "9 / 3 = 3 (left: 2 3 10)\n10 - 2 = 8 (left: 8 10)\n8 + 10 = 18 (left: 18)\n18 / 2 = 9",
                "9 / 3 = 3 (left: 2 3 10)\n10 - 2 = 8 (left: 8 10)\n8 + 10 = 18 (left: 18)\nThere are no possible next steps with the input 18.",
                "9 / 3 = 3 (left: 2 3 10)\n10 - 2 = 8 (left: 8 10)\n8 + 10 = 18 (left: 18)\nThere are no possible next steps with the input 18.",
                "9 / 3 = 3 (left: 2 3 10)\n10 - 2 = 8 (left: 8 10)\n8 + 10 = 18 (left: 18)\n18 - 8 = 10 (left: 10)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.5303765
    },
    "948": {
        "input": "1 2 3 13",
        "step_1": {
            "steps": [
                "1 + 2 = 3 (left: 3 3 13)",
                "13 - 2 = 11 (left: 1 3 11)",
                "2 + 3 = 5 (left: 1 5 13)",
                "13 - 1 = 12 (left: 2 3 12)",
                "3 * 2 = 6 (left: 1 6 13)"
            ],
            "values": [
                1.002,
                0.003,
                1.002,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 0",
                "3 <- 4",
                "4 <- 2"
            ],
            "resampled_steps": [
                "1 + 2 = 3 (left: 3 3 13)",
                "1 + 2 = 3 (left: 3 3 13)",
                "1 + 2 = 3 (left: 3 3 13)",
                "3 * 2 = 6 (left: 1 6 13)",
                "2 + 3 = 5 (left: 1 5 13)"
            ]
        },
        "step_2": {
            "steps": [
                "1 + 2 = 3 (left: 3 3 13)\n13 + 3 = 16 (left: 3 16)",
                "1 + 2 = 3 (left: 3 3 13)\n3 + 3 = 6 (left: 6 13)",
                "1 + 2 = 3 (left: 3 3 13)\n7 - 4 = 3 (left: 3 9)",
                "3 * 2 = 6 (left: 1 6 13)\n16 - 4 = 12 (left: 4 12)",
                "2 + 3 = 5 (left: 1 5 13)\n5 - 13 = -8 (left: 1 -8)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                20.002,
                0.002
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 3",
                "3 <- 3",
                "4 <- 3"
            ],
            "resampled_steps": [
                "3 * 2 = 6 (left: 1 6 13)\n16 - 4 = 12 (left: 4 12)",
                "3 * 2 = 6 (left: 1 6 13)\n16 - 4 = 12 (left: 4 12)",
                "3 * 2 = 6 (left: 1 6 13)\n16 - 4 = 12 (left: 4 12)",
                "3 * 2 = 6 (left: 1 6 13)\n16 - 4 = 12 (left: 4 12)",
                "3 * 2 = 6 (left: 1 6 13)\n16 - 4 = 12 (left: 4 12)"
            ]
        },
        "step_3": {
            "steps": [
                "3 * 2 = 6 (left: 1 6 13)\n16 - 4 = 12 (left: 4 12)\nInput: 16 8 3",
                "3 * 2 = 6 (left: 1 6 13)\n16 - 4 = 12 (left: 4 12)\n4 * 12 = 48 (left: 48)",
                "3 * 2 = 6 (left: 1 6 13)\n16 - 4 = 12 (left: 4 12)\n12 - 4 = 8 (left: 8 12)",
                "3 * 2 = 6 (left: 1 6 13)\n16 - 4 = 12 (left: 4 12)\n4 * 12 = 48 (left: 48)",
                "3 * 2 = 6 (left: 1 6 13)\n16 - 4 = 12 (left: 4 12)\nInput: 16 8 3 48"
            ],
            "values": [
                0.003,
                0.003,
                1.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 2",
                "2 <- 2",
                "3 <- 2",
                "4 <- 2"
            ],
            "resampled_steps": [
                "3 * 2 = 6 (left: 1 6 13)\n16 - 4 = 12 (left: 4 12)\n12 - 4 = 8 (left: 8 12)",
                "3 * 2 = 6 (left: 1 6 13)\n16 - 4 = 12 (left: 4 12)\n12 - 4 = 8 (left: 8 12)",
                "3 * 2 = 6 (left: 1 6 13)\n16 - 4 = 12 (left: 4 12)\n12 - 4 = 8 (left: 8 12)",
                "3 * 2 = 6 (left: 1 6 13)\n16 - 4 = 12 (left: 4 12)\n12 - 4 = 8 (left: 8 12)",
                "3 * 2 = 6 (left: 1 6 13)\n16 - 4 = 12 (left: 4 12)\n12 - 4 = 8 (left: 8 12)"
            ]
        },
        "step_4": {
            "steps": [
                "3 * 2 = 6 (left: 1 6 13)\n16 - 4 = 12 (left: 4 12)\n12 - 4 = 8 (left: 8 12)\n12 + 8 = 20 (left: 20)",
                "3 * 2 = 6 (left: 1 6 13)\n16 - 4 = 12 (left: 4 12)\n12 - 4 = 8 (left: 8 12)\n12 - 8 = 4 (left: 4)",
                "3 * 2 = 6 (left: 1 6 13)\n16 - 4 = 12 (left: 4 12)\n12 - 4 = 8 (left: 8 12)\n8 + 12 = 20 (left: 20)",
                "3 * 2 = 6 (left: 1 6 13)\n16 - 4 = 12 (left: 4 12)\n12 - 4 = 8 (left: 8 12)\n8 - 12 = -4 (left: -4)",
                "3 * 2 = 6 (left: 1 6 13)\n16 - 4 = 12 (left: 4 12)\n12 - 4 = 8 (left: 8 12)\n8 + 12 = 20 (left: 20)"
            ],
            "values": [
                0.003,
                0.0,
                0.002,
                0.002,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.541353
    },
    "949": {
        "input": "1 6 6 6",
        "step_1": {
            "steps": [
                "6 - 1 = 5 (left: 6 5 5)",
                "6 * 1 = 6 (left: 6 6 6)",
                "6 - 1 = 5 (left: 1 5 6)",
                "6 - 1 = 5 (left: 5 6 6)",
                "6 / 1 = 6 (left: 6 6 6)"
            ],
            "values": [
                1.002,
                0.003,
                21.0,
                22.0,
                1.001
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 3",
                "2 <- 2",
                "3 <- 3",
                "4 <- 0"
            ],
            "resampled_steps": [
                "6 - 1 = 5 (left: 1 5 6)",
                "6 - 1 = 5 (left: 5 6 6)",
                "6 - 1 = 5 (left: 1 5 6)",
                "6 - 1 = 5 (left: 5 6 6)",
                "6 - 1 = 5 (left: 6 5 5)"
            ]
        },
        "step_2": {
            "steps": [
                "6 - 1 = 5 (left: 1 5 6)\n6 / 1 = 6 (left: 6 6)",
                "6 - 1 = 5 (left: 5 6 6)\n6 / 5 = 1.2 (left: 1 1.2)",
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)",
                "6 - 1 = 5 (left: 5 6 6)\n6 - 5 = 1 (left: 1 6)",
                "6 - 1 = 5 (left: 6 5 5)\n3 + 7 = 10 (left: 10 10)"
            ],
            "values": [
                0.003,
                1.002,
                40.001,
                60.0,
                0.002
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 2",
                "2 <- 2",
                "3 <- 2",
                "4 <- 2"
            ],
            "resampled_steps": [
                "6 - 1 = 5 (left: 5 6 6)\n6 / 5 = 1.2 (left: 1 1.2)",
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)",
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)",
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)",
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)"
            ]
        },
        "step_3": {
            "steps": [
                "6 - 1 = 5 (left: 5 6 6)\n6 / 5 = 1.2 (left: 1 1.2)\n1 - 1.2 = -0.2 (left: -0.2)",
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)\n6 + 6 = 12 (left: 12)",
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)\n6 - 6 = 0 (left: 0)",
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)\n6 + 6 = 12 (left: 6 12)",
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)\n6 + 6 = 12 (left: 12)"
            ],
            "values": [
                0.003,
                0.003,
                20.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 2",
                "2 <- 2",
                "3 <- 2",
                "4 <- 2"
            ],
            "resampled_steps": [
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)\n6 - 6 = 0 (left: 0)",
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)\n6 - 6 = 0 (left: 0)",
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)\n6 - 6 = 0 (left: 0)",
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)\n6 - 6 = 0 (left: 0)",
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)\n6 - 6 = 0 (left: 0)"
            ]
        },
        "step_4": {
            "steps": [
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)\n6 - 6 = 0 (left: 0)\nThere are no possible next steps with the input 0.",
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)\n6 - 6 = 0 (left: 0)\nThere are no possible next steps as there is no input provided.",
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)\n6 - 6 = 0 (left: 0)\nThere are no possible next steps since there is no input provided.",
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)\n6 - 6 = 0 (left: 0)\nThere are no possible next steps with the input 0.",
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)\n6 - 6 = 0 (left: 0)\nThere are no possible next steps for the input 0."
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.5510945
    }
}