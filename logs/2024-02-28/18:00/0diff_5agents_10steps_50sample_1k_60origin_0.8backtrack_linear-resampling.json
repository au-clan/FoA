{
    "0": {
        "puzzle": "1 1 4 6",
        "Step 0": {
            "steps": [
                "6 - 4 = 2 (left: 1 2 6)",
                "1 * 1 = 1 (left: 1 4 6)",
                "6 - 1 = 5 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 4 5)",
                "6 - 4 = 2 (left: 1 2 6)"
            ],
            "Evaluation": [
                1.002,
                41.0,
                21.0,
                21.0,
                1.002
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.3",
                "2 <- 0.1",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "6 - 4 = 2 (left: 1 2 6)",
                "6 - 1 = 5 (left: 1 4 5)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.002,
                1.002,
                21.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.3",
                "2 <- 1.0",
                "3 <- 0.1",
                "4 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 10 / 5 = 2 (left: 2)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)"
            ],
            "Evaluation": [
                41.0,
                0.002,
                0.001,
                2.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 0.1",
                "2 <- 1.0",
                "3 <- INIT",
                "4 <- 1.0"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 10 / 5 = 2 (left: 2)",
                "6 - 4 = 2 (left: 1 2 6)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 5 + 10 = 15 (left: 15)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.001,
                1.002,
                0.002
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 1.0",
                "2 <- 0.2",
                "3 <- 1.0",
                "4 <- 1.0"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: 1 * (1 * 4 * 6) = 24",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 10 / 5 = 2 (left: 2)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || Input: 5 10",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 5 + 10 = 15 (left: 15)"
            ]
        },
        "Input": "1 1 4 6",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1": {
        "puzzle": "1 1 11 11",
        "Step 0": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 11 11)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12)"
            ],
            "Evaluation": [
                20.002,
                1.002,
                1.002,
                1.002,
                20.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.0",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12)",
                "11 * 1 = 11 (left: 1 11 11)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                20.002,
                20.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.4",
                "2 <- INIT",
                "3 <- 0.4",
                "4 <- 0.0"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                1.002,
                20.002,
                1.002,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.2",
                "2 <- 1.2",
                "3 <- 2.4",
                "4 <- 0.4"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 10 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                0.003,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 3.4",
                "2 <- 2.1",
                "3 <- 0.0",
                "4 <- 2.1"
            ]
        },
        "Step 4": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 1.2",
                "2 <- 3.4",
                "3 <- 1.2",
                "4 <- 3.4"
            ]
        },
        "Step 5": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 2.4",
                "3 <- 2.4",
                "4 <- 2.1"
            ]
        },
        "Step 6": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 1.2",
                "2 <- 0.0",
                "3 <- 1.3",
                "4 <- 2.4"
            ]
        },
        "Step 7": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 7.2",
                "2 <- 0.0",
                "3 <- 2.4",
                "4 <- 1.2"
            ]
        },
        "Step 8": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 8.2",
                "1 <- 8.2",
                "2 <- 8.2",
                "3 <- 1.2",
                "4 <- 0.0"
            ]
        },
        "Step 9": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ]
        },
        "Input": "1 1 11 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "2": {
        "puzzle": "1 1 3 8",
        "Step 0": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8)",
                "1 * 3 = 3 (left: 3 1 8)",
                "8 - 3 = 5 (left: 1 3 5)",
                "8 - 3 = 5 (left: 1 3 5)",
                "3 * 1 = 3 (left: 1 3 8)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                1.002,
                1.002,
                60.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.0",
                "2 <- 0.4",
                "3 <- 0.0",
                "4 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "3 * 1 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)"
            ],
            "Evaluation": [
                60.0,
                0.0,
                0.0,
                0.0,
                0.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 1.0",
                "2 <- INIT",
                "3 <- 1.0",
                "4 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 3 = 3 (left: 3 1 8) || 1 * 3 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 - 3 = 5 (left: 1 3 5)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                1.002,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.0",
                "2 <- 2.1",
                "3 <- 0.4",
                "4 <- 0.0"
            ]
        },
        "Step 3": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.003,
                0.0,
                0.0
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 2.4",
                "2 <- 0.0",
                "3 <- 2.0",
                "4 <- 0.4"
            ]
        },
        "Step 4": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "1 * 3 = 3 (left: 3 1 8) || 1 * 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.0,
                0.002,
                0.0
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 0.4",
                "2 <- 0.4",
                "3 <- 1.0",
                "4 <- 3.1"
            ]
        },
        "Step 5": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24"
            ],
            "Evaluation": [
                0.003,
                0.0,
                0.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 0.1",
                "2 <- 0.1",
                "3 <- 2.4",
                "4 <- 0.4"
            ]
        },
        "Step 6": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "1 * 3 = 3 (left: 3 1 8) || 8 / 3 = 2 (left: 2 3)",
                "1 * 3 = 3 (left: 3 1 8) || 8 / 3 = 2 (left: 2 3)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 0.4",
                "2 <- 2.4",
                "3 <- 0.0",
                "4 <- 0.1"
            ]
        },
        "Step 7": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "1 * 3 = 3 (left: 3 1 8) || 8 / 3 = 2 (left: 2 3)"
            ],
            "Evaluation": [
                0.003,
                0.0,
                0.003,
                0.0,
                0.002
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 3.1",
                "2 <- 3.1",
                "3 <- 2.0",
                "4 <- 0.1"
            ]
        },
        "Step 8": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "1 * 3 = 3 (left: 3 1 8) || 1 * 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 * 3 = 3 (left: 3 1 8) || 8 / 3 = 2 (left: 2 3)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.4",
                "2 <- 0.0",
                "3 <- 3.1",
                "4 <- 3.1"
            ]
        },
        "Step 9": {
            "steps": [
                "1 * 3 = 3 (left: 3 1 8) || 1 * 3 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24"
            ]
        },
        "Input": "1 1 3 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "3": {
        "puzzle": "1 1 1 8",
        "Step 0": {
            "steps": [
                "8 - 1 = 7 (left: 1 1 7)",
                "1 * 1 = 1 (left: 1 1 8)",
                "8 / 1 = 8 (left: 1 1 8)",
                "8 / 1 = 8 (left: 1 1 8)",
                "8 - 1 = 7 (left: 1 1 7)"
            ],
            "Evaluation": [
                2.001,
                1.001,
                1.001,
                1.001,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 8)",
                "8 / 1 = 8 (left: 1 1 8)",
                "8 / 1 = 8 (left: 1 1 8)",
                "8 - 1 = 7 (left: 1 1 7)",
                "8 / 1 = 8 (left: 1 1 8)"
            ],
            "Evaluation": [
                1.001,
                1.001,
                1.001,
                2.001,
                1.001
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- INIT",
                "2 <- 0.4",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9)",
                "8 / 1 = 8 (left: 1 1 8)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7)",
                "8 - 1 = 7 (left: 1 1 7)",
                "8 / 1 = 8 (left: 1 1 8)"
            ],
            "Evaluation": [
                60.0,
                1.001,
                20.0,
                2.001,
                1.001
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 2.0",
                "2 <- 2.2",
                "3 <- 2.2",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "8 - 1 = 7 (left: 1 1 7) || 1 * 1 = 1 (left: 1 7)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "8 / 1 = 8 (left: 1 1 8)"
            ],
            "Evaluation": [
                20.0,
                0.001,
                0.001,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 1.1",
                "3 <- 3.0",
                "4 <- 2.0"
            ]
        },
        "Step 4": {
            "steps": [
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "8 / 1 = 8 (left: 1 1 8) || Possible",
                "8 - 1 = 7 (left: 1 1 7) || 1 * 1 = 1 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 3.0",
                "2 <- 3.0",
                "3 <- 2.0",
                "4 <- 2.0"
            ]
        },
        "Step 5": {
            "steps": [
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "8 - 1 = 7 (left: 1 1 7) || 1 * 1 = 1 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 1 1 7) || 1 * 1 = 1 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 2.0",
                "3 <- 2.2",
                "4 <- 2.2"
            ]
        },
        "Step 6": {
            "steps": [
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 2.0",
                "3 <- 2.0",
                "4 <- 3.0"
            ]
        },
        "Step 7": {
            "steps": [
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "8 - 1 = 7 (left: 1 1 7) || 1 * 1 = 1 (left: 1 7) || 7 / 1 = 7 (left: 7)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 3.0",
                "2 <- 2.0",
                "3 <- 2.0",
                "4 <- 3.0"
            ]
        },
        "Step 8": {
            "steps": [
                "8 - 1 = 7 (left: 1 1 7) || 1 * 1 = 1 (left: 1 7)",
                "8 - 1 = 7 (left: 1 1 7) || 1 * 1 = 1 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "8 - 1 = 7 (left: 1 1 7) || 1 * 1 = 1 (left: 1 7) || 7 / 1 = 7 (left: 7)"
            ],
            "Evaluation": [
                20.0,
                0.001,
                0.001,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 3.0",
                "2 <- 8.0",
                "3 <- 8.0",
                "4 <- 2.2"
            ]
        },
        "Step 9": {
            "steps": [
                "8 - 1 = 7 (left: 1 1 7) || 1 * 1 = 1 (left: 1 7) || 1 + 7 = 8 (left: 8)",
                "8 - 1 = 7 (left: 1 1 7) || 1 * 1 = 1 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 1 1 7) || 1 * 1 = 1 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 1 1 7) || 1 * 1 = 1 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)"
            ]
        },
        "Input": "1 1 1 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "4": {
        "puzzle": "6 6 6 6",
        "Step 0": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36)",
                "6 / 6 = 1 (left: 1 6 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 * 6 = 36 (left: 6 6 36)"
            ],
            "Evaluation": [
                41.0,
                41.0,
                20.002,
                20.002,
                41.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- 0.2",
                "4 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 + 6 = 12 (left: 12 36)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 - 6 = 0 (left: 0 6 6) || Input: 3 3 6",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                3.0,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 0.1",
                "2 <- 1.1",
                "3 <- INIT",
                "4 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "6 - 6 = 0 (left: 0 6 6) || 6 * 0 = 0 (left: 6 6)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 - 6 = 0 (left: 0 6 6) || 3 * 3 = 9 (left: 6 9)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)"
            ],
            "Evaluation": [
                20.002,
                3.0,
                0.003,
                41.0,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.0",
                "2 <- 0.0",
                "3 <- 2.0",
                "4 <- 2.0"
            ]
        },
        "Step 3": {
            "steps": [
                "6 / 6 = 1 (left: 1 6 6)",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 0 = 0 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6)",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 0 = 0 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 0 = 0 (left: 6 6) || 6 - 6 = 0 (left: 0)"
            ],
            "Evaluation": [
                41.0,
                20.002,
                20.002,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 3.0",
                "2 <- 0.4",
                "3 <- 1.2",
                "4 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "6 - 6 = 0 (left: 0 6 6) || 6 * 0 = 0 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6) || 6 / 6 = 1 (left: 1)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)"
            ],
            "Evaluation": [
                0.003,
                3.0,
                20.002,
                0.002,
                3.0
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 2.3",
                "2 <- 1.4",
                "3 <- 3.2",
                "4 <- 0.0"
            ]
        },
        "Step 5": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6)"
            ],
            "Evaluation": [
                40.0,
                20.002,
                20.002,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 3.4",
                "2 <- 0.0",
                "3 <- 5.4",
                "4 <- 0.0"
            ]
        },
        "Step 6": {
            "steps": [
                "6 - 6 = 0 (left: 0 6 6) || 6 * 0 = 0 (left: 6 6)",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 0 = 0 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                20.002,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.0",
                "2 <- 5.0",
                "3 <- 5.0",
                "4 <- 5.4"
            ]
        },
        "Step 7": {
            "steps": [
                "6 / 6 = 1 (left: 1 6 6) || 1 + 6 = 7 (left: 6 6 7)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)"
            ],
            "Evaluation": [
                1.002,
                20.002,
                0.003,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 7.4",
                "2 <- 4.2",
                "3 <- 7.4",
                "4 <- 2.0"
            ]
        },
        "Step 8": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 + 6 = 12 (left: 12 36)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 0 = 0 (left: 6 6) || 6 - 6 = 0 (left: 0)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 8.4",
                "1 <- 3.2",
                "2 <- 0.0",
                "3 <- 8.4",
                "4 <- 4.4"
            ]
        },
        "Step 9": {
            "steps": [
                "6 - 6 = 0 (left: 0 6 6) || 6 * 0 = 0 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6)",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 0 = 0 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6) || 6 - 6 = 0 (left: 0)"
            ]
        },
        "Input": "6 6 6 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "5": {
        "puzzle": "1 1 2 12",
        "Step 0": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 12)",
                "1 + 1 = 2 (left: 2 2 12)",
                "12 / 2 = 6 (left: 1 2 6)",
                "12 / 2 = 6 (left: 1 2 6)",
                "2 * 1 = 2 (left: 2 2 12)"
            ],
            "Evaluation": [
                2.001,
                2.001,
                1.002,
                1.002,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 12)",
                "12 / 2 = 6 (left: 1 2 6)",
                "12 / 2 = 6 (left: 1 2 6)",
                "2 * 1 = 2 (left: 2 2 12)",
                "12 / 2 = 6 (left: 1 2 6)"
            ],
            "Evaluation": [
                2.001,
                1.002,
                1.002,
                2.001,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 12)",
                "12 / 2 = 6 (left: 1 2 6)",
                "12 / 2 = 6 (left: 1 2 6)",
                "2 * 1 = 2 (left: 2 2 12)",
                "12 / 2 = 6 (left: 1 2 6)"
            ],
            "Evaluation": [
                2.001,
                1.002,
                1.002,
                2.001,
                1.002
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 1.1",
                "2 <- 1.3",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 12) || 2 * 2 = 4 (left: 4 12)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3)",
                "2 * 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10)",
                "2 * 1 = 2 (left: 2 2 12)",
                "12 / 2 = 6 (left: 1 2 6)"
            ],
            "Evaluation": [
                0.003,
                21.0,
                3.0,
                2.001,
                1.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- INIT",
                "2 <- 3.1",
                "3 <- 3.3",
                "4 <- 3.1"
            ]
        },
        "Step 4": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 12) || 2 * 2 = 4 (left: 4 12)",
                "12 / 2 = 6 (left: 1 2 6)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "2 * 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 12)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                0.0,
                0.002,
                0.0
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 1.2",
                "2 <- 3.3",
                "3 <- 2.2",
                "4 <- 0.0"
            ]
        },
        "Step 5": {
            "steps": [
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 - 1 = 2 (left: 2)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3)",
                "2 * 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10)",
                "12 / 2 = 6 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4)",
                "2 * 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10)"
            ],
            "Evaluation": [
                0.001,
                21.0,
                3.0,
                60.0,
                3.0
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 5.3",
                "2 <- 3.1",
                "3 <- 5.3",
                "4 <- 5.3"
            ]
        },
        "Step 6": {
            "steps": [
                "12 / 2 = 6 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 / 2 = 6 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "12 / 2 = 6 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 / 2 = 6 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 5.3",
                "2 <- 5.3",
                "3 <- 3.2",
                "4 <- 5.3"
            ]
        },
        "Step 7": {
            "steps": [
                "12 / 2 = 6 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 / 2 = 6 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 2 = 6 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "2 * 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10) || 10 - 2 = 8 (left: 8)",
                "12 / 2 = 6 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 5.3",
                "2 <- 5.1",
                "3 <- 5.3",
                "4 <- 5.3"
            ]
        },
        "Step 8": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 12) || 2 * 2 = 4 (left: 4 12)",
                "12 / 2 = 6 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "12 / 2 = 6 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 / 2 = 6 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 5.3",
                "2 <- 5.1",
                "3 <- 5.1",
                "4 <- 5.3"
            ]
        },
        "Step 9": {
            "steps": [
                "12 / 2 = 6 (left: 1 2 6) || 2 * 6 = 12 (left: 1 12)",
                "12 / 2 = 6 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 1 * 3 = 3 (left: 3)",
                "12 / 2 = 6 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ]
        },
        "Input": "1 1 2 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "6": {
        "puzzle": "1 2 2 6",
        "Step 0": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6)",
                "2 * 2 = 4 (left: 4 2 6)",
                "6 - 2 = 4 (left: 1 2 4)",
                "6 - 2 = 4 (left: 1 2 4)",
                "2 / 1 = 2 (left: 2 2 6)"
            ],
            "Evaluation": [
                60.0,
                1.002,
                2.001,
                2.001,
                60.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- INIT",
                "2 <- 0.4",
                "3 <- 0.4",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)",
                "6 - 2 = 4 (left: 1 2 4)",
                "2 / 1 = 2 (left: 2 2 6) || 6 + 6 = 12 (left: 8",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "6 - 2 = 4 (left: 1 2 4)"
            ],
            "Evaluation": [
                0.003,
                2.001,
                0.002,
                0.002,
                2.001
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- INIT",
                "2 <- 0.0",
                "3 <- 0.4",
                "4 <- 0.4"
            ]
        },
        "Step 2": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)",
                "6 - 2 = 4 (left: 1 2 4)",
                "2 / 1 = 2 (left: 2 2 6) || 6 + 6 = 12 (left: 8",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:"
            ],
            "Evaluation": [
                0.003,
                2.001,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.0",
                "2 <- 0.0",
                "3 <- 0.1",
                "4 <- 0.0"
            ]
        },
        "Step 3": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)",
                "2 / 1 = 2 (left: 2 2 6) || 6 + 6 = 12 (left: 8",
                "2 / 1 = 2 (left: 2 2 6) || 6 + 6 = 12 (left: 8",
                "2 * 2 = 4 (left: 4 2 6) || 4 - 2 = 2 (left: 2 6)",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                1.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.4",
                "2 <- 0.0",
                "3 <- 0.0",
                "4 <- 0.0"
            ]
        },
        "Step 4": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)",
                "2 / 1 = 2 (left: 2 2 6) || 6 + 6 = 12 (left: 8",
                "2 / 1 = 2 (left: 2 2 6) || 6 + 6 = 12 (left: 8",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 2.1",
                "2 <- 0.0",
                "3 <- 0.4",
                "4 <- 0.4"
            ]
        },
        "Step 5": {
            "steps": [
                "6 - 2 = 4 (left: 1 2 4) || 1 * 2 = 2 (left: 2)",
                "6 - 2 = 4 (left: 1 2 4) || Possible next steps:",
                "2 / 1 = 2 (left: 2 2 6) || 6 + 6 = 12 (left: 8",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.0",
                "2 <- 0.4",
                "3 <- 0.0",
                "4 <- INIT"
            ]
        },
        "Step 6": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)",
                "2 / 1 = 2 (left: 2 2 6) || 6 + 6 = 12 (left: 8",
                "2 / 1 = 2 (left: 2 2 6) || 6 + 6 = 12 (left: 8",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "6 - 2 = 4 (left: 1 2 4)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.002,
                2.001
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 0.0",
                "2 <- 3.3",
                "3 <- 0.0",
                "4 <- 0.4"
            ]
        },
        "Step 7": {
            "steps": [
                "2 * 2 = 4 (left: 4 2 6) || 4 - 2 = 2 (left: 2 6) || 6 / 2 = 3 (left: 3)",
                "2 / 1 = 2 (left: 2 2 6) || 6 + 6 = 12 (left: 8",
                "2 * 2 = 4 (left: 4 2 6) || 4 - 2 = 2 (left: 2 6) || 6 - 2 = 4 (left: 4)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.0",
                "2 <- INIT",
                "3 <- 0.0",
                "4 <- 0.4"
            ]
        },
        "Step 8": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)",
                "2 / 1 = 2 (left: 2 2 6) || 6 + 6 = 12 (left: 8",
                "6 - 2 = 4 (left: 1 2 4)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:"
            ],
            "Evaluation": [
                0.003,
                0.002,
                2.001,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 0.4",
                "2 <- 0.4",
                "3 <- 2.1",
                "4 <- 0.0"
            ]
        },
        "Step 9": {
            "steps": [
                "6 - 2 = 4 (left: 1 2 4) || 1 * 2 = 2 (left: 2)",
                "2 / 1 = 2 (left: 2 2 6) || 6 + 6 = 12 (left: 8",
                "2 / 1 = 2 (left: 2 2 6) || 6 + 6 = 12 (left: 8",
                "6 - 2 = 4 (left: 1 2 4) || 4 / 2 = 2 (left: 1 2)",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:"
            ]
        },
        "Input": "1 2 2 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "7": {
        "puzzle": "1 1 10 12",
        "Step 0": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 10 12)",
                "1 + 10 = 11 (left: 11 10 12)",
                "1 + 10 = 11 (left: 11 10 12)",
                "10 + 1 = 11 (left: 1 11 12)"
            ],
            "Evaluation": [
                20.002,
                1.002,
                3.0,
                3.0,
                20.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.0",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 10 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "1 + 10 = 11 (left: 11 10 12)",
                "10 + 1 = 11 (left: 1 11 12)",
                "1 + 10 = 11 (left: 11 10 12)"
            ],
            "Evaluation": [
                1.002,
                20.002,
                3.0,
                20.002,
                3.0
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- INIT",
                "2 <- 1.3",
                "3 <- 0.0",
                "4 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "1 + 10 = 11 (left: 11 10 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.002,
                3.0,
                20.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.4",
                "2 <- 1.1",
                "3 <- 0.0",
                "4 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 10 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                1.002,
                20.002,
                0.003,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.2",
                "2 <- 3.4",
                "3 <- INIT",
                "4 <- 1.1"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 10 = 11 (left: 11 10 12) || 11 / 10 = 1.1 (left: 1.1 10 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                2.001,
                0.003,
                0.003,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- INIT",
                "2 <- 3.1",
                "3 <- 4.3",
                "4 <- INIT"
            ]
        },
        "Step 5": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 + 10 = 11 (left: 11 10 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "1 + 10 = 11 (left: 11 10 12)"
            ],
            "Evaluation": [
                0.003,
                3.0,
                0.003,
                0.002,
                3.0
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 1.4",
                "2 <- 3.1",
                "3 <- 4.3",
                "4 <- 4.3"
            ]
        },
        "Step 6": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "1 + 10 = 11 (left: 11 10 12) || 11 * 10 = 110 (left: 110 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.003,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 0.0",
                "2 <- 6.1",
                "3 <- 0.1",
                "4 <- 6.4"
            ]
        },
        "Step 7": {
            "steps": [
                "1 + 10 = 11 (left: 11 10 12) || 11 / 10 = 1.1 (left: 1.1 10 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "1 + 10 = 11 (left: 11 10 12) || 11 * 10 = 110 (left: 110 12) || 110 * 12 = 1320 (left: 1320)",
                "1 * 1 = 1 (left: 1 10 12) || 12 + 1 = 13 (left: 10 13)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                2.001,
                20.002,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 6.1",
                "2 <- 5.1",
                "3 <- 3.1",
                "4 <- 2.2"
            ]
        },
        "Step 8": {
            "steps": [
                "1 + 10 = 11 (left: 11 10 12) || 11 * 10 = 110 (left: 110 12) || 110 - 12 = 98 (left: 98)",
                "1 + 10 = 11 (left: 11 10 12) || 11 * 10 = 110 (left: 110 12) || 110 * 12 = 1320 (left: 1320)",
                "1 + 10 = 11 (left: 11 10 12) || 11 * 10 = 110 (left: 110 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 6.1",
                "2 <- 3.1",
                "3 <- 8.2",
                "4 <- 8.2"
            ]
        },
        "Step 9": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "1 + 10 = 11 (left: 11 10 12) || 11 * 10 = 110 (left: 110 12) || 110 * 12 = 1320 (left: 1320)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 + 10 = 11 (left: 11 10 12) || 11 * 10 = 110 (left: 110 12) || 110 / 12 = 9.166666666666666 (left: 9.166666666666666)",
                "1 + 10 = 11 (left: 11 10 12) || 11 * 10 = 110 (left: 110 12) || 110 * 12 = 1320 (left: 1320)"
            ]
        },
        "Input": "1 1 10 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "8": {
        "puzzle": "2 2 10 10",
        "Step 0": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10)",
                "2 * 2 = 4 (left: 4 10 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 / 2 = 5 (left: 2 5 10)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                1.002,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 - 2 = 8 (left: 2 8 10)"
            ],
            "Evaluation": [
                2.001,
                1.002,
                1.002,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.1",
                "2 <- 0.1",
                "3 <- 0.1",
                "4 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 2.5 * 10 = 25 (left: 10 25)"
            ],
            "Evaluation": [
                20.002,
                2.001,
                2.001,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 1.2",
                "2 <- 1.2",
                "3 <- INIT",
                "4 <- 2.0"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 - 2 = 8 (left: 2 8 10) || 10 - 2 = 8 (left: 8 10)",
                "10 - 2 = 8 (left: 2 8 10) || 10 - 2 = 8 (left: 8 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)"
            ],
            "Evaluation": [
                2.001,
                1.001,
                1.001,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.3",
                "2 <- 0.1",
                "3 <- 2.2",
                "4 <- 0.1"
            ]
        },
        "Step 4": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 10 - 2.5 = 7.5 (left: 7.5 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)"
            ],
            "Evaluation": [
                2.001,
                1.002,
                2.001,
                2.001,
                2.001
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 0.1",
                "2 <- 4.2",
                "3 <- 0.1",
                "4 <- 2.0"
            ]
        },
        "Step 5": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60) || 10 / 10 = 1 (left: 1 60)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 2.5 * 10 = 25 (left: 10 25)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)"
            ],
            "Evaluation": [
                41.0,
                2.001,
                0.003,
                2.001,
                2.001
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 5.0",
                "2 <- 5.0",
                "3 <- 2.0",
                "4 <- 5.0"
            ]
        },
        "Step 6": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60) || 10 / 10 = 1 (left: 1 60) || 60 - 1 = 59 (left: 59)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60) || 10 / 10 = 1 (left: 1 60) || 60 - 1 = 59 (left: 59)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60) || 10 / 10 = 1 (left: 1 60) || 60 - 1 = 59 (left: 59)"
            ],
            "Evaluation": [
                2.001,
                0.003,
                0.003,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 4.2",
                "2 <- 5.3",
                "3 <- 1.2",
                "4 <- 5.4"
            ]
        },
        "Step 7": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 10 / 2.5 = 4 (left: 4 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 2.5 * 10 = 25 (left: 10 25)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60)",
                "10 - 2 = 8 (left: 2 8 10) || 10 / 2 = 5 (left: 5 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 2.5 * 10 = 25 (left: 10 25)"
            ],
            "Evaluation": [
                40.0,
                0.003,
                1.002,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 6.0",
                "2 <- 2.0",
                "3 <- 0.1",
                "4 <- 5.0"
            ]
        },
        "Step 8": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60) || 10 / 10 = 1 (left: 1 60) || 60 / 1 = 60 (left: 60)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 2.5 * 10 = 25 (left: 10 25)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60) || 10 / 10 = 1 (left: 1 60) || 60 - 1 = 59 (left: 59)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                2.001,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 2.0",
                "2 <- 7.0",
                "3 <- 5.0",
                "4 <- 2.0"
            ]
        },
        "Step 9": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 10 / 2.5 = 4 (left: 4 10) || 4 * 10 = 40 (left: 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60) || 10 / 10 = 1 (left: 1 60) || 1 * 60 = 60 (left: 60)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)"
            ]
        },
        "Input": "2 2 10 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "9": {
        "puzzle": "1 1 1 12",
        "Step 0": {
            "steps": [
                "12 - 1 = 11 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "12 - 1 = 11 (left: 1 1 11)"
            ],
            "Evaluation": [
                1.002,
                60.0,
                60.0,
                60.0,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.3",
                "2 <- 0.1",
                "3 <- 0.1",
                "4 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.002,
                40.0,
                0.002
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 1.0",
                "2 <- 0.2",
                "3 <- 1.0",
                "4 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                40.0,
                0.002
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 2.3",
                "2 <- 2.3",
                "3 <- 0.3",
                "4 <- 0.2"
            ]
        },
        "Step 3": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                40.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 0.3",
                "2 <- 1.0",
                "3 <- 1.0",
                "4 <- 1.3"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 3.3",
                "2 <- 1.3",
                "3 <- 0.2",
                "4 <- 2.3"
            ]
        },
        "Step 5": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 1.0",
                "2 <- 0.3",
                "3 <- 0.1",
                "4 <- 1.3"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 3.3",
                "2 <- 5.3",
                "3 <- 1.0",
                "4 <- 3.3"
            ]
        },
        "Step 7": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 7.3",
                "1 <- 6.3",
                "2 <- 7.3",
                "3 <- 4.3",
                "4 <- 0.3"
            ]
        },
        "Step 8": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 5.3",
                "2 <- 4.3",
                "3 <- 3.3",
                "4 <- 5.3"
            ]
        },
        "Step 9": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ]
        },
        "Input": "1 1 1 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "10": {
        "puzzle": "1 1 2 8",
        "Step 0": {
            "steps": [
                "1 + 2 = 3 (left: 1 3 8)",
                "1 * 1 = 1 (left: 1 2 8)",
                "2 * 1 = 2 (left: 2 2 8)",
                "2 * 1 = 2 (left: 2 2 8)",
                "1 + 2 = 3 (left: 1 3 8)"
            ],
            "Evaluation": [
                60.0,
                22.0,
                1.002,
                1.002,
                60.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.4",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8)",
                "1 + 2 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "2 * 1 = 2 (left: 2 2 8)",
                "1 + 2 = 3 (left: 1 3 8)",
                "1 + 2 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)"
            ],
            "Evaluation": [
                60.0,
                0.0,
                1.002,
                60.0,
                0.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 1.0",
                "2 <- 1.3",
                "3 <- 1.0",
                "4 <- 0.4"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 + 2 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 + 2 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.0,
                0.002,
                0.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 2.1",
                "2 <- 2.1",
                "3 <- 0.4",
                "4 <- 1.0"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24",
                "1 + 2 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)"
            ],
            "Evaluation": [
                0.002,
                20.002,
                20.002,
                0.0,
                60.0
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 1.3",
                "2 <- 0.4",
                "3 <- 0.0",
                "4 <- 3.4"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24",
                "1 + 2 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "1 + 2 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "1 + 2 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24"
            ],
            "Evaluation": [
                20.002,
                0.0,
                0.0,
                0.0,
                20.002
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 2.1",
                "2 <- 0.0",
                "3 <- 0.0",
                "4 <- 3.1"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24",
                "1 + 2 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "1 + 2 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24"
            ],
            "Evaluation": [
                20.002,
                20.002,
                0.0,
                0.0,
                60.0
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 5.1",
                "2 <- 5.4",
                "3 <- 5.1",
                "4 <- 5.4"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (4 * (6 - 2)) * 3 = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (4 * (6 - 2)) * 3 = 24"
            ],
            "Evaluation": [
                20.002,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 1.3",
                "2 <- 4.0",
                "3 <- 6.3",
                "4 <- 6.4"
            ]
        },
        "Step 7": {
            "steps": [
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (4 * (6 - 2)) * 3 = 24 || Input: 3 5 5 7\nSteps:\n5 + 7 = 12 (left: 3 5 12)\n5 * 3 = 15 (left: 15 12)\n15 - 12 = 3 (left: 3)\n3 * 5 = 15 (left: 15)\n15 + 15 = 30 (left: 30)\n30 - 3 = 27 (left: 27)\nAnswer: ((",
                "1 + 2 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (4 * (6 - 2)) * 3 = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (4 * (6 - 2)) * 3 = 24 || Input: 3 5 5 7\nSteps:\n5 + 7 = 12 (left: 3 5 12)\n5 * 3 = 15 (left: 15 12)\n15 - 12 = 3 (left: 3)\n3 * 5 = 15 (left: 15)\n15 + 15 = 30 (left: 30)\n30 - 3 = 27 (left: 27)\nAnswer: (("
            ],
            "Evaluation": [
                60.0,
                0.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 7.0",
                "1 <- 5.4",
                "2 <- 6.3",
                "3 <- 7.0",
                "4 <- 7.0"
            ]
        },
        "Step 8": {
            "steps": [
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (4 * (6 - 2)) * 3 = 24 || Input: 3 5 5 7\nSteps:\n5 + 7 = 12 (left: 3 5 12)\n5 * 3 = 15 (left: 15 12)\n15 - 12 = 3 (left: 3)\n3 * 5 = 15 (left: 15)\n15 + 15 = 30 (left: 30)\n30 - 3 = 27 (left: 27)\nAnswer: (( || 5 + 7) * (5 - 3)) - 3 = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (4 * (6 - 2)) * 3 = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (4 * (6 - 2)) * 3 = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (4 * (6 - 2)) * 3 = 24 || Input: 3 5 5 7\nSteps:\n5 + 7 = 12 (left: 3 5 12)\n5 * 3 = 15 (left: 15 12)\n15 - 12 = 3 (left: 3)\n3 * 5 = 15 (left: 15)\n15 + 15 = 30 (left: 30)\n30 - 3 = 27 (left: 27)\nAnswer: (( || 5 + 7) * (5 - 3)) - 3 = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (4 * (6 - 2)) * 3 = 24 || Input: 3 5 5 7\nSteps:\n5 + 7 = 12 (left: 3 5 12)\n5 * 3 = 15 (left: 15 12)\n15 - 12 = 3 (left: 3)\n3 * 5 = 15 (left: 15)\n15 + 15 = 30 (left: 30)\n30 - 3 = 27 (left: 27)\nAnswer: (( || 5 + 7) * (5 - 3)) - 3 = 24"
            ],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 8.2",
                "2 <- 7.3",
                "3 <- 5.4",
                "4 <- 7.3"
            ]
        },
        "Step 9": {
            "steps": [
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (4 * (6 - 2)) * 3 = 24 || Input: 3 5 5 7\nSteps:\n5 + 7 = 12 (left: 3 5 12)\n5 * 3 = 15 (left: 15 12)\n15 - 12 = 3 (left: 3)\n3 * 5 = 15 (left: 15)\n15 + 15 = 30 (left: 30)\n30 - 3 = 27 (left: 27)\nAnswer: ((",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (4 * (6 - 2)) * 3 = 24 || Input: 3 5 5 7\nSteps:\n5 + 7 = 12 (left: 3 5 12)\n5 * 3 = 15 (left: 15 12)\n15 - 12 = 3 (left: 3)\n3 * 5 = 15 (left: 15)\n15 + 15 = 30 (left: 30)\n30 - 3 = 27 (left: 27)\nAnswer: ((",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (4 * (6 - 2)) * 3 = 24 || Input: 3 5 5 7\nSteps:\n5 + 7 = 12 (left: 3 5 12)\n5 * 3 = 15 (left: 15 12)\n15 - 12 = 3 (left: 3)\n3 * 5 = 15 (left: 15)\n15 + 15 = 30 (left: 30)\n30 - 3 = 27 (left: 27)\nAnswer: ((",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (4 * (6 - 2)) * 3 = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (4 * (6 - 2)) * 3 = 24 || Input: 3 5 5 7\nSteps:\n5 + 7 = 12 (left: 3 5 12)\n5 * 3 = 15 (left: 15 12)\n15 - 12 = 3 (left: 3)\n3 * 5 = 15 (left: 15)\n15 + 15 = 30 (left: 30)\n30 - 3 = 27 (left: 27)\nAnswer: (("
            ]
        },
        "Input": "1 1 2 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "11": {
        "puzzle": "1 1 4 8",
        "Step 0": {
            "steps": [
                "8 - 4 = 4 (left: 1 4 4)",
                "1 * 1 = 1 (left: 1 4 8)",
                "4 * 1 = 4 (left: 4 4 8)",
                "4 * 1 = 4 (left: 4 4 8)",
                "8 - 4 = 4 (left: 1 4 4)"
            ],
            "Evaluation": [
                2.001,
                0.003,
                22.0,
                22.0,
                2.001
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.3",
                "2 <- 0.2",
                "3 <- 0.2",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8)",
                "4 * 1 = 4 (left: 4 4 8) || 8 - 4 = 4 (left: 4 8)",
                "4 * 1 = 4 (left: 4 4 8) || 8 - 4 = 4 (left: 4 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8)",
                "4 * 1 = 4 (left: 4 4 8)"
            ],
            "Evaluation": [
                40.001,
                0.003,
                0.003,
                40.0,
                22.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.0",
                "2 <- 0.2",
                "3 <- 1.4",
                "4 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "8 - 4 = 4 (left: 1 4 4) || 4 / 1 = 4 (left: 4 4)",
                "8 - 4 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4)",
                "4 * 1 = 4 (left: 4 4 8) || 8 - 4 = 4 (left: 4 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 - 8 = 8 (left: 8)"
            ],
            "Evaluation": [
                0.003,
                21.0,
                0.003,
                40.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.0",
                "2 <- 1.4",
                "3 <- 1.4",
                "4 <- 1.0"
            ]
        },
        "Step 3": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 - 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 8 - 4 = 4 (left: 4 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 - 8 = 8 (left: 8)"
            ],
            "Evaluation": [
                40.001,
                0.002,
                0.003,
                40.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.3",
                "2 <- 0.2",
                "3 <- 3.0",
                "4 <- 3.3"
            ]
        },
        "Step 4": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 / 8 = 2 (left: 2)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 8 - 4 = 4 (left: 4 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 * 8 = 128 (left: 128)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 1.4",
                "2 <- 3.3",
                "3 <- 2.3",
                "4 <- 1.0"
            ]
        },
        "Step 5": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 8 - 4 = 4 (left: 4 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 - 8 = 8 (left: 8)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 1.3",
                "2 <- 0.2",
                "3 <- 2.1",
                "4 <- INIT"
            ]
        },
        "Step 6": {
            "steps": [
                "8 - 4 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 8 - 4 = 4 (left: 4 8)",
                "8 - 4 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 3 * 4 = 12 (left: 12)",
                "4 * 1 = 4 (left: 4 4 8)"
            ],
            "Evaluation": [
                20.001,
                0.002,
                0.003,
                0.003,
                22.0
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 1.3",
                "2 <- 0.3",
                "3 <- 6.0",
                "4 <- 1.3"
            ]
        },
        "Step 7": {
            "steps": [
                "8 - 4 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 + 2 = 2.75",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 8 - 4 = 4 (left: 4 8)",
                "8 - 4 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 * 2 = 1.5",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 2.1",
                "2 <- 1.0",
                "3 <- 2.3",
                "4 <- 6.4"
            ]
        },
        "Step 8": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8)",
                "8 - 4 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 3 - 4 = -1 (left: -1)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 - 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "4 * 1 = 4 (left: 4 4 8) || 8 - 4 = 4 (left: 4 8)"
            ],
            "Evaluation": [
                40.001,
                0.0,
                0.002,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 6.4",
                "2 <- 6.0",
                "3 <- 1.4",
                "4 <- 8.0"
            ]
        },
        "Step 9": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 / 8 = 2 (left: 2)",
                "4 * 1 = 4 (left: 4 4 8) || 8 - 4 = 4 (left: 4 8)",
                "8 - 4 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 * 2 = 1.5",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 - 8 = 8 (left: 8)"
            ]
        },
        "Input": "1 1 4 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "12": {
        "puzzle": "1 1 5 8",
        "Step 0": {
            "steps": [
                "5 - 1 = 4 (left: 1 4 8)",
                "1 * 1 = 1 (left: 1 5 8)",
                "8 - 5 = 3 (left: 1 3 8)",
                "8 - 5 = 3 (left: 1 3 8)",
                "5 - 1 = 4 (left: 1 4 8)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                60.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.3",
                "2 <- INIT",
                "3 <- 0.3",
                "4 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "8 - 5 = 3 (left: 1 3 8)",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)"
            ],
            "Evaluation": [
                60.0,
                0.0,
                60.0,
                0.0,
                0.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.2",
                "2 <- 0.3",
                "3 <- 1.2",
                "4 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 8)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)"
            ],
            "Evaluation": [
                1.002,
                0.0,
                0.0,
                0.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 2.4",
                "2 <- 0.2",
                "3 <- 0.3",
                "4 <- 2.4"
            ]
        },
        "Step 3": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.0,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 3.0",
                "2 <- 3.0",
                "3 <- 1.0",
                "4 <- 1.2"
            ]
        },
        "Step 4": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                0.002,
                0.0
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 4.1",
                "2 <- 4.1",
                "3 <- 0.2",
                "4 <- 4.2"
            ]
        },
        "Step 5": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 4.1",
                "2 <- 4.2",
                "3 <- 1.0",
                "4 <- 3.0"
            ]
        },
        "Step 6": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.2",
                "2 <- 0.2",
                "3 <- 3.0",
                "4 <- 4.2"
            ]
        },
        "Step 7": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24"
            ],
            "Evaluation": [
                60.0,
                0.0,
                0.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 7.0",
                "1 <- 7.0",
                "2 <- 0.2",
                "3 <- 6.4",
                "4 <- 4.2"
            ]
        },
        "Step 8": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 6.4",
                "2 <- 8.1",
                "3 <- 7.0",
                "4 <- 6.4"
            ]
        },
        "Step 9": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24"
            ]
        },
        "Input": "1 1 5 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "13": {
        "puzzle": "4 6 11 11",
        "Step 0": {
            "steps": [
                "11 + 4 = 15 (left: 6 11 15)",
                "6 / 4 = 1.5 (left: 1.5 11 11)",
                "4 * 6 = 24 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24)",
                "11 + 4 = 15 (left: 6 11 15)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                1.002,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "6 / 4 = 1.5 (left: 1.5 11 11)",
                "4 * 6 = 24 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24)",
                "11 + 4 = 15 (left: 6 11 15)",
                "4 * 6 = 24 (left: 11 11 24)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                1.002,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 0.3",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "4 * 6 = 24 (left: 11 11 24) || 11 / 11 = 1 (left: 1 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24)",
                "4 * 6 = 24 (left: 11 11 24)",
                "11 + 4 = 15 (left: 6 11 15)",
                "11 + 4 = 15 (left: 6 11 15) || 6 * 11 = 66 (left: 66 15)"
            ],
            "Evaluation": [
                2.001,
                20.002,
                1.002,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 2.1",
                "4 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "6 / 4 = 1.5 (left: 1.5 11 11)",
                "4 * 6 = 24 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                1.002,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- INIT",
                "2 <- 3.3",
                "3 <- 2.1",
                "4 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "4 * 6 = 24 (left: 11 11 24) || 11 / 11 = 1 (left: 1 11 24) || 11 * 1 = 11 (left: 11 24)",
                "4 * 6 = 24 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                20.002,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 4.2",
                "4 <- 2.1"
            ]
        },
        "Step 5": {
            "steps": [
                "11 + 4 = 15 (left: 6 11 15) || 6 * 11 = 66 (left: 66 15) || 66 - 15 = 51 (left: 51)",
                "4 * 6 = 24 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                1.002,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 2.1",
                "2 <- 5.3",
                "3 <- 4.2",
                "4 <- 5.2"
            ]
        },
        "Step 6": {
            "steps": [
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                20.002,
                1.002,
                20.002
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 6.2",
                "2 <- 2.1",
                "3 <- 2.1",
                "4 <- 6.2"
            ]
        },
        "Step 7": {
            "steps": [
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 2.1",
                "2 <- 6.2",
                "3 <- 6.0",
                "4 <- 7.0"
            ]
        },
        "Step 8": {
            "steps": [
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 7.0",
                "2 <- 7.0",
                "3 <- 6.2",
                "4 <- 7.0"
            ]
        },
        "Step 9": {
            "steps": [
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)"
            ]
        },
        "Input": "4 6 11 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "14": {
        "puzzle": "1 1 3 12",
        "Step 0": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 12)",
                "1 * 1 = 1 (left: 1 3 12)",
                "12 - 3 = 9 (left: 1 1 9)",
                "12 - 3 = 9 (left: 1 1 9)",
                "3 + 1 = 4 (left: 1 4 12)"
            ],
            "Evaluation": [
                2.001,
                41.0,
                0.001,
                0.001,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.1",
                "2 <- 0.4",
                "3 <- 0.0",
                "4 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)",
                "3 + 1 = 4 (left: 1 4 12) || 12 + 4 = 16 (left: 1 16)",
                "3 + 1 = 4 (left: 1 4 12) || 4 + 12 = 16 (left: 1 16)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)"
            ],
            "Evaluation": [
                41.0,
                20.002,
                0.002,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.4",
                "2 <- 0.1",
                "3 <- 1.4",
                "4 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 4 + 7 = 11 (left: 11 10)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                20.002,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 2.0",
                "2 <- 1.0",
                "3 <- 1.1",
                "4 <- 2.2"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || Possible next steps:"
            ],
            "Evaluation": [
                60.0,
                40.0,
                20.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 2.4",
                "2 <- 1.0",
                "3 <- 3.1",
                "4 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 4 + 7 = 11 (left: 11 10)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                20.002,
                0.003,
                40.0
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 3.2",
                "2 <- 2.0",
                "3 <- INIT",
                "4 <- 1.0"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 / 1 = 36 (left: 36)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 4 + 7 = 11 (left: 11 10)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "3 + 1 = 4 (left: 1 4 12)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)"
            ],
            "Evaluation": [
                40.0,
                0.003,
                40.0,
                2.001,
                20.002
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 2.4",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- 2.0"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 4 + 7 = 11 (left: 11 10)",
                "12 - 3 = 9 (left: 1 1 9)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.001,
                60.0,
                40.0
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.0",
                "2 <- 6.4",
                "3 <- 0.0",
                "4 <- 2.0"
            ]
        },
        "Step 7": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9 12)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "3 + 1 = 4 (left: 1 4 12) || 4 + 12 = 16 (left: 1 16)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36)"
            ],
            "Evaluation": [
                0.003,
                40.0,
                0.003,
                0.002,
                40.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 4.4",
                "2 <- 6.4",
                "3 <- 5.3",
                "4 <- 4.0"
            ]
        },
        "Step 8": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "3 + 1 = 4 (left: 1 4 12) || 4 + 12 = 16 (left: 1 16)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                0.002,
                40.0
            ],
            "Resampling": [
                "0 <- 8.0",
                "1 <- 4.4",
                "2 <- 2.0",
                "3 <- 8.0",
                "4 <- 1.1"
            ]
        },
        "Step 9": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 / 1 = 36 (left: 36)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || Possible next steps:"
            ]
        },
        "Input": "1 1 3 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "15": {
        "puzzle": "2 2 2 12",
        "Step 0": {
            "steps": [
                "2 * 2 = 4 (left: 2 4 12)",
                "2 * 2 = 4 (left: 4 2 12)",
                "2 + 2 = 4 (left: 4 2 12)",
                "2 + 2 = 4 (left: 4 2 12)",
                "2 * 2 = 4 (left: 2 4 12)"
            ],
            "Evaluation": [
                2.0,
                2.001,
                2.001,
                2.001,
                2.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 2 = 4 (left: 4 2 12)",
                "2 + 2 = 4 (left: 4 2 12)",
                "2 + 2 = 4 (left: 4 2 12)",
                "2 * 2 = 4 (left: 2 4 12)",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6)"
            ],
            "Evaluation": [
                2.001,
                2.001,
                2.001,
                2.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.2",
                "2 <- 1.4",
                "3 <- 1.4",
                "4 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6)",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)"
            ],
            "Evaluation": [
                0.001,
                60.0,
                0.002,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.3",
                "2 <- 2.3",
                "3 <- 2.1",
                "4 <- 1.4"
            ]
        },
        "Step 3": {
            "steps": [
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (2 + 2) * 12 = 24",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (2 + 2) * 12 = 24",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)"
            ],
            "Evaluation": [
                0.001,
                60.0,
                60.0,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 3.2",
                "3 <- 2.1",
                "4 <- 2.3"
            ]
        },
        "Step 4": {
            "steps": [
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (2 + 2) * 12 = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 - 3 = 13 (left: 13)\n13 + 3 = 16 (left: 16)\n16 + 5 = 21 (left: 21)\n21 + 7 = 28 (left: 28)\n28 - ",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (2 + 2) * 12 = 24"
            ],
            "Evaluation": [
                0.001,
                0.002,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 4.2",
                "2 <- 4.3",
                "3 <- 3.2",
                "4 <- 2.3"
            ]
        },
        "Step 5": {
            "steps": [
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (2 + 2) * 12 = 24",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (2 + 2) * 12 = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 - 3 = 13 (left: 13)\n13 + 3 = 16 (left: 16)\n16 + 5 = 21 (left: 21)\n21 + 7 = 28 (left: 28)\n28 -  || 5 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 2 = 24 (left: 24)\nAnswer: ((3 * 7) - 5) - 2 = 24",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (2 + 2) * 12 = 24",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (2 + 2) * 12 = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 - 3 = 13 (left: 13)\n13 + 3 = 16 (left: 16)\n16 + 5 = 21 (left: 21)\n21 + 7 = 28 (left: 28)\n28 - ",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (2 + 2) * 12 = 24"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 3.1",
                "2 <- 3.3",
                "3 <- INIT",
                "4 <- 5.4"
            ]
        },
        "Step 6": {
            "steps": [
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (2 + 2) * 12 = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 - 3 = 13 (left: 13)\n13 + 3 = 16 (left: 16)\n16 + 5 = 21 (left: 21)\n21 + 7 = 28 (left: 28)\n28 - ",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (2 + 2) * 12 = 24",
                "2 * 2 = 4 (left: 2 4 12)",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (2 + 2) * 12 = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 - 3 = 13 (left: 13)\n13 + 3 = 16 (left: 16)\n16 + 5 = 21 (left: 21)\n21 + 7 = 28 (left: 28)\n28 - "
            ],
            "Evaluation": [
                0.001,
                60.0,
                60.0,
                2.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 2.3",
                "2 <- 5.0",
                "3 <- 5.0",
                "4 <- 6.1"
            ]
        },
        "Step 7": {
            "steps": [
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (2 + 2) * 12 = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 - 3 = 13 (left: 13)\n13 + 3 = 16 (left: 16)\n16 + 5 = 21 (left: 21)\n21 + 7 = 28 (left: 28)\n28 - ",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (2 + 2) * 12 = 24",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (2 + 2) * 12 = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 - 3 = 13 (left: 13)\n13 + 3 = 16 (left: 16)\n16 + 5 = 21 (left: 21)\n21 + 7 = 28 (left: 28)\n28 - ",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (2 + 2) * 12 = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 - 3 = 13 (left: 13)\n13 + 3 = 16 (left: 16)\n16 + 5 = 21 (left: 21)\n21 + 7 = 28 (left: 28)\n28 - ",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (2 + 2) * 12 = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 - 3 = 13 (left: 13)\n13 + 3 = 16 (left: 16)\n16 + 5 = 21 (left: 21)\n21 + 7 = 28 (left: 28)\n28 -  || 5 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 2 = 24 (left: 24)\nAnswer: ((3 * 7) - 5) - 2 = 24"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 6.1",
                "2 <- 5.2",
                "3 <- 7.0",
                "4 <- 5.2"
            ]
        },
        "Step 8": {
            "steps": [
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (2 + 2) * 12 = 24",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (2 + 2) * 12 = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 - 3 = 13 (left: 13)\n13 + 3 = 16 (left: 16)\n16 + 5 = 21 (left: 21)\n21 + 7 = 28 (left: 28)\n28 -  || 5 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 2 = 24 (left: 24)\nAnswer: ((3 * 7) - 5) - 2 = 24",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (2 + 2) * 12 = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 - 3 = 13 (left: 13)\n13 + 3 = 16 (left: 16)\n16 + 5 = 21 (left: 21)\n21 + 7 = 28 (left: 28)\n28 - ",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (2 + 2) * 12 = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 - 3 = 13 (left: 13)\n13 + 3 = 16 (left: 16)\n16 + 5 = 21 (left: 21)\n21 + 7 = 28 (left: 28)\n28 -  || 5 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 2 = 24 (left: 24)\nAnswer: ((3 * 7) - 5) - 2 = 24",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (2 + 2) * 12 = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 - 3 = 13 (left: 13)\n13 + 3 = 16 (left: 16)\n16 + 5 = 21 (left: 21)\n21 + 7 = 28 (left: 28)\n28 - "
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 7.4",
                "1 <- 6.2",
                "2 <- 8.4",
                "3 <- 6.4",
                "4 <- 8.3"
            ]
        },
        "Step 9": {
            "steps": [
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (2 + 2) * 12 = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 - 3 = 13 (left: 13)\n13 + 3 = 16 (left: 16)\n16 + 5 = 21 (left: 21)\n21 + 7 = 28 (left: 28)\n28 -  || 5 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 2 = 24 (left: 24)\nAnswer: ((3 * 7) - 5) - 2 = 24 || Input: 3 3 4 7\nSteps:\n4 + 7 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)\n8 * 3 = 24 (left: 24)\nAnswer: (3 * 4) + (7 - 3) = 24",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (2 + 2) * 12 = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 - 3 = 13 (left: 13)\n13 + 3 = 16 (left: 16)\n16 + 5 = 21 (left: 21)\n21 + 7 = 28 (left: 28)\n28 - ",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (2 + 2) * 12 = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 - 3 = 13 (left: 13)\n13 + 3 = 16 (left: 16)\n16 + 5 = 21 (left: 21)\n21 + 7 = 28 (left: 28)\n28 -  || 5 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 2 = 24 (left: 24)\nAnswer: ((3 * 7) - 5) - 2 = 24",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (2 + 2) * 12 = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 - 3 = 13 (left: 13)\n13 + 3 = 16 (left: 16)\n16 + 5 = 21 (left: 21)\n21 + 7 = 28 (left: 28)\n28 -  || 5 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 2 = 24 (left: 24)\nAnswer: ((3 * 7) - 5) - 2 = 24",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (2 + 2) * 12 = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 - 3 = 13 (left: 13)\n13 + 3 = 16 (left: 16)\n16 + 5 = 21 (left: 21)\n21 + 7 = 28 (left: 28)\n28 -  || 5 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 2 = 24 (left: 24)\nAnswer: ((3 * 7) - 5) - 2 = 24 || Input: 3 3 4 7\nSteps:\n4 + 7 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)\n8 * 3 = 24 (left: 24)\nAnswer: (3 * 4) + (7 - 3) = 24"
            ]
        },
        "Input": "2 2 2 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "16": {
        "puzzle": "1 1 4 12",
        "Step 0": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 12)",
                "1 * 1 = 1 (left: 1 4 12)",
                "1 / 1 = 1 (left: 1 4 12)",
                "1 / 1 = 1 (left: 1 4 12)",
                "4 + 1 = 5 (left: 1 5 12)"
            ],
            "Evaluation": [
                22.0,
                2.001,
                2.001,
                2.001,
                22.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60)",
                "1 / 1 = 1 (left: 1 4 12)",
                "1 / 1 = 1 (left: 1 4 12)",
                "4 + 1 = 5 (left: 1 5 12)",
                "4 + 1 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)"
            ],
            "Evaluation": [
                41.0,
                2.001,
                2.001,
                22.0,
                1.001
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 0.0",
                "2 <- 0.0",
                "3 <- 0.4",
                "4 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 / 1 = 60 (left: 60)",
                "4 + 1 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "4 + 1 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)"
            ],
            "Evaluation": [
                0.003,
                1.001,
                1.001,
                20.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.4",
                "2 <- INIT",
                "3 <- 0.0",
                "4 <- 0.2"
            ]
        },
        "Step 3": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60)",
                "4 + 1 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "1 / 1 = 1 (left: 1 4 12)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7)",
                "1 / 1 = 1 (left: 1 4 12) || 12 + 4 = 16 (left: 1 16)"
            ],
            "Evaluation": [
                41.0,
                1.001,
                2.001,
                20.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 0.0",
                "2 <- 2.3",
                "3 <- 0.0",
                "4 <- 0.4"
            ]
        },
        "Step 4": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 / 1 = 60 (left: 60)",
                "4 + 1 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7)",
                "4 + 1 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)"
            ],
            "Evaluation": [
                0.003,
                1.001,
                0.001,
                20.0,
                1.001
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 3.3",
                "2 <- 4.3",
                "3 <- 3.0",
                "4 <- 2.3"
            ]
        },
        "Step 5": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 / 1 = 60 (left: 60)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 1 * 60 = 60 (left: 60)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.001,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 3.0",
                "2 <- 0.0",
                "3 <- 3.3",
                "4 <- 3.1"
            ]
        },
        "Step 6": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 1 + 7 = 8 (left: 8)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)",
                "4 + 1 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "4 + 1 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12) || 12 - 5 = 7 (left: 7)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                1.001,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 3.0",
                "2 <- 4.3",
                "3 <- 3.0",
                "4 <- 2.3"
            ]
        },
        "Step 7": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 1 + 7 = 8 (left: 8)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 1 * 60 = 60 (left: 60)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.001,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 3.3",
                "2 <- 1.0",
                "3 <- 3.0",
                "4 <- 3.0"
            ]
        },
        "Step 8": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 / 1 = 60 (left: 60)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 1 * 60 = 60 (left: 60)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 4.3",
                "2 <- 0.4",
                "3 <- 2.3",
                "4 <- 3.3"
            ]
        },
        "Step 9": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 1 + 7 = 8 (left: 8)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "4 + 1 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)"
            ]
        },
        "Input": "1 1 4 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "17": {
        "puzzle": "1 1 12 12",
        "Step 0": {
            "steps": [
                "12 / 1 = 12 (left: 1 12 12)",
                "1 * 1 = 1 (left: 1 12 12)",
                "12 - 1 = 11 (left: 1 11 12)",
                "12 - 1 = 11 (left: 1 11 12)",
                "12 / 1 = 12 (left: 1 12 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- INIT",
                "2 <- 0.3",
                "3 <- 0.2",
                "4 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 1 = 11 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "12 - 1 = 11 (left: 1 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.002,
                20.002,
                20.002,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.2",
                "2 <- 1.2",
                "3 <- 1.1",
                "4 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 12 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 0.3",
                "2 <- 1.4",
                "3 <- 1.1",
                "4 <- 1.1"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.003,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 3.1",
                "3 <- 2.1",
                "4 <- 1.4"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 1.2",
                "2 <- INIT",
                "3 <- 3.1",
                "4 <- 1.2"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 5.2",
                "2 <- 0.3",
                "3 <- 0.2",
                "4 <- 5.2"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 1 = 11 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.002,
                20.002,
                20.002,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 1.4",
                "2 <- 0.3",
                "3 <- 1.2",
                "4 <- 1.1"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 1 = 11 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                20.002,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 1.4",
                "2 <- 1.2",
                "3 <- 7.2",
                "4 <- 7.4"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 7.4",
                "2 <- 7.4",
                "3 <- 2.1",
                "4 <- 7.4"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ]
        },
        "Input": "1 1 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "18": {
        "puzzle": "3 3 3 8",
        "Step 0": {
            "steps": [
                "3 - 3 = 0 (left: 0 3 8)",
                "3 * 3 = 9 (left: 9 3 8)",
                "3 + 3 = 6 (left: 6 3 8)",
                "3 + 3 = 6 (left: 6 3 8)",
                "3 - 3 = 0 (left: 0 3 8)"
            ],
            "Evaluation": [
                1.002,
                2.0,
                3.0,
                3.0,
                1.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- INIT",
                "2 <- 0.3",
                "3 <- 0.0",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "3 - 3 = 0 (left: 0 3 8) || 8 - 3 = 5 (left: 0 5)",
                "3 + 3 = 6 (left: 6 3 8)",
                "3 + 3 = 6 (left: 6 3 8) || 3 + 8 = 11 (left: 6 11)",
                "3 - 3 = 0 (left: 0 3 8) || 8 / 3 = 2.66666666667 (left: 0 2.66666666667)",
                "3 + 3 = 6 (left: 6 3 8)"
            ],
            "Evaluation": [
                40.0,
                3.0,
                20.002,
                2.001,
                3.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- INIT",
                "2 <- 1.2",
                "3 <- INIT",
                "4 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "3 - 3 = 0 (left: 0 3 8) || 8 - 3 = 5 (left: 0 5) || 0 / 5 = 0 (left: 0)",
                "3 + 3 = 6 (left: 6 3 8)",
                "3 + 3 = 6 (left: 6 3 8) || 3 + 8 = 11 (left: 6 11) || 6 / 11 = 0.5454545454545454 (left: 0.5454545454545454)",
                "3 - 3 = 0 (left: 0 3 8)",
                "3 + 3 = 6 (left: 6 3 8) || 3 + 8 = 11 (left: 6 11)"
            ],
            "Evaluation": [
                20.002,
                3.0,
                0.002,
                1.002,
                20.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.0",
                "2 <- 1.0",
                "3 <- 1.0",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "3 * 3 = 9 (left: 9 3 8)",
                "3 - 3 = 0 (left: 0 3 8) || 8 - 3 = 5 (left: 0 5) || 5 * 0 = 0 (left:",
                "3 - 3 = 0 (left: 0 3 8) || 8 - 3 = 5 (left: 0 5) || 5 * 0 = 0 (left:",
                "3 - 3 = 0 (left: 0 3 8) || 8 - 3 = 5 (left: 0 5) || 5 - 0 = 5 (left: 5)",
                "3 + 3 = 6 (left: 6 3 8)"
            ],
            "Evaluation": [
                2.0,
                20.002,
                20.002,
                0.002,
                3.0
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 3.1",
                "2 <- 3.2",
                "3 <- 1.0",
                "4 <- 1.2"
            ]
        },
        "Step 4": {
            "steps": [
                "3 + 3 = 6 (left: 6 3 8) || 6 * 3 = 18 (left: 18 8)",
                "3 - 3 = 0 (left: 0 3 8) || 8 - 3 = 5 (left: 0 5) || 5 * 0 = 0 (left: || 5 / 0 = undefined (cannot divide by zero)",
                "3 - 3 = 0 (left: 0 3 8) || 8 - 3 = 5 (left: 0 5) || 5 * 0 = 0 (left: || 5 / 0 = undefined (cannot divide by zero)",
                "3 - 3 = 0 (left: 0 3 8) || 8 - 3 = 5 (left: 0 5) || 5 - 0 = 5 (left: 5)",
                "3 + 3 = 6 (left: 6 3 8) || 3 + 8 = 11 (left: 6 11) || 6 / 11 = 0.5454545454545454 (left: 0.5454545454545454)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 3.1",
                "2 <- 2.0",
                "3 <- 0.0",
                "4 <- INIT"
            ]
        },
        "Step 5": {
            "steps": [
                "3 - 3 = 0 (left: 0 3 8) || 8 - 3 = 5 (left: 0 5) || 0 / 5 = 0 (left: 0)",
                "3 - 3 = 0 (left: 0 3 8) || 8 - 3 = 5 (left: 0 5) || 5 * 0 = 0 (left: || 5 / 0 = undefined (cannot divide by zero)",
                "3 - 3 = 0 (left: 0 3 8) || 8 - 3 = 5 (left: 0 5) || 0 / 5 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 - 3 = 0 (left: 0 3 8) || 8 / 3 = 2.66666666667 (left: 0 2.66666666667)",
                "3 + 3 = 6 (left: 6 3 8)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                0.003,
                2.001,
                3.0
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 5.0",
                "2 <- 3.1",
                "3 <- 3.2",
                "4 <- 5.0"
            ]
        },
        "Step 6": {
            "steps": [
                "3 - 3 = 0 (left: 0 3 8) || 8 - 3 = 5 (left: 0 5) || 0 / 5 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 - 3 = 0 (left: 0 3 8) || 8 - 3 = 5 (left: 0 5) || 0 / 5 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 - 3 = 0 (left: 0 3 8) || 8 - 3 = 5 (left: 0 5) || 5 * 0 = 0 (left: || 5 / 0 = undefined (cannot divide by zero)",
                "3 - 3 = 0 (left: 0 3 8) || 8 - 3 = 5 (left: 0 5) || 5 * 0 = 0 (left: || 5 / 0 = undefined (cannot divide by zero)",
                "3 - 3 = 0 (left: 0 3 8) || 8 - 3 = 5 (left: 0 5) || 0 / 5 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 2.3",
                "2 <- 3.1",
                "3 <- 2.0",
                "4 <- 2.4"
            ]
        },
        "Step 7": {
            "steps": [
                "3 - 3 = 0 (left: 0 3 8) || 8 - 3 = 5 (left: 0 5) || 0 / 5 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 - 3 = 0 (left: 0 3 8) || 3 + 8 = 11 (left: 0 11)",
                "3 - 3 = 0 (left: 0 3 8) || 8 - 3 = 5 (left: 0 5) || 5 * 0 = 0 (left: || 5 / 0 = undefined (cannot divide by zero)",
                "3 - 3 = 0 (left: 0 3 8) || 8 - 3 = 5 (left: 0 5) || 0 / 5 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 + 3 = 6 (left: 6 3 8) || 3 + 8 = 11 (left: 6 11) || 6 / 11 = 0.5454545454545454 (left: 0.5454545454545454)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 5.0",
                "2 <- 1.0",
                "3 <- 1.2",
                "4 <- 3.2"
            ]
        },
        "Step 8": {
            "steps": [
                "3 + 3 = 6 (left: 6 3 8) || 3 + 8 = 11 (left: 6 11) || 6 - 11 = -5 (left: -5)",
                "3 - 3 = 0 (left: 0 3 8) || 8 - 3 = 5 (left: 0 5) || 0 / 5 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 - 3 = 0 (left: 0 3 8) || 8 - 3 = 5 (left: 0 5) || 5 * 0 = 0 (left:",
                "3 + 3 = 6 (left: 6 3 8) || 3 + 8 = 11 (left: 6 11) || 6 * 11 = 66 (left: 66)",
                "3 - 3 = 0 (left: 0 3 8) || 8 - 3 = 5 (left: 0 5) || 5 * 0 = 0 (left: || 5 / 0 = undefined (cannot divide by zero)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                20.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 5.0",
                "2 <- 4.1",
                "3 <- 2.1",
                "4 <- 3.1"
            ]
        },
        "Step 9": {
            "steps": [
                "3 - 3 = 0 (left: 0 3 8) || 8 - 3 = 5 (left: 0 5) || 0 / 5 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 - 3 = 0 (left: 0 3 8) || 8 - 3 = 5 (left: 0 5) || 0 / 5 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 - 3 = 0 (left: 0 3 8) || 8 - 3 = 5 (left: 0 5) || 5 * 0 = 0 (left: || 5 / 0 = undefined (cannot divide by zero) || 4 + 2 = 6 (left: 3",
                "3 + 3 = 6 (left: 6 3 8) || 6 / 3 = 2 (left: 2 8)",
                "3 - 3 = 0 (left: 0 3 8) || 8 - 3 = 5 (left: 0 5) || 5 * 0 = 0 (left: || 5 / 0 = undefined (cannot divide by zero)"
            ]
        },
        "Input": "3 3 3 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "19": {
        "puzzle": "1 1 2 6",
        "Step 0": {
            "steps": [
                "6 - 2 = 4 (left: 1 2 4)",
                "1 * 1 = 1 (left: 1 2 6)",
                "2 * 1 = 2 (left: 2 6 4)",
                "2 * 1 = 2 (left: 2 6 4)",
                "6 - 2 = 4 (left: 1 2 4)"
            ],
            "Evaluation": [
                2.001,
                1.002,
                1.002,
                1.002,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.4",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 6)",
                "6 - 2 = 4 (left: 1 2 4) || Possible next steps:",
                "2 * 1 = 2 (left: 2 6 4)",
                "6 - 2 = 4 (left: 1 2 4)",
                "2 * 1 = 2 (left: 2 6 4)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                1.002,
                2.001,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 6)",
                "2 * 1 = 2 (left: 2 6 4)",
                "2 * 1 = 2 (left: 2 6 4)",
                "6 - 2 = 4 (left: 1 2 4)",
                "1 * 1 = 1 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                1.002,
                2.001,
                21.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 2.4",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 2.4"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 6) || 2 * 6 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "2 * 1 = 2 (left: 2 6 4)",
                "6 - 2 = 4 (left: 1 2 4)",
                "1 * 1 = 1 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)"
            ],
            "Evaluation": [
                0.002,
                0.0,
                1.002,
                2.001,
                0.0
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.4",
                "2 <- 2.4",
                "3 <- 2.4",
                "4 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "6 - 2 = 4 (left: 1 2 4) || 1 * 2 = 2 (left: 2)",
                "1 * 1 = 1 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 1 * 3 = 3 (left: 3)",
                "2 * 1 = 2 (left: 2 6 4)"
            ],
            "Evaluation": [
                0.001,
                0.0,
                0.0,
                0.0,
                1.002
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- INIT"
            ]
        },
        "Step 5": {
            "steps": [
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4)",
                "2 * 1 = 2 (left: 2 6 4)",
                "2 * 1 = 2 (left: 2 6 4)",
                "1 * 1 = 1 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4)",
                "2 * 1 = 2 (left: 2 6 4)"
            ],
            "Evaluation": [
                21.0,
                1.002,
                1.002,
                60.0,
                1.002
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 2.4",
                "2 <- 5.3",
                "3 <- 5.3",
                "4 <- 2.4"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)"
            ],
            "Evaluation": [
                0.0,
                0.0,
                0.002,
                0.002,
                0.0
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 5.0",
                "2 <- 5.3",
                "3 <- 5.3",
                "4 <- 5.3"
            ]
        },
        "Step 7": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 - 4 = -1 (left: -1)",
                "1 * 1 = 1 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.0,
                0.0,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 5.0",
                "2 <- 5.3",
                "3 <- 5.3",
                "4 <- 5.0"
            ]
        },
        "Step 8": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 - 4 = -1 (left: -1)",
                "1 * 1 = 1 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 - 4 = -1 (left: -1)"
            ],
            "Evaluation": [
                0.0,
                0.0,
                0.002,
                0.002,
                0.0
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 5.3",
                "2 <- 2.4",
                "3 <- 5.3",
                "4 <- 5.3"
            ]
        },
        "Step 9": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ]
        },
        "Input": "1 1 2 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "20": {
        "puzzle": "1 1 2 11",
        "Step 0": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10)",
                "1 * 1 = 1 (left: 1 2 11)",
                "11 - 2 = 9 (left: 1 2 9)",
                "11 - 2 = 9 (left: 1 2 9)",
                "11 - 1 = 10 (left: 1 2 10)"
            ],
            "Evaluation": [
                1.002,
                0.002,
                1.001,
                1.001,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.2",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 11)",
                "11 - 2 = 9 (left: 1 2 9)",
                "11 - 2 = 9 (left: 1 2 9) || 5 * 10 = 50 (",
                "11 - 1 = 10 (left: 1 2 10)",
                "11 - 2 = 9 (left: 1 2 9)"
            ],
            "Evaluation": [
                0.002,
                1.001,
                0.003,
                1.002,
                1.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.4",
                "2 <- 0.0",
                "3 <- INIT",
                "4 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 11)",
                "11 - 2 = 9 (left: 1 2 9) || 5 * 10 = 50 (",
                "11 - 1 = 10 (left: 1 2 10) || 1 * 2 = 2 (left: 2 10)",
                "11 - 1 = 10 (left: 1 2 10)",
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                3.0,
                1.002,
                20.002
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.2",
                "2 <- 2.4",
                "3 <- 2.4",
                "4 <- 2.4"
            ]
        },
        "Step 3": {
            "steps": [
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 * 10 = 100 (left: 100)",
                "11 - 1 = 10 (left: 1 2 10) || 1 * 2 = 2 (left: 2 10) || 2 + 10 = 12 (left: 12)",
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0)",
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 / 10 = 1 (left: 1)",
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 2.4",
                "2 <- 3.4",
                "3 <- 3.2",
                "4 <- 3.4"
            ]
        },
        "Step 4": {
            "steps": [
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0)",
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 3.2",
                "2 <- 3.2",
                "3 <- 4.1",
                "4 <- 4.1"
            ]
        },
        "Step 5": {
            "steps": [
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 3.4",
                "2 <- INIT",
                "3 <- 3.4",
                "4 <- 3.2"
            ]
        },
        "Step 6": {
            "steps": [
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "11 - 2 = 9 (left: 1 2 9)",
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                0.003,
                0.003,
                1.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 3.4",
                "2 <- 4.1",
                "3 <- 3.4",
                "4 <- 2.4"
            ]
        },
        "Step 7": {
            "steps": [
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 3.2",
                "2 <- 3.2",
                "3 <- 7.4",
                "4 <- 3.2"
            ]
        },
        "Step 8": {
            "steps": [
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 7.4",
                "2 <- 3.4",
                "3 <- 2.4",
                "4 <- 7.4"
            ]
        },
        "Step 9": {
            "steps": [
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 / 10 = 1 (left: 1)",
                "11 - 2 = 9 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ]
        },
        "Input": "1 1 2 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "21": {
        "puzzle": "1 2 3 4",
        "Step 0": {
            "steps": [
                "3 + 4 = 7 (left: 1 2 7)",
                "2 * 3 = 6 (left: 1 6 4)",
                "4 - 1 = 3 (left: 2 3 4)",
                "4 - 1 = 3 (left: 2 3 4)",
                "3 + 4 = 7 (left: 1 2 7)"
            ],
            "Evaluation": [
                1.002,
                60.0,
                60.0,
                60.0,
                1.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.3",
                "2 <- 0.2",
                "3 <- 0.3",
                "4 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "4 - 1 = 3 (left: 2 3 4) || 3 + 4 = 7 (left: 2 7)",
                "4 - 1 = 3 (left: 2 3 4) || 4 - 2 = 2 (left: 2 3)",
                "4 - 1 = 3 (left: 2 3 4) || 4 - 2 = 2 (left: 2 3)",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6)",
                "4 - 1 = 3 (left: 2 3 4) || 4 - 2 = 2 (left: 2 3)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.002,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- INIT",
                "4 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "4 - 1 = 3 (left: 2 3 4) || 3 + 4 = 7 (left: 2 7)",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "3 + 4 = 7 (left: 1 2 7)",
                "2 * 3 = 6 (left: 1 6 4) || 4 / 1 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.002,
                1.002,
                0.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- INIT",
                "2 <- 1.3",
                "3 <- 1.3",
                "4 <- 0.2"
            ]
        },
        "Step 3": {
            "steps": [
                "4 - 1 = 3 (left: 2 3 4) || 3 + 4 = 7 (left: 2 7)",
                "4 - 1 = 3 (left: 2 3 4)",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "4 - 1 = 3 (left: 2 3 4) || 4 - 2 = 2 (left: 2 3)"
            ],
            "Evaluation": [
                0.001,
                60.0,
                0.002,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 3.1",
                "2 <- 3.3",
                "3 <- 3.3",
                "4 <- 3.3"
            ]
        },
        "Step 4": {
            "steps": [
                "4 - 1 = 3 (left: 2 3 4) || 3 + 4 = 7 (left: 2 7)",
                "4 - 1 = 3 (left: 2 3 4) || 4 - 2 = 2 (left: 2 3)",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24"
            ],
            "Evaluation": [
                0.001,
                0.002,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.3",
                "2 <- 0.1",
                "3 <- 3.1",
                "4 <- 3.1"
            ]
        },
        "Step 5": {
            "steps": [
                "4 - 1 = 3 (left: 2 3 4) || 3 + 4 = 7 (left: 2 7)",
                "4 - 1 = 3 (left: 2 3 4) || 4 - 2 = 2 (left: 2 3)",
                "2 * 3 = 6 (left: 1 6 4) || 1",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6)",
                "4 - 1 = 3 (left: 2 3 4) || 4 - 2 = 2 (left: 2 3)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.003,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 3.3",
                "2 <- 4.2",
                "3 <- 3.3",
                "4 <- 1.3"
            ]
        },
        "Step 6": {
            "steps": [
                "4 - 1 = 3 (left: 2 3 4) || 3 + 4 = 7 (left: 2 7)",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24 || Input: 3 3 5 8\nSteps:\n3 * 8 = 24 (left: 3 5 24)\n5 - 3 = 2 (left: 2 24)\n2 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (5 - 3) = 24",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)"
            ],
            "Evaluation": [
                0.001,
                60.0,
                60.0,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 6.1",
                "2 <- 5.3",
                "3 <- 4.4",
                "4 <- 6.2"
            ]
        },
        "Step 7": {
            "steps": [
                "4 - 1 = 3 (left: 2 3 4) || 3 + 4 = 7 (left: 2 7)",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24 || Input: 3 3 5 8\nSteps:\n3 * 8 = 24 (left: 3 5 24)\n5 - 3 = 2 (left: 2 24)\n2 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (5 - 3) = 24",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24 || Input: 3 3 5 8\nSteps:\n3 * 8 = 24 (left: 3 5 24)\n5 - 3 = 2 (left: 2 24)\n2 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (5 - 3) = 24",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24 || Input: 3 3 5 8\nSteps:\n3 * 8 = 24 (left: 3 5 24)\n5 - 3 = 2 (left: 2 24)\n2 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (5 - 3) = 24 || Input: 6 6 6 6\nSteps:\n6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 6 36)\n36 / 6 = 6 (left: 6 6)\n6 * 6 = 24 (left: 24)\nAnswer: ((6 + 6) * 6) - 6 = 24"
            ],
            "Evaluation": [
                0.001,
                60.0,
                0.002,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 4.3",
                "2 <- 3.1",
                "3 <- 5.3",
                "4 <- 7.3"
            ]
        },
        "Step 8": {
            "steps": [
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24 || Input: 3 3 5 8\nSteps:\n3 * 8 = 24 (left: 3 5 24)\n5 - 3 = 2 (left: 2 24)\n2 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (5 - 3) = 24",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24 || Input: 3 3 5 8\nSteps:\n3 * 8 = 24 (left: 3 5 24)\n5 - 3 = 2 (left: 2 24)\n2 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (5 - 3) = 24",
                "4 - 1 = 3 (left: 2 3 4) || 4 - 2 = 2 (left: 2 3)",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24 || Input: 3 3 5 8\nSteps:\n3 * 8 = 24 (left: 3 5 24)\n5 - 3 = 2 (left: 2 24)\n2 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (5 - 3) = 24 || Input: 6 6 6 6\nSteps:\n6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 6 36)\n36 / 6 = 6 (left: 6 6)\n6 * 6 = 24 (left: 24)\nAnswer: ((6 + 6) * 6) - 6 = 24"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.002,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 8.1",
                "1 <- 7.4",
                "2 <- 6.2",
                "3 <- 7.3",
                "4 <- 0.3"
            ]
        },
        "Step 9": {
            "steps": [
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24 || Input: 3 3 5 8\nSteps:\n3 * 8 = 24 (left: 3 5 24)\n5 - 3 = 2 (left: 2 24)\n2 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (5 - 3) = 24 || Input: 6 6 6 6\nSteps:\n6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 6 36)\n36 / 6 = 6 (left: 6 6)\n6 * 6 = 24 (left: 24)\nAnswer: ((6 + 6) * 6) - 6 = 24",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24 || Input: 3 3 5 8\nSteps:\n3 * 8 = 24 (left: 3 5 24)\n5 - 3 = 2 (left: 2 24)\n2 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (5 - 3) = 24 || Input: 6 6 6 6\nSteps:\n6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 6 36)\n36 / 6 = 6 (left: 6 6)\n6 * 6 = 24 (left: 24)\nAnswer: ((6 + 6) * 6) - 6 = 24 || Input: 2 3 5 7\nSteps:\n3 + 7 = 10 (left: 2 5 10)\n10 - 5 = 5 (left: 2 5)\n2 * 5 = 10 (left: 10)\n10 * 10 = 100 (left: 100)\n100 / 4 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: (((",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24 || Input: 3 3 5 8\nSteps:\n3 * 8 = 24 (left: 3 5 24)\n5 - 3 = 2 (left: 2 24)\n2 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (5 - 3) = 24 || Input: 6 6 6 6\nSteps:\n6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 6 36)\n36 / 6 = 6 (left: 6 6)\n6 * 6 = 24 (left: 24)\nAnswer: ((6 + 6) * 6) - 6 = 24",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24 || Input: 3 3 5 8\nSteps:\n3 * 8 = 24 (left: 3 5 24)\n5 - 3 = 2 (left: 2 24)\n2 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (5 - 3) = 24 || Input: 6 6 6 6\nSteps:\n6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 6 36)\n36 / 6 = 6 (left: 6 6)\n6 * 6 = 24 (left: 24)\nAnswer: ((6 + 6) * 6) - 6 = 24",
                "4 - 1 = 3 (left: 2 3 4) || 4 - 2 = 2 (left: 2 3)"
            ]
        },
        "Input": "1 2 3 4",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "22": {
        "puzzle": "11 11 12 12",
        "Step 0": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12)",
                "11 / 11 = 1 (left: 1 12 12)",
                "12 - 11 = 1 (left: 1 12 12)",
                "12 - 11 = 1 (left: 1 12 12)",
                "12 - 11 = 1 (left: 1 11 12)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                0.003,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- INIT",
                "2 <- 0.4",
                "3 <- 0.0",
                "4 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "12 - 11 = 1 (left: 1 12 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                20.002,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 0.4",
                "2 <- 1.2",
                "3 <- 0.0",
                "4 <- 0.4"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                20.002,
                20.002,
                20.002,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.4",
                "2 <- INIT",
                "3 <- 2.1",
                "4 <- 1.4"
            ]
        },
        "Step 3": {
            "steps": [
                "11 / 11 = 1 (left: 1 12 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 1 12 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.003,
                20.002,
                20.002
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 0.0",
                "2 <- 0.4",
                "3 <- 0.0",
                "4 <- 2.1"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                20.002,
                20.002,
                20.002,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 4.2",
                "2 <- 3.3",
                "3 <- 4.2",
                "4 <- 2.1"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 24 = 288 (left: 288)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 - 12 =",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.003,
                20.002,
                20.002
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 0.4",
                "2 <- 5.1",
                "3 <- 4.1",
                "4 <- 0.0"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 24 = 288 (left: 288)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 - 12 =",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.003,
                20.002,
                20.002
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.2",
                "2 <- 1.2",
                "3 <- 3.1",
                "4 <- 2.2"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 24 = 288 (left: 288)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 - 12 =",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                20.002,
                0.001
            ],
            "Resampling": [
                "0 <- 7.3",
                "1 <- 0.0",
                "2 <- 2.1",
                "3 <- 2.2",
                "4 <- 3.4"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 24 = 288 (left: 288)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                20.002,
                20.001,
                0.001
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 5.4",
                "2 <- 6.4",
                "3 <- 8.2",
                "4 <- 6.3"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 24 = 288 (left: 288)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 - 12 =",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2)"
            ]
        },
        "Input": "11 11 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "23": {
        "puzzle": "3 7 7 8",
        "Step 0": {
            "steps": [
                "8 - 7 = 1 (left: 3 7 1)",
                "7 / 3 = 2 (left: 2 7 8)",
                "3 * 7 = 21 (left: 7 8 21)",
                "3 * 7 = 21 (left: 7 8 21)",
                "8 - 7 = 1 (left: 3 7 1)"
            ],
            "Evaluation": [
                3.0,
                1.002,
                2.0,
                2.0,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "7 / 3 = 2 (left: 2 7 8)",
                "3 * 7 = 21 (left: 7 8 21)",
                "3 * 7 = 21 (left: 7 8 21)",
                "8 - 7 = 1 (left: 3 7 1)",
                "3 * 7 = 21 (left: 7 8 21)"
            ],
            "Evaluation": [
                1.002,
                2.0,
                2.0,
                3.0,
                2.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "3 * 7 = 21 (left: 7 8 21) || 8 * 7 = 56 (left: 21 56)",
                "3 * 7 = 21 (left: 7 8 21)",
                "3 * 7 = 21 (left: 7 8 21)",
                "8 - 7 = 1 (left: 3 7 1)",
                "3 * 7 = 21 (left: 7 8 21)"
            ],
            "Evaluation": [
                0.003,
                2.0,
                2.0,
                3.0,
                2.0
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 2.3",
                "2 <- 0.0",
                "3 <- 0.3",
                "4 <- 1.1"
            ]
        },
        "Step 3": {
            "steps": [
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1)",
                "8 - 7 = 1 (left: 3 7 1) || 3 * 7 = 21 (left: 21 1)",
                "8 - 7 = 1 (left: 3 7 1) || 3 * 7 = 21 (left: 21 1)",
                "3 * 7 = 21 (left: 7 8 21) || 21 + 7 = 28 (left: 8 28)",
                "3 * 7 = 21 (left: 7 8 21) || 21 - 7 = 14 (left: 8 14)"
            ],
            "Evaluation": [
                20.001,
                0.0,
                0.0,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 3.0",
                "2 <- 1.0",
                "3 <- 3.0",
                "4 <- 1.1"
            ]
        },
        "Step 4": {
            "steps": [
                "7 / 3 = 2 (left: 2 7 8)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 * 1 = 4 (left: 4)",
                "7 / 3 = 2 (left: 2 7 8) || 7 / 2 = 3.5 (left: 3.5 8)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 / 1 = 4 (left: 4)",
                "3 * 7 = 21 (left: 7 8 21) || 21 - 7 = 14 (left: 8 14)"
            ],
            "Evaluation": [
                1.002,
                0.002,
                0.003,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 3.0",
                "2 <- 3.0",
                "3 <- 0.4",
                "4 <- 3.0"
            ]
        },
        "Step 5": {
            "steps": [
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 - 1 = 3 (left: 3)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 * 1 = 4 (left: 4)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 * 1 = 4 (left: 4)",
                "8 - 7 = 1 (left: 3 7 1) || 7 / 3 = 2.333 (left: 2.333 1)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 * 1 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.002,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 1.3",
                "2 <- 1.1",
                "3 <- 2.3",
                "4 <- 0.4"
            ]
        },
        "Step 6": {
            "steps": [
                "3 * 7 = 21 (left: 7 8 21) || 8 * 7 = 56 (left: 21 56)",
                "8 - 7 = 1 (left: 3 7 1) || 3 * 7 = 21 (left: 21 1)",
                "3 * 7 = 21 (left: 7 8 21) || 21 - 7 = 14 (left: 8 14)",
                "8 - 7 = 1 (left: 3 7 1) || 7 / 3 = 2.333 (left: 2.333 1)",
                "8 - 7 = 1 (left: 3 7 1) || 3 * 7 = 21 (left: 21 1)"
            ],
            "Evaluation": [
                0.003,
                0.0,
                1.002,
                0.001,
                0.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 2.4",
                "2 <- 3.0",
                "3 <- 3.4",
                "4 <- INIT"
            ]
        },
        "Step 7": {
            "steps": [
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1)",
                "3 * 7 = 21 (left: 7 8 21) || 21 - 7 = 14 (left: 8 14)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 * 1 = 4 (left: 4)",
                "3 * 7 = 21 (left: 7 8 21) || 21 - 7 = 14 (left: 8 14) || 8 * 14 = 112 (left: 112)",
                "3 * 7 = 21 (left: 7 8 21)"
            ],
            "Evaluation": [
                20.001,
                1.002,
                0.002,
                0.003,
                2.0
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 1.3",
                "2 <- 7.0",
                "3 <- 7.0",
                "4 <- 7.0"
            ]
        },
        "Step 8": {
            "steps": [
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 - 1 = 3 (left: 3)",
                "8 - 7 = 1 (left: 3 7 1) || 3 * 7 = 21 (left: 21 1)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 * 1 = 4 (left: 4)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 / 1 = 4 (left: 4)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 * 1 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.0,
                0.0,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 7.0",
                "2 <- 7.0",
                "3 <- 0.0",
                "4 <- 7.0"
            ]
        },
        "Step 9": {
            "steps": [
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 - 1 = 3 (left: 3)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 * 1 = 4 (left: 4)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 * 1 = 4 (left: 4)",
                "8 - 7 = 1 (left: 3 7 1) || 7 / 3 = 2.333 (left: 2.333 1)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 * 1 = 4 (left: 4)"
            ]
        },
        "Input": "3 7 7 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "24": {
        "puzzle": "1 1 13 13",
        "Step 0": {
            "steps": [
                "13 + 1 = 14 (left: 1 13 14)",
                "1 / 1 = 1 (left: 1 13 13)",
                "1 * 1 = 1 (left: 1 13 13)",
                "1 * 1 = 1 (left: 1 13 13)",
                "13 + 1 = 14 (left: 1 13 14)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 / 1 = 1 (left: 1 13 13)",
                "1 * 1 = 1 (left: 1 13 13)",
                "1 * 1 = 1 (left: 1 13 13)",
                "13 + 1 = 14 (left: 1 13 14)",
                "1 * 1 = 1 (left: 1 13 13)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "1 / 1 = 1 (left: 1 13 13)",
                "1 * 1 = 1 (left: 1 13 13)",
                "1 * 1 = 1 (left: 1 13 13)",
                "13 + 1 = 14 (left: 1 13 14)",
                "1 * 1 = 1 (left: 1 13 13)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- INIT",
                "2 <- 1.3",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "13 + 1 = 14 (left: 1 13 14) || 13 + 1 = 14 (left: 14 14)",
                "1 * 1 = 1 (left: 1 13 13)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)",
                "13 + 1 = 14 (left: 1 13 14)",
                "1 * 1 = 1 (left: 1 13 13)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.0",
                "3 <- INIT",
                "4 <- 1.3"
            ]
        },
        "Step 4": {
            "steps": [
                "1 / 1 = 1 (left: 1 13 13)",
                "1 * 1 = 1 (left: 1 13 13)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)",
                "13 + 1 = 14 (left: 1 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 1.3"
            ]
        },
        "Step 5": {
            "steps": [
                "13 + 1 = 14 (left: 1 13 14) || 13 + 1 = 14 (left: 14 14)",
                "1 * 1 = 1 (left: 1 13 13)",
                "1 * 1 = 1 (left: 1 13 13)",
                "13 + 1 = 14 (left: 1 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 5.3",
                "2 <- 2.3",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 6": {
            "steps": [
                "13 + 1 = 14 (left: 1 13 14) || 13 + 1 = 14 (left: 14 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)",
                "13 + 1 = 14 (left: 1 13 14)",
                "1 * 1 = 1 (left: 1 13 13)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 1.3",
                "4 <- 3.3"
            ]
        },
        "Step 7": {
            "steps": [
                "13 + 1 = 14 (left: 1 13 14) || 13 + 1 = 14 (left: 14 14)",
                "1 * 1 = 1 (left: 1 13 13)",
                "1 * 1 = 1 (left: 1 13 13)",
                "13 + 1 = 14 (left: 1 13 14) || 13 * 1 = 13 (left: 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 6.3",
                "3 <- 0.0",
                "4 <- 6.4"
            ]
        },
        "Step 8": {
            "steps": [
                "1 / 1 = 1 (left: 1 13 13)",
                "1 * 1 = 1 (left: 1 13 13)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 * 1 = 13 (left: 13 14)",
                "1 * 1 = 1 (left: 1 13 13) || 13 - 1 = 12 (left: 12 13)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 4.3",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 6.3"
            ]
        },
        "Step 9": {
            "steps": [
                "13 + 1 = 14 (left: 1 13 14) || 13 + 1 = 14 (left: 14 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)",
                "1 * 1 = 1 (left: 1 13 13)",
                "13 + 1 = 14 (left: 1 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)"
            ]
        },
        "Input": "1 1 13 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "25": {
        "puzzle": "1 2 4 12",
        "Step 0": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8)",
                "2 * 4 = 8 (left: 1 8 12)",
                "4 * 3 = 12 (left: 1 12 12)",
                "4 * 3 = 12 (left: 1 12 12)",
                "12 - 4 = 8 (left: 1 2 8)"
            ],
            "Evaluation": [
                22.0,
                1.002,
                0.003,
                0.003,
                22.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- INIT",
                "2 <- 0.0",
                "3 <- 0.0",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "4 * 3 = 12 (left: 1 12 12)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "4 * 3 = 12 (left: 1 12 12)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                60.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.3",
                "2 <- 1.2",
                "3 <- 0.0",
                "4 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 4 = 8 (left: 1 8 12)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                1.002,
                0.002,
                0.001,
                60.0,
                0.001
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 1.2",
                "2 <- 1.2",
                "3 <- 1.2",
                "4 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 2.3",
                "2 <- 2.3",
                "3 <- 2.3",
                "4 <- 1.3"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.4",
                "2 <- 1.3",
                "3 <- 2.3",
                "4 <- 1.3"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.0,
                60.0,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 2.3",
                "2 <- 5.1",
                "3 <- 0.4",
                "4 <- 1.3"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.001,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 5.1",
                "2 <- 2.3",
                "3 <- 0.0",
                "4 <- 6.3"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.0,
                0.001,
                0.002,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 5.1",
                "2 <- 2.3",
                "3 <- 5.1",
                "4 <- 7.3"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.0,
                0.001,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 1.2",
                "2 <- 7.3",
                "3 <- 7.3",
                "4 <- 6.3"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ]
        },
        "Input": "1 2 4 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "26": {
        "puzzle": "1 1 3 6",
        "Step 0": {
            "steps": [
                "1 / 1 = 1 (left: 1 3 6)",
                "1 * 1 = 1 (left: 1 3 6)",
                "3 + 1 = 4 (left: 1 4 6)",
                "3 + 1 = 4 (left: 1 4 6)",
                "1 / 1 = 1 (left: 1 3 6)"
            ],
            "Evaluation": [
                22.0,
                22.0,
                41.0,
                41.0,
                22.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.3",
                "2 <- 0.2",
                "3 <- 0.2",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 / 1 = 1 (left: 1 3 6) || 3 * 6 = 18 (left: 1 18)",
                "3 + 1 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "3 + 1 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "3 + 1 = 4 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "3 + 1 = 4 (left: 1 4 6)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                2.0,
                41.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.2",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "3 + 1 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "3 + 1 = 4 (left: 1 4 6)",
                "1 * 1 = 1 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3)",
                "3 + 1 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                41.0,
                21.0,
                0.002
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.3",
                "2 <- 0.0",
                "3 <- 0.0",
                "4 <- 1.4"
            ]
        },
        "Step 3": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "1 / 1 = 1 (left: 1 3 6) || 1 * 3 = 3 (left: 3)",
                "1 / 1 = 1 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3)",
                "3 + 1 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)"
            ],
            "Evaluation": [
                60.0,
                0.0,
                0.0,
                21.0,
                0.002
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 3.0",
                "3 <- 0.0",
                "4 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "3 + 1 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 10 / 5 = 2 (left: 2)",
                "3 + 1 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (3 + 1) * (6 * 1) = 24",
                "1 / 1 = 1 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3)",
                "3 + 1 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (3 + 1) * (6 * 1) = 24"
            ]
        },
        "Input": "1 1 3 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "27": {
        "puzzle": "1 1 3 9",
        "Step 0": {
            "steps": [
                "3 - 1 = 2 (left: 1 2 9)",
                "1 * 1 = 1 (left: 1 3 9)",
                "9 - 3 = 6 (left: 1 1 6)",
                "9 - 3 = 6 (left: 1 1 6)",
                "3 - 1 = 2 (left: 1 2 9)"
            ],
            "Evaluation": [
                1.001,
                0.003,
                1.002,
                1.002,
                1.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.2",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 9)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6)",
                "9 - 3 = 6 (left: 1 1 6)",
                "3 - 1 = 2 (left: 1 2 9)",
                "9 - 3 = 6 (left: 1 1 6)"
            ],
            "Evaluation": [
                0.003,
                40.0,
                1.002,
                1.001,
                1.002
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.1",
                "2 <- 1.1",
                "3 <- 1.1",
                "4 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.1",
                "2 <- 1.1",
                "3 <- 0.0",
                "4 <- 1.1"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 9)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "3 - 1 = 2 (left: 1 2 9) || Input: 5 5 10",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.1",
                "2 <- 1.1",
                "3 <- 1.1",
                "4 <- 1.1"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 9)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- INIT",
                "2 <- 1.1",
                "3 <- 1.1",
                "4 <- 1.1"
            ]
        },
        "Step 5": {
            "steps": [
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "9 - 3 = 6 (left: 1 1 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.001,
                1.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.1",
                "2 <- 1.1",
                "3 <- 1.4",
                "4 <- 1.1"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 9)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 - 1 = 5 (left: 1 5)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 6.3",
                "2 <- 6.3",
                "3 <- 6.3",
                "4 <- 6.3"
            ]
        },
        "Step 7": {
            "steps": [
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "9 - 3 = 6 (left: 1 1 6) || 6 - 1 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "9 - 3 = 6 (left: 1 1 6) || 6 - 1 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "9 - 3 = 6 (left: 1 1 6) || 6 - 1 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "9 - 3 = 6 (left: 1 1 6) || 6 - 1 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 6.3",
                "2 <- 1.2",
                "3 <- 6.3",
                "4 <- INIT"
            ]
        },
        "Step 8": {
            "steps": [
                "9 - 3 = 6 (left: 1 1 6) || 6 - 1 = 5 (left: 1 5) || 5 - 1 = 4 (left: 4)",
                "9 - 3 = 6 (left: 1 1 6) || 6 - 1 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 - 1 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "9 - 3 = 6 (left: 1 1 6)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                40.0,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 8.2",
                "1 <- 8.2",
                "2 <- 8.2",
                "3 <- 8.2",
                "4 <- 8.2"
            ]
        },
        "Step 9": {
            "steps": [
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ]
        },
        "Input": "1 1 3 9",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "28": {
        "puzzle": "7 7 12 12",
        "Step 0": {
            "steps": [
                "12 + 7 = 19 (left: 7 12 19)",
                "7 / 7 = 1 (left: 1 12 12)",
                "7 * 7 = 49 (left: 12 12 49)",
                "7 * 7 = 49 (left: 12 12 49)",
                "12 + 7 = 19 (left: 7 12 19)"
            ],
            "Evaluation": [
                3.0,
                0.003,
                2.001,
                2.001,
                3.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "12 + 7 = 19 (left: 7 12 19) || 7 * 12 = 84 (left: 84 19)",
                "7 * 7 = 49 (left: 12 12 49)",
                "7 * 7 = 49 (left: 12 12 49)",
                "12 + 7 = 19 (left: 7 12 19)",
                "7 * 7 = 49 (left: 12 12 49) || 49 - 12 = 37 (left: 12 37)"
            ],
            "Evaluation": [
                0.003,
                2.001,
                2.001,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "7 / 7 = 1 (left: 1 12 12)",
                "7 * 7 = 49 (left: 12 12 49)",
                "7 * 7 = 49 (left: 12 12 49)",
                "12 + 7 = 19 (left: 7 12 19)",
                "12 + 7 = 19 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19)"
            ],
            "Evaluation": [
                0.003,
                2.001,
                2.001,
                3.0,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.4",
                "2 <- INIT",
                "3 <- 1.3",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "7 / 7 = 1 (left: 1 12 12)",
                "12 + 7 = 19 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19)",
                "7 * 7 = 49 (left: 12 12 49)",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19)",
                "7 * 7 = 49 (left: 12 12 49)"
            ],
            "Evaluation": [
                0.003,
                3.0,
                2.001,
                3.0,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 3.1",
                "2 <- 1.3",
                "3 <- 3.4",
                "4 <- 2.1"
            ]
        },
        "Step 4": {
            "steps": [
                "7 / 7 = 1 (left: 1 12 12)",
                "12 + 7 = 19 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19)",
                "12 + 7 = 19 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19)",
                "7 * 7 = 49 (left: 12 12 49) || 12 / 12 = 1 (left: 1 12 49)",
                "7 * 7 = 49 (left: 12 12 49) || 49 - 12 = 37 (left: 12 37)"
            ],
            "Evaluation": [
                0.003,
                3.0,
                3.0,
                1.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 3.1",
                "2 <- 3.3",
                "3 <- 1.2",
                "4 <- 0.0"
            ]
        },
        "Step 5": {
            "steps": [
                "12 + 7 = 19 (left: 7 12 19) || 7 * 12 = 84 (left: 84 19)",
                "12 + 7 = 19 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19)",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12)",
                "7 * 7 = 49 (left: 12 12 49) || 12 / 12 = 1 (left: 1 12 49)",
                "12 + 7 = 19 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19)"
            ],
            "Evaluation": [
                0.003,
                3.0,
                21.001,
                1.001,
                3.0
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 5.2",
                "2 <- 5.1",
                "3 <- 5.4",
                "4 <- INIT"
            ]
        },
        "Step 6": {
            "steps": [
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12)",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 / 5 = 1.4 (left: 1.4 12)",
                "12 + 7 = 19 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19)",
                "12 + 7 = 19 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19)",
                "7 * 7 = 49 (left: 12 12 49)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                3.0,
                3.0,
                2.001
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 6.4",
                "2 <- INIT",
                "3 <- 1.1",
                "4 <- 6.0"
            ]
        },
        "Step 7": {
            "steps": [
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12)",
                "7 * 7 = 49 (left: 12 12 49) || 49 - 12 = 37 (left: 12 37)",
                "7 * 7 = 49 (left: 12 12 49)",
                "7 * 7 = 49 (left: 12 12 49) || 12 / 12 = 1 (left: 1 12 49)",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                2.001,
                1.001,
                60.0
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 7.0",
                "2 <- 7.4",
                "3 <- 5.2",
                "4 <- 7.0"
            ]
        },
        "Step 8": {
            "steps": [
                "12 + 7 = 19 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19) || 7 * 12 = 84 (left: 84 19)",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: ((12 + 7) - (12 - 7)) * (7 - 5) = 24",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 5 * 7 = 35 (left: 35 12)",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                20.002,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 8.1",
                "1 <- 8.2",
                "2 <- 8.1",
                "3 <- 8.2",
                "4 <- 7.0"
            ]
        },
        "Step 9": {
            "steps": [
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: ((12 + 7) - (12 - 7)) * (7 - 5) = 24",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: ((12 + 7) - (12 - 7)) * (7 - 5) = 24 || Input: 3 3 4 5\nSteps:\n3 + 4 = 7 (left: 3 5 7)\n7 - 3 = 4 (left: 4 5)\n4 * 5 = 20 (left: 20)\n20 + 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 5 = 21 (left: 21)\n21 - ",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: ((12 + 7) - (12 - 7)) * (7 - 5) = 24",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: ((12 + 7) - (12 - 7)) * (7 - 5) = 24 || Input: 3 3 4 5\nSteps:\n3 + 4 = 7 (left: 3 5 7)\n7 - 3 = 4 (left: 4 5)\n4 * 5 = 20 (left: 20)\n20 + 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 5 = 21 (left: 21)\n21 - ",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)"
            ]
        },
        "Input": "7 7 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "29": {
        "puzzle": "4 6 7 7",
        "Step 0": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7)",
                "6 + 7 = 13 (left: 4 7 13)",
                "7 - 6 = 1 (left: 4 1 7)",
                "7 - 6 = 1 (left: 4 1 7)",
                "7 - 4 = 3 (left: 3 7 7)"
            ],
            "Evaluation": [
                60.0,
                20.002,
                21.001,
                21.001,
                60.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.3",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2 (left: 2 7)",
                "7 - 6 = 1 (left: 4 1 7)",
                "7 - 6 = 1 (left: 4 1 7)",
                "7 - 6 = 1 (left: 4 1 7) || 7 - 4 = 3 (left: 4 3)",
                "7 - 6 = 1 (left: 4 1 7)"
            ],
            "Evaluation": [
                0.001,
                21.001,
                21.001,
                2.0,
                21.001
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.0",
                "2 <- 1.4",
                "3 <- 0.0",
                "4 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "7 - 6 = 1 (left: 4 1 7) || 4 / 1 = 4 (left: 4 7)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "7 - 6 = 1 (left: 4 1 7) || 7 / 1 = 7 (left: 4 7)",
                "7 - 4 = 3 (left: 3 7 7) || 7 + 3 = 10 (left: 7 10)",
                "6 + 7 = 13 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13)"
            ],
            "Evaluation": [
                1.0,
                0.003,
                1.0,
                1.002,
                60.0
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 2.4",
                "2 <- 1.1",
                "3 <- 0.4",
                "4 <- 1.1"
            ]
        },
        "Step 3": {
            "steps": [
                "7 - 6 = 1 (left: 4 1 7) || 4 / 1 = 4 (left: 4 7)",
                "6 + 7 = 13 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "7 - 6 = 1 (left: 4 1 7) || 7 / 1 = 7 (left: 4 7)",
                "7 - 4 = 3 (left: 3 7 7) || 7 + 3 = 10 (left: 7 10)",
                "7 - 6 = 1 (left: 4 1 7) || 7 / 1 = 7 (left: 4 7)"
            ],
            "Evaluation": [
                1.0,
                0.002,
                1.0,
                1.002,
                1.0
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.4",
                "2 <- 0.3",
                "3 <- 0.4",
                "4 <- 1.4"
            ]
        },
        "Step 4": {
            "steps": [
                "7 - 6 = 1 (left: 4 1 7) || 4 / 1 = 4 (left: 4 7)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "7 - 6 = 1 (left: 4 1 7) || 7 / 1 = 7 (left: 4 7)",
                "7 - 4 = 3 (left: 3 7 7) || 7 + 3 = 10 (left: 7 10)",
                "7 - 6 = 1 (left: 4 1 7) || 7 / 1 = 7 (left: 4 7)"
            ],
            "Evaluation": [
                1.0,
                0.003,
                1.0,
                1.002,
                1.0
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 0.4",
                "2 <- 2.4",
                "3 <- 0.4",
                "4 <- 0.0"
            ]
        },
        "Step 5": {
            "steps": [
                "7 - 6 = 1 (left: 4 1 7) || 4 / 1 = 4 (left: 4 7)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "6 + 7 = 13 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "7 - 4 = 3 (left: 3 7 7) || 7 + 3 = 10 (left: 7 10)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)"
            ],
            "Evaluation": [
                1.0,
                0.003,
                0.002,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- 3.2",
                "4 <- 0.3"
            ]
        },
        "Step 6": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2 (left: 2 7)",
                "7 - 6 = 1 (left: 4 1 7)",
                "6 + 7 = 13 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13)",
                "7 - 6 = 1 (left: 4 1 7) || 7 / 1 = 7 (left: 4 7) || 4 * 7 = 28 (left: 28)",
                "7 - 6 = 1 (left: 4 1 7) || 7 / 1 = 7 (left: 4 7)"
            ],
            "Evaluation": [
                0.001,
                21.001,
                60.0,
                0.003,
                1.0
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 6.2",
                "2 <- 6.2",
                "3 <- 6.2",
                "4 <- 3.3"
            ]
        },
        "Step 7": {
            "steps": [
                "6 + 7 = 13 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "6 + 7 = 13 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "6 + 7 = 13 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "6 + 7 = 13 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "7 - 4 = 3 (left: 3 7 7) || 7 + 3 = 10 (left: 7 10) || 10 / 7 = 1.43 (left: 1.43)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 6.2",
                "2 <- 0.2",
                "3 <- 6.1",
                "4 <- 6.2"
            ]
        },
        "Step 8": {
            "steps": [
                "6 + 7 = 13 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "6 + 7 = 13 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "7 - 6 = 1 (left: 4 1 7) || 7 / 1 = 7 (left: 4 7)",
                "7 - 6 = 1 (left: 4 1 7) || 7 - 4 = 3 (left: 4 3)",
                "6 + 7 = 13 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                1.0,
                2.0,
                0.002
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 1.1",
                "2 <- 6.2",
                "3 <- 0.4",
                "4 <- 3.3"
            ]
        },
        "Step 9": {
            "steps": [
                "6 + 7 = 13 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "7 - 6 = 1 (left: 4 1 7) || 7 / 1 = 7 (left: 4 7)",
                "6 + 7 = 13 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "7 - 4 = 3 (left: 3 7 7) || 7 + 3 = 10 (left: 7 10)",
                "7 - 4 = 3 (left: 3 7 7) || 7 + 3 = 10 (left: 7 10) || 10 / 7 = 1.43 (left: 1.43)"
            ]
        },
        "Input": "4 6 7 7",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "30": {
        "puzzle": "1 1 2 13",
        "Step 0": {
            "steps": [
                "13 - 2 = 11 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 2 13)",
                "2 * 1 = 2 (left: 2 2 13)",
                "2 * 1 = 2 (left: 2 2 13)",
                "13 - 2 = 11 (left: 1 1 11)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                1.002,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 13)",
                "2 * 1 = 2 (left: 2 2 13)",
                "2 * 1 = 2 (left: 2 2 13)",
                "13 - 2 = 11 (left: 1 1 11)",
                "2 * 1 = 2 (left: 2 2 13)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                1.002,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 13)",
                "2 * 1 = 2 (left: 2 2 13)",
                "2 * 1 = 2 (left: 2 2 13)",
                "13 - 2 = 11 (left: 1 1 11)",
                "2 * 1 = 2 (left: 2 2 13)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                1.002,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 2.2",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 13)",
                "2 * 1 = 2 (left: 2 2 13)",
                "2 * 1 = 2 (left: 2 2 13) || 2 - 2 = 0 (left: 0 13)",
                "13 - 2 = 11 (left: 1 1 11)",
                "2 * 1 = 2 (left: 2 2 13)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                0.001,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- INIT",
                "2 <- 2.2",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "13 - 2 = 11 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11)",
                "2 * 1 = 2 (left: 2 2 13)",
                "2 * 1 = 2 (left: 2 2 13) || 2 - 2 = 0 (left: 0 13)",
                "13 - 2 = 11 (left: 1 1 11)",
                "2 * 1 = 2 (left: 2 2 13)"
            ],
            "Evaluation": [
                40.0,
                1.002,
                0.001,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 4.0",
                "2 <- INIT",
                "3 <- 4.0",
                "4 <- 4.0"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 13)",
                "13 - 2 = 11 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "2 * 1 = 2 (left: 2 2 13)",
                "13 - 2 = 11 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "13 - 2 = 11 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                1.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 4.0",
                "2 <- 4.0",
                "3 <- INIT",
                "4 <- 4.0"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 13) || 2 * 13 = 26 (left: 1 26)",
                "13 - 2 = 11 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "13 - 2 = 11 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "13 - 2 = 11 (left: 1 1 11)",
                "13 - 2 = 11 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 3.4",
                "2 <- 4.0",
                "3 <- 4.3",
                "4 <- 4.0"
            ]
        },
        "Step 7": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 13) || 2 * 2 = 4 (left: 4 13)",
                "2 * 1 = 2 (left: 2 2 13) || 2 - 2 = 0 (left: 0 13)",
                "13 - 2 = 11 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "13 - 2 = 11 (left: 1 1 11) || 1 - 1 = 0 (left: 0 11)",
                "13 - 2 = 11 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                1.002,
                0.001,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 4.0",
                "2 <- 4.0",
                "3 <- 4.0",
                "4 <- 4.0"
            ]
        },
        "Step 8": {
            "steps": [
                "13 - 2 = 11 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "13 - 2 = 11 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "13 - 2 = 11 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "13 - 2 = 11 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "13 - 2 = 11 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 4.0",
                "2 <- 3.1",
                "3 <- 7.0",
                "4 <- 4.0"
            ]
        },
        "Step 9": {
            "steps": [
                "13 - 2 = 11 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "13 - 2 = 11 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "2 * 1 = 2 (left: 2 2 13) || 2 - 2 = 0 (left: 0 13)",
                "2 * 1 = 2 (left: 2 2 13) || 2 * 2 = 4 (left: 4 13) || 4 * 13 = 52 (left: 52)",
                "13 - 2 = 11 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ]
        },
        "Input": "1 1 2 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "31": {
        "puzzle": "1 1 5 6",
        "Step 0": {
            "steps": [
                "6 - 1 = 5 (left: 1 5 5)",
                "1 * 5 = 5 (left: 1 5 6)",
                "5 * 1 = 5 (left: 5 5 6)",
                "5 * 1 = 5 (left: 5 5 6)",
                "6 - 1 = 5 (left: 1 5 5)"
            ],
            "Evaluation": [
                41.0,
                0.002,
                1.002,
                1.002,
                41.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.0",
                "2 <- 0.4",
                "3 <- 0.4",
                "4 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "6 - 1 = 5 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)"
            ],
            "Evaluation": [
                2.001,
                21.0,
                21.0,
                3.0,
                21.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.4",
                "2 <- 0.3",
                "3 <- INIT",
                "4 <- 0.4"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 5 = 5 (left: 1 5 6)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)",
                "5 * 1 = 5 (left: 5 5 6) || 5 - 5 = 0 (left: 0 6)",
                "6 - 1 = 5 (left: 1 5 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)"
            ],
            "Evaluation": [
                0.002,
                21.0,
                40.0,
                41.0,
                21.0
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.1",
                "2 <- INIT",
                "3 <- 2.3",
                "4 <- 2.2"
            ]
        },
        "Step 3": {
            "steps": [
                "5 * 1 = 5 (left: 5 5 6) || 5 - 5 = 0 (left: 0 6) || 0 * 6 = 0 (left: 0)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "5 * 1 = 5 (left: 5 5 6)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5)",
                "5 * 1 = 5 (left: 5 5 6) || 5 - 5 = 0 (left: 0 6) || 6 - 0 = 6 (left: 6)"
            ],
            "Evaluation": [
                20.002,
                0.002,
                1.002,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 0.4",
                "2 <- 2.3",
                "3 <- 2.1",
                "4 <- 0.0"
            ]
        },
        "Step 4": {
            "steps": [
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 4 / 1 = 4 (left: 4 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)"
            ],
            "Evaluation": [
                3.0,
                21.0,
                21.0,
                0.003,
                21.0
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 1.1",
                "2 <- 2.3",
                "3 <- 0.4",
                "4 <- 4.4"
            ]
        },
        "Step 5": {
            "steps": [
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 4 / 1 = 4 (left: 4 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)"
            ],
            "Evaluation": [
                3.0,
                0.002,
                21.0,
                3.0,
                0.002
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 2.3",
                "2 <- 2.1",
                "3 <- 4.4",
                "4 <- 4.1"
            ]
        },
        "Step 6": {
            "steps": [
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 4 / 1 = 4 (left: 4 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)"
            ],
            "Evaluation": [
                3.0,
                21.0,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 5.0",
                "2 <- 0.0",
                "3 <- 4.2",
                "4 <- 2.1"
            ]
        },
        "Step 7": {
            "steps": [
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 4 / 1 = 4 (left: 4 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 4 / 1 = 4 (left: 4 5) || 5 / 4 = 1.25 (left: 1.25)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)"
            ],
            "Evaluation": [
                3.0,
                0.002,
                21.0,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 0.0",
                "2 <- 1.3",
                "3 <- 7.2",
                "4 <- 4.4"
            ]
        },
        "Step 8": {
            "steps": [
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 4 / 1 = 4 (left: 4 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5) || 4 * 5 = 20 (left: 5 20)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)"
            ],
            "Evaluation": [
                3.0,
                21.0,
                41.0,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 8.2",
                "1 <- 1.2",
                "2 <- 6.1",
                "3 <- 8.2",
                "4 <- 8.2"
            ]
        },
        "Step 9": {
            "steps": [
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5) || 4 * 5 = 20 (left: 5 20) || 20 / 5 = 4 (left: 4)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5) || 4 * 5 = 20 (left: 5 20) || Input: 3 9 27",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5) || 4 * 5 = 20 (left: 5 20) || 3 + 9 = 12 (left: 12 27)"
            ]
        },
        "Input": "1 1 5 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "32": {
        "puzzle": "1 1 11 13",
        "Step 0": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 13)",
                "1 * 1 = 1 (left: 1 11 13)",
                "1 - 1 = 0 (left: 0 11 13)",
                "1 - 1 = 0 (left: 0 11 13)",
                "11 + 1 = 12 (left: 1 12 13)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                21.0,
                21.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.2",
                "2 <- 0.3",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24)",
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2)",
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2)",
                "11 + 1 = 12 (left: 1 12 13)",
                "1 - 1 = 0 (left: 0 11 13)"
            ],
            "Evaluation": [
                60.0,
                20.002,
                20.002,
                0.003,
                21.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.0",
                "2 <- 1.0",
                "3 <- 0.2",
                "4 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 5 * 3 = 15 (left: 15)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 5 * 3 = 15 (left: 15)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13)",
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.002,
                60.0,
                20.002
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 2.0",
                "2 <- INIT",
                "3 <- 1.0",
                "4 <- 2.3"
            ]
        },
        "Step 3": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 0 * 2 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 5 * 3 = 15 (left: 15)",
                "1 - 1 = 0 (left: 0 11 13)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || Input: 5 3",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)"
            ],
            "Evaluation": [
                20.002,
                0.002,
                21.0,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.3",
                "2 <- 2.0",
                "3 <- 2.3",
                "4 <- 1.0"
            ]
        },
        "Step 4": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 - 0 = 24 (left: 24)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 5 * 3 = 15 (left: 15)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 5 + 3 = 8 (left: 8)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.0",
                "2 <- 1.1",
                "3 <- 4.0",
                "4 <- 0.2"
            ]
        },
        "Step 5": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 5 * 3 = 15 (left: 15)",
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 2 - 0 = 2 (left: 2)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: (1 - 1) + (11 + 13) = 24",
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2)"
            ]
        },
        "Input": "1 1 11 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "33": {
        "puzzle": "1 6 6 12",
        "Step 0": {
            "steps": [
                "12 - 6 = 6 (left: 1 6 6)",
                "6 / 1 = 6 (left: 6 6 12)",
                "6 * 1 = 6 (left: 6 6 12)",
                "6 * 1 = 6 (left: 6 6 12)",
                "12 - 6 = 6 (left: 1 6 6)"
            ],
            "Evaluation": [
                41.0,
                60.0,
                60.0,
                60.0,
                41.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.4",
                "2 <- 0.0",
                "3 <- INIT",
                "4 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "6 / 1 = 6 (left: 6 6 12)",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "12 - 6 = 6 (left: 1 6 6)",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18)"
            ],
            "Evaluation": [
                60.0,
                3.0,
                3.0,
                41.0,
                40.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.0",
                "2 <- INIT",
                "3 <- 0.4",
                "4 <- 0.4"
            ]
        },
        "Step 2": {
            "steps": [
                "6 / 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12)",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 * 1 = 6 (left: 6 6 12)",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)"
            ],
            "Evaluation": [
                40.0,
                3.0,
                60.0,
                3.0,
                3.0
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.0",
                "2 <- 2.2",
                "3 <- 2.2",
                "4 <- 0.3"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6) || 6 * 6 = 36 (left: 36)",
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18)",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18)",
                "6 * 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18)"
            ],
            "Evaluation": [
                40.0,
                40.001,
                40.001,
                0.002,
                40.001
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.0",
                "2 <- 1.0",
                "3 <- 2.0",
                "4 <- 1.0"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 6 = 6 (left: 1 6 6) || 1 + 6 = 7 (left: 6 6 7)",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18)",
                "6 / 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12) || 36 * 12 = 432 (left: 432)",
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18)"
            ],
            "Evaluation": [
                1.002,
                3.0,
                40.001,
                0.003,
                40.001
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 3.1",
                "2 <- 1.3",
                "3 <- 4.2",
                "4 <- 1.0"
            ]
        },
        "Step 5": {
            "steps": [
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 6 + 12 = 18 (left: 18)",
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || Input: 9 3 9 ",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 18 - 12 = 6 (left: 6)",
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                3.0,
                0.003,
                40.001
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 3.2",
                "2 <- 0.3",
                "3 <- 2.2",
                "4 <- 2.2"
            ]
        },
        "Step 6": {
            "steps": [
                "6 / 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12) || 36 - 12 = 24 (left: 24)",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || Input: 9 3 9 ",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18)",
                "6 * 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                40.001,
                0.002,
                40.001
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 0.2",
                "2 <- 6.2",
                "3 <- 2.2",
                "4 <- 6.4"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6) || 6 * 6 = 36 (left: 36)",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18)",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || Input: 9 3 9 ",
                "6 * 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 6 * 3 = 18 (left: 18)"
            ],
            "Evaluation": [
                40.0,
                40.001,
                0.003,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 0.3",
                "2 <- 6.2",
                "3 <- 6.0",
                "4 <- 7.0"
            ]
        },
        "Step 8": {
            "steps": [
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 6 + 12 = 18 (left: 18)",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18)",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || Input: 9 3 9 ",
                "6 / 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12) || 36 - 12 = 24 (left: 24) || Answer: ((6 / 1) * 6) - 12 = 24",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18"
            ]
        },
        "Input": "1 6 6 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "34": {
        "puzzle": "4 5 12 12",
        "Step 0": {
            "steps": [
                "4 * 5 = 20 (left: 20 12 12)",
                "5 + 12 = 17 (left: 4 17 12)",
                "12 / 4 = 3 (left: 3 5 12)",
                "12 / 4 = 3 (left: 3 5 12)",
                "4 * 5 = 20 (left: 20 12 12)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                2.001,
                2.001,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "5 + 12 = 17 (left: 4 17 12)",
                "12 / 4 = 3 (left: 3 5 12)",
                "12 / 4 = 3 (left: 3 5 12)",
                "4 * 5 = 20 (left: 20 12 12)",
                "12 / 4 = 3 (left: 3 5 12)"
            ],
            "Evaluation": [
                1.002,
                2.001,
                2.001,
                1.002,
                2.001
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "12 / 4 = 3 (left: 3 5 12) || 3 + 5 = 8 (left: 8 12)",
                "12 / 4 = 3 (left: 3 5 12)",
                "12 / 4 = 3 (left: 3 5 12)",
                "4 * 5 = 20 (left: 20 12 12)",
                "12 / 4 = 3 (left: 3 5 12)"
            ],
            "Evaluation": [
                0.002,
                2.001,
                2.001,
                1.002,
                2.001
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 1.1",
                "2 <- INIT",
                "3 <- 1.2",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "12 / 4 = 3 (left: 3 5 12) || 3 + 5 = 8 (left: 8 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "12 / 4 = 3 (left: 3 5 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "12 / 4 = 3 (left: 3 5 12)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                2.001,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- INIT",
                "2 <- 2.3",
                "3 <- 3.4",
                "4 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "12 / 4 = 3 (left: 3 5 12) || 3 + 5 = 8 (left: 8 12)",
                "12 / 4 = 3 (left: 3 5 12)",
                "4 * 5 = 20 (left: 20 12 12) || 20 + 12 = 32 (left: 32 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "12 / 4 = 3 (left: 3 5 12)"
            ],
            "Evaluation": [
                0.002,
                2.001,
                0.002,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 3.2",
                "2 <- 4.4",
                "3 <- 1.1",
                "4 <- 0.2"
            ]
        },
        "Step 5": {
            "steps": [
                "5 + 12 = 17 (left: 4 17 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 0.3",
                "2 <- 3.2",
                "3 <- 4.4",
                "4 <- 5.0"
            ]
        },
        "Step 6": {
            "steps": [
                "12 / 4 = 3 (left: 3 5 12) || 3 + 5 = 8 (left: 8 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "5 + 12 = 17 (left: 4 17 12) || 17 / 4 = 4.25 (left: 4.25 12)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 0.3",
                "2 <- 4.1",
                "3 <- 1.4",
                "4 <- 1.4"
            ]
        },
        "Step 7": {
            "steps": [
                "4 * 5 = 20 (left: 20 12 12) || 20 / 12 = 1.6666666666666667 (left: 1.6666666666666667 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)"
            ],
            "Evaluation": [
                2.0,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 3.4",
                "2 <- 1.4",
                "3 <- 2.1",
                "4 <- 2.2"
            ]
        },
        "Step 8": {
            "steps": [
                "5 + 12 = 17 (left: 4 17 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 7.0",
                "2 <- 2.2",
                "3 <- 1.1",
                "4 <- 5.0"
            ]
        },
        "Step 9": {
            "steps": [
                "12 / 4 = 3 (left: 3 5 12) || 3 + 5 = 8 (left: 8 12)",
                "4 * 5 = 20 (left: 20 12 12) || 20 / 12 = 1.6666666666666667 (left: 1.6666666666666667 12) || 12 - 1.6666666666666667 = 10.3333333333333333 (",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "5 + 12 = 17 (left: 4 17 12) || 17 / 4 = 4.25 (left: 4.25 12)"
            ]
        },
        "Input": "4 5 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "35": {
        "puzzle": "4 6 13 13",
        "Step 0": {
            "steps": [
                "13 - 4 = 9 (left: 6 9 13)",
                "6 + 13 = 19 (left: 4 19 13)",
                "13 - 6 = 7 (left: 4 7 13)",
                "13 - 6 = 7 (left: 4 7 13)",
                "13 - 4 = 9 (left: 6 9 13)"
            ],
            "Evaluation": [
                21.001,
                41.0,
                20.002,
                20.002,
                21.001
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.4",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "13 - 4 = 9 (left: 6 9 13) || 9 - 6 = 3 (left: 3 13)",
                "13 - 4 = 9 (left: 6 9 13) || 6 * 9 = 54 (left: 13 54)",
                "13 - 6 = 7 (left: 4 7 13)",
                "13 - 4 = 9 (left: 6 9 13)",
                "6 + 13 = 19 (left: 4 19 13) || 19 / 4 = 4.75 (left: 4.75 13)"
            ],
            "Evaluation": [
                0.003,
                2.001,
                20.002,
                21.001,
                1.002
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.4",
                "2 <- 0.2",
                "3 <- 1.2",
                "4 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "13 - 4 = 9 (left: 6 9 13) || 9 - 6 = 3 (left: 3 13)",
                "13 - 4 = 9 (left: 6 9 13) || 6 * 9 = 54 (left: 13 54)",
                "13 - 6 = 7 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9)",
                "6 + 13 = 19 (left: 4 19 13) || 19 / 4 = 4.75 (left: 4.75 13)"
            ],
            "Evaluation": [
                0.003,
                2.001,
                60.0,
                40.0,
                1.002
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 1.2",
                "2 <- 0.2",
                "3 <- 0.1",
                "4 <- 2.2"
            ]
        },
        "Step 3": {
            "steps": [
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 9 / 4 = 2.25 (left: 9)",
                "13 - 6 = 7 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13)",
                "13 - 6 = 7 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13)",
                "6 + 13 = 19 (left: 4 19 13) || 4 * 19 = 76 (left: 13 76)",
                "13 - 6 = 7 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)"
            ],
            "Evaluation": [
                0.001,
                60.0,
                60.0,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- INIT",
                "2 <- 2.2",
                "3 <- 0.4",
                "4 <- 0.2"
            ]
        },
        "Step 4": {
            "steps": [
                "13 - 4 = 9 (left: 6 9 13) || 9 - 6 = 3 (left: 3 13)",
                "13 - 6 = 7 (left: 4 7 13)",
                "13 - 6 = 7 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "13 - 4 = 9 (left: 6 9 13) || 13 - 6 = 7 (left: 7 13)",
                "13 - 6 = 7 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.002,
                0.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 1.2",
                "2 <- 4.4",
                "3 <- 0.3",
                "4 <- 2.3"
            ]
        },
        "Step 5": {
            "steps": [
                "13 - 6 = 7 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "13 - 6 = 7 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13)",
                "13 - 6 = 7 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 5 + 7 = 12 (left: 12)"
            ],
            "Evaluation": [
                0.0,
                60.0,
                0.002,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 5.3",
                "2 <- 3.2",
                "3 <- 3.1",
                "4 <- 0.1"
            ]
        },
        "Step 6": {
            "steps": [
                "13 - 6 = 7 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 5 * 7 = 35 (left: 12)",
                "13 - 6 = 7 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "13 - 6 = 7 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "6 + 13 = 19 (left: 4 19 13) || 19 / 4 = 4.75 (left: 4.75 13)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.002,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 6.4",
                "2 <- 4.1",
                "3 <- 5.1",
                "4 <- 0.3"
            ]
        },
        "Step 7": {
            "steps": [
                "6 + 13 = 19 (left: 4 19 13) || 19 - 4 = 15 (left: 15 13)",
                "6 + 13 = 19 (left: 4 19 13) || 19 / 4 = 4.75 (left: 4.75 13) || 4.75 / 13 = 0.36538461538461536 (left: 0.36538461538461536)",
                "13 - 6 = 7 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13)",
                "13 - 6 = 7 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "13 - 6 = 7 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 5.1",
                "2 <- 2.2",
                "3 <- 5.1",
                "4 <- 7.2"
            ]
        },
        "Step 8": {
            "steps": [
                "13 - 6 = 7 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "13 - 6 = 7 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "13 - 6 = 7 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "13 - 6 = 7 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "13 - 6 = 7 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 3.2",
                "2 <- 2.2",
                "3 <- 4.4",
                "4 <- 3.1"
            ]
        },
        "Step 9": {
            "steps": [
                "13 - 6 = 7 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "13 - 6 = 7 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "13 - 6 = 7 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "13 - 6 = 7 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "13 - 6 = 7 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)"
            ]
        },
        "Input": "4 6 13 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "36": {
        "puzzle": "12 12 12 12",
        "Step 0": {
            "steps": [
                "Input: 0 0 0 0",
                "12 - 12 = 0 (left: 0 12 12)",
                "",
                "",
                "Input: 0 0 0 0"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.1",
                "2 <- 0.1",
                "3 <- 0.1",
                "4 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 0 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)"
            ],
            "Evaluation": [
                20.0,
                20.002,
                20.002,
                20.002,
                20.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "",
                "",
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 0 12) || 12 - 0 = 12 (left: 12)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 0.1",
                "2 <- 2.3",
                "3 <- 1.2",
                "4 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 3.1",
                "2 <- 1.1",
                "3 <- 1.0",
                "4 <- 0.1"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 0.1",
                "2 <- 4.4",
                "3 <- 0.1",
                "4 <- 3.1"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 0 12) || 0 + 12 = 12 (left: 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.003,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 0.1",
                "2 <- 2.3",
                "3 <- 1.2",
                "4 <- 1.0"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 0 12) || 12 - 0 = 12 (left: 12)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.1",
                "2 <- 0.1",
                "3 <- 4.4",
                "4 <- 1.3"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                20.002,
                20.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.3",
                "2 <- 6.1",
                "3 <- 3.1",
                "4 <- 7.1"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 4.4",
                "2 <- 3.1",
                "3 <- 1.0",
                "4 <- 4.4"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24"
            ]
        },
        "Input": "12 12 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "37": {
        "puzzle": "2 11 11 12",
        "Step 0": {
            "steps": [
                "12 - 11 = 1 (left: 2 11 1)",
                "11 / 2 = 5.5 (left: 5.5 11 12)",
                "11 - 2 = 9 (left: 9 11 12)",
                "11 - 2 = 9 (left: 9 11 12)",
                "12 - 11 = 1 (left: 2 11 1)"
            ],
            "Evaluation": [
                1.0,
                3.0,
                1.002,
                1.002,
                1.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "11 / 2 = 5.5 (left: 5.5 11 12)",
                "11 - 2 = 9 (left: 9 11 12)",
                "11 - 2 = 9 (left: 9 11 12)",
                "12 - 11 = 1 (left: 2 11 1)",
                "11 - 2 = 9 (left: 9 11 12)"
            ],
            "Evaluation": [
                3.0,
                1.002,
                1.002,
                1.0,
                1.002
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.2",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 11 = 1 (left: 2 11 1) || 11 - 2 = 9 (left: 1 9)",
                "11 - 2 = 9 (left: 9 11 12)",
                "11 - 2 = 9 (left: 9 11 12)",
                "11 - 2 = 9 (left: 9 11 12) || 9 * 11 = 99 (left: 12 99)",
                "11 - 2 = 9 (left: 9 11 12)"
            ],
            "Evaluation": [
                60.0,
                1.002,
                1.002,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 2.0",
                "3 <- 2.0",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 11 = 1 (left: 2 11 1) || 11 - 2 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "12 - 11 = 1 (left: 2 11 1) || 11 - 2 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "12 - 11 = 1 (left: 2 11 1) || 11 - 2 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "12 - 11 = 1 (left: 2 11 1) || 11 - 2 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "11 - 2 = 9 (left: 9 11 12)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                0.001,
                1.002
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 2.0",
                "3 <- 2.0",
                "4 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 11 = 1 (left: 2 11 1) || 11 - 2 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "12 - 11 = 1 (left: 2 11 1) || 11 - 2 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "12 - 11 = 1 (left: 2 11 1) || 11 - 2 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "12 - 11 = 1 (left: 2 11 1) || 11 - 2 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "11 - 2 = 9 (left: 9 11 12)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                0.001,
                1.002
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- INIT",
                "3 <- 2.0",
                "4 <- 2.2"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 11 = 1 (left: 2 11 1) || 11 - 2 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "12 - 11 = 1 (left: 2 11 1) || 11 - 2 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "11 - 2 = 9 (left: 9 11 12)",
                "12 - 11 = 1 (left: 2 11 1) || 11 - 2 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "11 - 2 = 9 (left: 9 11 12) || 11 / 9 = 1.2222222222222223 (left: 1.2222222222222223 12)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                1.002,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 0.1",
                "2 <- 2.0",
                "3 <- 2.0",
                "4 <- 2.0"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 11 = 1 (left: 2 11 1) || 11 - 2 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 12 - 5.5 = 6.5 (left: 6.5 11)",
                "12 - 11 = 1 (left: 2 11 1) || 11 - 2 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "12 - 11 = 1 (left: 2 11 1) || 11 - 2 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "12 - 11 = 1 (left: 2 11 1) || 11 - 2 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.002,
                1.002,
                0.001,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 2.0",
                "3 <- 2.0",
                "4 <- 0.1"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 11 = 1 (left: 2 11 1) || 11 - 2 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "12 - 11 = 1 (left: 2 11 1) || 11 - 2 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "12 - 11 = 1 (left: 2 11 1) || 11 - 2 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "12 - 11 = 1 (left: 2 11 1) || 11 - 2 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 12 - 5.5 = 6.5 (left: 6.5 11)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                0.001,
                1.002
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- INIT",
                "2 <- 2.0",
                "3 <- 7.4",
                "4 <- 2.0"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 11 = 1 (left: 2 11 1) || 11 - 2 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "11 - 2 = 9 (left: 9 11 12)",
                "12 - 11 = 1 (left: 2 11 1) || 11 - 2 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 12 - 5.5 = 6.5 (left: 6.5 11) || 11 - 6.5 = 4.5 (left: 4.5)",
                "12 - 11 = 1 (left: 2 11 1) || 11 - 2 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.002,
                1.002,
                0.001,
                20.001,
                0.001
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 8.3",
                "2 <- 6.1",
                "3 <- 8.3",
                "4 <- 8.3"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 11 = 1 (left: 2 11 1) || 11 - 2 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 12 - 5.5 = 6.5 (left: 6.5 11) || 11 - 6.5 = 4.5 (left: 4.5) || There are no possible next steps with the input of 4.5 as it is already a single number.",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 12 - 5.5 = 6.5 (left: 6.5 11) || 11 / 6.5 = 1.69230769231 (left: 1.69230769231)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 12 - 5.5 = 6.5 (left: 6.5 11) || 11 - 6.5 = 4.5 (left: 4.5) || There are no possible next steps with the input of 4.5 as it is already a single number.",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 12 - 5.5 = 6.5 (left: 6.5 11) || 11 - 6.5 = 4.5 (left: 4.5) || There are no possible next steps with the input of 4.5 as it is already a single number."
            ]
        },
        "Input": "2 11 11 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "38": {
        "puzzle": "4 4 4 6",
        "Step 0": {
            "steps": [
                "6 - 4 = 2 (left: 4 4 2)",
                "4 / 4 = 1 (left: 4 4 6)",
                "4 * 4 = 16 (left: 4 6 16)",
                "4 * 4 = 16 (left: 4 6 16)",
                "6 - 4 = 2 (left: 4 4 2)"
            ],
            "Evaluation": [
                2.001,
                3.0,
                60.0,
                60.0,
                2.001
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.2",
                "2 <- 0.3",
                "3 <- 0.3",
                "4 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)",
                "4 * 4 = 16 (left: 4 6 16) || 16 - 4 = 12 (left: 4 12)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.3",
                "2 <- 0.3",
                "3 <- 0.2",
                "4 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)",
                "4 * 4 = 16 (left: 4 6 16) || 16 - 4 = 12 (left: 4 12)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 - 1.5 = 14.5 (left: 14.5)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.2",
                "2 <- 0.3",
                "3 <- 1.0",
                "4 <- 0.3"
            ]
        },
        "Step 3": {
            "steps": [
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 1.5 * 16 = 24 (left: 16 24)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.2",
                "2 <- 1.0",
                "3 <- 1.0",
                "4 <- 1.0"
            ]
        },
        "Step 4": {
            "steps": [
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 - 1.5 = 14.5 (left: 14.5)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 1.5 * 16 = 24 (left: 16 24)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 - 1.5 = 14.5 (left: 14.5)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.001,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 1.0",
                "2 <- 0.2",
                "3 <- 0.2",
                "4 <- 1.0"
            ]
        },
        "Step 5": {
            "steps": [
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 / 1.5 = 10.67 (left: 10.67)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 - 1.5 = 14.5 (left: 14.5)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)",
                "4 * 4 = 16 (left: 4 6 16) || 16 - 4 = 12 (left: 4 12)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 - 1.5 = 14.5 (left: 14.5)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 0.3",
                "2 <- 3.0",
                "3 <- 0.1",
                "4 <- 2.0"
            ]
        },
        "Step 6": {
            "steps": [
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 / 1.5 = 10.67 (left: 10.67)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 - 1.5 = 14.5 (left: 14.5)",
                "4 / 4 = 1 (left: 4 4 6) || 4 / 4 = 1 (left: 1 6)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 - 1.5 = 14.5 (left: 14.5)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.001,
                40.0,
                0.001
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 3.0",
                "2 <- 4.0",
                "3 <- 4.0",
                "4 <- 1.0"
            ]
        },
        "Step 7": {
            "steps": [
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 / 1.5 = 10.67 (left: 10.67)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 - 1.5 = 14.5 (left: 14.5)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 - 1.5 = 14.5 (left: 14.5)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 1.5 * 16 = 24 (left: 16 24)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 - 1.5 = 14.5 (left: 14.5)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 0.2",
                "2 <- 3.0",
                "3 <- 0.2",
                "4 <- 2.0"
            ]
        },
        "Step 8": {
            "steps": [
                "4 / 4 = 1 (left: 4 4 6) || 4 / 4 = 1 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 - 1.5 = 14.5 (left: 14.5)",
                "4 * 4 = 16 (left: 4 6 16) || 16 - 4 = 12 (left: 4 12)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 - 1.5 = 14.5 (left: 14.5)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.001,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 6.3",
                "2 <- 4.0",
                "3 <- 2.0",
                "4 <- 3.0"
            ]
        },
        "Step 9": {
            "steps": [
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 / 1.5 = 10.67 (left: 10.67)",
                "4 / 4 = 1 (left: 4 4 6) || 4 / 4 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 - 1.5 = 14.5 (left: 14.5)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 1.5 * 16 = 24 (left: 16 24)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 - 1.5 = 14.5 (left: 14.5)"
            ]
        },
        "Input": "4 4 4 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "39": {
        "puzzle": "1 1 1 11",
        "Step 0": {
            "steps": [
                "11 - 1 = 10 (left: 1 1 10)",
                "1 / 1 = 1 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1 11)",
                "11 - 1 = 10 (left: 1 1 10)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                1.002,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 / 1 = 1 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1 11)",
                "11 - 1 = 10 (left: 1 1 10)",
                "1 * 1 = 1 (left: 1 1 11)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                1.002,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "1 / 1 = 1 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1 11)",
                "11 - 1 = 10 (left: 1 1 10)",
                "1 * 1 = 1 (left: 1 1 11)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                1.002,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 2.0",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "1 / 1 = 1 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1 11)",
                "1 / 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10)",
                "11 - 1 = 10 (left: 1 1 10)",
                "1 * 1 = 1 (left: 1 1 11)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                60.0,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 2.0",
                "2 <- 3.2",
                "3 <- 3.2",
                "4 <- 3.2"
            ]
        },
        "Step 4": {
            "steps": [
                "1 / 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 / 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10)",
                "1 / 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 / 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 / 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.001,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 2.0",
                "2 <- 4.1",
                "3 <- 4.1",
                "4 <- 4.1"
            ]
        },
        "Step 5": {
            "steps": [
                "1 / 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 / 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10)",
                "1 / 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 / 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 / 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.001,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 5.1",
                "2 <- 4.1",
                "3 <- 3.2",
                "4 <- 4.1"
            ]
        },
        "Step 6": {
            "steps": [
                "1 / 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 / 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 / 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 / 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 / 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 5.1",
                "2 <- 3.2",
                "3 <- 5.1",
                "4 <- 4.1"
            ]
        },
        "Step 7": {
            "steps": [
                "1 / 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 / 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 / 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 / 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 / 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 4.1",
                "2 <- 5.1",
                "3 <- 3.2",
                "4 <- INIT"
            ]
        },
        "Step 8": {
            "steps": [
                "1 / 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 / 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 / 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 / 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 11)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 4.1",
                "2 <- 5.1",
                "3 <- 3.2",
                "4 <- 4.1"
            ]
        },
        "Step 9": {
            "steps": [
                "1 / 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 / 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 / 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 / 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 / 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ]
        },
        "Input": "1 1 1 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "40": {
        "puzzle": "1 1 11 12",
        "Step 0": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 12)",
                "1 * 1 = 1 (left: 1 11 12)",
                "1 - 1 = 0 (left: 0 11 12)",
                "1 - 1 = 0 (left: 0 11 12)",
                "11 + 1 = 12 (left: 1 12 12)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                3.0,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- 0.1",
                "4 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "1 - 1 = 0 (left: 0 11 12)",
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "1 * 1 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "1 - 1 = 0 (left: 0 11 12) || 11 - 12 = -1 (left: 0 -1)"
            ],
            "Evaluation": [
                0.002,
                3.0,
                20.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 12)",
                "1 - 1 = 0 (left: 0 11 12)",
                "1 - 1 = 0 (left: 0 11 12)",
                "1 * 1 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "1 - 1 = 0 (left: 0 11 12)"
            ],
            "Evaluation": [
                20.002,
                3.0,
                3.0,
                0.002,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.4",
                "2 <- 2.0",
                "3 <- 2.0",
                "4 <- 0.1"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 12)",
                "1 - 1 = 0 (left: 0 11 12) || 11 - 12 = -1 (left: 0 -1)",
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "1 * 1 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                20.002,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- INIT",
                "2 <- 3.0",
                "3 <- 2.4",
                "4 <- 3.4"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "1 - 1 = 0 (left: 0 11 12)",
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1)",
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.002,
                3.0,
                20.002,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 4.3",
                "2 <- 4.3",
                "3 <- 4.3",
                "4 <- 4.3"
            ]
        },
        "Step 5": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 - 1 = -1 (left: -1)",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)"
            ],
            "Evaluation": [
                0.0,
                20.002,
                20.002,
                20.002,
                20.002
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 5.1",
                "2 <- 5.4",
                "3 <- 4.3",
                "4 <- 2.0"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                20.002,
                20.002
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 5.4",
                "2 <- 3.0",
                "3 <- 4.3",
                "4 <- 5.3"
            ]
        },
        "Step 7": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 - 1 = -1 (left: -1)",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                0.0,
                0.003,
                20.002,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 6.4",
                "2 <- 5.3",
                "3 <- 4.2",
                "4 <- 4.2"
            ]
        },
        "Step 8": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 1.2",
                "2 <- 2.4",
                "3 <- 4.3",
                "4 <- 6.3"
            ]
        },
        "Step 9": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 - 1 = 0 (left: 0 11 12) || 11 - 12 = -1 (left: 0 -1)",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ]
        },
        "Input": "1 1 11 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "41": {
        "puzzle": "2 7 7 12",
        "Step 0": {
            "steps": [
                "12 + 2 = 14 (left: 7 7 14)",
                "7 / 2 = 3.5 (left: 3.5 7 12)",
                "2 * 7 = 14 (left: 7 12 14)",
                "2 * 7 = 14 (left: 7 12 14)",
                "12 + 2 = 14 (left: 7 7 14)"
            ],
            "Evaluation": [
                0.003,
                40.001,
                3.0,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 7 = 14 (left: 7 12 14) || 12 + 14 = 26 (left: 7 26)",
                "2 * 7 = 14 (left: 7 12 14)",
                "2 * 7 = 14 (left: 7 12 14)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 - 3.5 = 8.5 (left: 8.5 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7)"
            ],
            "Evaluation": [
                0.002,
                3.0,
                3.0,
                2.001,
                60.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 0.1",
                "2 <- INIT",
                "3 <- 1.4",
                "4 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 / 7 = 0.49 (left: 0.49 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7)",
                "2 * 7 = 14 (left: 7 12 14)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 + 3.43 = 10.43 (left: 3.43 10.43)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                3.0,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.3",
                "2 <- 1.4",
                "3 <- INIT",
                "4 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 / 7 = 0.49 (left: 0.49 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 - 3.5 = 8.5 (left: 8.5 7) || 8.5 / 7 = 1.2142857142857142 (left: 1.2142857142857142)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)",
                "12 + 2 = 14 (left: 7 7 14)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.4",
                "2 <- 1.2",
                "3 <- 0.3",
                "4 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 / 7 = 0.49 (left: 0.49 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)",
                "2 * 7 = 14 (left: 7 12 14) || 12 / 7 = 1.71 (left: 1.71 14)",
                "2 * 7 = 14 (left: 7 12 14) || 7 * 12 = 84 (left: 84 14)",
                "2 * 7 = 14 (left: 7 12 14)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                2.0,
                0.001,
                3.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.4",
                "2 <- 0.2",
                "3 <- 1.4",
                "4 <- 1.1"
            ]
        },
        "Step 5": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 / 7 = 0.49 (left: 0.49 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)",
                "2 * 7 = 14 (left: 7 12 14) || 12 / 7 = 1.71 (left: 1.71 14)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 + 3.43 = 10.43 (left: 3.43 10.43)",
                "2 * 7 = 14 (left: 7 12 14) || 12 / 7 = 1.71 (left: 1.71 14)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                2.0,
                1.002,
                2.0
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 5.3",
                "3 <- 2.2",
                "4 <- 2.1"
            ]
        },
        "Step 6": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 / 7 = 0.49 (left: 0.49 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 + 3.43 = 10.43 (left: 3.43 10.43) || 10.43 / 3.43 = 3.044 (left: 3.044)",
                "2 * 7 = 14 (left: 7 12 14) || 7 * 12 = 84 (left: 84 14)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 2.1",
                "2 <- 2.2",
                "3 <- 0.1",
                "4 <- INIT"
            ]
        },
        "Step 7": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12) || 7 * 3.5 = 24.5 (left: 12 24.5)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)",
                "2 * 7 = 14 (left: 7 12 14) || 12 / 7 = 1.71 (left: 1.71 14)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 - 3.5 = 8.5 (left: 8.5 7)",
                "2 * 7 = 14 (left: 7 12 14)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                2.0,
                2.001,
                3.0
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 7.2",
                "2 <- 2.1",
                "3 <- 1.4",
                "4 <- 2.1"
            ]
        },
        "Step 8": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 / 7 = 0.49 (left: 0.49 7)",
                "2 * 7 = 14 (left: 7 12 14) || 12 / 7 = 1.71 (left: 1.71 14) || 14 / 1.71 = 8.1871 (left: 8.1871)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 + 3.43 = 10.43 (left: 3.43 10.43)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 1.4",
                "2 <- 1.4",
                "3 <- 1.4",
                "4 <- 8.3"
            ]
        },
        "Step 9": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 / 7 = 0.49 (left: 0.49 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 + 3.43 = 10.43 (left: 3.43 10.43)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 + 3.43 = 10.43 (left: 3.43 10.43) || 10.43 / 3.43 = 3.044 (left: 3.044)"
            ]
        },
        "Input": "2 7 7 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "42": {
        "puzzle": "1 5 7 12",
        "Step 0": {
            "steps": [
                "7 - 1 = 6 (left: 6 5 12)",
                "5 + 7 = 12 (left: 1 12 12)",
                "12 - 7 = 5 (left: 1 5 12)",
                "12 - 7 = 5 (left: 1 5 12)",
                "7 - 1 = 6 (left: 6 5 12)"
            ],
            "Evaluation": [
                3.0,
                0.003,
                22.0,
                22.0,
                3.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- INIT",
                "2 <- 0.3",
                "3 <- 0.2",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60)",
                "12 - 7 = 5 (left: 1 5 12)",
                "12 - 7 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7)",
                "12 - 7 = 5 (left: 1 5 12)"
            ],
            "Evaluation": [
                41.0,
                22.0,
                1.001,
                20.0,
                22.0
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.0",
                "2 <- 1.0",
                "3 <- 1.0",
                "4 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 1 + 7 = 8 (left: 8)",
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)",
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)",
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 1 * 60 = 60 (left: 60)",
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.0",
                "2 <- 1.0",
                "3 <- 1.1",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 / 1 = 60 (left: 60)",
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)",
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7)",
                "12 - 7 = 5 (left: 1 5 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                20.0,
                22.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 3.3",
                "2 <- 1.1",
                "3 <- 1.0",
                "4 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "12 - 7 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 1 * 60 = 60 (left: 60)",
                "12 - 7 = 5 (left: 1 5 12)"
            ],
            "Evaluation": [
                41.0,
                0.001,
                1.001,
                0.003,
                22.0
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.2",
                "2 <- 3.4",
                "3 <- 4.0",
                "4 <- 3.3"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 1 + 7 = 8 (left: 8)",
                "12 - 7 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "12 - 7 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 1 * 60 = 60 (left: 60)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)"
            ],
            "Evaluation": [
                0.002,
                1.001,
                1.001,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 4.0",
                "2 <- 4.0",
                "3 <- 4.4",
                "4 <- 1.0"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60)",
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)",
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7)",
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)"
            ],
            "Evaluation": [
                41.0,
                0.003,
                0.003,
                20.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.4",
                "2 <- 4.0",
                "3 <- 3.3",
                "4 <- 4.4"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 1 + 7 = 8 (left: 8)",
                "12 - 7 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "12 - 7 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)"
            ],
            "Evaluation": [
                0.002,
                1.001,
                0.003,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 6.3",
                "2 <- 0.3",
                "3 <- 6.3",
                "4 <- 6.0"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "12 - 7 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)"
            ],
            "Evaluation": [
                41.0,
                0.001,
                1.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 8.0",
                "2 <- 6.0",
                "3 <- 8.2",
                "4 <- 3.3"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60)",
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)",
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)",
                "12 - 7 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12) || 12 / 5 = 2.4 (left: 2.4)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)"
            ]
        },
        "Input": "1 5 7 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "43": {
        "puzzle": "10 10 12 12",
        "Step 0": {
            "steps": [
                "12 + 10 = 22 (left: 10 12 22)",
                "10 / 10 = 1 (left: 1 12 12)",
                "10 * 10 = 100 (left: 12 12 100)",
                "10 * 10 = 100 (left: 12 12 100)",
                "12 + 10 = 22 (left: 10 12 22)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12)",
                "10 * 10 = 100 (left: 12 12 100)",
                "10 * 10 = 100 (left: 12 12 100)",
                "12 + 10 = 22 (left: 10 12 22)",
                "10 * 10 = 100 (left: 12 12 100)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12)",
                "10 * 10 = 100 (left: 12 12 100)",
                "10 * 10 = 100 (left: 12 12 100)",
                "12 + 10 = 22 (left: 10 12 22)",
                "10 * 10 = 100 (left: 12 12 100)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12)",
                "10 * 10 = 100 (left: 12 12 100)",
                "10 * 10 = 100 (left: 12 12 100)",
                "12 + 10 = 22 (left: 10 12 22)",
                "10 * 10 = 100 (left: 12 12 100)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "12 + 10 = 22 (left: 10 12 22) || 10 * 12 = 120 (left: 120 22)",
                "10 * 10 = 100 (left: 12 12 100)",
                "10 * 10 = 100 (left: 12 12 100)",
                "12 + 10 = 22 (left: 10 12 22)",
                "10 * 10 = 100 (left: 12 12 100)"
            ],
            "Evaluation": [
                1.0,
                0.003,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 4.3",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.0"
            ]
        },
        "Step 5": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12)",
                "12 + 10 = 22 (left: 10 12 22) || 22 - 10 = 12 (left: 12 22)",
                "10 * 10 = 100 (left: 12 12 100)",
                "12 + 10 = 22 (left: 10 12 22)",
                "12 + 10 = 22 (left: 10 12 22) || 22 - 10 = 12 (left: 12 22)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 4.3",
                "4 <- INIT"
            ]
        },
        "Step 6": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12)",
                "10 * 10 = 100 (left: 12 12 100)",
                "10 * 10 = 100 (left: 12 12 100)",
                "12 + 10 = 22 (left: 10 12 22) || 12 - 10 = 2 (left: 2 22)",
                "10 * 10 = 100 (left: 12 12 100)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.3",
                "2 <- 4.3",
                "3 <- 1.3",
                "4 <- 5.3"
            ]
        },
        "Step 7": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12)",
                "12 + 10 = 22 (left: 10 12 22) || 22 - 10 = 12 (left: 12 22)",
                "12 + 10 = 22 (left: 10 12 22) || 22 - 10 = 12 (left: 12 22)",
                "12 + 10 = 22 (left: 10 12 22) || 12 - 10 = 2 (left: 2 22)",
                "12 + 10 = 22 (left: 10 12 22) || 22 - 10 = 12 (left: 12 22)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- INIT",
                "2 <- 3.3",
                "3 <- 4.0",
                "4 <- 4.0"
            ]
        },
        "Step 8": {
            "steps": [
                "12 + 10 = 22 (left: 10 12 22) || 10 * 12 = 120 (left: 120 22)",
                "10 * 10 = 100 (left: 12 12 100)",
                "12 + 10 = 22 (left: 10 12 22) || 22 - 10 = 12 (left: 12 22)",
                "12 + 10 = 22 (left: 10 12 22) || 10 * 12 = 120 (left: 120 22) || 120 * 22 = 2640 (left: 2640)",
                "12 + 10 = 22 (left: 10 12 22) || 10 * 12 = 120 (left: 120 22) || 120 / 22 = 5.454545454545454 (left: 5.454545454545454)"
            ],
            "Evaluation": [
                1.0,
                0.003,
                0.003,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 8.0",
                "2 <- 8.0",
                "3 <- 8.0",
                "4 <- INIT"
            ]
        },
        "Step 9": {
            "steps": [
                "12 + 10 = 22 (left: 10 12 22) || 10 * 12 = 120 (left: 120 22)",
                "12 + 10 = 22 (left: 10 12 22) || 10 * 12 = 120 (left: 120 22) || 120 / 22 = 5.454545454545454 (left: 5.454545454545454)",
                "12 + 10 = 22 (left: 10 12 22) || 10 * 12 = 120 (left: 120 22) || 120 / 22 = 5.454545454545454 (left: 5.454545454545454)",
                "12 + 10 = 22 (left: 10 12 22) || 10 * 12 = 120 (left: 120 22) || 120 * 22 = 2640 (left: 2640)",
                "10 * 10 = 100 (left: 12 12 100)"
            ]
        },
        "Input": "10 10 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "44": {
        "puzzle": "1 8 8 8",
        "Step 0": {
            "steps": [
                "8 * 1 = 8 (left: 8 8 8)",
                "8 / 1 = 8 (left: 8 8 8)",
                "8 - 1 = 7 (left: 7 8 8)",
                "8 - 1 = 7 (left: 7 8 8)",
                "8 * 1 = 8 (left: 8 8 8)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                3.0,
                3.0,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.2",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56)",
                "8 - 1 = 7 (left: 7 8 8)",
                "8 * 1 = 8 (left: 8 8 8)",
                "8 - 1 = 7 (left: 7 8 8)"
            ],
            "Evaluation": [
                1.002,
                41.0,
                3.0,
                1.002,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.4",
                "3 <- 1.1",
                "4 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8)",
                "8 - 1 = 7 (left: 7 8 8)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 8 + 56 = 64 (left: 64)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 - 8 = 48 (left: 48)"
            ],
            "Evaluation": [
                1.002,
                3.0,
                41.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.2",
                "2 <- 2.2",
                "3 <- INIT",
                "4 <- 1.1"
            ]
        },
        "Step 3": {
            "steps": [
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 / 8 = 7 (left: 7)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 - 8 = 48 (left: 48)",
                "8 * 1 = 8 (left: 8 8 8)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 - 8 = 48 (left: 48)"
            ],
            "Evaluation": [
                0.001,
                41.0,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- INIT",
                "2 <- 2.2",
                "3 <- 2.2",
                "4 <- 2.2"
            ]
        },
        "Step 4": {
            "steps": [
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 / 8 = 7 (left: 7)",
                "8 - 1 = 7 (left: 7 8 8)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 - 8 = 48 (left: 48)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 8 + 56 = 64 (left: 64)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 - 8 = 48 (left: 48)"
            ],
            "Evaluation": [
                0.001,
                3.0,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 2.1",
                "2 <- 3.1",
                "3 <- 0.2",
                "4 <- 3.1"
            ]
        },
        "Step 5": {
            "steps": [
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 / 8 = 7 (left: 7)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 - 8 = 48 (left: 48)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 - 8 = 48 (left: 48)"
            ],
            "Evaluation": [
                0.001,
                41.0,
                0.003,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 2.2",
                "2 <- 5.3",
                "3 <- 3.1",
                "4 <- 5.3"
            ]
        },
        "Step 6": {
            "steps": [
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 / 8 = 7 (left: 7)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 - 8 = 48 (left: 48)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 8 + 56 = 64 (left: 64)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 3.3",
                "2 <- 5.3",
                "3 <- 3.1",
                "4 <- 5.3"
            ]
        },
        "Step 7": {
            "steps": [
                "8 - 1 = 7 (left: 7 8 8) || 8 / 7 = 1.14285714286 (left: 1.14285714286 8)",
                "8 * 1 = 8 (left: 8 8 8) || 8 - 8 = 0 (left: 0)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 8 + 56 = 64 (left: 64)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)"
            ],
            "Evaluation": [
                2.001,
                20.002,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 7.1",
                "2 <- 3.1",
                "3 <- 5.1",
                "4 <- 2.2"
            ]
        },
        "Step 8": {
            "steps": [
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 * 1 = 8 (left: 8 8 8) || 8 - 8 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 - 8 = 48 (left: 48)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 8 + 56 = 64 (left: 64)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 - 8 = 48 (left: 48)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 5.1",
                "2 <- 5.1",
                "3 <- 0.3",
                "4 <- 2.2"
            ]
        },
        "Step 9": {
            "steps": [
                "8 - 1 = 7 (left: 7 8 8) || 8 / 7 = 1.14285714286 (left: 1.14285714286 8)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 - 8 = 48 (left: 48)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 - 8 = 48 (left: 48)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 - 8 = 48 (left: 48)"
            ]
        },
        "Input": "1 8 8 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "45": {
        "puzzle": "2 2 3 8",
        "Step 0": {
            "steps": [
                "2 + 3 = 5 (left: 2 5 8)",
                "2 * 2 = 4 (left: 4 3 8)",
                "3 + 2 = 5 (left: 5 2 8)",
                "3 + 2 = 5 (left: 5 2 8)",
                "2 + 3 = 5 (left: 2 5 8)"
            ],
            "Evaluation": [
                0.003,
                2.0,
                3.0,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 2 = 4 (left: 4 3 8)",
                "3 + 2 = 5 (left: 5 2 8)",
                "3 + 2 = 5 (left: 5 2 8)",
                "2 + 3 = 5 (left: 2 5 8)",
                "2 * 2 = 4 (left: 4 3 8) || 8 / 4 = 2 (left: 2 3 8)"
            ],
            "Evaluation": [
                2.0,
                3.0,
                3.0,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 2 = 4 (left: 4 3 8)",
                "3 + 2 = 5 (left: 5 2 8)",
                "3 + 2 = 5 (left: 5 2 8)",
                "2 + 3 = 5 (left: 2 5 8)",
                "3 + 2 = 5 (left: 5 2 8)"
            ],
            "Evaluation": [
                2.0,
                3.0,
                3.0,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- INIT",
                "3 <- 0.3",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "3 + 2 = 5 (left: 5 2 8) || 5 * 2 = 10 (left: 10 8)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4)",
                "3 + 2 = 5 (left: 5 2 8)",
                "3 + 2 = 5 (left: 5 2 8) || 8 - 2 = 6 (left: 5 6)",
                "3 + 2 = 5 (left: 5 2 8)"
            ],
            "Evaluation": [
                0.003,
                3.0,
                3.0,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.2",
                "2 <- 1.2",
                "3 <- 0.1",
                "4 <- 0.3"
            ]
        },
        "Step 4": {
            "steps": [
                "2 * 2 = 4 (left: 4 3 8)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4)",
                "2 * 2 = 4 (left: 4 3 8) || 8 - 4 = 4 (left: 4 3 8)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4)"
            ],
            "Evaluation": [
                2.0,
                3.0,
                3.0,
                2.0,
                3.0
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 3.2",
                "2 <- 4.1",
                "3 <- 4.2",
                "4 <- INIT"
            ]
        },
        "Step 5": {
            "steps": [
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 5 / 4 = 1.25 (left: 1.25)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 / 5 =",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 + 5 = 9 (left: 9)",
                "3 + 2 = 5 (left: 5 2 8)"
            ],
            "Evaluation": [
                0.002,
                3.0,
                0.003,
                0.001,
                3.0
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 5.4",
                "2 <- 5.1",
                "3 <- 4.0",
                "4 <- 0.3"
            ]
        },
        "Step 6": {
            "steps": [
                "3 + 2 = 5 (left: 5 2 8) || 5 * 2 = 10 (left: 10 8)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 / 5 =",
                "2 * 2 = 4 (left: 4 3 8) || 8 - 4 = 4 (left: 4 3 8)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4)"
            ],
            "Evaluation": [
                0.003,
                3.0,
                0.003,
                2.0,
                3.0
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 4.4",
                "4 <- 3.2"
            ]
        },
        "Step 7": {
            "steps": [
                "3 + 2 = 5 (left: 5 2 8) || 5 * 2 = 10 (left: 10 8)",
                "3 + 2 = 5 (left: 5 2 8)",
                "3 + 2 = 5 (left: 5 2 8)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 + 5 = 9 (left: 9)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4)"
            ],
            "Evaluation": [
                0.003,
                3.0,
                3.0,
                0.001,
                3.0
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 6.4",
                "2 <- 6.1",
                "3 <- 2.4",
                "4 <- 7.4"
            ]
        },
        "Step 8": {
            "steps": [
                "3 + 2 = 5 (left: 5 2 8) || 5 * 2 = 10 (left: 10 8)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 / 5 =",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 / 5 =",
                "3 + 2 = 5 (left: 5 2 8) || 8 - 2 = 6 (left: 5 6)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 * 5 = 20 (left: 20)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 4.4",
                "2 <- 7.4",
                "3 <- 0.3",
                "4 <- 7.4"
            ]
        },
        "Step 9": {
            "steps": [
                "3 + 2 = 5 (left: 5 2 8) || 5 * 2 = 10 (left: 10 8)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 / 5 =",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 / 5 =",
                "3 + 2 = 5 (left: 5 2 8) || 8 - 2 = 6 (left: 5 6)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 * 5 = 20 (left: 20)"
            ]
        },
        "Input": "2 2 3 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "46": {
        "puzzle": "2 9 9 12",
        "Step 0": {
            "steps": [
                "12 - 2 = 10 (left: 9 10 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12)",
                "9 - 2 = 7 (left: 7 9 12)",
                "9 - 2 = 7 (left: 7 9 12)",
                "12 - 2 = 10 (left: 9 10 12)"
            ],
            "Evaluation": [
                3.0,
                3.0,
                2.001,
                2.001,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.0",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12)",
                "9 - 2 = 7 (left: 7 9 12)",
                "9 - 2 = 7 (left: 7 9 12)",
                "12 - 2 = 10 (left: 9 10 12) || 12 + 9 = 21 (left: 10 21)",
                "9 - 2 = 7 (left: 7 9 12)"
            ],
            "Evaluation": [
                3.0,
                2.001,
                2.001,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12)",
                "9 - 2 = 7 (left: 7 9 12)",
                "9 - 2 = 7 (left: 7 9 12)",
                "12 - 2 = 10 (left: 9 10 12)",
                "9 - 2 = 7 (left: 7 9 12)"
            ],
            "Evaluation": [
                3.0,
                2.001,
                2.001,
                3.0,
                2.001
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 1.1",
                "2 <- 2.4",
                "3 <- 2.3",
                "4 <- 2.3"
            ]
        },
        "Step 3": {
            "steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12) || 9 - 4.5 = 4.5 (left: 4.5 12)",
                "9 - 2 = 7 (left: 7 9 12) || 12 - 7 = 5 (left: 7 5)",
                "9 - 2 = 7 (left: 7 9 12) || 12 - 7 = 5 (left: 7 5)",
                "12 - 2 = 10 (left: 9 10 12) || 12 + 9 = 21 (left: 10 21)",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                1.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.1",
                "2 <- 0.0",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "9 - 2 = 7 (left: 7 9 12) || 7 * 9 = 63 (left: 63 12)",
                "9 - 2 = 7 (left: 7 9 12) || 12 - 7 = 5 (left: 7 5)",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90)",
                "12 - 2 = 10 (left: 9 10 12)",
                "9 - 2 = 7 (left: 7 9 12)"
            ],
            "Evaluation": [
                0.001,
                1.002,
                0.003,
                3.0,
                2.001
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 0.1",
                "2 <- 0.3",
                "3 <- 4.1",
                "4 <- 1.2"
            ]
        },
        "Step 5": {
            "steps": [
                "9 - 2 = 7 (left: 7 9 12) || 7 * 9 = 63 (left: 63 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12) || 4.5 * 9 = 40.5 (left: 12 40.5)",
                "9 - 2 = 7 (left: 7 9 12) || 12 - 7 = 5 (left: 7 5)",
                "9 - 2 = 7 (left: 7 9 12) || 12 - 7 = 5 (left: 7 5) || 7 * 5 = 35 (left: 35)",
                "9 - 2 = 7 (left: 7 9 12) || 12 - 7 = 5 (left: 7 5)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                1.002,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.0",
                "2 <- 1.2",
                "3 <- 1.0",
                "4 <- 4.3"
            ]
        },
        "Step 6": {
            "steps": [
                "9 - 2 = 7 (left: 7 9 12) || 7 * 9 = 63 (left: 63 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12) || 4.5 * 9 = 40.5 (left: 12 40.5)",
                "9 - 2 = 7 (left: 7 9 12) || 12 - 7 = 5 (left: 7 5)",
                "9 / 2 = 4.5 (left: 4.5 9 12) || 12 - 4.5 = 7.5 (left: 7.5 12)",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                1.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 4.4",
                "2 <- 2.2",
                "3 <- INIT",
                "4 <- 0.1"
            ]
        },
        "Step 7": {
            "steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12)",
                "9 - 2 = 7 (left: 7 9 12) || 12 - 7 = 5 (left: 7 5)",
                "9 - 2 = 7 (left: 7 9 12) || 12 - 7 = 5 (left: 7 5)",
                "12 - 2 = 10 (left: 9 10 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12) || 4.5 * 9 = 40.5 (left: 12 40.5)"
            ],
            "Evaluation": [
                3.0,
                1.002,
                1.002,
                3.0,
                0.002
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 4.3",
                "2 <- 2.3",
                "3 <- INIT",
                "4 <- 5.2"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 2 = 10 (left: 9 10 12) || 10 - 9 = 1 (left: 1 12)",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90)",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90)",
                "12 - 2 = 10 (left: 9 10 12)",
                "9 - 2 = 7 (left: 7 9 12) || 12 - 7 = 5 (left: 7 5) || 7 / 5 = 1.4 (left: 1.4)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                3.0,
                0.0
            ],
            "Resampling": [
                "0 <- 7.2",
                "1 <- 0.0",
                "2 <- 7.3",
                "3 <- 8.3",
                "4 <- 5.2"
            ]
        },
        "Step 9": {
            "steps": [
                "9 - 2 = 7 (left: 7 9 12) || 12 - 7 = 5 (left: 7 5) || 7 - 5 = 2 (left: 2)",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90)",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90)",
                "12 - 2 = 10 (left: 9 10 12) || 12 + 9 = 21 (left: 10 21)",
                "9 - 2 = 7 (left: 7 9 12) || 12 - 7 = 5 (left: 7 5) || 7 / 5 = 1.4 (left: 1.4)"
            ]
        },
        "Input": "2 9 9 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "47": {
        "puzzle": "11 11 11 12",
        "Step 0": {
            "steps": [
                "12 - 11 = 1 (left: 11 11 1)",
                "11 / 11 = 1 (left: 1 11 12)",
                "12 - 11 = 1 (left: 11 1 1)",
                "12 - 11 = 1 (left: 11 1 1)",
                "12 - 11 = 1 (left: 11 11 1)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                1.001,
                1.001,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "11 / 11 = 1 (left: 1 11 12)",
                "12 - 11 = 1 (left: 11 1 1)",
                "12 - 11 = 1 (left: 11 1 1)",
                "12 - 11 = 1 (left: 11 11 1)",
                "12 - 11 = 1 (left: 11 1 1)"
            ],
            "Evaluation": [
                20.002,
                1.001,
                1.001,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 1.0",
                "2 <- 1.0",
                "3 <- 0.3",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 11 = 1 (left: 11 1 1) || 11 / 1 = 11 (left: 11)",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 11 1 1) || 1 - 1 = 0 (left: 0)",
                "12 - 11 = 1 (left: 11 1 1)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                20.002,
                20.002,
                1.001
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.0",
                "2 <- 2.1",
                "3 <- 0.1",
                "4 <- 0.1"
            ]
        },
        "Step 3": {
            "steps": [
                "11 / 11 = 1 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.002,
                20.002,
                0.003,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 3.1",
                "2 <- 2.1",
                "3 <- 2.3",
                "4 <- 2.1"
            ]
        },
        "Step 4": {
            "steps": [
                "11 / 11 = 1 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 11 1 1) || 1 - 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 0.1",
                "2 <- 3.4",
                "3 <- 2.1",
                "4 <- 3.1"
            ]
        },
        "Step 5": {
            "steps": [
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 5.1",
                "2 <- 2.1",
                "3 <- 1.0",
                "4 <- 2.2"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 11 = 1 (left: 11 1 1) || 1 - 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 2.2",
                "2 <- 0.1",
                "3 <- 3.1",
                "4 <- 3.4"
            ]
        },
        "Step 7": {
            "steps": [
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 1.2",
                "2 <- 2.3",
                "3 <- 2.2",
                "4 <- 1.0"
            ]
        },
        "Step 8": {
            "steps": [
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 11 1 1) || Possible next steps:",
                "12 - 11 = 1 (left: 11 1 1) || 1 - 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 8.4",
                "2 <- 8.4",
                "3 <- 3.4",
                "4 <- 8.4"
            ]
        },
        "Step 9": {
            "steps": [
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ]
        },
        "Input": "11 11 11 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "48": {
        "puzzle": "3 8 13 13",
        "Step 0": {
            "steps": [
                "13 + 3 = 16 (left: 8 13 16)",
                "8 / 3 = 2.6666666666666665 (left: 2.6666666666666665 8 13)",
                "3 * 8 = 24 (left: 24 13 13)",
                "3 * 8 = 24 (left: 24 13 13)",
                "13 + 3 = 16 (left: 8 13 16)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                20.002,
                20.002,
                1.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.3",
                "2 <- 0.3",
                "3 <- 0.3",
                "4 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "3 * 8 = 24 (left: 24 13 13) || 13 * 13 = 169 (left: 24 169)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13)"
            ],
            "Evaluation": [
                0.003,
                22.0,
                22.0,
                60.0,
                22.0
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.3",
                "2 <- 1.1",
                "3 <- 1.1",
                "4 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 13 / 1.846 = 7.048 (left: 7.048)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 1.846 * 13 = 23.978 (left: 23.978)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.003,
                0.003,
                22.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 0.3",
                "2 <- 1.3",
                "3 <- INIT",
                "4 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 13 - 1.846 = 11.154 (left: 11.154)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "13 + 3 = 16 (left: 8 13 16)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)"
            ],
            "Evaluation": [
                0.002,
                22.0,
                0.002,
                1.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.4",
                "2 <- 1.4",
                "3 <- 0.3",
                "4 <- 2.4"
            ]
        },
        "Step 4": {
            "steps": [
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 13 / 1.846 = 7.048 (left: 7.048)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 13 / 1.846 = 7.048 (left: 7.048)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 13 / 1.846 = 7.048 (left: 7.048)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.1",
                "2 <- 4.3",
                "3 <- 2.4",
                "4 <- 4.3"
            ]
        },
        "Step 5": {
            "steps": [
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 13 - 1.846 = 11.154 (left: 11.154)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 13 / 1.846 = 7.048 (left: 7.048)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 1.846 * 13 = 23.978 (left: 23.978)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 1.1",
                "2 <- 1.3",
                "3 <- 4.3",
                "4 <- 1.4"
            ]
        },
        "Step 6": {
            "steps": [
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 13 - 1.846 = 11.154 (left: 11.154)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 13 / 1.846 = 7.048 (left: 7.048)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 13 / 1.846 = 7.048 (left: 7.048)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 1.1",
                "2 <- 1.2",
                "3 <- 2.4",
                "4 <- INIT"
            ]
        },
        "Step 7": {
            "steps": [
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 13 - 1.846 = 11.154 (left: 11.154)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 13 / 1.846 = 7.048 (left: 7.048)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 13 / 1.846 = 7.048 (left: 7.048)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 1.846 * 13 = 23.978 (left: 23.978)",
                "3 * 8 = 24 (left: 24 13 13)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 0.2",
                "2 <- 1.3",
                "3 <- 1.1",
                "4 <- 7.4"
            ]
        },
        "Step 8": {
            "steps": [
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 13 - 1.846 = 11.154 (left: 11.154)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 1.846 * 13 = 23.978 (left: 23.978)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13)"
            ],
            "Evaluation": [
                0.002,
                22.0,
                0.002,
                0.003,
                22.0
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 8.4",
                "2 <- 1.3",
                "3 <- 1.4",
                "4 <- 3.1"
            ]
        },
        "Step 9": {
            "steps": [
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 13 - 1.846 = 11.154 (left: 11.154)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 13 / 1.846 = 7.048 (left: 7.048)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 1.846 * 13 = 23.978 (left: 23.978)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 13 / 1.846 = 7.048 (left: 7.048)"
            ]
        },
        "Input": "3 8 13 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "49": {
        "puzzle": "9 9 12 12",
        "Step 0": {
            "steps": [
                "12 + 9 = 21 (left: 9 12 21)",
                "9 / 9 = 1 (left: 1 12 12)",
                "9 * 9 = 81 (left: 12 12 81)",
                "9 * 9 = 81 (left: 12 12 81)",
                "12 + 9 = 21 (left: 9 12 21)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                1.002,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "9 / 9 = 1 (left: 1 12 12)",
                "9 * 9 = 81 (left: 12 12 81)",
                "9 * 9 = 81 (left: 12 12 81)",
                "12 + 9 = 21 (left: 9 12 21)",
                "9 * 9 = 81 (left: 12 12 81)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                1.002,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.2",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "9 / 9 = 1 (left: 1 12 12)",
                "9 * 9 = 81 (left: 12 12 81) || 81 / 12 = 6.75 (left: 6.75 12)",
                "9 * 9 = 81 (left: 12 12 81)",
                "12 + 9 = 21 (left: 9 12 21)",
                "9 * 9 = 81 (left: 12 12 81) || 81 / 12 = 6.75 (left: 6.75 12)"
            ],
            "Evaluation": [
                0.003,
                3.0,
                1.002,
                1.002,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.1",
                "2 <- 2.4",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "9 / 9 = 1 (left: 1 12 12)",
                "9 * 9 = 81 (left: 12 12 81) || 81 / 12 = 6.75 (left: 6.75 12) || 12 / 6.75 = 1.77777777778 (left: 1.77777777778)",
                "9 * 9 = 81 (left: 12 12 81) || 81 / 12 = 6.75 (left: 6.75 12) || 12 / 6.75 = 1.77777777778 (left: 1.77777777778)",
                "12 + 9 = 21 (left: 9 12 21)",
                "9 * 9 = 81 (left: 12 12 81)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 2.4",
                "3 <- INIT",
                "4 <- 2.1"
            ]
        },
        "Step 4": {
            "steps": [
                "9 / 9 = 1 (left: 1 12 12)",
                "9 * 9 = 81 (left: 12 12 81)",
                "9 * 9 = 81 (left: 12 12 81) || 81 / 12 = 6.75 (left: 6.75 12) || 12 / 6.75 = 1.77777777778 (left: 1.77777777778)",
                "12 + 9 = 21 (left: 9 12 21)",
                "9 * 9 = 81 (left: 12 12 81) || 81 / 12 = 6.75 (left: 6.75 12) || 12 / 6.75 = 1.77777777778 (left: 1.77777777778)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 2.4",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 2.2"
            ]
        },
        "Step 5": {
            "steps": [
                "12 + 9 = 21 (left: 9 12 21) || 12 - 9 = 3 (left: 3 21)",
                "9 * 9 = 81 (left: 12 12 81) || 81 / 12 = 6.75 (left: 6.75 12) || 12 / 6.75 = 1.77777777778 (left: 1.77777777778)",
                "9 * 9 = 81 (left: 12 12 81)",
                "12 + 9 = 21 (left: 9 12 21)",
                "9 * 9 = 81 (left: 12 12 81) || 81 / 12 = 6.75 (left: 6.75 12)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                1.002,
                1.002,
                3.0
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 1.3",
                "2 <- 5.4",
                "3 <- 5.4",
                "4 <- 4.3"
            ]
        },
        "Step 6": {
            "steps": [
                "9 * 9 = 81 (left: 12 12 81) || 12 / 12 = 1 (left: 1 81)",
                "12 + 9 = 21 (left: 9 12 21) || 9 * 21 = 189 (left: 12 189)",
                "9 * 9 = 81 (left: 12 12 81) || 81 / 12 = 6.75 (left: 6.75 12) || 12 / 6.75 = 1.77777777778 (left: 1.77777777778)",
                "9 * 9 = 81 (left: 12 12 81) || 81 / 12 = 6.75 (left: 6.75 12) || 12 - 6.75 = 5.25 (left: 5.25)",
                "12 + 9 = 21 (left: 9 12 21) || 9 * 21 = 189 (left: 12 189)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.4",
                "2 <- 5.4",
                "3 <- 5.4",
                "4 <- INIT"
            ]
        },
        "Step 7": {
            "steps": [
                "9 * 9 = 81 (left: 12 12 81) || 12 / 12 = 1 (left: 1 81)",
                "9 * 9 = 81 (left: 12 12 81) || 81 / 12 = 6.75 (left: 6.75 12) || 12 / 6.75 = 1.77777777778 (left: 1.77777777778)",
                "9 * 9 = 81 (left: 12 12 81) || 81 / 12 = 6.75 (left: 6.75 12) || 12 / 6.75 = 1.77777777778 (left: 1.77777777778)",
                "9 * 9 = 81 (left: 12 12 81) || 81 / 12 = 6.75 (left: 6.75 12) || 12 - 6.75 = 5.25 (left: 5.25)",
                "9 * 9 = 81 (left: 12 12 81)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 5.3",
                "4 <- 2.4"
            ]
        },
        "Step 8": {
            "steps": [
                "9 * 9 = 81 (left: 12 12 81) || 81 / 12 = 6.75 (left: 6.75 12) || 6.75 * 12 = 81 (left: 81)",
                "9 * 9 = 81 (left: 12 12 81)",
                "9 * 9 = 81 (left: 12 12 81)",
                "12 + 9 = 21 (left: 9 12 21) || 21 / 3 = 7 (left: 7 21)",
                "9 * 9 = 81 (left: 12 12 81) || 81 / 12 = 6.75 (left: 6.75 12) || 12 / 6.75 = 1.77777777778 (left: 1.77777777778)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                1.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.1",
                "2 <- 8.1",
                "3 <- 4.1",
                "4 <- 7.4"
            ]
        },
        "Step 9": {
            "steps": [
                "9 / 9 = 1 (left: 1 12 12)",
                "9 * 9 = 81 (left: 12 12 81) || 81 / 12 = 6.75 (left: 6.75 12)",
                "9 * 9 = 81 (left: 12 12 81) || 81 / 12 = 6.75 (left: 6.75 12)",
                "9 * 9 = 81 (left: 12 12 81) || 81 - 12 = 69 (left: 12 69)",
                "9 * 9 = 81 (left: 12 12 81) || 81 / 12 = 6.75 (left: 6.75 12)"
            ]
        },
        "Input": "9 9 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    }
}