{
    "0": {
        "input": "1 1 4 6",
        "step_1": {
            "steps": [
                "5 * 5 = 25 (left: 25 10 2)",
                "6 - 1 = 5 (left: 1 4 5)",
                "Possible next steps:",
                "1 * 1 = 1 (left: 1 4 6)",
                "1 + 1 = 2 (left: 2 4 6)",
                "6 - 1 = 5 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 4 5)",
                "6 / 4 = 1.5 (left: 1 1.5 6)",
                "6 / 1 = 6 (left: 1 4 6)",
                "8 - 7 = 1 (left: 3 5 1)"
            ],
            "values": [
                1.0,
                1.0,
                0.003,
                60.0,
                0.003,
                3.0,
                2.001,
                22.0,
                60.0,
                1.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.8",
                "3 <- 1.3",
                "4 <- 1.3",
                "5 <- 1.8",
                "6 <- 1.3",
                "7 <- 1.8",
                "8 <- INIT",
                "9 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                "6 / 1 = 6 (left: 1 4 6)",
                "1 * 1 = 1 (left: 1 4 6)",
                "1 * 1 = 1 (left: 1 4 6)",
                "6 / 1 = 6 (left: 1 4 6)",
                "1 * 1 = 1 (left: 1 4 6)",
                "6 / 1 = 6 (left: 1 4 6)",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "6 / 1 = 6 (left: 1 4 6)",
                "4 + 1 = 5 (left: 1 5 6)",
                "6 / 1 = 6 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)",
                "1 * 1 = 1 (left: 1 4 6)\n6 - 4 = 2 (left: 1 2)",
                "1 * 1 = 1 (left: 1 4 6)\n6 / 4 = 1.5 (left: 1.5 6)",
                "6 / 1 = 6 (left: 1 4 6)\n6 / 4 = 1.5 (left: 1.5)",
                "1 * 1 = 1 (left: 1 4 6)\n5 / 2 = 2.5 (left: 2.5 10)",
                "6 / 1 = 6 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "7 - 2 = 5 (left: 2 5 5)",
                "1 + 1 = 2 (left: 2 4 6)"
            ],
            "values": [
                60.0,
                41.0,
                40.001,
                20.002,
                1.0,
                0.001,
                0.0,
                60.0,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- 1.7",
                "1 <- 2.2",
                "2 <- 2.0",
                "3 <- 1.3",
                "4 <- 1.0",
                "5 <- 2.7",
                "6 <- 1.7",
                "7 <- 2.0",
                "8 <- 2.0",
                "9 <- 2.2"
            ],
            "resampled_steps": [
                "6 / 4 = 1.5 (left: 1 1.5 6)",
                "6 / 1 = 6 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)",
                "6 / 1 = 6 (left: 1 4 6)",
                "1 * 1 = 1 (left: 1 4 6)",
                "5 * 5 = 25 (left: 25 10 2)",
                "6 / 1 = 6 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "6 / 4 = 1.5 (left: 1 1.5 6)",
                "6 / 1 = 6 (left: 1 4 6)",
                "6 / 1 = 6 (left: 1 4 6)",
                "6 / 1 = 6 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)"
            ]
        },
        "step_3": {
            "steps": [
                "6 / 4 = 1.5 (left: 1 1.5 6)\n6 / 1.5 = 4 (left: 1 4)",
                "6 / 1 = 6 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)",
                "6 / 1 = 6 (left: 1 4 6)\n6 - 4 = 2 (left: 1 2)",
                "1 * 1 = 1 (left: 1 4 6)\n1 + 3 = 4 (left: 4 9)",
                "5 * 5 = 25 (left: 25 10 2)\n25 + 10 = 35 (left: 2 35)",
                "6 / 1 = 6 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)",
                "6 / 4 = 1.5 (left: 1 1.5 6)\nInput: 3 9 27 81",
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)",
                "6 / 1 = 6 (left: 1 4 6)\n4 * 6 = 24 (left: 7 24)",
                "6 / 1 = 6 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)"
            ],
            "values": [
                60.0,
                0.003,
                60.0,
                20.002,
                0.001,
                0.001,
                0.003,
                60.0,
                0.002,
                0.0
            ],
            "resampled": [
                "0 <- 3.7",
                "1 <- 3.0",
                "2 <- 1.8",
                "3 <- 3.3",
                "4 <- 3.2",
                "5 <- 2.7",
                "6 <- 1.8",
                "7 <- 1.8",
                "8 <- 3.7",
                "9 <- 2.1"
            ],
            "resampled_steps": [
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)",
                "6 / 4 = 1.5 (left: 1 1.5 6)\n6 / 1.5 = 4 (left: 1 4)",
                "6 / 1 = 6 (left: 1 4 6)",
                "1 * 1 = 1 (left: 1 4 6)\n1 + 3 = 4 (left: 4 9)",
                "6 / 1 = 6 (left: 1 4 6)\n6 - 4 = 2 (left: 1 2)",
                "6 / 1 = 6 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "6 / 1 = 6 (left: 1 4 6)",
                "6 / 1 = 6 (left: 1 4 6)",
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)",
                "4 + 1 = 5 (left: 1 5 6)"
            ]
        },
        "step_4": {
            "steps": [
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)\n10 + 1 = 11 (left: 11)",
                "6 / 4 = 1.5 (left: 1 1.5 6)\n6 / 1.5 = 4 (left: 1 4)\n4 / 1 = 4 (left: 4)",
                "6 / 1 = 6 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)",
                "1 * 1 = 1 (left: 1 4 6)\n1 + 3 = 4 (left: 4 9)\n4 * 9 = 36 (left: 9 36)",
                "6 / 1 = 6 (left: 1 4 6)\n6 - 4 = 2 (left: 1 2)\n2 / 1 = 2 (left: 2)",
                "6 / 1 = 6 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)",
                "6 / 1 = 6 (left: 1 4 6)\n6 / 4 = 1.5 (left: 1.5 6)",
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)",
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "4 + 1 = 5 (left: 1 5 6)\n1 * 5 = 5 (left: 5 6)"
            ],
            "values": [
                0.002,
                0.003,
                60.0,
                40.001,
                0.001,
                0.002,
                0.0,
                41.0,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 4.7",
                "1 <- 2.1",
                "2 <- 3.2",
                "3 <- 1.3",
                "4 <- 1.8",
                "5 <- 3.2",
                "6 <- 4.3",
                "7 <- 4.3",
                "8 <- 3.2",
                "9 <- 3.0"
            ],
            "resampled_steps": [
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)",
                "4 + 1 = 5 (left: 1 5 6)",
                "6 / 1 = 6 (left: 1 4 6)\n6 - 4 = 2 (left: 1 2)",
                "1 * 1 = 1 (left: 1 4 6)",
                "6 / 1 = 6 (left: 1 4 6)",
                "6 / 1 = 6 (left: 1 4 6)\n6 - 4 = 2 (left: 1 2)",
                "1 * 1 = 1 (left: 1 4 6)\n1 + 3 = 4 (left: 4 9)\n4 * 9 = 36 (left: 9 36)",
                "1 * 1 = 1 (left: 1 4 6)\n1 + 3 = 4 (left: 4 9)\n4 * 9 = 36 (left: 9 36)",
                "6 / 1 = 6 (left: 1 4 6)\n6 - 4 = 2 (left: 1 2)",
                "6 / 4 = 1.5 (left: 1 1.5 6)\n6 / 1.5 = 4 (left: 1 4)"
            ]
        },
        "step_5": {
            "steps": [
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "4 + 1 = 5 (left: 1 5 6)\n5 - 1 = 4 (left: 4 6)",
                "6 / 1 = 6 (left: 1 4 6)\n6 - 4 = 2 (left: 1 2)\n1 * 2 = 2 (left: 2)",
                "1 * 1 = 1 (left: 1 4 6)\n7 + 5 = 12 (left: 3 12)",
                "6 / 1 = 6 (left: 1 4 6)\n6 / 4 = 1.5 (left: 1.5)",
                "6 / 1 = 6 (left: 1 4 6)\n6 - 4 = 2 (left: 1 2)\n1 * 2 = 2 (left: 2)",
                "1 * 1 = 1 (left: 1 4 6)\n1 + 3 = 4 (left: 4 9)\n4 * 9 = 36 (left: 9 36)\n9 * 4 = 36 (left: 36)",
                "1 * 1 = 1 (left: 1 4 6)\n1 + 3 = 4 (left: 4 9)\n4 * 9 = 36 (left: 9 36)\n9 * 36 = 324 (left: 324)",
                "6 / 1 = 6 (left: 1 4 6)\n6 - 4 = 2 (left: 1 2)\n2 / 1 = 2 (left: 2)",
                "6 / 4 = 1.5 (left: 1 1.5 6)\n6 / 1.5 = 4 (left: 1 4)\n1 + 4 = 5 (left: 5)"
            ],
            "values": [
                0.003,
                60.0,
                0.002,
                0.002,
                0.003,
                0.001,
                40.0,
                0.002,
                0.001,
                0.001
            ],
            "resampled": [
                "0 <- 4.3",
                "1 <- 3.7",
                "2 <- 3.0",
                "3 <- 4.3",
                "4 <- 1.3",
                "5 <- 4.3",
                "6 <- 4.2",
                "7 <- 5.1",
                "8 <- 2.1",
                "9 <- 1.8"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 4 6)\n1 + 3 = 4 (left: 4 9)\n4 * 9 = 36 (left: 9 36)",
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)",
                "6 / 4 = 1.5 (left: 1 1.5 6)\n6 / 1.5 = 4 (left: 1 4)",
                "1 * 1 = 1 (left: 1 4 6)\n1 + 3 = 4 (left: 4 9)\n4 * 9 = 36 (left: 9 36)",
                "1 * 1 = 1 (left: 1 4 6)",
                "1 * 1 = 1 (left: 1 4 6)\n1 + 3 = 4 (left: 4 9)\n4 * 9 = 36 (left: 9 36)",
                "6 / 1 = 6 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)",
                "4 + 1 = 5 (left: 1 5 6)\n5 - 1 = 4 (left: 4 6)",
                "4 + 1 = 5 (left: 1 5 6)",
                "6 / 1 = 6 (left: 1 4 6)"
            ]
        },
        "step_6": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6)\n1 + 3 = 4 (left: 4 9)\n4 * 9 = 36 (left: 9 36)\n36 / 9 = 4 (left: 4)",
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)\n1 + 10 = 11 (left: 10)",
                "6 / 4 = 1.5 (left: 1 1.5 6)\n6 / 1.5 = 4 (left: 1 4)\n1 + 4 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 4 6)\n1 + 3 = 4 (left: 4 9)\n4 * 9 = 36 (left: 9 36)\n9 + 36 = 45 (left: 45)",
                "1 * 1 = 1 (left: 1 4 6)\n9 / 3 = 3 (left: 3 27)",
                "1 * 1 = 1 (left: 1 4 6)\n1 + 3 = 4 (left: 4 9)\n4 * 9 = 36 (left: 9 36)\n9 * 4 = 36 (left: 36)",
                "6 / 1 = 6 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)\n6 / 4 = 1.5 (left: 1.5)",
                "4 + 1 = 5 (left: 1 5 6)\n5 - 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "4 + 1 = 5 (left: 1 5 6)\n4 * 2 = 8 (left: 8 9)",
                "6 / 1 = 6 (left: 1 4 6)\n1 + 4 = 5 (left: 5 6)"
            ],
            "values": [
                0.003,
                0.002,
                0.002,
                0.003,
                60.0,
                60.0,
                0.002,
                60.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 5.1",
                "1 <- 4.3",
                "2 <- 6.4",
                "3 <- 6.4",
                "4 <- 4.3",
                "5 <- 5.1",
                "6 <- 5.1",
                "7 <- 3.2",
                "8 <- 6.4",
                "9 <- 3.7"
            ],
            "resampled_steps": [
                "4 + 1 = 5 (left: 1 5 6)\n5 - 1 = 4 (left: 4 6)",
                "1 * 1 = 1 (left: 1 4 6)\n1 + 3 = 4 (left: 4 9)\n4 * 9 = 36 (left: 9 36)",
                "1 * 1 = 1 (left: 1 4 6)\n9 / 3 = 3 (left: 3 27)",
                "1 * 1 = 1 (left: 1 4 6)\n9 / 3 = 3 (left: 3 27)",
                "1 * 1 = 1 (left: 1 4 6)\n1 + 3 = 4 (left: 4 9)\n4 * 9 = 36 (left: 9 36)",
                "4 + 1 = 5 (left: 1 5 6)\n5 - 1 = 4 (left: 4 6)",
                "4 + 1 = 5 (left: 1 5 6)\n5 - 1 = 4 (left: 4 6)",
                "6 / 1 = 6 (left: 1 4 6)\n6 - 4 = 2 (left: 1 2)",
                "1 * 1 = 1 (left: 1 4 6)\n9 / 3 = 3 (left: 3 27)",
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)"
            ]
        },
        "step_7": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 6)\n5 - 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 4 6)\n1 + 3 = 4 (left: 4 9)\n4 * 9 = 36 (left: 9 36)\n36 / 9 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 4 6)\n9 / 3 = 3 (left: 3 27)\n27 - 3 = 24 (left: 3 24)",
                "1 * 1 = 1 (left: 1 4 6)\n9 / 3 = 3 (left: 3 27)\n3 + 27 = 30 (left: 30)",
                "1 * 1 = 1 (left: 1 4 6)\n1 + 3 = 4 (left: 4 9)\n4 * 9 = 36 (left: 9 36)\n9 * 4 = 36 (left: 36)",
                "4 + 1 = 5 (left: 1 5 6)\n5 - 1 = 4 (left: 4 6)\n4 / 6 = 0.6666666666666666 (left: 0.6666666666666666)",
                "4 + 1 = 5 (left: 1 5 6)\n5 - 1 = 4 (left: 4 6)\n4 / 6 = 0.666667 (left: 0.666667)",
                "6 / 1 = 6 (left: 1 4 6)\n6 - 4 = 2 (left: 1 2)\n1 * 2 = 2 (left: 2)",
                "1 * 1 = 1 (left: 1 4 6)\n9 / 3 = 3 (left: 3 27)\n3 + 27 = 30 (left: 30)",
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)\n1 + 10 = 11 (left: 11)"
            ],
            "values": [
                20.0,
                0.001,
                0.002,
                20.001,
                60.0,
                0.003,
                0.002,
                0.002,
                20.002,
                0.001
            ],
            "resampled": [
                "0 <- 6.4",
                "1 <- 3.7",
                "2 <- 4.2",
                "3 <- 1.3",
                "4 <- 7.0",
                "5 <- 2.7",
                "6 <- 6.4",
                "7 <- 3.0",
                "8 <- 5.1",
                "9 <- 3.7"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 4 6)\n9 / 3 = 3 (left: 3 27)",
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)",
                "6 / 1 = 6 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)",
                "1 * 1 = 1 (left: 1 4 6)",
                "4 + 1 = 5 (left: 1 5 6)\n5 - 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "6 / 1 = 6 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 4 6)\n9 / 3 = 3 (left: 3 27)",
                "6 / 4 = 1.5 (left: 1 1.5 6)\n6 / 1.5 = 4 (left: 1 4)",
                "4 + 1 = 5 (left: 1 5 6)\n5 - 1 = 4 (left: 4 6)",
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)"
            ]
        },
        "step_8": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6)\n9 / 3 = 3 (left: 3 27)\n3 + 27 = 30 (left: 30)",
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)\nPossible next steps:",
                "6 / 1 = 6 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 4 6)\n8 + 2 = 10 (left: 10)",
                "4 + 1 = 5 (left: 1 5 6)\n5 - 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 + 1) * (6 - 1) = 24",
                "6 / 1 = 6 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 - 24 = 0 (left: 1 0)",
                "1 * 1 = 1 (left: 1 4 6)\n9 / 3 = 3 (left: 3 27)\n3 * 27 = 81 (left: 81)",
                "6 / 4 = 1.5 (left: 1 1.5 6)\n6 / 1.5 = 4 (left: 1 4)\n1 + 4 = 5 (left: 5)",
                "4 + 1 = 5 (left: 1 5 6)\n5 - 1 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)",
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)"
            ],
            "values": [
                40.001,
                0.003,
                0.003,
                0.002,
                60.0,
                60.0,
                0.003,
                0.001,
                0.0,
                0.003
            ],
            "resampled": [
                "0 <- 8.4",
                "1 <- 4.7",
                "2 <- 1.7",
                "3 <- 6.5",
                "4 <- 2.7",
                "5 <- 1.8",
                "6 <- 8.4",
                "7 <- 7.4",
                "8 <- 6.7",
                "9 <- 4.7"
            ],
            "resampled_steps": [
                "4 + 1 = 5 (left: 1 5 6)\n5 - 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 + 1) * (6 - 1) = 24",
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)",
                "6 / 4 = 1.5 (left: 1 1.5 6)",
                "1 * 1 = 1 (left: 1 4 6)\n1 + 3 = 4 (left: 4 9)\n4 * 9 = 36 (left: 9 36)\n9 * 4 = 36 (left: 36)",
                "6 / 1 = 6 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "6 / 1 = 6 (left: 1 4 6)",
                "4 + 1 = 5 (left: 1 5 6)\n5 - 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 + 1) * (6 - 1) = 24",
                "1 * 1 = 1 (left: 1 4 6)\n1 + 3 = 4 (left: 4 9)\n4 * 9 = 36 (left: 9 36)\n9 * 4 = 36 (left: 36)",
                "4 + 1 = 5 (left: 1 5 6)\n5 - 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)"
            ]
        },
        "step_9": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 6)\n5 - 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 + 1) * (6 - 1) = 24\nInput: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n6 - 3 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * ((6 - 3) * 3) = 24",
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "6 / 4 = 1.5 (left: 1 1.5 6)\n1.5 - 6 = -4.5 (left: 1 -4.5)",
                "1 * 1 = 1 (left: 1 4 6)\n1 + 3 = 4 (left: 4 9)\n4 * 9 = 36 (left: 9 36)\n9 * 4 = 36 (left: 36)\nNo possible next steps as there is only one number provided.",
                "6 / 1 = 6 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)",
                "6 / 1 = 6 (left: 1 4 6)\n6 - 1 = 5 (left: 4 5)",
                "4 + 1 = 5 (left: 1 5 6)\n5 - 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 + 1) * (6 - 1) = 24\nInput: 3 3 7 9\nSteps:\n7 - 3 = 4 (left: 3 4 9)\n4 * 3 = 12 (left: 12 9)\n12 + 9 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: ((7 - 3) * 3) + (9 + 3) = 24",
                "1 * 1 = 1 (left: 1 4 6)\n1 + 3 = 4 (left: 4 9)\n4 * 9 = 36 (left: 9 36)\n9 * 4 = 36 (left: 36)\nThere are no possible next steps for the input 36 as it is already a single number.",
                "4 + 1 = 5 (left: 1 5 6)\n5 - 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 + 1) * (6 - 1) = 24",
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9)"
            ],
            "values": [
                60.0,
                0.002,
                0.001,
                0.003,
                60.0,
                21.001,
                60.0,
                0.003,
                60.0,
                0.002
            ],
            "resampled": [
                "0 <- 8.5",
                "1 <- 5.6",
                "2 <- 7.4",
                "3 <- 9.8",
                "4 <- 2.1",
                "5 <- 3.0",
                "6 <- 7.8",
                "7 <- 5.6",
                "8 <- 8.4",
                "9 <- 1.7"
            ],
            "resampled_steps": [
                "6 / 1 = 6 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 - 24 = 0 (left: 1 0)",
                "1 * 1 = 1 (left: 1 4 6)\n1 + 3 = 4 (left: 4 9)\n4 * 9 = 36 (left: 9 36)\n9 * 4 = 36 (left: 36)",
                "1 * 1 = 1 (left: 1 4 6)\n1 + 3 = 4 (left: 4 9)\n4 * 9 = 36 (left: 9 36)\n9 * 4 = 36 (left: 36)",
                "4 + 1 = 5 (left: 1 5 6)\n5 - 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 + 1) * (6 - 1) = 24",
                "4 + 1 = 5 (left: 1 5 6)",
                "6 / 4 = 1.5 (left: 1 1.5 6)\n6 / 1.5 = 4 (left: 1 4)",
                "1 * 1 = 1 (left: 1 4 6)\n9 / 3 = 3 (left: 3 27)\n3 + 27 = 30 (left: 30)",
                "1 * 1 = 1 (left: 1 4 6)\n1 + 3 = 4 (left: 4 9)\n4 * 9 = 36 (left: 9 36)\n9 * 4 = 36 (left: 36)",
                "4 + 1 = 5 (left: 1 5 6)\n5 - 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 + 1) * (6 - 1) = 24",
                "6 / 4 = 1.5 (left: 1 1.5 6)"
            ]
        },
        "step_10": {
            "steps": [
                "6 / 1 = 6 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 - 24 = 0 (left: 1 0)\n1 + 0 = 1 (left: 0)",
                "1 * 1 = 1 (left: 1 4 6)\n1 + 3 = 4 (left: 4 9)\n4 * 9 = 36 (left: 9 36)\n9 * 4 = 36 (left: 36)\nThere are no possible next steps for the input 36.",
                "1 * 1 = 1 (left: 1 4 6)\n1 + 3 = 4 (left: 4 9)\n4 * 9 = 36 (left: 9 36)\n9 * 4 = 36 (left: 36)\n36 / 2 = 18",
                "4 + 1 = 5 (left: 1 5 6)\n5 - 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 + 1) * (6 - 1) = 24\nInput: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) * (8 - 6) = 24",
                "4 + 1 = 5 (left: 1 5 6)\n6 - 1 = 5 (left: 5 6)",
                "6 / 4 = 1.5 (left: 1 1.5 6)\n6 / 1.5 = 4 (left: 1 4)\n4 - 1 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 4 6)\n9 / 3 = 3 (left: 3 27)\n3 + 27 = 30 (left: 30)\nThere are no possible next steps with the input 30.",
                "1 * 1 = 1 (left: 1 4 6)\n1 + 3 = 4 (left: 4 9)\n4 * 9 = 36 (left: 9 36)\n9 * 4 = 36 (left: 36)\n36 + 2 = 38",
                "4 + 1 = 5 (left: 1 5 6)\n5 - 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 + 1) * (6 - 1) = 24\nInput: 3 3 5 7\n\n3 + 7 = 10 (left: 3 5 10)\n10 - 5 = 5 (left: 3 5)\n5 * 5 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: ((3 + 7) - 5) * (5 - 1) = 24",
                "6 / 4 = 1.5 (left: 1 1.5 6)\n6 - 1.5 = 4.5 (left: 1 4.5)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                60.0,
                0.001,
                0.0,
                0.003,
                0.003,
                60.0,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.047828999999999997
    },
    "1": {
        "input": "1 1 11 11",
        "step_1": {
            "steps": [
                "11 - 1 = 10 (left: 1 10 11)",
                "1 + 1 = 2 (left: 2 11 11)",
                "11 + 1 = 12 (left: 1 11 12)",
                "7 + 3 = 10 (left: 5 10 9)",
                "11 / 1 = 11 (left: 1 11 11)",
                "1 * 1 = 1 (left: 1 11 11)",
                "11 * 1 = 11 (left: 1 11 11)",
                "1 * 1 = 1 (left: 1 11 11)",
                "1 - 1 = 0 (left: 0 11 11)",
                "1 + 1 = 2 (left: 2 11 11)"
            ],
            "values": [
                0.003,
                0.003,
                1.002,
                3.0,
                1.002,
                0.003,
                0.003,
                0.003,
                0.003,
                20.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 1.9",
                "4 <- 1.2",
                "5 <- 1.9",
                "6 <- 1.9",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 1.9"
            ],
            "resampled_steps": [
                "",
                "",
                "",
                "1 + 1 = 2 (left: 2 11 11)",
                "11 + 1 = 12 (left: 1 11 12)",
                "1 + 1 = 2 (left: 2 11 11)",
                "1 + 1 = 2 (left: 2 11 11)",
                "",
                "",
                "1 + 1 = 2 (left: 2 11 11)"
            ]
        },
        "step_2": {
            "steps": [
                "Input: 4 6 10 14",
                "11 + 1 = 12 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 11 11)",
                "1 + 1 = 2 (left: 2 11 11)\n3 + 5 = 8 (left: 5 5 8)",
                "11 + 1 = 12 (left: 1 11 12)\n1 * 11 = 11 (left: 11 12)",
                "1 + 1 = 2 (left: 2 11 11)\nPossible next steps:",
                "1 + 1 = 2 (left: 2 11 11)\n3 / 3 = 1 (left: 1 3 3)",
                "1 * 1 = 1 (left: 1 11 11)",
                "1 * 1 = 1 (left: 1 11 11)",
                "1 + 1 = 2 (left: 2 11 11)\n5 * 5 = 25 (left: 10 25)"
            ],
            "values": [
                0.003,
                0.003,
                1.002,
                1.002,
                0.003,
                0.003,
                2.001,
                1.001,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1.9",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 2.3",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 1.9",
                "7 <- 1.3",
                "8 <- INIT",
                "9 <- 1.9"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 11 11)",
                "",
                "",
                "1 + 1 = 2 (left: 2 11 11)\n3 + 5 = 8 (left: 5 5 8)",
                "",
                "",
                "1 + 1 = 2 (left: 2 11 11)",
                "7 + 3 = 10 (left: 5 10 9)",
                "",
                "1 + 1 = 2 (left: 2 11 11)"
            ]
        },
        "step_3": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 11)\n5 / 5 = 1 (left: 1 5)",
                "1 * 1 = 1 (left: 1 11 11)",
                "11 - 1 = 10 (left: 1 11 10)",
                "1 + 1 = 2 (left: 2 11 11)\n3 + 5 = 8 (left: 5 5 8)\n7 + 3 = 10 (left: 7 7 10)",
                "1 + 1 = 2 (left: 2 11 11)",
                "11 - 1 = 10 (left: 1 11 10)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)",
                "7 + 3 = 10 (left: 5 10 9)\n5 * 10 = 50 (left: 9 50)",
                "11 - 1 = 10 (left: 1 10 11)",
                "1 + 1 = 2 (left: 2 11 11)\n11 - 2 = 9 (left: 9 11 11)"
            ],
            "values": [
                0.001,
                0.003,
                0.003,
                60.0,
                20.002,
                1.002,
                60.0,
                1.0,
                1.002,
                1.002
            ],
            "resampled": [
                "0 <- 3.3",
                "1 <- 3.6",
                "2 <- 3.3",
                "3 <- 1.9",
                "4 <- 3.7",
                "5 <- 3.6",
                "6 <- 3.6",
                "7 <- 3.6",
                "8 <- 1.9",
                "9 <- 3.3"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 11 11)\n3 + 5 = 8 (left: 5 5 8)\n7 + 3 = 10 (left: 7 7 10)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)",
                "1 + 1 = 2 (left: 2 11 11)\n3 + 5 = 8 (left: 5 5 8)\n7 + 3 = 10 (left: 7 7 10)",
                "1 + 1 = 2 (left: 2 11 11)",
                "7 + 3 = 10 (left: 5 10 9)\n5 * 10 = 50 (left: 9 50)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)",
                "1 + 1 = 2 (left: 2 11 11)",
                "1 + 1 = 2 (left: 2 11 11)\n3 + 5 = 8 (left: 5 5 8)\n7 + 3 = 10 (left: 7 7 10)"
            ]
        },
        "step_4": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 11)\n3 + 5 = 8 (left: 5 5 8)\n7 + 3 = 10 (left: 7 7 10)\n7 + 7 = 14 (left: 10 14)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n11 / 13 = 0.8461538461538461 (left: 0.8461538461538461)",
                "1 + 1 = 2 (left: 2 11 11)\n3 + 5 = 8 (left: 5 5 8)\n7 + 3 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)",
                "1 + 1 = 2 (left: 2 11 11)\nPossible next steps:",
                "7 + 3 = 10 (left: 5 10 9)\n5 * 10 = 50 (left: 9 50)\n9 + 50 = 59 (left: 59) ",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n11 * 13 = 143 (left: 143)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n11 / 13 = 0.846153846 (left: 0.846153846)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n7 - 3 = 4 (left: 4 5)",
                "1 + 1 = 2 (left: 2 11 11)\n11 / 2 = 5.5 (left: 5.5 11)",
                "1 + 1 = 2 (left: 2 11 11)\n3 + 5 = 8 (left: 5 5 8)\n7 + 3 = 10 (left: 7 7 10)\n24.28571428569 + 34 = 58.28571428569 (left: 58.28571428569)"
            ],
            "values": [
                60.0,
                0.001,
                60.0,
                0.003,
                0.002,
                0.003,
                0.0,
                22.0,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 3.6",
                "2 <- 3.6",
                "3 <- INIT",
                "4 <- 3.3",
                "5 <- 4.7",
                "6 <- 4.2",
                "7 <- 4.2",
                "8 <- 4.0",
                "9 <- 4.0"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 11 11)\n3 + 5 = 8 (left: 5 5 8)\n7 + 3 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)",
                "",
                "1 + 1 = 2 (left: 2 11 11)\n3 + 5 = 8 (left: 5 5 8)\n7 + 3 = 10 (left: 7 7 10)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n7 - 3 = 4 (left: 4 5)",
                "1 + 1 = 2 (left: 2 11 11)\n3 + 5 = 8 (left: 5 5 8)\n7 + 3 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)",
                "1 + 1 = 2 (left: 2 11 11)\n3 + 5 = 8 (left: 5 5 8)\n7 + 3 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)",
                "1 + 1 = 2 (left: 2 11 11)\n3 + 5 = 8 (left: 5 5 8)\n7 + 3 = 10 (left: 7 7 10)\n7 + 7 = 14 (left: 10 14)",
                "1 + 1 = 2 (left: 2 11 11)\n3 + 5 = 8 (left: 5 5 8)\n7 + 3 = 10 (left: 7 7 10)\n7 + 7 = 14 (left: 10 14)"
            ]
        },
        "step_5": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 11)\n3 + 5 = 8 (left: 5 5 8)\n7 + 3 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n11 * 13 = 143 (left: 143)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "11 / 1 = 11 (left: 1 11 11)",
                "1 + 1 = 2 (left: 2 11 11)\n3 + 5 = 8 (left: 5 5 8)\n7 + 3 = 10 (left: 7 7 10)\n3 / 3 = 1 (left: 1 12)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n7 - 3 = 4 (left: 4 5)\n5 - 4 = 1 (left: 1 5)",
                "1 + 1 = 2 (left: 2 11 11)\n3 + 5 = 8 (left: 5 5 8)\n7 + 3 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)\n1 + 10 = 11",
                "1 + 1 = 2 (left: 2 11 11)\n3 + 5 = 8 (left: 5 5 8)\n7 + 3 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 11 11)\n3 + 5 = 8 (left: 5 5 8)\n7 + 3 = 10 (left: 7 7 10)\n7 + 7 = 14 (left: 10 14)\n10 * 14 = 140 (left: 140)",
                "1 + 1 = 2 (left: 2 11 11)\n3 + 5 = 8 (left: 5 5 8)\n7 + 3 = 10 (left: 7 7 10)\n7 + 7 = 14 (left: 10 14)\n14 - 10 = 4 (left: 4)"
            ],
            "values": [
                0.001,
                0.003,
                60.0,
                0.003,
                1.0,
                60.0,
                0.003,
                0.002,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 3.6",
                "1 <- 5.2",
                "2 <- 3.3",
                "3 <- 5.5",
                "4 <- 5.5",
                "5 <- INIT",
                "6 <- 5.5",
                "7 <- 4.7",
                "8 <- 5.2",
                "9 <- 4.0"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 11 11)\n3 + 5 = 8 (left: 5 5 8)\n7 + 3 = 10 (left: 7 7 10)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n7 - 3 = 4 (left: 4 5)\n5 - 4 = 1 (left: 1 5)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n7 - 3 = 4 (left: 4 5)\n5 - 4 = 1 (left: 1 5)",
                "",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n7 - 3 = 4 (left: 4 5)\n5 - 4 = 1 (left: 1 5)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n7 - 3 = 4 (left: 4 5)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 11 11)\n3 + 5 = 8 (left: 5 5 8)\n7 + 3 = 10 (left: 7 7 10)\n7 + 7 = 14 (left: 10 14)"
            ]
        },
        "step_6": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n11 - 13 = -2 (left: -2)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 11) + 11 = 24",
                "1 + 1 = 2 (left: 2 11 11)\n3 + 5 = 8 (left: 5 5 8)\n7 + 3 = 10 (left: 7 7 10)\n3 / 1.43 \u2248 2.10 (left: 2.10 3 10)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n7 - 3 = 4 (left: 4 5)\n5 - 4 = 1 (left: 1 5)\n1 + 5 = 6",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n7 - 3 = 4 (left: 4 5)\n5 - 4 = 1 (left: 1 5)\n1 * 5 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 11 11)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n7 - 3 = 4 (left: 4 5)\n5 - 4 = 1 (left: 1 5)\n1 * 5 = 5 (left: 5)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n7 - 3 = 4 (left: 4 5)\n4 * 5 = 20 (left: 20)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 11) + 11 = 24",
                "1 + 1 = 2 (left: 2 11 11)\n3 + 5 = 8 (left: 5 5 8)\n7 + 3 = 10 (left: 7 7 10)\n7 + 7 = 14 (left: 10 14)\n10 + 14 = 24 (left: 14 24)"
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ],
        "cost": 0.0806985
    },
    "2": {
        "input": "1 1 3 8",
        "step_1": {
            "steps": [
                "3 * 1 = 3 (left: 3 3 8)",
                "8 / 1 = 8 (left: 1 3 8)",
                "3 - 1 = 2 (left: 1 2 8)",
                "3 * 1 = 3 (left: 3 3 8)",
                "3 + 1 = 4 (left: 1 4 8)",
                "3 * 1 = 3 (left: 1 3 8)",
                "3 + 1 = 4 (left: 1 4 8)",
                "8 - 3 = 5 (left: 1 1 5)",
                "3 + 1 = 4 (left: 1 4 8)",
                "8 - 1 = 7 (left: 1 3 7)"
            ],
            "values": [
                3.0,
                60.0,
                41.0,
                1.002,
                0.003,
                60.0,
                1.002,
                0.003,
                20.002,
                3.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.1",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 1.8",
                "5 <- 1.0",
                "6 <- 1.1",
                "7 <- 1.5",
                "8 <- INIT",
                "9 <- 1.2"
            ],
            "resampled_steps": [
                "",
                "8 / 1 = 8 (left: 1 3 8)",
                "",
                "",
                "3 + 1 = 4 (left: 1 4 8)",
                "3 * 1 = 3 (left: 3 3 8)",
                "8 / 1 = 8 (left: 1 3 8)",
                "3 * 1 = 3 (left: 1 3 8)",
                "",
                "3 - 1 = 2 (left: 1 2 8)"
            ]
        },
        "step_2": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 8)",
                "8 / 1 = 8 (left: 1 3 8)\n1 + 3 = 4 (left: 4 8)",
                "6 - 4 = 2 (left: 2 3)",
                "8 / 1 = 8 (left: 1 3 8)",
                "3 + 1 = 4 (left: 1 4 8)\n8 / 4 = 2 (left: 2 4)",
                "3 * 1 = 3 (left: 3 3 8)\n3 - 3 = 0 (left: 0 8)",
                "8 / 1 = 8 (left: 1 3 8)\n3 / 1 = 3 (left: 3)",
                "3 * 1 = 3 (left: 1 3 8)\n1 + 3 = 4 (left: 4 8)",
                "1 + 1 = 2 (left: 2 3 8)",
                "3 - 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                40.001,
                0.002,
                20.001,
                0.002,
                0.003,
                1.002,
                60.0
            ],
            "resampled": [
                "0 <- 2.9",
                "1 <- 2.3",
                "2 <- 2.3",
                "3 <- 1.1",
                "4 <- 1.2",
                "5 <- 1.8",
                "6 <- 1.5",
                "7 <- 2.5",
                "8 <- 1.1",
                "9 <- 2.5"
            ],
            "resampled_steps": [
                "3 - 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "8 / 1 = 8 (left: 1 3 8)",
                "8 / 1 = 8 (left: 1 3 8)",
                "8 / 1 = 8 (left: 1 3 8)",
                "3 - 1 = 2 (left: 1 2 8)",
                "3 + 1 = 4 (left: 1 4 8)",
                "3 * 1 = 3 (left: 1 3 8)",
                "3 * 1 = 3 (left: 3 3 8)\n3 - 3 = 0 (left: 0 8)",
                "8 / 1 = 8 (left: 1 3 8)",
                "3 * 1 = 3 (left: 3 3 8)\n3 - 3 = 0 (left: 0 8)"
            ]
        },
        "step_3": {
            "steps": [
                "3 - 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)",
                "8 / 1 = 8 (left: 1 3 8)\n1 + 3 = 4 (left: 4 8)",
                "8 / 1 = 8 (left: 1 3 8)\nPossible next steps:",
                "8 / 1 = 8 (left: 1 3 8)\n5 * 9 = 45 (left: 4 45)",
                "3 - 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "3 + 1 = 4 (left: 1 4 8)\n4 / 1 = 4 (left: 4 4)",
                "3 * 1 = 3 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 3 3 8)\n3 - 3 = 0 (left: 0 8)\n8 * 0 = 0 (left: 0)",
                "8 / 1 = 8 (left: 1 3 8)\n1 + 3 = 4 (left: 4 8)",
                "3 * 1 = 3 (left: 3 3 8)\n3 - 3 = 0 (left: 0 8)\n0 * 8 = 0 (left: 8)"
            ],
            "values": [
                0.002,
                0.003,
                0.003,
                0.003,
                60.0,
                0.003,
                60.0,
                0.003,
                20.002,
                0.001
            ],
            "resampled": [
                "0 <- 3.8",
                "1 <- 1.2",
                "2 <- 2.5",
                "3 <- 3.6",
                "4 <- 3.6",
                "5 <- 1.1",
                "6 <- 2.9",
                "7 <- 3.4",
                "8 <- 3.8",
                "9 <- INIT"
            ],
            "resampled_steps": [
                "8 / 1 = 8 (left: 1 3 8)\n1 + 3 = 4 (left: 4 8)",
                "3 - 1 = 2 (left: 1 2 8)",
                "3 * 1 = 3 (left: 3 3 8)\n3 - 3 = 0 (left: 0 8)",
                "3 * 1 = 3 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)",
                "8 / 1 = 8 (left: 1 3 8)",
                "3 - 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "3 - 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "8 / 1 = 8 (left: 1 3 8)\n1 + 3 = 4 (left: 4 8)",
                ""
            ]
        },
        "step_4": {
            "steps": [
                "8 / 1 = 8 (left: 1 3 8)\n1 + 3 = 4 (left: 4 8)\n4 * 8 = 32 (left: 8 32)",
                "3 - 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "3 * 1 = 3 (left: 3 3 8)\n3 - 3 = 0 (left: 0 8)\n0 + 8 = 8 (left: 8)",
                "3 * 1 = 3 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "3 * 1 = 3 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "8 / 1 = 8 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)",
                "3 - 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)",
                "3 - 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "8 / 1 = 8 (left: 1 3 8)\n1 + 3 = 4 (left: 4 8)\n4 * 8 = 32 (left: 32)",
                "1 * 1 = 1 (left: 1 3 8)"
            ],
            "values": [
                0.002,
                60.0,
                0.003,
                40.0,
                60.0,
                60.0,
                0.003,
                0.003,
                0.003,
                41.0
            ],
            "resampled": [
                "0 <- 2.9",
                "1 <- 4.1",
                "2 <- 1.5",
                "3 <- 1.2",
                "4 <- 3.4",
                "5 <- 3.4",
                "6 <- 4.1",
                "7 <- 3.6",
                "8 <- 3.4",
                "9 <- 2.5"
            ],
            "resampled_steps": [
                "3 - 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "3 - 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "3 * 1 = 3 (left: 1 3 8)",
                "3 - 1 = 2 (left: 1 2 8)",
                "3 - 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "3 - 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "3 - 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "3 * 1 = 3 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)",
                "3 - 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "3 * 1 = 3 (left: 3 3 8)\n3 - 3 = 0 (left: 0 8)"
            ]
        },
        "step_5": {
            "steps": [
                "3 - 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)",
                "3 - 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "3 * 1 = 3 (left: 1 3 8)\n10 * 15 = 150 (left: 5 150)",
                "3 - 1 = 2 (left: 1 2 8)\n3 * 7 = 21 (left: 21 9)",
                "3 - 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n1 / 10 = 0.1 (left: 10)",
                "3 - 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "3 - 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "3 * 1 = 3 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)\n3 + 8 = 11 (left: 8 11)",
                "3 - 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n1 + 10 = 11 (left: 11)",
                "3 * 1 = 3 (left: 3 3 8)\n3 - 3 = 0 (left: 0 8)\n0 * 8 = 0 (left: 0)"
            ],
            "values": [
                0.002,
                0.003,
                20.001,
                0.003,
                0.003,
                0.001,
                0.001,
                1.001,
                0.001,
                0.003
            ],
            "resampled": [
                "0 <- 4.9",
                "1 <- 5.2",
                "2 <- 3.6",
                "3 <- 3.6",
                "4 <- 4.5",
                "5 <- 4.5",
                "6 <- 5.2",
                "7 <- 2.3",
                "8 <- 4.3",
                "9 <- 1.5"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 3 8)",
                "3 * 1 = 3 (left: 1 3 8)\n10 * 15 = 150 (left: 5 150)",
                "3 * 1 = 3 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)",
                "8 / 1 = 8 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)",
                "8 / 1 = 8 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 1 3 8)\n10 * 15 = 150 (left: 5 150)",
                "8 / 1 = 8 (left: 1 3 8)",
                "3 * 1 = 3 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "3 * 1 = 3 (left: 1 3 8)"
            ]
        },
        "step_6": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8)\n8 / 3 = 2.67 (left: 1 2.67)",
                "3 * 1 = 3 (left: 1 3 8)\n10 * 15 = 150 (left: 5 150)\n150 - 5 = 145 (left: 145)",
                "3 * 1 = 3 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)",
                "3 * 1 = 3 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)",
                "8 / 1 = 8 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)",
                "8 / 1 = 8 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "3 * 1 = 3 (left: 1 3 8)\n10 * 15 = 150 (left: 5 150)\n150 - 5 = 145 (left: 145)",
                "8 / 1 = 8 (left: 1 3 8)\n1 + 3 = 4 (left: 4 8)",
                "3 * 1 = 3 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (3 * (1 * 3)) * 8 = 24",
                "3 * 1 = 3 (left: 1 3 8)\n10 * 5 = 50 (left: 50)"
            ],
            "values": [
                1.002,
                0.003,
                0.003,
                0.002,
                0.003,
                40.0,
                0.002,
                0.003,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 4.5",
                "1 <- 3.4",
                "2 <- 2.3",
                "3 <- 4.1",
                "4 <- 3.6",
                "5 <- 4.1",
                "6 <- 6.8",
                "7 <- 4.5",
                "8 <- 4.5",
                "9 <- 5.7"
            ],
            "resampled_steps": [
                "8 / 1 = 8 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)",
                "3 - 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "8 / 1 = 8 (left: 1 3 8)",
                "3 - 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "3 * 1 = 3 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)",
                "3 - 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "3 * 1 = 3 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (3 * (1 * 3)) * 8 = 24",
                "8 / 1 = 8 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)",
                "8 / 1 = 8 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)\n3 + 8 = 11 (left: 8 11)"
            ]
        },
        "step_7": {
            "steps": [
                "8 / 1 = 8 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)",
                "3 - 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n15 * 3 = 45 (left: 3 45)",
                "8 / 1 = 8 (left: 1 3 8)\nPossible next steps:",
                "3 - 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "3 * 1 = 3 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)\nPossible next steps:",
                "3 - 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "3 * 1 = 3 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (3 * (1 * 3)) * 8 = 24\nInput: 3 3 4 6\nSteps:\n3 * 4 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\n36 / 3 = 12 (left: 12)\nAnswer: ((3 * 4) - 6) + 12 = 24",
                "8 / 1 = 8 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)",
                "8 / 1 = 8 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)",
                "3 * 1 = 3 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)\n3 + 8 = 11 (left: 8 11)\n8 - 11 = -3 (left: -3)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                60.0,
                0.002,
                0.001,
                0.002
            ],
            "resampled": [
                "0 <- 6.8",
                "1 <- 1.5",
                "2 <- 3.4",
                "3 <- 2.3",
                "4 <- 6.5",
                "5 <- 6.5",
                "6 <- 6.8",
                "7 <- 2.9",
                "8 <- 1.1",
                "9 <- 4.9"
            ],
            "resampled_steps": [
                "3 * 1 = 3 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (3 * (1 * 3)) * 8 = 24",
                "3 * 1 = 3 (left: 1 3 8)",
                "3 - 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "8 / 1 = 8 (left: 1 3 8)",
                "8 / 1 = 8 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "8 / 1 = 8 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "3 * 1 = 3 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (3 * (1 * 3)) * 8 = 24",
                "3 - 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "8 / 1 = 8 (left: 1 3 8)",
                "1 * 1 = 1 (left: 1 3 8)"
            ]
        },
        "step_8": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (3 * (1 * 3)) * 8 = 24\nInput: 3 3 6 7\nSteps:\n3 * 7 = 21 (left: 3 6 21)\n6 - 3 = 3 (left: 3 21)\n3 * 21 = 63 (left: 63)\n63 / 3 = 21 (left: 21)\nAnswer: ((3 * 7) - 3) * 21 = 24",
                "3 * 1 = 3 (left: 1 3 8)\n8 - 1 = 7 (left: 7 8)",
                "3 - 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "8 / 1 = 8 (left: 1 3 8)\n5 * 9 = 45 (left: 10 15 45)",
                "8 / 1 = 8 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (1 / 1) * (3 * 8) = 24",
                "8 / 1 = 8 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (8 / 1) * (3 * 1) = 24",
                "3 * 1 = 3 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (3 * (1 * 3)) * 8 = 24\nInput: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n4 * 3 = 12 (left: 8 12)\n12 * 2 = 24 (left: 24)\nAnswer: (3 + 5) * (4 * 3) = 24",
                "3 - 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n8 / 3 = 2.67 (left: 2.67)",
                "8 / 1 = 8 (left: 1 3 8)\n8 - 1 = 7 (left: 7 3)",
                "1 * 1 = 1 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)"
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.119279
    },
    "3": {
        "input": "1 1 1 8",
        "step_1": {
            "steps": [
                "8 / 1 = 8 (left: 1 1 8)",
                "8 / 1 = 8 (left: 1 1 8)",
                "8 / 1 = 8 (left: 1 1 8)",
                "8 / 1 = 8 (left: 1 1 8)",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 * 1 = 1 (left: 1 1 8)",
                "8 / 1 = 8 (left: 1 1 8)",
                "1 / 1 = 1 (left: 1 1 8)",
                "8 - 1 = 7 (left: 1 1 7)",
                "8 - 1 = 7 (left: 1 1 7)"
            ],
            "values": [
                1.001,
                3.0,
                2.0,
                1.002,
                41.0,
                2.001,
                1.001,
                1.002,
                2.001,
                2.001
            ],
            "resampled": [
                "0 <- 1.4",
                "1 <- INIT",
                "2 <- 1.4",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 1.4",
                "6 <- 1.4",
                "7 <- INIT",
                "8 <- 1.4",
                "9 <- INIT"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 1 2 8)",
                "",
                "1 + 1 = 2 (left: 1 2 8)",
                "",
                "",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 + 1 = 2 (left: 1 2 8)",
                "",
                "1 + 1 = 2 (left: 1 2 8)",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8)\n1 + 3 = 4 (left: 4 5 7)",
                "1 * 1 = 1 (left: 1 1 8)",
                "1 + 1 = 2 (left: 1 2 8)\n2 * 8 = 16 (left: 1 16)",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 * 8 = 8 (left: 1 1 8)",
                "1 + 1 = 2 (left: 1 2 8)\n7 - 5 = 2 (left: 2 7 9)",
                "1 + 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "8 - 1 = 7 (left: 1 1 7)",
                "1 + 1 = 2 (left: 1 2 8)\n2 * 8 = 16 (left: 1 16)",
                "1 * 1 = 1 (left: 1 1 8)"
            ],
            "values": [
                2.001,
                2.0,
                0.002,
                41.0,
                1.001,
                2.001,
                60.0,
                0.003,
                0.001,
                1.002
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 1.4",
                "2 <- 1.4",
                "3 <- 1.4",
                "4 <- 2.6",
                "5 <- 1.4",
                "6 <- 1.8",
                "7 <- 2.6",
                "8 <- 2.6",
                "9 <- 2.6"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 1 2 8)\n1 + 3 = 4 (left: 4 5 7)",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 + 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 1 2 8)",
                "8 - 1 = 7 (left: 1 1 7)",
                "1 + 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)"
            ]
        },
        "step_3": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8)\n1 + 3 = 4 (left: 4 5 7)\n7 - 5 = 2 (left: 4 2)",
                "1 + 1 = 2 (left: 1 2 8)\n2 * 8 = 16 (left: 1 16)",
                "1 + 1 = 2 (left: 1 2 8)\n4 * 6 = 24 (left: 2 24)",
                "1 + 1 = 2 (left: 1 2 8)\n5 - 2 = 3 (left: 3 9 2)",
                "1 + 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "8 - 1 = 7 (left: 1 1 7)\n7 - 1 = 6 (left: 1 6)",
                "1 + 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n1 + 10 = 11 (left: 10)",
                "1 + 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n10 / 1 = 10 (left: 10)"
            ],
            "values": [
                0.002,
                1.002,
                0.003,
                3.0,
                0.002,
                60.0,
                60.0,
                0.002,
                0.002,
                0.001
            ],
            "resampled": [
                "0 <- 3.5",
                "1 <- 3.6",
                "2 <- 3.3",
                "3 <- 2.1",
                "4 <- 2.6",
                "5 <- INIT",
                "6 <- 2.7",
                "7 <- 1.4",
                "8 <- 3.6",
                "9 <- 3.5"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "8 - 1 = 7 (left: 1 1 7)\n7 - 1 = 6 (left: 1 6)",
                "1 + 1 = 2 (left: 1 2 8)\n5 - 2 = 3 (left: 3 9 2)",
                "1 * 1 = 1 (left: 1 1 8)",
                "1 + 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "",
                "8 - 1 = 7 (left: 1 1 7)",
                "1 + 1 = 2 (left: 1 2 8)",
                "8 - 1 = 7 (left: 1 1 7)\n7 - 1 = 6 (left: 1 6)",
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)"
            ]
        },
        "step_4": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n1 - 6 = -5 (left: -5)",
                "8 - 1 = 7 (left: 1 1 7)\n7 - 1 = 6 (left: 1 6)\n6 - 1 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8)\n5 - 2 = 3 (left: 3 9 2)\n9 / 3 = 3 (left: 3 2)",
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)",
                "1 + 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "1 * 8 = 8 (left: 1 1 8)",
                "8 - 1 = 7 (left: 1 1 7)\n1 + 1 = 2 (left: 2 7)",
                "1 + 1 = 2 (left: 1 2 8)\n1 / 2 = 0.5 (left: 0.5 8)",
                "8 - 1 = 7 (left: 1 1 7)\n7 - 1 = 6 (left: 1 6)\n6 - 1 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n6 + 1 = 7 (left: 7)"
            ],
            "values": [
                0.001,
                0.003,
                41.0,
                60.0,
                0.002,
                2.0,
                0.003,
                1.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 4.3",
                "1 <- 2.3",
                "2 <- INIT",
                "3 <- 4.3",
                "4 <- 3.6",
                "5 <- INIT",
                "6 <- 4.3",
                "7 <- 3.6",
                "8 <- 2.6",
                "9 <- 3.5"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)",
                "1 + 1 = 2 (left: 1 2 8)",
                "",
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)",
                "8 - 1 = 7 (left: 1 1 7)\n7 - 1 = 6 (left: 1 6)",
                "",
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)",
                "8 - 1 = 7 (left: 1 1 7)\n7 - 1 = 6 (left: 1 6)",
                "1 + 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)"
            ]
        },
        "step_5": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)\n8 / 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)",
                "8 / 1 = 8 (left: 1 1 8)",
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)\n1 + 8 = 9 (left: 8)",
                "8 - 1 = 7 (left: 1 1 7)\n7 - 1 = 6 (left: 1 6)\n1 + 6 = 7 (left: 7) ",
                "1 * 1 = 1 (left: 1 8 1)",
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)\n1 + 8 = 9 (left: 9)",
                "8 - 1 = 7 (left: 1 1 7)\n7 - 1 = 6 (left: 1 6)\n6 - 1 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n1 + 10 = 11 (left: 10)",
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n1 + 6 = 7 (left: 7)"
            ],
            "values": [
                0.003,
                60.0,
                1.002,
                0.001,
                0.002,
                0.003,
                0.0,
                0.001,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 1.8",
                "1 <- 5.1",
                "2 <- 4.2",
                "3 <- 3.3",
                "4 <- 4.2",
                "5 <- 4.2",
                "6 <- 4.3",
                "7 <- 4.2",
                "8 <- 2.3",
                "9 <- 3.5"
            ],
            "resampled_steps": [
                "8 - 1 = 7 (left: 1 1 7)",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)",
                "1 + 1 = 2 (left: 1 2 8)\n5 - 2 = 3 (left: 3 9 2)\n9 / 3 = 3 (left: 3 2)",
                "1 + 1 = 2 (left: 1 2 8)\n5 - 2 = 3 (left: 3 9 2)",
                "1 + 1 = 2 (left: 1 2 8)\n5 - 2 = 3 (left: 3 9 2)\n9 / 3 = 3 (left: 3 2)",
                "1 + 1 = 2 (left: 1 2 8)\n5 - 2 = 3 (left: 3 9 2)\n9 / 3 = 3 (left: 3 2)",
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)",
                "1 + 1 = 2 (left: 1 2 8)\n5 - 2 = 3 (left: 3 9 2)\n9 / 3 = 3 (left: 3 2)",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)"
            ]
        },
        "step_6": {
            "steps": [
                "8 - 1 = 7 (left: 1 1 7)\n1 * 1 = 1 (left: 1 7)",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)\n1 * 4 = 4 (left: 4)",
                "1 + 1 = 2 (left: 1 2 8)\n5 - 2 = 3 (left: 3 9 2)\n9 / 3 = 3 (left: 3 2)\n3 + 2 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8)\n5 - 2 = 3 (left: 3 9 2)\n3 * 2 = 6 (left: 6 6)",
                "1 + 1 = 2 (left: 1 2 8)\n5 - 2 = 3 (left: 3 9 2)\n9 / 3 = 3 (left: 3 2)\n3 / 2 = 1.5 (left: 1.5)",
                "1 + 1 = 2 (left: 1 2 8)\n5 - 2 = 3 (left: 3 9 2)\n9 / 3 = 3 (left: 3 2)\n3 + 2 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)\n1 * 8 = 8 (left: 8 8)",
                "1 + 1 = 2 (left: 1 2 8)\n5 - 2 = 3 (left: 3 9 2)\n9 / 3 = 3 (left: 3 2)\n5 + 7 = 12 (left: 12)",
                "1 + 1 = 2 (left: 1 2 8)\n1 * 2 = 2 (left: 2 8)",
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n1 + 6 = 7"
            ],
            "values": [
                20.0,
                0.002,
                0.003,
                0.003,
                0.0,
                0.001,
                0.003,
                0.002,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- 3.6",
                "1 <- 2.9",
                "2 <- 1.9",
                "3 <- 5.1",
                "4 <- 3.3",
                "5 <- 5.1",
                "6 <- 1.4",
                "7 <- 3.6",
                "8 <- 3.6",
                "9 <- 4.2"
            ],
            "resampled_steps": [
                "8 - 1 = 7 (left: 1 1 7)\n7 - 1 = 6 (left: 1 6)",
                "1 * 1 = 1 (left: 1 1 8)",
                "8 - 1 = 7 (left: 1 1 7)",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)",
                "1 + 1 = 2 (left: 1 2 8)\n5 - 2 = 3 (left: 3 9 2)",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)",
                "1 + 1 = 2 (left: 1 2 8)",
                "8 - 1 = 7 (left: 1 1 7)\n7 - 1 = 6 (left: 1 6)",
                "8 - 1 = 7 (left: 1 1 7)\n7 - 1 = 6 (left: 1 6)",
                "1 + 1 = 2 (left: 1 2 8)\n5 - 2 = 3 (left: 3 9 2)\n9 / 3 = 3 (left: 3 2)"
            ]
        },
        "step_7": {
            "steps": [
                "8 - 1 = 7 (left: 1 1 7)\n7 - 1 = 6 (left: 1 6)\n6 - 1 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)",
                "8 - 1 = 7 (left: 1 1 7)\n1 / 1 = 1 (left: 1 7)",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)\n1 * 4 = 4 (left: 4)",
                "1 + 1 = 2 (left: 1 2 8)\n5 - 2 = 3 (left: 3 9 2)\n9 / 3 = 3 (left: 3 2)",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)\n4 * 1 = 4 (left: 4)",
                "1 + 1 = 2 (left: 1 2 8)\n1 * 2 = 2 (left: 2 8)",
                "8 - 1 = 7 (left: 1 1 7)\n7 - 1 = 6 (left: 1 6)\n1 + 6 = 7 (left: 7) ",
                "8 - 1 = 7 (left: 1 1 7)\n7 - 1 = 6 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "1 + 1 = 2 (left: 1 2 8)\n5 - 2 = 3 (left: 3 9 2)\n9 / 3 = 3 (left: 3 2)\n3 + 2 = 5 (left: 5)"
            ],
            "values": [
                0.0,
                60.0,
                1.0,
                0.0,
                0.003,
                0.002,
                0.002,
                0.002,
                0.002,
                0.002
            ],
            "resampled": [
                "0 <- 4.3",
                "1 <- 3.6",
                "2 <- 7.1",
                "3 <- 4.3",
                "4 <- 4.3",
                "5 <- 1.4",
                "6 <- 3.5",
                "7 <- 2.6",
                "8 <- 4.2",
                "9 <- 2.6"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)",
                "8 - 1 = 7 (left: 1 1 7)\n7 - 1 = 6 (left: 1 6)",
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)",
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)",
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "1 + 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 1 2 8)\n5 - 2 = 3 (left: 3 9 2)\n9 / 3 = 3 (left: 3 2)",
                "1 + 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)"
            ]
        },
        "step_8": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)\n5 - 3 = 2 (left: 2 5)",
                "8 - 1 = 7 (left: 1 1 7)\n7 - 1 = 6 (left: 1 6)\n6 - 1 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)\n8 / 1 = 8 (left: 8)",
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)\n8 - 1 = 7 (left: 7)",
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)\n1 * 8 = 8 (left: 8 8)",
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n1 + 6 = 7",
                "1 + 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 8)\n5 - 2 = 3 (left: 3 9 2)\n9 / 3 = 3 (left: 3 2)\n3 - 2 = 1 (left: 1)",
                "1 + 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n1 / 10 = 0.1 (left: 0)"
            ],
            "values": [
                60.0,
                0.002,
                0.003,
                0.002,
                0.003,
                60.0,
                0.003,
                0.002,
                0.001,
                0.003
            ],
            "resampled": [
                "0 <- 4.3",
                "1 <- 5.1",
                "2 <- 3.6",
                "3 <- 8.0",
                "4 <- 8.5",
                "5 <- 8.5",
                "6 <- 8.0",
                "7 <- 8.0",
                "8 <- 5.1",
                "9 <- 4.2"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)",
                "8 - 1 = 7 (left: 1 1 7)\n7 - 1 = 6 (left: 1 6)",
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)\n5 - 3 = 2 (left: 2 5)",
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)\n5 - 3 = 2 (left: 2 5)",
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)\n5 - 3 = 2 (left: 2 5)",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)",
                "1 + 1 = 2 (left: 1 2 8)\n5 - 2 = 3 (left: 3 9 2)\n9 / 3 = 3 (left: 3 2)"
            ]
        },
        "step_9": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)\n8 / 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)\n1 * 4 = 4 (left: 4)",
                "8 - 1 = 7 (left: 1 1 7)\n7 - 1 = 6 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)\n5 - 3 = 2 (left: 2 5)\n5 / 2 = 2.5 (left: 2.5)",
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)\n5 - 3 = 2 (left: 2 5)\n5 - 2 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)\n5 - 3 = 2 (left: 2 5)\n2 + 5 = 7 (left: 7)",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)\n1 * 4 = 4 (left: 4)",
                "1 + 1 = 2 (left: 1 2 8)\n5 - 2 = 3 (left: 3 9 2)\n9 / 3 = 3 (left: 3 2)\n2 * 3 = 6 (left: 6)"
            ],
            "values": [
                0.0,
                0.002,
                0.002,
                0.001,
                0.002,
                0.003,
                0.003,
                0.001,
                0.001,
                0.003
            ],
            "resampled": [
                "0 <- 3.5",
                "1 <- 7.1",
                "2 <- 5.2",
                "3 <- 5.2",
                "4 <- 7.1",
                "5 <- 5.1",
                "6 <- 5.1",
                "7 <- 2.6",
                "8 <- 8.0",
                "9 <- 4.3"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)",
                "8 / 1 = 8 (left: 1 1 8)",
                "8 / 1 = 8 (left: 1 1 8)",
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)",
                "1 + 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)\n5 - 3 = 2 (left: 2 5)",
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)"
            ]
        },
        "step_10": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n6 - 1 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)\n8 - 1 = 7 (left: 7)",
                "8 / 1 = 8 (left: 1 1 8)\n1 / 1 = 1 (left: 1 8)",
                "8 / 1 = 8 (left: 1 1 8)\n1 * 8 = 8 (left: 8 8)",
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)\n1 + 8 = 9 (left: 9)",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)\n1 + 4 = 5",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)\n4 - 1 = 3 (left: 3)",
                "1 + 1 = 2 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)\n5 - 3 = 2 (left: 2 5)\n2 + 5 = 7 (left: 7) ",
                "1 * 1 = 1 (left: 1 1 8)\n1 * 1 = 1 (left: 1 8)\n1 * 8 = 8 (left: 8)"
            ],
            "values": [
                0.002,
                0.001,
                60.0,
                0.003,
                0.002,
                0.003,
                0.003,
                0.002,
                0.002,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.16489700000000002
    },
    "4": {
        "input": "6 6 6 6",
        "step_1": {
            "steps": [
                "6 - 6 = 0 (left: 0 6 6)",
                "7 + 1 = 8 (left: 3 8 5)",
                "6 / 6 = 1 (left: 6 6 1)",
                "6 - 6 = 0 (left: 6 6 6 0)",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 / 6 = 1 (left: 6 1 6)",
                "6 - 6 = 0 (left: 0 6 6)"
            ],
            "values": [
                1.002,
                60.0,
                2.001,
                22.0,
                21.0,
                41.0,
                60.0,
                60.0,
                21.0,
                60.0
            ],
            "resampled": [
                "0 <- 1.6",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 1.0",
                "4 <- 1.7",
                "5 <- 1.9",
                "6 <- 1.9",
                "7 <- 1.5",
                "8 <- 1.4",
                "9 <- 1.5"
            ],
            "resampled_steps": [
                "6 + 6 = 12 (left: 6 12 6)",
                "",
                "",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 * 6 = 36 (left: 6 6 36)"
            ]
        },
        "step_2": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6)\n6 - 12 = -6 (left: -6)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 + 6 = 12 (left: 6 6 12)",
                "6 - 6 = 0 (left: 0 6 6)\nInput: 4 5 9",
                "6 + 6 = 12 (left: 6 12 6)\n6 + 12 = 18 (left: 18 6)",
                "6 - 6 = 0 (left: 0 6 6)\nPossible next steps:",
                "6 - 6 = 0 (left: 0 6 6)\n2 * 3 = 6 (left: 1 6)",
                "6 * 6 = 36 (left: 6 6 36)\n6 * 6 = 36 (left: 6 36)",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 12 = 72 (left: 72 6)",
                "6 * 6 = 36 (left: 6 6 36)\n36 / 6 = 6 (left: 6 6)"
            ],
            "values": [
                0.0,
                20.002,
                60.0,
                0.003,
                40.001,
                0.003,
                60.0,
                0.003,
                22.0,
                0.003
            ],
            "resampled": [
                "0 <- 1.4",
                "1 <- 2.4",
                "2 <- 1.1",
                "3 <- 1.7",
                "4 <- 1.8",
                "5 <- INIT",
                "6 <- 1.5",
                "7 <- 1.7",
                "8 <- 1.3",
                "9 <- 1.3"
            ],
            "resampled_steps": [
                "6 + 6 = 12 (left: 6 12 6)",
                "6 + 6 = 12 (left: 6 12 6)\n6 + 12 = 18 (left: 18 6)",
                "7 + 1 = 8 (left: 3 8 5)",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 / 6 = 1 (left: 6 1 6)",
                "",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 - 6 = 0 (left: 6 6 6 0)",
                "6 - 6 = 0 (left: 6 6 6 0)"
            ]
        },
        "step_3": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6)\n12 - 6 = 6 (left: 6 6)",
                "6 + 6 = 12 (left: 6 12 6)\n6 + 12 = 18 (left: 18 6)\n18 * 6 = 108 (left: 108)",
                "7 + 1 = 8 (left: 3 8 5)\n8 / 3 = 2.67 (left: 2.67 5)",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 12 = 72 (left: 72 6)",
                "6 / 6 = 1 (left: 6 1 6)\n3 + 9 = 12 (left: 12 4)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 * 6 = 36 (left: 6 6 36)\n6 + 36 = 42 (left: 6 42)",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 6 = 36 (left: 36)",
                "6 - 6 = 0 (left: 6 6 6 0)\n6 / 6 = 1 (left: 1 6 0)",
                "6 - 6 = 0 (left: 6 6 6 0)\n6 * 6 = 36 (left: 6 36 0)"
            ],
            "values": [
                21.001,
                0.003,
                0.002,
                21.0,
                0.003,
                60.0,
                0.003,
                40.0,
                2.001,
                1.002
            ],
            "resampled": [
                "0 <- 1.5",
                "1 <- 2.2",
                "2 <- 2.2",
                "3 <- 2.6",
                "4 <- 1.9",
                "5 <- 1.5",
                "6 <- 3.7",
                "7 <- 2.8",
                "8 <- 3.3",
                "9 <- 1.5"
            ],
            "resampled_steps": [
                "6 * 6 = 36 (left: 6 6 36)",
                "6 + 6 = 12 (left: 6 6 12)",
                "6 + 6 = 12 (left: 6 6 12)",
                "6 - 6 = 0 (left: 0 6 6)\n2 * 3 = 6 (left: 1 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 6 = 36 (left: 36)",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 12 = 72 (left: 72 6)",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 12 = 72 (left: 72 6)",
                "6 * 6 = 36 (left: 6 6 36)"
            ]
        },
        "step_4": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36)\n6 * 6 = 36 (left: 36 36)",
                "6 + 6 = 12 (left: 6 6 12)\n12 - 6 = 6 (left: 6 12)",
                "6 + 6 = 12 (left: 6 6 12)\n12 - 6 = 6 (left: 6 6)",
                "6 - 6 = 0 (left: 0 6 6)\n2 * 3 = 6 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "6 - 6 = 0 (left: 0 6 6)\nInput: 5 5 5",
                "6 * 6 = 36 (left: 6 6 36)\n6 * 6 = 36 (left: 6 36)",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 6 = 36 (left: 36)\nThere are no possible next steps with the input 36.",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 12 = 72 (left: 72 6)\n72 - 6 = 66 (left: 66)",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 12 = 72 (left: 72 6)\n72 + 6 = 78 (left: 78)",
                "6 * 6 = 36 (left: 6 6 36)\n6 + 6 = 12 (left: 12 36)"
            ],
            "values": [
                0.003,
                0.003,
                1.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 3.5",
                "1 <- 1.3",
                "2 <- 3.5",
                "3 <- 3.5",
                "4 <- 1.8",
                "5 <- 1.9",
                "6 <- 3.5",
                "7 <- 1.4",
                "8 <- 3.7",
                "9 <- 1.6"
            ],
            "resampled_steps": [
                "6 * 6 = 36 (left: 6 6 36)",
                "6 - 6 = 0 (left: 6 6 6 0)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 / 6 = 1 (left: 6 1 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 6 = 36 (left: 36)",
                "6 + 6 = 12 (left: 6 12 6)"
            ]
        },
        "step_5": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)",
                "6 - 6 = 0 (left: 6 6 6 0)\n6 / 6 = 1 (left: 1 6 6)",
                "6 * 6 = 36 (left: 6 6 36)\n6 * 6 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36)\n6 * 6 = 36 (left: 6 36)",
                "6 / 6 = 1 (left: 6 1 6)\n6 / 1 = 6 (left: 6 6)",
                "6 - 6 = 0 (left: 0 6 6)\n6 - 6 = 0 (left: 0)",
                "6 * 6 = 36 (left: 6 6 36)\n6 + 6 = 12 (left: 12 36)",
                "6 + 6 = 12 (left: 6 12 6)\n6 - 12 = -6 (left: -6)",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 6 = 36 (left: 36)\n36 / 2 = 18",
                "6 + 6 = 12 (left: 6 12 6)\n6 - 12 = -6 (left: -6 6)"
            ],
            "values": [
                60.0,
                22.0,
                40.0,
                0.003,
                0.003,
                20.002,
                0.003,
                0.002,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 3.3",
                "1 <- 2.6",
                "2 <- 3.7",
                "3 <- 5.5",
                "4 <- 3.5",
                "5 <- 2.8",
                "6 <- 2.4",
                "7 <- INIT",
                "8 <- 5.2",
                "9 <- 5.0"
            ],
            "resampled_steps": [
                "6 + 6 = 12 (left: 6 12 6)\n6 * 12 = 72 (left: 72 6)",
                "6 - 6 = 0 (left: 0 6 6)\n2 * 3 = 6 (left: 1 6)",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 6 = 36 (left: 36)",
                "6 - 6 = 0 (left: 0 6 6)\n6 - 6 = 0 (left: 0)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 12 = 72 (left: 72 6)",
                "6 + 6 = 12 (left: 6 12 6)\n6 + 12 = 18 (left: 18 6)",
                "",
                "6 * 6 = 36 (left: 6 6 36)\n6 * 6 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)"
            ]
        },
        "step_6": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6)\n6 * 12 = 72 (left: 72 6)\n72 - 6 = 66 (left: 66)",
                "6 - 6 = 0 (left: 0 6 6)\n2 * 3 = 6 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 6 = 36 (left: 36)\n36 / 2 = 18",
                "6 - 6 = 0 (left: 0 6 6)\n6 - 6 = 0 (left: 0)\nThere are no possible next steps as there are no numbers provided in the input.",
                "6 * 6 = 36 (left: 6 6 36)\n6 + 6 = 12 (left: 12 36)",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 12 = 72 (left: 72 6)\n72 / 6 = 12 (left: 12)",
                "6 + 6 = 12 (left: 6 12 6)\n6 + 12 = 18 (left: 18 6)\n18 - 6 = 12 (left: 12)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 * 6 = 36 (left: 6 6 36)\n6 * 6 = 36 (left: 36)\n36 + 1 = 37",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n36 - 1 = 35 (left: 35)"
            ],
            "values": [
                0.003,
                0.001,
                0.003,
                0.003,
                0.003,
                0.002,
                0.002,
                40.001,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 2.2",
                "2 <- 5.2",
                "3 <- 3.0",
                "4 <- 5.0",
                "5 <- 3.0",
                "6 <- 6.7",
                "7 <- 2.6",
                "8 <- 1.9",
                "9 <- 3.5"
            ],
            "resampled_steps": [
                "6 - 6 = 0 (left: 6 6 6 0)",
                "6 + 6 = 12 (left: 6 6 12)",
                "6 * 6 = 36 (left: 6 6 36)\n6 * 6 = 36 (left: 36)",
                "6 + 6 = 12 (left: 6 12 6)\n12 - 6 = 6 (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)",
                "6 + 6 = 12 (left: 6 12 6)\n12 - 6 = 6 (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 - 6 = 0 (left: 0 6 6)\n2 * 3 = 6 (left: 1 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 * 6 = 36 (left: 6 6 36)"
            ]
        },
        "step_7": {
            "steps": [
                "6 - 6 = 0 (left: 6 6 6 0)\n6 + 6 = 12 (left: 6 12 0)",
                "6 + 6 = 12 (left: 6 6 12)\n12 + 6 = 18 (left: 6 18)",
                "6 * 6 = 36 (left: 6 6 36)\n6 * 6 = 36 (left: 36)\nThere are no possible next steps with the input 36.",
                "6 + 6 = 12 (left: 6 12 6)\n12 - 6 = 6 (left: 6 6)\n6 - 6 = 0 (left: 0)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n1 + 36 = 37 (left: 37)",
                "6 + 6 = 12 (left: 6 12 6)\n12 - 6 = 6 (left: 6 6)\n6 + 6 = 12 (left: 12)",
                "6 * 6 = 36 (left: 6 6 36)\n6 * 6 = 36 (left: 36 36)",
                "6 - 6 = 0 (left: 0 6 6)\n2 * 3 = 6 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "6 - 6 = 0 (left: 0 6 6)\n0 + 6 = 6 (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)"
            ],
            "values": [
                1.001,
                21.001,
                0.003,
                0.0,
                0.003,
                0.003,
                20.002,
                0.001,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 5.0",
                "1 <- 2.4",
                "2 <- 3.5",
                "3 <- 1.1",
                "4 <- 1.6",
                "5 <- 5.5",
                "6 <- 5.2",
                "7 <- 3.0",
                "8 <- 7.9",
                "9 <- INIT"
            ],
            "resampled_steps": [
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)",
                "6 + 6 = 12 (left: 6 12 6)\n6 + 12 = 18 (left: 18 6)",
                "6 * 6 = 36 (left: 6 6 36)",
                "7 + 1 = 8 (left: 3 8 5)",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 - 6 = 0 (left: 0 6 6)\n6 - 6 = 0 (left: 0)",
                "6 * 6 = 36 (left: 6 6 36)\n6 * 6 = 36 (left: 36)",
                "6 + 6 = 12 (left: 6 12 6)\n12 - 6 = 6 (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)",
                ""
            ]
        },
        "step_8": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n36 / 1 = 36 (left: 36)",
                "6 + 6 = 12 (left: 6 12 6)\n6 + 12 = 18 (left: 18 6)\n18 * 6 = 108 (left: 108)",
                "6 * 6 = 36 (left: 6 6 36)\n6 * 6 = 36 (left: 6 36)",
                "7 + 1 = 8 (left: 3 8 5)\n8 - 3 = 5 (left: 5 5)",
                "6 + 6 = 12 (left: 6 12 6)\n12 / 6 = 2 (left: 2 6)",
                "6 - 6 = 0 (left: 0 6 6)\n6 - 6 = 0 (left: 0)\nThere are no possible next steps with the input of 0.",
                "6 * 6 = 36 (left: 6 6 36)\n6 * 6 = 36 (left: 36)\n36 / 2 = 18",
                "6 + 6 = 12 (left: 6 12 6)\n12 - 6 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36) ",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n1 + 36 = 37 (left: 37)",
                "6 / 6 = 1 (left: 1 6 6)"
            ],
            "values": [
                60.0,
                0.003,
                0.003,
                0.003,
                1.001,
                0.003,
                0.003,
                40.0,
                0.002,
                41.0
            ],
            "resampled": [
                "0 <- 7.9",
                "1 <- 7.6",
                "2 <- 2.6",
                "3 <- 1.4",
                "4 <- 2.4",
                "5 <- 2.4",
                "6 <- 7.9",
                "7 <- 8.0",
                "8 <- 8.7",
                "9 <- 3.7"
            ],
            "resampled_steps": [
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)",
                "6 * 6 = 36 (left: 6 6 36)\n6 * 6 = 36 (left: 36 36)",
                "6 - 6 = 0 (left: 0 6 6)\n2 * 3 = 6 (left: 1 6)",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 + 6 = 12 (left: 6 12 6)\n6 + 12 = 18 (left: 18 6)",
                "6 + 6 = 12 (left: 6 12 6)\n6 + 12 = 18 (left: 18 6)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n36 / 1 = 36 (left: 36)",
                "6 + 6 = 12 (left: 6 12 6)\n12 - 6 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36) ",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 6 = 36 (left: 36)"
            ]
        },
        "step_9": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n1 + 36 = 37 (left: 37)",
                "6 * 6 = 36 (left: 6 6 36)\n6 * 6 = 36 (left: 36 36)\n36 + 36 = 72",
                "6 - 6 = 0 (left: 0 6 6)\n2 * 3 = 6 (left: 1 6)\n6 - 1 = 5 (left: 5)",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 6 = 36 (left: 36)",
                "6 + 6 = 12 (left: 6 12 6)\n6 + 12 = 18 (left: 18 6)\n18 * 6 = 108 (left: 108)",
                "6 + 6 = 12 (left: 6 12 6)\n6 + 12 = 18 (left: 18 6)\n6 / 18 = 0.3333 (left: 0.3333)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n36 / 1 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n36 / 1 = 36 (left: 36)\n36 / 9 = 4 (left: 4)",
                "6 + 6 = 12 (left: 6 12 6)\n12 - 6 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36) \n36 / 2 = 18",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 6 = 36 (left: 36)\nThere are no possible next steps with the input 36."
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                60.0,
                0.003,
                0.002,
                20.0,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 5.1",
                "1 <- 7.6",
                "2 <- 8.0",
                "3 <- 9.3",
                "4 <- 8.7",
                "5 <- 8.9",
                "6 <- 3.0",
                "7 <- 1.5",
                "8 <- 6.7",
                "9 <- 6.7"
            ],
            "resampled_steps": [
                "6 - 6 = 0 (left: 6 6 6 0)\n6 / 6 = 1 (left: 1 6 6)",
                "6 * 6 = 36 (left: 6 6 36)\n6 * 6 = 36 (left: 36 36)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n36 / 1 = 36 (left: 36)",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 6 = 36 (left: 36)",
                "6 + 6 = 12 (left: 6 12 6)\n12 - 6 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36) ",
                "6 / 6 = 1 (left: 1 6 6)",
                "6 + 6 = 12 (left: 6 12 6)\n12 - 6 = 6 (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 * 6 = 36 (left: 6 6 36)"
            ]
        },
        "step_10": {
            "steps": [
                "6 - 6 = 0 (left: 6 6 6 0)\n6 / 6 = 1 (left: 1 6 6)\n6 - 1 = 5 (left: 5 6)",
                "6 * 6 = 36 (left: 6 6 36)\n6 * 6 = 36 (left: 36 36)\n36 + 36 = 72",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n36 / 1 = 36 (left: 36)\n36 * 2 = 72 (left: 72)",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 6 = 36 (left: 36)\nThere is only one number, so there are no possible next steps.",
                "6 + 6 = 12 (left: 6 12 6)\n12 - 6 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36) \n36 - 8 = 28 (left: 8)",
                "6 / 6 = 1 (left: 1 6 6)\n6 * 1 = 6 (left: 6 6 6)",
                "6 + 6 = 12 (left: 6 12 6)\n12 - 6 = 6 (left: 6 6)\n6 - 6 = 0 (left: 0)",
                "6 * 6 = 36 (left: 6 6 36)\n6 * 6 = 36 (left: 6 36)",
                "6 * 6 = 36 (left: 6 6 36)\n36 / 6 = 6 (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)"
            ],
            "values": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.002,
                1.002,
                0.0,
                0.003,
                20.002,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.2093905
    },
    "5": {
        "input": "1 1 2 12",
        "step_1": {
            "steps": [
                "12 - 1 = 11 (left: 1 2 11)",
                "12 - 2 = 10 (left: 1 2 10)",
                "1 + 1 = 2 (left: 2 2 12)",
                "2 * 2 = 4 (left: 1 4 12)",
                "1 * 1 = 1 (left: 1 2 12)",
                "12 / 2 = 6 (left: 1 2 6)",
                "2 * 6 = 12 (left: 1 12 12)",
                "12 / 2 = 6 (left: 1 6 12)",
                "12 / 2 = 6 (left: 2 6 12)",
                "2 * 1 = 2 (left: 2 2 12)"
            ],
            "values": [
                0.003,
                0.002,
                0.003,
                1.002,
                41.0,
                0.002,
                21.001,
                0.003,
                1.002,
                40.001
            ],
            "resampled": [
                "0 <- 1.4",
                "1 <- 1.9",
                "2 <- 1.4",
                "3 <- 1.9",
                "4 <- 1.9",
                "5 <- INIT",
                "6 <- 1.9",
                "7 <- 1.9",
                "8 <- INIT",
                "9 <- 1.9"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 2 12)",
                "2 * 1 = 2 (left: 2 2 12)",
                "1 * 1 = 1 (left: 1 2 12)",
                "2 * 1 = 2 (left: 2 2 12)",
                "2 * 1 = 2 (left: 2 2 12)",
                "",
                "2 * 1 = 2 (left: 2 2 12)",
                "2 * 1 = 2 (left: 2 2 12)",
                "",
                "2 * 1 = 2 (left: 2 2 12)"
            ]
        },
        "step_2": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12)\n24 - 4 = 20 (left: 6 20)",
                "2 * 1 = 2 (left: 2 2 12)\n4 + 6 = 10 (left: 10 3)",
                "1 * 1 = 1 (left: 1 2 12)\n1 * 2 = 2 (left: 2 12)",
                "2 * 1 = 2 (left: 2 2 12)\n12 - 2 = 10 (left: 2 10)",
                "2 * 1 = 2 (left: 2 2 12)\n12 - 2 = 10 (left: 2 10)",
                "2 * 1 = 2 (left: 1 2 12)",
                "2 * 1 = 2 (left: 2 2 12)\n12 / 2 = 6 (left: 2 6)",
                "2 * 1 = 2 (left: 2 2 12)\n2 * 2 = 4 (left: 4 4 12)",
                "2 + 12 = 14 (left: 1 14 2)",
                "2 * 1 = 2 (left: 2 2 12)\n12 / 2 = 6 (left: 2 6)"
            ],
            "values": [
                0.003,
                0.003,
                60.0,
                3.0,
                3.0,
                60.0,
                1.001,
                2.001,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 1.9",
                "1 <- 1.4",
                "2 <- 1.4",
                "3 <- 1.4",
                "4 <- 2.2",
                "5 <- 2.2",
                "6 <- 2.2",
                "7 <- 2.5",
                "8 <- INIT",
                "9 <- 2.5"
            ],
            "resampled_steps": [
                "2 * 1 = 2 (left: 2 2 12)",
                "1 * 1 = 1 (left: 1 2 12)",
                "1 * 1 = 1 (left: 1 2 12)",
                "1 * 1 = 1 (left: 1 2 12)",
                "1 * 1 = 1 (left: 1 2 12)\n1 * 2 = 2 (left: 2 12)",
                "1 * 1 = 1 (left: 1 2 12)\n1 * 2 = 2 (left: 2 12)",
                "1 * 1 = 1 (left: 1 2 12)\n1 * 2 = 2 (left: 2 12)",
                "2 * 1 = 2 (left: 1 2 12)",
                "",
                "2 * 1 = 2 (left: 1 2 12)"
            ]
        },
        "step_3": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 12)\n12 / 2 = 6 (left: 2 6)",
                "1 * 1 = 1 (left: 1 2 12)\n12 - 1 = 11 (left: 2 11)",
                "1 * 1 = 1 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "1 * 1 = 1 (left: 1 2 12)\n1 * 12 = 12 (left: 12)",
                "1 * 1 = 1 (left: 1 2 12)\n1 * 2 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 12)\n1 * 2 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "1 * 1 = 1 (left: 1 2 12)\n1 * 2 = 2 (left: 2 12)\n2 - 12 = -10 (left: -10)",
                "2 * 1 = 2 (left: 1 2 12)\n2 + 12 = 14 (left: 1 14)",
                "2 * 1 = 2 (left: 1 2 12)",
                "2 * 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)"
            ],
            "values": [
                1.001,
                0.002,
                60.0,
                0.003,
                0.003,
                0.003,
                0.001,
                0.001,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 3.9",
                "1 <- 1.9",
                "2 <- 2.2",
                "3 <- 3.8",
                "4 <- 3.9",
                "5 <- 3.9",
                "6 <- 3.8",
                "7 <- 1.9",
                "8 <- 3.9",
                "9 <- 3.9"
            ],
            "resampled_steps": [
                "2 * 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "2 * 1 = 2 (left: 2 2 12)",
                "1 * 1 = 1 (left: 1 2 12)\n1 * 2 = 2 (left: 2 12)",
                "2 * 1 = 2 (left: 1 2 12)",
                "2 * 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "2 * 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "2 * 1 = 2 (left: 1 2 12)",
                "2 * 1 = 2 (left: 2 2 12)",
                "2 * 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "2 * 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)"
            ]
        },
        "step_4": {
            "steps": [
                "2 * 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "2 * 1 = 2 (left: 2 2 12)\n12 - 2 = 10 (left: 2 10)",
                "1 * 1 = 1 (left: 1 2 12)\n1 * 2 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "2 * 1 = 2 (left: 1 2 12)\nInput: 3 3 4 1",
                "2 * 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "2 * 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9) ",
                "2 * 1 = 2 (left: 1 2 12)\n1 * 12 = 12 (left: 2 12)",
                "2 * 1 = 2 (left: 2 2 12)\nInput: 4 4 4 4",
                "2 * 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n1 - 10 = -9 (left: -9)",
                "2 * 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 * 1 = 10 (left: 10)"
            ],
            "values": [
                0.003,
                2.0,
                0.001,
                0.003,
                0.001,
                0.002,
                60.0,
                0.003,
                0.002,
                0.002
            ],
            "resampled": [
                "0 <- 2.5",
                "1 <- 1.9",
                "2 <- 2.2",
                "3 <- 3.2",
                "4 <- 1.6",
                "5 <- 3.8",
                "6 <- 3.8",
                "7 <- 1.9",
                "8 <- 2.2",
                "9 <- 3.8"
            ],
            "resampled_steps": [
                "2 * 1 = 2 (left: 1 2 12)",
                "2 * 1 = 2 (left: 2 2 12)",
                "1 * 1 = 1 (left: 1 2 12)\n1 * 2 = 2 (left: 2 12)",
                "1 * 1 = 1 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "2 * 6 = 12 (left: 1 12 12)",
                "2 * 1 = 2 (left: 1 2 12)",
                "2 * 1 = 2 (left: 1 2 12)",
                "2 * 1 = 2 (left: 2 2 12)",
                "1 * 1 = 1 (left: 1 2 12)\n1 * 2 = 2 (left: 2 12)",
                "2 * 1 = 2 (left: 1 2 12)"
            ]
        },
        "step_5": {
            "steps": [
                "2 * 1 = 2 (left: 1 2 12)\nInput: 3 11",
                "2 * 1 = 2 (left: 2 2 12)\n1 + 2 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 2 12)\n1 * 2 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "2 * 6 = 12 (left: 1 12 12)\n12 + 1 = 13 (left: 1 13)",
                "2 * 1 = 2 (left: 1 2 12)\nPossible next steps:",
                "2 * 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "2 * 1 = 2 (left: 2 2 12)\n2 / 2 = 1 (left: 1 12)",
                "1 * 1 = 1 (left: 1 2 12)\n1 * 2 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14) ",
                "2 * 1 = 2 (left: 1 2 12)\n2 - 1 = 1 (left: 1 12)"
            ],
            "values": [
                0.003,
                21.001,
                0.0,
                0.003,
                0.003,
                0.003,
                41.0,
                2.001,
                0.003,
                2.0
            ],
            "resampled": [
                "0 <- 3.8",
                "1 <- 3.9",
                "2 <- 2.5",
                "3 <- 5.6",
                "4 <- 1.4",
                "5 <- 5.6",
                "6 <- 2.2",
                "7 <- 5.6",
                "8 <- 5.6",
                "9 <- 1.9"
            ],
            "resampled_steps": [
                "2 * 1 = 2 (left: 1 2 12)",
                "2 * 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "2 * 1 = 2 (left: 1 2 12)",
                "2 * 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "1 * 1 = 1 (left: 1 2 12)",
                "2 * 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "1 * 1 = 1 (left: 1 2 12)\n1 * 2 = 2 (left: 2 12)",
                "2 * 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "2 * 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "2 * 1 = 2 (left: 2 2 12)"
            ]
        },
        "step_6": {
            "steps": [
                "2 * 1 = 2 (left: 1 2 12)\n12 - 1 = 11 (left: 2 11)",
                "2 * 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n1 ^ 10 = 1 (left: 10)",
                "2 * 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "2 * 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 12)\nInput: 3 12",
                "2 * 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 12)\n1 * 2 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "2 * 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n1 + 10 = 11 (left: 11)",
                "2 * 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 - 10 = 0 (left: 0)",
                "2 * 1 = 2 (left: 2 2 12)\nInput: 4 4 10"
            ],
            "values": [
                0.002,
                0.001,
                60.0,
                0.002,
                0.003,
                0.0,
                0.003,
                0.002,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 4.6",
                "1 <- 3.2",
                "2 <- 5.6",
                "3 <- 6.2",
                "4 <- 2.5",
                "5 <- 4.6",
                "6 <- 3.8",
                "7 <- 5.6",
                "8 <- 1.6",
                "9 <- 4.6"
            ],
            "resampled_steps": [
                "2 * 1 = 2 (left: 1 2 12)\n1 * 12 = 12 (left: 2 12)",
                "1 * 1 = 1 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "2 * 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "2 * 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "2 * 1 = 2 (left: 1 2 12)",
                "2 * 1 = 2 (left: 1 2 12)\n1 * 12 = 12 (left: 2 12)",
                "2 * 1 = 2 (left: 1 2 12)",
                "2 * 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "2 * 6 = 12 (left: 1 12 12)",
                "2 * 1 = 2 (left: 1 2 12)\n1 * 12 = 12 (left: 2 12)"
            ]
        },
        "step_7": {
            "steps": [
                "2 * 1 = 2 (left: 1 2 12)\n1 * 12 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "2 * 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n1 + 10 = 11 (left: 11)",
                "2 * 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "2 * 1 = 2 (left: 1 2 12)\n2 + 12 = 14 (left: 1 14)",
                "2 * 1 = 2 (left: 1 2 12)\n1 * 12 = 12 (left: 2 12)\n12 + 2 = 14 (left: 14)",
                "2 * 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "2 * 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "2 * 6 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12)",
                "2 * 1 = 2 (left: 1 2 12)\n1 * 12 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)"
            ],
            "values": [
                60.0,
                0.001,
                0.001,
                60.0,
                0.001,
                0.003,
                60.0,
                0.002,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 6.2",
                "1 <- 7.9",
                "2 <- 7.9",
                "3 <- 6.2",
                "4 <- 7.0",
                "5 <- 7.6",
                "6 <- 3.8",
                "7 <- 7.6",
                "8 <- 7.9",
                "9 <- 5.1"
            ],
            "resampled_steps": [
                "2 * 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "2 * 1 = 2 (left: 1 2 12)\n1 * 12 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "2 * 1 = 2 (left: 1 2 12)\n1 * 12 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "2 * 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "2 * 1 = 2 (left: 1 2 12)\n1 * 12 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "2 * 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "2 * 1 = 2 (left: 1 2 12)",
                "2 * 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "2 * 1 = 2 (left: 1 2 12)\n1 * 12 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "2 * 1 = 2 (left: 2 2 12)\n1 + 2 = 3 (left: 3 12)"
            ]
        },
        "step_8": {
            "steps": [
                "2 * 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "2 * 1 = 2 (left: 1 2 12)\n1 * 12 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (2 * 1) * (12) = 24",
                "2 * 1 = 2 (left: 1 2 12)\n1 * 12 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (2 * 1) * (1 * 12) = 24",
                "2 * 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 24 25)",
                "2 * 1 = 2 (left: 1 2 12)\n1 * 12 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (2 * 1) * (12) = 24",
                "2 * 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24 24)",
                "2 * 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "2 * 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)",
                "2 * 1 = 2 (left: 1 2 12)\n1 * 12 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (2 * 1) * (12) = 24",
                "2 * 1 = 2 (left: 2 2 12)\n1 + 2 = 3 (left: 3 12)\n12 - 3 = 9 (left: 9)"
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.24946000000000002
    },
    "6": {
        "input": "1 2 2 6",
        "step_1": {
            "steps": [
                "6 - 2 = 4 (left: 4 4)",
                "2 * 2 = 4 (left: 1 4 6)",
                "1 + 2 = 3 (left: 2 3 6)",
                "1 + 2 = 3 (left: 2 3 6)",
                "2 * 2 = 4 (left: 4 2 6)",
                "6 / 2 = 3 (left: 3 6)",
                "2 * 2 = 4 (left: 4 2 6)",
                "6 - 2 = 4 (left: 1 2 4)",
                "9 - 3 = 6 (left: 5 5 6)",
                "6 - 2 = 4 (left: 2 4 6)"
            ],
            "values": [
                1.001,
                60.0,
                3.0,
                60.0,
                1.002,
                20.0,
                1.002,
                2.001,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- 1.3",
                "4 <- 1.1",
                "5 <- 1.1",
                "6 <- INIT",
                "7 <- 1.1",
                "8 <- 1.3",
                "9 <- 1.3"
            ],
            "resampled_steps": [
                "2 * 2 = 4 (left: 1 4 6)",
                "1 + 2 = 3 (left: 2 3 6)",
                "1 + 2 = 3 (left: 2 3 6)",
                "1 + 2 = 3 (left: 2 3 6)",
                "2 * 2 = 4 (left: 1 4 6)",
                "2 * 2 = 4 (left: 1 4 6)",
                "",
                "2 * 2 = 4 (left: 1 4 6)",
                "1 + 2 = 3 (left: 2 3 6)",
                "1 + 2 = 3 (left: 2 3 6)"
            ]
        },
        "step_2": {
            "steps": [
                "2 * 2 = 4 (left: 1 4 6)\n9 / 3 = 3 (left: 3 6)",
                "1 + 2 = 3 (left: 2 3 6)\nInput: 4 9 12",
                "1 + 2 = 3 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)",
                "1 + 2 = 3 (left: 2 3 6)\n3 * 5 = 15 (left: 15 7)",
                "2 * 2 = 4 (left: 1 4 6)\n3 - 2 = 1 (left: 1 10)",
                "2 * 2 = 4 (left: 1 4 6)\nInput: 3 9 12 6",
                "Input: 5 5 3 15",
                "2 * 2 = 4 (left: 1 4 6)\n6 - 1 = 5 (left: 4 5)",
                "1 + 2 = 3 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)",
                "1 + 2 = 3 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)"
            ],
            "values": [
                2.001,
                0.003,
                1.0,
                0.001,
                60.0,
                0.003,
                0.003,
                3.0,
                41.0,
                3.0
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- 2.4",
                "2 <- 2.4",
                "3 <- 1.5",
                "4 <- 1.1",
                "5 <- INIT",
                "6 <- 1.3",
                "7 <- 2.4",
                "8 <- 2.4",
                "9 <- 2.4"
            ],
            "resampled_steps": [
                "2 * 2 = 4 (left: 1 4 6)\n3 - 2 = 1 (left: 1 10)",
                "2 * 2 = 4 (left: 1 4 6)\n3 - 2 = 1 (left: 1 10)",
                "2 * 2 = 4 (left: 1 4 6)\n3 - 2 = 1 (left: 1 10)",
                "6 / 2 = 3 (left: 3 6)",
                "2 * 2 = 4 (left: 1 4 6)",
                "",
                "1 + 2 = 3 (left: 2 3 6)",
                "2 * 2 = 4 (left: 1 4 6)\n3 - 2 = 1 (left: 1 10)",
                "2 * 2 = 4 (left: 1 4 6)\n3 - 2 = 1 (left: 1 10)",
                "2 * 2 = 4 (left: 1 4 6)\n3 - 2 = 1 (left: 1 10)"
            ]
        },
        "step_3": {
            "steps": [
                "2 * 2 = 4 (left: 1 4 6)\n3 - 2 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "2 * 2 = 4 (left: 1 4 6)\n3 - 2 = 1 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "2 * 2 = 4 (left: 1 4 6)\n3 - 2 = 1 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "6 / 2 = 3 (left: 3 6)\n3 + 6 = 9 (left: 9)",
                "2 * 2 = 4 (left: 1 4 6)\n1 + 4 = 5 (left: 5 6)",
                "6 / 2 = 3 (left: 2 4 3)",
                "1 + 2 = 3 (left: 2 3 6)\n5 / 3 = 1.67 (left: 1.67 7)",
                "2 * 2 = 4 (left: 1 4 6)\n3 - 2 = 1 (left: 1 10)\n1 + 10 = 11 (left: 10)",
                "2 * 2 = 4 (left: 1 4 6)\n3 - 2 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "2 * 2 = 4 (left: 1 4 6)\n3 - 2 = 1 (left: 1 10)\n10 / 1 = 10 (left: 10)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.002,
                1.001,
                60.0,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- 1.0",
                "2 <- 3.5",
                "3 <- 1.7",
                "4 <- 1.1",
                "5 <- 2.4",
                "6 <- 1.5",
                "7 <- 1.5",
                "8 <- 2.4",
                "9 <- 1.3"
            ],
            "resampled_steps": [
                "2 * 2 = 4 (left: 1 4 6)\n3 - 2 = 1 (left: 1 10)",
                "6 - 2 = 4 (left: 4 4)",
                "6 / 2 = 3 (left: 2 4 3)",
                "6 - 2 = 4 (left: 1 2 4)",
                "2 * 2 = 4 (left: 1 4 6)",
                "2 * 2 = 4 (left: 1 4 6)\n3 - 2 = 1 (left: 1 10)",
                "6 / 2 = 3 (left: 3 6)",
                "6 / 2 = 3 (left: 3 6)",
                "2 * 2 = 4 (left: 1 4 6)\n3 - 2 = 1 (left: 1 10)",
                "1 + 2 = 3 (left: 2 3 6)"
            ]
        },
        "step_4": {
            "steps": [
                "2 * 2 = 4 (left: 1 4 6)\n3 - 2 = 1 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "6 - 2 = 4 (left: 4 4)\n4 / 4 = 1 (left: 1)",
                "6 / 2 = 3 (left: 2 4 3)\n6 + 5 = 11 (left: 11 7)",
                "6 - 2 = 4 (left: 1 2 4)\n6 - 3 = 3 (left: 3 9)",
                "2 * 2 = 4 (left: 1 4 6)\n9 - 3 = 6 (left: 6 12 15)",
                "2 * 2 = 4 (left: 1 4 6)\n3 - 2 = 1 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)",
                "6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)",
                "2 * 2 = 4 (left: 1 4 6)\n3 - 2 = 1 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "1 + 2 = 3 (left: 2 3 6)\n5 + 5 = 10 (left: 5 10)"
            ],
            "values": [
                0.003,
                0.003,
                0.001,
                0.003,
                0.003,
                0.001,
                20.001,
                60.0,
                0.001,
                20.001
            ],
            "resampled": [
                "0 <- 4.7",
                "1 <- 2.4",
                "2 <- 4.9",
                "3 <- 3.5",
                "4 <- 3.5",
                "5 <- 4.9",
                "6 <- 4.7",
                "7 <- 2.8",
                "8 <- INIT",
                "9 <- 2.4"
            ],
            "resampled_steps": [
                "6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)",
                "2 * 2 = 4 (left: 1 4 6)\n3 - 2 = 1 (left: 1 10)",
                "1 + 2 = 3 (left: 2 3 6)\n5 + 5 = 10 (left: 5 10)",
                "6 / 2 = 3 (left: 2 4 3)",
                "6 / 2 = 3 (left: 2 4 3)",
                "1 + 2 = 3 (left: 2 3 6)\n5 + 5 = 10 (left: 5 10)",
                "6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)",
                "1 + 2 = 3 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)",
                "",
                "2 * 2 = 4 (left: 1 4 6)\n3 - 2 = 1 (left: 1 10)"
            ]
        },
        "step_5": {
            "steps": [
                "6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)\nThere are no possible next steps with the number 18.",
                "2 * 2 = 4 (left: 1 4 6)\n3 - 2 = 1 (left: 1 10)\n3 / 5 = 0.6 (left: 5)",
                "1 + 2 = 3 (left: 2 3 6)\n5 + 5 = 10 (left: 5 10)\n10 / 5 = 2 (left: 2 10) ",
                "6 / 2 = 3 (left: 2 4 3)\n4 - 2 = 2 (left: 2 3)",
                "6 / 2 = 3 (left: 2 4 3)\n2 * 4 = 8 (left: 3 8)",
                "1 + 2 = 3 (left: 2 3 6)\n5 + 5 = 10 (left: 5 10)\nInput: 3 6 9",
                "6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)\nThere are no possible next steps with the input 18.",
                "1 + 2 = 3 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)\n6 / 3 = 2 (left: 2)",
                "6 - 2 = 4 (left: 4 2 4)",
                "2 * 2 = 4 (left: 1 4 6)\n3 - 2 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10)"
            ],
            "values": [
                0.003,
                0.003,
                3.0,
                0.002,
                60.0,
                0.003,
                0.003,
                0.002,
                21.001,
                0.002
            ],
            "resampled": [
                "0 <- 5.4",
                "1 <- 5.4",
                "2 <- 5.4",
                "3 <- 2.4",
                "4 <- 5.4",
                "5 <- 4.9",
                "6 <- 4.7",
                "7 <- 4.7",
                "8 <- 5.4",
                "9 <- 4.9"
            ],
            "resampled_steps": [
                "6 / 2 = 3 (left: 2 4 3)\n2 * 4 = 8 (left: 3 8)",
                "6 / 2 = 3 (left: 2 4 3)\n2 * 4 = 8 (left: 3 8)",
                "6 / 2 = 3 (left: 2 4 3)\n2 * 4 = 8 (left: 3 8)",
                "2 * 2 = 4 (left: 1 4 6)\n3 - 2 = 1 (left: 1 10)",
                "6 / 2 = 3 (left: 2 4 3)\n2 * 4 = 8 (left: 3 8)",
                "1 + 2 = 3 (left: 2 3 6)\n5 + 5 = 10 (left: 5 10)",
                "6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)",
                "6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)",
                "6 / 2 = 3 (left: 2 4 3)\n2 * 4 = 8 (left: 3 8)",
                "1 + 2 = 3 (left: 2 3 6)\n5 + 5 = 10 (left: 5 10)"
            ]
        },
        "step_6": {
            "steps": [
                "6 / 2 = 3 (left: 2 4 3)\n2 * 4 = 8 (left: 3 8)\n3 + 8 = 11 (left: 11)",
                "6 / 2 = 3 (left: 2 4 3)\n2 * 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "6 / 2 = 3 (left: 2 4 3)\n2 * 4 = 8 (left: 3 8)\n5 - 4 = 1 (left: 1)",
                "2 * 2 = 4 (left: 1 4 6)\n3 - 2 = 1 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "6 / 2 = 3 (left: 2 4 3)\n2 * 4 = 8 (left: 3 8)\n3 + 8 = 11 (left: 11)",
                "1 + 2 = 3 (left: 2 3 6)\n5 + 5 = 10 (left: 5 10)\n10 / 5 = 2 (left: 2)",
                "6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)\n18 / 2 = 9",
                "6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)\nThere are no possible next steps with the number 18.",
                "6 / 2 = 3 (left: 2 4 3)\n2 * 4 = 8 (left: 3 8)\n3 + 8 = 11 (left: 11)",
                "1 + 2 = 3 (left: 2 3 6)\n5 + 5 = 10 (left: 5 10)\n10 / 5 = 2 (left: 2)"
            ],
            "values": [
                0.002,
                40.0,
                0.001,
                0.002,
                0.001,
                0.002,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 2.4",
                "2 <- 4.7",
                "3 <- 1.1",
                "4 <- 4.6",
                "5 <- 2.8",
                "6 <- 4.7",
                "7 <- 4.9",
                "8 <- 5.4",
                "9 <- 5.8"
            ],
            "resampled_steps": [
                "1 + 2 = 3 (left: 2 3 6)",
                "2 * 2 = 4 (left: 1 4 6)\n3 - 2 = 1 (left: 1 10)",
                "6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)",
                "2 * 2 = 4 (left: 1 4 6)",
                "6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)",
                "1 + 2 = 3 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)",
                "6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)",
                "1 + 2 = 3 (left: 2 3 6)\n5 + 5 = 10 (left: 5 10)",
                "6 / 2 = 3 (left: 2 4 3)\n2 * 4 = 8 (left: 3 8)",
                "6 - 2 = 4 (left: 4 2 4)"
            ]
        },
        "step_7": {
            "steps": [
                "1 + 2 = 3 (left: 2 3 6)\n6 - 2 = 4 (left: 4 6)",
                "2 * 2 = 4 (left: 1 4 6)\n3 - 2 = 1 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)\n18 / 2 = 9",
                "2 * 2 = 4 (left: 1 4 6)\n6 / 4 = 1.5 (left: 1 1.5)",
                "6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)\n18 + 2 = 20 (left: 20)",
                "1 + 2 = 3 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)\n6 - 3 = 3 (left: 3)",
                "6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)\n18 / 8 = 2.25 (left: 8)",
                "1 + 2 = 3 (left: 2 3 6)\n5 + 5 = 10 (left: 5 10)\n5 - 10 = -5 (left: -5)",
                "6 / 2 = 3 (left: 2 4 3)\n2 * 4 = 8 (left: 3 8)\n3 + 8 = 11 (left: 8)",
                "6 - 2 = 4 (left: 4 2 4)\nPossible next steps:"
            ],
            "values": [
                60.0,
                0.003,
                0.003,
                0.003,
                0.002,
                0.0,
                0.003,
                0.002,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 5.4",
                "1 <- 5.4",
                "2 <- 3.5",
                "3 <- 7.0",
                "4 <- 1.3",
                "5 <- 7.0",
                "6 <- 5.4",
                "7 <- 2.4",
                "8 <- 5.4",
                "9 <- 7.0"
            ],
            "resampled_steps": [
                "6 / 2 = 3 (left: 2 4 3)\n2 * 4 = 8 (left: 3 8)",
                "6 / 2 = 3 (left: 2 4 3)\n2 * 4 = 8 (left: 3 8)",
                "6 / 2 = 3 (left: 2 4 3)",
                "1 + 2 = 3 (left: 2 3 6)\n6 - 2 = 4 (left: 4 6)",
                "1 + 2 = 3 (left: 2 3 6)",
                "1 + 2 = 3 (left: 2 3 6)\n6 - 2 = 4 (left: 4 6)",
                "6 / 2 = 3 (left: 2 4 3)\n2 * 4 = 8 (left: 3 8)",
                "2 * 2 = 4 (left: 1 4 6)\n3 - 2 = 1 (left: 1 10)",
                "6 / 2 = 3 (left: 2 4 3)\n2 * 4 = 8 (left: 3 8)",
                "1 + 2 = 3 (left: 2 3 6)\n6 - 2 = 4 (left: 4 6)"
            ]
        },
        "step_8": {
            "steps": [
                "6 / 2 = 3 (left: 2 4 3)\n2 * 4 = 8 (left: 3 8)\n8 / 3 = 2.67 (left: 2.67)",
                "6 / 2 = 3 (left: 2 4 3)\n2 * 4 = 8 (left: 3 8)\n5 + 5 = 10 (left: 10)",
                "6 / 2 = 3 (left: 2 4 3)\n4 / 2 = 2 (left: 2 2)",
                "1 + 2 = 3 (left: 2 3 6)\n6 - 2 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)",
                "1 + 2 = 3 (left: 2 3 6)\n5 + 6 = 11 (left: 4 11)",
                "1 + 2 = 3 (left: 2 3 6)\n6 - 2 = 4 (left: 4 6)\n3 + 9 = 12 (left: 12)",
                "6 / 2 = 3 (left: 2 4 3)\n2 * 4 = 8 (left: 3 8)\n8 / 3 = 2.67 (left: 2.67)",
                "2 * 2 = 4 (left: 1 4 6)\n3 - 2 = 1 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "6 / 2 = 3 (left: 2 4 3)\n2 * 4 = 8 (left: 3 8)\nPossible next steps:",
                "1 + 2 = 3 (left: 2 3 6)\n6 - 2 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)"
            ],
            "values": [
                0.003,
                0.002,
                1.001,
                0.002,
                0.003,
                0.003,
                0.002,
                0.001,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 5.8",
                "1 <- 4.6",
                "2 <- 7.0",
                "3 <- 3.5",
                "4 <- 2.4",
                "5 <- 7.0",
                "6 <- 7.0",
                "7 <- 7.0",
                "8 <- 1.5",
                "9 <- 4.9"
            ],
            "resampled_steps": [
                "6 - 2 = 4 (left: 4 2 4)",
                "6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)",
                "1 + 2 = 3 (left: 2 3 6)\n6 - 2 = 4 (left: 4 6)",
                "6 / 2 = 3 (left: 2 4 3)",
                "2 * 2 = 4 (left: 1 4 6)\n3 - 2 = 1 (left: 1 10)",
                "1 + 2 = 3 (left: 2 3 6)\n6 - 2 = 4 (left: 4 6)",
                "1 + 2 = 3 (left: 2 3 6)\n6 - 2 = 4 (left: 4 6)",
                "1 + 2 = 3 (left: 2 3 6)\n6 - 2 = 4 (left: 4 6)",
                "6 / 2 = 3 (left: 3 6)",
                "1 + 2 = 3 (left: 2 3 6)\n5 + 5 = 10 (left: 5 10)"
            ]
        },
        "step_9": {
            "steps": [
                "6 - 2 = 4 (left: 4 2 4)\n4 * 2 = 8 (left: 8 4)",
                "6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)\nThere are no possible next steps as there are no other numbers given to perform operations with. The input number 18 is the final result.",
                "1 + 2 = 3 (left: 2 3 6)\n6 - 2 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)",
                "6 / 2 = 3 (left: 2 4 3)\n3 + 2 = 5 (left: 4 5)",
                "2 * 2 = 4 (left: 1 4 6)\n3 - 2 = 1 (left: 1 10)\n10 - 1 = 9 (left: 9) ",
                "1 + 2 = 3 (left: 2 3 6)\n6 - 2 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)",
                "1 + 2 = 3 (left: 2 3 6)\n6 - 2 = 4 (left: 4 6)\n3 * 10 = 30 (left: 30 5)",
                "1 + 2 = 3 (left: 2 3 6)\n6 - 2 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)",
                "6 / 2 = 3 (left: 3 6)\n6 - 3 = 3 (left: 3)",
                "1 + 2 = 3 (left: 2 3 6)\n5 + 5 = 10 (left: 5 10)\n10 / 5 = 2 (left: 2 10)"
            ],
            "values": [
                0.003,
                0.003,
                0.002,
                40.0,
                0.001,
                0.0,
                40.001,
                0.002,
                0.003,
                2.0
            ],
            "resampled": [
                "0 <- 9.6",
                "1 <- 4.7",
                "2 <- 1.1",
                "3 <- 9.6",
                "4 <- 9.6",
                "5 <- 4.7",
                "6 <- 2.8",
                "7 <- 9.6",
                "8 <- 3.4",
                "9 <- 5.4"
            ],
            "resampled_steps": [
                "1 + 2 = 3 (left: 2 3 6)\n6 - 2 = 4 (left: 4 6)\n3 * 10 = 30 (left: 30 5)",
                "6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)",
                "2 * 2 = 4 (left: 1 4 6)",
                "1 + 2 = 3 (left: 2 3 6)\n6 - 2 = 4 (left: 4 6)\n3 * 10 = 30 (left: 30 5)",
                "1 + 2 = 3 (left: 2 3 6)\n6 - 2 = 4 (left: 4 6)\n3 * 10 = 30 (left: 30 5)",
                "6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)",
                "1 + 2 = 3 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)",
                "1 + 2 = 3 (left: 2 3 6)\n6 - 2 = 4 (left: 4 6)\n3 * 10 = 30 (left: 30 5)",
                "2 * 2 = 4 (left: 1 4 6)\n1 + 4 = 5 (left: 5 6)",
                "6 / 2 = 3 (left: 2 4 3)\n2 * 4 = 8 (left: 3 8)"
            ]
        },
        "step_10": {
            "steps": [
                "1 + 2 = 3 (left: 2 3 6)\n6 - 2 = 4 (left: 4 6)\n3 * 10 = 30 (left: 30 5)\n30 / 5 = 6 (left: 5)",
                "6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)\n18 * 8 = 144 (left: 8)",
                "2 * 2 = 4 (left: 1 4 6)\n1 + 4 = 5 (left: 5 6)",
                "1 + 2 = 3 (left: 2 3 6)\n6 - 2 = 4 (left: 4 6)\n3 * 10 = 30 (left: 30 5)\n30 * 5 = 150 (left: 150)",
                "1 + 2 = 3 (left: 2 3 6)\n6 - 2 = 4 (left: 4 6)\n3 * 10 = 30 (left: 30 5)\n30 + 5 = 35 (left: 5 35)",
                "6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)\n18 - 8 = 10 (left: 10)",
                "1 + 2 = 3 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)\n10 - 5 = 5 (left: 5)",
                "1 + 2 = 3 (left: 2 3 6)\n6 - 2 = 4 (left: 4 6)\n3 * 10 = 30 (left: 30 5)\n30 / 5 = 6 (left: 6)",
                "2 * 2 = 4 (left: 1 4 6)\n1 + 4 = 5 (left: 5 6)\n5 / 6 = 0.83333 (left: 0.83333)",
                "6 / 2 = 3 (left: 2 4 3)\n2 * 4 = 8 (left: 3 8)\n8 / 3 = 2.66667 (left: 2.66667)"
            ],
            "values": [
                0.003,
                0.002,
                1.001,
                0.003,
                0.003,
                0.002,
                0.001,
                0.002,
                0.001,
                0.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.2960705
    },
    "7": {
        "input": "1 1 10 12",
        "step_1": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12)",
                "12 - 10 = 2 (left: 1 2 12)",
                "1 - 1 = 0 (left: 0 10 12)",
                "10 + 1 = 11 (left: 1 11 12)",
                "1 - 1 = 0 (left: 0 10 12)",
                "1 - 1 = 0 (left: 0 10 12)",
                "1 / 1 = 1 (left: 1 10 12)",
                "1 - 1 = 0 (left: 0 10 12)",
                "1 + 1 = 2 (left: 2 10 12)",
                "1 + 1 = 2 (left: 2 10 12)"
            ],
            "values": [
                40.001,
                60.0,
                2.0,
                1.001,
                1.002,
                0.003,
                2.0,
                2.001,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.0",
                "2 <- 1.1",
                "3 <- 1.6",
                "4 <- 1.4",
                "5 <- 1.0",
                "6 <- 1.1",
                "7 <- INIT",
                "8 <- 1.1",
                "9 <- INIT"
            ],
            "resampled_steps": [
                "",
                "12 - 10 = 2 (left: 1 2 12)",
                "12 - 10 = 2 (left: 1 2 12)",
                "1 / 1 = 1 (left: 1 10 12)",
                "1 - 1 = 0 (left: 0 10 12)",
                "12 - 10 = 2 (left: 1 2 12)",
                "12 - 10 = 2 (left: 1 2 12)",
                "",
                "12 - 10 = 2 (left: 1 2 12)",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "12 / 1 = 12 (left: 1 10 12)",
                "12 - 10 = 2 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)",
                "12 - 10 = 2 (left: 1 2 12)\n2 + 1 = 3 (left: 3)",
                "1 / 1 = 1 (left: 1 10 12)\n12 - 10 = 2 (left: 1 2)",
                "1 - 1 = 0 (left: 0 10 12)\nPossible next steps:",
                "12 - 10 = 2 (left: 1 2 12)\n2 - 1 = 1 (left: 1 2)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "1 + 1 = 2 (left: 2 10 12)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "12 / 1 = 12 (left: 1 10 12)"
            ],
            "values": [
                1.002,
                0.003,
                0.001,
                40.001,
                0.003,
                1.001,
                60.0,
                0.003,
                60.0,
                1.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 2.6",
                "2 <- 1.0",
                "3 <- INIT",
                "4 <- 2.6",
                "5 <- 2.8",
                "6 <- INIT",
                "7 <- 1.0",
                "8 <- 2.6",
                "9 <- 1.1"
            ],
            "resampled_steps": [
                "",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "12 - 10 = 2 (left: 1 2 12)",
                "",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "",
                "12 - 10 = 2 (left: 1 2 12)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "12 - 10 = 2 (left: 1 2 12)"
            ]
        },
        "step_3": {
            "steps": [
                "1 * 1 = 1 (left: 1 10 12)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)",
                "12 - 10 = 2 (left: 1 2 12)\n10 - 5 = 5 (left: 3 5 7)",
                "12 - 10 = 2 (left: 1 1 2)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "27 / 3 = 9 (left: 9 9 27)",
                "12 - 10 = 2 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 - 24 = 0 (left: 1 0)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)"
            ],
            "values": [
                1.001,
                20.001,
                3.0,
                3.0,
                60.0,
                0.002,
                1.002,
                0.003,
                20.002,
                60.0
            ],
            "resampled": [
                "0 <- 2.3",
                "1 <- 1.1",
                "2 <- 2.6",
                "3 <- 2.8",
                "4 <- 3.1",
                "5 <- 3.9",
                "6 <- 3.8",
                "7 <- 3.9",
                "8 <- 3.8",
                "9 <- 3.8"
            ],
            "resampled_steps": [
                "1 / 1 = 1 (left: 1 10 12)\n12 - 10 = 2 (left: 1 2)",
                "12 - 10 = 2 (left: 1 2 12)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 - 24 = 0 (left: 1 0)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 - 24 = 0 (left: 1 0)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 - 24 = 0 (left: 1 0)"
            ]
        },
        "step_4": {
            "steps": [
                "1 / 1 = 1 (left: 1 10 12)\n12 - 10 = 2 (left: 1 2)\n2 - 1 = 1 (left: 1)",
                "12 - 10 = 2 (left: 1 2 12)\n2 + 12 = 14 (left: 1 14)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 + 1 = 25 (left: 25)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)\n25 - 2 = 23 (left: 2 23 25)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 - 24 = 0 (left: 1 0)\n1 / 0 = undefined",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 - 24 = 0 (left: 1 0)\n1 + 0 = 1",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 - 24 = 0 (left: 1 0)\n1 * 0 = 0 (left: 0)"
            ],
            "values": [
                0.002,
                0.003,
                40.0,
                0.002,
                1.002,
                0.003,
                0.003,
                60.0,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 4.7",
                "1 <- 4.2",
                "2 <- 1.1",
                "3 <- 3.4",
                "4 <- 3.9",
                "5 <- 2.6",
                "6 <- 1.0",
                "7 <- INIT",
                "8 <- 1.0",
                "9 <- 3.4"
            ],
            "resampled_steps": [
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 + 1 = 25 (left: 25)",
                "12 - 10 = 2 (left: 1 2 12)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "12 - 10 = 2 (left: 1 2 12)",
                "",
                "12 - 10 = 2 (left: 1 2 12)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)"
            ]
        },
        "step_5": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)\nAnswer: (1 * (12 - 10)) * 24 = 24",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 + 1 = 25 (left: 25)\n25 - 8 = 17 (left: 17)",
                "12 - 10 = 2 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)\n25 / 8 = 3.125 (left: 8)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n2 * 30 = 60 (left: 10 60)",
                "12 - 10 = 2 (left: 1 2 12)\n12 / 1 = 12 (left: 2 12)",
                "12 / 1 = 12 (left: 1 10 12)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)\n25 / 2 = 12.5 (left: 2)"
            ],
            "values": [
                0.003,
                0.002,
                60.0,
                0.003,
                60.0,
                0.003,
                60.0,
                1.002,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 2.6",
                "1 <- 4.2",
                "2 <- 5.2",
                "3 <- 3.9",
                "4 <- 5.4",
                "5 <- 2.6",
                "6 <- 3.1",
                "7 <- 2.8",
                "8 <- 2.3",
                "9 <- 5.8"
            ],
            "resampled_steps": [
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 + 1 = 25 (left: 25)",
                "12 - 10 = 2 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "1 / 1 = 1 (left: 1 10 12)\n12 - 10 = 2 (left: 1 2)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)"
            ]
        },
        "step_6": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 + 1 = 25 (left: 25)\n25 + 25 = 50",
                "12 - 10 = 2 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n6 - 1 = 5 (left: 5)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 24)\nAnswer: (1 * 12) + (10 - 1) = 24",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)\n25 - 2 = 23 (left: 2)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n1 + 10 = 11 (left: 11) ",
                "1 / 1 = 1 (left: 1 10 12)\n12 - 10 = 2 (left: 1 2)\n2 / 1 = 2 (left: 2)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 + 1 = 25 (left: 25)"
            ],
            "values": [
                20.002,
                0.003,
                0.002,
                40.0,
                60.0,
                40.0,
                0.003,
                0.002,
                0.002,
                40.001
            ],
            "resampled": [
                "0 <- 6.9",
                "1 <- 2.6",
                "2 <- 2.6",
                "3 <- 6.9",
                "4 <- 1.1",
                "5 <- 6.4",
                "6 <- 2.6",
                "7 <- 4.7",
                "8 <- 5.4",
                "9 <- 3.4"
            ],
            "resampled_steps": [
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 + 1 = 25 (left: 25)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 + 1 = 25 (left: 25)",
                "12 - 10 = 2 (left: 1 2 12)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 24)\nAnswer: (1 * 12) + (10 - 1) = 24",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)"
            ]
        },
        "step_7": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 + 1 = 25 (left: 25)\n25 / 2 = 12.5 (left: 12.5)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 + 1 = 25 (left: 25)\n25 + 25 = 50",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 24)\nAnswer: (1 * 12) + (10 - 1) = 24\nInput: 3 3 4 7\nSteps:\n3 + 7 = 10 (left: 3 4 10)\n4 - 3 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10)\n10 + 10 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: (3 + 7) + (4 - 3) * 10 = 24",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 + 1 = 25 (left: 25)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)\nAnswer: (1 * (1 + 10)) * 12 = 24",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 24)\nAnswer: (1 + (1 * 10)) + 12 = 24",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)\nThere are no possible next steps with only one number provided."
            ],
            "values": [
                0.003,
                60.0,
                60.0,
                0.003,
                60.0,
                60.0,
                40.001,
                60.0,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 7.1",
                "1 <- 2.6",
                "2 <- 2.8",
                "3 <- 7.4",
                "4 <- 5.2",
                "5 <- 5.6",
                "6 <- 7.1",
                "7 <- 5.8",
                "8 <- 5.2",
                "9 <- 1.2"
            ],
            "resampled_steps": [
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "12 - 10 = 2 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "12 - 10 = 2 (left: 1 2 12)\n12 / 1 = 12 (left: 2 12)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "12 - 10 = 2 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "1 - 1 = 0 (left: 0 10 12)"
            ]
        },
        "step_8": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)\nAnswer: (1 * (1 * (10 - 12))) = 24",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n6 - 1 = 5 (left: 5)",
                "12 - 10 = 2 (left: 1 2 12)\n12 / 1 = 12 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)\nAnswer: 1 * (1 + (10 - 12)) * 24 = 24",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 24 25)",
                "12 - 10 = 2 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "1 - 1 = 0 (left: 0 10 12)\n12 - 10 = 2 (left: 0 2)"
            ],
            "values": [
                20.002,
                60.0,
                0.002,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                20.002
            ],
            "resampled": [
                "0 <- 6.4",
                "1 <- 3.9",
                "2 <- 5.6",
                "3 <- 6.4",
                "4 <- 6.9",
                "5 <- 2.6",
                "6 <- 4.2",
                "7 <- 6.4",
                "8 <- 7.6",
                "9 <- 6.4"
            ],
            "resampled_steps": [
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 24)\nAnswer: (1 * 12) + (10 - 1) = 24",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "12 - 10 = 2 (left: 1 2 12)\n12 / 1 = 12 (left: 2 12)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 24)\nAnswer: (1 * 12) + (10 - 1) = 24",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 + 1 = 25 (left: 25)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 + 1 = 25 (left: 25)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 24)\nAnswer: (1 * 12) + (10 - 1) = 24",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 + 1 = 25 (left: 25)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 24)\nAnswer: (1 * 12) + (10 - 1) = 24"
            ]
        },
        "step_9": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 24)\nAnswer: (1 * 12) + (10 - 1) = 24\nInput: 3 3 6 8\nSteps:\n3 * 3 = 9 (left: 6 8 9)\n9 - 6 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (3 * 3) * (6 - 8) = 24",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)",
                "12 - 10 = 2 (left: 1 2 12)\n12 / 1 = 12 (left: 2 12)\n2 - 12 = -10 (left: -10)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 24)\nAnswer: (1 * 12) + (10 - 1) = 24\nInput: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n3 + 5 = 8 (left: 8 12)\n8 * 12 = 96 (left: 96)\nAnswer: (3 * 4) * (5 + 3) = 24",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 + 1 = 25 (left: 25)\n25 * 5 = 125 (left: 125)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 + 1 = 25 (left: 25)\n25 + 8 = 33 (left: 8)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 24)\nAnswer: (1 * 12) + (10 - 1) = 24\nInput: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n4 * 3 = 12 (left: 8 12)\n12 * 2 = 24 (left: 24)\nAnswer: (3 + 5) * (3 * 4) = 24",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 + 1 = 25 (left: 25)\n25 - 2 = 23 (left: 2)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 24)\nAnswer: (1 * 12) + (10 - 1) = 24\nInput: 3 3 5 8\nSteps:\n3 * 3 = 9 (left: 5 8 9)\n9 - 5 = 4 (left: 4 8)\n4 * 8 = 32 (left: 32)\nAnswer: (3 * 3) * (5 - 8) = 24"
            ],
            "values": [
                60.0,
                0.003,
                0.002,
                40.0,
                0.003,
                60.0,
                0.003,
                60.0,
                0.002,
                60.0
            ],
            "resampled": [
                "0 <- 7.7",
                "1 <- 5.6",
                "2 <- 7.7",
                "3 <- 7.5",
                "4 <- 7.2",
                "5 <- 8.1",
                "6 <- 7.7",
                "7 <- 6.0",
                "8 <- 5.6",
                "9 <- 7.5"
            ],
            "resampled_steps": [
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)\nAnswer: (1 * (1 + 10)) * 12 = 24",
                "12 - 10 = 2 (left: 1 2 12)\n12 / 1 = 12 (left: 2 12)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)\nAnswer: (1 * (1 + 10)) * 12 = 24",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 24)\nAnswer: (1 * 12) + (10 - 1) = 24\nInput: 3 3 4 7\nSteps:\n3 + 7 = 10 (left: 3 4 10)\n4 - 3 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10)\n10 + 10 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: (3 + 7) + (4 - 3) * 10 = 24",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)\nAnswer: (1 * (1 + 10)) * 12 = 24",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)",
                "12 - 10 = 2 (left: 1 2 12)\n12 / 1 = 12 (left: 2 12)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 24)\nAnswer: (1 * 12) + (10 - 1) = 24\nInput: 3 3 4 7\nSteps:\n3 + 7 = 10 (left: 3 4 10)\n4 - 3 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10)\n10 + 10 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: (3 + 7) + (4 - 3) * 10 = 24"
            ]
        },
        "step_10": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)\nAnswer: (1 * (1 + 10)) * 12 = 24\nInput: 3 3 5 7\nSteps:\n5 + 7 = 12 (left: 3 3 12)\n3 + 3 = 6 (left: 6 12)\n6 * 12 = 72 (left: 72)\nAnswer: (3 + 3) * (5 + 7) = 72",
                "12 - 10 = 2 (left: 1 2 12)\n12 / 1 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)\nAnswer: (1 * (1 + 10)) * 12 = 24\nInput: 3 3 6 7\nSteps:\n6 + 7 = 13 (left: 3 3 13)\n3 - 3 = 0 (left: 0 13)\n0 + 13 = 13 (left: 13)\n13 + 13 = 26 (left: 26)\n26 - 2 = 24 (left: 24)\nAnswer: ((3 + 7) * 3) - 2 = 24",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 24)\nAnswer: (1 * 12) + (10 - 1) = 24\nInput: 3 3 4 7\nSteps:\n3 + 7 = 10 (left: 3 4 10)\n4 - 3 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10)\n10 + 10 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: (3 + 7) + (4 - 3) * 10 = 24\nInput: 2 2 6 9\nSteps:\n2 * 9 = 18 (left: 2 6 18)\n2 * 6 = 12 (left: 12 18)\n12 + 18 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: (2 * 9) * ((2 * 6) + 6) = 24",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (12 - 10) * (1 * 1) = 24",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (1 + (1 * 10)) * 12 = 24",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)\nAnswer: (1 * (1 + 10)) * 12 = 24\nInput: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n3 * 6 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: (3 * 8) - (3 * 6) = 24",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)\n23 / 2 = 11.5 (left: 11.5)",
                "12 - 10 = 2 (left: 1 2 12)\n12 / 1 = 12 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "12 - 10 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 24)\nAnswer: (1 * 12) + (10 - 1) = 24\nInput: 3 3 4 7\nSteps:\n3 + 7 = 10 (left: 3 4 10)\n4 - 3 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10)\n10 + 10 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: (3 + 7) + (4 - 3) * 10 = 24\nInput: 2 3 6 7\nSteps:\n6 * 3 = 18 (left: 2 7 18)\n7 - 2 = 5 (left: 5 18)\n5 * 18 = 90 (left: 90)\n90 / 5 = 18 (left: 18)\n18 - 18 = 0 (left: 0)\n0 + 24 = 24 (left: 24)\nAnswer: (((2 * 3) * 6) + (7 - 2)) * 18 / 5 = 24"
            ],
            "values": [
                40.0,
                40.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                0.003,
                0.002,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.34396550000000004
    },
    "8": {
        "input": "2 2 10 10",
        "step_1": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "2 / 2 = 1 (left: 1 2 10)",
                "2 * 2 = 4 (left: 4 10 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "2 + 2 = 4 (left: 4 10 10)",
                "2 * 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)",
                "10 - 2 = 8 (left: 2 8 10)"
            ],
            "values": [
                2.001,
                1.002,
                3.0,
                2.001,
                21.001,
                2.001,
                21.001,
                0.003,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- 1.6",
                "1 <- 1.4",
                "2 <- 1.4",
                "3 <- INIT",
                "4 <- 1.6",
                "5 <- 1.6",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 1.2"
            ],
            "resampled_steps": [
                "2 + 2 = 4 (left: 4 10 10)",
                "2 * 2 = 4 (left: 4 10 10)",
                "2 * 2 = 4 (left: 4 10 10)",
                "",
                "2 + 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)",
                "",
                "",
                "",
                "10 / 2 = 5 (left: 2 5 10)"
            ]
        },
        "step_2": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 10 14)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)",
                "2 * 2 = 4 (left: 4 10 10)\n10 / 4 = 2.5 (left: 2.5 10 10)",
                "9 / 3 = 3 (left: 3 6 9)",
                "2 + 2 = 4 (left: 4 10 10)\n10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)",
                "2 * 2 = 4 (left: 4 10 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "2 + 2 = 4 (left: 4 10 10)",
                "10 / 2 = 5 (left: 2 5 10)\n2 * 5 = 10 (left: 10 10)"
            ],
            "values": [
                20.002,
                3.0,
                1.002,
                1.002,
                1.001,
                21.001,
                20.002,
                2.001,
                22.0,
                0.002
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- INIT",
                "2 <- 2.8",
                "3 <- 2.6",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 2.6",
                "7 <- INIT",
                "8 <- 2.5",
                "9 <- INIT"
            ],
            "resampled_steps": [
                "10 / 2 = 5 (left: 2 5 10)",
                "",
                "2 + 2 = 4 (left: 4 10 10)",
                "2 * 2 = 4 (left: 4 10 10)",
                "",
                "",
                "2 * 2 = 4 (left: 4 10 10)",
                "",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10)\n2 * 5 = 10 (left: 10 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 * 4 = 40 (left: 10 40)",
                "2 * 2 = 4 (left: 4 10 10)\n10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "2 + 2 = 4 (left: 4 10 10)",
                "2 * 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 10 14)",
                "10 / 2 = 5 (left: 2 5 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)",
                "10 / 2 = 5 (left: 2 5 10)"
            ],
            "values": [
                0.0,
                3.0,
                20.0,
                0.003,
                1.002,
                1.002,
                0.003,
                1.002,
                21.001,
                2.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 3.2",
                "2 <- 1.6",
                "3 <- 1.4",
                "4 <- 1.6",
                "5 <- INIT",
                "6 <- 2.6",
                "7 <- 3.8",
                "8 <- 1.6",
                "9 <- 1.6"
            ],
            "resampled_steps": [
                "",
                "2 + 2 = 4 (left: 4 10 10)\n10 * 4 = 40 (left: 10 40)",
                "2 + 2 = 4 (left: 4 10 10)",
                "2 * 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)",
                "",
                "2 * 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)",
                "2 + 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)"
            ]
        },
        "step_4": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 * 4 = 40 (left: 10 40)\n40 - 10 = 30 (left: 30)",
                "2 + 2 = 4 (left: 4 10 10)\n10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 4 6 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)\n25 - 5 = 20 (left: 20)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)",
                "2 + 2 = 4 (left: 4 10 10)\n9 - 3 = 6 (left: 6 9 15)"
            ],
            "values": [
                0.003,
                0.002,
                1.001,
                3.0,
                1.0,
                0.003,
                60.0,
                0.003,
                21.001,
                1.002
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 4.6",
                "2 <- 4.6",
                "3 <- 2.6",
                "4 <- INIT",
                "5 <- 2.0",
                "6 <- 3.8",
                "7 <- 4.6",
                "8 <- 4.6",
                "9 <- 2.6"
            ],
            "resampled_steps": [
                "2 * 2 = 4 (left: 4 10 10)\n10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 4 6 10)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 4 6 10)",
                "2 * 2 = 4 (left: 4 10 10)",
                "",
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 10 14)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 4 6 10)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 4 6 10)",
                "2 * 2 = 4 (left: 4 10 10)"
            ]
        },
        "step_5": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10)\n10 / 4 = 2.5 (left: 2.5 10 10)\n2.5 * 10 = 25 (left: 10 25)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 4 6 10)\n9 - 3 = 6 (left: 6 7)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 4 6 10)\nPossible next steps:",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)",
                "10 + 2 = 12 (left: 2 12 10)",
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 10 14)\n10 - 10 = 0 (left: 0 14)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)\n27 - 9 = 18 (left: 3 18 27)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 4 6 10)\n10 - 4 = 6 (left: 6 10)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 4 6 10)\n6 - 4 = 2 (left: 2 10)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10)"
            ],
            "values": [
                1.002,
                0.002,
                0.003,
                1.002,
                40.001,
                0.0,
                22.0,
                0.003,
                0.0,
                0.003
            ],
            "resampled": [
                "0 <- 2.5",
                "1 <- 5.4",
                "2 <- 4.8",
                "3 <- 4.6",
                "4 <- 2.5",
                "5 <- 2.1",
                "6 <- 4.2",
                "7 <- 4.6",
                "8 <- 3.8",
                "9 <- 5.4"
            ],
            "resampled_steps": [
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)",
                "10 + 2 = 12 (left: 2 12 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 4 6 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 4 6 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)",
                "10 + 2 = 12 (left: 2 12 10)"
            ]
        },
        "step_6": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 / 6 = 1.6666666666666667 (left: 1.6666666666666667 10 10)",
                "10 + 2 = 12 (left: 2 12 10)\n2 * 12 = 24 (left: 10 24)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n6 * 10 = 60 (left: 10 10 60)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 4 6 10)\n4 / 6 = 0.6666666666666666 (left: 0.6666666666666666 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n12 - 9 = 3 (left: 3 9 12)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 / 4 = 2.5 (left: 2.5 10 10)\n2.5 * 10 = 25 (left: 10 25)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 4 6 10)\n6 - 4 = 2 (left: 2 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)\nInput: 7 3 5",
                "10 + 2 = 12 (left: 2 12 10)\n12 - 10 = 2 (left: 2 10)"
            ],
            "values": [
                2.001,
                0.003,
                1.002,
                3.0,
                20.002,
                0.002,
                0.003,
                3.0,
                0.003,
                2.0
            ],
            "resampled": [
                "0 <- 5.4",
                "1 <- 1.6",
                "2 <- 4.6",
                "3 <- 3.8",
                "4 <- 4.8",
                "5 <- 2.8",
                "6 <- 5.6",
                "7 <- 6.4",
                "8 <- 4.6",
                "9 <- 6.4"
            ],
            "resampled_steps": [
                "10 + 2 = 12 (left: 2 12 10)",
                "2 + 2 = 4 (left: 4 10 10)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 4 6 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)",
                "2 + 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)\n27 - 9 = 18 (left: 3 18 27)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n12 - 9 = 3 (left: 3 9 12)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 4 6 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n12 - 9 = 3 (left: 3 9 12)"
            ]
        },
        "step_7": {
            "steps": [
                "10 + 2 = 12 (left: 2 12 10)\n12 - 2 = 10 (left: 10 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 4 6 10)\n6 - 4 = 2 (left: 2 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)\n3 + 9 = 12 (left: 12 27)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)\n27 - 9 = 18 (left: 3 18 27)\n3 * 6 = 18 (left: 6 18 27)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n12 - 9 = 3 (left: 3 9 12)\n12 - 3 = 9 (left: 9 12)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 4 6 10)\n3 * 7 = 21 (left: 21 11 17)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n12 - 9 = 3 (left: 3 9 12)\n12 / 4 = 3 (left: 3 12)"
            ],
            "values": [
                0.001,
                1.002,
                0.0,
                0.003,
                21.001,
                1.002,
                1.002,
                0.003,
                2.0,
                0.003
            ],
            "resampled": [
                "0 <- 6.4",
                "1 <- 5.6",
                "2 <- 4.8",
                "3 <- 2.0",
                "4 <- 4.8",
                "5 <- 2.5",
                "6 <- 7.4",
                "7 <- 3.8",
                "8 <- 3.8",
                "9 <- 4.6"
            ],
            "resampled_steps": [
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n12 - 9 = 3 (left: 3 9 12)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)\n27 - 9 = 18 (left: 3 18 27)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)",
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 10 14)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 4 6 10)"
            ]
        },
        "step_8": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n12 - 9 = 3 (left: 3 9 12)\n9 / 3 = 3 (left: 3 12)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)\n27 - 9 = 18 (left: 3 18 27)\n27 - 9 = 18 (left: 3 9 18)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 / 6 = 1.66666666667 (left: 6 1.66666666667 10)",
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 10 14)\n14 - 10 = 4 (left: 10 4)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 / 6 = 1.6666666666666667 (left: 1.6666666666666667 10 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)\n10 / 4 = 2.5 (left: 2.5 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)\n10 / 4 = 2.5 (left: 2.5)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 4 6 10)\n10 / 4 = 2.5 (left: 2.5 10)"
            ],
            "values": [
                0.003,
                1.002,
                41.0,
                0.003,
                0.003,
                0.002,
                1.001,
                0.001,
                0.003,
                0.0
            ],
            "resampled": [
                "0 <- 5.6",
                "1 <- 5.4",
                "2 <- 4.6",
                "3 <- 5.6",
                "4 <- 4.6",
                "5 <- 6.4",
                "6 <- 8.1",
                "7 <- 6.4",
                "8 <- 5.6",
                "9 <- 4.6"
            ],
            "resampled_steps": [
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)\n27 - 9 = 18 (left: 3 18 27)",
                "10 + 2 = 12 (left: 2 12 10)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 4 6 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)\n27 - 9 = 18 (left: 3 18 27)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 4 6 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n12 - 9 = 3 (left: 3 9 12)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)\n27 - 9 = 18 (left: 3 18 27)\n27 - 9 = 18 (left: 3 9 18)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n12 - 9 = 3 (left: 3 9 12)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)\n27 - 9 = 18 (left: 3 18 27)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 4 6 10)"
            ]
        },
        "step_9": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)\n27 - 9 = 18 (left: 3 18 27)\n18 - 3 = 15 (left: 15 27)",
                "10 + 2 = 12 (left: 2 12 10)\n10 * 2 = 20 (left: 20)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 4 6 10)\n10 + 6 = 16 (left: 4 16)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)\n27 - 9 = 18 (left: 3 18 27)\n3 + 18 = 21 (left: 21 18 27)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 4 6 10)\n4 - 6 = -2 (left: -2 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n12 - 9 = 3 (left: 3 9 12)\n9 * 3 = 27 (left: 27 12)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)\n27 - 9 = 18 (left: 3 18 27)\n27 - 9 = 18 (left: 3 9 18)\n18 - 3 = 15 (left: 9 15)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n12 - 9 = 3 (left: 3 9 12)\n12 / 3 = 4 (left: 4 12)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)\n27 - 9 = 18 (left: 3 18 27)\n27 - 9 = 18 (left: 3 18 27)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 4 6 10)\n6 * 4 = 24 (left: 24 10)"
            ],
            "values": [
                1.002,
                0.002,
                0.003,
                22.0,
                1.0,
                0.003,
                41.0,
                0.003,
                60.0,
                20.001
            ],
            "resampled": [
                "0 <- 8.2",
                "1 <- 7.1",
                "2 <- 9.8",
                "3 <- 8.2",
                "4 <- 9.8",
                "5 <- 1.4",
                "6 <- 9.8",
                "7 <- 1.4",
                "8 <- 9.6",
                "9 <- 8.2"
            ],
            "resampled_steps": [
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 / 6 = 1.66666666667 (left: 6 1.66666666667 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)\n27 - 9 = 18 (left: 3 18 27)\n27 - 9 = 18 (left: 3 18 27)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 / 6 = 1.66666666667 (left: 6 1.66666666667 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)\n27 - 9 = 18 (left: 3 18 27)\n27 - 9 = 18 (left: 3 18 27)",
                "2 * 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)\n27 - 9 = 18 (left: 3 18 27)\n27 - 9 = 18 (left: 3 18 27)",
                "2 * 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)\n27 - 9 = 18 (left: 3 18 27)\n27 - 9 = 18 (left: 3 9 18)\n18 - 3 = 15 (left: 9 15)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 / 6 = 1.66666666667 (left: 6 1.66666666667 10)"
            ]
        },
        "step_10": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 / 6 = 1.66666666667 (left: 6 1.66666666667 10)\n10 / 1.66666666667 = 6 (left: 6 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 / 4 = 2.5 (left: 2.5 10 10)\n10 - 2.5 = 7.5 (left: 7.5 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)\n27 - 9 = 18 (left: 3 18 27)\n27 - 9 = 18 (left: 3 18 27)\n18 - 3 = 15 (left: 15 18 27)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 / 6 = 1.66666666667 (left: 6 1.66666666667 10)\nInput: 3.6 4 10",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)\n27 - 9 = 18 (left: 3 18 27)\n27 - 9 = 18 (left: 3 18 27)\n27 - 18 = 9 (left: 3 9)",
                "2 * 2 = 4 (left: 4 10 10)\n10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)\n27 - 9 = 18 (left: 3 18 27)\n27 - 9 = 18 (left: 3 18 27)\n3 * 6 = 18 (left: 6 18 27)",
                "2 * 2 = 4 (left: 4 10 10)\n4 * 10 = 40 (left: 10 10 40)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 - 6 = 4 (left: 4 10)\n27 - 9 = 18 (left: 3 18 27)\n27 - 9 = 18 (left: 3 9 18)\n18 - 3 = 15 (left: 9 15)\n15 / 9 = 1.66666666667 (left: 1.66666666667)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)\n10 / 6 = 1.66666666667 (left: 6 1.66666666667 10)\n6 + 1.66666666667 = 7.66666666667 (left: 7.66666666667 10)"
            ],
            "values": [
                1.002,
                1.0,
                3.0,
                0.003,
                0.003,
                2.0,
                1.002,
                0.003,
                0.002,
                1.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.40467
    },
    "9": {
        "input": "1 1 1 12",
        "step_1": {
            "steps": [
                "12 - 1 = 11 (left: 1 1 11)",
                "1 + 1 = 2 (left: 2 1 12)",
                "1 * 12 = 12 (left: 1 1 12)",
                "1 + 1 = 2 (left: 1 2 12)",
                "1 * 1 = 1 (left: 1 1 12)",
                "1 * 1 = 1 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "12 - 1 = 11 (left: 1 1 11)",
                "12 / 1 = 12 (left: 1 1 12)"
            ],
            "values": [
                0.002,
                41.0,
                40.0,
                60.0,
                1.002,
                21.001,
                40.001,
                22.0,
                1.001,
                40.001
            ],
            "resampled": [
                "0 <- 1.9",
                "1 <- 1.9",
                "2 <- 1.6",
                "3 <- 1.1",
                "4 <- 1.3",
                "5 <- 1.7",
                "6 <- 1.6",
                "7 <- 1.1",
                "8 <- 1.5",
                "9 <- 1.3"
            ],
            "resampled_steps": [
                "12 / 1 = 12 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "1 + 1 = 2 (left: 2 1 12)",
                "1 + 1 = 2 (left: 1 2 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "1 + 1 = 2 (left: 2 1 12)",
                "1 * 1 = 1 (left: 1 1 12)",
                "1 + 1 = 2 (left: 1 2 12)"
            ]
        },
        "step_2": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12)\n1 * 1 = 1 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)",
                "1 + 1 = 2 (left: 2 1 12)\n1 / 2 = 0.5 (left: 0.5 12)",
                "1 + 1 = 2 (left: 1 2 12)\nPossible next steps:",
                "12 / 1 = 12 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12)\n1 - 1 = 0 (left: 0 12)",
                "1 + 1 = 2 (left: 2 1 12)\n2 / 1 = 2 (left: 2 12)",
                "1 * 1 = 1 (left: 1 1 12)\n1 * 1 = 1 (left: 1 12)",
                "1 + 1 = 2 (left: 1 2 12)\n5 - 1 = 4 (left: 4 5 10)"
            ],
            "values": [
                20.001,
                40.001,
                60.0,
                0.0,
                0.003,
                20.0,
                20.0,
                60.0,
                2.0,
                41.0
            ],
            "resampled": [
                "0 <- 1.6",
                "1 <- 1.7",
                "2 <- 2.1",
                "3 <- 2.2",
                "4 <- 1.6",
                "5 <- 2.9",
                "6 <- 2.7",
                "7 <- 2.1",
                "8 <- 2.7",
                "9 <- INIT"
            ],
            "resampled_steps": [
                "12 / 1 = 12 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12)",
                "1 + 1 = 2 (left: 1 2 12)\n5 - 1 = 4 (left: 4 5 10)",
                "1 + 1 = 2 (left: 2 1 12)\n2 / 1 = 2 (left: 2 12)",
                "12 / 1 = 12 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)",
                "1 + 1 = 2 (left: 2 1 12)\n2 / 1 = 2 (left: 2 12)",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12)\n12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)\n11 - 1 = 10 (left: 10)",
                "12 / 1 = 12 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)\n1 * 11 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12)\n1 / 1 = 1 (left: 1 12)",
                "1 + 1 = 2 (left: 1 2 12)\n5 - 1 = 4 (left: 4 5 10)\n4 * 5 = 20 (left: 20 10)",
                "1 + 1 = 2 (left: 2 1 12)\n2 / 1 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "12 / 1 = 12 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)\n11 - 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 1 12)\n2 / 1 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "12 - 1 = 11 (left: 1 1 11)"
            ],
            "values": [
                0.0,
                0.001,
                0.001,
                0.002,
                2.0,
                0.001,
                0.003,
                0.0,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 2.2",
                "2 <- 1.2",
                "3 <- 2.6",
                "4 <- 2.1",
                "5 <- 2.9",
                "6 <- 1.5",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 1.1"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 1 12)",
                "12 / 1 = 12 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)",
                "1 * 12 = 12 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12)\n1 - 1 = 0 (left: 0 12)",
                "12 / 1 = 12 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)",
                "1 + 1 = 2 (left: 1 2 12)\n5 - 1 = 4 (left: 4 5 10)",
                "1 * 1 = 1 (left: 1 1 12)",
                "",
                "",
                "1 + 1 = 2 (left: 2 1 12)"
            ]
        },
        "step_4": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 12)\n4 + 6 = 10 (left: 10 10 2)",
                "12 / 1 = 12 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)\n11 / 1 = 11 (left: 11)",
                "1 * 12 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)",
                "12 / 1 = 12 (left: 1 1 12)\n1 - 1 = 0 (left: 0 12)\n0 + 12 = 12 (left: 12)",
                "12 / 1 = 12 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)\n11 / 1 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 12)\n5 - 1 = 4 (left: 4 5 10)\n4 * 5 = 20 (left: 20)",
                "1 * 1 = 1 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)",
                "1 + 1 = 2 (left: 1 2 12)",
                "1 / 1 = 1 (left: 1 1 12)",
                "1 + 1 = 2 (left: 2 1 12)\n5 * 3 = 15 (left: 15)"
            ],
            "values": [
                1.002,
                0.003,
                60.0,
                0.003,
                0.003,
                0.003,
                60.0,
                60.0,
                60.0,
                0.002
            ],
            "resampled": [
                "0 <- 2.7",
                "1 <- 4.8",
                "2 <- 4.2",
                "3 <- 2.2",
                "4 <- 4.6",
                "5 <- 2.1",
                "6 <- 4.2",
                "7 <- 2.7",
                "8 <- 2.7",
                "9 <- 4.2"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 1 12)\n2 / 1 = 2 (left: 2 12)",
                "1 / 1 = 1 (left: 1 1 12)",
                "1 * 12 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)",
                "12 / 1 = 12 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)",
                "1 * 1 = 1 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)",
                "1 * 12 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)",
                "1 + 1 = 2 (left: 2 1 12)\n2 / 1 = 2 (left: 2 12)",
                "1 + 1 = 2 (left: 2 1 12)\n2 / 1 = 2 (left: 2 12)",
                "1 * 12 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)"
            ]
        },
        "step_5": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 12)\n2 / 1 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10 12)",
                "1 / 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)",
                "1 * 12 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "12 / 1 = 12 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)\n1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)\n1 * 11 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)\n11 / 1 = 11 (left: 11)",
                "1 * 12 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "1 + 1 = 2 (left: 2 1 12)\n2 / 1 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 1 12)\n2 / 1 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "1 * 12 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n12 + 2 = 14 (left: 14)"
            ],
            "values": [
                0.002,
                60.0,
                0.003,
                0.003,
                0.002,
                0.002,
                0.003,
                0.001,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 4.7",
                "2 <- 2.2",
                "3 <- 2.7",
                "4 <- 2.7",
                "5 <- 2.2",
                "6 <- 2.7",
                "7 <- 1.3",
                "8 <- 5.1",
                "9 <- 5.1"
            ],
            "resampled_steps": [
                "1 * 12 = 12 (left: 1 1 12)",
                "1 + 1 = 2 (left: 1 2 12)",
                "12 / 1 = 12 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)",
                "1 + 1 = 2 (left: 2 1 12)\n2 / 1 = 2 (left: 2 12)",
                "1 + 1 = 2 (left: 2 1 12)\n2 / 1 = 2 (left: 2 12)",
                "12 / 1 = 12 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)",
                "1 + 1 = 2 (left: 2 1 12)\n2 / 1 = 2 (left: 2 12)",
                "1 + 1 = 2 (left: 1 2 12)",
                "1 / 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)",
                "1 / 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)"
            ]
        },
        "step_6": {
            "steps": [
                "1 * 12 = 12 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)",
                "1 + 1 = 2 (left: 1 2 12)\n7 - 3 = 4 (left: 4 9 11)",
                "12 / 1 = 12 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)\n11 - 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 1 12)\n2 / 1 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 1 12)\n2 / 1 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "12 / 1 = 12 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)\n11 - 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 1 12)\n2 / 1 = 2 (left: 2 12)\n12 * 2 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 12)\n4 - 6 = -2 (left: -2)",
                "1 / 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "1 / 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)"
            ],
            "values": [
                20.001,
                40.001,
                0.002,
                60.0,
                0.003,
                0.003,
                40.0,
                0.002,
                0.002,
                0.001
            ],
            "resampled": [
                "0 <- 6.0",
                "1 <- 6.1",
                "2 <- 6.6",
                "3 <- 2.7",
                "4 <- 2.7",
                "5 <- INIT",
                "6 <- 6.6",
                "7 <- 5.1",
                "8 <- 6.0",
                "9 <- 4.6"
            ],
            "resampled_steps": [
                "1 * 12 = 12 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)",
                "1 + 1 = 2 (left: 1 2 12)\n7 - 3 = 4 (left: 4 9 11)",
                "1 + 1 = 2 (left: 2 1 12)\n2 / 1 = 2 (left: 2 12)\n12 * 2 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 1 12)\n2 / 1 = 2 (left: 2 12)",
                "1 + 1 = 2 (left: 2 1 12)\n2 / 1 = 2 (left: 2 12)",
                "",
                "1 + 1 = 2 (left: 2 1 12)\n2 / 1 = 2 (left: 2 12)\n12 * 2 = 24 (left: 24)",
                "1 / 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)",
                "1 * 12 = 12 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)",
                "1 * 1 = 1 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)"
            ]
        },
        "step_7": {
            "steps": [
                "1 * 12 = 12 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)\n11 / 1 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 12)\n7 - 3 = 4 (left: 4 9 11)\n6 - 3 = 3 (left: 3 10)",
                "1 + 1 = 2 (left: 2 1 12)\n2 / 1 = 2 (left: 2 12)\n12 * 2 = 24 (left: 24)\nAnswer: (1 + 1) * (1 + 12) = 24",
                "1 + 1 = 2 (left: 2 1 12)\n2 / 1 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 1 12)\n2 / 1 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "12 / 1 = 12 (left: 1 1 12)",
                "1 + 1 = 2 (left: 2 1 12)\n2 / 1 = 2 (left: 2 12)\n12 * 2 = 24 (left: 24)\nAnswer: (1 + 1) / 1 * 12 = 24",
                "1 / 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n12 * 2 = 24 (left: 24)",
                "1 * 12 = 12 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)\n11 - 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)\n1 * 11 = 11 (left: 11)"
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.440054
    }
}