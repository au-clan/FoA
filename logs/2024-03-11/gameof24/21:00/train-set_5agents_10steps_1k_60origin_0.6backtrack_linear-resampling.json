{
    "850": {
        "puzzle": "2 6 8 8",
        "Step 0": {
            "steps": [
                "8 + 2 = 10 (left: 6 8 10)",
                "6 / 2 = 3 (left: 3 8 8)",
                "2 + 6 = 8 (left: 8 8 8)",
                "8 - 6 = 2 (left: 2 8 ",
                "2 * 6 = 12 (left: 8 8 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                60.0,
                1.002,
                2.001,
                1.002
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- 0.1",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 6 = 12 (left: 8 8 12) || 12 + 8 = 20 (left: 8 20)",
                "8 + 2 = 10 (left: 6 8 10)",
                "6 / 2 = 3 (left: 3 8 8) || Input:",
                "6 / 2 = 3 (left: 3 8 8) || 8 / 3",
                "8 + 2 = 10 (left: 6 8 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                3.0,
                0.003,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.1",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "8 - 6 = 2 (left: 2 8  || 8 - 2 = 6 (left: 6)",
                "6 / 2 = 3 (left: 3 8 8) || 8 / 3 \u2248 2.67 (left: 2.67 8)",
                "2 * 6 = 12 (left: 8 8 12)",
                "6 / 2 = 3 (left: 3 8 8) || 8 - 3 = 5 (left: 5 8)",
                "2 + 6 = 8 (left: 8 8 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                3.0,
                2.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.1",
                "2 <- 0.0",
                "3 <- 2.1",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "6 / 2 = 3 (left: 3 8 8) || 8 - 3 = 5 (left: 5 8)",
                "6 / 2 = 3 (left: 3 8 8) || 3 * 8 = 24 (left: 8 24)",
                "8 + 2 = 10 (left: 6 8 10) || 6 * 8 = 48 (left: 10 48)",
                "6 / 2 = 3 (left: 3 8 8) || 8 / 3 \u2248 2.67 (left: 2.67 8) || ",
                "2 + 6 = 8 (left: 8 8 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.001,
                21.001,
                0.003,
                0.003,
                21.001
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- 0.1",
                "4 <- 3.1"
            ]
        },
        "Step 4": {
            "steps": [
                "6 / 2 = 3 (left: 3 8 8) || 3 * 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8)",
                "2 * 6 = 12 (left: 12 8 8)",
                "6 / 2 = 3 (left: 3 8 8) || 3 + 8 = 11 (left: 8 11)",
                "6 / 2 = 3 (left: 3 8 8) || 8 - 3 = 5 (left: 5 8)",
                "6 / 2 = 3 (left: 3 8 8) || 3 * 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                3.0,
                0.001,
                2.001,
                60.0
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 4.0",
                "2 <- 3.1",
                "3 <- 4.0",
                "4 <- 4.4"
            ]
        },
        "Step 5": {
            "steps": [
                "2 + 6 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1)",
                "6 / 2 = 3 (left: 3 8 8) || 3 * 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "6 / 2 = 3 (left: 3 8 8) || 3 * 8 = 24 (left: 8 24) || 8 / 24 = 0.3333 (left: 0.3333 8)",
                "6 / 2 = 3 (left: 3 8 8) || 3 * 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8) || Possible next steps:",
                "6 / 2 = 3 (left: 3 8 8) || 3 * 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8) || Possible next steps:"
            ],
            "Pruning": [
                "1<-4.4"
            ],
            "Evaluation": [
                0.002,
                60.0,
                2.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 4.0",
                "2 <- 4.0",
                "3 <- 5.1",
                "4 <- 5.1"
            ]
        },
        "Step 6": {
            "steps": [
                "6 / 2 = 3 (left: 3 8 8) || 3 * 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "6 / 2 = 3 (left: 3 8 8) || 3 * 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "6 / 2 = 3 (left: 3 8 8) || 3 * 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "6 / 2 = 3 (left: 3 8 8) || 3 * 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8) || Possible next steps:",
                "6 / 2 = 3 (left: 3 8 8) || 3 * 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)"
            ],
            "Pruning": [
                "0<-4.0",
                "1<-4.0",
                "2<-4.0",
                "4<-5.1"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 6.1",
                "2 <- 5.1",
                "3 <- 5.1",
                "4 <- 6.4"
            ]
        },
        "Step 7": {
            "steps": [
                "6 / 2 = 3 (left: 3 8 8) || 3 * 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "6 / 2 = 3 (left: 3 8 8) || 3 * 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8) || 3 + 8 = 11 (left: 8 11)",
                "6 / 2 = 3 (left: 3 8 8) || 3 * 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "6 / 2 = 3 (left: 3 8 8) || 3 * 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "6 / 2 = 3 (left: 3 8 8) || 3 * 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)"
            ],
            "Pruning": [
                "0<-6.1",
                "2<-5.1",
                "3<-6.4",
                "4<-2.1"
            ],
            "Evaluation": [
                60.0,
                0.002,
                60.0,
                60.0,
                3.0
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 7.2",
                "2 <- 7.3",
                "3 <- 6.1",
                "4 <- 6.1"
            ]
        },
        "Step 8": {
            "steps": [
                "6 / 2 = 3 (left: 3 8 8) || 3 * 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "6 / 2 = 3 (left: 3 8 8) || 3 * 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8) || Possible next steps:",
                "6 / 2 = 3 (left: 3 8 8) || 3 * 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "6 / 2 = 3 (left: 3 8 8) || 3 * 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "6 / 2 = 3 (left: 3 8 8) || 3 * 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67 8)"
            ],
            "Pruning": [
                "0<-6.4",
                "2<-6.1",
                "3<-6.0"
            ],
            "Evaluation": [
                60.0,
                0.003,
                60.0,
                60.0,
                3.0
            ],
            "Resampling": [
                "0 <- 8.0",
                "1 <- 8.3",
                "2 <- 8.0",
                "3 <- 5.1",
                "4 <- 7.3"
            ]
        },
        "Step 9": {
            "steps": [
                "6 / 2 = 3 (left: 3 8 8) || 3 * 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "6 / 2 = 3 (left: 3 8 8) || 3 * 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "6 / 2 = 3 (left: 3 8 8) || 3 * 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "6 / 2 = 3 (left: 3 8 8) || 3 * 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8) || 8 / 3 \u2248 2.67 (left: 2.67)",
                "6 / 2 = 3 (left: 3 8 8) || 3 * 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)"
            ],
            "Pruning": [
                "0<-8.3",
                "1<-6.4",
                "2<-7.3",
                "3<-7.0",
                "4<-8.3"
            ]
        },
        "Input": "2 6 8 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "851": {
        "puzzle": "4 5 5 7",
        "Step 0": {
            "steps": [
                "7 - 4 = 3 (left: 3 5 5)",
                "5 - 4 = 1 (left: 1 5 7)",
                "5 + 7 = 12 (left: 4 5 12)",
                "7 - 5 = 2 (left: 4 2 7)",
                "7 - 5 = 2 (left: 4 2 "
            ],
            "Pruning": [],
            "Evaluation": [
                22.0,
                1.002,
                2.001,
                3.0,
                0.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.0",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "5 - 4 = 1 (left: 1 5 7)",
                "7 - 4 = 3 (left: 3 5 5) || ",
                "5 - 4 = 1 (left: 1 5 7)",
                "7 / 5 = 1.4 (left: ",
                "5 - 4 = 1 (left: 1 5 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.003,
                3.0,
                0.0,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.0",
                "2 <- 0.3",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "5 + 7 = 12 (left: 4 5 12)",
                "7 - 4 = 3 (left: 3 5 5) || 5 / 3 = 1 (left: 1 5)",
                "7 - 5 = 2 (left: 4 2 7) || 4 / 2 = 2 (left: 2 7)",
                "7 - 5 = 2 (left: 2 5 7)",
                "7 - 5 = 2 (left: 4 5 2)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                60.0,
                0.002,
                3.0,
                1.001
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 2.1",
                "2 <- 2.1",
                "3 <- 2.1",
                "4 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "5 - 4 = 1 (left: 1 5 7) || 5 * 7 = 35 (left: 1 35)",
                "7 - 4 = 3 (left: 3 5 5) || 5 / 3 = 1 (left: 1 5) || 1 + 5 = 6 (left: 6)",
                "7 - 4 = 3 (left: 3 5 5) || 5 / 3 = 1 (left: 1 5) || 1 + 5 = 6 (left: 6)",
                "7 - 4 = 3 (left: 3 5 5) || 5 / 3 = 1 (left: 1 5) || 1 + 5 = 6",
                "7 - 4 = 3 (left: 3 5 5) || 5 / 3 = 1 (left: 1 5) || 5 / 1 = 5 (left: 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 2.0",
                "3 <- 2.1",
                "4 <- 0.0"
            ]
        },
        "Step 4": {
            "steps": [
                "7 - 4 = 3 (left: 3 5 5) || 5 / 3 = 1 (left: 1 5) || 5 * 1 = 5 (left: 5)",
                "7 - 4 = 3 (left: 3 5 5) || 5 / 3 = 1 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "5 + 7 = 12 (left: 4 5 12) || 5 * 4 = 20 (left: 20 12)",
                "7 - 4 = 3 (left: 3 5 5) || 5 / 3 = 1 (left: 1 5) || 1 + 5 = 6",
                "7 - 4 = 3 (left: 3 5 5) || 3 + 5 = 8 (left: 5 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.0",
                "2 <- 0.0",
                "3 <- 2.0",
                "4 <- 0.0"
            ]
        },
        "Step 5": {
            "steps": [
                "7 - 4 = 3 (left: 3 5 5) || 5 / 3 = 1 (left: 1 5) || 1 + 5 = 6",
                "5 + 7 = 12 (left: 4 5 12) || 4 + 5 = 9 (left: 9 12)",
                "7 - 4 = 3 (left: 3 5 5) || 5 / 3 = 1.67 (left: 1.67 5)",
                "5 + 7 = 12 (left: 4 5 12) || 4 * 5 = 20 (left: 20 12)",
                "7 - 4 = 3 (left: 3 5 5) || 3 + 5 = 8 (left: 5 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 2.1",
                "3 <- 2.0",
                "4 <- 2.1"
            ]
        },
        "Step 6": {
            "steps": [
                "7 - 4 = 3 (left: 3 5 5) || 5 / 3 = 1 (left: 1 5) || 1 + 5 = 6 (left: 6)",
                "7 - 4 = 3 (left: 3 5 5) || 5 / 3 = 1 (left: 1 5) || 5 - 1 = 4 (left: 4)",
                "7 - 4 = 3 (left: 3 5 5) || 5 / 3 = 1 (left: 1 5) || 1 + 5 = 6",
                "5 + 7 = 12 (left: 4 5 12) || 5 + 4 = 9 (left: 9 12)",
                "7 - 4 = 3 (left: 3 5 5) || 5 / 3 = 1 (left: 1 5) || 1 * 5 = 5 (left: 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.0",
                "2 <- 2.1",
                "3 <- 2.0",
                "4 <- 2.0"
            ]
        },
        "Step 7": {
            "steps": [
                "7 - 4 = 3 (left: 3 5 5) || 5 / 3 = 1 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "5 + 7 = 12 (left: 4 5 12) || 5 + 4 = 9 (left: 9 12)",
                "7 - 4 = 3 (left: 3 5 5) || 5 / 3 = 1 (left: 1 5) || 5 - 1 = 4 (left: 4)",
                "5 + 7 = 12 (left: 4 5 12) || 4 * 5 = 20 (left: 20 12)",
                "5 + 7 = 12 (left: 4 5 12) || 12 / 4 = 3 (left: 3 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.0",
                "2 <- 2.1",
                "3 <- 2.1",
                "4 <- 2.1"
            ]
        },
        "Step 8": {
            "steps": [
                "7 - 4 = 3 (left: 3 5 5) || 5 / 3 = 1 (left: 1 5) || 5 - 1 = 4 (left: 4)",
                "5 + 7 = 12 (left: 4 5 12) || 12 / 5 = 2.4 (left: 4 2.4)",
                "7 - 4 = 3 (left: 3 5 5) || 5 / 3 = 1 (left: 1 5) || 1 + 5 = 6 (left: 6)",
                "7 - 4 = 3 (left: 3 5 5) || 5 / 3 = 1 (left: 1 5) || 1 + 5 = 6 (left: 6)",
                "7 - 4 = 3 (left: 3 5 5) || 5 / 3 = 1 (left: 1 5) || 5 / 1 = 5 (left: 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.0",
                "2 <- 2.1",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 9": {
            "steps": [
                "7 - 4 = 3 (left: 3 5 5) || 5 / 3 = 1 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "5 + 7 = 12 (left: 4 5 12) || 12 - 4 = 8 (left: 8 5)",
                "7 - 4 = 3 (left: 3 5 5) || 5 / 3 = 1 (left: 1 5) || 5 - 1 = 4 (left: 4)",
                "4 + 5 = 9 (left: 5 5 7)",
                "4 + 5 = 9 (left: 5 5 7)"
            ],
            "Pruning": []
        },
        "Input": "4 5 5 7",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "852": {
        "puzzle": "2 3 8 11",
        "Step 0": {
            "steps": [
                "2 + 3 = 5 (left: 5 8 11)",
                "11 - 3 = 8 (left: 2 8 8)",
                "2 + 3 = 5 (left: 5 8 11)",
                "8 - 3 = 5 (left: 2 5 11)",
                "3 * 2 = 6 (left: 6 8 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                2.001,
                3.0,
                1.002,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.2",
                "2 <- INIT",
                "3 <- 0.0",
                "4 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "11 - 2 = 9 (left: 3 8 9)",
                "2 + 3 = 5 (left: 5 8 11) || 5 * 8 = 40 (left: 11 40)",
                "11 - 2 = 9 (left: 2 3 9)",
                "2 + 3 = 5 (left: 5 8 11) || 8 / 5 = 1.6 (left: 1.6 11)",
                "2 + 3 = 5 (left: 5 8 11) || 11 - 8 = "
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                20.002,
                1.002,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.1",
                "2 <- INIT",
                "3 <- 1.0",
                "4 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "11 - 2 = 9 (left: 3 8 9) || 3 * 8 = 24 (left: 8 9 24)",
                "2 + 3 = 5 (left: 5 8 11) || 5 * 8 = 40 (left: 11 40) || 11 - 40 = -29 (left: -29)",
                "3 * 2 = 6 (left: 6 8 11)",
                "11 - 2 = 9 (left: 3 8 9) || 9 / 3 = 3 (left: 3 8)",
                "11 - 2 = 9 (left: 3 8 9) || 9 / 3 = 3 (left: 8 3)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.0,
                0.0,
                3.0,
                60.0,
                40.0
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 1.1",
                "2 <- 2.3",
                "3 <- 2.3",
                "4 <- 1.1"
            ]
        },
        "Step 3": {
            "steps": [
                "11 - 2 = 9 (left: 3 8 9) || 9 / 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "2 + 3 = 5 (left: 5 8 11) || 5 * 8 = 40 (left: 11 40) || 40 - 11 = 29 (left: 29)",
                "11 - 2 = 9 (left: 3 8 9) || 9 / 3 = 3 (left: 3 8) || 10 / 4 = 2.5 (left: 2.5)",
                "11 - 2 = 9 (left: 3 8 9) || 9 / 3 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "2 + 3 = 5 (left: 5 8 11) || 5 * 8 = 40 (left: 11 40) || 11 - 40 = -29 (left: -29)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.3",
                "2 <- 2.4",
                "3 <- 2.4",
                "4 <- 2.3"
            ]
        },
        "Step 4": {
            "steps": [
                "11 - 2 = 9 (left: 3 8 9) || 9 / 3 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24)",
                "11 - 2 = 9 (left: 3 8 9) || 9 / 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "11 - 2 = 9 (left: 3 8 9) || 9 / 3 = 3 (left: 8 3) || 8 + 3 = 11 (left: 11)",
                "11 - 2 = 9 (left: 3 8 9) || 9 / 3 = 3 (left: 8 3) || 8 - 3 = 5 (left: 5)",
                "11 - 2 = 9 (left: 3 8 9) || 9 / 3 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                60.0,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 4.0",
                "2 <- 2.4",
                "3 <- 2.3",
                "4 <- 4.0"
            ]
        },
        "Step 5": {
            "steps": [
                "11 - 2 = 9 (left: 3 8 9) || 9 / 3 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: (11 - 2) / (8 / 3) = 24",
                "11 - 2 = 9 (left: 3 8 9) || 9 / 3 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: (11 - 2) / (3 / 8) = 24",
                "11 - 2 = 9 (left: 3 8 9) || 9 / 3 = 3 (left: 8 3) || 8 - 3 = 5 (left: 5)",
                "11 - 2 = 9 (left: 3 8 9) || 9 / 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "11 - 2 = 9 (left: 3 8 9) || 9 / 3 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (11 - 2) / 3 = 24"
            ]
        },
        "Input": "2 3 8 11",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "853": {
        "puzzle": "4 7 8 13",
        "Step 0": {
            "steps": [
                "13 - 4 = 9 (left: 7 8 9)",
                "7 + 8 = 15 (left: 4 15 ",
                "7 / 4 = 1.75 (left: 1.75 8 13)",
                "7 + 8 = 15 (left: 4 15 ",
                "4 * 7 = 28 (left: 8 13 28)"
            ],
            "Pruning": [],
            "Evaluation": [
                41.0,
                1.002,
                2.0,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.0",
                "3 <- INIT",
                "4 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "13 - 8 = 5 (left: 4 5 8)",
                "13 - 7 = 6 (left: ",
                "13 - 4 = 9 (left: 7 8 9) || 7 * 8 = 56 (left: 9 56)",
                "4 + 7 = 11 (left: 8 11 13)",
                "13 - 4 = 9 (left: 7 8 9) || 9 - 7 = 2 (left: 2 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                0.0,
                0.002,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.4"
            ]
        },
        "Step 2": {
            "steps": [
                "7 - 4 = 3 (left: 3 8 13)",
                "4 + 7 = 11 (left: 8 11 13)",
                "7 - 4 = 3 (left: 3 8 13)",
                "13 - 7 = 6 (left: 4 6 ",
                "4 * 7 = 28 (left: 8 13 28) || 8 * 13 = 104 (left: 104 28)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                2.001,
                60.0,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 2.3",
                "2 <- 2.2",
                "3 <- 2.2",
                "4 <- 2.0"
            ]
        },
        "Step 3": {
            "steps": [
                "13 - 4 = 9 (left: 7 8 9) || 7 / 9",
                "13 - 7 = 6 (left: 4 6  || Input: 3 9 27",
                "7 - 4 = 3 (left: 3 8 13) || 13 - 3 = 10 (left: 8 10)",
                "7 - 4 = 3 (left: 3 8 13) || 13 / 3 = 4.",
                "7 - 4 = 3 (left: 3 8 13) || 3 * 8 = 24 (left: 24 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 0.0",
                "2 <- 1.0",
                "3 <- 2.3",
                "4 <- 3.2"
            ]
        },
        "Step 4": {
            "steps": [
                "7 - 4 = 3 (left: 3 8 13) || 13 - 3 = 10 (left: 8 10) || 10 - 8 = 2 (left: 2)",
                "13 - 4 = 9 (left: 7 8 9) || 9 - 7 = 2 (left: 2 8)",
                "13 - 8 = 5 (left: 4 5 8) || 8 - 4 = 4 (left: 4 8)",
                "13 - 7 = 6 (left: 4 6  || 4 + 6 = 10 (left: 10)",
                "7 - 4 = 3 (left: 3 8 13) || 13 - 3 = 10 (left: 8 10) || 8 + 10 = 18 (left: 18)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 3.2",
                "2 <- 2.0",
                "3 <- 3.2",
                "4 <- 2.0"
            ]
        },
        "Step 5": {
            "steps": [
                "7 - 4 = 3 (left: 3 8 13) || 13 - 3 = 10 (left: 8 10) || 8 * 10 = 80 (left: 80)",
                "7 - 4 = 3 (left: 3 8 13) || 13 - 3 = 10 (left: 8 10) || 8 * 10 = 80 (left: 80)",
                "7 - 4 = 3 (left: 3 8 13) || 3 * 8 = 24 (left: 24 13)",
                "7 - 4 = 3 (left: 3 8 13) || 13 - 3 = 10 (left: 8 10) || 10 - 8 = 2 (left: 2)",
                "7 - 4 = 3 (left: 3 8 13) || 3 + 8 = 11 (left: 11 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 2.3",
                "2 <- 3.2",
                "3 <- 5.4",
                "4 <- 2.2"
            ]
        },
        "Step 6": {
            "steps": [
                "13 - 8 = 5 (left: 4 5 8) || 5 - 4 = 1 (left: 1 8)",
                "13 - 7 = 6 (left: 4 6  || 4 * 6 = 24 (left: 24)",
                "7 - 4 = 3 (left: 3 8 13) || 13 - 3 = 10 (left: 8 10) || 8 * 10 = 80 (left: 80)",
                "7 - 4 = 3 (left: 3 8 13) || 3 + 8 = 11 (left: 11 13) || 11 / 13 = 0.846153846 (left: 0.846153846)",
                "7 - 4 = 3 (left: 3 8 13) || 3 + 8 = 11 (left: 11 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                21.001,
                60.0,
                0.002,
                0.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.0",
                "2 <- 6.1",
                "3 <- 2.3",
                "4 <- 6.1"
            ]
        },
        "Step 7": {
            "steps": [
                "13 - 7 = 6 (left: 4 6  || 7",
                "7 - 4 = 3 (left: 3 8 13) || 3 * 8 = 24 (left: 24 8 13)",
                "13 - 7 = 6 (left: 4 6  || 4 * 6 = 24 (left: 24) || Answer: 4 * (13 - 7) = 24",
                "13 - 7 = 6 (left: 4 6  || 4 + 6 = 10 (left: 10)",
                "13 - 7 = 6 (left: 4 6  || 4 * 6 = 24 (left: 24) || Answer: 4 * (13 - 7) = 24"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                21.001,
                60.0,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 7.1",
                "1 <- 7.2",
                "2 <- 7.1",
                "3 <- 7.4",
                "4 <- 7.2"
            ]
        },
        "Step 8": {
            "steps": [
                "7 - 4 = 3 (left: 3 8 13) || 3 * 8 = 24 (left: 24 8 13) || 24 / 13 = 1.846 (",
                "13 - 7 = 6 (left: 4 6  || 4 * 6 = 24 (left: 24) || Answer: 4 * (13 - 7) = 24 || Input: 3 5 6 8\nSteps:\n5 + 8 = 13 (left: 3 6 13)\n6 - 3 = 3 (left: 3 13)\n3 * 13 = 39 (left: 39)\n39 - 15 = 24 (left: 24)\nAnswer: ((5 + 8) - 6) * 3 = 24",
                "7 - 4 = 3 (left: 3 8 13) || 3 * 8 = 24 (left: 24 8 13) || 24 / 8 = 3 (left: 3 8 13)",
                "13 - 7 = 6 (left: 4 6  || 4 * 6 = 24 (left: 24) || Answer: 4 * (13 - 7) = 24 || Input: 3 3 7 8\nSteps:\n3 * 8 = 24 (left: 3 7 24)\n7 - 3 = 4 (left: 4 24)\n4 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (7 - 3) = 24",
                "13 - 7 = 6 (left: 4 6  || 4 * 6 = 24 (left: 24) || Answer: 4 * (13 - 7) = 24 || Input: 3 6 7 9\nSteps:\n6 + 9 = 15 (left: 3 7 15)\n15 - 7 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: 3 * (6 + 9) = 24"
            ],
            "Pruning": [
                "1<-7.4",
                "3<-7.4",
                "4<-5.4"
            ],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 7.2",
                "1 <- 7.2",
                "2 <- 8.4",
                "3 <- 8.4",
                "4 <- 8.4"
            ]
        },
        "Step 9": {
            "steps": [
                "13 - 7 = 6 (left: 4 6  || 4 * 6 = 24 (left: 24) || Answer: 4 * (13 - 7) = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n3 * 6 = 18 (left: 12 18)\n18 - 12 = 6 (left: 6 24)\nAnswer: (3 * 6) + (5 + 7) = 24",
                "13 - 7 = 6 (left: 4 6  || 4 * 6 = 24 (left: 24) || Answer: 4 * (13 - 7) = 24 || Input: 3 3 4 8\nSteps:\n3 + 3 = 6 (left: 4 6 8)\n6 * 4 = 24 (left: 24 8)\nAnswer: (3 + 3) * 4 = 24",
                "7 - 4 = 3 (left: 3 8 13) || 3 + 8 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "7 - 4 = 3 (left: 3 8 13) || 3 + 8 = 11 (left: 11 13) || 11 / 13 = 0.8461538461538461 (left: 0.8461538461538461)",
                "7 - 4 = 3 (left: 3 8 13) || 3 + 8 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24)"
            ],
            "Pruning": [
                "0<-7.4",
                "1<-8.1"
            ]
        },
        "Input": "4 7 8 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "854": {
        "puzzle": "6 6 8 12",
        "Step 0": {
            "steps": [
                "8 - 6 = 2 (left: 2 6 12)",
                "12 / 6 = 2 (left: 2 6 12)",
                "6 * 6 = 36 (left: 8 12 36)",
                "6 * 6 = 36 (left: 8 12 36)",
                "12 - 8 = 4 (left: 4 8 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                1.002,
                2.001,
                2.001,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.0",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "6 + 6 = 12 (left: 8 12)",
                "8 - 6 = 2 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6)",
                "6 * 6 = 36 (left: 8 12 36)",
                "6 + 8 = 14 (left: 14 12)",
                "12 - 6 = 6 (left: 6 8 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                20.002,
                1.002,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.1",
                "2 <- 1.1",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "8 - 6 = 2 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)",
                "8 - 6 = 2 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 + 6 = 12 (left: 12)",
                "8 - 6 = 2 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "6 + 6 = 12 (left: 8 12 12)",
                "6 * 8 = 48 (left: 6 12 "
            ],
            "Pruning": [],
            "Evaluation": [
                40.0,
                0.003,
                20.002,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.0",
                "2 <- INIT",
                "3 <- 2.0",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "8 - 6 = 2 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "8 - 6 = 2 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "6 / 6 = 1 (left: 1 8 12)",
                "8 - 6 = 2 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 + 2 = 38",
                "6 * 6 = 36 (left: 8 12 36)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                1.002,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 2.2",
                "2 <- 1.2",
                "3 <- 2.2",
                "4 <- 1.4"
            ]
        },
        "Step 4": {
            "steps": [
                "6 / 6 = 1 (left: 1 8 12) || 12 - 1 = 11 (left: 8 11)",
                "8 - 6 = 2 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || No possible next steps as there is no input given.",
                "6 * 6 = 36 (left: 8 12 36) || 36 / 12 = 3 (left: 3 36)",
                "8 - 6 = 2 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps with the input 0.",
                "12 - 6 = 6 (left: 6 8 6) || 6 * 8 = 48 (left: 48)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.001,
                0.003,
                20.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.2",
                "2 <- 2.2",
                "3 <- 2.0",
                "4 <- 2.0"
            ]
        },
        "Step 5": {
            "steps": [
                "8 - 6 = 2 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || There are no possible operations to perform on the number 36.",
                "8 - 6 = 2 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps since there is no input provided.",
                "8 - 6 = 2 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || No possible next steps.",
                "8 - 6 = 2 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 3 = 12 (left: 12)",
                "8 - 6 = 2 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18"
            ],
            "Pruning": [
                "3<-4.2"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 4.2",
                "2 <- 2.0",
                "3 <- 2.2",
                "4 <- 1.1"
            ]
        },
        "Step 6": {
            "steps": [
                "6 * 6 = 36 (left: 8 12 36) || 36 - 8 = 28 (left: 28 12)",
                "6 * 6 = 36 (left: 8 12 36) || 36 / 12 = 3 (left: 3 36) || 3 + 36 = 39 (left: 39)",
                "8 - 6 = 2 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || There are no possible next steps with the input 36.",
                "8 - 6 = 2 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || No possible next steps.",
                "8 - 6 = 2 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 4.2",
                "2 <- 2.0",
                "3 <- 2.0",
                "4 <- 4.2"
            ]
        },
        "Step 7": {
            "steps": [
                "6 * 6 = 36 (left: 8 12 36) || 36 / 12 = 3 (left: 3 36) || 36 - 3 = 33 (left: 33)",
                "6 * 6 = 36 (left: 8 12 36) || 36 / 12 = 3 (left: 3 36) || 3 + 36 = 39 (left: 39)",
                "8 - 6 = 2 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "8 - 6 = 2 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || None, as there is only one number provided.",
                "6 * 6 = 36 (left: 8 12 36) || 36 / 12 = 3 (left: 3 36) || 3 * 36 = 108 (left: 108)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 4.2",
                "2 <- 1.1",
                "3 <- 4.2",
                "4 <- 4.2"
            ]
        },
        "Step 8": {
            "steps": [
                "6 * 6 = 36 (left: 8 12 36) || 36 / 12 = 3 (left: 3 36) || 36 - 3 = 33 (left: 33)",
                "6 * 6 = 36 (left: 8 12 36) || 36 / 12 = 3 (left: 3 36) || 3 + 36 = 39 (left: 39)",
                "8 - 6 = 2 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "6 * 6 = 36 (left: 8 12 36) || 36 / 12 = 3 (left: 3 36) || 36 - 3 = 33 (left: 3 33)",
                "6 * 6 = 36 (left: 8 12 36) || 36 / 12 = 3 (left: 3 36) || 36 / 3 = 12 (left: 12 36)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- INIT",
                "2 <- 2.0",
                "3 <- 1.1",
                "4 <- 2.0"
            ]
        },
        "Step 9": {
            "steps": [
                "8 - 6 = 2 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "6 + 6 = 12 (left: 8 12 12)",
                "8 - 6 = 2 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 * 8 = 288 (left: 8)",
                "8 - 6 = 2 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "8 - 6 = 2 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18"
            ],
            "Pruning": [
                "2<-2.0"
            ]
        },
        "Input": "6 6 8 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "855": {
        "puzzle": "5 6 8 9",
        "Step 0": {
            "steps": [
                "9 - 6 = 3 (left: ",
                "5 * 6 = 30 (left: 8 9 30)",
                "5 * 6 = 30 (left: 8 9 30)",
                "8 - 6 = 2 (left: 5 2 9)",
                "8 * 9 = 72 (left: 5 6 "
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                1.002,
                3.0,
                3.0,
                0.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.2",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "8 - 6 = 2 (left: 2 5 9)",
                "5 * 6 = 30 (left: 8 9 30) || 8 * 9 = 72 (left: 72 30)",
                "9 - 5 = 4 (left: 4 6 8)",
                "5 + 6 = 11 (left: 8 9 11)",
                "5 + 6 = 11 (left: 8 9 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                60.0,
                3.0,
                2.001
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- 0.3",
                "3 <- 1.2",
                "4 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "9 - 5 = 4 (left: 4 6 8) || 4 * 6 = 24 (left: 8 24)",
                "9 - 5 = 4 (left: 4 6 8) || 6 * 8 = 48 (left: 4 48)",
                "8 - 6 = 2 (left: 5 2 9) || 5 + 2 = 7 (left: 7 9)",
                "9 - 5 = 4 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6)",
                "9 - 5 = 4 (left: 4 6 8) || 4 * 6 = 24 (left: 8 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.003,
                1.002,
                41.0,
                40.001
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 2.4",
                "2 <- 2.3",
                "3 <- 2.4",
                "4 <- 2.4"
            ]
        },
        "Step 3": {
            "steps": [
                "5 + 6 = 11 (left: 8 9 11) || 8 * 9 = 72 (left: 11 72)",
                "9 - 5 = 4 (left: 4 6 8) || 4 * 6 = 24 (left: 8 24) || 8 - 24 = -16 (left: -16)",
                "9 - 5 = 4 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "9 - 5 = 4 (left: 4 6 8) || 4 * 6 = 24 (left: 8 24) || 8 + 24 = 32 (left: 32)",
                "9 - 5 = 4 (left: 4 6 8) || 4 * 6 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 3.4",
                "2 <- 3.4",
                "3 <- 2.3",
                "4 <- 2.3"
            ]
        },
        "Step 4": {
            "steps": [
                "9 - 5 = 4 (left: 4 6 8)",
                "9 - 5 = 4 (left: 4 6 8) || 4 * 6 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "9 - 5 = 4 (left: 4 6 8) || 4 * 6 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "9 - 5 = 4 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "9 - 5 = 4 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)"
            ],
            "Pruning": [
                "1<-1.2",
                "2<-2.4"
            ],
            "Evaluation": [
                60.0,
                60.0,
                2.0,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 4.0",
                "2 <- 4.0",
                "3 <- 4.4",
                "4 <- 2.4"
            ]
        },
        "Step 5": {
            "steps": [
                "9 - 5 = 4 (left: 4 6 8) || 4 * 6 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 24)",
                "9 - 5 = 4 (left: 4 6 8) || 6 * 8 = 48 (left: 4 48)",
                "9 - 5 = 4 (left: 4 6 8) || 6 / 4 = 1.5 (",
                "9 - 5 = 4 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (9 - 5) * (8 - 4) = 24",
                "9 - 5 = 4 (left: 4 6 8) || 4 * 6 = 24 (left: 8 24) || 8 / 24 = 0.3333 (left: 0.3333)"
            ],
            "Pruning": [
                "3<-4.1"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 4.4",
                "2 <- 4.1",
                "3 <- 4.0",
                "4 <- 4.4"
            ]
        },
        "Step 6": {
            "steps": [
                "9 - 5 = 4 (left: 4 6 8) || 8 / 4 = 2 (left: 2 6)",
                "9 - 5 = 4 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (9 - 5) * (8 - 4) = 24",
                "9 - 5 = 4 (left: 4 6 8) || 4 + 6 = 10 (left: 8 10)",
                "9 - 5 = 4 (left: 4 6 8) || 4 * 6 = 24 (left: 8 24)",
                "9 - 5 = 4 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (9 - 5) * (8 - 4) = 24"
            ],
            "Pruning": [
                "1<-5.3",
                "4<-1.2"
            ],
            "Evaluation": [
                0.002,
                60.0,
                1.002,
                21.0,
                41.0
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 6.4",
                "2 <- 6.3",
                "3 <- 2.4",
                "4 <- 5.3"
            ]
        },
        "Step 7": {
            "steps": [
                "9 - 5 = 4 (left: 4 6 8) || 6 * 8 = 48 (left: 4 48)",
                "9 - 5 = 4 (left: 4 6 8) || 6 / 4 = 1.5 (left: 1.5 8)",
                "9 - 5 = 4 (left: 4 6 8) || 4 * 6 = 24 (left: 8 24) || 24 - 8 = 16 (left: 16)",
                "9 - 5 = 4 (left: 4 6 8) || 4 * 6 = 24 (left: 8 24) || 8 + 24 = 32 (left: 32)",
                "9 - 5 = 4 (left: 4 6 8) || Input: 3 5 7 9"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 6.3",
                "2 <- 6.4",
                "3 <- 6.1",
                "4 <- 4.1"
            ]
        },
        "Step 8": {
            "steps": [
                "9 - 5 = 4 (left: 4 6 8) || Input:",
                "9 - 5 = 4 (left: 4 6 8) || 4 * 6 = 24 (left: 8 24) || Possible next steps:",
                "9 - 5 = 4 (left: 4 6 8) || 6 + 8 = 14 (left: 4 14)",
                "9 - 5 = 4 (left: 4 6 8) || 4 + 6 = 10 (left: 8 10)",
                "9 - 5 = 4 (left: 4 6 8) || 8 / 4 = 2 (left: 2 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                0.003,
                0.003,
                1.002,
                0.002
            ],
            "Resampling": [
                "0 <- 8.0",
                "1 <- 4.0",
                "2 <- 8.0",
                "3 <- 8.0",
                "4 <- 8.0"
            ]
        },
        "Step 9": {
            "steps": [
                "9 - 5 = 4 (left: 4 6 8) || Input: || Please provide a list of numbers to find possible next steps.",
                "9 - 5 = 4 (left: 4 6 8) || Input: 3 5",
                "9 - 5 = 4 (left: 4 6 8) || Input: || Please provide the numbers for the next step.",
                "9 - 5 = 4 (left: 4 6 8) || Input: || There is no input provided. Can you please provide the input so that I can suggest possible next steps?",
                "9 - 5 = 4 (left: 4 6 8) || Input: || Please provide the input numbers for the possible next steps."
            ],
            "Pruning": []
        },
        "Input": "5 6 8 9",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "856": {
        "puzzle": "3 3 5 9",
        "Step 0": {
            "steps": [
                "3 / 3 = 1 (left: 5 1 9)",
                "5 * 3 = 15 (left: 15 3 ",
                "9 / 3 = 3 (left: 3 5 9)",
                "5 - 3 = 2 (left: 2 3 9)",
                "3 * 3 = 9 (left: 9 5 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.003,
                60.0,
                0.003,
                41.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.4",
                "2 <- 0.4",
                "3 <- INIT",
                "4 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "9 / 3 = 3 (left: 3 5 9) || 9 / 3 = 3 (left: 3 5)",
                "3 * 3 = 9 (left: 9 5 9) || 5 - 9 = -4 (left: -4 9)",
                "3 * 3 = 9 (left: 9 5 9) || 5 + 9 = 14 (left: 9 14)",
                "5 * 3 = 15 (left: 15 3 ",
                "9 / 3 = 3 (left: 3 5 9) || 9 - 3 = 6 (left: 6 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.001,
                0.001,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.2",
                "2 <- 0.4",
                "3 <- INIT",
                "4 <- 0.4"
            ]
        },
        "Step 2": {
            "steps": [
                "9 / 3 = 3 (left: 3 5 9) || 5 * 3 = 15 (left: 15 9)",
                "9 / 3 = 3 (left: 3 5 9) || 5 * 3 = 15 (left: 15 9)",
                "3 * 3 = 9 (left: 9 5 9) || 5 - 9 = -4 (left: -4 9)",
                "3 * 5 = 15 (left: 15 3 9)",
                "3 * 3 = 9 (left: 9 5 9) || 9 / 5 = 1.8 (left: 1.8 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                20.002,
                1.001,
                3.0,
                0.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 2.0",
                "2 <- 0.4",
                "3 <- 0.2",
                "4 <- 2.0"
            ]
        },
        "Step 3": {
            "steps": [
                "3 * 3 = 9 (left: 9 5 9) || 9 / 5 = 1.8 (",
                "9 / 3 = 3 (left: 3 5 9) || 5 * 3 = 15 (left: 15 9) || 15 * 9 = 135 (left: 135)",
                "3 * 3 = 9 (left: 9 5 9) || 9 - 5 = 4 (left: 4 9)",
                "9 / 3 = 3 (left: 3 5 9) || 3 + 5 = 8 (left: 8 9)",
                "9 / 3 = 3 (left: 3 5 9) || 5 * 3 = 15 (left: 15 9) || 9 - 15 = -6 (left: -6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                20.0,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 0.2",
                "3 <- 2.0",
                "4 <- 2.0"
            ]
        },
        "Step 4": {
            "steps": [
                "9 / 3 = 3 (left: 3 5 9) || 5 * 3 = 15 (left: 15 9) || 15 / 9 = 1.67 (left: 1.67)",
                "9 / 3 = 3 (left: 3 5 9) || 5 * 3 = 15 (left: 15 9) || 15 * 9 = 135 (left: 135)",
                "9 / 3 = 3 (left: 3 5 9) || 3 * 5 = 15 (left: 15 9)",
                "9 / 3 = 3 (left: 3 5 9) || 5 * 3 = 15 (left: 15 9) || 15 + 9 = 24 (left: 24)",
                "9 / 3 = 3 (left: 3 5 9) || 5 * 3 = 15 (left: 15 9) || 15 + 9 = 24 (left: 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                40.001,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 4.3",
                "2 <- 4.3",
                "3 <- 4.3",
                "4 <- 4.2"
            ]
        },
        "Step 5": {
            "steps": [
                "9 / 3 = 3 (left: 3 5 9) || 5 * 3 = 15 (left: 15 9) || 15 + 9 = 24 (left: 24) || Answer: (9 / 3) * (5 + 3) = 24",
                "9 / 3 = 3 (left: 3 5 9) || 5 * 3 = 15 (left: 15 9) || 15 + 9 = 24 (left: 24) || Answer: (9 / 3) * (5 + 3) = 24",
                "9 / 3 = 3 (left: 3 5 9) || 5 * 3 = 15 (left: 15 9) || 15 + 9 = 24 (left: 24) || Answer: (9 / 3) * (5 + 3) = 24",
                "9 / 3 = 3 (left: 3 5 9) || 5 * 3 = 15 (left: 15 9) || 15 + 9 = 24 (left: 24) || Answer: (9 / 3) * (5 + 3) = 24",
                "9 / 3 = 3 (left: 3 5 9) || 3 * 5 = 15 (left: 15 9) || 15 - 9 = 6 (left: 6)"
            ]
        },
        "Input": "3 3 5 9",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "857": {
        "puzzle": "4 5 7 11",
        "Step 0": {
            "steps": [
                "7 + 11 = 18 (left: 4 5 18)",
                "4 * 7 = 28 (left: 5 11 28)",
                "5 * 7 = 35 (left: 4 11 35)",
                "4 * 5 = 20 (left: 7 11 20)",
                "7 + 11 = 18 (left: 4 5 18)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                0.003,
                21.001,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.2",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "4 * 5 = 20 (left: 7 20 11)",
                "7 + 4 = 11 (left: 5 11 ",
                "5 + 7 = 12 (left: 4 12 11)",
                "5 * 7 = 35 (left: 4 11 35) || 35 - 4 = 31 (left: 11 31)",
                "7 - 5 = 2 (left: 2 4 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                1.0,
                0.003,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.4",
                "3 <- INIT",
                "4 <- 0.0"
            ]
        },
        "Step 2": {
            "steps": [
                "7 * 11 = 77 (left: 4 5 ",
                "5 + 7 = 12 (left: 4 12 11)",
                "7 - 5 = 2 (left: 2 4 11) || 11 - 2 = 9 (left: 4 9)",
                "7 + 11 = 18 (left: 4 5 18)",
                "7 + 11 = 18 (left: 4 5 18) || 18 - 5 = "
            ],
            "Pruning": [],
            "Evaluation": [
                2.0,
                1.002,
                1.002,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.2",
                "2 <- 2.3",
                "3 <- INIT",
                "4 <- 2.0"
            ]
        },
        "Step 3": {
            "steps": [
                "4 + 5 = 9 (left: 7 9 11)",
                "5 * 7 = 35 (left: 4 11 35) || 35 / 11 = 3.1818181818181817 (left: 4 3.1818181818181817)",
                "7 + 11 = 18 (left: 4 5 18) || 18 - 5 = ",
                "7 + 4 = 11 (left: 5 11 ",
                "7 * 11 = 77 (left: 4 5  || 4 * 5 = 20 (left: 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                2.001,
                0.003,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.0",
                "4 <- 0.4"
            ]
        },
        "Step 4": {
            "steps": [
                "7 + 11 = 18 (left: 4 5 18) || 18 / 5 = 3.6 (left: 4 3.6)",
                "7 - 4 = 3 (left: 3 5 11)",
                "4 + 5 = 9 (left: 7 9 11)",
                "7 + 11 = 18 (left: 4 5 18) || 18 - 5 = ",
                "7 + 11 = 18 (left: 4 5 18) || 5 * 4 = 20 (left: 20 18)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                3.0,
                2.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 0.2",
                "2 <- 1.1",
                "3 <- 4.1",
                "4 <- INIT"
            ]
        },
        "Step 5": {
            "steps": [
                "7 + 11 = 18 (left: 4 5 18) || 18 - 4 = 14 (left: 5 14)",
                "5 * 7 = 35 (left: 4 11 35) || 11 - 4 = 7 (left: 7 35)",
                "7 + 4 = 11 (left: 5 11  || 5 + 11 = 16 (left: 16)",
                "7 - 4 = 3 (left: 3 5 11) || 11 - 5 = 6 (left: 3 6)",
                "11 - 4 = 7 (left: 7 5 "
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                20.002,
                0.002,
                1.0,
                0.001
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 5.1",
                "2 <- 5.1",
                "3 <- 5.1",
                "4 <- 2.1"
            ]
        },
        "Step 6": {
            "steps": [
                "5 * 7 = 35 (left: 4 11 35) || 11 - 4 = 7 (left: 7 35) || 7 * 5 = 35 (left: 35)",
                "5 * 7 = 35 (left: 4 11 35) || 11 - 4 = 7 (left: 7 35) || Input: 3 9 27",
                "5 * 7 = 35 (left: 4 11 35) || 11 - 4 = 7 (left: 7 35) || 7 * 5 = 35 (left: 35)",
                "5 * 7 = 35 (left: 4 11 35) || 11 - 4 = 7 (left: 7 35) || 35 / 7 = 5 (left: 5)",
                "5 + 7 = 12 (left: 4 12 11) || 12 / 4 = 3 (left: 3 12 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 5.0",
                "2 <- 5.1",
                "3 <- 0.0",
                "4 <- 0.0"
            ]
        },
        "Step 7": {
            "steps": [
                "5 * 7 = 35 (left: 4 11 35) || 11 - 4 = 7 (left: 7 35) || 35 / 5 = 7 (left: 7 35)",
                "7 + 11 = 18 (left: 4 5 18) || 18 - 4 = 14 (left: 5 14) || 5 - 14 = -9 (left: -9)",
                "5 * 7 = 35 (left: 4 11 35) || 11 - 4 = 7 (left: 7 35) || 7 * 5 = 35 (left: 35)",
                "7 + 11 = 18 (left: 4 5 18) || 4 + 5 = 9 (left: 9 18)",
                "7 + 11 = 18 (left: 4 5 18) || 4 + 5 = 9 (left: 9 18)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                20.001,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 5.1",
                "2 <- INIT",
                "3 <- 7.1",
                "4 <- 5.1"
            ]
        },
        "Step 8": {
            "steps": [
                "5 * 7 = 35 (left: 4 11 35) || 11 - 4 = 7 (left: 7 35) || 7 + 35 = 42 (left: 42)",
                "5 * 7 = 35 (left: 4 11 35) || 11 - 4 = 7 (left: 7 35) || 7 * 5 = 35 (left: 35)",
                "4 * 5 = 20 (left: 7 20 11)",
                "7 + 11 = 18 (left: 4 5 18) || 18 - 4 = 14 (left: 5 14) || 5 - 14 = -9 (left: -9) || There are no possible next steps with the given input.",
                "5 * 7 = 35 (left: 4 11 35) || 11 - 4 = 7 (left: 7 35) || 7 * 5 = 35 (left: 35)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                2.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 8.2",
                "1 <- 7.0",
                "2 <- 7.1",
                "3 <- 5.1",
                "4 <- 7.0"
            ]
        },
        "Step 9": {
            "steps": [
                "4 * 5 = 20 (left: 7 20 11) || 7 / 20 = 0.35 (",
                "5 * 7 = 35 (left: 4 11 35) || 11 - 4 = 7 (left: 7 35) || 35 / 5 = 7 (left: 7 35) || 35 - 7 = 28 (left: 28)",
                "7 + 11 = 18 (left: 4 5 18) || 18 - 4 = 14 (left: 5 14) || 5 - 14 = -9 (left: -9) || There are no valid operations that can be performed with the given input to reach the target numbers.",
                "5 * 7 = 35 (left: 4 11 35) || 11 - 4 = 7 (left: 7 35) || 7 * 5 = 35 (left: 35)",
                "5 * 7 = 35 (left: 4 11 35) || 11 - 4 = 7 (left: 7 35) || 35 / 5 = 7 (left: 7 35) || 35 - 7 = 28 (left: 28)"
            ],
            "Pruning": [
                "1<-7.0",
                "4<-0.2"
            ]
        },
        "Input": "4 5 7 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "858": {
        "puzzle": "4 9 12 12",
        "Step 0": {
            "steps": [
                "9 / 4 = 2.25 (left: 2.25 12 12)",
                "9 - 4 = 5 (left: 5 12 12)",
                "9 - 4 = 5 (left: 5 12 12)",
                "4 * 9 = 36 (left: 12 12 36)",
                "12 - 4 = 8 (left: 8 12 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                3.0,
                40.001,
                1.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "4 * 9 = 36 (left: 12 12 36) || 36 - 12 = 24 (left: 12 24)",
                "12 / 4 = 3 (left: 3 12 12)",
                "4 + 9 = 13 (left: 12 12 13)",
                "12 - 9 = 3 (left: ",
                "4 + 9 = 13 (left: 12 13 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                20.002,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.3",
                "2 <- 0.3",
                "3 <- 1.1",
                "4 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36)",
                "4 * 9 = 36 (left: 12 12 36) || 12 * 12 = 144 (left: 144 36)",
                "4 * 9 = 36 (left: 12 12 36) || 12 + 12 = 24 (left: 24 36)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 + 3 = 15 (left: 12 15)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                21.001,
                1.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 2.0",
                "2 <- 2.0",
                "3 <- 2.0",
                "4 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36)",
                "4 * 9 = 36 (left: 12 12 36) || 12 * 12 = 144 (left: 144 36) || 144 * 36 = 5184 (left: 5184)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                20.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 3.3",
                "2 <- 3.3",
                "3 <- 1.2",
                "4 <- 2.0"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 4 = 8 (left: 8 12 12)",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36) || None - 36 is the final result.",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36) || There are no possible next steps as there is only one number provided.",
                "4 + 9 = 13 (left: 12 12 13) || 12 - 12 = 0 (left: 0 13)",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                0.003,
                0.003,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 3.2",
                "2 <- 4.4",
                "3 <- 4.4",
                "4 <- 4.4"
            ]
        },
        "Step 5": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36)",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || There are no possible next steps with the input of 36 as it is already a single number.",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36) || 36 / 2 = 18",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36) || 36 + 2 = 38",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36) || 36 / 2 = 18"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 4.4",
                "2 <- 3.3",
                "3 <- 1.1",
                "4 <- 4.4"
            ]
        },
        "Step 6": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 36 - 12 = 24 (left: 12 24)",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36) || 36 / 4 = 9 (left: 9)",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36) || 36 cannot be broken down further as it is already a single number.",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12)",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36) || 36 / 2 = 18"
            ],
            "Pruning": [
                "1<-1.1"
            ],
            "Evaluation": [
                1.002,
                60.0,
                0.003,
                21.001,
                0.003
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 6.1",
                "2 <- 5.0",
                "3 <- 4.4",
                "4 <- 6.1"
            ]
        },
        "Step 7": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 12 - 9 = 3 (left: 3 12 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 * 12 = 144 (left: 144 36)",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36) || There are no possible next steps for the number 36 as it is already a single number.",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                20.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 6.3",
                "2 <- 6.1",
                "3 <- 6.1",
                "4 <- 7.0"
            ]
        },
        "Step 8": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 12 36)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 12 = 0 (left: 3 0)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left:",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 12 - 9 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                1.002,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 7.0",
                "1 <- 7.0",
                "2 <- 8.1",
                "3 <- 7.0",
                "4 <- 5.0"
            ]
        },
        "Step 9": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 12 + 108 = 120 (left: 120)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 12 - 9 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 36 / 12 = 3 (left: 3 36)"
            ],
            "Pruning": [
                "2<-7.2"
            ]
        },
        "Input": "4 9 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "859": {
        "puzzle": "3 3 6 9",
        "Step 0": {
            "steps": [
                "9 - 3 = 6 (left: 3 6 9)",
                "3 + 3 = 6 (left: 6 6 9)",
                "6 + 3 = 9 (left: 3 9 9)",
                "3 * 3 = 9 (left: 6 9 9)",
                "6 * 3 = 18 (left: 3 6 "
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                3.0,
                20.002,
                40.001,
                41.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.2",
                "2 <- 0.4",
                "3 <- 0.2",
                "4 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "9 / 3 = 3 (left: 3 6 ",
                "6 + 3 = 9 (left: 3 9 9) || 9 / 3 = 3 (left: 3 9)",
                "6 * 3 = 18 (left: 3 6  || 6 / 3 = 2 (left: 2)",
                "6 + 3 = 9 (left: 3 9 9) || 9 / 3 = 3 (left: 3 9)",
                "6 + 3 = 9 (left: 3 9 9) || 3 * 9 = 27 (left: 9 27)"
            ],
            "Pruning": [],
            "Evaluation": [
                41.0,
                0.003,
                0.001,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 1.0",
                "2 <- 0.4",
                "3 <- 1.0",
                "4 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "6 + 3 = 9 (left: 3 9 9) || Input: 4 16 16",
                "9 / 3 = 3 (left: 3 6  || 6 - 3 = 3 (left: 3)",
                "6 * 3 = 18 (left: 3 6  || 5 * 10 =",
                "9 / 3 = 3 (left: 3 6  || 3 * 6 = 18 (left: 18)",
                "9 / 3 = 3 (left: 3 6  || 3 * 6 = 18 (left: 18)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                60.0,
                20.0
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 1.0",
                "2 <- 0.4",
                "3 <- 0.2",
                "4 <- 1.0"
            ]
        },
        "Step 3": {
            "steps": [
                "3 * 3 = 9 (left: 6 9 9) || 6 + 9 = 15 (left: 9 9 15)",
                "9 / 3 = 3 (left: 3 6  || 6 / 3 = 2 (left: 2)",
                "6 * 3 = 18 (left: 3 6  || 6 / 3 = 2 (left: 2)",
                "6 + 3 = 9 (left: 3 9 9) || 9 / 3 = 3 (left: 3 9)",
                "9 / 3 = 3 (left: 3 6  || Input: 4 9"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                0.002,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 2.3",
                "2 <- 1.0",
                "3 <- 2.3",
                "4 <- 2.3"
            ]
        },
        "Step 4": {
            "steps": [
                "6 + 3 = 9 (left: 3 9 9) || 9 / 3 = 3 (left: 3 3)",
                "9 / 3 = 3 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "9 / 3 = 3 (left: 3 6  || 3 + 6 = 9 (left: 9)",
                "9 / 3 = 3 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "9 / 3 = 3 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps as there are no other numbers provided to perform operations with."
            ],
            "Pruning": [],
            "Evaluation": [
                20.0,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 4.0",
                "2 <- 4.0",
                "3 <- 2.3",
                "4 <- 4.0"
            ]
        },
        "Step 5": {
            "steps": [
                "3 * 3 = 9 (left: 6 9 9) || 9 / 3 = 3 (left: 6 9 3)",
                "6 + 3 = 9 (left: 3 9 9) || 9 / 3 = 3 (left: 3 3) || 4 + 6 = 10 (left: 10)",
                "6 + 3 = 9 (left: 3 9 9) || 9 / 3 = 3 (left: 3 3) || 3 * 3 = 9 (left: 9)",
                "9 / 3 = 3 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the given input of 18.",
                "6 + 3 = 9 (left: 3 9 9) || 9 / 3 = 3 (left: 3 3) || 3 - 3 = 0 (left: 0)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                0.002,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.3",
                "2 <- 1.0",
                "3 <- 0.3",
                "4 <- 2.4"
            ]
        },
        "Step 6": {
            "steps": [
                "9 / 3 = 3 (left: 3 6  || 3 * 6 = 18 (left: 18) || 18 / 3 = 6 (left: 6 18)",
                "9 / 3 = 3 (left: 3 6  || 3 * 6 = 18 (left: 18) || 18 / 2 = 9 (left: 9)",
                "9 / 3 = 3 (left: 3 6  || 6 - 3 = 3 (left: 3)",
                "3 * 3 = 9 (left: 6 9 9) || 9 / 3 = 3 (left: 6 3 9)",
                "9 / 3 = 3 (left: 3 6  || 3 * 6 = 18 (left: 18) || No possible next steps with the input 18."
            ],
            "Pruning": [],
            "Evaluation": [
                40.001,
                0.002,
                0.001,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 6.0",
                "2 <- 2.3",
                "3 <- 6.0",
                "4 <- INIT"
            ]
        },
        "Step 7": {
            "steps": [
                "9 / 3 = 3 (left: 3 6  || 3 * 6 = 18 (left: 18) || 18 / 3 = 6 (left: 6 18) || 18 - 6 = 12 (left: 12)",
                "9 / 3 = 3 (left: 3 6  || 3 * 6 = 18 (left: 18) || 18 / 3 = 6 (left: 6 18) || 6 * 3 = 18 (left: 18)",
                "9 / 3 = 3 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input of 18.",
                "9 / 3 = 3 (left: 3 6  || 3 * 6 = 18 (left: 18) || 18 / 3 = 6 (left: 6 18) || 6 * 3 = 18 (left: 18)",
                "9 / 3 = 3 (left: 3 6 9)"
            ],
            "Pruning": [
                "0<-4.0",
                "1<-6.3",
                "3<-6.0"
            ],
            "Evaluation": [
                21.0,
                1.002,
                0.003,
                20.002,
                1.002
            ],
            "Resampling": [
                "0 <- 7.1",
                "1 <- 7.3",
                "2 <- 7.0",
                "3 <- 7.3",
                "4 <- 7.0"
            ]
        },
        "Step 8": {
            "steps": [
                "3 * 3 = 9 (left: 6 9 9) || 9 / 3 = 3 (left: 6 3 9) || 3 * 3 = 9 (left: 6 9)",
                "9 / 3 = 3 (left: 3 6  || 3 * 6 = 18 (left: 18) || 18 / 3 = 6 (left: 6 18) || 18 - 6 = 12 (left: 12)",
                "6 + 3 = 9 (left: 3 9 9) || 9 / 3 = 3 (left: 3 3) || 3 - 3 = 0 (left: 0)",
                "9 / 3 = 3 (left: 3 6  || 3 * 6 = 18 (left: 18) || 18 / 3 = 6 (left: 6 18) || 6 * 3 = 18 (left: 18)",
                "6 + 3 = 9 (left: 3 9 9) || 9 / 3 = 3 (left: 3 3) || 3 / 3 = 1 (left: 1)"
            ],
            "Pruning": [
                "1<-7.3",
                "3<-7.0"
            ],
            "Evaluation": [
                0.003,
                1.002,
                0.003,
                20.0,
                0.003
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 6.0",
                "2 <- 8.3",
                "3 <- 8.3",
                "4 <- 6.0"
            ]
        },
        "Step 9": {
            "steps": [
                "9 / 3 = 3 (left: 3 6  || 3 * 6 = 18 (left: 18) || 18 / 3 = 6 (left: 6 18) || 18 / 6 = 3 (left: 3)",
                "9 / 3 = 3 (left: 3 6  || 3 * 6 = 18 (left: 18) || 18 / 3 = 6 (left: 6 18) || 6 * 18 = 108 (left: 108)",
                "6 + 3 = 9 (left: 3 9 9) || 9 / 3 = 3 (left: 3 3) || 3 + 3 = 6 (left: 6)",
                "6 + 3 = 9 (left: 3 9 9) || 9 / 3 = 3 (left: 3 3) || 3 / 3 = 1 (left: 1)",
                "9 / 3 = 3 (left: 3 6  || 3 * 6 = 18 (left: 18) || 18 / 3 = 6 (left: 6 18) || 6 * 3 = 18 (left: 18)"
            ],
            "Pruning": [
                "0<-8.3",
                "1<-4.0",
                "4<-0.2"
            ]
        },
        "Input": "3 3 6 9",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "860": {
        "puzzle": "3 5 9 13",
        "Step 0": {
            "steps": [
                "9 - 5 = 4 (left: 3 4 13)",
                "9 + 3 = 12 (left: 5 12 13)",
                "5 - 3 = 2 (left: 2 9 13)",
                "3 * 5 = 15 (left: 9 15 13)",
                "9 - 5 = 4 (left: 4 9 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.002,
                2.001,
                1.002,
                1.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.2",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "13 - 5 = 8 (left: 3 9 8)",
                "3 + 5 = 8 (left: 8 9 13)",
                "5 - 3 = 2 (left: 2 9 13) || 2 * 9 = 18 (left: 18 13)",
                "3 + 5 = 8 (left: 8 9 13)",
                "13 - 9 = 4 (left: 3 5 4)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                0.003,
                0.003,
                1.002,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 1.4",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "9 - 5 = 4 (left: 3 4 ",
                "5 * 3 = 15 (left: 15 9 13)",
                "3 * 5 = 15 (left: 15 9 13)",
                "13 - 9 = 4 (left: 3 5 4) || 4 - 3 = 1 (left: 1 4)",
                "5 * 9 = 45 (left: 3 45 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                20.002,
                0.003,
                60.0,
                2.0
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.0",
                "2 <- 1.0",
                "3 <- 2.3",
                "4 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "13 - 9 = 4 (left: 3 5 4) || 4 - 3 = 1 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "9 - 5 = 4 (left: 3 4  || 4 / 3 = 1.33333 (left: 1.33333)",
                "13 - 5 = 8 (left: 3 9 8) || 8 - 3 = 5 (left: 5)",
                "13 - 9 = 4 (left: 3 5 4) || 4 - 3 = 1 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "5 * 3 = 15 (left: 15 9 13) || 9 * 13 = "
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.0,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.3",
                "2 <- 2.0",
                "3 <- 2.3",
                "4 <- 2.3"
            ]
        },
        "Step 4": {
            "steps": [
                "9 - 5 = 4 (left: 3 4  || 4 / 3 = 1.33 (left: 1.33)",
                "13 - 9 = 4 (left: 3 5 4) || 4 - 3 = 1 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "9 - 5 = 4 (left: 3 4  || Input: 5 7",
                "13 - 9 = 4 (left: 3 5 4) || 4 - 3 = 1 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "13 - 9 = 4 (left: 3 5 4) || 4 - 3 = 1 (left: 1 4) || 4 / 1 = 4 (left: 4)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.3",
                "2 <- INIT",
                "3 <- 2.1",
                "4 <- 2.1"
            ]
        },
        "Step 5": {
            "steps": [
                "13 - 9 = 4 (left: 3 5 4) || 4 - 3 = 1 (left: 1 4) || 4 + 1 =",
                "13 - 9 = 4 (left: 3 5 4) || 4 - 3 = 1 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "5 * 3 = 15 (left: 15 9 13)",
                "5 * 3 = 15 (left: 15 9 13) || 9 - 13 = -4 (left: -4 15)",
                "5 * 3 = 15 (left: 15 9 13) || 9 * 13 = 117 (left: 15 117)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                20.001,
                1.002,
                0.002
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.1",
                "2 <- 2.3",
                "3 <- 2.3",
                "4 <- 2.1"
            ]
        },
        "Step 6": {
            "steps": [
                "13 - 9 = 4 (left: 3 5 4) || 4 - 3 = 1 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "5 * 3 = 15 (left: 15 9 13) || 15 + 13 = 28 (left: 9 28)",
                "13 - 9 = 4 (left: 3 5 4) || 4 - 3 = 1 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "13 - 9 = 4 (left: 3 5 4) || 4 - 3 = 1 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "5 * 3 = 15 (left: 15 9 13) || 9 * 13 = 117 (left: 15 117)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 2.3",
                "2 <- 5.2",
                "3 <- 5.2",
                "4 <- 2.3"
            ]
        },
        "Step 7": {
            "steps": [
                "5 * 3 = 15 (left: 15 9 13) || 9 - 15 = -6 (left: -6 13)",
                "13 - 9 = 4 (left: 3 5 4) || 4 - 3 = 1 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "5 * 3 = 15 (left: 15 9 13) || 15 + 9 = 24 (left: 13 24)",
                "5 * 3 = 15 (left: 15 9 13) || 9 - 13 = -4 (left: -",
                "13 - 9 = 4 (left: 3 5 4) || 4 - 3 = 1 (left: 1 4) || 1 + 4 = 5"
            ],
            "Pruning": [],
            "Evaluation": [
                1.001,
                0.002,
                0.003,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.3",
                "2 <- 2.1",
                "3 <- 2.0",
                "4 <- 5.2"
            ]
        },
        "Step 8": {
            "steps": [
                "13 - 9 = 4 (left: 3 5 4) || 4 - 3 = 1 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "13 - 9 = 4 (left: 3 5 4) || 4 - 3 = 1 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "5 * 3 = 15 (left: 15 9 13) || 15 / 13 = 1.1538 (left: 9 1.1538)",
                "9 - 5 = 4 (left: 3 4  || 4 - 3 = 1 (left: 1)",
                "5 * 3 = 15 (left: 15 9 13) || 15 - 9 = 6 (left: 6 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.1",
                "2 <- 2.0",
                "3 <- 2.3",
                "4 <- INIT"
            ]
        },
        "Step 9": {
            "steps": [
                "13 - 9 = 4 (left: 3 5 4) || 4 - 3 = 1 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "5 * 3 = 15 (left: 15 9 13) || 9 + 13 = 22 (left: 15 22)",
                "9 - 5 = 4 (left: 3 4  || 3 * 4 = 12 (left: 12)",
                "13 - 9 = 4 (left: 3 5 4) || 4 - 3 = 1 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "13 - 3 = 10 (left: 5 9 10)"
            ],
            "Pruning": []
        },
        "Input": "3 5 9 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "861": {
        "puzzle": "3 7 8 13",
        "Step 0": {
            "steps": [
                "13 - 7 = 6 (left: 3 6 ",
                "8 - 3 = 5 (left: 5 7 ",
                "7 / 3 = 2 (left: 2 8 13)",
                "13 - 3 = 10 (left: 7 8 10)",
                "3 * 7 = 21 (left: 8 13 21)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.001,
                0.0,
                0.003,
                21.001,
                1.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.0",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "13 - 3 = 10 (left: 7 8 10) || 8 / 7 = 1.14285714286 (left: 1.14285714286 8 10)",
                "13 - 7 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3)",
                "13 - 3 = 10 (left: 7 8 10)",
                "3 * 7 = 21 (left: 8 13 21)",
                "7 - 3 = 4 (left: 4 8 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                0.0,
                22.0,
                1.001,
                2.001
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 0.3",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "13 - 3 = 10 (left: 7 8 10) || 7 * 8 = 56 (left: 10 56)",
                "13 - 3 = 10 (left: 7 8 10) || 7 * 8 = 56 (left: 10 56)",
                "13 - 3 = 10 (left: 7 8 10)",
                "7 / 3 = 2 (left: 2 8 13)",
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.001,
                0.001,
                2.001,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 2.4",
                "2 <- INIT",
                "3 <- 2.4",
                "4 <- 1.2"
            ]
        },
        "Step 3": {
            "steps": [
                "13 - 3 = 10 (left: 7 8 10) || 7 + 8 = 15 (left: 10 15)",
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8 10) || 10 - 3 = 7 (left: 7 8)",
                "7 / 3 = 2 (left: 2 8 13)",
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8 10) || 10 - 8 = 2 (left: ",
                "13 - 3 = 10 (left: 7 8 10) || 8 * 7 = 56 (left: 10 56)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                21.001,
                2.001,
                0.0,
                0.001
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 3.1",
                "2 <- INIT",
                "3 <- 3.1",
                "4 <- 2.4"
            ]
        },
        "Step 4": {
            "steps": [
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8 10) || 3 -",
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8 10) || 10 - 3 = 7 (left: 7 8) || 7 + 8 = 15 (left: 15)",
                "13 - 3 = 10 (left: 7 8 10)",
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8 10) || 10 - 3 = 7 (left: 7 8) || 7 - 8 = -1 (left: -1)",
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8 10) || 3 / 8 = "
            ],
            "Pruning": [
                "1<-0.0",
                "3<-2.4"
            ],
            "Evaluation": [
                0.003,
                41.0,
                41.0,
                21.0,
                0.003
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 4.1",
                "2 <- 0.3",
                "3 <- 3.1",
                "4 <- 3.1"
            ]
        },
        "Step 5": {
            "steps": [
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8 10) || 10 - 3 = 7 (left: 7 8) || 7 - 8 = -1 (left: -1)",
                "13 - 7 = 6 (left: 3 6  || Input: 4 7",
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8)",
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8 10) || 10 - 3 = 7 (left: 7 8) || 7 * 8 = 56 (left: 56)",
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8 10) || 10 - 3 = 7 (left: 7 8) || 7 * 8 = 56 (left: 56)"
            ],
            "Pruning": [
                "0<-0.0",
                "3<-4.1",
                "4<-4.1"
            ],
            "Evaluation": [
                2.0,
                0.003,
                60.0,
                41.0,
                1.001
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 5.3",
                "2 <- 5.2",
                "3 <- 4.1",
                "4 <- 5.2"
            ]
        },
        "Step 6": {
            "steps": [
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8 10) || Input:",
                "13 - 7 = 6 (left: 3 6  || 6 / 3 = 2 (left: 2)",
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 8 / 3 = 2.66667 (left: 2.66667 8)",
                "13 - 7 = 6 (left: 3 6  || 6 / 3 = 2 (left: 2)",
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                2.001,
                0.0,
                60.0
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 5.3",
                "2 <- 5.2",
                "3 <- 5.2",
                "4 <- 4.3"
            ]
        },
        "Step 7": {
            "steps": [
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8 10) || 3 * 8 = 24 (left: 10 24)",
                "13 - 7 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3)",
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5 8)",
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665 8)",
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8 10) || 10 / 3 = 3.33333333333 (left:"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.001,
                0.003,
                2.001,
                2.0
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 4.1",
                "2 <- 5.2",
                "3 <- 4.1",
                "4 <- 5.2"
            ]
        },
        "Step 8": {
            "steps": [
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 - 8 = -5 (left: -5 8)",
                "13 - 7 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3)",
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "13 - 7 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3)",
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.001,
                0.002,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 6.4",
                "2 <- 6.4",
                "3 <- 5.3",
                "4 <- 4.2"
            ]
        },
        "Step 9": {
            "steps": [
                "13 - 7 = 6 (left: 3 6  || 3 + 6 = 9 (left: 9)",
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (13 - 3) * (10 - 7) = 24",
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (13 - 3) * (10 - 7) = 24",
                "13 - 7 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3)",
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8)"
            ],
            "Pruning": [
                "1<-5.2",
                "2<-4.2"
            ]
        },
        "Input": "3 7 8 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "862": {
        "puzzle": "4 4 5 7",
        "Step 0": {
            "steps": [
                "5 + 7 = 12 (left: 4 4 ",
                "4 * 4 = 16 (left: 5 7 16)",
                "4 + 4 = 8 (left: 5 7 8)",
                "4 + 4 = 8 (left: 5 7 8)",
                "4 / 4 = 1 (left: 1 5 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.002,
                3.0,
                3.0,
                2.001
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- INIT",
                "2 <- 0.3",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "4 / 4 = 1 (left: 1 5 7) || 1 * 5 = 5 (left: 5 7)",
                "4 + 4 = 8 (left: 5 7 8)",
                "4 + 4 = 8 (left: 5 7 8) || 7 * 8 = 56 (left: 5 56)",
                "5 - 4 = 1 (left: 1 4 7)",
                "4 + 4 = 8 (left: 5 7 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                3.0,
                2.001,
                2.001,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.3",
                "3 <- INIT",
                "4 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "7 - 4 = 3 (left: 3 4 5)",
                "5 + 4 = 9 (left: 4 7 9)",
                "4 + 4 = 8 (left: 5 7 8) || 7 - 8 = -1 (left: 5 -1)",
                "4 + 4 = 8 (left: 5 7 8)",
                "4 + 4 = 8 (left: 5 7 8) || 7 + 8 = 15 (left: 5 15)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                3.0,
                0.0,
                2.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.3",
                "2 <- 0.4",
                "3 <- 2.1",
                "4 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "4 + 4 = 8 (left: 5 7 8) || 5 * 8 = 40 (left:",
                "5 - 4 = 1 (left: 1 4 7) || 7 / 1 = 7 (left: 7)",
                "4 / 4 = 1 (left: 1 5 7) || 7 - 1 = 6 (left: 5 6)",
                "5 + 4 = 9 (left: 4 7 9) || 9 - 4 = 5 (left: 5 7)",
                "5 - 4 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                20.001,
                40.0
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 3.4",
                "2 <- INIT",
                "3 <- 3.3",
                "4 <- 3.3"
            ]
        },
        "Step 4": {
            "steps": [
                "5 - 4 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "5 - 4 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "5 + 4 = 9 (left: 4 7 9)",
                "5 + 4 = 9 (left: 4 7 9) || 9 - 4 = 5 (left: 5 7) || Input: 10 2",
                "5 + 4 = 9 (left: 4 7 9) || 9 - 4 = 5 (left: 5 7) || 7 + 5 = 12 (left: 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.001,
                2.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 3.4",
                "2 <- 3.4",
                "3 <- INIT",
                "4 <- 3.3"
            ]
        },
        "Step 5": {
            "steps": [
                "5 - 4 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 / 6 = 0.66666667 (left: 0.66666667)",
                "5 - 4 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "5 - 4 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "4 + 4 = 8 (left: 5 7 8)",
                "5 + 4 = 9 (left: 4 7 9) || 9 - 4 = 5 (left: 5 7) || 7 / 5 = 1.4 (left: 1.4)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                60.0,
                3.0,
                0.0
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 5.2",
                "2 <- 5.2",
                "3 <- 5.2",
                "4 <- 3.4"
            ]
        },
        "Step 6": {
            "steps": [
                "5 - 4 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "5 - 4 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (5 - 4) * 7 = 24",
                "5 - 4 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (5 - 4) * 7 = 24",
                "5 - 4 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (5 - (7 - 4)) = 24",
                "5 - 4 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)"
            ],
            "Pruning": [
                "1<-5.2",
                "2<-3.4",
                "3<-3.4"
            ],
            "Evaluation": [
                0.003,
                40.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 6.2",
                "2 <- 6.2",
                "3 <- 6.4",
                "4 <- 5.2"
            ]
        },
        "Step 7": {
            "steps": [
                "5 - 4 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (5 - 4) * (7 - 1) = 24",
                "5 - 4 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 9 - 3 = 6",
                "5 - 4 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "5 - 4 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (5 - (7 - 4)) = 24",
                "5 - 4 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (5 - 4) * 7 = 24"
            ],
            "Pruning": [
                "0<-6.4",
                "3<-6.3",
                "4<-6.1"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.001,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 7.3",
                "1 <- 6.1",
                "2 <- 5.2",
                "3 <- 7.3",
                "4 <- 6.3"
            ]
        },
        "Step 8": {
            "steps": [
                "5 - 4 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "5 - 4 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (5 - (7 - 4)) = 24",
                "5 - 4 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (5 - (7 - 4)) = 24",
                "5 - 4 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "5 - 4 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)"
            ],
            "Pruning": [
                "1<-6.2",
                "2<-7.3"
            ],
            "Evaluation": [
                60.0,
                60.0,
                20.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 8.1",
                "1 <- 8.4",
                "2 <- 6.3",
                "3 <- 6.2",
                "4 <- 7.3"
            ]
        },
        "Step 9": {
            "steps": [
                "5 - 4 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "5 - 4 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (5 - (7 - 4)) = 24",
                "5 - 4 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "5 - 4 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || Input: 3 9",
                "5 - 4 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 6 - 4 = 2 (left: 2)"
            ],
            "Pruning": [
                "1<-7.0"
            ]
        },
        "Input": "4 4 5 7",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "863": {
        "puzzle": "1 5 5 11",
        "Step 0": {
            "steps": [
                "11 - 1 = 10 (left: 5 5 10)",
                "11 - 5 = 6 (left: 1 6 ",
                "11 - 5 = 6 (left: 1 6 ",
                "1 + 5 = 6 (left: 5 6 11)",
                "1 + 5 = 6 (left: 5 6 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                21.0,
                60.0,
                40.0,
                41.0,
                41.0
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.1",
                "2 <- 0.2",
                "3 <- 0.1",
                "4 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 5 = 6 (left: 5 6 11) || 6 / 5 = 1.2 (left: 1.2 11)",
                "11 - 5 = 6 (left: 1 6  || 1 * 6 = 6 (left: 6)",
                "11 - 5 = 6 (left: 1 6  || 6 - 1 = 5 (left: 5)",
                "11 - 5 = 6 (left: 1 6  || 1 + 6 = 7 (left: 7)",
                "11 - 5 = 6 (left: 1 6  || 1 * 6 = 6 (left: 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                0.002,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.1",
                "2 <- 0.4",
                "3 <- 0.4",
                "4 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 5 = 6 (left: 5 6 11) || 11 - 5 = 6 (left: 6 11)",
                "11 - 5 = 6 (left: 1 6  || 6 / 1 = 6 (left: 6)",
                "1 + 5 = 6 (left: 5 6 11) || 5 + 6 = 11 (left: 11)",
                "1 + 5 = 6 (left: 5 6 11) || 5 + 6 = 11 (left: 11)",
                "1 + 5 = 6 (left: 5 6 11) || 6 - 5 = 1 (left: 1 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                0.002,
                0.003,
                0.003,
                40.0
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 0.2",
                "2 <- 2.0",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 5 = 6 (left: 5 6 11) || 11 - 5 = 6 (left: 6 11) || 6 / 11 = 0.5454545454545454 (left: 0.5454545454545454)",
                "11 - 5 = 6 (left: 1 6  || 6 / 1 = 6 (left: 6)",
                "1 + 5 = 6 (left: 5 6 11) || 11 - 5 = 6 (left: 6 11) || 6 / 11 = 0.545454 (left: 0.545454)",
                "1 + 5 = 6 (left: 5 6 11)",
                "1 + 5 = 6 (left: 5 6 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                41.0,
                3.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.2",
                "2 <- INIT",
                "3 <- 3.3",
                "4 <- 0.1"
            ]
        },
        "Step 4": {
            "steps": [
                "11 - 5 = 6 (left: 1 6  || 1 + 6 = 7 (left: 7)",
                "11 - 5 = 6 (left: 1 6  || 6 - 1 = 5 (left: 5)",
                "5 * 1 = 5 (left: 5 5 11)",
                "1 + 5 = 6 (left: 5 6 11) || 11 - 5 = 6 (left: 6 11)",
                "11 - 5 = 6 (left: 1 6  || 6 - 1 = 5 (left: 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.0,
                1.001,
                0.002,
                0.0
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 0.4",
                "2 <- 3.3",
                "3 <- 0.2",
                "4 <- 0.4"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 5 = 6 (left: 5 6 11) || 5 + 6 = 11 (left: 11)",
                "1 + 5 = 6 (left: 5 6 11) || 6 / 5 = 1.2 (left: 1.2 11)",
                "1 + 5 = 6 (left: 5 6 11) || 5 * 6 = 30 (left: 30 11)",
                "11 - 5 = 6 (left: 1 6  || 6 / 1 = 6 (left: 6)",
                "1 + 5 = 6 (left: 5 6 11) || 6 - 5 = 1 (left: 1 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                1.002,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- INIT",
                "2 <- 5.4",
                "3 <- 5.4",
                "4 <- 0.1"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 5 = 6 (left: 5 6 11) || 6 - 5 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "5 / 1 = 5 (left: 5 5 11)",
                "1 + 5 = 6 (left: 5 6 11) || 6 - 5 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 + 5 = 6 (left: 5 6 11) || 6 - 5 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "11 - 5 = 6 (left: 1 6  || 6 / 1 = 6 (left: 6) "
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                3.0,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 5.4",
                "2 <- 6.1",
                "3 <- 2.0",
                "4 <- 3.3"
            ]
        },
        "Step 7": {
            "steps": [
                "11 - 5 = 6 (left: 1 6  || 1 + 6 = 7 (left: 7)",
                "1 + 5 = 6 (left: 5 6 11) || 6 - 5 = 1 (left: 1 11) || 1 + 11 = 12",
                "5 / 1 = 5 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6)",
                "1 + 5 = 6 (left: 5 6 11) || 11 - 5 = 6 (left: 6 11) || 6 * 11 = 66 (left: 66)",
                "1 + 5 = 6 (left: 5 6 11) || 11 - 6 = 5 (left: 5 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                20.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 7.2",
                "2 <- 3.3",
                "3 <- 5.4",
                "4 <- 7.2"
            ]
        },
        "Step 8": {
            "steps": [
                "1 + 5 = 6 (left: 5 6 11) || 6 - 5 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "5 / 1 = 5 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)",
                "1 + 5 = 6 (left: 5 6 11) || 5 + 6 = 11 (left: 11)",
                "1 + 5 = 6 (left: 5 6 11) || 6 - 5 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "5 / 1 = 5 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                20.0,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 7.2",
                "1 <- 5.4",
                "2 <- 7.2",
                "3 <- 7.2",
                "4 <- 2.0"
            ]
        },
        "Step 9": {
            "steps": [
                "5 / 1 = 5 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 + 6 = 12 (left: 12)",
                "1 + 5 = 6 (left: 5 6 11) || 6 - 5 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "5 / 1 = 5 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "5 / 1 = 5 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "1 + 5 = 6 (left: 5 6 11) || 11 - 5 = 6 (left: 6 11) || 11 * 6 = 66 ("
            ],
            "Pruning": []
        },
        "Input": "1 5 5 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "864": {
        "puzzle": "2 4 6 13",
        "Step 0": {
            "steps": [
                "2 + 4 = 6 (left: 6 6 13)",
                "2 + 4 = 6 (left: 6 6 13)",
                "13 - 6 = 7 (left: 2 4 7)",
                "2 + 4 = 6 (left: 6 6 13)",
                "4 * 6 = 24 (left: 2 24 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                3.0,
                3.0,
                3.0,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.4",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "4 + 6 = 10 (left: 2 10 13)",
                "4 * 6 = 24 (left: 2 24 13) || 2 + 24 = 26 (left: 13 26)",
                "4 * 6 = 24 (left: 2 24 13)",
                "2 + 4 = 6 (left: 6 6 13)",
                "4 + 6 = 10 (left: 2 10 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                20.002,
                20.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.2",
                "2 <- 0.2",
                "3 <- 1.1",
                "4 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "4 * 6 = 24 (left: 2 24 13) || 2 + 24 = 26 (left: 13 26) || 26 / 13 = 2 (left: 2)",
                "4 * 6 = 24 (left: 2 24 13) || 2 + 13 = 15 (left: 15 24)",
                "13 - 6 = 7 (left: 2 4 7) || 4 - 2 = 2 (left: 2 7)",
                "4 * 6 = 24 (left: 2 24 13) || 2 + 24 = 26 (left: 13 26) || 13 * 26 = 338 (left: 338)",
                "4 * 6 = 24 (left: 2 24 13) || 2 * 24 = 48 (left: 13 48)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.1",
                "2 <- 0.1",
                "3 <- 1.1",
                "4 <- 1.2"
            ]
        },
        "Step 3": {
            "steps": [
                "4 * 6 = 24 (left: 2 24 13) || 24 - 2 = 22 (left: 22 13)",
                "4 * 6 = 24 (left: 2 24 13) || 2 + 24 = 26 (left: 13 26) || 13 * 26 = 338 (left: 338)",
                "2 + 4 = 6 (left: 6 6 13) || 6 * 6 = 36 (",
                "4 * 6 = 24 (left: 2 24 13) || 2 + 24 = 26 (left: 13 26) || 26 + 13 = 39 (left: 39)",
                "4 * 6 = 24 (left: 2 24 13) || Input: 3 9"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.1",
                "2 <- 1.2",
                "3 <- INIT",
                "4 <- 0.1"
            ]
        },
        "Step 4": {
            "steps": [
                "6 + 13 = 19 (left: 2 4 19)",
                "4 * 6 = 24 (left: 2 24 13) || 2 + 24 = 26 (left: 13 26) || 13 / 26 = 0.5 (left: 0.5 26)",
                "4 * 6 = 24 (left: 2 24 13) || 24 /  2 = 12 (left: 12 13)",
                "13 - 2 = 11 (left: 4 6 11)",
                "2 + 4 = 6 (left: 6 6 13) || 6 - 6 = 0 (left: 0 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                2.001,
                0.003,
                2.001,
                0.002
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 4.3",
                "2 <- INIT",
                "3 <- 1.1",
                "4 <- INIT"
            ]
        },
        "Step 5": {
            "steps": [
                "4 * 6 = 24 (left: 2 24 13) || 24 / 13 = 1.8461538461538463 (left: 1.846153846153846",
                "13 - 2 = 11 (left: 4 6 11) || 4 * 6 = 24 (left: 11 24)",
                "4 + 6 = 10 (left: 2 10 13)",
                "4 * 6 = 24 (left: 2 24 13) || 2 + 24 = 26 (left: 13 26) || 26 - 13 = 13 (left: 13)",
                "6 * 2 = 12 (left: 12 4 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                1.002,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 5.2",
                "2 <- INIT",
                "3 <- 1.2",
                "4 <- INIT"
            ]
        },
        "Step 6": {
            "steps": [
                "6 * 2 = 12 (left: 12 4 13) || 13 / 4 = 3.25 (",
                "4 + 6 = 10 (left: 2 10 13) || 10 - 2 = 8 (left: 8 13)",
                "2 + 4 = 6 (left: 6 6 13)",
                "4 * 6 = 24 (left: 2 24 13) || 24 - 2 = 22 (left: 22 13)",
                "6 * 2 = 12 (left: 4 12 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.0,
                2.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 0.2",
                "2 <- 1.1",
                "3 <- 4.3",
                "4 <- 4.1"
            ]
        },
        "Step 7": {
            "steps": [
                "4 * 6 = 24 (left: 2 24 13) || 2 + 24 = 26 (left: 13 26) || 13 + 26 = 39 (left: 39)",
                "13 - 6 = 7 (left: 2 4 7) || 4 - 2 = 2 (left: 2 7)",
                "4 * 6 = 24 (left: 2 24 13) || 2 + 24 = 26 (left: 13 26) || 13 + 26 = 39 (left: 39)",
                "13 - 2 = 11 (left: 4 6 11) || 4 / 6 = 0.6666666666666666 (left: 0.666",
                "4 * 6 = 24 (left: 2 24 13) || 2 + 24 = 26 (left: 13 26) || 13 / 26 = 0.5 (left: 0.5 26) || 26 - 0.5 = 25.5 (left: 25.5)"
            ],
            "Pruning": [
                "4<-1.1"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 7.4",
                "1 <- 7.4",
                "2 <- 4.3",
                "3 <- 6.2",
                "4 <- 7.4"
            ]
        },
        "Step 8": {
            "steps": [
                "4 * 6 = 24 (left: 2 24 13) || 2 + 24 = 26 (left: 13 26) || 13 - 26 = -13 (left: -13)",
                "4 * 6 = 24 (left: 2 24 13) || 2 + 24 = 26 (left: 13 26) || 13 + 26 = 39 (left: 39)",
                "13 - 2 = 11 (left: 4 6 11) || 11 - 4 = 7 (left: 4 7)",
                "2 + 4 = 6 (left: 6 6 13) || 13 - 6 = 7 (left: 6 7)",
                "4 * 6 = 24 (left: 2 24 13) || 2 + 24 = 26 (left: 13 26) || 26 - 13 = 13 (left: 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                1.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 7.4",
                "1 <- 7.4",
                "2 <- 7.4",
                "3 <- 7.4",
                "4 <- 1.2"
            ]
        },
        "Step 9": {
            "steps": [
                "4 * 6 = 24 (left: 2 24 13) || 2 + 24 = 26 (left: 13 26) || 5 + 10 = 15 (left: 15 15)",
                "4 * 6 = 24 (left: 2 24 13) || 2 + 24 = 26 (left: 13 26) || 26 - 13 = 13 (left: 13)",
                "4 * 6 = 24 (left: 2 24 13) || 2 + 24 = 26 (left: 13 26) || 13 + 26 = 39 (left: 39)",
                "4 * 6 = 24 (left: 2 24 13) || 2 + 24 = 26 (left: 13 26) || 13 / 26 = 0.5 (left: 0.5)",
                "4 * 6 = 24 (left: 2 24 13) || 24 - 2 = 22 (left: 13 22)"
            ],
            "Pruning": []
        },
        "Input": "2 4 6 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "865": {
        "puzzle": "6 7 9 12",
        "Step 0": {
            "steps": [
                "12 - 7 = 5 (left: 6 5 ",
                "6 + 7 = 13 (left: 9 12 13)",
                "9 - 6 = 3 (left: 3 3 12)",
                "6 + 7 = 13 (left: 9 12 13)",
                "7 * 9 = 63 (left: 6 12 "
            ],
            "Pruning": [],
            "Evaluation": [
                20.001,
                0.003,
                0.003,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.0",
                "2 <- INIT",
                "3 <- 0.0",
                "4 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "7 + 9 = 16 (left: 6 12 16)",
                "12 - 7 = 5 (left: 6 5  || 6 / 5 = 1.2 (left: 1.2)",
                "7 * 9 = 63 (left: 6 12 63)",
                "12 - 7 = 5 (left: 6 5  || 5 - 6 = -1 (left: -1)",
                "12 - 7 = 5 (left: 6 5  || 5 * 6 = 30 (left: 30)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.0,
                3.0,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 0.0",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.0"
            ]
        },
        "Step 2": {
            "steps": [
                "7 * 9 = 63 (left: 6 12 63) || 6 * 12 = 72 (left: 72 63)",
                "12 - 7 = 5 (left: 6 5  || 5 * 6 = 30 (left: 30)",
                "7 - 6 = 1 (left: 1 9 ",
                "9 + 6 = 15 (left: 7 12 15)",
                "12 - 7 = 5 (left: 6 5  || 6 * 5 = 30 (left: 30)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                41.0,
                2.001,
                0.002
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- INIT",
                "2 <- 2.2",
                "3 <- INIT",
                "4 <- 1.2"
            ]
        },
        "Step 3": {
            "steps": [
                "7 - 6 = 1 (left: 1 9  || 9 - 1 = 8 (left: 8)",
                "7 + 9 = 16 (left: 6 12 16)",
                "7 - 6 = 1 (left: 1 9  || 9 / 1 = 9 (left: 9)",
                "9 - 6 = 3 (left: 3 7 12)",
                "7 * 9 = 63 (left: 6 12 63) || 6 + 12 = "
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                3.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.2",
                "2 <- 2.2",
                "3 <- 2.2",
                "4 <- 0.0"
            ]
        },
        "Step 4": {
            "steps": [
                "7 - 6 = 1 (left: 1 9  || 9 * 1 = 9 (left: 9)",
                "7 - 6 = 1 (left: 1 9  || 5 * 7 = 35 (left: 3",
                "7 - 6 = 1 (left: 1 9  || 1 * 9 = 9 (left: 9)",
                "7 - 6 = 1 (left: 1 9  || 1 * 9 = 9 (left: 9)",
                "12 - 7 = 5 (left: 6 5  || 6 * 5 = 30 (left: 5 30)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                20.001,
                0.001,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 3.1",
                "2 <- 3.1",
                "3 <- 4.1",
                "4 <- 2.2"
            ]
        },
        "Step 5": {
            "steps": [
                "7 - 6 = 1 (left: 1 9  || 5 * 7 = 35 (left: 3 || 3 - 2 = 1 (left: 1 8)",
                "7 + 9 = 16 (left: 6 12 16) || 16 - 12 = 4 (left: 6 4)",
                "7 + 9 = 16 (left: 6 12 16) || 12 + 4 = 16 (left: 6 16)",
                "7 - 6 = 1 (left: 1 9  || 5 * 7 = 35 (left: 3 || There is only one possible step from 3:",
                "7 - 6 = 1 (left: 1 9  || 9 / 1 = 9 (left: 9 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.0,
                60.0,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 5.0",
                "2 <- 5.1",
                "3 <- 5.0",
                "4 <- 5.1"
            ]
        },
        "Step 6": {
            "steps": [
                "7 + 9 = 16 (left: 6 12 16) || 16 - 12 = 4 (left: 6 4) || 6 - 4 = 2 (left: 2)",
                "7 - 6 = 1 (left: 1 9  || 5 * 7 = 35 (left: 3 || 3 - 2 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "7 + 9 = 16 (left: 6 12 16) || 16 - 12 = 4 (left: 6 4) || 6 + 4 = 10 (left: 10)",
                "7 - 6 = 1 (left: 1 9  || 5 * 7 = 35 (left: 3 || 3 - 2 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "7 + 9 = 16 (left: 6 12 16) || 16 - 12 = 4 (left: 6 4) || 6 * 4 = 24 (left: 24)"
            ],
            "Pruning": [
                "1<-5.0",
                "3<-5.1"
            ],
            "Evaluation": [
                0.001,
                40.0,
                0.001,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 5.0",
                "2 <- 5.0",
                "3 <- 6.4",
                "4 <- 5.1"
            ]
        },
        "Step 7": {
            "steps": [
                "7 + 9 = 16 (left: 6 12 16) || 16 - 12 = 4 (left: 6 4) || 6 * 4 = 24 (left: 24) || Answer: 6 * (7 + (9 - 12)) = 24",
                "7 - 6 = 1 (left: 1 9  || 5 * 7 = 35 (left: 3 || 3 - 2 = 1 (left: 1 8) || 1 + 8 = 9 (left: 9)",
                "7 - 6 = 1 (left: 1 9  || 5 * 7 = 35 (left: 3 || 3 - 2 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "7 + 9 = 16 (left: 6 12 16) || 16 - 12 = 4 (left: 6 4) || 6 * 4 = 24 (left: 24) || Answer: 6 * (7 + (9 - 12)) = 24",
                "7 + 9 = 16 (left: 6 12 16) || 16 - 12 = 4 (left: 6 4) || 6 - 4 = 2 (left: 2)"
            ]
        },
        "Input": "6 7 9 12",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "866": {
        "puzzle": "1 5 6 13",
        "Step 0": {
            "steps": [
                "13 - 5 = 8 (left: 1 6 8)",
                "13 - 1 = 12 (left: 5 6 12)",
                "5 * 6 = 30 (left: 1 30 13)",
                "5 * 6 = 30 (left: 1 30 13)",
                "5 + 6 = 11 (left: 1 11 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                3.0,
                1.002,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.4",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 5 = 6 (left: 6 6 13)",
                "5 + 6 = 11 (left: 1 11 13) || 1 + 11 = 12 (left: 12 13)",
                "1 + 5 = 6 (left: 6 6 13)",
                "5 * 6 = 30 (left: 1 30 ",
                "13 - 5 = 8 (left: 1 6 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                0.003,
                2.001,
                40.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "5 * 6 = 30 (left: 1 30  || 30 / 1 = 30 (left: 30)",
                "13 - 6 = 7 (left: 1 5 ",
                "5 + 6 = 11 (left: 1 11 13)",
                "1 + 5 = 6 (left: 6 6 13)",
                "5 * 6 = 30 (left: 1 30  || 1 + 30 = 31 (left: 30 31)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                1.001,
                1.002,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.3",
                "2 <- 0.1",
                "3 <- 1.3",
                "4 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "5 * 6 = 30 (left: 1 30  || 1 * 30 = 30 (left: 30)",
                "5 * 6 = 30 (left: 1 30  || 30 - 1 = 29 (left: 29)",
                "13 - 1 = 12 (left: 5 6 12) || 5 * 6 = 30 (left: 30 12)",
                "5 * 6 = 30 (left: 1 30  || 30 / 1 = 30 (left: 30 30)",
                "5 * 6 = 30 (left: 1 30  || 1 + 30 = 31 (left: 30 31)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                20.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 3.3",
                "2 <- 3.3",
                "3 <- 1.3",
                "4 <- 3.3"
            ]
        },
        "Step 4": {
            "steps": [
                "5 * 6 = 30 (left: 1 30  || 30 / 1 = 30 (left: 30)",
                "5 * 6 = 30 (left: 1 30  || 30 / 1 = 30 (left: 30 30) || 30 + 30 = 60",
                "5 * 6 = 30 (left: 1 30  || 30 / 1 = 30 (left: 30 30) || 30 + 30 = 60",
                "5 * 6 = 30 (left: 1 30  || 1 + 30 = 31 (left: 31)",
                "5 * 6 = 30 (left: 1 30  || 30 / 1 = 30 (left: 30 30) || 30 * 30 = 900 (left: 900)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 3.3",
                "2 <- 1.3",
                "3 <- 3.3",
                "4 <- 1.3"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 5 = 6 (left: 6 6 13)",
                "5 * 6 = 30 (left: 1 30  || 30 / 1 = 30 (left: 30 30) || 30 * 30 = 900 (left: 900)",
                "5 * 6 = 30 (left: 1 30  || 1 * 30 = 30 (left: 30)",
                "5 * 6 = 30 (left: 1 30  || 30 / 1 = 30 (left: 30 30) || 30 - 30 = 0 (left: 0)",
                "5 * 6 = 30 (left: 1 30  || 30 - 1 = 29 (left: 29 30)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                0.002,
                0.002,
                0.003,
                21.001
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 1.3",
                "2 <- 5.4",
                "3 <- 3.3",
                "4 <- 5.4"
            ]
        },
        "Step 6": {
            "steps": [
                "5 * 6 = 30 (left: 1 30  || 30 - 1 = 29 (left: 29 30) || 29 + 30 = 59 (left: 59)",
                "5 * 6 = 30 (left: 1 30  || 1 * 30 = 30 (left: 30)",
                "5 * 6 = 30 (left: 1 30  || 30 - 1 = 29 (left: 29 30) || 29 + 30 = 59 (left: 59)",
                "5 * 6 = 30 (left: 1 30  || 30 / 1 = 30 (left: 30 30) || 30 + 30 = 60",
                "5 * 6 = 30 (left: 1 30  || 30 - 1 = 29 (left: 29 30) || 29 + 30 = 59 (left: 59)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 1.3",
                "2 <- 3.3",
                "3 <- 5.4",
                "4 <- 5.0"
            ]
        },
        "Step 7": {
            "steps": [
                "5 * 6 = 30 (left: 1 30  || 30 - 1 = 29 (left: 29 30) || 29 - 30 = -1 (left: -1)",
                "5 * 6 = 30 (left: 1 30  || 1 + 30 = 31 (left: 30)",
                "5 * 6 = 30 (left: 1 30  || 30 / 1 = 30 (left: 30 30) || 30 + 30 = 60 (left: 60)",
                "5 * 6 = 30 (left: 1 30  || 30 - 1 = 29 (left: 29 30) || 29 / 30 \u2248 0.9667 (left: 0.9667)",
                "1 + 5 = 6 (left: 6 6 13) || Input: 1 4 8 10"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.001,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 5.4",
                "2 <- INIT",
                "3 <- 5.4",
                "4 <- 1.3"
            ]
        },
        "Step 8": {
            "steps": [
                "5 * 6 = 30 (left: 1 30  || 1 + 30 = 31 (left: 30)",
                "5 * 6 = 30 (left: 1 30  || 30 - 1 = 29 (left: 29 30) || 29 * 30 = 870 (left: 870)",
                "13 - 5 = 8 (left: 1 6 8)",
                "5 * 6 = 30 (left: 1 30  || 30 - 1 = 29 (left: 29 30) || 29 / 30 = 0.9666666666666667 (left: 0.9666666666666667)",
                "5 * 6 = 30 (left: 1 30  || 1 + 30 = 31 (left: 30)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                2.001,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 5.4",
                "2 <- 5.4",
                "3 <- 8.2",
                "4 <- 8.2"
            ]
        },
        "Step 9": {
            "steps": [
                "5 * 6 = 30 (left: 1 30  || 30 - 1 = 29 (left: 29 30) || 29 + 30 = 59 (left: 59)",
                "5 * 6 = 30 (left: 1 30  || 30 - 1 = 29 (left: 29 30) || 29 + 30 = 59 (left: 59)",
                "5 * 6 = 30 (left: 1 30  || 30 - 1 = 29 (left: 29 30) || 29 / 30 = 0.9666666666666667 (left: 0.9666666666666667)",
                "13 - 5 = 8 (left: 1 6 8) || 8 / 1 = 8 (left: 6 8)",
                "13 - 5 = 8 (left: 1 6 8) || 1 + 6 = 7 (left: 7 8)"
            ],
            "Pruning": []
        },
        "Input": "1 5 6 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "867": {
        "puzzle": "3 8 8 11",
        "Step 0": {
            "steps": [
                "3 * 8 = 24 (left: 8 11 24)",
                "8 - 3 = 5 (left: 5 8 11)",
                "11 - 8 = 3 (left: ",
                "3 + 8 = 11 (left: 8 11)",
                "8 / 3 = 2 (left: 2 8 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.0,
                3.0,
                0.0,
                2.001,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.4",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "11 - 8 = 3 (left: 3 8 8)",
                "8 - 3 = 5 (left: 5 8 11)",
                "3 + 8 = 11 (left: 8 11 11)",
                "8 / 3 = 2 (left: 2 8 11) || 8 / 2 = 4 (left: 4 11)",
                "11 - 8 = 3 (left: 3 8 "
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                2.001,
                2.001,
                0.003,
                40.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.0",
                "2 <- 1.0",
                "3 <- 1.4",
                "4 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "11 - 8 = 3 (left: 3 8 8) || 8 - 3 = 5 (left: 5 8)",
                "11 - 8 = 3 (left: 3 8 8) || 8 / 3 = 2.67 (left: 2.67 8)",
                "11 - 8 = 3 (left: 3 8 8) || Input:",
                "11 - 8 = 3 (left: 3 8  || 3 + 8 = 11 (left: 11)",
                "11 - 8 = 3 (left: 3 8 8) || 3 + 8 = 11 (left: 8 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                2.001,
                0.003,
                0.001,
                1.001
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.4",
                "2 <- 1.4",
                "3 <- 1.0",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "11 - 8 = 3 (left: 3 8  || 3 + 8 = 11 (left: 11)",
                "11 - 8 = 3 (left: 3 8  || 3 * 8 = 24 (left: 24)",
                "11 - 8 = 3 (left: 3 8  || 8 + 3 = 11 (left: 11)",
                "11 - 8 = 3 (left: 3 8 8) || 3 + 8 = 11 (left: 8 11)",
                "11 -"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                60.0,
                0.003,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 1.2",
                "2 <- 3.1",
                "3 <- 3.1",
                "4 <- 1.4"
            ]
        },
        "Step 4": {
            "steps": [
                "11 - 8 = 3 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * 8 = 24",
                "3 + 8 = 11 (left: 8 11 11) || 11 / 8 = 1.375 (left: 1.375 11)",
                "11 - 8 = 3 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * 8 = 24",
                "11 - 8 = 3 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * 8 = 24",
                "11 - 8 = 3 (left: 3 8  || 3 + 8 = 11 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 0.4",
                "2 <- 1.0",
                "3 <- 3.1",
                "4 <- 3.1"
            ]
        },
        "Step 5": {
            "steps": [
                "11 - 8 = 3 (left: 3 8 8) || 8 - 3 = 5 (left: 5 8)",
                "8 / 3 = 2 (left: 2 8 11) || 8 / 2 = 4 (left: 4 11)",
                "11 - 8 = 3 (left: 3 8 8) || Input:",
                "11 - 8 = 3 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: (11 - 8) * 8 = 24",
                "11 - 8 = 3 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (11 - 8) * 8 = 24"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.001,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 5.4",
                "2 <- 1.0",
                "3 <- 3.1",
                "4 <- 5.3"
            ]
        },
        "Step 6": {
            "steps": [
                "11 - 8 = 3 (left: 3 8  || 3 * 8 = 24 (left: 24)",
                "11 - 8 = 3 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (11 - 8) * 8 = 24 || Input: 2 3 5 6\nSteps:\n5 + 6 = 11 (left: 2 3 11)\n3 + 11 = 14 (left: 2 14)\n2 * 14 = 28 (left: 28)\n28 / 14 = 2 (left: 2 2)\n2 * 2 = 4 (left: 4)\n4 * 6 = 24 (left: 24)\nAnswer",
                "11 - 8 = 3 (left: 3 8 8) || 3 + 8 = 11 (left: 8 11)",
                "11 - 8 = 3 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * 8 = 24",
                "11 - 8 = 3 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: (11 - 8) * 8 = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n4 * 3 = 12 (left: 12 12)\n12 * 12 = 24\nAnswer: (2 * 6) * (4 * 3) = 24"
            ],
            "Pruning": [
                "1<-5.3",
                "4<-5.4"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 6.1",
                "2 <- 6.4",
                "3 <- 5.3",
                "4 <- 6.4"
            ]
        },
        "Step 7": {
            "steps": [
                "11 - 8 = 3 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: (11 - 8) * 8 = 24 || Input: 2 3 6 9\nSteps:\n3 * 9 = 27 (left: 2 6 27)\n6 - 2 = 4 (left: 4 27)\n27 / 4 = 6.75 (left: 6.75)\n6.75 * 4 = 27 (left: 27)\nAnswer: ((3 * 9) / (6 - 2)) * 4 = 24",
                "11 - 8 = 3 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: (11 - 8) * 8 = 24 || Input: 6 6 7 2\nSteps:\n6 + 6 = 12 (left: 7 2 12)\n7 + 2 = 9 (left: 9 12)\n9 * 12 = 108 (left: 108)\nAnswer: (6 + 6) * (7 + 2) = 108",
                "11 - 8 = 3 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (11 - 8) * 8 = 24 || Input: 2 3 4 6\nSteps:\n2 * 3 = 6 (left: 4 6 6)\n6 + 6 = 12 (left: 4 12)\n12 * 4 = 48 (left: 48)\nAnswer: (2 * 3) + (4 * 6) = 24",
                "11 - 8 = 3 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: (11 - 8) * 8 = 24 || Input: 6 6 7 8\nSteps:\n6 + 8 = 14 (left: 6 7 14)\n7 + 14 = 21 (left: 6 21)\n21 - 6 = 15 (left: 15)\n15 + 9 = 24 (left: 24)\nAnswer: ((6 + 8) + 7) + 9 = 24",
                "11 - 8 = 3 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (11 - 8) * 8 = 24 || Input: 1 3 4 8\nSteps:\n3 + 4 = 7 (left: 1 7 8)\n7 + 1 = 8 (left: 8 8)\n8 * 8 = 64 (left: 64)\nAnswer: ((1 + 3) + 4) * 8 = 24"
            ],
            "Pruning": [
                "0<-6.0",
                "1<-6.0",
                "2<-6.1",
                "3<-6.4",
                "4<-5.3"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 7.2",
                "2 <- 7.4",
                "3 <- 6.4",
                "4 <- 7.3"
            ]
        },
        "Step 8": {
            "steps": [
                "11 - 8 = 3 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (11 - 8) * 8 = 24",
                "11 - 8 = 3 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: (11 - 8) * 8 = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n4 * 3 = 12 (left: 12 12)\n12 * 12 = 24 (left: 24)\nAnswer: (2 * 6) * (4 * 3) = 24",
                "11 - 8 = 3 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: (11 - 8) * 8 = 24 || Input: 2 3 4 7\nSteps:\n4 + 7 = 11 (left: 2 3 11)\n3 + 11 = 14 (left: 2 14)\n14 - 2 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((4 + 7) + 3) * 2 = 24",
                "11 - 8 = 3 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (11 - 8) * 8 = 24 || Input: 6 6 7 3\nSteps:\n6 * 7 = 42 (left: 3 42)\n42 / 6 = 7 (left: 3 7)\n7 - 3 = 4 (left: 4)\n4 + 4 = 8 (left: 8)\n8 - 4 = 4 (left: 4)\n4 * 6 = 24 (left: 24)\nAnswer: (((6 *",
                "11 - 8 = 3 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (11 - 8) * 8 = 24 || Input: 6 6 7 3\nSteps:\n6 + 6 = 12 (left: 7 3 12)\n7 - 3 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (6 + 6) * (7 - 3) = 24"
            ],
            "Pruning": [
                "1<-7.4",
                "2<-6.4",
                "3<-7.3",
                "4<-7.3"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 8.3",
                "1 <- 7.1",
                "2 <- 6.1",
                "3 <- 5.4",
                "4 <- 7.1"
            ]
        },
        "Step 9": {
            "steps": [
                "11 - 8 = 3 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (11 - 8) * 8 = 24 || Input: 6 6 7 8\nSteps:\n6 * 7 = 42 (left: 6 8 42)\n42 - 6 = 36 (left: 8 36)\n36 / 8 = 4.5 (left: 4.5 36)\n4.5 * 8 = 36 (left: 36)\nAnswer: ((6 * 7) - 6) / 8 * 8 = 24",
                "11 - 8 = 3 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * 8 = 24",
                "11 - 8 = 3 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: (11 - 8) * 8 = 24 || Input: 2 2 6 9\nSteps:\n2 * 9 = 18 (left: 2 6 18)\n6 + 2 = 8 (left: 8 18)\n18 - 8 = 10 (left: 10)\n10 + 9 = 19 (left: 19)\n19 - 10 = 9 (left: 9)\n9 * 2 = 18 (left: 18)\n18 + ",
                "11 - 8 = 3 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (11 - 8) * 8 = 24 || Input: 2 5 5 6\nSteps:\n5 * 5 = 25 (left: 2 6 25)\n25 - 2 = 23 (left: 6 23)\n23 - 6 = 17 (left: 17)\nAnswer: ((5 * 5) - 2) - 6 = 24",
                "11 - 8 = 3 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (11 - 8) * 8 = 24"
            ],
            "Pruning": [
                "0<-8.1",
                "2<-7.3",
                "3<-7.0"
            ]
        },
        "Input": "3 8 8 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "868": {
        "puzzle": "2 3 4 10",
        "Step 0": {
            "steps": [
                "4 + 10 = 14 (left: 2 3 14)",
                "2 + 3 = 5 (left: 4 5 10)",
                "3 + 4 = 7 (left: 2 7 10)",
                "10 - 4 = 6 (left: 2 3 ",
                "2 + 3 = 5 (left: 4 5 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                2.0,
                60.0,
                0.003,
                41.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.2",
                "2 <- INIT",
                "3 <- 0.4",
                "4 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "4 * 2 = 8 (left: 3 8 10)",
                "3 + 4 = 7 (left: 2 7 10) || 10 / 2 = 5 (left: 5 10)",
                "3 + 4 = 7 (left: 2 7 10)",
                "2 + 3 = 5 (left: 4 5 10) || 5 * 4 = 20 (left: 20 10)",
                "2 + 3 = 5 (left: 4 5 10) || 5 + 10 = 15 (left: 4 15)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.001,
                60.0,
                0.0,
                0.001
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 0.4",
                "2 <- 0.2",
                "3 <- 1.2",
                "4 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "4 * 2 = 8 (left: 3 8 10) || Input:",
                "2 + 3 = 5 (left: 4 5 10) || Input: 3 6",
                "3 + 4 = 7 (left: 2 7 10) || 7 * 2 = 14 (left: 14 10)",
                "3 + 4 = 7 (left: 2 7 10) || 2 + 7 = 9 (left: 9 10)",
                "4 * 2 = 8 (left: 3 8 10) || 3 + 8 = 11 (left: 8 10 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                0.003,
                40.001,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.0",
                "2 <- INIT",
                "3 <- 1.2",
                "4 <- 0.4"
            ]
        },
        "Step 3": {
            "steps": [
                "3 + 4 = 7 (left: 2 7 10) || 7 / 2 = 3.5 (left: 3.5 10)",
                "4 * 2 = 8 (left: 3 8 10) || 3 * 8 = 24 (left: 10 24)",
                "10 - 2 = 8 (left: 3 4 8)",
                "3 + 4 = 7 (left: 2 7 10) || 2 * 7 = 14 (left: 14 10)",
                "2 + 3 = 5 (left: 4 5 10) || 10 - 4 = 6 (left: 6 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                3.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 3.3",
                "2 <- 3.3",
                "3 <- 3.3",
                "4 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "3 + 4 = 7 (left: 2 7 10) || 2 * 7 = 14 (left: 14 10) || 14 * 10 = 140 (left: 140)",
                "3 + 4 = 7 (left: 2 7 10) || 2 * 7 = 14 (left: 14 10) || 14 + 10 = 24 (left: 24)",
                "3 + 4 = 7 (left: 2 7 10) || 2 * 7 = 14 (left: 14 10) || 14 + 10 = 24 (left: 24)",
                "3 + 4 = 7 (left: 2 7 10) || 2 * 7 = 14 (left: 14 10) || 14 + 10 = 24 (left: 24)",
                "4 * 2 = 8 (left: 3 8 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                60.0,
                40.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 4.1",
                "2 <- 3.3",
                "3 <- 4.4",
                "4 <- 4.1"
            ]
        },
        "Step 5": {
            "steps": [
                "2 + 3 = 5 (left: 4 5 10) || 4 + 5 = 9 (left: 9 10)",
                "3 + 4 = 7 (left: 2 7 10) || 2 * 7 = 14 (left: 14 10) || 14 + 10 = 24 (left: 24) || Answer: (2 * (3 + 4)) + 10 = 24",
                "3 + 4 = 7 (left: 2 7 10) || 2 * 7 = 14 (left: 14 10) || 14 / 10 = 1.4 (left: 1.4)",
                "4 * 2 = 8 (left: 3 8 10) || 8 / 3 = 2.67 (left: 2.67 10)",
                "3 + 4 = 7 (left: 2 7 10) || 2 * 7 = 14 (left: 14 10) || 14 + 10 = 24 (left: 24) || Answer: (2 * (3 + 4)) + 10 = 24"
            ]
        },
        "Input": "2 3 4 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "869": {
        "puzzle": "6 6 8 8",
        "Step 0": {
            "steps": [
                "6 + 6 = 12 (left: 8 8 12)",
                "8 / 6 = 1 (left: 1 6 ",
                "8 + 6 = 14 (left: 6 8 14)",
                "8 / 8 = 1 (left: 6 1 8)",
                "8 + 6 = 14 (left: 6 8 14)"
            ],
            "Pruning": [],
            "Evaluation": [
                22.0,
                60.0,
                2.001,
                2.001,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.0",
                "2 <- 0.0",
                "3 <- 0.3",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "8 - 6 = 2 (left: 2 6 8)",
                "6 + 6 = 12 (left: 8 8 12) || 8 - 8 = 0 (left: 0 12)",
                "6 + 6 = 12 (left: 8 8 12) || 12 - 8 = 4 (left: 4",
                "8 / 8 = 1 (left: 6 1 8) || 1 + 8 = 9 (left: 6 9)",
                "8 - 6 = 2 (left: 6 8 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                20.0,
                0.002,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.0",
                "2 <- 0.1",
                "3 <- 0.1",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "8 / 6 = 1 (left: 1 6  || 1 + 6 = 7 (left: 7)",
                "6 + 6 = 12 (left: 8 8 12) || 12 / 8 = 1.5 (left: 8 1.5)",
                "8 / 6 = 1 (left: 1 6  || 6 / 1 = 6 (left: 6) ",
                "8 / 6 = 1 (left: 1 6  || 6 + 1 = 7 (left: 7)",
                "6 / 6 = 1 (left: 1 8 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                3.0,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.1",
                "2 <- 0.1",
                "3 <- 0.0",
                "4 <- 0.0"
            ]
        },
        "Step 3": {
            "steps": [
                "6 + 6 = 12 (left: 8 8 12)",
                "6 + 6 = 12 (left: 8 8 12) || 8 - 8 = 0 (left: 0 12) || 0 + 12 = 12 (left: 12)",
                "8 / 6 = 1 (left: 1 6  || 6 / 1 = 6 (left: 6)",
                "6 + 6 = 12 (left: 8 8 12) || 12 - 8 = 4 (left: 8 4)",
                "6 + 6 = 12 (left: 8 8 12) || 8 / 8 = 1 (left: 1 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                0.003,
                0.002,
                20.001,
                0.002
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 3.3",
                "4 <- 0.1"
            ]
        },
        "Step 4": {
            "steps": [
                "6 + 6 = 12 (left: 8 8 12) || 12 - 8 = 4 (left: 8 4) || 8 - 4 = 4 (left: 4)",
                "6 + 6 = 12 (left: 8 8 12)",
                "8 - 6 = 2 (left: ",
                "6 + 6 = 12 (left: 8 8 12) || 12 - 8 = 4 (left: 8 4) || 8 + 4 = 12 (left: 12)",
                "8 / 6 = 1 (left: 1 6  || 6 / 1 = 6 (left: 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                1.002,
                0.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.1",
                "2 <- 0.0",
                "3 <- 3.3",
                "4 <- 3.3"
            ]
        },
        "Step 5": {
            "steps": [
                "8 / 6 = 1.33 (left: 1.33 6 8)",
                "6 + 6 = 12 (left: 8 8 12) || 8 - 8 = 0 (left: 0 12) || 12 + 0 = 12 (left: 12)",
                "6 + 6 = 12 (left: 8 8 12) || 12 - 8 = 4 (left: 8 4)",
                "6 + 6 = 12 (left: 8 8 12) || 12 - 8 = 4 (left: 8 4) || 8 * 4 = 32 (left: 32)",
                "6 + 6 = 12 (left: 8 8 12) || 12 - 8 = 4 (left: 8 4) || 8 + 4 = 12 (left: 12) "
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 3.3",
                "2 <- 5.0",
                "3 <- 3.3",
                "4 <- 3.3"
            ]
        },
        "Step 6": {
            "steps": [
                "6 + 6 = 12 (left: 8 8 12) || 12 - 8 = 4 (left: 8 4) || 8 / 4 = 2 (left: 2)",
                "6 + 6 = 12 (left: 8 8 12) || 12 - 8 = 4 (left: 8 4) || 8 * 4 = 32 (left: 32)",
                "8 / 6 = 1.33 (left: 1.33 6 8) || 1.33 + 6 = 7.33 (left: 7.33 8",
                "6 + 6 = 12 (left: 8 8 12) || 12 - 8 = 4 (left: 8 4) || 8 + 4 = 12 (left: 12)",
                "6 + 6 = 12 (left: 8 8 12) || 12 - 8 = 4 (left: 8 4) || 8 - 4 = 4 (left: 4)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.002,
                1.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 1.4",
                "2 <- 1.1",
                "3 <- 5.0",
                "4 <- 0.0"
            ]
        },
        "Step 7": {
            "steps": [
                "8 / 6 = 1 (left: 1 6  || 1 + 6 = 7 (left: 6)",
                "8 - 6 = 2 (left: 6 8 8) || 8 - 6 = 2 (left: 2 8)",
                "6 + 6 = 12 (left: 8 8 12) || 8 - 8 = 0 (left: 0 12) || 0 + 12 = 12",
                "8 / 6 = 1.33 (left: 1.33 6 8) || 8 / 1.33 = 6.015 (left: 6.015 8)",
                "6 + 6 = 12 (left: 8 8 12) || 12 / 8 = 1.5 (left: 1.5 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.002,
                0.003,
                1.002,
                1.001
            ],
            "Resampling": [
                "0 <- 7.3",
                "1 <- 3.3",
                "2 <- 0.1",
                "3 <- 0.1",
                "4 <- 2.1"
            ]
        },
        "Step 8": {
            "steps": [
                "8 / 6 = 1.33 (left: 1.33 6 8) || 8 / 1.33 = 6.015 (left: 6.015 8) || 8 / 6.015 = 1.33058 (left: 1.33058)",
                "6 + 6 = 12 (left: 8 8 12) || 12 - 8 = 4 (left: 8 4) || 8 * 4 = 32 (left: 32)",
                "8 / 6 = 1 (left: 1 6  || 6 / 1 = 6 (left: 6)",
                "8 / 6 = 1 (left: 1 6  || 1 * 6 = 6 (left: 6)",
                "6 + 6 = 12 (left: 8 8 12) || 12 / 8 = 1.5 (left: 8 1.5) || 8 * 1.5 = 12 (left: 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.003,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 7.4",
                "2 <- 0.2",
                "3 <- 3.3",
                "4 <- INIT"
            ]
        },
        "Step 9": {
            "steps": [
                "6 + 6 = 12 (left: 8 8 12) || 12 - 8 = 4 (left: 8 4) || 8 - 4 = 4 (left: 4)",
                "6 + 6 = 12 (left: 8 8 12) || 12 / 8 = 1.5 (left: 1.5 8) || 1.5 + 8 = 9.5 (left: 9.5)",
                "8 + 6 = 14 (left: 6 8 14) || 8 / 6 = 1.33 (left: 1.33 14)",
                "6 + 6 = 12 (left: 8 8 12) || 12 - 8 = 4 (left: 8 4) || 8 + 4 = 12 (left: 12)",
                "6 / 6 = 1 (left: 1 8 8)"
            ],
            "Pruning": []
        },
        "Input": "6 6 8 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "870": {
        "puzzle": "4 9 9 10",
        "Step 0": {
            "steps": [
                "4 + 9 = 13 (left: 9 9 10)",
                "10 - 9 = 1 (left: ",
                "10 - 4 = 6 (left: 6 9 9)",
                "4 + 9 = 13 (left: 9 9 10)",
                "4 + 9 = 13 (left: 9 9 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.0,
                22.0,
                1.002,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.2",
                "2 <- INIT",
                "3 <- 0.2",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "4 * 9 = 36 (left: 9 10 36)",
                "10 - 4 = 6 (left: 6 9 9) || 9 - 6 = 3 (left: 3 9 ",
                "9 / 4 = 2.25 (left",
                "10 - 4 = 6 (left: 6 9 9) || 9 / 6 = 1",
                "9 / 4 = 2.25 (left: 2.25 9 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.003,
                1.002,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.2",
                "2 <- 0.2",
                "3 <- 0.2",
                "4 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "4 * 9 = 36 (left: 9 9 10)",
                "10 - 4 = 6 (left: 6 9 9) || 9 - 9 = 0 (left: 6 0 9)",
                "10 - 4 = 6 (left: 6 9 9) || 6 + 9 = 15 (left: 9 9 15)",
                "10 - 4 = 6 (left: 6 9 9) || 6 + 9 = 15 (left: 9 9 15)",
                "9 / 4 = 2.25 (left: 2.25 9 10) || 10 - 2.25 = 7.75 (left: 7.75 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.001,
                1.002,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.4",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "9 - 4 = 5 (left: 5 9 10)",
                "9 / 4 = 2.25 (left: 2.25 9 10) || 9 - 2.25 = 6.75 (left: 6.75 10)",
                "9 - 4 = 5 (left: 5 9 10)",
                "10 - 9 = 1 (left: ",
                "4 * 9 = 36 (left: 9 10 36)"
            ],
            "Pruning": [],
            "Evaluation": [
                41.0,
                0.002,
                2.001,
                0.0,
                2.001
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- INIT",
                "2 <- 3.0",
                "3 <- 3.0",
                "4 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "9 - 4 = 5 (left: 5 9 10) || 9 + 10 = 19 (left: 5 19)",
                "10 - 4 = 6 (left: 4 9 6)",
                "9 - 4 = 5 (left: 5 9 10) || 9 + 10 = 19 (left: 5 19)",
                "9 - 4 = 5 (left: 5 9 10) || 10 - 5 = 5 (left: 5 10)",
                "10 - 4 = 6 (left: 6 9 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                3.0,
                60.0,
                0.002,
                3.0
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 4.2",
                "2 <- 4.2",
                "3 <- 4.4",
                "4 <- 3.0"
            ]
        },
        "Step 5": {
            "steps": [
                "9 - 4 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14)",
                "9 - 4 = 5 (left: 5 9 10) || 9 + 10 = 19 (left: 5 19) || 19 - 5 = 14 (left: 14)",
                "9 - 4 = 5 (left: 5 9 10) || 9 + 10 = 19 (left: 5 19) || 19 / 5 = 3.8 (left: 3.8)",
                "10 - 4 = 6 (left: 6 9 10) || 6 + 9 = 15 (left: 10 15)",
                "9 - 4 = 5 (left: 5 9 10) || 10 - 9 = 1 (left: 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.001,
                0.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 3.0",
                "2 <- 3.0",
                "3 <- INIT",
                "4 <- 5.0"
            ]
        },
        "Step 6": {
            "steps": [
                "9 - 4 = 5 (left: 5 9 10) || 9 + 10 = 19 (left: 5 19) || 19 - 5 = 14 (left: 14)",
                "9 - 4 = 5 (left: 5 9 10) || 9 - 5 = 4 (left: 4 10)",
                "9 - 4 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14)",
                "4 * 9 = 36 (left: 9 10 36)",
                "9 - 4 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || 10 - 14 = -4 (left: -4 14)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                40.0,
                60.0,
                22.0,
                0.0
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 5.0",
                "2 <- 6.2",
                "3 <- 6.1",
                "4 <- 6.1"
            ]
        },
        "Step 7": {
            "steps": [
                "9 - 4 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || 14 / 10 = 1.4 (left: 1.4)",
                "9 - 4 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || 10 - 14 = -4 (left: -4)",
                "9 - 4 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || 10 / 14 = 0.7142857142857143 (left: 0.7142857142857143)",
                "9 - 4 = 5 (left: 5 9 10) || 9 - 5 = 4 (left: 4 10) || 4 / 10 = 0.4 (left: 0.4 10)",
                "9 - 4 = 5 (left: 5 9 10) || 9 - 5 = 4 (left: 4 10) || 4 * 10 = 40 (left: 40)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.0,
                0.001,
                0.001,
                40.001,
                0.003
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 6.3",
                "2 <- 3.0",
                "3 <- 7.0",
                "4 <- 7.3"
            ]
        },
        "Step 8": {
            "steps": [
                "9 - 4 = 5 (left: 5 9 10) || 9 - 5 = 4 (left: 4 10) || 10 / 4 = 2.5 (left: 2.5 10)",
                "4 * 9 = 36 (left: 9 10 36) || 10 * 9 = 90 (left: 90 36)",
                "9 - 4 = 5 (left: 5 9 10) || 9 / 5 = 1.8 (left: 1.8 10)",
                "9 - 4 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || 14 / 10 = 1.4 (left: 1.4) || 1.4 * 2 = 2.8 (left: 2.8)",
                "9 - 4 = 5 (left: 5 9 10) || 9 - 5 = 4 (left: 4 10) || 4 / 10 = 0.4 (left: 0.4 10) || 0.4 * 10 = 4 (left: 4)"
            ],
            "Pruning": [
                "3<-4.0",
                "4<-7.3"
            ],
            "Evaluation": [
                0.002,
                0.003,
                40.001,
                41.0,
                1.001
            ],
            "Resampling": [
                "0 <- 7.3",
                "1 <- 7.3",
                "2 <- 4.0",
                "3 <- 5.0",
                "4 <- 8.2"
            ]
        },
        "Step 9": {
            "steps": [
                "9 - 4 = 5 (left: 5 9 10) || 9 - 5 = 4 (left: 4 10) || 4 / 10 = 0.4 (left: 0.4 10) || 10 - 0.4 = 9.6 (left: 9.6)",
                "9 - 4 = 5 (left: 5 9 10) || 9 - 5 = 4 (left: 4 10) || 4 / 10 = 0.4 (left: 0.4 10) || 10 - 0.4 = 9.6 (left: 9.6)",
                "9 - 4 = 5 (left: 5 9 10) || 9 + 10 = 19 (left: 5 19) || 5 + 19 = 24 (left: 24)",
                "9 - 4 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || 14 / 10 = 1.4 (left: 1.4)",
                "9 - 4 = 5 (left: 5 9 10) || 9 / 5 = 1.8 (left: 1.8 10) || 1.8 + 10 = 11.8 (left: 11.8)"
            ],
            "Pruning": [
                "0<-8.2",
                "1<-8.2"
            ]
        },
        "Input": "4 9 9 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "871": {
        "puzzle": "3 3 7 9",
        "Step 0": {
            "steps": [
                "3 + 7 = 10 (left: 3 10 9)",
                "7 - 3 = 4 (left: 3 4 ",
                "3 + 3 = 6 (left: 6 7 9)",
                "7 - 3 = 4 (left: 3 4 9)",
                "3 * 3 = 9 (left: 9 7 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                22.0,
                3.0,
                60.0,
                2.0
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- INIT",
                "2 <- 0.3",
                "3 <- INIT",
                "4 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "7 - 3 = 4 (left: 3 4 9) || 4 + 9 = 13 (left: 3 13)",
                "3 * 3 = 9 (left: 9 7 9)",
                "7 - 3 = 4 (left: 3 4 9) || 3 + 4 = 7 (left: 7 9)",
                "3 * 3 = 9 (left: 9 7 9)",
                "7 - 3 = 4 (left: 3 4 9) || 9 / 3 = 3 (left: 3 4)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                2.0,
                0.002,
                3.0,
                21.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- INIT",
                "2 <- 0.3",
                "3 <- 1.4",
                "4 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "7 - 3 = 4 (left: 3 4  || 4 / 3 = 1.33333 (left: 1.33333)",
                "3 + 3 = 6 (left: 6 7 9)",
                "7 - 3 = 4 (left: 3 4 9) || 4 - 3 = 1 (left: 1 9)",
                "7 - 3 = 4 (left: 3 4 9) || 9 / 3 = 3 (left: 3 4) || 3 - 4 = -1 (left: -1)",
                "7 - 3 = 4 (left: 3 4 9) || 3 * 4 = 12 (left: 12 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                3.0,
                60.0,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.2",
                "2 <- INIT",
                "3 <- 2.2",
                "4 <- 2.2"
            ]
        },
        "Step 3": {
            "steps": [
                "3 + 3 = 6 (left: 6 7 9) || 7 + 9 = 16 (left: 6 16)",
                "7 - 3 = 4 (left: 3 4 9) || 4 - 3 = 1 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "3 + 3 = 6 (left: 6 7 9)",
                "7 - 3 = 4 (left: 3 4 9) || 4 - 3 = 1 (left: 1 9) || 9 - 1 = 8 (left: 8 9)",
                "7 - 3 = 4 (left: 3 4 9) || 4 - 3 = 1 (left: 1 9) || 1 + 9 = 10 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                2.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 1.4",
                "2 <- INIT",
                "3 <- 0.4",
                "4 <- 2.2"
            ]
        },
        "Step 4": {
            "steps": [
                "3 + 3 = 6 (left: 6 7 9) || 6 + 7 = 13 (left: 9 13)",
                "7 - 3 = 4 (left: 3 4 9) || 9 / 3 = 3 (left: 3 4) || 4 / 3 = 1.33 (left: 1.33)",
                "3 * 7 = 21 (left: 21 7 9)",
                "3 * 3 = 9 (left: 9 7 9) || 5 + 5 = ",
                "7 - 3 = 4 (left: 3 4 9) || 4 - 3 = 1 (left: 1 9) || 9 - 1 = 8 (left: 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                2.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.1",
                "2 <- 2.2",
                "3 <- 0.1",
                "4 <- 2.2"
            ]
        },
        "Step 5": {
            "steps": [
                "7 - 3 = 4 (left: 3 4 9) || 4 - 3 = 1 (left: 1 9) || 1 + 9 = 10 (left: 10)",
                "3 + 3 = 6 (left: 6 7 9) || 7 * 9 = 63 (left: 6)",
                "7 - 3 = 4 (left: 3 4 9) || 4 - 3 = 1 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "7 - 3 = 4 (left: 3 4  || 4 - 3 = 1 (left: 1)",
                "7 - 3 = 4 (left: 3 4 9) || 4 - 3 = 1 (left: 1 9) || 9 / 1 = 9 (left: 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.001,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 0.1",
                "2 <- 1.1",
                "3 <- 0.3",
                "4 <- 4.2"
            ]
        },
        "Step 6": {
            "steps": [
                "7 - 3 = 4 (left: 3 4 9) || 4 - 3 = 1 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "7 - 3 = 4 (left: 3 4  || 4 - 3 = 1 (left: 1)",
                "3 * 3 = 9 (left: 9 7 9) || 7 + 9 = 16 (left: 16 9)",
                "7 - 3 = 4 (left: 3 4 9) || 4 - 3 = 1 (left: 1 9)",
                "3 * 7 = 21 (left: 21 7 9) || 7 + 21 = "
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.003,
                0.002,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 6.3",
                "2 <- 6.3",
                "3 <- 2.2",
                "4 <- 6.3"
            ]
        },
        "Step 7": {
            "steps": [
                "7 - 3 = 4 (left: 3 4 9) || 4 - 3 = 1 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "7 - 3 = 4 (left: 3 4 9) || 4 - 3 = 1 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "7 - 3 = 4 (left: 3 4 9) || 4 - 3 = 1 (left: 1 9) || 1 + 9 = 10 (left: 10)",
                "7 - 3 = 4 (left: 3 4 9) || 4 - 3 = 1 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "7 - 3 = 4 (left: 3 4 9) || 4 - 3 = 1 (left: 1 9) || 1 + 9 = 10 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.002,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 6.3",
                "2 <- 6.3",
                "3 <- 6.3",
                "4 <- 6.3"
            ]
        },
        "Step 8": {
            "steps": [
                "7 - 3 = 4 (left: 3 4 9) || 4 - 3 = 1 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "7 - 3 = 4 (left: 3 4 9) || 4 - 3 = 1 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "7 - 3 = 4 (left: 3 4 9) || 4 - 3 = 1 (left: 1 9) || 1 + 9 = 10 (left: 10)",
                "7 - 3 = 4 (left: 3 4 9) || 4 - 3 = 1 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "7 - 3 = 4 (left: 3 4 9) || 4 - 3 = 1 (left: 1 9) || 1 + 9 = 10 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 3.2",
                "2 <- 6.3",
                "3 <- 6.3",
                "4 <- 1.4"
            ]
        },
        "Step 9": {
            "steps": [
                "7 - 3 = 4 (left: 3 4 9) || 4 - 3 = 1 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "3 + 3 = 6 (left: 6 7 9) || 7 * 9 = 63 (left: 6)",
                "7 - 3 = 4 (left: 3 4 9) || 4 - 3 = 1 (left: 1 9) || 1 + 9 = 10 (left: 10)",
                "7 - 3 = 4 (left: 3 4 9) || 4 - 3 = 1 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "7 - 3 = 4 (left: 3 4 9) || 9 / 3 = 3 (left: 3 4) || 3 * 4 = 12 (left: 12)"
            ],
            "Pruning": []
        },
        "Input": "3 3 7 9",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "872": {
        "puzzle": "1 7 9 10",
        "Step 0": {
            "steps": [
                "7 - 1 = 6 (left: 6 9 10)",
                "1 + 7 = 8 (left: 8 9 10)",
                "9 - 1 = 8 (left: 7 8 ",
                "9 + 1 = 10 (left: 7 10 10)",
                "1 + 7 = 8 (left: 8 9 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.0,
                3.0,
                0.003,
                1.001,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 7 = 7 (left: 7 9 10)",
                "1 + 7 = 8 (left: 8 9 10)",
                "7 - 1 = 6 (left: 6 9 10)",
                "1 + 7 = 8 (left: 8 9 10) || 10 - 8 = 2 (left: 2 9)",
                "7 - 1 = 6 (left: 6 9 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                1.002,
                3.0,
                0.001,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "7 / 1 = 7 (left: 7 9 10)",
                "9 + 1 = 10 (left: 7 9 10)",
                "1 + 7 = 8 (left: 8 9 10)",
                "1 + 7 = 8 (left: 8 9 10) || 9 * 10 = 90",
                "7 - 1 = 6 (left: 6 9 10) || 6 + 9 = 15 (left: 10 15)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                3.0,
                3.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.0",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 1.4"
            ]
        },
        "Step 3": {
            "steps": [
                "9 + 1 = 10 (left: 7 10 10) || 7 + 10 = 17 (left: 10 10 17)",
                "7 - 1 = 6 (left: 6 9 10) || 9 * 6 = 54 (left: 10 54)",
                "9 + 1 = 10 (left: 7 10 10)",
                "10 - 1 = 9 (left: 7 9 10)",
                "7 - 1 = 6 (left: 6 9 10) || 9 + 10 = 19 (left: 6 19)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.001,
                2.001,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.1",
                "2 <- 1.2",
                "3 <- INIT",
                "4 <- 3.1"
            ]
        },
        "Step 4": {
            "steps": [
                "7 - 1 = 6 (left: 6 9 10) || 6 + 9 = 15 (left: 10 15)",
                "1 + 7 = 8 (left: 8 9 10) || 9 + 10 = 19 (left: 8 19)",
                "7 - 1 = 6 (left: 6 9 10) || 9 - 6 = 3 (left:",
                "10 - 1 = 9 (left: 7 9 9)",
                "7 - 1 = 6 (left: 6 9 10) || 9 * 6 = 54 (left: 10 54) || 10 * 54 = 540 (left: 540)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                1.0,
                3.0,
                0.002
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- INIT",
                "2 <- 1.0",
                "3 <- 0.1",
                "4 <- 4.3"
            ]
        },
        "Step 5": {
            "steps": [
                "10 - 1 = 9 (left: 7 9 9) || 9 / 7 = 1 (left: 1 9 9)",
                "9 + 1 = 10 (left: 1 7 10)",
                "1 * 7 = 7 (left: 7 9 10) || 9 + 10 = 19 (left: 7 19)",
                "1 + 7 = 8 (left: 8 9 10) || 9 + 10 = 19 (left: 8 19)",
                "10 - 1 = 9 (left: 7 9 9) || 9 - 7 = 2 (left: 2 9 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.002,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 4.3",
                "2 <- 1.0",
                "3 <- INIT",
                "4 <- 4.3"
            ]
        },
        "Step 6": {
            "steps": [
                "9 + 1 = 10 (left: 1 7 10) || 10 - 7 = 3 (left:",
                "10 - 1 = 9 (left: 7 9 9) || 9 - 7 = 2 (left: 2 9 9)",
                "1 * 7 = 7 (left: 7 9 10) || 7 + 9 = 16 (left: 10 16)",
                "7 / 1 = 7 (left: 7 9 ",
                "10 - 1 = 9 (left: 7 9 9) || 9 - 7 = 2 (left: 2 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                1.002,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 4.2",
                "2 <- 2.0",
                "3 <- 4.3",
                "4 <- 3.3"
            ]
        },
        "Step 7": {
            "steps": [
                "10 - 1 = 9 (left: 7 9 9) || 9 - 7 = 2 (left: 2 9 9) || 9 * 2 = 18 (left: 9 18)",
                "7 - 1 = 6 (left: 6 9 10) || 9 - 6 = 3 (left: || 6 - 9 = -3 (left: -3)",
                "7 / 1 = 7 (left: 7 9 10) || 7 + 9 = 16 (left: 10 16)",
                "10 - 1 = 9 (left: 7 9 9) || 9 - 7 = 2 (left: 2 9 9)",
                "10 - 1 = 9 (left: 7 9 10) || 7 + 9 = 16 (left: 10 16)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.4",
                "2 <- 2.2",
                "3 <- 2.1",
                "4 <- INIT"
            ]
        },
        "Step 8": {
            "steps": [
                "10 - 7 = 3 (left: 1 3 ",
                "1 + 7 = 8 (left: 8 9 10) || 9 - 8 = 1 (left: 1 10)",
                "1 + 7 = 8 (left: 8 9 10) || 8 + 9 = 17 (left: 10)",
                "9 + 1 = 10 (left: 7 9 10) || 9 + 10 = 19 (left: 7)",
                "7 - 1 = 6 (left: 6 9 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                60.0,
                0.002,
                0.0,
                3.0
            ],
            "Resampling": [
                "0 <- 8.1",
                "1 <- 8.1",
                "2 <- 8.1",
                "3 <- 8.1",
                "4 <- 8.4"
            ]
        },
        "Step 9": {
            "steps": [
                "1 + 7 = 8 (left: 8 9 10) || 9 - 8 = 1 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 + 7 = 8 (left: 8 9 10) || 9 - 8 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 + 7 = 8 (left: 8 9 10) || 9 - 8 = 1 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "1 + 7 = 8 (left: 8 9 10) || 9 - 8 = 1 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "7 - 1 = 6 (left: 6 9 10) || 10 - 6 = 4 (left: 4 9)"
            ],
            "Pruning": []
        },
        "Input": "1 7 9 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "873": {
        "puzzle": "2 3 9 13",
        "Step 0": {
            "steps": [
                "2 * 9 = 18 (left: 3 18 13)",
                "9 - 3 = 6 (left: 2 6 13)",
                "9 + 13 = 22 (left: 2 3 22)",
                "9 + 3 = 12 (left: 2 12 13)",
                "13 - 9 = 4 (left: 2 3 4)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                1.002,
                1.001,
                41.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.4",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "9 + 3 = 12 (left: 2 12 13) || Input: 6.5",
                "13 - 9 = 4 (left: 2 3 4) || 4 - 2 = 2 (left: 2 3)",
                "13 - 3 = 10 (left: 2 9 ",
                "3 * 2 = 6 (left: 6 9 13)",
                "13 - 3 = 10 (left: 2 9 "
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                1.001,
                21.001,
                1.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.3",
                "2 <- 0.3",
                "3 <- INIT",
                "4 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "9 - 3 = 6 (left: 2 6 13) || 13 - 6 = 7 (left: 2 7)",
                "9 + 3 = 12 (left: 2 12 13) || 2 + 12 = 14 (left: 14 13)",
                "9 + 3 = 12 (left: 2 12 13) || 2 + 12 = 14 (left: 14 13)",
                "13 - 9 = 4 (left: 2 3 4)",
                "3 * 2 = 6 (left: 6 9 13) || 9 / 6 = 1.5 (left: 1.5 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                60.0,
                1.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.3",
                "2 <- INIT",
                "3 <- 2.3",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "13 - 2 = 11 (left: 3 9 11)",
                "13 - 9 = 4 (left: 2 3 4) || 3 + 4 = 7 (left: 2 7)",
                "9 - 2 = 7 (left: 7 3 13)",
                "13 - 9 = 4 (left: 2 3 4) || 4 / 2 = 2 (left: 3 2)",
                "13 - 9 = 4 (left: 2 3 4)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.002,
                1.001,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 3.4",
                "2 <- 2.3",
                "3 <- 3.4",
                "4 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "13 - 9 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12)",
                "13 - 9 = 4 (left: 2 3 4) || 2 + 3 = 5 (left: 4 5)",
                "13 - 9 = 4 (left: 2 3 4) || 3 + 4 = 7 (left: 2 7)",
                "13 - 9 = 4 (left: 2 3 4) || 2 + 3 = 5 (left: 4 5)",
                "3 * 2 = 6 (left: 6 9 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                3.0,
                0.002,
                2.001,
                1.002
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 4.0",
                "2 <- 3.4",
                "3 <- 3.4",
                "4 <- 4.0"
            ]
        },
        "Step 5": {
            "steps": [
                "13 - 9 = 4 (left: 2 3 4) || 4 / 2 = 2 (left: 2 3)",
                "13 - 9 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 * 2 = 24 (left: 24)",
                "13 - 9 = 4 (left: 2 3 4) || 4 * 2 = 8 (left: 3 8)",
                "13 - 9 = 4 (left: 2 3 4) || 4 - 2 = 2 (left: 2 3)",
                "13 - 9 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 2 + 12 = 14 (left: 14)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 5.1",
                "2 <- 4.0",
                "3 <- 5.1",
                "4 <- 5.2"
            ]
        },
        "Step 6": {
            "steps": [
                "13 - 9 = 4 (left: 2 3 4) || 4 * 2 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "13 - 9 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (2 * (3 * (13 - 9))) = 24",
                "13 - 9 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "13 - 9 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: 2 * (3 * (13 - 9)) = 24",
                "13 - 9 = 4 (left: 2 3 4) || 4 * 2 = 8 (left: 3 8) || 3 + 8 = 11 (left: 11)"
            ]
        },
        "Input": "2 3 9 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "874": {
        "puzzle": "3 3 3 5",
        "Step 0": {
            "steps": [
                "5 + 3 = 8 (left: 3 3 8)",
                "5 - 3 = 2 (left: 3 3 2)",
                "5 - 3 = 2 (left: 3 3 2)",
                "3 / 3 = 1 (left: 1 3 5)",
                "3 * 3 = 9 (left: 3 5 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                1.002,
                2.0,
                1.002,
                60.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- INIT",
                "2 <- 0.4",
                "3 <- 0.4",
                "4 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "3 * 3 = 9 (left: 3 5 9) || 9 - 5 = 4 (left: 4 9)",
                "5 + 3 = 8 (left: 3 3 8)",
                "3 * 3 = 9 (left: 3 5 9) || 9 / 3 = ",
                "3 * 3 = 9 (left: 3 5 9) || 5 - 3 = 2 (left: 2 9)",
                "3 * 3 = 9 (left: 3 5 9) || Input: 4 6 12 24"
            ],
            "Pruning": [],
            "Evaluation": [
                40.0,
                3.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 1.0",
                "2 <- 1.0",
                "3 <- 0.4",
                "4 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "3 * 3 = 9 (left: 3 5 9) || 9 / 3 = 3 (left: 3 9)",
                "3 * 3 = 9 (left: 3 5 9) || 9 - 5 = 4 (left: 4 9) || 9 / 4 = 2.25 (left: 9)",
                "3 * 3 = 9 (left: 3 5 9) || 9 - 5 = 4 (left: 4 9) || 9 - 4 = 5 (left: 5)",
                "3 * 3 = 9 (left: 3 5 9) || 5 / 3 = 1.67 (left: 1.67 9)",
                "5 - 3 = 2 (left: 3 3 2) || 3 + 3 = 6 (left: 2 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                0.002,
                0.0,
                1.001
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 1.0",
                "2 <- INIT",
                "3 <- 0.4",
                "4 <- 1.0"
            ]
        },
        "Step 3": {
            "steps": [
                "3 * 3 = 9 (left: 3 5 9) || Input: 4 6 10",
                "3 * 3 = 9 (left: 3 5 9) || 9 - 5 = 4 (left: 4 9) || 9 - 4 = 5 (left: 5)",
                "3 + 3 = 6 (left: 6 3 5)",
                "3 * 3 = 9 (left: 3 5 9) || 3 + 5 = 8 (left: 8 9)",
                "3 * 3 = 9 (left: 3 5 9) || 9 - 5 = 4 (left: 4 9) || 4 + 9 = 13 (left: 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                3.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.4",
                "2 <- 1.0",
                "3 <- 1.0",
                "4 <- 1.0"
            ]
        },
        "Step 4": {
            "steps": [
                "3 * 3 = 9 (left: 3 5 9) || 3 * 5 = 15 (left: 15 9)",
                "3 * 3 = 9 (left: 3 5 9) || 3 + 5 = 8 (left: 8 9)",
                "3 * 3 = 9 (left: 3 5 9) || 9 - 5 = 4 (left: 4 9) || 9 / 4 = 2.25 (left: 2.25)",
                "3 * 3 = 9 (left: 3 5 9) || 9 - 5 = 4 (left: 4 9) || 7 + 3 = 10 (left: 10 5)",
                "3 * 3 = 9 (left: 3 5 9) || 9 - 5 = 4 (left: 4 9) || 4 - 9 = -5 (left: -5 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                0.002,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 4.0",
                "2 <- 4.0",
                "3 <- 4.0",
                "4 <- 3.2"
            ]
        },
        "Step 5": {
            "steps": [
                "3 + 3 = 6 (left: 3 6 5)",
                "3 * 3 = 9 (left: 3 5 9) || 3 * 5 = 15 (left: 15 9) || 15 + 9 = 24 (left: 24)",
                "3 * 3 = 9 (left: 3 5 9) || 3 * 5 = 15 (left: 15 9) || 15 + 9 = 24 (left: 24)",
                "3 * 3 = 9 (left: 3 5 9) || 3 * 5 = 15 (left: 15 9) || 15 / 9 = 1.6666666666666667 (left: 1.6666666666666667)",
                "3 + 3 = 6 (left: 6 3 5) || 3 + 5 = 8 (left: 6 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                60.0,
                60.0,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 0.4",
                "2 <- 5.2",
                "3 <- 4.0",
                "4 <- 5.1"
            ]
        },
        "Step 6": {
            "steps": [
                "3 * 3 = 9 (left: 3 5 9) || 3 * 5 = 15 (left: 15 9) || 15 + 9 = 24 (left: 24) || Answer: (3 * 3) + (3 * 5) = 24",
                "3 * 3 = 9 (left: 3 5 9) || 9 / 3 = 3 (left:",
                "3 * 3 = 9 (left: 3 5 9) || 3 * 5 = 15 (left: 15 9) || 15 + 9 = 24 (left: 24) || Answer: (3 * 3) + (3 * 5) = 24",
                "3 * 3 = 9 (left: 3 5 9) || 3 * 5 = 15 (left: 15 9) || 15 - 9 = 6 (left: 6)",
                "3 * 3 = 9 (left: 3 5 9) || 3 * 5 = 15 (left: 15 9) || 15 + 9 = 24 (left: 24) || Answer: (3 * 3) + (3 * 5) = 24"
            ]
        },
        "Input": "3 3 3 5",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "1025": {
        "puzzle": "2 6 10 13",
        "Step 0": {
            "steps": [
                "6 * 2 = 12 (left: 12 10 13)",
                "10 + 13 = 23 (left: 2 6 23)",
                "10 + 2 = 12 (left: 6 12 13)",
                "13 - 2 = 11 (left: 6 10 11)",
                "13 - 2 = 11 (left: 6 10 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                1.002,
                3.0,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "2 + 6 = 8 (left: 8 10 13)",
                "6 + 10 = 16 (left: 2 16 13)",
                "2 + 6 = 8 (left: 8 10 13)",
                "13 - 2 = 11 (left: 6 10 11)",
                "2 + 6 = 8 (left: 8 10 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.003,
                60.0,
                2.001,
                20.002
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- 1.4",
                "3 <- 1.2",
                "4 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "2 + 6 = 8 (left: 8 10 13) || 10 + 13 = 23 (left: 8 23)",
                "2 + 6 = 8 (left: 8 10 13) || 8 + 10 = 18 (left: 18 13)",
                "2 + 6 = 8 (left: 8 10 13) || 8 * 10 = 80 (left: 13 80)",
                "2 + 6 = 8 (left: 8 10 13) || 10 - 8 = 2 (left: 2 13)",
                "2 + 6 = 8 (left: 8 10 13) || 13 - 8 = 5 (left: 8 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                1.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.4",
                "2 <- 1.2",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "2 + 6 = 8 (left: 8 10 13) || 10 + 13 = 23 (left: 8 23)",
                "2 + 6 = 8 (left: 8 10 13) || 10 + 13 = 23 (left: 8 23)",
                "2 + 6 = 8 (left: 8 10 13) || 10 - 13 = -3 (left: 8 -3)",
                "2 * 6 = 12 (left: 10 12 13)",
                "2 + 6 = 8 (left: 8 10 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.002,
                1.002,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.2",
                "2 <- INIT",
                "3 <- 1.2",
                "4 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "2 + 6 = 8 (left: 8 10 13) || 8 + 10 = 18 (left: 18 13)",
                "2 + 6 = 8 (left: 8 10 13) || 10 + 13 = 23 (left: 8 23)",
                "6 * 2 = 12 (left: 12 10 13)",
                "2 + 6 = 8 (left: 8 10 13) || 13 - 8 = 5 (left:",
                "13 - 2 = 11 (left: 6 10 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                2.001,
                1.001,
                3.0
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 4.2",
                "2 <- 1.2",
                "3 <- 4.2",
                "4 <- 1.2"
            ]
        },
        "Step 5": {
            "steps": [
                "13 - 2 = 11 (left: 6 10 11) || 6 * 10 = 60 (left: 11 60)",
                "6 * 2 = 12 (left: 12 10 13) || 10 * 13 = ",
                "2 + 6 = 8 (left: 8 10 13) || 13 - 10 = 3 (left: 8 3)",
                "6 * 2 = 12 (left: 12 10 13) || 13 - 10 = 3 (left: 12 3)",
                "2 + 6 = 8 (left: 8 10 13) || 10 - 8 = 2 (left: 2 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 5.2",
                "2 <- 5.2",
                "3 <- 5.2",
                "4 <- 5.2"
            ]
        },
        "Step 6": {
            "steps": [
                "6 * 2 = 12 (left: 12 10 13) || 12 / 10 = 1.2 (left: 1.2 10 13)",
                "2 + 6 = 8 (left: 8 10 13) || 13 - 10 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24)",
                "2 + 6 = 8 (left: 8 10 13) || 13 - 10 = 3 (left: 8 3) || 8 - 3 = 5 (left: 5)",
                "2 + 6 = 8 (left: 8 10 13) || 13 - 10 = 3 (left: 8 3) || 8 - 3 = 5 (left: 5)",
                "2 + 6 = 8 (left: 8 10 13) || 13 - 10 = 3 (left: 8 3) || 8 / 3 = 2.66667 (left: 2.66667)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                60.0,
                0.003,
                0.001,
                0.0
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 6.0",
                "2 <- 5.2",
                "3 <- 6.1",
                "4 <- 6.1"
            ]
        },
        "Step 7": {
            "steps": [
                "2 + 6 = 8 (left: 8 10 13) || 13 - 10 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: (2 + 6) * (10 - 13) = 24",
                "6 * 2 = 12 (left: 12 10 13) || 12 / 10 = 1.2 (left: 1.2 10 13) || 1.2 * 10 = 12 (left: 12 13)",
                "2 + 6 = 8 (left: 8 10 13) || 13 - 10 = 3 (left: 8 3) || 8 / 3 = 2.66667 (left: 2.66667)",
                "2 + 6 = 8 (left: 8 10 13) || 13 - 10 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: (2 + 6) * (10 - 13) = 24",
                "2 + 6 = 8 (left: 8 10 13) || 13 - 10 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: (2 + 6) * (10 - 13) = 24"
            ],
            "Pruning": [
                "0<-5.2",
                "3<-6.1",
                "4<-6.1"
            ],
            "Evaluation": [
                40.0,
                0.003,
                0.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 7.0",
                "2 <- 5.2",
                "3 <- 7.0",
                "4 <- 7.4"
            ]
        },
        "Step 8": {
            "steps": [
                "2 + 6 = 8 (left: 8 10 13) || 13 - 10 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: (2 + 6) * (10 - 13) = 24",
                "2 + 6 = 8 (left: 8 10 13) || 13 - 10 = 3 (left: 8 3) || 8 - 3 = 5 (left: 5)",
                "2 + 6 = 8 (left: 8 10 13) || 13 - 10 = 3 (left: 8 3) || 8 - 3 = 5 (left: 5)",
                "2 + 6 = 8 (left: 8 10 13) || 13 - 10 = 3 (left: 8 3) || 8 + 3 = 11 (left: 11)",
                "2 + 6 = 8 (left: 8 10 13) || 13 - 10 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: (2 + 6) * (10 - 13) = 24"
            ],
            "Pruning": [
                "0<-7.4",
                "4<-6.1"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.001,
                0.001,
                40.0
            ],
            "Resampling": [
                "0 <- 8.0",
                "1 <- 5.2",
                "2 <- 7.3",
                "3 <- 8.0",
                "4 <- 7.3"
            ]
        },
        "Step 9": {
            "steps": [
                "2 + 6 = 8 (left: 8 10 13) || 13 - 10 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: (2 + 6) * (10 - 13) = 24",
                "2 + 6 = 8 (left: 8 10 13) || 13 - 10 = 3 (left: 8 3) || 8 - 3 = 5 (left: 5)",
                "2 + 6 = 8 (left: 8 10 13) || 13 - 10 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: (2 + 6) * (10 - 13) = 24",
                "2 + 6 = 8 (left: 8 10 13) || 13 - 10 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: (2 + 6) * (10 - 13) = 24",
                "2 + 6 = 8 (left: 8 10 13) || 13 - 10 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: (2 + 6) * (10 - 13) = 24"
            ],
            "Pruning": [
                "0<-7.3",
                "2<-8.0",
                "3<-8.0",
                "4<-5.2"
            ]
        },
        "Input": "2 6 10 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1026": {
        "puzzle": "6 8 9 12",
        "Step 0": {
            "steps": [
                "6 * 8 = 48 (left: 9 12 48)",
                "8 - 6 = 2 (left: 2 9 12)",
                "6 * 8 = 48 (left: 9 12 48)",
                "6 + 8 = 14 (left: 9 12 14)",
                "12 - 6 = 6 (left: 6 8 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                1.002,
                3.0,
                1.001,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.1",
                "2 <- 0.4",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "8 / 6 = 1.33 (left: 1.",
                "8 - 6 = 2 (left: 2 9 12) || 9 / 2 = 4.5 (left: 4.5 12)",
                "12 - 6 = 6 (left: 6 8 9) || 8 - 6 = 2 (left: 2 9)",
                "8 - 6 = 2 (left: 2 9 12)",
                "12 - 6 = 6 (left: 6 8 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.003,
                0.0,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.0"
            ]
        },
        "Step 2": {
            "steps": [
                "6 * 8 = 48 (left: 9 12 48) || 9 * 12 = 108 (left: 48 108)",
                "12 - 6 = 6 (left: 6 8 9)",
                "12 - 8 = 4 (left: 6 4 9)",
                "9 + 6 = 15 (left: 8 12 15)",
                "6 * 8 = 48 (left: 9 12 48) || 9 + 12 = 21 (left: 21 48)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                3.0,
                41.0,
                22.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 2.2",
                "2 <- 2.1",
                "3 <- 2.1",
                "4 <- 2.2"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 6 = 6 (left: 6 8 9) || 6 + 8 = 14 (left: 9 14)",
                "12 - 8 = 4 (left: 6 4 9) || 6 * 4 = 24 (left: 9 24)",
                "12 - 6 = 6 (left: 6 8 9) || 9 - 6 = 3 (left: 3 8)",
                "12 - 6 = 6 (left: 6 8 9) || 9 - 6 = 3 (left: 3 8)",
                "12 - 8 = 4 (left: 6 4 9) || 4 + 9 = 13 (left: 6 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                60.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 3.2",
                "2 <- 3.2",
                "3 <- 0.3",
                "4 <- 3.2"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 8 = 4 (left: 6 4 9) || 6 * 4 = 24 (left: 24 9)",
                "12 - 6 = 6 (left: 6 8 9) || 9 - 6 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "12 - 6 = 6 (left: 6 8 9) || 9 - 6 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "6 + 8 = 14 (left: 9 12 14) || 9 * 12 = 108 (left: 108 14)",
                "12 - 6 = 6 (left: 6 8 9) || 9 - 6 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                60.0,
                0.003,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 3.3",
                "2 <- 4.4",
                "3 <- 4.4",
                "4 <- 2.2"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 8 = 4 (left: 6 4 9) || 4 * 9 = 36 (left: 6 36)",
                "12 - 6 = 6 (left: 6 8 9) || 9 - 6 = 3 (left: 3 8) || Input: 4 6 12",
                "12 - 6 = 6 (left: 6 8 9) || 9 - 6 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (12 - 6) * (9 - 8) = 24",
                "12 - 6 = 6 (left: 6 8 9) || 9 - 6 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (12 - 6) * (9 - 8) = 24",
                "12 - 8 = 4 (left: 6 4 9) || 9 - 6 = 3 (left: 3 4)"
            ],
            "Pruning": [
                "2<-3.2",
                "3<-4.1"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                60.0,
                22.0
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 4.4",
                "2 <- 5.3",
                "3 <- 3.2",
                "4 <- 3.2"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 6 = 6 (left: 6 8 9) || 9 - 6 = 3 (left: 3 8) || Possible next steps:",
                "12 - 6 = 6 (left: 6 8 9) || 9 - 6 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (12 - 6) * (9 - 8) = 24",
                "12 - 6 = 6 (left: 6 8 9) || 9 - 6 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (12 - 6) * (9 - 8) = 24",
                "12 - 6 = 6 (left: 6 8 9) || 9 - 6 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "12 - 6 = 6 (left: 6 8 9) || 9 - 6 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)"
            ],
            "Pruning": [
                "1<-4.4",
                "2<-4.1"
            ],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 6.2",
                "2 <- 4.1",
                "3 <- 5.2",
                "4 <- 3.3"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 6 = 6 (left: 6 8 9) || 9 - 6 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "12 - 6 = 6 (left: 6 8 9) || 9 - 6 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (12 - 6) * (9 - 8) = 24",
                "12 - 6 = 6 (left: 6 8 9) || 9 - 6 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (12 - 6) * (9 - 8) * 8 = 24",
                "12 - 6 = 6 (left: 6 8 9) || 9 - 6 = 3 (left: 3 8) || 5 + 2 = 7 (left: 7 7)",
                "12 - 6 = 6 (left: 6 8 9) || 9 - 6 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)"
            ],
            "Pruning": [
                "1<-2.2",
                "2<-4.4"
            ],
            "Evaluation": [
                0.002,
                60.0,
                60.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 7.2",
                "2 <- 4.4",
                "3 <- 7.2",
                "4 <- 7.2"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 6 = 6 (left: 6 8 9) || 9 - 6 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (12 - 6) * (9 - 6) = 24",
                "12 - 6 = 6 (left: 6 8 9) || 9 - 6 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (12 - 6) * (9 - 6) = 24",
                "12 - 6 = 6 (left: 6 8 9) || 9 - 6 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (12 - 6) * (9 - 6) = 24",
                "12 - 6 = 6 (left: 6 8 9) || 9 - 6 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (12 - 6) * (9 - 6) = 24",
                "12 - 6 = 6 (left: 6 8 9) || 9 - 6 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (12 - 6) * (9 - 6) = 24"
            ],
            "Pruning": [
                "0<-5.2",
                "1<-7.1",
                "2<-5.2",
                "3<-3.3",
                "4<-7.1"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 8.1",
                "1 <- 8.4",
                "2 <- 7.2",
                "3 <- 4.4",
                "4 <- 8.0"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 8 = 4 (left: 6 4 9) || 6 + 4 = 10 (left: 9 10)",
                "12 - 8 = 4 (left: 6 4 9) || 4 + 9 = 13 (left: 6 13)",
                "12 - 6 = 6 (left: 6 8 9) || 9 - 6 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (12 - 6) * (9 - 8) = 24",
                "12 - 6 = 6 (left: 6 8 9) || 9 - 6 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (12 - 6) * (9 - 8) = 24",
                "12 - 6 = 6 (left: 6 8 9) || 9 - 6 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)"
            ],
            "Pruning": [
                "2<-6.1",
                "3<-7.1"
            ]
        },
        "Input": "6 8 9 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1027": {
        "puzzle": "1 5 7 9",
        "Step 0": {
            "steps": [
                "7 + 9 = 16 (left: 1 5 16)",
                "7 + 9 = 16 (left: 1 5 16)",
                "7 * 9 = 63 (left: 1 5 ",
                "1 * 5 = 5 (left: 5 7 9)",
                "1 * 5 = 5 (left: 5 7 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                2.001,
                0.002,
                3.0,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.0",
                "2 <- 0.3",
                "3 <- INIT",
                "4 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "5 + 7 = 12 (left: 1 12 9)",
                "7 + 9 = 16 (left: 1 5 16) || 16 - 1 = 15 (left: 5 15)",
                "1 * 5 = 5 (left: 5 7 9) || 7 + 9 = 16 (left: 5 16)",
                "5 + 7 = 12 (left: 1 12 9)",
                "1 * 5 = 5 (left: 5 7 9) || 9 + 5 = 14 (left: 7 14)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.001,
                1.002,
                0.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.0",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.0"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 5 = 6 (left: 6 7 9)",
                "7 + 9 = 16 (left: 1 5 16) || 16 - 1 = 15 (left:",
                "5 + 7 = 12 (left: 1 12 9)",
                "7 - 1 = 6 (left: 5 6 9)",
                "7 + 9 = 16 (left: 1 5 16) || 1 * 5 = 5 (left: 5 16)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                0.002,
                2.0,
                3.0,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 2.2",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "5 * 7 = 35 (left: 1 35 9)",
                "5 - 1 = 4 (left: 4 7 ",
                "5 + 7 = 12 (left: 1 12 9) || 12 - 1 = 11 (left: 11 9)",
                "1 * 5 = 5 (left: 5 7 9)",
                "1 * 5 = 5 (left: 5 7 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                3.0,
                3.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- INIT",
                "2 <- 3.3",
                "3 <- 2.0",
                "4 <- 3.4"
            ]
        },
        "Step 4": {
            "steps": [
                "7 + 9 = 16 (left: 1 5 16) || 5 * 1 = 5 (left: 5 16)",
                "7 * 9 = 63 (left: 1 5 ",
                "1 * 5 = 5 (left: 5 7 9) || Input: 3 6 12",
                "1 + 5 = 6 (left: 6 7 9) || 9 - 7 = 2 (left: 2 9)",
                "1 * 5 = 5 (left: 5 7 9) || 5 * 7 = 35 (left: 9 35)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.002,
                0.003,
                0.001,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.3",
                "2 <- 2.3",
                "3 <- 3.4",
                "4 <- 2.3"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 5 = 6 (left: 6 7 9)",
                "1 * 5 = 5 (left: 5 7 9) || 7 - 5 = 2 (left: 2 9)",
                "7 - 1 = 6 (left: 5 6 9) || Input: 3 4 7 10",
                "1 * 5 = 5 (left: 5 7 9) || 9 + 5 = 14 (left: 7 14)",
                "7 - 1 = 6 (left: 5 6 9) || 9 - 6 = 3 (left: 3 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                0.0,
                0.003,
                21.001,
                0.003
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 5.3",
                "2 <- 5.3",
                "3 <- 5.3",
                "4 <- 5.3"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 5 = 5 (left: 5 7 9) || 9 + 5 = 14 (left: 7 14) || 14 / 7 = 2 (left: 2)",
                "1 * 5 = 5 (left: 5 7 9) || 9 + 5 = 14 (left: 7 14) || 14 / 7 = 2 (left: 2)",
                "1 * 5 = 5 (left: 5 7 9) || 9 + 5 = 14 (left: 7 14) || 14 / 7 = 2 (left: 2)",
                "1 * 5 = 5 (left: 5 7 9) || 9 + 5 = 14 (left: 7 14) || 7 + 14 = 21 (left: 21)",
                "1 * 5 = 5 (left: 5 7 9) || 9 + 5 = 14 (left: 7 14) || 7 * 14 = 98 (left: 98)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.003,
                0.002,
                20.0,
                0.003
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 5.3",
                "2 <- 5.3",
                "3 <- 6.3",
                "4 <- 5.0"
            ]
        },
        "Step 7": {
            "steps": [
                "1 * 5 = 5 (left: 5 7 9) || 9 + 5 = 14 (left: 7 14) || 7 - 14 = -7 (left: -7)",
                "1 * 5 = 5 (left: 5 7 9) || 9 + 5 = 14 (left: 7 14) || 7 - 14 = -7 (left: -7)",
                "1 * 5 = 5 (left: 5 7 9) || 9 + 5 = 14 (left: 7 14) || 14 - 7 = 7 (left: 7 7)",
                "1 * 5 = 5 (left: 5 7 9) || 9 + 5 = 14 (left: 7 14) || 7 + 14 = 21 (left: 21) || 21 + 2 = 23 (left: 23)",
                "1 + 5 = 6 (left: 6 7 9) || 7 * 9 = 63 (left: 6 63)"
            ],
            "Pruning": [
                "3<-6.3"
            ],
            "Evaluation": [
                0.001,
                0.001,
                0.002,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 5.3",
                "2 <- 0.0",
                "3 <- 6.3",
                "4 <- 5.3"
            ]
        },
        "Step 8": {
            "steps": [
                "1 * 5 = 5 (left: 5 7 9) || 9 + 5 = 14 (left: 7 14) || 7 + 14 = 21 (left: 21) || 21 * 2 = 42",
                "1 * 5 = 5 (left: 5 7 9) || 9 + 5 = 14 (left: 7 14) || Input: 21 98 7 2",
                "7 + 9 = 16 (left: 1 5 16) || 16 / 5 = 3.2 (left: 1 3.2)",
                "1 * 5 = 5 (left: 5 7 9) || 9 + 5 = 14 (left: 7 14) || 7 + 14 = 21 (left: 21) || 21 + 8 = 29 (left: 8)",
                "1 * 5 = 5 (left: 5 7 9) || 9 + 5 = 14 (left: 7 14) || 14 / 7 = 2 (left: 2)"
            ],
            "Pruning": [
                "3<-0.1"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                2.001,
                0.001
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- INIT",
                "2 <- 3.4",
                "3 <- 0.3",
                "4 <- 6.3"
            ]
        },
        "Step 9": {
            "steps": [
                "1 * 5 = 5 (left: 5 7 9) || 9 + 5 = 14 (left: 7 14) || 7 + 14 = 21 (left: 21) || 21 + 8 = 29",
                "1 + 5 = 6 (left: 6 7 9)",
                "1 * 5 = 5 (left: 5 7 9) || 7 + 9 = 16 (left: 5 16)",
                "1 * 5 = 5 (left: 5 7 9) || 7 - 5 = 2 (left:",
                "1 * 5 = 5 (left: 5 7 9) || 9 + 5 = 14 (left: 7 14) || 7 + 14 = 21 (left: 21) || 21 - 8 = 13 (left: 8 13)"
            ],
            "Pruning": []
        },
        "Input": "1 5 7 9",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1028": {
        "puzzle": "1 3 7 7",
        "Step 0": {
            "steps": [
                "7 / 1 = 7 (left: 7 7 7)",
                "3 + 7 = 10 (left: 1 10 7)",
                "3 + 7 = 10 (left: 1 7 10)",
                "7 - 3 = 4 (left: 1 4 7)",
                "7 / 1 = 7 (left: 7 7 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                1.002,
                2.001,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 3 = 4 (left: 4 7 7)",
                "7 - 1 = 6 (left: 6 7 7)",
                "1 + 3 = 4 (left: 4 7 7)",
                "7 - 3 = 4 (left: 1 4 7)",
                "3 + 7 = 10 (left: 1 10 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                22.0,
                3.0,
                3.0,
                21.001,
                3.0
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.3",
                "2 <- 1.0",
                "3 <- INIT",
                "4 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "7 - 3 = 4 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6)",
                "7 - 3 = 4 (left: 1 4 7) || 7 - 4 = 3 (left: 1 3)",
                "1 + 3 = 4 (left: 4 7 7) || 7 - 4 = 3 (left: 3 7 7)",
                "7 / 1 = 7 (left: 7 7 7)",
                "1 + 3 = 4 (left: 4 7 7) || 4 * 7 = 28 (left: 7 7 28)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.0,
                21.0,
                60.0,
                2.001,
                2.001
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.0",
                "2 <- 2.0",
                "3 <- 1.3",
                "4 <- 2.2"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 3 = 4 (left: 4 7 7) || 7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2 (left: 2 7)",
                "7 - 3 = 4 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || Possible next steps:",
                "7 - 3 = 4 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "7 - 3 = 4 (left: 1 4 7) || Possible",
                "1 + 3 = 4 (left: 4 7 7) || 7 - 4 = 3 (left: 3 7 7) || 7 + 3 = 10 (left: 3 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                60.0,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 3.2",
                "2 <- 3.2",
                "3 <- 1.0",
                "4 <- 2.2"
            ]
        },
        "Step 4": {
            "steps": [
                "7 - 3 = 4 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (7 - 3) * (7 - 1) = 24",
                "7 - 3 = 4 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (7 - 3) * (7 - 1) = 24",
                "7 - 3 = 4 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (7 - 3) * (7 - 1) = 24",
                "1 + 3 = 4 (left: 4 7 7) || 7 / 4 = 1.75 (left: 1.75 7)",
                "1 + 3 = 4 (left: 4 7 7) || 7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2 (left: 2 7 7)"
            ]
        },
        "Input": "1 3 7 7",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1029": {
        "puzzle": "2 9 11 13",
        "Step 0": {
            "steps": [
                "2 * 9 = 18 (left: 11 13 18)",
                "11 + 2 = 13 (left: 9 11 13)",
                "11 - 2 = 9 (left: 9 11 13)",
                "13 - 11 = 2 (left: 2 9 ",
                "9 + 2 = 11 (left: 11 11 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                1.002,
                2.001,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 9 = 18 (left: 11 11 18)",
                "2 + 9 = 11 (left: 11 11 13)",
                "13 - 2 = 11 (left: 9 11 ",
                "11 + 2 = 13 (left: 9 11 13) || 13 - 9 = 4 (left: 4 11)",
                "2 * 9 = 18 (left: 11 18 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                3.0,
                0.001,
                0.002,
                3.0
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 1.1",
                "2 <- INIT",
                "3 <- 1.4",
                "4 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "13 - 11 = 2 (left: 2 9  || 9 / 2 = 4.5 (left: 4.5)",
                "2 + 9 = 11 (left: 11 11 13) || 11 / 11 = 1 (left: 1 13)",
                "13 - 2 = 11 (left: 9 11 11)",
                "2 * 9 = 18 (left: 11 18 13) || 11 + 18 = 29 (left: 13 29)",
                "11 - 2 = 9 (left: 9 11 13) || 11 + 13 = 24 (left: 9 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.001,
                1.001,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 2.0",
                "3 <- 2.0",
                "4 <- 2.0"
            ]
        },
        "Step 3": {
            "steps": [
                "13 - 11 = 2 (left: 2 9  || 9 / 2 = 4.5 (left: 4.5) || There are no possible next steps with the input of 4.5 as it is already a single number.",
                "13 - 11 = 2 (left: 2 9  || 9 / 2 = 4.5 (left: 4.5) || There are no possible next steps with the input 4.5.",
                "13 - 11 = 2 (left: 2 9  || 9 / 2 = 4.5 (left: 4.5) || There is only one number given, so there are no possible next steps to compute.",
                "13 - 11 = 2 (left: 2 9  || 9 / 2 = 4.5 (left: 4.5) || There are no possible next steps with the input 4.5.",
                "13 - 11 = 2 (left: 2 9  || 9 / 2 = 4.5 (left: 4.5) || 4.5 + 2 = 6.5 (left: 6.5)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.0",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.0"
            ]
        },
        "Step 4": {
            "steps": [
                "9 / 2 = 4.5 (left: 4.",
                "13 - 11 = 2 (left: 2 9  || 9 / 2 = 4.5 (left: 4.5) || There are no possible next steps with the input 4.5.",
                "13 - 2 = 11 (left: 9 11 13)",
                "2 + 11 = 13 (left: 9 13 13)",
                "2 * 9 = 18 (left: 11 13 18) || 13 / 11 = 1.18181818182 (left: 1.18181818182 18)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.003,
                1.002,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 2.0",
                "2 <- 2.0",
                "3 <- 4.2",
                "4 <- 1.4"
            ]
        },
        "Step 5": {
            "steps": [
                "2 * 9 = 18 (left: 11 13 18) || 13 / 11 = 1.18181818182 (left: 1.18181818182 18) || 18 / 1.18181818182 = 15.21538461536 (left: 15.215384615",
                "13 - 11 = 2 (left: 2 9  || 9 / 2 = 4.5 (left: 4.5) || There are no possible next steps for the input 4.5.",
                "13 - 11 = 2 (left: 2 9  || 9 / 2 = 4.5 (left: 4.5) || There is only one possible next step:",
                "13 - 2 = 11 (left: 9 11 13) || 11 + 13 = 24 (left: 9 24)",
                "2 * 9 = 18 (left: 11 18 13) || 11 + 18 = 29 (left: 13 29)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 2.0",
                "4 <- 2.0"
            ]
        },
        "Step 6": {
            "steps": [
                "9 * 11 = 99 (left: 2 99 13)",
                "2 + 9 = 11 (left: 11 11 13)",
                "9 + 2 = 11 (left: 11 11 13)",
                "13 - 11 = 2 (left: 2 9  || 9 / 2 = 4.5 (left: 4.5) || There are no possible next steps with the input 4.5.",
                "13 - 11 = 2 (left: 2 9  || 9 / 2 = 4.5 (left: 4.5) || There are no possible next steps as the input is already a single number."
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.0",
                "2 <- 4.4",
                "3 <- 6.0",
                "4 <- 6.0"
            ]
        },
        "Step 7": {
            "steps": [
                "13 - 11 = 2 (left: 2 9 ",
                "13 - 11 = 2 (left: 2 9  || 9 / 2 = 4.5 (left: 4.5) || There are no possible next steps with the input 4.5.",
                "2 * 9 = 18 (left: 11 13 18) || 13 / 11 = 1.18181818182 (left: 1.18181818182 18) || 1.18181818182 * 18 = 21.27272727276 (left: 18 21.27272727276)",
                "9 * 11 = 99 (left: 2 99 13) || 2 * 99 = 198 (left: 13 198)",
                "9 * 11 = 99 (left: 2 99 13) || 2 + 99 = 101 (left: 13 101)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                1.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 6.0",
                "2 <- 2.0",
                "3 <- 6.0",
                "4 <- 6.0"
            ]
        },
        "Step 8": {
            "steps": [
                "13 - 11 = 2 (left: 2 9  || 9 / 2 = 4.5 (left: 4.5) || 4.5 / 2 = 2.25 (left: 2.25)",
                "9 * 11 = 99 (left: 2 99 13) || 99 - 13 = 86 (left: 2 86)",
                "13 - 11 = 2 (left: 2 9  || 9 / 2 = 4.5 (left: 4.5) || 4.5 / 2 = 2.25 (left: 2.25)",
                "9 * 11 = 99 (left: 2 99 13) || 99 / 2 = 49.5 (left: 13 49.5)",
                "9 * 11 = 99 (left: 2 99 13) || 99 / 2 = "
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                21.0,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 8.1",
                "1 <- 8.1",
                "2 <- 8.1",
                "3 <- 8.1",
                "4 <- 8.1"
            ]
        },
        "Step 9": {
            "steps": [
                "9 * 11 = 99 (left: 2 99 13) || 99 - 13 = 86 (left: 2 86) || 2 * 86 = 172 (left: 172)",
                "9 * 11 = 99 (left: 2 99 13) || 99 - 13 = 86 (left: 2 86) || 86 + 2 = 88 (left: 88)",
                "9 * 11 = 99 (left: 2 99 13) || 99 - 13 = 86 (left: 2 86) || 2 + 86 = 88 (left: 88)",
                "9 * 11 = 99 (left: 2 99 13) || 99 - 13 = 86 (left: 2 86) || 5 + 10 = 15 (left: 15)",
                "9 * 11 = 99 (left: 2 99 13) || 99 - 13 = 86 (left: 2 86) || 86 + 2 = 88 (left: 2 88)"
            ],
            "Pruning": []
        },
        "Input": "2 9 11 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1030": {
        "puzzle": "3 7 9 11",
        "Step 0": {
            "steps": [
                "3 * 7 = 21 (left: 9 11 21)",
                "7 - 3 = 4 (left: 4 9 11)",
                "11 - 3 = 8 (left: 7 8 9)",
                "7 / 3 = 2 (left: 2 9 11)",
                "3 + 7 = 10 (left: 9 10 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.001,
                60.0,
                41.0,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.1",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "7 - 3 = 4 (left: 4 9 11) || 9 - 4 = 5 (left: 5 11)",
                "7 - 3 = 4 (left: 4 9 11) || 4 + 9 = 13 (left: 13 11)",
                "3 * 7 = 21 (left: 9 11 21)",
                "7 - 3 = 4 (left: 4 9 11) || 9 / 4 = 2.25 (left: 2.25 11)",
                "11 - 3 = 8 (left: 7 8 9) || 7 * 8 = 56 (left: 9 56)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                60.0,
                0.002,
                1.0,
                20.001
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.1",
                "2 <- INIT",
                "3 <- 1.1",
                "4 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "7 - 3 = 4 (left: 4 9 11) || 4 + 9 = 13 (left: 13 11) || 13 + 11 = 24 (left: 24)",
                "7 - 3 = 4 (left: 4 9 11) || 4 + 9 = 13 (left: 13 11) || 13 / 11 = 1.1818181818181819 (left: 1.1818181818181819)",
                "9 + 7 = 16 (left: 3 11 16)",
                "7 - 3 = 4 (left: 4 9 11) || 4 + 9 = 13 (left: 13 11) || 13 - 11 = 2 (left: 2)",
                "11 - 3 = 8 (left: 7 8 9) || 9 - 8 = 1 (left: 7 1)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                2.001,
                0.0,
                20.0
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.4",
                "2 <- 1.1",
                "3 <- 1.1",
                "4 <- 2.0"
            ]
        },
        "Step 3": {
            "steps": [
                "7 - 3 = 4 (left: 4 9 11) || 4 + 9 = 13 (left: 13 11) || 11 + 13 = 24 (left: 24)",
                "11 - 3 = 8 (left: 7 8 9) || 7 * 8 = 56 (left: 9 56) || 9 * 56 = 504 (left: 504)",
                "7 - 3 = 4 (left: 4 9 11) || 4 + 9 = 13 (left: 13 11) || 13 - 11 = 2 (left: 2)",
                "7 - 3 = 4 (left: 4 9 11) || 4 + 9 = 13 (left: 13 11) || 13 / 11 = 1.18 (left: 1.18)",
                "7 - 3 = 4 (left: 4 9 11) || 4 + 9 = 13 (left: 13 11) || 13 + 11 = 24 (left: 24) || Answer: ((7 - 3) + 9) + 11 = 24"
            ]
        },
        "Input": "3 7 9 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "1031": {
        "puzzle": "4 8 8 10",
        "Step 0": {
            "steps": [
                "8 - 4 = 4 (left: 4 8 10)",
                "10 - 8 = 2 (left: 4 8 2)",
                "8 - 4 = 4 (left: 4 8 10)",
                "8 / 4 = 2 (left: 2 8 10)",
                "8 - 4 = 4 (left: 4 8 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.002,
                1.002,
                1.002,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "10 - 8 = 2 (left: 4 8 2)",
                "4 * 8 = 32 (left: 8 10 32)",
                "8 - 4 = 4 (left: 4 8 10)",
                "8 - 4 = 4 (left: 4 10 8)",
                "4 + 8 = 12 (left: 8 10 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                21.001,
                41.0,
                22.0,
                41.0,
                2.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.0",
                "2 <- 1.1",
                "3 <- INIT",
                "4 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "10 - 8 = 2 (left: 4 8 2) || 8 - 4 = 4 (left: 4 8)",
                "10 - 8 = 2 (left: 4 8 2) || 4 + 2 =",
                "4 * 8 = 32 (left: 8 10 32) || 10 * 8 = 80 (left: 80 32)",
                "10 - 4 = 6 (left: 4 8 6)",
                "4 * 8 = 32 (left: 8 10 32) || 32 / 8 = 4 (left: 4 10 32)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                2.0,
                41.0,
                3.0
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 1.1",
                "2 <- 2.3",
                "3 <- 1.3",
                "4 <- 1.0"
            ]
        },
        "Step 3": {
            "steps": [
                "10 - 4 = 6 (left: 4 8 6) || 8 - 6 = 2 (left: 4 2)",
                "4 * 8 = 32 (left: 8 10 32) || 10 + 32 = 42 (left: 8 42)",
                "10 - 4 = 6 (left: 4 8 6) || 8 / 4 = 2 (left: 2 6)",
                "8 - 4 = 4 (left: 4 10 8) || 10 / 4 = 2.5 (left: 2.5 8)",
                "10 - 8 = 2 (left: 4 8 2) || 2 * 8 = 16 (left: 16)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                2.001,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 2.3",
                "2 <- 1.1",
                "3 <- 1.3",
                "4 <- 1.0"
            ]
        },
        "Step 4": {
            "steps": [
                "10 - 8 = 2 (left: 4 8 2) || 8 - 4 = 4 (left: 4)",
                "10 - 4 = 6 (left: 4 8 6) || 4 + 8 = 12 (left: 6 12)",
                "4 * 8 = 32 (left: 8 10 32) || 8 + 10 = 18 (left: 18 32)",
                "8 - 4 = 4 (left: 4 10 8) || 8 * 4 = 32 (left: 10 32)",
                "10 - 8 = 2 (left: 4 8 2) || 8 - 4 = 4 (left: 4)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                1.002,
                0.001,
                0.003,
                20.001
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 4.4",
                "2 <- 1.2",
                "3 <- 1.3",
                "4 <- 4.4"
            ]
        },
        "Step 5": {
            "steps": [
                "10 - 8 = 2 (left: 4 8 2) || 8 - 4 = 4 (left: 4) || There is only one possible next step which is:",
                "10 - 8 = 2 (left: 4 8 2) || 8 - 4 = 4 (left: 4) || 4 + 4 = 8",
                "8 - 4 = 4 (left: 4 8 10) || 4 + 8 = 12 (left: 10 12)",
                "8 - 4 = 4 (left: 4 10 8) || 10 / 4 = 2.5 (left: 2.5 8)",
                "10 - 8 = 2 (left: 4 8 2) || 8 - 4 = 4 (left: 4) || There is only one possible next step:"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 4.4",
                "2 <- 1.1",
                "3 <- 5.3",
                "4 <- 4.1"
            ]
        },
        "Step 6": {
            "steps": [
                "10 - 8 = 2 (left: 4 8 2) || 8 - 4 = 4 (left: 4) || None, as there is only one number left.",
                "10 - 8 = 2 (left: 4 8 2) || 8 - 4 = 4 (left: 4) || 4 + 4 = 8",
                "4 * 8 = 32 (left: 8 10 32) || 32 / 8 = 4 (left: 4 8)",
                "8 - 4 = 4 (left: 4 10 8) || 10 / 4 = 2.5 (left: 2.5 8) || 2.5 * 8 = 20 (left: 20)",
                "10 - 4 = 6 (left: 4 8 6) || 4 + 8 = 12 (left: 6 12) || 12 + 6 = 18 (left: 18)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.0
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- INIT",
                "2 <- 1.2",
                "3 <- 1.1",
                "4 <- 1.3"
            ]
        },
        "Step 7": {
            "steps": [
                "4 * 8 = 32 (left: 8 10 32) || 10 - 8 = 2 (left: 8 2 32)",
                "4 + 8 = 12 (left: 8 10 12)",
                "8 - 4 = 4 (left: 4 8 10) || 4 / 8 = ",
                "4 * 8 = 32 (left: 8 10 32) || 32 - 8 = 24 (left: 10 24)",
                "8 - 4 = 4 (left: 4 10 8) || 4 * 10 = 40 (left: 8 40)"
            ],
            "Pruning": [],
            "Evaluation": [
                21.001,
                2.001,
                0.003,
                1.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 7.0",
                "2 <- 7.0",
                "3 <- 7.0",
                "4 <- 7.0"
            ]
        },
        "Step 8": {
            "steps": [
                "8 - 4 = 4 (left: 4 10 8) || 10 - 4 = 6 (left: 6 8)",
                "4 * 8 = 32 (left: 8 10 32) || 10 - 8 = 2 (left: 8 2 32) || 8 + 2 = 10 (left: 10 32)",
                "4 * 8 = 32 (left: 8 10 32) || 10 - 8 = 2 (left: 8 2 32) || 32 - 8 = 24 (left: 2 24)",
                "4 * 8 = 32 (left: 8 10 32) || 10 - 8 = 2 (left: 8 2 32) || 32 - 8 = 24 (left: 2 24)",
                "4 * 8 = 32 (left: 8 10 32) || 10 - 8 = 2 (left: 8 2 32) || 32 - 8 = 24 (left: 2 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 7.1",
                "1 <- 7.0",
                "2 <- 4.1",
                "3 <- 2.3",
                "4 <- 7.0"
            ]
        },
        "Step 9": {
            "steps": [
                "4 + 8 = 12 (left: 8 10 12) || 8 + 10 = 18 (left: 18 12)",
                "4 * 8 = 32 (left: 8 10 32) || 10 - 8 = 2 (left: 8 2 32) || 32 / 2 = 16 (left: 8 16)",
                "10 - 4 = 6 (left: 4 8 6) || 4 + 8 = 12 (left: 6 12) || 12 / 6 = 2 (left: 2)",
                "10 - 4 = 6 (left: 4 8 6) || 6 * 4 = 24 (left: 8 24)",
                "4 * 8 = 32 (left: 8 10 32) || 10 - 8 = 2 (left: 8 2 32) || 32 - 2 = 30 (left: 8 30)"
            ],
            "Pruning": []
        },
        "Input": "4 8 8 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1032": {
        "puzzle": "1 4 8 9",
        "Step 0": {
            "steps": [
                "9 - 4 = 5 (left: 1 5 ",
                "1 + 4 = 5 (left: 5 8 9)",
                "9 - 1 = 8 (left: 4 8 8)",
                "9 - 4 = 5 (left: ",
                "9 - 1 = 8 (left: 4 8 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                3.0,
                22.0,
                0.0,
                41.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.2",
                "2 <- INIT",
                "3 <- 0.4",
                "4 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "9 - 1 = 8 (left: 4 8 8) || 4 + 8 = 12 (left: 8 12)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8)",
                "9 - 4 = 5 (left: 1 5 ",
                "9 - 1 = 8 (left: 4 8 8) || 4 + 8 = 12 (left: 8 8 12)",
                "9 - 1 = 8 (left: 4 8 8) || 4 + 8 = 12 (left: 8 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                21.0,
                0.001,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.2",
                "2 <- 0.4",
                "3 <- INIT",
                "4 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "9 - 1 = 8 (left: 4 8 8) || 4 + 8 = 12 (left: 8 12)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8)",
                "9 - 1 = 8 (left: 4 8 8) || 4 + 8 = 12 (left: 8 12)",
                "4 * 1 = 4 (left: 4 8 9)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 /"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                1.002,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.4",
                "2 <- 1.1",
                "3 <- 1.1",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 / 4 = 2 (left: 2 8 8)",
                "9 - 1 = 8 (left: 4 8 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                1.002,
                3.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 3.2",
                "2 <- 3.2",
                "3 <- 2.2",
                "4 <- 3.2"
            ]
        },
        "Step 4": {
            "steps": [
                "9 - 1 = 8 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 8 * 4 = 32 (left: 32)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || Input: 5 25",
                "9 - 1 = 8 (left: 4 8 8) || 4 + 8 = 12 (left: 8 12) || Possible next steps:",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 / 8 = 4 (left: 4 8)"
            ],
            "Pruning": [
                "1<-3.2"
            ],
            "Evaluation": [
                20.002,
                40.001,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 4.0",
                "2 <- 4.1",
                "3 <- 3.2",
                "4 <- INIT"
            ]
        },
        "Step 5": {
            "steps": [
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 / 8 = 4 (left: 4 8)",
                "9 - 1 = 8 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 8 * 4 = 32 (left: 32)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 / 8 = 4 (left: 4 8)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 8 + 32 = 40 (left: 32)",
                "8 - 4 = 4 (left: 1 4 "
            ],
            "Pruning": [
                "3<-3.2"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                20.002,
                0.001
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 4.1",
                "2 <- 3.2",
                "3 <- 4.1",
                "4 <- 4.1"
            ]
        },
        "Step 6": {
            "steps": [
                "9 - 1 = 8 (left: 4 8 8) || 4 + 8 = 12 (left: 8 12) || 12 / 8 = 1.5 (left: 1.5)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 8 * 4 = 32 (left: 32)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 8 * 4 = 32 (left: 32)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 / 8 = 4 (left: 4 8)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 / 4 = 8 (left: 8 8)"
            ],
            "Pruning": [
                "1<-3.2",
                "2<-5.3"
            ],
            "Evaluation": [
                0.002,
                40.001,
                20.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 6.2",
                "2 <- 3.2",
                "3 <- 6.2",
                "4 <- 5.3"
            ]
        },
        "Step 7": {
            "steps": [
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 8 24)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 / 8 = 4 (left: 4)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 8 + 32 = 40 (left: 8 40)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 / 8 = 4 (left: 4 8)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 / 8 = 4 (left: 4)"
            ],
            "Pruning": [
                "1<-0.4",
                "4<-4.1"
            ],
            "Evaluation": [
                0.003,
                41.0,
                0.001,
                1.002,
                20.002
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 6.1",
                "2 <- 3.2",
                "3 <- 6.1",
                "4 <- 6.1"
            ]
        },
        "Step 8": {
            "steps": [
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 / 8 = 4 (left: 4 8)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 / 8 = 4 (left: 4)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 8 + 32 = 40 (left: 8 40)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 8 + 32 = 40 (left: 32)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 / 8 = 4 (left: 4)"
            ],
            "Pruning": [
                "1<-0.4",
                "3<-6.2",
                "4<-7.1"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.001,
                20.001,
                40.0
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 8.4",
                "2 <- 8.1",
                "3 <- 7.1",
                "4 <- 8.1"
            ]
        },
        "Step 9": {
            "steps": [
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || Possible next steps:",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8)",
                "9 - 1 = 8 (left: 4 8 8) || 8 / 4 = 2 (left: 2 8)",
                "9 - 1 = 8 (left: 4 8 8) || 8 / 4 = 2 (left: 2 8 8)",
                "9 - 1 = 8 (left: 4 8 8) || 8 / 4 = 2 (left: 2 8)"
            ],
            "Pruning": []
        },
        "Input": "1 4 8 9",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1033": {
        "puzzle": "2 5 11 12",
        "Step 0": {
            "steps": [
                "2 + 5 = 7 (left: 7 11 12)",
                "12 - 2 = 10 (left: 2 10 12)",
                "11 + 2 = 13 (left: 5 13 12)",
                "2 * 5 = 10 (left: 10 11 12)",
                "5 + 11 = 16 (left: 2 16 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                0.003,
                3.0,
                1.002,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 2 = 10 (left: 2 10 11)",
                "5 * 2 = 10 (left: 10 11 12)",
                "2 + 5 = 7 (left: 7 11 12)",
                "5 * 2 = 10 (left: 10 11 12)",
                "11 + 2 = 13 (left: 5 13 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                2.001,
                3.0,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "11 - 5 = 6 (left: 2 6 ",
                "11 - 2 = 9 (left: 5 9 ",
                "2 + 5 = 7 (left: 7 11 12)",
                "12 - 11 = 1 (left: 2 5 ",
                "5 + 11 = 16 (left: 2 16 "
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                0.001,
                3.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.2",
                "2 <- 2.3",
                "3 <- 2.3",
                "4 <- 2.3"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 11 = 1 (left: 2 5  || 5 / 2 = 2.5 (left: 2.5)",
                "2 + 5 = 7 (left: 7 11 12) || 11 - 7 = 4 (left: 4 12)",
                "12 - 11 = 1 (left: 2 5  || 5 / 2 = 2.5 (left: 2.5)",
                "12 - 11 = 1 (left: 2 5  || 2 + 5 = 7 (left: 7)",
                "12 - 11 = 1 (left: 2 5  || 9 - 3 = 6 (left: 6 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                0.001,
                0.001,
                20.002
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 2.3",
                "2 <- 2.3",
                "3 <- 2.3",
                "4 <- 2.3"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 11 = 1 (left: 2 5  || 9 - 3 = 6 (left: 6 5) || 6 / 5 = 1.2 (left: 1.2)",
                "12 - 11 = 1 (left: 2 5  || 5 / 2 = 2.5 (left: 2.5)",
                "12 - 11 = 1 (left: 2 5  || 5 / 2 = 2.5 (left: 2.5)",
                "12 - 11 = 1 (left: 2 5  || 5 - 2 = 3 (left: 3)",
                "12 - 11 = 1 (left: 2 5  || 2 + 5 = 7 (left: 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.0,
                0.001,
                0.001,
                0.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 2.3",
                "3 <- INIT",
                "4 <- 2.3"
            ]
        },
        "Step 5": {
            "steps": [
                "5 * 11 = 55 (left: 2 55 12)",
                "2 * 5 = 10 (left: 10 11 12)",
                "12 - 11 = 1 (left: 2 5  || 5 - 2 = 3 (left: 3)",
                "2 + 5 = 7 (left: 7 11 12)",
                "12 - 11 = 1 (left: 2 5  || 5 / 2 = 2.5 (left: 2.5)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                0.003,
                0.003,
                3.0,
                0.0
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 3.4",
                "2 <- 2.3",
                "3 <- 5.0",
                "4 <- 3.4"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 11 = 1 (left: 2 5  || 2 * 5 = 10 (left: 10)",
                "12 - 11 = 1 (left: 2 5  || 9 - 3 = 6 (left: 6 5) || 6 + 5 = 11 (left: 11)",
                "12 - 11 = 1 (left: 2 5  || 7 + 3 = 10 (left: 10)",
                "5 * 11 = 55 (left: 2 55 12) || 2 * 55 = 110 (left: 12 110)",
                "12 - 11 = 1 (left: 2 5  || 9 - 3 = 6 (left: 6 5) || 5 - 6 = -1 (left: -1)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                0.001,
                0.0
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 5.3",
                "2 <- 0.0",
                "3 <- 2.3",
                "4 <- 2.3"
            ]
        },
        "Step 7": {
            "steps": [
                "2 + 5 = 7 (left: 7 11 12) || 12 / 7 = 1.71 (left: 1.71 12)",
                "2 + 5 = 7 (left: 7 11 12) || 11 - 7 = 4 (left: 4 12)",
                "2 + 5 = 7 (left: 7 11 12) || 7 / 11 = ",
                "12 - 11 = 1 (left: 2 5  || 5 - 2 = 3 (left: 3)",
                "12 - 11 = 1 (left: 2 5  || 2 * 5 = 10 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.001,
                0.003,
                0.003,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 5.3",
                "2 <- 2.3",
                "3 <- INIT",
                "4 <- 2.3"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 11 = 1 (left: 2 5  || 9 - 3 = 6 (left: 6 5) || 6 - 5 = 1 (left: 1)",
                "2 + 5 = 7 (left: 7 11 12) || 7 + 11 = 18 (left: 12 18)",
                "12 - 11 = 1 (left: 2 5  || Possible next steps:",
                "2 + 5 = 7 (left: 7 11 12)",
                "12 - 11 = 1 (left: 2 5  || 5 - 2 = 3 (left: 3)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.002,
                0.002
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 5.3",
                "2 <- 8.3",
                "3 <- 3.4",
                "4 <- 2.3"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 11 = 1 (left: 2 5  || 5 / 2 = 2.5 (left: 2.5)",
                "2 + 5 = 7 (left: 7 11 12) || 11 - 7 = 4 (left: 4 12)",
                "2 + 5 = 7 (left: 7 11 12) || 12 - 7 = 5 (left: 7 5)",
                "12 - 11 = 1 (left: 2 5  || 9 - 3 = 6 (left: 6 5) || 10 + 3 = 13 (left: 13)",
                "12 - 11 = 1 (left: 2 5  || Possible next steps:"
            ],
            "Pruning": []
        },
        "Input": "2 5 11 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1034": {
        "puzzle": "2 3 7 13",
        "Step 0": {
            "steps": [
                "7 * 2 = 14 (left: 13 14)",
                "7 - 2 = 5 (left: 2 5 ",
                "13 - 7 = 6 (left: 2 6 13)",
                "2 + 3 = 5 (left: 5 7 13)",
                "3 * 2 = 6 (left: 6 7 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                1.002,
                3.0,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "7 * 13 = 91 (left: 2 3 ",
                "3 + 7 = 10 (left: 2 10 13)",
                "13 - 7 = 6 (left: 2 3 6)",
                "13 - 7 = 6 (left: 2 3 6)",
                "3 + 7 = 10 (left: 2 10 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.003,
                22.0,
                60.0,
                1.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- INIT",
                "4 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "13 - 7 = 6 (left: 2 3 6) || 6 - 2 = 4 (left: 2 4 6)",
                "13 - 7 = 6 (left: 2 3 6) || Possible",
                "13 - 7 = 6 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6)",
                "2 + 3 = 5 (left: 5 7 13)",
                "13 - 7 = 6 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                2.001,
                21.001
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.3",
                "2 <- 2.4",
                "3 <- 1.3",
                "4 <- 2.4"
            ]
        },
        "Step 3": {
            "steps": [
                "13 - 7 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6)",
                "13 - 7 = 6 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6)",
                "13 - 7 = 6 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "13 - 7 = 6 (left: 2 3 6) || 2 + 3 = 5 (left: 5 6)",
                "13 - 7 = 6 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                0.003,
                0.003,
                1.001,
                0.002
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.2",
                "2 <- 1.3",
                "3 <- 3.0",
                "4 <- 1.3"
            ]
        },
        "Step 4": {
            "steps": [
                "13 - 7 = 6 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6) || 6 + 6 = 12",
                "13 - 7 = 6 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6) || 6 + 6 = 12",
                "13 - 7 = 6 (left: 2 3 6) || 2 * 3 = 6 (left: 6 6)",
                "13 - 7 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 6 / 3 = 2 (left: 2)",
                "13 - 7 = 6 (left: 2 3 6) || 3 * 2 = 6 (left: 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                40.001,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 2.4",
                "2 <- 1.2",
                "3 <- 4.2",
                "4 <- 4.2"
            ]
        },
        "Step 5": {
            "steps": [
                "13 - 7 = 6 (left: 2 3 6) || 2 * 3 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "13 - 7 = 6 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "13 - 7 = 6 (left: 2 3 6) || 6 + 2 = 8 (left: 3 8)",
                "13 - 7 = 6 (left: 2 3 6) || 2 * 3 = 6 (left: 6 6) || 6 + 6 = 12 (left: 12) ",
                "13 - 7 = 6 (left: 2 3 6) || 2 * 3 = 6 (left: 6 6) || 6 + 6 = 12 (left: 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                60.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 5.2",
                "2 <- 2.2",
                "3 <- 5.2",
                "4 <- 5.2"
            ]
        },
        "Step 6": {
            "steps": [
                "13 - 7 = 6 (left: 2 3 6) || 2 + 3 = 5 (left: 5 6) || 6 + 5 = 11 (left: 11)",
                "13 - 7 = 6 (left: 2 3 6) || 6 + 2 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "13 - 7 = 6 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "13 - 7 = 6 (left: 2 3 6) || 6 + 2 = 8 (left: 3 8) || 8 / 3 = 2.6667 (left: 2.6667)",
                "13 - 7 = 6 (left: 2 3 6) || 6 + 2 = 8 (left: 3 8) || 3 + 8 = 11 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.002,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 5.2",
                "2 <- 1.3",
                "3 <- 5.2",
                "4 <- 5.2"
            ]
        },
        "Step 7": {
            "steps": [
                "13 - 7 = 6 (left: 2 3 6) || 6 + 2 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "13 - 7 = 6 (left: 2 3 6) || 6 + 2 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "13 - 7 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6)",
                "13 - 7 = 6 (left: 2 3 6) || 6 + 2 = 8 (left: 3 8) || 3 + 8 = 11",
                "13 - 7 = 6 (left: 2 3 6) || 6 + 2 = 8 (left: 3 8) || 3 + 8 = 11 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                41.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 7.2",
                "1 <- 5.2",
                "2 <- 7.2",
                "3 <- 5.2",
                "4 <- 5.2"
            ]
        },
        "Step 8": {
            "steps": [
                "13 - 7 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 6 - 3 = 3 (left: 3)",
                "13 - 7 = 6 (left: 2 3 6) || 6 + 2 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "13 - 7 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 6 - 3 = 3 (left: 3)",
                "13 - 7 = 6 (left: 2 3 6) || 6 + 2 = 8 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "13 - 7 = 6 (left: 2 3 6) || 6 + 2 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.003,
                0.002,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 7.2",
                "1 <- 7.2",
                "2 <- 7.2",
                "3 <- 7.2",
                "4 <- 7.2"
            ]
        },
        "Step 9": {
            "steps": [
                "13 - 7 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18)",
                "13 - 7 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18)",
                "13 - 7 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 3 + 6 = 9 (left: 9)",
                "13 - 7 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 6 / 3 = 2 (left: 2)",
                "13 - 7 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18)"
            ],
            "Pruning": []
        },
        "Input": "2 3 7 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1035": {
        "puzzle": "3 5 10 13",
        "Step 0": {
            "steps": [
                "13 - 5 = 8 (left: 3 8 13)",
                "13 + 3 = 16 (left: 5 10 16)",
                "13 - 3 = 10 (left: 5 10 13)",
                "5 * 3 = 15 (left: 15 10 13)",
                "5 * 3 = 15 (left: 15 10 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                1.002,
                0.003,
                2.001,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.0",
                "2 <- 0.0",
                "3 <- 0.0",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "5 * 3 = 15 (left: 10 15 13)",
                "13 - 5 = 8 (left: 3 8 13) || 3 * 8 = 24 (left: 24 13)",
                "13 - 5 = 8 (left: 3 8 13) || 8 / 3 = 2.67 (left: 2.67 13)",
                "13 - 5 = 8 (left: 3 8 13) || 13 - 3 = 10 (left: 8 10)",
                "10 + 3 = 13 (left: 5 13 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                20.0,
                1.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.4",
                "2 <- 1.3",
                "3 <- 1.3",
                "4 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "13 - 5 = 8 (left: 3 8 13) || 13 / 3 = ",
                "5 * 3 = 15 (left: 15 10 13) || 15 - 10 = 5 (left: 5 13)",
                "13 - 5 = 8 (left: 3 8 13) || 13 - 3 = 10 (left: 8 10) || 8 * 10 = 80 (left: 80)",
                "13 - 5 = 8 (left: 3 8 13) || 13 - 3 = 10 (left: 8 10) || 18 * 2 = 36",
                "13 - 5 = 8 (left: 3 8 13) || 13 - 3 = 10 (left: 8 10) || 10 / 8 = 1.25 (left: 1.25)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.0",
                "2 <- INIT",
                "3 <- 0.0",
                "4 <- 0.0"
            ]
        },
        "Step 3": {
            "steps": [
                "5 * 3 = 15 (left: 15 10 13) || 15 + 10 = 25 (left: 13 25)",
                "13 - 5 = 8 (left: 3 8 13) || 13 - 8 = 5 (left: 3 5)",
                "13 - 10 = 3 (left: 3 5 ",
                "13 - 5 = 8 (left: 3 8 13) || 8 / 3 = 2.67 (left: 2.67 8 13)",
                "13 - 5 = 8 (left: 3 8 13) || 13 + 3 = 16 (left: 8 16)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                1.001,
                1.002,
                60.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.0",
                "2 <- 1.3",
                "3 <- 3.4",
                "4 <- 3.4"
            ]
        },
        "Step 4": {
            "steps": [
                "10 + 3 = 13 (left: 5 13 13)",
                "13 - 5 = 8 (left: 3 8 13) || 8 - 3 = 5 (left: 5 13)",
                "13 - 5 = 8 (left: 3 8 13) || 13 - 3 = 10 (left: 8 10) || 10 - 8 = 2 (left: 2)",
                "13 - 5 = 8 (left: 3 8 13) || 13 + 3 = 16 (left: 8 16) || 8 * 2 = 16 (left: 16)",
                "13 - 5 = 8 (left: 3 8 13) || 13 + 3 = 16 (left: 8 16) || 8 * 16 = 128 (left: 128)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.002,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 4.0",
                "2 <- 3.4",
                "3 <- 4.0",
                "4 <- 0.0"
            ]
        },
        "Step 5": {
            "steps": [
                "13 - 5 = 8 (left: 3 8 13) || 3 + 8 = 11 (left: 11 13)",
                "10 + 3 = 13 (left: 5 13 13) || 5 + 13 = 18 (left: 13 18)",
                "13 - 5 = 8 (left: 3 8 13) || 13 + 3 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24)",
                "10 + 3 = 13 (left: 5 13 13) || 13 / 5 = 2.6 (left: 2.6 13)",
                "13 - 5 = 8 (left: 3 8 13) || 8 - 3 = 5 (left: 5 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                60.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 5.0",
                "2 <- 5.2",
                "3 <- 0.0",
                "4 <- 1.3"
            ]
        },
        "Step 6": {
            "steps": [
                "13 - 5 = 8 (left: 3 8 13) || 13 - 3 = 10 (left: 8 10)",
                "13 - 5 = 8 (left: 3 8 13) || 3 + 8 = 11 (left: 11 13) || 11 / 13 = 0.846153846 (left: 0.846153846)",
                "13 - 5 = 8 (left: 3 8 13) || 13 + 3 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24) || Answer: (13 - 5) + (13 + 3) = 24",
                "13 - 5 = 8 (left: 3 8 13) || 3 * 8 = 24 (left: 24 13)",
                "13 - 5 = 8 (left: 3 8 13) || 13 - 3 = 10 (left: 8 10) || 8 - 10 = -2 (left: -2)"
            ],
            "Pruning": [
                "2<-5.2"
            ],
            "Evaluation": [
                0.002,
                0.001,
                60.0,
                20.002,
                2.0
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 6.2",
                "2 <- 5.2",
                "3 <- 6.2",
                "4 <- 6.2"
            ]
        },
        "Step 7": {
            "steps": [
                "13 - 5 = 8 (left: 3 8 13) || 13 + 3 = 16 (left: 8 16) || 8 * 16 = 128 (left: 128)",
                "13 - 5 = 8 (left: 3 8 13) || 13 + 3 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24) || Answer: (13 - 5) + (13 + 3) = 24",
                "13 - 5 = 8 (left: 3 8 13) || 13 + 3 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24) || Answer: (13 - 5) + (13 + 3) = 24",
                "13 - 5 = 8 (left: 3 8 13) || 13 + 3 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24) || Answer: ((13 - 5) + 3) + 8 = 24",
                "13 - 5 = 8 (left: 3 8 13) || 13 + 3 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24) || Answer: ((13 - 5) * 3) + 10 = 24"
            ],
            "Pruning": [
                "1<-6.3",
                "2<-6.2",
                "3<-6.2",
                "4<-6.2"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 7.4",
                "2 <- 7.2",
                "3 <- 7.3",
                "4 <- 5.2"
            ]
        },
        "Step 8": {
            "steps": [
                "13 - 5 = 8 (left: 3 8 13) || 13 + 3 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24) || Answer: (13 - 5) + (13 + 3) = 24",
                "13 - 5 = 8 (left: 3 8 13) || 13 + 3 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24) || Answer: (13 - 5) + (13 + 3) = 24",
                "13 - 5 = 8 (left: 3 8 13) || 13 + 3 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24) || Answer: (13 - 5) + (13 + 3) = 24",
                "13 - 5 = 8 (left: 3 8 13) || 13 + 3 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24) || Answer: (13 - 5) + (13 + 3) = 24",
                "13 - 5 = 8 (left: 3 8 13) || 13 + 3 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24) || Answer: (13 - 5) + (13 + 3) = 24"
            ],
            "Pruning": [
                "0<-7.3",
                "1<-7.2",
                "2<-7.3",
                "3<-7.2",
                "4<-7.2"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                20.0
            ],
            "Resampling": [
                "0 <- 7.3",
                "1 <- 8.3",
                "2 <- 5.2",
                "3 <- 3.4",
                "4 <- 7.4"
            ]
        },
        "Step 9": {
            "steps": [
                "13 - 5 = 8 (left: 3 8 13) || 13 + 3 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24) || Answer: (13 - 5) * (3 + 10) = 24",
                "13 - 5 = 8 (left: 3 8 13) || 13 + 3 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24) || Answer: (13 - 5) + (13 + 3) = 24",
                "13 - 5 = 8 (left: 3 8 13) || 13 + 3 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24) || Answer: (13 - 5) + (13 + 3) = 24",
                "13 - 5 = 8 (left: 3 8 13) || 13 + 3 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24)",
                "13 - 5 = 8 (left: 3 8 13) || 13 + 3 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24) || Answer: ((13 - 5) + 3) + 16 = 24"
            ],
            "Pruning": [
                "0<-8.2",
                "1<-8.2",
                "2<-8.2",
                "4<-8.4"
            ]
        },
        "Input": "3 5 10 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1036": {
        "puzzle": "3 5 6 10",
        "Step 0": {
            "steps": [
                "6 - 3 = 3 (left: 3 5 10)",
                "3 + 5 = 8 (left: 6 8 10)",
                "3 + 5 = 8 (left: 6 8 10)",
                "6 + 10 = 16 (left: 3 5 16)",
                "5 + 6 = 11 (left: 3 10 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                3.0,
                2.001,
                21.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "6 + 10 = 16 (left: 3 5 16) || 5 + 3 = 8 (left: 8 16)",
                "10 - 3 = 7 (left: 5 6 7)",
                "6 + 3 = 9 (left: 5 9 10)",
                "5 * 6 = 30 (left: 3 10 ",
                "6 + 10 = 16 (left: 3 5 16) || 3 * 5 = 15 (left: 15 16)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                3.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- INIT",
                "2 <- 1.0",
                "3 <- 1.0",
                "4 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "6 + 10 = 16 (left: 3 5 16) || 5 + 3 = 8 (left: 8 16) || 8 * 16 = 128 (left: 128)",
                "5 + 6 = 11 (left: 3 10 11)",
                "6 + 10 = 16 (left: 3 5 16) || 5 + 3 = 8 (left: 8 16) || 8 + 16 = 24 (left: 24)",
                "6 + 10 = 16 (left: 3 5 16) || 5 + 3 = 8 (left: 8 16) || 16 - 8 = 8 (left: 8)",
                "6 + 10 = 16 (left: 3 5 16) || 5 + 3 = 8 (left: 8 16) || 24 - 8 = 16 (left: 16)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- INIT",
                "2 <- 1.0",
                "3 <- 1.0",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "6 + 10 = 16 (left: 3 5 16) || 5 + 3 = 8 (left: 8 16) || 8 + 16 = 24 (left: 24) || Answer: ((5 + 3) + 10) + 6 = 24",
                "3 + 5 = 8 (left: 6 8 10)",
                "6 + 10 = 16 (left: 3 5 16) || 5 + 3 = 8 (left: 8 16) || 16 - 8 = 8 (left: 8)",
                "6 + 10 = 16 (left: 3 5 16) || 5 + 3 = 8 (left: 8 16) || 8 * 16 = 128 (left: 128)",
                "6 / 3 = 2 (left: 2 5 10)"
            ]
        },
        "Input": "3 5 6 10",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1037": {
        "puzzle": "4 5 5 10",
        "Step 0": {
            "steps": [
                "4 + 5 = 9 (left: 5 5 10)",
                "10 - 5 = 5 (left: ",
                "4 * 5 = 20 (left: 5 5 20)",
                "4 + 5 = 9 (left: 5 5 10)",
                "5 - 4 = 1 (left: 1 5 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                0.0,
                2.001,
                60.0,
                22.0
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.3",
                "2 <- INIT",
                "3 <- 0.4",
                "4 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "4 + 5 = 9 (left: 5 5 10) || 5 / 5 = 1 (left: 1 10)",
                "4 + 5 = 9 (left: 5 5 10) || 5 + 5 = 10 (left: 10 10)",
                "5 + 5 = 10 (left: 4 10 10)",
                "5 - 4 = 1 (left: 1 5 10) || 10 - 5 = 5 (left: 1 5)",
                "4 + 5 = 9 (left: 5 5 10) || 3 + 3 = 6 (left: 6 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                20.002,
                20.002,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.3",
                "2 <- 1.1",
                "3 <- 1.2",
                "4 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "5 - 4 = 1 (left: 1 5 10) || 10 - 5 = 5 (left: 1 5) || 5 - 1 = 4 (left: 4)",
                "4 + 5 = 9 (left: 5 5 10) || 5 / 5 = 1 (left: 1 10)",
                "4 + 5 = 9 (left: 5 5 10) || 5 + 5 = 10 (left: 10 10) || 10 + 10 = 20 (left: 20)",
                "5 + 5 = 10 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "4 + 5 = 9 (left: 5 5 10) || 5 + 5 = 10 (left: 10 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                60.0,
                0.003,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 1.0",
                "2 <- 0.3",
                "3 <- 2.1",
                "4 <- 0.4"
            ]
        },
        "Step 3": {
            "steps": [
                "4 + 5 = 9 (left: 5 5 10) || 5 / 5 = 1 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "4 + 5 = 9 (left: 5 5 10) || 5 / 5 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "4 + 5 = 9 (left: 5 5 10) || 10 / 5 = 2 (left: 2 10)",
                "4 + 5 = 9 (left: 5 5 10) || 5 / 5 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "5 - 4 = 1 (left: 1 5 10) || 5 * 10 = 50 (left: 1 50)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                3.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 1.0",
                "3 <- 0.4",
                "4 <- 2.1"
            ]
        },
        "Step 4": {
            "steps": [
                "4 + 5 = 9 (left: 5 5 10) || 5 / 5 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "4 + 5 = 9 (left: 5 5 10) || 5 / 5 = 1 (left: 1 10) || 5 / 3 = 1.66667 (left: 1.66667 9",
                "4 + 5 = 9 (left: 5 5 10) || 5 / 5 = 1 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "5 - 4 = 1 (left: 1 5 10) || 1 + 5 = 6 (left: 6 10)",
                "4 + 5 = 9 (left: 5 5 10) || 5 / 5 = 1 (left: 1 10) || 1 + 10 = 11 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                2.0,
                0.001,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 3.2",
                "2 <- 4.1",
                "3 <- 1.1",
                "4 <- 1.2"
            ]
        },
        "Step 5": {
            "steps": [
                "4 + 5 = 9 (left: 5 5 10) || 10 - 5 = 5 (left: 5 10)",
                "4 + 5 = 9 (left: 5 5 10) || 10 / 5 = 2 (left: 2 10) || 2 * 10 = 20 (left: 20)",
                "4 + 5 = 9 (left: 5 5 10) || 5 / 5 = 1 (left: 1 10) || 5 / 3 = 1.66667 (left: 1.66667 9 || 1.66667 + 9 = 10.66667 (left: 10.66667)",
                "4 + 5 = 9 (left: 5 5 10) || 5 + 5 = 10 (left: 10 10) || 10 + 10 = 20",
                "5 + 5 = 10 (left: 4 10 10) || 10 / 4 ="
            ],
            "Pruning": [
                "2<-2.1"
            ],
            "Evaluation": [
                0.002,
                0.003,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 2.1",
                "2 <- 5.2",
                "3 <- 5.2",
                "4 <- 1.2"
            ]
        },
        "Step 6": {
            "steps": [
                "4 + 5 = 9 (left: 5 5 10) || 5 / 5 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "4 + 5 = 9 (left: 5 5 10) || 5 / 5 = 1 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "4 + 5 = 9 (left: 5 5 10) || 5 / 5 = 1 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "4 + 5 = 9 (left: 5 5 10) || 5 / 5 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "5 + 5 = 10 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.002,
                0.002,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 1.0",
                "2 <- INIT",
                "3 <- 2.1",
                "4 <- INIT"
            ]
        },
        "Step 7": {
            "steps": [
                "4 + 5 = 9 (left: 5 5 10) || 5 / 5 = 1 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "4 + 5 = 9 (left: 5 5 10) || 5 / 5 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "10 - 4 = 6 (left: 5 5 6)",
                "4 + 5 = 9 (left: 5 5 10) || 5 / 5 = 1 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "5 - 4 = 1 (left: 1 5 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.002,
                1.002,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 5.2",
                "2 <- 1.1",
                "3 <- 1.0",
                "4 <- 5.2"
            ]
        },
        "Step 8": {
            "steps": [
                "4 + 5 = 9 (left: 5 5 10) || 5 / 5 = 1 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "4 + 5 = 9 (left: 5 5 10) || 5 / 5 = 1 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "4 + 5 = 9 (left: 5 5 10) || 5 + 5 = 10 (left: 10 10) || 10 + 10 = 20 (left: 20)",
                "4 + 5 = 9 (left: 5 5 10) || 5 / 5 = 1 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "4 + 5 = 9 (left: 5 5 10) || 5 / 5 = 1 (left: 1 10) || 1 + 10 = 11 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 5.2",
                "2 <- 1.3",
                "3 <- 5.2",
                "4 <- 2.1"
            ]
        },
        "Step 9": {
            "steps": [
                "4 + 5 = 9 (left: 5 5 10) || 5 / 5 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "4 + 5 = 9 (left: 5 5 10) || 5 / 5 = 1 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "5 - 4 = 1 (left: 1 5 10) || 10 - 5 = 5 (left: 1 5) || 1 + 5 = 6",
                "4 + 5 = 9 (left: 5 5 10) || 5 / 5 = 1 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "4 + 5 = 9 (left: 5 5 10) || 5 / 5 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Pruning": []
        },
        "Input": "4 5 5 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1038": {
        "puzzle": "7 8 9 10",
        "Step 0": {
            "steps": [
                "7 + 8 = 15 (left: 9 10 15)",
                "8 / 7 = 1.14 (left: 1.14 9 10)",
                "7 * 8 = 56 (left: 9 10 56)",
                "7 + 8 = 15 (left: 9 10 15)",
                "7 * 8 = 56 (left: 9 10 56)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                3.0,
                2.001,
                1.001,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.4",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "9 - 7 = 2 (left: 2 ",
                "7 * 8 = 56 (left: 9 10 56) || 56 - 9 = 47 (left: 9 47)",
                "9 + 10 = 19 (left: 7 8 19)",
                "8 + 9 = 17 (left: 7 10 17)",
                "7 * 8 = 56 (left: 9 10 56) || 10 * 9 = 90 (left: 90 56)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.0,
                1.002,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "8 + 9 = 17 (left: 7 10 17) || 17 - 7 = 10 (left: 10)",
                "8 + 9 = 17 (left: 7 10 17)",
                "9 - 7 = 2 (left: 2 8 10)",
                "9 + 1 = 10 (left: 8 10 10)",
                "8 - 7 = 1 (left: 1 9 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 1.3",
                "4 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "8 + 9 = 17 (left: 7 10 17) || 7 + 10 = 17 (left: 17)",
                "7 + 8 = 15 (left: 9 10 15)",
                "10 - 9 = 1 (left: 1 8 10)",
                "8 + 9 = 17 (left: 7 10 17) || 10 + 7 = 17 (left: 17)",
                "8 + 9 = 17 (left: 7 10 17) || 10 + 7 = 17 (left: 17)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.002,
                1.001,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 1.3",
                "4 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "9 + 10 = 19 (left: 7 8 19) || 19 - 7 = 12 (left: 8 12)",
                "10 - 7 = 3 (left: 3 8 9 10)",
                "7 * 8 = 56 (left: 9 10 56)",
                "8 + 9 = 17 (left: 7 10 17) || 10 - 7 = 3 (left: 3 10)",
                "10 - 7 = 3 (left: 8 9 3)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                21.001,
                2.001,
                0.003,
                22.0
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 4.4",
                "2 <- 4.4",
                "3 <- 4.4",
                "4 <- INIT"
            ]
        },
        "Step 5": {
            "steps": [
                "10 - 7 = 3 (left: 8 9 3) || 3 + 8 = 11 (left: 9 11)",
                "10 - 7 = 3 (left: 8 9 3) || 8 + 9 = 17 (left: 3 17)",
                "10 - 7 = 3 (left: 8 9 3) || 8 + 9 = 17 (left: 3 17)",
                "10 - 7 = 3 (left: 8 9 3) || ",
                "10 - 9 = 1 (left: 7 8 1)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.0,
                0.003,
                0.003,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 4.1",
                "2 <- 4.1",
                "3 <- 4.4",
                "4 <- 4.1"
            ]
        },
        "Step 6": {
            "steps": [
                "7 + 8 = 15 (left: 9 10 15)",
                "10 - 7 = 3 (left: 3 8 9 10) || 8 - 3 = 5 (left: 5 8 10)",
                "10 - 7 = 3 (left: 3 8 9 10) || 8 - 3 = 5 (left: 5 9 10)",
                "10 - 7 = 3 (left: 8 9 3) || 9 / 8 = 1.125 (left: 1.125 3)",
                "10 - 7 = 3 (left: 3 8 9 10) || 8 - 3 = 5 (left: 5 9 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                22.0,
                41.0,
                0.001,
                41.0
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 6.4",
                "2 <- 6.4",
                "3 <- 6.4",
                "4 <- 4.1"
            ]
        },
        "Step 7": {
            "steps": [
                "10 - 7 = 3 (left: 3 8 9 10) || 8 - 3 = 5 (left: 5 9 10) || 9 - 5 = 4 (left: 4 10)",
                "10 - 7 = 3 (left: 3 8 9 10) || 8 - 3 = 5 (left: 5 9 10) || 10 / 5 = 2 (left: 2 10)",
                "10 - 7 = 3 (left: 3 8 9 10) || 8 - 3 = 5 (left: 5 9 10) || 9 * 5 = 45 (left: 10 45)",
                "10 - 7 = 3 (left: 3 8 9 10) || 8 - 3 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14)",
                "10 - 7 = 3 (left: 3 8 9 10) || 8 + 9 = 17 (left: 3 10 17)"
            ],
            "Pruning": [],
            "Evaluation": [
                41.0,
                1.0,
                1.002,
                60.0,
                2.001
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 7.3",
                "2 <- 7.3",
                "3 <- 6.2",
                "4 <- 6.4"
            ]
        },
        "Step 8": {
            "steps": [
                "10 - 7 = 3 (left: 3 8 9 10) || 8 - 3 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14)",
                "10 - 7 = 3 (left: 3 8 9 10) || 8 - 3 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || 10 + 14 = 24 (left: 24)",
                "10 - 7 = 3 (left: 3 8 9 10) || 8 - 3 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || 10 + 14 = 24 (left: 24)",
                "10 - 7 = 3 (left: 3 8 9 10) || 8 - 3 = 5 (left: 5 9 10) || 10 / 5 = 2 (left: 2 10)",
                "10 - 7 = 3 (left: 3 8 9 10) || 8 - 3 = 5 (left: 5 9 10) || 5 * 9 = 45 (left: 10 45)"
            ],
            "Pruning": [
                "1<-6.2",
                "2<-7.3"
            ],
            "Evaluation": [
                40.0,
                41.0,
                60.0,
                2.0,
                0.001
            ],
            "Resampling": [
                "0 <- 8.2",
                "1 <- 6.2",
                "2 <- 8.2",
                "3 <- 8.2",
                "4 <- 8.2"
            ]
        },
        "Step 9": {
            "steps": [
                "10 - 7 = 3 (left: 3 8 9 10) || 8 - 3 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || Possible next steps:",
                "10 - 7 = 3 (left: 3 8 9 10) || 8 - 3 = 5 (left: 5 9 10) || 9 / 5 = 1.8 (",
                "10 - 7 = 3 (left: 3 8 9 10) || 8 - 3 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || 14 - 10 = 4 (left: 4)",
                "10 - 7 = 3 (left: 3 8 9 10) || 8 - 3 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || 10 * 14 = 140 (left: 140)",
                "10 - 7 = 3 (left: 3 8 9 10) || 8 - 3 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || 10 + 14 = 24 (left: 24)"
            ],
            "Pruning": [
                "2<-8.1",
                "3<-6.2",
                "4<-1.3"
            ]
        },
        "Input": "7 8 9 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1039": {
        "puzzle": "2 5 8 10",
        "Step 0": {
            "steps": [
                "8 + 2 = 10 (left: 5 10 10)",
                "10 / 2 = 5 (left: 5 8 10)",
                "2 + 5 = 7 (left: 7 8 10)",
                "2 + 5 = 7 (left: 7 8 10)",
                "8 + 2 = 10 (left: 5 10 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                60.0,
                60.0,
                2.001,
                22.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.2",
                "2 <- 0.2",
                "3 <- 0.4",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "10 / 2 = 5 (left: 5 8 10) || 5 * 8 = 40 (left: 10 40)",
                "2 + 5 = 7 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8)",
                "2 + 5 = 7 (left: 7 8 10) || 8 - 7 = 1 (left: 1 8 10)",
                "8 + 2 = 10 (left: 5 10 10) || 10 - 5 = 5 (left: 5 10)",
                "2 + 5 = 7 (left: 7 8 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                60.0,
                1.001,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "2 + 5 = 7 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "2 + 5 = 7 (left: 7 8 10)",
                "10 - 8 = 2 (left: 2 5 10)",
                "5 + 8 = 13 (left: 2 13 ",
                "2 + 5 = 7 (left: 7 8 10) || 8 + 7 = 15 (left: 10 15)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                41.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 2.1",
                "2 <- 2.1",
                "3 <- INIT",
                "4 <- 0.2"
            ]
        },
        "Step 3": {
            "steps": [
                "2 + 5 = 7 (left: 7 8 10) || 7 * 8 = 56 (left: 10 56)",
                "2 + 5 = 7 (left: 7 8 10) || 8 - 7 = 1 (left: 1 8 10)",
                "2 + 5 = 7 (left: 7 8 10) || 10 / 7",
                "5 * 2 = 10 (left: 10 8 10)",
                "2 + 5 = 7 (left: 7 8 10) || 10 / 7 = 1.43 (left: 1.43 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                3.0,
                0.003,
                3.0,
                0.002
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 2.1",
                "2 <- 2.1",
                "3 <- 1.1",
                "4 <- 1.1"
            ]
        },
        "Step 4": {
            "steps": [
                "2 + 5 = 7 (left: 7 8 10) || 8 - 7 = 1 (left: 1 8 10) || 10 - 1 = 9 (left: 8 9)",
                "2 + 5 = 7 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8)",
                "2 + 5 = 7 (left: 7 8 10) || 8 - 7 = 1 (left: 1 10)",
                "2 + 5 = 7 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 8 / 3 = 2.66667 (left: 2.66667)",
                "2 + 5 = 7 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 4.2",
                "2 <- 0.2",
                "3 <- 4.1",
                "4 <- 4.2"
            ]
        },
        "Step 5": {
            "steps": [
                "2 + 5 = 7 (left: 7 8 10) || 8 - 7 = 1 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "2 + 5 = 7 (left: 7 8 10) || 8 - 7 = 1 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "2 + 5 = 7 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8)",
                "2 + 5 = 7 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "2 + 5 = 7 (left: 7 8 10) || 8 - 7 = 1 (left: 1 10) || 10 + 1 = 11 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 5.2",
                "2 <- 0.2",
                "3 <- 4.2",
                "4 <- 4.2"
            ]
        },
        "Step 6": {
            "steps": [
                "2 + 5 = 7 (left: 7 8 10) || 8 - 7 = 1 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "2 + 5 = 7 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 8 24)",
                "2 + 5 = 7 (left: 7 8 10) || 8 - 7 = 1 (left: 1 10)",
                "2 + 5 = 7 (left: 7 8 10) || 8 - 7 = 1 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "2 + 5 = 7 (left: 7 8 10) || 8 - 7 = 1 (left: 1 10) || 1 + 10 = 11 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.001,
                60.0,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 4.2",
                "2 <- 6.2",
                "3 <- 4.2",
                "4 <- INIT"
            ]
        },
        "Step 7": {
            "steps": [
                "2 + 5 = 7 (left: 7 8 10) || 8 - 7 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "2 + 5 = 7 (left: 7 8 10) || 8 - 7 = 1 (left: 1 10) || Input: 3 6 9",
                "2 + 5 = 7 (left: 7 8 10) || 8 - 7 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "2 + 5 = 7 (left: 7 8 10) || 8 - 7 = 1 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "10 - 2 = 8 (left: 2 5 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.003,
                0.001,
                20.001,
                0.003
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 4.2",
                "2 <- 6.2",
                "3 <- 6.2",
                "4 <- 7.3"
            ]
        },
        "Step 8": {
            "steps": [
                "2 + 5 = 7 (left: 7 8 10) || 8 - 7 = 1 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "2 + 5 = 7 (left: 7 8 10) || 8 - 7 = 1 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "2 + 5 = 7 (left: 7 8 10) || 8 - 7 = 1 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "2 + 5 = 7 (left: 7 8 10) || 8 - 7 = 1 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "2 + 5 = 7 (left: 7 8 10) || 8 - 7 = 1 (left: 1 10) || 10 / 1 = 10 (left: 10) || 10 / 2 = 5 (left: 5)"
            ],
            "Pruning": [
                "4<-0.2"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.001,
                0.003,
                41.0
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 5.2",
                "2 <- 6.2",
                "3 <- 8.4",
                "4 <- 8.4"
            ]
        },
        "Step 9": {
            "steps": [
                "2 + 5 = 7 (left: 7 8 10) || 8 - 7 = 1 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "2 + 5 = 7 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "2 + 5 = 7 (left: 7 8 10) || 8 - 7 = 1 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "2 + 5 = 7 (left: 7 8 10) || 7 / 8 = 0.875 (left: 0.875 10)",
                "2 + 5 = 7 (left: 7 8 10) || 8 / 7 = 1.14 (left: 1.14 8 10)"
            ],
            "Pruning": []
        },
        "Input": "2 5 8 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1040": {
        "puzzle": "4 6 6 12",
        "Step 0": {
            "steps": [
                "4 + 6 = 10 (left: 6 10 12)",
                "12 - 4 = 8 (left: 6 8 12)",
                "6 - 4 = 2 (left: 2 6 12)",
                "6 - 4 = 2 (left: 2 6 12)",
                "12 / 6 = 2 (left: "
            ],
            "Pruning": [],
            "Evaluation": [
                41.0,
                1.001,
                0.003,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.0",
                "2 <- 0.0",
                "3 <- 0.0",
                "4 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "4 + 6 = 10 (left: 6 10 12) || 12 - 6 = 6 (left: 6 10)",
                "4 + 6 = 10 (left: 6 10 12) || 10 + 12 = 22 (left: 6 22)",
                "4 + 6 = 10 (left: 6 10 12) || 12 - 6 = 6 (left: 6 6)",
                "4 + 6 = 10 (left: 6 10 12) || 6 + 10 = 16 (left: 16 12)",
                "4 + 6 = 10 (left: 6 10 12) || 12 / 6 = 2 (left: 6 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                20.002,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.0",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "4 + 6 = 10 (left: 6 10 12) || 6 / 10 = 0.6 (",
                "4 + 6 = 10 (left: 6 10 12) || 6 + 10 = 16 (left: 16 12)",
                "4 + 6 = 10 (left: 6 10 12)",
                "6 / 4 = 1.5 (left: 1.5 6 12)",
                "4 + 6 = 10 (left: 6 10 12) || 12 - 6 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1) "
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                2.001,
                3.0,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.2",
                "2 <- 0.0",
                "3 <- 1.2",
                "4 <- 0.0"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 6 = 6",
                "4 + 6 = 10 (left: 6 10 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "4 + 6 = 10 (left: 6 10 12) || 10 * 12 = 120 (left: 6 120)",
                "4 + 6 = 10 (left: 6 10 12) || 12 - 6 = 6 (left: 6 6) || 6 + 6 = 12 (left: 12)",
                "4 + 6 = 10 (left: 6 10 12) || 6 * 12 = 72 (left:"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 1.2",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 1.2"
            ]
        },
        "Step 4": {
            "steps": [
                "4 + 6 = 10 (left: 6 10 12) || 10 + 12 = 22 (left: 6 22)",
                "4 + 6 = 10 (left: 6 10 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)",
                "6 - 4 = 2 (left: 2 6 12)",
                "6 - 4 = 2 (left: 2 6 12)",
                "4 + 6 = 10 (left: 6 10 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                20.0,
                1.002,
                20.002,
                60.0
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 4.4",
                "2 <- 4.4",
                "3 <- 4.4",
                "4 <- 4.4"
            ]
        },
        "Step 5": {
            "steps": [
                "4 + 6 = 10 (left: 6 10 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "4 + 6 = 10 (left: 6 10 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 - 2 = 34 (left: 34)",
                "4 + 6 = 10 (left: 6 10 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "4 + 6 = 10 (left: 6 10 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "4 + 6 = 10 (left: 6 10 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 * 2 = 72"
            ],
            "Pruning": [
                "1<-4.4"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 4.3",
                "2 <- 5.1",
                "3 <- 5.1",
                "4 <- 5.1"
            ]
        },
        "Step 6": {
            "steps": [
                "4 + 6 = 10 (left: 6 10 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || There are no possible next steps with only one number provided.",
                "6 - 4 = 2 (left: 2 6 12) || 2 * 6 = 12 (left: 12 12)",
                "4 + 6 = 10 (left: 6 10 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || No more possible next steps as there is only one number left.",
                "4 + 6 = 10 (left: 6 10 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 3 = 12",
                "4 + 6 = 10 (left: 6 10 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || No possible next steps with the input of 36."
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                20.002,
                0.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 6.1",
                "2 <- 5.1",
                "3 <- 4.1",
                "4 <- 4.1"
            ]
        },
        "Step 7": {
            "steps": [
                "6 - 4 = 2 (left: 2 6 12) || 2 * 6 = 12 (left: 12 12) || 12 + 12 = 24",
                "6 - 4 = 2 (left: 2 6 12) || 2 * 6 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "4 + 6 = 10 (left: 6 10 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 * 2 = 72 (left: 72)",
                "4 + 6 = 10 (left: 6 10 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 + 2 = 38",
                "4 + 6 = 10 (left: 6 10 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 18 = 2 (left: 2)"
            ],
            "Pruning": [
                "2<-6.1",
                "4<-5.1"
            ],
            "Evaluation": [
                20.002,
                40.0,
                60.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 7.4",
                "1 <- 7.2",
                "2 <- 5.1",
                "3 <- 4.4",
                "4 <- 7.4"
            ]
        },
        "Step 8": {
            "steps": [
                "4 + 6 = 10 (left: 6 10 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || There are no possible next steps with the input 36.",
                "6 - 4 = 2 (left: 2 6 12) || 2 * 6 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "4 + 6 = 10 (left: 6 10 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || There are no possible next steps as there is only one number provided.",
                "4 + 6 = 10 (left: 6 10 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 3 = 12 (left: 12)",
                "4 + 6 = 10 (left: 6 10 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18"
            ],
            "Pruning": [
                "3<-7.1"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 7.1",
                "1 <- 7.1",
                "2 <- 4.4",
                "3 <- 7.2",
                "4 <- 7.2"
            ]
        },
        "Step 9": {
            "steps": [
                "6 - 4 = 2 (left: 2 6 12) || 2 * 6 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (6 - 4) * (6 + 12) = 24",
                "6 - 4 = 2 (left: 2 6 12) || 2 * 6 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (6 - 4) * (6 * 2) = 24",
                "4 + 6 = 10 (left: 6 10 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 18 = 2 (left: 2)",
                "6 - 4 = 2 (left: 2 6 12) || 2 * 6 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "6 - 4 = 2 (left: 2 6 12) || 2 * 6 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)"
            ],
            "Pruning": [
                "0<-7.1",
                "1<-7.1",
                "2<-7.4"
            ]
        },
        "Input": "4 6 6 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1041": {
        "puzzle": "5 8 10 12",
        "Step 0": {
            "steps": [
                "5 + 8 = 13 (left: 10 12 13)",
                "10 - 8 = 2 (left: 2 8 12)",
                "8 - 5 = 3 (left: 3 10 12)",
                "5 * 8 = 40 (left: 10 12 40)",
                "8 - 5 = 3 (left: 3 10 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                1.002,
                1.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.2",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "10 - 8 = 2 (left: 2 10 12)",
                "5 + 8 = 13 (left: 10 12 13)",
                "8 - 5 = 3 (left: 3 10 12)",
                "8 - 5 = 3 (left: 3 10 12) || 3 * 10 = 30 (left: 30 12)",
                "12 - 10 = 2 (left: 2 8 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                2.001,
                1.001,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 8 = 4 (left: ",
                "5 * 8 = 40 (left: 10 12 40)",
                "5 + 8 = 13 (left: 10 12 13)",
                "8 / 5 = 1.6 (left: 1.",
                "5 + 8 = 13 (left: 10 12 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                1.002,
                21.001,
                0.0,
                22.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 2.2",
                "3 <- INIT",
                "4 <- 2.2"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 10 = 2 (left: 2 8 2)",
                "5 * 8 = 40 (left: 10 12 40)",
                "5 + 8 = 13 (left: 10 12 13) || 10 + 12 = 22 (left: 13 22)",
                "10 - 5 = 5 (left: 5 8 ",
                "5 + 8 = 13 (left: 10 12 13) || 10 * 12 = 120 (left: 120 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                1.001,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.4",
                "2 <- 2.4",
                "3 <- INIT",
                "4 <- 2.4"
            ]
        },
        "Step 4": {
            "steps": [
                "5 + 8 = 13 (left: 10 12 13) || 12 - 10 = 2 (left: 2 13)",
                "5 + 8 = 13 (left: 10 12 13) || 12 - 10 = 2 (left: 2 13)",
                "5 + 8 = 13 (left: 10 12 13) || 12 * 13 = 156 (left: 10 156)",
                "12 - 10 = 2 (left: 2 10 12)",
                "5 + 8 = 13 (left: 10 12 13) || 12 / 10 = 1.2 (left: 1.2 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                2.001,
                1.002
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 3.0",
                "2 <- INIT",
                "3 <- 4.3",
                "4 <- 2.4"
            ]
        },
        "Step 5": {
            "steps": [
                "5 + 8 = 13 (left: 10 12 13) || 12 * 13 = 156 (left: 10 156)",
                "12 - 10 = 2 (left: 2 8 2) || 8 / 2 = 4 (left: 4 2)",
                "8 / 5 = 1.6 (left: 1.6 10 12)",
                "12 - 10 = 2 (left: 2 10 12) || 10 / 2 = 5 (left: 2 5 12)",
                "5 + 8 = 13 (left: 10 12 13) || 10 * 12 = 120 (left: 13 120)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                2.0,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 2.2",
                "2 <- 2.4",
                "3 <- 2.2",
                "4 <- 2.2"
            ]
        },
        "Step 6": {
            "steps": [
                "5 + 8 = 13 (left: 10 12 13) || 13 - 10 = 3 (left: 3 13)",
                "5 + 8 = 13 (left: 10 12 13) || 13 - 10 = 3 (left: 3 13)",
                "5 + 8 = 13 (left: 10 12 13) || 10 + 12 = 22 (left: 22 13)",
                "5 + 8 = 13 (left: 10 12 13) || 13 / 10 = ",
                "5 + 8 = 13 (left: 10 12 13) || 13 - 10 = 3 (left: 12 3)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 4.3",
                "2 <- 6.4",
                "3 <- 6.4",
                "4 <- 6.4"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 10 = 2 (left: 2 10 12) || 10 / 2 = 5 (left: 2 5 12) || 2 * 5 = 10 (left: 10 12)",
                "12 - 10 = 2 (left: 2 10 12) || 2 * 10 = 20 (left: 20 12)",
                "5 + 8 = 13 (left: 10 12 13) || 13 - 10 = 3 (left: 12 3) || 12 / 3 = 4 (left: 4)",
                "5 + 8 = 13 (left: 10 12 13) || 13 - 10 = 3 (left: 12 3) || 12 + 3 = 15 (left: 15)",
                "5 + 8 = 13 (left: 10 12 13) || 13 - 10 = 3 (left: 12 3) || 12 * 3 = 36 (left: 3 36)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.003,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 6.4",
                "2 <- 6.4",
                "3 <- 5.3",
                "4 <- 6.4"
            ]
        },
        "Step 8": {
            "steps": [
                "5 + 8 = 13 (left: 10 12 13) || 13 - 10 = 3 (left: 12 3) || 12 * 3 = 36 (left: 3 36)",
                "5 + 8 = 13 (left: 10 12 13) || 13 - 10 = 3 (left: 12 3) || 12 / 3 = 4 (left: 4 3)",
                "5 + 8 = 13 (left: 10 12 13) || 13 - 10 = 3 (left: 12 3) || 12 - 3 = 9 (left: 9)",
                "12 - 10 = 2 (left: 2 10 12) || 10 / 2 = 5 (left: 2 5 12) || 5 + 2 = 7 (left: 7 12)",
                "5 + 8 = 13 (left: 10 12 13) || 13 - 10 = 3 (left: 12 3) || 12 + 3 = 15 (left: 3 15)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                2.0,
                0.002,
                1.001,
                0.003
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 0.0",
                "2 <- 6.4",
                "3 <- 2.2",
                "4 <- 6.4"
            ]
        },
        "Step 9": {
            "steps": [
                "5 + 8 = 13 (left: 10 12 13) || 13 - 10 = 3 (left: 3 10)",
                "5 + 8 = 13 (left: 10 12 13) || 12 / 10 = 1.2 (left: 1.2 13)",
                "5 + 8 = 13 (left: 10 12 13) || 13 - 10 = 3 (left: 12 3) || 12 * 3 = 36 (left: 36)",
                "5 + 8 = 13 (left: 10 12 13) || 10 + 12 = 22 (left: 22 13)",
                "5 + 8 = 13 (left: 10 12 13) || 13 - 10 = 3 (left: 12 3) || 12 / 3 = 4 (left: 4 3)"
            ],
            "Pruning": []
        },
        "Input": "5 8 10 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1042": {
        "puzzle": "3 3 3 11",
        "Step 0": {
            "steps": [
                "3 + 3 = 6 (left: 3 6 11)",
                "3 * 3 = 9 (left: 9 3 11)",
                "3 + 3 = 6 (left: 6 3 11)",
                "3 + 3 = 6 (left: 6 3 11)",
                "3 + 3 = 6 (left: 3 6 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                2.001,
                2.001,
                2.001,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.0",
                "3 <- INIT",
                "4 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "3 * 3 = 9 (left: 9 3 11)",
                "11 - 3 = 8 (left: 3 3 8)",
                "3 + 3 = 6 (left: 3 6 11) || Input: 4 9 15",
                "3 + 3 = 6 (left: 3 6 11)",
                "3 + 3 = 6 (left: 6 3 11) || 6 / 3 = 2 (left: 2 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                3.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 1.0",
                "4 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "3 * 3 = 9 (left: 9 3 ",
                "3 * 3 = 9 (left: 9 3 11)",
                "11 - 3 = 8 (left: 3 3 8)",
                "3 * 3 = 9 (left: 9 3 11) || 11 - 3 = 8 (left: 9 8)",
                "11 - 3 = 8 (left: 3 3 8) || 3 + 3 = 6 (left: 6 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.0,
                2.001,
                2.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 0.4",
                "2 <- INIT",
                "3 <- 2.0",
                "4 <- 0.2"
            ]
        },
        "Step 3": {
            "steps": [
                "3 * 3 = 9 (left: 9 3  || 9 * 3 = 27 (left: 27)",
                "3 + 3 = 6 (left: 3 6 11) || 11 - 3 = 8 (left: 6 8)",
                "3 * 3 = 9 (left: 9 3 ",
                "3 * 3 = 9 (left: 9 3  || 9 - 3 = 6 (left: 6)",
                "3 + 3 = 6 (left: 6 3 11) || 6 / 3 = 2 (left: 2 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 3.2",
                "2 <- 2.0",
                "3 <- 2.0",
                "4 <- 3.2"
            ]
        },
        "Step 4": {
            "steps": [
                "3 * 3 = 9 (left: 9 3  || 9 * 3 = 27 (left: 27)",
                "3 * 3 = 9 (left: 9 3  || 9 * 3 = 27 (left: 27)",
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3)",
                "3 * 3 = 9 (left: 9 3  || 9 + 3 = 12 (left: 12)",
                "3 * 3 = 9 (left: 9 3  || 9 + 3 = 12 (left: 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.001,
                40.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 4.2",
                "2 <- 4.2",
                "3 <- 3.2",
                "4 <- 4.2"
            ]
        },
        "Step 5": {
            "steps": [
                "11 - 3 = 8 (left: 3 3 8) || 8 / 3 = 2 (left: 2 3)",
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 + 3 = 6 (left: 6)",
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 + 3 = 6 (left: 6)",
                "3 * 3 = 9 (left: 9 3  || 9 + 3 = 12 (left: 12)",
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 - 3 = 0 (left: 0)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 4.2",
                "2 <- 4.2",
                "3 <- 4.2",
                "4 <- 4.2"
            ]
        },
        "Step 6": {
            "steps": [
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 + 3 = 6 (left: 6)",
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 + 3 = 6 (left: 6)",
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 - 3 = 0 (left: 0)",
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 / 3 = 1 (left: 1)",
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 + 3 = 6 (left: 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 4.2",
                "2 <- INIT",
                "3 <- 2.0",
                "4 <- 4.2"
            ]
        },
        "Step 7": {
            "steps": [
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 - 3 = 0 (left: 0)",
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 + 3 = 6 (left: 6)",
                "3 * 3 = 9 (left: 3 9 ",
                "3 * 3 = 9 (left: 9 3  || 9 - 3 = 6 (left: 6)",
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 / 3 = 1 (left: 1)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.003,
                0.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 4.2",
                "2 <- 2.0",
                "3 <- 4.2",
                "4 <- 2.0"
            ]
        },
        "Step 8": {
            "steps": [
                "3 * 3 = 9 (left: 9 3  || 9 + 3 = 12 (left: 12)",
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 + 3 = 6 (left: 6)",
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3)",
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 * 3 = 9 (left: 9)",
                "3 * 3 = 9 (left: 9 3  || 9 * 3 = 27 (left: 27)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                0.0,
                20.001
            ],
            "Resampling": [
                "0 <- 8.4",
                "1 <- 8.4",
                "2 <- 8.4",
                "3 <- 8.4",
                "4 <- 8.4"
            ]
        },
        "Step 9": {
            "steps": [
                "3 * 3 = 9 (left: 9 3  || 9 * 3 = 27 (left: 27) || 27 + 2 = 29 (left: 29)",
                "3 * 3 = 9 (left: 9 3  || 9 * 3 = 27 (left: 27) || 27 + 2 = 29 (left: 2)",
                "3 * 3 = 9 (left: 9 3  || 9 * 3 = 27 (left: 27) || There are no possible next steps with only one number.",
                "3 * 3 = 9 (left: 9 3  || 9 * 3 = 27 (left: 27) || There is only one possible next step: 27 + 2 = 29",
                "3 * 3 = 9 (left: 9 3  || 9 * 3 = 27 (left: 27) || 27 * 3 = 81 (left: 81)"
            ],
            "Pruning": []
        },
        "Input": "3 3 3 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1043": {
        "puzzle": "5 5 8 12",
        "Step 0": {
            "steps": [
                "5 * 5 = 25 (left: 8 12 25)",
                "5 + 5 = 10 (left: 8 10 12)",
                "5 + 12 = 17 (left: 8 17 12)",
                "5 * 8 = 40 (left: 40 12)",
                "5 + 5 = 10 (left: 8 10 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                3.0,
                2.001,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.4",
                "2 <- INIT",
                "3 <- 0.2",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "5 + 8 = 13 (left: 5 13 12)",
                "5 + 5 = 10 (left: 8 10 12) || 10 + 12 = 22 (left: 8 22)",
                "5 + 5 = 10 (left: 8 10 12)",
                "5 + 12 = 17 (left: 8 17 12) || 12 / 8 = ",
                "5 - 5 = 0 (left: 0 5 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                1.002,
                2.001,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.4",
                "2 <- INIT",
                "3 <- 1.2",
                "4 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "5 * 12 = 60 (left: 8 60 ",
                "5 + 5 = 10 (left: 8 10 12) || 12 - 8 = 4 (left: 8 4)",
                "8 - 5 = 3 (left: 3 5 12)",
                "5 + 5 = 10 (left: 8 10 12) || 8 / 10 = 0.8 (left: 0.8 12)",
                "5 + 5 = 10 (left: 8 10 12) || 10 + 12 = 22 (left: 8 22) || 8 + 22 = 30 (left: 30)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.0,
                0.003,
                2.001,
                1.001,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.2",
                "2 <- 1.1",
                "3 <- 0.2",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "",
                "8 - 5 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "5 + 5 = 10 (left: 8 10 12) || 10 + 12 = 22 (left: 8 22) || 22 / 8 = 2.75 (left: 2.75)",
                "5 + 12 = 17 (left: 8 17 12) || 17 - 8 = 9 (left: 9 12)",
                "8 * 5 = 40 (left: 40 8 "
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 2.2"
            ]
        },
        "Step 4": {
            "steps": [
                "5 * 8 = 40 (left: 12 13 ",
                "5 * 8 = 40 (left: 40 5 12)",
                "8 + 12 = 20 (left: 5 20 12)",
                "8 - 5 = 3 (left: 3 5 12)",
                "8 - 5 = 3 (left: 3 5 12) || 12 - 5 = 7 ("
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                2.0,
                3.0,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 4.1",
                "2 <- 2.3",
                "3 <- 4.1",
                "4 <- 4.1"
            ]
        },
        "Step 5": {
            "steps": [
                "5 - 5 = 0 (left: 0 5 8) || 8 - 5 = 3 (left: 0 3)",
                "5 * 8 = 40 (left: 40 5 12) || 12 - 5 = 7 (left:",
                "5 + 5 = 10 (left: 8 10 12) || 8 / 10 = 0.8 (left: 0.8 12) || 12 - 0.8 = 11.2 (left: 11.2 12)",
                "5 * 8 = 40 (left: 40 5 12) || 40 / 5 = 8 (left: 8 12)",
                "5 * 8 = 40 (left: 40 5 12) || 40 - 5 = 35 (left: 35)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.001,
                0.003,
                1.001,
                0.003
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 5.3",
                "2 <- 5.0",
                "3 <- 5.0",
                "4 <- 5.0"
            ]
        },
        "Step 6": {
            "steps": [
                "5 - 5 = 0 (left: 0 5 8) || 8 - 5 = 3 (left: 0 3) || 3 + 0 = 3 (left: 3)",
                "5 * 8 = 40 (left: 40 5 12) || 40 / 5 = 8 (left: 8 12) || 8 + 12 = 20 (left: 20)",
                "5 - 5 = 0 (left: 0 5 8) || 8 - 5 = 3 (left: 0 3) || 0 * 3 = 0 (left: 0)",
                "5 - 5 = 0 (left: 0 5 8) || 8 - 5 = 3 (left: 0 3) || 3 - 0 = 3 (left: 3)",
                "5 - 5 = 0 (left: 0 5 8) || 8 - 5 = 3 (left: 0 3) || 0 / 3 = 0 (left: 0)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 5.0",
                "2 <- 5.0",
                "3 <- 5.0",
                "4 <- 5.0"
            ]
        },
        "Step 7": {
            "steps": [
                "5 * 5 = 25 (left: 25 8 12)",
                "5 - 5 = 0 (left: 0 5 8) || 8 - 5 = 3 (left: 0 3) || Possible next steps:",
                "5 - 5 = 0 (left: 0 5 8) || 8 - 5 = 3 (left: 0 3) || 3 + 0 = 3 (left: 3)",
                "5 - 5 = 0 (left: 0 5 8) || 8 - 5 = 3 (left: 0 3) || 3 * 0 = 0 (left: 0)",
                "5 - 5 = 0 (left: 0 5 8) || 8 - 5 = 3 (left: 0 3) || 3 / 0 = undefined (left: 3)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                0.003,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 5.0",
                "2 <- 5.0",
                "3 <- 5.0",
                "4 <- 5.0"
            ]
        },
        "Step 8": {
            "steps": [
                "5 - 5 = 0 (left: 0 5 8) || 8 - 5 = 3 (left: 0 3) || 0 + 3 = 3 (left: 3)",
                "5 - 5 = 0 (left: 0 5 8) || 8 - 5 = 3 (left: 0 3) || 0 + 3 = 3 (left: 3)",
                "5 - 5 = 0 (left: 0 5 8) || 8 - 5 = 3 (left: 0 3) || 0 + 3 = 3 (left: 3)",
                "5 - 5 = 0 (left: 0 5 8) || 8 - 5 = 3 (left: 0 3) || 5 + 5 = 10 (left: 10)",
                "5 - 5 = 0 (left: 0 5 8) || 8 - 5 = 3 (left: 0 3) || 3 * 0 = 0 (left: 0)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.002,
                1.0,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 7.0",
                "2 <- 5.0",
                "3 <- 7.0",
                "4 <- 5.0"
            ]
        },
        "Step 9": {
            "steps": [
                "5 - 5 = 0 (left: 0 5 8) || 8 - 5 = 3 (left: 0 3) || 0 / 3 = 0 (left: 0)",
                "5 * 5 = 25 (left: 25 8 12) || 12 - 8 = 4 (left: 4 12)",
                "5 - 5 = 0 (left: 0 5 8) || 8 - 5 = 3 (left: 0 3) || 10 / 5 = 2 (left:",
                "5 * 5 = 25 (left: 25 8 12) || 12 - 8 = 4 (left: 4)",
                "5 - 5 = 0 (left: 0 5 8) || 8 - 5 = 3 (left: 0 3) || 3 / 3 = 1 (left: 1)"
            ],
            "Pruning": []
        },
        "Input": "5 5 8 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1044": {
        "puzzle": "1 3 3 6",
        "Step 0": {
            "steps": [
                "3 - 1 = 2 (left: 2 3 ",
                "6 - 3 = 3 (left: 3 3 ",
                "6 - 1 = 5 (left: 3 3 ",
                "3 * 1 = 3 (left: 3 3 6)",
                "6 - 3 = 3 (left: 1 3 "
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.001,
                0.003,
                3.0,
                0.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "3 / 1 = 3 (left: 3 3 6)",
                "3 + 3 = 6 (left: 3 6 6)",
                "1 + 3 = 4 (left: 3 4 6)",
                "6 - 3 = 3 (left: 1 3 3)",
                "1 + 3 = 4 (left: 3 4 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                3.0,
                3.0,
                0.001,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.0",
                "3 <- 1.0",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "3 / 1 = 3 (left: 3 3 6)",
                "6 - 3 = 3 (left: 1 3 3)",
                "3 / 1 = 3 (left: 3 3 6) || Input: 4 5 20",
                "3 / 1 = 3 (left: 3 3 6) || 6 / 3 = 2 (left: 2 6)",
                "1 + 3 = 4 (left: 3 4 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                1.002,
                0.003,
                1.002,
                1.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.0",
                "2 <- INIT",
                "3 <- 1.2",
                "4 <- 2.0"
            ]
        },
        "Step 3": {
            "steps": [
                "3 + 1 = 4 (left: 3 4 6)",
                "3 / 1 = 3 (left: 3 3 6) || 3 - 3 = 0 (left: 0 6)",
                "6 / 3 = 2 (left: 1 3 6)",
                "1 + 3 = 4 (left: 3 4 6) || 6 + 3 = 9 (left: 9 4)",
                "3 / 1 = 3 (left: 3 3 6) || 6 + 3 = 9 (left: 3 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                40.0,
                22.0,
                40.001,
                0.003
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 3.3",
                "2 <- 3.1",
                "3 <- 3.3",
                "4 <- 3.3"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 3 = 4 (left: 3 4 6) || 6 + 3 = 9 (left: 9 4) || 9 - 4 = 5 (left: 5)",
                "1 + 3 = 4 (left: 3 4 6) || 6 + 3 = 9 (left: 9 4) || 9 - 4 = 5 (left: 5)",
                "3 / 1 = 3 (left: 3 3 6) || 3 - 3 = 0 (left: 0 6) || 6 - 0 = 6 (left: 6)",
                "1 + 3 = 4 (left: 3 4 6) || 6 + 3 = 9 (left: 9 4) || 9 - 4 = 5 (left: 5)",
                "1 + 3 = 4 (left: 3 4 6) || 6 + 3 = 9 (left: 9 4) || 9 + 4 = 13 (left: 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 3.1",
                "2 <- 3.3",
                "3 <- INIT",
                "4 <- 3.1"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 3 = 4 (left: 3 4 6) || 6 + 3 = 9 (left: 9 4) || 9 * 4 = 36 (left: 36)",
                "3 / 1 = 3 (left: 3 3 6) || 3 - 3 = 0 (left: 0 6) || 6 - 0 = 6 (left: 6)",
                "1 + 3 = 4 (left: 3 4 6) || 6 + 3 = 9 (left: 9 4) || 9 - 4 = 5 (left: 5)",
                "1 + 3 = 4 (left: 3 4 6)",
                "3 / 1 = 3 (left: 3 3 6) || 3 - 3 = 0 (left: 0 6) || 6 - 6 = 0 (left: 0)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.0,
                0.002,
                0.002,
                2.001,
                0.002
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 3.1",
                "2 <- 3.2",
                "3 <- 3.1",
                "4 <- INIT"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 3 = 4 (left: 3 4 6) || 6 + 3 = 9 (left: 9 4) || 9 + 4 = 13 (left: 13)",
                "3 / 1 = 3 (left: 3 3 6) || 3 - 3 = 0 (left: 0 6) || 6 - 0 = 6 (left: 6)",
                "6 / 3 = 2 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3)",
                "3 / 1 = 3 (left: 3 3 6) || 3 - 3 = 0 (left: 0 6) || 6 / 0 = undefined (left: 0 6)",
                "6 - 3 = 3 (left: 1 3 3)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                20.0,
                60.0,
                2.001
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 6.3",
                "2 <- 6.3",
                "3 <- 6.3",
                "4 <- 5.0"
            ]
        },
        "Step 7": {
            "steps": [
                "1 + 3 = 4 (left: 3 4 6) || 6 + 3 = 9 (left: 9 4) || 9 / 4 = 2.25 (left: 2.25)",
                "3 / 1 = 3 (left: 3 3 6) || 3 - 3 = 0 (left: 0 6) || 6 / 0 = undefined (left: 0 6) || 0 + 6 = 6 (left: 6)",
                "3 / 1 = 3 (left: 3 3 6) || 3 - 3 = 0 (left: 0 6) || 6 / 0 = undefined (left: 0 6) || 6 / 0 = undefined (left: 0 6)",
                "3 / 1 = 3 (left: 3 3 6) || 3 - 3 = 0 (left: 0 6) || 6 / 0 = undefined (left: 0 6) || 0 + 6 = 6 (left: 6)",
                "1 + 3 = 4 (left: 3 4 6) || 6 + 3 = 9 (left: 9 4) || 9 * 4 = 36 (left: 36) || None, as there is only one number provided."
            ],
            "Pruning": [
                "1<-6.3",
                "3<-5.0"
            ],
            "Evaluation": [
                0.001,
                41.0,
                60.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 7.3",
                "1 <- 6.3",
                "2 <- 7.2",
                "3 <- 7.2",
                "4 <- 3.1"
            ]
        },
        "Step 8": {
            "steps": [
                "1 + 3 = 4 (left: 3 4 6) || 6 + 3 = 9 (left: 9 4) || 9 * 4 = 36 (left: 36) || No possible next steps as there is only one number.",
                "3 / 1 = 3 (left: 3 3 6) || 3 - 3 = 0 (left: 0 6) || 6 / 0 = undefined (left: 0 6) || 0 + 6 = 6 (left: 6)",
                "3 / 1 = 3 (left: 3 3 6) || 3 - 3 = 0 (left: 0 6) || 6 / 0 = undefined (left: 0 6) || 6 / 0 = undefined (left: 0 6) || 0 + 6 = 6 (left: 6)",
                "3 / 1 = 3 (left: 3 3 6) || 3 - 3 = 0 (left: 0 6) || 6 / 0 = undefined (left: 0 6) || 6 / 0 = undefined (left: 0 6) || 6 - 0 = 6 (left: 6)",
                "3 / 1 = 3 (left: 3 3 6) || 3 - 3 = 0 (left: 0 6) || 6 - 0 = 6 (left: 6)"
            ],
            "Pruning": [
                "1<-6.3",
                "2<-7.1",
                "3<-7.1"
            ],
            "Evaluation": [
                0.003,
                40.001,
                60.0,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 8.2",
                "1 <- 7.3",
                "2 <- 8.2",
                "3 <- 8.1",
                "4 <- 8.2"
            ]
        },
        "Step 9": {
            "steps": [
                "3 / 1 = 3 (left: 3 3 6) || 3 - 3 = 0 (left: 0 6) || 6 / 0 = undefined (left: 0 6) || 0 * 6 = 0 (left: 6)",
                "1 + 3 = 4 (left: 3 4 6) || 6 + 3 = 9 (left: 9 4) || 9 * 4 = 36 (left: 36) || 36 + 2 = 38",
                "3 / 1 = 3 (left: 3 3 6) || 3 - 3 = 0 (left: 0 6) || 6 / 0 = undefined (left: 0 6) || 4 + 10 = 14 (left: 14)",
                "3 / 1 = 3 (left: 3 3 6) || 3 - 3 = 0 (left: 0 6) || 6 / 0 = undefined (left: 0 6) || Input: 3 9 5",
                "3 / 1 = 3 (left: 3 3 6) || 3 - 3 = 0 (left: 0 6) || 6 / 0 = undefined (left: 0 6) || 0 + 6 = 6 (left: 6)"
            ],
            "Pruning": [
                "0<-6.3",
                "2<-8.1",
                "4<-7.3"
            ]
        },
        "Input": "1 3 3 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1045": {
        "puzzle": "2 5 7 13",
        "Step 0": {
            "steps": [
                "7 - 5 = 2 (left: 2 5 13)",
                "2 + 5 = 7 (left: 7 7 13)",
                "2 + 5 = 7 (left: 7 7 13)",
                "2 * 5 = 10 (left: 7 10 13)",
                "7 - 5 = 2 (left: 2 7 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                1.002,
                0.003,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "13 + 2 = 15 (left: 5 7 15)",
                "7 + 2 = 9 (left: 5 9 13)",
                "7 * 2 = 14 (left: 5 13 14)",
                "7 * 2 = 14 (left: 5 14 ",
                "13 - 5 = 8 (left: 2 7 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                2.001,
                3.0,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 1.4",
                "4 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "7 * 2 = 14 (left: 5 13 14) || 14 - 5 = 9 (left: 9 14)",
                "13 - 7 = 6 (left: 2 6 ",
                "13 - 5 = 8 (left: 2 7 ",
                "13 - 5 = 8 (left: 2 7 8) || 8 - 2 = 6 (left: 6 8)",
                "7 * 2 = 14 (left: 5 13 14) || 13 / 5 = 2.6 (left: 2.6 14)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.003,
                0.001,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.4",
                "2 <- 1.2",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "13 - 7 = 6 (left: 2 6 13)",
                "7 - 5 = 2 (left: 2 7 13) || 7 * 2 = 14 (left: 14 13)",
                "7 * 2 = 14 (left: 5 13 14) || 13 / 5 = 2.6 (left: 2.6 14)",
                "13 - 2 = 11 (left: 5 7 11)",
                "13 / 2 = 6.5 (left: 5 "
            ],
            "Pruning": [],
            "Evaluation": [
                2.0,
                0.002,
                1.002,
                41.0,
                0.001
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 3.3",
                "2 <- 3.3",
                "3 <- 3.3",
                "4 <- 3.3"
            ]
        },
        "Step 4": {
            "steps": [
                "13 - 2 = 11 (left: 5 7 11) || 11 / 7 = 1.57142857143 (left: 1.571428571",
                "13 - 2 = 11 (left: 5 7 11) || 7 - 5 = 2 (left: 2 11)",
                "13 - 2 = 11 (left: 5 7 11) || 5 * 7 = 35 (left: 11 35)",
                "13 - 2 = 11 (left: 5 7 11) || 7 / 5 = 1.4 (left: 1.4 11)",
                "13 - 2 = 11 (left: 5 7 11) || 11 / 5 = "
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                1.002,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 3.3",
                "2 <- 3.3",
                "3 <- 3.3",
                "4 <- 3.0"
            ]
        },
        "Step 5": {
            "steps": [
                "13 - 2 = 11 (left: 5 7 11) || 5 + 7 = 12 (left: 11 12)",
                "13 - 2 = 11 (left: 5 7 11) || 11 / 5 = 2.2 (left: 2.2 11)",
                "13 - 2 = 11 (left: 5 7 11) || Input: 3 9",
                "13 - 2 = 11 (left: 5 7 11) || 5 + 7 = 12 (left: 11 12)",
                "13 - 7 = 6 (left: 2 6 13) || 2 * 6 = 12 (left: 12 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                1.001,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 3.3",
                "2 <- 3.2",
                "3 <- 3.3",
                "4 <- 3.3"
            ]
        },
        "Step 6": {
            "steps": [
                "13 - 2 = 11 (left: 5 7 11) || 5 * 11 = 55 (left:",
                "13 - 2 = 11 (left: 5 7 11) || 3 + 9 = 12 (",
                "7 * 2 = 14 (left: 5 13 14) || 13 / 5 = 2.6 (left: 2.6 14) || 2.6 + 14 = 16.6 (left: 16.6)",
                "13 - 2 = 11 (left: 5 7 11) || 11 - 7 = 4 (left: 5 4)",
                "13 - 2 = 11 (left: 5 7 11) || 11 - 5 = 6 (left: 5 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                3.0,
                1.002
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 6.3",
                "2 <- 1.1",
                "3 <- 1.0",
                "4 <- 3.3"
            ]
        },
        "Step 7": {
            "steps": [
                "13 - 2 = 11 (left: 5 7 11) || 7 - 5 = 2 (left: 2 11)",
                "13 - 2 = 11 (left: 5 7 11) || 11 - 7 = 4 (left: 5 4) || 5 - 4 = 1 (left: 1)",
                "7 + 2 = 9 (left: 5 9 13) || 5 * 9 = 45 (left: 13 45)",
                "13 + 2 = 15 (left: 5 7 15) || 5 * 7 = 35 (left: 35 15)",
                "13 - 2 = 11 (left: 5 7 11) || 5 + 7 = 12 (left: 11 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                1.002,
                1.0,
                0.003
            ],
            "Resampling": [
                "0 <- 7.3",
                "1 <- 3.3",
                "2 <- 3.3",
                "3 <- 6.3",
                "4 <- 7.2"
            ]
        },
        "Step 8": {
            "steps": [
                "13 + 2 = 15 (left: 5 7 15) || 5 * 7 = 35 (left: 35 15) || 35 * 15 = 525 (left: 525)",
                "13 - 2 = 11 (left: 5 7 11) || 7 - 5 = 2 (left: 2 11)",
                "13 - 2 = 11 (left: 5 7 11) || Input: 3 3",
                "13 - 2 = 11 (left: 5 7 11) || 11 - 7 = 4 (left: 5 4) || 5 / 4 = 1.25 (left: 1.25)",
                "7 + 2 = 9 (left: 5 9 13) || 5 * 9 = 45 (left: 13 45) || 13 + 45 = 58 (left: 58)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 3.3",
                "2 <- 6.3",
                "3 <- 3.3",
                "4 <- 3.3"
            ]
        },
        "Step 9": {
            "steps": [
                "13 - 2 = 11 (left: 5 7 11) || 11 - 7 = 4 (left: 4 11)",
                "13 - 2 = 11 (left: 5 7 11) || 11 - 5 = 6 (left: 6 11)",
                "13 - 2 = 11 (left: 5 7 11) || 11 - 7 = 4 (left: 5 4) || 10 - 3 = 7 (left: 7)",
                "13 - 2 = 11 (left: 5 7 11) || 7 / 5 = 1.4 (left: 1.4 11)",
                "13 - 2 = 11 (left: 5 7 11) || 5 * 7 = 35 (left: 35 11)"
            ],
            "Pruning": []
        },
        "Input": "2 5 7 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1046": {
        "puzzle": "1 5 8 11",
        "Step 0": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 11)",
                "8 + 11 = 19 (left: 1 5 19)",
                "5 * 8 = 40 (left: 1 40 11)",
                "5 * 8 = 40 (left: 1 40 11)",
                "1 + 5 = 6 (left: 6 8 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                1.002,
                0.0,
                21.0,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.3",
                "4 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "8 + 11 = 19 (left: 1 5 19)",
                "8 - 1 = 7 (left: 7 5 11)",
                "5 + 8 = 13 (left: 1 13 11)",
                "5 * 8 = 40 (left: 1 40 11) || 1 * 40 = 40 (left: 40 11)",
                "5 * 8 = 40 (left: 1 40 11) || 1 + 40 = 41 (left: 11 41)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                22.0,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 5 = 6 (left: 6 8 11)",
                "5 + 8 = 13 (left: 1 13 11)",
                "5 + 8 = 13 (left: 1 13 11)",
                "5 * 8 = 40 (left: 1 40 11)",
                "11 - 8 = 3 (left: 1 5 "
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                1.002,
                0.001,
                2.0,
                40.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.4",
                "2 <- 1.1",
                "3 <- 2.4",
                "4 <- 2.4"
            ]
        },
        "Step 3": {
            "steps": [
                "8 + 1 = 9 (left: 5 9 11)",
                "11 - 8 = 3 (left: 1 5  || 1 + 5 = 6 (left: 6)",
                "8 - 1 = 7 (left: 7 5 11) || 7 + 5 = 12 (left: 12 11)",
                "11 - 8 = 3 (left: 1 5  || 5 + 1 = 6 (left: 6)",
                "11 - 8 = 3 (left: 1 5  || 5 - 1 = 4 (left: 4)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                0.001,
                0.002,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.4",
                "2 <- 2.4",
                "3 <- 2.4",
                "4 <- 2.4"
            ]
        },
        "Step 4": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 11)",
                "11 - 8 = 3 (left: 1 5  || 1 * 5 = 5 (left: 5)",
                "11 - 8 = 3 (left: 1 5  || 5 - 1 = 4 (left: 4)",
                "11 - 8 = 3 (left: 1 5  || 5 / 1 = 5 (left: 5)",
                "11 - 8 = 3 (left: 1 5  || 5 - 1 = 4 (left: 4)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                0.002,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 1.1",
                "2 <- 1.1",
                "3 <- 0.0",
                "4 <- 2.4"
            ]
        },
        "Step 5": {
            "steps": [
                "5 + 8 = 13 (left: 1 13 11) || 1 * 13 = 13 (left: 13 11)",
                "8 - 1 = 7 (left: 7 5 11) || 5 * 11 = ",
                "8 - 1 = 7 (left: 7 5 11) || 7 / 5 = 1.4 (left: 1.4 11)",
                "8 - 5 = 3 (left: 1 3 11) || 11 - 1 = 10 (left: 3 10)",
                "11 - 8 = 3 (left: 1 5  || 5 - 1 = 4 (left: 4)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                0.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 5.0",
                "2 <- 2.4",
                "3 <- 5.0",
                "4 <- INIT"
            ]
        },
        "Step 6": {
            "steps": [
                "5 + 8 = 13 (left: 1 13 11) || 1 * 13 = 13 (left: 13 11) || 13 - 11 = 2 (left: 2)",
                "5 + 8 = 13 (left: 1 13 11) || 1 * 13 = 13 (left: 13 11) || 13 + 11 = 24 (left: 24)",
                "11 - 8 = 3 (left: 1 5  || 1 + 5 = 6 (left: 6)",
                "5 + 8 = 13 (left: 1 13 11) || 1 * 13 = 13 (left: 13 11) || 13 + 11 = 24 (left: 24)",
                "8 - 5 = 3 (left: 1 3 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                60.0,
                0.002,
                60.0,
                2.001
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 6.3",
                "2 <- 6.1",
                "3 <- 6.1",
                "4 <- 6.3"
            ]
        },
        "Step 7": {
            "steps": [
                "5 + 8 = 13 (left: 1 13 11) || 1 * 13 = 13 (left: 13 11) || 13 + 11 = 24 (left: 24) || Answer: (1 * (5 + 8)) + 11 = 24",
                "5 + 8 = 13 (left: 1 13 11) || 1 * 13 = 13 (left: 13 11) || 13 + 11 = 24 (left: 24) || Answer: (1 * (5 + 8)) + 11 = 24",
                "5 + 8 = 13 (left: 1 13 11) || 1 * 13 = 13 (left: 13 11) || 13 + 11 = 24 (left: 24) || Answer: (1 * (5 + 8)) + 11 = 24",
                "5 + 8 = 13 (left: 1 13 11) || 1 * 13 = 13 (left: 13 11) || 13 + 11 = 24 (left: 24) || Answer: (1 * (5 + 8)) + 11 = 24",
                "5 + 8 = 13 (left: 1 13 11) || 1 * 13 = 13 (left: 13 11) || 13 + 11 = 24 (left: 24) || Answer: (1 * (5 + 8)) + 11 = 24"
            ]
        },
        "Input": "1 5 8 11",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            }
        ]
    },
    "1047": {
        "puzzle": "2 3 5 13",
        "Step 0": {
            "steps": [
                "2 * 3 = 6 (left: 6 5 13)",
                "13 - 3 = 10 (left: 2 5 ",
                "2 * 3 = 6 (left: 6 5 13)",
                "2 + 3 = 5 (left: 5 5 13)",
                "5 * 3 = 15 (left: 2 15 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                22.0,
                60.0,
                3.0,
                21.001,
                2.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.3",
                "2 <- 0.2",
                "3 <- 0.1",
                "4 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "13 - 3 = 10 (left: 2 5  || 5 / 2 = 2.5 (left: 2.5)",
                "2 + 3 = 5 (left: 5 5 13) || 5 + 5 = 10 (left: 10 13)",
                "2 * 3 = 6 (left: 6 5 13) || 6 + 5 = 11 (left: 11 13)",
                "13 - 3 = 10 (left: 2 5  || 2 + 5 = 7 (left: 7)",
                "5 * 3 = 15 (left: 2 15 13) || 2 + 15 = 17 (left: 13 17)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.001,
                60.0,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.2",
                "2 <- 0.3",
                "3 <- 0.1",
                "4 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "3 * 2 = 6 (left: 6 5 13)",
                "2 * 3 = 6 (left: 6 5 13) || 6 + 5 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24)",
                "2 + 3 = 5 (left: 5 5 13) || 5 * 5 = 25 (left: 25 13)",
                "13 - 3 = 10 (left: 2 5  || Possible next steps:",
                "13 - 3 = 10 (left: 2 5  || 5 - 2 = 3 (left: 3)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                60.0,
                0.003,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 2.1",
                "2 <- 1.2",
                "3 <- 2.1",
                "4 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 3 = 6 (left: 6 5 13) || 6 + 5 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24)",
                "2 * 3 = 6 (left: 6 5 13) || 6 + 5 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: (2 * 3 + 5) + 13 = 24",
                "2 * 3 = 6 (left: 6 5 13) || 6 + 5 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "2 * 3 = 6 (left: 6 5 13) || 6 + 5 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((2 * 3) + 5) + 13 = 24",
                "2 * 3 = 6 (left: 6 5 13) || 6 + 5 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((2 * 3) + 5) + 13 = 24"
            ]
        },
        "Input": "2 3 5 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            }
        ]
    },
    "1048": {
        "puzzle": "3 4 8 9",
        "Step 0": {
            "steps": [
                "9 - 4 = 5 (left: 3 5 8)",
                "9 - 3 = 6 (left: 4 6 8)",
                "3 + 4 = 7 (left: 7 8 9)",
                "8 - 4 = 4 (left: 3 4 ",
                "9 - 3 = 6 (left: 4 8 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                60.0,
                22.0,
                60.0,
                41.0
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.3",
                "2 <- 0.1",
                "3 <- 0.4",
                "4 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "8 - 4 = 4 (left: 3 4  || 3 + 4 = 7 (left: 7)",
                "8 - 4 = 4 (left: 3 4  || 3 * 4 = 12 (left: 12)",
                "9 - 3 = 6 (left: 4 6 8) || 4 + 6 = 10 (left: 8 10)",
                "9 - 3 = 6 (left: 4 8 6) || 8 - 6 = 2 (left: 4",
                "8 - 4 = 4 (left: 3 4  || 3 - 4 = -1 (left: -1)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                1.001,
                0.002,
                0.0
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- INIT",
                "2 <- 0.4",
                "3 <- 0.2",
                "4 <- 0.4"
            ]
        },
        "Step 2": {
            "steps": [
                "8 - 4 = 4 (left: 3 4  || 4 / 3 = 1.33 (left: 1.33)",
                "3 + 4 = 7 (left: 7 8 9)",
                "9 - 3 = 6 (left: 4 8 6) || 6 - 4 = 2 (left: 2 2)",
                "3 + 4 = 7 (left: 7 8 9) || 9 - 7 = 2 (left: 2 8)",
                "9 - 3 = 6 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                21.0,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.2",
                "2 <- 0.4",
                "3 <- 2.4",
                "4 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "3 + 4 = 7 (left: 7 8 9) || 9 - 7 = 2 (left: 2 8)",
                "9 - 3 = 6 (left: 4 8 6) || 6 - 4 = 2 (left: 2 2) || 2 + 2 = 4",
                "9 - 3 = 6 (left: 4 8 6) || 6 + 4 = 10 (left: 8 10)",
                "9 - 3 = 6 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "3 + 4 = 7 (left: 7 8 9) || 7 / 8"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                21.001,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 3.2",
                "2 <- 0.3",
                "3 <- 0.3",
                "4 <- 2.1"
            ]
        },
        "Step 4": {
            "steps": [
                "3 + 4 = 7 (left: 7 8 9) || 8 - 9 = -1 (left: 7 -1)",
                "9 - 3 = 6 (left: 4 8 6) || 6 + 4 = 10 (left: 8 10) || 8 * 10 = 80 (left: 80)",
                "8 - 4 = 4 (left: 3 4  || 3 - 4 = -1 (left: -1)",
                "8 - 4 = 4 (left: 3 4  || 4 - 3 = 1 (left: 1)",
                "3 + 4 = 7 (left: 7 8 9) || 9 / 8 = 1.125 (left: 7 1.125)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.0,
                0.003,
                0.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 0.3",
                "2 <- 2.4",
                "3 <- 2.1",
                "4 <- 2.4"
            ]
        },
        "Step 5": {
            "steps": [
                "9 - 3 = 6 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 - 6 = -2 (left: -2)",
                "8 - 4 = 4 (left: 3 4  || 5 / 10 = 0",
                "9 - 3 = 6 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "3 + 4 = 7 (left: 7 8 9) || 7 * 8 = 56 (left: 9 56)",
                "9 - 3 = 6 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.003,
                0.003,
                20.001,
                60.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 5.4",
                "2 <- 5.4",
                "3 <- 2.1",
                "4 <- 2.2"
            ]
        },
        "Step 6": {
            "steps": [
                "9 - 3 = 6 (left: 4 6 8) || 4 + 6 = 10 (left: 8 10)",
                "9 - 3 = 6 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (8 - 4) * (9 - 3) = 24",
                "9 - 3 = 6 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (8 - 4) * (9 - 3) = 24",
                "3 + 4 = 7 (left: 7 8 9) || 8 - 7 = 1 (left: 1 9)",
                "9 - 3 = 6 (left: 4 8 6) || 6 - 4 = 2 (left: 2 2) || 2 + 2 = 4"
            ]
        },
        "Input": "3 4 8 9",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1049": {
        "puzzle": "2 5 5 7",
        "Step 0": {
            "steps": [
                "5 - 2 = 3 (left: 3 5 7)",
                "7 - 5 = 2 (left: ",
                "7 + 2 = 9 (left: 5 5 9)",
                "5 / 2 = 2.5 (left: 2.5 5 7)",
                "2 + 5 = 7 (left: 5 7 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                0.0,
                2.001,
                2.001,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.0",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "5 / 2 = 2.5 (left: 2.5 5 7)",
                "5 - 2 = 3 (left: 3 5 7) || 7 - 5 = 2 (left: 3 2)",
                "7 + 2 = 9 (left: 5 5 9)",
                "2 * 5 = 10 (left: 5 7 10)",
                "7 + 2 = 9 (left: 5 5 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                1.001,
                3.0,
                3.0,
                3.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- INIT",
                "2 <- 0.3",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "5 / 2 = 2.5 (left: 2.5 5 7) || 2.5 * 5 = 12.5 (left: 7 12.5)",
                "7 + 2 = 9 (left: 5 5 9)",
                "5 / 2 = 2.5 (left: 2.5 5 7) || 5 / 2.5 = 2 (left: 2 7",
                "2 + 5 = 7 (left: 5 7 7)",
                "2 + 5 = 7 (left: 5 7 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.0,
                2.001,
                0.001,
                3.0,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 2.1",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "2 + 5 = 7 (left: 5 7 7)",
                "5 / 2 = 2.5 (left: 2.5 5 7)",
                "2 * 5 = 10 (left: 5 7 10)",
                "7 + 2 = 9 (left: 5 5 9) || 5 - 5 = 0 (left: 0 9)",
                "5 - 2 = 3 (left: 3 5 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                2.001,
                41.0,
                20.0,
                3.0
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 3.2",
                "2 <- 3.2",
                "3 <- 2.3",
                "4 <- 3.2"
            ]
        },
        "Step 4": {
            "steps": [
                "5 - 2 = 3 (left: 3 5 7) || 3 + 5 = 8 (left: 7 8)",
                "2 * 5 = 10 (left: 5 7 10) || 10 - 5 = 5 (left: 5 7)",
                "2 * 5 = 10 (left: 5 7 10) || 5 * 7 = 35 (left: 10 35)",
                "2 + 5 = 7 (left: 5 7 7) || 5 * 7 = 35 (left: 7 35)",
                "2 * 5 = 10 (left: 5 7 10) || 7 - 5 = 2 (left: 2 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                2.0
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- INIT",
                "2 <- 3.2",
                "3 <- 3.2",
                "4 <- INIT"
            ]
        },
        "Step 5": {
            "steps": [
                "2 * 5 = 10 (left: 5 7 10) || 7 - 5 = 2 (left: 2 10)",
                "5 / 2 = 2.5 (left: 2.5 5 7)",
                "2 * 5 = 10 (left: 5 7 10) || 10 - 7 = 3 (left: 3 7)",
                "2 * 5 = 10 (left: 5 7 10) || 10 / 5 = 2 (left: 7 2)",
                "7 + 2 = 9 (left: 5 5 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                2.001,
                0.0,
                1.001,
                3.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 3.2",
                "2 <- 5.4",
                "3 <- 3.1",
                "4 <- 3.2"
            ]
        },
        "Step 6": {
            "steps": [
                "5 - 2 = 3 (left: 3 5 7) || 7 / 3 = 2 (left: 2 5)",
                "2 * 5 = 10 (left: 5 7 10) || 7 + 10 = 17 (left: 5 17)",
                "7 + 2 = 9 (left: 5 5 9) || 5 / 5 = 1 (left: 1 9)",
                "5 / 2 = 2.5 (left: 2.5 5 7) || 7 - 2.5 = 4.5 (left: 4.5 5)",
                "2 * 5 = 10 (left: 5 7 10) || Input: 3 6 9"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.001,
                60.0,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 6.2",
                "2 <- 6.0",
                "3 <- 6.2",
                "4 <- 6.2"
            ]
        },
        "Step 7": {
            "steps": [
                "5 - 2 = 3 (left: 3 5 7) || 7 / 3 = 2 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)",
                "7 + 2 = 9 (left: 5 5 9) || 5 / 5 = 1 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "5 - 2 = 3 (left: 3 5 7) || 7 / 3 = 2 (left: 2 5) || 2 + 5 = 7 (left: 7)",
                "7 + 2 = 9 (left: 5 5 9) || 5 / 5 = 1 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "7 + 2 = 9 (left: 5 5 9) || 5 / 5 = 1 (left: 1 9) || 1 * 9 = 9 (left: 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.0,
                0.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 6.0",
                "2 <- 6.0",
                "3 <- 6.0",
                "4 <- 3.2"
            ]
        },
        "Step 8": {
            "steps": [
                "7 + 2 = 9 (left: 5 5 9) || 5 / 5 = 1 (left: 1 9) || 1 + 9 = 10 (left: 10)",
                "5 - 2 = 3 (left: 3 5 7) || 7 / 3 = 2 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)",
                "5 - 2 = 3 (left: 3 5 7) || 7 / 3 = 2 (left: 2 5) || 2 * 5 = 10 (left: 10)",
                "5 - 2 = 3 (left: 3 5 7) || 7 / 3 = 2 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)",
                "2 * 5 = 10 (left: 5 7 10) || 10 / 5 = 2 (left:"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                0.002,
                21.0
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 8.4",
                "2 <- 6.2",
                "3 <- 6.0",
                "4 <- 6.0"
            ]
        },
        "Step 9": {
            "steps": [
                "2 * 5 = 10 (left: 5 7 10) || 7 + 10 = 17 (left: 5 17)",
                "2 * 5 = 10 (left: 5 7 10) || 10 / 5 = 2 (left: || 10 - 5 = 5 (left: 5 5)",
                "7 + 2 = 9 (left: 5 5 9) || 5 / 5 = 1 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "5 - 2 = 3 (left: 3 5 7) || 7 / 3 = 2 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)",
                "5 - 2 = 3 (left: 3 5 7) || 7 / 3 = 2 (left: 2 5) || 2 * 5 = 10 (left: 10)"
            ],
            "Pruning": []
        },
        "Input": "2 5 5 7",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "Cost": {
        "input_tokens": 2587724,
        "output_tokens": 291092.93333333347,
        "total_cost": 1.7305014000000003
    }
}