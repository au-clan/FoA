{
    "850": {
        "puzzle": "2 6 8 8",
        "Step 0": {
            "steps": [
                "8 / 2 = 4 (left: 4 8 8)",
                "6 / 2 = 3 (left: 3 8 8)",
                "2 + 6 = 8 (left: 8 8 8)",
                "8 * 2 = 16 (left: 6 8 ",
                "8 / 2 = 4 (left: 4 8 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                60.0,
                20.002,
                0.003,
                41.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- 0.0",
                "4 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "8 / 2 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8)",
                "8 - 6 = 2 (left: 2 8 8)",
                "6 / 2 = 3 (left: 3 8 8) || Input: 4 10 5",
                "8 / 2 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32)",
                "8 / 2 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                41.0,
                1.002,
                0.003,
                20.001,
                21.001
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.0",
                "2 <- 0.0",
                "3 <- 0.1",
                "4 <- 0.0"
            ]
        },
        "Step 2": {
            "steps": [
                "8 / 2 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 / 8 = 4 (left: 4)",
                "8 / 2 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 / 4 = 2 (left: 2 8)",
                "8 / 2 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32)",
                "6 / 2 = 3 (left: 3 8 8) || Possible next steps:",
                "8 / 2 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 8 32)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                20.0,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 0.4",
                "2 <- 0.1",
                "3 <- 2.4",
                "4 <- 0.1"
            ]
        },
        "Step 3": {
            "steps": [
                "8 / 2 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8)",
                "8 / 2 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32)",
                "6 / 2 = 3 (left: 3 8 8) || 4 + 7 = 11 (",
                "8 / 2 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 8 32) || 32 / 8 = 4 (left: 4 8)",
                "6 / 2 = 3 (left: 3 8 8) || 3 + 8 = 11 (left: 8 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.001,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 0.0",
                "2 <- 0.0",
                "3 <- 1.0",
                "4 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "8 / 2 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8) || 8 - 4 = 4 (left: 4)",
                "8 / 2 = 4 (left: 4 8 8) || 4 + 8 = 12 (left: 8 8 12)",
                "8 / 2 = 4 (left: 4 8 8) || 4 + 8 = 12 (left: 8 8 12)",
                "8 / 2 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8)",
                "8 / 2 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 / 4 = 2 (left: 2 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                2.0,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 2.2",
                "2 <- 0.2",
                "3 <- 3.0",
                "4 <- 4.3"
            ]
        },
        "Step 5": {
            "steps": [
                "8 / 2 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || Possible next steps:",
                "8 / 2 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24)",
                "2 + 6 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 16)",
                "8 / 2 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 / 4 = 2 (left: 2 8 8)",
                "8 / 2 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 / 4 = 2 (left: 2 8 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                0.002,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 5.1",
                "2 <- 2.4",
                "3 <- INIT",
                "4 <- 5.3"
            ]
        },
        "Step 6": {
            "steps": [
                "8 / 2 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: ((8 / 2) * 8) - 8 = 24",
                "8 / 2 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: ((8 / 2) * 8) - 8 = 24",
                "8 / 2 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 8 32) || 8 / 8 = 1 (left: 1 32)",
                "8 / 2 = 4 (left: 4 8 8)",
                "8 / 2 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 / 4 = 2 (left: 2 8 8) || 8 + 2 = 10 (left: 10 8)"
            ],
            "Pruning": [
                "0<-4.3",
                "1<-0.1"
            ],
            "Evaluation": [
                41.0,
                60.0,
                40.001,
                41.0,
                1.002
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 6.1",
                "2 <- 6.3",
                "3 <- 4.3",
                "4 <- 6.3"
            ]
        },
        "Step 7": {
            "steps": [
                "8 / 2 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 + 8 = 12 (left: 8 12)",
                "6 / 2 = 3 (left: 3 8 8) || 3 * 8 = 24 (left: 8 24)",
                "8 / 2 = 4 (left: 4 8 8) || 4 + 8 = 12 (left: 8 8 12)",
                "8 / 2 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8)",
                "8 / 2 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                1.001,
                3.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 7.4",
                "1 <- 6.0",
                "2 <- 6.0",
                "3 <- 6.2",
                "4 <- 7.3"
            ]
        },
        "Step 8": {
            "steps": [
                "8 / 2 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8)",
                "8 / 2 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32)",
                "8 / 2 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 + 8 = 12 (left: 8 12)",
                "8 / 2 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 8 32) || 8 / 8 = 1 (left: 1 32) || 1 + 32 = 33 (left: 33)",
                "8 / 2 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 / 4 = 2 (left: 2 8)"
            ],
            "Pruning": [
                "3<-6.2"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                41.0,
                0.0
            ],
            "Resampling": [
                "0 <- 8.3",
                "1 <- 6.0",
                "2 <- 8.3",
                "3 <- 8.3",
                "4 <- 8.3"
            ]
        },
        "Step 9": {
            "steps": [
                "8 / 2 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 8 32) || 8 / 8 = 1 (left: 1 32) || 32 / 1 = 32 (left: 1 32)",
                "8 / 2 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 + 8 = 12 (left: 8 12)",
                "8 / 2 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 8 32) || 8 / 8 = 1 (left: 1 32) || 32 - 32 = 0 (left: 1 0)",
                "8 / 2 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 8 32) || 8 / 8 = 1 (left: 1 32) || 32 - 1 = 31 (left: 1 31)",
                "8 / 2 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 8 32) || 8 / 8 = 1 (left: 1 32) || 32 - 32 = 0 (left: 1 0)"
            ],
            "Pruning": []
        },
        "Input": "2 6 8 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "851": {
        "puzzle": "4 5 5 7",
        "Step 0": {
            "steps": [
                "7 - 5 = 2 (left: 4 5 2)",
                "5 - 4 = 1 (left: 1 5 7)",
                "5 * 5 = 25 (left: 4 7 25)",
                "7 - 5 = 2 (left: 4 5 2)",
                "7 - 5 = 2 (left: 2 5 "
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                2.0,
                3.0,
                3.0,
                0.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "5 - 4 = 1 (left: 1 5 7 5)",
                "7 - 4 = 3 (left: ",
                "5 - 4 = 1 (left: 1 5 7)",
                "7 / 5 = 1.4 (left: 4 ",
                "5 - 4 = 1 (left: 1 5 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                0.0,
                3.0,
                0.0,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.0",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "5 * 4 = 20 (left: 5 7 20)",
                "5 * 5 = 25 (left: 4 25 7)",
                "5 - 4 = 1 (left: 1 5 7 5) || 7 - 5 = 2 (left: 1 2 5)",
                "5 + 7 = 12 (left: 4 12)",
                "7 - 4 = 3 (left: 3 5 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                3.0,
                3.0,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.2",
                "2 <- 2.1",
                "3 <- 2.2",
                "4 <- 1.4"
            ]
        },
        "Step 3": {
            "steps": [
                "5 - 4 = 1 (left: 1 5 7)",
                "5 - 4 = 1 (left: 1 5 7 5) || 7 - 5 = 2 (left: 1 2 5) || 2 * 5 = 10 (left: 1 10)",
                "5 * 5 = 25 (left: 4 25 7) || 25 + 7 = 32 (left: 4 32)",
                "5 - 4 = 1 (left: 1 5 7 5) || 7 - 5 = 2 (left: 1 2 5) || 5 - 2 = 3 (left: 1 3)",
                "5 - 4 = 1 (left: 1 5 7) || 5 / 1 = 5 (left: 5 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                60.0,
                0.003,
                0.0,
                0.002
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 3.1",
                "2 <- 3.1",
                "3 <- 3.1",
                "4 <- 2.1"
            ]
        },
        "Step 4": {
            "steps": [
                "5 - 4 = 1 (left: 1 5 7 5) || 7 - 5 = 2 (left: 1 2 5) || 2 * 5 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "5 - 4 = 1 (left: 1 5 7 5) || 7 - 5 = 2 (left: 1 2 5) || 2 * 5 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "5 - 4 = 1 (left: 1 5 7 5) || 7 - 5 = 2 (left: 1 2 5) || 2 * 5 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "5 - 4 = 1 (left: 1 5 7 5) || 7 - 5 = 2 (left: 1 2 5) || 2 * 5 = 10 (left: 1 10) || 1 + 10 = 11 (left: 10)",
                "5 * 5 = 25 (left: 4 25 7) || 4 + 25 = 29 (left: 7 29)"
            ],
            "Pruning": [
                "0<-3.1",
                "1<-3.1",
                "2<-3.1",
                "3<-3.1"
            ],
            "Evaluation": [
                60.0,
                20.001,
                40.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 4.3",
                "2 <- 4.2",
                "3 <- 4.3",
                "4 <- 4.3"
            ]
        },
        "Step 5": {
            "steps": [
                "5 - 4 = 1 (left: 1 5 7) || 1 * 5 = 5 (left: 5 7)",
                "5 - 4 = 1 (left: 1 5 7 5) || 7 - 5 = 2 (left: 1 2 5) || 2 * 5 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "5 - 4 = 1 (left: 1 5 7 5) || 7 - 5 = 2 (left: 1 2 5) || 2 * 5 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "5 - 4 = 1 (left: 1 5 7 5) || 7 - 5 = 2 (left: 1 2 5) || 2 * 5 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "5 - 4 = 1 (left: 1 5 7 5) || 7 - 5 = 2 (left: 1 2 5) || 2 * 5 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)"
            ],
            "Pruning": [
                "1<-3.1",
                "2<-3.1",
                "3<-4.0",
                "4<-3.1"
            ],
            "Evaluation": [
                0.002,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 3.1",
                "2 <- 5.1",
                "3 <- 5.4",
                "4 <- 5.1"
            ]
        },
        "Step 6": {
            "steps": [
                "5 - 4 = 1 (left: 1 5 7 5) || 7 - 5 = 2 (left: 1 2 5) || 2 * 5 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "5 - 4 = 1 (left: 1 5 7 5) || 7 - 5 = 2 (left: 1 2 5) || 2 * 5 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "5 - 4 = 1 (left: 1 5 7 5) || 7 - 5 = 2 (left: 1 2 5) || 2 * 5 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "5 - 4 = 1 (left: 1 5 7 5) || 7 - 5 = 2 (left: 1 2 5) || 2 * 5 = 10 (left: 1 10) || 10 * 1 = 10 (left: 10)",
                "5 - 4 = 1 (left: 1 5 7 5) || 7 - 5 = 2 (left: 1 2 5) || 2 * 5 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Pruning": [
                "0<-5.1",
                "1<-4.2",
                "2<-5.3",
                "3<-4.0",
                "4<-5.3"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 6.2",
                "2 <- 4.0",
                "3 <- 5.3",
                "4 <- 5.3"
            ]
        },
        "Step 7": {
            "steps": [
                "5 - 4 = 1 (left: 1 5 7 5) || 7 - 5 = 2 (left: 1 2 5) || 2 * 5 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "5 - 4 = 1 (left: 1 5 7 5) || 7 - 5 = 2 (left: 1 2 5) || 2 * 5 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "5 - 4 = 1 (left: 1 5 7 5) || 7 - 5 = 2 (left: 1 2 5) || 2 * 5 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "5 - 4 = 1 (left: 1 5 7 5) || 7 - 5 = 2 (left: 1 2 5) || 2 * 5 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "5 - 4 = 1 (left: 1 5 7 5) || 7 - 5 = 2 (left: 1 2 5) || 2 * 5 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Pruning": [
                "0<-5.4",
                "1<-6.4",
                "2<-4.0",
                "3<-6.4",
                "4<-6.1"
            ],
            "Evaluation": [
                40.0,
                60.0,
                60.0,
                41.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 7.3",
                "2 <- 5.3",
                "3 <- 6.1",
                "4 <- 5.1"
            ]
        },
        "Step 8": {
            "steps": [
                "5 - 4 = 1 (left: 1 5 7 5) || 7 - 5 = 2 (left: 1 2 5) || 2 * 5 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "5 - 4 = 1 (left: 1 5 7 5) || 7 - 5 = 2 (left: 1 2 5) || 2 * 5 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "5 - 4 = 1 (left: 1 5 7 5) || 7 - 5 = 2 (left: 1 2 5) || 2 * 5 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "5 - 4 = 1 (left: 1 5 7 5) || 7 - 5 = 2 (left: 1 2 5) || 2 * 5 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "5 - 4 = 1 (left: 1 5 7 5) || 7 - 5 = 2 (left: 1 2 5) || 2 * 5 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Pruning": [
                "0<-3.1",
                "1<-6.0",
                "2<-5.3",
                "3<-6.0",
                "4<-7.4"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 7.1",
                "1 <- 8.4",
                "2 <- 8.2",
                "3 <- 8.0",
                "4 <- 6.0"
            ]
        },
        "Step 9": {
            "steps": [
                "5 - 4 = 1 (left: 1 5 7 5) || 7 - 5 = 2 (left: 1 2 5) || 2 * 5 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "5 - 4 = 1 (left: 1 5 7 5) || 7 - 5 = 2 (left: 1 2 5) || 2 * 5 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "5 - 4 = 1 (left: 1 5 7 5) || 7 - 5 = 2 (left: 1 2 5) || 2 * 5 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "5 - 4 = 1 (left: 1 5 7 5) || 7 - 5 = 2 (left: 1 2 5) || 2 * 5 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "5 - 4 = 1 (left: 1 5 7 5) || 7 - 5 = 2 (left: 1 2 5) || 2 * 5 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Pruning": []
        },
        "Input": "4 5 5 7",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "852": {
        "puzzle": "2 3 8 11",
        "Step 0": {
            "steps": [
                "2 + 3 = 5 (left: 5 8 11)",
                "8 + 3 = 11 (left: 2 11 11)",
                "2 + 3 = 5 (left: 5 8 11)",
                "11 - 8 = 3 (left: 2 3 3)",
                "3 * 2 = 6 (left: 6 8 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                0.003,
                3.0,
                1.001,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.2",
                "2 <- INIT",
                "3 <- 0.0",
                "4 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "11 - 8 = 3 (left: 2 3 8)",
                "2 + 3 = 5 (left: 5 8 11) || 5 * 8 = 40 (left: 40 11)",
                "11 - 2 = 9 (left: 3 8 9)",
                "2 + 3 = 5 (left: 5 8 11) || 8 / 5 = 1.6 (left: 1.6 11)",
                "2 + 3 = 5 (left: 5 8 11) || Input: 3 6"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.002,
                40.001,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- INIT",
                "3 <- 1.2",
                "4 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "11 - 2 = 9 (left: 3 8 9) || 3 * 8 = 24 (left: 9 24)",
                "11 - 2 = 9 (left: 3 8 9) || 8 / 3 = 2 (left: 2 9)",
                "3 * 2 = 6 (left: 6 8 11)",
                "11 - 2 = 9 (left: 3 8 9) || 9 - 3 = 6 (left: 6 8)",
                "11 - 2 = 9 (left: 3 8 9) || 9 - 3 = 6 (left: 6 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                3.0,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 0.4",
                "2 <- 1.2",
                "3 <- 1.2",
                "4 <- 0.3"
            ]
        },
        "Step 3": {
            "steps": [
                "11 - 2 = 9 (left: 3 8 9) || 8 - 3 = 5 (left: 5 9)",
                "3 * 2 = 6 (left: 6 8 11) || 11 / 6 = ",
                "11 - 2 = 9 (left: 3 8 9) || 3 * 8 = 24 (left: 9 24)",
                "11 - 2 = 9 (left: 3 8 9) || 3 + 8 = 11 (left: 8 9 11)",
                "11 - 8 = 3 (left: 2 3 3) || 3 - 2 = 1 (left: 1)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.002,
                0.002,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 1.2",
                "2 <- 2.2",
                "3 <- 2.2",
                "4 <- 1.2"
            ]
        },
        "Step 4": {
            "steps": [
                "11 - 2 = 9 (left: 3 8 9) || 3 + 8 = 11 (left: 8 9 11) || 9 / 8 = 1.125 (left: 1.125 11)",
                "11 - 2 = 9 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9)",
                "3 * 2 = 6 (left: 6 8 11) || 6 + 8 = 14 (left: 14 11)",
                "3 * 2 = 6 (left: 6 8 11) || 8 / 6 = 1.33 (left: 1.33 11)",
                "11 - 2 = 9 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 8 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                60.0,
                0.003,
                1.001,
                2.001
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 4.1",
                "2 <- 4.1",
                "3 <- 1.2",
                "4 <- 4.1"
            ]
        },
        "Step 5": {
            "steps": [
                "11 - 2 = 9 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 9 / 2.67 = 3.36 (left: 3.36)",
                "11 - 2 = 9 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 2.67 + 9 = 11.67 (left: 11.67)",
                "11 - 2 = 9 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 9 / 2.67 = 3.36 (left: 3.36)",
                "11 - 2 = 9 (left: 3 8 9) || 9 - 3 = 6 (left: 6 8)",
                "11 - 2 = 9 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 9 - 2.67 = 6.33 (left: 6.33)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.001,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 4.1",
                "2 <- 2.2",
                "3 <- 4.1",
                "4 <- INIT"
            ]
        },
        "Step 6": {
            "steps": [
                "11 - 2 = 9 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 2.67 * 9 = 24.03 (left: 24.03)",
                "11 - 2 = 9 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 2.67 + 9 = 11.67 (left: 11.67)",
                "3 * 2 = 6 (left: 6 8 11) || 6 + 8 = 14 (left: 14 11)",
                "11 - 2 = 9 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 2.67 + 9 = 11.67 (left: 11.67)",
                "8 - 2 = 6 (left: 3 6 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 4.1",
                "2 <- 4.1",
                "3 <- 4.1",
                "4 <- 4.1"
            ]
        },
        "Step 7": {
            "steps": [
                "11 - 2 = 9 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 9 - 2.67 = 6.33 (left: 6.33)",
                "11 - 2 = 9 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 2.67 + 9 = 11.67 (left: 9 11.67)",
                "11 - 2 = 9 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 2.67 * 9 = 24.03 (left: 24.03)",
                "11 - 2 = 9 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || Possible next steps:",
                "11 - 2 = 9 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 9 / 2.67 = 3.36 (left: 2.67 3.36)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                2.001,
                0.003,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- 7.1",
                "1 <- 4.1",
                "2 <- 4.1",
                "3 <- 4.1",
                "4 <- 4.1"
            ]
        },
        "Step 8": {
            "steps": [
                "11 - 2 = 9 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 2.67 + 9 = 11.67 (left: 9 11.67) || 9 / 11.67 \u2248 0.77 (left: 0.77)",
                "11 - 2 = 9 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 9 / 2.67 = 3.36 (left: 3.36)",
                "11 - 2 = 9 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 5 + 15 = 20 (left: 20)",
                "11 - 2 = 9 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 2.67 + 9 = 11.67 (left: 11.67)",
                "11 - 2 = 9 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 9 - 2.67 = 6.33 (left: 6.33)"
            ],
            "Pruning": [
                "0<-7.4"
            ],
            "Evaluation": [
                2.001,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 8.0",
                "1 <- 7.1",
                "2 <- 7.1",
                "3 <- 7.4",
                "4 <- 8.0"
            ]
        },
        "Step 9": {
            "steps": [
                "11 - 2 = 9 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 9 / 2.67 = 3.36 (left: 2.67 3.36) || 3.36 / 2.67 = 1.2584 (left: 1.2584)",
                "11 - 2 = 9 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 2.67 + 9 = 11.67 (left: 9 11.67) || 9 * 11.67 = 105.03 (left: 105.03)",
                "11 - 2 = 9 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 2.67 + 9 = 11.67 (left: 9 11.67) || 9 / 11.67 = 0.77 (left: 0.77)",
                "11 - 2 = 9 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 9 / 2.67 = 3.36 (left: 2.67 3.36) || 2.67 + 3.36 \u2248 6.03 (left: 6.03)",
                "11 - 2 = 9 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 9 / 2.67 = 3.36 (left: 2.67 3.36) || 2.67 * 3.36 = 8.9952 (left: 8.9952)"
            ],
            "Pruning": []
        },
        "Input": "2 3 8 11",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "853": {
        "puzzle": "4 7 8 13",
        "Step 0": {
            "steps": [
                "13 - 4 = 9 (left: 7 8 9)",
                "8 - 4 = 4 (left: 4 7 ",
                "8 - 4 = 4 (left: 4 8 13)",
                "13 - 7 = 6 (left: 4 8 ",
                "4 * 7 = 28 (left: 8 13 28)"
            ],
            "Pruning": [],
            "Evaluation": [
                22.0,
                1.001,
                2.001,
                0.002,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.2",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "13 - 4 = 9 (left: 7 8 9)",
                "8 - 4 = 4 (left: 4 7 ",
                "8 - 4 = 4 (left: 4 8 13) || 13 - 8 = 5 (left: 4 5)",
                "4 + 7 = 11 (left: 8 11 13)",
                "7 / 4 = 1.75 (left: 1.75 8 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                22.0,
                0.003,
                2.0,
                2.0,
                1.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "7 - 4 = 3 (left: 3 8 13)",
                "4 + 7 = 11 (left: 8 11 13)",
                "7 - 4 = 3 (left: 3 8 13)",
                "8 - 4 = 4 (left: 4 7 ",
                "13 - 4 = 9 (left: 7 8 9) || 7 * 8 = 56 (left: 9 56)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                1.002,
                60.0,
                0.003,
                40.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 2.2",
                "2 <- 2.2",
                "3 <- 2.0",
                "4 <- 2.0"
            ]
        },
        "Step 3": {
            "steps": [
                "8 - 4 = 4 (left: 4 7  || 7 - 4 = 3 (left: 3)",
                "7 - 4 = 3 (left: 3 8 13) || 13 / 3 = 4.333333333333333 (left: 4.333333333333333 8",
                "7 - 4 = 3 (left: 3 8 13) || 13 - 3 = 10 (left: 8 10)",
                "7 - 4 = 3 (left: 3 8 13) || 8 / 3 = 2.66667 (left: 2.66667 13)",
                "7 - 4 = 3 (left: 3 8 13) || 3 * 8 = 24 (left: 24 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                2.001,
                0.0,
                1.002,
                0.002
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- INIT",
                "2 <- 1.0",
                "3 <- 2.4",
                "4 <- 3.1"
            ]
        },
        "Step 4": {
            "steps": [
                "13 - 4 = 9 (left: 7 8 9) || 7 * 8 = 56 (left: 9 56) || 9 * 56 = 504 (left: 504)",
                "4 * 7 = 28 (left: 8 13 28)",
                "13 - 4 = 9 (left: 7 8 9) || 8 / 7 = ",
                "13 - 4 = 9 (left: 7 8 9) || 7 * 8 = 56 (left: 9 56) || 9 + 56 = 65 (left: 65)",
                "7 - 4 = 3 (left: 3 8 13) || 13 / 3 = 4.333333333333333 (left: 4.333333333333333 8 || 4.333333333333333 + 8 = 12.333333333333333 (left: 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.002,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 3.1",
                "2 <- 2.0",
                "3 <- 2.4",
                "4 <- 1.0"
            ]
        },
        "Step 5": {
            "steps": [
                "13 - 4 = 9 (left: 7 8 9) || 7 * 8 = 56 (left: 9 56) || 56 - 9 = 47 (left: 47)",
                "7 - 4 = 3 (left: 3 8 13) || 13 / 3 = 4.333333333333333 (left: 4.333333333333333 8 || 8 - 4.333333333333333 = 3.6666666666666665 (left: 3.6666666666666665)",
                "7 - 4 = 3 (left: 3 8 13) || 3 * 8 = 24 (left: 24 13)",
                "13 - 4 = 9 (left: 7 8 9) || 7 * 8 = 56 (left: 9 56) || 9 + 56 = 65 (left: 65)",
                "13 - 4 = 9 (left: 7 8 9) || 7 + 8 = 15 (left: 9 15)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.0,
                0.003,
                0.003,
                40.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 2.2",
                "2 <- 2.4",
                "3 <- 5.4",
                "4 <- 2.0"
            ]
        },
        "Step 6": {
            "steps": [
                "13 - 4 = 9 (left: 7 8 9) || 8 + 9 = 17 (left: 7 17)",
                "7 - 4 = 3 (left: 3 8 13) || 8 / 3 = 2.67 (left: 2.67 13)",
                "13 - 4 = 9 (left: 7 8 9) || 7 * 8 = 56 (left: 9 56) || 9 * 56 = 504 (left: 504)",
                "13 - 4 = 9 (left: 7 8 9) || 7 + 8 = 15 (left: 9 15) || 15 / 9 = 1.6666666666666667 (left: 1.6666666666666667)",
                "7 - 4 = 3 (left: 3 8 13) || 3 + 8 = 11 (left: 11 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                0.002,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.0",
                "2 <- 6.4",
                "3 <- 2.2",
                "4 <- 6.4"
            ]
        },
        "Step 7": {
            "steps": [
                "7 - 4 = 3 (left: 3 8 13) || 8 / 3 = 2.67 (left: 2.67 13)",
                "7 - 4 = 3 (left: 3 8 13) || 3 * 8 = 24 (left: 24 13)",
                "7 - 4 = 3 (left: 3 8 13) || 3 + 8 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "7 - 4 = 3 (left: 3 8 13) || 3 + 8 = 11 (left: 11 13)",
                "7 - 4 = 3 (left: 3 8 13) || 3 + 8 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 7.3",
                "2 <- 6.4",
                "3 <- 7.3",
                "4 <- 7.3"
            ]
        },
        "Step 8": {
            "steps": [
                "7 - 4 = 3 (left: 3 8 13) || 3 + 8 = 11 (left: 11 13) || 13 - 11 = 2 (left: 2)",
                "7 - 4 = 3 (left: 3 8 13) || 3 + 8 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24)",
                "7 - 4 = 3 (left: 3 8 13) || 3 + 8 = 11 (left: 11 13) || 13 / 11 = 1.1818181818181819 (left: 1.1818181818181819)",
                "7 - 4 = 3 (left: 3 8 13) || 3 + 8 = 11 (left: 11 13) || 11 / 13 = 0.846 (left: 0.846)",
                "7 - 4 = 3 (left: 3 8 13) || 3 + 8 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                40.0,
                0.003,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 8.1",
                "1 <- 8.1",
                "2 <- 8.1",
                "3 <- 8.1",
                "4 <- 8.1"
            ]
        },
        "Step 9": {
            "steps": [
                "7 - 4 = 3 (left: 3 8 13) || 3 + 8 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: (7 - 4 + 8) + 13 = 24",
                "7 - 4 = 3 (left: 3 8 13) || 3 + 8 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((7 - 4) + 8) + 13 = 24",
                "7 - 4 = 3 (left: 3 8 13) || 3 + 8 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((7 - 4) + 8) + 13 = 24",
                "7 - 4 = 3 (left: 3 8 13) || 3 + 8 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((7 - 4) + 8) + 13 = 24",
                "7 - 4 = 3 (left: 3 8 13) || 3 + 8 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((7 - 4) + 8) + 13 = 24"
            ]
        },
        "Input": "4 7 8 13",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            }
        ]
    },
    "854": {
        "puzzle": "6 6 8 12",
        "Step 0": {
            "steps": [
                "8 / 6 = 1.33 (left: 6 12)",
                "8 - 6",
                "6 * 6 = 36 (left: 8 36)",
                "12 - 6 = 6 (left: 6 6 8)",
                "8 + 6 = 14 (left: 6 12 14)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                1.002,
                3.0,
                2.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "6 + 6 = 12 (left: 8 12 12)",
                "12 - 8 = 4 (left: 6 4 12)",
                "6 / 6 = 1 (left: 1 8 12)",
                "12 / 6 = 2 (left: 2 8 12)",
                "12 / 6 = 2 (left: 2 6 "
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                41.0,
                0.003,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.1",
                "2 <- 1.1",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 8 = 4 (left: 6 4 12) || 6 / 4 = 1.5 (left: 1.5 12)",
                "12 - 8 = 4 (left: 6 4 12) || 6 - 4 = 2 (left: 2 12)",
                "12 - 8 = 4 (left: 6 4 12) || 12 - 4 = 8 (left: 6 8)",
                "6 + 6 = 12 (left: 8 12 12)",
                "12 /"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                60.0,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- INIT",
                "3 <- 2.1",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 8 = 4 (left: 6 4 12) || 6 - 4 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "12 - 8 = 4 (left: 6 4 12) || 6 - 4 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "6 * 6 = 36 (left: 8 12 36)",
                "12 - 8 = 4 (left: 6 4 12) || 6 - 4 = 2 (left: 2 12) || 2 * 12 = 24 (left",
                "12 - 6 = 6 (left: 6 8 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                2.001,
                60.0,
                22.0
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 3.3",
                "2 <- 2.1",
                "3 <- 3.4",
                "4 <- 2.1"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 6 = 6 (left: 6 8 12) || 12 - 6 = 6 (left: 6 12)",
                "12 - 8 = 4 (left: 6 4 12) || 6 - 4 = 2 (left: 2 12) || 2 * 12 = 24 (left || 12 - 10 = 2 (left: 2 24",
                "12 - 8 = 4 (left: 6 4 12) || 6 - 4 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 - 6 = 6 (left: 6 8 12) || 8 / 6 = 4/3 (left: 4/3 12)",
                "12 - 8 = 4 (left: 6 4 12) || 6 - 4 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                1.001,
                60.0
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 3.4",
                "2 <- 3.4",
                "3 <- 3.3",
                "4 <- 3.3"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 8 = 4 (left: 6 4 12) || 6 - 4 = 2 (left: 2 12) || Possible next",
                "12 - 6 = 6 (left: 6 8 12) || 12 - 6 = 6 (left: 6 12)",
                "12 - 6 = 6 (left: 6 8 12) || 6 / 2 = 3 (left: 3 12)",
                "12 - 8 = 4 (left: 6 4 12) || 6 - 4 = 2 (left: 2 12) || 2 * 12 = 24 (left || 12 / 2 = 6 (left: 6 8 24)",
                "12 - 8 = 4 (left: 6 4 12) || 6 - 4 = 2 (left: 2 12) || 2 * 12 = 24 (left || 24 + 2 = 26 (left: 26)"
            ],
            "Pruning": [
                "4<-4.4"
            ],
            "Evaluation": [
                0.003,
                20.002,
                1.002,
                20.0,
                40.0
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 5.3",
                "2 <- 3.3",
                "3 <- 4.4",
                "4 <- 3.3"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 8 = 4 (left: 6 4 12) || 6 - 4 = 2 (left: 2 12) || 2 * 12 = 24 (left || 24 / 2 = 12 (left: 8 12)",
                "12 - 8 = 4 (left: 6 4 12) || 6 - 4 = 2 (left: 2 12) || 2 * 12 = 24 (left || 12 / 2 = 6 (left: 6 8 24) || 6 * 8 = 48 (left: 24 48)",
                "12 - 8 = 4 (left: 6 4 12) || 6 - 4 = 2 (left: 2 12) || 2 * 12 = 24 (left || 12 + 8 = 20 (left: 2 20 24)",
                "12 - 8 = 4 (left: 6 4 12) || 6 - 4 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (6 - 4) * (8 + 12) = 24",
                "12 - 8 = 4 (left: 6 4 12) || 6 - 4 = 2 (left: 2 12) || 2 * 12 = 24 (left || 24 / 2 = 12 (left: 12 24)"
            ],
            "Pruning": [
                "3<-5.4"
            ],
            "Evaluation": [
                1.002,
                40.001,
                2.001,
                40.0,
                20.001
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 6.3",
                "2 <- 6.1",
                "3 <- 4.4",
                "4 <- 6.3"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 8 = 4 (left: 6 4 12) || 6 - 4 = 2 (left: 2 12) || 2 * 12 = 24 (left || 12 + 2 = 14 (left",
                "12 - 8 = 4 (left: 6 4 12) || 6 - 4 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (6 - (12 - 8)) * 6 = 24",
                "12 - 8 = 4 (left: 6 4 12) || 6 - 4 = 2 (left: 2 12) || 2 * 12 = 24 (left || 12 / 2 = 6 (left: 6 8 24) || 6 * 8 = 48 (left: 24 48) || 24 * 2 = 48 (left: 48)",
                "12 - 8 = 4 (left: 6 4 12) || 6 - 4 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: ((6 - 4) * 6) * 8 = 24",
                "12 - 8 = 4 (left: 6 4 12) || 6 - 4 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (6 - 4) * (6 + 8) = 24"
            ],
            "Pruning": [
                "1<-3.3",
                "2<-6.4",
                "3<-6.4",
                "4<-5.4"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.002,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 7.1",
                "1 <- 6.1",
                "2 <- 5.4",
                "3 <- 6.1",
                "4 <- 5.1"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 8 = 4 (left: 6 4 12) || 6 - 4 = 2 (left: 2 12) || 2 * 12 = 24 (left || 24 - 12 = 12 (left: 12 24)",
                "12 - 8 = 4 (left: 6 4 12) || 6 - 4 = 2 (left: 2 12) || 2 * 12 = 24 (left || 12 / 2 = 6 (left: 6 8 24) || 6 * 8 = 48 (left: 24 48) || 24 + 48 = 72 (left: 72)",
                "12 - 8 = 4 (left: 6 4 12) || 6 - 4 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (6 - (12 - 8)) * 6 = 24",
                "12 - 8 = 4 (left: 6 4 12) || 6 - 4 = 2 (left: 2 12) || 2 * 12 = 24 (left || 12 / 2 = 6 (left: 6 8 24) || 6 * 8 = 48 (left: 24 48) || 24 * 2 = 48 (left: 48)",
                "12 - 6 = 6 (left: 6 8 12) || 12 - 6 = 6 (left: 6 12) || 12 - 6 = 6 (left: 6 6)"
            ],
            "Pruning": [
                "1<-7.1",
                "2<-6.4",
                "3<-7.1"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 8.3",
                "1 <- 8.1",
                "2 <- 7.1",
                "3 <- 8.1",
                "4 <- 7.1"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 8 = 4 (left: 6 4 12) || 6 - 4 = 2 (left: 2 12) || 2 * 12 = 24 (left || 12 - 2 = 10 (left: 10 12 24)",
                "12 - 8 = 4 (left: 6 4 12) || 6 - 4 = 2 (left: 2 12) || 2 * 12 = 24 (left || 12 * 2 = 24 (left: 24 24)",
                "12 - 8 = 4 (left: 6 4 12) || 6 - 4 = 2 (left: 2 12) || 2 * 12 = 24 (left || 12 / 2 = 6 (left: 6 8 24)",
                "12 - 8 = 4 (left: 6 4 12) || 6 - 4 = 2 (left: 2 12) || 2 * 12 = 24 (left || 12 / 12 = 1 (left: 1)",
                "12 - 8 = 4 (left: 6 4 12) || 6 - 4 = 2 (left: 2 12) || 2 * 12 = 24 (left || 2 + 12 = 14 (left: 14)"
            ],
            "Pruning": [
                "3<-5.3",
                "4<-5.3"
            ]
        },
        "Input": "6 6 8 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "855": {
        "puzzle": "5 6 8 9",
        "Step 0": {
            "steps": [
                "8 / 6 = 1.33 (left: 5 ",
                "8 - 6 = 2 (left: 5 2 9)",
                "5 * 6 = 30 (left: 8 9 30)",
                "6 + 8 = 14 (left: 5 9 14)",
                "9 - 5 = 4 (left: "
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                2.001,
                0.003,
                3.0,
                0.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "9 - 6 = 3 (left: 5 3 8)",
                "5 + 6 = 11 (left: 8 9 11)",
                "8 - 5 = 3 (left: 3 6 9)",
                "5 + 6 = 11 (left: 8 9 11)",
                "5 + 6 = 11 (left: 8 9 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                2.001,
                0.003,
                3.0,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 1.1",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "9 - 6 = 3 (left: 5 8 3)",
                "6 + 8 = 14 (left: 5 9 14)",
                "5 + 6 = 11 (left: 8 9 11)",
                "5 + 6 = 11 (left: 8 9 11) || 9 - 8 = 1 (left: 1 11)",
                "8 + 9 = 17 (left: 5 6 17)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                1.002,
                3.0,
                40.0,
                2.001
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.3",
                "2 <- 2.3",
                "3 <- 2.3",
                "4 <- 2.3"
            ]
        },
        "Step 3": {
            "steps": [
                "5 + 6 = 11 (left: 8 9 11) || 8 - 9 = -1 (left: -1 11)",
                "5 + 6 = 11 (left: 8 9 11) || 9 - 8 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "5 + 6 = 11 (left: 8 9 11) || 9 - 8 = 1 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "5 + 6 = 11 (left: 8 9 11) || 9 - 8 = 1 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "5 + 6 = 11 (left: 8 9 11) || 9 - 8 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                0.0,
                0.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.3",
                "2 <- 2.3",
                "3 <- 1.3",
                "4 <- 1.4"
            ]
        },
        "Step 4": {
            "steps": [
                "9 - 8 = 1 (left: 1 6 9)",
                "5 + 6 = 11 (left: 8 9 11) || 9 - 8 = 1 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "5 + 6 = 11 (left: 8 9 11) || 9 - 8 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "5 + 6 = 11 (left: 8 9 11) || 8 * 9 = 72 (left: 11 72)",
                "5 + 6 = 11 (left: 8 9 11) || 8 - 9 = -1 (left: -1 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.3",
                "2 <- 4.4",
                "3 <- 2.3",
                "4 <- 2.3"
            ]
        },
        "Step 5": {
            "steps": [
                "5 + 6 = 11 (left: 8 9 11)",
                "5 + 6 = 11 (left: 8 9 11) || 9 - 8 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "5 + 6 = 11 (left: 8 9 11) || 8 - 9 = -1 (left: -1 11) || 9 / 3 = 3 (left: 3 15)",
                "5 + 6 = 11 (left: 8 9 11) || 9 - 8 = 1 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "5 + 6 = 11 (left: 8 9 11) || 9 - 8 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                0.002,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 2.3",
                "2 <- 2.1",
                "3 <- INIT",
                "4 <- 2.3"
            ]
        },
        "Step 6": {
            "steps": [
                "5 + 6 = 11 (left: 8 9 11) || 8 * 9 = 72 (left: 11 72)",
                "5 + 6 = 11 (left: 8 9 11) || 9 - 8 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "6 + 8 = 14 (left: 5 9 14) || 14 - 9 = ",
                "6 - 5 = 1 (left: 1 8 9)",
                "5 + 6 = 11 (left: 8 9 11) || 9 - 8 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                1.002,
                0.001
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 2.3",
                "2 <- 2.3",
                "3 <- 2.3",
                "4 <- 6.3"
            ]
        },
        "Step 7": {
            "steps": [
                "5 + 6 = 11 (left: 8 9 11) || 8 * 9 = 72 (left: 11)",
                "5 + 6 = 11 (left: 8 9 11) || 9 - 8 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "5 + 6 = 11 (left: 8 9 11) || 9 - 8 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "5 + 6 = 11 (left: 8 9 11) || 9 - 8 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "6 - 5 = 1 (left: 1 8 9) || 8 / 1 = 8 (left: 8 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.3",
                "2 <- 2.3",
                "3 <- 2.3",
                "4 <- 2.3"
            ]
        },
        "Step 8": {
            "steps": [
                "5 + 6 = 11 (left: 8 9 11) || 9 - 8 = 1 (left: 1 11) || 1 + 11 = 12 (left: 12) ",
                "5 + 6 = 11 (left: 8 9 11) || 9 - 8 = 1 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "5 + 6 = 11 (left: 8 9 11) || 9 - 8 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "5 + 6 = 11 (left: 8 9 11) || 9 - 8 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "5 + 6 = 11 (left: 8 9 11) || 9 - 8 = 1 (left: 1 11) || 1 + 11 = 12 (left: 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.0,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 8.4",
                "1 <- 6.1",
                "2 <- 8.0",
                "3 <- 7.3",
                "4 <- 8.1"
            ]
        },
        "Step 9": {
            "steps": [
                "5 + 6 = 11 (left: 8 9 11) || 9 - 8 = 1 (left: 1 11) || 1 + 11 = 12 (left: 12) || 12 / 2 = 6",
                "5 + 6 = 11 (left: 8 9 11) || 9 - 8 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11) || There are no possible next steps with the input 11.",
                "5 + 6 = 11 (left: 8 9 11) || 9 - 8 = 1 (left: 1 11) || 1 + 11 = 12 (left: 12)  || 12 / 2 = 6 (left: 6)",
                "5 + 6 = 11 (left: 8 9 11) || 9 - 8 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11) || There are no possible operations that can be performed on the number 11 with the numbers provided.",
                "5 + 6 = 11 (left: 8 9 11) || 9 - 8 = 1 (left: 1 11) || 1 + 11 = 12 (left: 12) || 12 / 2 = 6 (left: 6 8)"
            ],
            "Pruning": []
        },
        "Input": "5 6 8 9",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "856": {
        "puzzle": "3 3 5 9",
        "Step 0": {
            "steps": [
                "9 - 5 = 4 (left: 3 4 9)",
                "5 + 3 = 8 (left: 3 8 ",
                "5 * 3 = 15 (left: 15 3 9)",
                "9 - 5 = 4 (left:",
                "3 / 3 = 1 (left: 1 5 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                60.0,
                21.001,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.2",
                "2 <- 0.2",
                "3 <- INIT",
                "4 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24)",
                "5 * 3 = 15 (left: 15 3 9) || 3 - 9 = -6 (left:",
                "5 * 3 = 15 (left: 15 3 9) || 15 * 3 = 45 (left: 9 45)",
                "9 - 5 = 4 (left: 3 4 ",
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.002,
                20.002,
                41.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.3",
                "2 <- 1.4",
                "3 <- 0.1",
                "4 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "9 - 5 = 4 (left: 3 4  || 4 / 3 = 1.33 (left: 1.33)",
                "9 - 5 = 4 (left: 3 4  || 3 * 4 = 12 (left: 4)",
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24",
                "5 + 3 = 8 (left: 3 8  || 8 - 3 = 5 (left: 5)",
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.0,
                60.0,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 2.2",
                "2 <- 1.0",
                "3 <- 1.0",
                "4 <- 1.4"
            ]
        },
        "Step 3": {
            "steps": [
                "5 * 3 = 15 (left: 15 3 9) || 15 * 3 = 45 (left: 9 45) || 6 * 10 = 60 (left: 3 60)",
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24 || Input: 2 3 6 8\nSteps:\n6 * 3 = 18 (left: 2 8 18)\n18 - 8 = 10 (left: 2 10)\n10 * 2 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((6 * 3) - 8) * 2 + 4 = 24",
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24",
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24",
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24"
            ],
            "Pruning": [
                "1<-1.4"
            ],
            "Evaluation": [
                0.001,
                60.0,
                60.0,
                60.0,
                40.001
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 2.2",
                "2 <- 3.2",
                "3 <- 3.3",
                "4 <- 3.1"
            ]
        },
        "Step 4": {
            "steps": [
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24 || Input: 6 6 6 4\nSteps:\n6 * 6 = 36 (left: 4 36)\n36 / 4 = 9 (left: 9)\n9 * 6 = 54 (left: 54)\n54 - 30 = 24 (left: 24)\nAnswer: ((6 * 6) / 4) * 6 = 24",
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 * 2 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (3 * 4) + (6 * 2) = 24",
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 * 2 = 12 (left: 12 12)\n12 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (6 * 2) = 24",
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24 || Input: 6 6 3 4\nSteps:\n6 * 4 = 24 (left: 6 3 24)\n6 - 3 = 3 (left: 3 24)\n3 * 24 = 24 (left: 24)\nAnswer: (6 * 4) - (6 - 3) = 24",
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24"
            ],
            "Pruning": [
                "0<-3.1",
                "1<-3.1",
                "2<-3.3",
                "3<-3.4"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 4.0",
                "2 <- 4.4",
                "3 <- 2.2",
                "4 <- 4.2"
            ]
        },
        "Step 5": {
            "steps": [
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24",
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24",
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24 || Input: 2 3 6 8\nSteps:\n2 * 3 = 6 (left: 6 8)\n6 + 8 = 14 (left: 14)\n14 + 6 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((2 * 3) + 8) + 6 = 24",
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24 || Input: 2 3 4 5\nSteps:\n2 * 3 = 6 (left: 4 5 6)\n6 + 4 = 10 (left: 5 10)\n10 * 5 = 50 (left: 50)\nAnswer: (2 * 3 + 4) * 5 = 24",
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n2 * 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (3 * 4) + (2 * 6) = 24"
            ],
            "Pruning": [
                "2<-4.1",
                "3<-0.1",
                "4<-3.1"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 5.2",
                "2 <- 3.3",
                "3 <- 5.4",
                "4 <- 5.1"
            ]
        },
        "Step 6": {
            "steps": [
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24 || Input: 2 3 4 8\nSteps:\n4 * 3 = 12 (left: 2 8 12)\n12 + 2 = 14 (left: 14 8)\n14 + 8 = 22 (left: 22)\n22 + 2 = 24 (left: 24)\nAnswer: ((4 * 3) + 2) + 8 + 2 = 24",
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24",
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24 || Input: 2 3 6 8\nSteps:\n3 * 8 = 24 (left: 2 6 24)\n2 * 6 = 12 (left: 12 24)\n12 * 24 = 288 (left: 288)\nAnswer: (2 * 6) * (3 * 8) = 24",
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24",
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24 || Input: 6 2 3 4\nSteps:\n6 * 4 = 24 (left: 2 3 24)\n2 + 3 = 5 (left: 5 24)\n5 * 24 = 120 (left: 120)\nAnswer: (6 * 4) * (2 + 3) = 24"
            ],
            "Pruning": [
                "0<-3.4",
                "2<-1.3",
                "4<-4.1"
            ],
            "Evaluation": [
                40.001,
                60.0,
                41.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 5.0",
                "2 <- 6.1",
                "3 <- 5.2",
                "4 <- 6.1"
            ]
        },
        "Step 7": {
            "steps": [
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24 || Input: 2 3 6 8\nSteps:\n3 * 8 = 24 (left: 2 6 24)\n6 / 2 = 3 (left: 3 24)\n3 * 24 = 72 (left: 72)\nAnswer: (3 * 8) * (6 / 2) = 24",
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24 || Input: 6 6 6 6\nSteps:\n6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 / 12 = 3 (left: 3)\nAnswer: (6 + 6) * (6 / 6) = 24",
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24 || Input: 2 3 5 6\nSteps:\n2 * 3 = 6 (left: 5 6 6)\n6 + 5 = 11 (left: 11 6)\n11 + 6 = 17 (left: 17)\n17 + 17 = 24\nAnswer: (((2 * 3) + 5) + 6) + 6 = 24",
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + (9 - 3)) = 24",
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24 || Input: 2 3 6 8\nSteps:\n2 * 3 = 6 (left: 6 8)\n6 + 8 = 14 (left: 14)\n14 + 6 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: (((2 * 3) + 6) + 8) + 4 = 24"
            ],
            "Pruning": [
                "0<-2.4",
                "1<-4.3",
                "2<-5.0",
                "4<-6.3"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 7.2",
                "1 <- 5.2",
                "2 <- 7.0",
                "3 <- 7.1",
                "4 <- 2.2"
            ]
        },
        "Step 8": {
            "steps": [
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24 || Input: 2 3 4 6\nSteps:\n4 * 6 = 24 (left: 2 3 24)\n3 + 2 = 5 (left: 5 24)\n5 * 24 = 120 (left: 120)\nAnswer: ((2 + 3) * 4) * 6 = 24",
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24",
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24 || Input: 2 3 5 6\nSteps:\n3 + 5 = 8 (left: 2 6 8)\n6 * 2 = 12 (left: 8 12)\n8 * 12 = 96 (left: 96)\nAnswer: (2 + (3 + 5)) * (6 * 2) = 24",
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24 || Input: 6 6 8 9\nSteps:\n6 + 8 = 14 (left: 6 9 14)\n6 * 9 = 54 (left: 54 14)\n54 - 14 = 40 (left: 40)\nAnswer: (6 + 8) * (6 * 9) = 24",
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24 || Input: 2 3 6 12\nSteps:\n12 / 6 = 2 (left: 2 3 2)\n2 * 3 = 6 (left: 6 2)\n6 * 2 = 12 (left: 12)\nAnswer: (2 * (12 / 6)) * 2 = 24"
            ],
            "Pruning": [
                "0<-6.0",
                "2<-7.0",
                "3<-7.0",
                "4<-7.1"
            ],
            "Evaluation": [
                40.001,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 7.0",
                "1 <- 8.3",
                "2 <- 8.1",
                "3 <- 6.0",
                "4 <- 7.4"
            ]
        },
        "Step 9": {
            "steps": [
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24 || Input: 2 3 4 6\nSteps:\n2 * 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 2 * 3 * 4 = 24",
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24 || Input: 6 6 7 9\nSteps:\n6 + 9 = 15 (left: 6 7 15)\n7 - 6 = 1 (left: 1 15)\n1 * 15 = 15 (left: 15)\n15 + 9 = 24 (left: 24)\nAnswer: ((6 + 9) + 7) + 6 = 24",
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24 || Input: 2 3 6 9\nSteps:\n2 * 3 = 6 (left: 6 9)\n6 + 9 = 15 (left: 15)\n15 + 6 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: (((2 * 3) + 6) + 9) + 3 = 24",
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n4 - 3 = 1 (left: 1 12)\n1 * 12 = 12 (left: 12)\n12 + 12 = 24 (left: 24)\nAnswer: (2 * 6) + (4 - 3) = 24",
                "5 + 3 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 3) = 24 || Input: 2 3 4 6\nSteps:\n2 * 3 = 6 (left: 4 6)\n6 - 4 = 2 (left: 2)\n2 * 2 * 6 = 24 (left: 24)\nAnswer: (2 * 3) * (4 + 6) = 24"
            ],
            "Pruning": []
        },
        "Input": "3 3 5 9",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "857": {
        "puzzle": "4 5 7 11",
        "Step 0": {
            "steps": [
                "7 + 11 = 18 (left: 4 5 18)",
                "4 * 5 = 20 (left: 7 20 11)",
                "5 * 7 = 35 (left: 4 35 11)",
                "4 * 5 = 20 (left: 7 20 11)",
                "7 - 4 = 3 (left: 3 5 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                2.0,
                41.0,
                2.001,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.2",
                "3 <- 0.2",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "11 - 5 = 6 (left: 4 6 11)",
                "7 + 5 = 12 (left: 4 12 ",
                "5 * 7 = 35 (left: 4 35 11) || 35 - 4 = 31 (left: 31 11)",
                "5 * 7 = 35 (left: 4 35 11) || 4 * 35 = 140 (left: 11 140)",
                "4 * 5 = 20 (left: 7 11 20)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.2",
                "2 <- 1.0",
                "3 <- INIT",
                "4 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "5 * 7 = 35 (left: 4 35 11) || 11 - 4 = 7 (left: 7 11)",
                "5 * 7 = 35 (left: 4 35 11) || 35 - 4 = 31 (left: 31 11)",
                "11 - 5 = 6 (left: 4 6 11) || 11 - 4 = 7 (left: 4 7)",
                "7 + 11 = 18 (left: 4 5 18)",
                "11 - 5 = 6 (left: 4 6 11) || 11 - 4 = "
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.0",
                "2 <- 1.0",
                "3 <- INIT",
                "4 <- 1.0"
            ]
        },
        "Step 3": {
            "steps": [
                "4 + 5 = 9 (left: 7 9 11)",
                "11 - 5 = 6 (left: 4 6 11) || 4 * 6 = 24 (left: 24 11)",
                "11 - 5 = 6 (left: 4 6 11) || 11 - 6 = ",
                "7 * 11 = 77 (left: 4 5 ",
                "11 - 5 = 6 (left: 4 6 11) || 11 - 6 = "
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                0.003,
                0.003,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 0.2",
                "2 <- 0.2",
                "3 <- 0.2",
                "4 <- 1.0"
            ]
        },
        "Step 4": {
            "steps": [
                "11 - 5 = 6 (left: 4 6 11) || 4 * 6 = 24 (left: 24 11)",
                "5 * 7 = 35 (left: 4 35 11) || 35 / 4 = 8.75 (left: 8.75 11)",
                "5 * 7 = 35 (left: 4 35 11) || 4 + 35 = 39 (left: 11 39)",
                "5 * 7 = 35 (left: 4 35 11) || 4 + 35 = 39 (left: 11 39)",
                "11 - 5 = 6 (left: 4 6 11) || 6 - 4 = 2 (left: 2 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                2.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 0.2",
                "2 <- 1.0",
                "3 <- 1.0",
                "4 <- INIT"
            ]
        },
        "Step 5": {
            "steps": [
                "11 - 5 = 6 (left: 4 6 11) || Input: 3 5",
                "5 * 7 = 35 (left: 4 35 11) || 11 / 4 = 2.75 (left: 2.75 11)",
                "11 - 5 = 6 (left: 4 6 11) || 4 + 6 = 10 (left: 10 11)",
                "11 - 5 = 6 (left: 4 6 11) || 11 - 6 = 5 (left: 4 5 11)",
                "7 + 4 = 11 (left: 5 11 "
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.0,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 4.1",
                "2 <- 4.1",
                "3 <- 1.0",
                "4 <- 0.1"
            ]
        },
        "Step 6": {
            "steps": [
                "11 - 5 = 6 (left: 4 6 11) || 11 / 4 = ",
                "5 * 7 = 35 (left: 4 35 11) || 35 / 4 = 8.75 (left: 8.75 11) || 11 / 8.75 = 1.257 (left: 1.257 11)",
                "5 * 7 = 35 (left: 4 35 11) || 35 / 4 = 8.75 (left: 8.75 11) || 8.75 * 11 = 96.25 (left: 96.25)",
                "11 - 5 = 6 (left: 4 6 11) || 6 + 11 = 17 (left: 4 17)",
                "4 * 5 = 20 (left: 7 20 11) || 11 * 7 = 77 (left: 20 77)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 1.0",
                "2 <- 1.4",
                "3 <- 0.2",
                "4 <- 0.2"
            ]
        },
        "Step 7": {
            "steps": [
                "5 * 7 = 35 (left: 4 35 11) || 35 / 4 = 8.75 (left: 8.75 11) || 8.75 / 11 = 0.7954545454545454 (left: 0.7954545454545454)",
                "11 - 5 = 6 (left: 4 6 11) || 11 - 4 = 7 (left: 4 7)",
                "4 * 5 = 20 (left: 7 11 20) || 11 - 7 = 4 (left: 4 20)",
                "5 * 7 = 35 (left: 4 35 11) || 4 + 35 = 39 (left: 11 39)",
                "5 * 7 = 35 (left: 4 35 11) || 4 + 35 = 39 (left: 11 39)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                21.0,
                0.002,
                21.001
            ],
            "Resampling": [
                "0 <- 7.2",
                "1 <- 7.2",
                "2 <- 4.1",
                "3 <- 7.4",
                "4 <- 7.2"
            ]
        },
        "Step 8": {
            "steps": [
                "4 * 5 = 20 (left: 7 11 20) || 11 - 7 = 4 (left: 4 20) || 4 + 20 = 24 (left: 20 24)",
                "4 * 5 = 20 (left: 7 11 20) || 11 - 7 = 4 (left: 4 20) || 20 / 4 = 5 (left: 5 20)",
                "5 * 7 = 35 (left: 4 35 11) || 35 / 4 = 8.75 (left: 8.75 11) || 8.75 / 11 = 0.795 (left: 0.795)",
                "5 * 7 = 35 (left: 4 35 11) || 4 + 35 = 39 (left: 11 39) || 11 - 39 = -28 (left: -28)",
                "4 * 5 = 20 (left: 7 11 20) || 11 - 7 = 4 (left: 4 20) || 4 + 20 = 24 (left: 20)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.0,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 8.1",
                "1 <- 8.1",
                "2 <- 8.1",
                "3 <- 8.1",
                "4 <- 8.1"
            ]
        },
        "Step 9": {
            "steps": [
                "4 * 5 = 20 (left: 7 11 20) || 11 - 7 = 4 (left: 4 20) || 20 / 4 = 5 (left: 5 20) || 5 + 20 = 25 (left: 25)",
                "4 * 5 = 20 (left: 7 11 20) || 11 - 7 = 4 (left: 4 20) || 20 / 4 = 5 (left: 5 20) || 3 + 9 = 12 (left: 12 27)",
                "4 * 5 = 20 (left: 7 11 20) || 11 - 7 = 4 (left: 4 20) || 20 / 4 = 5 (left: 5 20) || 5 * 20 = 100 (left: 100)",
                "4 * 5 = 20 (left: 7 11 20) || 11 - 7 = 4 (left: 4 20) || 20 / 4 = 5 (left: 5 20) || 10 * 3 = 30 (left: 30)",
                "4 * 5 = 20 (left: 7 11 20) || 11 - 7 = 4 (left: 4 20) || 20 / 4 = 5 (left: 5 20) || 20 - 5 = 15 (left: 15)"
            ],
            "Pruning": []
        },
        "Input": "4 5 7 11",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "858": {
        "puzzle": "4 9 12 12",
        "Step 0": {
            "steps": [
                "9 - 4 = 5 (left: 5 12 12)",
                "9 - 4 = 5 (left: 5 12 12)",
                "9 - 4 = 5 (left: 5 12 12)",
                "9 + 4 = 13 (left: 12 12 13)",
                "12 - 4 = 8 (left: 8 9 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                3.0,
                1.002,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 9 = 3 (left: 3 12 12)",
                "4 * 9 = 36 (left: 12 12 36)",
                "4 + 9 = 13 (left: 12 12 13)",
                "12 - 4 = 8 (left: ",
                "4 + 9 = 13 (left: 12 12 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                41.0,
                40.001,
                60.0,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.0",
                "2 <- 1.0",
                "3 <- 1.2",
                "4 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 9 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 - 9 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12)",
                "12 - 9 = 3 (left: 3 12 12) || 3 + 12 = 15 (left: 12 15)",
                "4 + 9 = 13 (left: 12 12 13) || 13 + 12 = 25 (left: 12 25)",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 12 36)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.002,
                0.003,
                0.003,
                40.001
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 2.4",
                "2 <- 1.2",
                "3 <- 2.4",
                "4 <- 2.4"
            ]
        },
        "Step 3": {
            "steps": [
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 12 36)",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 12 36) || 36 / 12 = 3 (left: 1 3 36)",
                "4 + 9 = 13 (left: 12 12 13) || 12 + 12 = 24 (left: 13 24)",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 12 36) || 36 - 12 = 24 (left: 1 24)",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 12 36) || 12 - 1 = 11 ("
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                3.0,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 3.3",
                "2 <- 3.3",
                "3 <- 1.2",
                "4 <- 1.2"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 4 = 8 (left: 8 12 12)",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 12 36) || 36 - 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 12 36) || 36 - 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "4 + 9 = 13 (left: 12 12 13) || Possible next steps:",
                "4 + 9 = 13 (left: 12 12 13) || 12 - 12 = 0 (left: 0 13)"
            ],
            "Pruning": [
                "1<-1.1",
                "2<-2.4"
            ],
            "Evaluation": [
                1.002,
                40.001,
                60.0,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 3.3",
                "2 <- 3.3",
                "3 <- 4.2",
                "4 <- 1.2"
            ]
        },
        "Step 5": {
            "steps": [
                "4 + 9 = 13 (left: 12 12 13) || 12 * 12 = 144 (left: 13 144)",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 12 36) || 36 - 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 12 36) || 36 - 12 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 12 36) || 1 * 12 = 12 (left: 12 36)",
                "4 + 9 = 13 (left: 12 12 13) || "
            ],
            "Pruning": [
                "1<-4.1",
                "2<-3.0"
            ],
            "Evaluation": [
                0.003,
                41.0,
                20.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 5.1",
                "2 <- 4.2",
                "3 <- 4.1",
                "4 <- 5.1"
            ]
        },
        "Step 6": {
            "steps": [
                "4 + 9 = 13 (left: 12 12 13) || 12 / 12 = 1 (left: 1 13)",
                "4 * 9 = 36 (left: 12 12 36) || 12 * 12 = 144 (left: 144 36)",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 12 36) || 1 + 12 = 13 (left: 13 36)",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 12 36)",
                "4 * 9 = 36 (left: 12 12 36) || 12 * 12 = 144 (left: 36 144)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                60.0,
                1.001
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 5.1",
                "2 <- 6.3",
                "3 <- 6.3",
                "4 <- 6.3"
            ]
        },
        "Step 7": {
            "steps": [
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 12 36)",
                "4 * 9 = 36 (left: 12 12 36) || 12 + 12 = 24 (left: 24 36)",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 12 36) || 12 - 1 = 11 (left: 11 36)",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 12 36) || 36 - 1 = 35 (left: 12 35)",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 12 36) || 36 - 1 = 35 (left: 12 35)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.001,
                0.002,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 3.0",
                "2 <- 4.2",
                "3 <- 5.2",
                "4 <- 6.3"
            ]
        },
        "Step 8": {
            "steps": [
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 12 36) || 12 + 1 = 13 (left: 13 36)",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 12 36) || 12 - 1 = 11 (left:",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 12 36) || 36 / 12 = 3 (left: 1 3)",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 12 36) || 12 * 3 = 36 (left: 1 36)",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 12 36) || 36 / 12 = 3 (left: 1 3)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.0,
                1.0,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 8.3",
                "1 <- 8.3",
                "2 <- 8.3",
                "3 <- 8.3",
                "4 <- 8.3"
            ]
        },
        "Step 9": {
            "steps": [
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 12 36) || 12 * 3 = 36 (left: 1 36) || 1 + 36 = 37 (left: 37)",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 12 36) || 12 * 3 = 36 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 12 36) || 12 * 3 = 36 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 12 36) || 12 * 3 = 36 (left: 1 36) || 1 + 36 = 37 (left: 37)",
                "4 * 9 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 12 36) || 12 * 3 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36)"
            ],
            "Pruning": []
        },
        "Input": "4 9 12 12",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "859": {
        "puzzle": "3 3 6 9",
        "Step 0": {
            "steps": [
                "3 + 6 = 9 (left: 9 6 9)",
                "3 + 3 = 6 (left: 6 6 9)",
                "6 + 3 = 9 (left: 3 9 9)",
                "3 * 3 = 9 (left: 6 9 9)",
                "9 / 3 = 3 (left: 3 6 "
            ],
            "Pruning": [],
            "Evaluation": [
                21.001,
                22.0,
                0.002,
                20.002,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.0",
                "2 <- 0.4",
                "3 <- 0.0",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "9 - 3 = 6 (left: 3 6 9)",
                "3 + 6 = 9 (left: 9 6 9) || 9 * 6 = 54 (left: 9 54)",
                "9 / 3 = 3 (left: 3 6  || 6 / 3 = 2 (left: 2)",
                "3 + 6 = 9 (left: 9 6 9) || 6 * 9 = 54 (left: 9 54)",
                "6 / 3 = 2 (left: 3 2 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                21.0,
                0.0,
                20.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 1.1",
                "2 <- 1.1",
                "3 <- 1.1",
                "4 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "3 + 6 = 9 (left: 9 6 9) || 6 - 9 = -3 (left: -3 9)",
                "3 + 6 = 9 (left: 9 6 9) || 9 * 6 = 54 (left: 9 54) || Input: 3 15",
                "3 + 6 = 9 (left: 9 6 9) || 9 * 6 = 54 (left: 9 54) || 9 * 6 = 54 (left: 54)",
                "3 + 6 = 9 (left: 9 6 9) || 9 * 6 = 54 (left: 9 54) || 54 / 9 = 6 (left: 6)",
                "3 + 6 = 9 (left: 9 6 9) || 6 * 9 = 54 (left: 9 54) || 9 + 54 = 63 (left: 63)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.0",
                "2 <- 0.0",
                "3 <- INIT",
                "4 <- 0.1"
            ]
        },
        "Step 3": {
            "steps": [
                "3 + 3 = 6 (left: 6 6 9)",
                "3 + 6 = 9 (left: 9 6 9) || 9 / 6 = 1.5 (left: 1.5 9)",
                "3 + 6 = 9 (left: 9 6 9) || 6 * 9 = 54 (left: 9 54)",
                "3 * 3 = 9 (left: 9 6 9)",
                "3 + 3 = 6 (left: 6 6 9) || 9 / 6 = 1.5 (left: 1.5 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                0.002,
                20.001,
                3.0,
                1.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 3.2",
                "2 <- 0.3",
                "3 <- 3.2",
                "4 <- 1.3"
            ]
        },
        "Step 4": {
            "steps": [
                "6 / 3 = 2 (left: 2 6 9)",
                "3 + 6 = 9 (left: 9 6 9) || 6 * 9 = 54 (left: 9 54) || 54 + 9 = 63 (left: 63)",
                "3 * 3 = 9 (left: 6 9 9) || 6 + 9 = 15 (left: 9 9 15)",
                "3 + 6 = 9 (left: 9 6 9) || 6 * 9 = 54 (left: 9 54) || 9 + 54 = 63 (left: 63)",
                "3 + 6 = 9 (left: 9 6 9) || 6 * 9 = 54 (left: 9 54) || 54 / 9 = 6 (left: 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 3.2",
                "2 <- 3.3",
                "3 <- 1.3",
                "4 <- 3.2"
            ]
        },
        "Step 5": {
            "steps": [
                "3 + 6 = 9 (left: 9 6 9) || 9 / 6 = 1.5 (left: 1.5 9)",
                "3 + 6 = 9 (left: 9 6 9) || 6 * 9 = 54 (left: 9 54) || 54 - 9 = 45 (left: 45)",
                "3 * 3 = 9 (left: 9 6 9) || 9 * 6 = 54 (left: 9 54)",
                "3 + 6 = 9 (left: 9 6 9) || 6 * 9 = 54 (left: 9 54) || 9 + 54 = 63 (left: 63)",
                "3 + 6 = 9 (left: 9 6 9) || 6 * 9 = 54 (left: 9 54) || 9 * 54 = 486 (left: 486) "
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                40.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 5.2",
                "2 <- 3.2",
                "3 <- 1.1",
                "4 <- 5.2"
            ]
        },
        "Step 6": {
            "steps": [
                "3 * 3 = 9 (left: 9 6 9) || 9 * 6 = 54 (left: 9 54) || 9 * 6 = 54",
                "3 * 3 = 9 (left: 9 6 9) || 9 * 6 = 54 (left: 9 54) || 9 + 54 = 63 (left: 63)",
                "3 + 6 = 9 (left: 9 6 9) || 6 * 9 = 54 (left: 9 54) || 54 - 9 = 45 (left: 45)",
                "3 + 6 = 9 (left: 9 6 9) || 9 * 6 = 54 (left: 9 54) || 54 / 9 = 6 (left: 6)",
                "3 * 3 = 9 (left: 9 6 9) || 9 * 6 = 54 (left: 9 54) || 54 / 9 = 6 (left: 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 5.2",
                "2 <- 3.2",
                "3 <- 5.2",
                "4 <- 0.0"
            ]
        },
        "Step 7": {
            "steps": [
                "3 * 3 = 9 (left: 9 6 9) || 9 * 6 = 54 (left: 9 54) || 54 / 9 = 6 (left: 6)",
                "3 * 3 = 9 (left: 9 6 9) || 9 * 6 = 54 (left: 9 54) || 9 * 6 = 54 (left: 54)",
                "3 + 6 = 9 (left: 9 6 9) || 6 * 9 = 54 (left: 9 54) || 9 * 6 = 54 (left: 54)",
                "3 * 3 = 9 (left: 9 6 9) || 9 * 6 = 54 (left: 9 54) || 9 * 6 = 54 (left: 54)",
                "3 + 6 = 9 (left: 9 6 9) || 9 * 6 = 54 (left: 54 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                40.001
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 7.4",
                "2 <- 7.4",
                "3 <- 7.4",
                "4 <- 7.4"
            ]
        },
        "Step 8": {
            "steps": [
                "3 * 3 = 9 (left: 9 6 9) || 9 * 6 = 54 (left: 9 54) || 54 / 9 = 6 (left: 6)",
                "3 + 6 = 9 (left: 9 6 9) || 9 * 6 = 54 (left: 54 9) || 54 + 9 = 63 (left: 9 63)",
                "3 + 6 = 9 (left: 9 6 9) || 9 * 6 = 54 (left: 54 9) || 9 + 54 = 63 (left: 63)",
                "3 + 6 = 9 (left: 9 6 9) || 9 * 6 = 54 (left: 54 9) || 54 / 9 = 6 (left: 6 9)",
                "3 + 6 = 9 (left: 9 6 9) || 9 * 6 = 54 (left: 54 9) || 54 / 9 = 6 (left: 6 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.001,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 8.3",
                "1 <- 5.3",
                "2 <- 7.0",
                "3 <- 8.0",
                "4 <- 8.0"
            ]
        },
        "Step 9": {
            "steps": [
                "3 + 6 = 9 (left: 9 6 9) || 9 * 6 = 54 (left: 54 9) || 54 / 9 = 6 (left: 6 9) || 7 - 3 = 4 (left: 4 5)",
                "3 + 6 = 9 (left: 9 6 9) || 6 * 9 = 54 (left: 9 54) || 9 + 54 = 63 (left: 63) || 6 * 3 = 18 (left: 63 18)",
                "3 * 3 = 9 (left: 9 6 9) || 9 * 6 = 54 (left: 9 54) || 54 / 9 = 6 (left: 6) || 6 - 2 = 4 (left: 4)",
                "3 * 3 = 9 (left: 9 6 9) || 9 * 6 = 54 (left: 9 54) || 54 / 9 = 6 (left: 6) || 6 / 2 = 3 (left: 3 8)",
                "3 * 3 = 9 (left: 9 6 9) || 9 * 6 = 54 (left: 9 54) || 54 / 9 = 6 (left: 6) || 6 - 2 = 4 (left: 4)"
            ],
            "Pruning": []
        },
        "Input": "3 3 6 9",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            }
        ]
    },
    "860": {
        "puzzle": "3 5 9 13",
        "Step 0": {
            "steps": [
                "13 - 5 = 8 (left: 3 8 9)",
                "13 - 9 = 4 (left: 3 5 4)",
                "5 * 3 = 15 (left: 9 13 15)",
                "13 - 9 = 4 (left: 3 5 4)",
                "13 - 5 = 8 (left: 3 8 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                3.0,
                2.001,
                3.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.0",
                "2 <- 0.4",
                "3 <- 0.0",
                "4 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9)",
                "13 - 5 = 8 (left: 3 8 9) || 3 + 8 = 11 (left: 8 9 11)",
                "13 - 5 = 8 (left: 3 8 9) || 3 * 8 = 24 (left: 9 24)",
                "13 - 5 = 8 (left: 3 8 9) || 3 + 8 = 11 (left: 9 11)",
                "13 - 5 = 8 (left: 3 8 9) || 9 - 8 = "
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                3.0,
                20.002,
                1.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.0",
                "2 <- 0.0",
                "3 <- 1.2",
                "4 <- 0.4"
            ]
        },
        "Step 2": {
            "steps": [
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || ",
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 2.67 * 9 = 24.03 (left: 24.03)",
                "13 - 5 = 8 (left: 3 8 9) || 3 * 8 = 24 (left: 9 24)",
                "13 - 5 = 8 (left: 3 8 9) || 3 * 8 = 24 (left: 9 24) || 9 * 24 = 216 (left: 216)",
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 1.0",
                "2 <- 0.0",
                "3 <- 2.4",
                "4 <- 1.0"
            ]
        },
        "Step 3": {
            "steps": [
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 9 / 2.67 = 3.36 (left: 3.36)",
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 2.67 * 9 = 24.03 (left: 24.03)",
                "13 - 5 = 8 (left: 3 8 9) || 8 - 3 = 5 (left: 5 8 9)",
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || Possible next steps:",
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 3 + 5 = 8 (left: "
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                3.0,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 2.4",
                "2 <- 0.0",
                "3 <- 2.4",
                "4 <- 2.4"
            ]
        },
        "Step 4": {
            "steps": [
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9)",
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 9 / 2.67 = 3.37 (left: 3.37)",
                "13 - 5 = 8 (left: 3 8 9) || 9 - 3 = 6 (left: 6 8)",
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 9 / 2.67 = 3.37 (left: 3.37)",
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 2.67 + 9 = 11.67 (left: 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.002,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 4.0",
                "2 <- 0.0",
                "3 <- 4.0",
                "4 <- 4.0"
            ]
        },
        "Step 5": {
            "steps": [
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 9 / 2.67 = 3.36 (left: 3.36)",
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 9 - 2.67 = 6.33 (left: 6.33)",
                "13 - 5 = 8 (left: 3 8 9) || 8 - 3 = 5 (left: 5 9)",
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 9 - 2.67 = 6.33 (left: 6.33)",
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 2.67 + 9 = 11.67 (left: 11.67)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 2.4",
                "2 <- 2.4",
                "3 <- 2.4",
                "4 <- 2.4"
            ]
        },
        "Step 6": {
            "steps": [
                "13 - 5 = 8 (left: 3 8 9) || 8 - 3 = 5 (left: 5 8 9) || 9 - 5 = 4 (left: 4 8)",
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 3 + 5 = 8 (left: ",
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 9 / 2.67 = 3.37 (left: 3.37)",
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 2.67 + 9 = 11.67 (left: 11.67)",
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 9 - 2.67 = 6.33 (left: 6.33)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.0,
                0.002,
                0.0,
                20.001
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 4.0",
                "2 <- 6.4",
                "3 <- 6.4",
                "4 <- 4.0"
            ]
        },
        "Step 7": {
            "steps": [
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 9 - 2.67 = 6.33 (left: 6.33) || There are no possible next steps for the input 6.33 as it is already a single number.",
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 9 * 2.67 = 24.03 (left: 24.03)",
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 9 - 2.67 = 6.33 (left: 6.33) || 6.33 * 2 = 12.66",
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 9 - 2.67 = 6.33 (left: 6.33) || There is only one number given, so there are no possible next steps.",
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || Input: 5 3 7"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 4.0",
                "2 <- 4.0",
                "3 <- 2.4",
                "4 <- 4.0"
            ]
        },
        "Step 8": {
            "steps": [
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 9 / 2.67 = 3.36 (left: 3.36)",
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 2.67 + 9 = 11.67 (left: 11.67)",
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 9 / 2.67 = 3.36 (left: 3.36)",
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 9 - 2.67 = 6.33 (left: 6.33)",
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 9 / 2.67 = 3.36 (left: 2.67 3.36)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 6.4",
                "2 <- 6.4",
                "3 <- 6.4",
                "4 <- 6.4"
            ]
        },
        "Step 9": {
            "steps": [
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 9 - 2.67 = 6.33 (left: 6.33) || There is only one number given in the input (6.33), so there are no possible next steps to calculate.",
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 9 - 2.67 = 6.33 (left: 6.33) || 6.33 + 2 = 8.33",
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 9 - 2.67 = 6.33 (left: 6.33) || There are no possible next steps for the input 6.33 as it is a single number and not an equation with multiple numbers to operate on.",
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 9 - 2.67 = 6.33 (left: 6.33) || There are no possible next steps for the input 6.33.",
                "13 - 5 = 8 (left: 3 8 9) || 8 / 3 = 2.67 (left: 2.67 9) || 9 - 2.67 = 6.33 (left: 6.33) || There is only one number given, so there are no possible next steps to calculate."
            ],
            "Pruning": []
        },
        "Input": "3 5 9 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "861": {
        "puzzle": "3 7 8 13",
        "Step 0": {
            "steps": [
                "13",
                "13 - 7 = 6 (left: 3 6 ",
                "7 - 3 = 4 (left: 4 8 13)",
                "13 + 3 = 16 (left: 7 8 16)",
                "3 * 7 = 21 (left: 8 13 21)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                21.0,
                1.002,
                3.0,
                3.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.1",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "13 - 7 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3)",
                "13 - 7 = 6 (left: 3 6  || 3 + 6 = 9 (left: 9)",
                "13 - 3 = 10 (left: 7 8 10)",
                "3 * 7 = 21 (left: 8 13 21)",
                "7 - 3 = 4 (left: 4 8 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                41.0,
                2.001,
                3.0
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8)",
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 10)",
                "13 - 3 = 10 (left: 7 8 10)",
                "7 - 3 = 4 (left: 4 8 13)",
                "13 - 3 = 10 (left: 7 8 10) || 10 / 7 = 1.428571428"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                3.0,
                2.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 2.0",
                "2 <- INIT",
                "3 <- 2.2",
                "4 <- 1.2"
            ]
        },
        "Step 3": {
            "steps": [
                "13 - 3 = 10 (left: 7 8 10) || 7 * 10",
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "7 - 3 = 4 (left: 4 7 13)",
                "13 - 3 = 10 (left: 7 8 10) || 10 - 8 = 2 (left: 2 8)",
                "13 - 3 = 10 (left: 7 8 10) || 7 * 8 = 56 (left: 10 56)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                21.001,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 3.2",
                "2 <- 0.1",
                "3 <- 3.2",
                "4 <- 2.2"
            ]
        },
        "Step 4": {
            "steps": [
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (13 - 3) * (10 - 7) = 24",
                "7 - 3 = 4 (left: 4 7 13) || 4 + 7 = 11 (left: 11 13)",
                "13 - 7 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18)",
                "7 - 3 = 4 (left: 4 7 13) || 7 * 4 = 28 (left: 28 13)",
                "13 - 3 = 10 (left: 7 8 10) || 10 / 7"
            ],
            "Pruning": [
                "0<-0.1"
            ],
            "Evaluation": [
                22.0,
                60.0,
                40.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 4.2",
                "2 <- 1.4",
                "3 <- 2.0",
                "4 <- 4.1"
            ]
        },
        "Step 5": {
            "steps": [
                "13 - 3 = 10 (left: 7 8 10) || 7 * 8 = 56 (left: 10 56) || 56 / 10 = 5.6 (left: 5.6)",
                "13 - 7 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18) || 18 - 8 = 10 (left: 10)",
                "7 - 3 = 4 (left: 4 8 13) || 4 + 8 = 12 (left: 12 13)",
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "7 - 3 = 4 (left: 4 7 13) || 4 + 7 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 3.1",
                "2 <- 2.0",
                "3 <- 4.0",
                "4 <- 3.1"
            ]
        },
        "Step 6": {
            "steps": [
                "7 - 3 = 4 (left: 4 7 13) || 4 + 7 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24)",
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (10 - 7) * 8 = 24",
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "13 - 7 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18)",
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (13 - 3) - (10 - 7) * 8 = 24"
            ],
            "Pruning": [
                "1<-4.1",
                "4<-2.0"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.002,
                20.0,
                60.0
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 6.1",
                "2 <- 6.4",
                "3 <- 6.0",
                "4 <- 4.1"
            ]
        },
        "Step 7": {
            "steps": [
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "7 - 3 = 4 (left: 4 7 13) || 4 + 7 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24)",
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 8 / 3 = 2.66666667 (left: 2.66666667) ",
                "7 - 3 = 4 (left: 4 7 13) || 4 + 7 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((7 - 3) + 4) + 13 = 24",
                "7 - 3 = 4 (left: 4 7 13) || 4 + 7 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)"
            ],
            "Pruning": [
                "3<-6.0"
            ],
            "Evaluation": [
                0.0,
                60.0,
                0.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 6.0",
                "2 <- 6.4",
                "3 <- 6.4",
                "4 <- 6.0"
            ]
        },
        "Step 8": {
            "steps": [
                "13 - 7 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18) || 18 + 8 = 26",
                "7 - 3 = 4 (left: 4 7 13) || 4 + 7 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((7 - 3) + 4) + 13 = 24",
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "7 - 3 = 4 (left: 4 7 13) || 4 + 7 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((7 - 3) + 4) + 13 = 24"
            ],
            "Pruning": [
                "1<-7.1",
                "4<-7.1"
            ],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 7.1",
                "1 <- 7.1",
                "2 <- 3.1",
                "3 <- 8.4",
                "4 <- 7.1"
            ]
        },
        "Step 9": {
            "steps": [
                "7 - 3 = 4 (left: 4 7 13) || 4 + 7 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((7 - 3) + 4) + 13 = 24",
                "7 - 3 = 4 (left: 4 7 13) || 4 + 7 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((7 - 3) + 4) + 13 = 24",
                "13 - 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (13 - 3) * (10 - 7) = 24",
                "7 - 3 = 4 (left: 4 7 13) || 4 + 7 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((7 - 3) + 4) + 13 = 24",
                "7 - 3 = 4 (left: 4 7 13) || 4 + 7 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((7 - 3) + 4) + 13 = 24"
            ],
            "Pruning": []
        },
        "Input": "3 7 8 13",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "862": {
        "puzzle": "4 4 5 7",
        "Step 0": {
            "steps": [
                "7 - 5 = 2 (left: 2 4 ",
                "7 - 4 = 3 (left: 3 4 5)",
                "4 + 4 = 8 (left: 5 7 8)",
                "4 + 4 = 8 (left: 5 7 8)",
                "4 / 4 = 1 (left: 1 5 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                2.001,
                2.0,
                3.0,
                2.001
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- INIT",
                "2 <- 0.3",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "4 / 4 = 1 (left: 1 5 7) || 5 - 1 = 4 (left: 4 7)",
                "4 + 4 = 8 (left: 5 7 8)",
                "4 + 4 = 8 (left: 5 7 8) || 7 - 5 = 2 (left: 2 8)",
                "5 + 4 = 9 (left: 4 7 9)",
                "4 + 4 = 8 (left: 5 7 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                2.0,
                0.001,
                3.0,
                2.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- INIT",
                "4 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "7 - 4 = 3 (left: 3 4 5)",
                "7 - 4 = 3 (left: 4 5 3)",
                "7 - 4 = 3 (left: 3 4 5) || 3 + 5 = 8 (left: 4 8)",
                "4 + 4 = 8 (left: 5 7 8)",
                "7 - 4 = 3 (left: 3 4 5) || 3 * 4 = 12 (left: 5 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                2.001,
                20.002,
                3.0,
                2.001
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.2",
                "2 <- 2.2",
                "3 <- 2.2",
                "4 <- 2.2"
            ]
        },
        "Step 3": {
            "steps": [
                "7 - 4 = 3 (left: 3 4 5) || 3 + 5 = 8 (left: 4 8) || 4 * 8 = 32 (left: 32)",
                "7 - 4 = 3 (left: 3 4 5) || 3 + 5 = 8 (left: 4 8) || 4 + 8 = 12 (left: 12)",
                "7 - 4 = 3 (left: 3 4 5) || 3 + 5 = 8 (left: 4 8) || 8 / 4 = 2 (left: 2 8)",
                "7 - 4 = 3 (left: 3 4 5) || 3 + 5 = 8 (left: 4 8) || 4 * 8 = 32 (left: 32)",
                "7 - 4 = 3 (left: 3 4 5) || 3 + 5 = 8 (left: 4 8) || 8 / 4 = 2 (left: 2 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                1.001,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 3.2",
                "2 <- INIT",
                "3 <- 1.3",
                "4 <- 2.1"
            ]
        },
        "Step 4": {
            "steps": [
                "7 - 4 = 3 (left: 3 4 5) || 3 + 5 = 8 (left: 4 8) || 8 / 4 = 2 (left: 2 8) || 2 + 8 = 10 (left: 10)",
                "7 - 4 = 3 (left: 3 4 5) || 3 + 5 = 8 (left: 4 8) || 8 / 4 = 2 (left: 2 8) || 8 - 2 = 6 (left: 6)",
                "4 * 4 = 16 (left: 5 7 16)",
                "5 + 4 = 9 (left: 4 7 9) || 9 - 4 = 5 (left: 5 7)",
                "7 - 4 = 3 (left: 4 5 3) || 4 * 5 = 20 (left: 3 20)"
            ],
            "Pruning": [
                "0<-2.2",
                "1<-2.4"
            ],
            "Evaluation": [
                0.003,
                0.003,
                1.002,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 2.2",
                "2 <- 3.4",
                "3 <- INIT",
                "4 <- 3.4"
            ]
        },
        "Step 5": {
            "steps": [
                "4 + 4 = 8 (left: 5 7 8) || 7 - 5 = 2 (left: 2 8)",
                "7 - 4 = 3 (left: 3 4 5) || 3 + 5 = 8 (left: 4 8) || 8 / 4 = 2 (left: 2 8)",
                "7 - 4 = 3 (left: 3 4 5) || 3 + 5 = 8 (left: 4 8) || 8 / 4 = 2 (left: 2 8) || 8 / 2 = 4 (left: 4)",
                "7 - 4 = 3 (left: 4 4 3)",
                "7 - 4 = 3 (left: 3 4 5) || 3 + 5 = 8 (left: 4 8) || 8 / 4 = 2 (left: 2 8) || Input: 8"
            ],
            "Pruning": [
                "2<-2.2"
            ],
            "Evaluation": [
                0.003,
                0.003,
                1.002,
                22.0,
                0.003
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 5.3",
                "2 <- 5.3",
                "3 <- 5.3",
                "4 <- 2.2"
            ]
        },
        "Step 6": {
            "steps": [
                "7 - 4 = 3 (left: 4 4 3) || 4 + 3 = 7 (left: 4 7)",
                "7 - 4 = 3 (left: 4 4 3) || 3 / 4 = 0.75 (",
                "7 - 4 = 3 (left: 4 4 3) || 4 * 4 = 16 (left: 16 3)",
                "7 - 4 = 3 (left: 4 4 3) || 4 * 4 = 16 (left: 16 3)",
                "7 - 4 = 3 (left: 3 4 5) || 3 + 5 = 8 (left: 4 8) || 4 * 8 = 32 (left: 32)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 5.3",
                "2 <- 6.3",
                "3 <- 2.1",
                "4 <- 3.2"
            ]
        },
        "Step 7": {
            "steps": [
                "7 - 4 = 3 (left: 3 4 5) || 3 + 5 = 8 (left: 4 8) || 4 * 8 = 32 (left: 8 32)",
                "7 - 4 = 3 (left: 4 4 3) || 4 + 4 = 8 (left: 3 8)",
                "7 - 4 = 3 (left: 4 4 3) || 4 * 4 = 16 (left: 16 3) || 16 * 3 = 48 (left: 48)",
                "7 - 4 = 3 (left: 4 5 3) || 4 - 5 = -1 (left: -1 3)",
                "7 - 4 = 3 (left: 3 4 5) || 3 + 5 = 8 (left: 4 8) || 8 / 4 = 2 (left: 2 8) || 8 / 2 = 4 (left: 4)"
            ],
            "Pruning": [
                "4<-2.2"
            ],
            "Evaluation": [
                20.002,
                60.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 7.1",
                "1 <- 7.1",
                "2 <- 7.1",
                "3 <- 7.1",
                "4 <- 7.1"
            ]
        },
        "Step 8": {
            "steps": [
                "7 - 4 = 3 (left: 4 4 3) || 4 + 4 = 8 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "7 - 4 = 3 (left: 4 4 3) || 4 + 4 = 8 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "7 - 4 = 3 (left: 4 4 3) || 4 + 4 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "7 - 4 = 3 (left: 4 4 3) || 4 + 4 = 8 (left: 3 8) || 8 / 3 = 2.66666666667 (left: 8)",
                "7 - 4 = 3 (left: 4 4 3) || 4 + 4 = 8 (left: 3 8) || 5 + 5 = 10 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                0.001,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 7.0",
                "1 <- 7.0",
                "2 <- 7.0",
                "3 <- 7.0",
                "4 <- 7.0"
            ]
        },
        "Step 9": {
            "steps": [
                "7 - 4 = 3 (left: 3 4 5) || 3 + 5 = 8 (left: 4 8) || 4 * 8 = 32 (left: 8 32) || 8 * 4 = 32 (left: 32)",
                "7 - 4 = 3 (left: 3 4 5) || 3 + 5 = 8 (left: 4 8) || 4 * 8 = 32 (left: 8 32) || 8 + 32 = 40 (left: 40)",
                "7 - 4 = 3 (left: 3 4 5) || 3 + 5 = 8 (left: 4 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24)",
                "7 - 4 = 3 (left: 3 4 5) || 3 + 5 = 8 (left: 4 8) || 4 * 8 = 32 (left: 8 32) || 8 + 32 = 40 (left: 40)",
                "7 - 4 = 3 (left: 3 4 5) || 3 + 5 = 8 (left: 4 8) || 4 * 8 = 32 (left: 8 32) || 8 * 4 = 32 (left: 32)"
            ],
            "Pruning": [
                "0<-5.4",
                "1<-5.4",
                "2<-5.4",
                "3<-5.4",
                "4<-5.4"
            ]
        },
        "Input": "4 4 5 7",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "863": {
        "puzzle": "1 5 5 11",
        "Step 0": {
            "steps": [
                "5 - 1 = 4 (left: 4 5 11)",
                "11 - 1 = 10 (left: 5 5 ",
                "1 + 5 = 6 (left: 5 6 11)",
                "1 + 5 = 6 (left: 5 6 11)",
                "1 + 5 = 6 (left: 5 6 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                21.001,
                60.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.2",
                "2 <- 0.3",
                "3 <- 0.2",
                "4 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 5 = 6 (left: 5 6 11) || 6 / 5 = 1.2 (left: 1.2 11)",
                "1 + 5 = 6 (left: 5 6 11) || 6 / 5 = 1.2 (left: 1.2 11)",
                "1 + 5 = 6 (left: 5 6 11) || 6 - 5 = 1 (left: 1 11)",
                "1 + 5 = 6 (left: 5 6 11) || 6 / 5 = 1.2 (left: 1.2 11)",
                "1 + 5 = 6 (left: 5 6 11) || 5 * 6 = 30 (left: 30)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                1.001,
                20.0,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 0.2",
                "2 <- 0.4",
                "3 <- 1.2",
                "4 <- 0.4"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 5 = 6 (left: 5 6 11) || 6 - 5 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 + 5 = 6 (left: 5 6 11) || 11 - 6 = 5 (left: 5 11)",
                "1 + 5 = 6 (left: 5 6 11) || 5 + 6 = 11 (left: 11)",
                "1 + 5 = 6 (left: 5 6 11) || 6 - 5 = 1 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "1 + 5 = 6 (left: 5 6 11) || 5 * 6 = 30 (left: 30 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.2",
                "2 <- 0.4",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 5 = 6 (left: 5 6 11) || 5 * 6 = 30 (left: 30 11)",
                "1 + 5 = 6 (left: 5 6 11) || 5 * 6 = 30 (left: 30 11)",
                "1 + 5 = 6 (left: 5 6 11) || 6 / 5 = 1.2 (left: 1.2 11)",
                "1 + 5 = 6 (left: 5 6 11)",
                "1 + 5 = 6 (left: 5 6 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.002,
                0.0,
                22.0,
                22.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.2",
                "2 <- INIT",
                "3 <- 3.4",
                "4 <- 0.2"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 5 = 6 (left: 5 6 11) || 5 + 6 = 11 (left: 11)",
                "1 + 5 = 6 (left: 5 6 11) || 6 - 5 = 1 (left: 1 11)",
                "5 * 1 = 5 (left: 5 5 11)",
                "1 + 5 = 6 (left: 5 6 11) || 11 - 5 = 6 (left: 6 11)",
                "1 + 5 = 6 (left: 5 6 11) || Input: 3 3"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                60.0,
                2.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 3.3",
                "2 <- 4.1",
                "3 <- 0.4",
                "4 <- 3.4"
            ]
        },
        "Step 5": {
            "steps": [
                "5 * 1 = 5 (left: 5 5 11) || 5 + 5 = 10 (left: 10 11)",
                "1 + 5 = 6 (left: 5 6 11) || 5 * 6 = 30 (left: 30 11)",
                "1 + 5 = 6 (left: 5 6 11) || 6 - 5 = 1 (left: 1 11) || 1 + 11 = 12",
                "1 + 5 = 6 (left: 5 6 11) || 5 * 6 = 30 (left: 30)",
                "1 + 5 = 6 (left: 5 6 11) || 6 - 5 = 1 (left: 1 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                20.001,
                40.0
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- INIT",
                "2 <- 4.1",
                "3 <- 5.3",
                "4 <- 0.2"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 5 = 6 (left: 5 6 11) || 5 * 6 = 30 (left: 30) || 30 - 2 = 28 (left: 28)",
                "5 / 1 = 5 (left: 5 5 11)",
                "1 + 5 = 6 (left: 5 6 11) || 6 - 5 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 + 5 = 6 (left: 5 6 11) || 5 * 6 = 30 (left: 30) || There are no possible next steps with the input of 30.",
                "1 + 5 = 6 (left: 5 6 11) || 5 * 6 = 30 (left: 30 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                21.0,
                0.002,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 5.3",
                "2 <- 6.1",
                "3 <- 4.1",
                "4 <- 4.1"
            ]
        },
        "Step 7": {
            "steps": [
                "1 + 5 = 6 (left: 5 6 11) || 6 - 5 = 1 (left: 1 11) || 1 + 11 = 12 (left: 11)",
                "1 + 5 = 6 (left: 5 6 11) || 5 * 6 = 30 (left: 30) || There are no possible next steps with the input 30.",
                "5 / 1 = 5 (left: 5 5 11) || 5 + 11 = 16 (left: 5 16)",
                "1 + 5 = 6 (left: 5 6 11) || 6 - 5 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 + 5 = 6 (left: 5 6 11) || 6 - 5 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                0.001,
                0.0,
                0.001
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 5.4",
                "2 <- 4.1",
                "3 <- 5.3",
                "4 <- 5.4"
            ]
        },
        "Step 8": {
            "steps": [
                "1 + 5 = 6 (left: 5 6 11) || 6 - 5 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 + 5 = 6 (left: 5 6 11) || 6 - 5 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 + 5 = 6 (left: 5 6 11) || 6 - 5 = 1 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "1 + 5 = 6 (left: 5 6 11) || 5 * 6 = 30 (left: 30) || 30 - 2 = 28 (left: 28)",
                "1 + 5 = 6 (left: 5 6 11) || 6 - 5 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 8.2",
                "1 <- 7.1",
                "2 <- 8.1",
                "3 <- 8.1",
                "4 <- 6.0"
            ]
        },
        "Step 9": {
            "steps": [
                "1 + 5 = 6 (left: 5 6 11) || 6 - 5 = 1 (left: 1 11) || 1 + 11 = 12 (left: 12) || 12 / 2 = 6 (left: 6)",
                "1 + 5 = 6 (left: 5 6 11) || 5 * 6 = 30 (left: 30) || There are no possible next steps with the input 30. || There are no possible next steps with the input 30.",
                "1 + 5 = 6 (left: 5 6 11) || 6 - 5 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10) || 10 + 2 = 12",
                "1 + 5 = 6 (left: 5 6 11) || 6 - 5 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10) || 10 + 10 = 20",
                "1 + 5 = 6 (left: 5 6 11) || 5 * 6 = 30 (left: 30) || 30 - 2 = 28 (left: 28) || 8 + 8 = 16 (left: 16)"
            ],
            "Pruning": []
        },
        "Input": "1 5 5 11",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            }
        ]
    },
    "864": {
        "puzzle": "2 4 6 13",
        "Step 0": {
            "steps": [
                "2 + 4 = 6 (left: 6 6 13)",
                "2 + 4 = 6 (left: 6 6 13)",
                "4 + 6 = 10 (left: 2 10 13)",
                "2 + 4 = 6 (left: 6 6 13)",
                "4 * 2 = 8 (left: 8 6 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                2.001,
                0.003,
                1.001,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.4",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "4 + 6 = 10 (left: 2 10 13)",
                "4 * 2 = 8 (left: 8 6 13) || 8 + 6 = 14 (left: 14 13)",
                "4 + 6 = 10 (left: 2 10 13)",
                "2 + 4 = 6 (left: 6 6 13)",
                "4 + 6 = 10 (left: 2 10 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.3",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 4 = 8 (left: 8 6 13)",
                "2 + 4 = 6 (left: 6 6 13) || 13 + 6 = 19 (left: 6 19)",
                "4 * 6 = 24 (left: 2 24 13)",
                "6 * 2 = 12 (left: 4 12 13)",
                "2 + 4 = 6 (left: 6 6 13) || 6 + 6 = 12 (left: 12 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                0.003,
                20.002,
                21.001,
                0.003
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.2",
                "2 <- 2.2",
                "3 <- 2.3",
                "4 <- 2.3"
            ]
        },
        "Step 3": {
            "steps": [
                "6 * 2 = 12 (left: 4 12 13) || 13 - 4 = 9 (left: 4 9)",
                "4 * 6 = 24 (left: 2 24 13) || 24 / 2 = 12 (left: 12 13)",
                "4 * 6 = 24 (left: 2 24 13) || Input: 3 9",
                "6 * 2 = 12 (left: 4 12 13) || 13 - 12 = 1 (left: 1 13)",
                "6 * 2 = 12 (left: 4 12 13) || Input: 3 1 4"
            ],
            "Pruning": [],
            "Evaluation": [
                22.0,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.3",
                "2 <- 3.0",
                "3 <- 2.2",
                "4 <- 2.2"
            ]
        },
        "Step 4": {
            "steps": [
                "4 * 6 = 24 (left: 2 24 13) || 24 - 2 = 22 (left: 13 22)",
                "6 * 2 = 12 (left: 4 12 13) || 4 * 12 = 48 (left: 48 13)",
                "6 * 2 = 12 (left: 4 12 13) || 13 - 4 = 9 (left: 4 9) || 6 / 3 = 2 (left: 2)",
                "4 * 6 = 24 (left: 2 24 13) || 13 - 2 = 11 (left: 11 11)",
                "4 * 6 = 24 (left: 2 24 13) || 24 / 2 = 12 (left: 12 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.001,
                0.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 3.0",
                "2 <- INIT",
                "3 <- 2.2",
                "4 <- INIT"
            ]
        },
        "Step 5": {
            "steps": [
                "6 * 2 = 12 (left: 4 12 13) || 13 - 4 = 9 (left: 4 9) || 4 + 9 = 13 (left: 9)",
                "6 * 2 = 12 (left: 4 12 13) || 13 - 4 = 9 (left: 4 9) || 7 + 3 = 10 (left: 5)",
                "4 + 6 = 10 (left: 2 10 13)",
                "4 * 6 = 24 (left: 2 24 13) || 24 - 13 = 11 (left: 2 11)",
                "6 + 13 = 19 (left: 2 4 19)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.002,
                0.003,
                0.001,
                1.002
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 3.0",
                "2 <- INIT",
                "3 <- 3.0",
                "4 <- 2.0"
            ]
        },
        "Step 6": {
            "steps": [
                "6 * 2 = 12 (left: 4 12 13) || 4 * 12 = 48 (left: 48 13) || 48 * 13 = 624 (left: 624)",
                "6 * 2 = 12 (left: 4 12 13) || 13 - 4 = 9 (left: 4 9) || 9 - 4 = 5 (left: 5)",
                "2 + 4 = 6 (left: 6 6 13)",
                "6 * 2 = 12 (left: 4 12 13) || 13 - 4 = 9 (left: 4 9) || 4 * 9 = 36 (left: 36)",
                "2 * 4 = 8 (left: 8 6 13) || 8 * 6 = 48 (left: 48 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                3.0,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 6.2",
                "2 <- 6.3",
                "3 <- 6.3",
                "4 <- 6.3"
            ]
        },
        "Step 7": {
            "steps": [
                "6 * 2 = 12 (left: 4 12 13) || 13 - 4 = 9 (left: 4 9) || 4 * 9 = 36 (left: 36) || 36 / 2 = 18",
                "2 + 4 = 6 (left: 6 6 13) || 13 / 6 = 2.1666666666666665 (left: 6 2.166666666",
                "6 * 2 = 12 (left: 4 12 13) || 13 - 4 = 9 (left: 4 9) || 4 * 9 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 2 = 12 (left: 4 12 13) || 13 - 4 = 9 (left: 4 9) || 4 * 9 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 2 = 12 (left: 4 12 13) || 13 - 4 = 9 (left: 4 9) || 4 * 9 = 36 (left: 36) || There are no possible next steps with the input of 36."
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                2.001,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 6.3",
                "2 <- 6.3",
                "3 <- 6.3",
                "4 <- 6.3"
            ]
        },
        "Step 8": {
            "steps": [
                "6 * 2 = 12 (left: 4 12 13) || 13 - 4 = 9 (left: 4 9) || 4 * 9 = 36 (left: 36) || There are no possible next steps with just the number 36.",
                "6 * 2 = 12 (left: 4 12 13) || 13 - 4 = 9 (left: 4 9) || 4 * 9 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 2 = 12 (left: 4 12 13) || 13 - 4 = 9 (left: 4 9) || 4 * 9 = 36 (left: 36) || There are no possible next steps as there is only one number in the input.",
                "6 * 2 = 12 (left: 4 12 13) || 13 - 4 = 9 (left: 4 9) || 4 * 9 = 36 (left: 36) || 36 * 2 = 72 (left: 2)",
                "6 * 2 = 12 (left: 4 12 13) || 13 - 4 = 9 (left: 4 9) || 4 * 9 = 36 (left: 36) || 36 / 8 = 4.5 (left: 4.5"
            ],
            "Pruning": [
                "3<-6.3",
                "4<-6.3"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                20.0,
                0.001
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 6.3",
                "2 <- 6.3",
                "3 <- 6.3",
                "4 <- 6.3"
            ]
        },
        "Step 9": {
            "steps": [
                "6 * 2 = 12 (left: 4 12 13) || 13 - 4 = 9 (left: 4 9) || 4 * 9 = 36 (left: 36) || There are no possible next steps with the input of 36 as it is a single number.",
                "6 * 2 = 12 (left: 4 12 13) || 13 - 4 = 9 (left: 4 9) || 4 * 9 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 2 = 12 (left: 4 12 13) || 13 - 4 = 9 (left: 4 9) || 4 * 9 = 36 (left: 36) || None - 36 is a single number and cannot be combined with any other numbers to create a new equation.",
                "6 * 2 = 12 (left: 4 12 13) || 13 - 4 = 9 (left: 4 9) || 4 * 9 = 36 (left: 36) || There are no possible next steps with the input 36.",
                "6 * 2 = 12 (left: 4 12 13) || 13 - 4 = 9 (left: 4 9) || 4 * 9 = 36 (left: 36) || 36 / 2 = 18"
            ],
            "Pruning": []
        },
        "Input": "2 4 6 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "865": {
        "puzzle": "6 7 9 12",
        "Step 0": {
            "steps": [
                "9 * 12 = 108 (left: 6 7 ",
                "6 + 7 = 13 (left: 9 12 13)",
                "12 - 9 = 3 (left: 6 7 3)",
                "6 + 7 = 13 (left: 9 12 13)",
                "9 * 12 = 108 (left: 6 7 "
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                2.001,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "7 + 9 = 16 (left: 6 12 16)",
                "7 + 9 = 16 (left: 6 12 16)",
                "9 - 6 = 3 (left: 3 7 12)",
                "7 * 9 = 63 (left: 6 12 63)",
                "12 - 6 = 6 (left: 6 7 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                2.001,
                0.003,
                2.001,
                3.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 6 = 6 (left: 6 7 9) || 6 + 7 = 13 (left: 9)",
                "6 * 7 = 42 (left: 9 12 42)",
                "9 / 3 = 3 (left: 3 7 ",
                "9 - 6 = 3 (left: 3 7 12)",
                "12 - 9 = 3 (left: 6 7 3) || 7 / 6 = 1.16666666667 (left: 1.16666666667 3)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                2.001,
                2.0,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- INIT",
                "2 <- 1.3",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 6 = 6 (left: 6 7 9) || 6 + 9 = 15 (left: 7 15)",
                "7 + 9 = 16 (left: 6 12 16)",
                "7 * 9 = 63 (left: 6 12 63) || 6 + 12 = 18 (left: 18 63)",
                "9 + 12 = 21 (left: 6 7 21)",
                ""
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                3.0,
                0.002,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.2",
                "2 <- 2.2",
                "3 <- 0.3",
                "4 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 9 = 3 (left: 6 7 3) || 7 - 6 = 1 (left: 1 3)",
                "12 - 9 = 3 (left: 6 7 3) || 7 / 6 = 1.1666666666666667 (left: 1.1666666666666667 3)",
                "9 / 3 = 3 (left: 3 7  || Input: 5 9",
                "6 + 7 = 13 (left: 9 12 13) || 13 - 9 = 4 (left: 4 13)",
                "9 * 6 = 54 (left: 7 12 54)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                1.001,
                0.003,
                20.002,
                1.001
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 4.3",
                "2 <- 4.3",
                "3 <- 4.3",
                "4 <- 4.3"
            ]
        },
        "Step 5": {
            "steps": [
                "6 + 7 = 13 (left: 9 12 13) || 13 - 9 = 4 (left: 4 13) || 10",
                "6 + 7 = 13 (left: 9 12 13) || 13 - 9 = 4 (left: 4 13) || 4 - 13 = -9 (left: -9)",
                "6 + 7 = 13 (left: 9 12 13) || 13 - 9 = 4 (left: 4 13) || 4 * 13 = 52 (left: 52)",
                "6 + 7 = 13 (left: 9 12 13) || 13 - 9 = 4 (left: 4 13) || 4 * 13 = 52 (left: 52)",
                "6 + 7 = 13 (left: 9 12 13) || 13 - 9 = 4 (left: 4 13) || Input: 7 7 2"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 3.1",
                "2 <- 4.3",
                "3 <- 4.1",
                "4 <- 4.3"
            ]
        },
        "Step 6": {
            "steps": [
                "6 + 7 = 13 (left: 9 12 13) || 13 - 9 = 4 (left: 4 13) || 4 + 13 = 17 (left: 17)",
                "7 + 9 = 16 (left: 6 12 16) || 16 - 6 = 10 (left: 10 6)",
                "6 + 7 = 13 (left: 9 12 13) || 13 - 9 = 4 (left: 4 13) || 4 * 13 = 52 (left: 52)",
                "12 - 9 = 3 (left: 6 7 3) || 7 / 6 = 1.1666666666666667 (left: 1.1666666666666667 3) || 3 +",
                "6 + 7 = 13 (left: 9 12 13) || 13 - 9 = 4 (left: 4 13) || Possible next steps:"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 4.3",
                "2 <- 4.3",
                "3 <- 4.3",
                "4 <- 4.3"
            ]
        },
        "Step 7": {
            "steps": [
                "6 + 7 = 13 (left: 9 12 13) || 13 - 9 = 4 (left: 4 13) || 4 + 13 = 17 (left: 17)",
                "6 + 7 = 13 (left: 9 12 13) || 13 - 9 = 4 (left: 4 13) || 4 * 13 = 52 (left: 52)",
                "6 + 7 = 13 (left: 9 12 13) || 13 - 9 = 4 (left: 4 13) || 4 + 13 = 17 (left: 17)",
                "6 + 7 = 13 (left: 9 12 13) || 13 - 9 = 4 (left: 4 13) || 15",
                "6 + 7 = 13 (left: 9 12 13) || 13 - 9 = 4 (left: 4 13) || 5 + 5 = 10 (left: 5 10 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 7.4",
                "2 <- 4.3",
                "3 <- 4.3",
                "4 <- 4.3"
            ]
        },
        "Step 8": {
            "steps": [
                "6 + 7 = 13 (left: 9 12 13) || 13 - 9 = 4 (left: 4 13) || 7 + 5 = 12 (left: 12 2)",
                "6 + 7 = 13 (left: 9 12 13) || 13 - 9 = 4 (left: 4 13) || 5 + 5 = 10 (left: 5 10 5) || 10 / 5 = 2 (left: 2 5)",
                "6 + 7 = 13 (left: 9 12 13) || 13 - 9 = 4 (left: 4 13) || 13 / 4 = 3.25 (left: 3.25)",
                "6 + 7 = 13 (left: 9 12 13) || 13 - 9 = 4 (left: 4 13) || 13 / 4 = 3.25 (left: 3.25)",
                "6 + 7 = 13 (left: 9 12 13) || 13 - 9 = 4 (left: 4 13) || 13 / 4 = 3.25 (left: 3.25)"
            ],
            "Pruning": [],
            "Evaluation": [
                41.0,
                41.0,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 8.0",
                "1 <- 8.0",
                "2 <- 8.1",
                "3 <- 8.1",
                "4 <- 8.1"
            ]
        },
        "Step 9": {
            "steps": [
                "6 + 7 = 13 (left: 9 12 13) || 13 - 9 = 4 (left: 4 13) || 7 + 5 = 12 (left: 12 2) || 12 + 2 = 14",
                "6 + 7 = 13 (left: 9 12 13) || 13 - 9 = 4 (left: 4 13) || 7 + 5 = 12 (left: 12 2) || 12 + 2 = 14",
                "6 + 7 = 13 (left: 9 12 13) || 13 - 9 = 4 (left: 4 13) || 5 + 5 = 10 (left: 5 10 5) || 10 / 5 = 2 (left: 2 5) || 9 / 3 = 3 (left: 3",
                "6 + 7 = 13 (left: 9 12 13) || 13 - 9 = 4 (left: 4 13) || 5 + 5 = 10 (left: 5 10 5) || 10 / 5 = 2 (left: 2 5) || 2 + 5 = 7 (left: 7)",
                "6 + 7 = 13 (left: 9 12 13) || 13 - 9 = 4 (left: 4 13) || 5 + 5 = 10 (left: 5 10 5) || 10 / 5 = 2 (left: 2 5) || 2 * 5 = 10 (left: 10)"
            ],
            "Pruning": [
                "2<-8.1",
                "3<-8.1",
                "4<-8.1"
            ]
        },
        "Input": "6 7 9 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "866": {
        "puzzle": "1 5 6 13",
        "Step 0": {
            "steps": [
                "5 * 1 = 5 (left: 5 6 13)",
                "",
                "5 + 6 = 11 (left: 1 11 13)",
                "6 + 1 = 7 (left: 5 7 13)",
                "5 + 6 = 11 (left: 1 11 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                22.0,
                0.003,
                0.003,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.3",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 5 = 6 (left: 6 6 13)",
                "6 + 1 = 7 (left: 5 7 13) || 5 + 7 = 12 (left: 12 13)",
                "1 + 5 = 6 (left: 6 6 13)",
                "13 / 1 = 13 (left: 5 6 ",
                "6 / 1 = 6 (left: 6 13 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                1.002,
                0.0,
                22.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.0"
            ]
        },
        "Step 2": {
            "steps": [
                "5 * 1 = 5 (left: 5 6 13) || 13 - 6 = 7 (left: 5 7)",
                "13 / 1 = 13 (left: 5 6 ",
                "5 + 6 = 11 (left: 1 11 13)",
                "1 + 5 = 6 (left: 6 6 13)",
                "5 * 1 = 5 (left: 5 6 13) || 6 + 13 = 19 (left: 5 19)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.001,
                1.002,
                1.002,
                40.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 2.4",
                "2 <- 1.4",
                "3 <- 2.4",
                "4 <- 2.4"
            ]
        },
        "Step 3": {
            "steps": [
                "6 / 1 = 6 (left: 6 13 6) || 13 / 6 = 2.166... (left: 2.166... ",
                "5 * 1 = 5 (left: 5 6 13) || 6 + 13 = 19 (left: 5 19) || 19 - 5 = 14 (left: 14)",
                "6 / 1 = 6 (left: 6 13 6) || 6 - 13 = -7 (left: -7 6 6)",
                "5 * 1 = 5 (left: 5 6 13) || 6 + 13 = 19 (left: 5 19) || 10 * 3 = 30 (left: 30 5)",
                "5 * 1 = 5 (left: 5 6 13) || 6 + 13 = 19 (left: 5 19) || 19 - 5 = 14 (left: 14)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.001,
                2.001,
                40.001,
                0.002
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 3.3",
                "2 <- 3.3",
                "3 <- 2.4",
                "4 <- 3.3"
            ]
        },
        "Step 4": {
            "steps": [
                "5 * 1 = 5 (left: 5 6 13) || 6 + 13 = 19 (left: 5 19) || 19 - 5 = 14 (left: 14)",
                "5 * 1 = 5 (left: 5 6 13) || 6 + 13 = 19 (left: 5 19) || 10 * 3 = 30 (left: 30 5) || 30 + 5 = 35 (left: 35)",
                "5 * 1 = 5 (left: 5 6 13) || 6 + 13 = 19 (left: 5 19) || 10 * 3 = 30 (left: 30 5) || 30 * 5 = 150 (left: 150)",
                "5 * 1 = 5 (left: 5 6 13) || 6 + 13 = 19 (left: 5 19) || 5 + 19 = 24 (left: 24)",
                "5 * 1 = 5 (left: 5 6 13) || 6 + 13 = 19 (left: 5 19) || 10 * 3 = 30 (left: 30 5) || 30 * 5 = 150 (left: 5 150)"
            ],
            "Pruning": [
                "1<-0.0",
                "2<-3.3"
            ],
            "Evaluation": [
                0.002,
                21.001,
                21.001,
                60.0,
                20.002
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 1.4",
                "2 <- INIT",
                "3 <- 3.3",
                "4 <- 4.3"
            ]
        },
        "Step 5": {
            "steps": [
                "5 * 1 = 5 (left: 5 6 13) || 6 + 13 = 19 (left: 5 19) || 5 + 19 = 24 (left: 24) || Answer: (5 * 1) + (6 + 13) = 24",
                "6 / 1 = 6 (left: 6 13 6) || 6 * 13 = 78 (left: 78 6)",
                "13 - 1 = 12 (left: 5 6 12)",
                "5 * 1 = 5 (left: 5 6 13) || 6 + 13 = 19 (left: 5 19) || 10 * 3 = 30 (left: 30 5) || 30 - 5 = 25 (left: 5)",
                "5 * 1 = 5 (left: 5 6 13) || 6 + 13 = 19 (left: 5 19) || 5 + 19 = 24 (left: 24) || Answer: (5 * 1) + (6 + 13) = 24"
            ]
        },
        "Input": "1 5 6 13",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 1
            }
        ]
    },
    "867": {
        "puzzle": "3 8 8 11",
        "Step 0": {
            "steps": [
                "8 + 3 = 11 (left: 8 11)",
                "11 - 3 = 8 (left: 8 8 8)",
                "11 - 8 = 3 (left: 3 8 11)",
                "3 + 8 = 11 (left: 8 11)",
                "8 - 3 = 5 (left: 5 8 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.001,
                2.001,
                41.0,
                1.001,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.1",
                "2 <- 0.2",
                "3 <- 0.4",
                "4 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "11 - 8 = 3 (left: 3 11)",
                "11 - 3 = 8 (left: 8 8 8) || 8 * 8 =",
                "11 - 8 = 3 (left: 3 8 11) || 3 + 8 = 11 (left: 11 11)",
                "8 - 3 = 5 (left: 5 8 11) || 11 - 5 = 6 (left: 6 11)",
                "11 - 8 = 3 (left: 3 8 11) || 11 / 3 = 3.67 (left: 3.67 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.001,
                0.003,
                0.003,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 1.0",
                "4 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8)",
                "11 - 8 = 3 (left: 3 ",
                "",
                "11 - 8 = 3 (left: 3 11) || 3 + 11 = 14 (left: 14)",
                "11 - 8 = 3 (left: 3 8 11) || 3 + 8 = 11 (left: 11 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.0,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 2.0",
                "3 <- 2.0",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "8 - 3 = 5 (left: 5 8 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                60.0,
                40.0,
                0.002,
                3.0
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 2.0",
                "2 <- 3.2",
                "3 <- 3.2",
                "4 <- 3.1"
            ]
        },
        "Step 4": {
            "steps": [
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (11 - (11 - 8)) = 24",
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (11 - 8) * 8 = 24",
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (11 - 8) * 8 = 24",
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (11 - 8) * (3 * 8) = 24"
            ],
            "Pruning": [
                "0<-2.0",
                "2<-2.0",
                "3<-2.0",
                "4<-3.2"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 2.0",
                "2 <- 4.0",
                "3 <- 3.1",
                "4 <- 4.0"
            ]
        },
        "Step 5": {
            "steps": [
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (11 - 8) * (3 * 8) = 24",
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (11 - 8) * (3 * 8) = 24",
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5 8)"
            ],
            "Pruning": [
                "0<-3.1",
                "3<-4.2"
            ],
            "Evaluation": [
                60.0,
                0.003,
                60.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 4.2",
                "2 <- 4.0",
                "3 <- 5.3",
                "4 <- 4.4"
            ]
        },
        "Step 6": {
            "steps": [
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (11 - 8) * (3 * 8) = 24",
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (11 - 8) * 8 = 24"
            ],
            "Pruning": [
                "0<-4.4",
                "4<-4.2"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.002,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 6.0",
                "2 <- 5.0",
                "3 <- 5.2",
                "4 <- 0.1"
            ]
        },
        "Step 7": {
            "steps": [
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (11 - 8) * 8 = 24",
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (11 - 8) * 3 * 8 = 24",
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (11 - 8) * (3 * 8) = 24",
                "11 - 3 = 8 (left: 8 8 8) || 8 * 8 = 64 (left: 64)"
            ],
            "Pruning": [
                "1<-5.2",
                "2<-5.0",
                "3<-4.2"
            ],
            "Evaluation": [
                0.001,
                40.0,
                60.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 7.3",
                "1 <- 6.4",
                "2 <- 5.0",
                "3 <- 6.4",
                "4 <- 7.3"
            ]
        },
        "Step 8": {
            "steps": [
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67 8)",
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (11 - 8) * (3 * 8) = 24",
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)"
            ],
            "Pruning": [
                "2<-5.2"
            ],
            "Evaluation": [
                0.002,
                1.002,
                60.0,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 8.4",
                "2 <- 8.4",
                "3 <- 8.2",
                "4 <- 8.4"
            ]
        },
        "Step 9": {
            "steps": [
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (11 - 8) * 8 = 24",
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (11 - 8) * 3 * 8 = 24",
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (11 - 8) * (3 * 8) = 24",
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (11 - 8) * 8 = 24",
                "11 - 8 = 3 (left: 3 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (11 - 8) * 8 = 24"
            ],
            "Pruning": []
        },
        "Input": "3 8 8 11",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "868": {
        "puzzle": "2 3 4 10",
        "Step 0": {
            "steps": [
                "4 * 2 = 8 (left: 3 8 10)",
                "2 + 3 = 5 (left: 4 5 10)",
                "3 + 4 = 7 (left: 2 7 10)",
                "10 - 3 = 7 (left: 2 4 ",
                "2 + 3 = 5 (left: 4 5 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                21.0,
                41.0,
                0.001,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.0",
                "2 <- INIT",
                "3 <- 0.2",
                "4 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "4 * 2 = 8 (left: 3 8 10)",
                "4 * 2 = 8 (left: 3 8 10) || 10 - 8 = 2 (left: 2 10)",
                "3 + 4 = 7 (left: 2 7 10)",
                "3 + 4 = 7 (left: 2 7 10) || 7 + 2 = 9 (left: 9 10)",
                "3 + 4 = 7 (left: 2 7 10) || 7 - 2 = 5 (left: 5 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                3.0,
                60.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 0.2",
                "2 <- 0.0",
                "3 <- 1.2",
                "4 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "4 * 2 = 8 (left: 3 8 10) || 3 -",
                "3 + 4 = 7 (left: 2 7 10) || 7 / 2 = 3.5 (",
                "4 * 2 = 8 (left: 3 8 10) || 3 * 8 = 24 (left: 10 24)",
                "3 + 4 = 7 (left: 2 7 10) || 2 + 7 = 9 (left: 9 10)",
                "4 * 2 = 8 (left: 3 8 10) || 3 + 8 = 11 (left: 8 10 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 0.2",
                "2 <- INIT",
                "3 <- 1.0",
                "4 <- 0.0"
            ]
        },
        "Step 3": {
            "steps": [
                "4 * 2 = 8 (left: 3 8 10) || 8 / 3 = 2.67 (left: 2.67 10)",
                "3 + 4 = 7 (left: 2 7 10) || 7 - 2 = 5 (left: 5 10)",
                "10 - 2 = 8 (left: 3 4 8)",
                "4 * 2 = 8 (left: 3 8 10) || 10 - 3 = 7 (left: 7 10)",
                "4 * 2 = 8 (left: 3 8 10) || 10 - 3 = 7 (left: 7 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                20.002,
                3.0,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 3.1",
                "2 <- 3.1",
                "3 <- 1.2",
                "4 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "3 + 4 = 7 (left: 2 7 10) || 7 - 2 = 5 (left: 5 10) || Input: 3 9 27",
                "3 + 4 = 7 (left: 2 7 10) || 7 - 2 = 5 (left: 5 10) || 5 + 10 = 15 (left: 15)",
                "3 + 4 = 7 (left: 2 7 10) || 7 - 2 = 5 (left: 5 10) || 5 + 10 = 15 (left: 15)",
                "3 + 4 = 7 (left: 2 7 10) || 7 - 2 = 5 (left:",
                "4 * 2 = 8 (left: 3 8 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                1.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 3.1",
                "2 <- 1.2",
                "3 <- 4.4",
                "4 <- 3.2"
            ]
        },
        "Step 5": {
            "steps": [
                "4 * 2 = 8 (left: 3 8 10) || 3 + 8 = 11 (left: 10 11)",
                "3 + 4 = 7 (left: 2 7 10) || 7 - 2 = 5 (left: 5 10) || 5 - 10 = -5 (left: -5)",
                "3 + 4 = 7 (left: 2 7 10) || 7 + 2 = 9 (left: 9 10)",
                "4 * 2 = 8 (left: 3 8 10) || 8 / 3 = 2.67 (left: 2.67 10)",
                "10 - 2 = 8 (left: 3 4 8) || 4 / 3 = 1.33 (left: 1.33 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.003,
                20.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 5.0",
                "2 <- 4.4",
                "3 <- 5.2",
                "4 <- 0.0"
            ]
        },
        "Step 6": {
            "steps": [
                "4 * 2 = 8 (left: 3 8 10) || 8 / 3 = 2.67 (left: 2.67 10)",
                "4 * 2 = 8 (left: 3 8 10) || 3 + 8 = 11 (left: 10 11) || 10 / 11 \u2248 0.9091 (left: 0.9091)",
                "4 * 2 = 8 (left: 3 8 10) || 3 * 8 = 24 (left: 10 24)",
                "3 + 4 = 7 (left: 2 7 10) || 7 + 2 = 9 (left: 9 10) || 9 + 10 = 19 (left: 19)",
                "4 * 2 = 8 (left: 3 8 10) || 8 - 3 = 5 (left: 5 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 4.4",
                "2 <- 4.4",
                "3 <- 1.0",
                "4 <- 3.2"
            ]
        },
        "Step 7": {
            "steps": [
                "4 * 2 = 8 (left: 3 8 10) || 3 + 8 = 11 (left: 10 11)",
                "4 * 2 = 8 (left: 3 8 10) || 3 + 8 = 11 (left: 10 11)",
                "4 * 2 = 8 (left: 3 8 10) || 3 + 8 = 11 (left: 10 11)",
                "4 * 2 = 8 (left: 3 8 10) || 10 / 3 = 3.33 (left: 3.33 10)",
                "10 - 2 = 8 (left: 3 4 8) || 8 - 3 = 5 (left: 5 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                0.003,
                1.002,
                1.001,
                0.003
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 7.2",
                "2 <- 7.0",
                "3 <- 7.2",
                "4 <- 5.2"
            ]
        },
        "Step 8": {
            "steps": [
                "4 * 2 = 8 (left: 3 8 10) || 3 + 8 = 11 (left: 10 11) || 10 - 11 = -1 (left: -1)",
                "4 * 2 = 8 (left: 3 8 10) || 3 + 8 = 11 (left: 10 11) || 10 + 11 = 21 (left: 21)",
                "4 * 2 = 8 (left: 3 8 10) || 3 + 8 = 11 (left: 10 11) || 10 + 11 = 21 (left: 21)",
                "4 * 2 = 8 (left: 3 8 10) || 3 + 8 = 11 (left: 10 11) || 10 * 11 = 110 (left: 110)",
                "3 + 4 = 7 (left: 2 7 10) || 7 + 2 = 9 (left: 9 10) || 10 / 9 = 1.11 (left: 1.11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                40.0,
                20.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 8.2",
                "1 <- 8.1",
                "2 <- 8.1",
                "3 <- 8.2",
                "4 <- 8.1"
            ]
        },
        "Step 9": {
            "steps": [
                "4 * 2 = 8 (left: 3 8 10) || 3 + 8 = 11 (left: 10 11) || 10 + 11 = 21 (left: 21) || 21 * 2 = 42 (left: 2)",
                "4 * 2 = 8 (left: 3 8 10) || 3 + 8 = 11 (left: 10 11) || 10 + 11 = 21 (left: 21) || 21 - 7 = 14 (left: 14)",
                "4 * 2 = 8 (left: 3 8 10) || 3 + 8 = 11 (left: 10 11) || 10 + 11 = 21 (left: 21) || There are no possible next steps with the input 21.",
                "4 * 2 = 8 (left: 3 8 10) || 3 + 8 = 11 (left: 10 11) || 10 + 11 = 21 (left: 21) || 21 + 8 = 29 (left: 8) ",
                "4 * 2 = 8 (left: 3 8 10) || 3 + 8 = 11 (left: 10 11) || 10 + 11 = 21 (left: 21) || 21 / 3 = 7 (left: 7)"
            ],
            "Pruning": []
        },
        "Input": "2 3 4 10",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "869": {
        "puzzle": "6 6 8 8",
        "Step 0": {
            "steps": [
                "6 + 6 = 12 (left: 8 8 12)",
                "8 - 6 = 2 (left",
                "8 - 6 = 2 (left: 2 6 8)",
                "8 / 6 = 1.33 (left: 6 8 8)",
                "8 + 6 = 14 (left: 6 8 14)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.002,
                2.001,
                22.0,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.4",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "8 - 6 = 2 (left: 2 8 8)",
                "8 / 6 = 1.33 (left: 6 8 8)",
                "8 - 6 = 2 (left: 6 ",
                "8 + 6 = 14 (left: 6 8 14) || 8 / 6 = 1.33 (left: 1.33 14)",
                ""
            ],
            "Pruning": [],
            "Evaluation": [
                21.001,
                2.001,
                0.001,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- INIT",
                "2 <- 0.3",
                "3 <- 0.3",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "8 - 6 = 2 (left: 2 8 8) || 2 + 8 = 10 (left: 8 10)",
                "8 - 6 = 2 (left: ",
                "8 / 6 = 1.33 (left: 6 8 8) || 8 - 6 = 2 (left: 2 8 8)",
                "8 / 6 = 1.33 (left: 6 8 8) || 2 + 3 = 5 (left: 4 5)",
                "6 * 6 = 36 (left: 8 8 36)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.0,
                0.002,
                60.0,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.3",
                "2 <- 2.3",
                "3 <- 0.3",
                "4 <- 1.0"
            ]
        },
        "Step 3": {
            "steps": [
                "6 + 6 = 12 (left: 8 8 12)",
                "8 / 6 = 1.33 (left: 6 8 8) || 2 + 3 = 5 (left: 4 5) || 4 * 5 = 20 (left: 20)",
                "8 / 6 = 1.33 (left: 6 8 8) || 2 + 3 = 5 (left: 4 5) || 4 * 5 = 20 (left: 20)",
                "8 / 6 = 1.33 (left: 6 8 8) || 6 * 8 = 48 (left: 8 48)",
                "8 - 6 = 2 (left: 2 8 8) || 8 - 2 = 6 (left: 6 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                0.003,
                0.003,
                20.001,
                20.002
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 0.3",
                "2 <- 0.3",
                "3 <- 3.3",
                "4 <- 2.3"
            ]
        },
        "Step 4": {
            "steps": [
                "8 / 6 = 1.33 (left: 6 8 8) || 6 * 8 = 48 (left: 8 48) || 8 * 48 = 384 (left: 384)",
                "8 / 6 = 1.33 (left: 6 8 8) || 6 + 8 = 14 (left: 8 8 14)",
                "8 / 6 = 1.33 (left: 6 8 8) || 8 / 6 = 1.33 (left: 1.33 8)",
                "8 / 6 = 1.33 (left: 6 8 8) || 6 * 8 = 48 (left: 8 48) || 8 * 6 = 48",
                "8 / 6 = 1.33 (left: 6 8 8) || 2 + 3 = 5 (left: 4 5) || 4 * 5 = 20 (left: 20)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.003,
                0.0,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.3",
                "2 <- 0.4",
                "3 <- 3.3",
                "4 <- 3.4"
            ]
        },
        "Step 5": {
            "steps": [
                "8 / 6 = 1.33 (left: 1.33 6 8)",
                "8 / 6 = 1.33 (left: 6 8 8) || 2 + 3 = 5 (left: 4 5) || 4 * 5 = 20 (left: 20)",
                "8 + 6 = 14 (left: 6 8 14) || 8 / 6 = 1.33 (left: 1.33 14)",
                "8 / 6 = 1.33 (left: 6 8 8) || 6 * 8 = 48 (left: 8 48) || 8 + 40 = 48 (left: 48)",
                "8 - 6 = 2 (left: 2 8 8) || 8 - 2 = 6 (left: 6 8) || 10"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 3.4",
                "2 <- 5.0",
                "3 <- 3.4",
                "4 <- 3.3"
            ]
        },
        "Step 6": {
            "steps": [
                "8 - 6 = 2 (left: 2 8 8) || 8 - 2 = 6 (left: 6 8) || 8 / 6 = 1.33 (left: 1.33)",
                "8 - 6 = 2 (left: 2 8 8) || 8 - 2 = 6 (left: 6 8) || 6 * 8 = 48 (left: 48)",
                "8 / 6 = 1.33 (left: 1.33 6 8) || Input: 3 5 7 9",
                "8 - 6 = 2 (left: 2 8 8) || 8 - 2 = 6 (left: 6 8) || 6 + 8 = 14 (left: 14)",
                "8 / 6 = 1.33 (left: 6 8 8) || 6 * 8 = 48 (left: 8 48) || 8 * 6 = 48 (left: 48)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.3",
                "2 <- 2.3",
                "3 <- 3.4",
                "4 <- 2.3"
            ]
        },
        "Step 7": {
            "steps": [
                "8 / 6 = 1.33 (left: 6 8 8) || 2 + 3 = 5 (left: 4 5) || 10 * 2 = 20",
                "8 / 6 = 1.33 (left: 6 8 8) || 2 + 3 = 5 (left: 4 5) || 4 + 5 = 9 (left: 9)",
                "8 / 6 = 1.33 (left: 6 8 8) || 2 + 3 = 5 (left: 4 5) || 5 / 4 = 1.25 (left: 1.25)",
                "8 - 6 = 2 (left: 2 8 8) || 8 - 2 = 6 (left: 6 8) || 8 - 6 = 2 (left: 2)",
                "8 / 6 = 1.33 (left: 6 8 8) || 2 + 3 = 5 (left: 4 5) || 5 * 4 = 20 (left: 4)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 3.3",
                "2 <- 2.3",
                "3 <- 2.3",
                "4 <- 2.3"
            ]
        },
        "Step 8": {
            "steps": [
                "8 - 6 = 2 (left: 2 8 8) || 8 - 2 = 6 (left: 6 8) || 8 / 6 = 1.33 (left: 1.33)",
                "8 / 6 = 1.33 (left: 6 8 8) || 6 * 8 = 48 (left: 8 48) || 8 + 40 = 48 (left: 8 48)",
                "8 / 6 = 1.33 (left: 6 8 8) || 2 + 3 = 5 (left: 4 5) || 4 - 5 = -1 (left: -1)",
                "8 / 6 = 1.33 (left: 6 8 8) || 2 + 3 = 5 (left: 4 5) || Input: 10 2",
                "8 / 6 = 1.33 (left: 6 8 8) || 2 + 3 = 5 (left: 4 5) || 5 - 4 = 1 (left: 1)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                41.0,
                0.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 8.1",
                "1 <- 8.1",
                "2 <- 8.1",
                "3 <- 8.1",
                "4 <- 8.1"
            ]
        },
        "Step 9": {
            "steps": [
                "8 / 6 = 1.33 (left: 6 8 8) || 6 * 8 = 48 (left: 8 48) || 8 + 40 = 48 (left: 8 48) || 48 / 6 = 8 (left: 8)",
                "8 / 6 = 1.33 (left: 6 8 8) || 6 * 8 = 48 (left: 8 48) || 8 + 40 = 48 (left: 8 48) || 8 * 6 = 48 (left: 48) ",
                "8 / 6 = 1.33 (left: 6 8 8) || 6 * 8 = 48 (left: 8 48) || 8 + 40 = 48 (left: 8 48) || 8 * 6 = 48",
                "8 / 6 = 1.33 (left: 6 8 8) || 6 * 8 = 48 (left: 8 48) || 8 + 40 = 48 (left: 8 48) || 8 * 6 = 48 (left: 6)",
                "8 / 6 = 1.33 (left: 6 8 8) || 6 * 8 = 48 (left: 8 48) || 8 + 40 = 48 (left: 8 48) || 48 / 8 = 6 (left: 6)"
            ],
            "Pruning": []
        },
        "Input": "6 6 8 8",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "870": {
        "puzzle": "4 9 9 10",
        "Step 0": {
            "steps": [
                "4 + 9 = 13 (left: 9 9 10)",
                "9 + 4 = 13 (left: ",
                "10 - 4 = 6 (left: 6 9 9)",
                "4 + 9 = 13 (left: 9 10 13)",
                "4 + 9 = 13 (left: 9 9 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.0,
                40.001,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.2",
                "2 <- INIT",
                "3 <- 0.2",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "10 - 4 = 6 (left: 6 9 9) || 9 / 6 = 1.5 (left: 1.5 9 9)",
                "10 - 4 = 6 (left: 6 9 9) || 9 - 6 = 3 (left: 3 9 9)",
                "10 - 4 = 6 (left: ",
                "10 - 4 = 6 (left: 6 9 9) || 9 / 9 = 1 (left: ",
                "9 - 4 = 5 (left: 5 9 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.003,
                0.001,
                0.0,
                41.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.4",
                "2 <- 1.4",
                "3 <- 1.4",
                "4 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "4 * 9 = 36 (left: 9 10 36)",
                "9 - 4 = 5 (left: 5 9 10) || 10 - 5 = 5 (left: 5 10)",
                "9 - 4 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14)",
                "9 - 4 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14)",
                "9 - 4 = 5 (left: 5 9 10) || 10 - 5 = 5 (left: 5 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                0.002,
                60.0,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.3",
                "2 <- 2.2",
                "3 <- 0.2",
                "4 <- 2.2"
            ]
        },
        "Step 3": {
            "steps": [
                "9 - 4 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || 10 * 14 = 140 (left: 140)",
                "9 - 4 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || 10 * 14 = 140 (left: 140)",
                "9 - 4 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || 10 - 14 = -4 (left: -4)",
                "10 - 4 = 6 (left: 6 9 9) || 6 * 9 = 54 (left: ",
                "9 - 4 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || 10 - 14 = -4 (left: -4)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.0,
                0.002
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- INIT",
                "2 <- 2.3",
                "3 <- 2.2",
                "4 <- 0.2"
            ]
        },
        "Step 4": {
            "steps": [
                "9 - 4 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || 10 * 14 = 140 (left: 140)",
                "10 - 4 = 6 (left: 4 9 6)",
                "9 - 4 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || 10 * 14 = 140 (left: 140)",
                "9 - 4 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || 14 - 10 = 4 (left: 4 14)",
                "10 - 4 = 6 (left: 6 9 9) || 9 / 6 = 1.5 (left: 1.5 9 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.0,
                0.003,
                21.001,
                2.001
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 4.3",
                "2 <- 2.3",
                "3 <- 4.4",
                "4 <- 1.4"
            ]
        },
        "Step 5": {
            "steps": [
                "4 + 9 = 13 (left: 9 10 13) || 9 + 10 = 19 (left: 13 19)",
                "9 - 4 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || 14 - 10 = 4 (left: 4 14) || 4 + 14 = 18 (left: 18)",
                "9 - 4 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || 10 - 14 = -4 (left: -4)",
                "10 - 4 = 6 (left: 6 9 9) || 9 / 6 = 1.5 (left: 1.5 9 9) || 1.5 + 9 = 10.5 (left: 9 10.5)",
                "9 - 4 = 5 (left: 5 9 10) || 10 - 5 = 5 (left: 5 9)"
            ],
            "Pruning": [
                "1<-2.2"
            ],
            "Evaluation": [
                0.002,
                40.0,
                0.002,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 2.2",
                "2 <- 2.2",
                "3 <- 2.2",
                "4 <- 0.3"
            ]
        },
        "Step 6": {
            "steps": [
                "10 - 4 = 6 (left: 6 9 9) || 9 / 6 = 1.5 (left: 1.5 9 9) || 1.5 + 9 = 10.5 (left: 9 10.5) || 9 * 10.5 = 94.5 (left: 94.5)",
                "9 - 4 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || 10 / 14 = 0.71428571 (left: 0.71428571 14)",
                "9 - 4 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || 14 / 10 = 1.4 (left: 1.4)",
                "9 - 4 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || 10 * 14 = 140 (left: 14 140)",
                "4 + 9 = 13 (left: 9 10 13) || 9 * 10 = 90 (left: 13 90)"
            ],
            "Pruning": [
                "0<-2.2"
            ],
            "Evaluation": [
                20.0,
                1.0,
                0.0,
                22.0,
                20.002
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 6.0",
                "2 <- 5.1",
                "3 <- 6.4",
                "4 <- 5.1"
            ]
        },
        "Step 7": {
            "steps": [
                "4 + 9 = 13 (left: 9 10 13) || 9 * 10 = 90 (left: 13 90) || 13 / 90 = 0.14444444444444443 (left: 0.14444444444444443)",
                "9 - 4 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || 10 + 14 = 24 (left: 24)",
                "9 - 4 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || 10 + 14 = 24 (left: 24)",
                "4 + 9 = 13 (left: 9 10 13) || 9 * 10 = 90 (left: 13 90) || 13 - 90 = -77 (left: -77)",
                "9 - 4 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || 10 + 14 = 24 (left: 14 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 2.2",
                "2 <- 6.3",
                "3 <- 7.1",
                "4 <- 7.2"
            ]
        },
        "Step 8": {
            "steps": [
                "9 - 4 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || 10 + 14 = 24 (left: 24)",
                "9 - 4 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || 10 + 14 = 24 (left: 14 24)",
                "9 - 4 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || 10 * 14 = 140 (left: 14 140) || 14 * 10 = 140 (left: 140)",
                "9 - 4 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || 10 + 14 = 24 (left: 24) || Answer: (9 - 4 + 9) + 10 = 24",
                "9 - 4 = 5 (left: 5 9 10) || 5 + 9 = 14 (left: 10 14) || 10 + 14 = 24 (left: 24) || Answer: 10 + (9 - 4) + 9 = 24"
            ]
        },
        "Input": "4 9 9 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 1
            },
            {
                "r": 1
            }
        ]
    },
    "871": {
        "puzzle": "3 3 7 9",
        "Step 0": {
            "steps": [
                "3 * 3 = 9 (left: 9 7 9)",
                "7 - 3 = 4 (left: 3 4 ",
                "3 + 3 = 6 (left: 6 7 9)",
                "7 + 3 = 10 (left: 3 10 9)",
                "3 * 3 = 9 (left: 9 7 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                40.001,
                2.001,
                2.001,
                3.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- INIT",
                "4 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "7 - 3 = 4 (left: 3 4  || 3 / 4 = 0.75 (left: 0.75)",
                "3 * 3 = 9 (left: 9 7 9)",
                "7 - 3 = 4 (left: 3 4  || 3 + 4 = 7 (left: 7)",
                "3 * 3 = 9 (left: 9 7 9)",
                "7 - 3 = 4 (left: 3 4  || 4 / 3 = 1.33 (left: 1.33)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                2.001,
                0.002,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- 0.4",
                "4 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "3 / 3 = 1 (left: 1 7 9)",
                "3 + 3 = 6 (left: 6 7 9)",
                "7 - 3 = 4 (left: 3 4  || 4 - 3 = 1 (left: 1)",
                "3 * 3 = 9 (left: 9 7 9) || 9 - 7 = 2 (left: 2 9)",
                "7 - 3 = 4 (left: 3 4  || 3 / 4 = 0.75 (left: 0.75)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.001,
                3.0,
                0.003,
                0.001,
                0.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.1",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "7 - 3 = 4 (left: 3 4  || 4 / 3 = 1.33 (left: 1.33)",
                "7 - 3 = 4 (left: 3 4  || 5 / 5 = 1",
                "3 + 3 = 6 (left: 6 7 9)",
                "7 - 3 = 4 (left: 3 4  || 3 - 4 = -1 (left: -1)",
                "3 * 3 = 9 (left: 9 7 9) || 9 + 7 = 16 (left: 9 16)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                2.001,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.1",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- 0.2"
            ]
        },
        "Step 4": {
            "steps": [
                "7 - 3 = 4 (left: 3 4  || 3 + 4 = 7 (left: 7)",
                "7 - 3 = 4 (left: 3 4  || Input: 5 9",
                "3 + 7 = 10 (left: 10 3 9)",
                "7 - 3 = 4 (left: 3 4  || 4 / 3 = 1.33 (left: 1.33)",
                "3 + 3 = 6 (left: 6 7 9) || 7 + 9 = 16 (left: 6 16)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                3.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.1",
                "2 <- 0.1",
                "3 <- INIT",
                "4 <- 3.2"
            ]
        },
        "Step 5": {
            "steps": [
                "7 - 3 = 4 (left: 3 4  || 3 + 4 = 7 (left: 7)",
                "7 - 3 = 4 (left: 3 4  || 4 / 3 = 1.33 (left: 1.33)",
                "7 - 3 = 4 (left: 3 4  || 4 - 3 = 1 (left: 1)",
                "9 - 3 = 6 (left: 3 7 6)",
                "3 + 3 = 6 (left: 6 7 9) || 7 + 9 = 16 (left: 6 16)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 5.3",
                "2 <- 5.3",
                "3 <- 5.3",
                "4 <- 5.3"
            ]
        },
        "Step 6": {
            "steps": [
                "9 - 3 = 6 (left: 3 7 6) || 3 * 7 = 21 (left: 6 21)",
                "9 - 3 = 6 (left: 3 7 6) || 7 + 6 = 13 (left: 3 13)",
                "9 - 3 = 6 (left: 3 7 6) || 7 - 3 = 4 (left: 4 6)",
                "9 - 3 = 6 (left: 3 7 6) || 7 - 3 = 4 (left: 4 6)",
                "9 - 3 = 6 (left: 3 7 6) || "
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                60.0,
                60.0,
                40.001
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 6.3",
                "2 <- 6.2",
                "3 <- 5.3",
                "4 <- 6.4"
            ]
        },
        "Step 7": {
            "steps": [
                "9 - 3 = 6 (left: 3 7 6) ||  || There are no possible next steps as the input is incomplete.",
                "9 - 3 = 6 (left: 3 7 6) || 7 - 3 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "9 - 3 = 6 (left: 3 7 6) || 7 - 3 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "9 - 3 = 6 (left: 3 7 6) || 7 - 3 = 4 (left: 4 6)",
                "9 - 3 = 6 (left: 3 7 6) ||  || It seems like you did not provide any input. Please provide a set of numbers to continue with the calculations."
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 7.3",
                "1 <- 6.4",
                "2 <- 6.3",
                "3 <- 7.3",
                "4 <- 6.4"
            ]
        },
        "Step 8": {
            "steps": [
                "9 - 3 = 6 (left: 3 7 6) || 7 - 3 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "9 - 3 = 6 (left: 3 7 6) ||  || It seems like the input is missing. Please provide the numbers to continue with the possible next steps.",
                "9 - 3 = 6 (left: 3 7 6) || 7 - 3 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "9 - 3 = 6 (left: 3 7 6) || 7 - 3 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "9 - 3 = 6 (left: 3 7 6) ||  || It appears that you did not provide any input for the next steps. Could you please provide the numbers you would like to use for the calculations?"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 8.3",
                "1 <- 8.3",
                "2 <- 8.3",
                "3 <- 8.3",
                "4 <- 8.3"
            ]
        },
        "Step 9": {
            "steps": [
                "9 - 3 = 6 (left: 3 7 6) || 7 - 3 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (9 - 3) * (7 - 3) = 24",
                "9 - 3 = 6 (left: 3 7 6) || 7 - 3 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (9 - 3) * (7 - 3) = 24",
                "9 - 3 = 6 (left: 3 7 6) || 7 - 3 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (9 - 3) * (7 - 3) = 24",
                "9 - 3 = 6 (left: 3 7 6) || 7 - 3 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (3 + (7 - 3)) * 6 = 24",
                "9 - 3 = 6 (left: 3 7 6) || 7 - 3 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (7 - (9 - 3)) = 24"
            ]
        },
        "Input": "3 3 7 9",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "872": {
        "puzzle": "1 7 9 10",
        "Step 0": {
            "steps": [
                "7 - 1 = 6 (left: 6 9 10)",
                "1 + 7 = 8 (left: 8 9 10)",
                "10 - 1 = 9 (left: 1 7 ",
                "9 + 1 = 10 (left: 7 10 10)",
                "1 + 7 = 8 (left: 8 9 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.0,
                3.0,
                1.001,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 7 = 7 (left: 7 9 10)",
                "1 + 7 = 8 (left: 8 9 10)",
                "7 - 1 = 6 (left: 6 9 10)",
                "1 + 7 = 8 (left: 8 9 10) || Input: 3 3 6 9",
                "7 - 1 = 6 (left: 6 9 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.001,
                1.002,
                3.0,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "7 - 1 = 6 (left: 6 9 10)",
                "10 - 1 = 9 (left: 9 9 10)",
                "1 + 7 = 8 (left: 8 9 10)",
                "1 + 7 = 8 (left: 8 9 10) || 10 - 9 = 1 (left: 8 1)",
                "7 - 1 = 6 (left: 6 9 10) || 6 + 9 = 15 (left: 10 15)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                0.003,
                3.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.3",
                "2 <- INIT",
                "3 <- 2.3",
                "4 <- 2.3"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 7 = 8 (left: 8 9 10) || 10 - 9 = 1 (left: 8 1) || 8 + 1 = 9 (left: 9)",
                "1 + 7 = 8 (left: 8 9 10) || 10 - 9 = 1 (left: 8 1) || 8 / 1 = 8 (left: 8)",
                "9 + 1 = 10 (left: 7 10 10)",
                "1 + 7 = 8 (left: 8 9 10) || 10 - 9 = 1 (left: 8 1) || 8 / 1 = 8 (left: 8)",
                "1 + 7 = 8 (left: 8 9 10) || 10 - 9 = 1 (left: 8 1) || 8 - 1 = 7 (left: 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                1.002,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.3",
                "2 <- 2.3",
                "3 <- 0.0",
                "4 <- 2.3"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 7 = 8 (left: 8 9 10) || 10 - 9 = 1 (left: 8 1) || 8 + 1 = 9 (left: 9)",
                "1 + 7 = 8 (left: 8 9 10) || 10 - 9 = 1 (left: 8 1) || 8 - 1 = 7 (left: 7)",
                "1 + 7 = 8 (left: 8 9 10) || 10 - 9 = 1 (left: 8 1) || 8 - 1 = 7 (left: 7)",
                "7 - 1 = 6 (left: 6 9 10) || 10 - 6 = 4 (left: 4 9)",
                "1 + 7 = 8 (left: 8 9 10) || 10 - 9 = 1 (left: 8 1) || 8 - 1 = 7 (left: 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.0,
                0.003,
                60.0,
                0.001
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 2.3",
                "2 <- 4.3",
                "3 <- 2.3",
                "4 <- 4.3"
            ]
        },
        "Step 5": {
            "steps": [
                "7 - 1 = 6 (left: 6 9 10) || 10 - 6 = 4 (left: 4 9) || 4 * 9 = 36 (left: 9 36)",
                "1 + 7 = 8 (left: 8 9 10) || 10 - 9 = 1 (left: 8 1) || 8 / 1 = 8 (left: 1 8)",
                "7 - 1 = 6 (left: 6 9 10) || 10 - 6 = 4 (left: 4 9) || 9 - 4 = 5 (left: 5)",
                "1 + 7 = 8 (left: 8 9 10) || 10 - 9 = 1 (left: 8 1) || 8 - 1 = 7 (left: 7)",
                "7 - 1 = 6 (left: 6 9 10) || 10 - 6 = 4 (left: 4 9) || 9 / 4 = 2.25 (left: 2.25 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                40.0,
                0.003,
                0.0,
                3.0
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 5.1",
                "2 <- 4.3",
                "3 <- 2.3",
                "4 <- 5.1"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 7 = 8 (left: 8 9 10) || 10 - 9 = 1 (left: 8 1) || 8 / 1 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8 8)",
                "1 + 7 = 8 (left: 8 9 10) || 10 - 9 = 1 (left: 8 1) || 8 / 1 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "7 - 1 = 6 (left: 6 9 10) || 10 - 6 = 4 (left: 4 9) || 4 + 9 = 13 (left: 9 13)",
                "1 + 7 = 8 (left: 8 9 10) || 10 - 9 = 1 (left: 8 1) || 8 / 1 = 8 (left: 8)",
                "1 + 7 = 8 (left: 8 9 10) || 10 - 9 = 1 (left: 8 1) || 8 / 1 = 8 (left: 1 8) || 1 + 8 = 9 (left: 9)"
            ],
            "Pruning": [
                "1<-5.1",
                "4<-5.1"
            ],
            "Evaluation": [
                1.001,
                40.0,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 4.3",
                "2 <- 4.3",
                "3 <- 6.4",
                "4 <- 6.4"
            ]
        },
        "Step 7": {
            "steps": [
                "1 + 7 = 8 (left: 8 9 10) || 10 - 9 = 1 (left: 8 1) || 8 / 1 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "7 - 1 = 6 (left: 6 9 10) || 10 - 6 = 4 (left: 4 9) || 9 / 3 =",
                "7 - 1 = 6 (left: 6 9 10) || 10 - 6 = 4 (left: 4 9) || 4 + 9 = 13 (left: 9)",
                "1 + 7 = 8 (left: 8 9 10) || 10 - 9 = 1 (left: 8 1) || 8 / 1 = 8 (left: 1 8) || 1 + 8 = 9 (left: 9)",
                "1 + 7 = 8 (left: 8 9 10) || 10 - 9 = 1 (left: 8 1) || 8 / 1 = 8 (left: 1 8) || 1 + 8 = 9 (left: 8 9)"
            ],
            "Pruning": [
                "0<-6.4",
                "3<-6.4"
            ],
            "Evaluation": [
                20.001,
                0.003,
                0.003,
                20.001,
                0.003
            ],
            "Resampling": [
                "0 <- 7.3",
                "1 <- 4.3",
                "2 <- 7.3",
                "3 <- 6.0",
                "4 <- 7.0"
            ]
        },
        "Step 8": {
            "steps": [
                "1 + 7 = 8 (left: 8 9 10) || 10 - 9 = 1 (left: 8 1) || 8 / 1 = 8 (left: 1 8) || 1 + 8 = 9 (left: 9)",
                "7 - 1 = 6 (left: 6 9 10) || 10 - 6 = 4 (left: 4 9) || 6 / 3 = 2 (",
                "1 + 7 = 8 (left: 8 9 10) || 10 - 9 = 1 (left: 8 1) || 8 / 1 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "1 + 7 = 8 (left: 8 9 10) || 10 - 9 = 1 (left: 8 1) || 8 / 1 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8 8) || 8 / 8 = 1 (left: 1)",
                "1 + 7 = 8 (left: 8 9 10) || 10 - 9 = 1 (left: 8 1) || 8 / 1 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)"
            ],
            "Pruning": [
                "0<-6.4",
                "2<-7.3",
                "3<-7.3",
                "4<-7.0"
            ],
            "Evaluation": [
                60.0,
                0.003,
                40.001,
                60.0,
                21.001
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 7.3",
                "2 <- 7.0",
                "3 <- 5.1",
                "4 <- 8.3"
            ]
        },
        "Step 9": {
            "steps": [
                "1 + 7 = 8 (left: 8 9 10) || 10 - 9 = 1 (left: 8 1) || 8 / 1 = 8 (left: 1 8) || 1 + 8 = 9",
                "1 + 7 = 8 (left: 8 9 10) || 10 - 9 = 1 (left: 8 1) || 8 / 1 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "1 + 7 = 8 (left: 8 9 10) || 10 - 9 = 1 (left: 8 1) || 8 / 1 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "1 + 7 = 8 (left: 8 9 10) || 10 - 9 = 1 (left: 8 1) || 8 / 1 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "1 + 7 = 8 (left: 8 9 10) || 10 - 9 = 1 (left: 8 1) || 8 / 1 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)"
            ],
            "Pruning": [
                "1<-6.0",
                "2<-6.0",
                "3<-6.0",
                "4<-6.0"
            ]
        },
        "Input": "1 7 9 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "873": {
        "puzzle": "2 3 9 13",
        "Step 0": {
            "steps": [
                "9 - 3 = 6 (left: 2 6 13)",
                "13 - 3 = 10 (left: 2 9 10)",
                "9 - 2 = 7 (left: 7 9 13)",
                "9 - 3 = 6 (left: 2 6 13)",
                "2 * 3 = 6 (left: 6 9 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                1.001,
                2.001,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "13 - 9 = 4 (left: 2 3 4)",
                "13 - 9 = 4 (left: 2 3 4)",
                "9 - 3 = 6 (left: 2 6 ",
                "3 * 9 = 27 (left: 2 27 13)",
                "9 - 3 = 6 (left: 2 6 "
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                60.0,
                0.002,
                1.002,
                21.001
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.0",
                "2 <- 1.0",
                "3 <- 1.0",
                "4 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "13 - 9 = 4 (left: 2 3 4) || Possible",
                "13 - 9 = 4 (left: 2 3 4) || 2 + 3 = 5 (left: 4 5)",
                "13 - 9 = 4 (left: 2 3 4) || 4 / 2 = 2 (left: 2 2)",
                "13 - 9 = 4 (left: 2 3 4) || 4 - 2 = 2 (left: 2 3 2)",
                "13 - 9 = 4 (left: 2 3 4) || 4 / 2 = 2 (left: 2 2)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.001,
                0.003,
                3.0,
                1.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.1",
                "2 <- INIT",
                "3 <- 1.1",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "13 - 9 = 4 (left: 2 4 13)",
                "13 - 9 = 4 (left: 2 3 4) || 2 + 3 = 5 (left: 4 5)",
                "9 + 2 = 11 (left: 3 11 13)",
                "13 - 9 = 4 (left: 2 3 4) || 3 + 4 = 7 (left: 2 7)",
                "9 - 2 = 7 (left: 7 9 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                1.002,
                2.001,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 3.4",
                "2 <- 1.0",
                "3 <- 1.1",
                "4 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "13 - 9 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12)",
                "9 - 2 = 7 (left: 7 9 13) || 7 + 9 = 16 (left: 16 13)",
                "13 - 9 = 4 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6)",
                "13 - 9 = 4 (left: 2 3 4) || 2 + 3 = 5 (left: 4 5)",
                "3 * 2 = 6 (left: 6 9 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                60.0,
                21.001,
                22.0
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 4.4",
                "2 <- 4.0",
                "3 <- 4.0",
                "4 <- 4.3"
            ]
        },
        "Step 5": {
            "steps": [
                "13 - 9 = 4 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "3 * 2 = 6 (left: 6 9 13) || 13 - 6 = 7 (left: 7 9)",
                "13 - 9 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "13 - 9 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "13 - 9 = 4 (left: 2 3 4) || 2 + 3 = 5 (left: 4 5) || 4 + 5 = 9 (left: 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.003,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 4.2",
                "2 <- 4.0",
                "3 <- 4.2",
                "4 <- 4.3"
            ]
        },
        "Step 6": {
            "steps": [
                "3 * 2 = 6 (left: 6 9 13) || 13 - 6 = 7 (left: 6 7 13)",
                "13 - 9 = 4 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "13 - 9 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "13 - 9 = 4 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "13 - 9 = 4 (left: 2 3 4) || 2 + 3 = 5 (left: 4 5) || 4 + 5 = 9 (left: 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                0.001,
                0.003,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 4.3",
                "2 <- 6.3",
                "3 <- 4.0",
                "4 <- 4.2"
            ]
        },
        "Step 7": {
            "steps": [
                "13 - 9 = 4 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "13 - 9 = 4 (left: 2 3 4) || 2 + 3 = 5 (left: 4 5) || Possible next steps:",
                "13 - 9 = 4 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 3) * (13 - 9) = 24",
                "13 - 9 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 2 + 12 = 14",
                "13 - 9 = 4 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 6 - 4 = 2 (left: 2)"
            ]
        },
        "Input": "2 3 9 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "874": {
        "puzzle": "3 3 3 5",
        "Step 0": {
            "steps": [
                "5 + 3 = 8 (left: 3 3 8)",
                "3 + 5 = 8 (left: 3 3 8)",
                "5 + 3 = 8 (left: 3 3 8)",
                "3 / 3 = 1 (left: 1 3 5)",
                "3 / 3 = 1 (left: 1 3 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                2.001,
                3.0,
                22.0,
                1.001
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- INIT",
                "2 <- 0.3",
                "3 <- INIT",
                "4 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "3 / 3 = 1 (left: 1 3 5) || 5 - 3 = 2 (left: 1 2)",
                "3 - 3 = 0 (left: 0 3 5)",
                "3 / 3 = 1 (left: 1 3 5) || 5 / 3 = 1.666666",
                "3 / 3 = 1 (left: 3 3 5)",
                "3 / 3 = 1 (left: 1 3 5) || 1 * 3 = 3 (left: 3 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                2.001,
                0.003,
                1.002,
                0.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 1.1",
                "2 <- 0.3",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "5 + 3 = 8 (left: 3 3 8) || 8 / 3 = 2 (left: 2 3)",
                "3 - 3 = 0 (left: 0 3 5) || 5 - 3 = 2 (left: 0 2)",
                "3 / 3 = 1 (left: 1 3 5) || 5 / 3 = 1.67 (left: 1 1.67)",
                "3 * 3 = 9 (left: 3 9 5)",
                "3 + 3 = 6 (left: 3 6 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                40.001,
                1.002,
                3.0,
                3.0
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 2.1",
                "2 <- INIT",
                "3 <- 1.3",
                "4 <- 2.3"
            ]
        },
        "Step 3": {
            "steps": [
                "3 / 3 = 1 (left: 1 3 5) || 1 * 3 = 3 (left: 3 5)",
                "3 - 3 = 0 (left: 0 3 5) || 5 - 3 = 2 (left: 0 2) || 0 * 2 = 0 (left: 0)",
                "5 - 3 = 2 (left: 3 3 2)",
                "3 / 3 = 1 (left: 3 3 5) || 3 * 3 = 9 (left: 9 5)",
                "3 * 3 = 9 (left: 3 9 5) || 3 + 9 = 12 (left: 5 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                2.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 2.1",
                "3 <- 2.1",
                "4 <- 2.1"
            ]
        },
        "Step 4": {
            "steps": [
                "3 - 3 = 0 (left: 0 3 5) || 5 - 3 = 2 (left: 0 2) || 5 - 5 = 0 (left: 0)",
                "3 - 3 = 0 (left: 0 3 5) || 5 - 3 = 2 (left: 0 2) || 0 + 2 = 2",
                "3 - 3 = 0 (left: 0 3 5) || 5 - 3 = 2 (left: 0 2) || 0 - 2 = -2 (left: -2)",
                "3 - 3 = 0 (left: 0 3 5) || 5 - 3 = 2 (left: 0 2) || 0 / 2 = 0 (left: 0)",
                "3 - 3 = 0 (left: 0 3 5) || 5 - 3 = 2 (left: 0 2) || 0 + 2 = 2 (left: 2)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.0,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.1",
                "2 <- 2.1",
                "3 <- 2.1",
                "4 <- 0.3"
            ]
        },
        "Step 5": {
            "steps": [
                "3 + 3 = 6 (left: 3 6 5)",
                "3 - 3 = 0 (left: 0 3 5) || 5 - 3 = 2 (left: 0 2) || 0 + 2 = 2 (left: 2)",
                "3 - 3 = 0 (left: 0 3 5) || 5 - 3 = 2 (left: 0 2) || 0 + 2 = 2 (left: 2)",
                "3 - 3 = 0 (left: 0 3 5) || 5 - 3 = 2 (left: 0 2) || 0 + 2 = 2",
                "3 / 3 = 1 (left: 1 3 5) || 3 / 1 = 3 (left: 3 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                0.001,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- INIT",
                "2 <- 5.0",
                "3 <- 0.3",
                "4 <- 2.1"
            ]
        },
        "Step 6": {
            "steps": [
                "3 - 3 = 0 (left: 0 3 5) || 5 - 3 = 2 (left: 0 2) || 0 * 2 = 0 (left: 0)",
                "5 - 3 = 2 (left: 3 3 2)",
                "3 + 3 = 6 (left: 3 6 5) || 5 + 3 = 8 (left: 6 8)",
                "3 / 3 = 1 (left: 1 3 5) || 1 * 3 = 3 (left: 3 5)",
                "3 - 3 = 0 (left: 0 3 5) || 5 - 3 = 2 (left: 0 2) || 2 / 0 is undefined"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                3.0,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 5.0",
                "2 <- 3.2",
                "3 <- 6.1",
                "4 <- 2.1"
            ]
        },
        "Step 7": {
            "steps": [
                "3 + 3 = 6 (left: 3 6 5) || 6 - 3 = 3 (left: 3 5)",
                "3 + 3 = 6 (left: 3 6 5) || 5 + 3 = 8 (left: 8)",
                "5 - 3 = 2 (left: 3 3 2) || 2 / 3 = 0.666666",
                "5 - 3 = 2 (left: 3 3 2) || 3 - 3 = 0 (left: 0 2)",
                "3 - 3 = 0 (left: 0 3 5) || 5 - 3 = 2 (left: 0 2) || 0 + 2 = 2 (left: 2)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.0,
                0.003,
                20.001,
                0.001
            ],
            "Resampling": [
                "0 <- 7.3",
                "1 <- 7.3",
                "2 <- 7.3",
                "3 <- 2.1",
                "4 <- 7.3"
            ]
        },
        "Step 8": {
            "steps": [
                "5 - 3 = 2 (left: 3 3 2) || 3 - 3 = 0 (left: 0 2) || 2 - 0 = 2 (left: 2)",
                "5 - 3 = 2 (left: 3 3 2) || 3 - 3 = 0 (left: 0 2) || 2 - 0 = 2 (left: 2)",
                "5 - 3 = 2 (left: 3 3 2) || 3 - 3 = 0 (left: 0 2) || 2 * 0 = 0 (left: 0)",
                "3 - 3 = 0 (left: 0 3 5) || 5 - 3 = 2 (left: 0 2) || 5 * 5 = 25 (left: 25",
                "5 - 3 = 2 (left: 3 3 2) || 3 - 3 = 0 (left: 0 2) || 2 / 0 = undefined (left: 0 2)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.0,
                0.002,
                60.0,
                21.001
            ],
            "Resampling": [
                "0 <- 8.3",
                "1 <- 8.3",
                "2 <- 8.3",
                "3 <- 8.3",
                "4 <- 8.4"
            ]
        },
        "Step 9": {
            "steps": [
                "3 - 3 = 0 (left: 0 3 5) || 5 - 3 = 2 (left: 0 2) || 5 * 5 = 25 (left: 25 || There are no possible next steps with the input of 25.",
                "3 - 3 = 0 (left: 0 3 5) || 5 - 3 = 2 (left: 0 2) || 5 * 5 = 25 (left: 25 || 25 * 5 = 125 (left: 125)",
                "3 - 3 = 0 (left: 0 3 5) || 5 - 3 = 2 (left: 0 2) || 5 * 5 = 25 (left: 25 || 25 + 2 = 27 (left: 2)",
                "3 - 3 = 0 (left: 0 3 5) || 5 - 3 = 2 (left: 0 2) || 5 * 5 = 25 (left: 25 || 25 - 2 = 23 (left: 2 23)",
                "5 - 3 = 2 (left: 3 3 2) || 3 - 3 = 0 (left: 0 2) || 2 / 0 = undefined (left: 0 2) || 0 + 2 = 2 (left: 2)"
            ],
            "Pruning": []
        },
        "Input": "3 3 3 5",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            }
        ]
    },
    "1025": {
        "puzzle": "2 6 10 13",
        "Step 0": {
            "steps": [
                "13 - 2 = 11 (left: 6 10 11)",
                "10 + 2 = 12 (left: 6 12 13)",
                "2 * 6 = 12 (left: 12 10 13)",
                "10 + 2 = 12 (left: 6 12 13)",
                "10 + 13 = 23 (left: 2 6 23)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                2.001,
                2.001,
                2.001,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "2 + 6 = 8 (left: 8 10 13)",
                "6 / 2 = 3 (left: 3 10 13)",
                "2 * 6 = 12 (left: 10 12 13)",
                "13 - 2 = 11 (left: 6 10 11)",
                "2 + 6 = 8 (left: 8 10 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.002,
                40.0,
                3.0,
                21.001
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 0.1",
                "2 <- 1.4",
                "3 <- 1.2",
                "4 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 6 = 12 (left: 10 12 13) || 12 + 13 = 25 (left: 10 25)",
                "10 + 2 = 12 (left: 6 12 13) || 6 + 12 = 18 (left: 18 13)",
                "2 + 6 = 8 (left: 8 10 13) || 8 * 10 = 80 (left: 13 80)",
                "2 * 6 = 12 (left: 10 12 13) || 12 - 10 = 2 (left: 2 13)",
                "2 * 6 = 12 (left: 10 12 13) || 13 - 12 = 1 (left: 1 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.003,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.4",
                "2 <- 1.2",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "2 + 6 = 8 (left: 8 10 13) || 10 - 8 = 2 (left: 2 13)",
                "2 + 6 = 8 (left: 8 10 13) || 13 - 8 = 5 (left: 8 5)",
                "2 * 6 = 12 (left: 10 12 13) || 10 / 12 = 0.833333333 (left: 0.833333333 13)",
                "2 + 6 = 8 (left: 8 10 13)",
                "10 + 2 = 12 (left: 6 12 "
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.001,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.2",
                "2 <- INIT",
                "3 <- 1.2",
                "4 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "2 + 6 = 8 (left: 8 10 13) || 8 + 10 = 18 (left: 13 18)",
                "2 * 6 = 12 (left: 10 12 13) || 10 * 12 = 120 (left: 120 13)",
                "6 + 10 = 16 (left: 2 16 13)",
                "2 * 6 = 12 (left: 10 12 13) || 12 / 10 = ",
                "2 * 6 = 12 (left: 12 10 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                2.001,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 4.2",
                "2 <- 1.2",
                "3 <- 4.2",
                "4 <- 1.2"
            ]
        },
        "Step 5": {
            "steps": [
                "2 * 6 = 12 (left: 12 10 13) || 10 + 13 = 23 (left: 12 23)",
                "6 + 10 = 16 (left: 2 16 13) || 2 * 16 = 32 (left: 13 32)",
                "2 * 6 = 12 (left: 10 12 13) || 10 / 12 = 0.83333 (left: 0.83333 13)",
                "6 + 10 = 16 (left: 2 16 13) || 16 - 13 = 3 (left: 2 3)",
                "2 * 6 = 12 (left: 10 12 13) || 10 + 13 = 23 (left: 12 23)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                1.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- 1.2",
                "4 <- 1.2"
            ]
        },
        "Step 6": {
            "steps": [
                "2 * 6 = 12 (left: 12 10 13) || 13 - 10 = 3 (left: 12 3)",
                "13 - 2 = 11 (left: 6 10 11) || 6 * 10 = 60 (left: 60 11)",
                "13 - 2 = 11 (left: 6 10 11) || 11 - 6 = 5 (left: 5 10)",
                "2 * 6 = 12 (left: 10 12 13) || 10 * 12 = 120 (left: 13 120)",
                "2 * 6 = 12 (left: 10 12 13) || 12 - 13 = -1 (left: 10 -1)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                21.001,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 6.2",
                "2 <- 4.2",
                "3 <- 6.2",
                "4 <- 6.2"
            ]
        },
        "Step 7": {
            "steps": [
                "13 - 2 = 11 (left: 6 10 11) || 11 - 6 = 5 (left: 5 10) || Input: 3 9",
                "13 - 2 = 11 (left: 6 10 11) || 11 - 6 = 5 (left: 5 10) || 3 + 9 = 12 (left: 12 27)",
                "6 + 10 = 16 (left: 2 16 13) || 13 - 2 = 11 (left: 11 16)",
                "13 - 2 = 11 (left: 6 10 11) || 11 - 6 = 5 (left: 5 10) || 10 - 5 = 5 (left: 5)",
                "13 - 2 = 11 (left: 6 10 11) || 11 - 6 = 5 (left: 5 10) || 3 - 6 = -3 (left: -"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.0
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 6.2",
                "2 <- 6.2",
                "3 <- 6.2",
                "4 <- 6.2"
            ]
        },
        "Step 8": {
            "steps": [
                "13 - 2 = 11 (left: 6 10 11) || 11 - 6 = 5 (left: 5 10) || 10 - 5 = 5 (left: 5)",
                "13 - 2 = 11 (left: 6 10 11) || 11 - 6 = 5 (left: 5 10) || 10 / 5 = 2 (left: 2)",
                "13 - 2 = 11 (left: 6 10 11) || 11 - 6 = 5 (left: 5 10) || 5 * 10 = 50 (left: 50)",
                "13 - 2 = 11 (left: 6 10 11) || 11 - 6 = 5 (left: 5 10) || 5 + 10 = 15 (left: 15)",
                "13 - 2 = 11 (left: 6 10 11) || 11 - 6 = 5 (left: 5 10) || 5 * 10 = 50 (left: 50)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 7.0",
                "1 <- 7.3",
                "2 <- 7.3",
                "3 <- 7.0",
                "4 <- 8.1"
            ]
        },
        "Step 9": {
            "steps": [
                "13 - 2 = 11 (left: 6 10 11) || 11 - 6 = 5 (left: 5 10) || Input: 3 9 || 9 + 3 = 12 (left: 12)",
                "13 - 2 = 11 (left: 6 10 11) || 11 - 6 = 5 (left: 5 10) || 10 - 5 = 5 (left: 5) || There are no possible next steps with just one number.",
                "13 - 2 = 11 (left: 6 10 11) || 11 - 6 = 5 (left: 5 10) || 10 - 5 = 5 (left: 5) || 5 + 2 = 7 (left: 7)",
                "13 - 2 = 11 (left: 6 10 11) || 11 - 6 = 5 (left: 5 10) || Input: 3 9 || 4 * 7 = 28",
                "13 - 2 = 11 (left: 6 10 11) || 11 - 6 = 5 (left: 5 10) || 10 / 5 = 2 (left: 2) || No possible next steps as there is only one number given."
            ],
            "Pruning": []
        },
        "Input": "2 6 10 13",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1026": {
        "puzzle": "6 8 9 12",
        "Step 0": {
            "steps": [
                "6 * 8 = 48 (left: 9 12 48)",
                "8 / 6 = 1.33333 (left: 1.33333 9 12)",
                "12 - 8 = 4 (left: 6 9 4)",
                "6 + 8 = 14 (left: 9 12 14)",
                "9 - 6 = 3 (left: 8 12 3)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                21.001,
                22.0,
                1.002,
                22.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.4",
                "2 <- 0.4",
                "3 <- INIT",
                "4 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "6 * 8 = 48 (left: 9 12 48) || 12 / 9 = 1.3333333333333333 (left: 1.333",
                "9 - 6 = 3 (left: 8 12 3) || 12 / 8 = 1.5 (left: 1.5 3)",
                "9 - 6 = 3 (left: 8 12 3) || 12 - 8 = 4 (left: 4 3)",
                "8 - 6 = 2 (left: 2 9 12)",
                "8 / 6 = 1.33333 (left: 1.33333 9 12) || 1.33333 + 9 \u2248 10.33333 (left: 10.33333 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.0,
                20.002,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- INIT",
                "2 <- 0.2",
                "3 <- 0.1",
                "4 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "9 - 6 = 3 (left: 8 12 3) || 8 + 12 = 20 (left: 20 3)",
                "9 - 6 = 3 (left: 3 8 12)",
                "12 - 8 = 4 (left: 6 9 4) || 9 / 6 = 1.5 (left: 1.5 4)",
                "8 / 6 = 1.33333 (left: 1.33333 9 12) || 12 - 1.33333 = 10.66667 (left: 9 10.66667)",
                "9 - 6 = 3 (left: 8 12 3) || 12 - 8 = 4 (left: 4 3) || 4 + 3 = 7 (left: 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                41.0,
                0.003,
                1.001,
                0.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 2.1",
                "2 <- 0.1",
                "3 <- 0.2",
                "4 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "8 / 6 = 1.33333 (left: 1.33333 9 12) || 1.33333 * 9 = 12 (left: 12 12)",
                "9 - 6 = 3 (left: 3 8 12) || 8 - 3 = 5 (left: 5 12)",
                "8 / 6 = 1.33333 (left: 1.33333 9 12) || 12 - 1.33333 = 10.66667 (left: 9 10.66667)",
                "12 - 8 = 4 (left: 6 9 4) || 6 * 9 = 54 (left: 4 54)",
                "9 - 6 = 3 (left: 3 8 12) || 3 * 8 = 24 (left: 24 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.001,
                0.002,
                2.001,
                0.003,
                21.001
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 3.0",
                "2 <- 3.0",
                "3 <- INIT",
                "4 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "6 + 8 = 14 (left: 9 12 14) || 12 - 9 = 3 (left: 3 14)",
                "8 / 6 = 1.33333 (left: 1.33333 9 12) || 1.33333 * 9 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "8 / 6 = 1.33333 (left: 1.33333 9 12) || 1.33333 * 9 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "8 - 6 = 2 (left: 2 9 12)",
                "8 / 6 = 1.33333 (left: 1.33333 9 12) || 1.33333 * 9 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 3.0",
                "2 <- 4.4",
                "3 <- 4.4",
                "4 <- 0.4"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 8 = 4 (left: 6 9 4) || 4 * 9 = 36 (left: 36)",
                "8 / 6 = 1.33333 (left: 1.33333 9 12) || 1.33333 * 9 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "8 / 6 = 1.33333 (left: 1.33333 9 12) || 1.33333 * 9 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (8 / 6) * 9 + 12 = 24",
                "8 / 6 = 1.33333 (left: 1.33333 9 12) || 1.33333 * 9 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((8 / 6) * 9) + 12 = 24",
                "9 - 6 = 3 (left: 8 12 3) || 8 - 12 = -4 (left: -4 3)"
            ]
        },
        "Input": "6 8 9 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "1027": {
        "puzzle": "1 5 7 9",
        "Step 0": {
            "steps": [
                "7 + 9 = 16 (left: 1 5 16)",
                "7 + 9 = 16 (left: 1 5 16)",
                "7 * 9 = 63 (left: 1 5 ",
                "1 * 5 = 5 (left: 5 7 9)",
                "1 * 5 = 5 (left: 5 7 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.001,
                3.0,
                0.002,
                3.0,
                2.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.3",
                "3 <- INIT",
                "4 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "5 + 7 = 12 (left: 1 12 9)",
                "5 * 7 = 35 (left: 1 35 9)",
                "1 * 5 = 5 (left: 5 7 9) || 7 + 9 = 16 (left: 5 16)",
                "5 + 7 = 12 (left: 1 12 9)",
                "1 * 5 = 5 (left: 5 7 9) || 9 - 5 = 4 (left: 4 7 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                20.001,
                1.001,
                1.002,
                2.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 1.1",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "7 + 9 = 16 (left: 1 5 16) || 16 - 5 = ",
                "5 * 7 = 35 (left: 1 35 9) || 1 - 35 = -34 (left:",
                "5 + 7 = 12 (left: 1 12 9)",
                "7 + 9 = 16 (left: 1 5 16) || 16 - 5 = 11 (left: 1 11)",
                "5 * 7 = 35 (left: 1 35 9) || 1 + 35 = 36 (left: 9 36)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                1.002,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.1",
                "2 <- 2.3",
                "3 <- 1.1",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "5 * 7 = 35 (left: 1 35 9) || 35 - 9 = 26 (left:",
                "5 * 7 = 35 (left: 1 35 9) || 9 / 1 = 9 (left: 35 9)",
                "7 + 9 = 16 (left: 1 5 16) || 16 - 5 = 11 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "5 * 7 = 35 (left: 1 35 9) || 9 - 1 = 8 (left:",
                "1 * 5 = 5 (left: 5 7 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.001,
                22.0,
                3.0
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 1.1",
                "2 <- 3.3",
                "3 <- 2.3",
                "4 <- 3.4"
            ]
        },
        "Step 4": {
            "steps": [
                "7 + 9 = 16 (left: 1 5 16) || 16 - 5 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "5 * 7 = 35 (left: 1 35 9) || 9 - 1 = 8 (left: 8 35)",
                "5 * 7 = 35 (left: 1 35 9) || 9 - 1 = 8 (left: || 1 - 9 = -8 (left: -8 8)",
                "7 + 9 = 16 (left: 1 5 16) || 16 - 5 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 * 5 = 5 (left: 5 7 9) || 7 + 9 = 16 (left: 5 16)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                1.001,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.3",
                "2 <- 2.3",
                "3 <- 3.3",
                "4 <- 3.3"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 5 = 6 (left: 6 7 9)",
                "7 + 9 = 16 (left: 1 5 16) || 16 - 5 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "7 + 9 = 16 (left: 1 5 16) || 16 - 5 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "5 * 7 = 35 (left: 1 35 9) || 9 - 1 = 8 (left: || 9 + 1 = 10 (left: 10)",
                "5 * 7 = 35 (left: 1 35 9) || 9 - 1 = 8 (left: || 9 / 1 = 9 (left: 8 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 3.3",
                "2 <- 5.0",
                "3 <- 3.3",
                "4 <- 3.3"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 5 = 5 (left: 5 7 9) || 7 * 9 = 63 (left: 5 63)",
                "5 * 7 = 35 (left: 1 35 9) || 9 - 1 = 8 (left: || 9 - 1 = 8 (left: 8)",
                "1 + 5 = 6 (left: 6 7 9) || 9 - 6 = 3 (left: 3 7)",
                "5 * 7 = 35 (left: 1 35 9) || 9 - 1 = 8 (left: || 9 + 1 = 10 (left: 10)",
                "5 * 7 = 35 (left: 1 35 9) || 9 - 1 = 8 (left: || 9 / 1 = 9 (left: 8 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                21.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 6.2",
                "2 <- 5.3",
                "3 <- 6.2",
                "4 <- 2.3"
            ]
        },
        "Step 7": {
            "steps": [
                "7 + 9 = 16 (left: 1 5 16) || 16 - 5 = 11 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "1 + 5 = 6 (left: 6 7 9) || 9 - 6 = 3 (left: 3 7) || 5 * 9 = 45",
                "5 * 7 = 35 (left: 1 35 9) || 9 - 1 = 8 (left: || 9 + 1 = 10 (left: 10) || 10 / 10 = 1 (left: 1)  ",
                "1 + 5 = 6 (left: 6 7 9) || 9 - 6 = 3 (left: 3 7) || Input: 5 9",
                "7 + 9 = 16 (left: 1 5 16) || 16 - 5 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)"
            ],
            "Pruning": [
                "2<-6.2"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.0,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 3.3",
                "2 <- 2.3",
                "3 <- 6.2",
                "4 <- 6.2"
            ]
        },
        "Step 8": {
            "steps": [
                "1 + 5 = 6 (left: 6 7 9) || 9 - 6 = 3 (left: 3 7) || 3 + 7 = 10 (left: 10)",
                "5 * 7 = 35 (left: 1 35 9) || 9 - 1 = 8 (left: || 9 - 1 = 8 (left: 8)",
                "7 + 9 = 16 (left: 1 5 16) || 16 - 5 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 + 5 = 6 (left: 6 7 9) || 9 - 6 = 3 (left: 3 7) || 3 + 7 = 10 (left: 10)",
                "1 + 5 = 6 (left: 6 7 9) || 9 - 6 = 3 (left: 3 7) || 7 - 3 = 4 (left: 4)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                0.001,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 8.0",
                "2 <- 7.1",
                "3 <- 6.1",
                "4 <- 7.3"
            ]
        },
        "Step 9": {
            "steps": [
                "5 * 7 = 35 (left: 1 35 9) || 9 - 1 = 8 (left: || 1 - 9 = -8 (left: -8 8) || -8 - 8 = -16 (left: -16)",
                "1 + 5 = 6 (left: 6 7 9) || 9 - 6 = 3 (left: 3 7) || 3 + 7 = 10 (left: 10) || 10 - 2 = 8 (left: 8)",
                "1 + 5 = 6 (left: 6 7 9) || 9 - 6 = 3 (left: 3 7) || 5 * 9 = 45 || 5 - 9 = -4 (left: -4 = 45)",
                "5 * 7 = 35 (left: 1 35 9) || 9 - 1 = 8 (left: || 9 - 1 = 8 (left: 8) || 8 / 8 = 1 (left: 1)",
                "1 + 5 = 6 (left: 6 7 9) || 9 - 6 = 3 (left: 3 7) || Input: 5 9 || 9 / 5 = 1.8 (left: 5)"
            ],
            "Pruning": []
        },
        "Input": "1 5 7 9",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "1028": {
        "puzzle": "1 3 7 7",
        "Step 0": {
            "steps": [
                "7 - 3 = 4 (left: 1 4 7)",
                "3 * 7 = 21 (left: 1 7 21)",
                "3 + 7 = 10 (left: 1 7 10)",
                "7 / 1 = 7 (left: 3 7 7)",
                "7 - 3 = 4 (left: 1 4 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                1.001,
                2.001,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- 0.3",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "7 / 1 = 7 (left: 3 7 7) || 3 + 7 = 10 (left: 7 10)",
                "7 - 3 = 4 (left: 1 4 7)",
                "3 * 7 = 21 (left: 1 7 21) || 1 + 7 = 8 (left: 8 21)",
                "7 / 1 = 7 (left: 3 7 7) || Possible",
                "3 * 7 = 21 (left: 1 7 21)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.002,
                1.002,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.3",
                "2 <- 0.3",
                "3 <- INIT",
                "4 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "7 / 1 = 7 (left: 3 7 7) || Input: 4 5 9",
                "7 / 1 = 7 (left: 3 7 7) || 7 - 3 = 4 (left: 4 7)",
                "7 / 1 = 7 (left: 3 7 7) || 5 + 11 = 16 (left: 16)",
                "7 / 1 = 7 (left: 7 7 7)",
                "7 / 1 = 7 (left: 3 7 7) || 3 * 7 = 21 (left: 7 7 21)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                2.0,
                2.001
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.3",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.3"
            ]
        },
        "Step 3": {
            "steps": [
                "7 / 1 = 7 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "7 / 1 = 7 (left: 3 7 7) || 7 / 3 = 2 (left: 2 7)",
                "3 + 7 = 10 (left: 1 10 7)",
                "7 / 3 = 2 (left: 1 2 7)",
                "7 / 1 = 7 (left: 3 7 7) || 7 - 3 = 4 (left: 4 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                2.001,
                1.002,
                0.0
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 3.2",
                "2 <- 0.3",
                "3 <- INIT",
                "4 <- 0.3"
            ]
        },
        "Step 4": {
            "steps": [
                "7 / 1 = 7 (left: 3 7 7) || 7 + 3 = 10 (left: 7 10)",
                "3 + 7 = 10 (left: 1 10 7) || Input: 3 6 9 2",
                "7 / 1 = 7 (left: 3 7 7) || 3 + 7 = 10 (left: 7 10)",
                "3 * 7 = 21 (left: 1 7 21)",
                "7 / 1 = 7 (left: 3 7 7) || 3 + 7 = 10 (left: 7 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                0.002,
                3.0,
                0.001
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 0.3",
                "2 <- 0.3",
                "3 <- 0.3",
                "4 <- 4.3"
            ]
        },
        "Step 5": {
            "steps": [
                "3 * 7 = 21 (left: 1 7 21) || 1 + 7 = 8 (left: 8 21)",
                "7 / 1 = 7 (left: 3 7 7) || 7 / 3 = 2 (left:",
                "7 / 1 = 7 (left: 3 7 7) || 3 + 7 = 10 (left: 7 10)",
                "7 / 1 = 7 (left: 3 7 7) || 7 - 3 = 4 (left: 4 7)",
                "3 * 7 = 21 (left: 1 7 21) || 7 * 3 = 21 (left: 1 21)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                2.0,
                1.001,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 0.2",
                "2 <- 5.2",
                "3 <- 2.3",
                "4 <- 5.4"
            ]
        },
        "Step 6": {
            "steps": [
                "7 / 1 = 7 (left: 3 7 7) || 3 + 7 = 10 (left: 7 10) || 10 / 7 = 1.42857 (left: 1.42857)",
                "3 + 7 = 10 (left: 1 7 10) || 10 - 1 = 9 (left: 7 9)",
                "7 / 1 = 7 (left: 3 7 7) || 3 + 7 = 10 (left: 7 10) || 7 * 10 = 70 (left: 70)",
                "7 / 1 = 7 (left: 7 7 7) || 7 / 7 = 1 (left: 1 7)",
                "3 * 7 = 21 (left: 1 7 21) || 7 * 3 = 21 (left: 1 21) || 21 - 1 = 20 (left: 20)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                20.0,
                0.003
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 6.3",
                "2 <- 6.3",
                "3 <- 6.3",
                "4 <- 6.3"
            ]
        },
        "Step 7": {
            "steps": [
                "7 / 1 = 7 (left: 7 7 7) || 7 / 7 = 1 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "7 / 1 = 7 (left: 7 7 7) || 7 / 7 = 1 (left: 1 7) || 1 * 7 = 7 (left: 7)",
                "7 / 1 = 7 (left: 7 7 7) || 7 / 7 = 1 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "7 / 1 = 7 (left: 7 7 7) || 7 / 7 = 1 (left: 1 7) || 1 + 7 = 8 (left: 8)",
                "7 / 1 = 7 (left: 7 7 7) || 7 / 7 = 1 (left: 1 7) || 1 + 7 = 8 (left: 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.002,
                0.001,
                0.0,
                0.001
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 6.3",
                "2 <- 5.4",
                "3 <- 6.3",
                "4 <- 6.3"
            ]
        },
        "Step 8": {
            "steps": [
                "7 / 1 = 7 (left: 7 7 7) || 7 / 7 = 1 (left: 1 7) || 1 * 7 = 7 (left: 7)",
                "7 / 1 = 7 (left: 7 7 7) || 7 / 7 = 1 (left: 1 7) || 1 + 7 = 8",
                "3 * 7 = 21 (left: 1 7 21) || 7 * 3 = 21 (left: 1 21) || 21 - 21 = 0 (left: 1 0)",
                "7 / 1 = 7 (left: 7 7 7) || 7 / 7 = 1 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "7 / 1 = 7 (left: 7 7 7) || 7 / 7 = 1 (left: 1 7) || 1 + 7 = 8 (left: 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 8.1",
                "1 <- 8.2",
                "2 <- 8.2",
                "3 <- 8.3",
                "4 <- 8.2"
            ]
        },
        "Step 9": {
            "steps": [
                "7 / 1 = 7 (left: 7 7 7) || 7 / 7 = 1 (left: 1 7) || 1 + 7 = 8 || 7 + 1 = 8 (left: 8 = 8)",
                "3 * 7 = 21 (left: 1 7 21) || 7 * 3 = 21 (left: 1 21) || 21 - 21 = 0 (left: 1 0) || 1 + 0 = 1",
                "3 * 7 = 21 (left: 1 7 21) || 7 * 3 = 21 (left: 1 21) || 21 - 21 = 0 (left: 1 0) || 1 / 0 = undefined",
                "7 / 1 = 7 (left: 7 7 7) || 7 / 7 = 1 (left: 1 7) || 7 - 1 = 6 (left: 6) || 6 / 2 = 3 (left: 3 8)",
                "3 * 7 = 21 (left: 1 7 21) || 7 * 3 = 21 (left: 1 21) || 21 - 21 = 0 (left: 1 0) || 1 + 0 = 1 (left: 0)"
            ],
            "Pruning": []
        },
        "Input": "1 3 7 7",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            }
        ]
    },
    "1029": {
        "puzzle": "2 9 11 13",
        "Step 0": {
            "steps": [
                "2 * 9 = 18 (left: 18 11 13)",
                "11 + 2 = 13 (left: 9 13 13)",
                "11 + 2 = 13 (left: 9 13 13)",
                "11 - 2 = 9 (left: ",
                "9 + 2 = 11 (left: 2 11 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                2.001,
                0.002,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.0",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 9 = 18 (left: 18 11 13)",
                "2 + 9 = 11 (left: 11 11 13)",
                "13 - 11 = 2 (left: 2 9 ",
                "2 * 9 = 18 (left: 18 11 13) || 11 + 13 = 24 (left: 18 24)",
                "11 + 2 = 13 (left: 9 13 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                0.003,
                1.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.1",
                "2 <- INIT",
                "3 <- 1.0",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 9 = 18 (left: 18 11 13) || 18 * 11 = 198 (left: 13 198)",
                "11 + 2 = 13 (left: 9 13 13) || 13 - 9 = 4 (left: 4 13)",
                "9 / 2 = 4.5 (left: 4.5 9 13)",
                "2 * 9 = 18 (left: 18 11 13) || 18 + 11 = 29 (left: 13 29)",
                "9 + 2 = 11 (left: 11 11 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                1.001,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 0.0",
                "2 <- 2.4",
                "3 <- 2.2",
                "4 <- 2.4"
            ]
        },
        "Step 3": {
            "steps": [
                "9 + 2 = 11 (left: 11 11 13) || 11 - 13 = -2 (left: -2 11)",
                "2 * 9 = 18 (left: 18 11 13) || Input: 5 9 3 7",
                "9 + 2 = 11 (left: 11 11 13) || 11 * 11 = 121 (left: 13 121)",
                "9 / 2 = 4.5 (left: 4.5 9 13) || 9 - 4.5 = 4.5 (left: 4.5 13)",
                "9 + 2 = 11 (left: 11 11 13) || 11 * 11 = 121 (left: 13 121)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.0,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.2",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "11 - 9 = 2 (left: 2 9 ",
                "9 / 2 = 4.5 (left: 4.5 9 13) || 13 - 9 = 4 (left: 4.5 4)",
                "11 / 2 = 5.5 (left: 5.5 11 13)",
                "13 - 2 = 11 (left: 9 11 11)",
                "2 * 9 = 18 (left: 18 11 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.001,
                3.0,
                1.001,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 4.1",
                "2 <- 2.4",
                "3 <- 4.2",
                "4 <- 0.1"
            ]
        },
        "Step 5": {
            "steps": [
                "2 * 9 = 18 (left: 18 11 13) || 18 / 11 = 1.6363636363636365 (left: 1.6363636363636365 13)",
                "9 / 2 = 4.5 (left: 4.5 9 13) || 13 - 9 = 4 (left: 4.5 4) || 4.5 + 4 = 8.5 (left: 8.5)",
                "9 + 2 = 11 (left: 11 11 13) || 11 + 11 = 22 (left: 13 22)",
                "11 / 2 = 5.5 (left: 5.5 11 13) || 11 - 5.5 = 5.5 (left: 5.5 13)",
                "11 + 2 = 13 (left: 9 13 13) || 9 + 13 = 22 (left: 13 22)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.0,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 2.4",
                "4 <- 4.2"
            ]
        },
        "Step 6": {
            "steps": [
                "13 - 9 = 4 (left: 2 4 11)",
                "2 + 9 = 11 (left: 11 11 13)",
                "9 + 11 = 20 (left: 2 20 13)",
                "9 + 2 = 11 (left: 11 11 13) || 11 - 11 = 0 (left: 0 13)",
                "11 / 2 = 5.5 (left: 5.5 11 13) || 5.5 * 2 = 11 (left: 11 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                0.003,
                1.002,
                0.0,
                60.0
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 6.4",
                "2 <- 6.4",
                "3 <- 6.4",
                "4 <- 6.4"
            ]
        },
        "Step 7": {
            "steps": [
                "9 / 2 = 4.5 (left: 4.5 9 13) || 13 - 9 = 4 (left: 4.5 4) || 4.5 + 4 = 8.5 (left: 8.5)",
                "11 / 2 = 5.5 (left: 5.5 11 13) || 5.5 * 2 = 11 (left: 11 13) || 11 / 13 = 0.846 (left: 0.846)",
                "11 / 2 = 5.5 (left: 5.5 11 13) || 5.5 * 2 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "11 / 2 = 5.5 (left: 5.5 11 13) || 5.5 * 2 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "11 / 2 = 5.5 (left: 5.5 11 13) || 5.5 * 2 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.002,
                40.0
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 7.4",
                "2 <- 6.4",
                "3 <- 7.4",
                "4 <- 7.4"
            ]
        },
        "Step 8": {
            "steps": [
                "11 / 2 = 5.5 (left: 5.5 11 13) || 5.5 * 2 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "11 / 2 = 5.5 (left: 5.5 11 13) || 5.5 * 2 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((11 / 2) * 2) + 13 = 24",
                "11 / 2 = 5.5 (left: 5.5 11 13) || 5.5 * 2 = 11 (left: 11 13) || 13 - 11 = 2 (left: 2)",
                "11 / 2 = 5.5 (left: 5.5 11 13) || 5.5 * 2 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: (11 * 2) + 13 = 24",
                "11 / 2 = 5.5 (left: 5.5 11 13) || 5.5 * 2 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: (11 * 2) + 13 = 24"
            ],
            "Pruning": [
                "1<-7.4",
                "3<-7.4",
                "4<-7.4"
            ],
            "Evaluation": [
                0.0,
                60.0,
                0.002,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 8.1",
                "1 <- 8.4",
                "2 <- 8.1",
                "3 <- 8.4",
                "4 <- 8.3"
            ]
        },
        "Step 9": {
            "steps": [
                "11 / 2 = 5.5 (left: 5.5 11 13) || 5.5 * 2 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: (11 * 2) + 13 = 24",
                "11 / 2 = 5.5 (left: 5.5 11 13) || 5.5 * 2 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((11 / 2) * 2) + 13 = 24",
                "11 / 2 = 5.5 (left: 5.5 11 13) || 5.5 * 2 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((11 / 2) * 2) + 13 = 24",
                "11 / 2 = 5.5 (left: 5.5 11 13) || 5.5 * 2 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((11 / 2) * 2) + 13 = 24",
                "11 / 2 = 5.5 (left: 5.5 11 13) || 5.5 * 2 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((11 / 2) * 2) + 13 = 24"
            ],
            "Pruning": []
        },
        "Input": "2 9 11 13",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "1030": {
        "puzzle": "3 7 9 11",
        "Step 0": {
            "steps": [
                "7 - 3 = 4 (left: 4 9 11)",
                "7 - 3 = 4 (left: 4 9 11)",
                "9 + 3 = 12 (left: 7 11 12)",
                "7 / 3 = 2.33 (left: 2.33 9 11)",
                "3 * 7 = 21 (left: 9 11 21)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                40.0,
                1.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.0",
                "2 <- INIT",
                "3 <- 0.0",
                "4 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "7 - 3 = 4 (left: 4 9 11) || 9 - 4 = 5 (left: 5 11)",
                "7 - 3 = 4 (left: 4 9 11) || 4 + 9 = 13 (left: 13 11)",
                "3 * 7 = 21 (left: 9 21 11)",
                "7 - 3 = 4 (left: 4 9 11) || 9 / 4 = 2.25 (left: 2.25 11)",
                "7 - 3 = 4 (left: 4 9 11) || 11 - 4 = 7 (left: 9 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                60.0,
                2.001,
                0.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.1",
                "2 <- INIT",
                "3 <- 1.1",
                "4 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "7 - 3 = 4 (left: 4 9 11) || 4 + 9 = 13 (left: 13 11) || 13 + 11 = 24 (left: 24)",
                "7 - 3 = 4 (left: 4 9 11) || 4 + 9 = 13 (left: 13 11) || 13 / 11 = 1.18 (left: 1.18)",
                "9 + 3 = 12 (left: 7 11 12)",
                "7 - 3 = 4 (left: 4 9 11) || 4 + 9 = 13 (left: 13 11) || 13 - 11 = 2 (left: 2)",
                "7 - 3 = 4 (left: 4 9 11) || 11 - 4 = 7 (left: 4 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                2.001,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 1.1",
                "2 <- 1.1",
                "3 <- 1.1",
                "4 <- 2.0"
            ]
        },
        "Step 3": {
            "steps": [
                "7 - 3 = 4 (left: 4 9 11) || 11 - 9 = 2 (left: 4 2)",
                "7 - 3 = 4 (left: 4 9 11) || 4 + 9 = 13 (left: 13 11) || 13 - 11 = 2 (left: 2)",
                "7 - 3 = 4 (left: 4 9 11) || 4 + 9 = 13 (left: 13 11) || 13 * 11 = 143 (left: 143)",
                "7 - 3 = 4 (left: 4 9 11) || 4 + 9 = 13 (left: 13 11) || 13 - 11 = 2 (left: 2)",
                "7 - 3 = 4 (left: 4 9 11) || 4 + 9 = 13 (left: 13 11) || 13 + 11 = 24 (left: 24) || Answer: (7 - 3) + (9 + 11) = 24"
            ]
        },
        "Input": "3 7 9 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "1031": {
        "puzzle": "4 8 8 10",
        "Step 0": {
            "steps": [
                "10 - 8 = 2 (left: 2 8 8)",
                "10 - 4 = 6 (left: 4 8 6)",
                "8 - 4 = 4 (left: 4 8 10)",
                "8 / 4 = 2 (left: 2 8 10)",
                "4 * 8 = 32 (left: 8 10 32)"
            ],
            "Pruning": [],
            "Evaluation": [
                21.001,
                41.0,
                2.001,
                0.003,
                2.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.0",
                "4 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "10 - 4 = 6 (left: 4 8 6)",
                "4 + 8 = 12 (left: 8 10 12)",
                "10 / 4 = 2.5 (left: 2.",
                "10 - 8 = 2 (left: 2 8 8) || 2 * 8 = 16 (left: 8 16)",
                "10 - 4 = 6 (left: 4 8 6) || 4 + 8 = 12 (left: 6 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                22.0,
                3.0,
                21.0,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.0",
                "2 <- 1.0",
                "3 <- INIT",
                "4 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "10 - 4 = 6 (left: 4 8 6) || 10 + 5 = 15 (left: 3",
                "10 - 8 = 2 (left: 2 8 8) || 2 * 8 = 16 (left: 8 16)",
                "10 - 4 = 6 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6)",
                "10 - 4 = 6 (left: 4 8 6)",
                "10 - 4 = 6 (left: 4 8 6) || 8"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                20.002,
                60.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 1.2",
                "2 <- 2.3",
                "3 <- 2.2",
                "4 <- 1.0"
            ]
        },
        "Step 3": {
            "steps": [
                "10 - 4 = 6 (left: 4 8 6) || 8 / 4 = 2 (left: 2 6)",
                "10 / 4 = 2.5 (left: 2. || There are no possible next steps with just one number provided. Please provide at least two numbers for calculations.",
                "10 - 4 = 6 (left: 4 8 6) || Possible",
                "10 - 4 = 6 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "10 - 4 = 6 (left: 4 8 6) || 6 - 4 = 2 (left: 2 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                20.002,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 3.2",
                "2 <- 1.3",
                "3 <- 2.3",
                "4 <- 1.2"
            ]
        },
        "Step 4": {
            "steps": [
                "10 - 8 = 2 (left: 2 8 8) || 2 * 8 = 16 (left: 8 16) || 16 / 8 = 2 (left: 2)",
                "10 - 4 = 6 (left: 4 8 6) || Possible || It looks like your input is incomplete. Please provide the numbers or operation you would like to perform next in order to generate the possible next steps.",
                "10 - 8 = 2 (left: 2 8 8) || 2 * 8 = 16 (left: 8 16) || 16 / 8 = 2 (left: 2 16)",
                "10 - 4 = 6 (left: 4 8 6) || 6 - 4 = 2 (left: 2 8)",
                "10 / 4 = 2.5 (left: 2. || 2 + 2 = 4"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 3.3",
                "2 <- 2.1",
                "3 <- 2.2",
                "4 <- 3.3"
            ]
        },
        "Step 5": {
            "steps": [
                "10 - 4 = 6 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (10 - 4) * (8 - 4) = 24",
                "10 - 4 = 6 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (8 - (10 - 4)) = 24",
                "10 - 8 = 2 (left: 2 8 8) || 2 * 8 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24)",
                "10 - 4 = 6 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "10 - 4 = 6 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (8 - (10 - 4)) = 24"
            ],
            "Pruning": [
                "0<-3.2",
                "1<-3.3",
                "4<-1.3"
            ],
            "Evaluation": [
                0.003,
                40.0,
                40.0,
                0.001,
                40.001
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 3.2",
                "2 <- 5.1",
                "3 <- 5.2",
                "4 <- 0.0"
            ]
        },
        "Step 6": {
            "steps": [
                "10 - 8 = 2 (left: 2 8 8) || 2 * 8 = 16 (left: 8 16) || 8 * 2 = 16 (left: 16)",
                "10 - 4 = 6 (left: 4 8 6) || Possible || There are many possible next steps depending on the context or specific problem you are working on. Without additional information, it is difficult to determine the exact next steps.",
                "10 - 4 = 6 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (8 - (10 - 4)) = 24",
                "10 - 8 = 2 (left: 2 8 8) || 2 * 8 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24) || Answer: (10 - 8) * (8 + 8) = 24",
                "10 - 8 = 2 (left: 2 8 8) || Input: 2 8"
            ],
            "Pruning": [
                "2<-2.3",
                "3<-5.1"
            ],
            "Evaluation": [
                0.003,
                0.003,
                22.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 6.3",
                "2 <- 6.3",
                "3 <- 6.3",
                "4 <- 6.3"
            ]
        },
        "Step 7": {
            "steps": [
                "10 - 4 = 6 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (10 - 4) * (8 - 8) = 24",
                "10 - 4 = 6 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (8 - (10 - 4)) = 24",
                "10 - 4 = 6 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (8 - (10 - 4)) = 24",
                "10 - 4 = 6 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (10 - 4) * (8 - 8) = 24",
                "10 - 4 = 6 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (8 - (10 - 4)) = 24"
            ],
            "Pruning": [
                "0<-6.3",
                "1<-2.1",
                "2<-6.3",
                "3<-5.1",
                "4<-5.1"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 7.4",
                "2 <- 7.1",
                "3 <- 6.3",
                "4 <- 7.3"
            ]
        },
        "Step 8": {
            "steps": [
                "10 - 8 = 2 (left: 2 8 8) || 2 * 8 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24) || Answer: (10 - 8) * (8 + 8) = 24",
                "10 - 4 = 6 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (8 - (10 - 4)) = 24",
                "10 - 8 = 2 (left: 2 8 8) || 2 * 8 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24)",
                "10 - 4 = 6 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (8 - (10 - 4)) = 24",
                "10 - 4 = 6 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (10 - 4) * (8 - 8) = 24"
            ],
            "Pruning": [
                "0<-5.2",
                "1<-7.4",
                "3<-7.2",
                "4<-7.0"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 8.3",
                "1 <- 8.4",
                "2 <- 8.1",
                "3 <- 8.3",
                "4 <- 8.3"
            ]
        },
        "Step 9": {
            "steps": [
                "10 - 4 = 6 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (8 - (10 - 4)) = 24",
                "10 - 4 = 6 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (8 - (10 - 4)) = 24",
                "10 - 4 = 6 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (10 - 4) * (8 - 8) = 24",
                "10 - 4 = 6 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (8 - (10 - 4)) = 24",
                "10 - 4 = 6 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (10 - 4) * (8 - 8) = 24"
            ],
            "Pruning": []
        },
        "Input": "4 8 8 10",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "1032": {
        "puzzle": "1 4 8 9",
        "Step 0": {
            "steps": [
                "8 - 4 = 4 (left: 1 4 ",
                "1 + 4 = 5 (left: 5 8 9)",
                "9 - 1 = 8 (left: 4 8 8)",
                "9 - 4 = 5 (left: 1 5 ",
                "9 - 4 = 5 (left: 1 5 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                2.0,
                60.0,
                0.002,
                3.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.2",
                "2 <- 0.0",
                "3 <- 0.2",
                "4 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "8 - 4 = 4 (left: 1 4  || 1 + 4 = 5",
                "9 - 1 = 8 (left: 4 8 8) || 8 / 4 = 2 (left: 2 8)",
                "8 - 4 = 4 (left: 1 4  || 1 + 4 = 5 (left: 5)",
                "9 - 1 = 8 (left: 4 8 8) || 8 / 4 = 2 (left: 2 8)",
                "9 - 1 = 8 (left: 4 8 8) || 4 + 8 = 12 (left: 8 8 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.001,
                0.002,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.0",
                "2 <- 0.2",
                "3 <- INIT",
                "4 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "9 - 1 = 8 (left: 4 8 8) || 8 / 4 = 2 (left: 2 8)",
                "8 - 4 = 4 (left: 1 4  || Possible next steps:",
                "9 - 1 = 8 (left: 4 8 8) || 4 + 8 = 12 (left: 8 12)",
                "4 * 8 = 32 (left: 1 32 9)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.001,
                22.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.3",
                "2 <- 2.4",
                "3 <- 2.4",
                "4 <- 0.0"
            ]
        },
        "Step 3": {
            "steps": [
                "4 * 8 = 32 (left: 1 32 9) || 32 - 1 = 31 (left: 9 31)",
                "4 * 8 = 32 (left: 1 32 9) || 32 - 1 = 31 (left: 31 9)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 / 4 = 2 (left: 2 8 8)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 / 4 = 2 (left: 2 8)",
                "8 - 4 = 4 (left: 1 4  || 4 / 1 = 4 (left: 4)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                2.001,
                1.002,
                0.001
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 2.4",
                "2 <- 2.4",
                "3 <- 0.2",
                "4 <- 2.4"
            ]
        },
        "Step 4": {
            "steps": [
                "9 - 1 = 8 (left: 4 8 8) || 8 / 4 = 2 (left: 2 8 8)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 + 8 = 12 (left: 8 8 12)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 + 8 = 12 (left: 8 8 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                2.001,
                0.003,
                22.0,
                21.001
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 2.4",
                "2 <- 4.4",
                "3 <- 4.4",
                "4 <- 2.4"
            ]
        },
        "Step 5": {
            "steps": [
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 + 8 = 12 (left: 8 8 12) || 12 / 8 = 1.5 (left: 1.5 8)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 * 4 = 32 (left: 8 32)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 + 8 = 12 (left: 8 8 12) || 8 + 8 = 16 (left: 16 12)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 + 8 = 12 (left: 8 8 12) || Input: 96",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 + 8 = 12 (left: 8 8 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                40.001,
                0.003,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 0.2",
                "2 <- 2.4",
                "3 <- 5.1",
                "4 <- 5.1"
            ]
        },
        "Step 6": {
            "steps": [
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8)",
                "9 - 1 = 8 (left: 4 8 8) || 8 / 4 = 2 (left: 2 8)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 * 4 = 32 (left: 8 8 32)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 * 4 = 32 (left: 8 32) || 32 / 8 = 4 (left: 4 8)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 * 4 = 32 (left: 8 32) || 32 / 8 = 4 (left: 4 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                22.0,
                2.0,
                22.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 6.2",
                "2 <- 2.3",
                "3 <- 4.1",
                "4 <- 5.1"
            ]
        },
        "Step 7": {
            "steps": [
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 + 8 = 12 (left: 8 8 12)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 * 4 = 32 (left: 8 8 32) || 32 - 8 = 24 (left: 8 24)",
                "4 * 8 = 32 (left: 1 32 9) || 1 + 32 = 33 (left: 9 33)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 + 8 = 12 (left: 8 8 12) || 8 + 8 = 16 (left: 16 12)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 * 4 = 32 (left: 8 32) || 8 + 32 = 40 (left: 40)"
            ],
            "Pruning": [
                "4<-5.1"
            ],
            "Evaluation": [
                1.002,
                2.0,
                20.002,
                0.003,
                20.001
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 6.0",
                "2 <- 6.2",
                "3 <- 6.0",
                "4 <- 6.0"
            ]
        },
        "Step 8": {
            "steps": [
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 * 4 = 32 (left: 8 8 32) || 32 / 8 = 4 (left: 4 8)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 * 4 = 32 (left: 8 8 32) || 32 - 8 = 24 (left: 8 24)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 + 8 = 12 (left: 8 12)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 4 + 8 = 12 (left: 8 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                0.003,
                1.001,
                0.002,
                1.001
            ],
            "Resampling": [
                "0 <- 8.0",
                "1 <- 7.4",
                "2 <- 8.0",
                "3 <- 8.0",
                "4 <- 7.4"
            ]
        },
        "Step 9": {
            "steps": [
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 * 4 = 32 (left: 8 8 32) || 32 / 8 = 4 (left: 4 8) || 4 * 8 = 32 (left: 8 32)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 * 4 = 32 (left: 8 32) || 32 / 8 = 4 (left: 4 32)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 * 4 = 32 (left: 8 8 32) || 32 / 8 = 4 (left: 4 8) || 4 + 8 = 12 (left: 12)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 * 4 = 32 (left: 8 8 32) || 32 / 8 = 4 (left: 4 8) || 4 * 8 = 32 (left: 8 32)",
                "9 - 1 = 8 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8 8) || 8 * 4 = 32 (left: 8 32) || 32 / 8 = 4 (left: 4 32)"
            ],
            "Pruning": [
                "2<-8.0"
            ]
        },
        "Input": "1 4 8 9",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1033": {
        "puzzle": "2 5 11 12",
        "Step 0": {
            "steps": [
                "2 + 5 = 7 (left: 7 11 12)",
                "5 * 11 = 55 (left: 2 55 12)",
                "11 + 2 = 13 (left: 5 13 12)",
                "2 * 5 = 10 (left: 10 11 12)",
                "5 * 2 = 10 (left: 10 11 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                1.002,
                3.0,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "11 - 5 = 6 (left: 2 6 12)",
                "5 + 11 = 16 (left: 2 16 12)",
                "2 + 5 = 7 (left: 7 11 12)",
                "5 + 11 = 16 (left: 2 16 12)",
                "11 + 2 = 13 (left: 5 13 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                2.001,
                2.001,
                2.001,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 11 = 1 (left: 2 5 ",
                "12 - 11 = 1 (left: 2 5 ",
                "2 + 5 = 7 (left: 7 11 12)",
                "11 - 2 = 9 (left: 5 9 ",
                "12 - 5 = 7 (left: 2 7 "
            ],
            "Pruning": [],
            "Evaluation": [
                40.0,
                20.0,
                3.0,
                0.0,
                0.001
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 2.0",
                "3 <- 2.1",
                "4 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 11 = 1 (left: 2 5  || 2 * 5 = 10 (left: 10)",
                "12 - 11 = 1 (left: 2 5  || 5 - 2 = 3 (left: 3)",
                "12 - 11 = 1 (left: 2 5  || 5 / 2 = 2.5 (left: 2.5)",
                "12 - 11 = 1 (left: 2 5  || 2 + 5 = 7 (left: 7)",
                "12 - 11 = 1 (left: 2 5  || 5 - 2 = 3 (left: 3)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.0,
                0.002,
                0.002,
                0.0
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.0",
                "2 <- 2.0",
                "3 <- 2.0",
                "4 <- 2.0"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 11 = 1 (left: 2 5  || 2 * 5 = 10 (left: 10)",
                "12 - 11 = 1 (left: 2 5  || 5 / 2 = 2.5 (left: 2.5)",
                "12 - 11 = 1 (left: 2 5  || 5 - 2 = 3 (left: 3)",
                "12 - 11 = 1 (left: 2 5  || 5 - 2 = 3 (left: 3)",
                "12 - 11 = 1 (left: 2 5  || 2 + 5 = 7 (left: 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 2.0",
                "3 <- INIT",
                "4 <- 2.0"
            ]
        },
        "Step 5": {
            "steps": [
                "11 - 5 = 6 (left: 2 6 12)",
                "2 * 5 = 10 (left: 10 11 12)",
                "12 - 11 = 1 (left: 2 5  || Possible next steps:",
                "2 + 5 = 7 (left: 7 11 12)",
                "12 - 11 = 1 (left: 2 5  || Possible next steps:"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                1.002,
                0.003,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.1",
                "2 <- 2.0",
                "3 <- 5.0",
                "4 <- 2.1"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 11 = 1 (left: 2 5  || 2 * 5 = 10 (left: 10)",
                "12 - 11 = 1 (left: 2 5  || 2 + 5 = 7 (left: 7)",
                "12 - 11 = 1 (left: 2 5  || 5 - 2 = 3 (left: 3)",
                "11 - 5 = 6 (left: 2 6 12) || 12 / 6 = 2 (left: 2 12)",
                "12 - 11 = 1 (left: 2 5  || 10 * 3 = 30"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.0,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 6.3",
                "2 <- 2.1",
                "3 <- 6.3",
                "4 <- 6.3"
            ]
        },
        "Step 7": {
            "steps": [
                "11 - 5 = 6 (left: 2 6 12) || 12 / 6 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "11 - 5 = 6 (left: 2 6 12) || 12 / 6 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "12 - 11 = 1 (left: 2 5  || 3 + 9 = 12 (left: 12 12)",
                "11 - 5 = 6 (left: 2 6 12) || 12 / 6 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "11 - 5 = 6 (left: 2 6 12) || 12 / 6 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                20.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 7.2",
                "2 <- 6.3",
                "3 <- 6.3",
                "4 <- 6.3"
            ]
        },
        "Step 8": {
            "steps": [
                "11 - 5 = 6 (left: 2 6 12) || 12 / 6 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "12 - 11 = 1 (left: 2 5  || 3 + 9 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "11 - 5 = 6 (left: 2 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "11 - 5 = 6 (left: 2 6 12) || 12 / 6 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "11 - 5 = 6 (left: 2 6 12) || 12 / 6 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                60.0,
                40.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 8.1",
                "1 <- 8.2",
                "2 <- 8.2",
                "3 <- 8.1",
                "4 <- 8.1"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 11 = 1 (left: 2 5  || 3 + 9 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: 2 * (5 + (11 - 12)) * 12 = 24",
                "11 - 5 = 6 (left: 2 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: 2 * (11 - 5) * 12 = 24",
                "11 - 5 = 6 (left: 2 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (11 - 5) * (2 * 12) = 24",
                "12 - 11 = 1 (left: 2 5  || 3 + 9 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (12 - 11) + (2 * 5) = 24",
                "12 - 11 = 1 (left: 2 5  || 3 + 9 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((2 + 5) + 11) + 12 = 24"
            ],
            "Pruning": []
        },
        "Input": "2 5 11 12",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "1034": {
        "puzzle": "2 3 7 13",
        "Step 0": {
            "steps": [
                "13 + 2 = 15 (left: 3 7 ",
                "7 * 2 = 14 (left: 3 14 13)",
                "13 - 7 = 6 (left: 2 3 6)",
                "2 + 3 = 5 (left: 5 7 13)",
                "3 * 2 = 6 (left: 6 7 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                2.001,
                2.001,
                2.001,
                1.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "13 - 3 = 10 (left: 2 7 ",
                "3 + 7 = 10 (left: 2 10 13)",
                "7 - 3 = 4 (left: 2 4 ",
                "13 - 7 = 6 (left: 2 3 6)",
                "3 + 7 = 10 (left: 2, 10, 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                1.0,
                41.0,
                1.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "13 - 7 = 6 (left: 2 3 6) || 6 / 3 = 2 (left:",
                "13 - 7 = 6 (left: 2 3 6) || 6 / 3 = 2 (left: 2 6)",
                "13 - 7 = 6 (left: 2 3 6) || 2 + 3 = 5 (left: 5 6)",
                "2 + 3 = 5 (left: 5 7 13)",
                "3 * 7 = 21 (left: 2 21 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.0,
                1.0,
                0.002,
                3.0,
                2.001
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.3",
                "2 <- 2.3",
                "3 <- 0.2",
                "4 <- 2.0"
            ]
        },
        "Step 3": {
            "steps": [
                "13 - 7 = 6 (left: 2 3 6) || 5 * 2 = 10 (left: 4",
                "13 - 7 = 6 (left: 2 3 6) || 2 + 3 = 5 (left: 5 6)",
                "2 + 3 = 5 (left: 5 7 13) || 7 / 5 = 1.4 (left: 1.4 13)",
                "13 - 7 = 6 (left: 2 3 6) || 2 + 3 = 5 (left: 5 6)",
                "13 - 7 = 6 (left: 2 3 6) || 6 / 3 = 2 (left: || 6 / 2 = 3 (left"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.002,
                0.002,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.3",
                "2 <- 0.4",
                "3 <- 2.4",
                "4 <- 1.3"
            ]
        },
        "Step 4": {
            "steps": [
                "13 - 7 = 6 (left: 2 3 6) || 6 - 3 = 3 (left: 2 6)",
                "13 - 7 = 6 (left: 2 3 6) || 6 - 3 = 3 (left: 2 3)",
                "3 * 2 = 6 (left: 6 7 13) || 6 * 7 = 42 (left: 42 13)",
                "3 * 7 = 21 (left: 2 21 13) || 13 - 2 = 11 (left: 11 21)",
                "13 - 7 = 6 (left: 2 3 6) || 6 - 2 = 4 (left: 4 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.001,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 4.4",
                "2 <- 1.3",
                "3 <- 4.4",
                "4 <- 4.4"
            ]
        },
        "Step 5": {
            "steps": [
                "13 - 7 = 6 (left: 2 3 6) || 6 - 2 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "13 - 7 = 6 (left: 2 3 6) || 6 - 2 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "13 - 7 = 6 (left: 2 3 6) || 3 * 2 = 6 (left: 6)",
                "13 - 7 = 6 (left: 2 3 6) || 6 - 2 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "13 - 7 = 6 (left: 2 3 6) || 6 - 2 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 4.4",
                "2 <- 1.3",
                "3 <- 4.4",
                "4 <- 4.4"
            ]
        },
        "Step 6": {
            "steps": [
                "3 * 7 = 21 (left: 2 21 13) || 13 / 2 = 6.5 (left: 6.5 13)",
                "13 - 7 = 6 (left: 2 3 6) || 6 - 2 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "13 - 7 = 6 (left: 2 3 6) || Input: 3 5 7",
                "13 - 7 = 6 (left: 2 3 6) || 6 - 2 = 4 (left: 4 6) || 4 - 6 = -2 (left: -2)",
                "13 - 7 = 6 (left: 2 3 6) || 6 - 2 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.001,
                0.001,
                0.003,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 6.0",
                "2 <- 2.3",
                "3 <- 6.0",
                "4 <- 6.0"
            ]
        },
        "Step 7": {
            "steps": [
                "3 * 7 = 21 (left: 2 21 13) || 13 / 2 = 6.5 (left: 6.5 13) || 6.5 * 2 = 13 (left: 13)",
                "3 * 7 = 21 (left: 2 21 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 / 6.5 = 2 (left: 2)",
                "2 + 3 = 5 (left: 5 7 13) || 7 * 5 = 35 (left: 35 13)",
                "3 * 7 = 21 (left: 2 21 13) || 13 / 2 = 6.5 (left: 6.5 13) || 6.5 / 13 = 0.5 (left: 0.5)",
                "3 * 7 = 21 (left: 2 21 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 6"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                1.0,
                1.001
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 6.0",
                "2 <- 6.0",
                "3 <- 6.0",
                "4 <- 6.0"
            ]
        },
        "Step 8": {
            "steps": [
                "3 * 7 = 21 (left: 2 21 13) || 13 / 2 = 6.5 (left: 6.5 13) || Input: 3 9 9.75",
                "3 * 7 = 21 (left: 2 21 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 / 6.5 = 2 (left: 2)",
                "3 * 7 = 21 (left: 2 21 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 * 2 = 26 (left: 6.5 26)",
                "3 * 7 = 21 (left: 2 21 13) || 13 / 2 = 6.5 (left: 6.5 13) || 6.5 * 2 = 13 (left: 13)",
                "3 * 7 = 21 (left: 2 21 13) || 13 / 2 = 6.5 (left: 6.5 13) || 6.5 * 2 = 13 (left: 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 7.4",
                "1 <- 7.4",
                "2 <- 7.4",
                "3 <- 7.4",
                "4 <- 7.4"
            ]
        },
        "Step 9": {
            "steps": [
                "3 * 7 = 21 (left: 2 21 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 6 || Possible next steps:",
                "3 * 7 = 21 (left: 2 21 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 6 || 6.5 - 6 = 0.5 (left: 0.5 6)",
                "3 * 7 = 21 (left: 2 21 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 6 || 6.5 + 6 = 12.5 (left: 12.5)",
                "3 * 7 = 21 (left: 2 21 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 6 || 6.5 - 6 = 0.5 (left: 0.5)",
                "3 * 7 = 21 (left: 2 21 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 6 || 6.5 - 6 = 0.5 (left: 0.5)"
            ],
            "Pruning": []
        },
        "Input": "2 3 7 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "1035": {
        "puzzle": "3 5 10 13",
        "Step 0": {
            "steps": [
                "10 + 3 = 13 (left: 5 10 13)",
                "10 / 5 = 2 (left: 3 2 13)",
                "10 - 5 = 5 (left: 3 5 10)",
                "5 - 3 = 2 (left: 2 10 13)",
                "5 * 3 = 15 (left: 10 13 15)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                2.0,
                1.002,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "13 - 10 = 3 (left: 3 5 13)",
                "10 / 5 = 2 (left: 3 2 13)",
                "13 - 10 = 3 (left: 3 10 13)",
                "10 + 3 = 13 (left: 5 13 13)",
                "13 - 10 = 3 (left: 3 5 15)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                1.0,
                2.001,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.0",
                "2 <- 1.2",
                "3 <- 0.1",
                "4 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "10 + 3 = 13 (left: 5 13 13)",
                "10 + 3 = 13 (left: 5 10 13) || 5 * 10 = 50 (left: 50 13)",
                "13 - 10 = 3 (left: 3 10 13) || 13 - 3 = 10 (left: 10 13)",
                "10 / 5 = 2 (left: 3 2 13) || 2 * 13 = 26 (left: 3 26)",
                "10 / 5 = 2 (left: 3 2 13) || 13 - 2 = 11 (left: 3 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "10 + 3 = 13 (left: 5 10 13) || 5 + 10 = 15 (left: 15 13)",
                "10 - 3 = 7 (left: 5 7 13)",
                "13 - 5 = 8 (left: 3 8 ",
                "13 - 5 = 8 (left: 3 8 13)",
                "13 - 3 = 10 (left: 5 10 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                3.0,
                60.0,
                60.0,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 3.2",
                "2 <- 3.2",
                "3 <- 3.2",
                "4 <- 3.3"
            ]
        },
        "Step 4": {
            "steps": [
                "10 - 3 = 7 (left: 7 10 13)",
                "13 - 5 = 8 (left: 3 8  || 8 / 3 = 2.67 (left: 2.67)",
                "13 - 5 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24)",
                "13 - 5 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24)",
                "13 - 5 = 8 (left: 3 8 13) || 8 - 3 = 5 (left: 5 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.003,
                60.0,
                60.0,
                20.001
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 4.4",
                "2 <- 4.2",
                "3 <- 4.4",
                "4 <- 3.2"
            ]
        },
        "Step 5": {
            "steps": [
                "13 - 5 = 8 (left: 3 8  || 3 + 8 = 11 (left: 11)",
                "13 - 5 = 8 (left: 3 8 13) || 8 - 3 = 5 (left: 5 13) || 5 * 13 = 65 (left: 65)",
                "13 - 5 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (13 - 5) = 24",
                "13 - 5 = 8 (left: 3 8 13) || 8 - 3 = 5 (left: 5 13) || 5 + 13 = 18 (left: 18)",
                "13 - 5 = 8 (left: 3 8  || 4 * 9 = 36"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                60.0,
                20.001,
                0.003
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 4.3",
                "2 <- 5.2",
                "3 <- 3.2",
                "4 <- 3.2"
            ]
        },
        "Step 6": {
            "steps": [
                "10 - 3 = 7 (left: 5 7 13) || 7 / 5 = 1.4 (left: 1.4 13)",
                "13 - 5 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (13 - 5) = 24",
                "13 - 5 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (13 - 5) = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n3 + 4 = 7 (left: 7 12)\n7 * 12 = 84 (left: 84)\nAnswer: (2 * 6) * (3 + 4) = 84\nInput: 1 3 5 7\nSteps:\n5 - 3 = 2 (left:",
                "13 - 5 = 8 (left: 3 8  || 8 - 3 = 5 (left: 5)",
                "13 - 5 = 8 (left: 3 8  || 8 - 3 = 5 (left: 5)"
            ],
            "Pruning": [
                "2<-5.2"
            ],
            "Evaluation": [
                1.001,
                60.0,
                60.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 6.1",
                "2 <- 5.3",
                "3 <- 6.2",
                "4 <- 6.1"
            ]
        },
        "Step 7": {
            "steps": [
                "13 - 5 = 8 (left: 3 8 13) || 13 - 8 = 5 (left: 3 5)",
                "13 - 5 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (13 - 5) = 24 || All possible solutions have been provided.",
                "13 - 5 = 8 (left: 3 8 13) || 8 - 3 = 5 (left: 5 13) || 5 + 13 = 18 (left: 18) || No possible next steps for the number 18.",
                "13 - 5 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (13 - 5) = 24 || Input: 6 6 7 9\nSteps:\n6 * 7 = 42 (left: 6 9 42)\n42 - 9 = 33 (left: 6 33)\n33 - 6 = 27 (left: 27)\nAnswer: ((6 * 7) - 9) - 6 = 24",
                "13 - 5 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (13 - 5) = 24 || Input: 2 3 4 9\nSteps:\n2 * 9 = 18 (left: 3 4 18)\n18 - 4 = 14 (left: 3 14)\n14 - 3 = 11 (left: 11)\n11 + 9 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((2 * 9) - 4) + 3 +"
            ],
            "Pruning": [
                "1<-6.2",
                "3<-6.1",
                "4<-6.1"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 7.4",
                "2 <- 6.2",
                "3 <- 7.3",
                "4 <- 7.1"
            ]
        },
        "Step 8": {
            "steps": [
                "13 - 5 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (13 - 5) = 24 || Input: 2 3 6 8\nSteps:\n3 * 8 = 24 (left: 2 6 24)\n2 * 6 = 12 (left: 12 24)\n12 + 24 = 36 (left: 36)\nAnswer: (3 * 8) + (2 * 6) = 24",
                "13 - 5 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (13 - 5) = 24 || Input: 3 6 7 8\nSteps:\n7 + 8 = 15 (left: 3 6 15)\n6 * 3 = 18 (left: 18 15)\n18 - 15 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 - 3 = 24 (left: 24)\nAnswer",
                "13 - 5 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (13 - 5) = 24 || Input: 2 3 6 8\nSteps:\n3 * 8 = 24 (left: 2 6 24)\n2 * 6 = 12 (left: 12 24)\n12 + 24 = 36 (left: 36)\nAnswer: ((2 * 6) * 8) + 3 = 24",
                "13 - 5 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (13 - 5) = 24 || Input: 6 6 6 6\nSteps:\n6 * 6 = 36 (left: 6 6 36)\n6 - 6 = 0 (left: 0 36)\n0 + 36 = 36 (left: 36)\nAnswer: ((6 * 6) - 6) + 6 = 24",
                "13 - 5 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (13 - 5) = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n3 + 4 = 7 (left: 7 12)\n7 * 12 = 84 (left: 84)\nAnswer: (2 * 6) * (3 + 4) = 24"
            ],
            "Pruning": [
                "0<-7.3",
                "1<-7.4",
                "2<-7.3",
                "3<-7.4",
                "4<-6.1"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 8.3",
                "1 <- 8.0",
                "2 <- 7.3",
                "3 <- 8.1",
                "4 <- 8.2"
            ]
        },
        "Step 9": {
            "steps": [
                "13 - 5 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (13 - 5) = 24 || Input: 2 3 4 6\nSteps:\n2 * 4 = 8 (left: 3 6 8)\n6 - 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (2 * 4) * (6 - 3) = 24",
                "13 - 5 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (13 - 5) = 24 || Input: 2 3 5 5\nSteps:\n5 + 5 = 10 (left: 2 3 10)\n3 * 10 = 30 (left: 2 30)\n30 - 2 = 28 (left: 28)\n28 / 4 = 24 (left: 24)\nAnswer: ((5 + 5) * 3 - 2) = 24",
                "13 - 5 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (13 - 5) = 24 || Input: 2 3 4 12\nSteps:\n3 + 12 = 15 (left: 2 4 15)\n4 * 15 = 60 (left: 2 60)\n60 / 2 = 30 (left: 30)\nAnswer: (3 + 12) * (4 * 15) / 2 = 24",
                "13 - 5 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (13 - 5) = 24 || Input: 2 3 4 6\nSteps:\n2 * 3 = 6 (left: 4 6)\n4 + 6 = 10 (left: 10)\n10 * 2 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((2 * 3) + 4) + 6 = 24",
                "13 - 5 = 8 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (13 - 5) = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 / 2 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nAnswer: (3 * 4) * (6 / 2) = 24"
            ],
            "Pruning": [
                "0<-7.2",
                "1<-7.2",
                "2<-7.2",
                "3<-7.2",
                "4<-7.2"
            ]
        },
        "Input": "3 5 10 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1036": {
        "puzzle": "3 5 6 10",
        "Step 0": {
            "steps": [
                "6 - 3 = 3 (left: 3 5 10)",
                "3 + 5 = 8 (left: 6 8 10)",
                "3 + 5 = 8 (left: 6 8 10)",
                "10 - 6 = 4 (left: 3 5 4)",
                "5 + 6 = 11 (left: 3 10 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                22.0,
                22.0,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.1",
                "2 <- 0.1",
                "3 <- 0.1",
                "4 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "3 + 5 = 8 (left: 6 8 10) || 8 - 6 = 2 (left: 2 10)",
                "3 + 5 = 8 (left: 6 8 10) || 6 * 8 = 48 (left: 10 48)",
                "3 + 5 = 8 (left: 6 8 10) || 6 * 8 = 48 (left: 48 10)",
                "3 + 5 = 8 (left: 6 8 10) || 10 - 8 = 2 (left: 2 10)",
                "3 + 5 = 8 (left: 6 8 10) || 6 + 8 = 14 (left: 10 14)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.0,
                1.002,
                0.0,
                0.0,
                40.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- INIT",
                "2 <- 0.2",
                "3 <- 1.4",
                "4 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "3 + 5 = 8 (left: 6 8 10) || 6 + 8 = 14 (left: 10 14) || 10 - 14 = -4 (left: -4 14)",
                "5 + 6 = 11 (left: 3 11 10)",
                "3 + 5 = 8 (left: 6 8 10) || 10 - 6 = 4 (left:",
                "3 + 5 = 8 (left: 6 8 10) || 6 + 8 = 14 (left: 10 14) || 10 - 14 = -4 (left: -4 14)",
                "3 + 5 = 8 (left: 6 8 10) || 10 / 2 = 5 (left: 6 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.0,
                3.0,
                22.0,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- INIT",
                "2 <- 1.1",
                "3 <- 2.1",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "3 + 5 = 8 (left: 6 8 10) || 6 + 8 = 14 (left: 10 14) || 10 - 14 = -4 (left: -4 14) || -4 * 14 = -56 (left: -56)",
                "3 + 5 = 8 (left: 6 8 10)",
                "3 + 5 = 8 (left: 6 8 10) || 6 * 8 = 48 (left: 10 48) || 48 / 2 = 24 (left: 10 24)",
                "5 + 6 = 11 (left: 3 11 10) || 10 / 3 = 3.33 (left: 3.33 10)",
                "3 * 5 = 15 (left: 6 15 10)"
            ],
            "Pruning": [
                "0<-0.2"
            ],
            "Evaluation": [
                3.0,
                22.0,
                0.003,
                0.003,
                41.0
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 3.1",
                "2 <- 2.3",
                "3 <- 2.3",
                "4 <- 2.2"
            ]
        },
        "Step 4": {
            "steps": [
                "3 + 5 = 8 (left: 6 8 10) || 6 + 8 = 14 (left: 10 14) || 10 - 14 = -4 (left: -4 14) || -4 - 14 = -18 (left: -18)",
                "3 + 5 = 8 (left: 6 8 10) || 8 / 6 = 1.33 (left: 1.33 10)",
                "3 + 5 = 8 (left: 6 8 10) || 6 + 8 = 14 (left: 10 14) || 10 - 14 = -4 (left: -4 14) || 14 / -4 = -3.5 (left: -3.5)",
                "3 + 5 = 8 (left: 6 8 10) || 6 + 8 = 14 (left: 10 14) || 10 - 14 = -4 (left: -4 14) || -4 + 14 = 10 (left: 10)",
                "3 + 5 = 8 (left: 6 8 10) || 10 - 6 = 4 (left: || 6 ^ 10 = 60466176 (left: 60466176)"
            ],
            "Pruning": [
                "0<-2.3",
                "2<-3.1",
                "3<-3.4"
            ],
            "Evaluation": [
                20.0,
                2.001,
                22.0,
                2.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 4.3",
                "2 <- 4.2",
                "3 <- 3.4",
                "4 <- 2.2"
            ]
        },
        "Step 5": {
            "steps": [
                "3 + 5 = 8 (left: 6 8 10) || 10 - 6 = 4 (left: || 10 * 6 = 60 (left: 4 60)",
                "3 * 5 = 15 (left: 6 15 10) || 10 - 6 = 4 (left: 4 10)",
                "3 + 5 = 8 (left: 6 8 10) || 6 * 8 = 48 (left: 10 48)",
                "3 * 5 = 15 (left: 6 15 10) || 15 - 6 = 9 (left: 9 10)",
                "3 + 5 = 8 (left: 6 8 10) || 10 - 6 = 4 (left: || 10 - 4 = 6 (left: 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                40.0,
                0.002,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 0.1",
                "2 <- 5.0",
                "3 <- 5.0",
                "4 <- 5.0"
            ]
        },
        "Step 6": {
            "steps": [
                "3 + 5 = 8 (left: 6 8 10) || 10 - 6 = 4 (left: || 10 * 6 = 60 (left: 4 60) || 60 - 4 = 56 (left: 56)",
                "3 + 5 = 8 (left: 6 8 10) || 10 - 6 = 4 (left: 4 8)",
                "3 + 5 = 8 (left: 6 8 10) || 10 - 6 = 4 (left: || 10 * 6 = 60 (left: 4 60) || 4 + 60 = 64 (left: 64)",
                "3 + 5 = 8 (left: 6 8 10) || 10 - 6 = 4 (left: || 10 * 6 = 60 (left: 4 60) || 60 / 4 = 15 (left: 15)",
                "3 + 5 = 8 (left: 6 8 10) || 10 - 6 = 4 (left: || 10 * 6 = 60 (left: 4 60) || 4 * 60 = 240 (left: 60)"
            ],
            "Pruning": [
                "0<-2.3",
                "2<-2.3",
                "3<-4.0",
                "4<-3.1"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.0,
                21.0,
                41.0
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.3",
                "2 <- 5.0",
                "3 <- 6.4",
                "4 <- 5.1"
            ]
        },
        "Step 7": {
            "steps": [
                "5 + 6 = 11 (left: 3 11 10) || 10 / 3 = 3.33 (left: 3.33 10)",
                "3 + 5 = 8 (left: 6 8 10) || 6 + 8 = 14 (left: 10 14) || 10 - 14 = -4 (left: -4 14) || -4 * 14 = -56 (left: -56)",
                "3 + 5 = 8 (left: 6 8 10) || 10 - 6 = 4 (left: || 10 * 6 = 60 (left: 4 60) || 4 + 60 = 64 (left: 64)",
                "3 + 5 = 8 (left: 6 8 10) || 8 - 6 = 2 (left: 2 10)",
                "3 * 5 = 15 (left: 6 15 10) || 10 - 6 = 4 (left: 4 10) || 10 - 4 = 6 (left: 6)"
            ],
            "Pruning": [
                "1<-5.0",
                "2<-5.0"
            ],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                0.0,
                0.002
            ],
            "Resampling": [
                "0 <- 7.2",
                "1 <- 7.2",
                "2 <- 7.1",
                "3 <- 7.2",
                "4 <- 7.1"
            ]
        },
        "Step 8": {
            "steps": [
                "3 + 5 = 8 (left: 6 8 10) || 10 - 6 = 4 (left: || 10 * 6 = 60 (left: 4 60) || 60 - 4 = 56 (left: 56)",
                "3 + 5 = 8 (left: 6 8 10) || 10 - 6 = 4 (left: || 10 * 6 = 60 (left: 4 60) || 4 + 60 = 64 (left: 60 64)",
                "3 + 5 = 8 (left: 6 8 10) || 10 - 6 = 4 (left: || 10 * 6 = 60 (left: 4 60) || 60 - 4 = 56 (left: 56)",
                "3 + 5 = 8 (left: 6 8 10) || 10 - 6 = 4 (left: || 10 * 6 = 60 (left: 4 60) || 60 - 4 = 56 (left: 56)",
                "3 + 5 = 8 (left: 6 8 10) || 10 - 6 = 4 (left: || 10 * 6 = 60 (left: 4 60) || 4 * 60 = 240 (left: 240)"
            ],
            "Pruning": [
                "0<-6.3",
                "2<-7.1",
                "3<-7.1",
                "4<-5.0"
            ],
            "Evaluation": [
                0.0,
                0.003,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 7.2",
                "1 <- 7.2",
                "2 <- 8.3",
                "3 <- 7.2",
                "4 <- 7.1"
            ]
        },
        "Step 9": {
            "steps": [
                "3 + 5 = 8 (left: 6 8 10) || 10 - 6 = 4 (left: || 10 * 6 = 60 (left: 4 60) || 60 / 4 = 15 (left: 15 60)",
                "3 + 5 = 8 (left: 6 8 10) || 10 - 6 = 4 (left: || 10 * 6 = 60 (left: 4 60) || 60 - 4 = 56 (left: 4 56)",
                "3 + 5 = 8 (left: 6 8 10) || 10 - 6 = 4 (left: || 10 * 6 = 60 (left: 4 60) || 60 - 4 = 56 (left: 56)",
                "3 + 5 = 8 (left: 6 8 10) || 10 - 6 = 4 (left: || 10 * 6 = 60 (left: 4 60) || 60 / 4 = 15 (left: 15 60)",
                "3 + 5 = 8 (left: 6 8 10) || 10 - 6 = 4 (left: || 10 * 6 = 60 (left: 4 60) || 4 * 60 = 240 (left: 60)"
            ],
            "Pruning": [
                "2<-8.1",
                "4<-8.1"
            ]
        },
        "Input": "3 5 6 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1037": {
        "puzzle": "4 5 5 10",
        "Step 0": {
            "steps": [
                "4 + 5 = 9 (left: 5 5 10)",
                "5 - 4 = 1 (left: 1 5 ",
                "4 / 5 = 0.8 (left: 0.8 5 10)",
                "4 + 5 = 9 (left: 5 5 10)",
                "5 - 4 = 1 (left: 1 5 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.002,
                3.0,
                40.001,
                22.0
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.3",
                "2 <- INIT",
                "3 <- 0.4",
                "4 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "4 + 5 = 9 (left: 5 5 10) || 5 / 5 = 1 (left: 1 10)",
                "4 + 5 = 9 (left: 5 5 10) || 5 + 5 = 10 (left: 10 10)",
                "5 / 4 = 1.25 (left: 1.25 5 10)",
                "5 - 4 = 1 (left: 1 5 10) || 10 - 5 = 5 (left: 1 5)",
                "4 + 5 = 9 (left: 5 5 10) || Input: 3 6 9"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.001,
                1.002,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.3",
                "2 <- 1.3",
                "3 <- 1.3",
                "4 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "5 - 4 = 1 (left: 1 5 10) || 10 - 5 = 5 (left: 1 5) || 1 + 5 = 6",
                "4 + 5 = 9 (left: 5 5 10) || 10 / 5 = 2 (left: 5 2)",
                "5 - 4 = 1 (left: 1 5 10) || 10 - 5 = 5 (left: 1 5) || 1 + 5 = 6 (left: 6)",
                "5 - 4 = 1 (left: 1 5 10) || 10 - 5 = 5 (left: 1 5) || 5 - 1 = 4 (left: 4)",
                "4 + 5 = 9 (left: 5 5 10) || 5 + 5 = 10 (left: 10 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                40.001,
                0.002,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 1.0",
                "2 <- 0.3",
                "3 <- 2.1",
                "4 <- 0.4"
            ]
        },
        "Step 3": {
            "steps": [
                "4 + 5 = 9 (left: 5 5 10) || 10 / 5 = 2 (left: 5 2) || 5 * 2 = 10 (left: 10)",
                "4 + 5 = 9 (left: 5 5 10) || 5 / 5 = 1 (left: 1 10) || 1 + 10 = 11",
                "4 + 5 = 9 (left: 5 5 10) || 5 - 5 = 0 (left: 0 10)",
                "4 + 5 = 9 (left: 5 5 10) || 10 / 5 = 2 (left: 5 2) || 5 / 2 = 2.5 (left: 2.5)",
                "5 - 4 = 1 (left: 1 5 10) || 5 * 10 = 50 (left: 1 50)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.0,
                0.001,
                20.002
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 2.1",
                "2 <- 1.0",
                "3 <- 1.0",
                "4 <- 2.1"
            ]
        },
        "Step 4": {
            "steps": [
                "5 - 4 = 1 (left: 1 5 10) || 5 * 10 = 50 (left: 1 50) || 50 / 1 = 50 (left: 50)",
                "4 + 5 = 9 (left: 5 5 10) || 10 / 5 = 2 (left: 5 2) || 5 / 2 = 2.5 (left: 2.5)",
                "4 + 5 = 9 (left: 5 5 10) || 5 / 5 = 1 (left: 1 10) || 5 * 3 = 15 (left: 3)",
                "4 + 5 = 9 (left: 5 5 10) || 5 / 5 = 1 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "4 + 5 = 9 (left: 5 5 10) || 10 / 5 = 2 (left: 5 2) || 5 + 2 = 7 (left: 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.0,
                0.0,
                0.002,
                0.0
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 3.4",
                "2 <- 3.4",
                "3 <- 1.3",
                "4 <- 1.3"
            ]
        },
        "Step 5": {
            "steps": [
                "4 + 5 = 9 (left: 5 5 10) || 10 - 5 = 5 (left: 5 10)",
                "5 - 4 = 1 (left: 1 5 10) || 5 * 10 = 50 (left: 1 50) || 1 + 50 = 51 (left: 51)",
                "5 - 4 = 1 (left: 1 5 10) || 5 * 10 = 50 (left: 1 50) || 1 + 50 = 51 (left: 51)",
                "5 - 4 = 1 (left: 1 5 10) || 10 - 5 = 5 (left: 1 5) || 1 + 5 = 6 (left: 6)",
                "5 - 4 = 1 (left: 1 5 10) || 10 - 5 = 5 (left: 1 5) || 5 - 1 = 4 (left: 4)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 3.4",
                "2 <- 2.1",
                "3 <- 3.4",
                "4 <- 3.4"
            ]
        },
        "Step 6": {
            "steps": [
                "4 + 5 = 9 (left: 5 5 10) || 10 / 5 = 2 (left: 5 2) || 5 + 2 = 7 (left: 7)",
                "5 - 4 = 1 (left: 1 5 10) || 5 * 10 = 50 (left: 1 50) || 1 + 50 = 51 (left: 51)",
                "4 + 5 = 9 (left: 5 5 10) || 10 / 5 = 2 (left: 5 2) || 5 / 2 = 2.5 (left: 2.5)",
                "5 - 4 = 1 (left: 1 5 10) || 5 * 10 = 50 (left: 1 50) || 1 * 50 = 50 (left: 50)",
                "5 - 4 = 1 (left: 1 5 10) || 5 * 10 = 50 (left: 1 50) || 1 + 50 = 51"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 0.3",
                "3 <- 1.0",
                "4 <- 1.3"
            ]
        },
        "Step 7": {
            "steps": [
                "4 + 5 = 9 (left: 5 5 10) || 10 / 5 = 2 (left: 5 2) || 5 - 2 = 3 (left: 3)",
                "4 + 5 = 9 (left: 5 5 10) || 10 / 5 = 2 (left: 5 2) || 5 + 2 = 7 (left: 7)",
                "4 + 5 = 9 (left: 5 5 10) || 10 / 5 = 2 (left: 2 10)",
                "4 + 5 = 9 (left: 5 5 10) || 5 / 5 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "5 - 4 = 1 (left: 1 5 10) || 10 - 5 = 5 (left: 1 5) || 1 + 5 = 6"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                3.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 7.2",
                "2 <- 1.3",
                "3 <- 2.1",
                "4 <- 1.3"
            ]
        },
        "Step 8": {
            "steps": [
                "4 + 5 = 9 (left: 5 5 10) || 10 / 5 = 2 (left: 5 2) || 5 + 2 = 7 (left: 7)",
                "4 + 5 = 9 (left: 5 5 10) || 10 / 5 = 2 (left: 2 10) || 2 + 10 = 12 (left: 10)",
                "5 - 4 = 1 (left: 1 5 10) || 10 - 5 = 5 (left: 1 5) || 5 - 1 = 4 (left: 4)",
                "4 + 5 = 9 (left: 5 5 10) || 10 / 5 = 2 (left: 5 2) || 5 - 2 = 3 (left: 3)",
                "5 - 4 = 1 (left: 1 5 10) || 10 - 5 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.003,
                0.001,
                20.001,
                0.002
            ],
            "Resampling": [
                "0 <- 8.3",
                "1 <- 8.3",
                "2 <- 8.3",
                "3 <- 8.3",
                "4 <- 8.3"
            ]
        },
        "Step 9": {
            "steps": [
                "4 + 5 = 9 (left: 5 5 10) || 10 / 5 = 2 (left: 5 2) || 5 - 2 = 3 (left: 3) || There are no possible next steps with the input 3.",
                "4 + 5 = 9 (left: 5 5 10) || 10 / 5 = 2 (left: 5 2) || 5 - 2 = 3 (left: 3) || There are no possible next steps with the input of 3.",
                "4 + 5 = 9 (left: 5 5 10) || 10 / 5 = 2 (left: 5 2) || 5 - 2 = 3 (left: 3) || There are no possible next steps with the input of 3.",
                "4 + 5 = 9 (left: 5 5 10) || 10 / 5 = 2 (left: 5 2) || 5 - 2 = 3 (left: 3) || There is only one number provided, so there are no possible next steps to calculate.",
                "4 + 5 = 9 (left: 5 5 10) || 10 / 5 = 2 (left: 5 2) || 5 - 2 = 3 (left: 3) || There are no possible next steps with the input 3."
            ],
            "Pruning": []
        },
        "Input": "4 5 5 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1038": {
        "puzzle": "7 8 9 10",
        "Step 0": {
            "steps": [
                "7 + 8 = 15 (left: 9 10 15)",
                "8 - 7 = 1 (left: 1 9 10)",
                "10 - 9 = 1 (left: 1 10)",
                "7 + 8 = 15 (left: 9 10 15)",
                "10 - 9 = 1 (left: 7 8 1)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                22.0,
                60.0,
                1.002,
                3.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.4",
                "2 <- 0.2",
                "3 <- 0.2",
                "4 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "10 - 9 = 1 (left: 1 10) || 10 - 10 = 0 (left: 0)",
                "10 - 9 = 1 (left: 7 8 1) || 7 * 8 = 56 (left: 56)",
                "10 - 9 = 1 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "10 - 9 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "10 - 9 = 1 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "10 - 9 = 1 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "8 / 7 = 1.142857 (left: 1.142857 8 9 10)",
                "7 * 8 = 56 (left: 9 10 56)",
                "10 - 9 = 1 (left: 7 1 10)",
                "8 * 9 = 72 (left: 7 10 72)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                3.0,
                2.001,
                2.001,
                2.001
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.1",
                "2 <- INIT",
                "3 <- 2.2",
                "4 <- 0.2"
            ]
        },
        "Step 3": {
            "steps": [
                "10 - 9 = 1 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "8 - 7 = 1 (left: 1 9 10) || 1 + 9 = 10 (left: 10 10)",
                "7 * 8 = 56 (left: 9 10 56)",
                "7 * 8 = 56 (left: 9 10 56) || 9 * 10 = 90 (left: 56 90)",
                "10 - 9 = 1 (left: 1 10) || 1 + 10 = 11 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                2.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.1",
                "2 <- INIT",
                "3 <- 0.2",
                "4 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "10 - 9 = 1 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "8 - 7 = 1 (left: 1 9 10) || 1 * 9 = 9 (left: 9 10)",
                "9 + 1 = 10 (left: 8 10 10)",
                "10 - 9 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "10 - 9 = 1 (left: 7 1 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                20.002,
                3.0,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 4.1",
                "2 <- 4.2",
                "3 <- 4.1",
                "4 <- INIT"
            ]
        },
        "Step 5": {
            "steps": [
                "8 - 7 = 1 (left: 1 9 10) || 1 * 9 = 9 (left: 9 10) || 9 * 10 = 90 (left: 10 90)",
                "8 - 7 = 1 (left: 1 9 10) || 1 * 9 = 9 (left: 9 10) || 9 + 10 = 19 (left: 19)",
                "9 + 1 = 10 (left: 8 10 10) || 8 + 10 = 18 (left: 10 18)",
                "8 - 7 = 1 (left: 1 9 10) || 1 * 9 = 9 (left: 9 10) || 10 - 9 = 1 (left: 1)",
                "10 - 8 = 2 (left: 7 9 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 4.1",
                "2 <- 0.4",
                "3 <- 4.4",
                "4 <- 4.1"
            ]
        },
        "Step 6": {
            "steps": [
                "7 + 8 = 15 (left: 9 10 15)",
                "8 - 7 = 1 (left: 1 9 10) || 1 * 9 = 9 (left: 9 10) || Possible next steps:",
                "10 - 9 = 1 (left: 7 8 1) || 8 - 7 = 1 (left: 1 1)",
                "10 - 9 = 1 (left: 7 1 10) || 10 - 1 = 9 (left: 7 9)",
                "8 - 7 = 1 (left: 1 9 10) || 1 * 9 = 9 (left: 9 10) || 9 * 10 = 90 (left: 90)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                0.003,
                1.002,
                1.002,
                0.002
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 5.4",
                "2 <- 4.4",
                "3 <- 6.0",
                "4 <- 0.2"
            ]
        },
        "Step 7": {
            "steps": [
                "9 + 1 = 10 (left: 8 10 10) || 10 - 2 = 8 (left: 8 10)",
                "10 - 8 = 2 (left: 7 9 10) || 10 / 7 = 1.43 (left: 1.43)",
                "10 - 9 = 1 (left: 7 1 10) || 10 / 1 = 10 (left: 7 10)",
                "7 + 8 = 15 (left: 9 10 15) || 9 + 10 = 19 (left: 15 19)",
                "10 - 9 = 1 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                0.001,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 7.0",
                "1 <- 7.0",
                "2 <- 7.0",
                "3 <- 6.2",
                "4 <- 7.0"
            ]
        },
        "Step 8": {
            "steps": [
                "9 + 1 = 10 (left: 8 10 10) || 10 - 2 = 8 (left: 8 10) || 8 + 10 = 18 (left: 18)",
                "9 + 1 = 10 (left: 8 10 10) || 10 - 2 = 8 (left: 8 10) || 8 + 10 = 18 (left: 18)",
                "9 + 1 = 10 (left: 8 10 10) || 10 - 2 = 8 (left: 8 10) || 8 + 10 = 18 (left: 18)",
                "10 - 9 = 1 (left: 7 8 1) || 8 - 7 = 1 (left: 1 1) || 1 / 1 = 1 (left: 1)",
                "9 + 1 = 10 (left: 8 10 10) || 10 - 2 = 8 (left: 8 10) || 10 - 8 = 2 (left: 2)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.001,
                0.003,
                20.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 8.0",
                "1 <- 8.2",
                "2 <- 8.2",
                "3 <- 8.2",
                "4 <- 8.2"
            ]
        },
        "Step 9": {
            "steps": [
                "9 + 1 = 10 (left: 8 10 10) || 10 - 2 = 8 (left: 8 10) || 8 + 10 = 18 (left: 18) || There is only one possible next step: 18 divided by 2 = 9 (left: 9)",
                "9 + 1 = 10 (left: 8 10 10) || 10 - 2 = 8 (left: 8 10) || 8 + 10 = 18 (left: 18) || There are no possible next steps for the number 18 as it is the final result.",
                "9 + 1 = 10 (left: 8 10 10) || 10 - 2 = 8 (left: 8 10) || 8 + 10 = 18 (left: 18) || 18 + 8 = 26 (left: 8)",
                "9 + 1 = 10 (left: 8 10 10) || 10 - 2 = 8 (left: 8 10) || 8 + 10 = 18 (left: 18) || None, as there is only one number left.",
                "9 + 1 = 10 (left: 8 10 10) || 10 - 2 = 8 (left: 8 10) || 8 + 10 = 18 (left: 18) || There are no possible next steps as there are no other numbers given to perform operations with."
            ],
            "Pruning": []
        },
        "Input": "7 8 9 10",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1039": {
        "puzzle": "2 5 8 10",
        "Step 0": {
            "steps": [
                "8 + 2 = 10 (left: 5 10 10)",
                "10 / 2 = 5 (left: 2 5 8)",
                "10 / 2 = 5 (left: 5 8 10)",
                "2 + 5 = 7 (left: 7 8 10)",
                "10 / 2 = 5 (left: 5 8 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                3.0,
                41.0,
                60.0,
                22.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.3",
                "2 <- 0.3",
                "3 <- 0.4",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "10 / 2 = 5 (left: 5 8 10) || 5 * 8 = 40 (left: 10 40)",
                "2 + 5 = 7 (left: 7 8 10) || 8 / 7 = 1.14 (left: 1.14 8 10)",
                "2 + 5 = 7 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8)",
                "10 / 2 = 5 (left: 5 8 10) || 8 / 5 = 1.6 (left: 1.6 10)",
                "2 + 5 = 7 (left: 7 8 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.0,
                3.0,
                60.0,
                0.003,
                22.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.4"
            ]
        },
        "Step 2": {
            "steps": [
                "2 + 5 = 7 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8)",
                "2 + 5 = 7 (left: 7 8 10)",
                "10 - 2 = 8 (left: 8 5 10)",
                "8 / 2 = 4 (left: 4 5 ",
                "10 / 2 = 5 (left: 5 8 10) || 8 - 5 = 3 (left: 3 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                22.0,
                1.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 2.1",
                "2 <- 2.1",
                "3 <- INIT",
                "4 <- 1.0"
            ]
        },
        "Step 3": {
            "steps": [
                "2 + 5 = 7 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "2 + 5 = 7 (left: 7 8 10) || 8 - 7 = 1 (left: 1 8 10)",
                "2 + 5 = 7 (left: 7 8 10) || 10",
                "2 + 5 = 7 (left: 7 8 10)",
                "10 / 2 = 5 (left: 5 8 10) || 5 * 8 = 40 (left: 10 40) || 40 /  10 = 4 (left: 4 40)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.002,
                0.003,
                22.0,
                20.002
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 3.3",
                "2 <- 3.0",
                "3 <- 2.0",
                "4 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "10 / 2 = 5 (left: 5 8 10) || 5 * 8 = 40 (left: 10 40) || 40 /  10 = 4 (left: 4 40) || Possible next steps:",
                "2 + 5 = 7 (left: 7 8 10) || 10 + 7 = 17 (left: 8 17)",
                "2 + 5 = 7 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (2 + 5) * (10 - 8) = 24",
                "2 + 5 = 7 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "2 + 5 = 7 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (2 + 5) * (8 - 10) = 24"
            ],
            "Pruning": [
                "2<-3.3",
                "4<-3.0"
            ],
            "Evaluation": [
                0.003,
                0.002,
                3.0,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 3.3",
                "2 <- 3.0",
                "3 <- 2.0",
                "4 <- 3.3"
            ]
        },
        "Step 5": {
            "steps": [
                "2 + 5 = 7 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (2 + 5) * (8 - 10) = 24",
                "2 + 5 = 7 (left: 7 8 10) || 8 - 7 = 1 (left: 1 10)",
                "2 + 5 = 7 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (2 + 5) * (10 - 8) = 24",
                "2 + 5 = 7 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "2 + 5 = 7 (left: 7 8 10) || 8 / 7 = 1.14 (left: 1.14 10)"
            ],
            "Pruning": [
                "0<-2.0",
                "2<-3.0"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                0.0,
                1.001
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 3.4",
                "2 <- 5.2",
                "3 <- 4.4",
                "4 <- 5.0"
            ]
        },
        "Step 6": {
            "steps": [
                "2 + 5 = 7 (left: 7 8 10) || 8 - 7 = 1 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "10 / 2 = 5 (left: 5 8 10) || 5 * 8 = 40 (left: 10 40) || 40 /  10 = 4 (left: 4 40) || 4 + 40 = 44 (left: 44)",
                "2 + 5 = 7 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (2 + 5) * (8 - 10) = 24",
                "2 + 5 = 7 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (2 + 5) * (10 - 8) = 24",
                "2 + 5 = 7 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)"
            ],
            "Pruning": [
                "1<-4.4",
                "2<-3.0",
                "3<-4.4"
            ],
            "Evaluation": [
                0.001,
                60.0,
                20.0,
                40.0,
                60.0
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 3.3",
                "2 <- 5.1",
                "3 <- 4.4",
                "4 <- 5.2"
            ]
        },
        "Step 7": {
            "steps": [
                "10 / 2 = 5 (left: 5 8 10) || 5 * 8 = 40 (left: 10 40) || 40 /  10 = 4 (left: 4 40) || 4 + 40 = 44 (left: 44)",
                "2 + 5 = 7 (left: 7 8 10) || 7 * 8 = 56 (left: 10 56)",
                "2 + 5 = 7 (left: 7 8 10) || 8 - 7 = 1 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "2 + 5 = 7 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (2 + 5) * (8 - 10) = 24",
                "2 + 5 = 7 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (2 + 5) * (8 - 10) = 24"
            ],
            "Pruning": [
                "0<-5.1",
                "3<-6.4",
                "4<-6.3"
            ],
            "Evaluation": [
                40.0,
                0.002,
                0.001,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 5.1",
                "2 <- 7.0",
                "3 <- 7.3",
                "4 <- 7.3"
            ]
        },
        "Step 8": {
            "steps": [
                "10 / 2 = 5 (left: 5 8 10) || 5 * 8 = 40 (left: 10 40) || 40 /  10 = 4 (left: 4 40) || 4 * 10 = 40 (left: 40)",
                "2 + 5 = 7 (left: 7 8 10) || 8 - 7 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "2 + 5 = 7 (left: 7 8 10) || 8 - 7 = 1 (left: 1 10) || 1 + 10 = 11 (left: 11) ",
                "2 + 5 = 7 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (2 + 5) * (10 - 8) = 24",
                "2 + 5 = 7 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (2 + 5) * (10 - 8) = 24"
            ],
            "Pruning": [
                "0<-7.4",
                "3<-6.3",
                "4<-7.4"
            ],
            "Evaluation": [
                40.0,
                0.002,
                0.002,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 5.2",
                "2 <- 5.2",
                "3 <- 3.0",
                "4 <- 8.3"
            ]
        },
        "Step 9": {
            "steps": [
                "2 + 5 = 7 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (2 + 5) * (10 - 8) = 24",
                "2 + 5 = 7 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (2 + 5) * (10 - 8) = 24",
                "2 + 5 = 7 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (2 + 5) * (10 - 8) = 24",
                "2 + 5 = 7 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (2 + 5) * (10 - 8) = 24",
                "2 + 5 = 7 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (2 + 5) * (10 - 8) = 24"
            ],
            "Pruning": [
                "0<-4.0",
                "1<-4.0",
                "2<-4.0",
                "3<-4.0",
                "4<-4.0"
            ]
        },
        "Input": "2 5 8 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1040": {
        "puzzle": "4 6 6 12",
        "Step 0": {
            "steps": [
                "4 + 6 = 10 (left: 6 10 12)",
                "12 - 6 = 6 (left: 4 6 6)",
                "6 - 4 = 2 (left: 2 6 12)",
                "6 - 4 = 2 (left: 2 6 12)",
                "12 - 6 = 6"
            ],
            "Pruning": [],
            "Evaluation": [
                20.001,
                21.001,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.0",
                "2 <- 0.1",
                "3 <- 0.0",
                "4 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 6 = 6 (left: 4 6 6) || 6 - 4 = 2 (left: 2 6",
                "4 + 6 = 10 (left: 6 10 12) || 10 + 12 = 22 (left: 6 22)",
                "12 - 6 = 6 (left: 4 6 6) || 6 - 4 = 2 (left: 2 6)",
                "4 + 6 = 10 (left: 6 10 12) || 6 + 10 = 16 (left: 12 16)",
                "12 - 6 = 6 (left: 4 6 6) || 6 - 4 = 2 (left: 2 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                1.001,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.0",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "4 + 6 = 10 (left: 6 10 12) || Input: 16 60 22 120",
                "4 + 6 = 10 (left: 6 10 12) || 6 + 10 = 16 (left: 10 12 16)",
                "4 + 6 = 10 (left: 6 10 12)",
                "6 / 4 = 1.5 (left: 1.5 6 12)",
                "12 - 6 = 6 (left: 4 6 6) || 6 / 4 = 1.5 (left: 1.5 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                41.0,
                3.0,
                1.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.2",
                "2 <- 2.2",
                "3 <- 2.2",
                "4 <- 2.2"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 6 = 6 (left: ",
                "4 + 6 = 10 (left: 6 10 12) || 10 * 12 = 120 (left: 6 120)",
                "4 + 6 = 10 (left: 6 10 12) || 10 - 6 = 4 (left: 4 12)",
                "4 + 6 = 10 (left: 6 10 12) || 12 / 6 = 2 (left: 6 2)",
                "4 + 6 = 10 (left: 6 10 12) || Input: 4 6 2"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.003,
                0.003,
                1.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 2.2",
                "2 <- 0.0",
                "3 <- INIT",
                "4 <- 2.2"
            ]
        },
        "Step 4": {
            "steps": [
                "6 - 4 = 2 (left: 2 6 12) || 6 * 2 = 12 (left: 12 12)",
                "4 + 6 = 10 (left: 6 10 12) || 12 - 6 = 6 (left: 6 12)",
                "4 + 6 = 10 (left: 6 10 12) || 12 - 6 = 6 (left: 6 6)",
                "6 - 4 = 2 (left: 2 6 12)",
                "4 + 6 = 10 (left: 6 10 12) || 12 - 6 = 6 (left: 6 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.001,
                0.003,
                1.002,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 4.0",
                "2 <- 4.0",
                "3 <- 4.0",
                "4 <- 4.0"
            ]
        },
        "Step 5": {
            "steps": [
                "4 + 6 = 10 (left: 6 10 12) || 10 / 6 = 1.67 (approximated) (left: 1.67 12)",
                "6 - 4 = 2 (left: 2 6 12) || 6 * 2 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "6 - 4 = 2 (left: 2 6 12) || 6 * 2 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "6 - 4 = 2 (left: 2 6 12) || 6 * 2 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "6 - 4 = 2 (left: 2 6 12) || 6 * 2 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.0,
                60.0,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 5.3",
                "2 <- 5.1",
                "3 <- 5.3",
                "4 <- 5.1"
            ]
        },
        "Step 6": {
            "steps": [
                "6 - 4 = 2 (left: 2 6 12) || 6 * 2 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (6 - 4) * (6 * 2) = 24",
                "6 - 4 = 2 (left: 2 6 12) || 6 * 2 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (6 - 4) * (6 * 2) = 24",
                "6 - 4 = 2 (left: 2 6 12) || 6 * 2 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((6 - 4) * 6) + 12 = 24",
                "6 - 4 = 2 (left: 2 6 12) || 6 * 2 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (6 - 4) * (6 + 12) = 24",
                "6 - 4 = 2 (left: 2 6 12) || 6 * 2 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (6 - 4) * (6 * 2) = 24"
            ]
        },
        "Input": "4 6 6 12",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 1
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "1041": {
        "puzzle": "5 8 10 12",
        "Step 0": {
            "steps": [
                "5 + 8 = 13 (left: 10 12 13)",
                "10 + 5 = 15 (left: 8 12 15)",
                "5 * 8 = 40 (left: 10 12 40)",
                "5 * 8 = 40 (left: 10 12 40)",
                "8 - 5 = 3 (left: 3 10 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                2.001,
                2.001,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.3",
                "4 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "10 + 5 = 15 (left: 8 12 15)",
                "5 + 8 = 13 (left: 10 12 13)",
                "8 - 5 = 3 (left: 3 10 12)",
                "5 * 8 = 40 (left: 10 12 40) || 40 / 10 = 4 (left: 4 12)",
                "5 + 8 = 13 (left: 10 12 13) || 13 - 10 = 3 (left: 3 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                22.0,
                3.0,
                2.001,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- INIT",
                "2 <- 1.0",
                "3 <- 1.3",
                "4 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "5 * 8 = 40 (left: 10 12 40) || 40 / 10 = 4 (left: 4 12) || 12 - 4 = 8 (left: 4 8)",
                "12 + 5 = 17 (left: 8 10 17)",
                "10 + 5 = 15 (left: 8 12 15) || 8 + 12 = 20 (left: 20 15)",
                "5 * 8 = 40 (left: 10 12 40) || 40 / 10 = 4 (left: 4 12) || 12 / 4 = 3 (left: 3)",
                "10 + 5 = 15 (left: 8 12 15) || 8 + 12 = 20 (left: 20 15)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- INIT",
                "4 <- 1.0"
            ]
        },
        "Step 3": {
            "steps": [
                "5 * 8 = 40 (left: 10 12 40)",
                "5 * 8 = 40 (left: 10 12 40)",
                "10 + 5 = 15 (left: 8 12 15) || 8 + 12 = 20 (left: 20 15)",
                "8 / 5 = 1.6 (left: 1.",
                "10 + 5 = 15 (left: 8 12 15) || 12 - 8 = 4 (left: 4 15)"
            ],
            "Pruning": [],
            "Evaluation": [
                22.0,
                2.001,
                0.002,
                0.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 3.0",
                "2 <- 3.0",
                "3 <- INIT",
                "4 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "10 + 5 = 15 (left: 8 12 15) || 15 - 8 = 7 (left: 7 12)",
                "5 * 8 = 40 (left: 10 12 40) || 12 / 10 = 1.2 (left: 1.2 40)",
                "5 * 8 = 40 (left: 10 12 40) || 40 - 10 = 30 (left: 30 12)",
                "5 * 8 = 40 (left: 10 12 40)",
                "5 * 8 = 40 (left: 10 12 40) || 10 + 12 = 22 (left: 22 40)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 3.0",
                "2 <- INIT",
                "3 <- 3.0",
                "4 <- 3.0"
            ]
        },
        "Step 5": {
            "steps": [
                "5 * 8 = 40 (left: 10 12 40) || 12 - 10 = 2 (left: 2 40)",
                "5 * 8 = 40 (left: 10 12 40) || 10 * 12 = 120 (left: 120 40)",
                "8 / 5 = 1.6 (left: 1.6 10 12)",
                "5 * 8 = 40 (left: 10 12 40) || 10 + 12 = 22 (left: 22 40)",
                "5 * 8 = 40 (left: 10 12 40) || 12 / 10 = 1.2 (left: 1.2 40)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.0,
                1.001,
                3.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 3.0",
                "2 <- 5.0",
                "3 <- 3.0",
                "4 <- 3.0"
            ]
        },
        "Step 6": {
            "steps": [
                "10 + 5 = 15 (left: 8 12 15) || 15 - 8 = 7 (left: ",
                "5 * 8 = 40 (left: 10 12 40) || 40 / 12 = 3.33 (left: 10 3.33)",
                "5 * 8 = 40 (left: 10 12 40) || 12 - 10 = 2 (left: 2 40) || 2 * 40 = 80 (left: 80)",
                "5 * 8 = 40 (left: 10 12 40) || 40 / 12 = 3.33 (",
                "5 * 8 = 40 (left: 10 12 40) || 40 - 10 = 30 (left: 12 30)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                2.001,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 3.0",
                "2 <- 5.0",
                "3 <- 5.0",
                "4 <- 5.1"
            ]
        },
        "Step 7": {
            "steps": [
                "5 * 8 = 40 (left: 10 12 40) || 40 / 12 = 3.3333 (left: 10",
                "5 * 8 = 40 (left: 10 12 40) || 10 * 12 = 120 (left: 12 40 120)",
                "5 * 8 = 40 (left: 10 12 40) || 12 - 10 = 2 (left: 2 40) || 40 - 2 = 38 (left: 38)",
                "5 * 8 = 40 (left: 10 12 40) || 12 - 10 = 2 (left: 2 40) || 2 * 40 = 80 (left: 80)",
                "5 * 8 = 40 (left: 10 12 40) || 10 * 12 = 120 (left: 120 40) || 120 / 40 = 3 (left: 3)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                3.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 7.1",
                "1 <- 6.1",
                "2 <- 5.4",
                "3 <- 5.0",
                "4 <- 5.1"
            ]
        },
        "Step 8": {
            "steps": [
                "5 * 8 = 40 (left: 10 12 40) || 10 * 12 = 120 (left: 12 40 120) || 12 + 40 = 52 (left: 52 12 120)",
                "5 * 8 = 40 (left: 10 12 40) || 40 / 12 = 3.33 (left: 10 3.33) || 10 * 3.33 = 33.3 (left: 3.33 33.3)",
                "5 * 8 = 40 (left: 10 12 40) || 12 / 10 = 1.2 (left: 1.2 40) || 1.2 * 40 = 48 (left: 40)",
                "5 * 8 = 40 (left: 10 12 40) || 12 - 10 = 2 (left: 2 40) || 40 - 2 = 38 (left: 38)",
                "5 * 8 = 40 (left: 10 12 40) || 10 * 12 = 120 (left: 120 40) || 120 + 40 = 160 (left: 160)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                3.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 8.0",
                "1 <- 8.0",
                "2 <- 8.1",
                "3 <- 8.0",
                "4 <- 8.1"
            ]
        },
        "Step 9": {
            "steps": [
                "5 * 8 = 40 (left: 10 12 40) || 10 * 12 = 120 (left: 12 40 120) || 12 + 40 = 52 (left: 52 12 120) || 12 / 52 = 0.23 (left: 0.23 120)",
                "5 * 8 = 40 (left: 10 12 40) || 10 * 12 = 120 (left: 12 40 120) || 12 + 40 = 52 (left: 52 12 120) || 12 + 120 = 132 (left: 52 132)",
                "5 * 8 = 40 (left: 10 12 40) || 40 / 12 = 3.33 (left: 10 3.33) || 10 * 3.33 = 33.3 (left: 3.33 33.3) || 3.33 + 33.3 = 36.63 (left: 36.63)",
                "5 * 8 = 40 (left: 10 12 40) || 10 * 12 = 120 (left: 12 40 120) || 12 + 40 = 52 (left: 52 12 120) || 52 + 12 = 64 (left: 64 120)",
                "5 * 8 = 40 (left: 10 12 40) || 40 / 12 = 3.33 (left: 10 3.33) || 10 * 3.33 = 33.3 (left: 3.33 33.3) || "
            ],
            "Pruning": []
        },
        "Input": "5 8 10 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            }
        ]
    },
    "1042": {
        "puzzle": "3 3 3 11",
        "Step 0": {
            "steps": [
                "3 + 3 = 6 (left: 3 6 11)",
                "3 * 3 = 9 (left: 9 3 11)",
                "11 - 3 = 8 (left: 3 3 8)",
                "3 / 3 = 1 (left: 1 3 11)",
                "3 + 3 = 6 (left: 3 6 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                3.0,
                3.0,
                2.001,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- INIT",
                "4 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "3 + 3 = 6 (left: 6 3 11)",
                "11 - 3 = 8 (left: 3 3 8)",
                "3 * 3 = 9 (left: 9 3 11) || 3 / 9 = ",
                "3 + 3 = 6 (left: 3 6 11)",
                "3 / 3 = 1 (left: 1 3 11) || 11 - 3 = 8 (left: 1 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                2.001,
                0.003,
                2.001,
                60.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.4",
                "2 <- INIT",
                "3 <- 1.4",
                "4 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "11 - 3 = 8 (left: 3 3 8)",
                "3 / 3 = 1 (left: 1 3 11) || 11 - 3 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "3 * 3 = 9 (left: 9 3 11)",
                "3 / 3 = 1 (left: 1 3 11) || 11 - 3 = 8 (left: 1 8) || Possible next steps:",
                "3 / 3 = 1 (left: 1 3 11) || 11 - 3 = 8 (left: 1 8) || 1 + 8 = 9 (left: 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                0.003,
                21.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 1.4",
                "2 <- INIT",
                "3 <- 2.2",
                "4 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "3 * 3 = 9 (left: 9 3 11) || 11 + 3 = 14 (left: 9 14)",
                "3 / 3 = 1 (left: 1 3 11) || 11 - 3 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "3 * 3 = 9 (left: 9 3 ",
                "3 * 3 = 9 (left: 9 3 11) || 11 / 3 = 3.67 (left: 9 3.67)",
                "3 + 3 = 6 (left: 3 6 11) || 6 - 3 = 3 (left: 3 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.0,
                0.001,
                21.0,
                2.0,
                0.003
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 3.0",
                "2 <- 1.4",
                "3 <- 1.4",
                "4 <- 3.2"
            ]
        },
        "Step 4": {
            "steps": [
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3)",
                "3 * 3 = 9 (left: 9 3 11) || 11 + 3 = 14 (left: 9 14) || 9 / 14 \u2248 0.642857 (left: 0.642857)",
                "3 / 3 = 1 (left: 1 3 11) || 11 - 3 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8 8)",
                "3 / 3 = 1 (left: 1 3 11) || 11 - 3 = 8 (left: 1 8) || 1 + 8 = 9 (left: 8 9)",
                "3 * 3 = 9 (left: 9 3  || 9 - 3 = 6 (left: 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 4.0",
                "2 <- 4.0",
                "3 <- 4.0",
                "4 <- 4.0"
            ]
        },
        "Step 5": {
            "steps": [
                "3 / 3 = 1 (left: 1 3 11) || 11 - 3 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 + 3 = 6 (left: 6)",
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 + 3 = 6 (left: 6)",
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 + 3 = 6 (left: 6)",
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 * 3 = 9 (left: 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                0.001,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 4.0",
                "2 <- 4.0",
                "3 <- 4.0",
                "4 <- 4.0"
            ]
        },
        "Step 6": {
            "steps": [
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 + 3 = 6 (left: 6)",
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 + 3 = 6 (left: 6)",
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 / 3 = 1 (left: 1)",
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 / 3 = 1 (left: 1)",
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 + 3 = 6 (left: 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 4.0",
                "2 <- 1.4",
                "3 <- 2.2",
                "4 <- 4.0"
            ]
        },
        "Step 7": {
            "steps": [
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 * 3 = 9 (left: 9)",
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 + 3 = 6 (left: 6)",
                "3 / 3 = 1 (left: 1 3 11) || 11 - 3 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8 8)",
                "3 * 3 = 9 (left: 9 3 11) || 11 - 3 = 8 (left: 9 8)",
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 + 3 = 6 (left: 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 4.0",
                "2 <- 4.0",
                "3 <- 4.0",
                "4 <- 4.0"
            ]
        },
        "Step 8": {
            "steps": [
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 + 3 = 6 (left: 6)",
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 + 3 = 6 (left: 6)",
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 / 3 = 1 (left: 1)",
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 * 3 = 9 (left: 9)",
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 / 3 = 1 (left: 1)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 8.1",
                "1 <- 8.3",
                "2 <- 8.2",
                "3 <- 8.1",
                "4 <- 8.1"
            ]
        },
        "Step 9": {
            "steps": [
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 + 3 = 6 (left: 6) || 6 + 8 = 14 (left: 14)",
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 * 3 = 9 (left: 9) || 8 + 1 = 9 (left: 1)",
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 / 3 = 1 (left: 1) || There are no possible next steps with only one number given.",
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 + 3 = 6 (left: 6) || 6 * 2 = 12 (left: 12)",
                "3 * 3 = 9 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 + 3 = 6 (left: 6) || 6 + 6 = 12 (left: 12)"
            ],
            "Pruning": []
        },
        "Input": "3 3 3 11",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "1043": {
        "puzzle": "5 5 8 12",
        "Step 0": {
            "steps": [
                "5 / 5 = 1 (left: 1 8 12)",
                "5 + 5 = 10 (left: 8 10 12)",
                "8 + 12 = 20 (left: 5 20 12)",
                "5 + 12 = 17 (left: 8 17 12)",
                "5 + 5 = 10 (left: 8 10 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                2.001,
                3.0,
                2.001,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.3",
                "2 <- INIT",
                "3 <- 0.3",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "5 / 5 = 1 (left: 1 5 8)",
                "5 + 12 = 17 (left: 8 17 12) || 8 * 17 = 136 (left: 136 12)",
                "5 + 5 = 10 (left: 8 10 12)",
                "5 + 12 = 17 (left: 8 17 12) || 8 / 17 = ",
                "5 * 8 = 40 (left: 40 5 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                21.0,
                3.0,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.1",
                "2 <- 0.1",
                "3 <- 1.1",
                "4 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "5 / 5 = 1 (left: 1 5 8) || 8 / 1 = 8 (left: 5 8)",
                "5 + 12 = 17 (left: 8 17 12) || 8 * 17 = 136 (left: 136 12) || 136 - 12 = 124 (left: 124)",
                "5 + 5 = 10 (left: 8 10 12) || 8 * 10 = 80 (left: 80 12)",
                "5 + 12 = 17 (left: 8 17 12) || 8 * 17 = 136 (left: 136 12) || 136 * 12 = 1632 (left: 1632)",
                "5 + 12 = 17 (left: 8 17 12) || 8 * 17 = 136 (left: 136 12) || 136 + 12 = 148 (left: 148)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                1.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.2",
                "2 <- 1.1",
                "3 <- 1.1",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "5 + 5 = 10 (left: 8 10 12)",
                "5 + 5 = 10 (left: 8 10 12) || 8 * 10 = 80 (left: 80 12)",
                "5 + 12 = 17 (left: 8 17 12) || 8 * 17 = 136 (left: 136 12) || 136 - 12 = 124 (left: 124)",
                "5 + 12 = 17 (left: 8 17 12) || 8 * 17 = 136 (left: 136 12) || 136 - 12 = 124 (left: 124)",
                "12 - 5 = 7 (left: 5 7 "
            ],
            "Pruning": [],
            "Evaluation": [
                2.0,
                0.002,
                0.003,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.2",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "5 + 5 = 10 (left: 8 10 12) || Input:",
                "8 + 12 = 20 (left: 5 20 12) || 20 / 5 = 4 (left: 4 12)",
                "5 + 8 = 13 (left: 5 13 12)",
                "5 * 5 = 25 (left: 8 12 25)",
                "5 + 5 = 10 (left: 8 10 12) || 8 / 10 = 0.8 ("
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                3.0,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 4.0",
                "2 <- 4.0",
                "3 <- 4.0",
                "4 <- 4.0"
            ]
        },
        "Step 5": {
            "steps": [
                "5 + 5 = 10 (left: 8 10 12) || Input: || It seems like there was an error in the input provided. Could you please provide the correct input so I can generate possible next steps for you?",
                "5 + 5 = 10 (left: 8 10 12) || Input: || Please provide a list of numbers to continue the calculations.",
                "5 + 5 = 10 (left: 8 10 12) || Input: || Please provide a set of numbers to continue the sequence.",
                "5 + 5 = 10 (left: 8 10 12) || Input: || Please provide a set of numbers for me to suggest possible next steps.",
                "5 + 5 = 10 (left: 8 10 12) || Input: || Please provide a list of numbers to continue the sequence."
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 4.3",
                "2 <- 4.2",
                "3 <- 4.0",
                "4 <- 4.2"
            ]
        },
        "Step 6": {
            "steps": [
                "5 + 5 = 10 (left: 8 10 12) || Input: || There is no input provided.",
                "5 * 5 = 25 (left: 8 12 25) || 8 + 12 = 20 (left: 20 25)",
                "5 + 8 = 13 (left: 5 13 12) || 13 - 5 = 8 (left: 8 12)",
                "5 + 5 = 10 (left: 8 10 12) || Input: || There is no input provided for this question.",
                "5 + 8 = 13 (left: 5 13 12) || 13 - 5 = 8 (left: 8 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 4.0",
                "2 <- 4.0",
                "3 <- 4.0",
                "4 <- 4.0"
            ]
        },
        "Step 7": {
            "steps": [
                "5 + 12 = 17 (left: 8 17 12) || 8 * 17 = 136 (left: 136 12) || 136 - 12 = 124 (left: 124)",
                "5 + 5 = 10 (left: 8 10 12) || Input: || It seems like you might have entered the input twice by mistake. If you'd like to provide a new set of numbers, feel free to do so!",
                "5 + 5 = 10 (left: 8 10 12) || Input: || Please provide a set of numbers to continue with the calculation.",
                "5 + 5 = 10 (left: 8 10 12) || Input: || It seems like there was an error in input. Please provide the correct numbers for the next step calculation.",
                "5 + 5 = 10 (left: 8 10 12) || Input: || Please provide a set of numbers for me to find possible next steps."
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 4.0",
                "2 <- 4.0",
                "3 <- 4.0",
                "4 <- 4.0"
            ]
        },
        "Step 8": {
            "steps": [
                "5 + 5 = 10 (left: 8 10 12) || Input: || There doesn't seem to be any specific input provided. If you could provide a set of numbers or an equation, I'd be happy to generate possible next steps for you.",
                "5 + 5 = 10 (left: 8 10 12) || Input: || Please provide the input numbers for me to generate the possible next steps.",
                "5 + 5 = 10 (left: 8 10 12) || Input: || Please provide a set of numbers to find possible next steps.",
                "5 + 5 = 10 (left: 8 10 12) || Input: || There is no input provided. Please provide a set of numbers to continue the calculations.",
                "5 + 5 = 10 (left: 8 10 12) || Input: || There seems to be an error in the input provided. Please provide a valid input for me to generate the possible next steps. Thank you."
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.0,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 8.4",
                "2 <- 8.3",
                "3 <- 8.4",
                "4 <- 8.2"
            ]
        },
        "Step 9": {
            "steps": [
                "5 + 5 = 10 (left: 8 10 12) || Input: || There is no input provided. || Without an input provided, it is not possible to determine any next steps.",
                "5 + 5 = 10 (left: 8 10 12) || Input: || There seems to be an error in the input provided. Please provide a valid input for me to generate the possible next steps. Thank you. || Please provide a valid input for me to generate the possible next steps. Thank you.",
                "5 + 5 = 10 (left: 8 10 12) || Input: || There is no input provided. Please provide a set of numbers to continue the calculations. || Without an input provided, we cannot generate possible next steps for calculations. Please provide a set of numbers to continue the calculations.",
                "5 + 5 = 10 (left: 8 10 12) || Input: || There seems to be an error in the input provided. Please provide a valid input for me to generate the possible next steps. Thank you. || 4 + 5 = 9 (left: 6 7 9)",
                "5 + 5 = 10 (left: 8 10 12) || Input: || Please provide a set of numbers to find possible next steps. || Please provide a set of numbers to find possible next steps."
            ],
            "Pruning": []
        },
        "Input": "5 5 8 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1044": {
        "puzzle": "1 3 3 6",
        "Step 0": {
            "steps": [
                "3 / 1 = 3 (left: 3 3 6)",
                "6 / 3 = 2 (left: 1 3 ",
                "6 - 1 = 5 (left: 3 3 ",
                "3 * 1 = 3 (left: 3 3 6)",
                "6 - 3 = 3 (left: 1 3 "
            ],
            "Pruning": [],
            "Evaluation": [
                22.0,
                0.002,
                1.001,
                3.0,
                0.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.0",
                "3 <- 0.0",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "6 - 3 = 3 (left: 1 3 3)",
                "3 * 1 = 3 (left: 3 3 6)",
                "3 / 1 = 3 (left: 3 3 6) || 3 + 3 = 6 (left: 6 6)",
                "3 / 1 = 3 (left: 3 3 6) || 6 / 3 = 2 (left: 2 6)",
                "1 + 3 = 4 (left: 3 4 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                2.001,
                1.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.0",
                "3 <- 0.0",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "3 / 1 = 3 (left: 3 3 6)",
                "6 / 3 = 2 (left: 2 3 ",
                "3 / 1 = 3 (left: 3 3 6) || 6 + 3 = 9 (left: 3 9)",
                "3 / 1 = 3 (left: 3 3 6) || 6 - 3 = 3 (left: 3",
                "1 + 3 = 4 (left: 3 4 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.001,
                0.003,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.3",
                "2 <- INIT",
                "3 <- 0.0",
                "4 <- 0.3"
            ]
        },
        "Step 3": {
            "steps": [
                "3 + 1 = 4 (left: 3 4 6)",
                "3 * 1 = 3 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6)",
                "3 + 1 = 4 (left: 4 3 6)",
                "3 / 1 = 3 (left: 3 3 6) || 6 - 3 = 3 (left: 3 6)",
                "3 * 1 = 3 (left: 3 3 6) || 3 * 6 = 18 (left: 3 18)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                60.0,
                2.001,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 3.1",
                "2 <- 1.1",
                "3 <- 3.1",
                "4 <- 3.1"
            ]
        },
        "Step 4": {
            "steps": [
                "3 * 1 = 3 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "3 * 1 = 3 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "3 * 1 = 3 (left: 3 3 6) || Input: 4 5 9",
                "3 * 1 = 3 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "3 * 1 = 3 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 1 + 6 = 7 (left: 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.001,
                0.003,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 3.1",
                "2 <- 3.1",
                "3 <- INIT",
                "4 <- 3.1"
            ]
        },
        "Step 5": {
            "steps": [
                "3 * 1 = 3 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "3 * 1 = 3 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "3 * 1 = 3 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 + 3 = 4 (left: 3 4 6)",
                "3 * 1 = 3 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 0.0",
                "2 <- 3.1",
                "3 <- 1.1",
                "4 <- INIT"
            ]
        },
        "Step 6": {
            "steps": [
                "3 * 1 = 3 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "3 / 1 = 3 (left: 3 3 6) || 6 / 3 = 2 (left: 3 2)",
                "3 * 1 = 3 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 1 + 6 = 7",
                "3 * 1 = 3 (left: 3 3 6) || 4 + 5 = 9 (left: 9",
                "6 - 1 = 5 (left: 3 3 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.001,
                0.003,
                0.001,
                2.001
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 3.1",
                "2 <- 6.4",
                "3 <- 5.3",
                "4 <- 3.1"
            ]
        },
        "Step 7": {
            "steps": [
                "3 * 1 = 3 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "3 * 1 = 3 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "6 - 1 = 5 (left: 3 3 5) || 5 * 3 = 15 (left: 3 15)",
                "1 + 3 = 4 (left: 3 4 6) || 3 + 4 = 7 (left: 6 7)",
                "3 * 1 = 3 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.0,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 3.1",
                "2 <- 3.1",
                "3 <- 3.1",
                "4 <- 3.1"
            ]
        },
        "Step 8": {
            "steps": [
                "3 * 1 = 3 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "3 * 1 = 3 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "3 * 1 = 3 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "3 * 1 = 3 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "3 * 1 = 3 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 8.2",
                "1 <- 5.4",
                "2 <- 7.0",
                "3 <- 5.2",
                "4 <- 8.0"
            ]
        },
        "Step 9": {
            "steps": [
                "3 * 1 = 3 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5) || There are no possible next steps with just the number 5.",
                "3 * 1 = 3 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5) || 5 + 8 = 13 (left: 8 13)",
                "3 * 1 = 3 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6) || 6 / 8 = 0.75 (left: 0.75)",
                "3 * 1 = 3 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5) || There is only one possible operation with the input of 5:",
                "3 * 1 = 3 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 1 + 6 = 7 (left: 7) || 7 + 8 = 15 (left: 8 15)"
            ],
            "Pruning": []
        },
        "Input": "1 3 3 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1045": {
        "puzzle": "2 5 7 13",
        "Step 0": {
            "steps": [
                "7 + 2 = 9 (left: 5 9 13)",
                "2 + 5 = 7 (left: 7 7 13)",
                "2 + 5 = 7 (left: 7 7 13)",
                "13 - 5 = 8 (left: 2 8 7)",
                "2 * 5 = 10 (left: 10 7 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                0.002,
                0.003,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "13 - 5 = 8 (left: 2 7 8)",
                "7 + 2 = 9 (left: 5 9 13)",
                "13 - 2 = 11 (left: 5 7 11)",
                "13 / 2 = 6 (left: 5 6 ",
                "7 + 2 = 9 (left: 5 9 13) || 9 - 5 = 4 (left: 4 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                1.002,
                2.001,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 1.2",
                "4 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "13 - 5 = 8 (left: 2 7 8) || 2 * 7 = 14 (left: 14)",
                "7 * 2 = 14 (left: 5 14 ",
                "5 * 7 = 35 (left: 2 35 ",
                "13 - 2 = 11 (left: 5 7 11) || 7 - 5 = 2 (left: 2 11)",
                "13 - 2 = 11 (left: 5 7 11) || 7 / 5 = 1.4 (left: 1.4 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                2.0,
                1.002,
                0.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.0",
                "2 <- 1.2",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "13 - 7 = 6 (left: 2 6 7)",
                "7 + 2 = 9 (left: 5 9 13) || 9 + 5 = 14 (left: 14 13)",
                "13 - 2 = 11 (left: 5 7 11) || 7 / 5 = 1.4 (left: 1.4 11)",
                "7 - 2 = 5 (left: 5 5 13)",
                "7 * 2 = 14 (left: 5 14 "
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.003,
                0.002,
                40.001,
                0.002
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 3.3",
                "2 <- 3.3",
                "3 <- 3.3",
                "4 <- 3.3"
            ]
        },
        "Step 4": {
            "steps": [
                "7 - 2 = 5 (left: 5 5 13) || 5 - 5 = 0 (left: 0 13)",
                "7 - 2 = 5 (left: 5 5 13) || 5 * 5 = 25 (left: 25 13)",
                "7 - 2 = 5 (left: 5 5 13) || 13 + 5 = 18 (left: 5 18)",
                "7 - 2 = 5 (left: 5 5 13) || 13 + 5 = 18 (left: 5 18)",
                "7 - 2 = 5 (left: 5 5 13) || Input: 3 7"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 3.3",
                "2 <- 3.3",
                "3 <- 3.3",
                "4 <- 2.2"
            ]
        },
        "Step 5": {
            "steps": [
                "7 - 2 = 5 (left: 5 5 13) || 5 + 5 = 10 (left: 10 13)",
                "7 - 2 = 5 (left: 5 5 13) || 13 - 5 = 8 (left: 5 8)",
                "7 - 2 = 5 (left: 5 5 13) || 13 - 5 = ",
                "7 - 2 = 5 (left: 5 5 13) || 5 + 5 = 10 (left: 10 13)",
                "5 * 7 = 35 (left: 2 35  || 9 / 3 = 3 (left: 3 27"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.0,
                0.003,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 5.4",
                "2 <- 5.4",
                "3 <- 5.4",
                "4 <- 5.4"
            ]
        },
        "Step 6": {
            "steps": [
                "5 * 7 = 35 (left: 2 35  || 9 / 3 = 3 (left: 3 27 || 27 / 3 = 9 (left: 3 9)",
                "5 * 7 = 35 (left: 2 35  || 9 / 3 = 3 (left: 3 27 || 3 + 27 = 30 (left: 30)",
                "5 * 7 = 35 (left: 2 35  || 9 / 3 = 3 (left: 3 27 || 3 * 27 = 81 (left: 81)",
                "5 * 7 = 35 (left: 2 35  || 9 / 3 = 3 (left: 3 27 || 27 - 3 = 24 (left: 3 24)",
                "5 * 7 = 35 (left: 2 35  || 9 / 3 = 3 (left: 3 27 || 27 - 3 = 24 (left: 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                21.001,
                60.0
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 6.4",
                "2 <- 5.4",
                "3 <- 5.4",
                "4 <- 6.3"
            ]
        },
        "Step 7": {
            "steps": [
                "5 * 7 = 35 (left: 2 35  || 9 / 3 = 3 (left: 3 27 || 27 - 3 = 24 (left: 3 24) || 3 * 24 = 72 (left: 72)",
                "5 * 7 = 35 (left: 2 35  || 9 / 3 = 3 (left: 3 27 || 27 - 3 = 24 (left: 24) || Answer: (5 * 7) - (2 + 3) = 24",
                "5 * 7 = 35 (left: 2 35  || 9 / 3 = 3 (left: 3 27 || 27 / 3 = 9 (left: 9)",
                "5 * 7 = 35 (left: 2 35  || 9 / 3 = 3 (left: 3 27 || 27 - 3 = 24 (left: 24)",
                "5 * 7 = 35 (left: 2 35  || 9 / 3 = 3 (left: 3 27 || 27 - 3 = 24 (left: 3 24) || 3 * 24 = 72 (left: 72)"
            ],
            "Pruning": [
                "0<-6.4",
                "1<-6.4",
                "4<-6.3"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.002,
                20.0,
                40.0
            ],
            "Resampling": [
                "0 <- 7.0",
                "1 <- 5.4",
                "2 <- 7.1",
                "3 <- 5.4",
                "4 <- 7.1"
            ]
        },
        "Step 8": {
            "steps": [
                "5 * 7 = 35 (left: 2 35  || 9 / 3 = 3 (left: 3 27 || 27 - 3 = 24 (left: 24) || Answer: (5 * 7) - (9 / 3) = 24",
                "5 * 7 = 35 (left: 2 35  || 9 / 3 = 3 (left: 3 27 || 3 + 27 = 30 (left: 27 30)",
                "5 * 7 = 35 (left: 2 35  || 9 / 3 = 3 (left: 3 27 || 27 - 3 = 24 (left: 24) || Answer: (5 * 7) - ((2 * 9) / 3) = 24",
                "5 * 7 = 35 (left: 2 35  || 9 / 3 = 3 (left: 3 27 || 27 / 3 = 9 (left: 9)",
                "5 * 7 = 35 (left: 2 35  || 9 / 3 = 3 (left: 3 27 || 27 - 3 = 24 (left: 24) || Answer: (5 * 7) - (9 / 3) = 24"
            ],
            "Pruning": [
                "0<-7.0",
                "2<-7.3",
                "4<-7.4"
            ],
            "Evaluation": [
                60.0,
                0.003,
                40.0,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 7.4",
                "1 <- 8.0",
                "2 <- 7.1",
                "3 <- 7.4",
                "4 <- 8.2"
            ]
        },
        "Step 9": {
            "steps": [
                "5 * 7 = 35 (left: 2 35  || 9 / 3 = 3 (left: 3 27 || 27 - 3 = 24 (left: 3 24) || 24 - 3 = 21 (left: 3 21)",
                "5 * 7 = 35 (left: 2 35  || 9 / 3 = 3 (left: 3 27 || 27 - 3 = 24 (left: 24) || Answer: ((2 * 5) * 7) - 3 = 24",
                "5 * 7 = 35 (left: 2 35  || 9 / 3 = 3 (left: 3 27 || 27 - 3 = 24 (left: 24) || Answer: (5 * 7) - (9 / 3) = 24",
                "5 * 7 = 35 (left: 2 35  || 9 / 3 = 3 (left: 3 27 || 27 - 3 = 24 (left: 3 24) || 24 + 3 = 27 (left: 3 27)",
                "5 * 7 = 35 (left: 2 35  || 9 / 3 = 3 (left: 3 27 || 27 - 3 = 24 (left: 24) || Answer: (5 * 7) - (2 * 3) = 24"
            ],
            "Pruning": []
        },
        "Input": "2 5 7 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            }
        ]
    },
    "1046": {
        "puzzle": "1 5 8 11",
        "Step 0": {
            "steps": [
                "11 + 1 = 12 (left: 5 8 12)",
                "8 + 11 = 19 (left: 1 5 19)",
                "5 + 8 = 13 (left: 1 13 11)",
                "5 + 8 = 13 (left: 1 13 11)",
                "1 + 5 = 6 (left: 6 8 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                1.002,
                1.001,
                21.001,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.3",
                "4 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "11 - 8 = 3 (left: 1 5 3)",
                "8 + 11 = 19 (left: 1 5 19)",
                "5 + 8 = 13 (left: 1 13 11)",
                "5 + 8 = 13 (left: 1 13 11) || 11 + 1 = 12 (left: 13 12)",
                "5 + 8 = 13 (left: 1 13 11) || 1 + 13 = 14 (left: 11 14)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                0.003,
                1.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 5 = 6 (left: 6 8 11)",
                "5 + 8 = 13 (left: 1 13 11)",
                "5 + 8 = 13 (left: 1 13 11)",
                "5 + 8 = 13 (left: 1 13 11)",
                "8 + 5 = 13 (left: 1 13 "
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                41.0,
                21.001,
                1.001,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.1",
                "2 <- 2.1",
                "3 <- 2.1",
                "4 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "8 + 11 = 19 (left: 1 5 19)",
                "5 + 8 = 13 (left: 1 13 11) || 13 - 1 = 12 (left: 12 11)",
                "5 + 8 = 13 (left: 1 13 11) || 1 + 13 = 14 (left: 14 11)",
                "5 + 8 = 13 (left: 1 13 11) || 13 / 11 = 1.1818181818181819 (left: 1.181818181818181",
                "5 + 8 = 13 (left: 1 13 11) || 13 - 1 = 12 (left: 12 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 2.2",
                "2 <- 2.2",
                "3 <- 2.1",
                "4 <- 2.2"
            ]
        },
        "Step 4": {
            "steps": [
                "11 + 1 = 12 (left: 5 8 12) || 5 * 8 = 40 (left: 40 12)",
                "5 + 8 = 13 (left: 1 13 11) || 1 * 13 = 13 (left: 13 11)",
                "5 + 8 = 13 (left: 1 13 11) || 13 - 11 = 2 (left: 1 2)",
                "5 + 8 = 13 (left: 1 13 11) || 11 / 1 = 11 (left:",
                "5 + 8 = 13 (left: 1 13 11) || 13 - 11 = 2 (left: 1 2)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                60.0,
                0.002,
                20.001,
                20.002
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 4.1",
                "2 <- 4.1",
                "3 <- 2.1",
                "4 <- 4.1"
            ]
        },
        "Step 5": {
            "steps": [
                "5 + 8 = 13 (left: 1 13 11) || 1 * 13 = 13 (left: 13 11) || 13 / 11 = 1.1818181818181819 (left: 1.1818181818181819)",
                "5 + 8 = 13 (left: 1 13 11) || 1 * 13 = 13 (left: 13 11) || 13 + 11 = 24 (left: 24)",
                "5 + 8 = 13 (left: 1 13 11) || 1 * 13 = 13 (left: 13 11) || 13 / 11 = 1.18 (left: 1.18)",
                "5 + 8 = 13 (left: 1 13 11) || 1 * 13 = 13 (left: 13 11)",
                "5 + 8 = 13 (left: 1 13 11) || 1 * 13 = 13 (left: 13 11) || 13 * 11 = 143 (left: 143)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                60.0,
                0.002,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 4.4",
                "2 <- 4.1",
                "3 <- 5.1",
                "4 <- INIT"
            ]
        },
        "Step 6": {
            "steps": [
                "5 + 8 = 13 (left: 1 13 11) || 1 * 13 = 13 (left: 13 11) || 13 + 11 = 24 (left: 24) || Answer: (1 * (5 + 8)) + 11 = 24",
                "5 + 8 = 13 (left: 1 13 11) || 13 - 11 = 2 (left: 1 2) || 1 + 2 = 3 (left: 3)",
                "5 + 8 = 13 (left: 1 13 11) || 1 * 13 = 13 (left: 13 11) || 13 + 11 = 24 (left: 24)",
                "5 + 8 = 13 (left: 1 13 11) || 1 * 13 = 13 (left: 13 11) || 13 + 11 = 24 (left: 24) || Answer: (1 + (5 + 8)) + 11 = 24",
                "8 - 5 = 3 (left: 1 3 11)"
            ]
        },
        "Input": "1 5 8 11",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            }
        ]
    },
    "1047": {
        "puzzle": "2 3 5 13",
        "Step 0": {
            "steps": [
                "13 - 5 = 8 (left: 2 3 8)",
                "13 - 3 = 10 (left: 2 5 ",
                "13 - 5 = 8 (left: 2 3 8)",
                "2 + 3 = 5 (left: 5 5 13)",
                "5 * 3 = 15 (left: 2 15 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                40.001,
                1.001
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.3",
                "2 <- 0.3",
                "3 <- INIT",
                "4 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "2 + 3 = 5 (left: 5 5 13) || 13 - 5 = 8 (left: 5 8)",
                "2 + 3 = 5 (left: 5 5 13) || 5 + 5 = 10 (left: 10 13)",
                "2 + 3 = 5 (left: 5 5 13) || 5 + 5 = 10 (left: 10 13)",
                "2 + 3 = 5 (left: 5 5 13)",
                "5 * 3 = 15 (left: 2 15 13) || 2 + 15 = 17 (left: 13 17)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                1.001,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.3",
                "2 <- 0.3",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "3 + 5 = 8 (left: 2 8 13)",
                "2 + 3 = 5 (left: 5 5 13) || 5 + 5 = 10 (left: 10 13)",
                "2 + 3 = 5 (left: 5 5 13) || 5 * 5 = 25 (left: 25 13)",
                "5 * 3 = 15 (left: 2 15 13)",
                "13 - 2 = 11 (left: 3 5 "
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                1.001,
                0.003,
                3.0,
                0.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.3",
                "2 <- 0.3",
                "3 <- 1.3",
                "4 <- 0.3"
            ]
        },
        "Step 3": {
            "steps": [
                "2 + 3 = 5 (left: 5 5 13) || 5 + 5 = 10 (left: 10 13)",
                "2 + 3 = 5 (left: 5 5 13) || 5 + 13 = 18 (left: 5 18)",
                "2 + 3 = 5 (left: 5 5 13) || 5 * 5 = 25 (left: 25 13)",
                "2 + 3 = 5 (left: 5 5 13) || 13 / 5 = 2.6 (left: 2.6 13)",
                "2 + 3 = 5 (left: 5 5 13) || 13 * 5 = 65 (left: 65)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- INIT",
                "2 <- 2.1",
                "3 <- 2.0",
                "4 <- 2.3"
            ]
        },
        "Step 4": {
            "steps": [
                "5 * 3 = 15 (left: 2 15 13) || 2 / 15 = 0.13333333333333333 (left: 0.133",
                "13 - 3 = 10 (left: 2 5 10)",
                "2 + 3 = 5 (left: 5 5 13) || 5 + 5 = 10 (left: 10 13) || Input: 5 5 5",
                "3 + 5 = 8 (left: 2 8 13) || 13 - 2 = 11 (left: 8 11)",
                "5 * 3 = 15 (left: 2 15 13) || 13 / 2 = 6.5 ("
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 5": {
            "steps": [
                "2 + 3 = 5 (left: 5 5 13) || 13 - 5 = 8 (left: 5 8)",
                "5 * 3 = 15 (left: 2 15 13)",
                "5 * 2 = 10 (left: 3 10 13)",
                "2 + 3 = 5 (left: 5 5 13)",
                "3 + 5 = 8 (left: 2 8 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                1.002,
                0.003,
                2.001,
                1.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 5.0",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 2.1"
            ]
        },
        "Step 6": {
            "steps": [
                "2 + 3 = 5 (left: 5 5 13) || 5 - 5 = 0 (left: 0 13)",
                "2 + 3 = 5 (left: 5 5 13) || 13 - 5 = 8 (left: 5 8) || 5 + 8 = 13 (left: 13)",
                "2 + 3 = 5 (left: 5 5 13)",
                "13 - 3 = 10 (left: 2 5 10)",
                "2 + 3 = 5 (left: 5 5 13) || 5 + 5 = 10 (left: 10 13) || 10 - 13 = -3 (left: -3)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.002,
                3.0,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 5.4",
                "2 <- 2.0",
                "3 <- 6.2",
                "4 <- 5.0"
            ]
        },
        "Step 7": {
            "steps": [
                "2 + 3 = 5 (left: 5 5 13) || 13 + 5 = 18 (left: 5 18)",
                "3 + 5 = 8 (left: 2 8 13) || 8 * 2 = 16 (left: 16 13)",
                "3 + 5 = 8 (left: 2 8 13) || 8 / 2 = 4 (left: 4 13)",
                "2 + 3 = 5 (left: 5 5 13) || 5 * 13 = 65 (left: 65)",
                "2 + 3 = 5 (left: 5 5 13) || 13 - 5 = 8 (left: 5 8) || 5 * 8 = 40 (left: 40)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                1.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 5.0",
                "2 <- 5.0",
                "3 <- 7.2",
                "4 <- 7.2"
            ]
        },
        "Step 8": {
            "steps": [
                "2 + 3 = 5 (left: 5 5 13) || 5 + 5 = 10 (left: 10 13) || 10 * 13 = 130 (left: 130)",
                "2 + 3 = 5 (left: 5 5 13) || 13 - 5 = 8 (left: 5 8) || 8 / 5 = 1.6 (left: 1.6)",
                "2 + 3 = 5 (left: 5 5 13) || 13 - 5 = 8 (left: 5 8) || 5 + 8 = 13 (left: 13)",
                "3 + 5 = 8 (left: 2 8 13) || 8 / 2 = 4 (left: 4 13) || 5 + 5 =",
                "3 + 5 = 8 (left: 2 8 13) || 8 / 2 = 4 (left: 4 13) || 13 - 4 = 9 (left: 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 7.4",
                "1 <- 8.0",
                "2 <- 7.4",
                "3 <- 8.2",
                "4 <- 8.3"
            ]
        },
        "Step 9": {
            "steps": [
                "2 + 3 = 5 (left: 5 5 13) || 13 - 5 = 8 (left: 5 8) || 5 * 8 = 40 (left: 40) || There are no possible next steps with the input 40 as it is a single number.",
                "2 + 3 = 5 (left: 5 5 13) || 5 + 5 = 10 (left: 10 13) || 10 * 13 = 130 (left: 130) || 130 - 2 = 128",
                "2 + 3 = 5 (left: 5 5 13) || 13 - 5 = 8 (left: 5 8) || 5 * 8 = 40 (left: 40) || 40 / 2 = 20",
                "2 + 3 = 5 (left: 5 5 13) || 13 - 5 = 8 (left: 5 8) || 5 + 8 = 13 (left: 13) || 13 - 1 = 12",
                "3 + 5 = 8 (left: 2 8 13) || 8 / 2 = 4 (left: 4 13) || 5 + 5 = || 5 + 5 = 10"
            ],
            "Pruning": []
        },
        "Input": "2 3 5 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1048": {
        "puzzle": "3 4 8 9",
        "Step 0": {
            "steps": [
                "8 / 4 = 2 (left: 3 2 9)",
                "9 - 3 = 6 (left: 4 6 8)",
                "3 + 4 = 7 (left: 7 8 9)",
                "8 - 3 = 5 (left: 4 5 ",
                "9 - 4 = 5 (left: 3 5 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                22.0,
                60.0,
                41.0,
                20.0,
                3.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.1",
                "2 <- 0.0",
                "3 <- 0.2",
                "4 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "9 - 3 = 6 (left: 4 6 8) || Input: 3 5",
                "9 - 3 = 6 (left: 4 6 8) || 4 * 6 = 24 (left: 8 24)",
                "8 / 4 = 2 (left: 3 2 9) || 3 + 2 = 5 (left: 5 9)",
                "3 + 4 = 7 (left: 7 8 9) || 8 + 9 = 17 (left: 7 17)",
                "3 + 4 = 7 (left: 7 8 9) || 7 - 8 = -1 (left:"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.002,
                0.002,
                40.0,
                0.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- INIT",
                "2 <- 1.3",
                "3 <- 0.2",
                "4 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "8 - 3 = 5 (left: 4 5  || 10 + 2 = 12 (left: 12)",
                "3 + 4 = 7 (left: 7 8 9)",
                "3 + 4 = 7 (left: 7 8 9) || 8 + 9 = 17 (left: 7 17) || 9",
                "3 + 4 = 7 (left: 7 8 9) || 9 - 8 = 1 (left: 7 1)",
                "3 + 4 = 7 (left: 7 8 9) || 8 + 9 = 17 (left: 7 17) || 7 * 17 = 119 (left: 119)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                41.0,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.3",
                "2 <- 0.1",
                "3 <- 2.1",
                "4 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "3 + 4 = 7 (left: 7 8 9) || 8 + 9 = 17 (left: 7 17) || 7 * 17 = 119 (left: 119)",
                "3 + 4 = 7 (left: 7 8 9) || 8 + 9 = 17 (left: 7 17) || 17 / 7 = 2.43 (left: 2.43)",
                "9 - 3 = 6 (left: 4 6 8) || Input: 3 5",
                "3 + 4 = 7 (left: 7 8 9) || 7 + 8 = 15 (left: 9 15)",
                "3 + 4 = 7 (left: 7 8 9) || 8 + 9 = 17 (left: 7 17) || 7 + 17 = 24 (left: 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                60.0,
                40.0
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 3.4",
                "2 <- 0.2",
                "3 <- 0.3",
                "4 <- 3.3"
            ]
        },
        "Step 4": {
            "steps": [
                "3 + 4 = 7 (left: 7 8 9) || 7 + 8 = 15 (left: 9 15) || 9 - 15 = -6 (left: -6)",
                "3 + 4 = 7 (left: 7 8 9) || 8 + 9 = 17 (left: 7 17) || 7 + 17 = 24 (left: 24) || Answer: ((3 + 4) + 8) + 9 = 24",
                "3 + 4 = 7 (left: 7 8 9) || 8 + 9 = 17 (left: 7 17)",
                "8 - 3 = 5 (left: 4 5  || 5 / 4 = 1.25 (left: 1.25)",
                "3 + 4 = 7 (left: 7 8 9) || 7 + 8 = 15 (left: 9 15) || 9 / 15 = 0.6 (left: 0.6)"
            ]
        },
        "Input": "3 4 8 9",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1049": {
        "puzzle": "2 5 5 7",
        "Step 0": {
            "steps": [
                "5 - 2 = 3 (left: 3 5 7)",
                "7 - 2 = 5 (left: 5 5)",
                "7 + 2 = 9 (left: 5 5 9)",
                "5 / 2 = 2.5 (left: 2.5 5 7)",
                "2 + 5 = 7 (left: 5 7 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                0.002,
                41.0,
                2.001,
                2.001
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.2",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "7 + 2 = 9 (left: 5 5 9) || 5 * 5 = 25 (left: 25 9)",
                "7 + 2 = 9 (left: 5 5 9) || 5 - 5 = 0 (left: 0 9)",
                "7 - 5 = 2 (left: 2 5 7)",
                "5 / 2 = 2.5 (left: 2.5 5 7)",
                "7 + 2 = 9 (left: 5 5 9) || 5 / 5 = 1 (left: 1 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                20.0,
                1.002,
                2.001,
                60.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 0.2",
                "2 <- 1.4",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "7 + 2 = 9 (left: 5 5 9) || 5 / 5 = 1 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "7 + 2 = 9 (left: 5 5 9) || 5 - 5 = 0 (left: 0 9)",
                "7 + 2 = 9 (left: 5 5 9) || 5 / 5 = 1 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "2 + 5 = 7 (left: 5 7 7)",
                "2 + 5 = 7 (left: 5 7 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                60.0,
                0.002,
                2.001,
                3.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.2",
                "2 <- INIT",
                "3 <- 2.1",
                "4 <- 0.2"
            ]
        },
        "Step 3": {
            "steps": [
                "2 + 5 = 7 (left: 5 7 7) || 5 + 7 = 12 (left: 7 12)",
                "7 + 2 = 9 (left: 5 5 9) || 5 * 5 = 25 (left: 9 25)",
                "2 * 5 = 10 (left: 5 7 10)",
                "7 + 2 = 9 (left: 5 5 9) || 5 - 5 = 0 (left: 0 9) || 0 + 9 = 9 (left: 9)",
                "7 + 2 = 9 (left: 5 5 9) || 9 / 5 = 1.8 (left: 1.8 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.002,
                22.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 1.4",
                "2 <- 2.1",
                "3 <- 1.1",
                "4 <- 1.4"
            ]
        },
        "Step 4": {
            "steps": [
                "2 * 5 = 10 (left: 5 7 10) || 7 / 5 = ",
                "7 + 2 = 9 (left: 5 5 9) || 5 / 5 = 1 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "7 + 2 = 9 (left: 5 5 9) || 5 - 5 = 0 (left: 0 9) || 0 * 9 = 0 (left: 9)",
                "7 + 2 = 9 (left: 5 5 9) || 5 - 5 = 0 (left: 0 9) || 9 * 0 = 0 (left: 0)",
                "7 + 2 = 9 (left: 5 5 9) || 5 / 5 = 1 (left: 1 9) || 9 - 1 = 8 (left: 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- INIT",
                "2 <- 2.1",
                "3 <- 2.1",
                "4 <- INIT"
            ]
        },
        "Step 5": {
            "steps": [
                "7 + 2 = 9 (left: 5 5 9) || 5 - 5 = 0 (left: 0 9) || 9 - 0 = 9 (left: 9)",
                "5 - 2 = 3 (left: 3 5 7)",
                "7 + 2 = 9 (left: 5 5 9) || 5 - 5 = 0 (left: 0 9) || 9 / 0 = undefined (left: 0 9)",
                "7 + 2 = 9 (left: 5 5 9) || 5 - 5 = 0 (left: 0 9) || 0 + 9 = 9 (left: 9)",
                "7 + 2 = 9 (left: 5 5 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                2.001,
                20.001,
                0.0,
                2.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 3.2",
                "2 <- 5.4",
                "3 <- 1.4",
                "4 <- 2.1"
            ]
        },
        "Step 6": {
            "steps": [
                "7 + 2 = 9 (left: 5 5 9) || 5 - 5 = 0 (left: 0 9)",
                "2 * 5 = 10 (left: 5 7 10) || 7 + 10 = 17 (left: 5 17)",
                "7 + 2 = 9 (left: 5 5 9) || 5 / 5 = 1 (left: 1 9)",
                "7 + 2 = 9 (left: 5 5 9) || 5 / 5 = 1 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "7 + 2 = 9 (left: 5 5 9) || 5 - 5 = 0 (left: 0 9) || 9 / 0 = undefined (left: 0 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                1.0,
                60.0,
                0.002,
                0.0
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 6.2",
                "2 <- 5.4",
                "3 <- 6.0",
                "4 <- 6.2"
            ]
        },
        "Step 7": {
            "steps": [
                "7 + 2 = 9 (left: 5 5 9) || 5 - 5 = 0 (left: 0 9) || 0 * 9 = 0 (left: 9)",
                "7 + 2 = 9 (left: 5 5 9) || 5 / 5 = 1 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "7 + 2 = 9 (left: 5 5 9) || 5 + 5 = 10 (left: 9 10)",
                "7 + 2 = 9 (left: 5 5 9) || 5 - 5 = 0 (left: 0 9) || 9 / 0 = undefined",
                "7 + 2 = 9 (left: 5 5 9) || 5 / 5 = 1 (left: 1 9) || 1 * 9 = 9 (left: 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 6.0",
                "2 <- 6.0",
                "3 <- 6.0",
                "4 <- 2.1"
            ]
        },
        "Step 8": {
            "steps": [
                "7 + 2 = 9 (left: 5 5 9) || 5 / 5 = 1 (left: 1 9) || 1 + 9 = 10 (left: 10)",
                "7 + 2 = 9 (left: 5 5 9) || 5 - 5 = 0 (left: 0 9) || 9 / 0 = undefined (left: 9)",
                "7 + 2 = 9 (left: 5 5 9) || 5 - 5 = 0 (left: 0 9) || 9 - 0 = 9 (left: 9)",
                "7 + 2 = 9 (left: 5 5 9) || 5 - 5 = 0 (left: 0 9) || 9 / 0 = undefined (left: 9)",
                "7 + 2 = 9 (left: 5 5 9) || 5 - 5 = 0 (left: 0 9) || 0 * 9 = 0 (left: 0)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.002,
                0.002,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 5.2",
                "2 <- 5.2",
                "3 <- 5.2",
                "4 <- 5.2"
            ]
        },
        "Step 9": {
            "steps": [
                "7 + 2 = 9 (left: 5 5 9) || 5 - 5 = 0 (left: 0 9) || 9 / 0 = undefined (left: 0 9) || 0 + 9 = 9 (left: 9)",
                "7 + 2 = 9 (left: 5 5 9) || 5 - 5 = 0 (left: 0 9) || 9 / 0 = undefined (left: 0 9) || 9 - 0 = 9 (left: 9)",
                "7 + 2 = 9 (left: 5 5 9) || 5 - 5 = 0 (left: 0 9) || 9 / 0 = undefined (left: 0 9) || 9 * 0 = 0 (left: 0)",
                "7 + 2 = 9 (left: 5 5 9) || 5 - 5 = 0 (left: 0 9) || 9 / 0 = undefined (left: 0 9) || 9 - 0 = 9 (left: 9)",
                "7 + 2 = 9 (left: 5 5 9) || 5 - 5 = 0 (left: 0 9) || 9 / 0 = undefined (left: 0 9) || 9 * 0 = 0 (left: 0)"
            ],
            "Pruning": []
        },
        "Input": "2 5 5 7",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "Cost": {
        "input_tokens": 862773,
        "output_tokens": 295928.0,
        "total_cost": 0.8752785000000001
    }
}