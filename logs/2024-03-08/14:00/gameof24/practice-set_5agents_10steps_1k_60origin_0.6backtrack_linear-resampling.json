{
    "0": {
        "puzzle": "1 1 4 6",
        "Step 0": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6)",
                "6 - 1 = 5 (left: 1 4 5)",
                "4 + 1 = 5 (left: 1 5 6)",
                "6 - 4 = 2 (left: 1 2 6)",
                "6 - 1 = 5 (left: 1 4 5)"
            ],
            "Evaluation": [
                41.0,
                21.0,
                0.002,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.0",
                "2 <- 0.0",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "6 / 4 = 1.5 (left: 1 1.5 6)",
                "6 - 4 = 2 (left: 1 2 6)"
            ],
            "Evaluation": [
                0.002,
                1.002,
                60.0,
                21.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.3",
                "2 <- 1.2",
                "3 <- 1.2",
                "4 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "6 / 4 = 1.5 (left: 1 1.5 6) || 1.5 - 1 = 0.5 (left: 0",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 - 1 = 23 (left: 1 23)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "6 - 1 = 5 (left: 1 4 5) || 4 / 1 = 4 (left: 4 5)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.0,
                60.0,
                3.0
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 1.3",
                "2 <- INIT",
                "3 <- 2.3",
                "4 <- 2.3"
            ]
        },
        "Step 3": {
            "steps": [
                "6 / 4 = 1.5 (left: 1 1.5 6) || 1.5 - 1 = 0.5 (left: 0 || There are no possible next steps as there are no numbers given in the input.",
                "6 / 4 = 1.5 (left: 1 1.5 6) || 1 * 1.5 = 1.5 (left: 1.5 6)",
                "1 + 1 = 2 (left: 2 4 6)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: 1 * (1 * 4 * 6) = 24",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (1 * 1) * (4 * 6) = 24"
            ]
        },
        "Input": "1 1 4 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            }
        ],
        "Cost": {
            "input_tokens": 212296,
            "output_tokens": 27851.800000000003,
            "total_cost": 0.1479257
        }
    },
    "1": {
        "puzzle": "1 1 11 11",
        "Step 0": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11)",
                "1 * 1 = 1 (left: 1 11 11)",
                "11 - 1 = 10 (left: 1 10 11)",
                "11 / 1 = 11 (left: 1 11 ",
                "11 - 1 = 10 (left: 1 11 10)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11)",
                "11 - 1 = 10 (left: 1 10 11)",
                "11 - 1 = 10 (left: 1 11 10)",
                "1 + 1 = 2 (left: 2 11 11)",
                "1 * 1 = 1 (left: 1 11 11)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                1.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- INIT",
                "2 <- 0.0",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11) || 11 / 1 = 11 (left: 11 11 11)",
                "1 * 1 = 1 (left: 1 11 11)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10)",
                "1 * 1 = 1 (left: 1 11 11)",
                "1 + 1 = 2 (left: 2 11 11)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                60.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.1",
                "2 <- 2.1",
                "3 <- 2.2",
                "4 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 11 11) || 11 / 1 = 11 (left: 11 11 11)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 10 11)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 10 11)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                0.002,
                2.001
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 2.2",
                "3 <- 2.2",
                "4 <- 2.2"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 10 11)",
                "1 * 1 = 1 (left: 1 11 11) || 11 / 11 = 1 (left: 1 11)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.0,
                60.0,
                0.002,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 4.1",
                "2 <- 2.2",
                "3 <- 2.2",
                "4 <- 2.1"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 11 11) || 11 / 11 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 11 11) || 1 + 11 = 12 (left: 11 12)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 4.1",
                "2 <- 2.2",
                "3 <- 4.1",
                "4 <- 4.1"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 11 11) || 11 / 11 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 11 11) || 11 / 11 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 11 11) || 11 / 11 = 1 (left: 1 11) || 1 + 11 = 12 (left: 12)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 4.1",
                "2 <- 2.2",
                "3 <- 4.1",
                "4 <- 4.1"
            ]
        },
        "Step 7": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11) || 11 / 11 = 1 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "1 * 1 = 1 (left: 1 11 11) || 11 / 11 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 11 11) || 11 / 11 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 11 11) || 11 / 11 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.003,
                20.001,
                0.003,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 7.1",
                "1 <- 4.1",
                "2 <- 7.1",
                "3 <- 2.2",
                "4 <- 7.1"
            ]
        },
        "Step 8": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11) || 11 / 11 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10) || 10 - 8 = 2 (left: 2)",
                "1 * 1 = 1 (left: 1 11 11) || 11 / 11 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 11 11) || 11 / 11 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10) || 10 / 10 = 1 (left: 1)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 11 11) || 11 / 11 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10) || 10 + 10 = 20"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 7.1",
                "2 <- 7.1",
                "3 <- 7.1",
                "4 <- 4.1"
            ]
        },
        "Step 9": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 11 11) || 11 / 11 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10) || 10 / 2 = 5",
                "1 * 1 = 1 (left: 1 11 11) || 11 / 11 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10) || 10 / 10 = 1 (left: 1)",
                "1 * 1 = 1 (left: 1 11 11) || 11 / 11 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10) || There are no possible next steps with only one number provided.",
                "1 * 1 = 1 (left: 1 11 11) || 11 / 11 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)"
            ]
        },
        "Input": "1 1 11 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "Cost": {
            "input_tokens": 450555,
            "output_tokens": 43181.63333333335,
            "total_cost": 0.29004995000000006
        }
    },
    "2": {
        "puzzle": "1 1 3 8",
        "Step 0": {
            "steps": [
                "3 + 1 = 4 (left: 4 3 8)",
                "8 - 3 = 5 (left: 1 1 5)",
                "8 - 3 = 5 (left: 1 3 5)",
                "1 + 1 = 2 (left: 2 3 8)",
                "3 * 1 = 3 (left: 3 1 8)"
            ],
            "Evaluation": [
                2.0,
                2.001,
                1.002,
                2.001,
                60.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.4",
                "2 <- INIT",
                "3 <- 0.4",
                "4 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 8) || 8 / 3 = 2 (left: 2 3)",
                "3 * 1 = 3 (left: 3 1 8) || 8 / 3 = 2 (left:",
                "3 + 1 = 4 (left: 1 4 8)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 3 1 8) || 1 + 8 = 9 (left: 3 9)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.4",
                "2 <- 0.4",
                "3 <- 0.4",
                "4 <- 0.4"
            ]
        },
        "Step 2": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 1 = 3 (left: 3 1 8) || 8 / 1 = 8 (left: 3 8)",
                "3 * 1 = 3 (left: 3 1 8) || 1 + 8 = 9 (left: 3 9)",
                "3 * 1 = 3 (left: 3 1 8) || 8 / 1 = 8 (left: 3 8)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 1.3",
                "2 <- 2.1",
                "3 <- 2.4",
                "4 <- 2.3"
            ]
        },
        "Step 3": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 8) || 8 / 1 = 8 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 1 = 3 (left: 3 1 8) || 8 / 1 = 8 (left: 3 8) || 8 / 3 = 2.6667 (left: 2.6667)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "3 * 1 = 3 (left: 3 1 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 2.4",
                "2 <- 2.1",
                "3 <- 3.4",
                "4 <- 2.4"
            ]
        },
        "Step 4": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (8 / 1) = 24",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "3 * 1 = 3 (left: 3 1 8) || 8 / 1 = 8 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "3 * 1 = 3 (left: 3 1 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (8 / 1) = 24",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)"
            ]
        },
        "Input": "1 1 3 8",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ],
        "Cost": {
            "input_tokens": 254813,
            "output_tokens": 30791.300000000003,
            "total_cost": 0.17359345
        }
    },
    "3": {
        "puzzle": "1 1 1 8",
        "Step 0": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 ",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 * 1 = 1 (left: 1 1 8)",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 + 8 = 9 (left: 1 1 9)"
            ],
            "Evaluation": [
                0.003,
                22.0,
                1.001,
                60.0,
                0.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.3",
                "2 <- 0.3",
                "3 <- 0.3",
                "4 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 8 = 8 (left: 1 1 ",
                "1 + 1 = 2 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)",
                "1 + 1 = 2 (left: 1 2 8) || 2 - 1 = 1 (left: 1 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                40.0,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 0.3",
                "2 <- 1.4",
                "3 <- 1.2",
                "4 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 2 - 1 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 10"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.001,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.2",
                "2 <- 1.2",
                "3 <- 0.3",
                "4 <- 0.1"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || Input: 4 6 9",
                "1 + 1 = 2 (left: 1 2 8) || 2 - 1 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 1 2 8) || 2 - 1 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.001,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 3.3",
                "2 <- 1.2",
                "3 <- 3.3",
                "4 <- 1.4"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 * 3 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 8) || 2 - 1 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 0.1",
                "2 <- 3.4",
                "3 <- 3.3",
                "4 <- 3.4"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || Possible next steps:",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.001,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 4.1",
                "2 <- 4.1",
                "3 <- 3.3",
                "4 <- 3.4"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || Input: 5 10",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 * 3 = 24 (left: 24) || Answer: (1 + 1) * (1 + 8) = 24",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 * 3 = 24 (left: 24) || Answer: (1 + 1) * (1 + 8) = 24",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.66667 (left: 2.66667)",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 10 = 0 (left: 0)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                60.0,
                21.001
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 1.4",
                "2 <- 6.3",
                "3 <- 4.1",
                "4 <- 6.4"
            ]
        },
        "Step 7": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 9",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 * 3 = 24 (left: 24) || Answer: (1 + 1) * (1 + 8) = 24",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 6.3",
                "2 <- 7.4",
                "3 <- 7.4",
                "4 <- 7.3"
            ]
        },
        "Step 8": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 8 24)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.66666666667 (left: 2.66666666667)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                1.002,
                0.001,
                60.0,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 7.3",
                "1 <- 7.3",
                "2 <- 6.4",
                "3 <- 3.4",
                "4 <- 8.2"
            ]
        },
        "Step 9": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6)",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 1) * (1 + 8) = 24"
            ]
        },
        "Input": "1 1 1 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "Cost": {
            "input_tokens": 488222,
            "output_tokens": 45845.63333333335,
            "total_cost": 0.31287945000000006
        }
    },
    "4": {
        "puzzle": "6 6 6 6",
        "Step 0": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6)",
                "6 * 6 = 36 (left: 6 6 36 6)",
                "6 / 6 = 1 (left: 1 6 6)",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 - 6 = 0 (left: 0 6 6)"
            ],
            "Evaluation": [
                41.0,
                1.001,
                41.0,
                22.0,
                20.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.4",
                "2 <- 0.0",
                "3 <- 0.0",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6) || 6 * 12 = 72 (left: 72 6)",
                "6 - 6 = 0 (left: 0 6 6) || Input: 3 3 6",
                "6 + 6 = 12 (left: 6 12 6) || 6 * 12 = 72 (left: 72 6)",
                "6 + 6 = 12 (left: 6 12 6) || 12 / 6 = 2 (left: 2 6)",
                "6 - 6 = 0 (left: 0 6 6)"
            ],
            "Evaluation": [
                21.001,
                0.003,
                21.0,
                1.001,
                41.0
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 1.0",
                "2 <- 0.1",
                "3 <- 0.0",
                "4 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6) || Possible",
                "6 + 6 = 12 (left: 6 12 6) || 6 * 12 = 72 (left: 72 6) || 72 - 6 = 66 (left: 66)",
                "6 * 6 = 36 (left: 6 6 36 6) || 6 / 6 = 1 (left: 1 36 6)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 6 18 6)",
                "6 - 6 = 0 (left: 0 6 6) || 0 + 6 = 6 (left: 6 6)"
            ],
            "Evaluation": [
                20.001,
                0.003,
                2.0,
                60.0,
                20.002
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 0.3",
                "2 <- 1.4",
                "3 <- 0.0",
                "4 <- 2.3"
            ]
        },
        "Step 3": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6) || 6 * 12 = 72 (left: 72 6) || 72 * 6 = 432 (left: 432)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 6 18)",
                "6 - 6 = 0 (left: 0 6 6) || 6 / 6 = 1 (left: 0 1)",
                "6 + 6 = 12 (left: 6 12 6) || 6 - 6 = 0 (left: 12)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 6 18 6) || 6 + 18 = 24 (left: 24 6)"
            ],
            "Evaluation": [
                0.003,
                40.001,
                60.0,
                0.003,
                20.001
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.0",
                "2 <- 2.3",
                "3 <- 2.0",
                "4 <- 3.2"
            ]
        },
        "Step 4": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 6 18 6) || 6 * 3 = 18 (left: 18 6)",
                "6 + 6 = 12 (left: 6 12 6) || Possible || It seems like the input was cut off. Can you provide the full input so I can generate the possible next steps for you?",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 6 18 6) || 6 + 18 = 24 (left: 24 6)",
                "6 + 6 = 12 (left: 6 12 6) || Possible || It seems like the input is missing. Could you please provide the input numbers for me to suggest possible next steps?",
                "6 - 6 = 0 (left: 0 6 6) || 6 / 6 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0)"
            ],
            "Evaluation": [
                40.001,
                0.002,
                22.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 2.4",
                "2 <- 4.2",
                "3 <- 1.2",
                "4 <- 2.3"
            ]
        },
        "Step 5": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 6 18 6) || 6 * 3 = 18 (left: 18 6) || 18 * 6 = 108 (left: 108)",
                "6 - 6 = 0 (left: 0 6 6) || 0 + 6 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 6 18 6) || 6 + 18 = 24 (left: 24 6) || 24 / 6 = 4 (left: 4)",
                "6 + 6 = 12 (left: 6 12 6) || 6 * 12 = 72 (left: 72 6) || 72 + 6 = 78 (left: 78)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 6 18 6) || 18 - 6 = 12 (left: 6 12 6)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                41.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 5.4",
                "2 <- 2.3",
                "3 <- 2.3",
                "4 <- 5.2"
            ]
        },
        "Step 6": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 6 18 6) || 6 + 18 = 24 (left: 24 6) || 24 / 6 = 4 (left: 4)",
                "6 - 6 = 0 (left: 0 6 6) || 6 / 6 = 1 (left: 0 1) || 0 + 1 = 1 (left: 1)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 6 18 6) || 6 * 18 = 108 (left: 6 108 6)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 6 18 6) || 6 * 3 = 18 (left: 6 18 6)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 6 18 6) || 18 - 6 = 12 (left: 6 12 6) || 12 / 6 = 2 (left: 2 6)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                60.0,
                1.002,
                41.0
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 5.2",
                "2 <- 5.2",
                "3 <- 6.1",
                "4 <- 5.3"
            ]
        },
        "Step 7": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 6 18 6) || 6 * 3 = 18 (left: 18 6) || 18 / 6 = 3 (left: 3)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 6 18 6) || 18 - 6 = 12 (left: 6 12 6) || 6 + 6 = 12 (left: 12)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 6 18 6) || 18 - 6 = 12 (left: 6 12 6) || 12 / 6 = 2 (left: 2)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 6 18 6) || 6 * 18 = 108 (left: 6 108 6) || 108 / 6 = 18 (left: 6 18 6)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 6 18 6) || 6 + 18 = 24 (left: 24 6) || 24 * 6 = 144 (left: 144)"
            ],
            "Evaluation": [
                21.001,
                60.0,
                60.0,
                60.0,
                40.001
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 6.2",
                "2 <- 4.2",
                "3 <- 7.1",
                "4 <- 7.1"
            ]
        },
        "Step 8": {
            "steps": [
                "6 - 6 = 0 (left: 0 6 6) || 6 - 0 = 6 (left: 6 6)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 6 18 6) || 6 * 3 = 18 (left: 6 18 6) || 6 / 18 = 0.3333333333333333 (left: 6 0",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 6 18 6) || 6 + 18 = 24 (left: 24 6) || 24 + 6 = 30 (left: 30)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 6 18 6) || 6 * 18 = 108 (left: 6 108 6) || 108 - 6 = 102 (left: 6 102 6)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 6 18 6) || 6 * 18 = 108 (left: 6 108 6) || 6 + 108 = 114 (left: 6 114 6)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 8.4",
                "1 <- 6.2",
                "2 <- 8.2",
                "3 <- 7.4",
                "4 <- 8.3"
            ]
        },
        "Step 9": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 6 18 6) || 6 * 3 = 18 (left: 6 18 6) || 18 - 6 = 12 (left: 12 6)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 6 18 6) || 6 * 3 = 18 (left: 6 18 6) || 6 * 6 = 36 (left: 36)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 6 18 6) || 6 * 18 = 108 (left: 6 108 6) || 108 - 6 = 102 (left: 6 102 6) || 6 + 102 = 108 (left: 6 108 6)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 6 18 6) || 18 - 6 = 12 (left: 6 12 6) || 12 / 6 = 2 (left: 2)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 6 18 6) || 6 * 18 = 108 (left: 6 108 6) || 6 + 108 = 114 (left: 6 114 6) || 6 * 114 = 684 (left: 684 6)"
            ]
        },
        "Input": "6 6 6 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "Cost": {
            "input_tokens": 528218,
            "output_tokens": 50305.63333333335,
            "total_cost": 0.33956745
        }
    },
    "5": {
        "puzzle": "1 1 2 12",
        "Step 0": {
            "steps": [
                "12 / 2 = 6 (left: 1 2 6)",
                "1 + 1 = 2 (left: 2 2 12)",
                "1 + 1 = 2 (left: 2 2 12)",
                "12 - 2 = 10 (left: 1 2 10)",
                "1 + 1 = 2 (left: 2 2 12)"
            ],
            "Evaluation": [
                0.003,
                2.001,
                0.003,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.1",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 12) || 12 * 2 = 24 (left: 2 24)",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 12)",
                "1 * 1 = 1 (left: 1 2 12)",
                "12 - 2 = 10 (left: 1 2 10)",
                "1 + 1 = 2 (left: 2 2 12)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                60.0,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- 1.2",
                "3 <- 1.2",
                "4 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 1 * 2 = 2 (left:",
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 1 = 11 (left:",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                40.001,
                60.0,
                41.0
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.4",
                "2 <- 2.2",
                "3 <- 2.4",
                "4 <- 2.3"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 1 = 11 (left: || 12 / 1 = 12 (left: 1 11)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                40.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 3.2",
                "2 <- 3.2",
                "3 <- 3.2",
                "4 <- 2.3"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 1 = 11 (left: || 12 / 1 = 12 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 1 = 11 (left: || 12 / 1 = 12 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 1 = 11 (left: || 12 / 1 = 12 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                60.0,
                0.001,
                60.0,
                60.0,
                40.001
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 4.0",
                "2 <- 1.2",
                "3 <- 4.4",
                "4 <- 4.3"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 1 = 11 (left: || 12 / 1 = 12 (left: 1 11) || 1 + 11 = 12"
            ],
            "Evaluation": [
                0.002,
                0.003,
                60.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 5.2",
                "2 <- 4.0",
                "3 <- 5.2",
                "4 <- 4.0"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.001,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 4.2",
                "2 <- 5.2",
                "3 <- 5.2",
                "4 <- 5.2"
            ]
        },
        "Step 7": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 4.0",
                "2 <- 3.2",
                "3 <- 3.2",
                "4 <- 4.2"
            ]
        },
        "Step 8": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 1 = 11 (left: || 12 / 1 = 12 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 1 = 11 (left: || 12 / 1 = 12 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.002,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 8.4",
                "1 <- 3.2",
                "2 <- 8.3",
                "3 <- 4.0",
                "4 <- 5.2"
            ]
        },
        "Step 9": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 1 = 11 (left: || 12 / 1 = 12 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)"
            ]
        },
        "Input": "1 1 2 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "Cost": {
            "input_tokens": 387851,
            "output_tokens": 39020.80000000002,
            "total_cost": 0.25245670000000003
        }
    },
    "6": {
        "puzzle": "1 2 2 6",
        "Step 0": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6)",
                "1 * 2 = 2 (left: 2 2 6)",
                "2 * 2 = 4 (left: 4 2 6)",
                "6 / 2 = 3 (left: 2 3 ",
                "2 * 2 = 4 (left: 4 2 6)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                1.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.1",
                "2 <- 0.0",
                "3 <- 0.1",
                "4 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6)",
                "1 * 2 = 2 (left: 2 2 6) || Input: 3 3 5",
                "2 / 1 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 4)",
                "1 * 2 = 2 (left: 2 2 6) || 2 - 2 = 0 (left: 0 6)",
                "2 / 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)"
            ],
            "Evaluation": [
                40.0,
                0.003,
                0.003,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.0",
                "2 <- INIT",
                "3 <- 1.3",
                "4 <- 0.0"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 2 = 2 (left: 2 2 6) || 2 - 2 = 0 (left: 0 6) || 0 + 6 = 6 (left: 6)",
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "2 * 2 = 4 (left: 1 4 6)",
                "1 * 2 = 2 (left: 2 2 6) || 2 - 2 = 0 (left: 0 6) || Possible next steps:",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 1.3",
                "2 <- 2.2",
                "3 <- 0.1",
                "4 <- 0.1"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 2 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6)",
                "1 * 2 = 2 (left: 2 2 6) || 2 - 2 = 0 (left: 0 6) || 6 * 0 = 0 (left: 0)",
                "2 * 2 = 4 (left: 1 4 6) || 6 / 4 = 1.5 (",
                "1 * 2 = 2 (left: 2 2 6) || 2 - 2 = 0 (left: 0 6)",
                "1 * 2 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 2.2",
                "2 <- 3.0",
                "3 <- 1.3",
                "4 <- 2.2"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 2 = 2 (left: 2 2 6) || 2 - 2 = 0 (left: 0 6) || 6 - 0 = 6 (left: 6)",
                "2 * 2 = 4 (left: 1 4 6) || 4 - 1 = 3 (left: 3 6)",
                "1 * 2 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "1 * 2 = 2 (left: 2 2 6) || 2 - 2 = 0 (left: 0 6) || 0 + 6 = 6 (left: 6)",
                "2 * 2 = 4 (left: 1 4 6) || 6 / 1 = "
            ],
            "Evaluation": [
                0.002,
                3.0,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 0.1",
                "2 <- 3.0",
                "3 <- 3.0",
                "4 <- 3.0"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 2 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "1 * 2 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6)",
                "1 * 2 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "1 * 2 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "1 * 2 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.001,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 3.3",
                "2 <- 5.1",
                "3 <- 5.1",
                "4 <- 0.0"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 2 = 2 (left: 2 2 6) || 2 - 2 = 0 (left: 0 6) || 6 / 0 = undefined ",
                "1 * 2 = 2 (left: 2 2 6) || 2 - 2 = 0 (left: 0 6) || 6 - 0 = 6 (left: 6)",
                "1 * 2 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 * 2 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 6.4",
                "2 <- 6.4",
                "3 <- 6.4",
                "4 <- 5.1"
            ]
        },
        "Step 7": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 * 2 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 6.4",
                "2 <- 0.1",
                "3 <- 5.1",
                "4 <- 3.0"
            ]
        },
        "Step 8": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "1 * 2 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)",
                "1 * 2 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "1 * 2 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.001,
                0.0,
                60.0
            ],
            "Resampling": [
                "0 <- 8.4",
                "1 <- 3.0",
                "2 <- 8.4",
                "3 <- 8.4",
                "4 <- 8.4"
            ]
        },
        "Step 9": {
            "steps": [
                "1 * 2 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 2) * (2 * 6) = 24",
                "1 * 2 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || Possible next steps:",
                "1 * 2 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 2) * (2 * 6) = 24",
                "1 * 2 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 2) * (2 * 6) = 24",
                "1 * 2 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 2) * (2 * 6) = 24"
            ]
        },
        "Input": "1 2 2 6",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            }
        ],
        "Cost": {
            "input_tokens": 448473,
            "output_tokens": 42757.63333333335,
            "total_cost": 0.28837295
        }
    },
    "7": {
        "puzzle": "1 1 10 12",
        "Step 0": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 10 12)",
                "1 + 1 = 2 (left: 2 10 12)",
                "1 * 10 = 10 (left: 10 1 12)",
                "1 + 1 = 2 (left: 2 10 12)"
            ],
            "Evaluation": [
                20.002,
                1.002,
                0.003,
                1.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.0",
                "2 <- INIT",
                "3 <- 0.0",
                "4 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "10 + 1 = 11 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "12 - 10 = 2 (left: 1 2 12)",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                60.0,
                20.002,
                0.0
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- 1.2",
                "4 <- 0.0"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 2 + 12 = 14 (left: 1 14)",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 1 = 11 (left: 2 11)",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)"
            ],
            "Evaluation": [
                20.001,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 0.0",
                "2 <- 1.2",
                "3 <- 1.2",
                "4 <- 1.2"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 12 - 1 = 11 (left: 2 11)",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 1 = 12 (left:",
                "12 - 10 = 2 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                0.001,
                1.002
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 3.1",
                "2 <- 1.3",
                "3 <- 1.2",
                "4 <- 1.2"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "12 - 10 = 2 (left: 1 2 12) || 12 + 2 = 14 (left: 1 14)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                41.0,
                0.001
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 3.2",
                "2 <- 3.2",
                "3 <- 1.2",
                "4 <- 3.2"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 5.3",
                "2 <- 3.2",
                "3 <- 4.3",
                "4 <- 3.1"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 4.3",
                "2 <- 6.4",
                "3 <- 6.4",
                "4 <- 5.3"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (10 + 1) + (1 + 11) = 24",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((1 + 1) + 10) + 12 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)"
            ]
        },
        "Input": "1 1 10 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ],
        "Cost": {
            "input_tokens": 345272,
            "output_tokens": 37160.80000000002,
            "total_cost": 0.22837720000000003
        }
    },
    "8": {
        "puzzle": "2 2 10 10",
        "Step 0": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 - 2 = 8 (left: 2 8 10)"
            ],
            "Evaluation": [
                20.002,
                1.002,
                0.003,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- INIT",
                "2 <- 0.0",
                "3 <- 0.3",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2",
                "2 * 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14)",
                "10 / 2 = 5 (left: 2 5 10) || 2 + 5 = 7 (left: 7 10)",
                "10 / 2 = 5 (left: 2 5 10)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                1.002,
                1.002,
                21.001
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.4",
                "2 <- 1.4",
                "3 <- 0.0",
                "4 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10) || 10 / 2 = 5 (left: 5 10)",
                "10 / 2 = 5 (left: 2 5 10) || 2 * 5 = 10 (left: 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 2 8 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 - 2 = 8 (left: 2 8 10) || 2 + 8 = 10 (left: 10 10)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                1.002,
                2.001,
                20.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.4",
                "2 <- 2.4",
                "3 <- 0.0",
                "4 <- 2.4"
            ]
        },
        "Step 3": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10) || 5 + 2 = 7 (left: 7 10)",
                "10 / 2 = 5 (left: 2 5 10) || 2 + 5 = 7 (left: 7 10)",
                "10 - 2 = 8 (left: 2 8 10) || 2 + 8 = 10 (left: 10 10) || 10 * 10 = 100 (left: 100)",
                "2 + 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 10 40)",
                "10 - 2 = 8 (left: 2 8 10) || 2 + 8 = 10 (left: 10 10) || 10 + 10 = 20"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 0.1",
                "2 <- 1.2",
                "3 <- 1.1",
                "4 <- 2.4"
            ]
        },
        "Step 4": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 2.5 + 10 = 12.5 (left: 10 12.5)",
                "10 - 2 = 8 (left: 2 8 10) || 2 + 8 = 10 (left: 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14) || 10 + 10 = 20 (left: 20 14)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10)",
                "10 - 2 = 8 (left: 2 8 10) || 2 + 8 = 10 (left: 10 10) || 10 * 10 = 100 (left: 100)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 0.0",
                "2 <- 0.0",
                "3 <- 2.4",
                "4 <- 1.4"
            ]
        },
        "Step 5": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 - 2 = 8 (left: 2 8 10) || 2 + 8 = 10 (left: 10 10) || 10 + 10 = 20",
                "10 / 2 = 5 (left: 2 5 10) || 5 + 10 = 15 (left: 2 15)"
            ],
            "Evaluation": [
                0.003,
                2.001,
                3.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 0.0",
                "2 <- 5.2",
                "3 <- 4.0",
                "4 <- 5.1"
            ]
        },
        "Step 6": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 2.5 + 10 = 12.5 (left: 10 12.5)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 2.5 + 10 = 12.5 (left: 10 12.5) || 12.5 - 10 = 2.5 (left: 2.5)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 + 10 = 16 (left: 10 10 16)"
            ],
            "Evaluation": [
                1.001,
                0.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 0.0",
                "2 <- 5.1",
                "3 <- 2.4",
                "4 <- 5.2"
            ]
        },
        "Step 7": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 2.5 + 10 = 12.5 (left: 10 12.5) || 10 + 12.5 = 22.5 (left: 22.5)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10)",
                "10 - 2 = 8 (left: 2 8 10) || 2 + 8 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 / 10 = 1 (left: 6 1 10)"
            ],
            "Evaluation": [
                0.003,
                40.0,
                0.002,
                21.001,
                21.001
            ],
            "Resampling": [
                "0 <- 7.4",
                "1 <- 7.1",
                "2 <- 7.1",
                "3 <- 7.1",
                "4 <- 7.3"
            ]
        },
        "Step 8": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10) || 4 * 10 = 40 (left: 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10) || Possible next steps:",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10) || 10 / 4 = 2.5 (left: 2.5 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 / 10 = 1 (left: 6 1 10) || 6 * 1 = 6 (left: 6 10)"
            ],
            "Evaluation": [
                2.0,
                0.003,
                0.002,
                0.003,
                41.0
            ],
            "Resampling": [
                "0 <- 7.3",
                "1 <- 8.4",
                "2 <- 7.1",
                "3 <- 8.4",
                "4 <- 5.2"
            ]
        },
        "Step 9": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 / 10 = 1 (left: 6 1 10) || 6 / 1 = 6 (left: 6 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10) || 3 + 9 = 12 (left: 12 27)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10) || 10 - 4 = 6 (left: 6)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10) || 4 * 10 = 40 (left: 40)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 / 6 = 1.6666666666666667 (left: 1.6666666666666667 10 10)"
            ]
        },
        "Input": "2 2 10 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "Cost": {
            "input_tokens": 502668,
            "output_tokens": 47712.63333333335,
            "total_cost": 0.32290295
        }
    },
    "9": {
        "puzzle": "1 1 1 12",
        "Step 0": {
            "steps": [
                "12 - 1 = 11 (left: 1 1 11)",
                "1 + 1 = 2 (left: 1 2 12)",
                "1 * 1 = 1 (left: 1 1 12)",
                "12 - 1 = 11 (left: 1 1 11)",
                "1 + 1 = 2 (left: 1 2 12)"
            ],
            "Evaluation": [
                1.002,
                60.0,
                60.0,
                1.002,
                60.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.4",
                "2 <- INIT",
                "3 <- 0.2",
                "4 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "1 / 1 = 1 (left: 1 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "1 + 1 = 2 (left: 1 2 12) || 10 - 3 = 7 (left: 7"
            ],
            "Evaluation": [
                20.002,
                40.0,
                41.0,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 0.1",
                "2 <- 0.2",
                "3 <- 0.2",
                "4 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "1 / 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "1 * 1 = 1 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.002,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 2.1",
                "2 <- 2.1",
                "3 <- 2.1",
                "4 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.0,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 1.1",
                "2 <- 3.0",
                "3 <- 2.1",
                "4 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)"
            ],
            "Evaluation": [
                60.0,
                0.001,
                60.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 4.2",
                "2 <- 1.2",
                "3 <- 2.1",
                "4 <- 3.0"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 + 1) * (1 * 12) = 24",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 + 1) * (1 * 12) = 24",
                "1 / 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 24 = 0 (left: 0)"
            ]
        },
        "Input": "1 1 1 12",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "Cost": {
            "input_tokens": 430966,
            "output_tokens": 41317.63333333335,
            "total_cost": 0.27745945000000005
        }
    },
    "10": {
        "puzzle": "1 1 2 8",
        "Step 0": {
            "steps": [
                "8 - 1 = 7 (left: 1 2 7)",
                "8 - 2 = 6 (left: 1 2 6)",
                "2 + 8 = 10 (left: 1 10 ",
                "8 / 2 = 4 (left: 1 1 4)",
                "1 * 1 = 1 (left: 1 2 8)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                60.0,
                1.002,
                22.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.2",
                "2 <- 0.2",
                "3 <- 0.2",
                "4 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "8 / 2 = 4 (left: 1 4 ",
                "2 + 8 = 10 (left: 1 10  || 10 - 1 = 9 (left: 9)",
                "2 + 8 = 10 (left: 1 10  || 1 + 10 = 11 (left: 11)",
                "2 + 8 = 10 (left: 1 10  || 10 - 1 = 9 (left: 9)",
                "2 + 8 = 10 (left: 1 10  || 10 / 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.001,
                0.001,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.2",
                "2 <- 0.0",
                "3 <- 0.2",
                "4 <- 0.4"
            ]
        },
        "Step 2": {
            "steps": [
                "2 + 8 = 10 (left: 1 10  || 10 / 1 = 10 (left: 10)",
                "2 + 8 = 10 (left: 1 10  || 1 * 10 = 10 (left: 10)",
                "8 - 1 = 7 (left: 1 2 7) || 7 / 1 = ",
                "2 + 8 = 10 (left: 1 10  || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.4",
                "2 <- 2.4",
                "3 <- 0.2",
                "4 <- 2.4"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "2 + 8 = 10 (left: 1 10  || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 2.4",
                "2 <- 2.4",
                "3 <- 0.2",
                "4 <- 2.4"
            ]
        },
        "Step 4": {
            "steps": [
                "2 + 8 = 10 (left: 1 10  || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "2 + 8 = 10 (left: 1 10  || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.0,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 2.4",
                "2 <- 0.2",
                "3 <- 2.4",
                "4 <- 2.4"
            ]
        },
        "Step 5": {
            "steps": [
                "2 + 8 = 10 (left: 1 10  || 1 + 10 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "2 + 8 = 10 (left: 1 10  || 1 + 10 = 11 (left: 10)",
                "1 * 1 = 1 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.002,
                0.001,
                0.0
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.4",
                "2 <- 2.4",
                "3 <- 2.4",
                "4 <- 2.4"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 + 4 = 5",
                "1 * 1 = 1 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.001,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.4",
                "2 <- 0.2",
                "3 <- 0.2",
                "4 <- 2.4"
            ]
        },
        "Step 7": {
            "steps": [
                "2 + 8 = 10 (left: 1 10  || 10 + 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 2 8) || 2 / 1 = 2 (left: 2 8)",
                "2 + 8 = 10 (left: 1 10  || 10 - 1 = 9 (left: 9)",
                "2 + 8 = 10 (left: 1 10  || 10 * 1 = 10 (left",
                "1 * 1 = 1 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)"
            ],
            "Evaluation": [
                0.001,
                0.001,
                0.001,
                21.001,
                0.001
            ],
            "Resampling": [
                "0 <- 7.3",
                "1 <- 7.3",
                "2 <- 7.3",
                "3 <- 0.2",
                "4 <- 7.3"
            ]
        },
        "Step 8": {
            "steps": [
                "2 + 8 = 10 (left: 1 10  || 10 * 1 = 10 (left || 10 - 1 = 9 (left: 9 )",
                "2 + 8 = 10 (left: 1 10  || 10 * 1 = 10 (left || 10 - 1 = 9 (left: 9)",
                "2 + 8 = 10 (left: 1 10  || 10 * 1 = 10 (left || 10 / 1 = 10 (left: 1 10)",
                "2 + 8 = 10 (left: 1 10  || 1 + 10 = 11 (left: 11)",
                "2 + 8 = 10 (left: 1 10  || 10 * 1 = 10 (left || 1 * 10 = 10 (left: 10 10)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                60.0,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 8.2",
                "1 <- 7.3",
                "2 <- 8.2",
                "3 <- 8.2",
                "4 <- 8.2"
            ]
        },
        "Step 9": {
            "steps": [
                "2 + 8 = 10 (left: 1 10  || 10 * 1 = 10 (left || 10 / 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "2 + 8 = 10 (left: 1 10  || 10 * 1 = 10 (left || 1 - 10 = -9 (left: -9)",
                "2 + 8 = 10 (left: 1 10  || 10 * 1 = 10 (left || 10 / 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "2 + 8 = 10 (left: 1 10  || 10 * 1 = 10 (left || 10 / 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "2 + 8 = 10 (left: 1 10  || 10 * 1 = 10 (left || 10 / 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ]
        },
        "Input": "1 1 2 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "Cost": {
            "input_tokens": 490181,
            "output_tokens": 46359.63333333335,
            "total_cost": 0.31462995000000005
        }
    }
}