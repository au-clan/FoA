{
    "0": {
        "puzzle": "1 1 4 6",
        "Step 0": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6)",
                "6 - 1 = 5 (left: 1 4 5)",
                "4 + 1 = 5 (left: 1 5 6)",
                "6 - 4 = 2 (left: 1 2 6)",
                "6 - 1 = 5 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 4 5)"
            ],
            "Evaluation": [
                41.0,
                21.0,
                0.002,
                1.002,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.0",
                "2 <- 0.0",
                "3 <- 0.1",
                "4 <- INIT",
                "5 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "6 - 1 = 5 (left: 1 4 5) || 1 * 4 = 4 (left: 4 5)",
                "6 - 4 = 2 (left: 1 2 6)",
                "6 - 1 = 5 (left: 1 4 5) || 5 * 1 = 5 (left: 4 5)"
            ],
            "Evaluation": [
                0.002,
                1.002,
                60.0,
                3.0,
                1.002,
                2.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.1",
                "2 <- 1.2",
                "3 <- 0.1",
                "4 <- 1.2",
                "5 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "6 - 1 = 5 (left: 1 4 5) || 1 - 4 = -3 (left:",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 4 5)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 4 = 1 (left: 1 5)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 - 1 = 23 (left: 1 23)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)"
            ],
            "Evaluation": [
                1.001,
                22.0,
                60.0,
                40.0,
                0.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 2.2",
                "2 <- 1.2",
                "3 <- 2.2",
                "4 <- 2.2",
                "5 <- 2.5"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: 1 * (1 * 4 * 6) = 24",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (1 * 1) * (4 * 6) = 24",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (1 * 1) * (4 * 6) = 24",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: 1 * (1 * 4) * 6 = 24"
            ]
        },
        "Input": "1 1 4 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            }
        ]
    },
    "1": {
        "puzzle": "1 1 11 11",
        "Step 0": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11)",
                "1 * 1 = 1 (left: 1 11 11)",
                "11 - 1 = 10 (left: 1 10 11)",
                "11 / 1 = 11 (left: 1 11 ",
                "11 - 1 = 10 (left: 1 11 10)",
                "11 * 1 = 11 (left: 1 11 11)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                0.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.0",
                "4 <- INIT",
                "5 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11)",
                "1 + 1 = 2 (left: 2 11 11)",
                "11 * 1 = 11 (left: 1 11 11)",
                "1 * 1 = 1 (left: 1 11 11) || 1 + 11 = 12 (left: 11 11 12)",
                "1 * 1 = 1 (left: 1 11 11)",
                "1 - 1 = 0 (left: 0 11 11)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 1.2",
                "5 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10)",
                "11 * 1 = 11 (left: 1 11 11) || 1 + 11 = 12 (left: 11 11 12)",
                "11 + 1 = 12 (left: 1 11 12)",
                "1 - 1 = 0 (left: 0 11 11)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10)",
                "11 * 1 = 11 (left: 1 11 11) || 11 * 1 = 11 (left: 11 11)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                21.001,
                1.002,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.0",
                "2 <- 2.4",
                "3 <- 2.4",
                "4 <- 2.0",
                "5 <- 2.0"
            ]
        },
        "Step 3": {
            "steps": [
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 - 10 = 0 (left: 0)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || Input: 3 5 9",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.003,
                20.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.2",
                "2 <- 2.0",
                "3 <- 2.0",
                "4 <- 2.0",
                "5 <- 2.4"
            ]
        },
        "Step 4": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 12 / 1 = 12 (left: 12 12)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.001,
                0.003,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.4",
                "2 <- 4.1",
                "3 <- 4.1",
                "4 <- 2.0",
                "5 <- 2.0"
            ]
        },
        "Step 5": {
            "steps": [
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 / 10 = 0.1 (left: 0.1)",
                "11 + 1 = 12 (left: 1 11 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 - 10 = 0 (left: 0)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.4",
                "2 <- 2.2",
                "3 <- 2.4",
                "4 <- 2.2",
                "5 <- 4.1"
            ]
        },
        "Step 6": {
            "steps": [
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 + 1 = 12 (left: 1 11 12) || Possible",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 11 = 1 (left: 1 1)",
                "11 + 1 = 12 (left: 1 11 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 3.3",
                "2 <- 4.1",
                "3 <- 2.4",
                "4 <- 3.3",
                "5 <- 2.0"
            ]
        },
        "Step 7": {
            "steps": [
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "11 + 1 = 12 (left: 1 11 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 - 10 = 0 (left: 0) || No possible next steps as there is no input given.",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.4",
                "2 <- 4.1",
                "3 <- 2.0",
                "4 <- 3.3",
                "5 <- 2.0"
            ]
        },
        "Step 8": {
            "steps": [
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 + 1 = 12 (left: 1 11 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 + 10 = 11",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps with the input 0.",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.2",
                "2 <- 2.4",
                "3 <- 2.0",
                "4 <- 2.0",
                "5 <- 2.0"
            ]
        },
        "Step 9": {
            "steps": [
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 + 1 = 12 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ]
        },
        "Input": "1 1 11 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "2": {
        "puzzle": "1 1 3 8",
        "Step 0": {
            "steps": [
                "3 + 1 = 4 (left: 4 3 8)",
                "8 - 3 = 5 (left: 1 1 5)",
                "8 - 3 = 5 (left: 1 3 5)",
                "1 + 1 = 2 (left: 2 3 8)",
                "3 * 1 = 3 (left: 3 1 8)",
                "1 + 1 = 2 (left: 2 3 8)"
            ],
            "Evaluation": [
                2.0,
                2.001,
                1.002,
                2.001,
                60.0,
                2.001
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.4",
                "2 <- 0.4",
                "3 <- 0.2",
                "4 <- 0.4",
                "5 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 8) || 8 / 3 = 2 (left: 2 3)",
                "3 * 1 = 3 (left: 3 1 8) || 8 / 3 = 2 (left:",
                "3 * 1 = 3 (left: 3 1 8) || 8 - 1 = 7 (left: 3 7)",
                "8 - 3 = 5 (left: 1 3 5) || 5 - 3 = 2 (left: 1 2)",
                "3 * 1 = 3 (left: 3 1 8) || 1 + 8 = 9 (left: 3 9)",
                "1 * 1 = 1 (left: 1 3 8)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.0,
                0.002,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 1.5",
                "2 <- 0.4",
                "3 <- 1.5",
                "4 <- 1.5",
                "5 <- 0.4"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8) || 1 * 8 = 8 (left: 8)",
                "1 * 1 = 1 (left: 1 3 8) || 8 / 3 = 2.67 (left: 1 2.67)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8)",
                "1 * 1 = 1 (left: 1 3 8) || 3 - 1 = 2 (left: 2 8)",
                "1 * 1 = 1 (left: 1 3 8) || 8 / 3 = 2.6667 (left: 1 2.6667)",
                "3 * 1 = 3 (left: 3 1 8) || 1 + 8 = 9 (left: 3 9)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                60.0,
                0.002,
                2.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 0.4",
                "2 <- 2.2",
                "3 <- 0.0",
                "4 <- 0.4",
                "5 <- 2.2"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5)",
                "3 * 1 = 3 (left: 3 1 8) || 3 + 1 = 4 (left: 4 8)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "3 + 1 = 4 (left: 4 3 8) || 3 * 8 = 24 (left: 4 24)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.002,
                40.001,
                60.0,
                0.001
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 3.4",
                "2 <- 0.4",
                "3 <- 2.2",
                "4 <- 3.0",
                "5 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 8 / 3 = 2.66666666667 (left: 2.66666666667)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 1 = 3 (left: 3 1 8) || 8 - 1 = 7 (left: 3 7)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)"
            ],
            "Evaluation": [
                0.0,
                0.001,
                1.001,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 3.3",
                "2 <- 1.5",
                "3 <- 3.3",
                "4 <- 3.3",
                "5 <- 0.5"
            ]
        },
        "Step 5": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "3 + 1 = 4 (left: 4 3 8) || 3 * 8 = 24 (left: 4 24) || 24 - 4 = 20 (left: 20)",
                "1 * 1 = 1 (left: 1 3 8) || 3 - 1 = 2 (left: 2 8)",
                "3 + 1 = 4 (left: 4 3 8) || 3 * 8 = 24 (left: 4 24) || 4 * 6 = 24 (left: 6)",
                "3 + 1 = 4 (left: 4 3 8) || 3 * 8 = 24 (left: 4 24) || 4 * 24 = 96 (left: 96)",
                "1 + 1 = 2 (left: 2 3 8) || 2 + 3 = 5 (left: 5 8)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 3.4",
                "2 <- 1.5",
                "3 <- 3.4",
                "4 <- 2.2",
                "5 <- 3.4"
            ]
        },
        "Step 6": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 8) || 8 - 1 = 7 (left: 3 7)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "1 * 1 = 1 (left: 1 3 8) || 1 + 3 = 4 (left: 4 8)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || Possible next steps:"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.003,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 3.3",
                "2 <- 3.0",
                "3 <- 2.2",
                "4 <- 1.5",
                "5 <- 3.3"
            ]
        },
        "Step 7": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "3 + 1 = 4 (left: 4 3 8) || 3 * 8 = 24 (left: 4 24) || 24 - 4 = 20 (left: 20 4)",
                "1 * 1 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 1 + 5 = 6",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 3 8) || 8 / 3 = 2.67 (left: 1 2.67)",
                "3 + 1 = 4 (left: 4 3 8) || 3 * 8 = 24 (left: 4 24) || Possible next steps:"
            ],
            "Evaluation": [
                0.003,
                40.0,
                0.003,
                0.002,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 7.1",
                "1 <- 3.3",
                "2 <- 3.3",
                "3 <- 7.1",
                "4 <- 7.1",
                "5 <- 7.1"
            ]
        },
        "Step 8": {
            "steps": [
                "3 + 1 = 4 (left: 4 3 8) || 3 * 8 = 24 (left: 4 24) || 24 - 4 = 20 (left: 20 4) || 20 - 4 = 16 (left: 16)",
                "3 + 1 = 4 (left: 4 3 8) || 3 * 8 = 24 (left: 4 24) || 24 / 4 = 6 (left: 6)",
                "3 + 1 = 4 (left: 4 3 8) || 3 * 8 = 24 (left: 4 24) || 4 + 24 = 28 (left: 28)",
                "3 + 1 = 4 (left: 4 3 8) || 3 * 8 = 24 (left: 4 24) || 24 - 4 = 20 (left: 20 4) || 20 / 4 = 5 (left: 5)",
                "3 + 1 = 4 (left: 4 3 8) || 3 * 8 = 24 (left: 4 24) || 24 - 4 = 20 (left: 20 4) || 20 * 4 = 80 (left: 4 80)",
                "3 + 1 = 4 (left: 4 3 8) || 3 * 8 = 24 (left: 4 24) || 24 - 4 = 20 (left: 20 4) || 20 / 4 = 5 (left: 5)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.003,
                0.003,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 7.1",
                "2 <- 7.1",
                "3 <- 7.1",
                "4 <- 7.1",
                "5 <- 2.2"
            ]
        },
        "Step 9": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 8) || 8 - 3 = 5 (left:",
                "3 + 1 = 4 (left: 4 3 8) || 3 * 8 = 24 (left: 4 24) || 24 - 4 = 20 (left: 20 4) || 20 - 4 = 16 (left: 16 4)",
                "3 + 1 = 4 (left: 4 3 8) || 3 * 8 = 24 (left: 4 24) || 24 - 4 = 20 (left: 20 4) || 20 / 4 = 5 (left: 5)",
                "3 + 1 = 4 (left: 4 3 8) || 3 * 8 = 24 (left: 4 24) || 24 - 4 = 20 (left: 20 4) || 4 - 20 = -16 (left: -16)",
                "3 + 1 = 4 (left: 4 3 8) || 3 * 8 = 24 (left: 4 24) || 24 - 4 = 20 (left: 20 4) || 20 * 4 = 80 (left: 80)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || Input: 5 10"
            ]
        },
        "Input": "1 1 3 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 0
            }
        ]
    },
    "3": {
        "puzzle": "1 1 1 8",
        "Step 0": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 ",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 * 1 = 1 (left: 1 1 8)",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 + 8 = 9 (left: 1 1 9)",
                "8 / 1 = 8 (left: 1 1 8)"
            ],
            "Evaluation": [
                0.003,
                22.0,
                1.001,
                60.0,
                0.001,
                1.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.5",
                "2 <- 0.3",
                "3 <- 0.3",
                "4 <- 0.3",
                "5 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 8 - 1 = 7 (left:",
                "8 / 1 = 8 (left: 1 1 8) || 1 * 1 = 1 (left: 1 8)",
                "1 + 1 = 2 (left: 1 2 8) || 2 - 1 = 1 (left: 1 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8) || 3 + 5 = 8 (left:"
            ],
            "Evaluation": [
                1.0,
                40.0,
                21.001,
                0.003,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.4",
                "2 <- 1.4",
                "3 <- 1.4",
                "4 <- 1.4",
                "5 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "8 / 1 = 8 (left: 1 1 8) || 1 * 1 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.66667 (left: 2.66667)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 4",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || Possible next steps:",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 1.4",
                "2 <- 1.4",
                "3 <- 1.1",
                "4 <- 1.4",
                "5 <- 1.1"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.6667 (left: 2.6667)",
                "8 / 1 = 8 (left: 1 1 8) || 1 * 1 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "8 / 1 = 8 (left: 1 1 8) || 1 * 1 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.003,
                0.002,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 1.4",
                "2 <- 3.0",
                "3 <- 3.0",
                "4 <- 1.1",
                "5 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.66666666667 (left: 2.66666666667)",
                "1 + 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "8 / 1 = 8 (left: 1 1 8) || 1 * 1 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                0.002,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 3.0",
                "2 <- 3.0",
                "3 <- 1.2",
                "4 <- 3.0",
                "5 <- 1.1"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8) || 2 - 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "1 + 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "8 / 1 = 8 (left: 1 1 8) || 1 * 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.001,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 1.1",
                "2 <- 1.4",
                "3 <- 0.3",
                "4 <- 1.4",
                "5 <- 3.0"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "8 / 1 = 8 (left: 1 1 8) || 1 * 1 = 1 (left: 1 8) || 1 + 8 = 9 (left: 9)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)"
            ],
            "Evaluation": [
                0.001,
                0.001,
                0.003,
                0.001,
                0.001,
                0.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.1",
                "2 <- 3.0",
                "3 <- 3.0",
                "4 <- 3.0",
                "5 <- 0.3"
            ]
        },
        "Step 7": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 / 1 = 8 (left: 1 1 8) || 1 * 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "1 + 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 + 4 = 5",
                "1 + 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "1 + 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.0,
                0.003,
                0.0,
                60.0
            ],
            "Resampling": [
                "0 <- 7.0",
                "1 <- 7.0",
                "2 <- 7.0",
                "3 <- 1.1",
                "4 <- 1.4",
                "5 <- 7.5"
            ]
        },
        "Step 8": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 1) * (1 + 8) = 24",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 1) * (1 + 8) = 24",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 1) * (1 + 8) = 24",
                "8 / 1 = 8 (left: 1 1 8) || 1 * 1 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 4 + 6 = 10 (left: 10 9)",
                "1 + 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                0.001,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 7.0",
                "1 <- 7.0",
                "2 <- 8.0",
                "3 <- 8.2",
                "4 <- 8.2",
                "5 <- 8.2"
            ]
        },
        "Step 9": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 1) * (1 + 8) = 24",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: ((1 + 1) + 1) * 8 = 24",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 1) * (1 + 8) = 24 || Input: 3 3 5 5\nSteps:\n3 + 5 = 8 (left: 3 8 5)\n3 * 8 = 24 (left: 24 5)\n24 * 5 = 120 (left: 120)\nAnswer: (3 + 5) * 3 * 5 = 24",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 1) * (1 + 8) = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 - 3 = 13 (left: 13)\n13 + 3 = 16 (left: 16)\n16 + 16 = 32 (left: 32)\n32 - 8 = 24 (left: 24)\nAnswer: ((",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 1) * (1 + 8) = 24 || Input: 3 3 8 8\nSteps:\n3 + 3 = 6 (left: 6 8 8)\n6 * 8 = 48 (left: 48 8)\n48 - 8 = 40 (left: 40)\nAnswer: (3 + 3) * (8 - 8) = 24",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 1) * (1 + 8) = 24 || Input: 3 3 3 8\nSteps:\n3 + 3 = 6 (left: 3 6 8)\n6 * 3 = 18 (left: 8 18)\n18 + 8 = 26 (left: 26)\nAnswer: (3 + 3) * (3 * 8) = 24"
            ]
        },
        "Input": "1 1 1 8",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": 1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "4": {
        "puzzle": "6 6 6 6",
        "Step 0": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6)",
                "6 * 6 = 36 (left: 6 6 36 6)",
                "6 / 6 = 1 (left: 1 6 6)",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 / 6 = 1 (left: 1 6 6)"
            ],
            "Evaluation": [
                41.0,
                1.001,
                41.0,
                22.0,
                20.002,
                21.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.0",
                "2 <- INIT",
                "3 <- 0.5",
                "4 <- 0.0",
                "5 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6) || 6 * 12 = 72 (left: 72 6)",
                "6 + 6 = 12 (left: 6 12 6) || 6 / 12 = 0.5 (",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 / 6 = 1 (left: 1 6 6) || 1 + 6 = 7 (left: 6 6 7)",
                "6 + 6 = 12 (left: 6 12 6) || 12 - 6 = 6 (left: 6 6)",
                "6 / 6 = 1 (left: 1 6 6) || 6 * 1 = 6 (left: 6 6)"
            ],
            "Evaluation": [
                21.001,
                0.003,
                41.0,
                1.002,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 1.2",
                "2 <- 1.2",
                "3 <- 0.5",
                "4 <- 0.2",
                "5 <- 0.5"
            ]
        },
        "Step 2": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6) || Input: 72 6 6",
                "6 - 6 = 0 (left: 0 6 6) || 3 * 3 = 9 (left: 6 9)",
                "6 - 6 = 0 (left: 0 6 6) || 0 + 6 = 6 (left: 6 6)",
                "6 / 6 = 1 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6)",
                "6 / 6 = 1 (left: 1 6 6) || 1 + 6 = 7 (left: 6 7)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                22.0,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 1.2",
                "2 <- 0.2",
                "3 <- 2.5",
                "4 <- 2.2",
                "5 <- 1.4"
            ]
        },
        "Step 3": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6) || 6 + 6 = 12 (left: 12 6)",
                "6 - 6 = 0 (left: 0 6 6) || 6 - 6 = 0 (left: 0)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6) || 6 + 6 = 12 (left: 12)",
                "6 - 6 = 0 (left: 0 6 6) || 0 + 6 = 6 (left: 6 6) || 6 + 6 = 12 (left: 12)",
                "6 + 6 = 12 (left: 6 12 6) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                21.001,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 0.5",
                "2 <- 2.5",
                "3 <- 2.2",
                "4 <- 1.4",
                "5 <- 1.2"
            ]
        },
        "Step 4": {
            "steps": [
                "6 - 6 = 0 (left: 0 6 6) || 0 + 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)",
                "6 - 6 = 0 (left: 0 6 6) || 0 + 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)",
                "6 + 6 = 12 (left: 6 12 6) || 12 - 6 = 6 (left: 6 6) || 6 + 6 = 12 (left: 12)",
                "6 - 6 = 0 (left: 0 6 6) || 4 + 5 = 9 (left: 7 9"
            ],
            "Evaluation": [
                0.003,
                0.003,
                40.0,
                60.0,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.5",
                "1 <- 4.3",
                "2 <- 4.2",
                "3 <- 0.4",
                "4 <- 0.2",
                "5 <- 2.3"
            ]
        },
        "Step 5": {
            "steps": [
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)",
                "6 - 6 = 0 (left: 0 6 6) || 0 + 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 + 2 = 38",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 0 = 0 (left: 0 6)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 / 6 = 1 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6) || 3 + 9 = 12 (left:"
            ],
            "Evaluation": [
                20.0,
                0.003,
                0.003,
                40.0,
                3.0,
                1.001
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 5.3",
                "2 <- 1.2",
                "3 <- 0.4",
                "4 <- 5.3",
                "5 <- 4.2"
            ]
        },
        "Step 6": {
            "steps": [
                "6 - 6 = 0 (left: 0 6 6) || 4 / 4 =",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 0 = 0 (left: 0 6) || 0 + 6 = 6 (left: 6)",
                "6 - 6 = 0 (left: 0 6 6) || 6 / 0 is undefined",
                "6 - 6 = 0 (left: 0 6 6) || 6 / 0 = Error (division by zero is undefined)",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 0 = 0 (left: 0 6) || 6 / 0 = undefined (division by zero is undefined)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || None - 36 is the final result."
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 5.4",
                "2 <- 4.2",
                "3 <- 4.2",
                "4 <- 0.5",
                "5 <- 5.0"
            ]
        },
        "Step 7": {
            "steps": [
                "6 - 6 = 0 (left: 0 6 6) || 0 + 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || There are no possible next steps as there is only one number provided.",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6) || 6 * 6 = 36 (left: 36)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || There are no possible operations to perform on the number 36.",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 4 = 9 (left: 9)",
                "6 / 6 = 1 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.003,
                0.0,
                21.0,
                0.003
            ],
            "Resampling": [
                "0 <- 7.4",
                "1 <- 7.1",
                "2 <- 1.4",
                "3 <- 7.1",
                "4 <- 7.4",
                "5 <- 7.1"
            ]
        },
        "Step 8": {
            "steps": [
                "6 / 6 = 1 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6) || Possible next steps:",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "6 + 6 = 12 (left: 6 12 6) || 12 - 6 = 6 (left: 6 6) || 6 + 6 = 12",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6) || 6 * 6 = 36 (left: 36) || 36 + 2 = 38",
                "6 / 6 = 1 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 8.4",
                "1 <- 5.3",
                "2 <- 8.4",
                "3 <- 0.4",
                "4 <- 8.4",
                "5 <- 8.4"
            ]
        },
        "Step 9": {
            "steps": [
                "6 / 6 = 1 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 0 = 0 (left: 0 6) || 0 + 6 = 6 (left: 6)",
                "6 / 6 = 1 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 0 = 0 (left: 6 6)",
                "6 / 6 = 1 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "6 / 6 = 1 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ]
        },
        "Input": "6 6 6 6",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "5": {
        "puzzle": "1 1 2 12",
        "Step 0": {
            "steps": [
                "12 / 2 = 6 (left: 1 2 6)",
                "1 + 1 = 2 (left: 2 2 12)",
                "1 + 1 = 2 (left: 2 2 12)",
                "12 - 2 = 10 (left: 1 2 10)",
                "1 + 1 = 2 (left: 2 2 12)",
                "1 * 1 = 1 (left: 1 2 12)"
            ],
            "Evaluation": [
                0.003,
                2.001,
                0.003,
                1.002,
                1.002,
                60.0
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.5",
                "2 <- 0.5",
                "3 <- 0.5",
                "4 <- INIT",
                "5 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 12 / 1 = 12 (left: 2 12)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "1 + 1 = 2 (left: 2 2 12)",
                "1 + 1 = 2 (left: 2 2 12)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                40.0,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 0.5",
                "2 <- 0.5",
                "3 <- 1.2",
                "4 <- 1.0",
                "5 <- 0.5"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 12) || Input: 1 4 4",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 1 = 12 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 1 = 11 (left: 1 11)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                40.001,
                0.002,
                0.001,
                40.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.3",
                "2 <- 2.5",
                "3 <- 1.1",
                "4 <- 2.1",
                "5 <- 1.5"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 12 / 1 = 12 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7",
                "1 + 1 = 2 (left: 2 2 12) || 2 * 2 = 4 (left: 4 12)"
            ],
            "Evaluation": [
                0.002,
                0.0,
                0.001,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 2.1",
                "2 <- 1.2",
                "3 <- 2.2",
                "4 <- 1.2",
                "5 <- 1.3"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 1.1",
                "3 <- 2.5",
                "4 <- 2.2",
                "5 <- 1.2"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 1 = 11 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.002,
                0.001,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.5",
                "1 <- 1.1",
                "2 <- 2.2",
                "3 <- 1.1",
                "4 <- 1.1",
                "5 <- 1.0"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 12 - 1 = 11 (left: 1 11) || 9 * 3 = 27 (left: 27 27)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 - 6 = -5 (left: -5)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 1 = 12 (left: 2 12) || 12 - 2 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.0,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 1.2",
                "2 <- 2.2",
                "3 <- 2.1",
                "4 <- 1.5",
                "5 <- 2.2"
            ]
        },
        "Step 7": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 + 1 = 2 (left: 2 2 12) || 2 * 2 = 4 (left: 4 12)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 2.2",
                "2 <- 0.5",
                "3 <- 2.1",
                "4 <- 7.0",
                "5 <- 7.0"
            ]
        },
        "Step 8": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.001,
                0.001,
                41.0,
                0.002,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 8.2",
                "2 <- 8.2",
                "3 <- 8.2",
                "4 <- 8.2",
                "5 <- 8.2"
            ]
        },
        "Step 9": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7"
            ]
        },
        "Input": "1 1 2 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "6": {
        "puzzle": "1 2 2 6",
        "Step 0": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6)",
                "1 * 2 = 2 (left: 2 2 6)",
                "2 * 2 = 4 (left: 4 2 6)",
                "6 / 2 = 3 (left: 2 3 ",
                "2 * 2 = 4 (left: 4 2 6)",
                "2 * 2 = 4 (left: 1 4 6)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                1.002,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.1",
                "2 <- 0.5",
                "3 <- 0.0",
                "4 <- 0.1",
                "5 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6)",
                "1 * 2 = 2 (left: 2 2 6) || Input: 3 3 5",
                "2 * 2 = 4 (left: 1 4 6) || 1 + 4 = 5 (left: 5 6)",
                "2 / 1 = 2 (left: 2 2 6) || 4 / 2 = 2 (",
                "1 * 2 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6)",
                "2 * 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)"
            ],
            "Evaluation": [
                40.0,
                0.003,
                0.003,
                0.003,
                41.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.5",
                "2 <- 1.0",
                "3 <- 0.5",
                "4 <- 0.0",
                "5 <- 0.0"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 2 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 * 2 = 4 (left: 1 4 6) || 1 + 4 = 5 (left: 5 6)",
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "2 * 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)",
                "2 / 1 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)"
            ],
            "Evaluation": [
                0.002,
                1.001,
                0.003,
                60.0,
                41.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 2.4",
                "2 <- 2.3",
                "3 <- 0.0",
                "4 <- 1.5",
                "5 <- 0.1"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 2 = 4 (left: 1 4 6) || 1 + 4 = 5 (left: 5 6)",
                "2 / 1 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 * 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 * 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 + 1 = 25 (left: 25)",
                "1 * 2 = 2 (left: 2 2 6) || 2 + 4 = 6 (left: 4"
            ],
            "Evaluation": [
                1.002,
                0.002,
                0.001,
                0.003,
                20.001,
                0.002
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 0.0",
                "2 <- 2.4",
                "3 <- 1.5",
                "4 <- 2.4",
                "5 <- 2.3"
            ]
        },
        "Step 4": {
            "steps": [
                "2 * 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 10 + 20 = 30 (left: 30)",
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6)",
                "2 / 1 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 * 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "2 / 1 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 * 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.002,
                60.0,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 1.5",
                "2 <- 4.1",
                "3 <- 2.4",
                "4 <- 3.4",
                "5 <- 4.1"
            ]
        },
        "Step 5": {
            "steps": [
                "2 * 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 * 2) * (2 * 6) = 24",
                "2 * 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "2 / 1 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 3 + 5 = 8 (left: 7 8)",
                "2 * 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 + 1 = 25 (left: 25) || 25 * 8 = 200 (left: 8)",
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ]
        },
        "Input": "1 2 2 6",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            }
        ]
    },
    "7": {
        "puzzle": "1 1 10 12",
        "Step 0": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 10 12)",
                "1 + 1 = 2 (left: 2 10 12)",
                "1 * 10 = 10 (left: 10 1 12)",
                "1 + 1 = 2 (left: 2 10 12)",
                "12 - 10 = 2 (left: 1 2 12)"
            ],
            "Evaluation": [
                20.002,
                1.002,
                0.003,
                1.001,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.0",
                "2 <- 0.5",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 2 10 12)",
                "1 + 1 = 2 (left: 2 10 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                60.0,
                2.001,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.5",
                "2 <- 1.5",
                "3 <- 1.2",
                "4 <- 0.5",
                "5 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 1 = 11 (left: 1 11)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.5",
                "2 <- 2.5",
                "3 <- 1.5",
                "4 <- 2.4",
                "5 <- 0.5"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 12 - 1 = 11 (left: 1 11) || 1 + 11 = 12",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25) || 25 - 2 = 23 (left: 2)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25) || 25 / 2 = 12.5 (left: 12.5)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || Input: 1 1 6"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.0",
                "2 <- 2.5",
                "3 <- 1.5",
                "4 <- 1.5",
                "5 <- 1.2"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25) || 25 - 2 = 23 (left: 2)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || Possible next steps:",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.0,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 4.1",
                "2 <- 1.5",
                "3 <- 4.1",
                "4 <- 4.0",
                "5 <- 1.2"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 - 10 =",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: 1 * (1 * (10 + 12)) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 * (1 + 10)) * 12 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 * 10) + (12 - 1) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 / 10 = 0.1 (left: 0.1)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.002,
                60.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 5.4",
                "2 <- 5.3",
                "3 <- 1.2",
                "4 <- 0.5",
                "5 <- 4.0"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 * 10) + (12 - 1) = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6 24)\n6 - 3 = 3 (left: 3 24)\n3 * 24 = 72 (left: 72)\nAnswer: (3 * 8) - (6 - 3) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 * 10) + (12 - 1) = 24 || Input: 3 3 4 9\nSteps:\n3 * 4 = 12 (left: 3 9 12)\n9 - 3 = 6 (left: 6 12)\n6 * 12 = 72 (left: 72)\nAnswer: (3 * 4) * (9 - 3) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 * (1 + 10)) * 12 = 24 || Input: 3 3 8 8\nSteps:\n3 + 8 = 11 (left: 3 11 8)\n3 * 8 = 24 (left: 11 24)\nAnswer: 3 * (3 + 8) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 + (1 * (10 - 12))) * 24 = 24"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                0.002,
                60.0,
                40.001
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 6.2",
                "2 <- 2.4",
                "3 <- 5.4",
                "4 <- 5.3",
                "5 <- 5.1"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: 1 * (1 * (10 + 12)) = 24 || Input: 2 3 5 8\nSteps:\n5 * 3 = 15 (left: 2 8 15)\n15 - 8 = 7 (left: 2 7)\n2 * 7 = 14 (left: 14)\n14 + 10 = 24 (left: 24)\nAnswer: ((5 * 3) - 8) + 10 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 * (1 + 10)) * 12 = 24 || Input: 3 3 8 8\nSteps:\n3 + 8 = 11 (left: 3 11 8)\n3 * 8 = 24 (left: 11 24)\nAnswer: 3 * (3 + 8) = 24 || Input: 2 3 4 6\nSteps:\n2 * 4 = 8 (left: 3 6 8)\n8 - 6 = 2 (left: 2 3)\n2 * 3 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((2 * 4) - 6) * 3 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 * 10) + (12 - 1) = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n3 + 5 = 8 (left: 8 21)\n8 * 21 = 168 (left: 168)\n168 / 7 = 24 (left: 24)\nAnswer: ((3 * 7) / 3) * 5 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 * (1 + 10)) * 12 = 24 || Input: 3 3 4 8\nSteps:\n3 * 4 = 12 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)\n5 * 12 = 60 (left: 60)\nAnswer: (3 * 4) + (8 - 3) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: 1 * (1 * (10 + 12)) = 24 || Input: 3 3 8 9\nSteps:\n3 + 9 = 12 (left: 3 8 12)\n3 * 8 = 24 (left: 24 12)\nAnswer: (3 + 9) * 8 = 24"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.001,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 6.1",
                "2 <- 7.5",
                "3 <- 7.5",
                "4 <- 7.1",
                "5 <- 7.3"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 * 10) + (12 - 1) = 24 || Input: 3 3 4 9\nSteps:\n3 * 4 = 12 (left: 3 9 12)\n9 - 3 = 6 (left: 6 12)\n6 * 12 = 72 (left: 72)\nAnswer: (3 * 4) * (9 - 3) = 24 || Input: 2 3 6 8\nSteps:\n2 * 3 = 6 (left: 6 8)\n6 + 8 = 14 (left: 14)\n14 + 6 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((2 * 3) + 8) + 6 + 4 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 * 10) + (12 - 1) = 24 || Input: 3 3 4 9\nSteps:\n3 * 4 = 12 (left: 3 9 12)\n9 - 3 = 6 (left: 6 12)\n6 * 12 = 72 (left: 72)\nAnswer: (3 * 4) * (9 - 3) = 24 || Input: 2 3 7 8\nSteps:\n2 * 3 = 6 (left: 6 7 8)\n6 + 7 = 13 (left: 13 8)\n13 - 8 = 5 (left: 5 13)\n5 * 5 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: ((2 * 3) + 7) - ",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: 1 * (1 * (10 + 12)) = 24 || Input: 3 3 8 9\nSteps:\n3 + 9 = 12 (left: 3 8 12)\n3 * 8 = 24 (left: 24 12)\nAnswer: (3 + 9) * 8 = 24 || Input: 2 3 4 6\nSteps:\n2 * 3 = 6 (left: 4 6 6)\n4 + 6 = 10 (left: 10 6)\n10 * 6 = 60 (left: 60)\n60 / 2.5 = 24 (left: 24)\nAnswer: ((2 * 3) + 4) * 6 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: 1 * (1 * (10 + 12)) = 24 || Input: 3 3 8 9\nSteps:\n3 + 9 = 12 (left: 3 8 12)\n3 * 8 = 24 (left: 24 12)\nAnswer: (3 + 9) * 8 = 24 || Input: 2 3 6 8\nSteps:\n6 - 2 = 4 (left: 3 4 8)\n4 * 8 = 32 (left: 3 32)\n3 * 32 = 96 (left: 96)\nAnswer: (2 * (6 - 3)) * 8 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 * (1 + 10)) * 12 = 24 || Input: 3 3 8 8\nSteps:\n3 + 8 = 11 (left: 3 11 8)\n3 * 8 = 24 (left: 11 24)\nAnswer: 3 * (3 + 8) = 24 || Input: 2 3 4 6\nSteps:\n2 * 4 = 8 (left: 3 6 8)\n8 - 6 = 2 (left: 2 3)\n2 * 3 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((2 * 4) - 6) * 3 = 24 || Input: 5 6 6 7\nSteps:\n5 + 7 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 12 36)\n12 + 36 = 48 (left: 48)\nAnswer: (5 + 7) * (6 + 6) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 * 10) + (12 - 1) = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n3 + 5 = 8 (left: 8 21)\n8 * 21 = 168 (left: 168)\n168 / 7 = 24 (left: 24)\nAnswer: ((3 * 7) / 3) * 5 = 24 || Input: 2 3 7 8\nSteps:\n2 * 8 = 16 (left: 3 7 16)\n3 + 7 = 10 (left: 10 16)\n10 * 16 = 160 (left: 160)\n160 / 10 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((2 * 8) + 7) - 3 ="
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 8.2",
                "1 <- 7.3",
                "2 <- 8.4",
                "3 <- 8.5",
                "4 <- 7.0",
                "5 <- 4.1"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: 1 * (1 * (10 + 12)) = 24 || Input: 3 3 8 9\nSteps:\n3 + 9 = 12 (left: 3 8 12)\n3 * 8 = 24 (left: 24 12)\nAnswer: (3 + 9) * 8 = 24 || Input: 2 3 4 6\nSteps:\n2 * 3 = 6 (left: 4 6 6)\n4 + 6 = 10 (left: 10 6)\n10 * 6 = 60 (left: 60)\n60 / 2.5 = 24 (left: 24)\nAnswer: ((2 * 3) + 4) * 6 = 24 || Input: 5 6 7 8\nSteps:\n7 - 5 = 2 (left: 2 6 8)\n2 * 8 = 16 (left: 6 16)\n6 + 16 = 22 (left: 22)\n22 + 2 = 24 (left: 24)\nAnswer: ((7 - 5) * 8) + (6 + 16) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 * 10) + (12 - 1) = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n3 + 5 = 8 (left: 8 21)\n8 * 21 = 168 (left: 168)\n168 / 7 = 24 (left: 24)\nAnswer: ((3 * 7) / 3) * 5 = 24 || Input: 2 3 4 6\nSteps:\n3 * 6 = 18 (left: 2 4 18)\n4 + 2 = 6 (left: 6 18)\n6 * 18 = 108 (left: 108)\n108 / 4 = 27 (left: 27)\n27 - 2 = 25 (left: 25)\n25 + 4 = 29 (left: 29)\n29 - ",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 * (1 + 10)) * 12 = 24 || Input: 3 3 8 8\nSteps:\n3 + 8 = 11 (left: 3 11 8)\n3 * 8 = 24 (left: 11 24)\nAnswer: 3 * (3 + 8) = 24 || Input: 2 3 4 6\nSteps:\n2 * 4 = 8 (left: 3 6 8)\n8 - 6 = 2 (left: 2 3)\n2 * 3 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((2 * 4) - 6) * 3 = 24 || Input: 5 6 6 7\nSteps:\n5 + 7 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 12 36)\n12 + 36 = 48 (left: 48)\nAnswer: (5 + 7) * (6 + 6) = 24 || Input: 2 2 3 12\nSteps:\n3 * 2 = 6 (left: 2 6 12)\n2 + 6 = 8 (left: 8 12)\n8 * 12 = 96 (left: 96)\nAnswer: (2 + (2 * 3)) * 12 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 * 10) + (12 - 1) = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n3 + 5 = 8 (left: 8 21)\n8 * 21 = 168 (left: 168)\n168 / 7 = 24 (left: 24)\nAnswer: ((3 * 7) / 3) * 5 = 24 || Input: 2 3 7 8\nSteps:\n2 * 8 = 16 (left: 3 7 16)\n3 + 7 = 10 (left: 10 16)\n10 * 16 = 160 (left: 160)\n160 / 10 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((2 * 8) + 7) - 3 = ||  24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: 1 * (1 * (10 + 12)) = 24 || Input: 2 3 5 8\nSteps:\n5 * 3 = 15 (left: 2 8 15)\n15 - 8 = 7 (left: 2 7)\n2 * 7 = 14 (left: 14)\n14 + 10 = 24 (left: 24)\nAnswer: ((5 * 3) - 8) + 10 = 24 || Input: 3 4 5 6\nSteps:\n4 * 6 = 24 (left: 3 5 24)\n3 + 5 = 8 (left: 8 24)\n8 * 3 = 24 (left: 24)\nAnswer: (4 * 6) / (3 + 5) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 * (1 + 10)) * 12 = 24"
            ]
        },
        "Input": "1 1 10 12",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "8": {
        "puzzle": "2 2 10 10",
        "Step 0": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "2 * 2 = 4 (left: 4 10 10)"
            ],
            "Evaluation": [
                20.002,
                1.002,
                0.003,
                2.001,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.0",
                "4 <- 0.5",
                "5 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "10 / 2 = 5 (left: 2 10 ",
                "2 * 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 2.5 = 7.5 (left: 4 7.5 10)",
                "2 + 2 = 4 (left: 4 10 10)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                1.002,
                2.001,
                21.001
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 0.5",
                "2 <- 1.5",
                "3 <- 1.0",
                "4 <- 0.0",
                "5 <- 0.0"
            ]
        },
        "Step 2": {
            "steps": [
                "10 / 2 = 5 (left: 2 10  || 2 + 10 = 12 (left: 12)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left",
                "10 / 2 = 5 (left: 2 10  || 10 - 2 = 8 (left: 8) ",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 14)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.0,
                0.003,
                60.0,
                2.001
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.4",
                "2 <- 2.4",
                "3 <- 2.4",
                "4 <- 2.4",
                "5 <- 1.0"
            ]
        },
        "Step 3": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 14) || 10 * 14 = 140 (left: 14 140)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 14) || 14 / 10 = 1.4 (left: 1.4)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 14) || 10 / 14 = 0.7142857142857143 (left: 0.7142857142857143)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 14) || 10 + 14 = 24 (left: 24)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 14) || 10 / 14 = 0.7142857142857143 (left: 0.7142857142857143)",
                "10 / 2 = 5 (left: 2 10  || 10 / 2 = 5 (left: 5)"
            ],
            "Evaluation": [
                0.002,
                0.0,
                0.001,
                60.0,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 3.3",
                "2 <- 3.3",
                "3 <- 3.3",
                "4 <- 0.3",
                "5 <- 1.0"
            ]
        },
        "Step 4": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 14) || 10 + 14 = 24 (left: 24)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 14) || 10 + 14 = 24 (left: 24) || Answer: ((2 + 2) + 10) + 10 = 24",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 14) || 10 + 14 = 24 (left: 24) || Answer: ((2 + 2) + 10) + 10 = 24",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 14) || 10 + 14 = 24 (left: 24) || Answer: ((2 + 2) + 10) + 10 = 24",
                "10 / 2 = 5 (left: 2 5 10) || 5 * 2 = 10 (left: 10 10)",
                "10 / 2 = 5 (left: 2 10  || Input: 5 5"
            ]
        },
        "Input": "2 2 10 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "9": {
        "puzzle": "1 1 1 12",
        "Step 0": {
            "steps": [
                "12 - 1 = 11 (left: 1 1 11)",
                "1 + 1 = 2 (left: 1 2 12)",
                "1 * 1 = 1 (left: 1 1 12)",
                "12 - 1 = 11 (left: 1 1 11)",
                "1 + 1 = 2 (left: 1 2 12)",
                "1 / 1 = 1 (left: 1 1 12)"
            ],
            "Evaluation": [
                1.002,
                60.0,
                60.0,
                1.002,
                60.0,
                41.0
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.5",
                "2 <- 0.5",
                "3 <- 0.2",
                "4 <- 0.2",
                "5 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "1 / 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12)",
                "1 / 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 / 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 1 = 12 (left:"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.003,
                0.002,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.0",
                "2 <- 0.1",
                "3 <- 0.5",
                "4 <- 1.0",
                "5 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "1 / 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "1 / 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "1 / 1 = 1 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "1 / 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                60.0,
                0.002,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.5",
                "2 <- 0.4",
                "3 <- 2.2",
                "4 <- 2.5",
                "5 <- 2.5"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5) ",
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 2.2",
                "2 <- 2.2",
                "3 <- 2.2",
                "4 <- 3.2",
                "5 <- 2.2"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 / 6 = 0.16666666666666666 (left: 0.16666666666666666)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.002,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 2.4",
                "2 <- 2.2",
                "3 <- 0.1",
                "4 <- 2.5",
                "5 <- 3.2"
            ]
        },
        "Step 5": {
            "steps": [
                "1 / 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "1 / 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 / 1 + 1) * 12 = 24",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)"
            ]
        },
        "Input": "1 1 1 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    }
}