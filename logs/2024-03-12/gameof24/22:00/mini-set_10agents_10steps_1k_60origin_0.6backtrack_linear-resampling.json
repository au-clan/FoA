{
    "0": {
        "puzzle": "1 1 4 6",
        "Step 0": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6)",
                "4 + 1 = 5 (left: 1 5 6)",
                "6 - 4 = 2 (left: 1 2 6)",
                "6 - 4 = 2 (left: 1 2 6)",
                "4 - 1 = 3 (left: 1 3 6)",
                "6 / 4 = 1.5 (left: 1 1.5 6)",
                "1 + 4 = 5 (left: 1 5 6)",
                "6 - 1 = 5 (left: 1 4 ",
                "6 - 4 = 2 (left: 1 2 6)",
                "4 - 1 = 3 (left: 1 3 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.0,
                60.0,
                0.003,
                0.003,
                2.001,
                22.0,
                41.0,
                60.0,
                1.002,
                2.0
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.6",
                "2 <- 0.5",
                "3 <- 0.5",
                "4 <- 0.1",
                "5 <- 0.6",
                "6 <- 0.1",
                "7 <- 0.7",
                "8 <- 0.7",
                "9 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "6 / 4 = 1.5 (left: 1 1.5 6) || 6 / 1.5 = 4 (left: 1 4)",
                "1 + 4 = 5 (left: 1 5 6) || 1 * 5 = 5 (left: 5 6)",
                "6 / 4 = 1.5 (left: 1 1.5 6) || 1.5 * 6 = 9 (left: 1 9)",
                "6 / 4 = 1.5 (left: 1 1.5 6) || 6 - 1.5 = 4.5 (left: 1 4.5)",
                "4 + 1 = 5 (left: 1 5 6) || 1 * 5 = 5 (left: 5 6)",
                "1 + 4 = 5 (left: 1 5 6) || 1 - 5 = -4 (left: -4 6)",
                "4 + 1 = 5 (left: 1 5 6) || 1 + 5 = 6 (left: 6 6)",
                "6 - 1 = 5 (left: 1 4  || 1 + 4 = 5 (left: 5)",
                "6 - 1 = 5 (left: 1 4  || 4 / 1 = 4 (left: 4)",
                "4 + 1 = 5 (left: 1 5 6) || 1 * 5 = 5 (left: 5 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.002,
                41.0,
                1.002,
                1.001,
                0.002,
                0.003,
                0.002,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.0",
                "2 <- 0.7",
                "3 <- 1.0",
                "4 <- 0.7",
                "5 <- 1.2",
                "6 <- 0.1",
                "7 <- 0.5",
                "8 <- 0.6",
                "9 <- 0.7"
            ]
        },
        "Step 2": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 6) || 6 - 1 = 5 (left: 5 6)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5)",
                "6 - 1 = 5 (left: 1 4  || 1 * 4 = 4 (left: 4)",
                "6 / 4 = 1.5 (left: 1 1.5 6) || 6 / 1.5 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "6 - 1 = 5 (left: 1 4  || 4 / 1 = 4 (left: 4)",
                "6 / 4 = 1.5 (left: 1 1.5 6) || 1.5 * 6 = 9 (left: 1 9) || 1 + 9 = 10 (left: 10)",
                "4 + 1 = 5 (left: 1 5 6) || 1 + 5 = 6 (left: 6 6)",
                "6 / 4 = 1.5 (left: 1 1.5 6) || 1.5 * 6 = 9 (left: 1 9)",
                "1 + 4 = 5 (left: 1 5 6) || 5 * 1 = 5 (left: 5 6)",
                "6 - 1 = 5 (left: 1 4  || 1 * 4 = 4 (left: 4)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                41.0,
                0.003,
                0.002,
                0.002,
                0.003,
                0.003,
                41.0,
                0.0,
                0.002
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 1.0",
                "2 <- 1.2",
                "3 <- INIT",
                "4 <- 0.7",
                "5 <- 0.5",
                "6 <- 2.1",
                "7 <- 0.1",
                "8 <- 0.0",
                "9 <- 2.7"
            ]
        },
        "Step 3": {
            "steps": [
                "6 / 4 = 1.5 (left: 1 1.5 6) || 6 - 1 = 5 (left: 1 5)",
                "6 / 4 = 1.5 (left: 1 1.5 6) || 6 / 1.5 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "6 / 4 = 1.5 (left: 1 1.5 6) || 1.5 * 6 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 4 6)",
                "6 - 1 = 5 (left: 1 4  || 4 - 1 = 3 (left: 3) ",
                "6 / 4 = 1.5 (left: 1 1.5 6) || 1.5 * 1 = 1.5 (left: 1 1.5 6)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || 5 - 4 = 1 (left: 1)",
                "4 + 1 = 5 (left: 1 5 6) || 5 / 1 = 5 (left:",
                "1 * 1 = 1 (left: 1 4 6) || 1 + 4 = 5 (left: 5 6)",
                "6 / 4 = 1.5 (left: 1 1.5 6) || 1.5 * 6 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.001,
                0.002,
                0.003,
                41.0,
                0.002,
                22.0,
                0.003,
                0.001,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 2.7",
                "1 <- INIT",
                "2 <- 3.3",
                "3 <- 1.0",
                "4 <- 2.1",
                "5 <- 3.3",
                "6 <- 3.3",
                "7 <- 2.7",
                "8 <- 3.3",
                "9 <- 3.5"
            ]
        },
        "Step 4": {
            "steps": [
                "6 / 4 = 1.5 (left: 1 1.5 6) || 1.5 * 6 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "6 - 1 = 5 (left: 1 4 5)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "6 / 4 = 1.5 (left: 1 1.5 6) || 6 / 1.5 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || 5 - 4 = 1 (left: 1)",
                "1 * 1 = 1 (left: 1 4 6) || 4 + 6 = 10 (left: 1 10)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1.5 6)",
                "6 / 4 = 1.5 (left: 1 1.5 6) || 1.5 * 6 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 4 6) || Input: 10 3",
                "6 / 4 = 1.5 (left: 1 1.5 6) || 1.5 * 1 = 1.5 (left: 1 1.5 6) || 1.5 - 1 ="
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                1.002,
                0.003,
                0.002,
                0.001,
                60.0,
                0.0,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 3.3",
                "2 <- 1.2",
                "3 <- 2.7",
                "4 <- 3.3",
                "5 <- 4.5",
                "6 <- 3.3",
                "7 <- 3.0",
                "8 <- 0.1",
                "9 <- 4.5"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || 4 / 5 = 0.8 (left: 0.8)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "6 / 4 = 1.5 (left: 1 1.5 6) || 1.5 * 6 = 9 (left: 1 9) || 1 + 9 = 10 (left: 10)",
                "6 / 4 = 1.5 (left: 1 1.5 6) || 1.5 * 6 = 9 (left: 1 9) || 1 + 9 = 10 (left: 9 10)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "1 * 1 = 1 (left: 1 4 6) || 4 + 6 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 4 6) || 1 + 4 = 5 (left: 5 6)",
                "6 / 4 = 1.5 (left: 1 1.5 6) || 6 - 1 = 5 (left: 1 5) || 1 + 5 = 6",
                "4 + 1 = 5 (left: 1 5 6) || 5 * 1 = 5 (left: 5 6)",
                "1 * 1 = 1 (left: 1 4 6) || 4 + 6 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.001,
                0.003,
                0.003,
                0.003,
                0.002,
                20.001,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 4.5",
                "2 <- 5.6",
                "3 <- 5.6",
                "4 <- 1.0",
                "5 <- 1.0",
                "6 <- 2.1",
                "7 <- 2.1",
                "8 <- 1.2",
                "9 <- 0.7"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || Input: 3 5",
                "1 * 1 = 1 (left: 1 4 6) || 4 + 6 = 10 (left: 1 10) || 10 + 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 4 6) || 1 + 4 = 5 (left: 5 6) || Input: 3 9",
                "1 * 1 = 1 (left: 1 4 6) || 1 + 4 = 5 (left: 5 6) || 6 - 5 = 1 (left: 1)",
                "6 / 4 = 1.5 (left: 1 1.5 6) || 6 / 1.5 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "6 / 4 = 1.5 (left: 1 1.5 6) || 6 / 1.5 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || 4 + 5 = 9 (left: 5 9)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || 4 - 5 = -1 (left: -1)",
                "6 / 4 = 1.5 (left: 1 1.5 6) || 1.5 * 6 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "6 - 1 = 5 (left: 1 4  || 1 + 4 = 5 (left: 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.001,
                0.001,
                0.003,
                0.002,
                0.0,
                0.0,
                0.002
            ],
            "Resampling": [
                "0 <- 3.5",
                "1 <- 3.5",
                "2 <- 5.6",
                "3 <- 3.3",
                "4 <- 3.0",
                "5 <- 2.1",
                "6 <- 0.6",
                "7 <- 5.6",
                "8 <- 2.1",
                "9 <- 3.5"
            ]
        },
        "Step 7": {
            "steps": [
                "6 / 4 = 1.5 (left: 1 1.5 6) || 1.5 * 1 = 1.5 (left: 1 1.5 6) || 1 + 1.5 = 2.5 (left: 2.5 6)",
                "6 / 4 = 1.5 (left: 1 1.5 6) || 1.5 * 1 = 1.5 (left: 1 1.5 6) || 1 - 1.5 =",
                "1 * 1 = 1 (left: 1 4 6) || 1 + 4 = 5 (left: 5 6) || 5 - 6 = -1 (left: -1)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5)",
                "6 / 4 = 1.5 (left: 1 1.5 6) || 6 - 1 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || 4 * 5 = 20 (left: 20)",
                "1 + 4 = 5 (left: 1 5 6) || Possible",
                "1 * 1 = 1 (left: 1 4 6) || 1 + 4 = 5 (left: 5 6) || 5 * 6 = 30 (left: 30)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || 4 + 5 = 9 (left: 9)",
                "6 / 4 = 1.5 (left: 1 1.5 6) || 1.5 * 1 = 1.5 (left: 1 1.5 6) || 1.5 / 1 = 1.5 (left: 1.5 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.003,
                0.0,
                1.002,
                0.002,
                0.003,
                0.003,
                0.002,
                0.0,
                0.0
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 3.0",
                "2 <- 4.5",
                "3 <- 0.4",
                "4 <- 4.5",
                "5 <- 2.1",
                "6 <- 3.3",
                "7 <- 0.0",
                "8 <- 5.6",
                "9 <- 5.6"
            ]
        },
        "Step 8": {
            "steps": [
                "6 / 4 = 1.5 (left: 1 1.5 6) || 1.5 * 6 = 9 (left: 1 9) || 1 + 9 = 10 (left: 10)",
                "6 / 4 = 1.5 (left: 1 1.5 6) || 6 - 1 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 4 6) || 4 + 6 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "4 - 1 = 3 (left: 1 3 6) || 1 * 3 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 4 6) || 4 + 6 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || 5 / 4 = 1.25 (left: 1.25)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6)",
                "1 * 1 = 1 (left: 1 4 6) || 1 + 4 = 5 (left: 5 6) || 5 + 6 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 4 6) || 1 + 4 = 5 (left: 5 6) || 5 + 6 = 11 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                0.002,
                0.003,
                0.003,
                0.002,
                40.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 8.7",
                "1 <- 1.0",
                "2 <- 8.7",
                "3 <- 7.0",
                "4 <- 2.7",
                "5 <- 8.7",
                "6 <- 8.7",
                "7 <- 7.0",
                "8 <- 8.7",
                "9 <- 8.7"
            ]
        },
        "Step 9": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "6 / 4 = 1.5 (left: 1 1.5 6) || 6 / 1.5 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "6 / 4 = 1.5 (left: 1 1.5 6) || 1.5 * 1 = 1.5 (left: 1 1.5 6) || 1 + 1.5 = 2.5 (left: 2.5 6) || Possible next steps:",
                "6 / 4 = 1.5 (left: 1 1.5 6) || 1.5 * 6 = 9 (left: 1 9) || 1 + 9 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "6 / 4 = 1.5 (left: 1 1.5 6) || 1.5 * 1 = 1.5 (left: 1 1.5 6) || 1 + 1.5 = 2.5 (left: 2.5 6) || 6 * 2.5 = 15",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)"
            ],
            "Pruning": []
        },
        "Input": "1 1 4 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1": {
        "puzzle": "1 1 11 11",
        "Step 0": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11)",
                "1 * 1 = 1 (left: 1 11 11)",
                "11 - 1 = 10 (left: 1 10 11)",
                "11 / 1 = 11 (left: 1 11 ",
                "1 - 1 = 0 (left: 0 11 11)",
                "11 - 1 = 10 (left: 1 10 11)",
                "11 - 1 = 10 (left: 1 11 10)",
                "11 - 1 = 10 (left: 1 11 10)",
                "11 - 1 = 10 (left: 1 10 11)",
                "11 + 1 = 12 (left: 1 11 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                1.002,
                1.002,
                40.0,
                1.002,
                1.002,
                2.001,
                2.001,
                2.001,
                21.001
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.3",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 0.1",
                "8 <- 0.3",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "11 / 1 = 11 (left: 1 11  || 11 - 1 = 10 (left: 10)",
                "11 / 1 = 11 (left: 1 11  || 1 + 11 = 12 (left: 12)",
                "11 - 1 = 10 (left: 1 10 11)",
                "1 + 1 = 2 (left: 2 11 11)",
                "11 - 1 = 10 (left: 1 10 11)",
                "1 - 1 = 0 (left: 0 11 11)",
                "11 + 1 = 12 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 11 11) || 1 + 11 = 12 (left: 11 12)",
                "11 / 1 = 11 (left: 1 11  || 11 * 1 = 11 (left: 11)",
                "11 / 1 = 11 (left: 1 11  || 11 - 1 = 10 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                1.002,
                20.002,
                1.002,
                1.002,
                41.0,
                0.002,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 1.6",
                "2 <- 0.3",
                "3 <- 1.6",
                "4 <- 1.6",
                "5 <- 0.3",
                "6 <- INIT",
                "7 <- 1.6",
                "8 <- 0.9",
                "9 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "11 / 1 = 11 (left: 1 11  || Possible next steps:",
                "11 + 1 = 12 (left: 1 11 12) || 12 * 1 = 12 (left:",
                "11 + 1 = 12 (left: 1 11 12) || 11 * 1 = 11 (left: 11 12)",
                "11 / 1 = 11 (left: 1 11  || 1 + 11 = 12 (left: 12)",
                "1 * 1 = 1 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 1 12)",
                "1 + 1 = 2 (left: 2 11 11) || 11 - 2 = "
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                1.002,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.6",
                "2 <- 1.6",
                "3 <- 0.3",
                "4 <- 0.3",
                "5 <- INIT",
                "6 <- 1.3",
                "7 <- 0.9",
                "8 <- 0.6",
                "9 <- 0.3"
            ]
        },
        "Step 3": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 * 1 = 11 (left: 11 12)",
                "11 / 1 = 11 (left: 1 11  || 1 * 11 = 11 (left: 11)",
                "11 / 1 = 11 (left: 1 11  || 1 * 11 = 11 (left: 11)",
                "1 + 11 = 12 (left: 1 11 12)",
                "1 + 1 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 - 1 = 10 (left: 1 11 10) || 11 - 1 = 10 (left: 10 10)",
                "11 / 1 = 11 (left: 1 11  || 11 - 1 = 10 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                0.003,
                0.003,
                0.001,
                0.002,
                41.0,
                60.0,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 3.5",
                "1 <- 3.5",
                "2 <- 1.6",
                "3 <- 1.6",
                "4 <- 3.6",
                "5 <- 3.5",
                "6 <- 3.5",
                "7 <- 3.6",
                "8 <- 3.6",
                "9 <- 3.6"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 11 = 12 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "1 + 11 = 12 (left: 1 11 12) || 11 * 1 = 11 (left:",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "1 + 1 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 + 13 = 24 (left: 24)",
                "1 + 11 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11)",
                "1 + 11 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11)",
                "1 + 1 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 + 13 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 / 13 \u2248 0.846 (left: 0.846)",
                "1 + 1 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 / 13 \u2248 0.84615384615 (left: 0.84615384615)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.0,
                0.003,
                0.002,
                40.0,
                20.001,
                40.001,
                60.0,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 3.5",
                "2 <- 3.5",
                "3 <- 4.7",
                "4 <- 4.5",
                "5 <- 4.4",
                "6 <- 4.7",
                "7 <- 4.7",
                "8 <- 3.6",
                "9 <- 3.5"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((1 + 1) + 11) + 11 = 24",
                "1 + 11 = 12 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "1 + 11 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "1 + 1 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((1 + 1) + 11) + 11 = 24",
                "1 + 11 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "1 + 1 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((1 + 1) + 11) + 11 = 24",
                "1 + 1 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((1 + 1) + 11) + 11 = 24",
                "1 + 1 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((1 + 1) + 11) + 11 = 24",
                "1 + 1 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 + 11 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)"
            ]
        },
        "Input": "1 1 11 11",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "2": {
        "puzzle": "1 1 3 8",
        "Step 0": {
            "steps": [
                "1 + 1 = 2 (left: 2 3 8)",
                "3 + 1 = 4 (left: 1 4 8)",
                "3 * 1 = 3 (left: 3 1 8)",
                "1 + 1 = 2 (left: 2 3 8)",
                "3 + 1 = 4 (left: 4 3 8)",
                "1 + 1 = 2 (left: 2 3 8)",
                "8 - 3 = 5 (left: 1 5 8)",
                "1 * 1 = 1 (left: 1 3 8)",
                "3 + 1 = 4 (left: 1 4 8)",
                "3 + 1 = 4 (left: 1 4 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                20.002,
                60.0,
                1.002,
                3.0,
                0.003,
                2.0,
                60.0,
                1.002,
                1.001
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- INIT",
                "2 <- 0.2",
                "3 <- 0.2",
                "4 <- 0.2",
                "5 <- 0.2",
                "6 <- 0.1",
                "7 <- 0.2",
                "8 <- 0.1",
                "9 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 8) || 3 - 1 = 2 (left: 2 8)",
                "3 * 1 = 3 (left: 3 3 ",
                "3 * 1 = 3 (left: 3 1 8) || 8 - 1 = 7 (left: 3 7)",
                "3 * 1 = 3 (left: 3 1 8) || 1 * 3 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 3 1 8) || 1 + 8 = 9 (left: 3 9)",
                "3 * 1 = 3 (left: 3 1 8) || 1 * 8 = 8 (left: 3 8)",
                "3 + 1 = 4 (left: 1 4 8) || 4 * 1 = 4 (left: 4 8)",
                "3 * 1 = 3 (left: 3 1 8) || 3 + 1 = 4 (left: 4 8)",
                "3 + 1 = 4 (left: 1 4 8) || 4 * 1 = 4 (left: 4 8)",
                "3 + 1 = 4 (left: 1 4 8) || Input: 3 9"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                20.0,
                0.0,
                60.0,
                0.003,
                60.0,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.5",
                "2 <- 0.2",
                "3 <- 0.2",
                "4 <- 1.1",
                "5 <- INIT",
                "6 <- 1.3",
                "7 <- 1.5",
                "8 <- 1.5",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "3 * 1 = 3 (left: 3 3  || 3 * 3 = 9 (left: 9)",
                "3 * 1 = 3 (left: 3 1 8) || 1 * 8 = 8 (left: 3 8) || Input: 5 5",
                "3 * 1 = 3 (left: 3 1 8) || 8 - 1 = 7 (left: 3 7)",
                "3 * 1 = 3 (left: 3 1 8) || 8 / 1 = 8 (left: 3 8)",
                "3 * 1 = 3 (left: 3 3  || 3 - 3 = 0 (left: 0)",
                "3 + 1 = 4 (left: 1 4 8)",
                "3 * 1 = 3 (left: 3 1 8) || 1 * 3 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "3 * 1 = 3 (left: 3 1 8) || 1 * 8 = 8 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "3 * 1 = 3 (left: 3 1 8) || 1 * 8 = 8 (left: 3 8) || 3 + 8 = 11 (left: 8 11)",
                "8 - 1 = 7 (left: 1 3 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.003,
                20.0,
                60.0,
                0.002,
                20.001,
                0.001,
                0.003,
                2.001,
                3.0
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 1.5",
                "2 <- INIT",
                "3 <- 1.5",
                "4 <- 2.3",
                "5 <- 2.9",
                "6 <- 0.7",
                "7 <- 1.5",
                "8 <- 0.1",
                "9 <- 0.2"
            ]
        },
        "Step 3": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 8) || 8 / 1 = 8 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "3 * 1 = 3 (left: 3 1 8) || 1 * 8 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 - 3 = 5 (left: 1 3 5)",
                "3 * 1 = 3 (left: 3 1 8) || 1 * 8 = 8 (left: 3 8) || 3 * 8 = 24 (left: 8 24)",
                "3 * 1 = 3 (left: 3 1 8) || 8 / 1 = 8 (left: 3 8) || 10 / 5 = 2 (left: 2)",
                "8 - 1 = 7 (left: 1 3 7) || 3 * 7 = 21 (left: 1 21)",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 3 1 8) || 1 * 8 = 8 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "3 + 1 = 4 (left: 1 4 8) || 1 + 4 = 5 (left: 5 8)",
                "3 * 1 = 3 (left: 3 1 8) || 3 + 1 = 4 (left: 4 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                60.0,
                1.002,
                0.003,
                0.001,
                1.001,
                60.0,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 3.6",
                "2 <- 1.5",
                "3 <- 3.1",
                "4 <- 3.6",
                "5 <- 2.2",
                "6 <- 3.6",
                "7 <- 2.3",
                "8 <- 3.1",
                "9 <- 2.2"
            ]
        },
        "Step 4": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 8) || 1 * 8 = 8 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "3 * 1 = 3 (left: 3 1 8) || 1 * 8 = 8 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "3 * 1 = 3 (left: 3 1 8) || 1 * 8 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (8 * 1) = 24",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "3 * 1 = 3 (left: 3 1 8) || 8 - 1 = 7 (left: 3 7) || 9 / 4 = 2.25 (left: 2",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 1 = 3 (left: 3 1 8) || 8 / 1 = 8 (left: 3 8) || 8 / 3 \u2248 2.67 (left: 2.67)",
                "3 * 1 = 3 (left: 3 1 8) || 1 * 8 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (8 * 1) = 24",
                "3 * 1 = 3 (left: 3 1 8) || 8 - 1 = 7 (left: 3 7) || Input: 5 9"
            ]
        },
        "Input": "1 1 3 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "3": {
        "puzzle": "1 1 1 8",
        "Step 0": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8)",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 + 1 = 2 (left: 2 1 8)",
                "1 + 1 = 2 (left: 2 1 8)",
                "1 + 1 = 2 (left: 2 1 8)",
                "8 / 1 = 8 (left: 1 1 8)",
                "1 / 1 = 1 (left: 1 1 8)",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 / 1 = 1 (left: 1 1 8)",
                "1 + 1 = 2 (left: 1 2 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                41.0,
                60.0,
                60.0,
                41.0,
                2.001,
                1.002,
                41.0,
                1.001,
                2.001
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.3",
                "2 <- 0.1",
                "3 <- 0.2",
                "4 <- 0.7",
                "5 <- 0.7",
                "6 <- 0.0",
                "7 <- 0.0",
                "8 <- INIT",
                "9 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 8) || 1 / 8 = 0.125 (left:",
                "1 + 1 = 2 (left: 2 1 8) || 2 + 1 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)",
                "1 + 1 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6)",
                "1 + 1 = 2 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "8 / 1 = 8 (left: 1 1 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 / 1 = 2 (left: 2 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                1.001,
                40.0,
                60.0,
                0.002,
                60.0,
                0.003,
                2.0,
                0.001
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 0.7",
                "2 <- 1.3",
                "3 <- 1.4",
                "4 <- 1.1",
                "5 <- 0.3",
                "6 <- 0.0",
                "7 <- 1.6",
                "8 <- 0.3",
                "9 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 8) || 2 + 1 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "1 + 1 = 2 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 1 + 8 = 9 (left: 8 9)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || Input: 4 9",
                "1 + 1 = 2 (left: 2 1 8) || 2 + 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 1 8) || 8 / 2 = 4 (left: 4 8)",
                "1 + 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "1 + 1 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "1 + 1 = 2 (left: 2 1 8) || 8 / 1 = 8 (left: 2 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                1.001,
                0.003,
                0.003,
                60.0,
                0.003,
                41.0,
                0.003,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 1.6",
                "2 <- 0.2",
                "3 <- 1.4",
                "4 <- 2.6",
                "5 <- 1.4",
                "6 <- 0.2",
                "7 <- 0.4",
                "8 <- 1.1",
                "9 <- 2.6"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 + 1 = 2 (left: 2 1 8) || 1 + 8 = 9 (left: 2 9)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 + 1 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 * 1 = 2 (left: 2 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 + 1 = 3 (left: 3 8) || 3 + 8 = 11 (left: 8 11)",
                "1 + 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.001,
                0.0,
                60.0,
                0.001,
                0.002,
                60.0,
                0.002,
                3.0,
                0.001
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 3.6",
                "2 <- 2.4",
                "3 <- INIT",
                "4 <- 1.6",
                "5 <- 1.3",
                "6 <- 3.3",
                "7 <- 3.3",
                "8 <- 0.7",
                "9 <- 1.6"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 8) || 2 + 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: ((1 + 1) + 1) * 8 = 24",
                "1 + 1 = 2 (left: 2 1 8) || 2 + 1 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 1 8) || 2 + 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 1 + 1) * 8 = 24",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 + 1 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: ((1 + 1) + 1) * 8 = 24",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: ((1 + 1) + 1) * 8 = 24",
                "1 + 1 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6)",
                "1 + 1 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)"
            ]
        },
        "Input": "1 1 1 8",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "4": {
        "puzzle": "6 6 6 6",
        "Step 0": {
            "steps": [
                "6 + 6 = 12 (left: 6 6 12)",
                "6 / 6 = 1 (left: 6 6 1 6)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 + 6 = 12 (left: 6 6 12)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 / 6 = 1 (left: 1 6 6)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 - 6 = 0 (left: 0 6 6 6)",
                "6 / 6 = 1 (left: 6 6 1)",
                "6 / 6 = 1 (left: 1 6 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                41.0,
                2.001,
                60.0,
                60.0,
                21.001,
                41.0,
                40.001,
                2.001,
                2.001,
                60.0
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 0.4",
                "2 <- 0.9",
                "3 <- 0.5",
                "4 <- 0.5",
                "5 <- 0.1",
                "6 <- 0.9",
                "7 <- INIT",
                "8 <- 0.2",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6)",
                "6 - 6 = 0 (left: 0 6 6) || Input: 1 2 3 4",
                "6 / 6 = 1 (left: 1 6 6) || 6 - 1 = 5 (left: 1 5 ",
                "6 / 6 = 1 (left: 1 6 6) || 1 * 6 = 6 (left: 6 6)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 / 6 = 1 (left: 6 6 1 6) || 6 - 1 = 5 (left: 5 6 6)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36)",
                "6 + 6 = 12 (left: 6 6 12) || 6 * 6 = 36 (left: 6 12 36)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                20.002,
                1.002,
                41.0,
                40.001,
                41.0,
                60.0,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.4",
                "2 <- 1.6",
                "3 <- INIT",
                "4 <- 0.3",
                "5 <- INIT",
                "6 <- 0.4",
                "7 <- 1.6",
                "8 <- 0.4",
                "9 <- 1.5"
            ]
        },
        "Step 2": {
            "steps": [
                "6 - 6 = 0 (left: 0 6 6)",
                "6 - 6 = 0 (left: 0 6 6) || 6 - 0 = 6 (left: 6 6)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6) || 6 + 6 = 12 (left: 12)",
                "6 + 6 = 12 (left: 6 6 12)",
                "6 + 6 = 12 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 - 6 = 0 (left: 0 6 6) || 5 + 7 = 12 (left: 1",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "6 - 6 = 0 (left: 0 6 6) || 6 - 0 = 6 (left: 6 6)",
                "6 / 6 = 1 (left: 6 6 1 6) || 6 - 1 = 5 (left: 5 6 6) || 5 + 6 = 11 (left: 6 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                41.0,
                1.002,
                0.001,
                60.0,
                40.001,
                41.0,
                0.003,
                0.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 2.0",
                "2 <- 1.7",
                "3 <- 1.3",
                "4 <- 2.0",
                "5 <- 0.9",
                "6 <- 0.6",
                "7 <- 2.5",
                "8 <- 2.5",
                "9 <- 2.3"
            ]
        },
        "Step 3": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 / 0 = undefined (left: 0 36)",
                "6 - 6 = 0 (left: 0 6 6) || 0 + 6 = 6 (left: 6 6)",
                "6 - 6 = 0 (left: 0 6 6) || 0 + 6 = 6 (left: 6 6)",
                "6 / 6 = 1 (left: 1 6 6) || 1 * 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)",
                "6 - 6 = 0 (left: 0 6 6) || Input: 5 5 10",
                "6 / 6 = 1 (left: 1 6 6) || 1 + 6 = 7 (left: 6 6 7)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36)",
                "6 + 6 = 12 (left: 6 6 12) || 12 - 6 = 6 (left: 6 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                40.001,
                0.002,
                60.0,
                0.003,
                3.0,
                40.001,
                40.001,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 3.7",
                "1 <- 1.3",
                "2 <- 1.6",
                "3 <- 3.8",
                "4 <- 3.8",
                "5 <- 2.3",
                "6 <- INIT",
                "7 <- 3.3",
                "8 <- 3.8",
                "9 <- 0.0"
            ]
        },
        "Step 4": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "6 / 6 = 1 (left: 1 6 6) || 1 * 6 = 6 (left: 6 6) || 6 + 6 = 12 (left: 12)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || Input: 3 9 27",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "6 + 6 = 12 (left: 6 6 12) || 12 - 6 = 6 (left: 6 6)",
                "6 + 6 = 12 (left: 6 6 12)",
                "6 / 6 = 1 (left: 1 6 6) || 1 * 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 + 2 = 38",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 + 36 = 37 (left: 37)",
                "6 + 6 = 12 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.0,
                0.002,
                0.003,
                0.003,
                60.0,
                41.0,
                60.0,
                0.003,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 4.5",
                "1 <- 2.0",
                "2 <- 0.5",
                "3 <- 3.3",
                "4 <- 2.5",
                "5 <- 3.8",
                "6 <- 3.0",
                "7 <- 3.0",
                "8 <- 1.5",
                "9 <- 2.4"
            ]
        },
        "Step 5": {
            "steps": [
                "6 + 6 = 12 (left: 6 6 12) || 12 - 6 = 6 (left: 6 6) || 6 + 6 = 12 (left: 12)",
                "6 - 6 = 0 (left: 0 6 6) || 6 + 6 = 12 (left: 0 12)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6)",
                "6 / 6 = 1 (left: 1 6 6) || 1 * 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 6 = 6 (left: 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 / 0 = undefined (left: 0 36) || 0 + 36 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 / 0 = undefined (left: 0 36) || 36 / 0 = undefined (left: 0 36)",
                "6 / 6 = 1 (left: 6 6 1 6) || 6 - 1 = 5 (left: 5 6 6) || 6 / 5 = 1.2 (left: 1.2 6)",
                "6 + 6 = 12 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1 12)"
            ],
            "Pruning": [
                "3<-4.0",
                "6<-3.7"
            ],
            "Evaluation": [
                0.003,
                0.0,
                20.002,
                40.0,
                40.001,
                0.003,
                60.0,
                20.002,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 2.3",
                "2 <- 1.7",
                "3 <- 2.0",
                "4 <- 5.3",
                "5 <- 4.0",
                "6 <- 4.6",
                "7 <- 0.9",
                "8 <- 4.4",
                "9 <- 4.5"
            ]
        },
        "Step 6": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 - 0 = 36 (left: 0)",
                "6 + 6 = 12 (left: 6 6 12) || 12 / 6 = 2 (left: 6 2)",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 0 = 0 (left: 6 6)",
                "6 - 6 = 0 (left: 0 6 6) || Possible next steps:",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || There is only one number given (36), so there are no possible next steps to compute.",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 12 = 3 (left: 3)",
                "6 + 6 = 12 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12)",
                "6 / 6 = 1 (left: 1 6 6) || 6 + 1 = 7 (left: 6 7)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "6 + 6 = 12 (left: 6 6 12) || 12 - 6 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)"
            ],
            "Pruning": [
                "5<-0.3"
            ],
            "Evaluation": [
                0.003,
                1.002,
                1.0,
                0.003,
                0.003,
                60.0,
                41.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.5",
                "1 <- 3.7",
                "2 <- 5.2",
                "3 <- 4.0",
                "4 <- 3.7",
                "5 <- 4.6",
                "6 <- 5.2",
                "7 <- 2.4",
                "8 <- 6.5",
                "9 <- 6.5"
            ]
        },
        "Step 7": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6) || 6 + 6 = 12 (left: 12)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 3 = 12 (left: 12)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 125 / 25 =",
                "6 + 6 = 12 (left: 6 6 12) || 12 - 6 = 6 (left: 6 12)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "6 + 6 = 12 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24",
                "6 + 6 = 12 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12)",
                "6 + 6 = 12 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12)"
            ],
            "Pruning": [
                "3<-6.5"
            ],
            "Evaluation": [
                20.001,
                0.003,
                0.003,
                60.0,
                0.003,
                0.003,
                0.003,
                40.001,
                60.0,
                1.002
            ],
            "Resampling": [
                "0 <- 7.7",
                "1 <- 5.4",
                "2 <- 7.7",
                "3 <- 7.3",
                "4 <- 5.4",
                "5 <- 7.3",
                "6 <- 5.3",
                "7 <- 3.1",
                "8 <- 7.7",
                "9 <- 5.6"
            ]
        },
        "Step 8": {
            "steps": [
                "6 + 6 = 12 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 12 = 144 (left: 2 24 144)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "6 + 6 = 12 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 24 0)",
                "6 + 6 = 12 (left: 6 6 12) || 12 - 6 = 6 (left: 6",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 + 36 = 37 (left: 37)",
                "6 + 6 = 12 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 - 2 = 34 (left",
                "6 - 6 = 0 (left: 0 6 6) || 0 + 6 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "6 + 6 = 12 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 12 = 144 (left: 24 144)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.0,
                20.0,
                60.0,
                0.003,
                0.003,
                60.0,
                0.003,
                0.003,
                40.001,
                40.0
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 8.0",
                "2 <- 7.8",
                "3 <- 5.6",
                "4 <- 0.9",
                "5 <- 8.9",
                "6 <- 7.8",
                "7 <- 1.7",
                "8 <- 7.7",
                "9 <- 6.6"
            ]
        },
        "Step 9": {
            "steps": [
                "6 - 6 = 0 (left: 0 6 6) || 0 + 6 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "6 + 6 = 12 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 12 = 144 (left: 2 24 144) || 24 * 6 = 144 (left: 2 144)",
                "6 + 6 = 12 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36) || None, as there is only one number provided.",
                "6 + 6 = 12 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "6 - 6 = 0 (left: 0 6 6) || 5 - 3 = 2 (left: 2",
                "6 + 6 = 12 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 12 = 144 (left: 24 144)",
                "6 + 6 = 12 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12) || 36 * 12 = 432 (left: 432)"
            ],
            "Pruning": []
        },
        "Input": "6 6 6 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "5": {
        "puzzle": "1 1 2 12",
        "Step 0": {
            "steps": [
                "12 / 2 = 6 (left: 1 2 6)",
                "1 + 1 = 2 (left: 2 2 12)",
                "1 + 1 = 2 (left: 2 2 12)",
                "12 - 2 = 10 (left: 1 2 10)",
                "1 + 1 = 2 (left: 2 2 12)",
                "1 * 1 = 1 (left: 1 2 12)",
                "12 - 2 = 10 (left: 1 2 10)",
                "2 * 1 = 2 (left: 2 2 12)",
                "1 + 1 = 2 (left: 2 2 12)",
                "1 + 1 = 2 (left: 2 2 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                40.001,
                21.001,
                1.002,
                1.002,
                60.0,
                1.002,
                41.0,
                22.0,
                20.002
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.8",
                "2 <- 0.1",
                "3 <- 0.8",
                "4 <- 0.5",
                "5 <- 0.5",
                "6 <- 0.7",
                "7 <- 0.5",
                "8 <- 0.1",
                "9 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 12) || 12 * 2 = 24 (left: 2 24)",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12)",
                "1 + 1 = 2 (left: 2 2 12) || 2 * 2 = 4 (left: 4 12)",
                "1 + 1 = 2 (left: 2 2 12) || 12 / 2 = 6 (left: 2 6)",
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "2 * 1 = 2 (left: 2 2 12) || 2 + 2 = 4 (left: 4 12)",
                "1 * 1 = 1 (left: 1 2 12) || 2 + 1 = 3 (left: 3 12)",
                "1 + 1 = 2 (left: 2 2 12) || 2 * 12 = 24 (left: 2 24)",
                "1 + 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                40.001,
                0.003,
                0.003,
                20.002,
                20.002,
                0.002,
                20.002,
                0.003,
                21.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 0.8",
                "2 <- 0.2",
                "3 <- 0.7",
                "4 <- 0.5",
                "5 <- 1.4",
                "6 <- 1.4",
                "7 <- 0.1",
                "8 <- 0.2",
                "9 <- 1.9"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36)",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 12)",
                "1 + 1 = 2 (left: 2 2 12) || 12 / 2 = 6 (left: 2 6)",
                "2 * 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10)",
                "1 * 1 = 1 (left: 1 2 12) || 2 - 1 = 1 (left:",
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12) || 12 - 3 = 9 (left: 3 9)",
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36)",
                "1 + 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10)",
                "1 + 1 = 2 (left: 2 2 12) || 2 * 2 = 4 (left: 4 4 12)",
                "1 + 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10) || 10 - 2 = 8 (left: 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.0,
                0.002,
                1.0,
                3.0,
                20.0,
                0.003,
                20.0,
                3.0,
                22.0,
                0.001
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.9",
                "2 <- 1.9",
                "3 <- 0.7",
                "4 <- 0.2",
                "5 <- 1.1",
                "6 <- 2.8",
                "7 <- 2.0",
                "8 <- 0.2",
                "9 <- 0.5"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4)",
                "1 + 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10) || 10 / 2 = 5 (left: 5)",
                "1 + 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10) || 10 - 2 = 8 (left: 2 8)",
                "2 * 1 = 2 (left: 2 2 12) || 12 + 2 = 14 (left: 2 14)",
                "1 + 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10 12)",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "1 + 1 = 2 (left: 2 2 12) || 2 * 2 = 4 (left: 4 4 12) || 4 / 4 = 1 (left: 1 12)",
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 can be divided by 2 to get 18 (left: 18)",
                "1 + 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 1 = 12 (left: 2 12)"
            ],
            "Pruning": [
                "7<-0.8"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                21.0,
                0.002,
                1.002,
                1.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.5",
                "2 <- 0.9",
                "3 <- 2.0",
                "4 <- 2.3",
                "5 <- 3.9",
                "6 <- 0.7",
                "7 <- 3.9",
                "8 <- 2.8",
                "9 <- 3.9"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "1 + 1 = 2 (left: 2 2 12) || 12 / 2 = 6 (left: 2 6)",
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 / 2 = 18",
                "2 * 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10) || 10 - 2 = 8 (left: 8)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 1 = 12 (left: 2 12) || 2 + 12 = 14",
                "2 * 1 = 2 (left: 2 2 12) || 2 + 2 = 4 (left: 4 12)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 1 = 12 (left: 2 12) || 2 + 12 = 14",
                "1 + 1 = 2 (left: 2 2 12) || 2 * 2 = 4 (left: 4 4 12) || 4 + 4 = 8 (left: 8 12)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 1 = 12 (left: 2 12) || 12 / 2 = 6 (left: 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                60.0,
                0.003,
                0.003,
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- INIT",
                "2 <- 1.7",
                "3 <- 3.9",
                "4 <- 4.1",
                "5 <- 4.0",
                "6 <- 0.0",
                "7 <- 4.0",
                "8 <- 2.8",
                "9 <- 3.9"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "12 / 2 = 6 (left: 1 2 6)",
                "1 * 1 = 1 (left: 1 2 12) || 2 + 1 = 3 (left: 3 12) || 3 + 12 = 15 (left: 15)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 1 = 12 (left: 2 12) || 12 - 2 = 10 (left: 2 10)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "12 / 2 = 6 (left: 1 2 6) || 1 * 2 = 2 (left: 2 6)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 2 12) || 2 * 2 = 4 (left: 4 4 12) || 12 - 4 = 8 (left: 4 8)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                2.001,
                0.002,
                3.0,
                40.0,
                60.0,
                0.002,
                60.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 5.9",
                "1 <- 1.9",
                "2 <- 5.9",
                "3 <- 4.0",
                "4 <- 5.7",
                "5 <- 5.4",
                "6 <- 5.9",
                "7 <- 5.9",
                "8 <- 2.0",
                "9 <- 5.4"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 12 / 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (2 * 12) = 24",
                "1 + 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10) || 10 - 2 = 8 (left: 8)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (12 / 2) = 24",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 * 1) * (2 * 12) = 24",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (1 * 1) * (2 * 12) = 24",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (12 / 2) = 24",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (12 / 1) = 24",
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || There are no possible next steps for the input 36 as there are no more numbers provided to perform operations with.",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (1 * 1) * (2 * 12) = 24"
            ]
        },
        "Input": "1 1 2 12",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "6": {
        "puzzle": "1 2 2 6",
        "Step 0": {
            "steps": [
                "2 * 2 = 4 (left: 1 4 ",
                "6 / 2 = 3 (left: 1 2 3)",
                "2 * 2 = 4 (left: 1 4 6)",
                "6 - 1 = 5 (left: 2 5 ",
                "2 * 2 = 4 (left: 4 6)",
                "2 * 2 = 4 (left: 4 6)",
                "6 - 2 = 4 (left: 1 4 6)",
                "6 / 2 = 3 (left: 2 3 4)",
                "1 + 2 = 3 (left: 2 3 6)",
                "1 + 2 = 3 (left: 2 3 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                60.0,
                21.0,
                40.0,
                60.0,
                60.0,
                60.0,
                21.001,
                21.001
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 0.4",
                "2 <- 0.7",
                "3 <- INIT",
                "4 <- 0.2",
                "5 <- 0.6",
                "6 <- 0.5",
                "7 <- 0.5",
                "8 <- 0.4",
                "9 <- 0.6"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 2 = 3 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6)",
                "2 * 2 = 4 (left: 4 6) || 10 + 3 = 13 (left: 13 5 7)",
                "6 / 2 = 3 (left: 2 3 4) || 2 + 3 = 5 (left: 4 5)",
                "6 - 2 = 4 (left: 2 4 6)",
                "2 * 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "2 * 2 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "2 * 2 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 1 = "
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                2.0,
                2.001,
                1.002,
                0.003,
                60.0,
                60.0,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 0.4",
                "2 <- 1.6",
                "3 <- 1.5",
                "4 <- 1.5",
                "5 <- 0.7",
                "6 <- 1.6",
                "7 <- 1.6",
                "8 <- 0.2",
                "9 <- 1.5"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 2) * (2 * 6) = 24",
                "2 * 2 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 - 24 = 0 (left: 0)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "6 / 2 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6)",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 2) * (2 * 6) = 24",
                "2 * 2 = 4 (left: 1 4 6) || 4 - 1 = 3 (left: 3 6)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.001,
                0.002,
                60.0,
                0.002,
                60.0,
                40.001,
                60.0,
                60.0,
                1.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.7",
                "1 <- 2.9",
                "2 <- 2.7",
                "3 <- 2.7",
                "4 <- 2.9",
                "5 <- 2.7",
                "6 <- 2.2",
                "7 <- 2.2",
                "8 <- 2.4",
                "9 <- 0.3"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 2) * (2 * 6) = 24 || Input: 3 3 4 7\nSteps:\n3 * 7 = 21 (left: 3 4 21)\n4 + 3 = 7 (left: 7 21)\n7 * 3 = 21 (left: 21)\nAnswer: (3 * 7) - (4 + 3) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 2) * (2 * 6) = 24 || Input: 3 3 8 8\nSteps:\n3 * 8 = 24 (left: 3 8 24)\n3 * 8 = 24 (left: 24)\nAnswer: 3 * (3 * 8) = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 2) * (2 * 6) = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 + 5 = 26 (left: 3 26)\n26 - 3 = 23 (left: 23)\n23 - 23 = 0 (left: 0)\n0 + 24 = 24 (left: 24)\nAnswer: ((3 * 7) + 5) - 3 +",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (1 * 2) = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 2) * (2 * 6) = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 + 3 = 24 (left: 5 24)\nAnswer: (3 * 7) + 3 = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 6 8\nSteps:\n3 + 3 = 6 (left: 6 6 8)\n6 * 8 = 48 (left: 48 6)\n48 / 6 = 8 (left: 8)\nAnswer: ((3 + 3) * 8) / 6 = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n3 * 4 = 12 (left: 8 12)\n12 - 8 = 4 (left: 4)\n4 * 24 = 24\nAnswer: ((3 + 5) * (3 * 4)) - 8 = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: ((6 - 2) * 4) * 1 = 24",
                "6 - 1 = 5 (left: 2 5  || 9 / 3 = 3 (left: 3)"
            ],
            "Pruning": [
                "0<-2.7",
                "1<-0.4",
                "2<-0.6",
                "3<-2.6",
                "4<-2.9",
                "5<-1.5",
                "6<-2.7",
                "7<-2.2",
                "8<-2.5"
            ],
            "Evaluation": [
                60.0,
                60.0,
                40.001,
                60.0,
                60.0,
                60.0,
                40.001,
                60.0,
                40.0,
                0.001
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 3.3",
                "2 <- 3.3",
                "3 <- 2.9",
                "4 <- 3.4",
                "5 <- 2.7",
                "6 <- 3.3",
                "7 <- 3.8",
                "8 <- 3.8",
                "9 <- 2.7"
            ]
        },
        "Step 4": {
            "steps": [
                "2 * 2 = 4 (left: 4 6) || 10 + 3 = 13 (left: 13 5 7) || 13 / 5 = 2.6 (left: 2.6 7)",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 4 6\nSteps:\n3 * 4 = 12 (left: 3 6 12)\n3 + 6 = 9 (left: 9 12)\n9 * 12 = 108 (left: 108)\nAnswer: (3 * 4) * (3 + 6) = 108",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || These are all the possible ways to obtain 24 using the given numbers and basic arithmetic operations.",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 2) * (2 * 6) = 24 || Input: 3 3 4 7\nSteps:\n3 * 7 = 21 (left: 3 4 21)\n3 * 4 = 12 (left: 12 21)\n12 + 21 = 33 (left: 33)\n33 - 9 = 24 (left: 24)\nAnswer: ((3 * 7) * 4) - 9 = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 5 8\nSteps:\n3 * 8 = 24 (left: 3 5 24)\n3 * 5 = 15 (left: 15 24)\n15 + 24 = 39 (left: 39)\nAnswer: (3 * 8) + (3 * 5) = 24",
                "6 / 2 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "6 / 2 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 2) * (2 * 6) = 24 || Input: 3 3 7 8\nSteps:\n3 * 8 = 24 (left: 3 7 24)\n7 - 3 = 4 (left: 4 24)\n4 * 24 = 96 (left: 96)\nAnswer: (3 * 8) - (7 - 3) = 24"
            ],
            "Pruning": [
                "1<-3.1",
                "2<-3.2",
                "3<-3.4",
                "4<-2.4",
                "5<-0.5",
                "6<-3.7",
                "9<-3.0"
            ],
            "Evaluation": [
                2.0,
                60.0,
                60.0,
                40.0,
                60.0,
                40.0,
                60.0,
                60.0,
                0.002,
                40.001
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 4.2",
                "2 <- 4.2",
                "3 <- 3.5",
                "4 <- 4.4",
                "5 <- 3.3",
                "6 <- 4.2",
                "7 <- 4.9",
                "8 <- 4.9",
                "9 <- 3.3"
            ]
        },
        "Step 5": {
            "steps": [
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 7 8\nSteps:\n3 + 7 = 10 (left: 3 8 10)\n10 - 8 = 2 (left: 2 10)\n2 * 10 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((3 + 7) * 2) + 4 = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6)",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (6 - 2) * (1 * 2) = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n3 + 5 = 8 (left: 8 21)\n8 * 21 = 168 (left: 168)\nAnswer: (3 * 7) * (3 + 5) = 168",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5)",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 2) * (2 * 6) = 24 || Input: 3 3 4 7\nSteps:\n3 + 7 = 10 (left: 3 4 10)\n10 - 4 = 6 (left: 3 6)\n6 * 3 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((3 + 7) - 4) * (6 + 3) = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 2) * (2 * 6) = 24 || Input: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n4 * 3 = 12 (left: 8 12)\n12 - 8 = 4 (left: 4 24)\nAnswer: ((3 + 5) * 4) = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n3 * 6 = 18 (left: 18)\nAnswer: 3 * (3 * 8) = 24"
            ],
            "Pruning": [
                "0<-3.8",
                "4<-4.1",
                "5<-4.3",
                "7<-3.0",
                "8<-0.6",
                "9<-4.7"
            ],
            "Evaluation": [
                60.0,
                60.0,
                40.001,
                0.003,
                60.0,
                60.0,
                2.001,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.9",
                "1 <- 5.8",
                "2 <- 4.9",
                "3 <- 4.1",
                "4 <- 4.5",
                "5 <- 5.5",
                "6 <- 1.6",
                "7 <- 5.5",
                "8 <- 3.7",
                "9 <- 5.8"
            ]
        },
        "Step 6": {
            "steps": [
                "6 / 2 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 / 2) * (2 * 3) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 1 + 4 = 5 (left: 5 6)",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 2) * (2 * 6) = 24 || Input: 3 3 5 5\nSteps:\n3 * 5 = 15 (left: 3 5 15)\n15 - 5 = 10 (left: 3 10)\n10 * 3 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((3 * 5) - 5) * 3 = 24",
                "2 * 2 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "2 * 2 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 + 2) = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || In these examples, the goal is to use the given numbers and basic arithmetic operations to obtain the target number 24. Each step involves combining two of the remaining numbers using one of the basic operations (+ - * /) until the final result is 24.",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)"
            ],
            "Pruning": [
                "0<-5.7",
                "2<-5.6",
                "5<-5.1",
                "7<-5.2",
                "8<-1.6"
            ],
            "Evaluation": [
                60.0,
                2.0,
                3.0,
                0.0,
                0.002,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 6.8",
                "1 <- 6.5",
                "2 <- 4.3",
                "3 <- 5.5",
                "4 <- 6.8",
                "5 <- 5.4",
                "6 <- 6.6",
                "7 <- 3.7",
                "8 <- 0.3",
                "9 <- 4.9"
            ]
        },
        "Step 7": {
            "steps": [
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 2) * (2 * 6) = 24",
                "2 * 2 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 4 6\nSteps:\n3 + 6 = 9 (left: 3 4 9)\n4 + 9 = 13 (left: 13)\n13 - 3 = 10 (left: 10)\n10 * 2 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: (((3 + 6) + 4) - 3) * ",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 4 6\nSteps:\n3 + 4 = 7 (left: 3 6 7)\n7 - 3 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (3 + 4) * 6 = 24",
                "6 - 1 = 5 (left: 2 5  || 5 / 2 = 2.5 (left: 2.5)",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 2) * (2 * 6) = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n3 * 6 = 18 (left: 18)\nAnswer: 3 * (3 * 8) = 24"
            ],
            "Pruning": [
                "2<-4.6",
                "3<-3.1",
                "6<-4.4",
                "7<-5.1",
                "9<-2.9"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                0.003,
                60.0,
                40.0,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 6.9",
                "2 <- 6.9",
                "3 <- 5.7",
                "4 <- 6.6",
                "5 <- 7.1",
                "6 <- 7.6",
                "7 <- 6.7",
                "8 <- 7.6",
                "9 <- 7.1"
            ]
        },
        "Step 8": {
            "steps": [
                "6 / 2 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || Input: 3 9 27",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 2) * (2 * 6) = 24 || Input: 3 3 4 4\nSteps:\n3 + 4 = 7 (left: 3 7 4)\n3 * 4 = 12 (left: 7 12)\n7 + 12 = 19 (left: 19)\n19 + 4 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 4 = 22 (left: 22)\n22 / ",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n3 * 6 = 18 (left: 18)\nAnswer: 3 * (3 * 8) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 + 2) * 4 = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (6 - 2) * (1 * 24) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (6 - 2) * (1 * 24) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 4) = 24"
            ],
            "Pruning": [
                "3<-7.3",
                "4<-7.7",
                "5<-4.7",
                "6<-3.8",
                "8<-5.9",
                "9<-7.0"
            ],
            "Evaluation": [
                0.0,
                0.003,
                60.0,
                20.0,
                60.0,
                60.0,
                40.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 7.4",
                "1 <- 4.3",
                "2 <- 7.4",
                "3 <- 5.1",
                "4 <- 7.9",
                "5 <- 5.0",
                "6 <- 8.2",
                "7 <- 6.5",
                "8 <- 3.7",
                "9 <- 7.2"
            ]
        },
        "Step 9": {
            "steps": [
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 2) * (2 * 6) = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 / 3 = 5.333 (left: 5.333)\n5.333 + 3 = 8.333 (left: 8.333)\n8.333 * 3 = 24 (left: 24)\nAnswer: ((3",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (1 * 2) = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 2) * (2 * 6) = 24 || Input: 3 3 7 8\nSteps:\n3 + 7 = 10 (left: 3 8 10)\n10 - 8 = 2 (left: 2 3)\n2 * 3 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((3 + 7) - 8) * 3 * 4 = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: ((6 - 2) * 4) / 1 = 24",
                "6 / 2 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * (6 - 2)) * 4 = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 4 5\nSteps:\n3 + 4 = 7 (left: 3 5 7)\n3 * 5 = 15 (left: 7 15)\n7 + 15 = 22 (left: 22)\n22 + 2 = 24 (left: 24)\nAnswer: ((3 + 4) * 5) + 2 = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || -  (2 * 2) * 6 = 24"
            ],
            "Pruning": [
                "0<-8.8",
                "1<-7.9",
                "2<-6.6",
                "4<-8.5",
                "6<-8.8",
                "8<-8.6",
                "9<-8.4"
            ]
        },
        "Input": "1 2 2 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "7": {
        "puzzle": "1 1 10 12",
        "Step 0": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 10 12)",
                "1 + 1 = 2 (left: 2 10 12)",
                "12 - 10 = 2 (left: 1 1 2)",
                "1 + 1 = 2 (left: 2 10 12)",
                "10 - 1 = 9 (left: 1 9 12)",
                "1 * 1 = 1 (left: 1 10 12)",
                "1 + 1 = 2 (left: 2 10 12)",
                "10 + 1 = 11 (left: 1 11 12)",
                "10 + 1 = 11 (left: 1 11 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                21.001,
                0.003,
                20.002,
                1.002,
                0.003,
                1.002,
                0.002,
                0.003,
                20.002,
                41.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.9",
                "2 <- 0.2",
                "3 <- 0.9",
                "4 <- 0.9",
                "5 <- 0.2",
                "6 <- 0.2",
                "7 <- INIT",
                "8 <- 0.0",
                "9 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 10 12)",
                "10 + 1 = 11 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "1 + 1 = 2 (left: 2 10 12) || 10 / 2 = 5 (left: 5 12)",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12)",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12)",
                "1 + 1 = 2 (left: 2 10 12) || 2 * 10 = 20 (left: 20 12)",
                "1 + 1 = 2 (left: 2 10 12) || 12 - 2 = 10 (left: 2 10 10)",
                "12 - 10 = 2 (left: 1 2 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "1 + 1 = 2 (left: 2 10 12) || 10 + 2 = 12 (left: 2 12 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.0,
                0.003,
                0.002,
                0.002,
                60.0,
                0.003,
                0.003,
                60.0,
                0.001,
                1.002
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 1.7",
                "2 <- 1.4",
                "3 <- 0.8",
                "4 <- 1.7",
                "5 <- 0.9",
                "6 <- 1.7",
                "7 <- 1.7",
                "8 <- 0.2",
                "9 <- 0.9"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "12 - 10 = 2 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 10 = 2 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 1 = 11 (left: 2 11)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "1 + 1 = 2 (left: 2 10 12) || 10 / 2 = 5 (left: 5 12)",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                20.002,
                0.003,
                60.0,
                1.002,
                0.0,
                1.002,
                60.0,
                3.0,
                20.002
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.9",
                "2 <- 2.3",
                "3 <- 2.7",
                "4 <- 2.7",
                "5 <- 2.7",
                "6 <- 1.4",
                "7 <- 2.3",
                "8 <- 2.3",
                "9 <- 0.8"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 1 = 2 (left: 2 10 12) || 12 - 2 = 10 (left: 10 10)",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24 24)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                0.003,
                60.0,
                40.001,
                40.0,
                60.0,
                0.003,
                0.003,
                40.001,
                40.001
            ],
            "Resampling": [
                "0 <- 2.7",
                "1 <- 3.0",
                "2 <- 3.5",
                "3 <- 2.7",
                "4 <- INIT",
                "5 <- 3.3",
                "6 <- 3.5",
                "7 <- 3.5",
                "8 <- 1.4",
                "9 <- 2.1"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "1 + 1 = 2 (left: 2 10 12) || 12 - 2 = 10 (left: 10 10) || 10 + 10 = 20 (left: 20)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 * 12) / (10 - 1) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "1 + 1 = 2 (left: 2 10 12)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24 24) || 24 - 24 = 0 (left: 0)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 * 2) * (10 + 12) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (12 - 10) * 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 - 10 = 2 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12) || 3 - 12 = -9 (left: -9 12)"
            ],
            "Pruning": [
                "2<-0.9",
                "5<-3.0",
                "6<-2.3",
                "7<-3.4"
            ],
            "Evaluation": [
                0.001,
                0.001,
                1.002,
                0.001,
                0.003,
                0.003,
                40.001,
                60.0,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 4.7",
                "1 <- 4.7",
                "2 <- 3.5",
                "3 <- 4.6",
                "4 <- 4.6",
                "5 <- 4.6",
                "6 <- 2.3",
                "7 <- 3.4",
                "8 <- 4.6",
                "9 <- 4.6"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 * 10) + (12 - 1) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (12 - 10) * 12 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 + (12 - 10)) * 1 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 * 12) * (10 - 1) = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)"
            ],
            "Pruning": [
                "0<-3.9",
                "1<-4.6",
                "2<-1.4",
                "7<-4.7"
            ],
            "Evaluation": [
                20.002,
                40.001,
                40.001,
                60.0,
                0.003,
                40.0,
                0.003,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.5",
                "1 <- 5.0",
                "2 <- 5.5",
                "3 <- 5.2",
                "4 <- 2.3",
                "5 <- 5.3",
                "6 <- 5.7",
                "7 <- 3.2",
                "8 <- 4.7",
                "9 <- 5.2"
            ]
        },
        "Step 6": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((1 + 1) + 10) + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((1 + 1) + 10) + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((10 + 1) + 1) + 12 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: ((1 * 10) + 12) / 1 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((10 + 1) + 1) + 12 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (12 - 10) * 1 * 24 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)"
            ]
        },
        "Input": "1 1 10 12",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": -1
            },
            {
                "r": 1
            },
            {
                "r": -1
            },
            {
                "r": 0
            }
        ]
    },
    "8": {
        "puzzle": "2 2 10 10",
        "Step 0": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 10 ",
                "10 - 2 = 8 (left: 2 8 10)",
                "2 + 2 = 4 (left: 4 10 10)",
                "2 * 2 = 4 (left: 4 10 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "2 + 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)",
                "10 / 2 = 5 (left: 2 5 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                2.0,
                2.001,
                20.002,
                40.001,
                22.0,
                40.001,
                1.002,
                20.002
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 0.9",
                "2 <- 0.7",
                "3 <- 0.5",
                "4 <- 0.4",
                "5 <- INIT",
                "6 <- 0.5",
                "7 <- 0.5",
                "8 <- 0.5",
                "9 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left",
                "10 / 2 = 5 (left: 2 5 10) || 10 / 2 = 5 (left: 5 10)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14)",
                "2 * 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "2 + 2 = 4 (left: 4 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                1.001,
                0.003,
                0.003,
                3.0,
                40.001,
                2.001,
                1.002,
                0.003,
                22.0
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 0.7",
                "2 <- INIT",
                "3 <- 0.7",
                "4 <- 1.5",
                "5 <- 0.4",
                "6 <- INIT",
                "7 <- 1.5",
                "8 <- 1.7",
                "9 <- 0.4"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10)",
                "2 + 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 + 4 = 14 (left: 10 14)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.001,
                0.002,
                21.001,
                3.0,
                0.003,
                1.001,
                2.001,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 2.7",
                "2 <- 1.5",
                "3 <- 2.7",
                "4 <- 2.7",
                "5 <- 1.5",
                "6 <- 2.7",
                "7 <- 1.5",
                "8 <- 2.0",
                "9 <- 1.5"
            ]
        },
        "Step 3": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14)",
                "2 + 2 = 4 (left: 4 10 10) || 10 + 4 = 14 (left: 10 14) || 14 / 10 = 1.4 (left: 1.4)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 + 4 = 14 (left: 10 14) || 14 - 10 = 4 (left: 4)",
                "2 + 2 = 4 (left: 4 10 10) || 10 + 4 = 14 (left: 10 14) || 10 * 14 = 140 (left: 140)",
                "2 + 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 10 40)",
                "2 + 2 = 4 (left: 4 10 10) || 10 + 4 = 14 (left: 10 14) || 14 - 10 = 4 (left: 4)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                1.002,
                0.002,
                0.003,
                0.003,
                0.001,
                3.0,
                3.0,
                3.0
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.0",
                "2 <- 1.5",
                "3 <- 2.7",
                "4 <- 1.5",
                "5 <- 3.9",
                "6 <- 2.7",
                "7 <- 2.0",
                "8 <- 0.4",
                "9 <- 2.7"
            ]
        },
        "Step 4": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 / 6 = 1.6666666666666667 (left: 1.6666666666666667 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 10 40)",
                "2 + 2 = 4 (left: 4 10 10) || 10 + 4 = 14 (left: 10 14) || 10 - 14 = -4 (left: -4)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 / 6 = 1.666",
                "2 + 2 = 4 (left: 4 10 10) || 10 + 4 = 14 (left: 10 14) || 10 * 14 = 140 (left: 140)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10) || 10 / 2 = 5 (left: 4 5 10)",
                "2 + 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 10 40)",
                "2 + 2 = 4 (left: 4 10 10) || 10 + 4 = 14 (left: 10 14) || 10 * 14 = 140 (left: 140)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                2.001,
                20.002,
                0.002,
                60.0,
                0.003,
                0.002,
                21.0,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.8",
                "1 <- 4.8",
                "2 <- 4.1",
                "3 <- 4.4",
                "4 <- 4.4",
                "5 <- 4.4",
                "6 <- 4.4",
                "7 <- 4.4",
                "8 <- 4.4",
                "9 <- 4.2"
            ]
        },
        "Step 5": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 10 40) || 40 / 10 = 4 (left: 4 10)",
                "2 + 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 10 40) || 10 - 10 = 0 (left: 0 40)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 10 / 6 = 1.",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 6 * 4 = 24 (left: 24 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 6 / 4 = 1.5 (left: 1.5 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 6 * 10 = 60 (left: 60)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 6 * 4 = 24 (left: 24 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 6 + 4 = 10 (left: 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 10 40) || 10 / 10 = 1 (left: 1 40)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.0,
                0.0,
                20.002,
                0.003,
                20.001,
                0.001,
                0.003,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 5.9",
                "2 <- 4.4",
                "3 <- 3.8",
                "4 <- 2.0",
                "5 <- 5.9",
                "6 <- 5.9",
                "7 <- 5.9",
                "8 <- 1.9",
                "9 <- 5.4"
            ]
        },
        "Step 6": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 6 + 4 = 10 (left: 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 10 40) || 10 / 10 = 1 (left: 1 40) || 1 + 40 = 41 (left: 40 41)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 6 * 4 = 24 (left: 24 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 + 10 = 16 (left: 10 10 16)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 10 40)",
                "2 + 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 10 40) || 10 / 10 = 1 (left: 1 40) || 5 + 5 = 10 (left: 5 10)",
                "2 + 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 10 40) || 10 / 10 = 1 (left: 1 40) || 40 / 1 = 40 (left: 40)",
                "2 + 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 10 40) || 10 / 10 = 1 (left: 1 40) || 1 + 40 = 41 (left: 41)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 6 * 4 = 24 (left: 24 10) || 24 / 10 = 2.4 (left: 2.4 10)"
            ],
            "Pruning": [
                "6<-5.4",
                "7<-4.7"
            ],
            "Evaluation": [
                1.001,
                0.003,
                40.001,
                0.003,
                0.003,
                0.003,
                40.001,
                1.001,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 0.7",
                "2 <- 6.9",
                "3 <- 4.8",
                "4 <- 5.9",
                "5 <- 6.9",
                "6 <- 6.9",
                "7 <- 5.9",
                "8 <- 6.9",
                "9 <- 6.9"
            ]
        },
        "Step 7": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 6 + 4 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 6 * 4 = 24 (left: 24 10) || 24 / 10 = 2.4 (left: 2.4 10) || 2.4 + 10 = 12.4 (left: 12.4)",
                "2 + 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 10 40) || 40 - 10 = 30 (left: 10 30)",
                "2 + 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 10 40) || 10 / 10 = 1 (left: 1 40) || 40 / 1 = 40 (left: 40)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 6 * 4 = 24 (left: 24 10) || 24 / 10 = 2.4 (left: 2.4 10) || 10 - 2.4 = 7.6 (left: 7.6)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 6 * 4 = 24 (left: 24 10) || 24 / 10 = 2.4 (left: 2.4 10) || Input: 3 9",
                "2 + 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 10 40) || 10 / 10 = 1 (left: 1 40) || 40 / 1 = 40 (left: 40)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 6 * 4 = 24 (left: 24 10) || 24 / 10 = 2.4 (left: 2.4 10) || 5 + 5 =",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 6 * 4 = 24 (left: 24 10) || 24 / 10 = 2.4 (left: 2.4 10) || Possible next steps:"
            ],
            "Pruning": [
                "0<-5.0",
                "2<-6.2",
                "4<-4.8",
                "5<-5.4",
                "7<-6.2"
            ],
            "Evaluation": [
                0.002,
                60.0,
                20.002,
                0.003,
                0.003,
                40.001,
                0.003,
                20.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 7.5",
                "1 <- 7.5",
                "2 <- 6.9",
                "3 <- 7.5",
                "4 <- 7.7",
                "5 <- 7.2",
                "6 <- 7.1",
                "7 <- 7.7",
                "8 <- 7.1",
                "9 <- 7.1"
            ]
        },
        "Step 8": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 6 * 4 = 24 (left: 24 10) || 24 / 10 = 2.4 (left: 2.4 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 6 * 4 = 24 (left: 24 10) || 24 + 10 = 34 (left: 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 6 * 4 = 24 (left: 24 10) || 24 / 10 = 2.4 (left: 2.4 10) || 2.4 * 10 = 24 (left: 24)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 6 * 4 = 24 (left: 24 10) || 24 + 10 = 34 (left: 10 34)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 6 * 4 = 24 (left: 24 10) || 24 / 10 = 2.4 (left: 2.4 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 6 * 4 = 24 (left: 24 10) || 24 + 10 = 34 (left: 10 34)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 10 - 4 = 6 (left: 6 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 6 * 4 = 24 (left: 24 10) || 24 - 10 = 14 (left: 10 14)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 6 * 4 = 24 (left: 24 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 4 + 6 = 10 (left: 10 10)"
            ],
            "Pruning": [
                "1<-7.1",
                "2<-6.6"
            ],
            "Evaluation": [
                60.0,
                60.0,
                20.002,
                0.003,
                60.0,
                0.002,
                20.001,
                60.0,
                20.002,
                0.0
            ],
            "Resampling": [
                "0 <- 8.1",
                "1 <- 3.9",
                "2 <- 8.7",
                "3 <- 7.1",
                "4 <- 8.0",
                "5 <- 8.7",
                "6 <- 8.6",
                "7 <- 8.0",
                "8 <- 8.7",
                "9 <- 8.8"
            ]
        },
        "Step 9": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 10 / 4 = 2.5 (",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 6 * 4 = 24 (left: 24 10) || 24 - 10 = 14 (left: 10 14) || 10 * 14 = 140 (left: 140)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 10 - 4 = 6 (left: 6 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 6 * 4 = 24 (left: 24 10) || 24 / 10 = 2.4 (left: 2.4 10) || 2.4 * 10 = 24 (left: 10 24)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 6 * 4 = 24 (left: 24 10) || 24 - 10 = 14 (left: 10 14) || 10 / 14 = 0.7142857142857143 (left: 0.7142857142857143 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 10 - 4 = 6 (left: 6 10) || 10 / 6 = 1.66667 (left: 1.66667)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 6 * 4 = 24 (left: 24 10) || 24 / 10 = 2.4 (left: 2.4 10) || Possible next steps:",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 6 * 4 = 24 (left: 24 10) || 24 - 10 = 14 (left: 10 14) || 10 / 14 = ",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 6 * 4 = 24 (left: 24 10) || 24 - 10 = 14 (left: 14 10)"
            ],
            "Pruning": [
                "2<-7.1",
                "6<-8.1"
            ]
        },
        "Input": "2 2 10 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "9": {
        "puzzle": "1 1 1 12",
        "Step 0": {
            "steps": [
                "12 - 1 = 11 (left: 1 1 11)",
                "1 + 1 = 2 (left: 1 2 12)",
                "1 * 1 = 1 (left: 1 1 12)",
                "1 + 1 = 2 (left: 1 2 12)",
                "1 + 1 = 2 (left: 1 2 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "1 + 1 = 2 (left: 1 2 12)",
                "1 + 1 = 2 (left: 1 2 12)",
                "1 * 1 = 1 (left: 1 1 12)",
                "12 - 1 = 11 (left: 1 1 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                60.0,
                20.002,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                21.0,
                0.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.4",
                "2 <- 0.4",
                "3 <- 0.1",
                "4 <- 0.1",
                "5 <- 0.1",
                "6 <- 0.4",
                "7 <- 0.2",
                "8 <- 0.0",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12)",
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 1 2 12) || 2 + 1 = 3 (left: 3 12)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "1 + 1 = 2 (left: 1 2 12) || 2 + 12 = 14 (left: 1 14)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 12 = 12 (left:",
                "1 + 1 = 2 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 - 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 1 2 12) || Possible next steps:"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                60.0,
                20.002,
                60.0,
                1.0,
                3.0,
                0.002,
                0.001,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.5",
                "2 <- 1.4",
                "3 <- 1.2",
                "4 <- 1.1",
                "5 <- 1.3",
                "6 <- 1.0",
                "7 <- 0.1",
                "8 <- 1.3",
                "9 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "12 / 1 = 12 (left: 1 1 12) || 1 / 1 = 1 (left: 1 12)",
                "1 + 1 = 2 (left: 1 2 12) || 2 + 12 = 14 (left: 1 14) || 14 / 1 = 14 (left: 1 14)",
                "1 + 1 = 2 (left: 1 2 12) || 2 + 1 = 3 (left: 3 12) || 3 + 12 = 15 (left: 15)",
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 =",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                21.001,
                2.001,
                21.001,
                0.003,
                0.003,
                60.0,
                60.0,
                60.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 2.8",
                "2 <- 2.5",
                "3 <- 2.2",
                "4 <- INIT",
                "5 <- 1.3",
                "6 <- 2.2",
                "7 <- 1.4",
                "8 <- 0.2",
                "9 <- 1.0"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: 1 * (1 + (1 * 12)) = 24",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 + 1) * 12 = 24",
                "1 + 1 = 2 (left: 1 2 12) || 2 + 12 = 14 (left: 1 14) || 14 / 1 = 14 (left: 1 14) || 1 * 14 = 14 (left: 14)",
                "1 * 1 = 1 (left: 1 1 12)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 12) || 2 + 12 = 14 (left: 1 14) || 14 / 1 = 14 (left: 1 14) || 14 / 1 = 14 (left: 14)",
                "1 + 1 = 2 (left: 1 2 12) || 2 + 12 = 14 (left: 1 14) || 1 * 14 = 14 (left: 14)",
                "1 * 1 = 1 (left: 1 1 12) || 1 * 12 = 12 (left: 1 12)",
                "1 + 1 = 2 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12)"
            ],
            "Pruning": [
                "1<-2.0",
                "2<-0.4",
                "3<-2.2",
                "6<-1.3"
            ],
            "Evaluation": [
                0.001,
                0.003,
                60.0,
                0.001,
                41.0,
                60.0,
                60.0,
                0.001,
                1.0,
                60.0
            ],
            "Resampling": [
                "0 <- 3.9",
                "1 <- 1.0",
                "2 <- 3.6",
                "3 <- 0.5",
                "4 <- 3.2",
                "5 <- 1.8",
                "6 <- 1.3",
                "7 <- 3.2",
                "8 <- 1.2",
                "9 <- 3.2"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12) || 2 + 12 = 14",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 1 23)",
                "12 / 1 = 12 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "12 - 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 1 = 12 (left:",
                "1 + 1 = 2 (left: 1 2 12) || 2 + 1 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                21.0,
                60.0,
                60.0,
                0.001,
                0.003,
                20.0,
                40.0,
                60.0
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 4.3",
                "2 <- 0.3",
                "3 <- 4.1",
                "4 <- 1.1",
                "5 <- 0.8",
                "6 <- 4.1",
                "7 <- 2.6",
                "8 <- 4.2",
                "9 <- 3.9"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "12 / 1 = 12 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 5 + 5 = 10 (left: 10 20)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 - 24 = -23 (left",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 1 23) || 23 - 1 = 22 (left: 1 22)",
                "1 + 1 = 2 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                0.003,
                0.001,
                0.003,
                0.003,
                0.003,
                0.002,
                0.0
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 1.8",
                "2 <- 4.3",
                "3 <- 3.9",
                "4 <- 2.6",
                "5 <- 2.5",
                "6 <- 3.5",
                "7 <- 3.5",
                "8 <- 4.9",
                "9 <- 4.8"
            ]
        },
        "Step 6": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 - 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "12 / 1 = 12 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 + 1) * 12 = 24",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 + 1) * 12 = 24",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 + 1) * 12 = 24",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 24 25)",
                "1 + 1 = 2 (left: 1 2 12) || 2 + 1 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 6 * 6 = 36"
            ],
            "Pruning": [
                "5<-3.6",
                "6<-2.6",
                "7<-4.8"
            ],
            "Evaluation": [
                0.001,
                0.003,
                60.0,
                0.002,
                0.003,
                60.0,
                60.0,
                40.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.5",
                "1 <- 3.2",
                "2 <- 5.2",
                "3 <- 5.2",
                "4 <- 6.5",
                "5 <- 6.6",
                "6 <- 6.2",
                "7 <- 6.5",
                "8 <- 0.5",
                "9 <- 4.4"
            ]
        },
        "Step 7": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 + 1) * 12 / 1 = 24",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24 24)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "12 / 1 = 12 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: ((1 + 1) + 1) * 12 = 24",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)",
                "12 / 1 = 12 (left: 1 1 12) || 1 / 1 = 1 (left: 1 12)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ]
        },
        "Input": "1 1 1 12",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "Cost": {
        "input_tokens": 0,
        "output_tokens": 89289.0,
        "total_cost": 0.1339335
    }
}