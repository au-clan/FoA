{
    "0": {
        "puzzle": "1 1 4 6",
        "Step 0": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6)",
                "1 * 4 = 4 (left: 4 4 6)",
                "6 - 1 = 5 (left: 1 4 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                22.0,
                2.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.0",
                "2 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                20.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.1",
                "2 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5)",
                "1 * 4 = 4 (left: 4 4 6) || Input: 1 5",
                "1 * 1 = 1 (left: 1 4 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                0.003,
                41.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 1.0",
                "2 <- 0.0"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "1 * 1 = 1 (left: 1 4 6) || 4 + 6 = "
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.0",
                "2 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 1 = 2 (left: 2 4 6)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "1 + 1 = 2 (left: 2 4 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 0.1",
                "2 <- 1.2"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "1 * 4 = 4 (left: 4 4 6) || 6 + 4 = 10 (left: 4 10)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.001,
                40.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 5.1",
                "2 <- 5.1"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "1 * 4 = 4 (left: 4 4 6) || 6 + 4 = 10 (left: 4 10) || 10 / 4 = 2.5 (left: 2.5 10)",
                "1 * 4 = 4 (left: 4 4 6) || 6 + 4 = 10 (left: 4 10) || 4 * 10 = 40 (left: 40)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.001,
                0.003
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 5.2",
                "2 <- 5.2"
            ]
        },
        "Step 7": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25) || 25 + 2 = 27",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25) || 25 + 25 = 50",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25) || 25 - 2 = 23 (left: 2)"
            ],
            "Pruning": [
                "2<-3.0"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 7.2",
                "1 <- 7.2",
                "2 <- 5.1"
            ]
        },
        "Step 8": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 - 6 = -2 (left: -2)",
                "1 * 4 = 4 (left: 4 4 6) || 6 + 4 = 10 (left: 4 10) || 4 + 10 = 14 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 7.2",
                "1 <- 2.2",
                "2 <- 0.1"
            ]
        },
        "Step 9": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "1 * 4 = 4 (left: 4 4 6) || 6 + 4 = 10 (left: 4 10)"
            ],
            "Pruning": []
        },
        "Input": "1 1 4 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "Cost": {
        "input_tokens": 0,
        "output_tokens": 3335.0,
        "total_cost": 0.0050025
    }
}