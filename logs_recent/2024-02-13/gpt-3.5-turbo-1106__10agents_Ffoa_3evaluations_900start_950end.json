{
    "900": {
        "input": "4 5 6 10",
        "step_1": {
            "steps": [
                "6 / 4 = 1.5 (left: 1.5 5 10)",
                "4 * 5 = 20 (left: 6 20 10)",
                "5 * 6 = 30 (left: 4 30 10)",
                "5 * 6 = 30 (left: 4 30 10)",
                "10 - 4 = 6 (left: 6 5 10)",
                "5 * 4 = 20 (left: 20 6 10)",
                "6 / 4 = 1.5 (left: 1.5 5 10)",
                "6 + 10 = 16 (left: 4 5 16)",
                "4 * 5 = 20 (left: 20 6 10)",
                "10 / 5 = 2 (left: 4 2 10)"
            ],
            "values": [
                3.0,
                3.0,
                2.001,
                1.002,
                2.0,
                21.001,
                3.0,
                2.001,
                2.001,
                22.0
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 9",
                "2 <- 4",
                "3 <- 9",
                "4 <- 7",
                "5 <- 9",
                "6 <- 7",
                "7 <- 4",
                "8 <- 9",
                "9 <- 5"
            ],
            "resampled_steps": [
                "10 / 5 = 2 (left: 4 2 10)",
                "10 / 5 = 2 (left: 4 2 10)",
                "10 - 4 = 6 (left: 6 5 10)",
                "10 / 5 = 2 (left: 4 2 10)",
                "6 + 10 = 16 (left: 4 5 16)",
                "10 / 5 = 2 (left: 4 2 10)",
                "6 + 10 = 16 (left: 4 5 16)",
                "10 - 4 = 6 (left: 6 5 10)",
                "10 / 5 = 2 (left: 4 2 10)",
                "5 * 4 = 20 (left: 20 6 10)"
            ]
        },
        "step_2": {
            "steps": [
                "10 / 5 = 2 (left: 4 2 10)\n10 + 2 = 12 (left: 4 12)",
                "10 / 5 = 2 (left: 4 2 10)\n2 * 10 = 20 (left: 4 20)",
                "10 - 4 = 6 (left: 6 5 10)\n6 / 5 = 1.2 (left: 1.2 10)",
                "10 / 5 = 2 (left: 4 2 10)\n4 * 2 = 8 (left: 8 10)",
                "6 + 10 = 16 (left: 4 5 16)\n5 * 4 = 20 (left: 20 16)",
                "10 / 5 = 2 (left: 4 2 10)\n4 / 2 = 2 (left: 2 10)",
                "6 + 10 = 16 (left: 4 5 16)\n5 * 4 = 20 (left: 20 16)",
                "10 - 4 = 6 (left: 6 5 10)\n6 / 5 = 1.2 (left: 1.2 10)",
                "10 / 5 = 2 (left: 4 2 10)\n4 + 2 = 6 (left: 6 10)",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)"
            ],
            "values": [
                0.003,
                1.001,
                1.0,
                0.003,
                0.002,
                2.0,
                0.003,
                3.0,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 9",
                "2 <- 9",
                "3 <- 9",
                "4 <- 9",
                "5 <- 9",
                "6 <- 9",
                "7 <- 9",
                "8 <- 9",
                "9 <- 9"
            ],
            "resampled_steps": [
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)"
            ]
        },
        "step_3": {
            "steps": [
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)\n20 - 4 = 16 (left: 16 4)",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)\n20 / 4 = 5 (left: 5)",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)\n20 * 4 = 80 (left: 80)",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)\n20 / 4 = 5 (left: 5)",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)\n20 + 4 = 24 (left: 24)",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)\n20 - 4 = 16 (left: 16)",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)\n20 - 4 = 16 (left: 16)",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)\n20 / 4 = 5 (left: 5)",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)\n20 + 4 = 24 (left: 4 24)",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)\n20 + 4 = 24 (left: 24)"
            ],
            "values": [
                1.001,
                0.001,
                0.003,
                0.002,
                20.0,
                0.003,
                0.002,
                0.002,
                41.0,
                20.0
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 9",
                "2 <- 8",
                "3 <- 9",
                "4 <- 4",
                "5 <- 9",
                "6 <- 8",
                "7 <- 4",
                "8 <- 4",
                "9 <- 8"
            ],
            "resampled_steps": [
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)\n20 + 4 = 24 (left: 24)",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)\n20 + 4 = 24 (left: 24)",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)\n20 + 4 = 24 (left: 4 24)",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)\n20 + 4 = 24 (left: 24)",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)\n20 + 4 = 24 (left: 24)",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)\n20 + 4 = 24 (left: 24)",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)\n20 + 4 = 24 (left: 4 24)",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)\n20 + 4 = 24 (left: 24)",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)\n20 + 4 = 24 (left: 24)",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)\n20 + 4 = 24 (left: 4 24)"
            ]
        },
        "step_4": {
            "steps": [
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)\n20 + 4 = 24 (left: 24)\nAnswer: (5 * 4) + (10 - 6) = 24",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)\n20 + 4 = 24 (left: 24)\nAnswer: (5 * 4) + (10 - 6) = 24",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)\n20 + 4 = 24 (left: 4 24)\n4 * 6 = 24 (left: 6 24)",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)\n20 + 4 = 24 (left: 24)\nAnswer: (5 * 4) + (10 - 6) = 24",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)\n20 + 4 = 24 (left: 24)\nAnswer: (5 * 4) + (10 - 6) = 24",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)\n20 + 4 = 24 (left: 24)\nAnswer: (5 * 4) + (10 - 6) = 24",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)\n20 + 4 = 24 (left: 4 24)\n4 * 6 = 24 (left: 6)",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)\n20 + 4 = 24 (left: 24)\nAnswer: (5 * 4) + (10 - 6) = 24",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)\n20 + 4 = 24 (left: 24)\nAnswer: (5 * 4) + (10 - 6) = 24",
                "5 * 4 = 20 (left: 20 6 10)\n10 - 6 = 4 (left: 20 4)\n20 + 4 = 24 (left: 4 24)\n4 * 6 = 24 (left: 6)"
            ],
            "values": [
                60.0,
                60.0,
                0.002,
                60.0,
                60.0,
                60.0,
                0.003,
                60.0,
                60.0,
                0.003
            ]
        },
        "results": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ],
        "cost": 0.034357000000000006
    },
    "901": {
        "input": "1 2 4 7",
        "step_1": {
            "steps": [
                "4 + 7 = 11 (left: 1 2 11)",
                "7 - 4 = 3 (left: 1 2 3)",
                "1 + 2 = 3 (left: 3 4 7)",
                "4 / 2 = 2 (left: 1 2 7)",
                "4 / 2 = 2 (left: 1 2 7)",
                "4 + 7 = 11 (left: 1 2 11)",
                "7 - 2 = 5 (left: 1 4 5)",
                "1 * 2 = 2 (left: 2 4 7)",
                "7 - 4 = 3 (left: 1 2 3)",
                "2 * 4 = 8 (left: 1 8 7)"
            ],
            "values": [
                1.002,
                1.002,
                1.002,
                3.0,
                1.002,
                2.001,
                1.001,
                2.001,
                0.002,
                2.001
            ],
            "resampled": [
                "0 <- 7",
                "1 <- 7",
                "2 <- 3",
                "3 <- 6",
                "4 <- 7",
                "5 <- 2",
                "6 <- 3",
                "7 <- 3",
                "8 <- 5",
                "9 <- 4"
            ],
            "resampled_steps": [
                "1 * 2 = 2 (left: 2 4 7)",
                "1 * 2 = 2 (left: 2 4 7)",
                "4 / 2 = 2 (left: 1 2 7)",
                "7 - 2 = 5 (left: 1 4 5)",
                "1 * 2 = 2 (left: 2 4 7)",
                "1 + 2 = 3 (left: 3 4 7)",
                "4 / 2 = 2 (left: 1 2 7)",
                "4 / 2 = 2 (left: 1 2 7)",
                "4 + 7 = 11 (left: 1 2 11)",
                "4 / 2 = 2 (left: 1 2 7)"
            ]
        },
        "step_2": {
            "steps": [
                "1 * 2 = 2 (left: 2 4 7)\n2 * 4 = 8 (left: 8 7)",
                "1 * 2 = 2 (left: 2 4 7)\nPossible next steps:",
                "4 / 2 = 2 (left: 1 2 7)\n2 * 7 = 14 (left: 1 14)",
                "7 - 2 = 5 (left: 1 4 5)\n4 / 1 = 4 (left: 4 5)",
                "1 * 2 = 2 (left: 2 4 7)\n4 + 7 = 11 (left: 2 11)",
                "1 + 2 = 3 (left: 3 4 7)\n4 * 3 = 12 (left: 12 7)",
                "4 / 2 = 2 (left: 1 2 7)\n7 - 1 = 6 (left: 6)",
                "4 / 2 = 2 (left: 1 2 7)\n7 / 2 = 3.5 (left: 1 3.5)",
                "4 + 7 = 11 (left: 1 2 11)\n2 - 1 = 1 (left: 1 11)",
                "4 / 2 = 2 (left: 1 2 7)\n1 + 2 = 3 (left: 3 7)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                3.0,
                1.001,
                0.003,
                0.003,
                2.001,
                1.002,
                0.0
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 4",
                "3 <- 3",
                "4 <- 7",
                "5 <- 3",
                "6 <- 3",
                "7 <- 7",
                "8 <- 3",
                "9 <- 7"
            ],
            "resampled_steps": [
                "7 - 2 = 5 (left: 1 4 5)\n4 / 1 = 4 (left: 4 5)",
                "7 - 2 = 5 (left: 1 4 5)\n4 / 1 = 4 (left: 4 5)",
                "1 * 2 = 2 (left: 2 4 7)\n4 + 7 = 11 (left: 2 11)",
                "7 - 2 = 5 (left: 1 4 5)\n4 / 1 = 4 (left: 4 5)",
                "4 / 2 = 2 (left: 1 2 7)\n7 / 2 = 3.5 (left: 1 3.5)",
                "7 - 2 = 5 (left: 1 4 5)\n4 / 1 = 4 (left: 4 5)",
                "7 - 2 = 5 (left: 1 4 5)\n4 / 1 = 4 (left: 4 5)",
                "4 / 2 = 2 (left: 1 2 7)\n7 / 2 = 3.5 (left: 1 3.5)",
                "7 - 2 = 5 (left: 1 4 5)\n4 / 1 = 4 (left: 4 5)",
                "4 / 2 = 2 (left: 1 2 7)\n7 / 2 = 3.5 (left: 1 3.5)"
            ]
        },
        "step_3": {
            "steps": [
                "7 - 2 = 5 (left: 1 4 5)\n4 / 1 = 4 (left: 4 5)\n5 - 4 = 1 (left: 1)",
                "7 - 2 = 5 (left: 1 4 5)\n4 / 1 = 4 (left: 4 5)\n4 * 5 = 20 (left: 20 5)",
                "1 * 2 = 2 (left: 2 4 7)\n4 + 7 = 11 (left: 2 11)\n2 + 11 = 13 (left: 13)",
                "7 - 2 = 5 (left: 1 4 5)\n4 / 1 = 4 (left: 4 5)\n5 / 4 = 1.25 (left: 1.25)",
                "4 / 2 = 2 (left: 1 2 7)\n7 / 2 = 3.5 (left: 1 3.5)\n3.5 / 1 = 3.5 (left: 3.5)",
                "7 - 2 = 5 (left: 1 4 5)\n4 / 1 = 4 (left: 4 5)\n5 / 4 = 1.25 (left: 1.25)",
                "7 - 2 = 5 (left: 1 4 5)\n4 / 1 = 4 (left: 4 5)\n4 * 5 = 20 (left: 20 5)",
                "4 / 2 = 2 (left: 1 2 7)\n7 / 2 = 3.5 (left: 1 3.5)\n1 * 3.5 = 3.5 (left: 3.5)",
                "7 - 2 = 5 (left: 1 4 5)\n4 / 1 = 4 (left: 4 5)\n4 - 5 = -1 (left: -1)",
                "4 / 2 = 2 (left: 1 2 7)\n7 / 2 = 3.5 (left: 1 3.5)\n3.5 / 1 = 3.5 (left: 1 3.5)"
            ],
            "values": [
                0.001,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.0,
                0.002,
                0.0,
                0.001
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 3",
                "2 <- 4",
                "3 <- 5",
                "4 <- 4",
                "5 <- 5",
                "6 <- 5",
                "7 <- 2",
                "8 <- 7",
                "9 <- 4"
            ],
            "resampled_steps": [
                "4 / 2 = 2 (left: 1 2 7)\n7 / 2 = 3.5 (left: 1 3.5)\n3.5 / 1 = 3.5 (left: 3.5)",
                "7 - 2 = 5 (left: 1 4 5)\n4 / 1 = 4 (left: 4 5)\n5 / 4 = 1.25 (left: 1.25)",
                "4 / 2 = 2 (left: 1 2 7)\n7 / 2 = 3.5 (left: 1 3.5)\n3.5 / 1 = 3.5 (left: 3.5)",
                "7 - 2 = 5 (left: 1 4 5)\n4 / 1 = 4 (left: 4 5)\n5 / 4 = 1.25 (left: 1.25)",
                "4 / 2 = 2 (left: 1 2 7)\n7 / 2 = 3.5 (left: 1 3.5)\n3.5 / 1 = 3.5 (left: 3.5)",
                "7 - 2 = 5 (left: 1 4 5)\n4 / 1 = 4 (left: 4 5)\n5 / 4 = 1.25 (left: 1.25)",
                "7 - 2 = 5 (left: 1 4 5)\n4 / 1 = 4 (left: 4 5)\n5 / 4 = 1.25 (left: 1.25)",
                "1 * 2 = 2 (left: 2 4 7)\n4 + 7 = 11 (left: 2 11)\n2 + 11 = 13 (left: 13)",
                "4 / 2 = 2 (left: 1 2 7)\n7 / 2 = 3.5 (left: 1 3.5)\n1 * 3.5 = 3.5 (left: 3.5)",
                "4 / 2 = 2 (left: 1 2 7)\n7 / 2 = 3.5 (left: 1 3.5)\n3.5 / 1 = 3.5 (left: 3.5)"
            ]
        },
        "step_4": {
            "steps": [
                "4 / 2 = 2 (left: 1 2 7)\n7 / 2 = 3.5 (left: 1 3.5)\n3.5 / 1 = 3.5 (left: 3.5)\n3.5 * 2 = 7 (left: 7)",
                "7 - 2 = 5 (left: 1 4 5)\n4 / 1 = 4 (left: 4 5)\n5 / 4 = 1.25 (left: 1.25)\n1.25 + 2 = 3.25",
                "4 / 2 = 2 (left: 1 2 7)\n7 / 2 = 3.5 (left: 1 3.5)\n3.5 / 1 = 3.5 (left: 3.5)\nThere are no possible next steps for the input 3.5, as it is already a single number and cannot be combined with any other numbers using the basic operations (+, -, *, /).",
                "7 - 2 = 5 (left: 1 4 5)\n4 / 1 = 4 (left: 4 5)\n5 / 4 = 1.25 (left: 1.25)\n1.25 * 2 = 2.5 (left: 2.5)",
                "4 / 2 = 2 (left: 1 2 7)\n7 / 2 = 3.5 (left: 1 3.5)\n3.5 / 1 = 3.5 (left: 3.5)\n3.5 - 2 = 1.5 (left: 1.5 3.5)",
                "7 - 2 = 5 (left: 1 4 5)\n4 / 1 = 4 (left: 4 5)\n5 / 4 = 1.25 (left: 1.25)\n1.25 / 0.5 = 2.5 (left: 2.5)",
                "7 - 2 = 5 (left: 1 4 5)\n4 / 1 = 4 (left: 4 5)\n5 / 4 = 1.25 (left: 1.25)\n1.25 / 2 = 0.625",
                "1 * 2 = 2 (left: 2 4 7)\n4 + 7 = 11 (left: 2 11)\n2 + 11 = 13 (left: 13)\n13 - 2 = 11 (left: 2 11 13)",
                "4 / 2 = 2 (left: 1 2 7)\n7 / 2 = 3.5 (left: 1 3.5)\n1 * 3.5 = 3.5 (left: 3.5)\nThere are no possible next steps for a single number input of 3.5 as the input is already a single number and there are no other numbers to perform operations with.",
                "4 / 2 = 2 (left: 1 2 7)\n7 / 2 = 3.5 (left: 1 3.5)\n3.5 / 1 = 3.5 (left: 3.5)\n3.5 * 3.5 = 12.25 (left: 12.25)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                2.001,
                0.003,
                0.003,
                20.002,
                0.003,
                0.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.067668
    },
    "902": {
        "input": "2 5 8 11",
        "step_1": {
            "steps": [
                "8 / 2 = 4 (left: 4 5 11)",
                "5 * 8 = 40 (left: 2 40 11)",
                "5 * 2 = 10 (left: 10 8 11)",
                "11 - 2 = 9 (left: 2 5 9)",
                "8 + 2 = 10 (left: 5 10 11)",
                "8 + 2 = 10 (left: 5 10 11)",
                "8 + 11 = 19 (left: 2 5 19)",
                "2 + 5 = 7 (left: 7 8 11)",
                "2 * 5 = 10 (left: 10 8 11)",
                "5 - 8 = -3 (left: 2 -3 11)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                2.001,
                21.001,
                3.0,
                0.003,
                21.001,
                1.002,
                3.0
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 4",
                "3 <- 7",
                "4 <- 7",
                "5 <- 4",
                "6 <- 4",
                "7 <- 4",
                "8 <- 4",
                "9 <- 4"
            ],
            "resampled_steps": [
                "11 - 2 = 9 (left: 2 5 9)",
                "11 - 2 = 9 (left: 2 5 9)",
                "8 + 2 = 10 (left: 5 10 11)",
                "2 + 5 = 7 (left: 7 8 11)",
                "2 + 5 = 7 (left: 7 8 11)",
                "8 + 2 = 10 (left: 5 10 11)",
                "8 + 2 = 10 (left: 5 10 11)",
                "8 + 2 = 10 (left: 5 10 11)",
                "8 + 2 = 10 (left: 5 10 11)",
                "8 + 2 = 10 (left: 5 10 11)"
            ]
        },
        "step_2": {
            "steps": [
                "11 - 2 = 9 (left: 2 5 9)\n9 / 5 = 1.8 (left: 2 1.8)",
                "11 - 2 = 9 (left: 2 5 9)\n5 * 9 = 45 (left: 2 45)",
                "8 + 2 = 10 (left: 5 10 11)\n10 + 5 = 15 (left: 15 11)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 8 = 3 (left: 7 3)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)",
                "8 + 2 = 10 (left: 5 10 11)\n10 - 5 = 5 (left: 5 11)",
                "8 + 2 = 10 (left: 5 10 11)\n10 + 5 = 15 (left: 15 11)",
                "8 + 2 = 10 (left: 5 10 11)\n5 * 10 = 50 (left: 50 11)",
                "8 + 2 = 10 (left: 5 10 11)\n11 - 10 = 1 (left: 5 1)",
                "8 + 2 = 10 (left: 5 10 11)\n10 + 11 = 21 (left: 5 21)"
            ],
            "values": [
                1.002,
                0.003,
                0.003,
                0.001,
                20.001,
                1.0,
                0.002,
                1.002,
                2.0,
                2.001
            ],
            "resampled": [
                "0 <- 8",
                "1 <- 4",
                "2 <- 7",
                "3 <- 4",
                "4 <- 4",
                "5 <- 8",
                "6 <- 4",
                "7 <- 4",
                "8 <- 9",
                "9 <- 4"
            ],
            "resampled_steps": [
                "8 + 2 = 10 (left: 5 10 11)\n11 - 10 = 1 (left: 5 1)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)",
                "8 + 2 = 10 (left: 5 10 11)\n5 * 10 = 50 (left: 50 11)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)",
                "8 + 2 = 10 (left: 5 10 11)\n11 - 10 = 1 (left: 5 1)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)",
                "8 + 2 = 10 (left: 5 10 11)\n10 + 11 = 21 (left: 5 21)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)"
            ]
        },
        "step_3": {
            "steps": [
                "8 + 2 = 10 (left: 5 10 11)\n11 - 10 = 1 (left: 5 1)\n5 + 1 = 6 (left: 6)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)\n8 / 4 = 2 (left: 2 8)",
                "8 + 2 = 10 (left: 5 10 11)\n5 * 10 = 50 (left: 50 11)\n50 + 11 = 61 (left: 11 61)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)\n8 / 4 = 2 (left: 2 8)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)\n4 * 8 = 32 (left: 8 32)",
                "8 + 2 = 10 (left: 5 10 11)\n11 - 10 = 1 (left: 5 1)\n5 - 1 = 4 (left: 4)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)\n8 / 4 = 2 (left: 2 8)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)\n4 + 8 = 12 (left: 8 12)",
                "8 + 2 = 10 (left: 5 10 11)\n10 + 11 = 21 (left: 5 21)\n5 * 21 = 105 (left: 21 105)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)\n8 / 4 = 2 (left: 2 8)"
            ],
            "values": [
                0.003,
                1.0,
                0.003,
                1.001,
                0.003,
                0.003,
                2.001,
                0.003,
                1.002,
                2.0
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 6",
                "2 <- 6",
                "3 <- 9",
                "4 <- 6",
                "5 <- 6",
                "6 <- 9",
                "7 <- 3",
                "8 <- 3",
                "9 <- 1"
            ],
            "resampled_steps": [
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)\n8 / 4 = 2 (left: 2 8)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)\n8 / 4 = 2 (left: 2 8)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)\n8 / 4 = 2 (left: 2 8)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)\n8 / 4 = 2 (left: 2 8)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)\n8 / 4 = 2 (left: 2 8)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)\n8 / 4 = 2 (left: 2 8)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)\n8 / 4 = 2 (left: 2 8)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)\n8 / 4 = 2 (left: 2 8)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)\n8 / 4 = 2 (left: 2 8)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)\n8 / 4 = 2 (left: 2 8)"
            ]
        },
        "step_4": {
            "steps": [
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)\n8 / 4 = 2 (left: 2 8)\n2 + 8 = 10 (left: 10)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)\n8 / 4 = 2 (left: 2 8)\n8 / 2 = 4 (left: 4)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)\n8 / 4 = 2 (left: 2 8)\n2 * 8 = 16 (left: 16)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)\n8 / 4 = 2 (left: 2 8)\n2 * 8 = 16 (left: 16)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)\n8 / 4 = 2 (left: 2 8)\n8 - 2 = 6 (left: 6)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)\n8 / 4 = 2 (left: 2 8)\n2 + 8 = 10 (left: 10)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)\n8 / 4 = 2 (left: 2 8)\n8 / 2 = 4 (left: 4)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)\n8 / 4 = 2 (left: 2 8)\n2 * 8 = 16 (left: 16)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)\n8 / 4 = 2 (left: 2 8)\n2 * 8 = 16 (left: 16)",
                "2 + 5 = 7 (left: 7 8 11)\n11 - 7 = 4 (left: 4 8)\n8 / 4 = 2 (left: 2 8)\n2 * 8 = 16 (left: 16)"
            ],
            "values": [
                20.002,
                0.003,
                0.0,
                0.003,
                0.003,
                0.002,
                0.003,
                0.002,
                0.0,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.102648
    },
    "903": {
        "input": "3 4 4 13",
        "step_1": {
            "steps": [
                "13 - 3 = 10 (left: 4 4 10)",
                "4 - 3 = 1 (left: 1 4 13)",
                "13 / 3 = 4.33 (left: 4.33 4 13)",
                "13 - 4 = 9 (left: 3 4 9)",
                "4 - 3 = 1 (left: 1 4 13)",
                "4 / 3 = 1.33 (left: 3 1.33 13)",
                "4 - 3 = 1 (left: 1 4 13)",
                "4 - 3 = 1 (left: 1 4 13)",
                "13 - 4 = 9 (left: 3 4 9)",
                "3 + 4 = 7 (left: 4 7 13)"
            ],
            "values": [
                20.0,
                1.002,
                1.002,
                0.002,
                1.002,
                2.001,
                1.002,
                1.002,
                41.0,
                21.001
            ],
            "resampled": [
                "0 <- 8",
                "1 <- 8",
                "2 <- 9",
                "3 <- 8",
                "4 <- 0",
                "5 <- 8",
                "6 <- 8",
                "7 <- 8",
                "8 <- 9",
                "9 <- 2"
            ],
            "resampled_steps": [
                "13 - 4 = 9 (left: 3 4 9)",
                "13 - 4 = 9 (left: 3 4 9)",
                "3 + 4 = 7 (left: 4 7 13)",
                "13 - 4 = 9 (left: 3 4 9)",
                "13 - 3 = 10 (left: 4 4 10)",
                "13 - 4 = 9 (left: 3 4 9)",
                "13 - 4 = 9 (left: 3 4 9)",
                "13 - 4 = 9 (left: 3 4 9)",
                "3 + 4 = 7 (left: 4 7 13)",
                "13 / 3 = 4.33 (left: 4.33 4 13)"
            ]
        },
        "step_2": {
            "steps": [
                "13 - 4 = 9 (left: 3 4 9)\n9 - 4 = 5 (left: 3 5)",
                "13 - 4 = 9 (left: 3 4 9)\n9 - 3 = 6 (left: 4 6)",
                "3 + 4 = 7 (left: 4 7 13)\n13 / 4 = 3.25 (left: 3.25 7)",
                "13 - 4 = 9 (left: 3 4 9)\n3 * 4 = 12 (left: 12 9)",
                "13 - 3 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)",
                "13 - 4 = 9 (left: 3 4 9)\n4 / 3 = 1.33 (left: 1.33 9)",
                "13 - 4 = 9 (left: 3 4 9)\n4 / 3 = 1.33 (left: 3 1.33)",
                "13 - 4 = 9 (left: 3 4 9)\n9 - 4 = 5 (left: 3 5)",
                "3 + 4 = 7 (left: 4 7 13)\n13 / 4 = 3.25 (left: 3.25 7)",
                "13 / 3 = 4.33 (left: 4.33 4 13)\n4.33 + 4 = 8.33 (left: 8.33 13)"
            ],
            "values": [
                0.0,
                60.0,
                2.001,
                0.003,
                60.0,
                1.001,
                1.001,
                0.001,
                3.0,
                2.0
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 1",
                "2 <- 1",
                "3 <- 9",
                "4 <- 4",
                "5 <- 4",
                "6 <- 4",
                "7 <- 4",
                "8 <- 1",
                "9 <- 2"
            ],
            "resampled_steps": [
                "13 - 3 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)",
                "13 - 4 = 9 (left: 3 4 9)\n9 - 3 = 6 (left: 4 6)",
                "13 - 4 = 9 (left: 3 4 9)\n9 - 3 = 6 (left: 4 6)",
                "13 / 3 = 4.33 (left: 4.33 4 13)\n4.33 + 4 = 8.33 (left: 8.33 13)",
                "13 - 3 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)",
                "13 - 3 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)",
                "13 - 3 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)",
                "13 - 3 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)",
                "13 - 4 = 9 (left: 3 4 9)\n9 - 3 = 6 (left: 4 6)",
                "3 + 4 = 7 (left: 4 7 13)\n13 / 4 = 3.25 (left: 3.25 7)"
            ]
        },
        "step_3": {
            "steps": [
                "13 - 3 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)\n6 - 4 = 2 (left: 2)",
                "13 - 4 = 9 (left: 3 4 9)\n9 - 3 = 6 (left: 4 6)\n6 - 4 = 2 (left: 2)",
                "13 - 4 = 9 (left: 3 4 9)\n9 - 3 = 6 (left: 4 6)\n6 - 4 = 2 (left: 2)",
                "13 / 3 = 4.33 (left: 4.33 4 13)\n4.33 + 4 = 8.33 (left: 8.33 13)\n8.33 + 13 = 21.33 (left: 21.33)",
                "13 - 3 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)\n6 / 4 = 1.5 (left: 1.5)",
                "13 - 3 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)\n6 - 4 = 2 (left: 2)",
                "13 - 3 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "13 - 3 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)\n4 + 6 = 10 (left: 10)",
                "13 - 4 = 9 (left: 3 4 9)\n9 - 3 = 6 (left: 4 6)\n3 + 9 = 12 (left: 12)",
                "3 + 4 = 7 (left: 4 7 13)\n13 / 4 = 3.25 (left: 3.25 7)\n7 / 3.25 = 2.15 (left: 2.15)"
            ],
            "values": [
                0.003,
                0.001,
                0.001,
                0.002,
                0.002,
                0.002,
                40.0,
                0.003,
                0.001,
                0.001
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 6",
                "2 <- 6",
                "3 <- 6",
                "4 <- 6",
                "5 <- 6",
                "6 <- 6",
                "7 <- 6",
                "8 <- 6",
                "9 <- 6"
            ],
            "resampled_steps": [
                "13 - 3 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "13 - 3 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "13 - 3 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "13 - 3 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "13 - 3 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "13 - 3 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "13 - 3 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "13 - 3 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "13 - 3 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "13 - 3 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)"
            ]
        },
        "step_4": {
            "steps": [
                "13 - 3 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * (4 - (13 - 3)) = 24",
                "13 - 3 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * (4 - (13 - 3)) = 24",
                "13 - 3 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * (4 - (13 - 3)) = 24",
                "13 - 3 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * (4 + (13 - 3)) = 24",
                "13 - 3 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * (4 - (13 - 3)) = 24",
                "13 - 3 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (13 - 3) - (4 - 4) * 6 = 24",
                "13 - 3 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * (4 - (13 - 3)) = 24",
                "13 - 3 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * (4 - (13 - 3)) = 24",
                "13 - 3 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (13 - 3) - (10 - 4) * 6 = 24",
                "13 - 3 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * (10 - (13 - 3)) = 24"
            ],
            "values": [
                60.0,
                40.001,
                60.0,
                60.0,
                60.0,
                0.003,
                60.0,
                60.0,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.137962
    },
    "904": {
        "input": "6 7 8 9",
        "step_1": {
            "steps": [
                "8 - 7 = 1 (left: 6 1 9)",
                "8 - 7 = 1 (left: 6 1 9)",
                "9 - 6 = 3 (left: 3 7 8)",
                "8 - 7 = 1 (left: 6 1 9)",
                "8 + 9 = 17 (left: 6 7 17)",
                "7 * 8 = 56 (left: 6 9 56)",
                "7 + 8 = 15 (left: 6 9 15)",
                "9 - 6 = 3 (left: 3 7 8)",
                "6 + 7 = 13 (left: 8 9 13)",
                "8 - 7 = 1 (left: 6 1 9)"
            ],
            "values": [
                2.001,
                3.0,
                0.003,
                3.0,
                0.003,
                3.0,
                1.002,
                1.002,
                3.0,
                2.001
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 3",
                "2 <- 8",
                "3 <- 5",
                "4 <- 5",
                "5 <- 6",
                "6 <- 1",
                "7 <- 0",
                "8 <- 0",
                "9 <- 6"
            ],
            "resampled_steps": [
                "8 - 7 = 1 (left: 6 1 9)",
                "8 - 7 = 1 (left: 6 1 9)",
                "6 + 7 = 13 (left: 8 9 13)",
                "7 * 8 = 56 (left: 6 9 56)",
                "7 * 8 = 56 (left: 6 9 56)",
                "7 + 8 = 15 (left: 6 9 15)",
                "8 - 7 = 1 (left: 6 1 9)",
                "8 - 7 = 1 (left: 6 1 9)",
                "8 - 7 = 1 (left: 6 1 9)",
                "7 + 8 = 15 (left: 6 9 15)"
            ]
        },
        "step_2": {
            "steps": [
                "8 - 7 = 1 (left: 6 1 9)\n1 * 9 = 9 (left: 6 9)",
                "8 - 7 = 1 (left: 6 1 9)\n6 * 1 = 6 (left: 6 9)",
                "6 + 7 = 13 (left: 8 9 13)\n8 + 9 = 17 (left: 17 13)",
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)",
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)",
                "7 + 8 = 15 (left: 6 9 15)\n6 * 9 = 54 (left: 54 15)",
                "8 - 7 = 1 (left: 6 1 9)\n9 - 6 = 3 (left: 3 6)",
                "8 - 7 = 1 (left: 6 1 9)\n1 + 9 = 10 (left: 6 10)",
                "8 - 7 = 1 (left: 6 1 9)\n9 - 6 = 3 (left: 3 9)",
                "7 + 8 = 15 (left: 6 9 15)\n15 - 6 = 9 (left: 9 9)"
            ],
            "values": [
                1.002,
                0.003,
                0.003,
                2.001,
                2.001,
                0.002,
                0.0,
                2.001,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 7",
                "1 <- 0",
                "2 <- 3",
                "3 <- 3",
                "4 <- 0",
                "5 <- 3",
                "6 <- 4",
                "7 <- 4",
                "8 <- 4",
                "9 <- 4"
            ],
            "resampled_steps": [
                "8 - 7 = 1 (left: 6 1 9)\n1 + 9 = 10 (left: 6 10)",
                "8 - 7 = 1 (left: 6 1 9)\n1 * 9 = 9 (left: 6 9)",
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)",
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)",
                "8 - 7 = 1 (left: 6 1 9)\n1 * 9 = 9 (left: 6 9)",
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)",
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)",
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)",
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)",
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)"
            ]
        },
        "step_3": {
            "steps": [
                "8 - 7 = 1 (left: 6 1 9)\n1 + 9 = 10 (left: 6 10)\n6 * 10 = 60 (left: 60)",
                "8 - 7 = 1 (left: 6 1 9)\n1 * 9 = 9 (left: 6 9)\n9 - 6 = 3 (left: 3 9)",
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)\n56 - 9.33 = 46.67 (left: 46.67)",
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)\n56 / 9.33 = 6 (left: 6)",
                "8 - 7 = 1 (left: 6 1 9)\n1 * 9 = 9 (left: 6 9)\n9 - 6 = 3 (left: 3 9)",
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)\n9.33 - 56 = -46.67 (left: -46.67)",
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)\n5 + 3 = 8 (left: 25 8)",
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)\n9.33 * 56 = 522.48 (left: 522.48)",
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)\n9.33 + 56 = 65.33 (left: 65.33)",
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)\n56 + 9.33 = 65.33 (left: 65.33)"
            ],
            "values": [
                0.001,
                0.003,
                0.002,
                0.0,
                0.003,
                0.001,
                0.003,
                0.001,
                0.002,
                0.001
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 4",
                "2 <- 1",
                "3 <- 5",
                "4 <- 8",
                "5 <- 6",
                "6 <- 6",
                "7 <- 2",
                "8 <- 8",
                "9 <- 6"
            ],
            "resampled_steps": [
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)\n5 + 3 = 8 (left: 25 8)",
                "8 - 7 = 1 (left: 6 1 9)\n1 * 9 = 9 (left: 6 9)\n9 - 6 = 3 (left: 3 9)",
                "8 - 7 = 1 (left: 6 1 9)\n1 * 9 = 9 (left: 6 9)\n9 - 6 = 3 (left: 3 9)",
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)\n9.33 - 56 = -46.67 (left: -46.67)",
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)\n9.33 + 56 = 65.33 (left: 65.33)",
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)\n5 + 3 = 8 (left: 25 8)",
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)\n5 + 3 = 8 (left: 25 8)",
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)\n56 - 9.33 = 46.67 (left: 46.67)",
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)\n9.33 + 56 = 65.33 (left: 65.33)",
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)\n5 + 3 = 8 (left: 25 8)"
            ]
        },
        "step_4": {
            "steps": [
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)\n5 + 3 = 8 (left: 25 8)\n25 + 8 = 33 (left: 8 33)",
                "8 - 7 = 1 (left: 6 1 9)\n1 * 9 = 9 (left: 6 9)\n9 - 6 = 3 (left: 3 9)\n9 / 3 = 3 (left: 3 9)",
                "8 - 7 = 1 (left: 6 1 9)\n1 * 9 = 9 (left: 6 9)\n9 - 6 = 3 (left: 3 9)\n3 + 9 = 12 (left: 9 12)",
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)\n9.33 - 56 = -46.67 (left: -46.67)\n-46.67 - 2 = -48.67",
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)\n9.33 + 56 = 65.33 (left: 65.33)\nIt looks like the input is already a single number, so there are no possible next steps to take.",
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)\n5 + 3 = 8 (left: 25 8)\n25 + 8 = 33 (left: 8 33)",
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)\n5 + 3 = 8 (left: 25 8)\n25 + 8 = 33 (left: 33)",
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)\n56 - 9.33 = 46.67 (left: 46.67)\nThere are many possible next steps for the input 46.67, including addition, subtraction, multiplication, and division with various numbers. Without further context or constraints, it's difficult to provide a specific next step.",
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)\n9.33 + 56 = 65.33 (left: 65.33)\nThere are many possible next steps for the input 65.33, as it can be combined in various ways using addition, subtraction, multiplication, and division with other numbers. Without specific instructions on what operation or number to use, it is difficult to provide a specific next step.",
                "7 * 8 = 56 (left: 6 9 56)\n56 / 6 = 9.33 (left: 9.33 56)\n5 + 3 = 8 (left: 25 8)\n25 / 8 = 3.125 (left: 3.125 8)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                20.001,
                0.003,
                0.003,
                1.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.17348
    },
    "905": {
        "input": "1 11 11 13",
        "step_1": {
            "steps": [
                "1 + 11 = 12 (left: 11 12 13)",
                "13 - 1 = 12 (left: 11 11 12)",
                "11 / 1 = 11 (left: 11 11 13)",
                "11 - 1 = 10 (left: 10 11 13)",
                "1 * 11 = 11 (left: 11 11 13)",
                "1 + 11 = 12 (left: 11 11 13)",
                "11 - 1 = 10 (left: 10 11 13)",
                "11 - 1 = 10 (left: 10 11 13)",
                "11 - 1 = 10 (left: 10 11 13)",
                "13 - 11 = 2 (left: 1 11 2)"
            ],
            "values": [
                3.0,
                0.003,
                0.003,
                0.003,
                0.003,
                1.002,
                0.003,
                0.003,
                1.002,
                2.0
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 0",
                "3 <- 0",
                "4 <- 9",
                "5 <- 9",
                "6 <- 9",
                "7 <- 0",
                "8 <- 9",
                "9 <- 9"
            ],
            "resampled_steps": [
                "1 + 11 = 12 (left: 11 12 13)",
                "1 + 11 = 12 (left: 11 12 13)",
                "1 + 11 = 12 (left: 11 12 13)",
                "1 + 11 = 12 (left: 11 12 13)",
                "13 - 11 = 2 (left: 1 11 2)",
                "13 - 11 = 2 (left: 1 11 2)",
                "13 - 11 = 2 (left: 1 11 2)",
                "1 + 11 = 12 (left: 11 12 13)",
                "13 - 11 = 2 (left: 1 11 2)",
                "13 - 11 = 2 (left: 1 11 2)"
            ]
        },
        "step_2": {
            "steps": [
                "1 + 11 = 12 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)",
                "1 + 11 = 12 (left: 11 12 13)\n11 * 12 = 132 (left: 132 13)",
                "1 + 11 = 12 (left: 11 12 13)\n13 + 11 = 24 (left: 12 24)",
                "1 + 11 = 12 (left: 11 12 13)\n11 * 12 = 132 (left: 13 132)",
                "13 - 11 = 2 (left: 1 11 2)\n1 + 11 = 12 (left: 12 2)",
                "13 - 11 = 2 (left: 1 11 2)\n2 * 11 = 22 (left: 1 22)",
                "13 - 11 = 2 (left: 1 11 2)\n2 * 11 = 22 (left: 1 22)",
                "1 + 11 = 12 (left: 11 12 13)\n12 - 11 = 1 (left: 1 13)",
                "13 - 11 = 2 (left: 1 11 2)\n2 * 11 = 22 (left: 1 22)",
                "13 - 11 = 2 (left: 1 11 2)\n2 * 1 = 2 (left: 2 2)"
            ],
            "values": [
                60.0,
                1.002,
                0.003,
                0.003,
                60.0,
                0.003,
                0.003,
                20.002,
                0.002,
                0.001
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 4",
                "3 <- 4",
                "4 <- 0",
                "5 <- 4",
                "6 <- 4",
                "7 <- 0",
                "8 <- 4",
                "9 <- 0"
            ],
            "resampled_steps": [
                "1 + 11 = 12 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)",
                "1 + 11 = 12 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)",
                "13 - 11 = 2 (left: 1 11 2)\n1 + 11 = 12 (left: 12 2)",
                "13 - 11 = 2 (left: 1 11 2)\n1 + 11 = 12 (left: 12 2)",
                "1 + 11 = 12 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)",
                "13 - 11 = 2 (left: 1 11 2)\n1 + 11 = 12 (left: 12 2)",
                "13 - 11 = 2 (left: 1 11 2)\n1 + 11 = 12 (left: 12 2)",
                "1 + 11 = 12 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)",
                "13 - 11 = 2 (left: 1 11 2)\n1 + 11 = 12 (left: 12 2)",
                "1 + 11 = 12 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)"
            ]
        },
        "step_3": {
            "steps": [
                "1 + 11 = 12 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "1 + 11 = 12 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "13 - 11 = 2 (left: 1 11 2)\n1 + 11 = 12 (left: 12 2)\n12 / 2 = 6 (left: 6)",
                "13 - 11 = 2 (left: 1 11 2)\n1 + 11 = 12 (left: 12 2)\n12 * 2 = 24 (left: 2 24)",
                "1 + 11 = 12 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "13 - 11 = 2 (left: 1 11 2)\n1 + 11 = 12 (left: 12 2)\n12 + 2 = 14 (left: 2 14)",
                "13 - 11 = 2 (left: 1 11 2)\n1 + 11 = 12 (left: 12 2)\n12 + 2 = 14 (left: 14)",
                "1 + 11 = 12 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "13 - 11 = 2 (left: 1 11 2)\n1 + 11 = 12 (left: 12 2)\n12 + 2 = 14 (left: 14)",
                "1 + 11 = 12 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)"
            ],
            "values": [
                0.002,
                0.003,
                0.002,
                40.001,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 3",
                "3 <- 3",
                "4 <- 3",
                "5 <- 3",
                "6 <- 3",
                "7 <- 3",
                "8 <- 3",
                "9 <- 3"
            ],
            "resampled_steps": [
                "13 - 11 = 2 (left: 1 11 2)\n1 + 11 = 12 (left: 12 2)\n12 * 2 = 24 (left: 2 24)",
                "13 - 11 = 2 (left: 1 11 2)\n1 + 11 = 12 (left: 12 2)\n12 * 2 = 24 (left: 2 24)",
                "13 - 11 = 2 (left: 1 11 2)\n1 + 11 = 12 (left: 12 2)\n12 * 2 = 24 (left: 2 24)",
                "13 - 11 = 2 (left: 1 11 2)\n1 + 11 = 12 (left: 12 2)\n12 * 2 = 24 (left: 2 24)",
                "13 - 11 = 2 (left: 1 11 2)\n1 + 11 = 12 (left: 12 2)\n12 * 2 = 24 (left: 2 24)",
                "13 - 11 = 2 (left: 1 11 2)\n1 + 11 = 12 (left: 12 2)\n12 * 2 = 24 (left: 2 24)",
                "13 - 11 = 2 (left: 1 11 2)\n1 + 11 = 12 (left: 12 2)\n12 * 2 = 24 (left: 2 24)",
                "13 - 11 = 2 (left: 1 11 2)\n1 + 11 = 12 (left: 12 2)\n12 * 2 = 24 (left: 2 24)",
                "13 - 11 = 2 (left: 1 11 2)\n1 + 11 = 12 (left: 12 2)\n12 * 2 = 24 (left: 2 24)",
                "13 - 11 = 2 (left: 1 11 2)\n1 + 11 = 12 (left: 12 2)\n12 * 2 = 24 (left: 2 24)"
            ]
        },
        "step_4": {
            "steps": [
                "13 - 11 = 2 (left: 1 11 2)\n1 + 11 = 12 (left: 12 2)\n12 * 2 = 24 (left: 2 24)\n2 + 24 = 26 (left: 26)",
                "13 - 11 = 2 (left: 1 11 2)\n1 + 11 = 12 (left: 12 2)\n12 * 2 = 24 (left: 2 24)\n24 / 2 = 12 (left: 2 12)",
                "13 - 11 = 2 (left: 1 11 2)\n1 + 11 = 12 (left: 12 2)\n12 * 2 = 24 (left: 2 24)\n2 + 24 = 26 (left: 26)",
                "13 - 11 = 2 (left: 1 11 2)\n1 + 11 = 12 (left: 12 2)\n12 * 2 = 24 (left: 2 24)\n2 * 24 = 48 (left: 48)",
                "13 - 11 = 2 (left: 1 11 2)\n1 + 11 = 12 (left: 12 2)\n12 * 2 = 24 (left: 2 24)\n24 / 2 = 12 (left: 12)",
                "13 - 11 = 2 (left: 1 11 2)\n1 + 11 = 12 (left: 12 2)\n12 * 2 = 24 (left: 2 24)\n24 - 2 = 22 (left: 22)",
                "13 - 11 = 2 (left: 1 11 2)\n1 + 11 = 12 (left: 12 2)\n12 * 2 = 24 (left: 2 24)\n2 * 24 = 48 (left: 48)",
                "13 - 11 = 2 (left: 1 11 2)\n1 + 11 = 12 (left: 12 2)\n12 * 2 = 24 (left: 2 24)\n2 + 24 = 26 (left: 24 26)",
                "13 - 11 = 2 (left: 1 11 2)\n1 + 11 = 12 (left: 12 2)\n12 * 2 = 24 (left: 2 24)\n2 * 24 = 48 (left: 48)",
                "13 - 11 = 2 (left: 1 11 2)\n1 + 11 = 12 (left: 12 2)\n12 * 2 = 24 (left: 2 24)\n24 / 2 = 12 (left: 2 12)"
            ],
            "values": [
                0.002,
                60.0,
                0.003,
                0.001,
                0.003,
                0.0,
                0.003,
                0.003,
                0.001,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.20544999999999997
    },
    "906": {
        "input": "1 8 10 11",
        "step_1": {
            "steps": [
                "8 + 1 = 9 (left: 9 10 11)",
                "11 - 1 = 10 (left: 8 10 10)",
                "8 / 1 = 8 (left: 8 10 11)",
                "8 + 1 = 9 (left: 9 10 11)",
                "8 + 1 = 9 (left: 9 10 11)",
                "11 - 1 = 10 (left: 8 10 10)",
                "1 * 8 = 8 (left: 8 10 11)",
                "10 - 1 = 9 (left: 9 8 11)",
                "8 + 1 = 9 (left: 9 10 11)",
                "10 - 1 = 9 (left: 8 9 11)"
            ],
            "values": [
                1.002,
                3.0,
                2.001,
                2.001,
                3.0,
                2.0,
                1.002,
                2.001,
                1.002,
                3.0
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 0",
                "2 <- 5",
                "3 <- 2",
                "4 <- 3",
                "5 <- 4",
                "6 <- 4",
                "7 <- 1",
                "8 <- 5",
                "9 <- 5"
            ],
            "resampled_steps": [
                "8 / 1 = 8 (left: 8 10 11)",
                "8 + 1 = 9 (left: 9 10 11)",
                "11 - 1 = 10 (left: 8 10 10)",
                "8 / 1 = 8 (left: 8 10 11)",
                "8 + 1 = 9 (left: 9 10 11)",
                "8 + 1 = 9 (left: 9 10 11)",
                "8 + 1 = 9 (left: 9 10 11)",
                "11 - 1 = 10 (left: 8 10 10)",
                "11 - 1 = 10 (left: 8 10 10)",
                "11 - 1 = 10 (left: 8 10 10)"
            ]
        },
        "step_2": {
            "steps": [
                "8 / 1 = 8 (left: 8 10 11)\n10 + 11 = 21 (left: 8 21)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)",
                "11 - 1 = 10 (left: 8 10 10)\n10 / 8 = 1.25 (left: 1.25 10)",
                "8 / 1 = 8 (left: 8 10 11)\n10 / 8 = 1.25 (left: 1.25 11)",
                "8 + 1 = 9 (left: 9 10 11)\n10 / 11 = 0.909 (left: 9 0.909)",
                "8 + 1 = 9 (left: 9 10 11)\n9 + 10 = 19 (left: 19 11)",
                "8 + 1 = 9 (left: 9 10 11)\n10 - 9 = 1 (left: 1 11)",
                "11 - 1 = 10 (left: 8 10 10)\n10 - 8 = 2 (left: 2 10)",
                "11 - 1 = 10 (left: 8 10 10)\n10 / 8 = 1.25 (left: 1.25 10)",
                "11 - 1 = 10 (left: 8 10 10)\n10 * 10 = 100 (left: 8 100)"
            ],
            "values": [
                0.003,
                22.0,
                1.002,
                0.0,
                1.001,
                0.003,
                1.001,
                1.0,
                2.0,
                0.002
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 1",
                "3 <- 1",
                "4 <- 1",
                "5 <- 1",
                "6 <- 1",
                "7 <- 4",
                "8 <- 1",
                "9 <- 1"
            ],
            "resampled_steps": [
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)",
                "8 + 1 = 9 (left: 9 10 11)\n10 / 11 = 0.909 (left: 9 0.909)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)"
            ]
        },
        "step_3": {
            "steps": [
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)\n9 / 1 = 9 (left: 9)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)\n9 / 1 = 9 (left: 9)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)\n9 - 1 = 8 (left: 8)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)\n9 * 1 = 9 (left: 9)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)\n9 / 1 = 9 (left: 9)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)\n9 * 1 = 9 (left: 9)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)\n9 / 1 = 9 (left: 9)",
                "8 + 1 = 9 (left: 9 10 11)\n10 / 11 = 0.909 (left: 9 0.909)\n9 / 0.909 = 9.909 (left: 9.909)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)\n9 * 1 = 9 (left: 9)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)\n9 + 1 = 10 (left: 1 10)"
            ],
            "values": [
                0.001,
                0.001,
                0.001,
                0.002,
                0.002,
                0.002,
                0.001,
                0.001,
                0.0,
                60.0
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 9",
                "2 <- 9",
                "3 <- 9",
                "4 <- 9",
                "5 <- 9",
                "6 <- 9",
                "7 <- 9",
                "8 <- 9",
                "9 <- 9"
            ],
            "resampled_steps": [
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)\n9 + 1 = 10 (left: 1 10)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)\n9 + 1 = 10 (left: 1 10)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)\n9 + 1 = 10 (left: 1 10)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)\n9 + 1 = 10 (left: 1 10)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)\n9 + 1 = 10 (left: 1 10)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)\n9 + 1 = 10 (left: 1 10)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)\n9 + 1 = 10 (left: 1 10)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)\n9 + 1 = 10 (left: 1 10)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)\n9 + 1 = 10 (left: 1 10)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)\n9 + 1 = 10 (left: 1 10)"
            ]
        },
        "step_4": {
            "steps": [
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)\n9 + 1 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)\n9 + 1 = 10 (left: 1 10)\n1 + 10 = 11 (left: 11)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)\n9 + 1 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)\n9 + 1 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)\n9 + 1 = 10 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)\n9 + 1 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9 10)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)\n9 + 1 = 10 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)\n9 + 1 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)\n9 + 1 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "8 + 1 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)\n9 + 1 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)"
            ],
            "values": [
                0.001,
                0.003,
                0.003,
                0.003,
                0.002,
                1.001,
                0.003,
                0.0,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.238688
    },
    "907": {
        "input": "2 3 6 9",
        "step_1": {
            "steps": [
                "2 * 3 = 6 (left: 6 6 9)",
                "6 / 2 = 3 (left: 3 3 9)",
                "6 * 2 = 12 (left: 12 3 9)",
                "3 * 2 = 6 (left: 6 6 9)",
                "6 + 3 = 9 (left: 2 9 9)",
                "6 + 3 = 9 (left: 2 9 9)",
                "3 * 2 = 6 (left: 6 6 9)",
                "9 - 3 = 6 (left: 2 6 9)",
                "9 - 6 = 3 (left: 2 3 9)",
                "2 + 3 = 5 (left: 5 6 9)"
            ],
            "values": [
                3.0,
                20.002,
                20.001,
                3.0,
                2.001,
                0.003,
                1.002,
                0.003,
                1.002,
                3.0
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 0",
                "2 <- 3",
                "3 <- 6",
                "4 <- 2",
                "5 <- 3",
                "6 <- 2",
                "7 <- 1",
                "8 <- 2",
                "9 <- 2"
            ],
            "resampled_steps": [
                "6 / 2 = 3 (left: 3 3 9)",
                "2 * 3 = 6 (left: 6 6 9)",
                "3 * 2 = 6 (left: 6 6 9)",
                "3 * 2 = 6 (left: 6 6 9)",
                "6 * 2 = 12 (left: 12 3 9)",
                "3 * 2 = 6 (left: 6 6 9)",
                "6 * 2 = 12 (left: 12 3 9)",
                "6 / 2 = 3 (left: 3 3 9)",
                "6 * 2 = 12 (left: 12 3 9)",
                "6 * 2 = 12 (left: 12 3 9)"
            ]
        },
        "step_2": {
            "steps": [
                "6 / 2 = 3 (left: 3 3 9)\n9 - 3 = 6 (left: 3 6)",
                "2 * 3 = 6 (left: 6 6 9)\n6 / 6 = 1 (left: 1 9)",
                "3 * 2 = 6 (left: 6 6 9)\n9 + 6 = 15 (left: 6 15)",
                "3 * 2 = 6 (left: 6 6 9)\n9 / 6 = 1.5 (left: 1.5 6)",
                "6 * 2 = 12 (left: 12 3 9)\n9 * 3 = 27 (left: 12 27)",
                "3 * 2 = 6 (left: 6 6 9)\n6 - 6 = 0 (left: 0 9)",
                "6 * 2 = 12 (left: 12 3 9)\n12 * 3 = 36 (left: 36 9)",
                "6 / 2 = 3 (left: 3 3 9)\n3 * 9 = 27 (left: 3 27)",
                "6 * 2 = 12 (left: 12 3 9)\n12 * 3 = 36 (left: 36 9)",
                "6 * 2 = 12 (left: 12 3 9)\n12 + 3 = 15 (left: 15 9)"
            ],
            "values": [
                0.0,
                0.001,
                1.001,
                2.001,
                0.003,
                40.001,
                40.001,
                20.002,
                40.001,
                60.0
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 6",
                "2 <- 5",
                "3 <- 6",
                "4 <- 5",
                "5 <- 9",
                "6 <- 9",
                "7 <- 5",
                "8 <- 8",
                "9 <- 9"
            ],
            "resampled_steps": [
                "6 * 2 = 12 (left: 12 3 9)\n12 * 3 = 36 (left: 36 9)",
                "6 * 2 = 12 (left: 12 3 9)\n12 * 3 = 36 (left: 36 9)",
                "3 * 2 = 6 (left: 6 6 9)\n6 - 6 = 0 (left: 0 9)",
                "6 * 2 = 12 (left: 12 3 9)\n12 * 3 = 36 (left: 36 9)",
                "3 * 2 = 6 (left: 6 6 9)\n6 - 6 = 0 (left: 0 9)",
                "6 * 2 = 12 (left: 12 3 9)\n12 + 3 = 15 (left: 15 9)",
                "6 * 2 = 12 (left: 12 3 9)\n12 + 3 = 15 (left: 15 9)",
                "3 * 2 = 6 (left: 6 6 9)\n6 - 6 = 0 (left: 0 9)",
                "6 * 2 = 12 (left: 12 3 9)\n12 * 3 = 36 (left: 36 9)",
                "6 * 2 = 12 (left: 12 3 9)\n12 + 3 = 15 (left: 15 9)"
            ]
        },
        "step_3": {
            "steps": [
                "6 * 2 = 12 (left: 12 3 9)\n12 * 3 = 36 (left: 36 9)\n36 / 9 = 4 (left: 4)",
                "6 * 2 = 12 (left: 12 3 9)\n12 * 3 = 36 (left: 36 9)\n36 - 9 = 27 (left: 9 27)",
                "3 * 2 = 6 (left: 6 6 9)\n6 - 6 = 0 (left: 0 9)\n9 / 9 = 1 (left: 1)",
                "6 * 2 = 12 (left: 12 3 9)\n12 * 3 = 36 (left: 36 9)\n36 - 9 = 27 (left: 9 27)",
                "3 * 2 = 6 (left: 6 6 9)\n6 - 6 = 0 (left: 0 9)\nThere are no possible next steps as there are only two numbers provided.",
                "6 * 2 = 12 (left: 12 3 9)\n12 + 3 = 15 (left: 15 9)\n15 * 9 = 135 (left: 9 135)",
                "6 * 2 = 12 (left: 12 3 9)\n12 + 3 = 15 (left: 15 9)\n15 * 9 = 135 (left: 9 135)",
                "3 * 2 = 6 (left: 6 6 9)\n6 - 6 = 0 (left: 0 9)\n9 / 0 = undefined (cannot divide by 0)",
                "6 * 2 = 12 (left: 12 3 9)\n12 * 3 = 36 (left: 36 9)\n36 / 9 = 4 (left: 4 9)",
                "6 * 2 = 12 (left: 12 3 9)\n12 + 3 = 15 (left: 15 9)\n15 * 9 = 135 (left: 9 135)"
            ],
            "values": [
                0.003,
                21.001,
                0.003,
                0.002,
                0.003,
                41.0,
                0.003,
                0.003,
                60.0,
                2.001
            ],
            "resampled": [
                "0 <- 5",
                "1 <- 8",
                "2 <- 5",
                "3 <- 5",
                "4 <- 5",
                "5 <- 8",
                "6 <- 8",
                "7 <- 8",
                "8 <- 8",
                "9 <- 8"
            ],
            "resampled_steps": [
                "6 * 2 = 12 (left: 12 3 9)\n12 + 3 = 15 (left: 15 9)\n15 * 9 = 135 (left: 9 135)",
                "6 * 2 = 12 (left: 12 3 9)\n12 * 3 = 36 (left: 36 9)\n36 / 9 = 4 (left: 4 9)",
                "6 * 2 = 12 (left: 12 3 9)\n12 + 3 = 15 (left: 15 9)\n15 * 9 = 135 (left: 9 135)",
                "6 * 2 = 12 (left: 12 3 9)\n12 + 3 = 15 (left: 15 9)\n15 * 9 = 135 (left: 9 135)",
                "6 * 2 = 12 (left: 12 3 9)\n12 + 3 = 15 (left: 15 9)\n15 * 9 = 135 (left: 9 135)",
                "6 * 2 = 12 (left: 12 3 9)\n12 * 3 = 36 (left: 36 9)\n36 / 9 = 4 (left: 4 9)",
                "6 * 2 = 12 (left: 12 3 9)\n12 * 3 = 36 (left: 36 9)\n36 / 9 = 4 (left: 4 9)",
                "6 * 2 = 12 (left: 12 3 9)\n12 * 3 = 36 (left: 36 9)\n36 / 9 = 4 (left: 4 9)",
                "6 * 2 = 12 (left: 12 3 9)\n12 * 3 = 36 (left: 36 9)\n36 / 9 = 4 (left: 4 9)",
                "6 * 2 = 12 (left: 12 3 9)\n12 * 3 = 36 (left: 36 9)\n36 / 9 = 4 (left: 4 9)"
            ]
        },
        "step_4": {
            "steps": [
                "6 * 2 = 12 (left: 12 3 9)\n12 + 3 = 15 (left: 15 9)\n15 * 9 = 135 (left: 9 135)\n9 + 135 = 144 (left: 135 144)",
                "6 * 2 = 12 (left: 12 3 9)\n12 * 3 = 36 (left: 36 9)\n36 / 9 = 4 (left: 4 9)\n4 * 9 = 36 (left: 9 36)",
                "6 * 2 = 12 (left: 12 3 9)\n12 + 3 = 15 (left: 15 9)\n15 * 9 = 135 (left: 9 135)\n135 / 9 = 15 (left: 15)",
                "6 * 2 = 12 (left: 12 3 9)\n12 + 3 = 15 (left: 15 9)\n15 * 9 = 135 (left: 9 135)\n135 - 9 = 126 (left: 9 126)",
                "6 * 2 = 12 (left: 12 3 9)\n12 + 3 = 15 (left: 15 9)\n15 * 9 = 135 (left: 9 135)\n15 - 9 = 6 (left: 6 9)",
                "6 * 2 = 12 (left: 12 3 9)\n12 * 3 = 36 (left: 36 9)\n36 / 9 = 4 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)",
                "6 * 2 = 12 (left: 12 3 9)\n12 * 3 = 36 (left: 36 9)\n36 / 9 = 4 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)",
                "6 * 2 = 12 (left: 12 3 9)\n12 * 3 = 36 (left: 36 9)\n36 / 9 = 4 (left: 4 9)\n4 * 9 = 36 (left: 36)",
                "6 * 2 = 12 (left: 12 3 9)\n12 * 3 = 36 (left: 36 9)\n36 / 9 = 4 (left: 4 9)\n4 * 9 = 36 (left: 9 36)",
                "6 * 2 = 12 (left: 12 3 9)\n12 * 3 = 36 (left: 36 9)\n36 / 9 = 4 (left: 4 9)\n9 - 4 = 5 (left: 5 9)"
            ],
            "values": [
                0.003,
                0.003,
                0.0,
                20.002,
                0.003,
                3.0,
                1.001,
                0.0,
                20.002,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.272956
    },
    "908": {
        "input": "1 3 5 9",
        "step_1": {
            "steps": [
                "1 + 3 = 4 (left: 4 5 9)",
                "1 * 3 = 3 (left: 3 5 9)",
                "3 + 5 = 8 (left: 1 8 9)",
                "9 - 5 = 4 (left: 1 3 4)",
                "5 - 3 = 2 (left: 1 2 9)",
                "3 + 9 = 12 (left: 1 5 12)",
                "1 + 3 = 4 (left: 4 5 9)",
                "9 - 5 = 4 (left: 1 3 4)",
                "5 * 9 = 45 (left: 1 45 9)",
                "5 - 1 = 4 (left: 3 4 9)"
            ],
            "values": [
                1.002,
                20.002,
                0.003,
                2.0,
                2.001,
                1.002,
                3.0,
                3.0,
                20.001,
                60.0
            ],
            "resampled": [
                "0 <- 7",
                "1 <- 9",
                "2 <- 1",
                "3 <- 8",
                "4 <- 9",
                "5 <- 8",
                "6 <- 9",
                "7 <- 9",
                "8 <- 0",
                "9 <- 1"
            ],
            "resampled_steps": [
                "9 - 5 = 4 (left: 1 3 4)",
                "5 - 1 = 4 (left: 3 4 9)",
                "1 * 3 = 3 (left: 3 5 9)",
                "5 * 9 = 45 (left: 1 45 9)",
                "5 - 1 = 4 (left: 3 4 9)",
                "5 * 9 = 45 (left: 1 45 9)",
                "5 - 1 = 4 (left: 3 4 9)",
                "5 - 1 = 4 (left: 3 4 9)",
                "1 + 3 = 4 (left: 4 5 9)",
                "1 * 3 = 3 (left: 3 5 9)"
            ]
        },
        "step_2": {
            "steps": [
                "9 - 5 = 4 (left: 1 3 4)\n3 + 4 = 7 (left: 7)",
                "5 - 1 = 4 (left: 3 4 9)\n9 / 3 = 3 (left: 4 3)",
                "1 * 3 = 3 (left: 3 5 9)\n9 / 3 = 3 (left: 3 5)",
                "5 * 9 = 45 (left: 1 45 9)\n45 - 1 = 44 (left: 44 9)",
                "5 - 1 = 4 (left: 3 4 9)\n9 / 3 = 3 (left: 3 4)",
                "5 * 9 = 45 (left: 1 45 9)\n1 + 45 = 46 (left: 46 9)",
                "5 - 1 = 4 (left: 3 4 9)\n3 * 4 = 12 (left: 12 9)",
                "5 - 1 = 4 (left: 3 4 9)\n3 + 4 = 7 (left: 7 9)",
                "1 + 3 = 4 (left: 4 5 9)\n9 / 4 = 2.25 (left: 2.25 9)",
                "1 * 3 = 3 (left: 3 5 9)\n9 - 5 = 4 (left: 3 4)"
            ],
            "values": [
                0.003,
                20.001,
                0.0,
                1.002,
                1.001,
                0.002,
                0.003,
                1.001,
                2.0,
                1.0
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 7",
                "2 <- 7",
                "3 <- 1",
                "4 <- 1",
                "5 <- 9",
                "6 <- 1",
                "7 <- 8",
                "8 <- 1",
                "9 <- 1"
            ],
            "resampled_steps": [
                "5 * 9 = 45 (left: 1 45 9)\n45 - 1 = 44 (left: 44 9)",
                "5 - 1 = 4 (left: 3 4 9)\n3 + 4 = 7 (left: 7 9)",
                "5 - 1 = 4 (left: 3 4 9)\n3 + 4 = 7 (left: 7 9)",
                "5 - 1 = 4 (left: 3 4 9)\n9 / 3 = 3 (left: 4 3)",
                "5 - 1 = 4 (left: 3 4 9)\n9 / 3 = 3 (left: 4 3)",
                "1 * 3 = 3 (left: 3 5 9)\n9 - 5 = 4 (left: 3 4)",
                "5 - 1 = 4 (left: 3 4 9)\n9 / 3 = 3 (left: 4 3)",
                "1 + 3 = 4 (left: 4 5 9)\n9 / 4 = 2.25 (left: 2.25 9)",
                "5 - 1 = 4 (left: 3 4 9)\n9 / 3 = 3 (left: 4 3)",
                "5 - 1 = 4 (left: 3 4 9)\n9 / 3 = 3 (left: 4 3)"
            ]
        },
        "step_3": {
            "steps": [
                "5 * 9 = 45 (left: 1 45 9)\n45 - 1 = 44 (left: 44 9)\n44 + 9 = 53 (left: 9 53)",
                "5 - 1 = 4 (left: 3 4 9)\n3 + 4 = 7 (left: 7 9)\n7 * 9 = 63 (left: 9 63)",
                "5 - 1 = 4 (left: 3 4 9)\n3 + 4 = 7 (left: 7 9)\n7 * 9 = 63 (left: 63)",
                "5 - 1 = 4 (left: 3 4 9)\n9 / 3 = 3 (left: 4 3)\n4 * 3 = 12 (left: 12)",
                "5 - 1 = 4 (left: 3 4 9)\n9 / 3 = 3 (left: 4 3)\n4 - 3 = 1 (left: 1)",
                "1 * 3 = 3 (left: 3 5 9)\n9 - 5 = 4 (left: 3 4)\n4 - 3 = 1 (left: 1)",
                "5 - 1 = 4 (left: 3 4 9)\n9 / 3 = 3 (left: 4 3)\n4 * 3 = 12",
                "1 + 3 = 4 (left: 4 5 9)\n9 / 4 = 2.25 (left: 2.25 9)\n9 - 2.25 = 6.75 (left: 6.75)",
                "5 - 1 = 4 (left: 3 4 9)\n9 / 3 = 3 (left: 4 3)\n4 * 3 = 12 (left: 12)",
                "5 - 1 = 4 (left: 3 4 9)\n9 / 3 = 3 (left: 4 3)\n4 * 3 = 12 (left: 12)"
            ],
            "values": [
                1.002,
                0.002,
                0.002,
                0.0,
                0.002,
                0.003,
                0.003,
                0.001,
                0.002,
                0.002
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 0",
                "3 <- 0",
                "4 <- 0",
                "5 <- 0",
                "6 <- 0",
                "7 <- 0",
                "8 <- 0",
                "9 <- 0"
            ],
            "resampled_steps": [
                "5 * 9 = 45 (left: 1 45 9)\n45 - 1 = 44 (left: 44 9)\n44 + 9 = 53 (left: 9 53)",
                "5 * 9 = 45 (left: 1 45 9)\n45 - 1 = 44 (left: 44 9)\n44 + 9 = 53 (left: 9 53)",
                "5 * 9 = 45 (left: 1 45 9)\n45 - 1 = 44 (left: 44 9)\n44 + 9 = 53 (left: 9 53)",
                "5 * 9 = 45 (left: 1 45 9)\n45 - 1 = 44 (left: 44 9)\n44 + 9 = 53 (left: 9 53)",
                "5 * 9 = 45 (left: 1 45 9)\n45 - 1 = 44 (left: 44 9)\n44 + 9 = 53 (left: 9 53)",
                "5 * 9 = 45 (left: 1 45 9)\n45 - 1 = 44 (left: 44 9)\n44 + 9 = 53 (left: 9 53)",
                "5 * 9 = 45 (left: 1 45 9)\n45 - 1 = 44 (left: 44 9)\n44 + 9 = 53 (left: 9 53)",
                "5 * 9 = 45 (left: 1 45 9)\n45 - 1 = 44 (left: 44 9)\n44 + 9 = 53 (left: 9 53)",
                "5 * 9 = 45 (left: 1 45 9)\n45 - 1 = 44 (left: 44 9)\n44 + 9 = 53 (left: 9 53)",
                "5 * 9 = 45 (left: 1 45 9)\n45 - 1 = 44 (left: 44 9)\n44 + 9 = 53 (left: 9 53)"
            ]
        },
        "step_4": {
            "steps": [
                "5 * 9 = 45 (left: 1 45 9)\n45 - 1 = 44 (left: 44 9)\n44 + 9 = 53 (left: 9 53)\n9 * 53 = 477 (left: 477)",
                "5 * 9 = 45 (left: 1 45 9)\n45 - 1 = 44 (left: 44 9)\n44 + 9 = 53 (left: 9 53)\n53 - 9 = 44 (left: 44)",
                "5 * 9 = 45 (left: 1 45 9)\n45 - 1 = 44 (left: 44 9)\n44 + 9 = 53 (left: 9 53)\n9 + 53 = 62 (left: 62)",
                "5 * 9 = 45 (left: 1 45 9)\n45 - 1 = 44 (left: 44 9)\n44 + 9 = 53 (left: 9 53)\n9 * 53 = 477 (left: 477)",
                "5 * 9 = 45 (left: 1 45 9)\n45 - 1 = 44 (left: 44 9)\n44 + 9 = 53 (left: 9 53)\n53 - 9 = 44 (left: 44)",
                "5 * 9 = 45 (left: 1 45 9)\n45 - 1 = 44 (left: 44 9)\n44 + 9 = 53 (left: 9 53)\n53 / 9 = 5.88888888889 (left: 5.88888888889)",
                "5 * 9 = 45 (left: 1 45 9)\n45 - 1 = 44 (left: 44 9)\n44 + 9 = 53 (left: 9 53)\n53 - 9 = 44 (left: 44)",
                "5 * 9 = 45 (left: 1 45 9)\n45 - 1 = 44 (left: 44 9)\n44 + 9 = 53 (left: 9 53)\n9 * 53 = 477 (left: 477)",
                "5 * 9 = 45 (left: 1 45 9)\n45 - 1 = 44 (left: 44 9)\n44 + 9 = 53 (left: 9 53)\n53 / 9 = 5.88888888889 (left: 5.88888888889)",
                "5 * 9 = 45 (left: 1 45 9)\n45 - 1 = 44 (left: 44 9)\n44 + 9 = 53 (left: 9 53)\n9 + 53 = 62 (left: 62)"
            ],
            "values": [
                0.003,
                0.003,
                0.002,
                0.003,
                0.001,
                0.0,
                0.001,
                0.002,
                0.0,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.306483
    },
    "909": {
        "input": "3 3 7 12",
        "step_1": {
            "steps": [
                "7 - 3 = 4 (left: 3 4 12)",
                "7 - 3 = 4 (left: 3 4 12)",
                "3 * 3 = 9 (left: 9 7 12)",
                "12 - 3 = 9 (left: 3 7 9)",
                "12 - 7 = 5 (left: 3 3 5)",
                "3 * 3 = 9 (left: 9 7 12)",
                "7 + 3 = 10 (left: 3 10 12)",
                "3 + 3 = 6 (left: 6 7 12)",
                "3 / 3 = 1 (left: 1 7 12)",
                "3 / 3 = 1 (left: 1 7 12)"
            ],
            "values": [
                60.0,
                20.002,
                22.0,
                20.002,
                2.001,
                1.002,
                0.003,
                2.001,
                1.002,
                1.002
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 0",
                "3 <- 3",
                "4 <- 2",
                "5 <- 3",
                "6 <- 2",
                "7 <- 1",
                "8 <- 0",
                "9 <- 1"
            ],
            "resampled_steps": [
                "12 - 3 = 9 (left: 3 7 9)",
                "12 - 3 = 9 (left: 3 7 9)",
                "7 - 3 = 4 (left: 3 4 12)",
                "12 - 3 = 9 (left: 3 7 9)",
                "3 * 3 = 9 (left: 9 7 12)",
                "12 - 3 = 9 (left: 3 7 9)",
                "3 * 3 = 9 (left: 9 7 12)",
                "7 - 3 = 4 (left: 3 4 12)",
                "7 - 3 = 4 (left: 3 4 12)",
                "7 - 3 = 4 (left: 3 4 12)"
            ]
        },
        "step_2": {
            "steps": [
                "12 - 3 = 9 (left: 3 7 9)\n9 + 3 = 12 (left: 7 12)",
                "12 - 3 = 9 (left: 3 7 9)\n10 - 5 = 5 (left: 4 5)",
                "7 - 3 = 4 (left: 3 4 12)\n3 + 4 = 7 (left: 7 12)",
                "12 - 3 = 9 (left: 3 7 9)\n7 - 3 = 4 (left: 4 9)",
                "3 * 3 = 9 (left: 9 7 12)\n12 - 9 = 3 (left: 3 7)",
                "12 - 3 = 9 (left: 3 7 9)\nPossible next steps:",
                "3 * 3 = 9 (left: 9 7 12)\n12 - 7 = 5 (left: 9 5)",
                "7 - 3 = 4 (left: 3 4 12)\n4 * 3 = 12 (left: 12 12)",
                "7 - 3 = 4 (left: 3 4 12)\n4 * 3 = 12 (left: 12 12)",
                "7 - 3 = 4 (left: 3 4 12)\n4 * 3 = 12 (left: 12 12)"
            ],
            "values": [
                1.002,
                1.001,
                1.002,
                60.0,
                1.0,
                60.0,
                0.003,
                40.001,
                40.0,
                60.0
            ],
            "resampled": [
                "0 <- 5",
                "1 <- 3",
                "2 <- 7",
                "3 <- 5",
                "4 <- 9",
                "5 <- 5",
                "6 <- 8",
                "7 <- 3",
                "8 <- 3",
                "9 <- 5"
            ],
            "resampled_steps": [
                "12 - 3 = 9 (left: 3 7 9)\nPossible next steps:",
                "12 - 3 = 9 (left: 3 7 9)\n7 - 3 = 4 (left: 4 9)",
                "7 - 3 = 4 (left: 3 4 12)\n4 * 3 = 12 (left: 12 12)",
                "12 - 3 = 9 (left: 3 7 9)\nPossible next steps:",
                "7 - 3 = 4 (left: 3 4 12)\n4 * 3 = 12 (left: 12 12)",
                "12 - 3 = 9 (left: 3 7 9)\nPossible next steps:",
                "7 - 3 = 4 (left: 3 4 12)\n4 * 3 = 12 (left: 12 12)",
                "12 - 3 = 9 (left: 3 7 9)\n7 - 3 = 4 (left: 4 9)",
                "12 - 3 = 9 (left: 3 7 9)\n7 - 3 = 4 (left: 4 9)",
                "12 - 3 = 9 (left: 3 7 9)\nPossible next steps:"
            ]
        },
        "step_3": {
            "steps": [
                "12 - 3 = 9 (left: 3 7 9)\nPossible next steps:\nThere are no possible next steps for the given input.",
                "12 - 3 = 9 (left: 3 7 9)\n7 - 3 = 4 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)",
                "7 - 3 = 4 (left: 3 4 12)\n4 * 3 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "12 - 3 = 9 (left: 3 7 9)\nPossible next steps:\nThere are no possible next steps as the input has already been fully processed.",
                "7 - 3 = 4 (left: 3 4 12)\n4 * 3 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "12 - 3 = 9 (left: 3 7 9)\nPossible next steps:\nThere are no possible next steps for this input.",
                "7 - 3 = 4 (left: 3 4 12)\n4 * 3 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "12 - 3 = 9 (left: 3 7 9)\n7 - 3 = 4 (left: 4 9)\n9 - 4 = 5 (left: 5 9)",
                "12 - 3 = 9 (left: 3 7 9)\n7 - 3 = 4 (left: 4 9)\n9 / 4 = 2.25 (left: 4 2.25)",
                "12 - 3 = 9 (left: 3 7 9)\nPossible next steps:\nIt seems like the input is missing. Can you please provide the input so that I can generate the possible next steps? Thank you!"
            ],
            "values": [
                0.003,
                3.0,
                0.0,
                20.002,
                20.001,
                0.003,
                0.0,
                0.003,
                21.001,
                0.003
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 3",
                "3 <- 3",
                "4 <- 4",
                "5 <- 4",
                "6 <- 4",
                "7 <- 8",
                "8 <- 3",
                "9 <- 4"
            ],
            "resampled_steps": [
                "12 - 3 = 9 (left: 3 7 9)\nPossible next steps:\nThere are no possible next steps as the input has already been fully processed.",
                "12 - 3 = 9 (left: 3 7 9)\nPossible next steps:\nThere are no possible next steps as the input has already been fully processed.",
                "12 - 3 = 9 (left: 3 7 9)\nPossible next steps:\nThere are no possible next steps as the input has already been fully processed.",
                "12 - 3 = 9 (left: 3 7 9)\nPossible next steps:\nThere are no possible next steps as the input has already been fully processed.",
                "7 - 3 = 4 (left: 3 4 12)\n4 * 3 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "7 - 3 = 4 (left: 3 4 12)\n4 * 3 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "7 - 3 = 4 (left: 3 4 12)\n4 * 3 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "12 - 3 = 9 (left: 3 7 9)\n7 - 3 = 4 (left: 4 9)\n9 / 4 = 2.25 (left: 4 2.25)",
                "12 - 3 = 9 (left: 3 7 9)\nPossible next steps:\nThere are no possible next steps as the input has already been fully processed.",
                "7 - 3 = 4 (left: 3 4 12)\n4 * 3 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)"
            ]
        },
        "step_4": {
            "steps": [
                "12 - 3 = 9 (left: 3 7 9)\nPossible next steps:\nThere are no possible next steps as the input has already been fully processed.\nThere are no possible next steps as the input has already been fully processed.",
                "12 - 3 = 9 (left: 3 7 9)\nPossible next steps:\nThere are no possible next steps as the input has already been fully processed.\nThere are no possible next steps as the input has already been fully processed.",
                "12 - 3 = 9 (left: 3 7 9)\nPossible next steps:\nThere are no possible next steps as the input has already been fully processed.\nThere are no possible next steps as the input has already been fully processed.",
                "12 - 3 = 9 (left: 3 7 9)\nPossible next steps:\nThere are no possible next steps as the input has already been fully processed.\nInput is already fully processed. No further steps can be taken.",
                "7 - 3 = 4 (left: 3 4 12)\n4 * 3 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)\nThere are no possible next steps as there are no numbers provided after the input.",
                "7 - 3 = 4 (left: 3 4 12)\n4 * 3 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)\nThere are no possible next steps because there is no input given.",
                "7 - 3 = 4 (left: 3 4 12)\n4 * 3 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)\nThere are no possible next steps as there are no numbers to operate on.",
                "12 - 3 = 9 (left: 3 7 9)\n7 - 3 = 4 (left: 4 9)\n9 / 4 = 2.25 (left: 4 2.25)\n4 * 2.25 = 9 (left: 9 2.25)",
                "12 - 3 = 9 (left: 3 7 9)\nPossible next steps:\nThere are no possible next steps as the input has already been fully processed.\nThere are no possible next steps as the input has already been fully processed.",
                "7 - 3 = 4 (left: 3 4 12)\n4 * 3 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)\nThere are no possible next steps for the input 0 as there are no numbers to perform operations on."
            ],
            "values": [
                20.002,
                20.002,
                40.001,
                0.003,
                0.003,
                0.003,
                0.003,
                1.001,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.338096
    },
    "910": {
        "input": "4 5 7 9",
        "step_1": {
            "steps": [
                "5 + 7 = 12 (left: 4 12 9)",
                "5 - 7 = -2 (left: 4 -2 9)",
                "5 + 7 = 12 (left: 4 12 9)",
                "5 - 7 = -2 (left: 4 -2 9)",
                "5 + 7 = 12 (left: 4 9 12)",
                "4 * 5 = 20 (left: 7 20 9)",
                "4 * 5 = 20 (left: 7 20 9)",
                "9 - 7 = 2 (left: 4 5 2)",
                "7 / 4 = 1.75 (left: 1.75 5 9)",
                "7 - 5 = 2 (left: 4 9 2)"
            ],
            "values": [
                3.0,
                1.001,
                2.001,
                3.0,
                41.0,
                2.001,
                3.0,
                2.0,
                2.0,
                2.001
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 4",
                "2 <- 4",
                "3 <- 4",
                "4 <- 6",
                "5 <- 4",
                "6 <- 4",
                "7 <- 4",
                "8 <- 4",
                "9 <- 4"
            ],
            "resampled_steps": [
                "5 + 7 = 12 (left: 4 9 12)",
                "5 + 7 = 12 (left: 4 9 12)",
                "5 + 7 = 12 (left: 4 9 12)",
                "5 + 7 = 12 (left: 4 9 12)",
                "4 * 5 = 20 (left: 7 20 9)",
                "5 + 7 = 12 (left: 4 9 12)",
                "5 + 7 = 12 (left: 4 9 12)",
                "5 + 7 = 12 (left: 4 9 12)",
                "5 + 7 = 12 (left: 4 9 12)",
                "5 + 7 = 12 (left: 4 9 12)"
            ]
        },
        "step_2": {
            "steps": [
                "5 + 7 = 12 (left: 4 9 12)\n12 / 4 = 3 (left: 3 9 12)",
                "5 + 7 = 12 (left: 4 9 12)\n12 - 4 = 8 (left: 9 8)",
                "5 + 7 = 12 (left: 4 9 12)\n12 - 4 = 8 (left: 8 9)",
                "5 + 7 = 12 (left: 4 9 12)\n4 / 9 = 0.444 (left: 0.444 12)",
                "4 * 5 = 20 (left: 7 20 9)\n9 - 7 = 2 (left: 2 20)",
                "5 + 7 = 12 (left: 4 9 12)\n4 + 9 = 13 (left: 13 12)",
                "5 + 7 = 12 (left: 4 9 12)\n12 - 9 = 3 (left: 3 4)",
                "5 + 7 = 12 (left: 4 9 12)\n12 / 4 = 3 (left: 3 9)",
                "5 + 7 = 12 (left: 4 9 12)\n4 + 9 = 13 (left: 9 12 13)",
                "5 + 7 = 12 (left: 4 9 12)\n4 * 9 = 36 (left: 36 12)"
            ],
            "values": [
                0.003,
                0.003,
                1.002,
                1.002,
                22.0,
                0.003,
                1.001,
                0.003,
                2.001,
                60.0
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 9",
                "2 <- 9",
                "3 <- 9",
                "4 <- 9",
                "5 <- 4",
                "6 <- 9",
                "7 <- 9",
                "8 <- 9",
                "9 <- 9"
            ],
            "resampled_steps": [
                "4 * 5 = 20 (left: 7 20 9)\n9 - 7 = 2 (left: 2 20)",
                "5 + 7 = 12 (left: 4 9 12)\n4 * 9 = 36 (left: 36 12)",
                "5 + 7 = 12 (left: 4 9 12)\n4 * 9 = 36 (left: 36 12)",
                "5 + 7 = 12 (left: 4 9 12)\n4 * 9 = 36 (left: 36 12)",
                "5 + 7 = 12 (left: 4 9 12)\n4 * 9 = 36 (left: 36 12)",
                "4 * 5 = 20 (left: 7 20 9)\n9 - 7 = 2 (left: 2 20)",
                "5 + 7 = 12 (left: 4 9 12)\n4 * 9 = 36 (left: 36 12)",
                "5 + 7 = 12 (left: 4 9 12)\n4 * 9 = 36 (left: 36 12)",
                "5 + 7 = 12 (left: 4 9 12)\n4 * 9 = 36 (left: 36 12)",
                "5 + 7 = 12 (left: 4 9 12)\n4 * 9 = 36 (left: 36 12)"
            ]
        },
        "step_3": {
            "steps": [
                "4 * 5 = 20 (left: 7 20 9)\n9 - 7 = 2 (left: 2 20)\n20 - 2 = 18 (left: 2 18)",
                "5 + 7 = 12 (left: 4 9 12)\n4 * 9 = 36 (left: 36 12)\n36 / 12 = 3 (left: 3)",
                "5 + 7 = 12 (left: 4 9 12)\n4 * 9 = 36 (left: 36 12)\n36 / 12 = 3 (left: 3)",
                "5 + 7 = 12 (left: 4 9 12)\n4 * 9 = 36 (left: 36 12)\n36 / 12 = 3 (left: 3)",
                "5 + 7 = 12 (left: 4 9 12)\n4 * 9 = 36 (left: 36 12)\n36 * 12 = 432 (left: 432)",
                "4 * 5 = 20 (left: 7 20 9)\n9 - 7 = 2 (left: 2 20)\n20 - 2 = 18 (left: 18)",
                "5 + 7 = 12 (left: 4 9 12)\n4 * 9 = 36 (left: 36 12)\n36 * 12 = 432 (left: 432)",
                "5 + 7 = 12 (left: 4 9 12)\n4 * 9 = 36 (left: 36 12)\n36 / 12 = 3 (left: 3)",
                "5 + 7 = 12 (left: 4 9 12)\n4 * 9 = 36 (left: 36 12)\n36 * 12 = 432 (left: 432)",
                "5 + 7 = 12 (left: 4 9 12)\n4 * 9 = 36 (left: 36 12)\n36 * 12 = 432 (left: 432)"
            ],
            "values": [
                20.002,
                0.002,
                0.002,
                0.0,
                0.002,
                20.0,
                0.003,
                0.001,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 5",
                "1 <- 5",
                "2 <- 0",
                "3 <- 0",
                "4 <- 5",
                "5 <- 0",
                "6 <- 0",
                "7 <- 5",
                "8 <- 5",
                "9 <- 5"
            ],
            "resampled_steps": [
                "4 * 5 = 20 (left: 7 20 9)\n9 - 7 = 2 (left: 2 20)\n20 - 2 = 18 (left: 18)",
                "4 * 5 = 20 (left: 7 20 9)\n9 - 7 = 2 (left: 2 20)\n20 - 2 = 18 (left: 18)",
                "4 * 5 = 20 (left: 7 20 9)\n9 - 7 = 2 (left: 2 20)\n20 - 2 = 18 (left: 2 18)",
                "4 * 5 = 20 (left: 7 20 9)\n9 - 7 = 2 (left: 2 20)\n20 - 2 = 18 (left: 2 18)",
                "4 * 5 = 20 (left: 7 20 9)\n9 - 7 = 2 (left: 2 20)\n20 - 2 = 18 (left: 18)",
                "4 * 5 = 20 (left: 7 20 9)\n9 - 7 = 2 (left: 2 20)\n20 - 2 = 18 (left: 2 18)",
                "4 * 5 = 20 (left: 7 20 9)\n9 - 7 = 2 (left: 2 20)\n20 - 2 = 18 (left: 2 18)",
                "4 * 5 = 20 (left: 7 20 9)\n9 - 7 = 2 (left: 2 20)\n20 - 2 = 18 (left: 18)",
                "4 * 5 = 20 (left: 7 20 9)\n9 - 7 = 2 (left: 2 20)\n20 - 2 = 18 (left: 18)",
                "4 * 5 = 20 (left: 7 20 9)\n9 - 7 = 2 (left: 2 20)\n20 - 2 = 18 (left: 18)"
            ]
        },
        "step_4": {
            "steps": [
                "4 * 5 = 20 (left: 7 20 9)\n9 - 7 = 2 (left: 2 20)\n20 - 2 = 18 (left: 18)\nThere are no possible next steps for the number 18 as it is a prime number and cannot be formed by combining the previous numbers using basic arithmetic operations.",
                "4 * 5 = 20 (left: 7 20 9)\n9 - 7 = 2 (left: 2 20)\n20 - 2 = 18 (left: 18)\nThere are no possible next steps for the input 18 because it is a single number and there are no other numbers to perform operations on.",
                "4 * 5 = 20 (left: 7 20 9)\n9 - 7 = 2 (left: 2 20)\n20 - 2 = 18 (left: 2 18)\n18 - 2 = 16 (left: 16)",
                "4 * 5 = 20 (left: 7 20 9)\n9 - 7 = 2 (left: 2 20)\n20 - 2 = 18 (left: 2 18)\n18 - 2 = 16 (left: 16)",
                "4 * 5 = 20 (left: 7 20 9)\n9 - 7 = 2 (left: 2 20)\n20 - 2 = 18 (left: 18)\nThere are no possible next steps for the number 18 as it is a prime number and cannot be formed by combining the previous numbers using basic arithmetic operations.",
                "4 * 5 = 20 (left: 7 20 9)\n9 - 7 = 2 (left: 2 20)\n20 - 2 = 18 (left: 2 18)\n2 * 18 = 36 (left: 36)",
                "4 * 5 = 20 (left: 7 20 9)\n9 - 7 = 2 (left: 2 20)\n20 - 2 = 18 (left: 2 18)\n18 - 2 = 16 (left: 16)",
                "4 * 5 = 20 (left: 7 20 9)\n9 - 7 = 2 (left: 2 20)\n20 - 2 = 18 (left: 18)\nThere are no possible next steps with the input 18, as it is a single number and not a combination of numbers.",
                "4 * 5 = 20 (left: 7 20 9)\n9 - 7 = 2 (left: 2 20)\n20 - 2 = 18 (left: 18)\nThere are no possible next steps as there are no other numbers to perform operations with.",
                "4 * 5 = 20 (left: 7 20 9)\n9 - 7 = 2 (left: 2 20)\n20 - 2 = 18 (left: 18)\nThere are no possible next steps with the input of 18."
            ],
            "values": [
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                0.001,
                0.001,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.37167700000000004
    },
    "911": {
        "input": "1 2 8 13",
        "step_1": {
            "steps": [
                "8 + 2 = 10 (left: 1 10 13)",
                "8 - 2 = 6 (left: 1 6 13)",
                "2 * 8 = 16 (left: 1 16 13)",
                "1 + 2 = 3 (left: 3 8 13)",
                "8 - 2 = 6 (left: 1 6 13)",
                "2 * 13 = 26 (left: 1 8 26)",
                "2 * 8 = 16 (left: 1 16 13)",
                "13 - 1 = 12 (left: 2 8 12)",
                "2 + 8 = 10 (left: 10 12)",
                "13 - 1 = 12 (left: 2 8 12)"
            ],
            "values": [
                0.003,
                2.001,
                0.003,
                60.0,
                0.003,
                0.002,
                0.003,
                1.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 3",
                "3 <- 3",
                "4 <- 3",
                "5 <- 3",
                "6 <- 7",
                "7 <- 3",
                "8 <- 3",
                "9 <- 3"
            ],
            "resampled_steps": [
                "1 + 2 = 3 (left: 3 8 13)",
                "1 + 2 = 3 (left: 3 8 13)",
                "1 + 2 = 3 (left: 3 8 13)",
                "1 + 2 = 3 (left: 3 8 13)",
                "1 + 2 = 3 (left: 3 8 13)",
                "1 + 2 = 3 (left: 3 8 13)",
                "13 - 1 = 12 (left: 2 8 12)",
                "1 + 2 = 3 (left: 3 8 13)",
                "1 + 2 = 3 (left: 3 8 13)",
                "1 + 2 = 3 (left: 3 8 13)"
            ]
        },
        "step_2": {
            "steps": [
                "1 + 2 = 3 (left: 3 8 13)\n13 - 3 = 10 (left: 8 10)",
                "1 + 2 = 3 (left: 3 8 13)\n8 - 3 = 5 (left: 5 8 13)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)",
                "1 + 2 = 3 (left: 3 8 13)\n13 / 8 = 1.625 (left: 1.625 8)",
                "1 + 2 = 3 (left: 3 8 13)\n13 / 3 = 4.33 (left: 4.33 8)",
                "1 + 2 = 3 (left: 3 8 13)\n8 + 3 = 11 (left: 11 13)",
                "13 - 1 = 12 (left: 2 8 12)\n2 + 8 = 10 (left: 10 10)",
                "1 + 2 = 3 (left: 3 8 13)\n8 / 3 = 2.67 (left: 2.67 13)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)",
                "1 + 2 = 3 (left: 3 8 13)\n13 - 3 = 10 (left: 8 10)"
            ],
            "values": [
                1.002,
                2.001,
                60.0,
                3.0,
                1.002,
                60.0,
                1.002,
                2.001,
                60.0,
                1.001
            ],
            "resampled": [
                "0 <- 8",
                "1 <- 5",
                "2 <- 5",
                "3 <- 4",
                "4 <- 8",
                "5 <- 5",
                "6 <- 2",
                "7 <- 2",
                "8 <- 8",
                "9 <- 5"
            ],
            "resampled_steps": [
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)",
                "1 + 2 = 3 (left: 3 8 13)\n8 + 3 = 11 (left: 11 13)",
                "1 + 2 = 3 (left: 3 8 13)\n8 + 3 = 11 (left: 11 13)",
                "1 + 2 = 3 (left: 3 8 13)\n13 / 3 = 4.33 (left: 4.33 8)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)",
                "1 + 2 = 3 (left: 3 8 13)\n8 + 3 = 11 (left: 11 13)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)",
                "1 + 2 = 3 (left: 3 8 13)\n8 + 3 = 11 (left: 11 13)"
            ]
        },
        "step_3": {
            "steps": [
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "1 + 2 = 3 (left: 3 8 13)\n8 + 3 = 11 (left: 11 13)\n11 / 13 = 0.846 (left: 0.846)",
                "1 + 2 = 3 (left: 3 8 13)\n8 + 3 = 11 (left: 11 13)\n11 * 13 = 143 (left: 143)",
                "1 + 2 = 3 (left: 3 8 13)\n13 / 3 = 4.33 (left: 4.33 8)\n8 - 4.33 = 3.67 (left: 3.67)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 - 13 = -2 (left: -2)",
                "1 + 2 = 3 (left: 3 8 13)\n8 + 3 = 11 (left: 11 13)\n11 * 13 = 143 (left: 143)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 - 13 = -2 (left: -2)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 - 13 = -2 (left: -2 13)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 / 13 = 0.846 (left: 0.846)",
                "1 + 2 = 3 (left: 3 8 13)\n8 + 3 = 11 (left: 11 13)\n11 * 13 = 143 (left: 143)"
            ],
            "values": [
                40.0,
                0.002,
                0.003,
                0.001,
                0.003,
                0.003,
                0.002,
                0.002,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 0",
                "3 <- 0",
                "4 <- 0",
                "5 <- 0",
                "6 <- 0",
                "7 <- 0",
                "8 <- 0",
                "9 <- 0"
            ],
            "resampled_steps": [
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)"
            ]
        },
        "step_4": {
            "steps": [
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 2) + 8) + 13 = 24",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 2) + 8) + 13 = 24",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 2) + 8) + 13 = 24",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 2) + 8) + 13 = 24",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 2) + 8) + 13 = 24",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 2) + 8) + 13 = 24",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 2) + 8) + 13 = 24",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 2) + 8) + 13 = 24",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 2) + 8) + 13 = 24",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 2) + 8) + 13 = 24"
            ],
            "values": [
                60.0,
                40.001,
                40.001,
                60.0,
                40.001,
                60.0,
                60.0,
                60.0,
                40.0,
                60.0
            ]
        },
        "results": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            }
        ],
        "cost": 0.405852
    },
    "912": {
        "input": "4 6 6 9",
        "step_1": {
            "steps": [
                "9 - 6 = 3 (left: 4 6 3 9)",
                "6 / 4 = 1.5 (left: 1.5 6 9)",
                "4 + 6 = 10 (left: 6 6 9)",
                "9 - 6 = 3 (left: 4 6 3)",
                "6 - 4 = 2 (left: 2 6 9)",
                "4 + 6 = 10 (left: 6 6 9 10)",
                "6 * 4 = 24 (left: 24 6 9)",
                "6 / 4 = 1.5 (left: 1.5 6 9)",
                "9 - 6 = 3 (left: 4 6 3)",
                "6 - 4 = 2 (left: 2 6 9)"
            ],
            "values": [
                2.0,
                3.0,
                2.0,
                22.0,
                2.001,
                2.0,
                41.0,
                3.0,
                60.0,
                2.001
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 3",
                "2 <- 8",
                "3 <- 6",
                "4 <- 3",
                "5 <- 8",
                "6 <- 6",
                "7 <- 6",
                "8 <- 8",
                "9 <- 8"
            ],
            "resampled_steps": [
                "6 * 4 = 24 (left: 24 6 9)",
                "9 - 6 = 3 (left: 4 6 3)",
                "9 - 6 = 3 (left: 4 6 3)",
                "6 * 4 = 24 (left: 24 6 9)",
                "9 - 6 = 3 (left: 4 6 3)",
                "9 - 6 = 3 (left: 4 6 3)",
                "6 * 4 = 24 (left: 24 6 9)",
                "6 * 4 = 24 (left: 24 6 9)",
                "9 - 6 = 3 (left: 4 6 3)",
                "9 - 6 = 3 (left: 4 6 3)"
            ]
        },
        "step_2": {
            "steps": [
                "6 * 4 = 24 (left: 24 6 9)\n24 - 6 = 18 (left: 18 9)",
                "9 - 6 = 3 (left: 4 6 3)\n6 / 3 = 2 (left: 4 2)",
                "9 - 6 = 3 (left: 4 6 3)\n4 / 6 = 0.6667 (left: 0.6667 3)",
                "6 * 4 = 24 (left: 24 6 9)\n24 * 6 = 144 (left: 144 9)",
                "9 - 6 = 3 (left: 4 6 3)\n3 + 4 = 7 (left: 7 6)",
                "9 - 6 = 3 (left: 4 6 3)\n10 * 5 = 50 (left: 50 2)",
                "6 * 4 = 24 (left: 24 6 9)\n24 / 6 = 4 (left: 4 9)",
                "6 * 4 = 24 (left: 24 6 9)\n6 - 9 = -3 (left: -3 9)",
                "9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 3)",
                "9 - 6 = 3 (left: 4 6 3)\n4 - 3 = 1 (left: 1 6)"
            ],
            "values": [
                0.003,
                1.001,
                3.0,
                60.0,
                0.003,
                1.001,
                20.001,
                0.002,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 8",
                "2 <- 9",
                "3 <- 8",
                "4 <- 9",
                "5 <- 8",
                "6 <- 8",
                "7 <- 9",
                "8 <- 9",
                "9 <- 9"
            ],
            "resampled_steps": [
                "9 - 6 = 3 (left: 4 6 3)\n4 / 6 = 0.6667 (left: 0.6667 3)",
                "9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 3)",
                "9 - 6 = 3 (left: 4 6 3)\n4 - 3 = 1 (left: 1 6)",
                "9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 3)",
                "9 - 6 = 3 (left: 4 6 3)\n4 - 3 = 1 (left: 1 6)",
                "9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 3)",
                "9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 3)",
                "9 - 6 = 3 (left: 4 6 3)\n4 - 3 = 1 (left: 1 6)",
                "9 - 6 = 3 (left: 4 6 3)\n4 - 3 = 1 (left: 1 6)",
                "9 - 6 = 3 (left: 4 6 3)\n4 - 3 = 1 (left: 1 6)"
            ]
        },
        "step_3": {
            "steps": [
                "9 - 6 = 3 (left: 4 6 3)\n4 / 6 = 0.6667 (left: 0.6667 3)\n0.6667 * 3 = 2 (left: 2)",
                "9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 3)\n24 / 3 = 8 (left: 8 3)",
                "9 - 6 = 3 (left: 4 6 3)\n4 - 3 = 1 (left: 1 6)\n6 - 1 = 5 (left: 5)",
                "9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 3)\n24 / 3 = 8 (left: 8 3)",
                "9 - 6 = 3 (left: 4 6 3)\n4 - 3 = 1 (left: 1 6)\n6 - 1 = 5 (left: 5)",
                "9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 3)\n24 + 3 = 27 (left: 3 27)",
                "9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 3)\n24 / 3 = 8 (left: 8)",
                "9 - 6 = 3 (left: 4 6 3)\n4 - 3 = 1 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "9 - 6 = 3 (left: 4 6 3)\n4 - 3 = 1 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "9 - 6 = 3 (left: 4 6 3)\n4 - 3 = 1 (left: 1 6)\n6 / 1 = 6 (left: 6)"
            ],
            "values": [
                0.001,
                60.0,
                0.001,
                60.0,
                0.003,
                40.001,
                0.001,
                0.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 1",
                "2 <- 1",
                "3 <- 5",
                "4 <- 3",
                "5 <- 5",
                "6 <- 3",
                "7 <- 1",
                "8 <- 3",
                "9 <- 3"
            ],
            "resampled_steps": [
                "9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 3)\n24 / 3 = 8 (left: 8 3)",
                "9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 3)\n24 / 3 = 8 (left: 8 3)",
                "9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 3)\n24 / 3 = 8 (left: 8 3)",
                "9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 3)\n24 + 3 = 27 (left: 3 27)",
                "9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 3)\n24 / 3 = 8 (left: 8 3)",
                "9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 3)\n24 + 3 = 27 (left: 3 27)",
                "9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 3)\n24 / 3 = 8 (left: 8 3)",
                "9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 3)\n24 / 3 = 8 (left: 8 3)",
                "9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 3)\n24 / 3 = 8 (left: 8 3)",
                "9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 3)\n24 / 3 = 8 (left: 8 3)"
            ]
        },
        "step_4": {
            "steps": [
                "9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 3)\n24 / 3 = 8 (left: 8 3)\n8 + 3 = 11 (left: 11)",
                "9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 3)\n24 / 3 = 8 (left: 8 3)\n8 + 3 = 11 (left: 11)",
                "9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 3)\n24 / 3 = 8 (left: 8 3)\n8 * 3 = 24 (left: 24)",
                "9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 3)\n24 + 3 = 27 (left: 3 27)\n27 / 3 = 9 (left: 9)",
                "9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 3)\n24 / 3 = 8 (left: 8 3)\n8 * 3 = 24 (left: 24)",
                "9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 3)\n24 + 3 = 27 (left: 3 27)\n3 * 9 = 27 (left: 9 27)",
                "9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 3)\n24 / 3 = 8 (left: 8 3)\n8 * 3 = 24 (left: 24)",
                "9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 3)\n24 / 3 = 8 (left: 8 3)\n8 * 3 = 24 (left: 24)",
                "9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 3)\n24 / 3 = 8 (left: 8 3)\n8 * 3 = 24",
                "9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 3)\n24 / 3 = 8 (left: 8 3)\n8 - 3 = 5 (left: 5)"
            ],
            "values": [
                0.001,
                0.002,
                60.0,
                0.0,
                60.0,
                0.003,
                60.0,
                20.0,
                0.003,
                0.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.43907199999999996
    },
    "913": {
        "input": "1 4 4 8",
        "step_1": {
            "steps": [
                "4 - 1 = 3 (left: 3 4 8)",
                "8 - 4 = 4 (left: 4 4 4)",
                "8 - 4 = 4 (left: 1 4 4)",
                "8 - 4 = 4 (left: 4 4 4)",
                "1 + 4 = 5 (left: 4 5 8)",
                "1 + 4 = 5 (left: 4 5 8)",
                "1 * 4 = 4 (left: 4 4 8)",
                "4 / 1 = 4 (left: 4 4 8)",
                "1 + 4 = 5 (left: 4 5 8)",
                "1 + 4 = 5 (left: 4 5 8)"
            ],
            "values": [
                0.003,
                1.001,
                1.002,
                1.002,
                20.0,
                2.0,
                22.0,
                60.0,
                3.0,
                3.0
            ],
            "resampled": [
                "0 <- 7",
                "1 <- 7",
                "2 <- 7",
                "3 <- 7",
                "4 <- 7",
                "5 <- 4",
                "6 <- 8",
                "7 <- 7",
                "8 <- 6",
                "9 <- 7"
            ],
            "resampled_steps": [
                "4 / 1 = 4 (left: 4 4 8)",
                "4 / 1 = 4 (left: 4 4 8)",
                "4 / 1 = 4 (left: 4 4 8)",
                "4 / 1 = 4 (left: 4 4 8)",
                "4 / 1 = 4 (left: 4 4 8)",
                "1 + 4 = 5 (left: 4 5 8)",
                "1 + 4 = 5 (left: 4 5 8)",
                "4 / 1 = 4 (left: 4 4 8)",
                "1 * 4 = 4 (left: 4 4 8)",
                "4 / 1 = 4 (left: 4 4 8)"
            ]
        },
        "step_2": {
            "steps": [
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)",
                "4 / 1 = 4 (left: 4 4 8)\n8 - 4 = 4 (left: 4 8)",
                "4 / 1 = 4 (left: 4 4 8)\n4 + 4 = 8 (left: 8 8)",
                "4 / 1 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)",
                "4 / 1 = 4 (left: 4 4 8)\n4 - 4 = 0 (left: 0 8)",
                "1 + 4 = 5 (left: 4 5 8)\n5 - 4 = 1 (left: 1 8)",
                "1 + 4 = 5 (left: 4 5 8)\n4 + 5 = 9 (left: 9 8)",
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)",
                "1 * 4 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)",
                "4 / 1 = 4 (left: 4 4 8)\n8 / 4 = 2 (left: 2 4)"
            ],
            "values": [
                60.0,
                20.002,
                0.003,
                21.0,
                0.001,
                0.003,
                0.003,
                22.0,
                20.0,
                2.001
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 0",
                "2 <- 0",
                "3 <- 8",
                "4 <- 0",
                "5 <- 8",
                "6 <- 8",
                "7 <- 0",
                "8 <- 0",
                "9 <- 0"
            ],
            "resampled_steps": [
                "4 / 1 = 4 (left: 4 4 8)\n8 - 4 = 4 (left: 4 8)",
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)",
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)",
                "1 * 4 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)",
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)",
                "1 * 4 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)",
                "1 * 4 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)",
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)",
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)",
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)"
            ]
        },
        "step_3": {
            "steps": [
                "4 / 1 = 4 (left: 4 4 8)\n8 - 4 = 4 (left: 4 8)\n4 + 8 = 12 (left: 8 12)",
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 * 8 = 128 (left: 8 128)",
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 * 8 = 128 (left: 8 128)",
                "1 * 4 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)\n8 / 1 = 8 (left: 8 8)",
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 * 8 = 128 (left: 8 128)",
                "1 * 4 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)\n1 + 8 = 9 (left: 8 9)",
                "1 * 4 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)\n8 / 1 = 8 (left: 8)",
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 + 8 = 24 (left: 24)",
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 * 8 = 128 (left: 8 128)",
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 - 8 = 8 (left: 8 8)"
            ],
            "values": [
                2.001,
                0.003,
                20.002,
                1.002,
                0.003,
                2.001,
                0.0,
                60.0,
                20.002,
                0.003
            ],
            "resampled": [
                "0 <- 7",
                "1 <- 7",
                "2 <- 2",
                "3 <- 7",
                "4 <- 7",
                "5 <- 2",
                "6 <- 7",
                "7 <- 7",
                "8 <- 7",
                "9 <- 7"
            ],
            "resampled_steps": [
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 + 8 = 24 (left: 24)",
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 + 8 = 24 (left: 24)",
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 * 8 = 128 (left: 8 128)",
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 + 8 = 24 (left: 24)",
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 + 8 = 24 (left: 24)",
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 * 8 = 128 (left: 8 128)",
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 + 8 = 24 (left: 24)",
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 + 8 = 24 (left: 24)",
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 + 8 = 24 (left: 24)",
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 + 8 = 24 (left: 24)"
            ]
        },
        "step_4": {
            "steps": [
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 + 8 = 24 (left: 24)\nAnswer: (4 / 1) * (4 * 4) = 24",
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 + 8 = 24 (left: 24)\nAnswer: (4 / 1) * (4 * 4) = 24",
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 * 8 = 128 (left: 8 128)\n128 / 8 = 16 (left: 8 16)",
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 + 8 = 24 (left: 24)\nAnswer: ((4 / 1) * 4) + 8 = 24",
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 + 8 = 24 (left: 24)\nAnswer: (4 * 4) + (4 / 1) = 24",
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 * 8 = 128 (left: 8 128)\n128 / 8 = 16 (left: 16)",
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 + 8 = 24 (left: 24)\nAnswer: (4 / 1) * (4 * 4) = 24",
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 + 8 = 24 (left: 24)\nAnswer: (4 / 1) * (4 * 4) = 24",
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 + 8 = 24 (left: 24)\nAnswer: (4 / 1) * 4 + 8 = 24",
                "4 / 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 + 8 = 24 (left: 24)\nAnswer: (4 / 1) * (4 * 4) = 24"
            ],
            "values": [
                60.0,
                60.0,
                21.001,
                60.0,
                60.0,
                0.002,
                60.0,
                60.0,
                60.0,
                40.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ],
        "cost": 0.473181
    },
    "914": {
        "input": "1 5 10 11",
        "step_1": {
            "steps": [
                "1 * 5 = 5 (left: 5 10 11)",
                "1 + 5 = 6 (left: 6 10 11)",
                "1 + 5 = 6 (left: 6 10 11)",
                "1 + 5 = 6 (left: 6 10 11)",
                "10 + 1 = 11 (left: 5 11 11)",
                "1 + 5 = 6 (left: 6 10 11)",
                "1 + 5 = 6 (left: 6 10 11)",
                "10 + 1 = 11 (left: 5 11 11)",
                "5 * 2 = 10 (left: 1 10 11)",
                "11 - 1 = 10 (left: 1 5 10)"
            ],
            "values": [
                3.0,
                2.001,
                2.001,
                2.001,
                2.001,
                2.0,
                3.0,
                0.003,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 1",
                "2 <- 5",
                "3 <- 4",
                "4 <- 0",
                "5 <- 2",
                "6 <- 1",
                "7 <- 2",
                "8 <- 2",
                "9 <- 4"
            ],
            "resampled_steps": [
                "1 + 5 = 6 (left: 6 10 11)",
                "1 + 5 = 6 (left: 6 10 11)",
                "1 + 5 = 6 (left: 6 10 11)",
                "10 + 1 = 11 (left: 5 11 11)",
                "1 * 5 = 5 (left: 5 10 11)",
                "1 + 5 = 6 (left: 6 10 11)",
                "1 + 5 = 6 (left: 6 10 11)",
                "1 + 5 = 6 (left: 6 10 11)",
                "1 + 5 = 6 (left: 6 10 11)",
                "10 + 1 = 11 (left: 5 11 11)"
            ]
        },
        "step_2": {
            "steps": [
                "1 + 5 = 6 (left: 6 10 11)\n6 + 10 = 16 (left: 16 11)",
                "1 + 5 = 6 (left: 6 10 11)\n10 - 6 = 4 (left: 4 11)",
                "1 + 5 = 6 (left: 6 10 11)\n6 / 10 = 0.6 (left: 0.6 11)",
                "10 + 1 = 11 (left: 5 11 11)\n11 / 5 = 2.2 (left: 2.2 11)",
                "1 * 5 = 5 (left: 5 10 11)\n5 + 10 = 15 (left: 15 11)",
                "1 + 5 = 6 (left: 6 10 11)\n6 / 10 = 0.6 (left: 0.6 11)",
                "1 + 5 = 6 (left: 6 10 11)\n10 - 11 = -1 (left: 6 -1)",
                "1 + 5 = 6 (left: 6 10 11)\n10 - 6 = 4 (left: 4 11)",
                "1 + 5 = 6 (left: 6 10 11)\n6 + 10 = 16 (left: 16 11)",
                "10 + 1 = 11 (left: 5 11 11)\n11 - 5 = 6 (left: 6 11)"
            ],
            "values": [
                0.003,
                1.002,
                2.001,
                1.001,
                0.003,
                2.001,
                1.001,
                1.002,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 2",
                "2 <- 5",
                "3 <- 5",
                "4 <- 5",
                "5 <- 1",
                "6 <- 5",
                "7 <- 5",
                "8 <- 2",
                "9 <- 7"
            ],
            "resampled_steps": [
                "1 + 5 = 6 (left: 6 10 11)\n10 - 11 = -1 (left: 6 -1)",
                "1 + 5 = 6 (left: 6 10 11)\n6 / 10 = 0.6 (left: 0.6 11)",
                "1 + 5 = 6 (left: 6 10 11)\n6 / 10 = 0.6 (left: 0.6 11)",
                "1 + 5 = 6 (left: 6 10 11)\n6 / 10 = 0.6 (left: 0.6 11)",
                "1 + 5 = 6 (left: 6 10 11)\n6 / 10 = 0.6 (left: 0.6 11)",
                "1 + 5 = 6 (left: 6 10 11)\n10 - 6 = 4 (left: 4 11)",
                "1 + 5 = 6 (left: 6 10 11)\n6 / 10 = 0.6 (left: 0.6 11)",
                "1 + 5 = 6 (left: 6 10 11)\n6 / 10 = 0.6 (left: 0.6 11)",
                "1 + 5 = 6 (left: 6 10 11)\n6 / 10 = 0.6 (left: 0.6 11)",
                "1 + 5 = 6 (left: 6 10 11)\n10 - 6 = 4 (left: 4 11)"
            ]
        },
        "step_3": {
            "steps": [
                "1 + 5 = 6 (left: 6 10 11)\n10 - 11 = -1 (left: 6 -1)\n6 * (-1) = -6 (left: -6)",
                "1 + 5 = 6 (left: 6 10 11)\n6 / 10 = 0.6 (left: 0.6 11)\n11 / 0.6 = 18.3333 (left: 18.3333)",
                "1 + 5 = 6 (left: 6 10 11)\n6 / 10 = 0.6 (left: 0.6 11)\n0.6 / 11 = 0.0545... (left: 0.0545...)",
                "1 + 5 = 6 (left: 6 10 11)\n6 / 10 = 0.6 (left: 0.6 11)\n0.6 * 11 = 6.6 (left: 6.6)",
                "1 + 5 = 6 (left: 6 10 11)\n6 / 10 = 0.6 (left: 0.6 11)\n0.6 + 11 = 11.6 (left: 11.6)",
                "1 + 5 = 6 (left: 6 10 11)\n10 - 6 = 4 (left: 4 11)\n4 * 11 = 44 (left: 44)",
                "1 + 5 = 6 (left: 6 10 11)\n6 / 10 = 0.6 (left: 0.6 11)\n11 * 0.6 = 6.6 (left: 6.6)",
                "1 + 5 = 6 (left: 6 10 11)\n6 / 10 = 0.6 (left: 0.6 11)\n0.6 + 11 = 11.6 (left: 11.6)",
                "1 + 5 = 6 (left: 6 10 11)\n6 / 10 = 0.6 (left: 0.6 11)\n11 / 0.6 = 18.3333 (left: 18.3333)",
                "1 + 5 = 6 (left: 6 10 11)\n10 - 6 = 4 (left: 4 11)\n11 - 4 = 7 (left: 4 7)"
            ],
            "values": [
                0.001,
                0.0,
                0.003,
                0.002,
                0.002,
                0.002,
                0.003,
                0.002,
                0.002,
                20.002
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 9",
                "2 <- 9",
                "3 <- 9",
                "4 <- 9",
                "5 <- 9",
                "6 <- 9",
                "7 <- 9",
                "8 <- 9",
                "9 <- 9"
            ],
            "resampled_steps": [
                "1 + 5 = 6 (left: 6 10 11)\n10 - 6 = 4 (left: 4 11)\n11 - 4 = 7 (left: 4 7)",
                "1 + 5 = 6 (left: 6 10 11)\n10 - 6 = 4 (left: 4 11)\n11 - 4 = 7 (left: 4 7)",
                "1 + 5 = 6 (left: 6 10 11)\n10 - 6 = 4 (left: 4 11)\n11 - 4 = 7 (left: 4 7)",
                "1 + 5 = 6 (left: 6 10 11)\n10 - 6 = 4 (left: 4 11)\n11 - 4 = 7 (left: 4 7)",
                "1 + 5 = 6 (left: 6 10 11)\n10 - 6 = 4 (left: 4 11)\n11 - 4 = 7 (left: 4 7)",
                "1 + 5 = 6 (left: 6 10 11)\n10 - 6 = 4 (left: 4 11)\n11 - 4 = 7 (left: 4 7)",
                "1 + 5 = 6 (left: 6 10 11)\n10 - 6 = 4 (left: 4 11)\n11 - 4 = 7 (left: 4 7)",
                "1 + 5 = 6 (left: 6 10 11)\n10 - 6 = 4 (left: 4 11)\n11 - 4 = 7 (left: 4 7)",
                "1 + 5 = 6 (left: 6 10 11)\n10 - 6 = 4 (left: 4 11)\n11 - 4 = 7 (left: 4 7)",
                "1 + 5 = 6 (left: 6 10 11)\n10 - 6 = 4 (left: 4 11)\n11 - 4 = 7 (left: 4 7)"
            ]
        },
        "step_4": {
            "steps": [
                "1 + 5 = 6 (left: 6 10 11)\n10 - 6 = 4 (left: 4 11)\n11 - 4 = 7 (left: 4 7)\n7 - 4 = 3 (left: 3)",
                "1 + 5 = 6 (left: 6 10 11)\n10 - 6 = 4 (left: 4 11)\n11 - 4 = 7 (left: 4 7)\n7 - 4 = 3 (left: 3)",
                "1 + 5 = 6 (left: 6 10 11)\n10 - 6 = 4 (left: 4 11)\n11 - 4 = 7 (left: 4 7)\n4 * 7 = 28 (left: 28)",
                "1 + 5 = 6 (left: 6 10 11)\n10 - 6 = 4 (left: 4 11)\n11 - 4 = 7 (left: 4 7)\n7 - 4 = 3 (left: 3)",
                "1 + 5 = 6 (left: 6 10 11)\n10 - 6 = 4 (left: 4 11)\n11 - 4 = 7 (left: 4 7)\n4 + 7 = 11 (left: 11)",
                "1 + 5 = 6 (left: 6 10 11)\n10 - 6 = 4 (left: 4 11)\n11 - 4 = 7 (left: 4 7)\n4 * 7 = 28 (left: 28)",
                "1 + 5 = 6 (left: 6 10 11)\n10 - 6 = 4 (left: 4 11)\n11 - 4 = 7 (left: 4 7)\n7 + 4 = 11 (left: 11)",
                "1 + 5 = 6 (left: 6 10 11)\n10 - 6 = 4 (left: 4 11)\n11 - 4 = 7 (left: 4 7)\n7 / 4 = 1.75 (left: 1.75)",
                "1 + 5 = 6 (left: 6 10 11)\n10 - 6 = 4 (left: 4 11)\n11 - 4 = 7 (left: 4 7)\n7 - 4 = 3 (left: 3)",
                "1 + 5 = 6 (left: 6 10 11)\n10 - 6 = 4 (left: 4 11)\n11 - 4 = 7 (left: 4 7)\n7 - 4 = 3 (left: 3)"
            ],
            "values": [
                0.001,
                0.001,
                0.003,
                0.002,
                0.003,
                0.002,
                0.001,
                0.003,
                0.0,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.507027
    },
    "915": {
        "input": "3 4 6 11",
        "step_1": {
            "steps": [
                "3 * 4 = 12 (left: 12 6 11)",
                "4 - 3 = 1 (left: 1 6 11)",
                "11 - 4 = 7 (left: 3 7 6)",
                "3 + 4 = 7 (left: 6 7 11)",
                "4 * 6 = 24 (left: 3 24 11)",
                "11 - 4 = 7 (left: 3 6 7)",
                "4 + 6 = 10 (left: 3 10 11)",
                "3 * 4 = 12 (left: 12 6 11)",
                "4 + 6 = 10 (left: 3 10 11)",
                "4 * 3 = 12 (left: 6 12 11)"
            ],
            "values": [
                1.002,
                1.002,
                22.0,
                2.001,
                3.0,
                21.001,
                0.003,
                1.002,
                0.002,
                2.001
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 4",
                "2 <- 2",
                "3 <- 5",
                "4 <- 3",
                "5 <- 9",
                "6 <- 5",
                "7 <- 2",
                "8 <- 2",
                "9 <- 9"
            ],
            "resampled_steps": [
                "11 - 4 = 7 (left: 3 7 6)",
                "4 * 6 = 24 (left: 3 24 11)",
                "11 - 4 = 7 (left: 3 7 6)",
                "11 - 4 = 7 (left: 3 6 7)",
                "3 + 4 = 7 (left: 6 7 11)",
                "4 * 3 = 12 (left: 6 12 11)",
                "11 - 4 = 7 (left: 3 6 7)",
                "11 - 4 = 7 (left: 3 7 6)",
                "11 - 4 = 7 (left: 3 7 6)",
                "4 * 3 = 12 (left: 6 12 11)"
            ]
        },
        "step_2": {
            "steps": [
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)",
                "4 * 6 = 24 (left: 3 24 11)\n24 / 3 = 8 (left: 8 11)",
                "11 - 4 = 7 (left: 3 7 6)\n7 / 3 = 2.33 (left: 2.33 6)",
                "11 - 4 = 7 (left: 3 6 7)\n3 + 6 = 9 (left: 7 9)",
                "3 + 4 = 7 (left: 6 7 11)\n11 - 6 = 5 (left: 6 5)",
                "4 * 3 = 12 (left: 6 12 11)\n6 / 11 = 0.54 (left: 0.54 12)",
                "11 - 4 = 7 (left: 3 6 7)\n3 + 6 = 9 (left: 7 9)",
                "11 - 4 = 7 (left: 3 7 6)\n6 / 3 = 2 (left: 2 2)",
                "11 - 4 = 7 (left: 3 7 6)\n6 - 3 = 3 (left: 3 7)",
                "4 * 3 = 12 (left: 6 12 11)\n6 * 11 = 66 (left: 66)"
            ],
            "values": [
                40.0,
                0.002,
                3.0,
                0.001,
                0.003,
                0.002,
                1.001,
                1.001,
                0.0,
                0.001
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 0",
                "2 <- 0",
                "3 <- 0",
                "4 <- 0",
                "5 <- 0",
                "6 <- 0",
                "7 <- 0",
                "8 <- 0",
                "9 <- 0"
            ],
            "resampled_steps": [
                "11 - 4 = 7 (left: 3 6 7)\n3 + 6 = 9 (left: 7 9)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)"
            ]
        },
        "step_3": {
            "steps": [
                "11 - 4 = 7 (left: 3 6 7)\n3 + 6 = 9 (left: 7 9)\n9 / 7 = 1.2857 (left: 1.2857)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)\n3 + 1 = 4 (left: 4)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)\n3 * 1 = 3 (left: 3)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)\n3 - 1 = 2 (left: 2 1)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)\n1 - 3 = -2 (left: -2) ",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)\n1 - 3 = -2 (left: -2 3)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)\n3 + 1 = 4 (left: 1 4)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)\n3 * 1 = 3 (left: 3)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)\n3 - 1 = 2 (left: 2 1)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)\n3 * 1 = 3 (left: 3)"
            ],
            "values": [
                0.001,
                0.002,
                0.001,
                0.003,
                0.002,
                41.0,
                60.0,
                0.001,
                20.002,
                0.001
            ],
            "resampled": [
                "0 <- 5",
                "1 <- 5",
                "2 <- 5",
                "3 <- 5",
                "4 <- 6",
                "5 <- 6",
                "6 <- 8",
                "7 <- 6",
                "8 <- 6",
                "9 <- 5"
            ],
            "resampled_steps": [
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)\n1 - 3 = -2 (left: -2 3)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)\n1 - 3 = -2 (left: -2 3)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)\n1 - 3 = -2 (left: -2 3)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)\n1 - 3 = -2 (left: -2 3)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)\n3 + 1 = 4 (left: 1 4)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)\n3 + 1 = 4 (left: 1 4)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)\n3 - 1 = 2 (left: 2 1)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)\n3 + 1 = 4 (left: 1 4)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)\n3 + 1 = 4 (left: 1 4)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)\n1 - 3 = -2 (left: -2 3)"
            ]
        },
        "step_4": {
            "steps": [
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)\n1 - 3 = -2 (left: -2 3)\n-2 + 3 = 1 (left: 1)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)\n1 - 3 = -2 (left: -2 3)\n-2 * 3 = -6 (left: -6)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)\n1 - 3 = -2 (left: -2 3)\n-2 + 3 = 1 (left: 1)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)\n1 - 3 = -2 (left: -2 3)\n-2 / 3 = -0.6667 (left: -0.6667)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)\n3 + 1 = 4 (left: 1 4)\n1 * 4 = 4 (left: 4)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)\n3 + 1 = 4 (left: 1 4)\n4 / 1 = 4 (left: 4)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)\n3 - 1 = 2 (left: 2 1)\n2 / 1 = 2 (left: 2 1)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)\n3 + 1 = 4 (left: 1 4)\n1 + 4 = 5 (left: 5)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)\n3 + 1 = 4 (left: 1 4)\n4 - 1 = 3 (left: 3)",
                "11 - 4 = 7 (left: 3 7 6)\n7 - 6 = 1 (left: 3 1)\n1 - 3 = -2 (left: -2 3)\n-2 + 3 = 1 (left: 1)"
            ],
            "values": [
                0.003,
                0.002,
                0.003,
                0.0,
                0.003,
                0.002,
                1.002,
                0.002,
                0.001,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.540773
    },
    "916": {
        "input": "2 4 8 9",
        "step_1": {
            "steps": [
                "2 + 4 = 6 (left: 6 8 9)",
                "4 * 2 = 8 (left: 8 8 9)",
                "9 - 8 = 1 (left: 2 8 1)",
                "9 - 2 = 7 (left: 2 4 7)",
                "8 + 1 = 9 (left: 8 9 9)",
                "8 / 2 = 4 (left: 4 8 9)",
                "2 + 4 = 6 (left: 6 8 9)",
                "2 * 4 = 8 (left: 8 4 9)",
                "8 / 2 = 4 (left: 4 8 9)",
                "11 - 7 = 4 (left: 3 5 4)"
            ],
            "values": [
                3.0,
                0.002,
                1.002,
                2.001,
                2.001,
                3.0,
                3.0,
                1.001,
                3.0,
                2.0
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 5",
                "2 <- 5",
                "3 <- 4",
                "4 <- 6",
                "5 <- 4",
                "6 <- 6",
                "7 <- 8",
                "8 <- 6",
                "9 <- 2"
            ],
            "resampled_steps": [
                "8 + 1 = 9 (left: 8 9 9)",
                "8 / 2 = 4 (left: 4 8 9)",
                "8 / 2 = 4 (left: 4 8 9)",
                "8 + 1 = 9 (left: 8 9 9)",
                "2 + 4 = 6 (left: 6 8 9)",
                "8 + 1 = 9 (left: 8 9 9)",
                "2 + 4 = 6 (left: 6 8 9)",
                "8 / 2 = 4 (left: 4 8 9)",
                "2 + 4 = 6 (left: 6 8 9)",
                "9 - 8 = 1 (left: 2 8 1)"
            ]
        },
        "step_2": {
            "steps": [
                "8 + 1 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)",
                "8 / 2 = 4 (left: 4 8 9)\n9 - 4 = 5 (left: 8 5)",
                "8 / 2 = 4 (left: 4 8 9)\n4 + 8 = 12 (left: 8 9 12)",
                "8 + 1 = 9 (left: 8 9 9)\n9 / 8 = 1.125 (left: 1.125 9)",
                "2 + 4 = 6 (left: 6 8 9)\n8 * 9 = 72 (left: 6 72)",
                "8 + 1 = 9 (left: 8 9 9)\n9 - 9 = 0 (left: 0)",
                "2 + 4 = 6 (left: 6 8 9)\n8 + 9 = 17 (left: 6 17)",
                "8 / 2 = 4 (left: 4 8 9)\n8 + 9 = 17 (left: 4 17)",
                "2 + 4 = 6 (left: 6 8 9)\n8 * 9 = 72 (left: 6 72)",
                "9 - 8 = 1 (left: 2 8 1)\n8 - 1 = 7 (left: 2 7)"
            ],
            "values": [
                0.001,
                2.001,
                3.0,
                2.0,
                2.001,
                20.002,
                1.002,
                1.002,
                1.002,
                0.001
            ],
            "resampled": [
                "0 <- 5",
                "1 <- 1",
                "2 <- 5",
                "3 <- 5",
                "4 <- 7",
                "5 <- 5",
                "6 <- 5",
                "7 <- 5",
                "8 <- 5",
                "9 <- 2"
            ],
            "resampled_steps": [
                "8 + 1 = 9 (left: 8 9 9)\n9 - 9 = 0 (left: 0)",
                "8 / 2 = 4 (left: 4 8 9)\n9 - 4 = 5 (left: 8 5)",
                "8 + 1 = 9 (left: 8 9 9)\n9 - 9 = 0 (left: 0)",
                "8 + 1 = 9 (left: 8 9 9)\n9 - 9 = 0 (left: 0)",
                "8 / 2 = 4 (left: 4 8 9)\n8 + 9 = 17 (left: 4 17)",
                "8 + 1 = 9 (left: 8 9 9)\n9 - 9 = 0 (left: 0)",
                "8 + 1 = 9 (left: 8 9 9)\n9 - 9 = 0 (left: 0)",
                "8 + 1 = 9 (left: 8 9 9)\n9 - 9 = 0 (left: 0)",
                "8 + 1 = 9 (left: 8 9 9)\n9 - 9 = 0 (left: 0)",
                "8 / 2 = 4 (left: 4 8 9)\n4 + 8 = 12 (left: 8 9 12)"
            ]
        },
        "step_3": {
            "steps": [
                "8 + 1 = 9 (left: 8 9 9)\n9 - 9 = 0 (left: 0)\nThere are no possible next steps with an input of 0.",
                "8 / 2 = 4 (left: 4 8 9)\n9 - 4 = 5 (left: 8 5)\n8 + 5 = 13 (left: 13)",
                "8 + 1 = 9 (left: 8 9 9)\n9 - 9 = 0 (left: 0)\nThere are no possible next steps as there are no numbers provided in the input.",
                "8 + 1 = 9 (left: 8 9 9)\n9 - 9 = 0 (left: 0)\nThere are no possible next steps as there are no numbers to operate on.",
                "8 / 2 = 4 (left: 4 8 9)\n8 + 9 = 17 (left: 4 17)\n17 + 4 = 21 (left: 21)",
                "8 + 1 = 9 (left: 8 9 9)\n9 - 9 = 0 (left: 0)\nThere are no possible next steps as there are no numbers to perform operations on.",
                "8 + 1 = 9 (left: 8 9 9)\n9 - 9 = 0 (left: 0)\nThere are no possible next steps as there are no numbers to operate on.",
                "8 + 1 = 9 (left: 8 9 9)\n9 - 9 = 0 (left: 0)\nThere are no possible next steps as there are no numbers to operate on.",
                "8 + 1 = 9 (left: 8 9 9)\n9 - 9 = 0 (left: 0)\nThere are no possible next steps for the input 0 as there are no numbers to perform operations on.",
                "8 / 2 = 4 (left: 4 8 9)\n4 + 8 = 12 (left: 8 9 12)\n9 - 8 = 1 (left: 1 12)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 8",
                "2 <- 9",
                "3 <- 9",
                "4 <- 9",
                "5 <- 9",
                "6 <- 9",
                "7 <- 9",
                "8 <- 9",
                "9 <- 9"
            ],
            "resampled_steps": [
                "8 / 2 = 4 (left: 4 8 9)\n4 + 8 = 12 (left: 8 9 12)\n9 - 8 = 1 (left: 1 12)",
                "8 + 1 = 9 (left: 8 9 9)\n9 - 9 = 0 (left: 0)\nThere are no possible next steps for the input 0 as there are no numbers to perform operations on.",
                "8 / 2 = 4 (left: 4 8 9)\n4 + 8 = 12 (left: 8 9 12)\n9 - 8 = 1 (left: 1 12)",
                "8 / 2 = 4 (left: 4 8 9)\n4 + 8 = 12 (left: 8 9 12)\n9 - 8 = 1 (left: 1 12)",
                "8 / 2 = 4 (left: 4 8 9)\n4 + 8 = 12 (left: 8 9 12)\n9 - 8 = 1 (left: 1 12)",
                "8 / 2 = 4 (left: 4 8 9)\n4 + 8 = 12 (left: 8 9 12)\n9 - 8 = 1 (left: 1 12)",
                "8 / 2 = 4 (left: 4 8 9)\n4 + 8 = 12 (left: 8 9 12)\n9 - 8 = 1 (left: 1 12)",
                "8 / 2 = 4 (left: 4 8 9)\n4 + 8 = 12 (left: 8 9 12)\n9 - 8 = 1 (left: 1 12)",
                "8 / 2 = 4 (left: 4 8 9)\n4 + 8 = 12 (left: 8 9 12)\n9 - 8 = 1 (left: 1 12)",
                "8 / 2 = 4 (left: 4 8 9)\n4 + 8 = 12 (left: 8 9 12)\n9 - 8 = 1 (left: 1 12)"
            ]
        },
        "step_4": {
            "steps": [
                "8 / 2 = 4 (left: 4 8 9)\n4 + 8 = 12 (left: 8 9 12)\n9 - 8 = 1 (left: 1 12)\n12 + 1 = 13 (left: 13)",
                "8 + 1 = 9 (left: 8 9 9)\n9 - 9 = 0 (left: 0)\nThere are no possible next steps for the input 0 as there are no numbers to perform operations on.\nThere are no possible next steps for the input 0 as there are no numbers to perform operations on.",
                "8 / 2 = 4 (left: 4 8 9)\n4 + 8 = 12 (left: 8 9 12)\n9 - 8 = 1 (left: 1 12)\n1 + 12 = 13 (left: 13)",
                "8 / 2 = 4 (left: 4 8 9)\n4 + 8 = 12 (left: 8 9 12)\n9 - 8 = 1 (left: 1 12)\n1 + 12 = 13 (left: 12 13)",
                "8 / 2 = 4 (left: 4 8 9)\n4 + 8 = 12 (left: 8 9 12)\n9 - 8 = 1 (left: 1 12)\n1 + 12 = 13 (left: 13)",
                "8 / 2 = 4 (left: 4 8 9)\n4 + 8 = 12 (left: 8 9 12)\n9 - 8 = 1 (left: 1 12)\n1 + 12 = 13 (left: 13)",
                "8 / 2 = 4 (left: 4 8 9)\n4 + 8 = 12 (left: 8 9 12)\n9 - 8 = 1 (left: 1 12)\n12 * 1 = 12 (left: 12)",
                "8 / 2 = 4 (left: 4 8 9)\n4 + 8 = 12 (left: 8 9 12)\n9 - 8 = 1 (left: 1 12)\n1 * 12 = 12 (left: 12)",
                "8 / 2 = 4 (left: 4 8 9)\n4 + 8 = 12 (left: 8 9 12)\n9 - 8 = 1 (left: 1 12)\n12 / 1 = 12 (left: 12)",
                "8 / 2 = 4 (left: 4 8 9)\n4 + 8 = 12 (left: 8 9 12)\n9 - 8 = 1 (left: 1 12)\n12 + 1 = 13 (left: 13)"
            ],
            "values": [
                0.003,
                0.003,
                0.002,
                0.003,
                0.002,
                0.002,
                0.001,
                0.0,
                0.003,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.5734030000000001
    },
    "917": {
        "input": "1 4 5 13",
        "step_1": {
            "steps": [
                "1 + 4 = 5 (left: 5 5 13)",
                "13 - 5 = 8 (left: 1 4 8)",
                "13 - 4 = 9 (left: 5 9 13)",
                "13 - 4 = 9 (left: 1 9 13)",
                "13 - 5 = 8 (left: 4 8 13)",
                "13 - 4 = 9 (left: 1 5 9)",
                "13 - 4 = 9 (left: 5 9 13)",
                "13 - 1 = 12 (left: 4 5 12)",
                "13 - 1 = 12 (left: 4 5 12)",
                "4 + 1 = 5 (left: 5 5 13)"
            ],
            "values": [
                0.002,
                1.002,
                3.0,
                2.001,
                1.002,
                1.002,
                3.0,
                0.003,
                0.003,
                22.0
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 6",
                "2 <- 9",
                "3 <- 9",
                "4 <- 3",
                "5 <- 9",
                "6 <- 9",
                "7 <- 9",
                "8 <- 9",
                "9 <- 9"
            ],
            "resampled_steps": [
                "13 - 5 = 8 (left: 4 8 13)",
                "13 - 4 = 9 (left: 5 9 13)",
                "4 + 1 = 5 (left: 5 5 13)",
                "4 + 1 = 5 (left: 5 5 13)",
                "13 - 4 = 9 (left: 1 9 13)",
                "4 + 1 = 5 (left: 5 5 13)",
                "4 + 1 = 5 (left: 5 5 13)",
                "4 + 1 = 5 (left: 5 5 13)",
                "4 + 1 = 5 (left: 5 5 13)",
                "4 + 1 = 5 (left: 5 5 13)"
            ]
        },
        "step_2": {
            "steps": [
                "13 - 5 = 8 (left: 4 8 13)\n8 / 4 = 2 (left: 2 13)",
                "13 - 4 = 9 (left: 5 9 13)\n5 + 9 = 14 (left: 14 13)",
                "4 + 1 = 5 (left: 5 5 13)\n13 / 5 = 2.6 (left: 2.6)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 5 = 10 (left: 10 13)",
                "13 - 4 = 9 (left: 1 9 13)\n9 + 1 = 10 (left: 10 13)",
                "4 + 1 = 5 (left: 5 5 13)\n5 * 5 = 25 (left: 25 13)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 5 = 10 (left: 10 13)",
                "4 + 1 = 5 (left: 5 5 13)\n5 * 5 = 25 (left: 25 13)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)",
                "4 + 1 = 5 (left: 5 5 13)\n13 / 5 = 2.6 (left: 2.6)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                1.002,
                0.002
            ],
            "resampled": [
                "0 <- 8",
                "1 <- 8",
                "2 <- 8",
                "3 <- 8",
                "4 <- 8",
                "5 <- 8",
                "6 <- 8",
                "7 <- 8",
                "8 <- 8",
                "9 <- 8"
            ],
            "resampled_steps": [
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)"
            ]
        },
        "step_3": {
            "steps": [
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)\n18 - 5 = 13 (left: 13 18)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)\n5 * 18 = 90 (left: 90)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)\n5 + 18 = 23 (left: 18 23)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)\n18 / 5 = 3.6 (left: 3.6)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)\n18 / 5 = 3.6 (left: 3.6)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)\n5 * 18 = 90 (left: 90)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)\n18 / 5 = 3.6 (left: 5 3.6)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)\n18 / 5 = 3.6 (left: 5 3.6)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)\n5 + 18 = 23 (left: 23)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)\n18 - 5 = 13 (left: 13)"
            ],
            "values": [
                0.003,
                0.002,
                0.003,
                0.003,
                0.001,
                0.001,
                2.0,
                1.0,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 6",
                "2 <- 6",
                "3 <- 7",
                "4 <- 7",
                "5 <- 6",
                "6 <- 6",
                "7 <- 7",
                "8 <- 6",
                "9 <- 7"
            ],
            "resampled_steps": [
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)\n18 / 5 = 3.6 (left: 5 3.6)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)\n18 / 5 = 3.6 (left: 5 3.6)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)\n18 / 5 = 3.6 (left: 5 3.6)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)\n18 / 5 = 3.6 (left: 5 3.6)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)\n18 / 5 = 3.6 (left: 5 3.6)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)\n18 / 5 = 3.6 (left: 5 3.6)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)\n18 / 5 = 3.6 (left: 5 3.6)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)\n18 / 5 = 3.6 (left: 5 3.6)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)\n18 / 5 = 3.6 (left: 5 3.6)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)\n18 / 5 = 3.6 (left: 5 3.6)"
            ]
        },
        "step_4": {
            "steps": [
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)\n18 / 5 = 3.6 (left: 5 3.6)\n5 / 3.6 \u2248 1.39 (left: 1.39 3.6)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)\n18 / 5 = 3.6 (left: 5 3.6)\n5 * 3.6 = 18 (left: 18)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)\n18 / 5 = 3.6 (left: 5 3.6)\n5 + 3.6 = 8.6 (left: 8.6)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)\n18 / 5 = 3.6 (left: 5 3.6)\n5 - 3.6 = 1.4 (left: 1.4 3.6)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)\n18 / 5 = 3.6 (left: 5 3.6)\n5 + 3.6 = 8.6 (left: 8.6)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)\n18 / 5 = 3.6 (left: 5 3.6)\n5 + 3.6 = 8.6 (left: 8.6)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)\n18 / 5 = 3.6 (left: 5 3.6)\n5 - 3.6 = 1.4 (left: 1.4)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)\n18 / 5 = 3.6 (left: 5 3.6)\n5 * 3.6 = 18 (left: 18)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)\n18 / 5 = 3.6 (left: 5 3.6)\n5 - 3.6 = 1.4 (left: 1.4)",
                "4 + 1 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)\n18 / 5 = 3.6 (left: 5 3.6)\n5 * 3.6 = 18 (left: 3.6 18)"
            ],
            "values": [
                2.001,
                0.0,
                0.003,
                3.0,
                0.0,
                0.0,
                0.003,
                0.003,
                0.003,
                1.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.608915
    },
    "918": {
        "input": "2 2 7 12",
        "step_1": {
            "steps": [
                "2 * 2 = 4 (left: 4 7 12)",
                "7 - 2 = 5 (left: 2 5 12)",
                "2 * 2 = 4 (left: 4 7 12)",
                "12 - 7 = 5 (left: 2 5 7)",
                "2 * 2 = 4 (left: 4 7 12)",
                "2 / 2 = 1 (left: 1 7 12)",
                "2 + 2 = 4 (left: 4 7 12)",
                "2 * 7 = 14 (left: 14 2 12)",
                "2 + 2 = 4 (left: 4 7 12)",
                "2 - 2 = 0 (left: 0 7 12)"
            ],
            "values": [
                1.0,
                1.002,
                2.001,
                2.001,
                2.001,
                2.001,
                2.0,
                2.001,
                3.0,
                3.0
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 7",
                "2 <- 3",
                "3 <- 4",
                "4 <- 6",
                "5 <- 6",
                "6 <- 9",
                "7 <- 3",
                "8 <- 3",
                "9 <- 8"
            ],
            "resampled_steps": [
                "2 - 2 = 0 (left: 0 7 12)",
                "2 * 7 = 14 (left: 14 2 12)",
                "12 - 7 = 5 (left: 2 5 7)",
                "2 * 2 = 4 (left: 4 7 12)",
                "2 + 2 = 4 (left: 4 7 12)",
                "2 + 2 = 4 (left: 4 7 12)",
                "2 - 2 = 0 (left: 0 7 12)",
                "12 - 7 = 5 (left: 2 5 7)",
                "12 - 7 = 5 (left: 2 5 7)",
                "2 + 2 = 4 (left: 4 7 12)"
            ]
        },
        "step_2": {
            "steps": [
                "2 - 2 = 0 (left: 0 7 12)\n7 * 12 = 84 (left: 0 84)",
                "2 * 7 = 14 (left: 14 2 12)\n2 * 12 = 24 (left: 24 12)",
                "12 - 7 = 5 (left: 2 5 7)\n2 * 5 = 10 (left: 10 7)",
                "2 * 2 = 4 (left: 4 7 12)\n4 * 7 = 28 (left: 28 12)",
                "2 + 2 = 4 (left: 4 7 12)\n12 - 7 = 5 (left: 4 5)",
                "2 + 2 = 4 (left: 4 7 12)\n12 - 7 = 5 (left: 4 5)",
                "2 - 2 = 0 (left: 0 7 12)\n7 - 12 = -5 (left: 0 -5)",
                "12 - 7 = 5 (left: 2 5 7)\n5 * 7 = 35 (left: 2 35)",
                "12 - 7 = 5 (left: 2 5 7)\n7 / 2 = 3.5 (left: 3.5 7)",
                "2 + 2 = 4 (left: 4 7 12)\n12 - 4 = 8 (left: 7 8)"
            ],
            "values": [
                1.002,
                60.0,
                0.003,
                0.003,
                1.001,
                20.001,
                0.003,
                1.002,
                3.0,
                0.003
            ],
            "resampled": [
                "0 <- 8",
                "1 <- 5",
                "2 <- 1",
                "3 <- 5",
                "4 <- 5",
                "5 <- 1",
                "6 <- 5",
                "7 <- 5",
                "8 <- 5",
                "9 <- 1"
            ],
            "resampled_steps": [
                "12 - 7 = 5 (left: 2 5 7)\n7 / 2 = 3.5 (left: 3.5 7)",
                "2 + 2 = 4 (left: 4 7 12)\n12 - 7 = 5 (left: 4 5)",
                "2 * 7 = 14 (left: 14 2 12)\n2 * 12 = 24 (left: 24 12)",
                "2 + 2 = 4 (left: 4 7 12)\n12 - 7 = 5 (left: 4 5)",
                "2 + 2 = 4 (left: 4 7 12)\n12 - 7 = 5 (left: 4 5)",
                "2 * 7 = 14 (left: 14 2 12)\n2 * 12 = 24 (left: 24 12)",
                "2 + 2 = 4 (left: 4 7 12)\n12 - 7 = 5 (left: 4 5)",
                "2 + 2 = 4 (left: 4 7 12)\n12 - 7 = 5 (left: 4 5)",
                "2 + 2 = 4 (left: 4 7 12)\n12 - 7 = 5 (left: 4 5)",
                "2 * 7 = 14 (left: 14 2 12)\n2 * 12 = 24 (left: 24 12)"
            ]
        },
        "step_3": {
            "steps": [
                "12 - 7 = 5 (left: 2 5 7)\n7 / 2 = 3.5 (left: 3.5 7)\n3.5 + 7 = 10.5 (left: 10.5)",
                "2 + 2 = 4 (left: 4 7 12)\n12 - 7 = 5 (left: 4 5)\n5 / 4 = 1.25 (left: 4 1.25)",
                "2 * 7 = 14 (left: 14 2 12)\n2 * 12 = 24 (left: 24 12)\n24 + 12 = 36 (left: 36)",
                "2 + 2 = 4 (left: 4 7 12)\n12 - 7 = 5 (left: 4 5)\n4 * 5 = 20 (left: 5 20)",
                "2 + 2 = 4 (left: 4 7 12)\n12 - 7 = 5 (left: 4 5)\n4 + 5 = 9 (left: 9)",
                "2 * 7 = 14 (left: 14 2 12)\n2 * 12 = 24 (left: 24 12)\n24 * 12 = 288 (left: 288)",
                "2 + 2 = 4 (left: 4 7 12)\n12 - 7 = 5 (left: 4 5)\n4 * 5 = 20 (left: 20 5)",
                "2 + 2 = 4 (left: 4 7 12)\n12 - 7 = 5 (left: 4 5)\n5 - 4 = 1 (left: 1)",
                "2 + 2 = 4 (left: 4 7 12)\n12 - 7 = 5 (left: 4 5)\n4 + 5 = 9 (left: 9)",
                "2 * 7 = 14 (left: 14 2 12)\n2 * 12 = 24 (left: 24 12)\n24 + 12 = 36 (left: 36)"
            ],
            "values": [
                0.002,
                0.002,
                20.0,
                0.001,
                0.002,
                0.003,
                1.002,
                0.003,
                0.003,
                20.0
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 2",
                "2 <- 2",
                "3 <- 2",
                "4 <- 2",
                "5 <- 2",
                "6 <- 9",
                "7 <- 9",
                "8 <- 9",
                "9 <- 9"
            ],
            "resampled_steps": [
                "2 * 7 = 14 (left: 14 2 12)\n2 * 12 = 24 (left: 24 12)\n24 + 12 = 36 (left: 36)",
                "2 * 7 = 14 (left: 14 2 12)\n2 * 12 = 24 (left: 24 12)\n24 + 12 = 36 (left: 36)",
                "2 * 7 = 14 (left: 14 2 12)\n2 * 12 = 24 (left: 24 12)\n24 + 12 = 36 (left: 36)",
                "2 * 7 = 14 (left: 14 2 12)\n2 * 12 = 24 (left: 24 12)\n24 + 12 = 36 (left: 36)",
                "2 * 7 = 14 (left: 14 2 12)\n2 * 12 = 24 (left: 24 12)\n24 + 12 = 36 (left: 36)",
                "2 * 7 = 14 (left: 14 2 12)\n2 * 12 = 24 (left: 24 12)\n24 + 12 = 36 (left: 36)",
                "2 * 7 = 14 (left: 14 2 12)\n2 * 12 = 24 (left: 24 12)\n24 + 12 = 36 (left: 36)",
                "2 * 7 = 14 (left: 14 2 12)\n2 * 12 = 24 (left: 24 12)\n24 + 12 = 36 (left: 36)",
                "2 * 7 = 14 (left: 14 2 12)\n2 * 12 = 24 (left: 24 12)\n24 + 12 = 36 (left: 36)",
                "2 * 7 = 14 (left: 14 2 12)\n2 * 12 = 24 (left: 24 12)\n24 + 12 = 36 (left: 36)"
            ]
        },
        "step_4": {
            "steps": [
                "2 * 7 = 14 (left: 14 2 12)\n2 * 12 = 24 (left: 24 12)\n24 + 12 = 36 (left: 36)\n36 / 2 = 18 (left: 18)",
                "2 * 7 = 14 (left: 14 2 12)\n2 * 12 = 24 (left: 24 12)\n24 + 12 = 36 (left: 36)\n36 - 2 = 34",
                "2 * 7 = 14 (left: 14 2 12)\n2 * 12 = 24 (left: 24 12)\n24 + 12 = 36 (left: 36)\n36 + 2 = 38 (left: 38)",
                "2 * 7 = 14 (left: 14 2 12)\n2 * 12 = 24 (left: 24 12)\n24 + 12 = 36 (left: 36)\n36 + 8 = 44 (left: 44)",
                "2 * 7 = 14 (left: 14 2 12)\n2 * 12 = 24 (left: 24 12)\n24 + 12 = 36 (left: 36)\n36 - 5 = 31 (left: 5 31)",
                "2 * 7 = 14 (left: 14 2 12)\n2 * 12 = 24 (left: 24 12)\n24 + 12 = 36 (left: 36)\n36 + 2 = 38 (left: 2 36)",
                "2 * 7 = 14 (left: 14 2 12)\n2 * 12 = 24 (left: 24 12)\n24 + 12 = 36 (left: 36)\n36 / 2 = 18",
                "2 * 7 = 14 (left: 14 2 12)\n2 * 12 = 24 (left: 24 12)\n24 + 12 = 36 (left: 36)\n36 * 2 = 72",
                "2 * 7 = 14 (left: 14 2 12)\n2 * 12 = 24 (left: 24 12)\n24 + 12 = 36 (left: 36)\n36 - 5 = 31 (left: 5 31) ",
                "2 * 7 = 14 (left: 14 2 12)\n2 * 12 = 24 (left: 24 12)\n24 + 12 = 36 (left: 36)\n36 / 3 = 12 (left: 12)"
            ],
            "values": [
                0.002,
                0.003,
                0.003,
                0.002,
                2.0,
                0.003,
                0.003,
                0.003,
                0.0,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.643894
    },
    "919": {
        "input": "3 3 6 7",
        "step_1": {
            "steps": [
                "6 + 1 = 7 (left: 3 7 7)",
                "7 - 3 = 4 (left: 3 6 4)",
                "3 * 3 = 9 (left: 9 6 7)",
                "6 * 3 = 18 (left: 18 3 7)",
                "3 * 3 = 9 (left: 9 6 7)",
                "3 * 3 = 9 (left: 9 6 7)",
                "7 - 3 = 4 (left: 3 6 4)",
                "7 - 6 = 1 (left: 3 3 1)",
                "7 - 6 = 1 (left: 3 3 1)",
                "7 - 3 = 4 (left: 3 4 7)"
            ],
            "values": [
                22.0,
                21.001,
                3.0,
                1.001,
                3.0,
                2.001,
                2.001,
                0.003,
                0.003,
                2.001
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 5",
                "3 <- 2",
                "4 <- 0",
                "5 <- 0",
                "6 <- 0",
                "7 <- 0",
                "8 <- 2",
                "9 <- 1"
            ],
            "resampled_steps": [
                "7 - 3 = 4 (left: 3 6 4)",
                "7 - 3 = 4 (left: 3 6 4)",
                "3 * 3 = 9 (left: 9 6 7)",
                "3 * 3 = 9 (left: 9 6 7)",
                "6 + 1 = 7 (left: 3 7 7)",
                "6 + 1 = 7 (left: 3 7 7)",
                "6 + 1 = 7 (left: 3 7 7)",
                "6 + 1 = 7 (left: 3 7 7)",
                "3 * 3 = 9 (left: 9 6 7)",
                "7 - 3 = 4 (left: 3 6 4)"
            ]
        },
        "step_2": {
            "steps": [
                "7 - 3 = 4 (left: 3 6 4)\n3 + 6 = 9 (left: 4 9)",
                "7 - 3 = 4 (left: 3 6 4)\n4 - 3 = 1 (left: 1 6)",
                "3 * 3 = 9 (left: 9 6 7)\n7 * 6 = 42 (left: 9 42)",
                "3 * 3 = 9 (left: 9 6 7)\n6 * 7 = 42 (left: 9 42)",
                "6 + 1 = 7 (left: 3 7 7)\n7 - 3 = 4 (left: 4 7)",
                "6 + 1 = 7 (left: 3 7 7)\n7 / 3 = 2.333 (left: 2.333 7)",
                "6 + 1 = 7 (left: 3 7 7)\n7 + 3 = 10 (left: 7 10)",
                "6 + 1 = 7 (left: 3 7 7)\n7 - 3 = 4 (left: 4 7)",
                "3 * 3 = 9 (left: 9 6 7)\n6 * 7 = 42 (left: 9 42)",
                "7 - 3 = 4 (left: 3 6 4)\n6 / 3 = 2 (left: 2 4)"
            ],
            "values": [
                21.001,
                40.0,
                0.001,
                1.001,
                2.001,
                2.001,
                1.002,
                1.002,
                1.002,
                1.002
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 0",
                "2 <- 0",
                "3 <- 0",
                "4 <- 0",
                "5 <- 1",
                "6 <- 1",
                "7 <- 1",
                "8 <- 1",
                "9 <- 1"
            ],
            "resampled_steps": [
                "7 - 3 = 4 (left: 3 6 4)\n4 - 3 = 1 (left: 1 6)",
                "7 - 3 = 4 (left: 3 6 4)\n3 + 6 = 9 (left: 4 9)",
                "7 - 3 = 4 (left: 3 6 4)\n3 + 6 = 9 (left: 4 9)",
                "7 - 3 = 4 (left: 3 6 4)\n3 + 6 = 9 (left: 4 9)",
                "7 - 3 = 4 (left: 3 6 4)\n3 + 6 = 9 (left: 4 9)",
                "7 - 3 = 4 (left: 3 6 4)\n4 - 3 = 1 (left: 1 6)",
                "7 - 3 = 4 (left: 3 6 4)\n4 - 3 = 1 (left: 1 6)",
                "7 - 3 = 4 (left: 3 6 4)\n4 - 3 = 1 (left: 1 6)",
                "7 - 3 = 4 (left: 3 6 4)\n4 - 3 = 1 (left: 1 6)",
                "7 - 3 = 4 (left: 3 6 4)\n4 - 3 = 1 (left: 1 6)"
            ]
        },
        "step_3": {
            "steps": [
                "7 - 3 = 4 (left: 3 6 4)\n4 - 3 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "7 - 3 = 4 (left: 3 6 4)\n3 + 6 = 9 (left: 4 9)\n4 + 9 = 13 (left: 9 13)",
                "7 - 3 = 4 (left: 3 6 4)\n3 + 6 = 9 (left: 4 9)\n4 * 9 = 36 (left: 9 36)",
                "7 - 3 = 4 (left: 3 6 4)\n3 + 6 = 9 (left: 4 9)\n4 + 9 = 13 (left: 9 13)",
                "7 - 3 = 4 (left: 3 6 4)\n3 + 6 = 9 (left: 4 9)\n4 + 9 = 13 (left: 9 13)",
                "7 - 3 = 4 (left: 3 6 4)\n4 - 3 = 1 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "7 - 3 = 4 (left: 3 6 4)\n4 - 3 = 1 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "7 - 3 = 4 (left: 3 6 4)\n4 - 3 = 1 (left: 1 6)\n6 - 1 = 5 (left: 5)",
                "7 - 3 = 4 (left: 3 6 4)\n4 - 3 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "7 - 3 = 4 (left: 3 6 4)\n4 - 3 = 1 (left: 1 6)\n6 / 1 = 6 (left: 6)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 5",
                "2 <- 0",
                "3 <- 2",
                "4 <- 0",
                "5 <- 3",
                "6 <- 6",
                "7 <- 0",
                "8 <- 4",
                "9 <- 7"
            ],
            "resampled_steps": [
                "7 - 3 = 4 (left: 3 6 4)\n3 + 6 = 9 (left: 4 9)\n4 + 9 = 13 (left: 9 13)",
                "7 - 3 = 4 (left: 3 6 4)\n4 - 3 = 1 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "7 - 3 = 4 (left: 3 6 4)\n4 - 3 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "7 - 3 = 4 (left: 3 6 4)\n3 + 6 = 9 (left: 4 9)\n4 * 9 = 36 (left: 9 36)",
                "7 - 3 = 4 (left: 3 6 4)\n4 - 3 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "7 - 3 = 4 (left: 3 6 4)\n3 + 6 = 9 (left: 4 9)\n4 + 9 = 13 (left: 9 13)",
                "7 - 3 = 4 (left: 3 6 4)\n4 - 3 = 1 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "7 - 3 = 4 (left: 3 6 4)\n4 - 3 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "7 - 3 = 4 (left: 3 6 4)\n3 + 6 = 9 (left: 4 9)\n4 + 9 = 13 (left: 9 13)",
                "7 - 3 = 4 (left: 3 6 4)\n4 - 3 = 1 (left: 1 6)\n6 - 1 = 5 (left: 5)"
            ]
        },
        "step_4": {
            "steps": [
                "7 - 3 = 4 (left: 3 6 4)\n3 + 6 = 9 (left: 4 9)\n4 + 9 = 13 (left: 9 13)\n9 * 13 = 117 (left: 117)",
                "7 - 3 = 4 (left: 3 6 4)\n4 - 3 = 1 (left: 1 6)\n1 * 6 = 6 (left: 6)\nThere are no possible next steps for the input 6, as it is a single number and there are no other numbers to perform operations with.",
                "7 - 3 = 4 (left: 3 6 4)\n4 - 3 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7)\nThere are no possible next steps as there are no other numbers to operate with.",
                "7 - 3 = 4 (left: 3 6 4)\n3 + 6 = 9 (left: 4 9)\n4 * 9 = 36 (left: 9 36)\n9 * 4 = 36 (left: 36)",
                "7 - 3 = 4 (left: 3 6 4)\n4 - 3 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7)\nThere are no possible next steps with the input of 7, as it is a single number and there are no other numbers to combine or operate on.",
                "7 - 3 = 4 (left: 3 6 4)\n3 + 6 = 9 (left: 4 9)\n4 + 9 = 13 (left: 9 13)\n13 - 9 = 4 (left: 4)",
                "7 - 3 = 4 (left: 3 6 4)\n4 - 3 = 1 (left: 1 6)\n6 / 1 = 6 (left: 6)\nThere are no possible next steps with the input of 6.",
                "7 - 3 = 4 (left: 3 6 4)\n4 - 3 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7)\nThere are no possible next steps as there are not enough numbers to perform any operations.",
                "7 - 3 = 4 (left: 3 6 4)\n3 + 6 = 9 (left: 4 9)\n4 + 9 = 13 (left: 9 13)\n13 / 9 = 1.44 (left: 1.44)",
                "7 - 3 = 4 (left: 3 6 4)\n4 - 3 = 1 (left: 1 6)\n6 - 1 = 5 (left: 5)\n5 + 5 = 10 (left: 5 10)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                20.0,
                0.003,
                0.002,
                0.003,
                0.003,
                0.002,
                2.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.67601
    },
    "920": {
        "input": "1 5 9 13",
        "step_1": {
            "steps": [
                "13 - 5 = 8 (left: 1 8 9)",
                "5 + 9 = 14 (left: 1 14 13)",
                "5 * 13 = 65 (left: 1 65 13)",
                "13 / 1 = 13 (left: 5 9 13)",
                "13 - 9 = 4 (left: 1 5 4)",
                "1 * 5 = 5 (left: 5 9 13)",
                "5 + 9 = 14 (left: 1 14 13)",
                "9 + 13 = 22 (left: 1 5 22)",
                "1 + 5 = 6 (left: 6 9 13)",
                "9 - 5 = 4 (left: 1 4 13)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                3.0,
                3.0,
                1.002,
                0.003,
                1.002,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 8",
                "3 <- 8",
                "4 <- 3",
                "5 <- 3",
                "6 <- 3",
                "7 <- 5",
                "8 <- 5",
                "9 <- 3"
            ],
            "resampled_steps": [
                "13 / 1 = 13 (left: 5 9 13)",
                "13 / 1 = 13 (left: 5 9 13)",
                "1 + 5 = 6 (left: 6 9 13)",
                "1 + 5 = 6 (left: 6 9 13)",
                "13 / 1 = 13 (left: 5 9 13)",
                "13 / 1 = 13 (left: 5 9 13)",
                "13 / 1 = 13 (left: 5 9 13)",
                "1 * 5 = 5 (left: 5 9 13)",
                "1 * 5 = 5 (left: 5 9 13)",
                "13 / 1 = 13 (left: 5 9 13)"
            ]
        },
        "step_2": {
            "steps": [
                "13 / 1 = 13 (left: 5 9 13)\n5 / 9 = 0.56 (left: 0.56 13)",
                "13 / 1 = 13 (left: 5 9 13)\n9 + 13 = 22 (left: 5 22)",
                "1 + 5 = 6 (left: 6 9 13)\n6 + 9 = 15 (left: 15 13)",
                "1 + 5 = 6 (left: 6 9 13)\n13 - 6 = 7 (left: 7 9)",
                "13 / 1 = 13 (left: 5 9 13)\n9 - 5 = 4 (left: 4 13)",
                "13 / 1 = 13 (left: 5 9 13)\n5 * 9 = 45 (left: 45 13)",
                "13 / 1 = 13 (left: 5 9 13)\n9 / 5 = 1.8 (left: 1.8 13)",
                "1 * 5 = 5 (left: 5 9 13)\n5 * 9 = 45 (left: 45 13)",
                "1 * 5 = 5 (left: 5 9 13)\n13 - 5 = 8 (left: 8 9)",
                "13 / 1 = 13 (left: 5 9 13)\n13 / 5 = 2.6 (left: 2.6 13)"
            ],
            "values": [
                2.001,
                0.002,
                0.003,
                1.002,
                20.002,
                0.003,
                1.001,
                0.003,
                0.003,
                2.0
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 9",
                "2 <- 4",
                "3 <- 4",
                "4 <- 6",
                "5 <- 4",
                "6 <- 9",
                "7 <- 4",
                "8 <- 4",
                "9 <- 4"
            ],
            "resampled_steps": [
                "13 / 1 = 13 (left: 5 9 13)\n9 - 5 = 4 (left: 4 13)",
                "13 / 1 = 13 (left: 5 9 13)\n13 / 5 = 2.6 (left: 2.6 13)",
                "13 / 1 = 13 (left: 5 9 13)\n9 - 5 = 4 (left: 4 13)",
                "13 / 1 = 13 (left: 5 9 13)\n9 - 5 = 4 (left: 4 13)",
                "13 / 1 = 13 (left: 5 9 13)\n9 / 5 = 1.8 (left: 1.8 13)",
                "13 / 1 = 13 (left: 5 9 13)\n9 - 5 = 4 (left: 4 13)",
                "13 / 1 = 13 (left: 5 9 13)\n13 / 5 = 2.6 (left: 2.6 13)",
                "13 / 1 = 13 (left: 5 9 13)\n9 - 5 = 4 (left: 4 13)",
                "13 / 1 = 13 (left: 5 9 13)\n9 - 5 = 4 (left: 4 13)",
                "13 / 1 = 13 (left: 5 9 13)\n9 - 5 = 4 (left: 4 13)"
            ]
        },
        "step_3": {
            "steps": [
                "13 / 1 = 13 (left: 5 9 13)\n9 - 5 = 4 (left: 4 13)\n4 + 13 = 17 (left: 17)",
                "13 / 1 = 13 (left: 5 9 13)\n13 / 5 = 2.6 (left: 2.6 13)\n2.6 + 10.4 = 13 (left: 13)",
                "13 / 1 = 13 (left: 5 9 13)\n9 - 5 = 4 (left: 4 13)\n13 - 4 = 9 (left: 9)",
                "13 / 1 = 13 (left: 5 9 13)\n9 - 5 = 4 (left: 4 13)\n13 / 4 = 3.25 (left: 3.25)",
                "13 / 1 = 13 (left: 5 9 13)\n9 / 5 = 1.8 (left: 1.8 13)\n1.8 * 13 = 23.4 (left: 23.4)",
                "13 / 1 = 13 (left: 5 9 13)\n9 - 5 = 4 (left: 4 13)\n13 - 4 = 9 (left: 9)",
                "13 / 1 = 13 (left: 5 9 13)\n13 / 5 = 2.6 (left: 2.6 13)\n13 + 2.6 = 15.6 (left: 15.6)",
                "13 / 1 = 13 (left: 5 9 13)\n9 - 5 = 4 (left: 4 13)\n4 + 13 = 17 (left: 17)",
                "13 / 1 = 13 (left: 5 9 13)\n9 - 5 = 4 (left: 4 13)\n4 * 13 = 52 (left: 52)",
                "13 / 1 = 13 (left: 5 9 13)\n9 - 5 = 4 (left: 4 13)\n13 / 4 = 3.25 (left: 3.25)"
            ],
            "values": [
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.002,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 7",
                "1 <- 5",
                "2 <- 8",
                "3 <- 4",
                "4 <- 1",
                "5 <- 6",
                "6 <- 8",
                "7 <- 7",
                "8 <- 9",
                "9 <- 9"
            ],
            "resampled_steps": [
                "13 / 1 = 13 (left: 5 9 13)\n9 - 5 = 4 (left: 4 13)\n4 + 13 = 17 (left: 17)",
                "13 / 1 = 13 (left: 5 9 13)\n9 - 5 = 4 (left: 4 13)\n13 - 4 = 9 (left: 9)",
                "13 / 1 = 13 (left: 5 9 13)\n9 - 5 = 4 (left: 4 13)\n4 * 13 = 52 (left: 52)",
                "13 / 1 = 13 (left: 5 9 13)\n9 / 5 = 1.8 (left: 1.8 13)\n1.8 * 13 = 23.4 (left: 23.4)",
                "13 / 1 = 13 (left: 5 9 13)\n13 / 5 = 2.6 (left: 2.6 13)\n2.6 + 10.4 = 13 (left: 13)",
                "13 / 1 = 13 (left: 5 9 13)\n13 / 5 = 2.6 (left: 2.6 13)\n13 + 2.6 = 15.6 (left: 15.6)",
                "13 / 1 = 13 (left: 5 9 13)\n9 - 5 = 4 (left: 4 13)\n4 * 13 = 52 (left: 52)",
                "13 / 1 = 13 (left: 5 9 13)\n9 - 5 = 4 (left: 4 13)\n4 + 13 = 17 (left: 17)",
                "13 / 1 = 13 (left: 5 9 13)\n9 - 5 = 4 (left: 4 13)\n13 / 4 = 3.25 (left: 3.25)",
                "13 / 1 = 13 (left: 5 9 13)\n9 - 5 = 4 (left: 4 13)\n13 / 4 = 3.25 (left: 3.25)"
            ]
        },
        "step_4": {
            "steps": [
                "13 / 1 = 13 (left: 5 9 13)\n9 - 5 = 4 (left: 4 13)\n4 + 13 = 17 (left: 17)\n17 - 2 = 15",
                "13 / 1 = 13 (left: 5 9 13)\n9 - 5 = 4 (left: 4 13)\n13 - 4 = 9 (left: 9)\nThere are no possible next steps for the input 9 as it is a single number and cannot be combined with any other numbers using the operations of addition, subtraction, multiplication, or division.",
                "13 / 1 = 13 (left: 5 9 13)\n9 - 5 = 4 (left: 4 13)\n4 * 13 = 52 (left: 52)\n5 + 2 = 7 (left: 7 52)",
                "13 / 1 = 13 (left: 5 9 13)\n9 / 5 = 1.8 (left: 1.8 13)\n1.8 * 13 = 23.4 (left: 23.4)\n23.4 - 8 = 15.4 (left: 8 15.4)",
                "13 / 1 = 13 (left: 5 9 13)\n13 / 5 = 2.6 (left: 2.6 13)\n2.6 + 10.4 = 13 (left: 13)\n13 - 2 = 11",
                "13 / 1 = 13 (left: 5 9 13)\n13 / 5 = 2.6 (left: 2.6 13)\n13 + 2.6 = 15.6 (left: 15.6)\n15.6 / 2 = 7.8",
                "13 / 1 = 13 (left: 5 9 13)\n9 - 5 = 4 (left: 4 13)\n4 * 13 = 52 (left: 52)\n52 / 8 = 6.5",
                "13 / 1 = 13 (left: 5 9 13)\n9 - 5 = 4 (left: 4 13)\n4 + 13 = 17 (left: 17)\n17 - 2 = 15 (left: 2 17 15)",
                "13 / 1 = 13 (left: 5 9 13)\n9 - 5 = 4 (left: 4 13)\n13 / 4 = 3.25 (left: 3.25)\n3.25 - 2 = 1.25",
                "13 / 1 = 13 (left: 5 9 13)\n9 - 5 = 4 (left: 4 13)\n13 / 4 = 3.25 (left: 3.25)\n3.25 * 2 = 6.5"
            ],
            "values": [
                0.003,
                0.003,
                2.001,
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.709794
    },
    "921": {
        "input": "5 6 7 13",
        "step_1": {
            "steps": [
                "13 - 5 = 8 (left: 6 7 8)",
                "13 - 6 = 7 (left: 5 7 7)",
                "13 - 6 = 7 (left: 5 7 7)",
                "13 - 5 = 8 (left: 6 7 8)",
                "13 - 7 = 6 (left: 5 6 6)",
                "13 - 7 = 6 (left: 5 6 6)",
                "13 - 6 = 7 (left: 5 7 7)",
                "6 * 7 = 42 (left: 5 42 13)",
                "7 / 5 = 1.4 (left: 1.4 6 13)",
                "7 - 5 = 2 (left: 2 6 13)"
            ],
            "values": [
                2.001,
                3.0,
                3.0,
                3.0,
                3.0,
                3.0,
                3.0,
                3.0,
                2.0,
                0.003
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 3",
                "3 <- 3",
                "4 <- 1",
                "5 <- 8",
                "6 <- 3",
                "7 <- 6",
                "8 <- 1",
                "9 <- 1"
            ],
            "resampled_steps": [
                "13 - 5 = 8 (left: 6 7 8)",
                "13 - 5 = 8 (left: 6 7 8)",
                "13 - 5 = 8 (left: 6 7 8)",
                "13 - 5 = 8 (left: 6 7 8)",
                "13 - 6 = 7 (left: 5 7 7)",
                "7 / 5 = 1.4 (left: 1.4 6 13)",
                "13 - 5 = 8 (left: 6 7 8)",
                "13 - 6 = 7 (left: 5 7 7)",
                "13 - 6 = 7 (left: 5 7 7)",
                "13 - 6 = 7 (left: 5 7 7)"
            ]
        },
        "step_2": {
            "steps": [
                "13 - 5 = 8 (left: 6 7 8)\n7 + 8 = 15 (left: 6 15)",
                "13 - 5 = 8 (left: 6 7 8)\n6 + 7 = 13 (left: 8 13)",
                "13 - 5 = 8 (left: 6 7 8)\n8 / 6 = 1.33 (left: 1.33 7)",
                "13 - 5 = 8 (left: 6 7 8)\n6 + 7 = 13 (left: 8 13)",
                "13 - 6 = 7 (left: 5 7 7)\n7 - 5 = 2 (left: 2 7)",
                "7 / 5 = 1.4 (left: 1.4 6 13)\n6 + 1.4 = 7.4 (left: 7.4 13)",
                "13 - 5 = 8 (left: 6 7 8)\n8 / 6 = 1.33 (left: 1.33 7)",
                "13 - 6 = 7 (left: 5 7 7)\n7 / 5 = 1.4 (left: 1.4 7)",
                "13 - 6 = 7 (left: 5 7 7)\n7 - 5 = 2 (left: 2 7)",
                "13 - 6 = 7 (left: 5 7 7)\n5 + 7 = 12 (left: 7 12)"
            ],
            "values": [
                0.002,
                2.001,
                3.0,
                0.001,
                0.0,
                1.002,
                2.001,
                2.001,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 7",
                "2 <- 7",
                "3 <- 1",
                "4 <- 2",
                "5 <- 6",
                "6 <- 2",
                "7 <- 1",
                "8 <- 5",
                "9 <- 2"
            ],
            "resampled_steps": [
                "13 - 5 = 8 (left: 6 7 8)\n8 / 6 = 1.33 (left: 1.33 7)",
                "13 - 6 = 7 (left: 5 7 7)\n7 / 5 = 1.4 (left: 1.4 7)",
                "13 - 6 = 7 (left: 5 7 7)\n7 / 5 = 1.4 (left: 1.4 7)",
                "13 - 5 = 8 (left: 6 7 8)\n6 + 7 = 13 (left: 8 13)",
                "13 - 5 = 8 (left: 6 7 8)\n8 / 6 = 1.33 (left: 1.33 7)",
                "13 - 5 = 8 (left: 6 7 8)\n8 / 6 = 1.33 (left: 1.33 7)",
                "13 - 5 = 8 (left: 6 7 8)\n8 / 6 = 1.33 (left: 1.33 7)",
                "13 - 5 = 8 (left: 6 7 8)\n6 + 7 = 13 (left: 8 13)",
                "7 / 5 = 1.4 (left: 1.4 6 13)\n6 + 1.4 = 7.4 (left: 7.4 13)",
                "13 - 5 = 8 (left: 6 7 8)\n8 / 6 = 1.33 (left: 1.33 7)"
            ]
        },
        "step_3": {
            "steps": [
                "13 - 5 = 8 (left: 6 7 8)\n8 / 6 = 1.33 (left: 1.33 7)\n7 / 1.33 = 5.263 (left: 5.263)",
                "13 - 6 = 7 (left: 5 7 7)\n7 / 5 = 1.4 (left: 1.4 7)\n7 + 1.4 = 8.4 (left: 8.4)",
                "13 - 6 = 7 (left: 5 7 7)\n7 / 5 = 1.4 (left: 1.4 7)\n7 / 1.4 = 5 (left: 5)",
                "13 - 5 = 8 (left: 6 7 8)\n6 + 7 = 13 (left: 8 13)\n8 - 13 = -5 (left: -5)",
                "13 - 5 = 8 (left: 6 7 8)\n8 / 6 = 1.33 (left: 1.33 7)\n1.33 + 7 = 8.33 (left: 8.33)",
                "13 - 5 = 8 (left: 6 7 8)\n8 / 6 = 1.33 (left: 1.33 7)\n1.33 + 7 = 8.33 (left: 8.33)",
                "13 - 5 = 8 (left: 6 7 8)\n8 / 6 = 1.33 (left: 1.33 7)\n7 - 1.33 = 5.67 (left: 5.67)",
                "13 - 5 = 8 (left: 6 7 8)\n6 + 7 = 13 (left: 8 13)\n8 + 13 = 21 (left: 21)",
                "7 / 5 = 1.4 (left: 1.4 6 13)\n6 + 1.4 = 7.4 (left: 7.4 13)\n13 / 7.4 = 1.7567 (left: 1.7567)",
                "13 - 5 = 8 (left: 6 7 8)\n8 / 6 = 1.33 (left: 1.33 7)\n1.33 - 7 = -5.67 (left: -5.67)"
            ],
            "values": [
                0.002,
                0.001,
                0.002,
                0.001,
                0.0,
                0.002,
                0.001,
                0.002,
                0.003,
                0.0
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 1",
                "2 <- 8",
                "3 <- 5",
                "4 <- 7",
                "5 <- 0",
                "6 <- 2",
                "7 <- 3",
                "8 <- 1",
                "9 <- 1"
            ],
            "resampled_steps": [
                "13 - 5 = 8 (left: 6 7 8)\n8 / 6 = 1.33 (left: 1.33 7)\n7 - 1.33 = 5.67 (left: 5.67)",
                "13 - 6 = 7 (left: 5 7 7)\n7 / 5 = 1.4 (left: 1.4 7)\n7 + 1.4 = 8.4 (left: 8.4)",
                "7 / 5 = 1.4 (left: 1.4 6 13)\n6 + 1.4 = 7.4 (left: 7.4 13)\n13 / 7.4 = 1.7567 (left: 1.7567)",
                "13 - 5 = 8 (left: 6 7 8)\n8 / 6 = 1.33 (left: 1.33 7)\n1.33 + 7 = 8.33 (left: 8.33)",
                "13 - 5 = 8 (left: 6 7 8)\n6 + 7 = 13 (left: 8 13)\n8 + 13 = 21 (left: 21)",
                "13 - 5 = 8 (left: 6 7 8)\n8 / 6 = 1.33 (left: 1.33 7)\n7 / 1.33 = 5.263 (left: 5.263)",
                "13 - 6 = 7 (left: 5 7 7)\n7 / 5 = 1.4 (left: 1.4 7)\n7 / 1.4 = 5 (left: 5)",
                "13 - 5 = 8 (left: 6 7 8)\n6 + 7 = 13 (left: 8 13)\n8 - 13 = -5 (left: -5)",
                "13 - 6 = 7 (left: 5 7 7)\n7 / 5 = 1.4 (left: 1.4 7)\n7 + 1.4 = 8.4 (left: 8.4)",
                "13 - 6 = 7 (left: 5 7 7)\n7 / 5 = 1.4 (left: 1.4 7)\n7 + 1.4 = 8.4 (left: 8.4)"
            ]
        },
        "step_4": {
            "steps": [
                "13 - 5 = 8 (left: 6 7 8)\n8 / 6 = 1.33 (left: 1.33 7)\n7 - 1.33 = 5.67 (left: 5.67)\n5.67 / 2 = 2.835",
                "13 - 6 = 7 (left: 5 7 7)\n7 / 5 = 1.4 (left: 1.4 7)\n7 + 1.4 = 8.4 (left: 8.4)\n8.4 - 2 = 6.4 (left: 6.4 8)",
                "7 / 5 = 1.4 (left: 1.4 6 13)\n6 + 1.4 = 7.4 (left: 7.4 13)\n13 / 7.4 = 1.7567 (left: 1.7567)\n1.7567 - 8 = -6.2433",
                "13 - 5 = 8 (left: 6 7 8)\n8 / 6 = 1.33 (left: 1.33 7)\n1.33 + 7 = 8.33 (left: 8.33)\nThere are no possible next steps for the input 8.33 as it is already a single value and cannot be combined with any other numbers using the basic arithmetic operations.",
                "13 - 5 = 8 (left: 6 7 8)\n6 + 7 = 13 (left: 8 13)\n8 + 13 = 21 (left: 21)\n21 + 5 = 26 (left: 5 26)",
                "13 - 5 = 8 (left: 6 7 8)\n8 / 6 = 1.33 (left: 1.33 7)\n7 / 1.33 = 5.263 (left: 5.263)\n5.263 - 2 = 3.263 (left: 3.263)",
                "13 - 6 = 7 (left: 5 7 7)\n7 / 5 = 1.4 (left: 1.4 7)\n7 / 1.4 = 5 (left: 5)\nThere are no possible next steps with just one number.",
                "13 - 5 = 8 (left: 6 7 8)\n6 + 7 = 13 (left: 8 13)\n8 - 13 = -5 (left: -5)\n-5 + 2 = -3 (left: 2)",
                "13 - 6 = 7 (left: 5 7 7)\n7 / 5 = 1.4 (left: 1.4 7)\n7 + 1.4 = 8.4 (left: 8.4)\nThere are no possible next steps for the input 8.4 as it is already a single number.",
                "13 - 6 = 7 (left: 5 7 7)\n7 / 5 = 1.4 (left: 1.4 7)\n7 + 1.4 = 8.4 (left: 8.4)\n8.4 - 2 = 6.4 (left: 6.4)"
            ],
            "values": [
                0.003,
                3.0,
                0.003,
                0.003,
                2.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.7441500000000001
    },
    "922": {
        "input": "5 5 8 10",
        "step_1": {
            "steps": [
                "8 + 5 = 13 (left: 5 13 10)",
                "5 + 5 = 10 (left: 8 10 10)",
                "10 - 5 = 5 (left: 5 8 5)",
                "10 / 5 = 2 (left: 5 8 2)",
                "8 + 5 = 13 (left: 5 13 10)",
                "10 - 8 = 2 (left: 5 2 10)",
                "5 * 5 = 25 (left: 25 8 10)",
                "10 - 5 = 5 (left: 5 8 10)",
                "5 * 5 = 25 (left: 8 25 10)",
                "5 - 5 = 0 (left: 0 8 10)"
            ],
            "values": [
                3.0,
                2.001,
                2.0,
                2.0,
                3.0,
                1.001,
                2.0,
                3.0,
                2.0,
                3.0
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 2",
                "2 <- 0",
                "3 <- 6",
                "4 <- 6",
                "5 <- 2",
                "6 <- 0",
                "7 <- 1",
                "8 <- 2",
                "9 <- 0"
            ],
            "resampled_steps": [
                "8 + 5 = 13 (left: 5 13 10)",
                "10 - 5 = 5 (left: 5 8 5)",
                "8 + 5 = 13 (left: 5 13 10)",
                "5 * 5 = 25 (left: 25 8 10)",
                "5 * 5 = 25 (left: 25 8 10)",
                "10 - 5 = 5 (left: 5 8 5)",
                "8 + 5 = 13 (left: 5 13 10)",
                "5 + 5 = 10 (left: 8 10 10)",
                "10 - 5 = 5 (left: 5 8 5)",
                "8 + 5 = 13 (left: 5 13 10)"
            ]
        },
        "step_2": {
            "steps": [
                "8 + 5 = 13 (left: 5 13 10)\n10 + 5 = 15 (left: 5 15)",
                "10 - 5 = 5 (left: 5 8 5)\n5 - 8 = -3 (left: -3 5)",
                "8 + 5 = 13 (left: 5 13 10)\n13 - 5 = 8 (left: 8 10)",
                "5 * 5 = 25 (left: 25 8 10)\n10 / 8 = 1.25 (left: 1.25 8)",
                "5 * 5 = 25 (left: 25 8 10)\n10 - 8 = 2 (left: 2 25)",
                "10 - 5 = 5 (left: 5 8 5)\n8 / 5 = 1.6 (left: 5 1.6)",
                "8 + 5 = 13 (left: 5 13 10)\n13 - 5 = 8 (left: 8 10)",
                "5 + 5 = 10 (left: 8 10 10)\n10 / 8 = 1.25 (left: 1.25 10)",
                "10 - 5 = 5 (left: 5 8 5)\n8 - 5 = 3 (left: 3 5)",
                "8 + 5 = 13 (left: 5 13 10)\n5 + 13 = 18 (left: 10 18)"
            ],
            "values": [
                1.002,
                0.001,
                1.001,
                3.0,
                0.003,
                1.001,
                1.002,
                2.0,
                1.0,
                1.002
            ],
            "resampled": [
                "0 <- 7",
                "1 <- 7",
                "2 <- 7",
                "3 <- 3",
                "4 <- 0",
                "5 <- 0",
                "6 <- 8",
                "7 <- 8",
                "8 <- 3",
                "9 <- 8"
            ],
            "resampled_steps": [
                "5 + 5 = 10 (left: 8 10 10)\n10 / 8 = 1.25 (left: 1.25 10)",
                "5 + 5 = 10 (left: 8 10 10)\n10 / 8 = 1.25 (left: 1.25 10)",
                "5 + 5 = 10 (left: 8 10 10)\n10 / 8 = 1.25 (left: 1.25 10)",
                "5 * 5 = 25 (left: 25 8 10)\n10 / 8 = 1.25 (left: 1.25 8)",
                "8 + 5 = 13 (left: 5 13 10)\n10 + 5 = 15 (left: 5 15)",
                "8 + 5 = 13 (left: 5 13 10)\n10 + 5 = 15 (left: 5 15)",
                "10 - 5 = 5 (left: 5 8 5)\n8 - 5 = 3 (left: 3 5)",
                "10 - 5 = 5 (left: 5 8 5)\n8 - 5 = 3 (left: 3 5)",
                "5 * 5 = 25 (left: 25 8 10)\n10 / 8 = 1.25 (left: 1.25 8)",
                "10 - 5 = 5 (left: 5 8 5)\n8 - 5 = 3 (left: 3 5)"
            ]
        },
        "step_3": {
            "steps": [
                "5 + 5 = 10 (left: 8 10 10)\n10 / 8 = 1.25 (left: 1.25 10)\n10 / 1.25 = 8 (left: 8 10)",
                "5 + 5 = 10 (left: 8 10 10)\n10 / 8 = 1.25 (left: 1.25 10)\n10 - 1.25 = 8.75 (left: 8.75)",
                "5 + 5 = 10 (left: 8 10 10)\n10 / 8 = 1.25 (left: 1.25 10)\n10 - 1.25 = 8.75 (left: 8.75 10)",
                "5 * 5 = 25 (left: 25 8 10)\n10 / 8 = 1.25 (left: 1.25 8)\n8 / 1.25 = 6.4 (left: 6.4)",
                "8 + 5 = 13 (left: 5 13 10)\n10 + 5 = 15 (left: 5 15)\n5 + 15 = 20 (left: 20)",
                "8 + 5 = 13 (left: 5 13 10)\n10 + 5 = 15 (left: 5 15)\n15 / 5 = 3 (left: 3)",
                "10 - 5 = 5 (left: 5 8 5)\n8 - 5 = 3 (left: 3 5)\n3 + 5 = 8 (left: 5 8)",
                "10 - 5 = 5 (left: 5 8 5)\n8 - 5 = 3 (left: 3 5)\n5 / 3 = 1.66666666667 (left: 1.66666666667)",
                "5 * 5 = 25 (left: 25 8 10)\n10 / 8 = 1.25 (left: 1.25 8)\n8 - 1.25 = 6.75 (left: 6.75)",
                "10 - 5 = 5 (left: 5 8 5)\n8 - 5 = 3 (left: 3 5)\n5 / 3 = 1.67 (left: 1.67)"
            ],
            "values": [
                2.0,
                0.002,
                1.001,
                0.001,
                0.002,
                0.001,
                0.001,
                0.0,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 2",
                "3 <- 0",
                "4 <- 0",
                "5 <- 0",
                "6 <- 0",
                "7 <- 2",
                "8 <- 0",
                "9 <- 2"
            ],
            "resampled_steps": [
                "5 + 5 = 10 (left: 8 10 10)\n10 / 8 = 1.25 (left: 1.25 10)\n10 / 1.25 = 8 (left: 8 10)",
                "5 + 5 = 10 (left: 8 10 10)\n10 / 8 = 1.25 (left: 1.25 10)\n10 / 1.25 = 8 (left: 8 10)",
                "5 + 5 = 10 (left: 8 10 10)\n10 / 8 = 1.25 (left: 1.25 10)\n10 - 1.25 = 8.75 (left: 8.75 10)",
                "5 + 5 = 10 (left: 8 10 10)\n10 / 8 = 1.25 (left: 1.25 10)\n10 / 1.25 = 8 (left: 8 10)",
                "5 + 5 = 10 (left: 8 10 10)\n10 / 8 = 1.25 (left: 1.25 10)\n10 / 1.25 = 8 (left: 8 10)",
                "5 + 5 = 10 (left: 8 10 10)\n10 / 8 = 1.25 (left: 1.25 10)\n10 / 1.25 = 8 (left: 8 10)",
                "5 + 5 = 10 (left: 8 10 10)\n10 / 8 = 1.25 (left: 1.25 10)\n10 / 1.25 = 8 (left: 8 10)",
                "5 + 5 = 10 (left: 8 10 10)\n10 / 8 = 1.25 (left: 1.25 10)\n10 - 1.25 = 8.75 (left: 8.75 10)",
                "5 + 5 = 10 (left: 8 10 10)\n10 / 8 = 1.25 (left: 1.25 10)\n10 / 1.25 = 8 (left: 8 10)",
                "5 + 5 = 10 (left: 8 10 10)\n10 / 8 = 1.25 (left: 1.25 10)\n10 - 1.25 = 8.75 (left: 8.75 10)"
            ]
        },
        "step_4": {
            "steps": [
                "5 + 5 = 10 (left: 8 10 10)\n10 / 8 = 1.25 (left: 1.25 10)\n10 / 1.25 = 8 (left: 8 10)\n8 * 10 = 80 (left: 80)",
                "5 + 5 = 10 (left: 8 10 10)\n10 / 8 = 1.25 (left: 1.25 10)\n10 / 1.25 = 8 (left: 8 10)\n10 + 8 = 18 (left: 18)",
                "5 + 5 = 10 (left: 8 10 10)\n10 / 8 = 1.25 (left: 1.25 10)\n10 - 1.25 = 8.75 (left: 8.75 10)\n8.75 + 10 = 18.75 (left: 18.75)",
                "5 + 5 = 10 (left: 8 10 10)\n10 / 8 = 1.25 (left: 1.25 10)\n10 / 1.25 = 8 (left: 8 10)\n8 + 10 = 18 (left: 18)",
                "5 + 5 = 10 (left: 8 10 10)\n10 / 8 = 1.25 (left: 1.25 10)\n10 / 1.25 = 8 (left: 8 10)\n8 * 10 = 80 (left: 80)",
                "5 + 5 = 10 (left: 8 10 10)\n10 / 8 = 1.25 (left: 1.25 10)\n10 / 1.25 = 8 (left: 8 10)\n8 * 10 = 80 (left: 80)",
                "5 + 5 = 10 (left: 8 10 10)\n10 / 8 = 1.25 (left: 1.25 10)\n10 / 1.25 = 8 (left: 8 10)\n8 / 10 = 0.8",
                "5 + 5 = 10 (left: 8 10 10)\n10 / 8 = 1.25 (left: 1.25 10)\n10 - 1.25 = 8.75 (left: 8.75 10)\n8.75 + 10 = 18.75 (left: 10 18.75)",
                "5 + 5 = 10 (left: 8 10 10)\n10 / 8 = 1.25 (left: 1.25 10)\n10 / 1.25 = 8 (left: 8 10)\n10 / 8 = 1.25 (left: 1.25)",
                "5 + 5 = 10 (left: 8 10 10)\n10 / 8 = 1.25 (left: 1.25 10)\n10 - 1.25 = 8.75 (left: 8.75 10)\n10 - 8.75 = 1.25"
            ],
            "values": [
                0.001,
                0.001,
                0.002,
                0.0,
                0.003,
                0.003,
                0.003,
                1.002,
                0.002,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.777676
    },
    "923": {
        "input": "2 4 6 12",
        "step_1": {
            "steps": [
                "2 + 4 = 6 (left: 6 6 12)",
                "6 * 2 = 12 (left: 4 12 12)",
                "12 / 2 = 6 (left: 4 6 12)",
                "4 * 6 = 24 (left: 2 24 12)",
                "6 * 2 = 12 (left: 4 12 12)",
                "6 * 2 = 12 (left: 4 12 12)",
                "2 + 4 = 6 (left: 6 6 12)",
                "6 + 4 = 10 (left: 10 6 12)",
                "2 + 4 = 6 (left: 6 6 12)",
                "2 + 4 = 6 (left: 6 6 12)"
            ],
            "values": [
                40.001,
                22.0,
                60.0,
                22.0,
                22.0,
                41.0,
                60.0,
                3.0,
                41.0,
                60.0
            ],
            "resampled": [
                "0 <- 8",
                "1 <- 9",
                "2 <- 5",
                "3 <- 9",
                "4 <- 9",
                "5 <- 4",
                "6 <- 8",
                "7 <- 8",
                "8 <- 9",
                "9 <- 9"
            ],
            "resampled_steps": [
                "2 + 4 = 6 (left: 6 6 12)",
                "2 + 4 = 6 (left: 6 6 12)",
                "6 * 2 = 12 (left: 4 12 12)",
                "2 + 4 = 6 (left: 6 6 12)",
                "2 + 4 = 6 (left: 6 6 12)",
                "6 * 2 = 12 (left: 4 12 12)",
                "2 + 4 = 6 (left: 6 6 12)",
                "2 + 4 = 6 (left: 6 6 12)",
                "2 + 4 = 6 (left: 6 6 12)",
                "2 + 4 = 6 (left: 6 6 12)"
            ]
        },
        "step_2": {
            "steps": [
                "2 + 4 = 6 (left: 6 6 12)\n6 - 6 = 0 (left: 0 12)",
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)",
                "6 * 2 = 12 (left: 4 12 12)\n4 + 12 = 16 (left: 12 16)",
                "2 + 4 = 6 (left: 6 6 12)\n6 / 6 = 1 (left: 1 12)",
                "2 + 4 = 6 (left: 6 6 12)\n6 - 6 = 0 (left: 0 12)",
                "6 * 2 = 12 (left: 4 12 12)\n12 / 4 = 3 (left: 3 12)",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "2 + 4 = 6 (left: 6 6 12)\n6 - 6 = 0 (left: 0 12)",
                "2 + 4 = 6 (left: 6 6 12)\n6 - 6 = 0 (left: 0 12)",
                "2 + 4 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)"
            ],
            "values": [
                20.002,
                60.0,
                20.002,
                1.002,
                40.001,
                21.001,
                20.002,
                21.001,
                0.002,
                60.0
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 1",
                "2 <- 9",
                "3 <- 1",
                "4 <- 5",
                "5 <- 7",
                "6 <- 1",
                "7 <- 6",
                "8 <- 9",
                "9 <- 4"
            ],
            "resampled_steps": [
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)",
                "2 + 4 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)",
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)",
                "6 * 2 = 12 (left: 4 12 12)\n12 / 4 = 3 (left: 3 12)",
                "2 + 4 = 6 (left: 6 6 12)\n6 - 6 = 0 (left: 0 12)",
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "2 + 4 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)",
                "2 + 4 = 6 (left: 6 6 12)\n6 - 6 = 0 (left: 0 12)"
            ]
        },
        "step_3": {
            "steps": [
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "2 + 4 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 * 12 = 432 (left: 432)",
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "6 * 2 = 12 (left: 4 12 12)\n12 / 4 = 3 (left: 3 12)\n12 / 3 = 4 (left: 4 4)",
                "2 + 4 = 6 (left: 6 6 12)\n6 - 6 = 0 (left: 0 12)\n0 + 12 = 12 (left: 12)",
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)",
                "2 + 4 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 * 12 = 432 (left: 432)",
                "2 + 4 = 6 (left: 6 6 12)\n6 - 6 = 0 (left: 0 12)\nThere are no possible next steps for the input 0 12."
            ],
            "values": [
                20.0,
                0.002,
                0.001,
                0.002,
                1.002,
                0.0,
                60.0,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 0",
                "2 <- 6",
                "3 <- 0",
                "4 <- 6",
                "5 <- 0",
                "6 <- 0",
                "7 <- 6",
                "8 <- 0",
                "9 <- 6"
            ],
            "resampled_steps": [
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)"
            ]
        },
        "step_4": {
            "steps": [
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: ((2 + 4) / 6) * 12 = 24",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((2 + 4) + 6) + 12 = 24",
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (2 + 4) * (6 / 12) = 24",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((2 + 4) + 6) + 12 = 24",
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (2 + 4) * (6 / 12) = 24",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((2 + 4) + 6) + 12 = 24",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((2 + 4) + 6) + 12 = 24",
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (2 + 4) * (6 / 12) = 24",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((2 + 4) + 6) + 12 = 24",
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (2 + 4) * (6 / 12) = 24"
            ],
            "values": [
                60.0,
                20.002,
                60.0,
                60.0,
                40.001,
                60.0,
                20.002,
                60.0,
                20.002,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ],
        "cost": 0.810154
    },
    "924": {
        "input": "6 7 8 11",
        "step_1": {
            "steps": [
                "6 + 7 = 13 (left: 8 11 13)",
                "11 - 6 = 5 (left: 5 7 8)",
                "6 * 7 = 42 (left: 8 11 42)",
                "11 - 6 = 5 (left: 5 7 8)",
                "6 + 7 = 13 (left: 8 11 13)",
                "11 - 8 = 3 (left: 6 7 3)",
                "6 + 7 = 13 (left: 8 11 13)",
                "7 + 8 = 15 (left: 6 11 15)",
                "8 * 11 = 88 (left: 6 7 88)",
                "7 + 8 = 15 (left: 6 11 15)"
            ],
            "values": [
                3.0,
                3.0,
                0.002,
                3.0,
                2.001,
                3.0,
                3.0,
                1.002,
                2.001,
                3.0
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 5",
                "2 <- 4",
                "3 <- 1",
                "4 <- 5",
                "5 <- 3",
                "6 <- 4",
                "7 <- 8",
                "8 <- 5",
                "9 <- 4"
            ],
            "resampled_steps": [
                "11 - 6 = 5 (left: 5 7 8)",
                "11 - 8 = 3 (left: 6 7 3)",
                "6 + 7 = 13 (left: 8 11 13)",
                "11 - 6 = 5 (left: 5 7 8)",
                "11 - 8 = 3 (left: 6 7 3)",
                "11 - 6 = 5 (left: 5 7 8)",
                "6 + 7 = 13 (left: 8 11 13)",
                "8 * 11 = 88 (left: 6 7 88)",
                "11 - 8 = 3 (left: 6 7 3)",
                "6 + 7 = 13 (left: 8 11 13)"
            ]
        },
        "step_2": {
            "steps": [
                "11 - 6 = 5 (left: 5 7 8)\n5 + 7 = 12 (left: 8 12)",
                "11 - 8 = 3 (left: 6 7 3)\n7 - 6 = 1 (left: 1 3)",
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)",
                "11 - 6 = 5 (left: 5 7 8)\n7 + 8 = 15 (left: 5 15)",
                "11 - 8 = 3 (left: 6 7 3)\n5 + 5 = 10 (left: 10 10)",
                "11 - 6 = 5 (left: 5 7 8)\n8 / 5 = 1.6 (left: 7 1.6)",
                "6 + 7 = 13 (left: 8 11 13)\n11 * 13 = 143 (left: 8 143)",
                "8 * 11 = 88 (left: 6 7 88)\n88 / 6 = 14.67 (left: 14.67)",
                "11 - 8 = 3 (left: 6 7 3)\n6 * 7 = 42 (left: 42 3)",
                "6 + 7 = 13 (left: 8 11 13)\n13 - 11 = 2 (left: 8 2)"
            ],
            "values": [
                2.001,
                2.001,
                20.002,
                0.003,
                0.003,
                2.0,
                1.001,
                0.003,
                20.001,
                2.001
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 8",
                "2 <- 2",
                "3 <- 8",
                "4 <- 2",
                "5 <- 2",
                "6 <- 2",
                "7 <- 2",
                "8 <- 5",
                "9 <- 8"
            ],
            "resampled_steps": [
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)",
                "11 - 8 = 3 (left: 6 7 3)\n6 * 7 = 42 (left: 42 3)",
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)",
                "11 - 8 = 3 (left: 6 7 3)\n6 * 7 = 42 (left: 42 3)",
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)",
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)",
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)",
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)",
                "11 - 6 = 5 (left: 5 7 8)\n8 / 5 = 1.6 (left: 7 1.6)",
                "11 - 8 = 3 (left: 6 7 3)\n6 * 7 = 42 (left: 42 3)"
            ]
        },
        "step_3": {
            "steps": [
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)\n8 + 24 = 32 (left: 32)",
                "11 - 8 = 3 (left: 6 7 3)\n6 * 7 = 42 (left: 42 3)\n42 + 3 = 45 (left: 45)",
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)",
                "11 - 8 = 3 (left: 6 7 3)\n6 * 7 = 42 (left: 42 3)\n42 * 3 = 126 (left: 3 126)",
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)\n24 - 8 = 16 (left: 16)",
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)\n8 * 3 = 24 (left: 24)",
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)\n24 - 8 = 16 (left: 16)",
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)",
                "11 - 6 = 5 (left: 5 7 8)\n8 / 5 = 1.6 (left: 7 1.6)\n7 / 1.6 = 4.375 (left: 4.375)",
                "11 - 8 = 3 (left: 6 7 3)\n6 * 7 = 42 (left: 42 3)\n42 * 3 = 126 (left: 3 126)"
            ],
            "values": [
                0.002,
                0.003,
                60.0,
                0.003,
                0.002,
                40.0,
                0.001,
                60.0,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 7",
                "2 <- 2",
                "3 <- 7",
                "4 <- 7",
                "5 <- 2",
                "6 <- 7",
                "7 <- 5",
                "8 <- 7",
                "9 <- 7"
            ],
            "resampled_steps": [
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)",
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)",
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)",
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)",
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)",
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)",
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)",
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)\n8 * 3 = 24 (left: 24)",
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)",
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)"
            ]
        },
        "step_4": {
            "steps": [
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)\n3 / 8 = 0.375 (left: 0.375 8)",
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)\n8 / 3 = 2.67 (left: 3 2.67)",
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)\n3 + 8 = 11 (left: 8 11)",
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)",
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)\n3 + 8 = 11 (left: 8 11)",
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)\n3 - 8 = -5 (left: -5 8)",
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)\n8 * 3 = 24 (left: 24)\nAnswer: (6 + 7) + (8 * 3) = 24",
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)\n3 * 8 = 24 (left: 8 24)",
                "6 + 7 = 13 (left: 8 11 13)\n11 + 13 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)\n3 * 8 = 24 (left: 8 24)"
            ],
            "values": [
                0.003,
                40.0,
                1.002,
                1.001,
                1.002,
                0.003,
                2.001,
                20.002,
                1.002,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.8452839999999999
    },
    "925": {
        "input": "7 9 9 13",
        "step_1": {
            "steps": [
                "9 / 7 = 1.28 (left: 1.28 9 13)",
                "7 * 9 = 63 (left: 63 9 13)",
                "9 - 7 = 2 (left: 2 9 13)",
                "9 / 3 = 3 (left: 7 3 13)",
                "13 - 7 = 6 (left: 6 9 9)",
                "9 / 7 = 1.2857 (left: 1.2857 9 13)",
                "13 - 9 = 4 (left: 7 4 9)",
                "13 - 7 = 6 (left: 6 9 13)",
                "9 - 7 = 2 (left: 2 9 13)",
                "13 + 7 = 20 (left: 9 9 20)"
            ],
            "values": [
                3.0,
                2.0,
                2.001,
                1.002,
                1.002,
                3.0,
                2.001,
                20.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 5",
                "1 <- 1",
                "2 <- 1",
                "3 <- 0",
                "4 <- 7",
                "5 <- 7",
                "6 <- 1",
                "7 <- 7",
                "8 <- 0",
                "9 <- 5"
            ],
            "resampled_steps": [
                "9 / 7 = 1.2857 (left: 1.2857 9 13)",
                "7 * 9 = 63 (left: 63 9 13)",
                "7 * 9 = 63 (left: 63 9 13)",
                "9 / 7 = 1.28 (left: 1.28 9 13)",
                "13 - 7 = 6 (left: 6 9 13)",
                "13 - 7 = 6 (left: 6 9 13)",
                "7 * 9 = 63 (left: 63 9 13)",
                "13 - 7 = 6 (left: 6 9 13)",
                "9 / 7 = 1.28 (left: 1.28 9 13)",
                "9 / 7 = 1.2857 (left: 1.2857 9 13)"
            ]
        },
        "step_2": {
            "steps": [
                "9 / 7 = 1.2857 (left: 1.2857 9 13)\n9 / 1.2857 = 7 (left: 7 13)",
                "7 * 9 = 63 (left: 63 9 13)\n9 - 13 = -4 (left: 63 -4)",
                "7 * 9 = 63 (left: 63 9 13)\n63 - 9 = 54 (left: 54 13)",
                "9 / 7 = 1.28 (left: 1.28 9 13)\n13 / 1.28 = 10.15625 (left: 9 10.15625)",
                "13 - 7 = 6 (left: 6 9 13)\n13 - 6 = 7 (left: 6 7)",
                "13 - 7 = 6 (left: 6 9 13)\n9 * 6 = 54 (left: 54 13)",
                "7 * 9 = 63 (left: 63 9 13)\n13 * 9 = 117 (left: 63 117)",
                "13 - 7 = 6 (left: 6 9 13)\n9 + 13 = 22 (left: 6 22)",
                "9 / 7 = 1.28 (left: 1.28 9 13)\n1.28 + 9 = 10.28 (left: 10.28 13)",
                "9 / 7 = 1.2857 (left: 1.2857 9 13)\n13 - 9 = 4 (left: 1.2857 4)"
            ],
            "values": [
                1.001,
                0.002,
                0.002,
                1.002,
                0.003,
                0.003,
                0.003,
                1.002,
                0.002,
                3.0
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 9",
                "2 <- 9",
                "3 <- 3",
                "4 <- 9",
                "5 <- 9",
                "6 <- 3",
                "7 <- 9",
                "8 <- 9",
                "9 <- 3"
            ],
            "resampled_steps": [
                "9 / 7 = 1.2857 (left: 1.2857 9 13)\n9 / 1.2857 = 7 (left: 7 13)",
                "9 / 7 = 1.2857 (left: 1.2857 9 13)\n13 - 9 = 4 (left: 1.2857 4)",
                "9 / 7 = 1.2857 (left: 1.2857 9 13)\n13 - 9 = 4 (left: 1.2857 4)",
                "9 / 7 = 1.28 (left: 1.28 9 13)\n13 / 1.28 = 10.15625 (left: 9 10.15625)",
                "9 / 7 = 1.2857 (left: 1.2857 9 13)\n13 - 9 = 4 (left: 1.2857 4)",
                "9 / 7 = 1.2857 (left: 1.2857 9 13)\n13 - 9 = 4 (left: 1.2857 4)",
                "9 / 7 = 1.28 (left: 1.28 9 13)\n13 / 1.28 = 10.15625 (left: 9 10.15625)",
                "9 / 7 = 1.2857 (left: 1.2857 9 13)\n13 - 9 = 4 (left: 1.2857 4)",
                "9 / 7 = 1.2857 (left: 1.2857 9 13)\n13 - 9 = 4 (left: 1.2857 4)",
                "9 / 7 = 1.28 (left: 1.28 9 13)\n13 / 1.28 = 10.15625 (left: 9 10.15625)"
            ]
        },
        "step_3": {
            "steps": [
                "9 / 7 = 1.2857 (left: 1.2857 9 13)\n9 / 1.2857 = 7 (left: 7 13)\n13 - 7 = 6 (left: 6)",
                "9 / 7 = 1.2857 (left: 1.2857 9 13)\n13 - 9 = 4 (left: 1.2857 4)\n1.2857 + 4 = 5.2857 (left: 5.2857)",
                "9 / 7 = 1.2857 (left: 1.2857 9 13)\n13 - 9 = 4 (left: 1.2857 4)\n1.2857 * 4 = 5.1428 (left: 4 5.1428)",
                "9 / 7 = 1.28 (left: 1.28 9 13)\n13 / 1.28 = 10.15625 (left: 9 10.15625)\n9 * 10.15625 = 91.40625 (left: 91.40625)",
                "9 / 7 = 1.2857 (left: 1.2857 9 13)\n13 - 9 = 4 (left: 1.2857 4)\n4 / 1.2857 = 3.1104 (left: 3.1104)",
                "9 / 7 = 1.2857 (left: 1.2857 9 13)\n13 - 9 = 4 (left: 1.2857 4)\n4 / 1.2857 = 3.1111 (left: 3.1111)",
                "9 / 7 = 1.28 (left: 1.28 9 13)\n13 / 1.28 = 10.15625 (left: 9 10.15625)\n9 + 10.15625 = 19.15625 (left: 10.15625 19.15625)",
                "9 / 7 = 1.2857 (left: 1.2857 9 13)\n13 - 9 = 4 (left: 1.2857 4)\n4 - 1.2857 = 2.7143 (left: 2.7143 4)",
                "9 / 7 = 1.2857 (left: 1.2857 9 13)\n13 - 9 = 4 (left: 1.2857 4)\n1.2857 * 4 = 5.1428 (left: 5.1428)",
                "9 / 7 = 1.28 (left: 1.28 9 13)\n13 / 1.28 = 10.15625 (left: 9 10.15625)\n9 * 10.15625 = 91.40625 (left: 10.15625 91.40625)"
            ],
            "values": [
                0.002,
                0.001,
                0.001,
                0.003,
                0.001,
                0.002,
                1.002,
                1.001,
                0.0,
                2.0
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 9",
                "2 <- 9",
                "3 <- 9",
                "4 <- 6",
                "5 <- 6",
                "6 <- 7",
                "7 <- 9",
                "8 <- 9",
                "9 <- 9"
            ],
            "resampled_steps": [
                "9 / 7 = 1.28 (left: 1.28 9 13)\n13 / 1.28 = 10.15625 (left: 9 10.15625)\n9 * 10.15625 = 91.40625 (left: 10.15625 91.40625)",
                "9 / 7 = 1.28 (left: 1.28 9 13)\n13 / 1.28 = 10.15625 (left: 9 10.15625)\n9 * 10.15625 = 91.40625 (left: 10.15625 91.40625)",
                "9 / 7 = 1.28 (left: 1.28 9 13)\n13 / 1.28 = 10.15625 (left: 9 10.15625)\n9 * 10.15625 = 91.40625 (left: 10.15625 91.40625)",
                "9 / 7 = 1.28 (left: 1.28 9 13)\n13 / 1.28 = 10.15625 (left: 9 10.15625)\n9 * 10.15625 = 91.40625 (left: 10.15625 91.40625)",
                "9 / 7 = 1.28 (left: 1.28 9 13)\n13 / 1.28 = 10.15625 (left: 9 10.15625)\n9 + 10.15625 = 19.15625 (left: 10.15625 19.15625)",
                "9 / 7 = 1.28 (left: 1.28 9 13)\n13 / 1.28 = 10.15625 (left: 9 10.15625)\n9 + 10.15625 = 19.15625 (left: 10.15625 19.15625)",
                "9 / 7 = 1.2857 (left: 1.2857 9 13)\n13 - 9 = 4 (left: 1.2857 4)\n4 - 1.2857 = 2.7143 (left: 2.7143 4)",
                "9 / 7 = 1.28 (left: 1.28 9 13)\n13 / 1.28 = 10.15625 (left: 9 10.15625)\n9 * 10.15625 = 91.40625 (left: 10.15625 91.40625)",
                "9 / 7 = 1.28 (left: 1.28 9 13)\n13 / 1.28 = 10.15625 (left: 9 10.15625)\n9 * 10.15625 = 91.40625 (left: 10.15625 91.40625)",
                "9 / 7 = 1.28 (left: 1.28 9 13)\n13 / 1.28 = 10.15625 (left: 9 10.15625)\n9 * 10.15625 = 91.40625 (left: 10.15625 91.40625)"
            ]
        },
        "step_4": {
            "steps": [
                "9 / 7 = 1.28 (left: 1.28 9 13)\n13 / 1.28 = 10.15625 (left: 9 10.15625)\n9 * 10.15625 = 91.40625 (left: 10.15625 91.40625)\n10.15625 + 91.40625 = 101.5625 (left: 101.5625)",
                "9 / 7 = 1.28 (left: 1.28 9 13)\n13 / 1.28 = 10.15625 (left: 9 10.15625)\n9 * 10.15625 = 91.40625 (left: 10.15625 91.40625)\n10.15625 + 91.40625 = 101.5625 (left: 101.5625)",
                "9 / 7 = 1.28 (left: 1.28 9 13)\n13 / 1.28 = 10.15625 (left: 9 10.15625)\n9 * 10.15625 = 91.40625 (left: 10.15625 91.40625)\n10.15625 - 91.40625 = -81.25 (left: -81.25)",
                "9 / 7 = 1.28 (left: 1.28 9 13)\n13 / 1.28 = 10.15625 (left: 9 10.15625)\n9 * 10.15625 = 91.40625 (left: 10.15625 91.40625)\n10.15625 - 91.40625 = -81.25 (left: -81.25)",
                "9 / 7 = 1.28 (left: 1.28 9 13)\n13 / 1.28 = 10.15625 (left: 9 10.15625)\n9 + 10.15625 = 19.15625 (left: 10.15625 19.15625)\n19.15625 - 10.15625 = 9 (left: 9 10.15625)",
                "9 / 7 = 1.28 (left: 1.28 9 13)\n13 / 1.28 = 10.15625 (left: 9 10.15625)\n9 + 10.15625 = 19.15625 (left: 10.15625 19.15625)\n10.15625 - 19.15625 = -9 (left: -9)",
                "9 / 7 = 1.2857 (left: 1.2857 9 13)\n13 - 9 = 4 (left: 1.2857 4)\n4 - 1.2857 = 2.7143 (left: 2.7143 4)\nPossible next steps:",
                "9 / 7 = 1.28 (left: 1.28 9 13)\n13 / 1.28 = 10.15625 (left: 9 10.15625)\n9 * 10.15625 = 91.40625 (left: 10.15625 91.40625)\n91.40625 / 10.15625 = 9 (left: 9)",
                "9 / 7 = 1.28 (left: 1.28 9 13)\n13 / 1.28 = 10.15625 (left: 9 10.15625)\n9 * 10.15625 = 91.40625 (left: 10.15625 91.40625)\n91.40625 - 10.15625 = 81.25 (left: 81.25)",
                "9 / 7 = 1.28 (left: 1.28 9 13)\n13 / 1.28 = 10.15625 (left: 9 10.15625)\n9 * 10.15625 = 91.40625 (left: 10.15625 91.40625)\n91.40625 / 10.15625 = 9 (left: 9 10.15625)"
            ],
            "values": [
                0.002,
                0.003,
                0.002,
                0.002,
                2.001,
                0.003,
                0.003,
                0.003,
                0.003,
                2.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.8830330000000001
    },
    "926": {
        "input": "3 6 9 12",
        "step_1": {
            "steps": [
                "12 - 3 = 9 (left: 6 9 12)",
                "9 + 3 = 12 (left: 6 9 12)",
                "12 / 3 = 4 (left: 4 6 9)",
                "6 / 3 = 2 (left: 2 9 12)",
                "3 + 6 = 9 (left: 9 9 12)",
                "9 / 3 = 3 (left: 3 6 12)",
                "3 * 6 = 18 (left: 9 18 12)",
                "12 / 3 = 4 (left: 4 6 9 12)",
                "12 / 3 = 4 (left: 6 9 4)",
                "9 + 3 = 12 (left: 6 9 12)"
            ],
            "values": [
                21.0,
                41.0,
                41.0,
                21.0,
                1.002,
                20.002,
                3.0,
                20.0,
                3.0,
                21.0
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 5",
                "2 <- 3",
                "3 <- 1",
                "4 <- 1",
                "5 <- 7",
                "6 <- 3",
                "7 <- 7",
                "8 <- 7",
                "9 <- 1"
            ],
            "resampled_steps": [
                "12 / 3 = 4 (left: 4 6 9)",
                "9 / 3 = 3 (left: 3 6 12)",
                "6 / 3 = 2 (left: 2 9 12)",
                "9 + 3 = 12 (left: 6 9 12)",
                "9 + 3 = 12 (left: 6 9 12)",
                "12 / 3 = 4 (left: 4 6 9 12)",
                "6 / 3 = 2 (left: 2 9 12)",
                "12 / 3 = 4 (left: 4 6 9 12)",
                "12 / 3 = 4 (left: 4 6 9 12)",
                "9 + 3 = 12 (left: 6 9 12)"
            ]
        },
        "step_2": {
            "steps": [
                "12 / 3 = 4 (left: 4 6 9)\n4 + 6 = 10 (left: 10 9)",
                "9 / 3 = 3 (left: 3 6 12)\n3 * 6 = 18 (left: 18 12)",
                "6 / 3 = 2 (left: 2 9 12)\n9 - 2 = 7 (left: 7 12)",
                "9 + 3 = 12 (left: 6 9 12)\n9 * 12 = 108 (left: 6 108)",
                "9 + 3 = 12 (left: 6 9 12)\n9 - 6 = 3 (left: 3 12)",
                "12 / 3 = 4 (left: 4 6 9 12)\n9 - 6 = 3 (left: 4 3 12)",
                "6 / 3 = 2 (left: 2 9 12)\n3 * 5 = 15 (left: 15 7)",
                "12 / 3 = 4 (left: 4 6 9 12)\n12 / 4 = 3 (left: 6 9 3)",
                "12 / 3 = 4 (left: 4 6 9 12)\n9 + 4 = 13 (left: 6 13 12)",
                "9 + 3 = 12 (left: 6 9 12)\n12 / 6 = 2 (left: 2 9)"
            ],
            "values": [
                1.002,
                0.002,
                0.002,
                20.001,
                20.002,
                40.001,
                0.003,
                3.0,
                2.001,
                0.001
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 5",
                "3 <- 4",
                "4 <- 5",
                "5 <- 5",
                "6 <- 3",
                "7 <- 4",
                "8 <- 7",
                "9 <- 3"
            ],
            "resampled_steps": [
                "9 + 3 = 12 (left: 6 9 12)\n9 * 12 = 108 (left: 6 108)",
                "9 + 3 = 12 (left: 6 9 12)\n9 * 12 = 108 (left: 6 108)",
                "12 / 3 = 4 (left: 4 6 9 12)\n9 - 6 = 3 (left: 4 3 12)",
                "9 + 3 = 12 (left: 6 9 12)\n9 - 6 = 3 (left: 3 12)",
                "12 / 3 = 4 (left: 4 6 9 12)\n9 - 6 = 3 (left: 4 3 12)",
                "12 / 3 = 4 (left: 4 6 9 12)\n9 - 6 = 3 (left: 4 3 12)",
                "9 + 3 = 12 (left: 6 9 12)\n9 * 12 = 108 (left: 6 108)",
                "9 + 3 = 12 (left: 6 9 12)\n9 - 6 = 3 (left: 3 12)",
                "12 / 3 = 4 (left: 4 6 9 12)\n12 / 4 = 3 (left: 6 9 3)",
                "9 + 3 = 12 (left: 6 9 12)\n9 * 12 = 108 (left: 6 108)"
            ]
        },
        "step_3": {
            "steps": [
                "9 + 3 = 12 (left: 6 9 12)\n9 * 12 = 108 (left: 6 108)\n108 - 6 = 102 (left: 102)",
                "9 + 3 = 12 (left: 6 9 12)\n9 * 12 = 108 (left: 6 108)\n108 - 6 = 102 (left: 102)",
                "12 / 3 = 4 (left: 4 6 9 12)\n9 - 6 = 3 (left: 4 3 12)\n12 / 4 = 3 (left: 3 3)",
                "9 + 3 = 12 (left: 6 9 12)\n9 - 6 = 3 (left: 3 12)\n12 / 3 = 4 (left: 4 4)",
                "12 / 3 = 4 (left: 4 6 9 12)\n9 - 6 = 3 (left: 4 3 12)\n4 * 3 = 12 (left: 12 12)",
                "12 / 3 = 4 (left: 4 6 9 12)\n9 - 6 = 3 (left: 4 3 12)\n4 / 3 = 1.33 (left: 1.33 12)",
                "9 + 3 = 12 (left: 6 9 12)\n9 * 12 = 108 (left: 6 108)\n108 / 6 = 18 (left: 18)",
                "9 + 3 = 12 (left: 6 9 12)\n9 - 6 = 3 (left: 3 12)\n3 + 12 = 15 (left: 15)",
                "12 / 3 = 4 (left: 4 6 9 12)\n12 / 4 = 3 (left: 6 9 3)\n6 + 9 = 15 (left: 15 3)",
                "9 + 3 = 12 (left: 6 9 12)\n9 * 12 = 108 (left: 6 108)\n6 * 18 = 108 (left: 18)"
            ],
            "values": [
                0.003,
                0.003,
                0.002,
                1.002,
                20.002,
                2.001,
                0.0,
                0.001,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 4",
                "2 <- 4",
                "3 <- 4",
                "4 <- 4",
                "5 <- 4",
                "6 <- 4",
                "7 <- 4",
                "8 <- 4",
                "9 <- 4"
            ],
            "resampled_steps": [
                "12 / 3 = 4 (left: 4 6 9 12)\n9 - 6 = 3 (left: 4 3 12)\n4 * 3 = 12 (left: 12 12)",
                "12 / 3 = 4 (left: 4 6 9 12)\n9 - 6 = 3 (left: 4 3 12)\n4 * 3 = 12 (left: 12 12)",
                "12 / 3 = 4 (left: 4 6 9 12)\n9 - 6 = 3 (left: 4 3 12)\n4 * 3 = 12 (left: 12 12)",
                "12 / 3 = 4 (left: 4 6 9 12)\n9 - 6 = 3 (left: 4 3 12)\n4 * 3 = 12 (left: 12 12)",
                "12 / 3 = 4 (left: 4 6 9 12)\n9 - 6 = 3 (left: 4 3 12)\n4 * 3 = 12 (left: 12 12)",
                "12 / 3 = 4 (left: 4 6 9 12)\n9 - 6 = 3 (left: 4 3 12)\n4 * 3 = 12 (left: 12 12)",
                "12 / 3 = 4 (left: 4 6 9 12)\n9 - 6 = 3 (left: 4 3 12)\n4 * 3 = 12 (left: 12 12)",
                "12 / 3 = 4 (left: 4 6 9 12)\n9 - 6 = 3 (left: 4 3 12)\n4 * 3 = 12 (left: 12 12)",
                "12 / 3 = 4 (left: 4 6 9 12)\n9 - 6 = 3 (left: 4 3 12)\n4 * 3 = 12 (left: 12 12)",
                "12 / 3 = 4 (left: 4 6 9 12)\n9 - 6 = 3 (left: 4 3 12)\n4 * 3 = 12 (left: 12 12)"
            ]
        },
        "step_4": {
            "steps": [
                "12 / 3 = 4 (left: 4 6 9 12)\n9 - 6 = 3 (left: 4 3 12)\n4 * 3 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "12 / 3 = 4 (left: 4 6 9 12)\n9 - 6 = 3 (left: 4 3 12)\n4 * 3 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)",
                "12 / 3 = 4 (left: 4 6 9 12)\n9 - 6 = 3 (left: 4 3 12)\n4 * 3 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)",
                "12 / 3 = 4 (left: 4 6 9 12)\n9 - 6 = 3 (left: 4 3 12)\n4 * 3 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "12 / 3 = 4 (left: 4 6 9 12)\n9 - 6 = 3 (left: 4 3 12)\n4 * 3 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)",
                "12 / 3 = 4 (left: 4 6 9 12)\n9 - 6 = 3 (left: 4 3 12)\n4 * 3 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "12 / 3 = 4 (left: 4 6 9 12)\n9 - 6 = 3 (left: 4 3 12)\n4 * 3 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "12 / 3 = 4 (left: 4 6 9 12)\n9 - 6 = 3 (left: 4 3 12)\n4 * 3 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "12 / 3 = 4 (left: 4 6 9 12)\n9 - 6 = 3 (left: 4 3 12)\n4 * 3 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "12 / 3 = 4 (left: 4 6 9 12)\n9 - 6 = 3 (left: 4 3 12)\n4 * 3 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)"
            ],
            "values": [
                0.0,
                0.003,
                0.003,
                0.0,
                0.003,
                0.003,
                0.0,
                40.0,
                0.001,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.9175930000000001
    },
    "927": {
        "input": "6 9 12 13",
        "step_1": {
            "steps": [
                "9 / 3 = 3 (left: 6 3 13)",
                "9 - 6 = 3 (left: 3 12 13)",
                "12 + 1 = 13 (left: 6 9 13)",
                "13 - 6 = 7 (left: 6 9 7)",
                "9 * 12 = 108 (left: 6 108 13)",
                "6 + 9 = 15 (left: 12 15 13)",
                "12 + 6 = 18 (left: 18 9 13)",
                "9 + 12 = 21 (left: 6 21 13)",
                "6 + 9 = 15 (left: 15 12 13)",
                "9 / 3 = 3 (left: 6 3 12)"
            ],
            "values": [
                3.0,
                2.0,
                0.003,
                3.0,
                2.001,
                0.003,
                3.0,
                1.002,
                2.001,
                2.001
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 3",
                "2 <- 4",
                "3 <- 4",
                "4 <- 1",
                "5 <- 6",
                "6 <- 9",
                "7 <- 0",
                "8 <- 6",
                "9 <- 6"
            ],
            "resampled_steps": [
                "9 - 6 = 3 (left: 3 12 13)",
                "13 - 6 = 7 (left: 6 9 7)",
                "9 * 12 = 108 (left: 6 108 13)",
                "9 * 12 = 108 (left: 6 108 13)",
                "9 - 6 = 3 (left: 3 12 13)",
                "12 + 6 = 18 (left: 18 9 13)",
                "9 / 3 = 3 (left: 6 3 12)",
                "9 / 3 = 3 (left: 6 3 13)",
                "12 + 6 = 18 (left: 18 9 13)",
                "12 + 6 = 18 (left: 18 9 13)"
            ]
        },
        "step_2": {
            "steps": [
                "9 - 6 = 3 (left: 3 12 13)\n3 * 4 = 12 (left: 12 13)",
                "13 - 6 = 7 (left: 6 9 7)\n7 - 6 = 1 (left: 1)",
                "9 * 12 = 108 (left: 6 108 13)\n6 * 18 = 108 (left: 18 13)",
                "9 * 12 = 108 (left: 6 108 13)\n108 / 6 = 18 (left: 18 13)",
                "9 - 6 = 3 (left: 3 12 13)\n12 / 3 = 4 (left: 4 13)",
                "12 + 6 = 18 (left: 18 9 13)\n18 * 9 = 162 (left: 162 13)",
                "9 / 3 = 3 (left: 6 3 12)\n3 / 12 = 0.25 (left: 0.25 12)",
                "9 / 3 = 3 (left: 6 3 13)\n13 - 6 = 7 (left: 6 7)",
                "12 + 6 = 18 (left: 18 9 13)\n18 / 9 = 2 (left: 2 13)",
                "12 + 6 = 18 (left: 18 9 13)\n18 + 9 = 27 (left: 13 27)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                1.002,
                1.002,
                1.002,
                1.002,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 7",
                "2 <- 4",
                "3 <- 4",
                "4 <- 4",
                "5 <- 5",
                "6 <- 7",
                "7 <- 6",
                "8 <- 5",
                "9 <- 6"
            ],
            "resampled_steps": [
                "12 + 6 = 18 (left: 18 9 13)\n18 + 9 = 27 (left: 13 27)",
                "9 / 3 = 3 (left: 6 3 13)\n13 - 6 = 7 (left: 6 7)",
                "9 - 6 = 3 (left: 3 12 13)\n12 / 3 = 4 (left: 4 13)",
                "9 - 6 = 3 (left: 3 12 13)\n12 / 3 = 4 (left: 4 13)",
                "9 - 6 = 3 (left: 3 12 13)\n12 / 3 = 4 (left: 4 13)",
                "12 + 6 = 18 (left: 18 9 13)\n18 * 9 = 162 (left: 162 13)",
                "9 / 3 = 3 (left: 6 3 13)\n13 - 6 = 7 (left: 6 7)",
                "9 / 3 = 3 (left: 6 3 12)\n3 / 12 = 0.25 (left: 0.25 12)",
                "12 + 6 = 18 (left: 18 9 13)\n18 * 9 = 162 (left: 162 13)",
                "9 / 3 = 3 (left: 6 3 12)\n3 / 12 = 0.25 (left: 0.25 12)"
            ]
        },
        "step_3": {
            "steps": [
                "12 + 6 = 18 (left: 18 9 13)\n18 + 9 = 27 (left: 13 27)\n13 + 27 = 40 (left: 40)",
                "9 / 3 = 3 (left: 6 3 13)\n13 - 6 = 7 (left: 6 7)\n7 / 6 = 1.17 (left: 6 1.17)",
                "9 - 6 = 3 (left: 3 12 13)\n12 / 3 = 4 (left: 4 13)\n4 + 13 = 17 (left: 17)",
                "9 - 6 = 3 (left: 3 12 13)\n12 / 3 = 4 (left: 4 13)\n13 - 4 = 9 (left: 9)",
                "9 - 6 = 3 (left: 3 12 13)\n12 / 3 = 4 (left: 4 13)\n13 / 4 = 3.25 (left: 3.25)",
                "12 + 6 = 18 (left: 18 9 13)\n18 * 9 = 162 (left: 162 13)\n13 * 162 = 2106 (left: 162 2106)",
                "9 / 3 = 3 (left: 6 3 13)\n13 - 6 = 7 (left: 6 7)\n6 + 7 = 13 (left: 13)",
                "9 / 3 = 3 (left: 6 3 12)\n3 / 12 = 0.25 (left: 0.25 12)\n12 / 0.25 = 48 (left: 48)",
                "12 + 6 = 18 (left: 18 9 13)\n18 * 9 = 162 (left: 162 13)\n162 / 13 = 12 (left: 12 13)",
                "9 / 3 = 3 (left: 6 3 12)\n3 / 12 = 0.25 (left: 0.25 12)\n0.25 + 12 = 12.25 (left: 12.25)"
            ],
            "values": [
                0.003,
                2.001,
                0.002,
                0.002,
                0.003,
                0.003,
                0.002,
                0.001,
                0.003,
                0.001
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 1",
                "3 <- 1",
                "4 <- 1",
                "5 <- 1",
                "6 <- 1",
                "7 <- 1",
                "8 <- 1",
                "9 <- 1"
            ],
            "resampled_steps": [
                "9 / 3 = 3 (left: 6 3 13)\n13 - 6 = 7 (left: 6 7)\n7 / 6 = 1.17 (left: 6 1.17)",
                "9 / 3 = 3 (left: 6 3 13)\n13 - 6 = 7 (left: 6 7)\n7 / 6 = 1.17 (left: 6 1.17)",
                "9 / 3 = 3 (left: 6 3 13)\n13 - 6 = 7 (left: 6 7)\n7 / 6 = 1.17 (left: 6 1.17)",
                "9 / 3 = 3 (left: 6 3 13)\n13 - 6 = 7 (left: 6 7)\n7 / 6 = 1.17 (left: 6 1.17)",
                "9 / 3 = 3 (left: 6 3 13)\n13 - 6 = 7 (left: 6 7)\n7 / 6 = 1.17 (left: 6 1.17)",
                "9 / 3 = 3 (left: 6 3 13)\n13 - 6 = 7 (left: 6 7)\n7 / 6 = 1.17 (left: 6 1.17)",
                "9 / 3 = 3 (left: 6 3 13)\n13 - 6 = 7 (left: 6 7)\n7 / 6 = 1.17 (left: 6 1.17)",
                "9 / 3 = 3 (left: 6 3 13)\n13 - 6 = 7 (left: 6 7)\n7 / 6 = 1.17 (left: 6 1.17)",
                "9 / 3 = 3 (left: 6 3 13)\n13 - 6 = 7 (left: 6 7)\n7 / 6 = 1.17 (left: 6 1.17)",
                "9 / 3 = 3 (left: 6 3 13)\n13 - 6 = 7 (left: 6 7)\n7 / 6 = 1.17 (left: 6 1.17)"
            ]
        },
        "step_4": {
            "steps": [
                "9 / 3 = 3 (left: 6 3 13)\n13 - 6 = 7 (left: 6 7)\n7 / 6 = 1.17 (left: 6 1.17)\n6 / 1.17 = 5.128 (left: 5.128)",
                "9 / 3 = 3 (left: 6 3 13)\n13 - 6 = 7 (left: 6 7)\n7 / 6 = 1.17 (left: 6 1.17)\n6 / 1.17 = 5.13 (left: 1.17 5.13)",
                "9 / 3 = 3 (left: 6 3 13)\n13 - 6 = 7 (left: 6 7)\n7 / 6 = 1.17 (left: 6 1.17)\n6 * 1.17 = 7.02 (left: 7.02)",
                "9 / 3 = 3 (left: 6 3 13)\n13 - 6 = 7 (left: 6 7)\n7 / 6 = 1.17 (left: 6 1.17)\n6 * 1.17 = 7.02 (left: 1.17 7.02)",
                "9 / 3 = 3 (left: 6 3 13)\n13 - 6 = 7 (left: 6 7)\n7 / 6 = 1.17 (left: 6 1.17)\n6 * 1.17 = 7.02 (left: 7.02 1.17)",
                "9 / 3 = 3 (left: 6 3 13)\n13 - 6 = 7 (left: 6 7)\n7 / 6 = 1.17 (left: 6 1.17)\n6 / 1.17 = 5.13 (left: 5.13)",
                "9 / 3 = 3 (left: 6 3 13)\n13 - 6 = 7 (left: 6 7)\n7 / 6 = 1.17 (left: 6 1.17)\n6 - 1.17 = 4.83 (left: 4.83)",
                "9 / 3 = 3 (left: 6 3 13)\n13 - 6 = 7 (left: 6 7)\n7 / 6 = 1.17 (left: 6 1.17)\n6 - 1.17 = 4.83 (left: 1.17 4.83)",
                "9 / 3 = 3 (left: 6 3 13)\n13 - 6 = 7 (left: 6 7)\n7 / 6 = 1.17 (left: 6 1.17)\n6 * 1.17 = 7.02 (left: 1.17 7.02)",
                "9 / 3 = 3 (left: 6 3 13)\n13 - 6 = 7 (left: 6 7)\n7 / 6 = 1.17 (left: 6 1.17)\n6 - 1.17 = 4.83 (left: 1.17 4.83)"
            ],
            "values": [
                0.002,
                2.001,
                0.0,
                2.001,
                2.001,
                0.002,
                0.003,
                1.002,
                1.002,
                3.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.953342
    },
    "928": {
        "input": "4 7 9 13",
        "step_1": {
            "steps": [
                "7 + 9 = 16 (left: 4 16 13)",
                "13 - 9 = 4 (left: 4 7 13)",
                "4 * 7 = 28 (left: 28 9 13)",
                "4 * 7 = 28 (left: 9 13 28)",
                "9 - 4 = 5 (left: 5 7 13)",
                "13 - 9 = 4 (left: 4 7 13)",
                "7 - 4 = 3 (left: 3 9 13)",
                "13 - 7 = 6 (left: 4 6 9)",
                "13 - 7 = 6 (left: 4 6 9)",
                "9 - 7 = 2 (left: 2 4 13)"
            ],
            "values": [
                2.001,
                3.0,
                22.0,
                1.001,
                2.001,
                41.0,
                2.001,
                21.001,
                21.0,
                0.002
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 5",
                "2 <- 2",
                "3 <- 6",
                "4 <- 7",
                "5 <- 7",
                "6 <- 2",
                "7 <- 7",
                "8 <- 7",
                "9 <- 5"
            ],
            "resampled_steps": [
                "4 * 7 = 28 (left: 28 9 13)",
                "13 - 9 = 4 (left: 4 7 13)",
                "4 * 7 = 28 (left: 28 9 13)",
                "7 - 4 = 3 (left: 3 9 13)",
                "13 - 7 = 6 (left: 4 6 9)",
                "13 - 7 = 6 (left: 4 6 9)",
                "4 * 7 = 28 (left: 28 9 13)",
                "13 - 7 = 6 (left: 4 6 9)",
                "13 - 7 = 6 (left: 4 6 9)",
                "13 - 9 = 4 (left: 4 7 13)"
            ]
        },
        "step_2": {
            "steps": [
                "4 * 7 = 28 (left: 28 9 13)\n13 / 9 = 1.4444 (left: 1.4444 9)",
                "13 - 9 = 4 (left: 4 7 13)\n7 - 4 = 3 (left: 3 13)",
                "4 * 7 = 28 (left: 28 9 13)\n28 - 9 = 19 (left: 19 13)",
                "7 - 4 = 3 (left: 3 9 13)\n9 / 3 = 3 (left: 3 13)",
                "13 - 7 = 6 (left: 4 6 9)\n4 / 6 = 0.6667 (left: 0.6667 9)",
                "13 - 7 = 6 (left: 4 6 9)\n4 + 6 = 10 (left: 10 9)",
                "4 * 7 = 28 (left: 28 9 13)\n28 / 13 = 2.1538 (left: 2.1538)",
                "13 - 7 = 6 (left: 4 6 9)\n4 + 6 = 10 (left: 10 9)",
                "13 - 7 = 6 (left: 4 6 9)\n4 * 6 = 24 (left: 24 9)",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)"
            ],
            "values": [
                3.0,
                1.002,
                0.003,
                0.003,
                2.0,
                0.003,
                0.003,
                0.003,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 9",
                "2 <- 9",
                "3 <- 9",
                "4 <- 9",
                "5 <- 9",
                "6 <- 9",
                "7 <- 9",
                "8 <- 9",
                "9 <- 9"
            ],
            "resampled_steps": [
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)"
            ]
        },
        "step_3": {
            "steps": [
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n11 / 13 = 0.846 (left: 0.846)",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n13 / 11 = 1.1818181818181819 (left: 1.1818181818181819)",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n13 - 11 = 2 (left: 2)",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n11 * 13 = 143 (left: 143)",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n13 / 11 = 1.18181818 (left: 1.18181818 13)",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n11 - 13 = -2 (left: -2)",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n11 * 13 = 143 (left: 143)",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)"
            ],
            "values": [
                0.002,
                0.002,
                40.0,
                60.0,
                0.003,
                0.003,
                3.0,
                0.003,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 9",
                "2 <- 9",
                "3 <- 3",
                "4 <- 9",
                "5 <- 2",
                "6 <- 3",
                "7 <- 2",
                "8 <- 9",
                "9 <- 9"
            ],
            "resampled_steps": [
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)"
            ]
        },
        "step_4": {
            "steps": [
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((4 + 7) + 9) + 13 = 24",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((13 - 9) + 7) + 13 = 24",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((13 - 9) + 7) + 13 = 24",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: (4 + 7) + (9 + 13) = 24",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: (4 + 7) + (13 - 9) = 24",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: (4 + 7) + (13 - 9) = 24",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((13 - 9) + 7) + 13 = 24",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((4 + 7) + 9) + 13 = 24",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: (4 + 7) + (9 + 13) = 24",
                "13 - 9 = 4 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((4 + 7) + 9) + 13 = 24"
            ],
            "values": [
                60.0,
                60.0,
                40.001,
                0.003,
                60.0,
                60.0,
                60.0,
                40.001,
                20.002,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.988125
    },
    "929": {
        "input": "5 6 8 12",
        "step_1": {
            "steps": [
                "8 - 6 = 2 (left: 5 2 12)",
                "6 / 12 = 0.5 (left: 5 0.5 8)",
                "5 * 6 = 30 (left: 30 8 12)",
                "6 * 8 = 48 (left: 5 48 12)",
                "12 / 6 = 2 (left: 5 2 8)",
                "6 - 5 = 1 (left: 1 6 8)",
                "12 - 8 = 4 (left: 5 6 4)",
                "5 * 6 = 30 (left: 30 8 12)",
                "8 / 5 = 1.6 (left: 1.6 6 12)",
                "12 - 8 = 4 (left: 5 6 4)"
            ],
            "values": [
                3.0,
                3.0,
                3.0,
                22.0,
                3.0,
                2.001,
                3.0,
                3.0,
                3.0,
                22.0
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 9",
                "2 <- 5",
                "3 <- 8",
                "4 <- 9",
                "5 <- 3",
                "6 <- 3",
                "7 <- 9",
                "8 <- 9",
                "9 <- 9"
            ],
            "resampled_steps": [
                "12 - 8 = 4 (left: 5 6 4)",
                "12 - 8 = 4 (left: 5 6 4)",
                "6 - 5 = 1 (left: 1 6 8)",
                "8 / 5 = 1.6 (left: 1.6 6 12)",
                "12 - 8 = 4 (left: 5 6 4)",
                "6 * 8 = 48 (left: 5 48 12)",
                "6 * 8 = 48 (left: 5 48 12)",
                "12 - 8 = 4 (left: 5 6 4)",
                "12 - 8 = 4 (left: 5 6 4)",
                "12 - 8 = 4 (left: 5 6 4)"
            ]
        },
        "step_2": {
            "steps": [
                "12 - 8 = 4 (left: 5 6 4)\n5 + 6 = 11 (left: 11 4)",
                "12 - 8 = 4 (left: 5 6 4)\n5 - 6 = -1 (left: -1 4)",
                "6 - 5 = 1 (left: 1 6 8)\n8 - 1 = 7 (left: 7 8)",
                "8 / 5 = 1.6 (left: 1.6 6 12)\n1.6 * 6 = 9.6 (left: 9.6 12)",
                "12 - 8 = 4 (left: 5 6 4)\n6 + 4 = 10 (left: 5 10)",
                "6 * 8 = 48 (left: 5 48 12)\n48 - 12 = 36 (left: 5 36)",
                "6 * 8 = 48 (left: 5 48 12)\n12 - 5 = 7 (left: 7 48)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)",
                "12 - 8 = 4 (left: 5 6 4)\n5 - 6 = -1 (left: -1 4)"
            ],
            "values": [
                0.003,
                0.003,
                0.002,
                0.001,
                0.002,
                0.003,
                1.001,
                0.003,
                2.001,
                1.002
            ],
            "resampled": [
                "0 <- 8",
                "1 <- 9",
                "2 <- 8",
                "3 <- 8",
                "4 <- 8",
                "5 <- 8",
                "6 <- 9",
                "7 <- 8",
                "8 <- 8",
                "9 <- 8"
            ],
            "resampled_steps": [
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)",
                "12 - 8 = 4 (left: 5 6 4)\n5 - 6 = -1 (left: -1 4)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)",
                "12 - 8 = 4 (left: 5 6 4)\n5 - 6 = -1 (left: -1 4)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)"
            ]
        },
        "step_3": {
            "steps": [
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)\n30 / 4 = 7.5 (left: 7.5 4)",
                "12 - 8 = 4 (left: 5 6 4)\n5 - 6 = -1 (left: -1 4)\n-1 - 4 = -5 (left: -5)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)\n30 + 4 = 34 (left: 4 34)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)\n4 / 30 = 0.1333 (left: 0.1333)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)\n30 / 4 = 7.5 (left: 7.5 4)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)\n30 - 4 = 26 (left: 26)",
                "12 - 8 = 4 (left: 5 6 4)\n5 - 6 = -1 (left: -1 4)\n-1 - 4 = -5 (left: -5)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)\n30 / 4 = 7.5 (left: 7.5 4)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)\n30 - 4 = 26 (left: 26)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)\n4 + 30 = 34 (left: 34)"
            ],
            "values": [
                21.001,
                0.003,
                0.002,
                0.001,
                0.001,
                0.001,
                0.002,
                1.002,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 0",
                "3 <- 0",
                "4 <- 0",
                "5 <- 0",
                "6 <- 0",
                "7 <- 0",
                "8 <- 0",
                "9 <- 0"
            ],
            "resampled_steps": [
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)\n30 / 4 = 7.5 (left: 7.5 4)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)\n30 / 4 = 7.5 (left: 7.5 4)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)\n30 / 4 = 7.5 (left: 7.5 4)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)\n30 / 4 = 7.5 (left: 7.5 4)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)\n30 / 4 = 7.5 (left: 7.5 4)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)\n30 / 4 = 7.5 (left: 7.5 4)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)\n30 / 4 = 7.5 (left: 7.5 4)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)\n30 / 4 = 7.5 (left: 7.5 4)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)\n30 / 4 = 7.5 (left: 7.5 4)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)\n30 / 4 = 7.5 (left: 7.5 4)"
            ]
        },
        "step_4": {
            "steps": [
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)\n30 / 4 = 7.5 (left: 7.5 4)\n7.5 / 4 = 1.875 (left: 1.875)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)\n30 / 4 = 7.5 (left: 7.5 4)\n7.5 / 4 = 1.875 (left: 1.875)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)\n30 / 4 = 7.5 (left: 7.5 4)\n7.5 * 4 = 30 (left: 30)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)\n30 / 4 = 7.5 (left: 7.5 4)\n7.5 + 4 = 11.5 (left: 11.5)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)\n30 / 4 = 7.5 (left: 7.5 4)\n7.5 * 4 = 30 (left: 30)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)\n30 / 4 = 7.5 (left: 7.5 4)\n7.5 / 4 = 1.875 (left: 1.875)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)\n30 / 4 = 7.5 (left: 7.5 4)\n7.5 + 4 = 11.5 (left: 11.5)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)\n30 / 4 = 7.5 (left: 7.5 4)\n7.5 / 4 = 1.875 (left: 1.875)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)\n30 / 4 = 7.5 (left: 7.5 4)\n7.5 - 4 = 3.5 (left: 3.5)",
                "12 - 8 = 4 (left: 5 6 4)\n5 * 6 = 30 (left: 30 4)\n30 / 4 = 7.5 (left: 7.5 4)\n7.5 / 4 = 1.875 (left: 1.875)"
            ],
            "values": [
                0.003,
                0.002,
                0.001,
                0.002,
                0.002,
                0.003,
                0.003,
                0.002,
                0.002,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.022728
    },
    "930": {
        "input": "2 4 6 7",
        "step_1": {
            "steps": [
                "2 + 4 = 6 (left: 6 6 7)",
                "4 + 6 = 10 (left: 2 10 7)",
                "7 / 2 = 3.5 (left: 2 4 3.5)",
                "7 - 6 = 1 (left: 2 4 1)",
                "4 - 2 = 2 (left: 2 6 7)",
                "7 - 2 = 5 (left: 4 5 6)",
                "2 + 4 = 6 (left: 6 6 7)",
                "4 + 6 = 10 (left: 2 10 7)",
                "2 + 4 = 6 (left: 6 6 7)",
                "4 ^ 6 = 4096 (left: 2 4096 7)"
            ],
            "values": [
                0.003,
                2.001,
                3.0,
                0.003,
                1.002,
                2.0,
                2.001,
                1.0,
                1.002,
                1.002
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 1",
                "2 <- 4",
                "3 <- 6",
                "4 <- 1",
                "5 <- 2",
                "6 <- 8",
                "7 <- 8",
                "8 <- 9",
                "9 <- 9"
            ],
            "resampled_steps": [
                "7 / 2 = 3.5 (left: 2 4 3.5)",
                "4 + 6 = 10 (left: 2 10 7)",
                "4 - 2 = 2 (left: 2 6 7)",
                "2 + 4 = 6 (left: 6 6 7)",
                "4 + 6 = 10 (left: 2 10 7)",
                "7 / 2 = 3.5 (left: 2 4 3.5)",
                "2 + 4 = 6 (left: 6 6 7)",
                "2 + 4 = 6 (left: 6 6 7)",
                "4 ^ 6 = 4096 (left: 2 4096 7)",
                "4 ^ 6 = 4096 (left: 2 4096 7)"
            ]
        },
        "step_2": {
            "steps": [
                "7 / 2 = 3.5 (left: 2 4 3.5)\n2 + 4 = 6 (left: 6 3.5)",
                "4 + 6 = 10 (left: 2 10 7)\n7 + 2 = 9 (left: 9 10)",
                "4 - 2 = 2 (left: 2 6 7)\n2 + 6 = 8 (left: 7 8)",
                "2 + 4 = 6 (left: 6 6 7)\n6 + 6 = 12 (left: 7 12)",
                "4 + 6 = 10 (left: 2 10 7)\n10 - 2 = 8 (left: 8 7)",
                "7 / 2 = 3.5 (left: 2 4 3.5)\n4 - 2 = 2 (left: 2 3.5)",
                "2 + 4 = 6 (left: 6 6 7)\n6 * 7 = 42 (left: 42)",
                "2 + 4 = 6 (left: 6 6 7)\n7 - 6 = 1 (left: 6 1)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n4096 - 2 = 4094 (left: 2 4094 7)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)"
            ],
            "values": [
                1.002,
                0.002,
                0.001,
                0.003,
                1.001,
                2.001,
                0.002,
                21.0,
                0.003,
                41.0
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 9",
                "2 <- 9",
                "3 <- 9",
                "4 <- 0",
                "5 <- 9",
                "6 <- 7",
                "7 <- 9",
                "8 <- 7",
                "9 <- 9"
            ],
            "resampled_steps": [
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)",
                "7 / 2 = 3.5 (left: 2 4 3.5)\n2 + 4 = 6 (left: 6 3.5)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)",
                "2 + 4 = 6 (left: 6 6 7)\n7 - 6 = 1 (left: 6 1)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)",
                "2 + 4 = 6 (left: 6 6 7)\n7 - 6 = 1 (left: 6 1)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)"
            ]
        },
        "step_3": {
            "steps": [
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)\n4096 / 9 = 455.111... (left: 9 455.111...)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)\n4096 / 9 = 455.11 (left: 455.11)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)\n4096^9 (left: 9 1073741824)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)\n4096 + 9 = 4105 (left: 9 4105)",
                "7 / 2 = 3.5 (left: 2 4 3.5)\n2 + 4 = 6 (left: 6 3.5)\n6 / 3.5 = 1.71428571 (left: 1.71428571)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)\n4096 - 9 = 4087 (left: 9 4087)",
                "2 + 4 = 6 (left: 6 6 7)\n7 - 6 = 1 (left: 6 1)\n6 * 1 = 6 (left: 1 6)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)\n4096 / 9 = 455.11 (left: 9 455.11)",
                "2 + 4 = 6 (left: 6 6 7)\n7 - 6 = 1 (left: 6 1)\n6 + 1 = 7 (left: 7)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)\n4096 - 9 = 4087 (left: 4087 4096)"
            ],
            "values": [
                0.0,
                0.001,
                0.003,
                0.003,
                0.003,
                2.0,
                0.002,
                0.001,
                0.001,
                0.002
            ],
            "resampled": [
                "0 <- 5",
                "1 <- 5",
                "2 <- 5",
                "3 <- 5",
                "4 <- 5",
                "5 <- 5",
                "6 <- 5",
                "7 <- 5",
                "8 <- 5",
                "9 <- 5"
            ],
            "resampled_steps": [
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)\n4096 - 9 = 4087 (left: 9 4087)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)\n4096 - 9 = 4087 (left: 9 4087)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)\n4096 - 9 = 4087 (left: 9 4087)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)\n4096 - 9 = 4087 (left: 9 4087)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)\n4096 - 9 = 4087 (left: 9 4087)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)\n4096 - 9 = 4087 (left: 9 4087)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)\n4096 - 9 = 4087 (left: 9 4087)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)\n4096 - 9 = 4087 (left: 9 4087)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)\n4096 - 9 = 4087 (left: 9 4087)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)\n4096 - 9 = 4087 (left: 9 4087)"
            ]
        },
        "step_4": {
            "steps": [
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)\n4096 - 9 = 4087 (left: 9 4087)\n4087 / 9 = 454.11 (left: 9 454.11)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)\n4096 - 9 = 4087 (left: 9 4087)\n9 + 4087 = 4096 (left: 4096)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)\n4096 - 9 = 4087 (left: 9 4087)\n4087 - 9 = 4078 (left: 9 4078)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)\n4096 - 9 = 4087 (left: 9 4087)\n4087 - 9 = 4078 (left: 9 4078)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)\n4096 - 9 = 4087 (left: 9 4087)\n9 - 4087 = -4078 (left: -4078 9 4087)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)\n4096 - 9 = 4087 (left: 9 4087)\n9 + 4087 = 4096 (left: 4087 4096)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)\n4096 - 9 = 4087 (left: 9 4087)\n9 * 4087 = 36783 (left: 4087 36783)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)\n4096 - 9 = 4087 (left: 9 4087)\n9 * 4087 = 36783 (left: 4087 36783)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)\n4096 - 9 = 4087 (left: 9 4087)\n4087 - 9 = 4078 (left: 4078)",
                "4 ^ 6 = 4096 (left: 2 4096 7)\n7 + 2 = 9 (left: 9 4096)\n4096 - 9 = 4087 (left: 9 4087)\n4087 / 9 = 454.1111 (left: 9 454.1111)"
            ],
            "values": [
                0.003,
                0.003,
                0.002,
                1.001,
                3.0,
                0.003,
                1.001,
                0.002,
                0.002,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.059423
    },
    "931": {
        "input": "2 5 10 10",
        "step_1": {
            "steps": [
                "2 + 5 = 7 (left: 7 10 10)",
                "10 / 2 = 5 (left: 5 5 10)",
                "10 - 2 = 8 (left: 5 8 10)",
                "10 * 2 = 20 (left: 5 10 20)",
                "10 / 2 = 5 (left: 5 5 10)",
                "2 + 5 = 7 (left: 7 10 10)",
                "2 + 5 = 7 (left: 7 10 10)",
                "5 * 2 = 10 (left: 10 10 10)",
                "5 * 2 = 10 (left: 10 10 10)",
                "10 - 2 = 8 (left: 5 8 10)"
            ],
            "values": [
                2.001,
                20.002,
                3.0,
                2.001,
                21.001,
                22.0,
                1.002,
                20.002,
                2.001,
                3.0
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 7",
                "2 <- 1",
                "3 <- 5",
                "4 <- 4",
                "5 <- 4",
                "6 <- 0",
                "7 <- 9",
                "8 <- 4",
                "9 <- 0"
            ],
            "resampled_steps": [
                "10 / 2 = 5 (left: 5 5 10)",
                "5 * 2 = 10 (left: 10 10 10)",
                "10 / 2 = 5 (left: 5 5 10)",
                "2 + 5 = 7 (left: 7 10 10)",
                "10 / 2 = 5 (left: 5 5 10)",
                "10 / 2 = 5 (left: 5 5 10)",
                "2 + 5 = 7 (left: 7 10 10)",
                "10 - 2 = 8 (left: 5 8 10)",
                "10 / 2 = 5 (left: 5 5 10)",
                "2 + 5 = 7 (left: 7 10 10)"
            ]
        },
        "step_2": {
            "steps": [
                "10 / 2 = 5 (left: 5 5 10)\n10 - 5 = 5 (left: 5 10)",
                "5 * 2 = 10 (left: 10 10 10)\n10 - 10 = 0 (left: 0 10)",
                "10 / 2 = 5 (left: 5 5 10)\n5 / 5 = 1 (left: 1 10)",
                "2 + 5 = 7 (left: 7 10 10)\n7 + 10 = 17 (left: 10 17)",
                "10 / 2 = 5 (left: 5 5 10)\n10 / 5 = 2 (left: 2 10)",
                "10 / 2 = 5 (left: 5 5 10)\n5 - 5 = 0 (left: 0 10)",
                "2 + 5 = 7 (left: 7 10 10)\n10 / 7 = 1.43 (left: 1.43 10)",
                "10 - 2 = 8 (left: 5 8 10)\n5 * 8 = 40 (left: 10 40)",
                "10 / 2 = 5 (left: 5 5 10)\n5 - 5 = 0 (left: 0 10)",
                "2 + 5 = 7 (left: 7 10 10)\n10 / 7 = 1.42857142857 (left: 1.42857142857 10)"
            ],
            "values": [
                1.002,
                20.0,
                40.0,
                0.003,
                3.0,
                40.0,
                3.0,
                0.003,
                20.0,
                2.0
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 5",
                "2 <- 2",
                "3 <- 5",
                "4 <- 8",
                "5 <- 5",
                "6 <- 2",
                "7 <- 8",
                "8 <- 8",
                "9 <- 8"
            ],
            "resampled_steps": [
                "10 / 2 = 5 (left: 5 5 10)\n5 / 5 = 1 (left: 1 10)",
                "10 / 2 = 5 (left: 5 5 10)\n5 - 5 = 0 (left: 0 10)",
                "10 / 2 = 5 (left: 5 5 10)\n5 / 5 = 1 (left: 1 10)",
                "10 / 2 = 5 (left: 5 5 10)\n5 - 5 = 0 (left: 0 10)",
                "10 / 2 = 5 (left: 5 5 10)\n5 - 5 = 0 (left: 0 10)",
                "10 / 2 = 5 (left: 5 5 10)\n5 - 5 = 0 (left: 0 10)",
                "10 / 2 = 5 (left: 5 5 10)\n5 / 5 = 1 (left: 1 10)",
                "10 / 2 = 5 (left: 5 5 10)\n5 - 5 = 0 (left: 0 10)",
                "10 / 2 = 5 (left: 5 5 10)\n5 - 5 = 0 (left: 0 10)",
                "10 / 2 = 5 (left: 5 5 10)\n5 - 5 = 0 (left: 0 10)"
            ]
        },
        "step_3": {
            "steps": [
                "10 / 2 = 5 (left: 5 5 10)\n5 / 5 = 1 (left: 1 10)\n10 + 1 = 11 (left: 11)",
                "10 / 2 = 5 (left: 5 5 10)\n5 - 5 = 0 (left: 0 10)\n0 / 10 = 0 (left: 0)",
                "10 / 2 = 5 (left: 5 5 10)\n5 / 5 = 1 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "10 / 2 = 5 (left: 5 5 10)\n5 - 5 = 0 (left: 0 10)\n0 + 10 = 10 (left: 10)",
                "10 / 2 = 5 (left: 5 5 10)\n5 - 5 = 0 (left: 0 10)\n0 * 10 = 0 (left: 0)",
                "10 / 2 = 5 (left: 5 5 10)\n5 - 5 = 0 (left: 0 10)\n0 + 10 = 10 (left: 10)",
                "10 / 2 = 5 (left: 5 5 10)\n5 / 5 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10 10)",
                "10 / 2 = 5 (left: 5 5 10)\n5 - 5 = 0 (left: 0 10)\n10 - 0 = 10 (left: 10)",
                "10 / 2 = 5 (left: 5 5 10)\n5 - 5 = 0 (left: 0 10)\n10 - 0 = 10 (left: 10)",
                "10 / 2 = 5 (left: 5 5 10)\n5 - 5 = 0 (left: 0 10)\n10 - 0 = 10 (left: 10)"
            ],
            "values": [
                0.002,
                0.0,
                0.001,
                0.001,
                0.0,
                0.001,
                1.001,
                0.003,
                0.002,
                0.002
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 6",
                "2 <- 6",
                "3 <- 6",
                "4 <- 6",
                "5 <- 6",
                "6 <- 6",
                "7 <- 6",
                "8 <- 6",
                "9 <- 6"
            ],
            "resampled_steps": [
                "10 / 2 = 5 (left: 5 5 10)\n5 / 5 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10 10)",
                "10 / 2 = 5 (left: 5 5 10)\n5 / 5 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10 10)",
                "10 / 2 = 5 (left: 5 5 10)\n5 / 5 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10 10)",
                "10 / 2 = 5 (left: 5 5 10)\n5 / 5 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10 10)",
                "10 / 2 = 5 (left: 5 5 10)\n5 / 5 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10 10)",
                "10 / 2 = 5 (left: 5 5 10)\n5 / 5 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10 10)",
                "10 / 2 = 5 (left: 5 5 10)\n5 / 5 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10 10)",
                "10 / 2 = 5 (left: 5 5 10)\n5 / 5 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10 10)",
                "10 / 2 = 5 (left: 5 5 10)\n5 / 5 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10 10)",
                "10 / 2 = 5 (left: 5 5 10)\n5 / 5 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10 10)"
            ]
        },
        "step_4": {
            "steps": [
                "10 / 2 = 5 (left: 5 5 10)\n5 / 5 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10 10)\n10 - 10 = 0 (left: 0 10)",
                "10 / 2 = 5 (left: 5 5 10)\n5 / 5 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10 10)\n10 * 10 = 100 (left: 100) ",
                "10 / 2 = 5 (left: 5 5 10)\n5 / 5 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10 10)\n10 - 10 = 0 (left: 0)",
                "10 / 2 = 5 (left: 5 5 10)\n5 / 5 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10 10)\n10 * 10 = 100 (left: 100) ",
                "10 / 2 = 5 (left: 5 5 10)\n5 / 5 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10 10)\n10 / 10 = 1 (left: 1 10)",
                "10 / 2 = 5 (left: 5 5 10)\n5 / 5 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10 10)\n10 / 10 = 1 (left: 1)",
                "10 / 2 = 5 (left: 5 5 10)\n5 / 5 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10 10)\n10 / 10 = 1 (left: 1)",
                "10 / 2 = 5 (left: 5 5 10)\n5 / 5 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10 10)\n10 * 10 = 100 (left: 100)",
                "10 / 2 = 5 (left: 5 5 10)\n5 / 5 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10 10)\n10 + 10 = 20 (left: 20)",
                "10 / 2 = 5 (left: 5 5 10)\n5 / 5 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10 10)\n10 * 10 = 100 (left: 10 100)"
            ],
            "values": [
                20.0,
                0.002,
                0.0,
                0.003,
                21.001,
                0.002,
                0.003,
                0.001,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.092084
    },
    "932": {
        "input": "6 6 7 12",
        "step_1": {
            "steps": [
                "12 - 7 = 5 (left: 6 5 7)",
                "7 + 1 = 8 (left: 8 12)",
                "7 / 6 = 1.16666666667 (left: 1.16666666667 6 12)",
                "12 - 6 = 6 (left: 6 7 6)",
                "6 / 6 = 1 (left: 7 1)",
                "6 / 6 = 1 (left: 7 1 12)",
                "7 - 6 = 1 (left: 1 6 12)",
                "6 * 6 = 36 (left: 7 36)",
                "6 + 6 = 12 (left: 12 7 12)",
                "6 + 6 = 12 (left: 7 12 12)"
            ],
            "values": [
                2.0,
                1.002,
                3.0,
                3.0,
                60.0,
                3.0,
                0.003,
                1.002,
                1.002,
                21.001
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 5",
                "2 <- 4",
                "3 <- 4",
                "4 <- 4",
                "5 <- 4",
                "6 <- 4",
                "7 <- 9",
                "8 <- 4",
                "9 <- 4"
            ],
            "resampled_steps": [
                "6 + 6 = 12 (left: 7 12 12)",
                "6 / 6 = 1 (left: 7 1 12)",
                "6 / 6 = 1 (left: 7 1)",
                "6 / 6 = 1 (left: 7 1)",
                "6 / 6 = 1 (left: 7 1)",
                "6 / 6 = 1 (left: 7 1)",
                "6 / 6 = 1 (left: 7 1)",
                "6 + 6 = 12 (left: 7 12 12)",
                "6 / 6 = 1 (left: 7 1)",
                "6 / 6 = 1 (left: 7 1)"
            ]
        },
        "step_2": {
            "steps": [
                "6 + 6 = 12 (left: 7 12 12)\n7 + 12 = 19 (left: 19 12)",
                "6 / 6 = 1 (left: 7 1 12)\n7 - 1 = 6 (left: 6 12)",
                "6 / 6 = 1 (left: 7 1)\n7 * 1 = 7 (left: 7)",
                "6 / 6 = 1 (left: 7 1)\n7 - 1 = 6 (left: 6)",
                "6 / 6 = 1 (left: 7 1)\n7 + 1 = 8 (left: 8)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)",
                "6 / 6 = 1 (left: 7 1)\n7 - 1 = 6 (left: 6)",
                "6 + 6 = 12 (left: 7 12 12)\n7 * 12 = 84 (left: 84)",
                "6 / 6 = 1 (left: 7 1)\n7 + 1 = 8 (left: 8)",
                "6 / 6 = 1 (left: 7 1)\n7 * 1 = 7 (left: 7)"
            ],
            "values": [
                0.003,
                0.002,
                0.002,
                0.003,
                0.002,
                21.0,
                0.002,
                0.002,
                0.002,
                0.001
            ],
            "resampled": [
                "0 <- 5",
                "1 <- 5",
                "2 <- 5",
                "3 <- 5",
                "4 <- 5",
                "5 <- 5",
                "6 <- 5",
                "7 <- 5",
                "8 <- 5",
                "9 <- 5"
            ],
            "resampled_steps": [
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)"
            ]
        },
        "step_3": {
            "steps": [
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)\n7 + 1 = 8 (left: 8)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)\n7 - 1 = 6 (left: 6 1)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)\n7 - 1 = 6 (left: 6 1)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)\n7 + 1 = 8 (left: 1 8)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)\n7 - 1 = 6 (left: 6 1)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)\n7 / 1 = 7 (left: 7)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)\n7 / 1 = 7 (left: 7)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)\n7 * 1 = 7 (left: 7)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)\n7 * 1 = 7 (left: 7)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)\n7 * 1 = 7 (left: 7)"
            ],
            "values": [
                0.001,
                0.002,
                2.001,
                1.002,
                1.002,
                0.003,
                0.003,
                0.002,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 4",
                "2 <- 3",
                "3 <- 2",
                "4 <- 4",
                "5 <- 3",
                "6 <- 3",
                "7 <- 2",
                "8 <- 4",
                "9 <- 2"
            ],
            "resampled_steps": [
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)\n7 + 1 = 8 (left: 1 8)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)\n7 - 1 = 6 (left: 6 1)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)\n7 + 1 = 8 (left: 1 8)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)\n7 - 1 = 6 (left: 6 1)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)\n7 - 1 = 6 (left: 6 1)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)\n7 + 1 = 8 (left: 1 8)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)\n7 + 1 = 8 (left: 1 8)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)\n7 - 1 = 6 (left: 6 1)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)\n7 - 1 = 6 (left: 6 1)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)\n7 - 1 = 6 (left: 6 1)"
            ]
        },
        "step_4": {
            "steps": [
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)\n7 + 1 = 8 (left: 1 8)\n1 * 8 = 8 (left: 8)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)\n7 - 1 = 6 (left: 6 1)\n6 / 1 = 6 (left: 6)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)\n7 + 1 = 8 (left: 1 8)\n8 - 1 = 7 (left: 7 8)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)\n7 - 1 = 6 (left: 6 1)\n6 / 1 = 6 (left: 6)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)\n7 - 1 = 6 (left: 6 1)\n6 / 1 = 6 (left: 6)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)\n7 + 1 = 8 (left: 1 8)\n1 * 8 = 8 (left: 8 8)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)\n7 + 1 = 8 (left: 1 8)\n1 * 8 = 8 (left: 8)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)\n7 - 1 = 6 (left: 6 1)\n6 + 1 = 7 (left: 7)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)\n7 - 1 = 6 (left: 6 1)\n6 * 1 = 6 (left: 6)",
                "6 / 6 = 1 (left: 7 1)\n7 / 1 = 7 (left: 7 1)\n7 - 1 = 6 (left: 6 1)\n6 * 1 = 6 (left: 6)"
            ],
            "values": [
                0.003,
                0.002,
                1.002,
                0.003,
                0.003,
                0.003,
                0.002,
                0.002,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.123113
    },
    "933": {
        "input": "6 9 9 11",
        "step_1": {
            "steps": [
                "11 - 9 = 2 (left: 6 9 2 11)",
                "6 * 9 = 54 (left: 54 9 11)",
                "9 + 11 = 20 (left: 6 9 20 11)",
                "6 + 9 = 15 (left: 9 9 11 15)",
                "11 - 9 = 2 (left: 6 9 2)",
                "9 / 6 = 1.5 (left: 1.5 9 11 9)",
                "6 * 9 = 54 (left: 54 9 11)",
                "9 * 11 = 99 (left: 6 9 99 11)",
                "6 * 9 = 54 (left: 9 11 54)",
                "11 - 6 = 5 (left: 9 5 9)"
            ],
            "values": [
                2.0,
                2.001,
                3.0,
                22.0,
                3.0,
                2.0,
                2.0,
                3.0,
                2.001,
                22.0
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 1",
                "2 <- 6",
                "3 <- 3",
                "4 <- 9",
                "5 <- 9",
                "6 <- 9",
                "7 <- 3",
                "8 <- 9",
                "9 <- 0"
            ],
            "resampled_steps": [
                "11 - 6 = 5 (left: 9 5 9)",
                "6 * 9 = 54 (left: 54 9 11)",
                "6 * 9 = 54 (left: 54 9 11)",
                "6 + 9 = 15 (left: 9 9 11 15)",
                "11 - 6 = 5 (left: 9 5 9)",
                "11 - 6 = 5 (left: 9 5 9)",
                "11 - 6 = 5 (left: 9 5 9)",
                "6 + 9 = 15 (left: 9 9 11 15)",
                "11 - 6 = 5 (left: 9 5 9)",
                "11 - 9 = 2 (left: 6 9 2 11)"
            ]
        },
        "step_2": {
            "steps": [
                "11 - 6 = 5 (left: 9 5 9)\n9 / 5 = 1.8 (left: 1.8 9)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)",
                "6 * 9 = 54 (left: 54 9 11)\n11 - 9 = 2 (left: 54 2)",
                "6 + 9 = 15 (left: 9 9 11 15)\n9 / 9 = 1 (left: 1 11 15)",
                "11 - 6 = 5 (left: 9 5 9)\n9 * 5 = 45 (left: 45 9)",
                "11 - 6 = 5 (left: 9 5 9)\n9 * 5 = 45 (left: 45 9)",
                "11 - 6 = 5 (left: 9 5 9)\n5 + 9 = 14 (left: 9 14)",
                "6 + 9 = 15 (left: 9 9 11 15)\n15 - 9 = 6 (left: 11 6 9)",
                "11 - 6 = 5 (left: 9 5 9)\n9 + 5 = 14 (left: 14 9)",
                "11 - 9 = 2 (left: 6 9 2 11)\n9 / 3 = 3 (left: 6 3 11)"
            ],
            "values": [
                1.002,
                60.0,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                2.001,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 1",
                "3 <- 1",
                "4 <- 1",
                "5 <- 1",
                "6 <- 1",
                "7 <- 1",
                "8 <- 1",
                "9 <- 7"
            ],
            "resampled_steps": [
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)",
                "6 + 9 = 15 (left: 9 9 11 15)\n15 - 9 = 6 (left: 11 6 9)"
            ]
        },
        "step_3": {
            "steps": [
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)\n9 - 4 = 5 (left: 5 9)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)\n4 + 9 = 13 (left: 9 13)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)\n4 + 9 = 13 (left: 9 13)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)\n4 + 9 = 13 (left: 9 13)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)\n4 + 9 = 13 (left: 9 13)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)\n9 - 4 = 5 (left: 5 9)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)\n9 - 4 = 5 (left: 5 9)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)",
                "6 + 9 = 15 (left: 9 9 11 15)\n15 - 9 = 6 (left: 11 6 9)\n11 + 6 = 17 (left: 17 9)"
            ],
            "values": [
                0.003,
                0.003,
                1.002,
                41.0,
                2.0,
                0.003,
                2.001,
                0.003,
                2.001,
                0.002
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 3",
                "3 <- 3",
                "4 <- 8",
                "5 <- 3",
                "6 <- 3",
                "7 <- 3",
                "8 <- 3",
                "9 <- 3"
            ],
            "resampled_steps": [
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)\n4 + 9 = 13 (left: 9 13)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)\n4 + 9 = 13 (left: 9 13)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)\n4 + 9 = 13 (left: 9 13)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)\n4 + 9 = 13 (left: 9 13)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)\n4 + 9 = 13 (left: 9 13)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)\n4 + 9 = 13 (left: 9 13)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)\n4 + 9 = 13 (left: 9 13)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)\n4 + 9 = 13 (left: 9 13)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)\n4 + 9 = 13 (left: 9 13)"
            ]
        },
        "step_4": {
            "steps": [
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)\n4 + 9 = 13 (left: 9 13)\n9 + 13 = 22 (left: 22)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)\n4 + 9 = 13 (left: 9 13)\n13 / 9 = 1.444 (left: 1.444)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)\n4 + 9 = 13 (left: 9 13)\n13 / 9 = 1.444 (left: 1.444)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)\n4 + 9 = 13 (left: 9 13)\n9 + 13 = 22 (left: 22)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)\n9 + 2.25 = 11.25 (left: 11.25)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)\n4 + 9 = 13 (left: 9 13)\n9 + 13 = 22 (left: 22)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)\n4 + 9 = 13 (left: 9 13)\n9 - 13 = -4 (left: -4)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)\n4 + 9 = 13 (left: 9 13)\n9 + 13 = 22 (left: 22)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)\n4 + 9 = 13 (left: 9 13)\n13 / 9 = 1.44444 (left: 1.44444)",
                "6 * 9 = 54 (left: 54 9 11)\n54 / 11 = 4 (left: 4 9)\n4 + 9 = 13 (left: 9 13)\n9 - 13 = -4 (left: -4)"
            ],
            "values": [
                0.001,
                0.001,
                0.003,
                20.0,
                0.003,
                0.001,
                0.003,
                0.002,
                0.001,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.15846
    },
    "934": {
        "input": "5 8 11 12",
        "step_1": {
            "steps": [
                "12 - 8 = 4 (left: 5 4 11)",
                "5 + 8 = 13 (left: 11 13 12)",
                "8 + 11 = 19 (left: 5 19 12)",
                "8 - 5 = 3 (left: 3 11 12)",
                "11 - 5 = 6 (left: 6 8 12)",
                "12 - 8 = 4 (left: 5 4 11)",
                "5 * 8 = 40 (left: 11 40 12)",
                "5 + 8 = 13 (left: 11 13 12)",
                "11 + 8 = 19 (left: 5 19 12)",
                "11 - 5 = 6 (left: 6 8 12)"
            ],
            "values": [
                3.0,
                60.0,
                2.001,
                1.002,
                3.0,
                40.001,
                2.001,
                21.001,
                3.0,
                41.0
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 1",
                "2 <- 5",
                "3 <- 1",
                "4 <- 5",
                "5 <- 9",
                "6 <- 7",
                "7 <- 5",
                "8 <- 5",
                "9 <- 1"
            ],
            "resampled_steps": [
                "11 - 5 = 6 (left: 6 8 12)",
                "5 + 8 = 13 (left: 11 13 12)",
                "12 - 8 = 4 (left: 5 4 11)",
                "5 + 8 = 13 (left: 11 13 12)",
                "12 - 8 = 4 (left: 5 4 11)",
                "11 - 5 = 6 (left: 6 8 12)",
                "5 + 8 = 13 (left: 11 13 12)",
                "12 - 8 = 4 (left: 5 4 11)",
                "12 - 8 = 4 (left: 5 4 11)",
                "5 + 8 = 13 (left: 11 13 12)"
            ]
        },
        "step_2": {
            "steps": [
                "11 - 5 = 6 (left: 6 8 12)\n8 / 6 = 1.33 (left: 1.33 8 12) - Division is not an option as it does not result in a whole number",
                "5 + 8 = 13 (left: 11 13 12)\n12 / 11 = 1.09 (left: 1.09 13)",
                "12 - 8 = 4 (left: 5 4 11)\n5 * 4 = 20 (left: 20 11)",
                "5 + 8 = 13 (left: 11 13 12)\n12 / 11 = 1.09090909091 (left: 1.09090909091 13)",
                "12 - 8 = 4 (left: 5 4 11)\n11 / 4 = 2.75 (left: 5 2.75)",
                "11 - 5 = 6 (left: 6 8 12)\n12 + 6 = 18 (left: 8 18)",
                "5 + 8 = 13 (left: 11 13 12)\n11 * 13 = 143 (left: 143 12)",
                "12 - 8 = 4 (left: 5 4 11)\n4 + 11 = 15 (left: 5 15)",
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)",
                "5 + 8 = 13 (left: 11 13 12)\n11 + 13 = 24 (left: 24 12)"
            ],
            "values": [
                0.002,
                2.001,
                0.002,
                1.001,
                2.0,
                0.002,
                0.003,
                1.001,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 8",
                "1 <- 8",
                "2 <- 8",
                "3 <- 9",
                "4 <- 9",
                "5 <- 9",
                "6 <- 8",
                "7 <- 8",
                "8 <- 8",
                "9 <- 4"
            ],
            "resampled_steps": [
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)",
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)",
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)",
                "5 + 8 = 13 (left: 11 13 12)\n11 + 13 = 24 (left: 24 12)",
                "5 + 8 = 13 (left: 11 13 12)\n11 + 13 = 24 (left: 24 12)",
                "5 + 8 = 13 (left: 11 13 12)\n11 + 13 = 24 (left: 24 12)",
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)",
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)",
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)",
                "12 - 8 = 4 (left: 5 4 11)\n11 / 4 = 2.75 (left: 5 2.75)"
            ]
        },
        "step_3": {
            "steps": [
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)\n11 - 1 = 10 (left: 10)",
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)\n11 - 1 = 10 (left: 10) ",
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)\n11 - 1 = 10 (left: 1 10)",
                "5 + 8 = 13 (left: 11 13 12)\n11 + 13 = 24 (left: 24 12)\n24 * 12 = 288 (left: 288)",
                "5 + 8 = 13 (left: 11 13 12)\n11 + 13 = 24 (left: 24 12)\n24 * 12 = 288 (left: 288)",
                "5 + 8 = 13 (left: 11 13 12)\n11 + 13 = 24 (left: 24 12)\n24 / 12 = 2 (left: 2)",
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)\n11 / 1 = 11 (left: 1)",
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)\n1 * 11 = 11 (left: 11)",
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)\n11 - 1 = 10 (left: 1 10)",
                "12 - 8 = 4 (left: 5 4 11)\n11 / 4 = 2.75 (left: 5 2.75)\n5 - 2.75 = 2.25 (left: 2.25)"
            ],
            "values": [
                0.001,
                0.003,
                20.002,
                0.003,
                0.003,
                0.002,
                0.003,
                0.002,
                0.0,
                0.003
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 2",
                "2 <- 2",
                "3 <- 2",
                "4 <- 2",
                "5 <- 2",
                "6 <- 2",
                "7 <- 2",
                "8 <- 2",
                "9 <- 2"
            ],
            "resampled_steps": [
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)\n11 - 1 = 10 (left: 1 10)",
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)\n11 - 1 = 10 (left: 1 10)",
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)\n11 - 1 = 10 (left: 1 10)",
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)\n11 - 1 = 10 (left: 1 10)",
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)\n11 - 1 = 10 (left: 1 10)",
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)\n11 - 1 = 10 (left: 1 10)",
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)\n11 - 1 = 10 (left: 1 10)",
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)\n11 - 1 = 10 (left: 1 10)",
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)\n11 - 1 = 10 (left: 1 10)",
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)\n11 - 1 = 10 (left: 1 10)"
            ]
        },
        "step_4": {
            "steps": [
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)\n11 - 1 = 10 (left: 1 10)\n1 + 10 = 11 (left: 11)",
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)\n11 - 1 = 10 (left: 1 10)\n1 + 10 = 11 (left: 11)",
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)\n11 - 1 = 10 (left: 1 10)\n10 + 1 = 11 (left: 1)",
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)\n11 - 1 = 10 (left: 1 10)\n1 + 10 = 11 (left: 10 11)",
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)\n11 - 1 = 10 (left: 1 10)\n1 + 10 = 11 (left: 11)",
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)\n11 - 1 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)\n11 - 1 = 10 (left: 1 10)\n1 + 10 = 11 (left: 11)",
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)\n11 - 1 = 10 (left: 1 10)\n10 - 1 = 9 (left: 1 9)",
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)\n11 - 1 = 10 (left: 1 10)\n1 + 10 = 11 (left: 10 11)",
                "12 - 8 = 4 (left: 5 4 11)\n5 - 4 = 1 (left: 1 11)\n11 - 1 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10 10)"
            ],
            "values": [
                0.002,
                0.003,
                0.003,
                2.0,
                0.002,
                0.003,
                0.003,
                0.001,
                1.002,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.192437
    },
    "935": {
        "input": "5 6 8 10",
        "step_1": {
            "steps": [
                "5 * 6 = 30 (left: 8 10 30)",
                "10 - 6 = 4 (left: 5 4 8)",
                "10 / 5 = 2 (left: 6 8 2)",
                "6 * 8 = 48 (left: 5 10 48)",
                "10 - 8 = 2 (left: 5 2 10)",
                "10 - 6 = 4 (left: 5 4 8)",
                "6 - 5 = 1 (left: 1 8 10)",
                "8 * 10 = 80 (left: 5 6 80)",
                "6 + 8 = 14 (left: 14 10)",
                "5 + 6 = 11 (left: 8 10 11)"
            ],
            "values": [
                2.001,
                2.0,
                22.0,
                3.0,
                41.0,
                1.0,
                2.001,
                1.001,
                60.0,
                1.002
            ],
            "resampled": [
                "0 <- 8",
                "1 <- 8",
                "2 <- 2",
                "3 <- 8",
                "4 <- 8",
                "5 <- 4",
                "6 <- 8",
                "7 <- 4",
                "8 <- 8",
                "9 <- 4"
            ],
            "resampled_steps": [
                "6 + 8 = 14 (left: 14 10)",
                "6 + 8 = 14 (left: 14 10)",
                "10 / 5 = 2 (left: 6 8 2)",
                "6 + 8 = 14 (left: 14 10)",
                "6 + 8 = 14 (left: 14 10)",
                "10 - 8 = 2 (left: 5 2 10)",
                "6 + 8 = 14 (left: 14 10)",
                "10 - 8 = 2 (left: 5 2 10)",
                "6 + 8 = 14 (left: 14 10)",
                "10 - 8 = 2 (left: 5 2 10)"
            ]
        },
        "step_2": {
            "steps": [
                "6 + 8 = 14 (left: 14 10)\n14 - 10 = 4 (left: 4)",
                "6 + 8 = 14 (left: 14 10)\n14 - 10 = 4 (left: 4)",
                "10 / 5 = 2 (left: 6 8 2)\n6 * 8 = 48 (left: 48 2)",
                "6 + 8 = 14 (left: 14 10)\n10 + 14 = 24 (left: 24)",
                "6 + 8 = 14 (left: 14 10)\n14 * 10 = 140 (left: 140 10)",
                "10 - 8 = 2 (left: 5 2 10)\n5 / 2 = 2.5 (left: 2.5 10)",
                "6 + 8 = 14 (left: 14 10)\n14 - 10 = 4 (left: 4 10)",
                "10 - 8 = 2 (left: 5 2 10)\n2 + 10 = 12 (left: 5 12)",
                "6 + 8 = 14 (left: 14 10)\n10 - 14 = -4 (left: -4 10)",
                "10 - 8 = 2 (left: 5 2 10)\n5 + 2 = 7 (left: 7 10)"
            ],
            "values": [
                0.002,
                0.003,
                60.0,
                60.0,
                40.0,
                2.001,
                21.0,
                0.001,
                1.002,
                3.0
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 4",
                "3 <- 3",
                "4 <- 4",
                "5 <- 4",
                "6 <- 3",
                "7 <- 2",
                "8 <- 2",
                "9 <- 6"
            ],
            "resampled_steps": [
                "6 + 8 = 14 (left: 14 10)\n10 + 14 = 24 (left: 24)",
                "6 + 8 = 14 (left: 14 10)\n10 + 14 = 24 (left: 24)",
                "6 + 8 = 14 (left: 14 10)\n14 * 10 = 140 (left: 140 10)",
                "6 + 8 = 14 (left: 14 10)\n10 + 14 = 24 (left: 24)",
                "6 + 8 = 14 (left: 14 10)\n14 * 10 = 140 (left: 140 10)",
                "6 + 8 = 14 (left: 14 10)\n14 * 10 = 140 (left: 140 10)",
                "6 + 8 = 14 (left: 14 10)\n10 + 14 = 24 (left: 24)",
                "10 / 5 = 2 (left: 6 8 2)\n6 * 8 = 48 (left: 48 2)",
                "10 / 5 = 2 (left: 6 8 2)\n6 * 8 = 48 (left: 48 2)",
                "6 + 8 = 14 (left: 14 10)\n14 - 10 = 4 (left: 4 10)"
            ]
        },
        "step_3": {
            "steps": [
                "6 + 8 = 14 (left: 14 10)\n10 + 14 = 24 (left: 24)\nAnswer: (6 + 8) + 10 = 24",
                "6 + 8 = 14 (left: 14 10)\n10 + 14 = 24 (left: 24)\nAnswer: (6 + 8) + 10 = 24",
                "6 + 8 = 14 (left: 14 10)\n14 * 10 = 140 (left: 140 10)\n140 - 10 = 130 (left: 130)",
                "6 + 8 = 14 (left: 14 10)\n10 + 14 = 24 (left: 24)\nAnswer: (6 + 8) + 10 = 24",
                "6 + 8 = 14 (left: 14 10)\n14 * 10 = 140 (left: 140 10)\n140 * 10 = 1400 (left: 10 1400)",
                "6 + 8 = 14 (left: 14 10)\n14 * 10 = 140 (left: 140 10)\n140 / 10 = 14 (left: 14 10)",
                "6 + 8 = 14 (left: 14 10)\n10 + 14 = 24 (left: 24)\nAnswer: (6 + 8) + 10 = 24",
                "10 / 5 = 2 (left: 6 8 2)\n6 * 8 = 48 (left: 48 2)\n48 * 2 = 96 (left: 96)",
                "10 / 5 = 2 (left: 6 8 2)\n6 * 8 = 48 (left: 48 2)\n48 + 2 = 50 (left: 2 50)",
                "6 + 8 = 14 (left: 14 10)\n14 - 10 = 4 (left: 4 10)\n4 * 10 = 40 (left: 10 40)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                40.001,
                20.001,
                60.0,
                0.003,
                0.003,
                1.001,
                1.001
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 5",
                "3 <- 5",
                "4 <- 5",
                "5 <- 5",
                "6 <- 3",
                "7 <- 4",
                "8 <- 5",
                "9 <- 5"
            ],
            "resampled_steps": [
                "6 + 8 = 14 (left: 14 10)\n10 + 14 = 24 (left: 24)\nAnswer: (6 + 8) + 10 = 24",
                "6 + 8 = 14 (left: 14 10)\n10 + 14 = 24 (left: 24)\nAnswer: (6 + 8) + 10 = 24",
                "6 + 8 = 14 (left: 14 10)\n14 * 10 = 140 (left: 140 10)\n140 / 10 = 14 (left: 14 10)",
                "6 + 8 = 14 (left: 14 10)\n14 * 10 = 140 (left: 140 10)\n140 / 10 = 14 (left: 14 10)",
                "6 + 8 = 14 (left: 14 10)\n14 * 10 = 140 (left: 140 10)\n140 / 10 = 14 (left: 14 10)",
                "6 + 8 = 14 (left: 14 10)\n14 * 10 = 140 (left: 140 10)\n140 / 10 = 14 (left: 14 10)",
                "6 + 8 = 14 (left: 14 10)\n10 + 14 = 24 (left: 24)\nAnswer: (6 + 8) + 10 = 24",
                "6 + 8 = 14 (left: 14 10)\n14 * 10 = 140 (left: 140 10)\n140 * 10 = 1400 (left: 10 1400)",
                "6 + 8 = 14 (left: 14 10)\n14 * 10 = 140 (left: 140 10)\n140 / 10 = 14 (left: 14 10)",
                "6 + 8 = 14 (left: 14 10)\n14 * 10 = 140 (left: 140 10)\n140 / 10 = 14 (left: 14 10)"
            ]
        },
        "step_4": {
            "steps": [
                "6 + 8 = 14 (left: 14 10)\n10 + 14 = 24 (left: 24)\nAnswer: (6 + 8) + 10 = 24\nInput: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 9 8 9)\n9 - 8 = 1 (left: 1 9)\n9 * 1 = 9 (left: 9)\nAnswer: 3 * (3 * 8 - 9) = 24",
                "6 + 8 = 14 (left: 14 10)\n10 + 14 = 24 (left: 24)\nAnswer: (6 + 8) + 10 = 24\nInput: 3 3 6 9\nSteps:\n3 * 3 = 9 (left: 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\nAnswer: (3 * 3) * (6 - 9) = 24",
                "6 + 8 = 14 (left: 14 10)\n14 * 10 = 140 (left: 140 10)\n140 / 10 = 14 (left: 14 10)\n14 / 10 = 1.4 (left: 1.4)",
                "6 + 8 = 14 (left: 14 10)\n14 * 10 = 140 (left: 140 10)\n140 / 10 = 14 (left: 14 10)\n14 / 10 = 1.4 (left: 1.4)",
                "6 + 8 = 14 (left: 14 10)\n14 * 10 = 140 (left: 140 10)\n140 / 10 = 14 (left: 14 10)\n14 + 10 = 24 (left: 24)",
                "6 + 8 = 14 (left: 14 10)\n14 * 10 = 140 (left: 140 10)\n140 / 10 = 14 (left: 14 10)\n14 - 10 = 4 (left: 4)",
                "6 + 8 = 14 (left: 14 10)\n10 + 14 = 24 (left: 24)\nAnswer: (6 + 8) + 10 = 24\nInput: 3 3 7 11\nSteps:\n3 * 7 = 21 (left: 3 11 21)\n11 - 3 = 8 (left: 8 21)\n21 - 8 = 13 (left: 13)\n13 + 11 = 24 (left: 24)\nAnswer: ((3 * 7) - (11 - 3)) + 11 = 24",
                "6 + 8 = 14 (left: 14 10)\n14 * 10 = 140 (left: 140 10)\n140 * 10 = 1400 (left: 10 1400)\n1400 / 10 = 140 (left: 140)",
                "6 + 8 = 14 (left: 14 10)\n14 * 10 = 140 (left: 140 10)\n140 / 10 = 14 (left: 14 10)\n14 * 10 = 140 (left: 140)",
                "6 + 8 = 14 (left: 14 10)\n14 * 10 = 140 (left: 140 10)\n140 / 10 = 14 (left: 14 10)\n14 / 10 = 1.4 (left: 1.4)"
            ],
            "values": [
                20.0,
                60.0,
                0.003,
                0.003,
                40.0,
                0.001,
                60.0,
                0.003,
                0.003,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.226086
    },
    "936": {
        "input": "6 11 12 13",
        "step_1": {
            "steps": [
                "6 + 11 = 17 (left: 12 13 17)",
                "12 + 13 = 25 (left: 6 11 25)",
                "12 - 1 = 11 (left: 6 11 13)",
                "13 - 11 = 2 (left: 6 12 2)",
                "6 * 11 = 66 (left: 12 13 66)",
                "11 / 12 = 0.917 (left: 6 13 0.917)",
                "11 + 6 = 17 (left: 12 17 13)",
                "11 - 6 = 5 (left: 5 12 13)",
                "13 - 11 = 2 (left: 6 12 2)",
                "6 + 11 = 17 (left: 12 13 17)"
            ],
            "values": [
                0.003,
                2.001,
                3.0,
                21.001,
                1.002,
                3.0,
                1.002,
                1.002,
                2.001,
                1.002
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 7",
                "2 <- 3",
                "3 <- 5",
                "4 <- 3",
                "5 <- 3",
                "6 <- 3",
                "7 <- 2",
                "8 <- 3",
                "9 <- 1"
            ],
            "resampled_steps": [
                "13 - 11 = 2 (left: 6 12 2)",
                "11 - 6 = 5 (left: 5 12 13)",
                "13 - 11 = 2 (left: 6 12 2)",
                "11 / 12 = 0.917 (left: 6 13 0.917)",
                "13 - 11 = 2 (left: 6 12 2)",
                "13 - 11 = 2 (left: 6 12 2)",
                "13 - 11 = 2 (left: 6 12 2)",
                "12 - 1 = 11 (left: 6 11 13)",
                "13 - 11 = 2 (left: 6 12 2)",
                "12 + 13 = 25 (left: 6 11 25)"
            ]
        },
        "step_2": {
            "steps": [
                "13 - 11 = 2 (left: 6 12 2)\n12 / 6 = 2 (left: 2 2)",
                "11 - 6 = 5 (left: 5 12 13)\n12 - 5 = 7 (left: 7 13)",
                "13 - 11 = 2 (left: 6 12 2)\n6 * 2 = 12 (left: 12 2)",
                "11 / 12 = 0.917 (left: 6 13 0.917)\n13 / 6 = 2.167 (left: 2.167 0.917)",
                "13 - 11 = 2 (left: 6 12 2)\n2 * 6 = 12 (left: 12 2)",
                "13 - 11 = 2 (left: 6 12 2)\n6 + 12 = 18 (left: 18 2)",
                "13 - 11 = 2 (left: 6 12 2)\n12 / 6 = 2 (left: 2 2)",
                "12 - 1 = 11 (left: 6 11 13)\n11 * 13 = 143 (left: 6 143)",
                "13 - 11 = 2 (left: 6 12 2)\n12 - 6 = 6 (left: 6 2)",
                "12 + 13 = 25 (left: 6 11 25)\n6 + 11 = 17 (left: 17 25)"
            ],
            "values": [
                3.0,
                0.002,
                60.0,
                3.0,
                60.0,
                0.003,
                2.001,
                0.002,
                2.0,
                0.003
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 2",
                "2 <- 4",
                "3 <- 4",
                "4 <- 2",
                "5 <- 4",
                "6 <- 4",
                "7 <- 4",
                "8 <- 4",
                "9 <- 4"
            ],
            "resampled_steps": [
                "13 - 11 = 2 (left: 6 12 2)\n6 * 2 = 12 (left: 12 2)",
                "13 - 11 = 2 (left: 6 12 2)\n6 * 2 = 12 (left: 12 2)",
                "13 - 11 = 2 (left: 6 12 2)\n2 * 6 = 12 (left: 12 2)",
                "13 - 11 = 2 (left: 6 12 2)\n2 * 6 = 12 (left: 12 2)",
                "13 - 11 = 2 (left: 6 12 2)\n6 * 2 = 12 (left: 12 2)",
                "13 - 11 = 2 (left: 6 12 2)\n2 * 6 = 12 (left: 12 2)",
                "13 - 11 = 2 (left: 6 12 2)\n2 * 6 = 12 (left: 12 2)",
                "13 - 11 = 2 (left: 6 12 2)\n2 * 6 = 12 (left: 12 2)",
                "13 - 11 = 2 (left: 6 12 2)\n2 * 6 = 12 (left: 12 2)",
                "13 - 11 = 2 (left: 6 12 2)\n2 * 6 = 12 (left: 12 2)"
            ]
        },
        "step_3": {
            "steps": [
                "13 - 11 = 2 (left: 6 12 2)\n6 * 2 = 12 (left: 12 2)\n12 * 2 = 24 (left: 24)",
                "13 - 11 = 2 (left: 6 12 2)\n6 * 2 = 12 (left: 12 2)\n12 - 2 = 10 (left: 2 10)",
                "13 - 11 = 2 (left: 6 12 2)\n2 * 6 = 12 (left: 12 2)\n12 - 2 = 10 (left: 10)",
                "13 - 11 = 2 (left: 6 12 2)\n2 * 6 = 12 (left: 12 2)\n12 / 2 = 6 (left: 6)",
                "13 - 11 = 2 (left: 6 12 2)\n6 * 2 = 12 (left: 12 2)\n12 * 2 = 24 (left: 24 2)",
                "13 - 11 = 2 (left: 6 12 2)\n2 * 6 = 12 (left: 12 2)\n12 - 2 = 10 (left: 10)",
                "13 - 11 = 2 (left: 6 12 2)\n2 * 6 = 12 (left: 12 2)\n12 / 2 = 6 (left: 6 2)",
                "13 - 11 = 2 (left: 6 12 2)\n2 * 6 = 12 (left: 12 2)\n12 + 2 = 14 (left: 2 14)",
                "13 - 11 = 2 (left: 6 12 2)\n2 * 6 = 12 (left: 12 2)\n12 + 2 = 14 (left: 14)",
                "13 - 11 = 2 (left: 6 12 2)\n2 * 6 = 12 (left: 12 2)\n12 + 2 = 14 (left: 14)"
            ],
            "values": [
                40.0,
                0.001,
                0.002,
                0.003,
                21.001,
                0.002,
                3.0,
                1.001,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 4",
                "3 <- 4",
                "4 <- 0",
                "5 <- 0",
                "6 <- 0",
                "7 <- 7",
                "8 <- 0",
                "9 <- 6"
            ],
            "resampled_steps": [
                "13 - 11 = 2 (left: 6 12 2)\n6 * 2 = 12 (left: 12 2)\n12 * 2 = 24 (left: 24)",
                "13 - 11 = 2 (left: 6 12 2)\n6 * 2 = 12 (left: 12 2)\n12 * 2 = 24 (left: 24)",
                "13 - 11 = 2 (left: 6 12 2)\n6 * 2 = 12 (left: 12 2)\n12 * 2 = 24 (left: 24 2)",
                "13 - 11 = 2 (left: 6 12 2)\n6 * 2 = 12 (left: 12 2)\n12 * 2 = 24 (left: 24 2)",
                "13 - 11 = 2 (left: 6 12 2)\n6 * 2 = 12 (left: 12 2)\n12 * 2 = 24 (left: 24)",
                "13 - 11 = 2 (left: 6 12 2)\n6 * 2 = 12 (left: 12 2)\n12 * 2 = 24 (left: 24)",
                "13 - 11 = 2 (left: 6 12 2)\n6 * 2 = 12 (left: 12 2)\n12 * 2 = 24 (left: 24)",
                "13 - 11 = 2 (left: 6 12 2)\n2 * 6 = 12 (left: 12 2)\n12 + 2 = 14 (left: 2 14)",
                "13 - 11 = 2 (left: 6 12 2)\n6 * 2 = 12 (left: 12 2)\n12 * 2 = 24 (left: 24)",
                "13 - 11 = 2 (left: 6 12 2)\n2 * 6 = 12 (left: 12 2)\n12 / 2 = 6 (left: 6 2)"
            ]
        },
        "step_4": {
            "steps": [
                "13 - 11 = 2 (left: 6 12 2)\n6 * 2 = 12 (left: 12 2)\n12 * 2 = 24 (left: 24)\nAnswer: (6 * (13 - 11)) * 12 = 24",
                "13 - 11 = 2 (left: 6 12 2)\n6 * 2 = 12 (left: 12 2)\n12 * 2 = 24 (left: 24)\nAnswer: (6 * (13 - 11)) * 12 = 24",
                "13 - 11 = 2 (left: 6 12 2)\n6 * 2 = 12 (left: 12 2)\n12 * 2 = 24 (left: 24 2)\n24 + 2 = 26 (left: 2 26)",
                "13 - 11 = 2 (left: 6 12 2)\n6 * 2 = 12 (left: 12 2)\n12 * 2 = 24 (left: 24 2)\n24 * 2 = 48 (left: 2 48)",
                "13 - 11 = 2 (left: 6 12 2)\n6 * 2 = 12 (left: 12 2)\n12 * 2 = 24 (left: 24)\nAnswer: 6 * ((13 - 11) * 12) = 24",
                "13 - 11 = 2 (left: 6 12 2)\n6 * 2 = 12 (left: 12 2)\n12 * 2 = 24 (left: 24)\nAnswer: (6 * (13 - 11)) * 12 = 24",
                "13 - 11 = 2 (left: 6 12 2)\n6 * 2 = 12 (left: 12 2)\n12 * 2 = 24 (left: 24)\nAnswer: (13 - 11) * (6 * (12 * 2)) = 24",
                "13 - 11 = 2 (left: 6 12 2)\n2 * 6 = 12 (left: 12 2)\n12 + 2 = 14 (left: 2 14)\n14 / 2 = 7 (left: 7)",
                "13 - 11 = 2 (left: 6 12 2)\n6 * 2 = 12 (left: 12 2)\n12 * 2 = 24 (left: 24)\nAnswer: (6 * (13 - 11)) * 12 = 24",
                "13 - 11 = 2 (left: 6 12 2)\n2 * 6 = 12 (left: 12 2)\n12 / 2 = 6 (left: 6 2)\n6 - 2 = 4 (left: 4)"
            ],
            "values": [
                60.0,
                60.0,
                40.001,
                0.003,
                60.0,
                60.0,
                20.002,
                0.002,
                60.0,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.260669
    },
    "937": {
        "input": "2 2 8 8",
        "step_1": {
            "steps": [
                "2 / 2 = 1 (left: 1 8 8)",
                "8 + 2 = 10 (left: 2 8 10)",
                "8 - 2 = 6 (left: 2 6 8)",
                "8 - 2 = 6 (left: 2 6 8)",
                "2 * 2 = 4 (left: 4 8 8)",
                "8 + 2 = 10 (left: 2 8 10)",
                "2 * 2 = 4 (left: 4 8 8)",
                "2 + 2 = 4 (left: 4 8 8)",
                "2 * 2 = 4 (left: 4 8 8)",
                "8 - 2 = 6 (left: 2 6 8)"
            ],
            "values": [
                1.002,
                1.002,
                1.002,
                2.001,
                41.0,
                1.002,
                21.0,
                41.0,
                41.0,
                2.001
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 4",
                "2 <- 4",
                "3 <- 8",
                "4 <- 7",
                "5 <- 8",
                "6 <- 7",
                "7 <- 7",
                "8 <- 8",
                "9 <- 6"
            ],
            "resampled_steps": [
                "2 * 2 = 4 (left: 4 8 8)",
                "2 * 2 = 4 (left: 4 8 8)",
                "2 * 2 = 4 (left: 4 8 8)",
                "2 * 2 = 4 (left: 4 8 8)",
                "2 + 2 = 4 (left: 4 8 8)",
                "2 * 2 = 4 (left: 4 8 8)",
                "2 + 2 = 4 (left: 4 8 8)",
                "2 + 2 = 4 (left: 4 8 8)",
                "2 * 2 = 4 (left: 4 8 8)",
                "2 * 2 = 4 (left: 4 8 8)"
            ]
        },
        "step_2": {
            "steps": [
                "2 * 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8)",
                "2 * 2 = 4 (left: 4 8 8)\n4 + 8 = 12 (left: 8 12)",
                "2 * 2 = 4 (left: 4 8 8)\n4 + 8 = 12 (left: 8 12)",
                "2 * 2 = 4 (left: 4 8 8)\n8 / 4 = 2 (left: 2 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8)",
                "2 * 2 = 4 (left: 4 8 8)\n4 + 8 = 12 (left: 8 12)",
                "2 + 2 = 4 (left: 4 8 8)\n4 + 8 = 12 (left: 8 12)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)",
                "2 * 2 = 4 (left: 4 8 8)\n4 + 8 = 12 (left: 8 12)",
                "2 * 2 = 4 (left: 4 8 8)\n4 + 8 = 12 (left: 8 12)"
            ],
            "values": [
                0.003,
                0.002,
                1.002,
                2.001,
                1.001,
                1.001,
                3.0,
                40.001,
                1.002,
                1.002
            ],
            "resampled": [
                "0 <- 7",
                "1 <- 7",
                "2 <- 7",
                "3 <- 7",
                "4 <- 7",
                "5 <- 7",
                "6 <- 7",
                "7 <- 7",
                "8 <- 7",
                "9 <- 7"
            ],
            "resampled_steps": [
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)"
            ]
        },
        "step_3": {
            "steps": [
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n8 * 4 = 32 (left: 32)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n8 + 32 = 40 (left: 40)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n32 - 8 = 24 (left: 24)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n8 * 32 = 256 (left: 256)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n32 / 8 = 4 (left: 4 8)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n8 * 4 = 32 (left: 32)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n8 + 32 = 40 (left: 40)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n8 * 4 = 32 (left: 32)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n8 + 32 = 40 (left: 40)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n32 / 4 = 8 (left: 8 8)"
            ],
            "values": [
                0.003,
                40.001,
                40.0,
                20.002,
                20.002,
                0.002,
                0.003,
                0.003,
                20.002,
                0.003
            ],
            "resampled": [
                "0 <- 8",
                "1 <- 3",
                "2 <- 1",
                "3 <- 1",
                "4 <- 3",
                "5 <- 1",
                "6 <- 8",
                "7 <- 1",
                "8 <- 2",
                "9 <- 1"
            ],
            "resampled_steps": [
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n8 + 32 = 40 (left: 40)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n8 * 32 = 256 (left: 256)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n8 + 32 = 40 (left: 40)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n8 + 32 = 40 (left: 40)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n8 * 32 = 256 (left: 256)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n8 + 32 = 40 (left: 40)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n8 + 32 = 40 (left: 40)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n8 + 32 = 40 (left: 40)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n32 - 8 = 24 (left: 24)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n8 + 32 = 40 (left: 40)"
            ]
        },
        "step_4": {
            "steps": [
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n8 + 32 = 40 (left: 40)\n40 - 20 = 20 (left: 20 40 20)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n8 * 32 = 256 (left: 256)\n256 + 1 = 257 (left: 1 256 257)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n8 + 32 = 40 (left: 40)\n10 * 4 = 40 (left: 4)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n8 + 32 = 40 (left: 40)\n40 - 2 = 38 (left: 38)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n8 * 32 = 256 (left: 256)\n256 - 2 = 254 (left: 254 2)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n8 + 32 = 40 (left: 40)\n40 * 2 = 80 (left: 80)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n8 + 32 = 40 (left: 40)\n40 - 10 = 30 (left: 30 40 50)",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n8 + 32 = 40 (left: 40)\n40 * 2 = 80",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n32 - 8 = 24 (left: 24)\nAnswer: (2 + 2) * (8 - 8) = 24",
                "2 + 2 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)\n8 + 32 = 40 (left: 40)\n40 / 2 = 20"
            ],
            "values": [
                20.002,
                21.0,
                0.003,
                0.0,
                20.0,
                0.003,
                3.0,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.2928060000000001
    },
    "938": {
        "input": "2 7 12 13",
        "step_1": {
            "steps": [
                "7 + 12 = 19 (left: 2 19 13)",
                "13 - 2 = 11 (left: 7 11 12)",
                "2 + 7 = 9 (left: 9 12 13)",
                "12 + 1 = 13 (left: 7 13 13)",
                "7 * 2 = 14 (left: 14 12 13)",
                "13 - 2 = 11 (left: 2 7 11)",
                "7 * 2 = 14 (left: 14 12 13)",
                "7 * 2 = 14 (left: 14 12 13)",
                "2 + 7 = 9 (left: 9 12 13)",
                "13 - 2 = 11 (left: 2 7 11)"
            ],
            "values": [
                1.002,
                1.001,
                2.001,
                3.0,
                1.002,
                2.001,
                2.001,
                0.002,
                1.001,
                1.002
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 3",
                "2 <- 6",
                "3 <- 0",
                "4 <- 9",
                "5 <- 6",
                "6 <- 3",
                "7 <- 2",
                "8 <- 6",
                "9 <- 9"
            ],
            "resampled_steps": [
                "7 * 2 = 14 (left: 14 12 13)",
                "12 + 1 = 13 (left: 7 13 13)",
                "7 * 2 = 14 (left: 14 12 13)",
                "7 + 12 = 19 (left: 2 19 13)",
                "13 - 2 = 11 (left: 2 7 11)",
                "7 * 2 = 14 (left: 14 12 13)",
                "12 + 1 = 13 (left: 7 13 13)",
                "2 + 7 = 9 (left: 9 12 13)",
                "7 * 2 = 14 (left: 14 12 13)",
                "13 - 2 = 11 (left: 2 7 11)"
            ]
        },
        "step_2": {
            "steps": [
                "7 * 2 = 14 (left: 14 12 13)\n14 + 12 = 26 (left: 26 13)",
                "12 + 1 = 13 (left: 7 13 13)\n7 + 13 = 20 (left: 13 20)",
                "7 * 2 = 14 (left: 14 12 13)\n14 + 12 = 26 (left: 26 13)",
                "7 + 12 = 19 (left: 2 19 13)\n2 * 19 = 38 (left: 38 13)",
                "13 - 2 = 11 (left: 2 7 11)\n2 + 7 = 9 (left: 9 11)",
                "7 * 2 = 14 (left: 14 12 13)\n12 / 13 = 0.923 (left: 0.923 13)",
                "12 + 1 = 13 (left: 7 13 13)\n13 - 7 = 6 (left: 6 13)",
                "2 + 7 = 9 (left: 9 12 13)\n13 - 9 = 4 (left: 9 4)",
                "7 * 2 = 14 (left: 14 12 13)\n13 / 12 = 1.08 (left: 14 1.08)",
                "13 - 2 = 11 (left: 2 7 11)\n11 - 2 = 9 (left: 7 9)"
            ],
            "values": [
                1.002,
                0.003,
                0.003,
                0.003,
                0.001,
                3.0,
                1.002,
                1.001,
                0.002,
                1.002
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 5",
                "2 <- 5",
                "3 <- 6",
                "4 <- 7",
                "5 <- 9",
                "6 <- 7",
                "7 <- 9",
                "8 <- 7",
                "9 <- 5"
            ],
            "resampled_steps": [
                "13 - 2 = 11 (left: 2 7 11)\n11 - 2 = 9 (left: 7 9)",
                "7 * 2 = 14 (left: 14 12 13)\n12 / 13 = 0.923 (left: 0.923 13)",
                "7 * 2 = 14 (left: 14 12 13)\n12 / 13 = 0.923 (left: 0.923 13)",
                "12 + 1 = 13 (left: 7 13 13)\n13 - 7 = 6 (left: 6 13)",
                "2 + 7 = 9 (left: 9 12 13)\n13 - 9 = 4 (left: 9 4)",
                "13 - 2 = 11 (left: 2 7 11)\n11 - 2 = 9 (left: 7 9)",
                "2 + 7 = 9 (left: 9 12 13)\n13 - 9 = 4 (left: 9 4)",
                "13 - 2 = 11 (left: 2 7 11)\n11 - 2 = 9 (left: 7 9)",
                "2 + 7 = 9 (left: 9 12 13)\n13 - 9 = 4 (left: 9 4)",
                "7 * 2 = 14 (left: 14 12 13)\n12 / 13 = 0.923 (left: 0.923 13)"
            ]
        },
        "step_3": {
            "steps": [
                "13 - 2 = 11 (left: 2 7 11)\n11 - 2 = 9 (left: 7 9)\n7 - 9 = -2 (left: -2 9)",
                "7 * 2 = 14 (left: 14 12 13)\n12 / 13 = 0.923 (left: 0.923 13)\n0.923 + 13 = 13.923 (left: 13.923)",
                "7 * 2 = 14 (left: 14 12 13)\n12 / 13 = 0.923 (left: 0.923 13)\n13 / 0.923 = 14.083 (left: 14.083)",
                "12 + 1 = 13 (left: 7 13 13)\n13 - 7 = 6 (left: 6 13)\n6 * 13 = 78 (left: 78)",
                "2 + 7 = 9 (left: 9 12 13)\n13 - 9 = 4 (left: 9 4)\n9 * 4 = 36 (left: 36)",
                "13 - 2 = 11 (left: 2 7 11)\n11 - 2 = 9 (left: 7 9)\n7 * 9 = 63 (left: 63) ",
                "2 + 7 = 9 (left: 9 12 13)\n13 - 9 = 4 (left: 9 4)\n9 + 4 = 13 (left: 13)",
                "13 - 2 = 11 (left: 2 7 11)\n11 - 2 = 9 (left: 7 9)\n7 + 9 = 16 (left: 16)",
                "2 + 7 = 9 (left: 9 12 13)\n13 - 9 = 4 (left: 9 4)\n9 - 4 = 5 (left: 5)",
                "7 * 2 = 14 (left: 14 12 13)\n12 / 13 = 0.923 (left: 0.923 13)\n0.923 * 13 = 12.000 (left: 12.000)"
            ],
            "values": [
                0.003,
                0.0,
                0.003,
                0.003,
                40.0,
                0.0,
                0.001,
                0.003,
                0.002,
                20.0
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 4",
                "2 <- 9",
                "3 <- 9",
                "4 <- 9",
                "5 <- 9",
                "6 <- 4",
                "7 <- 4",
                "8 <- 4",
                "9 <- 4"
            ],
            "resampled_steps": [
                "7 * 2 = 14 (left: 14 12 13)\n12 / 13 = 0.923 (left: 0.923 13)\n0.923 * 13 = 12.000 (left: 12.000)",
                "2 + 7 = 9 (left: 9 12 13)\n13 - 9 = 4 (left: 9 4)\n9 * 4 = 36 (left: 36)",
                "7 * 2 = 14 (left: 14 12 13)\n12 / 13 = 0.923 (left: 0.923 13)\n0.923 * 13 = 12.000 (left: 12.000)",
                "7 * 2 = 14 (left: 14 12 13)\n12 / 13 = 0.923 (left: 0.923 13)\n0.923 * 13 = 12.000 (left: 12.000)",
                "7 * 2 = 14 (left: 14 12 13)\n12 / 13 = 0.923 (left: 0.923 13)\n0.923 * 13 = 12.000 (left: 12.000)",
                "7 * 2 = 14 (left: 14 12 13)\n12 / 13 = 0.923 (left: 0.923 13)\n0.923 * 13 = 12.000 (left: 12.000)",
                "2 + 7 = 9 (left: 9 12 13)\n13 - 9 = 4 (left: 9 4)\n9 * 4 = 36 (left: 36)",
                "2 + 7 = 9 (left: 9 12 13)\n13 - 9 = 4 (left: 9 4)\n9 * 4 = 36 (left: 36)",
                "2 + 7 = 9 (left: 9 12 13)\n13 - 9 = 4 (left: 9 4)\n9 * 4 = 36 (left: 36)",
                "2 + 7 = 9 (left: 9 12 13)\n13 - 9 = 4 (left: 9 4)\n9 * 4 = 36 (left: 36)"
            ]
        },
        "step_4": {
            "steps": [
                "7 * 2 = 14 (left: 14 12 13)\n12 / 13 = 0.923 (left: 0.923 13)\n0.923 * 13 = 12.000 (left: 12.000)\n12 / 2 = 6 (left: 2 6)",
                "2 + 7 = 9 (left: 9 12 13)\n13 - 9 = 4 (left: 9 4)\n9 * 4 = 36 (left: 36)\n36 / 6 = 6 (left: 6)",
                "7 * 2 = 14 (left: 14 12 13)\n12 / 13 = 0.923 (left: 0.923 13)\n0.923 * 13 = 12.000 (left: 12.000)\n12 + 8 = 20 (left: 8 20)",
                "7 * 2 = 14 (left: 14 12 13)\n12 / 13 = 0.923 (left: 0.923 13)\n0.923 * 13 = 12.000 (left: 12.000)\n12 * 8 = 96 (left: 8 96)",
                "7 * 2 = 14 (left: 14 12 13)\n12 / 13 = 0.923 (left: 0.923 13)\n0.923 * 13 = 12.000 (left: 12.000)\n12 / 8 = 1.5 (left: 1.5 8)",
                "7 * 2 = 14 (left: 14 12 13)\n12 / 13 = 0.923 (left: 0.923 13)\n0.923 * 13 = 12.000 (left: 12.000)\n12 * 2 = 24 (left: 24)",
                "2 + 7 = 9 (left: 9 12 13)\n13 - 9 = 4 (left: 9 4)\n9 * 4 = 36 (left: 36)\n36 - 18 = 18 (left: 18)",
                "2 + 7 = 9 (left: 9 12 13)\n13 - 9 = 4 (left: 9 4)\n9 * 4 = 36 (left: 36)\n36 * 2 = 72",
                "2 + 7 = 9 (left: 9 12 13)\n13 - 9 = 4 (left: 9 4)\n9 * 4 = 36 (left: 36)\n6 * 6 = 36",
                "2 + 7 = 9 (left: 9 12 13)\n13 - 9 = 4 (left: 9 4)\n9 * 4 = 36 (left: 36)\n36 / 6 = 6"
            ],
            "values": [
                2.0,
                0.0,
                1.002,
                1.002,
                2.0,
                40.0,
                0.002,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.3258360000000002
    },
    "939": {
        "input": "2 6 8 12",
        "step_1": {
            "steps": [
                "6 * 8 = 48 (left: 2 48 12)",
                "2 + 6 = 8 (left: 8 8 12)",
                "6 / 2 = 3 (left: 3 8 12)",
                "8 - 6 = 2 (left: 2 8 12)",
                "6 / 2 = 3 (left: 3 8 12)",
                "12 - 2 = 10 (left: 6 8 10)",
                "8 - 6 = 2 (left: 2 8 12)",
                "12 / 2 = 6 (left: 6 6 12)",
                "8 / 2 = 4 (left: 2 6 12)",
                "12 - 6 = 6 (left: 2 6 8)"
            ],
            "values": [
                60.0,
                2.001,
                2.001,
                0.003,
                40.001,
                41.0,
                1.002,
                60.0,
                0.003,
                3.0
            ],
            "resampled": [
                "0 <- 7",
                "1 <- 5",
                "2 <- 4",
                "3 <- 5",
                "4 <- 7",
                "5 <- 0",
                "6 <- 7",
                "7 <- 0",
                "8 <- 4",
                "9 <- 0"
            ],
            "resampled_steps": [
                "12 / 2 = 6 (left: 6 6 12)",
                "12 - 2 = 10 (left: 6 8 10)",
                "6 / 2 = 3 (left: 3 8 12)",
                "12 - 2 = 10 (left: 6 8 10)",
                "12 / 2 = 6 (left: 6 6 12)",
                "6 * 8 = 48 (left: 2 48 12)",
                "12 / 2 = 6 (left: 6 6 12)",
                "6 * 8 = 48 (left: 2 48 12)",
                "6 / 2 = 3 (left: 3 8 12)",
                "6 * 8 = 48 (left: 2 48 12)"
            ]
        },
        "step_2": {
            "steps": [
                "12 / 2 = 6 (left: 6 6 12)\n12 - 6 = 6 (left: 6 6)",
                "12 - 2 = 10 (left: 6 8 10)\n6 + 8 = 14 (left: 14 10)",
                "6 / 2 = 3 (left: 3 8 12)\n8 / 3 = 2.6667 (left: 2.6667 8 12)",
                "12 - 2 = 10 (left: 6 8 10)\n8 - 6 = 2 (left: 2 10)",
                "12 / 2 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "6 * 8 = 48 (left: 2 48 12)\n12 * 2 = 24 (left: 24 24)",
                "12 / 2 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)",
                "6 * 8 = 48 (left: 2 48 12)\n48 - 2 = 46 (left: 46 12)",
                "6 / 2 = 3 (left: 3 8 12)\n12 - 8 = 4 (left: 3 4 8)",
                "6 * 8 = 48 (left: 2 48 12)\n12 * 2 = 24 (left: 24 24)"
            ],
            "values": [
                20.001,
                60.0,
                3.0,
                3.0,
                20.002,
                20.002,
                60.0,
                0.001,
                2.001,
                20.002
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 9",
                "2 <- 1",
                "3 <- 6",
                "4 <- 2",
                "5 <- 6",
                "6 <- 0",
                "7 <- 6",
                "8 <- 9",
                "9 <- 1"
            ],
            "resampled_steps": [
                "12 / 2 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)",
                "6 * 8 = 48 (left: 2 48 12)\n12 * 2 = 24 (left: 24 24)",
                "12 - 2 = 10 (left: 6 8 10)\n6 + 8 = 14 (left: 14 10)",
                "12 / 2 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)",
                "6 / 2 = 3 (left: 3 8 12)\n8 / 3 = 2.6667 (left: 2.6667 8 12)",
                "12 / 2 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)",
                "12 / 2 = 6 (left: 6 6 12)\n12 - 6 = 6 (left: 6 6)",
                "12 / 2 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)",
                "6 * 8 = 48 (left: 2 48 12)\n12 * 2 = 24 (left: 24 24)",
                "12 - 2 = 10 (left: 6 8 10)\n6 + 8 = 14 (left: 14 10)"
            ]
        },
        "step_3": {
            "steps": [
                "12 / 2 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "6 * 8 = 48 (left: 2 48 12)\n12 * 2 = 24 (left: 24 24)\n24 / 24 = 1 (left: 1)",
                "12 - 2 = 10 (left: 6 8 10)\n6 + 8 = 14 (left: 14 10)\n14 - 10 = 4 (left: 4)",
                "12 / 2 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 12 24)",
                "6 / 2 = 3 (left: 3 8 12)\n8 / 3 = 2.6667 (left: 2.6667 8 12)\n2.6667 * 4.5 = 12 (left: 8 12)",
                "12 / 2 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "12 / 2 = 6 (left: 6 6 12)\n12 - 6 = 6 (left: 6 6)\n6 / 6 = 1 (left: 1)",
                "12 / 2 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "6 * 8 = 48 (left: 2 48 12)\n12 * 2 = 24 (left: 24 24)\n24 + 24 = 48",
                "12 - 2 = 10 (left: 6 8 10)\n6 + 8 = 14 (left: 14 10)\n14 - 10 = 4 (left: 4)"
            ],
            "values": [
                20.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.002,
                0.003,
                0.003,
                0.001
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 0",
                "3 <- 0",
                "4 <- 0",
                "5 <- 0",
                "6 <- 0",
                "7 <- 0",
                "8 <- 0",
                "9 <- 0"
            ],
            "resampled_steps": [
                "12 / 2 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "12 / 2 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "12 / 2 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "12 / 2 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "12 / 2 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "12 / 2 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "12 / 2 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "12 / 2 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "12 / 2 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "12 / 2 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)"
            ]
        },
        "step_4": {
            "steps": [
                "12 / 2 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)\nThere are no possible next steps as there are no more numbers provided to perform operations with.",
                "12 / 2 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)\nThere are no possible next steps as the input is already a single number.",
                "12 / 2 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)\nThere are no possible next steps for the input 6, as there are no other numbers given to perform operations with.",
                "12 / 2 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)\nThere are no possible next steps with the input of 6.",
                "12 / 2 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)\nThere are no possible next steps with the input of 6.",
                "12 / 2 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)\nThere are no possible next steps with the input of 6, as there are no other numbers to perform operations with.",
                "12 / 2 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)\nThere are no possible next steps as there are no other numbers to operate with.",
                "12 / 2 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)\nThere are no possible next steps as there are no other numbers given to perform operations with.",
                "12 / 2 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)\nThere are no possible next steps as there are no other numbers to perform operations with.",
                "12 / 2 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)\nThere are no possible next steps with the input of 6, as it is a single number and there are no other numbers to perform operations with."
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.356741
    },
    "940": {
        "input": "3 4 9 13",
        "step_1": {
            "steps": [
                "9 - 3 = 6 (left: 4 6 13)",
                "13 - 4 = 9 (left: 3 9 9)",
                "13 - 9 = 4 (left: 3 4 4)",
                "9 / 3 = 3 (left: 3 4 13)",
                "3 + 4 = 7 (left: 7 9 13)",
                "3 * 4 = 12 (left: 12 9 13)",
                "3 * 4 = 12 (left: 12 9 13)",
                "13 - 9 = 4 (left: 3 4 4)",
                "13 - 4 = 9 (left: 3 9)",
                "13 - 4 = 9 (left: 3 9 13)"
            ],
            "values": [
                22.0,
                2.001,
                1.002,
                1.002,
                2.001,
                0.003,
                0.003,
                21.001,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 7",
                "1 <- 7",
                "2 <- 0",
                "3 <- 1",
                "4 <- 0",
                "5 <- 7",
                "6 <- 7",
                "7 <- 7",
                "8 <- 0",
                "9 <- 0"
            ],
            "resampled_steps": [
                "13 - 9 = 4 (left: 3 4 4)",
                "13 - 9 = 4 (left: 3 4 4)",
                "9 - 3 = 6 (left: 4 6 13)",
                "13 - 4 = 9 (left: 3 9 9)",
                "9 - 3 = 6 (left: 4 6 13)",
                "13 - 9 = 4 (left: 3 4 4)",
                "13 - 9 = 4 (left: 3 4 4)",
                "13 - 9 = 4 (left: 3 4 4)",
                "9 - 3 = 6 (left: 4 6 13)",
                "9 - 3 = 6 (left: 4 6 13)"
            ]
        },
        "step_2": {
            "steps": [
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)",
                "13 - 9 = 4 (left: 3 4 4)\n4 / 4 = 1 (left: 1 1)",
                "9 - 3 = 6 (left: 4 6 13)\n4 / 6 = 0.66666666667 (left: 0.66666666667 13)",
                "13 - 4 = 9 (left: 3 9 9)\n9 * 3 = 27 (left: 9 27)",
                "9 - 3 = 6 (left: 4 6 13)\n6 + 13 = 19 (left: 4 19)",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)",
                "13 - 9 = 4 (left: 3 4 4)\n4 / 3 = 1.33 (left: 1.33 4)",
                "13 - 9 = 4 (left: 3 4 4)\n3 * 4 = 12 (left: 12 4)",
                "9 - 3 = 6 (left: 4 6 13)\n4 + 6 = 10 (left: 10 13)",
                "9 - 3 = 6 (left: 4 6 13)\n6 + 13 = 19 (left: 4 19)"
            ],
            "values": [
                0.002,
                0.002,
                3.0,
                2.001,
                1.002,
                20.001,
                0.002,
                0.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 5",
                "1 <- 5",
                "2 <- 5",
                "3 <- 5",
                "4 <- 5",
                "5 <- 3",
                "6 <- 5",
                "7 <- 5",
                "8 <- 5",
                "9 <- 5"
            ],
            "resampled_steps": [
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)",
                "13 - 4 = 9 (left: 3 9 9)\n9 * 3 = 27 (left: 9 27)",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)"
            ]
        },
        "step_3": {
            "steps": [
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)\n1 * 4 = 4 (left: 4)",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)\n1 + 4 = 5 (left: 5)",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)\n4 - 1 = 3 (left: 3)",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)\n1 + 4 = 5 (left: 5)",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)\n1 + 4 = 5 (left: 5)",
                "13 - 4 = 9 (left: 3 9 9)\n9 * 3 = 27 (left: 9 27)\n9 + 27 = 36 (left: 27 36)",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)\n1 + 4 = 5 (left: 5)",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)\n4 - 1 = 3 (left: 3)",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)\n1 + 4 = 5 (left: 5)",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)\n1 * 4 = 4 (left: 4)"
            ],
            "values": [
                0.002,
                0.003,
                0.002,
                0.003,
                0.002,
                0.003,
                0.001,
                0.002,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 8",
                "1 <- 3",
                "2 <- 1",
                "3 <- 1",
                "4 <- 3",
                "5 <- 8",
                "6 <- 8",
                "7 <- 8",
                "8 <- 8",
                "9 <- 2"
            ],
            "resampled_steps": [
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)\n1 + 4 = 5 (left: 5)",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)\n1 + 4 = 5 (left: 5)",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)\n1 + 4 = 5 (left: 5)",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)\n1 + 4 = 5 (left: 5)",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)\n1 + 4 = 5 (left: 5)",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)\n1 + 4 = 5 (left: 5)",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)\n1 + 4 = 5 (left: 5)",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)\n1 + 4 = 5 (left: 5)",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)\n1 + 4 = 5 (left: 5)",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)\n4 - 1 = 3 (left: 3)"
            ]
        },
        "step_4": {
            "steps": [
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)\n1 + 4 = 5 (left: 5)\nNone - there are no other numbers given to perform operations with.",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)\n1 + 4 = 5 (left: 5)\nNone, as there is only one number provided.",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)\n1 + 4 = 5 (left: 5)\nThere are no possible next steps as there are not enough numbers to perform any operations.",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)\n1 + 4 = 5 (left: 5)\n5 + 5 = 10 (left: 10)",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)\n1 + 4 = 5 (left: 5)\nThere are no possible next steps since there are not enough numbers provided to perform any operations.",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)\n1 + 4 = 5 (left: 5)\nThere are no next steps for the input 5 as it is a single number and cannot be combined with any other numbers using basic arithmetic operations.",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)\n1 + 4 = 5 (left: 5)\nThere are no possible next steps with just the input of 5.",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)\n1 + 4 = 5 (left: 5)\nThere are no possible next steps as there are no other numbers given to perform operations with.",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)\n1 + 4 = 5 (left: 5)\nThere is only one possible next step: 5 + 5 = 10 (left: 10)",
                "13 - 9 = 4 (left: 3 4 4)\n4 - 3 = 1 (left: 1 4)\n4 - 1 = 3 (left: 3)\nThere are no possible next steps as there are not enough numbers to perform any operations."
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.388268
    },
    "941": {
        "input": "4 5 10 12",
        "step_1": {
            "steps": [
                "12 / 4 = 3 (left: 3 5 10)",
                "5 * 10 = 50 (left: 4 50 12)",
                "4 + 5 = 9 (left: 9 10 12)",
                "4 * 5 = 20 (left: 20 10 12)",
                "5 * 2 = 10 (left: 4 10 12)",
                "5 * 10 = 50 (left: 4 50 12)",
                "10 - 5 = 5 (left: 4 5 12)",
                "4 + 5 = 9 (left: 9 10 12)",
                "4 + 5 = 9 (left: 9 10 12)",
                "12 - 10 = 2 (left: 4 5 2)"
            ],
            "values": [
                2.001,
                3.0,
                3.0,
                20.001,
                0.003,
                3.0,
                20.002,
                1.002,
                2.001,
                3.0
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 2",
                "2 <- 6",
                "3 <- 6",
                "4 <- 6",
                "5 <- 3",
                "6 <- 2",
                "7 <- 2",
                "8 <- 3",
                "9 <- 0"
            ],
            "resampled_steps": [
                "5 * 10 = 50 (left: 4 50 12)",
                "4 + 5 = 9 (left: 9 10 12)",
                "10 - 5 = 5 (left: 4 5 12)",
                "10 - 5 = 5 (left: 4 5 12)",
                "10 - 5 = 5 (left: 4 5 12)",
                "4 * 5 = 20 (left: 20 10 12)",
                "4 + 5 = 9 (left: 9 10 12)",
                "4 + 5 = 9 (left: 9 10 12)",
                "4 * 5 = 20 (left: 20 10 12)",
                "12 / 4 = 3 (left: 3 5 10)"
            ]
        },
        "step_2": {
            "steps": [
                "5 * 10 = 50 (left: 4 50 12)\n4 * 12 = 48 (left: 48 50)",
                "4 + 5 = 9 (left: 9 10 12)\n10 + 12 = 22 (left: 9 22)",
                "10 - 5 = 5 (left: 4 5 12)\n4 + 5 = 9 (left: 9 12)",
                "10 - 5 = 5 (left: 4 5 12)\n12 - 4 = 8 (left: 8 5)",
                "10 - 5 = 5 (left: 4 5 12)\n5 * 4 = 20 (left: 20 12)",
                "4 * 5 = 20 (left: 20 10 12)\n20 * 10 = 200 (left: 200 12)",
                "4 + 5 = 9 (left: 9 10 12)\n10 * 12 = 120 (left: 9 120)",
                "4 + 5 = 9 (left: 9 10 12)\n9 * 10 = 90 (left: 90 12)",
                "4 * 5 = 20 (left: 20 10 12)\n20 - 10 = 10 (left: 10 12)",
                "12 / 4 = 3 (left: 3 5 10)\n3 * 2 = 6 (left: 6 10)"
            ],
            "values": [
                1.001,
                0.002,
                1.002,
                21.001,
                0.003,
                1.002,
                20.002,
                0.002,
                2.001,
                1.002
            ],
            "resampled": [
                "0 <- 5",
                "1 <- 3",
                "2 <- 6",
                "3 <- 8",
                "4 <- 6",
                "5 <- 3",
                "6 <- 6",
                "7 <- 6",
                "8 <- 3",
                "9 <- 3"
            ],
            "resampled_steps": [
                "4 * 5 = 20 (left: 20 10 12)\n20 * 10 = 200 (left: 200 12)",
                "10 - 5 = 5 (left: 4 5 12)\n12 - 4 = 8 (left: 8 5)",
                "4 + 5 = 9 (left: 9 10 12)\n10 * 12 = 120 (left: 9 120)",
                "4 * 5 = 20 (left: 20 10 12)\n20 - 10 = 10 (left: 10 12)",
                "4 + 5 = 9 (left: 9 10 12)\n10 * 12 = 120 (left: 9 120)",
                "10 - 5 = 5 (left: 4 5 12)\n12 - 4 = 8 (left: 8 5)",
                "4 + 5 = 9 (left: 9 10 12)\n10 * 12 = 120 (left: 9 120)",
                "4 + 5 = 9 (left: 9 10 12)\n10 * 12 = 120 (left: 9 120)",
                "10 - 5 = 5 (left: 4 5 12)\n12 - 4 = 8 (left: 8 5)",
                "10 - 5 = 5 (left: 4 5 12)\n12 - 4 = 8 (left: 8 5)"
            ]
        },
        "step_3": {
            "steps": [
                "4 * 5 = 20 (left: 20 10 12)\n20 * 10 = 200 (left: 200 12)\n200 + 12 = 212 (left: 212)",
                "10 - 5 = 5 (left: 4 5 12)\n12 - 4 = 8 (left: 8 5)\n8 - 5 = 3 (left: 3)",
                "4 + 5 = 9 (left: 9 10 12)\n10 * 12 = 120 (left: 9 120)\n9 * 2 = 18 (left: 18 120)",
                "4 * 5 = 20 (left: 20 10 12)\n20 - 10 = 10 (left: 10 12)\n12 / 10 = 1.2 (left: 1.2)",
                "4 + 5 = 9 (left: 9 10 12)\n10 * 12 = 120 (left: 9 120)\n9 * 2 = 18 (left: 18 120)",
                "10 - 5 = 5 (left: 4 5 12)\n12 - 4 = 8 (left: 8 5)\n8 * 5 = 40 (left: 40)",
                "4 + 5 = 9 (left: 9 10 12)\n10 * 12 = 120 (left: 9 120)\n9 * 2 = 18 (left: 18 120)",
                "4 + 5 = 9 (left: 9 10 12)\n10 * 12 = 120 (left: 9 120)\n9 * 2 = 18 (left: 18 120)",
                "10 - 5 = 5 (left: 4 5 12)\n12 - 4 = 8 (left: 8 5)\n8 / 5 = 1.6 (left: 1.6)",
                "10 - 5 = 5 (left: 4 5 12)\n12 - 4 = 8 (left: 8 5)\n8 * 5 = 40 (left: 40)"
            ],
            "values": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.001,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 8",
                "1 <- 7",
                "2 <- 6",
                "3 <- 3",
                "4 <- 2",
                "5 <- 1",
                "6 <- 5",
                "7 <- 8",
                "8 <- 0",
                "9 <- 1"
            ],
            "resampled_steps": [
                "10 - 5 = 5 (left: 4 5 12)\n12 - 4 = 8 (left: 8 5)\n8 / 5 = 1.6 (left: 1.6)",
                "4 + 5 = 9 (left: 9 10 12)\n10 * 12 = 120 (left: 9 120)\n9 * 2 = 18 (left: 18 120)",
                "4 + 5 = 9 (left: 9 10 12)\n10 * 12 = 120 (left: 9 120)\n9 * 2 = 18 (left: 18 120)",
                "4 * 5 = 20 (left: 20 10 12)\n20 - 10 = 10 (left: 10 12)\n12 / 10 = 1.2 (left: 1.2)",
                "4 + 5 = 9 (left: 9 10 12)\n10 * 12 = 120 (left: 9 120)\n9 * 2 = 18 (left: 18 120)",
                "10 - 5 = 5 (left: 4 5 12)\n12 - 4 = 8 (left: 8 5)\n8 - 5 = 3 (left: 3)",
                "10 - 5 = 5 (left: 4 5 12)\n12 - 4 = 8 (left: 8 5)\n8 * 5 = 40 (left: 40)",
                "10 - 5 = 5 (left: 4 5 12)\n12 - 4 = 8 (left: 8 5)\n8 / 5 = 1.6 (left: 1.6)",
                "4 * 5 = 20 (left: 20 10 12)\n20 * 10 = 200 (left: 200 12)\n200 + 12 = 212 (left: 212)",
                "10 - 5 = 5 (left: 4 5 12)\n12 - 4 = 8 (left: 8 5)\n8 - 5 = 3 (left: 3)"
            ]
        },
        "step_4": {
            "steps": [
                "10 - 5 = 5 (left: 4 5 12)\n12 - 4 = 8 (left: 8 5)\n8 / 5 = 1.6 (left: 1.6)\nThere are no possible next steps for the input \"1.6\" as it is already a single number and not a set of numbers to perform operations on.",
                "4 + 5 = 9 (left: 9 10 12)\n10 * 12 = 120 (left: 9 120)\n9 * 2 = 18 (left: 18 120)\n18 / 120 = 0.15 (left: 0.15)",
                "4 + 5 = 9 (left: 9 10 12)\n10 * 12 = 120 (left: 9 120)\n9 * 2 = 18 (left: 18 120)\n18 + 120 = 138 (left: 138)",
                "4 * 5 = 20 (left: 20 10 12)\n20 - 10 = 10 (left: 10 12)\n12 / 10 = 1.2 (left: 1.2)\nThere are no possible next steps for the input 1.2 as it is already a single number and cannot be combined with any other numbers using the basic operations (+, -, *, /).",
                "4 + 5 = 9 (left: 9 10 12)\n10 * 12 = 120 (left: 9 120)\n9 * 2 = 18 (left: 18 120)\n18 * 120 = 2160 (left: 2160)",
                "10 - 5 = 5 (left: 4 5 12)\n12 - 4 = 8 (left: 8 5)\n8 - 5 = 3 (left: 3)\nThere are no possible next steps as there are not enough numbers to perform any operations.",
                "10 - 5 = 5 (left: 4 5 12)\n12 - 4 = 8 (left: 8 5)\n8 * 5 = 40 (left: 40)\n40 - 2 = 38",
                "10 - 5 = 5 (left: 4 5 12)\n12 - 4 = 8 (left: 8 5)\n8 / 5 = 1.6 (left: 1.6)\n1.6 * 2 = 3.2",
                "4 * 5 = 20 (left: 20 10 12)\n20 * 10 = 200 (left: 200 12)\n200 + 12 = 212 (left: 212)\n2 * 12 = 24 (left: 24)",
                "10 - 5 = 5 (left: 4 5 12)\n12 - 4 = 8 (left: 8 5)\n8 - 5 = 3 (left: 3)\nThere are no possible next steps with only one number provided. We need at least two numbers to perform any arithmetic operations."
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                60.0,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.4217279999999999
    },
    "942": {
        "input": "1 2 7 11",
        "step_1": {
            "steps": [
                "2 + 7 = 9 (left: 1 9 11)",
                "7 - 2 = 5 (left: 1 5 11)",
                "2 * 7 = 14 (left: 1 14 11)",
                "2 + 7 = 9 (left: 1 9 11)",
                "7 - 1 = 6 (left: 6 2 11)",
                "2 * 7 = 14 (left: 1 14 11)",
                "2 * 7 = 14 (left: 1 14 11)",
                "1 + 2 = 3 (left: 3 7 11)",
                "1 + 2 = 3 (left: 3 7 11)",
                "7 + 11 = 18 (left: 1 2 18)"
            ],
            "values": [
                0.002,
                1.002,
                0.003,
                1.002,
                2.001,
                0.003,
                0.003,
                0.003,
                40.001,
                20.002
            ],
            "resampled": [
                "0 <- 8",
                "1 <- 9",
                "2 <- 8",
                "3 <- 9",
                "4 <- 8",
                "5 <- 9",
                "6 <- 8",
                "7 <- 9",
                "8 <- 9",
                "9 <- 9"
            ],
            "resampled_steps": [
                "1 + 2 = 3 (left: 3 7 11)",
                "7 + 11 = 18 (left: 1 2 18)",
                "1 + 2 = 3 (left: 3 7 11)",
                "7 + 11 = 18 (left: 1 2 18)",
                "1 + 2 = 3 (left: 3 7 11)",
                "7 + 11 = 18 (left: 1 2 18)",
                "1 + 2 = 3 (left: 3 7 11)",
                "7 + 11 = 18 (left: 1 2 18)",
                "7 + 11 = 18 (left: 1 2 18)",
                "7 + 11 = 18 (left: 1 2 18)"
            ]
        },
        "step_2": {
            "steps": [
                "1 + 2 = 3 (left: 3 7 11)\n3 * 7 = 21 (left: 21 11)",
                "7 + 11 = 18 (left: 1 2 18)\n18 - 2 = 16 (left: 1 16)",
                "1 + 2 = 3 (left: 3 7 11)\n11 - 3 = 8 (left: 7 8)",
                "7 + 11 = 18 (left: 1 2 18)\n18 - 1 = 17 (left: 1 17)",
                "1 + 2 = 3 (left: 3 7 11)\n3 + 7 = 10 (left: 10 11)",
                "7 + 11 = 18 (left: 1 2 18)\n18 - 1 = 17 (left: 2 17)",
                "1 + 2 = 3 (left: 3 7 11)\n7 + 3 = 10 (left: 10 11)",
                "7 + 11 = 18 (left: 1 2 18)\n1 * 18 = 18 (left: 2 18)",
                "7 + 11 = 18 (left: 1 2 18)\n18 / 1 = 18 (left: 2 18)",
                "7 + 11 = 18 (left: 1 2 18)\n18 / 1 = 18 (left: 2 18)"
            ],
            "values": [
                0.003,
                1.002,
                1.002,
                0.003,
                0.002,
                1.002,
                1.001,
                40.001,
                2.001,
                1.002
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 7",
                "2 <- 7",
                "3 <- 7",
                "4 <- 8",
                "5 <- 7",
                "6 <- 7",
                "7 <- 8",
                "8 <- 7",
                "9 <- 7"
            ],
            "resampled_steps": [
                "1 + 2 = 3 (left: 3 7 11)\n11 - 3 = 8 (left: 7 8)",
                "7 + 11 = 18 (left: 1 2 18)\n1 * 18 = 18 (left: 2 18)",
                "7 + 11 = 18 (left: 1 2 18)\n1 * 18 = 18 (left: 2 18)",
                "7 + 11 = 18 (left: 1 2 18)\n1 * 18 = 18 (left: 2 18)",
                "7 + 11 = 18 (left: 1 2 18)\n18 / 1 = 18 (left: 2 18)",
                "7 + 11 = 18 (left: 1 2 18)\n1 * 18 = 18 (left: 2 18)",
                "7 + 11 = 18 (left: 1 2 18)\n1 * 18 = 18 (left: 2 18)",
                "7 + 11 = 18 (left: 1 2 18)\n18 / 1 = 18 (left: 2 18)",
                "7 + 11 = 18 (left: 1 2 18)\n1 * 18 = 18 (left: 2 18)",
                "7 + 11 = 18 (left: 1 2 18)\n1 * 18 = 18 (left: 2 18)"
            ]
        },
        "step_3": {
            "steps": [
                "1 + 2 = 3 (left: 3 7 11)\n11 - 3 = 8 (left: 7 8)\n7 * 8 = 56 (left: 56)",
                "7 + 11 = 18 (left: 1 2 18)\n1 * 18 = 18 (left: 2 18)\n18 - 2 = 16 (left: 16)",
                "7 + 11 = 18 (left: 1 2 18)\n1 * 18 = 18 (left: 2 18)\n2 + 18 = 20 (left: 20)",
                "7 + 11 = 18 (left: 1 2 18)\n1 * 18 = 18 (left: 2 18)\n18 / 2 = 9 (left: 9)",
                "7 + 11 = 18 (left: 1 2 18)\n18 / 1 = 18 (left: 2 18)\n2 * 18 = 36 (left: 36)",
                "7 + 11 = 18 (left: 1 2 18)\n1 * 18 = 18 (left: 2 18)\n18 - 2 = 16 (left: 16)",
                "7 + 11 = 18 (left: 1 2 18)\n1 * 18 = 18 (left: 2 18)\n2 + 18 = 20 (left: 20)",
                "7 + 11 = 18 (left: 1 2 18)\n18 / 1 = 18 (left: 2 18)\n18 / 2 = 9 (left: 9)",
                "7 + 11 = 18 (left: 1 2 18)\n1 * 18 = 18 (left: 2 18)\n18 - 2 = 16 (left: 16)",
                "7 + 11 = 18 (left: 1 2 18)\n1 * 18 = 18 (left: 2 18)\n18 / 2 = 9 (left: 9)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.0,
                0.001,
                0.001,
                0.002,
                0.001,
                0.002,
                0.002
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 1",
                "2 <- 5",
                "3 <- 2",
                "4 <- 0",
                "5 <- 9",
                "6 <- 5",
                "7 <- 4",
                "8 <- 2",
                "9 <- 5"
            ],
            "resampled_steps": [
                "7 + 11 = 18 (left: 1 2 18)\n1 * 18 = 18 (left: 2 18)\n18 / 2 = 9 (left: 9)",
                "7 + 11 = 18 (left: 1 2 18)\n1 * 18 = 18 (left: 2 18)\n18 - 2 = 16 (left: 16)",
                "7 + 11 = 18 (left: 1 2 18)\n1 * 18 = 18 (left: 2 18)\n18 - 2 = 16 (left: 16)",
                "7 + 11 = 18 (left: 1 2 18)\n1 * 18 = 18 (left: 2 18)\n2 + 18 = 20 (left: 20)",
                "1 + 2 = 3 (left: 3 7 11)\n11 - 3 = 8 (left: 7 8)\n7 * 8 = 56 (left: 56)",
                "7 + 11 = 18 (left: 1 2 18)\n1 * 18 = 18 (left: 2 18)\n18 / 2 = 9 (left: 9)",
                "7 + 11 = 18 (left: 1 2 18)\n1 * 18 = 18 (left: 2 18)\n18 - 2 = 16 (left: 16)",
                "7 + 11 = 18 (left: 1 2 18)\n18 / 1 = 18 (left: 2 18)\n2 * 18 = 36 (left: 36)",
                "7 + 11 = 18 (left: 1 2 18)\n1 * 18 = 18 (left: 2 18)\n2 + 18 = 20 (left: 20)",
                "7 + 11 = 18 (left: 1 2 18)\n1 * 18 = 18 (left: 2 18)\n18 - 2 = 16 (left: 16)"
            ]
        },
        "step_4": {
            "steps": [
                "7 + 11 = 18 (left: 1 2 18)\n1 * 18 = 18 (left: 2 18)\n18 / 2 = 9 (left: 9)\nThere are no possible next steps for the input 9 as there are no other numbers to perform operations with.",
                "7 + 11 = 18 (left: 1 2 18)\n1 * 18 = 18 (left: 2 18)\n18 - 2 = 16 (left: 16)\nThere are no possible next steps for the input 16 because it is a single number and cannot be combined with other numbers using the operations of addition, subtraction, multiplication, or division.",
                "7 + 11 = 18 (left: 1 2 18)\n1 * 18 = 18 (left: 2 18)\n18 - 2 = 16 (left: 16)\n16 - 2 = 14 (left: 2 14)",
                "7 + 11 = 18 (left: 1 2 18)\n1 * 18 = 18 (left: 2 18)\n2 + 18 = 20 (left: 20)\n20 / 2 = 10 (left: 2 10 20)",
                "1 + 2 = 3 (left: 3 7 11)\n11 - 3 = 8 (left: 7 8)\n7 * 8 = 56 (left: 56)\n56 + 14 = 70",
                "7 + 11 = 18 (left: 1 2 18)\n1 * 18 = 18 (left: 2 18)\n18 / 2 = 9 (left: 9)\n9 + 2 = 11 (left: 2 11)",
                "7 + 11 = 18 (left: 1 2 18)\n1 * 18 = 18 (left: 2 18)\n18 - 2 = 16 (left: 16)\n2. 4 * 4 = 16",
                "7 + 11 = 18 (left: 1 2 18)\n18 / 1 = 18 (left: 2 18)\n2 * 18 = 36 (left: 36)\n36 + 2 = 38",
                "7 + 11 = 18 (left: 1 2 18)\n1 * 18 = 18 (left: 2 18)\n2 + 18 = 20 (left: 20)\n20 * 2 = 40 (left: 2 20 40)",
                "7 + 11 = 18 (left: 1 2 18)\n1 * 18 = 18 (left: 2 18)\n18 - 2 = 16 (left: 16)\n16 * 2 = 32"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                1.002,
                0.003,
                0.003,
                21.001,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.454266
    },
    "943": {
        "input": "4 5 6 8",
        "step_1": {
            "steps": [
                "4 * 5 = 20 (left: 6 8 20)",
                "6 + 8 = 14 (left: 4 5 14)",
                "4 + 5 = 9 (left: 6 8 9)",
                "6 - 4 = 2 (left: 2 5 8)",
                "8 - 4 = 4 (left: 4 5 6)",
                "6 - 4 = 2 (left: 2 5 8)",
                "8 - 6 = 2 (left: 4 5 2)",
                "8 - 4 = 4 (left: 4 5 6)",
                "6 * 8 = 48 (left: 4 5 48)",
                "6 + 8 = 14 (left: 4 5 14)"
            ],
            "values": [
                1.002,
                1.001,
                22.0,
                2.001,
                3.0,
                2.0,
                3.0,
                3.0,
                2.001,
                2.001
            ],
            "resampled": [
                "0 <- 5",
                "1 <- 2",
                "2 <- 6",
                "3 <- 0",
                "4 <- 2",
                "5 <- 7",
                "6 <- 2",
                "7 <- 8",
                "8 <- 6",
                "9 <- 7"
            ],
            "resampled_steps": [
                "6 - 4 = 2 (left: 2 5 8)",
                "4 + 5 = 9 (left: 6 8 9)",
                "8 - 6 = 2 (left: 4 5 2)",
                "4 * 5 = 20 (left: 6 8 20)",
                "4 + 5 = 9 (left: 6 8 9)",
                "8 - 4 = 4 (left: 4 5 6)",
                "4 + 5 = 9 (left: 6 8 9)",
                "6 * 8 = 48 (left: 4 5 48)",
                "8 - 6 = 2 (left: 4 5 2)",
                "8 - 4 = 4 (left: 4 5 6)"
            ]
        },
        "step_2": {
            "steps": [
                "6 - 4 = 2 (left: 2 5 8)\n8 - 5 = 3 (left: 2 3)",
                "4 + 5 = 9 (left: 6 8 9)\n6 * 8 = 48 (left: 48 9)",
                "8 - 6 = 2 (left: 4 5 2)\n7 - 10 = -3 (left: -3 3)",
                "4 * 5 = 20 (left: 6 8 20)\n6 * 2 = 12 (left: 12 8 20)",
                "4 + 5 = 9 (left: 6 8 9)\n6 * 8 = 48 (left: 48 9)",
                "8 - 4 = 4 (left: 4 5 6)\n4 + 5 = 9 (left: 6 9)",
                "4 + 5 = 9 (left: 6 8 9)\n9 - 8 = 1 (left: 6 1)",
                "6 * 8 = 48 (left: 4 5 48)\n4 * 5 = 20 (left: 20 48)",
                "8 - 6 = 2 (left: 4 5 2)\n2 / 4 = 0.5 (left: 0.5 5)",
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)"
            ],
            "values": [
                1.0,
                1.001,
                60.0,
                1.002,
                0.002,
                0.003,
                41.0,
                0.002,
                3.0,
                60.0
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 6",
                "2 <- 2",
                "3 <- 6",
                "4 <- 9",
                "5 <- 9",
                "6 <- 9",
                "7 <- 9",
                "8 <- 9",
                "9 <- 9"
            ],
            "resampled_steps": [
                "4 + 5 = 9 (left: 6 8 9)\n9 - 8 = 1 (left: 6 1)",
                "4 + 5 = 9 (left: 6 8 9)\n9 - 8 = 1 (left: 6 1)",
                "8 - 6 = 2 (left: 4 5 2)\n7 - 10 = -3 (left: -3 3)",
                "4 + 5 = 9 (left: 6 8 9)\n9 - 8 = 1 (left: 6 1)",
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)",
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)",
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)",
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)",
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)",
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)"
            ]
        },
        "step_3": {
            "steps": [
                "4 + 5 = 9 (left: 6 8 9)\n9 - 8 = 1 (left: 6 1)\n6 + 1 = 7 (left: 7)",
                "4 + 5 = 9 (left: 6 8 9)\n9 - 8 = 1 (left: 6 1)\n6 - 1 = 5 (left: 5)",
                "8 - 6 = 2 (left: 4 5 2)\n7 - 10 = -3 (left: -3 3)\n-3 + 3 = 0 (left: 0)",
                "4 + 5 = 9 (left: 6 8 9)\n9 - 8 = 1 (left: 6 1)\n6 / 1 = 6 (left: 6)",
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)\n2 + 5 = 7 (left: 7)",
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)\n5 - 2 = 3 (left: 3)",
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)\n2 + 5 = 7 (left: 5 7)",
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)\n2 + 5 = 7 (left: 7)",
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)\n5 / 2 = 2.5 (left: 2.5)",
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)\n5 / 2 = 2.5 (left: 2.5 5)"
            ],
            "values": [
                0.002,
                0.002,
                0.001,
                0.002,
                0.001,
                0.003,
                0.002,
                0.0,
                0.003,
                1.0
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 9",
                "2 <- 9",
                "3 <- 9",
                "4 <- 9",
                "5 <- 9",
                "6 <- 9",
                "7 <- 9",
                "8 <- 9",
                "9 <- 9"
            ],
            "resampled_steps": [
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)\n5 / 2 = 2.5 (left: 2.5 5)",
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)\n5 / 2 = 2.5 (left: 2.5 5)",
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)\n5 / 2 = 2.5 (left: 2.5 5)",
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)\n5 / 2 = 2.5 (left: 2.5 5)",
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)\n5 / 2 = 2.5 (left: 2.5 5)",
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)\n5 / 2 = 2.5 (left: 2.5 5)",
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)\n5 / 2 = 2.5 (left: 2.5 5)",
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)\n5 / 2 = 2.5 (left: 2.5 5)",
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)\n5 / 2 = 2.5 (left: 2.5 5)",
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)\n5 / 2 = 2.5 (left: 2.5 5)"
            ]
        },
        "step_4": {
            "steps": [
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)\n5 / 2 = 2.5 (left: 2.5 5)\n5 - 2.5 = 2.5 (left: 2.5)",
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)\n5 / 2 = 2.5 (left: 2.5 5)\n2.5 * 5 = 12.5 (left: 12.5)",
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)\n5 / 2 = 2.5 (left: 2.5 5)\n5 - 2.5 = 2.5 (left: 2.5)",
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)\n5 / 2 = 2.5 (left: 2.5 5)\n5 / 2.5 = 2 (left: 2)",
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)\n5 / 2 = 2.5 (left: 2.5 5)\n2.5 + 5 = 7.5 (left: 7.5)",
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)\n5 / 2 = 2.5 (left: 2.5 5)\n2.5 * 5 = 12.5 (left: 12.5)",
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)\n5 / 2 = 2.5 (left: 2.5 5)\n5 - 2.5 = 2.5 (left: 2.5)",
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)\n5 / 2 = 2.5 (left: 2.5 5)\n9 / 3 = 3 (left: 3 27)",
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)\n5 / 2 = 2.5 (left: 2.5 5)\nPossible next steps:",
                "8 - 4 = 4 (left: 4 5 6)\n6 - 4 = 2 (left: 2 5)\n5 / 2 = 2.5 (left: 2.5 5)\n2.5 + 5 = 7.5 (left: 7.5)"
            ],
            "values": [
                0.002,
                0.002,
                0.002,
                0.001,
                0.001,
                0.001,
                0.001,
                40.0,
                20.001,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.489899
    },
    "944": {
        "input": "6 10 12 13",
        "step_1": {
            "steps": [
                "13 - 6 = 7 (left: 7 10 12)",
                "6 * 10 = 60 (left: 60 12 13)",
                "13 - 6 = 7 (left: 7 10 12)",
                "10 + 12 = 22 (left: 6 22 13)",
                "6 + 10 = 16 (left: 16 12 13)",
                "6 * 10 = 60 (left: 60 12 13)",
                "12 + 1 = 13 (left: 6 10 13)",
                "12 - 6 = 6 (left: 6 10 13)",
                "13 - 6 = 7 (left: 10 12 7)",
                "12 - 10 = 2 (left: 6 2 13)"
            ],
            "values": [
                1.002,
                1.002,
                3.0,
                1.002,
                1.002,
                0.001,
                2.001,
                1.002,
                1.002,
                3.0
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 9",
                "2 <- 9",
                "3 <- 9",
                "4 <- 3",
                "5 <- 2",
                "6 <- 4",
                "7 <- 1",
                "8 <- 2",
                "9 <- 6"
            ],
            "resampled_steps": [
                "13 - 6 = 7 (left: 7 10 12)",
                "12 - 10 = 2 (left: 6 2 13)",
                "12 - 10 = 2 (left: 6 2 13)",
                "12 - 10 = 2 (left: 6 2 13)",
                "10 + 12 = 22 (left: 6 22 13)",
                "13 - 6 = 7 (left: 7 10 12)",
                "6 + 10 = 16 (left: 16 12 13)",
                "6 * 10 = 60 (left: 60 12 13)",
                "13 - 6 = 7 (left: 7 10 12)",
                "12 + 1 = 13 (left: 6 10 13)"
            ]
        },
        "step_2": {
            "steps": [
                "13 - 6 = 7 (left: 7 10 12)\n7 * 10 = 70 (left: 70 12)",
                "12 - 10 = 2 (left: 6 2 13)\n6 + 2 = 8 (left: 8 13)",
                "12 - 10 = 2 (left: 6 2 13)\n2 * 13 = 26 (left: 6 26)",
                "12 - 10 = 2 (left: 6 2 13)\n2 * 13 = 26 (left: 6 26)",
                "10 + 12 = 22 (left: 6 22 13)\n6 * 22 = 132 (left: 132 13)",
                "13 - 6 = 7 (left: 7 10 12)\n12 - 7 = 5 (left: 7 5)",
                "6 + 10 = 16 (left: 16 12 13)\n16 + 12 = 28 (left: 28 13)",
                "6 * 10 = 60 (left: 60 12 13)\n12 / 13 = 0.923 (left: 0.923)",
                "13 - 6 = 7 (left: 7 10 12)\n10 + 12 = 22 (left: 7 22)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)"
            ],
            "values": [
                0.003,
                1.002,
                0.003,
                1.002,
                0.002,
                0.002,
                0.003,
                0.001,
                0.003,
                20.002
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 9",
                "2 <- 9",
                "3 <- 9",
                "4 <- 9",
                "5 <- 9",
                "6 <- 9",
                "7 <- 9",
                "8 <- 9",
                "9 <- 9"
            ],
            "resampled_steps": [
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)"
            ]
        },
        "step_3": {
            "steps": [
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)\n16 - 13 = 3 (left: 3)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)\n16 / 13 = 1.23 (left: 1.23)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)\n13 + 16 = 29 (left: 16 29)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)\n16 + 13 = 29 (left: 29)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)\n16 * 13 = 208 (left: 208)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)\n16 - 13 = 3 (left: 3) ",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)\n16 - 13 = 3 (left: 3 13)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)\n16 - 13 = 3 (left: 3)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)\n16 * 13 = 208 (left: 208)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)\n16 - 13 = 3 (left: 3)"
            ],
            "values": [
                0.003,
                0.002,
                0.003,
                0.002,
                0.002,
                0.002,
                2.001,
                0.001,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 6",
                "2 <- 6",
                "3 <- 6",
                "4 <- 6",
                "5 <- 6",
                "6 <- 6",
                "7 <- 6",
                "8 <- 6",
                "9 <- 6"
            ],
            "resampled_steps": [
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)\n16 - 13 = 3 (left: 3 13)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)\n16 - 13 = 3 (left: 3 13)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)\n16 - 13 = 3 (left: 3 13)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)\n16 - 13 = 3 (left: 3 13)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)\n16 - 13 = 3 (left: 3 13)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)\n16 - 13 = 3 (left: 3 13)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)\n16 - 13 = 3 (left: 3 13)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)\n16 - 13 = 3 (left: 3 13)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)\n16 - 13 = 3 (left: 3 13)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)\n16 - 13 = 3 (left: 3 13)"
            ]
        },
        "step_4": {
            "steps": [
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)\n16 - 13 = 3 (left: 3 13)\n13 / 3 = 4.33 (left: 4.33)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)\n16 - 13 = 3 (left: 3 13)\n13 + 3 = 16 (left: 16)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)\n16 - 13 = 3 (left: 3 13)\n13 / 3 = 4.33 (left: 4.33 13)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)\n16 - 13 = 3 (left: 3 13)\n3 + 13 = 16 (left: 16)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)\n16 - 13 = 3 (left: 3 13)\n3 * 13 = 39 (left: 39)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)\n16 - 13 = 3 (left: 3 13)\n13 - 3 = 10 (left: 10)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)\n16 - 13 = 3 (left: 3 13)\n13 - 3 = 10 (left: 10)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)\n16 - 13 = 3 (left: 3 13)\n13 / 3 = 4.33 (left: 4.33)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)\n16 - 13 = 3 (left: 3 13)\n3 + 13 = 16 (left: 16)",
                "12 + 1 = 13 (left: 6 10 13)\n6 + 10 = 16 (left: 16 13)\n16 - 13 = 3 (left: 3 13)\n3 + 13 = 16 (left: 16)"
            ],
            "values": [
                0.003,
                0.001,
                2.001,
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                0.002,
                0.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.5241470000000001
    },
    "945": {
        "input": "1 3 9 9",
        "step_1": {
            "steps": [
                "9 - 1 = 8 (left: 8 3 9)",
                "9 - 3 = 6 (left: 1 6 9)",
                "9 - 3 = 6 (left: 1 6 9)",
                "3 + 9 = 12 (left: 1 12 9)",
                "9 / 3 = 3 (left: 1 3 9)",
                "9 - 3 = 6 (left: 6 3 9)",
                "1 * 3 = 3 (left: 3 9 9)",
                "1 * 3 = 3 (left: 3 9 9)",
                "9 - 1 = 8 (left: 8 3 9)",
                "9 / 3 = 3 (left: 1 3 9)"
            ],
            "values": [
                41.0,
                2.0,
                2.001,
                1.002,
                0.003,
                2.001,
                21.001,
                21.001,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 8",
                "2 <- 0",
                "3 <- 0",
                "4 <- 0",
                "5 <- 0",
                "6 <- 6",
                "7 <- 7",
                "8 <- 8",
                "9 <- 7"
            ],
            "resampled_steps": [
                "1 * 3 = 3 (left: 3 9 9)",
                "9 - 1 = 8 (left: 8 3 9)",
                "9 - 1 = 8 (left: 8 3 9)",
                "9 - 1 = 8 (left: 8 3 9)",
                "9 - 1 = 8 (left: 8 3 9)",
                "9 - 1 = 8 (left: 8 3 9)",
                "1 * 3 = 3 (left: 3 9 9)",
                "1 * 3 = 3 (left: 3 9 9)",
                "9 - 1 = 8 (left: 8 3 9)",
                "1 * 3 = 3 (left: 3 9 9)"
            ]
        },
        "step_2": {
            "steps": [
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)",
                "9 - 1 = 8 (left: 8 3 9)\n3 + 9 = 12 (left: 8 12)",
                "9 - 1 = 8 (left: 8 3 9)\n3 - 8 = -5 (left: -5 9)",
                "9 - 1 = 8 (left: 8 3 9)\n9 - 3 = 6 (left: 8 6)",
                "9 - 1 = 8 (left: 8 3 9)\n9 / 3 = 3 (left: 8 3)",
                "9 - 1 = 8 (left: 8 3 9)\n8 * 3 = 24 (left: 24 9)",
                "1 * 3 = 3 (left: 3 9 9)\n9 / 3 = 3 (left: 3 9)",
                "1 * 3 = 3 (left: 3 9 9)\n9 - 3 = 6 (left: 6 9)",
                "9 - 1 = 8 (left: 8 3 9)\n3 * 9 = 27 (left: 8 27)",
                "1 * 3 = 3 (left: 3 9 9)\n9 - 3 = 6 (left: 6 9)"
            ],
            "values": [
                21.001,
                0.001,
                0.003,
                0.003,
                41.0,
                20.002,
                0.003,
                0.003,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 5",
                "2 <- 5",
                "3 <- 4",
                "4 <- 4",
                "5 <- 0",
                "6 <- 4",
                "7 <- 4",
                "8 <- 0",
                "9 <- 5"
            ],
            "resampled_steps": [
                "9 - 1 = 8 (left: 8 3 9)\n9 / 3 = 3 (left: 8 3)",
                "9 - 1 = 8 (left: 8 3 9)\n8 * 3 = 24 (left: 24 9)",
                "9 - 1 = 8 (left: 8 3 9)\n8 * 3 = 24 (left: 24 9)",
                "9 - 1 = 8 (left: 8 3 9)\n9 / 3 = 3 (left: 8 3)",
                "9 - 1 = 8 (left: 8 3 9)\n9 / 3 = 3 (left: 8 3)",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)",
                "9 - 1 = 8 (left: 8 3 9)\n9 / 3 = 3 (left: 8 3)",
                "9 - 1 = 8 (left: 8 3 9)\n9 / 3 = 3 (left: 8 3)",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)",
                "9 - 1 = 8 (left: 8 3 9)\n8 * 3 = 24 (left: 24 9)"
            ]
        },
        "step_3": {
            "steps": [
                "9 - 1 = 8 (left: 8 3 9)\n9 / 3 = 3 (left: 8 3)\n8 + 3 = 11 (left: 11)",
                "9 - 1 = 8 (left: 8 3 9)\n8 * 3 = 24 (left: 24 9)\n24 / 9 = 2.67 (left: 9 2.67)",
                "9 - 1 = 8 (left: 8 3 9)\n8 * 3 = 24 (left: 24 9)\n24 - 9 = 15 (left: 9 15)",
                "9 - 1 = 8 (left: 8 3 9)\n9 / 3 = 3 (left: 8 3)\n8 / 3 = 2.66666666667 (left: 2.66666666667)",
                "9 - 1 = 8 (left: 8 3 9)\n9 / 3 = 3 (left: 8 3)\n8 / 3 = 2.67 (left: 2.67)",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)\n9 * 3 = 27 (left: 27)",
                "9 - 1 = 8 (left: 8 3 9)\n9 / 3 = 3 (left: 8 3)\n8 - 3 = 5 (left: 5)",
                "9 - 1 = 8 (left: 8 3 9)\n9 / 3 = 3 (left: 8 3)\n8 + 3 = 11 (left: 11)",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)\n27 - 9 = 18 (left: 18)",
                "9 - 1 = 8 (left: 8 3 9)\n8 * 3 = 24 (left: 24 9)\n24 * 9 = 216 (left: 9 216)"
            ],
            "values": [
                0.003,
                40.0,
                60.0,
                0.002,
                0.001,
                0.001,
                0.001,
                0.003,
                20.001,
                21.001
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 2",
                "2 <- 9",
                "3 <- 8",
                "4 <- 2",
                "5 <- 2",
                "6 <- 2",
                "7 <- 1",
                "8 <- 2",
                "9 <- 2"
            ],
            "resampled_steps": [
                "9 - 1 = 8 (left: 8 3 9)\n8 * 3 = 24 (left: 24 9)\n24 * 9 = 216 (left: 9 216)",
                "9 - 1 = 8 (left: 8 3 9)\n8 * 3 = 24 (left: 24 9)\n24 - 9 = 15 (left: 9 15)",
                "9 - 1 = 8 (left: 8 3 9)\n8 * 3 = 24 (left: 24 9)\n24 * 9 = 216 (left: 9 216)",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)\n27 - 9 = 18 (left: 18)",
                "9 - 1 = 8 (left: 8 3 9)\n8 * 3 = 24 (left: 24 9)\n24 - 9 = 15 (left: 9 15)",
                "9 - 1 = 8 (left: 8 3 9)\n8 * 3 = 24 (left: 24 9)\n24 - 9 = 15 (left: 9 15)",
                "9 - 1 = 8 (left: 8 3 9)\n8 * 3 = 24 (left: 24 9)\n24 - 9 = 15 (left: 9 15)",
                "9 - 1 = 8 (left: 8 3 9)\n8 * 3 = 24 (left: 24 9)\n24 / 9 = 2.67 (left: 9 2.67)",
                "9 - 1 = 8 (left: 8 3 9)\n8 * 3 = 24 (left: 24 9)\n24 - 9 = 15 (left: 9 15)",
                "9 - 1 = 8 (left: 8 3 9)\n8 * 3 = 24 (left: 24 9)\n24 - 9 = 15 (left: 9 15)"
            ]
        },
        "step_4": {
            "steps": [
                "9 - 1 = 8 (left: 8 3 9)\n8 * 3 = 24 (left: 24 9)\n24 * 9 = 216 (left: 9 216)\n216 / 9 = 24 (left: 24)",
                "9 - 1 = 8 (left: 8 3 9)\n8 * 3 = 24 (left: 24 9)\n24 - 9 = 15 (left: 9 15)\n15 - 9 = 6 (left: 6 15)",
                "9 - 1 = 8 (left: 8 3 9)\n8 * 3 = 24 (left: 24 9)\n24 * 9 = 216 (left: 9 216)\n216 / 9 = 24 (left: 24)",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)\n27 - 9 = 18 (left: 18)\nThere are no possible next steps for the input 18.",
                "9 - 1 = 8 (left: 8 3 9)\n8 * 3 = 24 (left: 24 9)\n24 - 9 = 15 (left: 9 15)\n9 * 15 = 135 (left: 135)",
                "9 - 1 = 8 (left: 8 3 9)\n8 * 3 = 24 (left: 24 9)\n24 - 9 = 15 (left: 9 15)\n15 / 9 = 1.67 (left: 9 1.67)",
                "9 - 1 = 8 (left: 8 3 9)\n8 * 3 = 24 (left: 24 9)\n24 - 9 = 15 (left: 9 15)\n15 / 9 = 1.67 (left: 1.67 15)",
                "9 - 1 = 8 (left: 8 3 9)\n8 * 3 = 24 (left: 24 9)\n24 / 9 = 2.67 (left: 9 2.67)\n9 - 2.67 = 6.33 (left: 2.67 6.33)",
                "9 - 1 = 8 (left: 8 3 9)\n8 * 3 = 24 (left: 24 9)\n24 - 9 = 15 (left: 9 15)\n9 * 15 = 135 (left: 15 135)",
                "9 - 1 = 8 (left: 8 3 9)\n8 * 3 = 24 (left: 24 9)\n24 - 9 = 15 (left: 9 15)\n15 - 9 = 6 (left: 6)"
            ],
            "values": [
                40.0,
                0.003,
                60.0,
                0.003,
                0.003,
                3.0,
                1.002,
                3.0,
                0.003,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.5576029999999998
    },
    "946": {
        "input": "1 4 4 11",
        "step_1": {
            "steps": [
                "4 + 1 = 5 (left: 4 5 11)",
                "11 - 4 = 7 (left: 4 7 4)",
                "1 * 4 = 4 (left: 4 4 11)",
                "11 - 4 = 7 (left: 1 4 7)",
                "4 - 1 = 3 (left: 3 4 11)",
                "11 - 4 = 7 (left: 1 4 7)",
                "11 / 1 = 11 (left: 4 4 11)",
                "1 + 4 = 5 (left: 4 5 11)",
                "4 / 1 = 4 (left: 4 4 11)",
                "1 + 4 = 5 (left: 4 5 11)"
            ],
            "values": [
                1.002,
                22.0,
                2.001,
                1.001,
                22.0,
                2.001,
                2.0,
                1.002,
                2.001,
                0.002
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 4",
                "2 <- 1",
                "3 <- 4",
                "4 <- 4",
                "5 <- 0",
                "6 <- 4",
                "7 <- 4",
                "8 <- 4",
                "9 <- 2"
            ],
            "resampled_steps": [
                "11 - 4 = 7 (left: 4 7 4)",
                "4 - 1 = 3 (left: 3 4 11)",
                "11 - 4 = 7 (left: 4 7 4)",
                "4 - 1 = 3 (left: 3 4 11)",
                "4 - 1 = 3 (left: 3 4 11)",
                "4 + 1 = 5 (left: 4 5 11)",
                "4 - 1 = 3 (left: 3 4 11)",
                "4 - 1 = 3 (left: 3 4 11)",
                "4 - 1 = 3 (left: 3 4 11)",
                "1 * 4 = 4 (left: 4 4 11)"
            ]
        },
        "step_2": {
            "steps": [
                "11 - 4 = 7 (left: 4 7 4)\n7 / 4 = 1.75 (left: 1.75 4)",
                "4 - 1 = 3 (left: 3 4 11)\n11 - 4 = 7 (left: 3 7)",
                "11 - 4 = 7 (left: 4 7 4)\n4 + 7 = 11 (left: 4 11 4)",
                "4 - 1 = 3 (left: 3 4 11)\n11 - 3 = 8 (left: 4 8)",
                "4 - 1 = 3 (left: 3 4 11)\n4 / 3 = 1.33 (left: 1.33 11)",
                "4 + 1 = 5 (left: 4 5 11)\n5 + 11 = 16 (left: 4 16)",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)",
                "4 - 1 = 3 (left: 3 4 11)\n4 * 3 = 12 (left: 12 11)",
                "4 - 1 = 3 (left: 3 4 11)\n11 - 4 = 7 (left: 3 7)",
                "1 * 4 = 4 (left: 4 4 11)\n11 - 4 = 7 (left: 4 7)"
            ],
            "values": [
                2.001,
                0.0,
                2.0,
                21.001,
                2.001,
                20.002,
                0.002,
                0.003,
                1.0,
                2.001
            ],
            "resampled": [
                "0 <- 5",
                "1 <- 3",
                "2 <- 9",
                "3 <- 4",
                "4 <- 5",
                "5 <- 3",
                "6 <- 0",
                "7 <- 5",
                "8 <- 5",
                "9 <- 3"
            ],
            "resampled_steps": [
                "4 + 1 = 5 (left: 4 5 11)\n5 + 11 = 16 (left: 4 16)",
                "4 - 1 = 3 (left: 3 4 11)\n11 - 3 = 8 (left: 4 8)",
                "1 * 4 = 4 (left: 4 4 11)\n11 - 4 = 7 (left: 4 7)",
                "4 - 1 = 3 (left: 3 4 11)\n4 / 3 = 1.33 (left: 1.33 11)",
                "4 + 1 = 5 (left: 4 5 11)\n5 + 11 = 16 (left: 4 16)",
                "4 - 1 = 3 (left: 3 4 11)\n11 - 3 = 8 (left: 4 8)",
                "11 - 4 = 7 (left: 4 7 4)\n7 / 4 = 1.75 (left: 1.75 4)",
                "4 + 1 = 5 (left: 4 5 11)\n5 + 11 = 16 (left: 4 16)",
                "4 + 1 = 5 (left: 4 5 11)\n5 + 11 = 16 (left: 4 16)",
                "4 - 1 = 3 (left: 3 4 11)\n11 - 3 = 8 (left: 4 8)"
            ]
        },
        "step_3": {
            "steps": [
                "4 + 1 = 5 (left: 4 5 11)\n5 + 11 = 16 (left: 4 16)\n4 * 4 = 16 (left: 16)",
                "4 - 1 = 3 (left: 3 4 11)\n11 - 3 = 8 (left: 4 8)\n4 + 8 = 12 (left: 8 12)",
                "1 * 4 = 4 (left: 4 4 11)\n11 - 4 = 7 (left: 4 7)\n4 * 7 = 28 (left: 28)",
                "4 - 1 = 3 (left: 3 4 11)\n4 / 3 = 1.33 (left: 1.33 11)\n11 / 1.33 = 8.27",
                "4 + 1 = 5 (left: 4 5 11)\n5 + 11 = 16 (left: 4 16)\n16 / 4 = 4 (left: 4)",
                "4 - 1 = 3 (left: 3 4 11)\n11 - 3 = 8 (left: 4 8)\n8 - 4 = 4 (left: 4 8)",
                "11 - 4 = 7 (left: 4 7 4)\n7 / 4 = 1.75 (left: 1.75 4)\n4 - 1.75 = 2.25 (left: 2.25)",
                "4 + 1 = 5 (left: 4 5 11)\n5 + 11 = 16 (left: 4 16)\n4 * 16 = 64 (left: 64)",
                "4 + 1 = 5 (left: 4 5 11)\n5 + 11 = 16 (left: 4 16)\n4 * 4 = 16 (left: 16)",
                "4 - 1 = 3 (left: 3 4 11)\n11 - 3 = 8 (left: 4 8)\n8 / 4 = 2 (left: 2 8)"
            ],
            "values": [
                0.002,
                1.002,
                0.001,
                0.003,
                0.003,
                2.001,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 5",
                "2 <- 1",
                "3 <- 5",
                "4 <- 5",
                "5 <- 5",
                "6 <- 1",
                "7 <- 1",
                "8 <- 5",
                "9 <- 5"
            ],
            "resampled_steps": [
                "4 - 1 = 3 (left: 3 4 11)\n11 - 3 = 8 (left: 4 8)\n4 + 8 = 12 (left: 8 12)",
                "4 - 1 = 3 (left: 3 4 11)\n11 - 3 = 8 (left: 4 8)\n8 - 4 = 4 (left: 4 8)",
                "4 - 1 = 3 (left: 3 4 11)\n11 - 3 = 8 (left: 4 8)\n4 + 8 = 12 (left: 8 12)",
                "4 - 1 = 3 (left: 3 4 11)\n11 - 3 = 8 (left: 4 8)\n8 - 4 = 4 (left: 4 8)",
                "4 - 1 = 3 (left: 3 4 11)\n11 - 3 = 8 (left: 4 8)\n8 - 4 = 4 (left: 4 8)",
                "4 - 1 = 3 (left: 3 4 11)\n11 - 3 = 8 (left: 4 8)\n8 - 4 = 4 (left: 4 8)",
                "4 - 1 = 3 (left: 3 4 11)\n11 - 3 = 8 (left: 4 8)\n4 + 8 = 12 (left: 8 12)",
                "4 - 1 = 3 (left: 3 4 11)\n11 - 3 = 8 (left: 4 8)\n4 + 8 = 12 (left: 8 12)",
                "4 - 1 = 3 (left: 3 4 11)\n11 - 3 = 8 (left: 4 8)\n8 - 4 = 4 (left: 4 8)",
                "4 - 1 = 3 (left: 3 4 11)\n11 - 3 = 8 (left: 4 8)\n8 - 4 = 4 (left: 4 8)"
            ]
        },
        "step_4": {
            "steps": [
                "4 - 1 = 3 (left: 3 4 11)\n11 - 3 = 8 (left: 4 8)\n4 + 8 = 12 (left: 8 12)\n8 * 12 = 96 (left: 96)",
                "4 - 1 = 3 (left: 3 4 11)\n11 - 3 = 8 (left: 4 8)\n8 - 4 = 4 (left: 4 8)\n4 * 8 = 32 (left: 8 32)",
                "4 - 1 = 3 (left: 3 4 11)\n11 - 3 = 8 (left: 4 8)\n4 + 8 = 12 (left: 8 12)\n8 + 12 = 20 (left: 20)",
                "4 - 1 = 3 (left: 3 4 11)\n11 - 3 = 8 (left: 4 8)\n8 - 4 = 4 (left: 4 8)\n4 * 8 = 32 (left: 8 32)",
                "4 - 1 = 3 (left: 3 4 11)\n11 - 3 = 8 (left: 4 8)\n8 - 4 = 4 (left: 4 8)\n4 + 8 = 12 (left: 8 12)",
                "4 - 1 = 3 (left: 3 4 11)\n11 - 3 = 8 (left: 4 8)\n8 - 4 = 4 (left: 4 8)\n4 * 8 = 32 (left: 8 32)",
                "4 - 1 = 3 (left: 3 4 11)\n11 - 3 = 8 (left: 4 8)\n4 + 8 = 12 (left: 8 12)\n12 - 8 = 4 (left: 4)",
                "4 - 1 = 3 (left: 3 4 11)\n11 - 3 = 8 (left: 4 8)\n4 + 8 = 12 (left: 8 12)\n12 / 8 = 1.5 (left: 1.5)",
                "4 - 1 = 3 (left: 3 4 11)\n11 - 3 = 8 (left: 4 8)\n8 - 4 = 4 (left: 4 8)\n4 * 8 = 32 (left: 8 32)",
                "4 - 1 = 3 (left: 3 4 11)\n11 - 3 = 8 (left: 4 8)\n8 - 4 = 4 (left: 4 8)\n4 + 8 = 12 (left: 8 12)"
            ],
            "values": [
                0.002,
                1.002,
                0.002,
                20.002,
                0.003,
                21.001,
                0.001,
                0.003,
                0.003,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.591348
    },
    "947": {
        "input": "2 3 9 10",
        "step_1": {
            "steps": [
                "2 + 3 = 5 (left: 5 9 10)",
                "9 - 3 = 6 (left: 2 6 10)",
                "9 + 3 = 12 (left: 2 12 10)",
                "2 + 3 = 5 (left: 5 9 10)",
                "2 * 9 = 18 (left: 3 18 10)",
                "2 + 3 = 5 (left: 5 9 10)",
                "2 * 3 = 6 (left: 6 9 10)",
                "2 * 3 = 6 (left: 6 9 10)",
                "9 - 3 = 6 (left: 2 6 10)",
                "3 + 9 = 12 (left: 2 12 10)"
            ],
            "values": [
                40.001,
                0.003,
                20.002,
                3.0,
                21.001,
                3.0,
                22.0,
                3.0,
                0.003,
                20.002
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 2",
                "2 <- 0",
                "3 <- 6",
                "4 <- 9",
                "5 <- 4",
                "6 <- 4",
                "7 <- 7",
                "8 <- 4",
                "9 <- 9"
            ],
            "resampled_steps": [
                "2 + 3 = 5 (left: 5 9 10)",
                "9 + 3 = 12 (left: 2 12 10)",
                "2 + 3 = 5 (left: 5 9 10)",
                "2 * 3 = 6 (left: 6 9 10)",
                "3 + 9 = 12 (left: 2 12 10)",
                "2 * 9 = 18 (left: 3 18 10)",
                "2 * 9 = 18 (left: 3 18 10)",
                "2 * 3 = 6 (left: 6 9 10)",
                "2 * 9 = 18 (left: 3 18 10)",
                "3 + 9 = 12 (left: 2 12 10)"
            ]
        },
        "step_2": {
            "steps": [
                "2 + 3 = 5 (left: 5 9 10)\n10 - 5 = 5 (left: 9 5)",
                "9 + 3 = 12 (left: 2 12 10)\n2 + 12 = 14 (left: 10 14)",
                "2 + 3 = 5 (left: 5 9 10)\n9 + 10 = 19 (left: 5 19)",
                "2 * 3 = 6 (left: 6 9 10)\n6 + 9 = 15 (left: 15 10)",
                "3 + 9 = 12 (left: 2 12 10)\n2 * 12 = 24 (left: 10 24)",
                "2 * 9 = 18 (left: 3 18 10)\n10 + 6 = 16 (left: 6 18 16)",
                "2 * 9 = 18 (left: 3 18 10)\n18 / 3 = 6 (left: 6 18 10)",
                "2 * 3 = 6 (left: 6 9 10)\n6 / 9 = 0.6667 (left: 0.6667 10)",
                "2 * 9 = 18 (left: 3 18 10)\n10 + 8 = 18 (left: 3 18 18)",
                "3 + 9 = 12 (left: 2 12 10)\n12 / 2 = 6 (left: 6 10)"
            ],
            "values": [
                0.003,
                40.0,
                41.0,
                0.002,
                0.002,
                2.001,
                2.001,
                3.0,
                1.002,
                1.002
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 2",
                "2 <- 8",
                "3 <- 1",
                "4 <- 2",
                "5 <- 1",
                "6 <- 2",
                "7 <- 2",
                "8 <- 1",
                "9 <- 1"
            ],
            "resampled_steps": [
                "9 + 3 = 12 (left: 2 12 10)\n2 + 12 = 14 (left: 10 14)",
                "2 + 3 = 5 (left: 5 9 10)\n9 + 10 = 19 (left: 5 19)",
                "2 * 9 = 18 (left: 3 18 10)\n10 + 8 = 18 (left: 3 18 18)",
                "9 + 3 = 12 (left: 2 12 10)\n2 + 12 = 14 (left: 10 14)",
                "2 + 3 = 5 (left: 5 9 10)\n9 + 10 = 19 (left: 5 19)",
                "9 + 3 = 12 (left: 2 12 10)\n2 + 12 = 14 (left: 10 14)",
                "2 + 3 = 5 (left: 5 9 10)\n9 + 10 = 19 (left: 5 19)",
                "2 + 3 = 5 (left: 5 9 10)\n9 + 10 = 19 (left: 5 19)",
                "9 + 3 = 12 (left: 2 12 10)\n2 + 12 = 14 (left: 10 14)",
                "9 + 3 = 12 (left: 2 12 10)\n2 + 12 = 14 (left: 10 14)"
            ]
        },
        "step_3": {
            "steps": [
                "9 + 3 = 12 (left: 2 12 10)\n2 + 12 = 14 (left: 10 14)\n14 - 10 = 4 (left: 4 14)",
                "2 + 3 = 5 (left: 5 9 10)\n9 + 10 = 19 (left: 5 19)\n5 + 19 = 24 (left: 24)",
                "2 * 9 = 18 (left: 3 18 10)\n10 + 8 = 18 (left: 3 18 18)\n18 / 3 = 6 (left: 3 6 18)",
                "9 + 3 = 12 (left: 2 12 10)\n2 + 12 = 14 (left: 10 14)\n10 * 14 = 140 (left: 140)",
                "2 + 3 = 5 (left: 5 9 10)\n9 + 10 = 19 (left: 5 19)\n19 - 5 = 14 (left: 5 14)",
                "9 + 3 = 12 (left: 2 12 10)\n2 + 12 = 14 (left: 10 14)\n14 - 10 = 4 (left: 4 14)",
                "2 + 3 = 5 (left: 5 9 10)\n9 + 10 = 19 (left: 5 19)\n19 - 5 = 14 (left: 5 14)",
                "2 + 3 = 5 (left: 5 9 10)\n9 + 10 = 19 (left: 5 19)\n5 * 19 = 95 (left: 19 95)",
                "9 + 3 = 12 (left: 2 12 10)\n2 + 12 = 14 (left: 10 14)\n14 / 10 = 1.4 (left: 1.4 14)",
                "9 + 3 = 12 (left: 2 12 10)\n2 + 12 = 14 (left: 10 14)\n14 / 10 = 1.4 (left: 1.4)"
            ],
            "values": [
                2.001,
                60.0,
                20.001,
                0.003,
                1.002,
                0.001,
                0.003,
                0.003,
                1.001,
                0.002
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 1",
                "3 <- 2",
                "4 <- 1",
                "5 <- 2",
                "6 <- 2",
                "7 <- 1",
                "8 <- 2",
                "9 <- 1"
            ],
            "resampled_steps": [
                "2 + 3 = 5 (left: 5 9 10)\n9 + 10 = 19 (left: 5 19)\n5 + 19 = 24 (left: 24)",
                "2 + 3 = 5 (left: 5 9 10)\n9 + 10 = 19 (left: 5 19)\n5 + 19 = 24 (left: 24)",
                "2 + 3 = 5 (left: 5 9 10)\n9 + 10 = 19 (left: 5 19)\n5 + 19 = 24 (left: 24)",
                "2 * 9 = 18 (left: 3 18 10)\n10 + 8 = 18 (left: 3 18 18)\n18 / 3 = 6 (left: 3 6 18)",
                "2 + 3 = 5 (left: 5 9 10)\n9 + 10 = 19 (left: 5 19)\n5 + 19 = 24 (left: 24)",
                "2 * 9 = 18 (left: 3 18 10)\n10 + 8 = 18 (left: 3 18 18)\n18 / 3 = 6 (left: 3 6 18)",
                "2 * 9 = 18 (left: 3 18 10)\n10 + 8 = 18 (left: 3 18 18)\n18 / 3 = 6 (left: 3 6 18)",
                "2 + 3 = 5 (left: 5 9 10)\n9 + 10 = 19 (left: 5 19)\n5 + 19 = 24 (left: 24)",
                "2 * 9 = 18 (left: 3 18 10)\n10 + 8 = 18 (left: 3 18 18)\n18 / 3 = 6 (left: 3 6 18)",
                "2 + 3 = 5 (left: 5 9 10)\n9 + 10 = 19 (left: 5 19)\n5 + 19 = 24 (left: 24)"
            ]
        },
        "step_4": {
            "steps": [
                "2 + 3 = 5 (left: 5 9 10)\n9 + 10 = 19 (left: 5 19)\n5 + 19 = 24 (left: 24)\nAnswer: ((2 + 3) + 9) + 10 = 24",
                "2 + 3 = 5 (left: 5 9 10)\n9 + 10 = 19 (left: 5 19)\n5 + 19 = 24 (left: 24)\nAnswer: ((2 + 3) + 9) + 10 = 24",
                "2 + 3 = 5 (left: 5 9 10)\n9 + 10 = 19 (left: 5 19)\n5 + 19 = 24 (left: 24)\nAnswer: (2 + 3) + (9 + 10) = 24",
                "2 * 9 = 18 (left: 3 18 10)\n10 + 8 = 18 (left: 3 18 18)\n18 / 3 = 6 (left: 3 6 18)\n18 - 6 = 12 (left: 3 12)",
                "2 + 3 = 5 (left: 5 9 10)\n9 + 10 = 19 (left: 5 19)\n5 + 19 = 24 (left: 24)\nAnswer: ((2 + 3) + 9) + 10 = 24",
                "2 * 9 = 18 (left: 3 18 10)\n10 + 8 = 18 (left: 3 18 18)\n18 / 3 = 6 (left: 3 6 18)\n18 / 3 = 6 (left: 6 18)",
                "2 * 9 = 18 (left: 3 18 10)\n10 + 8 = 18 (left: 3 18 18)\n18 / 3 = 6 (left: 3 6 18)\n18 / 3 = 6 (left: 6 18)",
                "2 + 3 = 5 (left: 5 9 10)\n9 + 10 = 19 (left: 5 19)\n5 + 19 = 24 (left: 24)\nAnswer: (2 + 3) + (9 + 10) = 24",
                "2 * 9 = 18 (left: 3 18 10)\n10 + 8 = 18 (left: 3 18 18)\n18 / 3 = 6 (left: 3 6 18)\n6 + 3 = 9 (left: 9 18)",
                "2 + 3 = 5 (left: 5 9 10)\n9 + 10 = 19 (left: 5 19)\n5 + 19 = 24 (left: 24)\nAnswer: ((2 + 3) + 9) + 10 = 24"
            ],
            "values": [
                60.0,
                60.0,
                20.002,
                20.002,
                40.001,
                2.001,
                21.001,
                0.003,
                0.003,
                60.0
            ]
        },
        "results": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ],
        "cost": 1.627799
    },
    "948": {
        "input": "1 2 3 13",
        "step_1": {
            "steps": [
                "13 - 1 = 12 (left: 2 3 12)",
                "13 - 3 = 10 (left: 1 2 10)",
                "13 - 3 = 10 (left: 1 2 10)",
                "3 * 2 = 6 (left: 1 6 13)",
                "13 - 2 = 11 (left: 1 3 11)",
                "3 * 13 = 39 (left: 1 2 39)",
                "1 + 2 = 3 (left: 3 3 13)",
                "2 + 3 = 5 (left: 1 5 13)",
                "3 * 13 = 39 (left: 1 2 39)",
                "1 * 3 = 3 (left: 3 3 13)"
            ],
            "values": [
                0.003,
                2.0,
                2.001,
                2.001,
                1.002,
                0.003,
                21.001,
                2.001,
                0.003,
                2.0
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 7",
                "2 <- 6",
                "3 <- 6",
                "4 <- 6",
                "5 <- 2",
                "6 <- 1",
                "7 <- 6",
                "8 <- 7",
                "9 <- 6"
            ],
            "resampled_steps": [
                "1 + 2 = 3 (left: 3 3 13)",
                "2 + 3 = 5 (left: 1 5 13)",
                "1 + 2 = 3 (left: 3 3 13)",
                "1 + 2 = 3 (left: 3 3 13)",
                "1 + 2 = 3 (left: 3 3 13)",
                "13 - 3 = 10 (left: 1 2 10)",
                "13 - 3 = 10 (left: 1 2 10)",
                "1 + 2 = 3 (left: 3 3 13)",
                "2 + 3 = 5 (left: 1 5 13)",
                "1 + 2 = 3 (left: 3 3 13)"
            ]
        },
        "step_2": {
            "steps": [
                "1 + 2 = 3 (left: 3 3 13)\n13 - 3 = 10 (left: 3 10)",
                "2 + 3 = 5 (left: 1 5 13)\n5 * 13 = 65 (left: 1 65)",
                "1 + 2 = 3 (left: 3 3 13)\n13 / 3 = 4.33 (left: 3 4.33)",
                "1 + 2 = 3 (left: 3 3 13)\n3 / 3 = 1 (left: 1 13)",
                "1 + 2 = 3 (left: 3 3 13)\n3 - 3 = 0 (left: 0 13)",
                "13 - 3 = 10 (left: 1 2 10)\n1 + 2 = 3 (left: 3 10)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)",
                "1 + 2 = 3 (left: 3 3 13)\n3 - 3 = 0 (left: 0 13)",
                "2 + 3 = 5 (left: 1 5 13)\n5 * 13 = 65 (left: 1 65)",
                "1 + 2 = 3 (left: 3 3 13)\n13 - 3 = 10 (left: 3 10)"
            ],
            "values": [
                1.002,
                1.001,
                3.0,
                0.002,
                0.003,
                0.003,
                2.0,
                2.001,
                0.002,
                2.001
            ],
            "resampled": [
                "0 <- 7",
                "1 <- 6",
                "2 <- 7",
                "3 <- 9",
                "4 <- 9",
                "5 <- 2",
                "6 <- 9",
                "7 <- 2",
                "8 <- 7",
                "9 <- 2"
            ],
            "resampled_steps": [
                "1 + 2 = 3 (left: 3 3 13)\n3 - 3 = 0 (left: 0 13)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)",
                "1 + 2 = 3 (left: 3 3 13)\n3 - 3 = 0 (left: 0 13)",
                "1 + 2 = 3 (left: 3 3 13)\n13 - 3 = 10 (left: 3 10)",
                "1 + 2 = 3 (left: 3 3 13)\n13 - 3 = 10 (left: 3 10)",
                "1 + 2 = 3 (left: 3 3 13)\n13 / 3 = 4.33 (left: 3 4.33)",
                "1 + 2 = 3 (left: 3 3 13)\n13 - 3 = 10 (left: 3 10)",
                "1 + 2 = 3 (left: 3 3 13)\n13 / 3 = 4.33 (left: 3 4.33)",
                "1 + 2 = 3 (left: 3 3 13)\n3 - 3 = 0 (left: 0 13)",
                "1 + 2 = 3 (left: 3 3 13)\n13 / 3 = 4.33 (left: 3 4.33)"
            ]
        },
        "step_3": {
            "steps": [
                "1 + 2 = 3 (left: 3 3 13)\n3 - 3 = 0 (left: 0 13)\n13 - 0 = 13 (left: 13)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n10 / 2 = 5 (left: 2 5)",
                "1 + 2 = 3 (left: 3 3 13)\n3 - 3 = 0 (left: 0 13)\n13 - 0 = 13 (left: 13)",
                "1 + 2 = 3 (left: 3 3 13)\n13 - 3 = 10 (left: 3 10)\n3 * 10 = 30 (left: 10 30)",
                "1 + 2 = 3 (left: 3 3 13)\n13 - 3 = 10 (left: 3 10)\n10 - 3 = 7 (left: 3 7)",
                "1 + 2 = 3 (left: 3 3 13)\n13 / 3 = 4.33 (left: 3 4.33)\n3 - 4.33 = -1.33 (left: -1.33)",
                "1 + 2 = 3 (left: 3 3 13)\n13 - 3 = 10 (left: 3 10)\n3 - 10 = -7 (left: -7 10)",
                "1 + 2 = 3 (left: 3 3 13)\n13 / 3 = 4.33 (left: 3 4.33)\n3 + 4.33 = 7.33 (left: 7.33)",
                "1 + 2 = 3 (left: 3 3 13)\n3 - 3 = 0 (left: 0 13)\n0 / 13 = 0 (left: 0)",
                "1 + 2 = 3 (left: 3 3 13)\n13 / 3 = 4.33 (left: 3 4.33)\n3 * 4.33 = 12.99 (left: 12.99)"
            ],
            "values": [
                0.002,
                1.0,
                0.003,
                0.003,
                0.0,
                0.003,
                2.001,
                0.002,
                0.002,
                0.002
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 6",
                "2 <- 6",
                "3 <- 1",
                "4 <- 1",
                "5 <- 6",
                "6 <- 6",
                "7 <- 6",
                "8 <- 6",
                "9 <- 7"
            ],
            "resampled_steps": [
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n10 / 2 = 5 (left: 2 5)",
                "1 + 2 = 3 (left: 3 3 13)\n13 - 3 = 10 (left: 3 10)\n3 - 10 = -7 (left: -7 10)",
                "1 + 2 = 3 (left: 3 3 13)\n13 - 3 = 10 (left: 3 10)\n3 - 10 = -7 (left: -7 10)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n10 / 2 = 5 (left: 2 5)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n10 / 2 = 5 (left: 2 5)",
                "1 + 2 = 3 (left: 3 3 13)\n13 - 3 = 10 (left: 3 10)\n3 - 10 = -7 (left: -7 10)",
                "1 + 2 = 3 (left: 3 3 13)\n13 - 3 = 10 (left: 3 10)\n3 - 10 = -7 (left: -7 10)",
                "1 + 2 = 3 (left: 3 3 13)\n13 - 3 = 10 (left: 3 10)\n3 - 10 = -7 (left: -7 10)",
                "1 + 2 = 3 (left: 3 3 13)\n13 - 3 = 10 (left: 3 10)\n3 - 10 = -7 (left: -7 10)",
                "1 + 2 = 3 (left: 3 3 13)\n13 / 3 = 4.33 (left: 3 4.33)\n3 + 4.33 = 7.33 (left: 7.33)"
            ]
        },
        "step_4": {
            "steps": [
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n10 / 2 = 5 (left: 2 5)\n2 + 5 = 7 (left: 5 7)",
                "1 + 2 = 3 (left: 3 3 13)\n13 - 3 = 10 (left: 3 10)\n3 - 10 = -7 (left: -7 10)\n-7 / 10 = -0.7 (left: -0.7)",
                "1 + 2 = 3 (left: 3 3 13)\n13 - 3 = 10 (left: 3 10)\n3 - 10 = -7 (left: -7 10)\n-7 / 10 = -0.7 (left: -0.7 10)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n10 / 2 = 5 (left: 2 5)\n2 * 5 = 10 (left: 10)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n10 / 2 = 5 (left: 2 5)\n2 + 5 = 7 (left: 7)",
                "1 + 2 = 3 (left: 3 3 13)\n13 - 3 = 10 (left: 3 10)\n3 - 10 = -7 (left: -7 10)\n-7 / 10 = -0.7 (left: -0.7)",
                "1 + 2 = 3 (left: 3 3 13)\n13 - 3 = 10 (left: 3 10)\n3 - 10 = -7 (left: -7 10)\n-7 / 10 = -0.7 (left: -0.7)",
                "1 + 2 = 3 (left: 3 3 13)\n13 - 3 = 10 (left: 3 10)\n3 - 10 = -7 (left: -7 10)\n-7 / 10 = -0.7 (left: -0.7)",
                "1 + 2 = 3 (left: 3 3 13)\n13 - 3 = 10 (left: 3 10)\n3 - 10 = -7 (left: -7 10)\n-7 / 10 = -0.7 (left: -0.7)",
                "1 + 2 = 3 (left: 3 3 13)\n13 / 3 = 4.33 (left: 3 4.33)\n3 + 4.33 = 7.33 (left: 7.33)\n7.33 + 2 = 9.33"
            ],
            "values": [
                0.0,
                0.003,
                1.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.661
    },
    "949": {
        "input": "1 6 6 6",
        "step_1": {
            "steps": [
                "6 / 1 = 6 (left: 6 6 6)",
                "6 - 1 = 5 (left: 5 6 6)",
                "6 - 1 = 5 (left: 5 6 6)",
                "1 + 6 = 7 (left: 6 6 7)",
                "6 / 1 = 6 (left: 6 6 6)",
                "6 / 1 = 6 (left: 6 6 6)",
                "6 - 1 = 5 (left: 5 6 6)",
                "6 - 1 = 5 (left: 5 6 6)",
                "6 + 1 = 7 (left: 6 6 7)",
                "6 / 1 = 6 (left: 6 6 6)"
            ],
            "values": [
                2.001,
                21.0,
                2.0,
                3.0,
                21.001,
                2.001,
                3.0,
                22.0,
                3.0,
                2.001
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 1",
                "3 <- 8",
                "4 <- 1",
                "5 <- 4",
                "6 <- 4",
                "7 <- 1",
                "8 <- 8",
                "9 <- 9"
            ],
            "resampled_steps": [
                "6 / 1 = 6 (left: 6 6 6)",
                "6 / 1 = 6 (left: 6 6 6)",
                "6 - 1 = 5 (left: 5 6 6)",
                "6 + 1 = 7 (left: 6 6 7)",
                "6 - 1 = 5 (left: 5 6 6)",
                "6 / 1 = 6 (left: 6 6 6)",
                "6 / 1 = 6 (left: 6 6 6)",
                "6 - 1 = 5 (left: 5 6 6)",
                "6 + 1 = 7 (left: 6 6 7)",
                "6 / 1 = 6 (left: 6 6 6)"
            ]
        },
        "step_2": {
            "steps": [
                "6 / 1 = 6 (left: 6 6 6)\n6 + 6 = 12 (left: 6 12 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)",
                "6 - 1 = 5 (left: 5 6 6)\n5 * 6 = 30 (left: 6 30)",
                "6 + 1 = 7 (left: 6 6 7)\n6 + 6 = 12 (left: 7 12)",
                "6 - 1 = 5 (left: 5 6 6)\n6 / 5 = 1.2 (left: 1.2 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6)",
                "6 - 1 = 5 (left: 5 6 6)\n5 + 6 = 11 (left: 6 11)",
                "6 + 1 = 7 (left: 6 6 7)\n6 * 7 = 42 (left: 6 42)",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6)"
            ],
            "values": [
                41.0,
                21.0,
                1.002,
                0.003,
                2.0,
                41.0,
                40.0,
                1.002,
                0.002,
                60.0
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 9",
                "3 <- 9",
                "4 <- 1",
                "5 <- 5",
                "6 <- 9",
                "7 <- 9",
                "8 <- 1",
                "9 <- 9"
            ],
            "resampled_steps": [
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6)"
            ]
        },
        "step_3": {
            "steps": [
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n0 * 6 = 0 (left: 0)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n0 + 6 = 6 (left: 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n0 * 6 = 0 (left: 0)",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6 6)\n1 + 6 = 7 (left: 6 7)",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n0 * 6 = 0 (left: 0)",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7)"
            ],
            "values": [
                0.0,
                0.002,
                0.002,
                0.0,
                0.002,
                0.003,
                0.003,
                0.002,
                0.0,
                0.003
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 9",
                "2 <- 2",
                "3 <- 2",
                "4 <- 6",
                "5 <- 7",
                "6 <- 2",
                "7 <- 6",
                "8 <- 5",
                "9 <- 5"
            ],
            "resampled_steps": [
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6 6)\n1 + 6 = 7 (left: 6 7)",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6 6)\n1 + 6 = 7 (left: 6 7)"
            ]
        },
        "step_4": {
            "steps": [
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7)\n7 / 8 = 0.875 (left: 0.875 8)",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7)\nThere are no possible next steps as there are no other numbers to combine or operate on.",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7)\n7 - 2 = 5 (left: 2 5 7)",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7)\n7 + 8 = 15 (left: 8 15)",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6)\n1 * 6 = 6 (left: 6)\nThere are no possible next steps as there are no other numbers to perform operations with.",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6)\n1 * 6 = 6 (left: 6)\nThere are no possible next steps as there are no other numbers given to perform operations with.",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7)\nThere are no possible next steps as there are no other numbers to operate with the input 7.",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6)\n1 * 6 = 6 (left: 6)\n6 + 6 = 12",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6 6)\n1 + 6 = 7 (left: 6 7)\n6 * 7 = 42 (left: 42)",
                "6 / 1 = 6 (left: 6 6 6)\n6 / 6 = 1 (left: 1 6 6)\n1 + 6 = 7 (left: 6 7)\n6 + 7 = 13 (left: 13)"
            ],
            "values": [
                2.0,
                0.003,
                3.0,
                1.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.001,
                0.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.692358
    }
}