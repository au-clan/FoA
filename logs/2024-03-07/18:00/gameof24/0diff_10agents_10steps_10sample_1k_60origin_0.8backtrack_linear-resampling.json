{
    "0": {
        "puzzle": "1 1 4 6",
        "Step 0": {
            "steps": [
                "6 - 4 = 2 (left: 1 2 6)",
                "1 * 1 = 1 (left: 1 4 6)",
                "4 + 1 = 5 (left: 1 5 6)",
                "4 + 1 = 5 (left: 1 5 6)",
                "6 - 4 = 2 (left: 1 2 6)",
                "6 - 1 = 5 (left: 1 4 5)",
                "4 + 1 = 5 (left: 1 5 6)",
                "6 - 4 = 2 (left: 1 2 6)",
                "4 + 1 = 5 (left: 5 4 ",
                "6 - 4 = 2 (left: 1 2 6)"
            ],
            "Evaluation": [
                1.002,
                41.0,
                0.002,
                41.0,
                0.003,
                21.0,
                22.0,
                1.002,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.6",
                "2 <- 0.3",
                "3 <- 0.1",
                "4 <- 0.8",
                "5 <- 0.1",
                "6 <- INIT",
                "7 <- 0.6",
                "8 <- 0.5",
                "9 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "6 - 1 = 5 (left: 1 4 5) || 4 / 1 = 4 (left: 4 5)",
                "4 + 1 = 5 (left: 1 5 6) || 5 * 1 = 5 (left: 5 6)",
                "4 + 1 = 5 (left: 1 5 6) || 5 * 1 = 5 (left: 5 6)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "4 + 1 = 5 (left: 5 4  || 4 * 5 = 20 (left: 20)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 4 = 1.5 (",
                "6 - 4 = 2 (left: 1 2 6)",
                "4 + 1 = 5 (left: 1 5 6) || 6 - 1 = 5 (left: 5 6)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 1 = 4 (left: 4 5)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 4 5)"
            ],
            "Evaluation": [
                3.0,
                0.003,
                1.001,
                2.0,
                0.003,
                0.003,
                1.002,
                1.002,
                2.001,
                22.0
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 0.3",
                "2 <- 0.5",
                "3 <- 0.6",
                "4 <- 0.8",
                "5 <- 0.1",
                "6 <- 0.8",
                "7 <- 1.9",
                "8 <- 1.9",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 4 5) || 4 * 5 = 20 (left: 20)",
                "4 + 1 = 5 (left: 1 5 6) || 5 * 1 = 5 (left: 5 6)",
                "6 - 1 = 5 (left: 1 4 5) || 1 * 4 = 4 (left: 4 5)",
                "4 + 1 = 5 (left: 1 5 6) || 1 * 5 = 5 (left: 5 6)",
                "4 + 1 = 5 (left: 5 4  || 4 * 5 = 20 (left: 20)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 1 = ",
                "4 + 1 = 5 (left: 5 4  || 4 + 5 = 9 (left: 9)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 4 5) || 4 * 5 = 20 (left: 20)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 4 5) || Input: 3 9 27",
                "6 - 1 = 5 (left: 1 4 5)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                1.002,
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.1",
                "2 <- 0.8",
                "3 <- INIT",
                "4 <- 1.9",
                "5 <- 0.8",
                "6 <- 0.6",
                "7 <- 0.1",
                "8 <- 0.8",
                "9 <- 0.8"
            ]
        },
        "Step 3": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "4 + 1 = 5 (left: 5 4  || 5 / 4 = 1.25 (left: 1.25)",
                "6 - 4 = 2 (left: 1 2 6)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 4 5) || 4 / 5 = 0.8 (left: 0.8)",
                "4 + 1 = 5 (left: 5 4  || 10 + 3 = 13 (left: 13)",
                "4 + 1 = 5 (left: 1 5 6) || 1 * 5 = 5 (left: 5 6)",
                "1 * 1 = 1 (left: 1 4 6) || 4 - 1 = 3 (left: 3 6)",
                "4 + 1 = 5 (left: 5 4  || 4 + 5 = 9 (left: 9)",
                "4 + 1 = 5 (left: 5 4  || 4 * 5 = 20 (left: 20)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                0.003,
                2.001,
                0.001,
                0.003,
                0.002,
                3.0,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 3.3",
                "2 <- 0.3",
                "3 <- INIT",
                "4 <- 1.9",
                "5 <- 0.5",
                "6 <- 0.8",
                "7 <- 0.6",
                "8 <- 1.9",
                "9 <- 1.9"
            ]
        },
        "Step 4": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 6) || 5 * 1 = 5 (left: 5 6)",
                "6 - 4 = 2 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3)",
                "4 + 1 = 5 (left: 1 5 6) || 5 * 1 = 5 (left: 5 6)",
                "6 - 4 = 2 (left: 1 2 6)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 4 5) || 5 / 4 = 1.25 (left: 1.25)",
                "6 - 1 = 5 (left: 1 4 5) || Possible next steps:",
                "4 + 1 = 5 (left: 5 4  || Input: 10 2",
                "4 + 1 = 5 (left: 1 5 6) || 1 - 5 = -4 (left: -4 6)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 4 5) || 5 - 4 = 1 (left: 1)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 4 5) || 10 + 3 = 13 (left: 3 13)"
            ],
            "Evaluation": [
                1.001,
                21.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                21.001,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 1.8",
                "2 <- 0.6",
                "3 <- 0.8",
                "4 <- 0.3",
                "5 <- 4.1",
                "6 <- 0.8",
                "7 <- 0.1",
                "8 <- 4.1",
                "9 <- 4.1"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 1 = 4 (left: 4 5) || 5 / 4 = 1.25 (left: 1.25)",
                "4 + 1 = 5 (left: 1 5 6) || 5 * 1 = 5 (left: 5 6)",
                "4 + 1 = 5 (left: 5 4  || 4 + 5 = 9 (left: 9)",
                "4 + 1 = 5 (left: 1 5 6) || 5 * 1 = 5 (left: 5 6)",
                "6 - 4 = 2 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "4 + 1 = 5 (left: 5 4  || 4 + 5 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)",
                "6 - 4 = 2 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "6 - 4 = 2 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)"
            ],
            "Evaluation": [
                40.0,
                0.003,
                0.002,
                0.0,
                0.003,
                20.001,
                0.001,
                40.0,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 4.7",
                "2 <- 4.1",
                "3 <- 3.1",
                "4 <- 0.8",
                "5 <- 0.3",
                "6 <- 5.7",
                "7 <- 0.8",
                "8 <- 5.5",
                "9 <- 1.9"
            ]
        },
        "Step 6": {
            "steps": [
                "4 + 1 = 5 (left: 5 4  || 5 / 4 = 1.25 (left: 1.25)",
                "4 + 1 = 5 (left: 1 5 6) || 1 - 5 = -4 (left: -4 6) || 5 - 2 = 3 (left: 10 ",
                "6 - 4 = 2 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 1 * 3 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5) || 1 * 1.5 = 1.5 (left: 1.5)",
                "4 + 1 = 5 (left: 5 4  || 4 * 5 = 20 (left: 20)",
                "4 + 1 = 5 (left: 1 5 6) || 5 / 1 = 5 (left:",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "4 + 1 = 5 (left: 5 4  || 4 + 5 = 9 (left: 9)",
                "6 - 4 = 2 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3) || 3 + 14 = 17 (left: 8 17)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 4 5) || 10 + 2 = 12 (left: 12)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.001,
                0.002,
                0.0,
                0.001,
                0.0,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 0.8",
                "2 <- 5.7",
                "3 <- 0.1",
                "4 <- 5.5",
                "5 <- 5.7",
                "6 <- 4.7",
                "7 <- 5.5",
                "8 <- 0.8",
                "9 <- 0.8"
            ]
        },
        "Step 7": {
            "steps": [
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 4 5) || 4 - 5 = -1 (left: -1)",
                "4 + 1 = 5 (left: 5 4  || 5 / 4 = 1.25 (left: 1.25)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 5 - 3 = 2 (left: 2 7)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5)",
                "6 - 4 = 2 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3) || 3 + 2 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "4 + 1 = 5 (left: 1 5 6) || 1 - 5 = -4 (left: -4 6) || -4 * 6 = -24 (left: -24)",
                "6 - 4 = 2 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3) || There are no possible next steps with the input of 3.",
                "4 + 1 = 5 (left: 5 4  || 5 * 4 = 20 (left: 20)",
                "4 + 1 = 5 (left: 5 4  || 4 - 5 = -1 (left: -1)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.002,
                21.0,
                0.001,
                0.003,
                0.003,
                0.003,
                0.0,
                1.002
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 5.5",
                "2 <- 5.0",
                "3 <- 7.3",
                "4 <- 5.7",
                "5 <- 0.1",
                "6 <- 3.1",
                "7 <- 5.0",
                "8 <- 5.0",
                "9 <- 4.7"
            ]
        },
        "Step 8": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 / 6 = 0.6666666666666666 (left: 0.6666666666666666)",
                "6 - 4 = 2 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3) || 3 - 8 = -5 (left: -5)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || 5 - 4 = 1 (left: 1)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "1 * 1 = 1 (left: 1 4 6) || Input: 2 3 5",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5) || 1.5 / 1 = 1.5 (left: 1.5)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || Input: 3 9",
                "4 + 1 = 5 (left: 1 5 6) || 1 - 5 = -4 (left: -4 6) || -4 / 6 = -0.6667 (left: -0.6667)"
            ],
            "Evaluation": [
                0.002,
                0.0,
                0.001,
                0.001,
                0.003,
                0.0,
                60.0,
                0.003,
                1.0,
                60.0
            ],
            "Resampling": [
                "0 <- 8.6",
                "1 <- 8.6",
                "2 <- 8.9",
                "3 <- 1.9",
                "4 <- 7.3",
                "5 <- 7.3",
                "6 <- 8.6",
                "7 <- 8.9",
                "8 <- 7.3",
                "9 <- 7.3"
            ]
        },
        "Step 9": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 1) * (4 * 6) = 24",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 1) * (4 * 6) = 24",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 3 + 9 = 12 (left: 12",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 4 5) || 5 - 4 = 1 (left: 1)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || 4 / 5 = 0.8 (left: 0.8)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || 10 + 3 = 13 (left: 13)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 1 * (1 * 4 * 6) = 24",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || 4 * 5 = 20 (left: 20)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || 10 + 3 = 13 (left: 13)"
            ]
        },
        "Input": "1 1 4 6",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1": {
        "puzzle": "1 1 11 11",
        "Step 0": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 11 11)",
                "1 - 1 = 0 (left: 0 11 11)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 - 1 = 10 (left: 1 10 11)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 - 1 = 10 (left: 1 10 11)",
                "11 / 1 = 11 (left: 1 11 ",
                "11 + 1 = 12 (left: 1 11 12)"
            ],
            "Evaluation": [
                20.002,
                1.002,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.001,
                21.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.9",
                "3 <- 0.9",
                "4 <- 0.9",
                "5 <- 0.9",
                "6 <- 0.0",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 * 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || Input: 3 7 11",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 11 = 1 (left: 1 1)",
                "11 / 1 = 11 (left: 1 11 ",
                "11 + 1 = 12 (left: 1 11 12)",
                "11 - 1 = 10 (left: 1 11 10)"
            ],
            "Evaluation": [
                20.002,
                0.002,
                20.002,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 1.2",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 0.9",
                "6 <- 0.9",
                "7 <- 0.0",
                "8 <- 0.9",
                "9 <- 0.0"
            ]
        },
        "Step 2": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 - 1 = 10 (left: 1 11 10)",
                "11 + 1 = 12 (left: 1 11 12)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 12 / 1 = 12 (left: 1 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 * 1 = 11 (left: 11 12)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                1.002,
                20.002,
                0.003,
                0.003,
                0.003,
                0.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.2",
                "2 <- 2.3",
                "3 <- 1.0",
                "4 <- 1.2",
                "5 <- 1.0",
                "6 <- 1.0",
                "7 <- INIT",
                "8 <- 1.0",
                "9 <- 0.9"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 1 12)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 10 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 10 11 11)",
                "11 / 1 = 11 (left: 1 11 ",
                "1 * 1 = 1 (left: 1 11 11) || 11 / 1 = 11 (left: 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 1 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                21.0,
                1.002,
                0.002,
                60.0,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.5",
                "1 <- 2.3",
                "2 <- 3.5",
                "3 <- 0.9",
                "4 <- 3.5",
                "5 <- 3.5",
                "6 <- 3.2",
                "7 <- 3.5",
                "8 <- 2.3",
                "9 <- 3.5"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 * 1 = 11 (left: 11 12)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 - 10 =",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 1 12) || 12 / 1 = 12 (left: 12)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.001,
                0.002,
                0.003,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.2",
                "2 <- 0.0",
                "3 <- 3.5",
                "4 <- 1.2",
                "5 <- 3.5",
                "6 <- 3.5",
                "7 <- 1.0",
                "8 <- 0.9",
                "9 <- 3.5"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 10 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 10 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                60.0,
                0.003,
                0.003,
                0.003,
                0.001,
                2.001,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 3.5",
                "2 <- 3.2",
                "3 <- 1.0",
                "4 <- 5.2",
                "5 <- 3.3",
                "6 <- 5.2",
                "7 <- 3.2",
                "8 <- 0.9",
                "9 <- 1.0"
            ]
        },
        "Step 6": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 11 11) || 11 / 11 = 1 (left: 1 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 10 11 11) || 11 * 10 = 110 (left: 11 11 110)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 1 12) || 1 * 12 = 12 (left: 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "1 * 1 = 1 (left: 1 11 11) || 3 + 6 = 9 (left: 6 9)"
            ],
            "Evaluation": [
                40.001,
                0.003,
                0.002,
                60.0,
                40.001,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 6.3",
                "2 <- 6.0",
                "3 <- 3.2",
                "4 <- 5.2",
                "5 <- 6.0",
                "6 <- 6.3",
                "7 <- 3.2",
                "8 <- 5.2",
                "9 <- 3.5"
            ]
        },
        "Step 7": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "1 * 1 = 1 (left: 1 11 11) || 11 / 11 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 - 12 =",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 1 12) || 1 * 12 = 12 (left: 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left:",
                "1 * 1 = 1 (left: 1 11 11) || 11 / 11 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 1 12) || 12 - 1 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                0.003,
                0.003,
                40.001,
                0.002,
                0.001,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 0.9",
                "2 <- 6.3",
                "3 <- 6.4",
                "4 <- 5.2",
                "5 <- 6.3",
                "6 <- 1.0",
                "7 <- 5.2",
                "8 <- 6.4",
                "9 <- 7.5"
            ]
        },
        "Step 8": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 12 = 144 (left: 24 144)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 11 12)",
                "1 * 1 = 1 (left: 1 11 11) || 11 / 11 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "1 * 1 = 1 (left: 1 11 11) || 11 / 11 = 1 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 11 11) || 11 / 1 = 11 (left: 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: || 12 + 24 = 36 (left: 36)"
            ],
            "Evaluation": [
                40.0,
                0.002,
                0.002,
                40.0,
                0.003,
                0.001,
                0.003,
                0.002,
                60.0,
                1.0
            ],
            "Resampling": [
                "0 <- 8.8",
                "1 <- 8.8",
                "2 <- 6.3",
                "3 <- 7.5",
                "4 <- 6.0",
                "5 <- 8.8",
                "6 <- 3.5",
                "7 <- 6.0",
                "8 <- 7.5",
                "9 <- 6.3"
            ]
        },
        "Step 9": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 9 / 3 = 3 (left: 3 27)",
                "1 * 1 = 1 (left: 1 11 11) || 11 / 11 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: || Possible next steps:",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 - 12 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 3 + 12 = 15 (left: 3 15)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 - 12 = 12 (left: 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: || 24 * 12 = 288 (left: 288)",
                "1 * 1 = 1 (left: 1 11 11) || 11 / 11 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ]
        },
        "Input": "1 1 11 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "2": {
        "puzzle": "1 1 3 8",
        "Step 0": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8)",
                "1 * 1 = 1 (left: 1 3 8)",
                "8 - 3 = 5 (left: 1 3 5)",
                "3 + 1 = 4 (left: 1 4 8)",
                "8 - 3 = 5 (left: 1 1 5)",
                "8 - 1 = 7 (left: 1 3 7)",
                "8 - 3 = 5 (left: 1 1 5)",
                "8 - 3 = 5 (left: 1 5 8)",
                "8 - 1 = 7 (left: 1 3 ",
                "3 * 1 = 3 (left: 1 3 8)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                1.002,
                0.003,
                2.001,
                2.001,
                3.0,
                1.002,
                0.0,
                60.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.9",
                "4 <- 0.1",
                "5 <- 0.9",
                "6 <- 0.1",
                "7 <- 0.1",
                "8 <- 0.9",
                "9 <- 0.9"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8)",
                "3 * 1 = 3 (left: 3 1 8)",
                "3 - 1 = 2 (left: 1 2 8)",
                "3 * 1 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "1 * 1 = 1 (left: 1 3 8) || 3 - 1 = 2 (left: 2 8)",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 3 = 2.67 (",
                "1 * 1 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5)",
                "1 * 1 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5)",
                "3 * 1 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "3 * 1 = 3 (left: 1 3 8) || 1 + 3 = 4 (left: 4 8)"
            ],
            "Evaluation": [
                22.0,
                60.0,
                22.0,
                0.0,
                0.003,
                0.003,
                40.0,
                60.0,
                1.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.1",
                "2 <- 0.0",
                "3 <- 1.1",
                "4 <- INIT",
                "5 <- 0.0",
                "6 <- 0.1",
                "7 <- 1.7",
                "8 <- 0.9",
                "9 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "3 - 1 = 2 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "3 * 1 = 3 (left: 3 1 8) || 8 / 3 = 2 (left: 2 3)",
                "3 * 1 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 3 1 8) || 1 + 8 = 9 (left: 3 9)",
                "8 - 3 = 5 (left: 1 1 5)",
                "3 * 1 = 3 (left: 1 3 8) || ",
                "1 * 1 = 1 (left: 1 3 8) || 8 - 1 = 7 (left: 3 7)",
                "1 * 1 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 3 = 2.67 (left: 1 2.67)",
                "1 * 1 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                60.0,
                0.003,
                1.002,
                0.003,
                0.0,
                0.002,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.1",
                "2 <- 2.2",
                "3 <- 1.6",
                "4 <- INIT",
                "5 <- 0.9",
                "6 <- 1.6",
                "7 <- 0.1",
                "8 <- 2.9",
                "9 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 3 1 8) || 8 / 3 = 2 (left: 2 8)",
                "3 * 1 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "3 * 1 = 3 (left: 1 3 8)",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8)",
                "1 * 1 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 3 8) || 3 + 8 = 11 (left: 1 11)",
                "1 * 1 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 - 1 = 7 (left: 1 3 7)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                60.0,
                0.003,
                40.001,
                60.0,
                0.002,
                21.0,
                60.0,
                3.0
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 3.7",
                "2 <- 1.7",
                "3 <- 3.4",
                "4 <- 3.2",
                "5 <- 3.5",
                "6 <- 3.5",
                "7 <- 3.0",
                "8 <- 0.0",
                "9 <- 3.5"
            ]
        },
        "Step 4": {
            "steps": [
                "3 - 1 = 2 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "1 * 1 = 1 (left: 1 3 8) || 3 + 8 = 11 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 1 + 5 = 6",
                "3 * 1 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 3 7)",
                "3 * 1 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 4 + 10 = 14 (left: 14)",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || Input: 4 5 10",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 1 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                1.001,
                0.001,
                0.003,
                0.002,
                0.0,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 3.8",
                "2 <- 4.9",
                "3 <- 1.6",
                "4 <- 3.0",
                "5 <- 1.2",
                "6 <- 3.2",
                "7 <- 2.9",
                "8 <- 1.7",
                "9 <- 3.2"
            ]
        },
        "Step 5": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 1 * (1 * 3) * 8 = 24",
                "1 * 1 = 1 (left: 1 3 8) || 3 + 8 = 11 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 - 1 = 2 (left: 1 2 8) || 8 - 1 = 7 (left:",
                "3 * 1 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "1 * 1 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "3 * 1 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (1 * 3) = 24"
            ]
        },
        "Input": "1 1 3 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            }
        ]
    },
    "3": {
        "puzzle": "1 1 1 8",
        "Step 0": {
            "steps": [
                "8 - 1 = 7 (left: 1 1 7)",
                "1 * 1 = 1 (left: 1 1 8)",
                "1 * 1 = 1 (left: 1 1 8)",
                "1 * 1 = 1 (left: 1 1 8)",
                "8 - 1 = 7 (left: 1 1 7)",
                "8 / 1 = 8 (left: 1 1 8)",
                "8 / 1 = 8 (left: 1 1 8)",
                "8 - 1 = 7 (left: 1 1 7)",
                "1 / 1 = 1 (left: 1 1 ",
                "1 / 1 = 1 (left: 1 1 8)"
            ],
            "Evaluation": [
                2.001,
                1.001,
                1.002,
                1.001,
                2.001,
                22.0,
                1.002,
                3.0,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 0.5",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- 0.4",
                "9 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 8)",
                "1 + 1 = 2 (left: 2 1 8)",
                "8 / 1 = 8 (left: 1 1 8)",
                "1 / 1 = 1 (left: 1 1 8)",
                "8 - 1 = 7 (left: 1 1 7)",
                "8 / 1 = 8 (left: 1 1 8) || Input: 5 5 10",
                "8 - 1 = 7 (left: 1 1 7)",
                "8 - 1 = 7 (left: 1 1 ",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6)",
                "8 / 1 = 8 (left: 1 1 8) || 1 - 1 = 0 (left: 0 8)"
            ],
            "Evaluation": [
                2.0,
                41.0,
                0.002,
                1.002,
                1.002,
                0.003,
                1.002,
                0.003,
                40.0,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.8",
                "3 <- INIT",
                "4 <- 1.8",
                "5 <- INIT",
                "6 <- 1.1",
                "7 <- INIT",
                "8 <- 0.1",
                "9 <- 1.8"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 8)",
                "8 - 1 = 7 (left: 1 1 7)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 * 1 = 6 (left: 6)",
                "1 + 1 = 2 (left: 2 1 8)",
                "1 + 1 = 2 (left: 2 1 8) || 8 - 1 = 7 (left: 2 7)",
                "1 * 8 = 8 (left: 1 1 ",
                "1 * 1 = 1 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ],
            "Evaluation": [
                3.0,
                2.001,
                0.003,
                2.001,
                0.001,
                60.0,
                0.001,
                2.001,
                20.0,
                0.002
            ],
            "Resampling": [
                "0 <- 2.5",
                "1 <- 2.5",
                "2 <- 2.8",
                "3 <- 1.8",
                "4 <- 1.8",
                "5 <- 0.5",
                "6 <- 1.1",
                "7 <- 2.8",
                "8 <- 1.8",
                "9 <- 0.5"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 8) || 1 * 8 = 8 (left: 2 8)",
                "1 + 1 = 2 (left: 2 1 8) || Possible",
                "1 * 1 = 1 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7)",
                "1 + 1 = 2 (left: 2 1 8) || 1 * 8 = 8 (left: 8)",
                "1 * 1 = 1 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 7 * 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 / 1 = 8 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.0,
                0.003,
                0.001,
                21.0,
                0.003,
                0.0,
                0.003,
                40.0
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- INIT",
                "2 <- 2.1",
                "3 <- 2.5",
                "4 <- 1.1",
                "5 <- 2.5",
                "6 <- 1.8",
                "7 <- 2.1",
                "8 <- INIT",
                "9 <- 2.8"
            ]
        },
        "Step 4": {
            "steps": [
                "8 / 1 = 8 (left: 1 1 8) || 1 * 1 = 1 (left: 1 8)",
                "8 / 1 = 8 (left: 1 1 8)",
                "8 - 1 = 7 (left: 1 1 7) || 1 + 7 = 8 (left: 1 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 / 1 = 2 (left: 2 8)",
                "1 + 1 = 2 (left: 2 1 8) || Input: 3 6 9",
                "1 + 1 = 2 (left: 2 1 8) || Input: 4 5 7",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6)",
                "1 * 1 = 1 (left: 1 1 8)",
                "1 * 1 = 1 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)"
            ],
            "Evaluation": [
                21.001,
                22.0,
                40.0,
                0.003,
                0.003,
                0.003,
                0.001,
                60.0,
                20.001,
                0.001
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 4.8",
                "2 <- 3.9",
                "3 <- 4.1",
                "4 <- 4.8",
                "5 <- 4.7",
                "6 <- 4.7",
                "7 <- 4.2",
                "8 <- 1.8",
                "9 <- 4.7"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 8) || 1 * 1 = 1 (left: 1 8)",
                "1 * 1 = 1 (left: 1 1 8) || 1 - 1 = 0 (left: 0 8)",
                "8 / 1 = 8 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7)",
                "1 * 1 = 1 (left: 1 1 8) || 1 - 1 = 0 (left: 0 8)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 1 + 7 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ],
            "Evaluation": [
                60.0,
                20.0,
                0.002,
                60.0,
                21.0,
                0.003,
                0.002,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 4.8",
                "2 <- 5.1",
                "3 <- 4.0",
                "4 <- 4.1",
                "5 <- 3.9",
                "6 <- 1.8",
                "7 <- 5.0",
                "8 <- 5.3",
                "9 <- 5.3"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 8) || 1 * 1 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 * 1 = 1 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8)",
                "1 * 1 = 1 (left: 1 1 8) || 1 - 1 = 0 (left: 0 8) || 0 * 8 = 0 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8) || 1 * 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9)",
                "8 / 1 = 8 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 1 8) || 1 * 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)"
            ],
            "Evaluation": [
                0.002,
                40.0,
                0.001,
                0.002,
                60.0,
                0.003,
                0.001,
                0.002,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 4.7",
                "1 <- 4.2",
                "2 <- 2.5",
                "3 <- 5.3",
                "4 <- 3.9",
                "5 <- 5.0",
                "6 <- 5.3",
                "7 <- INIT",
                "8 <- 6.4",
                "9 <- 3.9"
            ]
        },
        "Step 7": {
            "steps": [
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 1 + 7 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 1 * 7 = 7 (left: 7)",
                "8 / 1 = 8 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "1 * 1 = 1 (left: 1 1 8) || 1 * 1 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 1 * 7 = 7 (left: 7)",
                "1 * 1 = 1 (left: 1 1 ",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "8 / 1 = 8 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                21.001,
                0.001,
                0.0,
                0.002,
                0.0,
                1.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.5",
                "1 <- 5.3",
                "2 <- 6.4",
                "3 <- 6.1",
                "4 <- 7.2",
                "5 <- 5.0",
                "6 <- 6.4",
                "7 <- 6.1",
                "8 <- 2.8",
                "9 <- 5.0"
            ]
        },
        "Step 8": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 8) || 2 * 1 = 2 (left: 2 8)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 7 * 1 = 7 (left: 7)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9 9)",
                "1 * 1 = 1 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "1 * 1 = 1 (left: 1 1 8) || 1 * 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "1 * 1 = 1 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "1 * 1 = 1 (left: 1 1 8) || 1 * 1 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)"
            ],
            "Evaluation": [
                0.002,
                0.0,
                0.002,
                0.002,
                0.001,
                0.002,
                0.0,
                0.002,
                0.0,
                0.001
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 1.1",
                "2 <- 5.0",
                "3 <- 5.1",
                "4 <- 6.4",
                "5 <- 5.0",
                "6 <- 6.4",
                "7 <- 6.1",
                "8 <- 6.4",
                "9 <- 3.9"
            ]
        },
        "Step 9": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 8) || 1 - 1 = 0 (left: 0 8) || 8 - 0 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8)",
                "1 * 1 = 1 (left: 1 1 8) || 1 * 1 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 * 1 = 1 (left: 1 1 8) || 1 - 1 = 0 (left: 0 8) || 8 - 0 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 1 8) || 1 * 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "8 / 1 = 8 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)"
            ]
        },
        "Input": "1 1 1 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "4": {
        "puzzle": "6 6 6 6",
        "Step 0": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36)",
                "6 / 6 = 1 (left: 6 1 6 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 / 6 = 1 (left: 1 6 6)",
                "6 * 6 = 36 (left: 6 6 36)"
            ],
            "Evaluation": [
                41.0,
                21.0,
                20.002,
                41.0,
                60.0,
                40.001,
                0.003,
                21.001,
                41.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.7",
                "2 <- 0.0",
                "3 <- 0.0",
                "4 <- 0.5",
                "5 <- 0.3",
                "6 <- 0.9",
                "7 <- 0.3",
                "8 <- 0.3",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 + 6 = 12 (left: 12 36)",
                "6 - 6 = 0 (left: 0 6 6) || 3 * 3 = 9 (left: 6 9)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 6 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 + 6 = 12 (left: 12 36)",
                "6 - 6 = 0 (left: 0 6 6) || Input: 2 3 6",
                "6 - 6 = 0 (left: 0 6 6) || 1 + 5 = 6 (left: 6 7)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36)",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 6 = 36 (left: 36)",
                "6 - 6 = 0 (left: 0 6 6) || Input: 3 4 5",
                "6 - 6 = 0 (left: 6 6 0)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                20.002,
                0.003,
                0.002,
                40.001,
                40.0,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 1.6",
                "2 <- 0.4",
                "3 <- 1.3",
                "4 <- 1.6",
                "5 <- 0.2",
                "6 <- 0.4",
                "7 <- 0.7",
                "8 <- 1.6",
                "9 <- 1.6"
            ]
        },
        "Step 2": {
            "steps": [
                "6 / 6 = 1 (left: 6 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 - 0 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 + 6 = 12 (left: 12 36) || 12 * 3 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 - 36 = 0 (left: 0)",
                "6 - 6 = 0 (left: 0 6 6) || 4 + 4 = 8 (left: 8 8)",
                "6 * 6 = 36 (left: 6 6 36) || 6 + 6 = 12 (left: 12 36)",
                "6 - 6 = 0 (left: 0 6 6) || Input: 3 5 7 9",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 0 - 36 = -36 (left: -36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || Possible next steps:"
            ],
            "Evaluation": [
                3.0,
                60.0,
                60.0,
                20.0,
                20.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 1.6",
                "2 <- 1.7",
                "3 <- 0.9",
                "4 <- 1.3",
                "5 <- 2.4",
                "6 <- 2.1",
                "7 <- 2.1",
                "8 <- 2.1",
                "9 <- 0.4"
            ]
        },
        "Step 3": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 5 * 3 = 15 (left: 15 7)",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 + 6 = 12 (left: 12 36) || 36 - 12 = 24 (left: 24)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 - 36 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 - 0 = 36 (left: 36) || 36 + 2 = 38",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 - 0 = 36 (left: 36) || None - 36 is the final result.",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 - 0 = 36 (left: 36) || There are no possible next steps as there is only one number provided.",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 36)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.003,
                20.002,
                60.0,
                0.003,
                0.003,
                0.003,
                0.003,
                20.0
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 0.5",
                "2 <- INIT",
                "3 <- 0.5",
                "4 <- 2.1",
                "5 <- 3.4",
                "6 <- 0.7",
                "7 <- 2.1",
                "8 <- 2.2",
                "9 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 - 0 = 36 (left: 36) || There are no possible operations to perform on the number 36.",
                "6 - 6 = 0 (left: 0 6 6) || 6 - 0 = 6 (left: 6 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 - 6 = 0 (left: 0 6 6) || 6 + 6 = 12 (left: 0 12)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 - 0 = 36 (left: 36) || 36 / 6 = 6 (left: 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 + 6 = 12 (left: 12 36) || 36 - 12 = 24 (left: 24) || Answer: (6 * 6) - (6 + 6) = 24",
                "6 - 6 = 0 (left: 0 6 6) || Input: 3 5 7",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 - 0 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || Input: 3 9 5",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36) || 36 / 2 = 18"
            ]
        },
        "Input": "6 6 6 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "5": {
        "puzzle": "1 1 2 12",
        "Step 0": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 12)",
                "1 * 1 = 1 (left: 1 2 12)",
                "12 / 2 = 6 (left: 1 2 6)",
                "12 / 2 = 6 (left: 1 2 6)",
                "12 - 2 = 10 (left: 1 1 10)",
                "12 - 2 = 10 (left: 1 1 10)",
                "12 - 2 = 10 (left: 1 2 10)",
                "2 * 1 = 2 (left: 1 2 12)",
                "2 * 1 = 2 (left: 2 2 12)",
                "2 * 1 = 2 (left: 1 2 12)"
            ],
            "Evaluation": [
                2.001,
                60.0,
                1.002,
                1.002,
                0.003,
                1.002,
                1.002,
                60.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.7",
                "2 <- 0.7",
                "3 <- 0.1",
                "4 <- 0.1",
                "5 <- 0.1",
                "6 <- INIT",
                "7 <- 0.9",
                "8 <- 0.1",
                "9 <- 0.7"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "2 * 1 = 2 (left: 1 2 12) || 10 - 3 = 7 (left: 7",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "1 * 1 = 1 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 1 = 11 (left:",
                "2 * 1 = 2 (left: 2 2 12)",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 1 = 11 (left: 2 11)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)"
            ],
            "Evaluation": [
                60.0,
                40.0,
                0.001,
                60.0,
                60.0,
                40.001,
                1.002,
                0.003,
                60.0,
                41.0
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 1.8",
                "2 <- 1.9",
                "3 <- 0.9",
                "4 <- 1.4",
                "5 <- 1.8",
                "6 <- 0.7",
                "7 <- 1.8",
                "8 <- 1.8",
                "9 <- 0.7"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "1 * 1 = 1 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "2 * 1 = 2 (left: 1 2 12) || 2 + 12 = 14 (left: 1 14)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.003,
                60.0,
                60.0,
                0.002,
                20.001,
                0.003,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 1.9",
                "2 <- 2.0",
                "3 <- 2.4",
                "4 <- 0.7",
                "5 <- 2.9",
                "6 <- 0.9",
                "7 <- 1.0",
                "8 <- 1.5",
                "9 <- 1.8"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 1 = 2 (left: 1 2 12) || 2 + 12 = 14 (left: 1 14) || 1 * 14 = 14 (left: 14)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "2 * 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 10 / 5 = 2 (left: 2)",
                "1 * 1 = 1 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (1 * 1) * (2 * 12) = 24",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 - 6 = -5 (left: -5)",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 1 23)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 1 = 11 (left: || 12 * 1 = 12 (left: 1 11)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)"
            ]
        },
        "Input": "1 1 2 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "6": {
        "puzzle": "1 2 2 6",
        "Step 0": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6)",
                "2 * 2 = 4 (left: 4 6)",
                "6 / 2 = 3 (left: 3 2 6)",
                "2 * 2 = 4 (left: 4 2 6)",
                "6 - 2 = 4 (left: 1 4 6)",
                "6 / 2 = 3 (left: 1 2 3)",
                "2 + 2 = 4 (left: 4 6 6)",
                "6 - 2 = 4 (left: 1 2 4)",
                "6 - 2 = 4 (left: 1 4 ",
                "6 - 2 = 4 (left: 1 4 6)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                41.0,
                1.002,
                60.0,
                1.0,
                22.0,
                2.001,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.0",
                "2 <- 0.0",
                "3 <- 0.9",
                "4 <- 0.4",
                "5 <- 0.9",
                "6 <- 0.0",
                "7 <- 0.2",
                "8 <- 0.0",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 2 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "2 / 1 = 2 (left: 2 2 6) || 6 + 6 = 12 (left: 8",
                "2 / 1 = 2 (left: 2 2 6) || Possible",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6)",
                "6 - 2 = 4 (left: 1 4 6) || Input: 3 5",
                "2 / 1 = 2 (left: 2 2 6) || Input: 2 4 4 6",
                "6 / 2 = 3 (left: 3 2 6) || 2 - 6 = -4 (left: -4 6)",
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6)",
                "6 / 2 = 3 (left: 1 2 3)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.003,
                0.002,
                41.0,
                0.003,
                0.003,
                2.0,
                60.0,
                1.002
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.0",
                "2 <- 0.9",
                "3 <- 0.1",
                "4 <- 0.0",
                "5 <- 0.6",
                "6 <- 0.0",
                "7 <- 0.0",
                "8 <- 1.4",
                "9 <- 1.8"
            ]
        },
        "Step 2": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "2 / 1 = 2 (left: 2 2 6) || Possible",
                "6 - 2 = 4 (left: 1 4 6) || 27 / 3 = 9 (left: 9",
                "2 * 2 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 / 1 = 2 (left: 2 2 6) || 4 + 4 = 8 (left: 4 8)",
                "2 + 2 = 4 (left: 4 6 6) || 4 * 6 = 24 (left: 6 24)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || Input: 10 20 30",
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.001,
                0.002,
                0.003,
                1.002,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.9",
                "2 <- 0.9",
                "3 <- 1.8",
                "4 <- 0.0",
                "5 <- 1.8",
                "6 <- 0.6",
                "7 <- 2.0",
                "8 <- INIT",
                "9 <- 0.4"
            ]
        },
        "Step 3": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5)",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "2 / 1 = 2 (left: 2 2 6) || Input: 3 5 7",
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "2 + 2 = 4 (left: 4 6 6) || 6 + 4 = 10 (left: 6 10)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "6 - 2 = 4 (left: 4 4 6)",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                0.003,
                0.001,
                0.003,
                0.002,
                0.002,
                0.003,
                3.0,
                21.001
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 1.8",
                "2 <- 0.4",
                "3 <- 2.0",
                "4 <- 0.4",
                "5 <- 0.0",
                "6 <- 0.9",
                "7 <- 1.8",
                "8 <- 1.8",
                "9 <- 2.0"
            ]
        },
        "Step 4": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 - 1 = 3 (left: 3 6)",
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 1 - 6 = -5 (left: -5)",
                "6 - 2 = 4 (left: 1 4 6) || 7 - 5 = ",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)",
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)"
            ],
            "Evaluation": [
                1.0,
                0.0,
                0.003,
                0.002,
                60.0,
                0.003,
                60.0,
                0.002,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 4.6",
                "2 <- 4.6",
                "3 <- 3.9",
                "4 <- 0.4",
                "5 <- 0.7",
                "6 <- 4.4",
                "7 <- 0.4",
                "8 <- 2.0",
                "9 <- 1.8"
            ]
        },
        "Step 5": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5) || 1 / 1.5 = 0.6666666666666666 (left: 0.6666666666666666)",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6)",
                "6 - 2 = 4 (left: 1 2 4) || Input: 3 6 9",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ],
            "Evaluation": [
                60.0,
                0.0,
                60.0,
                1.001,
                60.0,
                0.003,
                0.003,
                1.002,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 5.0",
                "2 <- 5.2",
                "3 <- 5.2",
                "4 <- 5.0",
                "5 <- 5.0",
                "6 <- 3.9",
                "7 <- 5.8",
                "8 <- 0.2",
                "9 <- 1.8"
            ]
        },
        "Step 6": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * (6 - 2)) * 4 = 24",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 1 * ((6 - 2) * 2) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (4 * 1) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5) || 1.5 / 1 = 1.5 (left: 1.5)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (4 * 1) = 24",
                "6 / 2 = 3 (left: 3 2 6) || 2 * 6 = 12 (left: 3 12)",
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                20.002,
                0.001,
                60.0,
                60.0,
                20.0,
                60.0,
                22.0,
                40.0
            ],
            "Resampling": [
                "0 <- 5.8",
                "1 <- 6.5",
                "2 <- 5.8",
                "3 <- 6.0",
                "4 <- 5.0",
                "5 <- 5.8",
                "6 <- 6.5",
                "7 <- 5.8",
                "8 <- 6.5",
                "9 <- 4.4"
            ]
        },
        "Step 7": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 / 6 = 0.6666666666666666 (left: 0.6666666666666666)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (4 * 1) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (4 * 1) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)"
            ],
            "Evaluation": [
                20.002,
                60.0,
                0.002,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 7.7",
                "1 <- 7.8",
                "2 <- 4.4",
                "3 <- 6.0",
                "4 <- 7.8",
                "5 <- 6.2",
                "6 <- 7.1",
                "7 <- 7.6",
                "8 <- 7.5",
                "9 <- 6.2"
            ]
        },
        "Step 8": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 4 / 6 = 0.6666666666666666 (left: 0.6666666666666666)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "6 - 2 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "6 / 2 = 3 (left: 3 2 6) || 2 * 6 = 12 (left: 3 12) || Possible next steps:",
                "6 - 2 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "6 / 2 = 3 (left: 3 2 6) || 2 * 6 = 12 (left: 3 12) || 12 - 3 = 9 (left: 9)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                20.002,
                60.0,
                60.0,
                0.003,
                0.002,
                0.002,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 7.1",
                "1 <- 7.9",
                "2 <- 7.6",
                "3 <- 6.7",
                "4 <- 8.9",
                "5 <- 6.9",
                "6 <- 7.1",
                "7 <- 4.4",
                "8 <- 0.6",
                "9 <- 7.3"
            ]
        },
        "Step 9": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)",
                "6 - 2 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 3 - 9 = -6 (left:",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || Input: 10 5 2",
                "6 - 2 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) / (2 / 1) * 6 = 24",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 3 + 9 = 12 (left: 12 5)",
                "6 - 2 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) / (2 / 1) * 6 = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "2 + 2 = 4 (left: 4 6 6) || 6 + 4 = 10 (left: 4 6 10)",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * (6 - 2)) * 2 = 24"
            ]
        },
        "Input": "1 2 2 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "7": {
        "puzzle": "1 1 10 12",
        "Step 0": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 10 12)",
                "1 + 10 = 11 (left: 11 1 12)",
                "1 * 10 = 10 (left: 10 1 12)",
                "10 + 1 = 11 (left: 1 11 12)",
                "1 + 10 = 11 (left: 11 11 12)",
                "1 + 10 = 11 (left: 11 10 12)",
                "10 + 1 = 11 (left: 1 11 12)",
                "12 - 1 = 11 (left: 1 10 ",
                "12 - 10 = 2 (left: 1 2 12)"
            ],
            "Evaluation": [
                41.0,
                1.002,
                41.0,
                1.001,
                21.001,
                0.003,
                3.0,
                21.001,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.2",
                "2 <- INIT",
                "3 <- 0.9",
                "4 <- 0.2",
                "5 <- 0.8",
                "6 <- 0.0",
                "7 <- 0.4",
                "8 <- 0.8",
                "9 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 10 12)",
                "1 + 10 = 11 (left: 11 1 12) || 11 / 1 = 11 (left: 11 12)",
                "1 - 1 = 0 (left: 0 10 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "1 + 10 = 11 (left: 11 1 12) || 11 - 1 = 10 (left: 10 12)",
                "12 - 1 = 11 (left: 1 10  || 10 * 1 = 10 (left: 10)",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 1 = 11 (left: 11 11)",
                "12 - 1 = 11 (left: 1 10  || 10 - 1 = 9 (left: 9)",
                "1 + 10 = 11 (left: 11 1 12) || 11 / 1 = 11 (left: 11 12)"
            ],
            "Evaluation": [
                1.001,
                0.003,
                1.002,
                60.0,
                0.002,
                0.002,
                0.002,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.2",
                "2 <- 0.2",
                "3 <- 0.4",
                "4 <- 0.8",
                "5 <- 0.0",
                "6 <- 0.8",
                "7 <- INIT",
                "8 <- 1.3",
                "9 <- 0.9"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 + 10 = 11 (left: 11 1 12) || 11 / 1 = 11 (left: 11 12)",
                "1 + 10 = 11 (left: 11 1 12) || 11 / 1 = 11 (left: 11 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 10  || 1 - 10 = -9 (left: -9)",
                "10 + 1 = 11 (left: 1 11 12) || 12 / 1 = 12 (left:",
                "12 - 1 = 11 (left: 1 10  || Input: 5 5",
                "12 / 10 = 1 (left: 1 1 ",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.002,
                20.001,
                0.001,
                0.003,
                0.003,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 0.7",
                "2 <- 2.9",
                "3 <- 1.3",
                "4 <- 0.4",
                "5 <- 2.4",
                "6 <- INIT",
                "7 <- 2.4",
                "8 <- INIT",
                "9 <- 0.9"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 1 = 11 (left: 1 10  || 1 + 10 = 11 (left: 10)",
                "10 + 1 = 11 (left: 1 11 12) || 11 * 1 = 11 (left: 11 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "10 + 1 = 11 (left: 1 11 12) || 11 * 1 = 11 (left: 11)",
                "12 - 1 = 11 (left: 1 10  || 1 - 10 = -9 (left: -9) || There are no possible next steps with the given input.",
                "12 - 10 = 2 (left: 1 2 12)",
                "12 - 1 = 11 (left: 1 10  || 1 - 10 = -9 (left: -9) || There are no valid operations that can be performed with the given input to reach the target numbers.",
                "12 - 10 = 2 (left: 1 2 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                0.001,
                0.002,
                0.003,
                60.0,
                0.003,
                60.0,
                40.001
            ],
            "Resampling": [
                "0 <- 3.9",
                "1 <- 0.6",
                "2 <- 3.8",
                "3 <- 3.9",
                "4 <- 3.9",
                "5 <- 3.8",
                "6 <- 0.8",
                "7 <- 0.4",
                "8 <- 3.6",
                "9 <- 3.9"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 + 10 = 11 (left: 11 10 12) || 11 * 10 = 110 (left: 110 12)",
                "12 - 10 = 2 (left: 1 2 12) || Possible next steps",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 1 = 11 (left:",
                "12 - 1 = 11 (left: 1 10  || 10 - 1 = 9 (left: 9)",
                "10 + 1 = 11 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.003,
                0.002,
                0.002,
                0.001,
                0.002,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 4.1",
                "2 <- 4.1",
                "3 <- 0.0",
                "4 <- 3.6",
                "5 <- 2.4",
                "6 <- 0.8",
                "7 <- 1.3",
                "8 <- 0.2",
                "9 <- 4.8"
            ]
        },
        "Step 5": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "1 + 10 = 11 (left: 11 10 12) || 11 * 10 = 110 (left: 110 12) || 110 * 12 = 1320 (left: 1320)",
                "1 + 10 = 11 (left: 11 10 12) || 11 * 10 = 110 (left: 110 12) || 110 * 12 = 1320 (left: 1320)",
                "10 + 1 = 11 (left: 1 11 12) || 12 / 1 = 12 (left: 11 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "12 - 1 = 11 (left: 1 10  || 1 - 10 = -9 (left: -9) || There are no possible next steps for the input -9.",
                "12 - 1 = 11 (left: 1 10  || 10 - 1 = 9 (left: 9)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 + 10 = 11 (left: 11 1 12) || 11 * 1 = 11 (left: 11 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                41.0,
                0.003,
                0.002,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 3.8",
                "2 <- 0.4",
                "3 <- 5.4",
                "4 <- 4.1",
                "5 <- 5.4",
                "6 <- 4.8",
                "7 <- 3.6",
                "8 <- 3.9",
                "9 <- 3.6"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 1 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 + 10 = 11 (left: 11 10 12) || 11 * 10 = 110 (left: 110 12) || 50 + 5 = 55 (left: 55)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || Input: 3 6 9",
                "12 - 10 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "12 - 10 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.001,
                0.003,
                0.002,
                0.001,
                0.003,
                60.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 6.9",
                "1 <- 4.8",
                "2 <- 6.9",
                "3 <- 6.9",
                "4 <- 0.7",
                "5 <- 6.9",
                "6 <- 6.9",
                "7 <- 3.9",
                "8 <- 6.1",
                "9 <- 6.7"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 10 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11)",
                "12 - 10 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "12 - 10 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.002,
                0.002,
                60.0,
                60.0,
                0.002,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 3.9",
                "1 <- 4.1",
                "2 <- 7.5",
                "3 <- 7.5",
                "4 <- 0.0",
                "5 <- 7.5",
                "6 <- 5.4",
                "7 <- 5.4",
                "8 <- 6.1",
                "9 <- 4.8"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 + 10 = 11 (left: 11 10 12) || 11 * 10 = 110 (left: 110 12) || 5 -",
                "12 - 10 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * (1 * (10 - 12))) * 12 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * (1 + 10)) * 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 1 11)",
                "12 - 10 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * (1 + 10)) * 12 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.0,
                0.003,
                0.002,
                0.003,
                0.002,
                1.002,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 8.8",
                "1 <- 4.1",
                "2 <- 8.8",
                "3 <- 5.4",
                "4 <- 7.6",
                "5 <- 7.6",
                "6 <- 4.8",
                "7 <- 6.7",
                "8 <- 8.9",
                "9 <- 7.5"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * (1 + 10)) * 12 = 24",
                "1 + 10 = 11 (left: 11 10 12) || 11 * 10 = 110 (left: 110 12) || 110 / 12 = 9.166666666666666 (left: 9.166666666666666)",
                "12 - 10 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * (1 + 10)) * 12 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 10 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * (12 - 10)) * 2 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * (1 + 10)) * 12 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "12 - 10 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * (1 + 10)) * 12 = 24"
            ]
        },
        "Input": "1 1 10 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "8": {
        "puzzle": "2 2 10 10",
        "Step 0": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10)",
                "2 * 2 = 4 (left: 4 10 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 - 2 = 8 (left: 2 10 8)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 10 8)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                2.001,
                1.002,
                1.002,
                0.003,
                1.002,
                1.002,
                1.002,
                2.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- 0.1",
                "5 <- 0.1",
                "6 <- 0.1",
                "7 <- 0.1",
                "8 <- 0.2",
                "9 <- 0.7"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 - 2 = 8 (left: 2 10 8)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 10 40)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2",
                "10 / 2 = 5 (left: 2 5 10) || 10 / 2 = 5 (left: 5 10)",
                "10 - 2 = 8 (left: 2 8 10) || 10 - 2 = 8 (left: 8 10)"
            ],
            "Evaluation": [
                2.001,
                21.001,
                1.002,
                2.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.001,
                1.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.4",
                "2 <- 1.1",
                "3 <- 0.1",
                "4 <- INIT",
                "5 <- 1.1",
                "6 <- 0.2",
                "7 <- INIT",
                "8 <- 1.1",
                "9 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 - 2 = 8 (left: 2 8 10) || 10 - 2 = 8 (left: 8 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 / 2 = 5 (left: 5 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 / 2 = 5 (left: 2 5 10) || 2 * 5 = 10 (left: 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 2 8 10)",
                "10 / 2 = 5 (left: 2 5 ",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 8 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5)"
            ],
            "Evaluation": [
                2.0,
                20.0,
                0.003,
                3.0,
                2.001,
                0.002,
                1.002,
                0.001,
                21.001,
                60.0
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 0.1",
                "2 <- 2.1",
                "3 <- 1.1",
                "4 <- 2.8",
                "5 <- INIT",
                "6 <- 2.9",
                "7 <- 2.8",
                "8 <- 2.1",
                "9 <- 2.9"
            ]
        },
        "Step 3": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10) || 2 * 5 = 10 (left: 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 10 40)",
                "10 - 2 = 8 (left: 2 8 10) || 10 - 2 = 8 (left: 8 10) || 8 / 10 = 0.8 (left: 0.8)",
                "10 / 2 = 5 (left: 2 5 10) || 10 / 2 = 5 (left: 5 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 8 10) || 18 + 2 = 20 (left: 20)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 - 2 = 3 (left: 3)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 8 10) || 10 - 8 = 2 (left: 2)",
                "10 - 2 = 8 (left: 2 8 10) || 10 - 2 = 8 (left: 8 10) || 8 * 10 = 80 (left: 80)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                0.002,
                0.002,
                0.003,
                2.001,
                0.0,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 2.9",
                "1 <- 2.9",
                "2 <- 3.0",
                "3 <- 1.1",
                "4 <- 2.9",
                "5 <- 1.3",
                "6 <- 2.9",
                "7 <- 2.1",
                "8 <- 2.9",
                "9 <- 2.8"
            ]
        },
        "Step 4": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 - 2 = 3 (left: 3)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 - 2 = 3 (left: 3)",
                "10 / 2 = 5 (left: 2 5 10) || 2 * 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 8 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 2 * 5 = 10 (left: 10)",
                "10 - 2 = 8 (left: 2 8 10) || 10 - 2 = 8 (left: 8 10) || 8 * 10 = 80 (left: 80)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 2 * 5 = 10 (left: 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 8 10) || 10 / 8 = 1.25 (left: 1.25)"
            ],
            "Evaluation": [
                0.0,
                0.001,
                0.003,
                40.001,
                0.001,
                1.002,
                0.003,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 2.9",
                "1 <- 4.3",
                "2 <- 4.3",
                "3 <- 2.9",
                "4 <- 0.1",
                "5 <- 4.3",
                "6 <- 1.3",
                "7 <- INIT",
                "8 <- 4.3",
                "9 <- 2.9"
            ]
        },
        "Step 5": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 - 2 = 3 (left: 3)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 8 10) || 8 / 4 = 2 (left: 2 8 14",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 8 10) || 8 / 10 = 0.8 (left: 0.8)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 2 * 5 = 10 (left: 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 8 10) || 8 / 10 = 0.8 (left: 0.8)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10)",
                "10 / 2 = 5 (left: 2 10 ",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 8 10) || Input: 4 8 16",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.001,
                0.001,
                3.0,
                0.001,
                20.002,
                60.0,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 2.1",
                "2 <- 2.9",
                "3 <- 5.7",
                "4 <- 4.3",
                "5 <- 5.7",
                "6 <- 4.3",
                "7 <- 3.0",
                "8 <- 5.7",
                "9 <- 4.3"
            ]
        },
        "Step 6": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 8 10) || 8 - 10 = -2 (left: -2)",
                "10 - 2 = 8 (left: 2 8 10) || 10 - 2 = 8 (left: 8 10) || 8 / 10 = 0.8 (left: 0.8)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 - 2 = 3 (left: 3)",
                "10 / 2 = 5 (left: 2 10  || 10 - 2 = 8 (left: 8)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 8 10) || 8 / 10 = 0.8 (left: 0.8)",
                "10 / 2 = 5 (left: 2 10  || 2 * 10 = 20 (left: 20)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 8 10) || 8 * 10 = 80 (left: 80)",
                "10 / 2 = 5 (left: 2 5 10) || 2 * 5 = 10 (left: 10 10) || 10 + 10 = 20",
                "10 / 2 = 5 (left: 2 10  || 10 - 2 = 8 (left: 8)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 8 10) || 10 / 8 = 1.25 (left: 1.25)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.001,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 5.7",
                "1 <- 5.7",
                "2 <- 5.6",
                "3 <- 2.8",
                "4 <- 5.7",
                "5 <- 5.7",
                "6 <- 1.1",
                "7 <- INIT",
                "8 <- 3.0",
                "9 <- 3.0"
            ]
        },
        "Step 7": {
            "steps": [
                "10 / 2 = 5 (left: 2 10  || 2 * 10 = 20 (left: 10)",
                "10 / 2 = 5 (left: 2 10  || 8 / 12 = 0.66667 (left: 0.66667)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 8 10) || 8 * 10 = 80 (left: 80)",
                "10 / 2 = 5 (left: 2 10  || 2 * 10 = 20 (left: 20)",
                "10 / 2 = 5 (left: 2 10  || 10 * 2 = 20 (left: 20)",
                "10 / 2 = 5 (left: 2 5 10) || 10 / 2 = 5 (left: 5 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 / 2 = 5 (left: 2 5 10) || 2 * 5 = 10 (left: 10 10) || 10 * 10 = 100 (left: 100)",
                "10 / 2 = 5 (left: 2 5 10) || 2 * 5 = 10 (left: 10 10) || 10 + 10 = 20"
            ],
            "Evaluation": [
                0.001,
                0.002,
                1.002,
                0.003,
                0.001,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.8",
                "1 <- 5.7",
                "2 <- 4.3",
                "3 <- 2.9",
                "4 <- 5.7",
                "5 <- 2.9",
                "6 <- 2.9",
                "7 <- 5.7",
                "8 <- 5.7",
                "9 <- 4.3"
            ]
        },
        "Step 8": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 8 10) || 8 - 10 = -2 (left: -2)",
                "10 / 2 = 5 (left: 2 10  || 10 - 2 = 8 (left: 8)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 8 10) || 10 / 8 = 1.25 (left: 1.25)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 2 * 5 = 10 (left: 10)",
                "10 / 2 = 5 (left: 2 10  || 10 / 2 = 5 (left: 5)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 3 + 9 = 12 (left: 12)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || Input: 3 9",
                "10 / 2 = 5 (left: 2 10  || 10 - 2 = 8 (left: 8)",
                "10 / 2 = 5 (left: 2 10  || 2 * 10 = 20 (left: 20)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 8 10) || 8 / 10 = 0.8 (left: 0.8)"
            ],
            "Evaluation": [
                2.0,
                0.002,
                0.003,
                20.001,
                0.002,
                0.003,
                0.003,
                0.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 2.9",
                "1 <- 4.3",
                "2 <- 8.3",
                "3 <- 8.3",
                "4 <- 5.7",
                "5 <- 8.3",
                "6 <- 8.3",
                "7 <- 2.1",
                "8 <- 5.7",
                "9 <- 8.3"
            ]
        },
        "Step 9": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 - 2 = 3 (left: 3)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 8 10) || 10 / 8 = 1.25 (left: 1.25)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 2 * 5 = 10 (left: 10) || 10 - 8 = 2 (left: 2)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 2 * 5 = 10 (left: 10) || 10 * 10 = 100 (left: 10 100)",
                "10 / 2 = 5 (left: 2 10  || 2 * 10 = 20 (left: 20)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 2 * 5 = 10 (left: 10) || 10 + 10 = 20",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 2 * 5 = 10 (left: 10) || 10 / 2 = 5",
                "10 - 2 = 8 (left: 2 8 10) || 10 - 2 = 8 (left: 8 10) || 8 * 10 = 80 (left: 80)",
                "10 / 2 = 5 (left: 2 10  || 2 * 10 = 20 (left: 20)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 2 * 5 = 10 (left: 10) || 10 - 10 = 0 (left: 0)"
            ]
        },
        "Input": "2 2 10 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "9": {
        "puzzle": "1 1 1 12",
        "Step 0": {
            "steps": [
                "12 - 1 = 11 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1 12)",
                "1 * 1 = 1 (left: 1 1 12)",
                "12 - 1 = 11 (left: 1 1 11)",
                "1 * 12 = 12 (left: 1 1 12)",
                "1 / 1 = 1 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "12 - 1 = 11 (left: 1 1 11)",
                "12 - 1 = 11 (left: 1 1 11)",
                "12 - 1 = 11 (left: 1 1 11)"
            ],
            "Evaluation": [
                1.002,
                60.0,
                41.0,
                1.002,
                41.0,
                21.001,
                21.001,
                1.002,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.5",
                "2 <- 0.1",
                "3 <- 0.1",
                "4 <- 0.1",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 0.1",
                "8 <- 0.1",
                "9 <- 0.6"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "1 / 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "12 - 1 = 11 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                40.0,
                0.003,
                60.0,
                1.002,
                60.0,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 0.5",
                "2 <- INIT",
                "3 <- 1.7",
                "4 <- 1.7",
                "5 <- 1.8",
                "6 <- 0.4",
                "7 <- 1.7",
                "8 <- 1.8",
                "9 <- 0.4"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 / 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 / 1 = 1 (left: 1 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 3 + 9 = 12 (left: 12 27)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 + 11 = 12",
                "1 * 12 = 12 (left: 1 1 12) || 1 / 1 = 1 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 12 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                60.0,
                0.003,
                0.003,
                0.003,
                1.002,
                0.003,
                0.001,
                2.0
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 1.3",
                "2 <- 1.5",
                "3 <- 2.2",
                "4 <- 0.1",
                "5 <- 1.8",
                "6 <- 0.4",
                "7 <- 0.1",
                "8 <- 1.7",
                "9 <- 1.5"
            ]
        },
        "Step 3": {
            "steps": [
                "1 / 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "1 / 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 1 / 1 = 1 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 12 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || Input: 6 3",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)"
            ],
            "Evaluation": [
                1.002,
                0.001,
                40.0,
                21.0,
                0.002,
                0.003,
                0.002,
                20.0,
                0.003,
                40.001
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 3.2",
                "2 <- 1.8",
                "3 <- 1.5",
                "4 <- 0.2",
                "5 <- 1.3",
                "6 <- 1.5",
                "7 <- 2.2",
                "8 <- 0.6",
                "9 <- 3.9"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 12 = 12 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || Possible next steps:",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "1 / 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.001,
                1.002,
                0.003,
                0.003,
                20.0,
                20.0,
                40.0,
                0.002
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 4.8",
                "2 <- 0.4",
                "3 <- 3.3",
                "4 <- 0.1",
                "5 <- 3.2",
                "6 <- 3.7",
                "7 <- 3.2",
                "8 <- 1.7",
                "9 <- 2.2"
            ]
        },
        "Step 5": {
            "steps": [
                "1 / 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 1 12) || 12 / 1 = 12 (left: 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 12 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 / 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 1 12) || 1 * 12 = 12 (left: 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 / 1 = 1 (left: 1 1 12) || 1 / 1 = 1 (left: 1 12)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.002,
                0.003,
                1.002,
                0.001,
                0.003,
                0.002,
                0.003,
                21.001
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 0.1",
                "2 <- 4.8",
                "3 <- 0.2",
                "4 <- 1.7",
                "5 <- 4.7",
                "6 <- 5.9",
                "7 <- 1.7",
                "8 <- 3.3",
                "9 <- 3.9"
            ]
        },
        "Step 6": {
            "steps": [
                "1 / 1 = 1 (left: 1 1 12) || 1 / 1 = 1 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 1 + 12 = 13 (left: 1 13)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 / 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 + 11 = 12",
                "1 / 1 = 1 (left: 1 1 12) || 1 / 1 = 1 (left: 1 12) || 12 / 1 = 12 (left: 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 / 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 1 12) || 12 / 1 = 12 (left: 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                1.0,
                1.001,
                0.001,
                60.0,
                0.002,
                0.003,
                0.002,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 4.7",
                "1 <- 4.8",
                "2 <- 3.2",
                "3 <- 6.3",
                "4 <- 5.9",
                "5 <- INIT",
                "6 <- 6.3",
                "7 <- 3.9",
                "8 <- 6.3",
                "9 <- 2.2"
            ]
        },
        "Step 7": {
            "steps": [
                "1 / 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 5 - 3 = 2 (left: 2 7)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 + 11 = 12",
                "1 / 1 = 1 (left: 1 1 12) || 1 / 1 = 1 (left: 1 12) || 1 + 12 = 13",
                "12 / 1 = 12 (left: 1 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 / 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.003,
                0.003,
                21.001,
                0.002,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 4.8",
                "2 <- 4.8",
                "3 <- 3.9",
                "4 <- 3.7",
                "5 <- 4.6",
                "6 <- 0.2",
                "7 <- 1.3",
                "8 <- 6.3",
                "9 <- 6.3"
            ]
        },
        "Step 8": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 - 12 = 0 (left: 0)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 + 11 = 12",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                0.001,
                0.003,
                0.002,
                2.0,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 7.5",
                "1 <- 2.2",
                "2 <- 7.5",
                "3 <- 1.7",
                "4 <- 1.5",
                "5 <- 0.2",
                "6 <- INIT",
                "7 <- 5.9",
                "8 <- 4.8",
                "9 <- 1.6"
            ]
        },
        "Step 9": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "1 / 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12)",
                "12 - 1 = 11 (left: 1 1 11)",
                "1 / 1 = 1 (left: 1 1 12) || 1 / 1 = 1 (left: 1 12) || 1 * 12 = 12",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "12 - 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10)"
            ]
        },
        "Input": "1 1 1 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    }
}