{
    "0": {
        "puzzle": "1 1 4 6",
        "Step 0": {
            "steps": [
                "6 - 4 = 2 (left: 1 2 6)",
                "1 * 1 = 1 (left: 1 4 6)",
                "6 - 1 = 5 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 4 5)",
                "4 + 1 = 5 (left: 1 5 6)",
                "4 - 1 = 3 (left: 1 3 6)",
                "6 - 1 = 5 (left: 1 4 5)",
                "6 - 4 = 2 (left: 1 2 6)",
                "4 + 1 = 5 (left: 1 5 ",
                "6 - 4 = 2 (left: 1 2 6)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                2.0,
                22.0,
                2.001,
                60.0,
                0.001,
                2.001,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.5",
                "2 <- 0.1",
                "3 <- 0.5",
                "4 <- 0.1",
                "5 <- 0.5",
                "6 <- 0.3",
                "7 <- 0.3",
                "8 <- 0.5",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "6 - 1 = 5 (left: 1 4 5) || 1 * 4 = 4 (left: 4 5)",
                "4 - 1 = 3 (left: 1 3 6) || Possible",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "4 - 1 = 3 (left: 1 3 6) || 6 / 3 = 2 (left: 1 2)",
                "1 * 1 = 1 (left: 1 4 6) || Possible next steps:",
                "4 - 1 = 3 (left: 1 3 6) || 6 - 1 = 5 (left: 5)",
                "6 - 1 = 5 (left: 1 4 5) || 1 * 4 = 4 (left: 4 5)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 1 = 4 (left: 4 5)",
                "4 - 1 = 3 (left: 1 3 6) || 3 - 1 = 2 (left: 2 6)",
                "4 + 6 = 10 (left: 1 1 10)"
            ],
            "Evaluation": [
                41.0,
                0.003,
                0.002,
                20.002,
                0.003,
                0.001,
                21.001,
                22.0,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.3",
                "2 <- 1.3",
                "3 <- 1.6",
                "4 <- 1.0",
                "5 <- 0.1",
                "6 <- 0.1",
                "7 <- 0.5",
                "8 <- 1.3",
                "9 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "4 - 1 = 3 (left: 1 3 6) || 6 / 3 = 2 (left: 1 2) || 1 + 2 = 3 (left: 3)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 4 = 1 (left: 1 5)",
                "4 - 1 = 3 (left: 1 3 6) || 6 / 3 = 2 (left: 1 2) || 10 / 5 = 2 (left: 2)",
                "6 - 1 = 5 (left: 1 4 5) || 1 * 4 = 4 (left: 4 5) || 4 * 5 = 20 (left: 20)",
                "6 - 1 = 5 (left: 1 4 5) || 1 * 4 = 4 (left: 4 5) || 4 - 5 = -1 (left: -1)",
                "1 * 1 = 1 (left: 1 4 6) || 1 + 6 = ",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)",
                "4 - 1 = 3 (left: 1 3 6) || 3 - 1 = 2 (left: 2 6)",
                "4 - 1 = 3 (left: 1 3 6) || 6 / 3 = 2 (left: 1 2) || 2 / 1 = 2 (left: 2)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1.5)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.003,
                0.003,
                0.0,
                0.003,
                60.0,
                2.0,
                0.002,
                0.0
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 2.1",
                "2 <- 2.1",
                "3 <- 0.3",
                "4 <- 1.7",
                "5 <- 2.6",
                "6 <- 1.6",
                "7 <- 1.0",
                "8 <- 0.3",
                "9 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 4 = 1 (left: 1 5) || 1 + 5 = 6",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 4 = 1 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 4 = 1 (left: 1 5)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 1 = 4 (left: 4 5) || 5 / 4 = 1.25 (left: 1.25)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 3 * 9 = 27 (left: 27 27)",
                "6 - 1 = 5 (left: 1 4 5) || 1 * 4 = 4 (left: 4 5) || Input: 3 9 27",
                "6 - 1 = 5 (left: 1 4 5) || 1 * 4 = 4 (left: 4 5) || 5 - 4 = 1 (left: 1)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 1 = 4 (left: 4 5)",
                "6 - 1 = 5 (left: 1 4 5)"
            ],
            "Evaluation": [
                40.0,
                0.003,
                0.003,
                40.001,
                0.001,
                0.002,
                0.003,
                0.003,
                22.0,
                2.001
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 0.3",
                "2 <- 0.1",
                "3 <- 3.0",
                "4 <- 1.7",
                "5 <- 1.0",
                "6 <- 1.0",
                "7 <- 0.5",
                "8 <- 3.0",
                "9 <- 1.6"
            ]
        },
        "Step 4": {
            "steps": [
                "6 - 1 = 5 (left: 1 4 5) || 5 - 4 = 1 (left: 1 5) || 5 - 1 = 4 (left: 4)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 1) * (4 * 6) = 24",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 1 = 4 (left: 4 5) || 10 + 3 = 13 (left: 3 13)",
                "6 - 1 = 5 (left: 1 4 5) || 1 * 4 = 4 (left: 4 5) || 3 + 9 = 12 (left: 12)",
                "6 - 1 = 5 (left: 1 4 5) || 1 * 4 = 4 (left: 4 5) || 5 + 4 = 9 (left: 4 9)",
                "4 - 1 = 3 (left: 1 3 6) || 3 + 6 = 9 (left: 1 9)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 1 * (1 * 4) * 6 = 24",
                "6 - 1 = 5 (left: 1 4 5) || 1 * 4 = 4 (left: 4 5) || 5 / 4 = 1.25 (left: 1.25 5)"
            ]
        },
        "Input": "1 1 4 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "1": {
        "puzzle": "1 1 11 11",
        "Step 0": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 11 11)",
                "1 - 1 = 0 (left: 0 11 11)",
                "11 / 1 = 11 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12)",
                "11 - 1 = 10 (left: 1 11 10)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12)",
                "11 / 1 = 11 (left: 1 11 ",
                "11 + 1 = 12 (left: 1 11 12)"
            ],
            "Evaluation": [
                40.001,
                0.003,
                21.001,
                0.003,
                40.001,
                0.003,
                0.003,
                20.002,
                40.0,
                40.001
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 0.9",
                "2 <- INIT",
                "3 <- 0.9",
                "4 <- 0.0",
                "5 <- 0.9",
                "6 <- 0.4",
                "7 <- 0.8",
                "8 <- 0.8",
                "9 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 - 1 = 10 (left: 1 11 10)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 12 * 11",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 / 1 = 11 (left: 1 11  || Input: 3 9 27",
                "11 / 1 = 11 (left: 1 11  || 1 * 11 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)"
            ],
            "Evaluation": [
                1.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.9",
                "2 <- 0.8",
                "3 <- 0.0",
                "4 <- 0.0",
                "5 <- 0.0",
                "6 <- 0.2",
                "7 <- 0.8",
                "8 <- 0.8",
                "9 <- 0.7"
            ]
        },
        "Step 2": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 11 11)",
                "11 / 1 = 11 (left: 1 11  || 5 - 3 = 2 (left: 2)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 1 * 11 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "1 - 1 = 0 (left: 0 11 11) || 11 - 11 = 0 (left: 0 11)",
                "11 / 1 = 11 (left: 1 11  || 1 * 11 = 11 (left: 11 11)",
                "11 / 1 = 11 (left: 1 11  || 11 / 1 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.001,
                0.003,
                0.002,
                60.0,
                0.0,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 2.5",
                "1 <- 0.0",
                "2 <- 2.5",
                "3 <- INIT",
                "4 <- 0.8",
                "5 <- 2.5",
                "6 <- 0.4",
                "7 <- 0.0",
                "8 <- 0.0",
                "9 <- 0.2"
            ]
        },
        "Step 3": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 1 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 - 1 = 10 (left: 1 10 11)",
                "11 / 1 = 11 (left: 1 11  || 1 * 11 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "1 - 1 = 0 (left: 0 11 11) || 5 / 5 = 1 (left: 1 5 5)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                60.0,
                1.002,
                60.0
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 3.7",
                "2 <- 0.8",
                "3 <- 3.7",
                "4 <- INIT",
                "5 <- 2.5",
                "6 <- 3.7",
                "7 <- 2.5",
                "8 <- 2.5",
                "9 <- 2.5"
            ]
        },
        "Step 4": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 1 + 11 = 12 (left: 12)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "11 / 1 = 11 (left: 1 11  || 1 * 11 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11) ",
                "11 - 1 = 10 (left: 1 11 10)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11) ",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                0.002,
                0.003,
                0.002,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.7",
                "1 <- 3.7",
                "2 <- 0.9",
                "3 <- INIT",
                "4 <- 3.7",
                "5 <- 0.9",
                "6 <- 3.7",
                "7 <- 3.7",
                "8 <- 3.7",
                "9 <- 2.5"
            ]
        },
        "Step 5": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 9 / 3 = 3 (left: 3 27)",
                "11 + 1 = 12 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "11 - 1 = 10 (left: 1 10 11)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 11 12) || Input: 3 5 10",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || Input: 3 9 27",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)"
            ],
            "Evaluation": [
                0.002,
                20.002,
                0.003,
                1.002,
                0.003,
                0.003,
                0.001,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 0.0",
                "2 <- 0.8",
                "3 <- 3.9",
                "4 <- 5.1",
                "5 <- 0.8",
                "6 <- 0.7",
                "7 <- 3.9",
                "8 <- 5.1",
                "9 <- 0.0"
            ]
        },
        "Step 6": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 9 / 3 = 3 (left: 3 27) || 27 / 3 = 9 (left: 9 27)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 / 1 = 11 (left: 1 11  || 11 - 1 = 10 (left: 10)",
                "1 - 1 = 0 (left: 0 11 11) || 5 / 5 = 1 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 9 / 3 = 3 (left: 3 27) || 3 + 27 = 30 (left: 30)",
                "11 / 1 = 11 (left: 1 11  || 1 * 11 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 11 12)",
                "1 - 1 = 0 (left: 0 11 11) || 5 / 5 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 9 / 3 = 3 (left: 3 27) || 27 * 3 = 81 (left: 81)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.002,
                1.002,
                0.002,
                0.002,
                0.003,
                0.001,
                0.003,
                60.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 6.7",
                "1 <- 6.1",
                "2 <- 2.5",
                "3 <- 3.7",
                "4 <- 0.4",
                "5 <- 6.9",
                "6 <- 3.9",
                "7 <- 6.9",
                "8 <- 0.4",
                "9 <- 3.7"
            ]
        },
        "Step 7": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 11) || 5 / 5 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5) || 4 / 5 = 0.8 (left: 0.8)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12) || 11 / 12 = 0.9167 (left: 0.9167)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 - 1 = 0 (left: 0 11 11) || 5 / 5 = 1 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 * 1 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.001,
                0.002,
                0.0,
                0.003,
                0.002,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.9",
                "1 <- 5.1",
                "2 <- 6.9",
                "3 <- 6.9",
                "4 <- 3.9",
                "5 <- 6.7",
                "6 <- 6.9",
                "7 <- 6.9",
                "8 <- 6.9",
                "9 <- 0.0"
            ]
        },
        "Step 8": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 11) || 5 / 5 = 1 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 9 / 3 = 3 (left: 3 27) || Possible next steps:",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "1 - 1 = 0 (left: 0 11 11) || 5 / 5 = 1 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5)",
                "1 - 1 = 0 (left: 0 11 11) || 5 / 5 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5) || 10 + 2 = 12 (left: 2)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.001,
                0.003,
                0.003,
                0.001,
                0.002,
                0.003,
                20.002,
                0.001
            ],
            "Resampling": [
                "0 <- 8.2",
                "1 <- 6.7",
                "2 <- 6.9",
                "3 <- 0.8",
                "4 <- 8.2",
                "5 <- 5.1",
                "6 <- 0.0",
                "7 <- 0.7",
                "8 <- 0.8",
                "9 <- 2.5"
            ]
        },
        "Step 9": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0) || No possible next steps as there is no input provided.",
                "1 - 1 = 0 (left: 0 11 11) || 5 / 5 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5) || 4 / 5 = 0.8 (left: 0.8)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 / 1 = 11 (left: 1 11  || 1 * 11 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0) || There are no possible next steps with the input of 0.",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 9 / 3 = 3 (left: 3 27) || Possible next steps:",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 12 / 1 = 12 (left: 1 12)",
                "11 / 1 = 11 (left: 1 11  || 1 * 11 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)"
            ]
        },
        "Input": "1 1 11 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "2": {
        "puzzle": "1 1 3 8",
        "Step 0": {
            "steps": [
                "8 - 3 = 5 (left: 1 5 8)",
                "1 * 1 = 1 (left: 1 3 8)",
                "3 * 1 = 3 (left: 3 3 8)",
                "8 - 1 = 7 (left: 1 3 7)",
                "8 - 1 = 7 (left: 1 3 7)",
                "8 - 1 = 7 (left: 1 3 7)",
                "3 * 1 = 3 (left: 3 3 8)",
                "8 - 3 = 5 (left: 1 5 8)",
                "8 - 1 = 7 (left: 1 3 ",
                "8 - 3 = 5 (left: 1 3 5)"
            ],
            "Evaluation": [
                1.001,
                41.0,
                2.001,
                3.0,
                3.0,
                2.001,
                1.002,
                2.0,
                0.0,
                2.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.3",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- INIT",
                "5 <- 0.7",
                "6 <- 0.1",
                "7 <- 0.1",
                "8 <- INIT",
                "9 <- 0.7"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24)",
                "8 - 1 = 7 (left: 1 3 7) || 1 * 3 = 3 (left: 3 7)",
                "3 + 1 = 4 (left: 1 4 8)",
                "1 * 1 = 1 (left: 1 3 8) || 8 - 1 = 7 (left: 7 8)",
                "8 - 1 = 7 (left: 1 3 7)",
                "8 - 3 = 5 (left: 1 5 8) || 1 + 8 = ",
                "1 * 1 = 1 (left: 1 3 8) || 8 - 1 = 7 (left: 7 8)",
                "1 * 1 = 1 (left: 1 3 8) || 3 + 8 = 11 (left: 1 11)",
                "1 + 3 = 4 (left: 1 4 8)",
                "8 - 3 = 5 (left: 1 5 8) || 1 * 5 = 5 (left: 5 8)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                1.001,
                3.0,
                0.003,
                0.003,
                20.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.0",
                "2 <- 1.0",
                "3 <- INIT",
                "4 <- 0.1",
                "5 <- 1.0",
                "6 <- 1.0",
                "7 <- 1.0",
                "8 <- 1.0",
                "9 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "1 + 3 = 4 (left: 4 1 8)",
                "1 * 1 = 1 (left: 1 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 - 1 = 23 (left: 1 23)",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 - 1 = 23 (left: 1 23)",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || Input: 5 10 15",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 - 1 = 23 (left: 24)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                20.002,
                2.001,
                0.003,
                41.0,
                60.0,
                21.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 2.2",
                "2 <- 2.6",
                "3 <- 2.7",
                "4 <- 1.7",
                "5 <- 1.0",
                "6 <- 2.1",
                "7 <- 2.1",
                "8 <- 2.0",
                "9 <- 0.6"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 * 1) * (3 * 8) = 24",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23) || There are no possible next steps with the input 23.",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 * 1) * (3 * 8) = 24",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 - 1 = 23 (left: 1 23) || 23 - 1 = 22 (left: 22)",
                "1 * 1 = 1 (left: 1 3 8) || 3 + 8 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 * 1) * (3 * 8) = 24",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: 1 * (1 * 3 * 8) = 24",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 3 3 8) || Input: 4 5 9"
            ]
        },
        "Input": "1 1 3 8",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "3": {
        "puzzle": "1 1 1 8",
        "Step 0": {
            "steps": [
                "8 - 1 = 7 (left: 1 1 7)",
                "1 / 1 = 1 (left: 1 1 8)",
                "8 - 1 = 7 (left: 1 1 7)",
                "8 / 1 = 8 (left: 1 1 8)",
                "8 - 1 = 7 (left: 1 1 7)",
                "8 / 1 = 8 (left: 1 1 8)",
                "8 / 1 = 8 (left: 1 1 8)",
                "8 - 1 = 7 (left: 1 1 7)",
                "8 - 1 = 7 (left: 1 1 ",
                "8 - 1 = 7 (left: 1 1 7)"
            ],
            "Evaluation": [
                0.003,
                2.001,
                1.002,
                2.001,
                2.001,
                0.002,
                0.003,
                1.002,
                0.003,
                2.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.9",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 8)",
                "8 / 1 = 8 (left: 1 1 8)",
                "8 / 1 = 8 (left: 1 1 8)",
                "1 + 1 = 2 (left: 2 1 8)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7)",
                "8 - 1 = 7 (left: 1 1 7)",
                "1 + 1 = 2 (left: 2 1 8)",
                "8 - 1 = 7 (left: 1 1 7)",
                "8 - 1 = 7 (left: 1 1 7)",
                "1 * 1 = 1 (left: 1 1 8)"
            ],
            "Evaluation": [
                1.001,
                1.001,
                22.0,
                60.0,
                0.0,
                2.001,
                60.0,
                1.002,
                2.001,
                2.001
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 1.2",
                "2 <- 1.3",
                "3 <- 1.6",
                "4 <- 1.2",
                "5 <- 1.6",
                "6 <- 1.3",
                "7 <- 1.2",
                "8 <- INIT",
                "9 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 8) || 2 * 1 = 2 (left: 2 8)",
                "8 / 1 = 8 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 / 1 = 2 (left: 2 8)",
                "8 / 1 = 8 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8)",
                "1 + 1 = 2 (left: 2 1 8) || Input: 3 5 7",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8)",
                "8 / 1 = 8 (left: 1 1 8) || 1 / 8 = 0.125 (left: 0.125)",
                "8 - 1 = 7 (left: 1 1 7)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8)"
            ],
            "Evaluation": [
                0.002,
                41.0,
                41.0,
                0.003,
                41.0,
                0.003,
                60.0,
                0.002,
                20.001,
                60.0
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 2.6",
                "2 <- 2.2",
                "3 <- 2.9",
                "4 <- 2.9",
                "5 <- 2.6",
                "6 <- 1.6",
                "7 <- 1.6",
                "8 <- 2.9",
                "9 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "1 + 1 = 2 (left: 2 1 8) || 1 + 8 = 9 (left: 2 9)",
                "1 + 1 = 2 (left: 2 1 8) || 1 / 8 = 0.125 (left: 0.125)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8) || 1 + 8 = 9"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.001,
                0.002,
                0.0,
                0.001,
                0.002,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 2.9",
                "1 <- 2.6",
                "2 <- 2.4",
                "3 <- 2.4",
                "4 <- 2.2",
                "5 <- 2.2",
                "6 <- 1.6",
                "7 <- 2.6",
                "8 <- 1.2",
                "9 <- 2.8"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 / 1 = 8 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 / 1 = 8 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 1 + 8 = 9",
                "1 + 1 = 2 (left: 2 1 8) || 8 - 1 = 7 (left: 2 7)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8 8)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7)",
                "8 - 1 = 7 (left: 1 1 7) || Input: 3 5 9 2"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                1.0,
                0.003,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.9",
                "1 <- 2.2",
                "2 <- 2.2",
                "3 <- 2.2",
                "4 <- 1.6",
                "5 <- 2.4",
                "6 <- 2.2",
                "7 <- 4.8",
                "8 <- 2.1",
                "9 <- 2.9"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8) || 8 / 2 = 4 (left: 4 8)",
                "8 / 1 = 8 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "8 / 1 = 8 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 2.6",
                "2 <- 2.9",
                "3 <- 2.6",
                "4 <- 1.3",
                "5 <- 1.6",
                "6 <- 1.5",
                "7 <- 4.8",
                "8 <- 1.6",
                "9 <- 4.8"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8)",
                "1 + 1 = 2 (left: 2 1 8) || 1 / 8 = 0.125 (left:",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 7 + 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 / 1 = 2 (left: 2 8)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 7 / 7 = 1 (left: 1)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.002,
                20.002,
                0.003,
                60.0,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 6.6",
                "1 <- 0.9",
                "2 <- 1.3",
                "3 <- 6.6",
                "4 <- 6.6",
                "5 <- 6.6",
                "6 <- 6.6",
                "7 <- 2.6",
                "8 <- 1.6",
                "9 <- 2.4"
            ]
        },
        "Step 7": {
            "steps": [
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "8 - 1 = 7 (left: 1 1 7) || 5 - 3 = 2 (left: 2",
                "1 + 1 = 2 (left: 2 1 8) || 8 / 2 = 4 (left: 4 8)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6) ",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8) || 8 - 2 = 6 (left: 2 6)",
                "8 / 1 = 8 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                0.002,
                0.002,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 1.6",
                "2 <- 1.9",
                "3 <- 6.4",
                "4 <- 2.2",
                "5 <- 4.8",
                "6 <- 6.6",
                "7 <- 6.4",
                "8 <- 6.6",
                "9 <- 6.6"
            ]
        },
        "Step 8": {
            "steps": [
                "8 / 1 = 8 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8) || 1 + 8 = 9",
                "1 + 1 = 2 (left: 2 1 8) || 8 / 2 = 4 (left: 4 8)",
                "1 * 1 = 1 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                21.0,
                0.002,
                0.002,
                0.0,
                0.003,
                0.001,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.2",
                "2 <- 2.2",
                "3 <- 0.7",
                "4 <- 8.2",
                "5 <- 6.6",
                "6 <- 8.2",
                "7 <- 1.3",
                "8 <- 4.8",
                "9 <- 1.6"
            ]
        },
        "Step 9": {
            "steps": [
                "8 / 1 = 8 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 1 = 7 (left: 1 1 7) || 1 - 1 = 0 (left: 0 7)",
                "1 * 1 = 1 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 1 + 6 = 7",
                "1 * 1 = 1 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8) || 1 / 8 = 0.125 (left: 0.125)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 1 * 7 = 7 (left: 7)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8)"
            ]
        },
        "Input": "1 1 1 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "4": {
        "puzzle": "6 6 6 6",
        "Step 0": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36)",
                "6 / 6 = 1 (left: 1 6 6)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 / 6 = 1 (left: 6 1 ",
                "6 * 6 = 36 (left: 6 6 36)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                21.001,
                21.001,
                21.001,
                3.0,
                41.0,
                1.002,
                40.001
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 0.2",
                "2 <- 0.2",
                "3 <- 0.0",
                "4 <- 0.1",
                "5 <- 0.4",
                "6 <- 0.2",
                "7 <- 0.2",
                "8 <- 0.1",
                "9 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36)",
                "6 * 6 = 36 (left: 6 6 36) || Possible",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 36 = 216 (left: 6 216)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 + 6 = 12 (left: 12 36)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 36 - 6 = 30 (left: 6 30)",
                "6 / 6 = 1 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6)",
                "6 / 6 = 1 (left: 1 6 6) || 1 * 6 = 6 (left: 6 6 6)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                60.0,
                1.002,
                20.002,
                0.003,
                0.003,
                20.002,
                3.0,
                1.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 0.7",
                "2 <- 1.2",
                "3 <- 1.2",
                "4 <- 0.3",
                "5 <- 0.5",
                "6 <- 0.5",
                "7 <- 0.2",
                "8 <- INIT",
                "9 <- 0.7"
            ]
        },
        "Step 2": {
            "steps": [
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 6 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 36 = 216 (left: 6 216) || 216 - 6 = 210 (left: 6 210)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 36 = 216 (left: 6 216) || 216 - 6 = 210 (left: 210 6)",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 6 = 36 (left: 36)",
                "6 - 6 = 0 (left: 0 6 6) || Input: 3 3 4",
                "6 - 6 = 0 (left: 0 6 6) || Input: 8 1 7",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 36 36)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 6 36)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                21.001,
                60.0,
                40.0,
                0.003,
                0.003,
                20.002,
                40.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.2",
                "2 <- 1.0",
                "3 <- 1.0",
                "4 <- 1.0",
                "5 <- 1.4",
                "6 <- 0.7",
                "7 <- 1.0",
                "8 <- INIT",
                "9 <- 2.3"
            ]
        },
        "Step 3": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 36 = 216 (left: 6 216) || 216 / 6 = 36 (left: 6 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 36 = 216 (left: 6 216) || 216 - 6 = 210 (left: 210 6) || 6 / 210 = 0.0285714 (left: 210)"
            ],
            "Evaluation": [
                40.001,
                0.003,
                0.003,
                0.002,
                40.0,
                0.002,
                20.002,
                40.0,
                40.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 0.1",
                "2 <- 2.3",
                "3 <- 3.8",
                "4 <- 1.7",
                "5 <- 3.6",
                "6 <- 0.3",
                "7 <- 3.0",
                "8 <- 0.2",
                "9 <- 0.7"
            ]
        },
        "Step 4": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36)",
                "6 / 6 = 1 (left: 1 6 6) || 6 * 1 = 6 (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 36 = 216 (left: 6 216) || 216 - 6 = 210 (left: 210 6) || 210 * 6 = 1260 (left: 1260)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 36 - 6 = 30 (left: 6 30) || 6 + 30 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "6 - 6 = 0 (left: 0 6 6) || Input: 3 3 3",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 6 36)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                0.003,
                60.0,
                0.003,
                0.003,
                0.003,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.7",
                "2 <- 4.0",
                "3 <- 2.7",
                "4 <- 0.3",
                "5 <- 4.0",
                "6 <- 3.0",
                "7 <- 1.0",
                "8 <- 0.5",
                "9 <- 0.2"
            ]
        },
        "Step 5": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "6 * 6 = 36 (left: 6 6 36) || 36 - 6 = 30 (left: 6 30) || 6 + 30 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 36 36) || 36 + 36 = 72",
                "6 - 6 = 0 (left: 0 6 6) || Input: 3 5 5",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36) || 36 * 2 = 72",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36) || 36 is a single number, so there are no possible next steps.",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 + 36 = 37",
                "6 - 6 = 0 (left: 0 6 6) || 6 / 0 = undefined (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                20.002,
                20.0
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 3.0",
                "2 <- 2.3",
                "3 <- 3.4",
                "4 <- 4.0",
                "5 <- 3.8",
                "6 <- 4.0",
                "7 <- 2.3",
                "8 <- 3.4",
                "9 <- 3.7"
            ]
        },
        "Step 6": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 36 - 6 = 30 (left: 6 30) || 6 + 30 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36) || 36 * 2 = 72 (left: 72)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 36 = 216 (left: 6 216) || 216 - 6 = 210 (left: 210 6) || 210 * 6 = 1260 (left: 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 is already a single number, there are no possible next steps.",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left:",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36) || None, since there is only one number provided.",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 36 = 216 (left: 6 216) || 216 - 6 = 210 (left: 210 6) || 6 + 210 = 216 (left: 210)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 4 = 9 (left: 9)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || There are no possible next steps with just the number 36 as input."
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.001,
                0.003,
                0.003,
                0.001,
                0.003,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 2.8",
                "2 <- 4.4",
                "3 <- 0.3",
                "4 <- 5.1",
                "5 <- 0.2",
                "6 <- 4.4",
                "7 <- 4.8",
                "8 <- 4.0",
                "9 <- 0.6"
            ]
        },
        "Step 7": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 6 36)",
                "6 * 6 = 36 (left: 6 6 36) || 36 - 6 = 30 (left: 6 30) || 6 + 30 = 36 (left: 36) || 36 / 2 = 18",
                "6 - 6 = 0 (left: 0 6 6) || Input: 1 3 4 5",
                "6 * 6 = 36 (left: 6 6 36) || 36 - 6 = 30 (left: 6 30) || 6 + 30 = 36 (left: 36) || 36 / 4 = 9 (left: 9)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left:",
                "6 * 6 = 36 (left: 6 6 36) || 36 - 6 = 30 (left: 6 30) || 6 + 30 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36) || 36 / 10 = 3.6 (left: 3.6)",
                "6 - 6 = 0 (left: 0 6 6) || 2 * 2 = 4 (left: 4 4 8)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                0.003,
                0.001,
                0.001,
                0.003,
                0.003,
                0.0,
                3.0
            ],
            "Resampling": [
                "0 <- 3.7",
                "1 <- 3.8",
                "2 <- 2.4",
                "3 <- 0.9",
                "4 <- 2.4",
                "5 <- 5.9",
                "6 <- 1.2",
                "7 <- 3.6",
                "8 <- 2.3",
                "9 <- 4.8"
            ]
        },
        "Step 8": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || There are no possible next steps as the input is already a single number.",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 6 36)",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 6 = 36 (left: 36) || There are no possible next steps as there is only one number provided.",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6)",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 6 = 36 (left: 36) || There are no possible next steps with only one number.",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 / 36 = 1 (left: 1)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 36 = 216 (left: 6 216) || 6 + 6 = 12 (left: 12 216)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 36 = 216 (left: 6 216) || 216 - 6 = 210 (left: 210 6) || 210 * 6 = 1260 (left: 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 36) || No possible next steps."
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- INIT",
                "2 <- 5.1",
                "3 <- 2.8",
                "4 <- 3.0",
                "5 <- 0.0",
                "6 <- 5.9",
                "7 <- 3.0",
                "8 <- 3.0",
                "9 <- 3.4"
            ]
        },
        "Step 9": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 36 - 6 = 30 (left: 6 30) || 6 + 30 = 36 (left: 36) || There is only one number given, so there are no possible next steps to calculate.",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 36 - 6 = 30 (left: 6 30) || 6 + 30 = 36 (left: 36) || There are no possible next steps as there are no additional numbers provided to perform any operations.",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36) || 36 / 2 = 18 (left: 2)",
                "6 * 6 = 36 (left: 6 6 36) || 36 - 6 = 30 (left:",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 - 0 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 6 = 6 (left: 6)"
            ]
        },
        "Input": "6 6 6 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "5": {
        "puzzle": "1 1 2 12",
        "Step 0": {
            "steps": [
                "12 - 2 = 10 (left: 1 1 10)",
                "1 * 1 = 1 (left: 1 2 12)",
                "2 * 1 = 2 (left: 2 1 12)",
                "2 * 1 = 2 (left: 2 2 12)",
                "2 * 1 = 2 (left: 1 2 12)",
                "12 / 2 = 6 (left: 1 2 6)",
                "12 - 2 = 10 (left: 1 2 10)",
                "2 * 1 = 2 (left: 1 2 12)",
                "12 - 2 = 10 (left: 1 10 ",
                "2 * 1 = 2 (left: 1 2 12)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                22.0,
                60.0,
                0.003,
                3.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.9",
                "2 <- 0.7",
                "3 <- 0.7",
                "4 <- 0.9",
                "5 <- 0.7",
                "6 <- 0.7",
                "7 <- 0.4",
                "8 <- 0.7",
                "9 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 1 = 2 (left: 2 1 12) || 2 * 1 = 2 (left: 2 12)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "2 * 1 = 2 (left: 1 2 12) || Input: 3 5 5 15",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 1 = 12 (left:",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 1 = 11 (left: 2 11)",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)"
            ],
            "Evaluation": [
                60.0,
                40.0,
                60.0,
                0.003,
                60.0,
                40.0,
                60.0,
                0.002,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 0.8",
                "2 <- 1.9",
                "3 <- INIT",
                "4 <- 1.9",
                "5 <- 1.1",
                "6 <- 0.2",
                "7 <- 0.4",
                "8 <- 0.2",
                "9 <- 1.8"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 2 = 10 (left: 1 10  || 10 / 1 = 10 (left: 10)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6) ",
                "12 - 2 = 10 (left: 1 1 10)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7",
                "2 * 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 12)",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 1 = 11 (left: 2 11)",
                "2 * 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 12)",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                1.002,
                0.002,
                0.003,
                60.0,
                1.002,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 1.2",
                "2 <- 0.7",
                "3 <- INIT",
                "4 <- 1.2",
                "5 <- 1.4",
                "6 <- 1.8",
                "7 <- 1.9",
                "8 <- 2.6",
                "9 <- 2.6"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 1 = 2 (left: 1 2 12) || 12 / 1 = 12 (left: || 12 - 1 = 11 (left: 11)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)",
                "12 / 2 = 6 (left: 1 2 6)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6) ",
                "2 * 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "2 * 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                1.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.8",
                "1 <- 2.6",
                "2 <- 1.4",
                "3 <- 3.2",
                "4 <- 2.8",
                "5 <- 3.2",
                "6 <- 3.3",
                "7 <- INIT",
                "8 <- 2.6",
                "9 <- 0.4"
            ]
        },
        "Step 4": {
            "steps": [
                "2 * 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "2 * 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "2 * 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 / 2 = 6 (left: 1 2 6) || Input: 3 5 7",
                "12 / 2 = 6 (left: 1 1 ",
                "2 * 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 4.1",
                "2 <- 1.6",
                "3 <- 1.1",
                "4 <- 2.6",
                "5 <- 0.7",
                "6 <- 0.1",
                "7 <- 4.1",
                "8 <- 1.4",
                "9 <- 1.5"
            ]
        },
        "Step 5": {
            "steps": [
                "2 * 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (2 / 1) * (2 * 12) = 24",
                "2 * 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (2 * 1) * (2 + 12) = 24",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "2 * 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 1 = 11 (left:",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "2 * 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (2 * 1) * (2 * 12) = 24",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 1 = 12 (left: || 12 - 1 = 11 (left: 1 11)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.001,
                0.003,
                60.0,
                20.0,
                40.0,
                20.002,
                0.002,
                40.0
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 5.4",
                "2 <- 2.6",
                "3 <- 1.0",
                "4 <- 1.5",
                "5 <- 3.2",
                "6 <- 5.1",
                "7 <- 0.8",
                "8 <- 0.4",
                "9 <- 5.1"
            ]
        },
        "Step 6": {
            "steps": [
                "2 * 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (2 * 1) * (2 * 12) = 24",
                "2 * 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: 2 * ((2 * 1) / 1) * 12 = 24",
                "2 * 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 12) || 12 / 2 = 6 (left",
                "2 * 1 = 2 (left: 2 1 12) || 2 * 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 1 = 12 (left: || 1 * 12 = 12 (left: 12)",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "2 * 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (2 * 1) * (2 + 12) = 24 || Input: 3 3 4 6\nSteps:\n3 + 3 = 6 (left: 4 6 6)\n6 * 4 = 24 (left: 24 6)\nAnswer: (3 + 3) * 4 + 6 = 24",
                "12 - 2 = 10 (left: 1 10  || 1 * 10 = 10 (left: 10)",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "2 * 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (2 * 1) * (2 + 12) = 24 || Input: 3 3 7 8\nSteps:\n3 * 7 = 21 (left: 3 8 21)\n21 - 8 = 13 (left: 3 13)\n13 + 3 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((3 * 7) - 8) + (3 + 8) = 24"
            ],
            "Evaluation": [
                0.003,
                60.0,
                20.001,
                0.002,
                0.003,
                0.001,
                60.0,
                0.002,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 2.6",
                "2 <- 1.9",
                "3 <- 2.8",
                "4 <- 1.0",
                "5 <- 6.1",
                "6 <- 2.8",
                "7 <- 0.1",
                "8 <- 1.4",
                "9 <- 5.0"
            ]
        },
        "Step 7": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "2 * 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "2 * 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "2 * 1 = 2 (left: 2 1 12) || 2 * 1 = 2 (left: 2 12) || 2 + 12 = 14",
                "2 * 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: 2 * ((2 * 1) / 1) * 12 = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n3 + 5 = 8 (left: 8 12)\n8 * 12 = 96 (left: 96)\nAnswer: (3 * 4) * (3 + 5) = 96",
                "2 * 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) ",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 1 = 11 (left: 2 11)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "2 * 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (2 / 1) * (2 * 12) = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 - 3 = 13 (left: 13)\n13 + 5 = 18 (left: 18)\n18 + 3 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: (("
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.003,
                0.002,
                0.003,
                60.0,
                60.0,
                1.002,
                0.003,
                40.0
            ],
            "Resampling": [
                "0 <- 6.8",
                "1 <- 7.0",
                "2 <- 7.6",
                "3 <- 7.0",
                "4 <- 0.8",
                "5 <- 5.1",
                "6 <- 5.5",
                "7 <- 5.0",
                "8 <- 5.0",
                "9 <- 5.9"
            ]
        },
        "Step 8": {
            "steps": [
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "2 * 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)  || Answer: ((2 * 1) / 1) * 12 = 24",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "12 - 2 = 10 (left: 1 10  || 10 / 1 = 10 (left: 10)",
                "2 * 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (2 * 1) * (2 + 12) = 24 || Input: 3 3 4 6\nSteps:\n3 + 4 = 7 (left: 3 6 7)\n7 - 3 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (3 + 4) * 6 = 24",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 1 = 11 (left: || 12 - 1 = 11 (left: 11)",
                "2 * 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (2 / 1) * (2 * 12) = 24 || Input: 3 3 5 7\n\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 + 3 = 19 (left: 19)\n19 + 5 = 24 (left: 24)\nAnswer: ((3 * 7) - 5) + (3 + 5) = 24",
                "2 * 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (2 / 1) * (2 * 12) = 24 || Input: 3 3 5 7\n\n3 * 7 = 21 (left: 3 5 21)\n21 + 3 = 24 (left: 5 24)\nAnswer: (3 * 7) + 3 = 24",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 1 = 12 (left: || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)"
            ]
        },
        "Input": "1 1 2 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "6": {
        "puzzle": "1 2 2 6",
        "Step 0": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6)",
                "2 * 2 = 4 (left: 4 2 6)",
                "2 + 1 = 3 (left: 3 2 6)",
                "2 + 2 = 4 (left: 4 4 6)",
                "6 - 2 = 4 (left: 1 4 4)",
                "2 + 2 = 4 (left: 4 4)",
                "6 /",
                "6 / 2 = 3 (left: 2 3 6)",
                "6 - 2 = 4 (left: 1 4 6)",
                "6 - 2 = 4 (left: 1 4 6)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                41.0,
                2.0,
                1.002,
                0.003,
                0.003,
                41.0,
                60.0,
                41.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.9",
                "2 <- 0.0",
                "3 <- 0.2",
                "4 <- 0.8",
                "5 <- 0.7",
                "6 <- INIT",
                "7 <- 0.0",
                "8 <- 0.8",
                "9 <- 0.7"
            ]
        },
        "Step 1": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6)",
                "6 - 2 = 4 (left: 1 4 6) || 4 - 1 = 3 (left: 3 6)",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "2 + 1 = 3 (left: 3 2 6) || 3 - 2 = 1 (left: 1 6)",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6)",
                "6 / 2 = 3 (left: 2 3 6) || 6 / 3 = 2 (left:",
                "6 - 2 = 4 (left: 1 4 6)",
                "6 - 2 = 4 (left: 1 4 6) || 4 - 1 = 3 (left: 3 6)",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "6 / 2 = 3 (left: 2 3 6) || Input: 3 5 7"
            ],
            "Evaluation": [
                60.0,
                1.0,
                20.002,
                60.0,
                60.0,
                2.0,
                41.0,
                0.0,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.0",
                "2 <- 0.7",
                "3 <- 1.4",
                "4 <- 1.0",
                "5 <- 1.0",
                "6 <- INIT",
                "7 <- 0.7",
                "8 <- 1.4",
                "9 <- 1.8"
            ]
        },
        "Step 2": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6)",
                "2 / 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)",
                "6 / 2 = 3 (left: 2 3 6) || 6",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 3 2 6)",
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6)",
                "6 - 2 = 4 (left: 1 4 6)",
                "6 / 2 = 3 (left: 2 3 6) || Input: 3 5 1",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2) || 2 / 1 = 2 (left: 2)"
            ],
            "Evaluation": [
                60.0,
                0.001,
                0.003,
                0.001,
                60.0,
                60.0,
                60.0,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 1.4",
                "2 <- 2.4",
                "3 <- 0.0",
                "4 <- 2.4",
                "5 <- 2.4",
                "6 <- 1.0",
                "7 <- 2.4",
                "8 <- 0.9",
                "9 <- 2.5"
            ]
        },
        "Step 3": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 3 2 6) || 3 * 2 = 6 (left: 6 6)",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 3 2 6) || 2 + 6 = 8 (left: 3 8)",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 3 2 6) || 2 + 6 = 8 (left: 3 8)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 3 2 6) || 2 - 6 = -",
                "2 / 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 3 2 6) || 2 / 3 = 0.67 (left: 0.67 6)",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)",
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                60.0,
                0.001,
                60.0,
                0.003,
                0.002,
                2.001,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 1.4",
                "2 <- 3.4",
                "3 <- 2.5",
                "4 <- 3.8",
                "5 <- 2.4",
                "6 <- 0.9",
                "7 <- 1.0",
                "8 <- 3.4",
                "9 <- 2.4"
            ]
        },
        "Step 4": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 + 6 = 10 (left: 1 10)",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 3 2 6) || 2 + 6 = 8 (left: 3 8) || 3 * 8 = 24 (left: 8 24)",
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 3 2 6) || 6 / 2 = 3 (left: 3 3)",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "2 / 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 3 2 6) || 2 + 6 = 8 (left: 3 8) || Input: 5 10 15",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 3 2 6) || 3 + 6 = 9 (left: 2 9)"
            ],
            "Evaluation": [
                60.0,
                0.001,
                1.002,
                0.003,
                0.003,
                0.0,
                1.002,
                0.001,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 1.2",
                "2 <- 3.4",
                "3 <- 1.0",
                "4 <- 4.0",
                "5 <- 1.4",
                "6 <- 1.4",
                "7 <- 2.6",
                "8 <- 3.4",
                "9 <- 1.2"
            ]
        },
        "Step 5": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 3 2 6) || 3 * 2 = 6 (left: 6 6)",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2) || 2 / 1 = 2 (left: 2)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 3 2 6) || 2 + 6 = 8 (left: 3 8) || Possible next steps:",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "6 - 2 = 4 (left: 1 4 6) || 4 + 6 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "6 - 2 = 4 (left: 1 4 6) || 4 - 1 = 3 (left: 3 6)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 3 2 6) || 2 + 6 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2) || 2 / 1 = 2 (left: 2)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                1.001,
                0.001,
                0.003,
                0.001,
                2.0,
                40.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 0.9",
                "2 <- 2.5",
                "3 <- 2.0",
                "4 <- 2.4",
                "5 <- 1.0",
                "6 <- 1.4",
                "7 <- 3.8",
                "8 <- 1.8",
                "9 <- 3.2"
            ]
        },
        "Step 6": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "2 / 1 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 3 2 6) || Input: 4 5 10",
                "2 / 1 = 2 (left: 2 2 6) || 5 + 10 = 15 (left: 15 5)",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2) || 1 * 2 = 2 (left: 2)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 3 2 6) || 2 + 6 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)"
            ],
            "Evaluation": [
                0.003,
                40.001,
                0.003,
                40.0,
                0.003,
                1.002,
                60.0,
                60.0,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 2.4",
                "2 <- 5.8",
                "3 <- 3.4",
                "4 <- 0.9",
                "5 <- 1.8",
                "6 <- 2.4",
                "7 <- 3.4",
                "8 <- 0.0",
                "9 <- 2.4"
            ]
        },
        "Step 7": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 3 2 6) || 2 * 6 = 12 (left: 3 12)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 3 2 6) || 2 + 6 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: ((2 / 1) * (6 / 2)) * (2 + 6) = 24",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 3 2 6) || 2 + 6 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2) || 1 + 2 = 3 (left: 3)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 3 2 6) || 2 + 6 = 8 (left: 3 8)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 3 2 6) || 2 + 6 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 3 2 6) || Input: 4 5 10"
            ],
            "Evaluation": [
                60.0,
                40.001,
                60.0,
                60.0,
                0.003,
                0.003,
                60.0,
                60.0,
                40.001,
                0.003
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 7.8",
                "2 <- 1.4",
                "3 <- 7.7",
                "4 <- 5.7",
                "5 <- 7.0",
                "6 <- 7.8",
                "7 <- 7.6",
                "8 <- 3.4",
                "9 <- 3.2"
            ]
        },
        "Step 8": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2) || 2 - 1 = 1 (left: 1)",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 3 2 6) || 2 + 6 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: ((2 / 1) * (6 / 2)) * (2 + 6) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 - 1 = 3 (left: 3 6) || 6 - 3 = 3 (left: 3)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2) || 2 - 1 = 1 (left: 1)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 3 2 6) || 2 + 6 = 8 (left: 3 8) || 3 * 8 = 24 (left: 8)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 3 2 6) || 2 + 6 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5) ",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 3 2 6) || 2 + 6 = 8 (left: 3 8) || 8 / 3 = 2.66667 (left: 2.66667)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.002,
                60.0,
                0.002,
                60.0,
                0.002,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 8.5",
                "1 <- 2.5",
                "2 <- 3.8",
                "3 <- 2.0",
                "4 <- 2.0",
                "5 <- 8.5",
                "6 <- 7.1",
                "7 <- 8.3",
                "8 <- 2.6",
                "9 <- 3.4"
            ]
        },
        "Step 9": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24",
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 1 + 6 = 7",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 9 / 3 = 3 (left: 3 27)",
                "2 / 1 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "2 / 1 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 3 + 9 = 12 (left: 12)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 3 2 6) || 2 * 6 = 12 (left: 3 12) || 12 - 3 = 9 (left: 9)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 3 2 6) || 2 + 6 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: ((2 / 1) * (6 / 2)) * (2 + 6) = 24 || Input: 3 3 5 7\nSteps:\n3 + 5 = 8 (left: 3 7 8)\n8 - 7 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\nAnswer: (3 + 5) * (7 - 3) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 3 2 6) || 2 + 6 = 8 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)"
            ]
        },
        "Input": "1 2 2 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "7": {
        "puzzle": "1 1 10 12",
        "Step 0": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 10 12)",
                "1 - 1 = 0 (left: 0 10 12)",
                "1 - 1 = 0 (left: 0 10 12)",
                "10 + 1 = 11 (left: 1 11 12)",
                "1 / 1 = 1 (left: 1 10 12)",
                "10 / 1 = 10 (left: 1 10 12)",
                "10 + 1 = 11 (left: 1 11 12)",
                "12 - 1 = 11 (left: 1 10 ",
                "10 + 1 = 11 (left: 1 11 12)"
            ],
            "Evaluation": [
                20.002,
                1.002,
                1.001,
                2.0,
                41.0,
                0.003,
                1.001,
                1.002,
                60.0,
                20.001
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 0.4",
                "2 <- 0.8",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 0.9",
                "6 <- INIT",
                "7 <- 0.8",
                "8 <- 0.9",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 1 = 11 (left: 1 10  || 1 * 10 = 10 (left: 10)",
                "10 + 1 = 11 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 10  || 1 - 10 =",
                "10 + 1 = 11 (left: 1 11 12)",
                "1 + 10 = 11 (left: 11 1 12)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left:",
                "10 + 1 = 11 (left: 1 11 12)",
                "12 - 1 = 11 (left: 1 10  || 1 * 10 = 10 (left: 10)",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "1 - 1 = 0 (left: 0 10 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                21.001,
                20.0,
                1.001,
                0.003,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 0.8",
                "2 <- 0.8",
                "3 <- 1.5",
                "4 <- 0.4",
                "5 <- INIT",
                "6 <- 0.9",
                "7 <- INIT",
                "8 <- 1.4",
                "9 <- 1.5"
            ]
        },
        "Step 2": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "12 - 1 = 11 (left: 1 10  || 1 * 10 = 10 (left: 10)",
                "12 - 1 = 11 (left: 1 10  || 10 / 1 = 10 (left: 10)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 12 - 11 = 1 (left: 1)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 1 12)",
                "1 + 10 = 11 (left: 11 1 12)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 1 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 10 ",
                "1 + 10 = 11 (left: 11 1 12) || 11 - 1 = 10 (left: 10 12)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                0.003,
                20.002,
                60.0,
                0.002,
                60.0,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 2.5",
                "1 <- 0.4",
                "2 <- 1.4",
                "3 <- 2.5",
                "4 <- 2.9",
                "5 <- 2.9",
                "6 <- 0.8",
                "7 <- 2.7",
                "8 <- 2.5",
                "9 <- 1.5"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 10 = 11 (left: 11 1 12) || 11 - 1 = 10 (left: 10 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 * 1 = 11 (left: 11)",
                "1 + 10 = 11 (left: 11 1 12) || 11 / 1 = 11 (left: 11 12)",
                "1 + 10 = 11 (left: 11 1 12) || 11 * 1 = 11 (left: 11 12)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || 12 / 2 = 6 (left: 6 12)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || 12 - 10 = 2 (left: 2 12 12)",
                "12 - 1 = 11 (left: 1 10  || 10 - 1 = 9 (left: 9)",
                "12 - 1 = 11 (left: 1 10  || 10 / 1 = 10 (left: 10)",
                "1 + 10 = 11 (left: 11 1 12) || 11 * 1 = 11 (left: 11 12)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 12 - 1 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                0.001,
                0.003,
                0.003,
                0.002,
                0.001,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 2.5",
                "1 <- 2.7",
                "2 <- 2.9",
                "3 <- 2.5",
                "4 <- 2.4",
                "5 <- 2.5",
                "6 <- 0.8",
                "7 <- 1.4",
                "8 <- 2.5",
                "9 <- 2.9"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 10 = 11 (left: 11 1 12) || 11 - 1 = 10 (left: 10 12)",
                "12 - 1 = 11 (left: 1 10  || 1 * 10 = 10 (left: 10)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || 10 * 12 = 120 (left: 12 120)",
                "1 + 10 = 11 (left: 11 1 12) || 11 * 1 = 11 (left: 11 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 1 12) || 1 * 12 = 12 (left: 12)",
                "1 + 10 = 11 (left: 11 1 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 10  || 1 * 10 = 10 (left: 10)",
                "1 + 10 = 11 (left: 11 1 12) || 12 / 1 = 12 (left: 11 12)",
                "1 + 10 = 11 (left: 11 1 12) || 11 - 1 = 10 (left: 10 12)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || 10 * 12 = 120 (left: 12 120)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                40.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                40.001
            ],
            "Resampling": [
                "0 <- 2.5",
                "1 <- 2.5",
                "2 <- 2.5",
                "3 <- 2.7",
                "4 <- 4.9",
                "5 <- 2.9",
                "6 <- 2.9",
                "7 <- 4.2",
                "8 <- 2.9",
                "9 <- 2.7"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 10 = 11 (left: 11 1 12) || 11 - 1 = 10 (left: 10 12)",
                "1 + 10 = 11 (left: 11 1 12) || 11 / 1 = 11 (left: 11 12)",
                "1 + 10 = 11 (left: 11 1 12) || 11 - 1 = 10 (left: 10 12)",
                "12 - 1 = 11 (left: 1 10  || 10 - 10 = 0 (left: 0)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || 10 * 12 = 120 (left: 12 120) || 120 - 12 = 108 (left: 108)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || ",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || 12 - 10 = 2 (left: 2 12 12)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || 10 * 12 = 120 (left: 12 120) || 12 + 120 = 132 (left: 132)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || 12 - 10 = 2 (left: 2 12 12)",
                "12 - 1 = 11 (left: 1 10  || 1 - 10 = -9 (left: -9)"
            ],
            "Evaluation": [
                1.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                20.002,
                0.003,
                21.001,
                0.003
            ],
            "Resampling": [
                "0 <- 4.9",
                "1 <- 2.4",
                "2 <- 4.2",
                "3 <- 2.7",
                "4 <- 4.9",
                "5 <- 4.2",
                "6 <- 4.9",
                "7 <- 5.6",
                "8 <- 4.2",
                "9 <- 2.7"
            ]
        },
        "Step 6": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || 10 * 12 = 120 (left: 12 120) || 12 * 10 = 120",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 1 12) || 1 * 12 = 12 (left: 12)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || 10 * 12 = 120 (left: 12 120) || 120 - 12 = 108 (left: 108)",
                "12 - 1 = 11 (left: 1 10  || 10 - 1 = 9 (left: 9)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || 10 * 12 = 120 (left: 12 120) || 120 - 12 = 108 (left: 108)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || 10 * 12 = 120 (left: 12 120) || 120 - 12 = 108 (left: 108)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || 10 * 12 = 120 (left: 12 120) || 12 * 10 = 120",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || 12 - 10 = 2 (left: 2 12 12) || 12 + 2 = 14 (left: 14)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || 10 * 12 = 120 (left: 12 120) || 12 + 120 = 132 (left: 132)",
                "12 - 1 = 11 (left: 1 10  || 1 * 10 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 2.9",
                "2 <- 2.7",
                "3 <- 1.5",
                "4 <- 2.9",
                "5 <- 5.8",
                "6 <- 0.8",
                "7 <- 2.9",
                "8 <- 2.5",
                "9 <- 0.9"
            ]
        },
        "Step 7": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 12 * 11 = 132 (left: 1)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || 12 * 10 = 120 (left: 12 120)",
                "12 - 1 = 11 (left: 1 10  || 10 / 1 = 10 (left: 10)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 12 + 11 = 23 (left: 23)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || 12 + 12 = 24 (left: 10 12 24)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || 12 - 10 = 2 (left: 2 12 12) || 12 / 2 = 6 (left: 6 12 12)",
                "12 - 1 = 11 (left: 1 10  || 10 - 1 = 9 (left: 9)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || 12 - 10 = 2 (left: 2 12)",
                "1 + 10 = 11 (left: 11 1 12) || 11 * 1 = 11 (left: 11 12)",
                "10 + 1 = 11 (left: 1 11 12) || Input: 4 7 8"
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.003,
                20.002,
                1.001,
                2.001,
                0.003,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.9",
                "1 <- 7.7",
                "2 <- INIT",
                "3 <- 7.1",
                "4 <- 2.4",
                "5 <- 7.7",
                "6 <- 7.3",
                "7 <- 2.5",
                "8 <- 7.7",
                "9 <- 2.5"
            ]
        },
        "Step 8": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || 12 / 10 = 1.2 (left: 1.2 12)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || 12 - 10 = 2 (left: 2 12) || 24 - 14 = 10 (left: 10 10 6",
                "10 + 1 = 11 (left: 1 11 12)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || 12 * 10 = 120 (left: 12 120) || 12 + 120 = 132 (left: 132)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 1 12) || 12 - 1 = 11 (left: 11)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || 12 - 10 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 12 + 11 = 23 (left: 23) || 23 * 8 = 184 (left: 8)",
                "1 + 10 = 11 (left: 11 1 12) || 12 - 1 = 11 (left: 11 11)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || 12 - 10 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "1 + 10 = 11 (left: 11 1 12) || 11 / 1 = 11 (left: 11 12)"
            ],
            "Evaluation": [
                0.002,
                21.001,
                22.0,
                0.003,
                0.003,
                0.002,
                0.001,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.9",
                "1 <- 2.5",
                "2 <- 0.8",
                "3 <- 2.9",
                "4 <- 7.1",
                "5 <- 7.7",
                "6 <- 2.9",
                "7 <- 8.2",
                "8 <- 8.1",
                "9 <- 5.6"
            ]
        },
        "Step 9": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || 12 / 10 = 1.2 (left: 1.2 12)",
                "1 + 10 = 11 (left: 11 1 12) || 11 - 1 = 10 (left: 10 12)",
                "12 - 1 = 11 (left: 1 10  || 1 * 10 = 10 (left: 10)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || 12 - 10 = 2 (left: 2 12)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || 12 * 10 = 120 (left: 12 120) || 120 - 12 = 108 (left: 108)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || 12 - 10 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || 12 / 10 = 1.2 (left: 1.2 12)",
                "10 + 1 = 11 (left: 1 11 12) || 12 / 1 = 12 (left: 12 12)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || 12 - 10 = 2 (left: 2 12) || 24 - 14 = 10 (left: 10 10 6 || 10 - 10 = 0 (left: 0 6)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 11 = 1 (left: || 5 + 5 = 10 (left: 10 12 12) || 12 - 10 = 2 (left: 2 12 12) || 2 * 12 = 24 (left: 12 24)"
            ]
        },
        "Input": "1 1 10 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "8": {
        "puzzle": "2 2 10 10",
        "Step 0": {
            "steps": [
                "10 + 2 = 12 (left: 2 10 12)",
                "2 * 2 = 4 (left: 4 10 10)",
                "10 - 2 = 8 (left: 2 10 8)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10)"
            ],
            "Evaluation": [
                0.003,
                20.001,
                2.001,
                1.002,
                2.001,
                1.002,
                0.003,
                3.0,
                1.002,
                1.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.7",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- 0.4",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10)",
                "10 - 2 = 8 (left: 2 10 8)",
                "10 - 2 = 8 (left: 2 10 8)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10) || 2 * 8 = 16 (left: 16 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 + 2 = 12 (left: 2 10 12)",
                "10 / 2 = 5 (left: 2 10 ",
                "10 - 2 = 8 (left: 2 8 10) || 10 - 2 = 8 (left: 8 10)",
                "10 - 2 = 8 (left: 2 10 8)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                1.002,
                3.0,
                1.002,
                1.002,
                0.003,
                2.0,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.7",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- 0.1",
                "5 <- 0.1",
                "6 <- 1.3",
                "7 <- INIT",
                "8 <- 0.7",
                "9 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10)",
                "10 / 2 = 5 (left: 2 10  || 2 * 10 = 20 (left: 20)",
                "10 / 2 = 5 (left: 2 5 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 40)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 - 2 = 8 (left: 2 8 10) || 10 / 2 = 5 (left: 5 10)",
                "10 / 2 = 5 (left: 2 10 ",
                "10 - 2 = 8 (left: 2 8 10) || 10 + 2 = 12 (left: 4 12)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                2.001,
                2.001,
                1.001,
                1.002,
                0.001,
                21.001,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.7",
                "2 <- 2.7",
                "3 <- INIT",
                "4 <- 2.7",
                "5 <- 2.2",
                "6 <- INIT",
                "7 <- 2.7",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10) || 5 * 2 = 10 (left: 10 10)",
                "10 / 2 = 5 (left: 2 10  || 10 / 2 = 5 (left: 5)",
                "10 / 2 = 5 (left: 2 10  || 2 * 10 = 20 (left: 20)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 / 2 = 5 (left: 2 10  || 10 - 2 = 8 (left: 8)",
                "10 / 2 = 5 (left: 2 5 10) || 5 * 2 = 10 (left:",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 / 2 = 5 (left: 2 10  || 10 - 2 = 8 (left: 8)",
                "10 + 2 = 12 (left: 2 10 12)",
                "10 / 2 = 5 (left: 2 5 10)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                2.001,
                0.003,
                0.002,
                1.002,
                0.001,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 1.3",
                "2 <- 0.7",
                "3 <- 2.4",
                "4 <- 2.7",
                "5 <- 0.1",
                "6 <- 0.1",
                "7 <- 0.7",
                "8 <- 3.3",
                "9 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "10 - 2 = 8 (left: 2 10 8) || 10 / 2 = 5 (left: 5 8)",
                "10 - 2 = 8 (left: 2 8 10) || 2 * 8 = 16 (left: 16 10)",
                "10 - 2 = 8 (left: 2 8 10) || 2 * 8 = 16 (left: 16 10)",
                "2 * 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 40) || 10 + 40 = 50 (left: 50)",
                "10 / 2 = 5 (left: 2 10  || 10 - 2 = 8 (left: 8)",
                "2 * 2 = 4 (left: 4 10 10) || Input:",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 - 2 = 8 (left: 2 8 10) || 10 / 2 = 5 (left: 5 10)",
                "10 - 2 = 8 (left: 2 8 10) || 10 / 2 = 5 (left: 5 10)",
                "10 / 2 = 5 (left: 2 5 10)"
            ],
            "Evaluation": [
                1.0,
                0.002,
                0.003,
                0.003,
                0.001,
                20.002,
                2.0,
                0.002,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- INIT",
                "2 <- 2.7",
                "3 <- 1.2",
                "4 <- 4.5",
                "5 <- 0.2",
                "6 <- INIT",
                "7 <- 0.4",
                "8 <- 4.6",
                "9 <- 0.1"
            ]
        },
        "Step 5": {
            "steps": [
                "10 - 2 = 8 (left: 2 10 8) || 10 / 2 = 5 (left: 5 8)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 / 2 = 5 (left: 2 10  || 2 * 10 = 20 (left: 20)",
                "10 - 2 = 8 (left: 2 10 8) || 2 * 10 = 20 (left: 8 20)",
                "2 * 2 = 4 (left: 4 10 10) || Input: || Please provide a set of numbers to generate possible next steps.",
                "10 - 2 = 8 (left: 2 10 8) || 8 * 2 = 16 (left:",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10) || 10 / 2 = 5 (left: 5 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)"
            ],
            "Evaluation": [
                0.001,
                1.002,
                0.003,
                0.002,
                0.003,
                1.0,
                1.002,
                20.001,
                21.001,
                1.002
            ],
            "Resampling": [
                "0 <- 5.7",
                "1 <- 5.7",
                "2 <- 0.1",
                "3 <- 4.6",
                "4 <- 1.3",
                "5 <- 5.8",
                "6 <- 4.5",
                "7 <- 5.7",
                "8 <- 2.7",
                "9 <- 5.8"
            ]
        },
        "Step 6": {
            "steps": [
                "10 - 2 = 8 (left: 2 8 10) || 10 / 2 = 5 (left: 5 10) || 10 / 5 = 2 (left: 2 10)",
                "10 - 2 = 8 (left: 2 8 10) || 10 / 2 = 5 (left: 5 10) || 10 / 5 = 2 (left: 2)",
                "2 * 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 40)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10)",
                "10 - 2 = 8 (left: 2 8 10) || 2 * 8 = 16 (left: 16 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 10 40)",
                "2 * 2 = 4 (left: 4 10 10) || Input: || There is no input provided. Please provide the input values in order to find the possible next steps.",
                "10 - 2 = 8 (left: 2 8 10) || 10 / 2 = 5 (left: 5 10) || 10 / 5 = 2 (left: 2)",
                "10 / 2 = 5 (left: 2 10  || 2 * 10 = 20 (left: 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)"
            ],
            "Evaluation": [
                3.0,
                0.002,
                1.001,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.8",
                "1 <- 5.8",
                "2 <- 0.7",
                "3 <- INIT",
                "4 <- 5.8",
                "5 <- 5.7",
                "6 <- 5.8",
                "7 <- 2.7",
                "8 <- 2.3",
                "9 <- 5.8"
            ]
        },
        "Step 7": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 - 2 = 8 (left: 2 8 10) || 10 - 2 = 8 (left: 8 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 - 2 = 8 (left: 2 8 10) || 10 / 2 = 5 (left: 5 10) || 10 / 5 = 2 (left: 2)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 / 2 = 5 (left: 2 10  || 2 * 10 = 20 (left: 20)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)"
            ],
            "Evaluation": [
                2.0,
                2.001,
                0.002,
                0.003,
                0.002,
                0.002,
                2.001,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 4.9",
                "2 <- 2.2",
                "3 <- 2.7",
                "4 <- 4.5",
                "5 <- 4.5",
                "6 <- 4.5",
                "7 <- 5.7",
                "8 <- 1.9",
                "9 <- 7.6"
            ]
        },
        "Step 8": {
            "steps": [
                "10 - 2 = 8 (left: 2 8 10) || 10 / 2 = 5 (left: 5 10) || 10 / 5 = 2 (left: 2 10) || 10 / 2 = 5 (left: 5)",
                "10 / 2 = 5 (left: 2 5 10) || 2 * 5 = 10 (left: 10 10)",
                "10 / 2 = 5 (left: 2 5 10) || Possible",
                "10 / 2 = 5 (left: 2 10  || Input: 5 7",
                "2 * 2 = 4 (left: 4 10 10) || Input: || There doesn't seem to be any input provided. Could you please provide the input so I can suggest possible next steps?",
                "2 * 2 = 4 (left: 4 10 10) || Input: || There seems to be a mistake in the input provided. Can you please provide the correct input for me to generate possible next steps?",
                "2 * 2 = 4 (left: 4 10 10) || Input: || There is no input provided. Please provide a set of numbers to generate possible next steps.",
                "10 - 2 = 8 (left: 2 8 10) || 10 / 2 = 5 (left: 5 10) || Input: 3 6 9",
                "10 - 2 = 8 (left: 2 10 8) || 10 + 8 = 18 (left: 18)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 60)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                20.0,
                20.0
            ],
            "Resampling": [
                "0 <- 8.8",
                "1 <- 2.7",
                "2 <- 8.9",
                "3 <- 8.9",
                "4 <- 8.8",
                "5 <- 2.3",
                "6 <- 2.9",
                "7 <- 8.8",
                "8 <- 5.7",
                "9 <- 1.7"
            ]
        },
        "Step 9": {
            "steps": [
                "10 - 2 = 8 (left: 2 10 8) || 10 + 8 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "10 / 2 = 5 (left: 2 10  || 2 + 10 = 12",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 60) || 5 * 5 = ",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 60) || 10 - 60 = -50 (left: -50)",
                "10 - 2 = 8 (left: 2 10 8) || 10 + 8 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10)",
                "10 - 2 = 8 (left: 2 10 8) || 10 + 8 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "10 - 2 = 8 (left: 2 8 10) || 10 / 2 = 5 (left: 5 10) || 5 * 10 = 50 (left: 50)",
                "10 / 2 = 5 (left: 2 10  || 2 * 10 = 20 (left: 20)"
            ]
        },
        "Input": "2 2 10 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "9": {
        "puzzle": "1 1 1 12",
        "Step 0": {
            "steps": [
                "12 - 1 = 11 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1 12)",
                "1 * 1 = 1 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "12 - 1 = 11 (left: 1 1 11)",
                "12 / 1 = 12 (left: 1 1 12)",
                "1 * 1 = 1 (left: 1 1 12)",
                "12 - 1 = 11 (left: 1 1 11)",
                "12 + 1 = 13 (left: 1 1 13)",
                "1 + 1 = 2 (left: 2 1 12)"
            ],
            "Evaluation": [
                2.001,
                40.0,
                40.001,
                40.0,
                1.001,
                20.001,
                0.0,
                3.0,
                20.002,
                60.0
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 0.8",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 0.9",
                "6 <- 0.9",
                "7 <- 0.1",
                "8 <- 0.7",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 12) || 2 * 1 = 2 (left: 2 12)",
                "12 + 1 = 13 (left: 1 1 13) || 1 * 1 = 1 (left: 1 13)",
                "12 / 1 = 12 (left: 1 1 12)",
                "12 - 1 = 11 (left: 1 1 11)",
                "12 / 1 = 12 (left: 1 1 12)",
                "1 + 1 = 2 (left: 2 1 12) || 12 - 2 = 10 (",
                "1 + 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 1 / 1 = 1 (left: 1 12)",
                "12 - 1 = 11 (left: 1 1 11) || 11 / 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                20.002,
                0.003,
                21.001,
                0.003,
                60.0,
                0.003,
                1.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- 1.0",
                "4 <- 0.8",
                "5 <- 1.6",
                "6 <- 0.3",
                "7 <- 0.7",
                "8 <- 0.2",
                "9 <- 0.9"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 12) || 2 * 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "12 / 1 = 12 (left: 1 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || Possible",
                "1 + 1 = 2 (left: 2 1 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "12 + 1 = 13 (left: 1 1 13) || 13 / 1 = 13 (left: 1 13)",
                "1 + 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 1 12) || 1 + 2 = 3 (left: 3",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "12 - 1 = 11 (left: 1 1 11) || 1 - 1 = 0 (left: 0 11)",
                "1 * 1 = 1 (left: 1 1 12) || 1 / 1 = 1 (left: 1 12)",
                "1 + 1 = 2 (left: 2 1 12) || 1 + 12 = 13 (left: 2 13)"
            ],
            "Evaluation": [
                0.003,
                40.001,
                0.003,
                60.0,
                0.003,
                0.002,
                20.0,
                0.0,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 1.2",
                "2 <- 1.0",
                "3 <- 0.1",
                "4 <- 1.6",
                "5 <- 0.9",
                "6 <- 1.0",
                "7 <- 0.9",
                "8 <- 1.2",
                "9 <- 1.2"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 1 12) || 2 * 1 = 2 (left: 2 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 + 1 = 2 (left: 2 1 12) || 2 * 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 1 12) || 1 / 1 = 1 (left: 1 12)",
                "1 + 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 1 12) || 12 / 2 = 6 (left: 2 6)",
                "1 + 1 = 2 (left: 2 1 12) || Input: 1 3 3 2",
                "1 + 1 = 2 (left: 2 1 12) || 2 * 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "1 + 1 = 2 (left: 2 1 12) || 1 * 2 = 2 (left: 2 12)",
                "12 / 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)"
            ],
            "Evaluation": [
                60.0,
                22.0,
                0.003,
                1.001,
                0.0,
                0.003,
                0.003,
                60.0,
                21.0,
                1.001
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 0.5",
                "2 <- 2.3",
                "3 <- 0.9",
                "4 <- 1.0",
                "5 <- 1.2",
                "6 <- 1.0",
                "7 <- 2.1",
                "8 <- 0.9",
                "9 <- 3.1"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 1 12) || 2 * 1 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 + 1 = 2 (left: 2 1 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 + 1) * (1 + 12) = 24",
                "1 + 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 12)",
                "1 + 1 = 2 (left: 2 1 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "12 / 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12)",
                "1 + 1 = 2 (left: 2 1 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "1 + 1 = 2 (left: 2 1 12) || 2 - 1 = 1 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12) || 12 * 1 = 12 (left: 12)"
            ],
            "Evaluation": [
                0.003,
                21.0,
                60.0,
                60.0,
                60.0,
                0.001,
                60.0,
                20.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 4.3",
                "2 <- 2.3",
                "3 <- 4.4",
                "4 <- 4.3",
                "5 <- 0.3",
                "6 <- 0.9",
                "7 <- 4.7",
                "8 <- 1.4",
                "9 <- 4.6"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 1 12) || 2 * 1 = 2 (left: 2 2 12)",
                "1 + 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 1 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 + 1) * (1 + 12) = 24",
                "1 + 1 = 2 (left: 2 1 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 + 1) * (1 + 12) = 24",
                "1 + 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 12) || 6 + 10 = 16 (left: 16)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 + 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "1 + 1 = 2 (left: 2 1 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 + 1) * (1 + 12) = 24"
            ],
            "Evaluation": [
                20.002,
                0.0,
                60.0,
                40.001,
                0.003,
                20.001,
                60.0,
                0.002,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 3.7",
                "2 <- 5.9",
                "3 <- 5.6",
                "4 <- 5.3",
                "5 <- 3.7",
                "6 <- 3.8",
                "7 <- 5.9",
                "8 <- INIT",
                "9 <- 1.0"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 + 1) * (1 * 12) = 24",
                "1 + 1 = 2 (left: 2 1 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 1 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 + 1) * (1 + 12) = 24 || Input: 2 3 4 6\nSteps:\n3 + 6 = 9 (left: 2 4 9)\n4 * 2 = 8 (left: 8 9)\n8 * 9 = 72 (left: 72)\nAnswer: (2 * 4) * (3 + 6) = 72",
                "1 + 1 = 2 (left: 2 1 12) || 2 / 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "1 + 1 = 2 (left: 2 1 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 + 1) * (1 + 12) = 24 || Input: 3 3 3 8\nSteps:\n3 + 3 = 6 (left: 6 3 8)\n6 * 3 = 18 (left: 18 8)\n18 / 8 = 2.25 (left: 2.25)\n2.25 * 8 = 24 (left: 24)\nAnswer: ((3 + 3) * 3) * 8 = 24",
                "1 + 1 = 2 (left: 2 1 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "12 / 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 * 0 = 0 (left: 0)",
                "1 + 1 = 2 (left: 2 1 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 + 1) * (1 + 12) = 24 || Input: 3 3 5 7\nSteps:\n3 + 5 = 8 (left: 3 7 8)\n8 - 7 = 1 (left: 3 1)\n1 * 3 = 3 (left: 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 - 24 = 3 (left: 3)\n3 + ",
                "12 - 1 = 11 (left: 1 1 11)",
                "1 + 1 = 2 (left: 2 1 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)"
            ]
        },
        "Input": "1 1 1 12",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "10": {
        "puzzle": "1 1 2 8",
        "Step 0": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 8)",
                "1 * 1 = 1 (left: 1 2 8)",
                "2 * 1 = 2 (left: 2 2 8)",
                "8 - 2 = 6 (left: 1 2 6)",
                "8 - 2 = 6 (left: 1 6 8)",
                "8 - 2 = 6 (left: 1 6 8)",
                "8 - 2 = 6 (left: 1 1 6)",
                "2 * 1 = 2 (left: 2 2 8)",
                "1 * 2 = 2 (left: 1 2 ",
                "2 * 1 = 2 (left: 2 2 8)"
            ],
            "Evaluation": [
                0.003,
                22.0,
                0.003,
                0.002,
                0.002,
                0.003,
                3.0,
                1.002,
                20.002,
                21.001
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.9",
                "4 <- 0.9",
                "5 <- 0.1",
                "6 <- 0.1",
                "7 <- 0.9",
                "8 <- 0.9",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 2 = 2 (left: 1 2  || 1 * 2 = 2 (left: 2)",
                "8 - 2 = 6 (left: 1 1 6)",
                "8 - 2 = 6 (left: 1 6 8)",
                "2 * 1 = 2 (left: 2 2 8) || 2 / 2 = 1 (left: 1 8)",
                "2 * 1 = 2 (left: 2 2 8) || 2 - 2 = 0 (left: 0 8)",
                "1 * 1 = 1 (left: 1 2 8) || Possible next steps:",
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10)",
                "2 * 1 = 2 (left: 2 2 8) || 8 + 2 = 10 (left: 2 10)",
                "2 * 1 = 2 (left: 2 2 8) || 2 / 2 = 1 (left: 1 8)",
                "2 * 1 = 2 (left: 2 2 8)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                0.003,
                41.0,
                41.0,
                0.003,
                60.0,
                3.0,
                40.0,
                2.001
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- 1.3",
                "4 <- 1.8",
                "5 <- INIT",
                "6 <- 1.6",
                "7 <- INIT",
                "8 <- 1.8",
                "9 <- 1.8"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "8 - 2 = 6 (left: 1 2 6)",
                "1 * 1 = 1 (left: 1 2 8) || 2 / 1 = 2 (left: 2 8)",
                "2 * 1 = 2 (left: 2 2 8) || 2 / 2 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "2 * 1 = 2 (left: 2 2 8) || 2 / 2 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8 8)",
                "2 * 1 = 2 (left: 2 8 8)",
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 + 2 = 3 (left: 3 8)",
                "2 * 1 = 2 (left: 2 2 8) || 2 / 2 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "2 * 1 = 2 (left: 2 2 8) || 2 / 2 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)"
            ],
            "Evaluation": [
                0.002,
                1.002,
                1.002,
                0.003,
                0.003,
                0.003,
                0.003,
                60.0,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.4",
                "2 <- 1.3",
                "3 <- 2.7",
                "4 <- 0.9",
                "5 <- 1.3",
                "6 <- 1.3",
                "7 <- 0.1",
                "8 <- 0.8",
                "9 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 8) || 2 / 2 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "2 * 1 = 2 (left: 2 2 8) || 2 - 2 = 0 (left: 0 8) || 5 - 5 = 0 (left: 0)",
                "2 * 1 = 2 (left: 2 2 8) || 2 / 2 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "2 * 1 = 2 (left: 2 2 8) || 2 + 4 = 6 (left: 6 4)",
                "2 * 1 = 2 (left: 2 2 8) || 2 / 2 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8 8)",
                "2 * 1 = 2 (left: 2 2 8) || 2 / 2 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "1 * 1 = 1 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "1 * 2 = 2 (left: 1 2  || 2 - 1 = 1 (left: 1)",
                "2 * 1 = 2 (left: 2 2 8) || 2 / 2 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.001,
                60.0,
                60.0,
                1.002,
                0.003,
                60.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.7",
                "1 <- 1.8",
                "2 <- 3.4",
                "3 <- 3.4",
                "4 <- INIT",
                "5 <- 1.3",
                "6 <- 3.3",
                "7 <- 2.7",
                "8 <- 3.4",
                "9 <- 3.4"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "2 * 1 = 2 (left: 2 2 8) || 2 / 2 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "2 * 1 = 2 (left: 2 2 8) || 2 + 4 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24)",
                "2 * 1 = 2 (left: 2 2 8) || 2 + 4 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24)",
                "2 * 1 = 2 (left: 2 2 8)",
                "2 * 1 = 2 (left: 2 2 8) || 2 / 2 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * 8 = 24",
                "1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "2 * 1 = 2 (left: 2 2 8) || 2 + 4 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24)",
                "2 * 1 = 2 (left: 2 2 8) || 2 + 4 = 6 (left: 6 4) || 6 - 4 = 2 (left: 2)"
            ],
            "Evaluation": [
                0.001,
                0.001,
                60.0,
                60.0,
                0.003,
                0.002,
                60.0,
                60.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 4.7",
                "1 <- 4.6",
                "2 <- 0.9",
                "3 <- 1.6",
                "4 <- 4.8",
                "5 <- 1.3",
                "6 <- 4.6",
                "7 <- 4.8",
                "8 <- 3.7",
                "9 <- 4.2"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * 8 = 24",
                "1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * 8 = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n12 * 3 = 36 (left: 36)\n36 / 5 = 7.2 (left: 7.2)\n7.2 - 6 = 1.2 (left: 1.2)\n1.2 * 3",
                "2 * 1 = 2 (left: 2 2 8) || Possible next steps",
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "2 * 1 = 2 (left: 2 2 8) || 2 + 4 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24) || Answer: (2 * 1) * (2 + 8) = 24",
                "2 * 1 = 2 (left: 2 2 8) || 2 / 2 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * 8 = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n12 - 6 = 6 (left: 3 6)\n3 * 6 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((5 + 7) - 6) * (3 + 6) = 24",
                "2 * 1 = 2 (left: 2 2 8) || 2 + 4 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24) || Answer: (2 * 1) * (2 + 8) = 24",
                "1 * 1 = 1 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "2 * 1 = 2 (left: 2 2 8) || 2 + 4 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24) || Answer: (2 * 1 + 2) * 8 = 24"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.003,
                0.003,
                60.0,
                0.003,
                60.0,
                60.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 3.7",
                "2 <- 5.1",
                "3 <- 5.7",
                "4 <- 4.3",
                "5 <- 5.0",
                "6 <- 5.0",
                "7 <- 5.6",
                "8 <- 2.7",
                "9 <- 5.1"
            ]
        },
        "Step 6": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 8) || 2 + 4 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24) || Answer: (2 * 1) * (2 + 8) = 24 || Input: 3 3 4 6\nSteps:\n3 + 3 = 6 (left: 4 6 6)\n6 * 4 = 24 (left: 24 6)\nAnswer: (3 + 3) * 4 = 24",
                "1 * 1 = 1 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * 8 = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n12 * 3 = 36 (left: 36)\n36 / 5 = 7.2 (left: 7.2)\n7.2 - 6 = 1.2 (left: 1.2)\n1.2 * 3 || = 3.6 (left: 3.6)\nAnswer: ((3 + 5 + 7) * 6) / (3 + 6 + 7.2) = 24",
                "2 * 1 = 2 (left: 2 2 8) || 2 + 4 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24) || Answer: (2 * 1) * (2 + 8) = 24 || Input: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 9 3 8)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) * (3 + 8) = 24",
                "2 * 1 = 2 (left: 2 2 8) || 2 + 4 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24) || Answer: (2 * 1) + (2 * 8) = 24",
                "1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * 8 = 24 || Input: 3 3 6 8\nSteps:\n3 + 6 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 + 6) * (8 - 3) = 24",
                "1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * 8 = 24 || Input: 3 3 4 6\nSteps:\n3 + 4 = 7 (left: 3 6 7)\n7 - 3 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (3 + 4) * 6 = 24",
                "1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * 8 = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n12 - 6 = 6 (left: 3 6)\n3 * 6 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((5 + 7) - 6) * (3 + 6) = 24 || Input: 2 3 5 7\nSteps:\n2 * 7 = 14 (left: 3 5 14)\n14 - 5 = 9 (left: 3 9)\n9 * 3 = 27 (left: 27)\n27 - 3 = 24 (left: 24)\nAnswer: ((2 * 7) - 5) * (3 - 3) = 24",
                "1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 3 5)",
                "1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * 8 = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n12 * 3 = 36 (left: 36)\n36 / 5 = 7.2 (left: 7.2)\n7.2 - 6 = 1.2 (left: 1.2)\n1.2 * 3 || = 24 (left: 24)\nAnswer: ((5 + 7) * 3) - 6 = 24"
            ],
            "Evaluation": [
                40.0,
                0.002,
                60.0,
                60.0,
                40.001,
                60.0,
                40.0,
                60.0,
                1.001,
                60.0
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 5.4",
                "2 <- 6.7",
                "3 <- 6.7",
                "4 <- 0.1",
                "5 <- 5.1",
                "6 <- 3.3",
                "7 <- 2.7",
                "8 <- 6.9",
                "9 <- 6.7"
            ]
        },
        "Step 7": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 8) || 2 + 4 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24) || Answer: (2 * 1) * (2 + 8) = 24",
                "2 * 1 = 2 (left: 2 2 8) || 2 + 4 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24) || Answer: (2 * 1) * (2 + 8) = 24 || Input: 3 3 6 7\nSteps:\n3 + 7 = 10 (left: 3 6 10)\n10 - 6 = 4 (left: 3 4)\n4 * 3 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((3 + 7) - 6) * (3 * 2) = 24",
                "1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * 8 = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n12 - 6 = 6 (left: 3 6)\n3 * 6 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((5 + 7) - 6) * (3 + 6) = 24 || Input: 2 3 5 7\nSteps:\n2 * 7 = 14 (left: 3 5 14)\n14 - 5 = 9 (left: 3 9)\n9 * 3 = 27 (left: 27)\n27 - 3 = 24 (left: 24)\nAnswer: ((2 * 7) - 5) * (3 - 3) = 24 || Input: 4 4 5 6\nSteps:\n4 + 6 = 10 (left: 4 5 10)\n5 * 4 = 20 (left: 10 20)\n20 / 10 = 2 (left: 2 20)\n2 * 20 = 40 (left: 40)\n40 - 16 = 24 (left: 24)\nAnswer: (((4 + 6) * 5) / ",
                "1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * 8 = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n12 - 6 = 6 (left: 3 6)\n3 * 6 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((5 + 7) - 6) * (3 + 6) = 24 || Input: 2 3 5 7\nSteps:\n2 * 7 = 14 (left: 3 5 14)\n14 - 5 = 9 (left: 3 9)\n9 * 3 = 27 (left: 27)\n27 - 3 = 24 (left: 24)\nAnswer: ((2 * 7) - 5) * (3 - 3) = 24 || Input: 3 6 7 8\nSteps:\n6 + 8 = 14 (left: 3 7 14)\n14 - 7 = 7 (left: 3 7)\n7 * 3 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: ((6 + 8) - 7) * (3 + 3) = 24",
                "1 * 1 = 1 (left: 1 2 8) || Input: 3 7 9",
                "1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * 8 = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n12 * 3 = 36 (left: 36)\n36 / 5 = 7.2 (left: 7.2)\n7.2 - 6 = 1.2 (left: 1.2)\n1.2 * 3 || Answer: ((3 + 5) - 6) * 7.2 = 24",
                "1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * 8 = 24",
                "1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * 8 = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n12 * 3 = 36 (left: 36)\n36 / 5 = 7.2 (left: 7.2)\n7.2 - 6 = 1.2 (left: 1.2)\n1.2 * 3 || = 24 (left: 24)\nAnswer: ((5 + 7) * 3) - 6 = 24 || Input: 2 3 5 7\nSteps:\n2 * 7 = 14 (left: 3 5 14)\n3 + 5 = 8 (left: 8 14)\n8 * 14 = 112 (left: 112)\n112 / 7 = 16 (left: 16)\n16 - 14 = 2 (left: 2 16)\n2 * 3 = 6 (left: 6 16",
                "1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * 8 = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n12 - 6 = 6 (left: 3 6)\n3 * 6 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((5 + 7) - 6) * (3 + 6) = 24 || Input: 2 3 5 7\nSteps:\n2 * 7 = 14 (left: 3 5 14)\n14 - 5 = 9 (left: 3 9)\n9 * 3 = 27 (left: 27)\n27 - 3 = 24 (left: 24)\nAnswer: ((2 * 7) - 5) * (3 - 3) = 24 || Input: 2 4 6 8\nSteps:\n6 + 8 = 14 (left: 2 4 14)\n14 - 4 = 10 (left: 2 10)\n10 * 2 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((6 + 8) - 4) * (2 + 10) = 24"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                0.003,
                0.003,
                60.0,
                40.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 7.7",
                "1 <- 6.3",
                "2 <- 4.6",
                "3 <- 5.9",
                "4 <- 7.0",
                "5 <- 5.4",
                "6 <- 6.4",
                "7 <- 7.1",
                "8 <- 5.6",
                "9 <- 7.6"
            ]
        },
        "Step 8": {
            "steps": [
                "1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * 8 = 24",
                "2 * 1 = 2 (left: 2 2 8) || 2 + 4 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24) || Answer: (2 * 1) * (2 + 8) = 24 || Input: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 9 3 8)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) * (3 + 8) = 24 || Sorry, there is no way to obtain 24 using the numbers 3, 3, 3, and 8 with basic arithmetic operations.",
                "1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * 8 = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n12 - 5 = 7 (left: 3 7)\n3 * 7 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: ((3 * 4) - 5) + 3 = 24",
                "2 * 1 = 2 (left: 2 2 8) || 2 + 4 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24) || Answer: (2 * 1 + 2) * 8 = 24 || Input: 3 3 4 7\n\n3 * 7 = 21 (left: 3 4 21)\n4 + 3 = 7 (left: 7 21)\n7 * 3 = 21 (left: 21)\nAnswer: (3 * 7) + (4 + 3) = 24",
                "2 * 1 = 2 (left: 2 2 8) || 2 + 4 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24) || Answer: (2 * 1) * (2 + 8) = 24 || Input: 3 3 4 6\nSteps:\n3 * 4 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nAnswer: (3 * 4) * (6 - 3) = 24",
                "2 * 1 = 2 (left: 2 2 8) || 2 + 4 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24) || Answer: (2 * 1) * (2 + 8) = 24 || In this case, we can't get 24 using the given numbers and basic arithmetic operations.",
                "2 * 1 = 2 (left: 2 2 8) || 2 + 4 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24) || Answer: (2 * 1) + (2 * 8) = 24 || Input: 3 3 6 9\nSteps:\n3 * 3 = 9 (left: 6 9 9)\n9 - 6 = 3 (left: 3 9)\n3 * 9 = 27 (left: 27)\nAnswer: (3 * 3) * (6 - 9) = 24",
                "2 * 1 = 2 (left: 2 2 8) || 2 + 4 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24) || Answer: (2 * 1) * (2 + 8) = 24 || Input: 3 3 6 7\nSteps:\n3 + 7 = 10 (left: 3 6 10)\n10 - 6 = 4 (left: 3 4)\n4 * 3 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((3 + 7) - 6) * (3 * 2) = 24 || Input: 2 3 5 7\nSteps:\n2 * 7 = 14 (left: 3 5 14)\n14 - 5 = 9 (left: 3 9)\n9 * 3 = 27 (left: 27)\n27 - 3 = 24 (left: 24)\nAnswer: ((2 * 7) - 5) * (3 - 3) = 24",
                "1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * 8 = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n12 - 6 = 6 (left: 3 6)\n3 * 6 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((5 + 7) - 6) * (3 + 6) = 24 || Input: 2 3 5 7\n\n2 * 7 = 14 (left: 3 5 14)\n5 + 14 = 19 (left: 3 19)\n19 - 3 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\n\nAnswer: ((2 * 7) + 5 - 3) + 8 = 24",
                "1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * 8 = 24 || Input: 3 3 4 7\nSteps:\n3 + 4 = 7 (left: 3 7 7)\n7 + 7 = 14 (left: 14 7)\n14 - 7 = 7 (left: 7 7)\n7 * 3 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: ((3 + 4) + (7 + 7"
            ],
            "Evaluation": [
                60.0,
                0.003,
                60.0,
                60.0,
                60.0,
                0.003,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 7.6",
                "1 <- 5.4",
                "2 <- 8.3",
                "3 <- 7.1",
                "4 <- 8.2",
                "5 <- 7.2",
                "6 <- 6.2",
                "7 <- 7.2",
                "8 <- 8.8",
                "9 <- 7.8"
            ]
        },
        "Step 9": {
            "steps": [
                "1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * 8 = 24 || Input: 3 3 3 8\nSteps:\n3 + 3 = 6 (left: 6 3 8)\n6 * 3 = 18 (left: 18 8)\n18 + 8 = 26 (left: 26)\nAnswer: (3 + 3) * (3 * 8) = 24",
                "2 * 1 = 2 (left: 2 2 8) || 2 + 4 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24) || Answer: (2 * 1) * (2 + 8) = 24 || In the last example, the calculation should be (2 * 1) * (2 + 8) = 24.",
                "2 * 1 = 2 (left: 2 2 8) || 2 + 4 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24) || Answer: (2 * 1 + 2) * 8 = 24 || Input: 3 3 4 7\n\n3 * 7 = 21 (left: 3 4 21)\n4 + 3 = 7 (left: 7 21)\n7 * 3 = 21 (left: 21)\nAnswer: (3 * 7) + (4 + 3) = 24 || Input: 2 3 4 6\n\n3 * 6 = 18 (left: 2 4 18)\n4 - 2 = 2 (left: 2 18)\n2 * 18 = 36 (left: 36)\nAnswer: (4 - 2) * (3 * 6) = 24",
                "2 * 1 = 2 (left: 2 2 8) || 2 + 4 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24) || Answer: (2 * 1) * (2 + 8) = 24 || Input: 3 3 6 7\nSteps:\n3 + 7 = 10 (left: 3 6 10)\n10 - 6 = 4 (left: 3 4)\n4 * 3 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((3 + 7) - 6) * (3 * 2) = 24 || Input: 2 3 5 7\nSteps:\n5 + 7 = 12 (left: 2 3 12)\n3 * 2 = 6 (left: 6 12)\n12 - 6 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36)\n36 / 3 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer",
                "1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * 8 = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n12 - 5 = 7 (left: 3 7)\n3 * 7 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: ((3 * 4) - 5) + 3 = 24 || Input: 2 3 4 6\nSteps:\n3 + 6 = 9 (left: 2 4 9)\n4 * 2 = 8 (left: 8 9)\n8 * 9 = 72 (left: 72)\n72 / 3 = 24 (left: 24)\nAnswer: ((3 + 6) * 2) * (4 / 3) = 24",
                "1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * 8 = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n12 - 6 = 6 (left: 3 6)\n3 * 6 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((5 + 7) - 6) * (3 + 6) = 24 || Input: 2 3 5 7\nSteps:\n2 * 7 = 14 (left: 3 5 14)\n14 - 5 = 9 (left: 3 9)\n9 * 3 = 27 (left: 27)\n27 - 3 = 24 (left: 24)\nAnswer: ((2 * 7) - 5) * (3 - 3) = 24 || Input: 4 4 5 6\nSteps:\n4 + 6 = 10 (left: 4 5 10)\n5 * 4 = 20 (left: 10 20)\n20 / 10 = 2 (left: 2 20)\n2 * 20 = 40 (left: 40)\n40 - 16 = 24 (left: 24)\nAnswer: (((4 + 6) * 5) /  || (4 / 4)) + 16 = 24",
                "1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * 8 = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n12 * 3 = 36 (left: 36)\n36 / 5 = 7.2 (left: 7.2)\n7.2 - 6 = 1.2 (left: 1.2)\n1.2 * 3 || = 3.6 (left: 3.6)\nAnswer: ((3 + 5 + 7) * 6) / (3 + 6 + 7.2) = 24 || Input: 2 3 4 6\nSteps:\n2 * 3 = 6 (left: 4 6 6)\n6 + 4 = 10 (left: 10 6)\n10 / 6 = 1.67 (left: 1.67)\n1.67 * 6 = 10 (left: 10)\nAnswer: ((2 * 3) + 4 + 6) / 6 = 24",
                "1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * 8 = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n12 - 6 = 6 (left: 3 6)\n3 * 6 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((5 + 7) - 6) * (3 + 6) = 24 || Input: 2 3 5 7\nSteps:\n2 * 7 = 14 (left: 3 5 14)\n14 - 5 = 9 (left: 3 9)\n9 * 3 = 27 (left: 27)\n27 - 3 = 24 (left: 24)\nAnswer: ((2 * 7) - 5) * (3 - 3) = 24 || Input: 4 4 5 6\nSteps:\n4 + 6 = 10 (left: 4 5 10)\n5 * 4 = 20 (left: 10 20)\n20 / 10 = 2 (left: 2 20)\n2 * 20 = 40 (left: 40)\n40 - 16 = 24 (left: 24)\nAnswer: (((4 + 6) * 5) /  || 4) * 6 = 24",
                "1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * 8 = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n12 - 6 = 6 (left: 3 6)\n3 * 6 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((5 + 7) - 6) * (3 + 6) = 24 || Input: 2 3 5 7\n\n2 * 7 = 14 (left: 3 5 14)\n5 + 14 = 19 (left: 3 19)\n19 - 3 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\n\nAnswer: ((2 * 7) + 5 - 3) + 8 = 24 || Input: 2 4 5 10\nSteps:\n2 * 10 = 20 (left: 4 5 20)\n4 + 5 = 9 (left: 9 20)\n9 * 20 = 180 (left: 180)\n180 / 8 = 24 (left: 24)\nAnswer: ((2 * 10) + 4 + 5) / 8 = 24",
                "1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * 8 = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n12 * 3 = 36 (left: 36)\n36 / 5 = 7.2 (left: 7.2)\n7.2 - 6 = 1.2 (left: 1.2)\n1.2 * 3 || = 24 (left: 24)\nAnswer: ((5 + 7) * 3) - 6 = 24 || Input: 2 3 5 7\nSteps:\n2 * 7 = 14 (left: 3 5 14)\n3 + 5 = 8 (left: 8 14)\n8 * 14 = 112 (left: 112)\n112 / 7 = 16 (left: 16)\n16 - 14 = 2 (left: 2 16)\n2 * 3 = 6 (left: 6 16 || 16\n6 * 4 = 24 (left: 24)\nAnswer: ((2 * 7) * (3 + 5)) - 14 = 24"
            ]
        },
        "Input": "1 1 2 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "11": {
        "puzzle": "1 1 4 8",
        "Step 0": {
            "steps": [
                "8 - 4 = 4 (left: 1 4 4)",
                "1 * 1 = 1 (left: 1 4 8)",
                "8 / 4 = 2 (left: 1 2 4)",
                "1 * 1 = 1 (left: 1 4 8)",
                "8 - 4 = 4 (left: 1 4 4)",
                "4 * 1 = 4 (left: 4 4 8)",
                "4 * 1 = 4 (left: 4 4 8)",
                "4 + 1 = 5 (left: 1 5 8)",
                "1 / 1 = 1 (left: 1 4 ",
                "8 - 4 = 4 (left: 1 4 4)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                1.002,
                1.002,
                22.0,
                41.0,
                3.0,
                3.0,
                40.0,
                1.0
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 0.5",
                "2 <- 0.0",
                "3 <- 0.4",
                "4 <- 0.4",
                "5 <- INIT",
                "6 <- 0.5",
                "7 <- 0.5",
                "8 <- 0.5",
                "9 <- 0.8"
            ]
        },
        "Step 1": {
            "steps": [
                "1 / 1 = 1 (left: 1 4  || 4 / 1 = 4 (left: 4)",
                "4 * 1 = 4 (left: 4 4 8) || 1 + 7 = 8 (left: 8",
                "8 - 4 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4)",
                "8 - 4 = 4 (left: 1 4 4) || 4 + 1 = 5 (left: 4 5)",
                "8 - 4 = 4 (left: 1 4 4) || 4 / 1 = 4 (left: 4 4)",
                "4 * 1 = 4 (left: 1 4 8)",
                "4 * 1 = 4 (left: 4 4 8) || 8 / 4 = 2 (left: 4 2)",
                "4 * 1 = 4 (left: 4 4 8) || 8 / 4 = 2 (left: 2 8)",
                "4 * 1 = 4 (left: 4 4 8) || 8 - 4 = 4 (left: 4 4)",
                "1 / 1 = 1 (left: 1 4  || 4 - 1 = 3 (left: 3)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                2.0,
                21.001,
                0.002,
                0.003,
                20.001,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- INIT",
                "2 <- 0.8",
                "3 <- 1.3",
                "4 <- 1.6",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 0.4",
                "8 <- 0.5",
                "9 <- 0.4"
            ]
        },
        "Step 2": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8)",
                "1 * 4 = 4 (left: 4 8 4)",
                "1 / 1 = 1 (left: 1 4  || 4 - 1 = 3 (left: 3)",
                "8 - 4 = 4 (left: 1 4 4) || 4 + 1 = 5 (left: 4 5) || 5 - 4 = 1 (left: 1)",
                "4 * 1 = 4 (left: 4 4 8) || 8 / 4 = 2 (left: 4 2) || 4 - 2 = 2 (left: 2)",
                "1 * 4 = 4 (left: 4 4 8)",
                "8 - 4 = 4 (left: 1 4 4)",
                "8 - 4 = 4 (left: 1 4 4) || 4 * 1 = 4 (left: 4 4)",
                "4 * 1 = 4 (left: 4 4 8) || 8 / 4 = 2 (left: 2 8)",
                "8 - 4 = 4 (left: 1 4 4) || 1 * 4 = 4 (left: 4 4)"
            ],
            "Evaluation": [
                20.002,
                21.001,
                0.0,
                0.003,
                0.001,
                21.001,
                1.002,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.4",
                "2 <- 2.1",
                "3 <- 0.5",
                "4 <- 0.4",
                "5 <- 2.0",
                "6 <- 0.4",
                "7 <- INIT",
                "8 <- 2.5",
                "9 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "8 - 4 = 4 (left: 1 4 4) || 4 / 1 = 4 (left: 4 4)",
                "8 - 4 = 4 (left: 1 4 4) || 5 + 7 = 12 (left: 3",
                "1 * 4 = 4 (left: 4 8 4) || 8 - 4 = 4 (left: 4 4 4)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8)",
                "8 - 4 = 4 (left: 1 4 4) || 1 * 4 = 4 (left: 4 4)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 * 8 = 128 (left: 128)",
                "8 - 4 = 4 (left: 1 4 4) || 4 + 1 = 5 (left: 4 5)",
                "4 + 1 = 5 (left: 5 4 ",
                "1 * 4 = 4 (left: 4 4 8) || 8 / 4 = 2 (left: 4 2)",
                "8 - 1 = 7 (left: 1 4 7)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                3.0,
                60.0,
                0.003,
                0.003,
                2.001,
                0.002,
                0.003,
                21.001
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.8",
                "2 <- 3.3",
                "3 <- 3.3",
                "4 <- 2.5",
                "5 <- 0.8",
                "6 <- 1.3",
                "7 <- 0.4",
                "8 <- 3.3",
                "9 <- 3.3"
            ]
        },
        "Step 4": {
            "steps": [
                "8 - 4 = 4 (left: 1 4 4) || 1 + 4 = 5 (left: 4 5)",
                "1 / 1 = 1 (left: 1 4  || 4 * 1 = 4 (left: 4)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8) ",
                "1 * 4 = 4 (left: 4 4 8) || Possible next steps:",
                "1 / 1 = 1 (left: 1 4  || 4 - 1 = 3 (left: 3)",
                "8 - 4 = 4 (left: 1 4 4) || 4 + 1 = 5 (left: 4 5) || 5 - 4 = 1 (left: 1)",
                "8 - 4 = 4 (left: 1 4 4) || 4 / 1 = 4 (left: 4 4)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)"
            ],
            "Evaluation": [
                2.0,
                0.002,
                0.002,
                0.001,
                0.003,
                0.002,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 3.2",
                "3 <- 0.5",
                "4 <- 2.6",
                "5 <- 3.6",
                "6 <- 2.1",
                "7 <- 0.5",
                "8 <- 0.4",
                "9 <- 2.5"
            ]
        },
        "Step 5": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 + 8 = 24 (left: 8 24)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 * 8 = 128 (left: 128)",
                "1 * 4 = 4 (left: 4 8 4) || 8 - 4 = 4 (left: 4 4 4) || 4 - 4 = 0 (left: 0 4)",
                "4 * 1 = 4 (left: 4 4 8) || 8 / 4 = 2 (left: 4 2)",
                "8 - 4 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4)",
                "8 - 4 = 4 (left: 1 4 4) || 4 + 1 = 5 (left: 4 5) || 5 / 4 = 1.25 (left: 1.25)",
                "1 * 4 = 4 (left: 4 8 4) || 4 * 8 = 32 (left: 4 32 4)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8)",
                "8 - 4 = 4 (left: 1 4 4) || 4 * 1 = 4 (left: 4 4)",
                "1 * 4 = 4 (left: 4 4 8) || Possible next steps:"
            ],
            "Evaluation": [
                40.001,
                0.003,
                20.0,
                0.002,
                41.0,
                0.003,
                22.0,
                40.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 5.0",
                "2 <- 2.0",
                "3 <- 5.0",
                "4 <- 5.2",
                "5 <- 5.6",
                "6 <- 5.7",
                "7 <- 1.6",
                "8 <- 5.7",
                "9 <- 5.2"
            ]
        },
        "Step 6": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8) || 8 / 4 = 2 (left: 4 2) || 4 - 2 = 2 (left: 2)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 + 8 = 24 (left: 8 24) || 32 * 64 = 2048 (left: 2048)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 * 8 = 128 (left: 8 128)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 + 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8)",
                "1 * 4 = 4 (left: 4 8 4) || 8 - 4 = 4 (left: 4 4 4) || 4 - 4 = 0 (left: 0 4) || 4 - 0 = 4 (left: 4)",
                "1 * 4 = 4 (left: 4 8 4) || 4 * 8 = 32 (left: 4 32 4) || 32 - 4 = 28 (left: 4 28 4)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8 8)",
                "4 * 1 = 4 (left: 4 4 8) || 8 / 4 = 2 (left: 4 2) || 4 * 2 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 * 4 = 4 (left: 4 8 4) || 8 - 4 = 4 (left: 4 4 4) || 4 - 4 = 0 (left: 0 4) || 4 - 0 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.0,
                20.002,
                21.0,
                60.0,
                0.002,
                40.001,
                0.003,
                0.002,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 3.3",
                "2 <- 5.4",
                "3 <- 3.3",
                "4 <- 0.5",
                "5 <- 6.5",
                "6 <- 2.5",
                "7 <- 6.3",
                "8 <- 5.2",
                "9 <- 5.6"
            ]
        },
        "Step 7": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 + 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 - 4 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 4 - 3 = 1 (left: 1)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || Input: 0 8 8",
                "1 * 4 = 4 (left: 4 8 4) || 4 * 8 = 32 (left: 4 32 4) || 32 - 4 = 28 (left: 4 28 4) || 28 - 4 = 24 (left: 4 24 4)",
                "1 * 4 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 + 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 * 4 = 4 (left: 4 8 4) || 8 - 4 = 4 (left: 4 4 4) || 4 - 4 = 0 (left: 0 4) || 4 - 0 = 4 (left: 4)",
                "1 * 4 = 4 (left: 4 8 4) || 4 * 8 = 32 (left: 4 32 4) || 4 * 8 = 32 (left: 32 4)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.001,
                0.003,
                60.0,
                60.0,
                0.002,
                0.003,
                40.001
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 3.3",
                "2 <- 6.1",
                "3 <- 7.9",
                "4 <- 7.9",
                "5 <- 5.7",
                "6 <- 6.1",
                "7 <- 7.6",
                "8 <- 7.6",
                "9 <- 6.2"
            ]
        },
        "Step 8": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 + 8 = 24 (left: 8 24) || 32 * 64 = 2048 (left: 2048) || 20 + 48 = 68",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 + 8 = 24 (left: 8 24) || 32 * 64 = 2048 (left: 2048) || 20 - 48 = -28 (left: -28)",
                "1 * 4 = 4 (left: 4 8 4) || 4 * 8 = 32 (left: 4 32 4) || 4 * 8 = 32 (left: 32 4) || 32 * 4 = 128 (left: 128)",
                "1 * 4 = 4 (left: 4 8 4) || 4 * 8 = 32 (left: 4 32 4) || 4 * 8 = 32 (left: 32 4) || 32 * 4 = 128 (left: 4 128)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 + 8 = 24 (left: 8 24) || 32 * 64 = 2048 (left: 2048) || 2 + 0 + 4 + 8 = 14",
                "1 * 4 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 * 4 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 * 8 = 128 (left: 8 128) || 128 - 8 = 120 (left: 8 120)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.003,
                60.0,
                0.003,
                0.003,
                0.002,
                0.002,
                1.0
            ],
            "Resampling": [
                "0 <- 6.5",
                "1 <- 5.7",
                "2 <- 5.0",
                "3 <- 7.6",
                "4 <- 6.5",
                "5 <- 5.6",
                "6 <- 8.4",
                "7 <- 5.0",
                "8 <- 7.9",
                "9 <- 5.4"
            ]
        },
        "Step 9": {
            "steps": [
                "1 * 4 = 4 (left: 4 8 4) || 4 * 8 = 32 (left: 4 32 4) || 32 - 4 = 28 (left: 4 28 4) || 28 / 4 = 7 (left: 4 7 4)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 + 8 = 24 (left: 8 24) || 8 - 24 = -16 (left: -16)",
                "1 * 4 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "1 * 4 = 4 (left: 4 8 4) || 4 * 8 = 32 (left: 4 32 4) || 32 - 4 = 28 (left: 4 28 4) || 28 / 4 = 7 (left: 4 7 4)",
                "1 * 4 = 4 (left: 4 8 4) || 4 * 8 = 32 (left: 4 32 4) || 4 * 8 = 32 (left:",
                "1 * 4 = 4 (left: 4 8 4) || 4 * 8 = 32 (left: 4 32 4) || 4 * 8 = 32 (left: 32 4) || 32 * 4 = 128 (left: 4 128) || 128 - 4 = 124 (left: 124)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 + 8 = 24 (left: 8 24) || 8 * 3 = 24 (left: 24)",
                "1 * 4 = 4 (left: 4 8 4) || 4 * 8 = 32 (left: 4 32 4) || 4 * 8 = 32 (left: 32 4) || 32 / 4 = 8 (left: 8)",
                "8 - 4 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 4 - 3 = 1 (left: 1)"
            ]
        },
        "Input": "1 1 4 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "12": {
        "puzzle": "1 1 5 8",
        "Step 0": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8)",
                "1 * 1 = 1 (left: 1 5 8)",
                "8 - 5 = 3 (left: 1 3 8)",
                "5 - 1 = 4 (left: 1 4 8)",
                "8 - 5 = 3 (left: 1 3 8)",
                "1 * 1 = 1 (left: 1 5 8)",
                "1 * 1 = 1 (left: 1 5 8)",
                "5 + 1 = 6 (left: 1 6 8)",
                "5 * 1 = 5 (left: 5 5 ",
                "5 + 1 = 6 (left: 1 6 8)"
            ],
            "Evaluation": [
                60.0,
                3.0,
                60.0,
                0.003,
                60.0,
                2.001,
                2.001,
                1.002,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- INIT",
                "2 <- 0.4",
                "3 <- INIT",
                "4 <- 0.2",
                "5 <- 0.0",
                "6 <- 0.4",
                "7 <- 0.4",
                "8 <- 0.4",
                "9 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 5 8)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.67 (left: 1 2.67)",
                "8 - 5 = 3 (left: 1 3 8)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2 (left:",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5)",
                "8 - 5 = 3 (left: 1 3 8) || 3 - 1 = 2 (left: 2 8)"
            ],
            "Evaluation": [
                60.0,
                2.001,
                1.002,
                60.0,
                60.0,
                2.0,
                0.0,
                60.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 1.7",
                "2 <- 0.4",
                "3 <- 1.0",
                "4 <- 1.4",
                "5 <- 0.4",
                "6 <- 1.4",
                "7 <- 1.0",
                "8 <- 1.7",
                "9 <- 1.7"
            ]
        },
        "Step 2": {
            "steps": [
                "5 * 1 = 5 (left: 5 5  || 5 * 5 = 25 (left: 25)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5 8)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 1 24)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 - 5 = 3 (left: 1 3 8) || 3 / 1 = 3 (left: 3 8)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || Input: 5 10 15",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 1 - 24 = -23 (left: -23)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5) ",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)"
            ],
            "Evaluation": [
                40.0,
                1.001,
                0.003,
                60.0,
                0.002,
                60.0,
                0.003,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.4",
                "2 <- 0.4",
                "3 <- 0.6",
                "4 <- 2.0",
                "5 <- 0.0",
                "6 <- 0.0",
                "7 <- 1.0",
                "8 <- 0.2",
                "9 <- 0.2"
            ]
        },
        "Step 3": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2 (left: 2 8)",
                "1 * 1 = 1 (left: 1 5 8) || 8 / 1 = 8 (left: 5 8)",
                "5 * 1 = 5 (left: 5 5  || 5 * 5 = 25 (left: 25) || 25 / 2 = 12.5 (left: 2 12.5)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8)",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 8)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24 24)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.67 (left: 1 2.67)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8)"
            ],
            "Evaluation": [
                41.0,
                60.0,
                3.0,
                0.003,
                0.002,
                60.0,
                1.002,
                60.0,
                1.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.3",
                "2 <- 1.4",
                "3 <- 3.9",
                "4 <- 0.4",
                "5 <- 3.9",
                "6 <- 3.9",
                "7 <- 3.9",
                "8 <- 3.5",
                "9 <- 2.5"
            ]
        },
        "Step 4": {
            "steps": [
                "5 * 1 = 5 (left: 5 5  || 5 * 5 = 25 (left: 25) || 25 * 2 = 50 (left: 50)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || Input: 4 4",
                "8 - 5 = 3 (left: 1 3 8) || 3 - 1 = 2 (left: 2 8)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 5 + 10 = 15 (left: 15)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || Input: 7 5",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 8 24)",
                "8 - 5 = 3 (left: 1 3 8) || 3 / 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.002,
                0.003,
                1.001,
                0.002,
                0.003,
                60.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 3.7",
                "2 <- 3.7",
                "3 <- 2.0",
                "4 <- 3.9",
                "5 <- 3.9",
                "6 <- 3.5",
                "7 <- 3.9",
                "8 <- 3.7",
                "9 <- 3.5"
            ]
        },
        "Step 5": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (8 - 5) * (1 + 1) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24 24) || 24 / 24 = 1 (left: 1)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24 24) || 24 + 24 = 48",
                "5 * 1 = 5 (left: 5 5  || 5 * 5 = 25 (left: 25) || 25 / 2 = 12.5 (left: 2)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24 24) || 24 + 24 = 48",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 5 + 10 = 15 (left: 15)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.003,
                0.0,
                0.003,
                0.001,
                40.0,
                40.0,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 5.7",
                "1 <- 3.5",
                "2 <- 4.1",
                "3 <- 1.3",
                "4 <- 4.7",
                "5 <- 3.8",
                "6 <- 3.0",
                "7 <- 3.5",
                "8 <- 3.5",
                "9 <- 0.0"
            ]
        },
        "Step 6": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 - 5) * (8 / 1) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (8 - 5) * (24 / 1) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 8)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 - 5) * (1 + 1) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.67 (left: 1 2.67) || 1 / 2.67 = 0.375 (left: 0.375)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 / 3 = 2.6667 (left: 2.6667)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 - 5 = 3 (left: 1 3 8) || 3 + 8 = 11 (left: 1 11)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                60.0,
                0.003,
                60.0,
                0.003,
                0.002,
                60.0,
                60.0,
                40.0
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 0.0",
                "2 <- 3.0",
                "3 <- 0.2",
                "4 <- 1.7",
                "5 <- 5.0",
                "6 <- 6.2",
                "7 <- 3.9",
                "8 <- 5.0",
                "9 <- 6.8"
            ]
        },
        "Step 7": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (8 - 5) * (1 + 1) = 24 || Input: 3 3 4 6\nSteps:\n3 + 4 = 7 (left: 3 6 7)\n3 * 7 = 21 (left: 6 21)\n6 * 21 = 126 (left: 126)\n126 / 6 = 21 (left: 21)\n21 - 21 = 0 (left: 0)\n0 + 24 = 24 (left: 24)\nAnswer: (((",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 3 7)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (8 - 5) * (1 + 1) = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n3 * 6 = 18 (left: 18)\n18 + 3 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: (3 * 8) - (6 - 3) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (8 - 5) * (24 / 1) = 24 || Input: 3 6 7 8\nSteps:\n7 - 3 = 4 (left: 4 6 8)\n4 * 6 = 24 (left: 8 24)\n8 * 24 = 192 (left: 192)\nAnswer: (7 - 3) * (4 * 6) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || Input: 5 10 20",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (8 - 5) * (1 + 1) = 24 || Input: 3 3 6 7\nSteps:\n3 * 3 = 9 (left: 6 7 9)\n6 + 7 = 13 (left: 9 13)\n13 - 9 = 4 (left: 4 13)\n4 * 6 = 24 (left: 24)\nAnswer: (3 * 3) * ((6 + 7) - 9) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 - 5) * (8 / 1) = 24"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.002,
                0.0,
                0.003,
                40.0,
                60.0,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 3.0",
                "2 <- 6.2",
                "3 <- 6.4",
                "4 <- 5.0",
                "5 <- 4.1",
                "6 <- 7.6",
                "7 <- 0.4",
                "8 <- 6.8",
                "9 <- 5.0"
            ]
        },
        "Step 8": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (8 - 5) * (1 + 1) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 5 - 5 = 0 (left:",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (8 - 5) * (24 / 1) = 24 || Input: 3 3 8 9\n\n3 * 9 = 27 (left: 3 8 27)\n3 - 8 = -5 (left: -5 27)\n-5 * 27 = -135 (left: -135)\n27 + 8 = 35 (left: 35)\n35 + (-135) = -100 (left: -100)\n-100 + 3 = -97 (left: -97)\n-97",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 - 5) * (1 + 1) = 24 || Input: 3 3 5 7\nSteps:\n3 + 7 = 10 (left: 3 5 10)\n5 * 3 = 15 (left: 10 15)\n15 - 10 = 5 (left: 5 15)\n5 * 5 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: ((3 + 7) * (5 - 3",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (8 - 5) * (1 + 1) = 24 || Input: 3 4 5 8\nSteps:\n4 + 8 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (5 - 3) * (4 + 8) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: ((8 - 5) * 8) / 1 = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (8 - 5) * (24 / 1) = 24 || Input: 3 6 7 8\nSteps:\n7 - 3 = 4 (left: 4 6 8)\n4 * 6 = 24 (left: 8 24)\n8 * 24 = 192 (left: 192)\nAnswer: (7 - 3) * (4 * 6) = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n4 - 3 = 1 (left: 1 12)\n1 * 12 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((2 * 6) * (4 - 3)) * 2 = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (8 - 5) * (1 + 1) = 24 || Input: 3 3 5 8\n\n3 + 5 = 8 (left: 3 8 8)\n8 - 3 = 5 (left: 5 8)\n5 * 8 = 40 (left: 40)\n40 / 8 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: (((3 +"
            ],
            "Evaluation": [
                60.0,
                0.001,
                60.0,
                40.0,
                60.0,
                60.0,
                60.0,
                40.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.5",
                "1 <- 3.5",
                "2 <- 0.4",
                "3 <- 1.4",
                "4 <- 7.1",
                "5 <- 8.8",
                "6 <- 7.1",
                "7 <- 8.4",
                "8 <- 7.6",
                "9 <- 7.9"
            ]
        },
        "Step 9": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 / 1 = 3 (left: 3 8) || 8 / 3 = 2.66666666667 (left: 2.66666666667)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 - 5 = 3 (left: 1 3 8) || 3 - 1 = 2 (left: 2 8)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || Input: 5 10 15",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * (8 - 5) = 24 || Input: 3 3 4 7\nSteps:\n3 + 4 = 7 (left: 3 7 7)\n7 + 7 = 14 (left: 14)\n14 - 3 = 11 (left: 11)\n11 * 2 = 22 (left: 22)\n22 + 2 = 24 (left: 24)\nAnswer: ((3 + 4) + (7 + 7)) * (2",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || Input: 20 5",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (8 - 5) * (1 + 1) = 24 || Input: 3 4 5 8\nSteps:\n4 + 8 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (5 - 3) * (4 + 8) = 24 || Input: 2 3 4 6\nSteps:\n3 + 6 = 9 (left: 2 4 9)\n4 + 9 = 13 (left: 2 13)\n2 * 13 = 26 (left: 26)\n26 - 2 = 24 (left: 24)\nAnswer: ((3 + 6) + 4) * 2 = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (8 - 5) * (24 / 1) = 24 || Input: 3 6 7 8\nSteps:\n7 - 3 = 4 (left: 4 6 8)\n4 * 6 = 24 (left: 8 24)\n8 * 24 = 192 (left: 192)\nAnswer: (7 - 3) * (4 * 6) = 24 || Input: 2 3 4 8\nSteps:\n3 + 8 = 11 (left: 2 4 11)\n4 * 11 = 44 (left: 2 44)\n44 - 2 = 42 (left: 42)\nAnswer: (4 * (3 + 8)) - 2 = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 - 5) * (8 / 1) = 24 || Input: 3 3 6 9\nSteps:\n6 - 3 = 3 (left: 3 3 9)\n3 * 3 = 9 (left: 9 9)\n9 * 9 = 81 (left: 81)\n81 / 3 = 27 (left: 27)\n27 - 9 = 18 (left: 18)\n18 - 3 = 15 (left: 15)\n15 + "
            ]
        },
        "Input": "1 1 5 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "13": {
        "puzzle": "4 6 11 11",
        "Step 0": {
            "steps": [
                "11 - 4 = 7 (left: 7 11 11)",
                "6 * 11 = 66 (left: 4 66 11)",
                "11 - 6 = 5 (left: 4 5 11)",
                "4 * 6 = 24 (left: 11 11 24)",
                "11 + 4 = 15 (left: 6 11 15)",
                "4 * 6 = 24 (left: 11 11 24)",
                "11 / 4 = 2.75 (left: 2.75 11 11)",
                "11 + 4 = 15 (left: 6 11 15)",
                "11 - 6 = 5 (left: ",
                "11 - 4 = 7 (left: 7 11 11)"
            ],
            "Evaluation": [
                1.001,
                21.001,
                2.001,
                0.003,
                2.001,
                0.003,
                2.0,
                1.002,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.7",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 0.1",
                "7 <- INIT",
                "8 <- 0.6",
                "9 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "6 / 4 = 1.5 (left: 1.5 11 11)",
                "11 + 4 = 15 (left: 6 11 15) || 11 - 6 = 5 (left: 5 15)",
                "11 - 6 = 5 (left: 4 5 11)",
                "6 * 11 = 66 (left: 4 66 11) || 11 + 4 = 15 (left: 15 66)",
                "4 * 6 = 24 (left: 11 11 24)",
                "11 - 6 = 5 (left: 4 5 11)",
                "6 * 11 = 66 (left: 4 66 11) || 11 + 4 = 15 (left: 15 11)",
                "6 - 4 = 2 (left: ",
                "11 / 4 = 2.75 (left: 2.75 11 11) || 11 / 2.75 = 4 (left: 4 11)",
                "6 * 11 = 66 (left: 4 66 11) || 11 * 4 = 44 (left: 44 11)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                2.001,
                0.002,
                0.003,
                1.002,
                0.003,
                0.0,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- INIT",
                "2 <- 1.2",
                "3 <- INIT",
                "4 <- 0.1",
                "5 <- 0.1",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "6 * 11 = 66 (left: 4 66 11) || 66 / 4 = 16.5 (left: 16.5 11)",
                "11 - 6 = 5 (left: 4 5 11)",
                "11 - 6 = 5 (left: 4 5 11) || 5 * 11 = 55 (left: 4 55)",
                "11 + 4 = 15 (left: 6 11 15)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 264 11)",
                "6 * 11 = 66 (left: 4 66 11) || 11 - 4 = ",
                "11 + 4 = 15 (left: 6 11 15)",
                "11 - 4 = 7 (left: 7 11 11)",
                "11 - 4 = 7 (left: 6 7 11)",
                "6 * 11 = 66 (left: 4 66 11) || 66 - 4 = 62 (left: 62 11)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                40.001,
                0.003,
                0.0,
                0.003,
                1.002,
                2.001,
                22.0,
                1.0
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 0.1",
                "2 <- 2.7",
                "3 <- 2.8",
                "4 <- 0.1",
                "5 <- 2.2",
                "6 <- INIT",
                "7 <- 0.1",
                "8 <- 0.1",
                "9 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "11 - 6 = 5 (left: 4 5 11) || 5 * 11 = 55 (left: 4 55) || 4 * 55 = 220 (left: 220)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 11 264)",
                "11 - 4 = 7 (left: 7 11 11) || 11 * 7 = 77 (left: 77)",
                "11 - 4 = 7 (left: 6 7 11) || 6 * 7 = 42 (left: 11)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 11 264)",
                "11 - 6 = 5 (left: 4 5 11) || 5 * 11 = 55 (left: 4 55) || 55 - 4 = 51 (left: 51)",
                "11 - 4 = 7 (left: 6 7 11)",
                "6 * 11 = 66 (left: 4 66 11) || 11 / 4 = 2.75 (left: 2.75 66)",
                "6 * 11 = 66 (left: 4 66 11) || 4 + 11 = 15 (left: 15 66)",
                "11 - 6 = 5 (left: 4 5 11)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                60.0,
                0.003,
                1.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 3.4",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 2.2",
                "5 <- 2.1",
                "6 <- 3.4",
                "7 <- 3.4",
                "8 <- INIT",
                "9 <- 0.1"
            ]
        },
        "Step 4": {
            "steps": [
                "11 - 6 = 5 (left: 4 5 11) || 5 * 11 = 55 (left: 4 55) || 4 * 55 = 220 (left: 220)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 11 264) || 264 - 11 = 253 (left: 253)",
                "11 - 6 = 5 (left: 4 5 11)",
                "11 + 4 = 15 (left: 6 11 15)",
                "11 - 6 = 5 (left: 4 5 11) || 5 * 11 = 55 (left: 4 55) || 55 - 4 = 51 (left: 51)",
                "11 - 6 = 5 (left: 4 5 11) || 4 *",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 11 264) || 264 / 11 = 24 (left: 24)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 11 264) || 264 / 11 = 24 (left: 24)",
                "11 - 4 = 7 (left: 7 6 11)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 11 264)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                1.002,
                3.0,
                0.003,
                0.003,
                60.0,
                60.0,
                41.0,
                20.001
            ],
            "Resampling": [
                "0 <- 4.6",
                "1 <- 4.7",
                "2 <- 3.4",
                "3 <- 4.7",
                "4 <- 3.4",
                "5 <- INIT",
                "6 <- 3.4",
                "7 <- 4.9",
                "8 <- 4.7",
                "9 <- 4.7"
            ]
        },
        "Step 5": {
            "steps": [
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 11 264) || 264 / 11 = 24 (left: 24) || Answer: (4 * 6) * (11 + 11) = 24",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 11 264) || 264 / 11 = 24 (left: 24) || Answer: (4 * 6) * (11 + 11) = 24",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 11 264) || 264 - 11 = 253 (left: 253)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 11 264) || 264 / 11 = 24 (left: 24) || Answer: (4 * (6 * 11)) / 11 = 24",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 11 264) || 264 - 11 = 253 (left: 253)",
                "4 * 6 = 24 (left: 11 11 24)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 11 264) || 11 - 264 = -253 (left: )",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 11 264) || 264 / 11 = 24 (left: 24)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 11 264) || 264 / 11 = 24 (left: 24) || Answer: (4 * (6 * 11)) / 11 = 24",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 11 264) || 264 / 11 = 24 (left: 24) || Answer: (4 * (6 * 11)) / 11 = 24"
            ]
        },
        "Input": "4 6 11 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            }
        ]
    },
    "14": {
        "puzzle": "1 1 3 12",
        "Step 0": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 12)",
                "1 * 1 = 1 (left: 1 3 12)",
                "3 * 1 = 3 (left: 3 1 12)",
                "3 * 1 = 3 (left: 3 1 12)",
                "3 + 1 = 4 (left: 1 4 12)",
                "12 * 1 = 12 (left: 1 3 12)",
                "12 - 1 = 11 (left: 1 3 11)",
                "3 + 1 = 4 (left: 1 4 12)",
                "12 - 1 = 11 (left: 1 3 ",
                "3 + 1 = 4 (left: 1 4 12)"
            ],
            "Evaluation": [
                0.003,
                41.0,
                20.002,
                21.001,
                1.002,
                60.0,
                0.002,
                1.002,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.1",
                "2 <- 0.2",
                "3 <- 0.3",
                "4 <- 0.5",
                "5 <- 0.5",
                "6 <- 0.5",
                "7 <- INIT",
                "8 <- 0.2",
                "9 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36)",
                "1 * 1 = 1 (left: 1 3 12) || Possible",
                "3 * 1 = 3 (left: 3 1 12) || 12 / 3 = 4 (left: 4 12)",
                "3 * 1 = 3 (left: 3 1 12) || 12 - 3 = 9 (left: 3 9)",
                "12 * 1 = 12 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)",
                "12 * 1 = 12 (left: 1 3 12) || 12 / 3 = 4 (left:",
                "12 * 1 = 12 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9)",
                "12 - 3 = 9 (left: 1 9 ",
                "3 * 1 = 3 (left: 3 1 12) || 3 / 1 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                0.003,
                20.002,
                1.0,
                60.0,
                21.0,
                20.002,
                21.001
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 1.7",
                "2 <- 1.0",
                "3 <- 0.5",
                "4 <- 1.6",
                "5 <- 1.4",
                "6 <- 1.6",
                "7 <- INIT",
                "8 <- 1.4",
                "9 <- 1.9"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 3 = 9 (left: 1 9  || 9 - 1 = 8 (left: 8 9)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "12 * 1 = 12 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9)",
                "12 * 1 = 12 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "12 * 1 = 12 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9)",
                "12 * 1 = 12 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "3 + 1 = 4 (left: 1 4 12)",
                "12 * 1 = 12 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                60.0,
                40.0,
                0.001,
                0.001,
                0.002,
                1.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 1.4",
                "2 <- 1.4",
                "3 <- 0.2",
                "4 <- 0.3",
                "5 <- 1.8",
                "6 <- 2.3",
                "7 <- 0.3",
                "8 <- 0.2",
                "9 <- 2.2"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 + 36 = 72",
                "12 * 1 = 12 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9)",
                "12 * 1 = 12 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9)",
                "3 * 1 = 3 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12)",
                "3 * 1 = 3 (left: 3 1 12) || 1 + 12 = 13 (left: 3 13)",
                "3 * 1 = 3 (left: 3 1 12) || 3 / 1 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4)",
                "12 * 1 = 12 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9 9)",
                "3 * 1 = 3 (left: 3 1 12) || 12 - 1 = 11 (left: 3 11)",
                "3 * 1 = 3 (left: 3 1 12) || 12 - 3 = 9 (left: 3 9)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.001,
                60.0,
                0.003,
                0.003,
                0.003,
                1.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 1.8",
                "2 <- 1.0",
                "3 <- 1.7",
                "4 <- 2.3",
                "5 <- 0.2",
                "6 <- 2.2",
                "7 <- 2.2",
                "8 <- 1.0",
                "9 <- 1.7"
            ]
        },
        "Step 4": {
            "steps": [
                "12 * 1 = 12 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "3 * 1 = 3 (left: 3 1 12) || 3 / 1 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 + 36 = 37",
                "12 - 3 = 9 (left: 1 9  || 9 / 1 = 9 (left: 9 9)",
                "12 * 1 = 12 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "3 * 1 = 3 (left: 3 1 12) || 12 / 3 = 4 (left: 4 12)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || There is only one number given, so there are no possible next steps for calculation.",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "12 - 3 = 9 (left: 1 9  || 9 * 1 = 9 (left: 9 9)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                40.001,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.1",
                "2 <- 3.3",
                "3 <- 4.8",
                "4 <- 1.6",
                "5 <- 3.3",
                "6 <- 1.7",
                "7 <- 0.2",
                "8 <- 2.3",
                "9 <- 0.5"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 12 = 12 (left: 3 12)",
                "3 * 1 = 3 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "12 * 1 = 12 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "3 * 1 = 3 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 - 3 = 9 (left: 1 9  || 9 / 1 = 9 (left: 9)",
                "3 * 1 = 3 (left: 3 1 12) || 1 * 12 = 12 (left: 3 12)",
                "12 * 1 = 12 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "12 * 1 = 12 (left: 1 3 12) || 12 / 3 = 4 (left: 4 12)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                60.0,
                0.003,
                0.001,
                0.003,
                0.001,
                60.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 5.7",
                "2 <- 1.0",
                "3 <- 2.3",
                "4 <- 3.3",
                "5 <- 2.2",
                "6 <- 5.2",
                "7 <- 0.5",
                "8 <- 2.3",
                "9 <- 5.2"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "3 * 1 = 3 (left: 3 1 12) || 1 * 12 = 12 (left: 3 12) || 12 - 3 = 9 (left: 9 12)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "12 * 1 = 12 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9 9)",
                "3 * 1 = 3 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "3 * 1 = 3 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (3 * 1) * (12 / 2) = 24",
                "12 * 1 = 12 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)",
                "12 * 1 = 12 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "3 * 1 = 3 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (3 * 1) * (2 * 12) = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                60.0,
                20.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 5.2",
                "2 <- 5.2",
                "3 <- 5.2",
                "4 <- 5.0",
                "5 <- INIT",
                "6 <- 6.6",
                "7 <- 5.2",
                "8 <- 2.2",
                "9 <- 3.3"
            ]
        },
        "Step 7": {
            "steps": [
                "12 * 1 = 12 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "3 * 1 = 3 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (3 * 1) * (12 / 2) = 24",
                "3 * 1 = 3 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (3 * 1) * (12 - 2) = 24",
                "3 * 1 = 3 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (3 * 1) * (12 / 2) = 24",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9)",
                "3 * 1 = 3 (left: 1 3 12)",
                "3 * 1 = 3 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (3 * 1) * (12 / 2) = 24 || Input: 3 3 4 6\nSteps:\n3 + 3 = 6 (left: 4 6 6)\n4 * 6 = 24 (left: 24 6)\n6 / 6 = 1 (left: 24 1)\n24 * 1 = 24\nAnswer: (3 + 3) * (4 * 6 / 6) = 24",
                "3 * 1 = 3 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (3 * 1) * (12 / 2) = 24",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "3 * 1 = 3 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.003,
                60.0,
                60.0,
                60.0,
                40.0,
                60.0,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 7.3",
                "2 <- 7.1",
                "3 <- 7.1",
                "4 <- 5.7",
                "5 <- 5.7",
                "6 <- 0.3",
                "7 <- 7.5",
                "8 <- 7.5",
                "9 <- 7.1"
            ]
        },
        "Step 8": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (3 * 1) * (12 / 2) = 24",
                "3 * 1 = 3 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (3 * 1) * (12 / 2) = 24 || Input: 2 3 3 4\n\n3 + 3 = 6 (left: 2 6 4)\n6 * 4 = 24 (left: 24)\nAnswer: (2 + 3 + 3) * 4 = 24",
                "3 * 1 = 3 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (3 * 1) * (12 / 2) = 24 || Input: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 8 9)\n9 - 8 = 1 (left: 1 9)\n1 * 9 = 9 (left: 9)\n9 * 3 = 24 (left: 24)\nAnswer: ((3 * 3) - 8) * (1 * 9) = 24",
                "3 * 1 = 3 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (3 * 1) * (12 / 2) = 24 || Input: 3 3 5 7\nSteps:\n3 + 5 = 8 (left: 3 7 8)\n8 - 7 = 1 (left: 3 1)\n3 * 1 = 3 (left: 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 - 24 = 3 (left: 3)\n3 * ",
                "3 * 1 = 3 (left: 3 1 12) || 1 * 12 = 12 (left: 3 12) || Input: 4 16",
                "3 * 1 = 3 (left: 3 1 12) || 1 * 12 = 12 (left: 3 12) || 3 + 12 = 15 (left: 15)",
                "3 * 1 = 3 (left: 3 1 12) || 12 - 1 = 11 (left: 3 11)",
                "3 * 1 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)",
                "3 * 1 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)",
                "3 * 1 = 3 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (3 * 1) * (12 / 2) = 24 || Input: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n8 - 4 = 4 (left: 3 4)\n3 * 4 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((3 + 5) - 4) * (3 * 2) = 24"
            ],
            "Evaluation": [
                60.0,
                60.0,
                40.0,
                60.0,
                0.003,
                0.002,
                0.003,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 8.0",
                "1 <- 7.5",
                "2 <- 8.1",
                "3 <- 6.6",
                "4 <- 5.0",
                "5 <- 8.1",
                "6 <- 2.2",
                "7 <- 7.5",
                "8 <- 8.0",
                "9 <- 6.6"
            ]
        },
        "Step 9": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (3 * 1) * (12 / 2) = 24 || Input: 2 3 5 8\nSteps:\n2 * 8 = 16 (left: 3 5 16)\n5 - 3 = 2 (left: 2 16)\n2 * 16 = 32 (left: 32)\nAnswer: (2 * 8) * (5 - 3) = 24",
                "3 * 1 = 3 (left: 1 3 12) || 3 + 1 = 4 (left: 4 12)",
                "3 * 1 = 3 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (3 * 1) * (12 / 2) = 24 || Input: 2 3 3 4\n\n3 + 3 = 6 (left: 2 6 4)\n6 * 4 = 24 (left: 24)\nAnswer: (2 + 3 + 3) * 4 = 24 || Input: 2 2 6 8\n\n2 * 2 = 4 (left: 4 6 8)\n6 + 4 = 10 (left: 10 8)\n10 - 8 = 2 (left: 2 24)\nAnswer: (2 * 2) * (6 + 8) = 24",
                "3 * 1 = 3 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (3 * 1) * (12 / 2) = 24 || Input: 2 3 4 6\nSteps:\n4 * 6 = 24 (left: 2 3 24)\n3 * 2 = 6 (left: 6 24)\n6 * 24 = 24 (left: 24)\nAnswer: 4 * 6 = 24",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9)",
                "3 * 1 = 3 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (3 * 1) * (12 / 2) = 24 || Input: 2 3 3 4\n\n3 + 3 = 6 (left: 2 6 4)\n6 * 4 = 24 (left: 24)\nAnswer: (2 + 3 + 3) * 4 = 24 || Input: 6 6 2 4\nSteps:\n6 - 2 = 4 (left: 4 6 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (6 * 4) = 24",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 + 8 = 44",
                "3 * 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9)",
                "3 * 1 = 3 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (3 * 1) * (12 / 2) = 24 || Input: 2 3 4 6\nSteps:\n3 + 6 = 9 (left: 2 4 9)\n9 * 4 = 36 (left: 2 36)\n36 / 2 = 18 (left: 18)\n18 + 18 = 36 (left: 36)\nAnswer: ((3 + 6) * 4) + (2 * 18) = 24",
                "3 * 1 = 3 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (3 * 1) * (12 / 2) = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 - 3 = 13 (left: 13)\nAnswer: ((3 * 7) - 5) - 3 = 24"
            ]
        },
        "Input": "1 1 3 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "15": {
        "puzzle": "2 2 2 12",
        "Step 0": {
            "steps": [
                "2 / 2 = 1 (left: 1 2 12)",
                "2 * 2 = 4 (left: 4 2 12)",
                "2 * 2 = 4 (left: 4 4 12)",
                "12 - 2 = 10 (left: 2 10 12)",
                "2 + 2 = 4 (left: 4 4 12)",
                "2 * 12 = 24 (left: 2 2 24)",
                "12 - 2 = 10 (left: 2 2 10)",
                "2 + 2 = 4 (left: 2 4 12)",
                "2 / 2 = 1 (left: 1 2 12)",
                "12 - 2 = 10 (left: 2 2 10)"
            ],
            "Evaluation": [
                60.0,
                2.001,
                2.001,
                0.003,
                2.001,
                20.002,
                2.001,
                1.001,
                60.0,
                1.001
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.0",
                "2 <- 0.8",
                "3 <- 0.8",
                "4 <- 0.8",
                "5 <- 0.8",
                "6 <- 0.0",
                "7 <- INIT",
                "8 <- 0.8",
                "9 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 12 = 24 (left: 2 2 24) || 2 * 2 = 4 (left: 4 24)",
                "2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "2 / 2 = 1 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)",
                "2 / 2 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "2 / 2 = 1 (left: 1 2 12) || 12 / 1 = 12 (left:",
                "2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "12 - 2 = 10 (left: 2 2 ",
                "2 / 2 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "2 / 2 = 1 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                40.0,
                60.0,
                0.002,
                41.0,
                60.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.8",
                "2 <- 1.6",
                "3 <- 1.6",
                "4 <- 1.4",
                "5 <- 1.9",
                "6 <- 1.0",
                "7 <- 1.8",
                "8 <- 1.4",
                "9 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 2 = 4 (left: 4 2 12)",
                "2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "2 / 2 = 1 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "2 * 12 = 24 (left: 2 2 24) || 2 * 2 = 4 (left: 4 24) || 24 - 4 = 20 (left: 20)",
                "2 / 2 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "2 / 2 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 / 10 = 0.1 (left: 0.1)"
            ],
            "Evaluation": [
                2.001,
                60.0,
                0.001,
                0.001,
                0.001,
                60.0,
                0.003,
                0.002,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.0",
                "2 <- 0.0",
                "3 <- 1.8",
                "4 <- 1.2",
                "5 <- 1.0",
                "6 <- 1.2",
                "7 <- 0.8",
                "8 <- 1.3",
                "9 <- 1.6"
            ]
        },
        "Step 3": {
            "steps": [
                "2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "2 * 12 = 24 (left: 2 2 24) || 2 * 2 = 4 (left: 4 24) || 24 + 4 = 28 (left: 4 28)",
                "2 / 2 = 1 (left: 1 2 12) || 3 * 6 = 18 (left: 1",
                "2 / 2 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "2 / 2 = 1 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "2 * 12 = 24 (left: 2 2 24) || 2 * 2 = 4 (left: 4 24) || 24 - 4 = 20 (left: 20)",
                "2 / 2 = 1 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "2 / 2 = 1 (left: 1 2 12) || 12 - 1 = 11 (left: 2 11)",
                "2 / 2 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.002,
                20.002,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 2.5",
                "3 <- 1.6",
                "4 <- 1.6",
                "5 <- 3.1",
                "6 <- 1.5",
                "7 <- 1.8",
                "8 <- 0.8",
                "9 <- 1.3"
            ]
        },
        "Step 4": {
            "steps": [
                "2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "2 / 2 = 1 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (2 / 2) * (2 * 12) = 24",
                "2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "2 * 12 = 24 (left: 2 2 24) || 2 * 2 = 4 (left: 4 24) || 24 + 4 = 28 (left: 4 28) || 3 * 9 = 27 (left: 27 27)",
                "2 / 2 = 1 (left: 1 2 12) || 12 / 1 = 12 (left: || 12 * 1 = 12 (left: 1 12)",
                "2 / 2 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "2 / 2 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "2 / 2 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ]
        },
        "Input": "2 2 2 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "16": {
        "puzzle": "1 1 4 12",
        "Step 0": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 12)",
                "1 * 1 = 1 (left: 1 4 12)",
                "12 - 4 = 8 (left: 1 8 12)",
                "4 * 1 = 4 (left: 4 4 12)",
                "4 + 1 = 5 (left: 1 5 12)",
                "4 * 1 = 4 (left: 4 4 12)",
                "12 - 4 = 8 (left: 1 8 12)",
                "4 + 1 = 5 (left: 1 5 12)",
                "4 + 1 = 5 (left: 5 4 ",
                "12 - 4 = 8 (left: 1 8 12)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                3.0,
                21.001,
                2.0,
                22.0,
                3.0,
                1.002,
                60.0,
                3.0
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 0.8",
                "2 <- INIT",
                "3 <- 0.8",
                "4 <- 0.3",
                "5 <- 0.6",
                "6 <- 0.8",
                "7 <- 0.8",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "4 + 1 = 5 (left: 5 4  || 5 / 4 = 1.25 (left: 1.25)",
                "4 + 1 = 5 (left: 5 4  || 4 / 5 =",
                "1 * 4 = 4 (left: 4 4 12)",
                "4 + 1 = 5 (left: 5 4  || 4 + 5 = 9 (left: 9)",
                "4 * 1 = 4 (left: 4 4 12) || 12 / 4 = 3 (left: 4 3)",
                "12 - 4 = 8 (left: 1 8 12) || 12 / 1 = 12 (",
                "4 + 1 = 5 (left: 5 4  || 4 + 5 = 9 (left: 9)",
                "4 + 1 = 5 (left: 5 4  || 4 + 5 = 9 (left: 9)",
                "4 - 1 = 3 (left: 1 3 12)",
                "1 + 4 = 5 (left: 5 1 12)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                2.001,
                0.002,
                1.0,
                0.003,
                0.003,
                0.003,
                41.0,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.8",
                "2 <- 0.3",
                "3 <- 1.8",
                "4 <- 0.8",
                "5 <- 0.8",
                "6 <- 1.8",
                "7 <- 0.3",
                "8 <- 1.8",
                "9 <- 1.8"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 12)",
                "4 + 1 = 5 (left: 5 4  || 4 / 5 =",
                "4 * 1 = 4 (left: 4 4 12) || 12 - 4 = 8 (left: 4 8)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 1 = 11 (left: 3 11)",
                "4 + 1 = 5 (left: 5 4  || 10 + 2 = 12 (left: 12)",
                "4 + 1 = 5 (left: 5 4  || 10 + 2 = 12 (left: 12)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9)",
                "4 * 1 = 4 (left: 4 4 12) || 12 - 4 = 8 (left: 4 8)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9)",
                "4 - 1 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                60.0,
                0.002,
                60.0,
                20.002
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 0.9",
                "2 <- 2.6",
                "3 <- INIT",
                "4 <- 1.8",
                "5 <- 2.6",
                "6 <- 0.3",
                "7 <- 2.6",
                "8 <- 2.8",
                "9 <- 2.9"
            ]
        },
        "Step 3": {
            "steps": [
                "4 + 1 = 5 (left: 5 4  || 5 / 4 = 1.25 (left: 1.25)",
                "12 - 4 = 8 (left: 1 8 12) || 12 / 1 = 12 (left: 8 12)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "4 + 1 = 5 (left: 1 5 12)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "4 * 1 = 4 (left: 4 4 12) || 12 / 4 = 3 (left: 4 3)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "4 - 1 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)"
            ],
            "Evaluation": [
                0.001,
                1.001,
                0.001,
                1.002,
                60.0,
                0.001,
                21.0,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.8",
                "1 <- 2.8",
                "2 <- 2.6",
                "3 <- 3.4",
                "4 <- 1.8",
                "5 <- 2.8",
                "6 <- 2.8",
                "7 <- 0.8",
                "8 <- 3.4",
                "9 <- 1.4"
            ]
        },
        "Step 4": {
            "steps": [
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "4 - 1 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "4 + 1 = 5 (left: 5 4  || 4 + 5 = 9 (left: 5 9)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "4 * 1 = 4 (left: 4 4 12) || 12 / 4 = 3 (left: 4 3) || 3 * 4 = 12 (left: 12)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.002,
                0.001,
                20.002,
                0.002,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 3.6",
                "2 <- 2.8",
                "3 <- 2.8",
                "4 <- 0.5",
                "5 <- 3.4",
                "6 <- 2.8",
                "7 <- 3.4",
                "8 <- 2.8",
                "9 <- 2.6"
            ]
        },
        "Step 5": {
            "steps": [
                "4 + 1 = 5 (left: 5 4  || 5 / 4 = 1.25 (left: 1.25)",
                "4 * 1 = 4 (left: 4 4 12) || 12 / 4 = 3 (left: 4 3) || 4 / 3 = 1.33 (left: 1.33)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "4 * 1 = 4 (left: 4 4 12) || 12 - 4 = 8 (left: 4 8)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 1 9)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 + 9 = 10",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 * 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.001,
                0.003,
                0.003,
                60.0,
                0.002,
                0.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.5",
                "1 <- 5.5",
                "2 <- 3.4",
                "3 <- 2.8",
                "4 <- 5.5",
                "5 <- 1.8",
                "6 <- 5.5",
                "7 <- 0.5",
                "8 <- 0.8",
                "9 <- 3.4"
            ]
        },
        "Step 6": {
            "steps": [
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 1 = 11 (left:",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "4 * 1 = 4 (left: 4 4 12) || 12 / 4 = 3 (left: 3 4)",
                "4 + 1 = 5 (left: 5 4  || Input: 10 2",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                0.001,
                0.003,
                0.0,
                0.003,
                1.001,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 3.4",
                "2 <- 0.5",
                "3 <- 3.4",
                "4 <- 1.9",
                "5 <- 0.5",
                "6 <- 3.6",
                "7 <- 5.5",
                "8 <- 3.4",
                "9 <- 1.8"
            ]
        },
        "Step 7": {
            "steps": [
                "4 - 1 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "4 * 1 = 4 (left: 4 4 12) || 12 - 4 = 8 (left: 4 8)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "1 + 4 = 5 (left: 5 1 12) || 12 / 5 = 2.4 (left: 2.4 12)",
                "4 * 1 = 4 (left: 4 4 12) || Input: 1 8",
                "4 * 1 = 4 (left: 4 4 12) || 12 / 4 = 3 (left: 4 3) || 4 * 3 = 12 (left: 12)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "4 - 1 = 3 (left: 1 3 12) || 3 / 1 = 3 (left: 3 12)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.002,
                0.002,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 5.5",
                "1 <- 5.5",
                "2 <- 0.3",
                "3 <- 7.9",
                "4 <- 2.8",
                "5 <- 7.9",
                "6 <- 7.9",
                "7 <- 2.9",
                "8 <- 3.6",
                "9 <- 7.9"
            ]
        },
        "Step 8": {
            "steps": [
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "4 * 1 = 4 (left: 4 4 12) || 12 - 4 = 8 (left: 4 8)",
                "4 - 1 = 3 (left: 1 3 12) || 3 / 1 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "4 - 1 = 3 (left: 1 3 12) || 3 / 1 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36)",
                "4 - 1 = 3 (left: 1 3 12) || 3 / 1 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9 12)",
                "4 - 1 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "4 * 1 = 4 (left: 4 4 12) || 12 / 4 = 3 (left: 4 3) || 4 * 3 = 12 (left: 12)",
                "4 - 1 = 3 (left: 1 3 12) || 3 / 1 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                1.002,
                20.0,
                0.001,
                40.0,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 8.5",
                "1 <- 7.9",
                "2 <- 7.9",
                "3 <- 5.5",
                "4 <- 3.4",
                "5 <- 7.9",
                "6 <- 2.6",
                "7 <- 8.5",
                "8 <- 8.5",
                "9 <- 2.8"
            ]
        },
        "Step 9": {
            "steps": [
                "4 - 1 = 3 (left: 1 3 12) || 3 / 1 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 / 2 = 18",
                "4 - 1 = 3 (left: 1 3 12) || 3 / 1 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9 12)",
                "4 - 1 = 3 (left: 1 3 12) || 3 / 1 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "4 - 1 = 3 (left: 1 3 12) || 3 / 1 = 3 (left: 3 12) || 3 + 12 = 15 (left: 15)",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "4 - 1 = 3 (left: 1 3 12) || 3 / 1 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 / 2 = 18",
                "4 - 1 = 3 (left: 1 3 12) || 3 / 1 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || No next steps possible with only one number provided.",
                "4 - 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)"
            ]
        },
        "Input": "1 1 4 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "17": {
        "puzzle": "1 1 12 12",
        "Step 0": {
            "steps": [
                "12 / 1 = 12 (left: 1 12 12)",
                "1 * 1 = 1 (left: 1 12 12)",
                "12 - 1 = 11 (left: 1 11 12)",
                "12 - 1 = 11 (left: 1 11 12)",
                "12 / 1 = 12 (left: 1 12 12)",
                "12 * 1 = 12 (left: 12 12 12)",
                "12 * 1 = 12 (left: 1 12 12)",
                "12 / 1 = 12 (left: 1 12 12)",
                "12 / 1 = 12 (left: 1 12 ",
                "12 / 1 = 12 (left: 1 12 12)"
            ],
            "Evaluation": [
                40.001,
                60.0,
                21.001,
                40.001,
                20.001,
                21.001,
                1.002,
                0.003,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.3",
                "4 <- 0.1",
                "5 <- INIT",
                "6 <- 0.0",
                "7 <- 0.0",
                "8 <- INIT",
                "9 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 1 = 11 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "12 * 1 = 12 (left: 1 12 12)",
                "12 - 1 = 11 (left: 1 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 12 / 1 = 12 (left: 12 12)",
                "1 * 1 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "12 - 1 = 11 (left: 1 11 12)",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 12 = 1 (left: 1 1)",
                "12 + 1 = 13 (left: 1 13 12)",
                "1 * 1 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.002,
                40.001,
                21.001,
                40.001,
                40.001,
                41.0,
                40.001,
                0.003,
                22.0,
                40.001
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.3",
                "2 <- 1.8",
                "3 <- 0.0",
                "4 <- INIT",
                "5 <- 0.0",
                "6 <- 0.2",
                "7 <- INIT",
                "8 <- 1.4",
                "9 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 1 = 11 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 * 1 = 11 (left: 11 12)",
                "12 + 1 = 13 (left: 1 13 12) || 13 / 1 = 13 (left: 13 12)",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "12 - 1 = 11 (left: 1 11 12)",
                "12 / 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left:",
                "12 - 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 / 1 = 12 (left: 1 12 ",
                "1 * 1 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 1 12)"
            ],
            "Evaluation": [
                1.0,
                0.002,
                0.003,
                40.001,
                3.0,
                0.001,
                0.002,
                1.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.5",
                "2 <- 1.5",
                "3 <- 1.3",
                "4 <- 0.2",
                "5 <- 1.5",
                "6 <- 1.1",
                "7 <- 0.1",
                "8 <- 0.0",
                "9 <- 1.9"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 - 1 = 11 (left: 1 11 12) || Possible",
                "12 - 1 = 11 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 - 1 = 11 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 * 1 = 11 (left: 11 12)",
                "12 * 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "1 * 1 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "1 * 1 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.002,
                0.001,
                0.002,
                0.002,
                40.001,
                40.001,
                60.0,
                20.002
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 2.3",
                "2 <- 3.8",
                "3 <- 0.4",
                "4 <- 1.6",
                "5 <- 3.8",
                "6 <- 3.8",
                "7 <- 2.3",
                "8 <- 1.4",
                "9 <- 1.6"
            ]
        },
        "Step 4": {
            "steps": [
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 * 1 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                20.002,
                20.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 2.3",
                "2 <- 3.7",
                "3 <- 1.6",
                "4 <- 3.6",
                "5 <- 3.7",
                "6 <- 1.9",
                "7 <- 0.4",
                "8 <- 1.3",
                "9 <- INIT"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "1 * 1 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 * 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "1 * 1 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "1 * 1 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 - 1 = 11 (left: 1 11 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.001,
                0.003,
                0.003,
                0.003,
                20.002,
                0.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 1.4",
                "2 <- 1.5",
                "3 <- INIT",
                "4 <- 1.9",
                "5 <- 1.3",
                "6 <- 0.0",
                "7 <- 1.2",
                "8 <- 1.5",
                "9 <- 3.6"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12)",
                "1 * 1 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 - 1 = 11 (left: 1 11 12) || 12 - 1 = 11 (left: 11 11)",
                "12 + 1 = 13 (left: 1 12 13)",
                "1 * 1 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 - 1 = 11 (left: 1 11 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 * 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)"
            ],
            "Evaluation": [
                40.001,
                0.002,
                0.003,
                0.003,
                0.003,
                20.002,
                60.0,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.6",
                "2 <- 0.2",
                "3 <- 1.8",
                "4 <- 6.6",
                "5 <- 6.6",
                "6 <- 1.6",
                "7 <- 4.6",
                "8 <- 3.8",
                "9 <- 1.5"
            ]
        },
        "Step 7": {
            "steps": [
                "1 * 1 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "12 + 1 = 13 (left: 1 13 12) || 13 / 1 = 13 (left: 13 12)",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 + 12 = 36 (left: 12 36)",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 - 1 = 11 (left: 1 11 12) || 12 - 1 = 11 (left: 11 11)"
            ],
            "Evaluation": [
                40.001,
                20.002,
                0.003,
                0.003,
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 7.0",
                "2 <- 4.6",
                "3 <- 7.0",
                "4 <- 6.6",
                "5 <- 1.5",
                "6 <- 1.3",
                "7 <- 6.0",
                "8 <- 3.9",
                "9 <- 1.2"
            ]
        },
        "Step 8": {
            "steps": [
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "1 * 1 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2 24)",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24)",
                "1 * 1 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24)",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 - 1 = 11 (left: 1 11 12) || 12 * 1 = 12 (left:",
                "12 - 1 = 11 (left: 1 11 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 - 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 * 1 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0) || There are no possible next steps as there are no numbers provided to perform operations with.",
                "12 - 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                60.0,
                0.002,
                0.002,
                0.003,
                40.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.7",
                "1 <- 3.8",
                "2 <- 1.6",
                "3 <- 8.7",
                "4 <- 6.0",
                "5 <- 3.6",
                "6 <- 8.7",
                "7 <- 1.9",
                "8 <- 1.9",
                "9 <- 6.0"
            ]
        },
        "Step 9": {
            "steps": [
                "1 * 1 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || ",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24)",
                "12 - 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 * 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 - 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24)",
                "1 * 1 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "1 * 1 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)"
            ]
        },
        "Input": "1 1 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "18": {
        "puzzle": "3 3 3 8",
        "Step 0": {
            "steps": [
                "3 / 3 = 1 (left: 1 3 8)",
                "3 * 3 = 9 (left: 9 3 8)",
                "3 * 3 = 9 (left: 9 3 8)",
                "8 - 3 = 5 (left: 3 5 8)",
                "3 + 3 = 6 (left: 6 3 8)",
                "3 + 3 = 6 (left: 6 3 8)",
                "8 - 3 = 5 (left: 3 3 5)",
                "3 + 8 = 11 (left: 3 3 11)",
                "8 / 3 = 2 (left: 2 3 ",
                "3 / 3 = 1 (left: 1 3 8)"
            ],
            "Evaluation": [
                40.001,
                3.0,
                3.0,
                3.0,
                3.0,
                22.0,
                3.0,
                41.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 0.4",
                "2 <- 0.9",
                "3 <- 0.3",
                "4 <- 0.5",
                "5 <- 0.9",
                "6 <- 0.0",
                "7 <- 0.2",
                "8 <- 0.5",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "3 + 8 = 11 (left: 3 3 11) || 3 * 3 = 9 (left: 9 11)",
                "3 + 3 = 6 (left: 6 3 8) || 3 + 8 = 11 (left: 6 11)",
                "3 / 3 = 1 (left: 1 3 8) || 3 - 1 = 2 (left: 2 8)",
                "8 - 3 = 5 (left: 3 5 8) || 8 - 3 = 5 (left: 5 8)",
                "3 + 3 = 6 (left: 6 3 8) || 3 + 8 = 11 (left: 6 11)",
                "3 / 3 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "3 / 3 = 1 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8)",
                "3 * 3 = 9 (left: 9 3 8) || 8 - 3 = 5 (left: 5 8)",
                "3 + 3 = 6 (left: 6 3 8) || 6 / 3 = 2 (left: 2 8)",
                "3 * 3 = 9 (left: 3 8 9)"
            ],
            "Evaluation": [
                0.0,
                0.001,
                1.001,
                1.002,
                1.002,
                60.0,
                60.0,
                0.002,
                2.001,
                60.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.0",
                "2 <- 0.9",
                "3 <- 0.7",
                "4 <- 1.9",
                "5 <- 1.6",
                "6 <- 0.1",
                "7 <- 1.5",
                "8 <- 0.3",
                "9 <- 0.0"
            ]
        },
        "Step 2": {
            "steps": [
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8)",
                "3 / 3 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "3 / 3 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "3 + 8 = 11 (left: 3 3 11) || 11 - 3 = 8 (left: 3 8)",
                "3 * 3 = 9 (left: 3 8 9) || 8 - 3 = 5 (left: 5 9)",
                "3 / 3 = 1 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8)",
                "3 / 3 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 - 3 = 5 (left: 3 5 8) || 5 - 3 = 2 (left: 2 8)",
                "3 / 3 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                1.002,
                0.002,
                60.0,
                60.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 2.0",
                "2 <- 2.6",
                "3 <- 1.6",
                "4 <- 2.7",
                "5 <- 2.3",
                "6 <- 2.6",
                "7 <- 2.0",
                "8 <- 2.3",
                "9 <- 2.7"
            ]
        },
        "Step 3": {
            "steps": [
                "3 * 3 = 9 (left: 3 8 9) || 8 / 3 = 2.66666666667 (left: 2.66666666667 9)",
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8) || 9 / 5 = 1.",
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5 8)",
                "3 / 3 = 1 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 / 3 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 8) / (3 / 3) = 24",
                "3 + 8 = 11 (left: 3 3 11) || 11 - 3 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8) || Input: 4 10",
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 + 8 = 11 (left: 3 3 11) || 11 - 3 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 / 3 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * (3 / 3)) * 8 = 24"
            ]
        },
        "Input": "3 3 3 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "19": {
        "puzzle": "1 1 2 6",
        "Step 0": {
            "steps": [
                "6 - 2 = 4 (left: 1 2 4)",
                "1 * 1 = 1 (left: 1 2 6)",
                "2 + 1 = 3 (left: 1 3 6)",
                "6 / 2 = 3 (left: 1 3 6)",
                "6 / 2 = 3 (left: 1 2 3)",
                "6 - 2 = 4 (left: 1 2 4)",
                "2 * 1 = 2 (left: 2 6 2)",
                "2 + 1 = 3 (left: 1 3 6)",
                "2 * 1 = 2 (left: 2 2 ",
                "6 - 2 = 4 (left: 1 2 4)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                21.0,
                2.001,
                1.001,
                0.003,
                60.0,
                3.0,
                21.001,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.6",
                "3 <- 0.6",
                "4 <- 0.6",
                "5 <- 0.6",
                "6 <- INIT",
                "7 <- 0.6",
                "8 <- 0.2",
                "9 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 6)",
                "6 - 2 = 4 (left: 1 2 4)",
                "2 * 1 = 2 (left: 2 6 2) || 6 / 2 = 3 (left: 3 2)",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2)",
                "2 * 1 = 2 (left: 2 6 2) || 6 / 2 = 3 (left: 3 2)",
                "2 * 1 = 2 (left: 2 6 2) || Input: 8 2 3 4",
                "6 - 2 = 4 (left: 1 2 4)",
                "2 * 1 = 2 (left: 2 6 2) || 6 - 2 = 4 (left: ",
                "2 + 1 = 3 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3)",
                "2 + 1 = 3 (left: 1 3 6) || Input: 5 5 10"
            ],
            "Evaluation": [
                1.002,
                0.003,
                1.001,
                60.0,
                0.002,
                0.003,
                1.002,
                0.0,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 0.7",
                "2 <- 1.3",
                "3 <- 1.3",
                "4 <- 1.3",
                "5 <- 0.6",
                "6 <- INIT",
                "7 <- 0.6",
                "8 <- 1.3",
                "9 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 1 = 2 (left: 2 2  || 2 + 2 = 4",
                "2 + 1 = 3 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3)",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24)",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 - 2 = 10 (left: 10)",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 / 2 = 6",
                "2 * 1 = 2 (left: 2 6 2) || 6 - 2 = 4 (left: 4 2)",
                "6 - 2 = 4 (left: 1 2 4)",
                "2 * 1 = 2 (left: 2 6 2) || 6 / 2 = 3 (left: 3 2)",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 / 2 = 6 (left: 6)",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 / 2 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                0.001,
                20.002,
                0.002,
                1.002,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 0.8",
                "2 <- 2.1",
                "3 <- 1.3",
                "4 <- 0.6",
                "5 <- 0.8",
                "6 <- 2.1",
                "7 <- 2.1",
                "8 <- 2.2",
                "9 <- 2.4"
            ]
        },
        "Step 3": {
            "steps": [
                "2 + 1 = 3 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3) || 3 - 1 = 2 (left: 2)",
                "2 * 1 = 2 (left: 2 2  || 2 / 2 = 1 (left: 1)",
                "2 + 1 = 3 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3) || 5 / 5 = 1 (left: 1)",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 / 2 = 6",
                "2 * 1 = 2 (left: 2 6 2) || 6 - 2 = 4 (left: 4 2)",
                "2 * 1 = 2 (left: 2 2  || 2 - 2 = 0 (left: 0)",
                "2 + 1 = 3 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3) || 1 * 3 = 3 (left: 3)",
                "2 + 1 = 3 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((1 * 2) * 6) * 2 = 24",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 / 2 = 6 || 12 + 2 = 14 (left: 14)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.003,
                0.001,
                0.003,
                0.001,
                0.0,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 1.3",
                "2 <- 0.6",
                "3 <- 3.8",
                "4 <- 1.3",
                "5 <- 3.8",
                "6 <- 2.1",
                "7 <- 2.2",
                "8 <- 0.6",
                "9 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "2 * 1 = 2 (left: 2 6 2) || 6 / 2 = 3 (left: 3 2)",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 - 2 = 10 (left: 10)",
                "2 * 1 = 2 (left: 2 6 2) || 6 - 2 = 4 (left: 4 2)",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((1 * 2) * 6) * 2 = 24 || Input: 3 3 4 7\nSteps:\n3 * 4 = 12 (left: 3 7 12)\n7 - 3 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\n48 / 2 = 24 (left: 24)\nAnswer: ((3 * 4) * (7 - 3)) / 2 = 24",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24)",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((1 * 2) * 6) * 2 = 24 || Input: 3 6 7 8\nSteps:\n3 * 8 = 24 (left: 6 7 24)\n7 - 6 = 1 (left: 1 24)\n1 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (7 - 6) = 24",
                "2 + 1 = 3 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3) || 1 * 3 = 3 (left: 3)",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: (2 * 1) * (6 * 2) = 24",
                "2 * 1 = 2 (left: 2 6 2) || 2 + 2 = 4 (left: 6)",
                "6 - 2 = 4 (left: 1 2 4)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                60.0,
                40.0,
                60.0,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 3.8",
                "2 <- 4.5",
                "3 <- 0.3",
                "4 <- 1.3",
                "5 <- 0.8",
                "6 <- 4.3",
                "7 <- 3.8",
                "8 <- 2.1",
                "9 <- 4.4"
            ]
        },
        "Step 5": {
            "steps": [
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 / 2 = 6 (left: 6)",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((1 * 2) * 6) * 2 = 24 || Input: 3 3 4 6\n\n3 * 4 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nAnswer: (3 * 4) * (6 - 3) = 24",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((1 * 2) * 6) * 2 = 24 || Input: 3 6 7 8\nSteps:\n3 * 8 = 24 (left: 6 7 24)\n7 - 6 = 1 (left: 1 24)\n1 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (7 - 6) = 24 || Input: 2 3 4 5\nSteps:\n2 * 5 = 10 (left: 3 4 10)\n4 - 3 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10)\n10 + 10 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((2 * 5) + (4 - 3)) +",
                "6 / 2 = 3 (left: 1 3 6) || 1 * 3 = 3 (left: 3)",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 + 2 = 14",
                "2 * 1 = 2 (left: 2 2  || 2 - 2 = 0 (left: 0)",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((1 * 2) * 6) * 2 = 24 || Input: 3 3 4 7\nSteps:\n3 * 4 = 12 (left: 3 7 12)\n7 - 3 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\n48 / 2 = 24 (left: 24)\nAnswer: ((3 * 4) * (7 - 3)) / 2 = 24 || Input: 2 3 5 7\nSteps:\n2 * 7 = 14 (left: 3 5 14)\n3 + 5 = 8 (left: 8 14)\n8 * 14 = 112 (left: 112)\n112 / 4 = 28 (left: 28)\n28 - 4 = 24 (left: 24)\nAnswer: (((2 * 7) * (3 + 5)) /",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((1 * 2) * 6) * 2 = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n3 + 5 = 8 (left: 8 12)\n8 * 3 = 24 (left: 24)\nAnswer: (3 * 4) * (5 + 3) = 24",
                "2 + 1 = 3 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3) || 3 - 1 = 2 (left: 2)",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: (2 * 1) * (6 + 1) = 24"
            ],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                0.0,
                0.003,
                0.003,
                60.0,
                60.0,
                0.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.6",
                "1 <- 4.3",
                "2 <- 1.3",
                "3 <- 5.9",
                "4 <- 5.1",
                "5 <- 5.1",
                "6 <- 5.9",
                "7 <- 2.2",
                "8 <- 0.6",
                "9 <- 0.2"
            ]
        },
        "Step 6": {
            "steps": [
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((1 * 2) * 6) * 2 = 24 || Input: 3 3 4 7\nSteps:\n3 * 4 = 12 (left: 3 7 12)\n7 - 3 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\n48 / 2 = 24 (left: 24)\nAnswer: ((3 * 4) * (7 - 3)) / 2 = 24 || Input: 2 3 5 7\nSteps:\n2 * 7 = 14 (left: 3 5 14)\n3 + 5 = 8 (left: 8 14)\n8 * 14 = 112 (left: 112)\n112 / 4 = 28 (left: 28)\n28 - 4 = 24 (left: 24)\nAnswer: (((2 * 7) * (3 + 5)) / || 4) - 4 = 24",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((1 * 2) * 6) * 2 = 24 || Input: 3 3 4 7\nSteps:\n3 * 4 = 12 (left: 3 7 12)\n7 - 3 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\n48 / 2 = 24 (left: 24)\nAnswer: ((3 * 4) * (7 - 3)) / 2 = 24 || Input: 2 3 5 7\nSteps:\n5 + 7 = 12 (left: 2 3 12)\n12 - 2 = 10 (left: 3 10)\n10 * 3 = 30 (left: 30)\n30 / 5 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((2 + 5) * (7 - 3)) *",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 / 2 = 6 (left: 6)",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: (2 * 1) * (6 + 1) = 24 || Input: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 8 9)\n9 - 8 = 1 (left: 1 9)\n1 * 9 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 - 3 = 24 (left: 24)\nAnswer: ((3 * 3) - 8) * (9 * 3",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((1 * 2) * 6) * 2 = 24 || Input: 3 3 4 6\n\n3 * 4 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nAnswer: (3 * 4) * (6 - 3) = 24 || Input: 2 3 4 6\nSteps:\n4 * 6 = 24 (left: 2 3 24)\n3 * 2 = 6 (left: 6 24)\n6 * 24 = 144 (left: 144)\nAnswer: 4 * (6 * (3 * 2)) = 24",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((1 * 2) * 6) * 2 = 24 || Input: 3 3 4 6\n\n3 * 4 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nAnswer: (3 * 4) * (6 - 3) = 24 || Input: 2 3 5 7\nSteps:\n5 + 7 = 12 (left: 2 3 12)\n3 - 2 = 1 (left: 1 12)\n1 * 12 = 12 (left: 12)\nAnswer: (2 * (3 + 7)) - 5 = 24",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: (2 * 1) * (6 + 1) = 24 || Input: 3 3 4 5\nSteps:\n3 + 4 = 7 (left: 3 5 7)\n7 - 3 = 4 (left: 4 5)\n4 * 5 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((3 + 4) - 3) * 5 = 24",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((1 * 2) * 6) * 2 = 24",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2)",
                "2 + 1 = 3 (left: 1 3 6) || Input: 4 5 9"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.003,
                60.0,
                40.0,
                60.0,
                40.0,
                60.0,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 6.7",
                "1 <- 4.4",
                "2 <- 0.2",
                "3 <- 6.5",
                "4 <- 5.6",
                "5 <- 5.9",
                "6 <- 6.8",
                "7 <- 5.2",
                "8 <- 4.3",
                "9 <- 6.4"
            ]
        },
        "Step 7": {
            "steps": [
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((1 * 2) * 6) * 2 = 24 || Input: 3 3 4 7\nSteps:\n3 + 7 = 10 (left: 3 4 10)\n4 - 3 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10)\n10 * 10 = 100 (left: 100)\n100 / 4 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: (((",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: (1 * 2) * (6 * 2) = 24",
                "2 + 1 = 3 (left: 1 3 6) || 1",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((1 * 2) * 6) * 2 = 24 || Input: 3 3 4 6\n\n3 * 4 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nAnswer: (3 * 4) * (6 - 3) = 24 || Input: 2 3 5 7\nSteps:\n5 + 7 = 12 (left: 2 3 12)\n3 - 2 = 1 (left: 1 12)\n1 * 12 = 12 (left: 12)\nAnswer: (2 * (3 + 7)) - 5 = 24 || Input: 2 3 4 6\nSteps:\n2 * 4 = 8 (left: 3 6 8)\n8 * 3 = 24 (left: 24)\nAnswer: (2 * 4) * 3 = 24",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((1 * 2) * 6) * 2 = 24 || Input: 3 3 4 7\nSteps:\n3 * 4 = 12 (left: 3 7 12)\n7 - 3 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\n48 / 2 = 24 (left: 24)\nAnswer: ((3 * 4) * (7 - 3)) / 2 = 24 || Input: 2 3 5 7\nSteps:\n2 * 7 = 14 (left: 3 5 14)\n3 + 5 = 8 (left: 8 14)\n8 * 14 = 112 (left: 112)\n112 / 4 = 28 (left: 28)\n28 - 4 = 24 (left: 24)\nAnswer: (((2 * 7) * (3 + 5)) / ||  28) - 4 = 24",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: (2 * 1) * (6 + 1) = 24 || Input: 3 3 4 7\n\n4 * 7 = 28 (left: 3 3 28)\n3 - 3 = 0 (left: 0 28)\n0 + 28 = 28 (left: 28)\nAnswer: (3 - 3) * (4 * 7) = 24",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24)",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((1 * 2) * 6) * 2 = 24 || Input: 3 6 7 8\nSteps:\n3 * 8 = 24 (left: 6 7 24)\n7 - 6 = 1 (left: 1 24)\n1 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (7 - 6) = 24 || Input: 2 3 4 5\nSteps:\n2 * 5 = 10 (left: 3 4 10)\n4 - 3 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10)\n10 + 10 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((2 * 5) + (4 - 3)) + || 4 = 24",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((1 * 2) * 6) * 2 = 24 || Input: 3 3 4 7\nSteps:\n3 * 4 = 12 (left: 3 7 12)\n7 - 3 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\n48 / 2 = 24 (left: 24)\nAnswer: ((3 * 4) * (7 - 3)) / 2 = 24 || Input: 2 3 5 6\nSteps:\n3 * 5 = 15 (left: 2 6 15)\n6 - 2 = 4 (left: 4 15)\n4 * 15 = 60 (left: 60)\n60 / 2.5 = 24 (left: 24)\nAnswer: ((3 * 5) * (6 - 2)) / 2.5 = 24",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((1 * 2) * 6) * 2 = 24 || Input: 3 3 4 6\n\n3 * 4 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nAnswer: (3 * 4) * (6 - 3) = 24 || Input: 2 3 4 6\nSteps:\n4 * 6 = 24 (left: 2 3 24)\n3 * 2 = 6 (left: 6 24)\n6 * 24 = 144 (left: 144)\nAnswer: 4 * (6 * (3 * 2)) = 24 || Input: 2 3 5 6\nSteps:\n3 * 5 = 15 (left: 2 6 15)\n6 - 2 = 4 (left: 4 15)\n4 * 15 = 60 (left: 60)\nAnswer: (6 - 2) * (3 * 5) = 24"
            ],
            "Evaluation": [
                40.0,
                0.003,
                0.003,
                60.0,
                0.003,
                60.0,
                60.0,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 4.3",
                "2 <- 7.5",
                "3 <- 5.9",
                "4 <- 6.7",
                "5 <- 6.4",
                "6 <- 7.3",
                "7 <- 4.3",
                "8 <- 0.4",
                "9 <- 6.3"
            ]
        },
        "Step 8": {
            "steps": [
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((1 * 2) * 6) * 2 = 24 || Input: 3 6 7 8\nSteps:\n3 * 8 = 24 (left: 6 7 24)\n7 - 6 = 1 (left: 1 24)\n1 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (7 - 6) = 24 || Input: 2 3 4 5\nSteps:\n2 * 5 = 10 (left: 3 4 10)\n4 - 3 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10)\n10 + 10 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((2 * 5) + (4 - 3)) + ||  10 = 24",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((1 * 2) * 6) * 2 = 24 || Input: 3 3 4 7\nSteps:\n3 * 4 = 12 (left: 3 7 12)\n7 - 3 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\n48 / 2 = 24 (left: 24)\nAnswer: ((3 * 4) * (7 - 3)) / 2 = 24 || Input: 5 6 7 8\nSteps:\n5 * 7 = 35 (left: 6 8 35)\n6 + 8 = 14 (left: 14 35)\n14 - 35 = -21 (left: -21)\n-21 + 24 = 24 (left: 24)\nAnswer: ((5 * 7) + (6 + 8)) + 24 = 24",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: (2 * 1) * (6 + 1) = 24 || Input: 3 3 4 7\n\n4 * 7 = 28 (left: 3 3 28)\n3 - 3 = 0 (left: 0 28)\n0 + 28 = 28 (left: 28)\nAnswer: (3 - 3) * (4 * 7) = 24 || Input: 2 3 3 7\nSteps:\n3 * 7 = 21 (left: 2 3 21)\n3 - 2 = 1 (left: 1 21)\n1 * 21 = 21 (left: 21)\nAnswer: 2 * (3 * (7 - 3)) = 24",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: (2 * 1) * (6 + 1) = 24 || Input: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n4 - 3 = 1 (left: 1 8)\n1 * 8 = 8 (left: 8)\n3 * 8 = 24 (left: 24)\nAnswer: ((3 + 5) - 4) * 3 = 24",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((1 * 2) * 6) * 2 = 24 || Input: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 9 3 8)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) * (8 - 6) = 24",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((1 * 2) * 6) * 2 = 24 || Input: 3 3 4 6\n\n3 * 4 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nAnswer: (3 * 4) * (6 - 3) = 24 || Input: 2 3 4 6\nSteps:\n4 * 6 = 24 (left: 2 3 24)\n3 * 2 = 6 (left: 6 24)\n6 * 24 = 144 (left: 144)\nAnswer: 4 * (6 * (3 * 2)) = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n12 * 2 = 24 (left: 24)\nAnswer: (3 * 4) * 2 = 24",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((1 * 2) * 6) * 2 = 24 || Input: 3 3 4 6\n\n3 * 4 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nAnswer: (3 * 4) * (6 - 3) = 24 || Input: 2 3 5 7\nSteps:\n5 + 7 = 12 (left: 2 3 12)\n3 - 2 = 1 (left: 1 12)\n1 * 12 = 12 (left: 12)\nAnswer: (2 * (3 + 7)) - 5 = 24 || Input: 2 3 4 6\nSteps:\n2 * 4 = 8 (left: 3 6 8)\n8 * 3 = 24 (left: 24)\nAnswer: (2 * 4) * 3 = 24 || Input: 2 4 5 6\nSteps:\n5 + 6 = 11 (left: 2 4 11)\n4 + 11 = 15 (left: 2 15)\n15 - 2 = 13 (left: 13)\n13 * 2 = 26 (left: 26)\n26 - 2 = 24 (left: 24)\nAnswer: ((5 + 6) + (4 + 11)) -",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((1 * 2) * 6) * 2 = 24 || Input: 3 3 4 7\nSteps:\n3 * 4 = 12 (left: 3 7 12)\n7 - 3 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\n48 / 2 = 24 (left: 24)\nAnswer: ((3 * 4) * (7 - 3)) / 2 = 24 || Input: 2 3 5 7\nSteps:\n3 + 7 = 10 (left: 2 5 10)\n10 - 5 = 5 (left: 2 5)\n5 * 2 = 10 (left: 10)\n10 * 10 = 100 (left: 100)\n100 / 4 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: (((",
                "6 / 2 = 3 (left: 1 2 3) || 3 - 2 = 1 (left: 1 1)",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: (2 * 1) * (6 + 1) = 24 || Input: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 8 9)\n9 - 8 = 1 (left: 1 9)\n1 * 9 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 - 3 = 24 (left: 24)\nAnswer: ((3 * 3) - 8) * (9 * 3 || ) = 24"
            ],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 8.2",
                "1 <- 3.8",
                "2 <- 7.8",
                "3 <- 8.7",
                "4 <- 8.4",
                "5 <- 7.8",
                "6 <- 6.7",
                "7 <- 6.8",
                "8 <- 6.6",
                "9 <- 6.8"
            ]
        },
        "Step 9": {
            "steps": [
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: (2 * 1) * (6 + 1) = 24 || Input: 3 3 4 7\n\n4 * 7 = 28 (left: 3 3 28)\n3 - 3 = 0 (left: 0 28)\n0 + 28 = 28 (left: 28)\nAnswer: (3 - 3) * (4 * 7) = 24 || Input: 2 3 3 7\nSteps:\n3 * 7 = 21 (left: 2 3 21)\n3 - 2 = 1 (left: 1 21)\n1 * 21 = 21 (left: 21)\nAnswer: 2 * (3 * (7 - 3)) = 24 || Input: 2 4 5 6\nSteps:\n4 * 6 = 24 (left: 2 5 24)\n5 - 2 = 3 (left: 3 24)\n3 * 24 = 24 (left: 24)\nAnswer: (2 * 4) * (5 - 6) = 24",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((1 * 2) * 6) * 2 = 24 || Input: 3 3 4 7\nSteps:\n3 + 7 = 10 (left: 3 4 10)\n3 * 4 = 12 (left: 10 12)\n10 + 12 = 22 (left: 22)\n22 + 2 = 24 (left: 24)\nAnswer: ((3 + 7) * 4) + 2 = 24",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((1 * 2) * 6) * 2 = 24 || Input: 3 3 4 7\nSteps:\n3 * 4 = 12 (left: 3 7 12)\n7 - 3 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\n48 / 2 = 24 (left: 24)\nAnswer: ((3 * 4) * (7 - 3)) / 2 = 24 || Input: 2 3 5 6\nSteps:\n3 * 5 = 15 (left: 2 6 15)\n6 - 2 = 4 (left: 4 15)\n4 * 15 = 60 (left: 60)\n60 / 2.5 = 24 (left: 24)\nAnswer: ((3 * 5) * (6 - 2)) / 2.5 = 24 || Input: 2 2 6 9\nSteps:\n2 * 9 = 18 (left: 2 6 18)\n6 - 2 = 4 (left: 4 18)\n4 * 18 = 72 (left: 72)\n72 / 3 = 24 (left: 24)\nAnswer: ((2 * 9) * (6 - 2)) / 3 = 24",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((1 * 2) * 6) * 2 = 24 || Input: 3 3 4 7\nSteps:\n3 * 4 = 12 (left: 3 7 12)\n7 - 3 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\n48 / 2 = 24 (left: 24)\nAnswer: ((3 * 4) * (7 - 3)) / 2 = 24 || Input: 2 3 5 7\nSteps:\n3 + 7 = 10 (left: 2 5 10)\n10 - 5 = 5 (left: 2 5)\n5 * 2 = 10 (left: 10)\n10 * 10 = 100 (left: 100)\n100 / 4 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: ((( || 2 + 3) * (5 - 7)) * 10) / 4 - 1 = 24",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((1 * 2) * 6) * 2 = 24 || Input: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 9 3 8)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) * (8 - 6) = 24 || Input: 2 3 5 6\nSteps:\n3 + 5 = 8 (left: 2 6 8)\n2 * 8 = 16 (left: 16 6)\n16 - 6 = 10 (left: 10)\n10 + 10 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((2 * (3 + 5)) - 6) +",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((1 * 2) * 6) * 2 = 24 || Input: 3 3 4 7\nSteps:\n3 * 4 = 12 (left: 3 7 12)\n7 - 3 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\n48 / 2 = 24 (left: 24)\nAnswer: ((3 * 4) * (7 - 3)) / 2 = 24 || Input: 2 3 5 6\nSteps:\n3 * 5 = 15 (left: 2 6 15)\n6 - 2 = 4 (left: 4 15)\n4 * 15 = 60 (left: 60)\n60 / 2.5 = 24 (left: 24)\nAnswer: ((3 * 5) * (6 - 2)) / 2.5 = 24 || Great job! You were able to obtain 24 using the numbers 2, 3, 5, and 6.",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((1 * 2) * 6) * 2 = 24 || Input: 3 3 5 7\nSteps:\n5 + 7 = 12 (left: 3 3 12)\n3 * 3 = 9 (left: 9 12)\n9 * 12 = 108 (left: 108)\nAnswer: (3 * 3) * (5 + 7) = 108",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 + 2 = 14",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: (2 * 1) * (6 + 1) = 24 || Input: 3 3 4 5\nSteps:\n3 + 4 = 7 (left: 3 5 7)\n7 - 3 = 4 (left: 4 5)\n4 * 5 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((3 + 4) - 3) * 5 = 24 || Input: 7 4 2 3\nSteps:\n7 - 3 = 4 (left: 4 2 4)\n4 * 2 = 8 (left: 8 4)\n8 * 4 = 32 (left: 32)\n32 - 8 = 24 (left: 24)\nAnswer: ((7 - 3) * 2) * 4 = 24",
                "2 * 1 = 2 (left: 2 6 2) || 2 * 6 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24)"
            ]
        },
        "Input": "1 1 2 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "20": {
        "puzzle": "1 1 2 11",
        "Step 0": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10)",
                "1 * 1 = 1 (left: 1 2 11)",
                "11 - 1 = 10 (left: 1 2 10)",
                "11 - 1 = 10 (left: 1 2 10)",
                "11 - 2 = 9 (left: 1 2 9)",
                "2 * 1 = 2 (left: 2 11)",
                "11 - 1 = 10 (left: 1 2 10)",
                "2 + 1 = 3 (left: 1 3 11)",
                "2 + 1 = 3 (left: 3 2 ",
                "11 - 1 = 10 (left: 1 2 10)"
            ],
            "Evaluation": [
                2.001,
                1.002,
                1.002,
                1.002,
                0.003,
                1.002,
                2.001,
                3.0,
                1.0,
                20.002
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 0.6",
                "2 <- 0.9",
                "3 <- INIT",
                "4 <- 0.1",
                "5 <- 0.9",
                "6 <- 0.2",
                "7 <- 0.9",
                "8 <- INIT",
                "9 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10) || 2 * 10 = 20 (left: 1 20)",
                "11 - 1 = 10 (left: 1 2 10) || 1 * 2 = 2 (left: 2 10)",
                "11 - 1 = 10 (left: 1 2 10) || 10 / 2 = 5 (left: 1 5)",
                "2 + 1 = 3 (left: 1 3 11)",
                "1 * 1 = 1 (left: 1 2 11) || 2 - 1 = 1 (left: 1 11)",
                "11 - 1 = 10 (left: 1 2 10) || 10 / 2 = 5 (left:",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8)",
                "11 - 1 = 10 (left: 1 2 10) || 1 * 2 = 2 (left: 2 10)",
                "11 - 2 = 9 (left: 1 2 9)",
                "2 * 1 = 2 (left: 2 11) || 4 + 9 = 13 (left: 13)"
            ],
            "Evaluation": [
                60.0,
                1.0,
                60.0,
                1.002,
                0.0,
                1.001,
                60.0,
                1.0,
                2.001,
                0.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.6",
                "2 <- INIT",
                "3 <- 1.0",
                "4 <- 0.7",
                "5 <- 1.2",
                "6 <- 1.0",
                "7 <- 1.2",
                "8 <- 1.6",
                "9 <- 1.5"
            ]
        },
        "Step 2": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10) || 2 * 10 = 20 (left: 1 20) || 20 / 1 = 20 (left: 20 20)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "2 * 1 = 2 (left: 2 2 11)",
                "11 - 1 = 10 (left: 1 2 10) || 2 * 10 = 20 (left: 1 20) || 20 - 1 = 19 (left: 19)",
                "2 + 1 = 3 (left: 1 3 11) || 1 * 3 = 3 (left: 3 11)",
                "11 - 1 = 10 (left: 1 2 10) || 10 / 2 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "11 - 1 = 10 (left: 1 2 10) || 2 * 10 = 20 (left: 1 20) || 1 * 20 = 20 (left: 20)",
                "11 - 1 = 10 (left: 1 2 10) || 10 / 2 = 5 (left: 1 5) || 1 + 5 = 6",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 / 2 = 5 (left: || 8 / 2 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                21.001,
                0.002,
                0.003,
                0.002,
                0.002,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.0",
                "2 <- 1.6",
                "3 <- INIT",
                "4 <- 1.0",
                "5 <- 0.0",
                "6 <- 2.2",
                "7 <- 1.0",
                "8 <- 1.0",
                "9 <- 2.2"
            ]
        },
        "Step 3": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10) || 10 / 2 = 5 (left: 1 5) || 5 - 1 = 4 (left: 4)",
                "11 - 1 = 10 (left: 1 2 10) || 2 * 10 = 20 (left: 1 20) || 20 / 1 = 20 (left: 20)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "2 + 1 = 3 (left: 1 3 11)",
                "11 - 1 = 10 (left: 1 2 10) || 2 * 10 = 20 (left: 1 20) || 1 * 20 = 20 (left: 20)",
                "11 - 1 = 10 (left: 1 2 10) || 10 / 2 = 5 (left:",
                "2 * 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11)",
                "11 - 1 = 10 (left: 1 2 10) || 2 * 10 = 20 (left: 1 20) || 1 * 20 = 20 (left: 20)",
                "11 - 1 = 10 (left: 1 2 10) || 2 * 10 = 20 (left: 1 20) || 20 - 1 = 19 (left: 19)",
                "2 * 1 = 2 (left: 2 2 11) || 2 + 11 = 13 (left: 2 13)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                1.002,
                0.001,
                20.001,
                2.0,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 3.5",
                "2 <- 1.6",
                "3 <- 1.2",
                "4 <- 2.2",
                "5 <- 2.2",
                "6 <- 1.0",
                "7 <- 0.1",
                "8 <- 2.2",
                "9 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10) || 10 / 2 = 5 (left: || No possible next steps as the equation has been completed.",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 / 2 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5) ",
                "2 * 1 = 2 (left: 2 2 11) || 2 + 11 = 13 (left: 2 13)",
                "2 * 1 = 2 (left: 2 2 11) || Input: 4 5",
                "11 - 1 = 10 (left: 1 2 10) || 2 * 10 = 20 (left: 1 20) || 20 - 1 = 19 (left: 1 19)",
                "1 * 1 = 1 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9)",
                "2 * 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 2 11)",
                "11 - 1 = 10 (left: 1 2 10)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.002,
                0.001,
                0.003,
                0.003,
                1.002,
                60.0,
                1.002,
                3.0
            ],
            "Resampling": [
                "0 <- 4.7",
                "1 <- 4.7",
                "2 <- 1.6",
                "3 <- 0.5",
                "4 <- INIT",
                "5 <- 3.6",
                "6 <- 1.0",
                "7 <- 1.2",
                "8 <- 0.5",
                "9 <- 1.6"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8 9)",
                "1 * 1 = 1 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "2 * 1 = 2 (left: 2 11) || 11 / 2 = 5.5 (left: 2 5.5)",
                "11 - 1 = 10 (left: 1 2 10)",
                "2 * 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "11 - 1 = 10 (left: 1 2 10) || 2 * 10 = 20 (left: 1 20) || 20 - 1 = 19 (left: 19)",
                "11 - 1 = 10 (left: 1 2 10) || 10 / 2 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "2 * 1 = 2 (left: 2 11) || 11 / 2 = 5.5 (left: 2 5.5)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 / 1 = 8 (left: 1 8)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.002,
                1.001,
                1.002,
                0.0,
                0.003,
                0.002,
                1.002,
                41.0
            ],
            "Resampling": [
                "0 <- 3.5",
                "1 <- 4.7",
                "2 <- 1.0",
                "3 <- 1.2",
                "4 <- 1.6",
                "5 <- 4.7",
                "6 <- 3.5",
                "7 <- 4.7",
                "8 <- 3.5",
                "9 <- 1.6"
            ]
        },
        "Step 6": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10) || 10 / 2 = 5 (left: || 5 + 8 = 13 (left: 8 13)",
                "1 * 1 = 1 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 2 10) || 2 * 10 = 20 (left: 1 20) || 1 * 20 = 20 (left: 20)",
                "11 - 1 = 10 (left: 1 2 10) || 10 / 2 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 * 1 = 1 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 2 10) || 10 / 2 = 5 (left: || 10 * 2 = 20 (left: 20)",
                "1 * 1 = 1 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 2 10) || 10 / 2 = 5 (left: || 10 - 2 = 8 (left: 8 10)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)"
            ],
            "Evaluation": [
                1.001,
                0.002,
                0.003,
                0.002,
                0.001,
                0.002,
                0.003,
                0.001,
                20.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 2.2",
                "2 <- 1.0",
                "3 <- 6.8",
                "4 <- 4.7",
                "5 <- 0.9",
                "6 <- 4.7",
                "7 <- 1.6",
                "8 <- 6.8",
                "9 <- 1.0"
            ]
        },
        "Step 7": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10) || 2 * 10 = 20 (left: 1 20) || 20 * 1 = 20 (left: 20)",
                "2 * 1 = 2 (left: 2 2 11) || 5 + 5 = 10 (",
                "11 - 1 = 10 (left: 1 2 10) || 2 * 10 = 20 (left: 1 20) || 20 * 1 = 20 (left: 20)",
                "11 - 1 = 10 (left: 1 2 10) || 10 / 2 = 5 (left: || 10 - 2 = 8 (left: 8 10) || Input: 4 8 16",
                "1 * 1 = 1 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 2 10) || 10 / 2 = 5 (left:",
                "1 * 1 = 1 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 1 - 9 = -8 (left: -8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 / 2 = 5 (left: || 10 - 2 = 8 (left: 8 10) || 8 * 10 = 80 (left: 80)",
                "11 - 1 = 10 (left: 1 2 10) || 2 * 10 = 20 (left: 1 20) || 5 + 10 = 15 (left: 10)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.001,
                0.003,
                0.002,
                1.001,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 6.8",
                "1 <- 6.8",
                "2 <- 5.9",
                "3 <- 5.9",
                "4 <- 4.7",
                "5 <- 3.5",
                "6 <- 1.6",
                "7 <- 1.2",
                "8 <- 0.9",
                "9 <- 4.7"
            ]
        },
        "Step 8": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10) || 10 / 2 = 5 (left: || 10 - 2 = 8 (left: 8 10) || 8 * 10 = 80 (left: 80)",
                "11 - 1 = 10 (left: 1 2 10) || 10 / 2 = 5 (left: || 10 - 2 = 8 (left: 8 10) || 8 / 10 = 0.8 (left: 0.8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 / 1 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 / 1 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 * 1 = 1 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 2 10) || 10 / 2 = 5 (left: || 10 + 2 = 12 (left: 8 12)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10) || 10 / 2 = 5 (left: 1 5) || 5 - 1 = 4 (left: 4)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8)",
                "1 * 1 = 1 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)"
            ],
            "Evaluation": [
                0.003,
                0.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.001,
                0.002,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 6.8",
                "1 <- 2.2",
                "2 <- 5.9",
                "3 <- 8.8",
                "4 <- 1.6",
                "5 <- 1.2",
                "6 <- 5.9",
                "7 <- 1.6",
                "8 <- 3.5",
                "9 <- 1.0"
            ]
        },
        "Step 9": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10) || 10 / 2 = 5 (left: || 10 - 2 = 8 (left: 8 10) || 10 - 8 = 2 (left: 2)",
                "2 * 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 / 1 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10) || 10 / 2 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 / 1 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 / 2 = 5 (left: || 10 * 2 = 20 (left: )",
                "11 - 1 = 10 (left: 1 2 10) || 2 * 10 = 20 (left: 1 20) || 20 * 1 = 20 (left: 20 20)"
            ]
        },
        "Input": "1 1 2 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "21": {
        "puzzle": "1 2 3 4",
        "Step 0": {
            "steps": [
                "3 + 4 = 7 (left: 1 2 7)",
                "2 * 3 = 6 (left: 1 6 4)",
                "4 - 1 = 3 (left: 2 3 4)",
                "3 + 4 = 7 (left: 1 2 7)",
                "3 + 4 = 7 (left: 1 2 7)",
                "3 + 4 = 7 (left: 1 2 7)",
                "4 - 3 = 1 (left: 1 2 1)",
                "3 + 4 = 7 (left: 1 2 7)",
                "2 + 4 = 6 (left: 1 6 ",
                "3 + 4 = 7 (left: 1 2 7)"
            ],
            "Evaluation": [
                2.001,
                60.0,
                60.0,
                2.001,
                0.003,
                2.001,
                0.003,
                1.002,
                40.001,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.1",
                "2 <- 0.8",
                "3 <- 0.1",
                "4 <- 0.0",
                "5 <- 0.8",
                "6 <- 0.1",
                "7 <- 0.8",
                "8 <- INIT",
                "9 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 3 = 6 (left: 1 6 4)",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4)",
                "2 + 4 = 6 (left: 1 6  || 6 - 1 = 5 (left: 5)",
                "2 * 3 = 6 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4)",
                "3 + 4 = 7 (left: 1 2 7) || Possible next steps:",
                "2 + 4 = 6 (left: 1 6  || 6 / 1 = 6 (left: 6)",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4)",
                "2 + 4 = 6 (left: 1 6  || 1 * 6 = 6 (left: 6)",
                "3 + 4 = 7 (left: 1 2 7)",
                "2 * 3 = 6 (left: 1 6 4) || 1 * 6 = 6 (left: 4 6)"
            ],
            "Evaluation": [
                60.0,
                40.0,
                0.003,
                60.0,
                0.003,
                0.003,
                60.0,
                0.002,
                2.0,
                40.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 1.9",
                "2 <- 1.1",
                "3 <- 1.9",
                "4 <- 1.9",
                "5 <- 1.9",
                "6 <- 1.6",
                "7 <- 1.0",
                "8 <- 0.8",
                "9 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "4 - 1 = 3 (left: 2 3 4) || 4 - 2 = 2 (left: 2 3)",
                "2 * 3 = 6 (left: 1 6 4) || 1 * 6 = 6 (left: 4 6) || 9 * 3 = 27 (left: 27 27)",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4) || 6 / 4 = 1.5 (left: 1.5)",
                "2 * 3 = 6 (left: 1 6 4) || 1 * 6 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "2 * 3 = 6 (left: 1 6 4) || 1 * 6 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 * 3 = 6 (left: 1 6 4) || 1 * 6 = 6 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24)",
                "2 * 3 = 6 (left: 1 6 4) || 4 - 1 = 3 (left: 3 4)",
                "2 + 4 = 6 (left: 1 6  || 1 * 6 = 6 (left: 6)",
                "2 * 3 = 6 (left: 1 6 4) || 1 * 6 = 6 (left: 4 6)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.0,
                60.0,
                0.002,
                0.003,
                60.0,
                41.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 0.0",
                "2 <- 1.9",
                "3 <- 1.9",
                "4 <- 2.6",
                "5 <- 1.9",
                "6 <- 1.0",
                "7 <- 2.7",
                "8 <- INIT",
                "9 <- 0.1"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24) || Answer: (2 * 3) * (6 / 1) = 24",
                "3 + 4 = 7 (left: 1 2 7) || 2 + 7 = 9 (left: 1 9)",
                "2 * 3 = 6 (left: 1 6 4) || 1 * 6 = 6 (left: 4 6) || 9 / 3 = 3 (left: 3)",
                "2 * 3 = 6 (left: 1 6 4) || 1 * 6 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24) || Answer: (2 * 3) * (6 / 1) = 24",
                "2 * 3 = 6 (left: 1 6 4) || 1 * 6 = 6 (left: 4 6) || 4 / 6 = 0.6666666666666666 (left: 0.6666666666666666)",
                "2 * 3 = 6 (left: 1 6 4) || 1 * 6 = 6 (left: 4 6)",
                "2 * 3 = 6 (left: 1 6 4) || 4 - 1 = 3 (left: 3 4) || 3 * 4 = 12 (left: 12)",
                "3 + 4 = 7 (left: 1 2 7)",
                "2 * 3 = 6 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.0,
                60.0,
                60.0,
                0.003,
                40.001,
                0.002,
                1.001,
                60.0
            ],
            "Resampling": [
                "0 <- 2.7",
                "1 <- 2.3",
                "2 <- 3.0",
                "3 <- 3.4",
                "4 <- 1.1",
                "5 <- 1.3",
                "6 <- 3.0",
                "7 <- 2.6",
                "8 <- 1.3",
                "9 <- 1.6"
            ]
        },
        "Step 4": {
            "steps": [
                "2 * 3 = 6 (left: 1 6 4) || 4 - 1 = 3 (left: 3 4) || 3 * 4 = 12 (left: 12)",
                "2 * 3 = 6 (left: 1 6 4) || 1 * 6 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (1 * 2 * 3) = 24",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24) || Answer: (2 * 3) * (6 / 1) = 24 || Input: 3 3 3 3\nSteps:\n3 * 3 = 9 (left: 3 3 9)\n3 * 3 = 9 (left: 3 9)\n9 * 3 = 27 (left: 27)\n27 - 3 = 24 (left: 24)\nAnswer: ((3 * 3) * 3) - 3 = 24",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24) || Answer: (2 * 3) * (6 / 1) = 24 || Input: 3 3 5 7\n\n3 * 5 = 15 (left: 3 7 15)\n15 - 7 = 8 (left: 3 8)\n8 * 3 = 24 (left: 24)\nAnswer: (3 * 5) - (7 - 3) = 24",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4) || 6 / 4 = 1.5 (left: 1.5)",
                "2 * 3 = 6 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4) || 6 - 4 = 2 (left: 2)",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24) || Answer: (2 * 3) * (6 / 1) = 24 || Input: 3 3 7 8\nSteps:\n3 * 7 = 21 (left: 3 8 21)\n21 - 8 = 13 (left: 3 13)\n13 * 3 = 39 (left: 39)\n39 - 15 = 24 (left: 24)\nAnswer: ((3 * 7) - 8) * 3 = 24",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24) || Answer: (2 * 3) * (6 / 1) = 24",
                "2 * 3 = 6 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24)",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4) || 6 - 4 = 2 (left: 2)"
            ]
        },
        "Input": "1 2 3 4",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "22": {
        "puzzle": "11 11 12 12",
        "Step 0": {
            "steps": [
                "12 + 11 = 23 (left: 11 12 23)",
                "11 / 11 = 1 (left: 1 12 12)",
                "11 * 11 = 121 (left: 12 12 121)",
                "11 * 11 = 121 (left: 12 12 121)",
                "12 + 11 = 23 (left: 11 12 23)",
                "11 * 11 = 121 (left: 12 12 121)",
                "11 * 11 = 121 (left: 12 12 121)",
                "12 + 11 = 23 (left: 11 12 23)",
                "12 / 11 = 1 (left: 1 12 ",
                "12 + 11 = 23 (left: 11 12 23)"
            ],
            "Evaluation": [
                0.0,
                20.002,
                0.003,
                0.003,
                1.001,
                1.002,
                0.003,
                1.001,
                2.0,
                1.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.1",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- 0.1",
                "5 <- 0.7",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "11 / 11 = 1 (left: 1 12 12)",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12 12)",
                "11 * 11 = 121 (left: 12 12 121)",
                "11 / 11 = 1 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12 12)",
                "12 + 11 = 23 (left: 11 12 23) || Input: 3",
                "12 / 11 = 1.09090909091 (left: 1.09090909091 11 12)",
                "12 / 11 = 1 (left: 11 1 ",
                "12 + 11 = 23 (left: 11 12 23)",
                "11 * 11 = 121 (left: 12 12 121)"
            ],
            "Evaluation": [
                21.001,
                0.003,
                1.002,
                0.003,
                1.001,
                0.003,
                22.0,
                20.001,
                2.001,
                1.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.6",
                "2 <- 1.0",
                "3 <- 1.6",
                "4 <- 1.6",
                "5 <- 1.7",
                "6 <- 1.0",
                "7 <- INIT",
                "8 <- 1.7",
                "9 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "11 / 11 = 1 (left: 1 12 12) || 1 + 12 = 13 (left: 12 13)",
                "12 / 11 = 1.09090909091 (left: 1.09090909091 11 12) || 11 / 1.09090909091 = 10 (left: 10 12)",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "12 / 11 = 1.09090909091 (left: 1.09090909091 11 12) || 12 - 11 = 1 (left: 1.09090909091 1 12)",
                "12 / 11 = 1.09090909091 (left: 1.09090909091 11 12) || 11 / 1.09090909091 = 10 (left: 10 12)",
                "12 / 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 11)",
                "11 / 11 = 1 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "12 / 11 = 1 (left: 11 12 ",
                "12 / 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 1 11)",
                "11 / 11 = 1 (left: 1 12 12) || 12 + 1 = 13 (left: 13 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                40.001,
                22.0,
                0.003,
                0.001,
                0.002,
                1.001,
                1.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 0.4",
                "2 <- 2.2",
                "3 <- 0.1",
                "4 <- 1.0",
                "5 <- INIT",
                "6 <- 0.1",
                "7 <- 2.2",
                "8 <- 1.6",
                "9 <- 2.3"
            ]
        },
        "Step 3": {
            "steps": [
                "12 + 11 = 23 (left: 11 12 23) || 11 * 12 = 132 (left: 132)",
                "12 + 11 = 23 (left: 11 12 23) || 12 / 11 = 1.0909 (left: 1.0909 23)",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "11 / 11 = 1 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "11 - 11 = 0 (left: 0 12 12)",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 / 11 = 1.09090909091 (left: 1.09090909091 11 12) || 12 - 1.09090909091 = 10.90909090909 (left: 11 10.90909090909)",
                "12 / 11 = 1.09090909091 (left: 1.09090909091 11 12) || 12 - 11 = 1 (left: 1.09090909091 1 12) || 1 / 1.09090909091 = 0.916666666667 (left: 0.916666"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.003,
                20.002,
                60.0,
                40.001,
                0.003,
                3.0,
                0.002
            ],
            "Resampling": [
                "0 <- 3.6",
                "1 <- 1.7",
                "2 <- 2.7",
                "3 <- 2.3",
                "4 <- 1.7",
                "5 <- 3.5",
                "6 <- 2.2",
                "7 <- 3.5",
                "8 <- 3.5",
                "9 <- 3.5"
            ]
        },
        "Step 4": {
            "steps": [
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 1 11)",
                "12 / 11 = 1 (left: 11 12  || 11 / 12 = 0.9167 (left: 0.9167)",
                "12 / 11 = 1.09090909091 (left: 1.09090909091 11 12) || 12 - 11 = 1 (left: 1.09090909091 1 12) || 12 - 1 = 11 (left: 1.09090909091 11)",
                "12 / 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 11)",
                "11 - 11 = 0 (left: 0 12 12) || 12 - 12 = 0 (left: ",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 - 11 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 12)",
                "11 - 11 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12)",
                "11 - 11 = 0 (left: 0 12 12) || 12 / 0 is undefined (left: 0 12)"
            ],
            "Evaluation": [
                40.001,
                0.001,
                20.002,
                3.0,
                0.002,
                0.0,
                40.001,
                0.001,
                60.0,
                21.001
            ],
            "Resampling": [
                "0 <- 3.6",
                "1 <- 3.6",
                "2 <- 1.0",
                "3 <- 2.2",
                "4 <- 3.5",
                "5 <- 4.6",
                "6 <- 1.7",
                "7 <- 1.8",
                "8 <- 4.6",
                "9 <- 1.0"
            ]
        },
        "Step 5": {
            "steps": [
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 / 11 = 1 (left: 1 12 12) || 12 - 1 = 11 (left: 1 11)",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144) ",
                "11 - 11 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 1)",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 24 0)",
                "12 / 11 = 1 (left: 11 1  || 11 * 1 = 11 (left: 1 11)",
                "12 + 11 = 23 (left: 11 12 23) || 11 / 12 = 0.9166666666666666 (left: 0.916666666666666",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24)",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                2.0,
                20.002,
                60.0,
                60.0,
                21.001,
                0.003,
                40.001,
                60.0
            ],
            "Resampling": [
                "0 <- 5.5",
                "1 <- 2.3",
                "2 <- 4.8",
                "3 <- 5.4",
                "4 <- 5.9",
                "5 <- 5.5",
                "6 <- 4.0",
                "7 <- 5.4",
                "8 <- 5.9",
                "9 <- 5.5"
            ]
        },
        "Step 6": {
            "steps": [
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 24 0) || 24 - 0 = 24 (left: 24) ",
                "12 / 11 = 1.09090909091 (left: 1.09090909091 11 12) || 12 - 11 = 1 (left: 1.09090909091 1 12) || 12 - 1 = 11 (left: 1 11)",
                "11 - 11 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "11 - 11 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 1) || 1 - 0 = 1 (left: 1)",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 24 0) || 24 / 0 = undefined (Division by zero is undefined)",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 24 0)",
                "11 - 11 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 1) || 1 - 0 = 1 (left: 1)",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 24 0) || 24 / 0 = undefined (division by zero is not possible)"
            ],
            "Evaluation": [
                60.0,
                21.0,
                0.003,
                0.002,
                0.002,
                0.003,
                60.0,
                0.001,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 5.8",
                "2 <- 4.8",
                "3 <- 6.0",
                "4 <- 3.6",
                "5 <- 5.9",
                "6 <- 6.0",
                "7 <- 5.3",
                "8 <- 1.7",
                "9 <- 4.6"
            ]
        },
        "Step 7": {
            "steps": [
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 9 / 3 = 3 (left: 3 27)",
                "11 - 11 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 24 0) || 24 - 0 = 24 (left: 24)  || Answer: ((11 / 11) * 12) + 12 = 24",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 24 0) || 24 - 0 = 24 (left: 24)  || Answer: ((11 / 11) * 12) + (12 + 12) = 24",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)  || There are no possible next steps for the input 144.",
                "12 / 11 = 1 (left: 11 1  || 11 * 1 = 11 (left: 1 11)",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 12 = 144 (left: 24 144)"
            ]
        },
        "Input": "11 11 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "23": {
        "puzzle": "3 7 7 8",
        "Step 0": {
            "steps": [
                "7 / 3 = 2 (left: 2 7 8)",
                "7 / 3 = 2 (left: 2 7 8)",
                "7 - 3 = 4 (left: 4 7 8)",
                "3 * 7 = 21 (left: 7 8 21)",
                "7 / 3 = 2 (left: 2 7 8)",
                "3 * 7 = 21 (left: 21 7 8)",
                "7 - 3 = 4 (left: 4 7 8)",
                "8 - 7 = 1 (left: 3 7 1)",
                "7 + 3 = 10",
                "8 - 7 = 1 (left: 3 7 1)"
            ],
            "Evaluation": [
                3.0,
                2.001,
                40.001,
                3.0,
                2.001,
                22.0,
                60.0,
                3.0,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.6",
                "2 <- INIT",
                "3 <- 0.6",
                "4 <- 0.2",
                "5 <- 0.6",
                "6 <- 0.6",
                "7 <- INIT",
                "8 <- 0.6",
                "9 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8)",
                "7 - 3 = 4 (left: 4 7 8) || 8 - 4 = 4 (left: 4 8)",
                "7 + 3 = 10 (left: 7 8 10)",
                "7 - 3 = 4 (left: 4 7 8) || 8 - 4 = 4 (left: 4 7)",
                "7 - 3 = 4 (left: 4 7 8) || 8 - 4 = 4 (left: 4 8)",
                "7 - 3 = 4 (left: 4 7 8) || 4 * 7 = 28 (left: 8 28)",
                "7 - 3 = 4 (left: 4 7 8) || 4 * 7 = 28 (left: 8 28)",
                "7 / 3 = 2.3 (left",
                "7 - 3 = 4 (left: 4 7 8) || 8 - 4 = 4 (left: 4 7)",
                "7 - 3 = 4 (left: 4 7 8) || 7 / 4 = 1.75 (left: 1.75 8)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                22.0,
                0.003,
                0.003,
                1.002,
                1.002,
                3.0,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 0.6",
                "2 <- 1.2",
                "3 <- 1.2",
                "4 <- 0.5",
                "5 <- 1.0",
                "6 <- 1.0",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "7 - 3 = 4 (left: 4 7 8) || 4 * 7 = 28 (left: 8 28)",
                "7 + 3 = 10 (left: 7 8 10) || 7 * 8 = 56 (left: 10 56)",
                "7 + 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8)",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8)",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 3 - 8 = -5 (left: -5 8)",
                "7 / 3 = 2 (left: 2 7 ",
                "8 - 7 = 1 (left: 3 7 1)",
                "7 - 3 = 4 (left: 4 7 8) || 7 / 4 = 1.75 (left: 1.75 8)"
            ],
            "Evaluation": [
                0.002,
                2.001,
                0.003,
                60.0,
                60.0,
                0.003,
                1.002,
                0.003,
                3.0,
                0.001
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 1.0",
                "2 <- 2.4",
                "3 <- INIT",
                "4 <- 2.4",
                "5 <- 1.6",
                "6 <- 2.4",
                "7 <- 0.5",
                "8 <- 0.2",
                "9 <- 1.0"
            ]
        },
        "Step 3": {
            "steps": [
                "7 - 3 = 4 (left: 4 7 8) || 7 - 4 = 3 (left: 3 8)",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "8 - 7 = 1 (left: 3 7 1)",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "7 - 3 = 4 (left: 4 7 8) || 4 * 7 = 28 (left: 8 28) || 28 / 8 = 3.5 (left: 8 3.5)",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 * 7 = 21 (left: 21 7 8) || 21 * 7 = 147 (left: 8 147)",
                "7 - 3 = 4 (left: 4 7 8) || 4 * 7 = 28 (left: 8 28)",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                3.0,
                0.002,
                2.001,
                60.0,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 3.6",
                "1 <- 3.6",
                "2 <- 3.6",
                "3 <- 0.2",
                "4 <- 0.2",
                "5 <- 3.0",
                "6 <- 1.0",
                "7 <- 3.0",
                "8 <- 2.3",
                "9 <- 3.3"
            ]
        },
        "Step 4": {
            "steps": [
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) + (8 / 7) = 24",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (8 - 7) = 24",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) - (8 - 3) = 24",
                "7 - 3 = 4 (left: 4 7 8) || 8 + 4 = 12 (left: 7 12)",
                "7 - 3 = 4 (left: 4 7 8) || 4 * 7 = 28 (left: 8 28)",
                "7 - 3 = 4 (left: 4 7 8) || 7 - 4 = 3 (left: 3 8) || 5 + 10 = 15 (left: 15)",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) ",
                "7 - 3 = 4 (left: 4 7 8) || 7 - 4 = 3 (left: 3 8) || 3 ^ 8 = 6561 (left: 6561)",
                "7 + 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || Input: 4 7",
                "8 - 7 = 1 (left: 3 7 1) || 3 * 7 = 21 (left: 21 1)"
            ],
            "Evaluation": [
                0.003,
                40.001,
                40.001,
                0.002,
                1.002,
                0.002,
                60.0,
                0.002,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 3.6",
                "1 <- 2.3",
                "2 <- 3.0",
                "3 <- 3.6",
                "4 <- 4.1",
                "5 <- 2.4",
                "6 <- 0.6",
                "7 <- 4.1",
                "8 <- INIT",
                "9 <- 4.6"
            ]
        },
        "Step 5": {
            "steps": [
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) - (8 - 3) = 24",
                "7 + 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5 8)",
                "7 - 3 = 4 (left: 4 7 8) || 7 - 4 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (8 - 7) = 24",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (8 - 7) = 24 || Input: 3 6 7 9\nSteps:\n6 * 3 = 18 (left: 7 9 18)\n18 - 9 = 9 (left: 7 9)\n9 * 7 = 63 (left: 63)\nAnswer: ((3 * 6) - 7) * 9 = 24",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "7 - 3 = 4 (left: 4 7 8) || 4 * 7 = 28 (left: 8 28)",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (8 - 7) = 24 || Input: 2 3 5 6\n\n2 * 3 = 6 (left: 6 5 6)\n6 + 5 = 11 (left: 11 6)\n11 * 6 = 66 (left: 66)\nAnswer: (2 * 3) + (5 + 6) = 24",
                "8 + 3 = 11 (left: 7 7 11)",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)  || Answer: (3 * 7) / (8 - 7) = 24"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                60.0,
                60.0,
                0.003,
                0.003,
                60.0,
                2.001,
                60.0
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 2.3",
                "2 <- 1.0",
                "3 <- 1.0",
                "4 <- 5.3",
                "5 <- 4.2",
                "6 <- 2.4",
                "7 <- 5.7",
                "8 <- 5.7",
                "9 <- 4.2"
            ]
        },
        "Step 6": {
            "steps": [
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (8 - 7) = 24 || Input: 2 3 5 6\n\n2 * 5 = 10 (left: 3 6 10)\n6 - 3 = 3 (left: 10 3)\n10 + 3 = 13 (left: 13)\n13 + 13 = 24 (left: 24)\nAnswer: ((2 * 5) + (6 - 3)) + 13 = 24",
                "7 + 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5 8)",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 8)",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (8 - 7) = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n3 + 4 = 7 (left: 7 12)\n7 * 12 = 84 (left: 84)\nAnswer: (2 * 6) * (3 + 4) = 24",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) - (8 - 3) = 24 || Input: 2 3 5 6\nSteps:\n5 + 3 = 8 (left: 2 6 8)\n8 * 2 = 16 (left: 16 6)\n16 + 6 = 22 (left: 22)\n22 + 2 = 24 (left: 24)\nAnswer: ((5 + 3) * 2) + 6 + 2 = 24",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (8 - 7) = 24 || Input: 2 3 5 6\n\n2 * 3 = 6 (left: 6 5 6)\n6 + 5 = 11 (left: 11 6)\n11 * 6 = 66 (left: 66)\nAnswer: (2 * 3) + (5 + 6) = 24 || Input: 1 3 5 7\n\n3 * 7 = 21 (left: 1 5 21)\n21 - 5 = 16 (left: 1 16)\n1 * 16 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((1 * 3) - 5) + 7 = 24",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (8 - 7) = 24 || Input: 2 3 5 6\n\n2 * 3 = 6 (left: 6 5 6)\n6 + 5 = 11 (left: 11 6)\n11 * 6 = 66 (left: 66)\nAnswer: (2 * 3) + (5 + 6) = 24 || Input: 1 3 4 6\n\n3 * 4 = 12 (left: 1 6 12)\n6 - 1 = 5 (left: 5 12)\n5 * 12 = 60 (left: 60)\n60 / 5 = 12 (left: 12)\nAnswer: ((3 * 4) - 1) * (6 + 12) = 24",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) - (8 - 3) = 24 || Input: 2 3 5 7\nSteps:\n5 + 7 = 12 (left: 2 3 12)\n3 * 12 = 36 (left: 2 36)\n36 / 2 = 18 (left: 18)\n18 - 3 = 15 (left: 15)\n15 - 2 = 13 (left: 13)\n13 + 18 = 31 (left: 31)\n31 - "
            ],
            "Evaluation": [
                40.0,
                1.001,
                0.003,
                0.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 2.3",
                "2 <- 6.6",
                "3 <- 5.7",
                "4 <- 6.4",
                "5 <- 5.7",
                "6 <- 6.6",
                "7 <- 6.6",
                "8 <- 6.7",
                "9 <- 5.7"
            ]
        },
        "Step 7": {
            "steps": [
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 8 / 3 = 2.66667 (left: 2.66667)",
                "7 + 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (7 - 8) = 24",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (8 - 7) = 24 || Input: 2 3 5 6\n\n2 * 3 = 6 (left: 6 5 6)\n6 + 5 = 11 (left: 11 6)\n11 * 6 = 66 (left: 66)\nAnswer: (2 * 3) + (5 + 6) = 24 || Input: 3 4 5 7\nSteps:\n4 * 7 = 28 (left: 3 5 28)\n28 - 5 = 23 (left: 3 23)\n23 - 3 = 20 (left: 20)\nAnswer: ((4 * 7) - 5) - 3 = 24",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (8 - 7) = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n3 + 4 = 7 (left: 7 12)\n7 * 12 = 84 (left: 84)\nAnswer: (2 * 6) * (3 + 4) = 24 || Input: 6 6 6 6\nSteps:\n6 + 6 = 12 (left: 6 6 12)\n6 + 6 = 12 (left: 6 12)\n6 * 12 = 72 (left: 72)\nAnswer: (6 + 6) * (6 + 6) = 24",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (8 - 7) = 24 || Input: 2 3 5 6\n\n2 * 3 = 6 (left: 6 5 6)\n6 + 5 = 11 (left: 11 6)\n11 * 6 = 66 (left: 66)\nAnswer: (2 * 3) + (5 + 6) = 24 || Input: 2 4 6 8\nSteps:\n2 * 4 = 8 (left: 6 8 8)\n6 + 8 = 14 (left: 14 8)\n14 - 8 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36)\n36 / 8 = 4 (left: 4)\n4 * 6 = 24 (left: 24)\nAnswer",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / 7 * 8 = 24",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) - 7 + 8 = 24",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (8 - 7) = 24 || Input: 2 3 5 6\n\n2 * 3 = 6 (left: 6 5 6)\n6 + 5 = 11 (left: 11 6)\n11 * 6 = 66 (left: 66)\nAnswer: (2 * 3) + (5 + 6) = 24 || Input: 1 3 5 7\n\n3 * 7 = 21 (left: 1 5 21)\n21 - 5 = 16 (left: 1 16)\n1 * 16 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((1 * 3) - 5) + 7 = 24 || Input: 2 4 6 9\n\n4 * 6 = 24 (left: 2 9 24)\n9 - 2 = 7 (left: 7 24)\n7 * 24 = 168 (left: 168)\nAnswer: (2 * 4) * (6 - 9 + 24) = 24",
                "3 * 7 = 21 (left: 21 7 8) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (8 - 7) = 24 || Input: 2 3 5 6\n\n2 * 3 = 6 (left: 6 5 6)\n6 + 5 = 11 (left: 11 6)\n11 * 6 = 66 (left: 66)\nAnswer: (2 * 3) + (5 + 6) = 24 || Input: 1 2 3 4\n\n3 * 4 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nAnswer: (1 + 2) * (3 * 4) = 24"
            ]
        },
        "Input": "3 7 7 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "24": {
        "puzzle": "1 1 13 13",
        "Step 0": {
            "steps": [
                "13 - 1 = 12 (left: 1 12 13)",
                "1 * 1 = 1 (left: 1 13 13)",
                "1 - 1 = 0 (left: 0 13 13)",
                "13 * 1 = 13 (left: 13 13 13)",
                "13 - 1 = 12 (left: 1 12 13)",
                "13 * 1 = 13 (left: 13 13 13)",
                "13 * 1 = 13 (left: 13 13 13)",
                "13 + 1 = 14 (left: 1 13 14)",
                "13 / 1 = 13 (left: 1 13 ",
                "13 + 1 = 14 (left: 1 13 14)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.0",
                "2 <- 0.0",
                "3 <- 0.0",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 13 13)",
                "13 - 1 = 12 (left: 1 12 13) || 12 / 1 = 12 (left: 12 13)",
                "13 - 1 = 12 (left: 1 12 13) || 12 / 1 = 12 (left: 12 13)",
                "13 - 1 = 12 (left: 1 12 13) || 13 - 1 = 12 (left: 12 13)",
                "1 - 1 = 0 (left: 0 13 13)",
                "13 * 1 = 13 (left: 13 13 13)",
                "13 + 1 = 14 (left: 1 13 14)",
                "13 * 1 = 13 (left: 1 13 ",
                "13 + 1 = 14 (left: 1 13 14)",
                "13 - 1 = 12 (left: 1 12 13) || 12 / 1 = 12 (left: 12 13)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                0.003,
                1.002,
                1.002,
                1.002,
                2.0,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.8",
                "3 <- 1.6",
                "4 <- 1.8",
                "5 <- 0.0",
                "6 <- 0.0",
                "7 <- 1.8",
                "8 <- INIT",
                "9 <- 1.8"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 13 13)",
                "1 - 1 = 0 (left: 0 13 13)",
                "13 + 1 = 14 (left: 1 13 14) || 14 / 1 = 14 (left: 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 1 * 13 = 13 (left: 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)",
                "13 - 1 = 12 (left: 1 12 13) || 13 - 1 = 12 (left: 12 12)",
                "13 - 1 = 12 (left: 1 12 13) || 13 - 1 = 12 (left: 1 12)",
                "13 + 1 = 14 (left: 1 13 14) || 13 - 13 = 0 (left: 1 14)",
                "13 + 1 = 14 (left: 1 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                0.003,
                0.003,
                0.003,
                60.0,
                0.001,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.5",
                "1 <- 2.5",
                "2 <- 1.8",
                "3 <- 2.5",
                "4 <- 2.0",
                "5 <- 2.0",
                "6 <- 2.5",
                "7 <- 1.7",
                "8 <- 2.5",
                "9 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "13 - 1 = 12 (left: 1 12 13) || 13 - 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "13 - 1 = 12 (left: 1 12 13) || 13 - 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "13 + 1 = 14 (left: 1 13 14) || 13 - 1 = 12 (left: 12 14)",
                "13 - 1 = 12 (left: 1 12 13) || 13 - 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 * 1 = 1 (left: 1 13 13) || 1 * 13 = 13 (left: 13 13)",
                "1 * 1 = 1 (left: 1 13 13) || 13 / 1 = 13 (left:",
                "13 - 1 = 12 (left: 1 12 13) || 13 - 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "13 * 1 = 13 (left: 1 13  || 13 / 1 = 13 (left: 13)",
                "13 - 1 = 12 (left: 1 12 13) || 13 - 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "13 - 1 = 12 (left: 1 13 12)"
            ],
            "Evaluation": [
                20.0,
                0.003,
                0.003,
                20.002,
                0.003,
                20.001,
                0.003,
                0.002,
                0.003,
                22.0
            ],
            "Resampling": [
                "0 <- 3.5",
                "1 <- 3.5",
                "2 <- 3.3",
                "3 <- 0.0",
                "4 <- 2.5",
                "5 <- 3.0",
                "6 <- 0.0",
                "7 <- 1.8",
                "8 <- 2.5",
                "9 <- 2.5"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 13 13) || 13 / 1 = 13 (left: || 13 - 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 13 13) || 13 / 1 = 13 (left: || 13 / 13 = 1 (left: 1)",
                "13 - 1 = 12 (left: 1 12 13) || 13 - 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 12 2)",
                "13 - 1 = 12 (left: 1 12 13) || 13 - 1 = 12 (left: 12 12)",
                "13 - 1 = 12 (left: 1 12 13) || 13 - 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "13 - 1 = 12 (left: 1 12 13) || 13 - 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (13 - 1) + (13 - 1) = 24",
                "13 - 1 = 12 (left: 1 12 13) || 13 - 1 = 12 (left: 12 12)",
                "13 + 1 = 14 (left: 1 13 14) || 14 / 1 = 14 (left: 1 13 14)",
                "13 - 1 = 12 (left: 1 12 13) || 13 - 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "13 - 1 = 12 (left: 1 12 13) || 13 - 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)"
            ]
        },
        "Input": "1 1 13 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "25": {
        "puzzle": "1 2 4 12",
        "Step 0": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8)",
                "2 * 4 = 8 (left: 1 8 12)",
                "12 / 4 = 3 (left: 1 2 3)",
                "4 * 3 = 12 (left: 1 12 12)",
                "12 - 4 = 8 (left: 1 2 8)",
                "4 - 2 = 2 (left: 1 2 12)",
                "12 / 4 = 3 (left: 1 2 3)",
                "12 - 4 = 8 (left: 1 2 8)",
                "12 / 4 = 3 (left: 1 2 ",
                "12 - 4 = 8 (left: 1 2 8)"
            ],
            "Evaluation": [
                60.0,
                1.002,
                1.002,
                0.003,
                21.001,
                60.0,
                1.001,
                22.0,
                0.003,
                21.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.0",
                "2 <- INIT",
                "3 <- 0.7",
                "4 <- 0.0",
                "5 <- 0.5",
                "6 <- 0.5",
                "7 <- 0.0",
                "8 <- INIT",
                "9 <- 0.9"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 4 = 8 (left: 1 8 12)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "4 * 1 = 4 (left: 4 12)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "4 - 2 = 2 (left: 1 2 12) || 12 / 1 = 12 (left:",
                "4 - 2 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10)",
                "12 - 4 = 8 (left: 1 2 8)",
                "12 - 4 = 8 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)"
            ],
            "Evaluation": [
                3.0,
                60.0,
                0.003,
                60.0,
                60.0,
                40.001,
                60.0,
                60.0,
                41.0,
                0.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 1.4",
                "2 <- 1.7",
                "3 <- 1.6",
                "4 <- INIT",
                "5 <- 1.4",
                "6 <- 1.5",
                "7 <- 1.6",
                "8 <- 0.7",
                "9 <- 1.5"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 * 1 = 10 (left",
                "4 - 2 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "4 * 3 = 12 (left: 1 12 12)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "4 - 2 = 2 (left: 1 2 12) || 12 / 1 = 12 (left: || 12 - 1 = 11 (left: 11 12)",
                "4 - 2 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "4 - 2 = 2 (left: 1 2 12) || 12 / 1 = 12 (left: || 12 / 2 = 6 (left: 6 12)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                21.001,
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 1.6",
                "2 <- 1.8",
                "3 <- 0.4",
                "4 <- 1.4",
                "5 <- 1.4",
                "6 <- 1.1",
                "7 <- 1.6",
                "8 <- 1.5",
                "9 <- 0.9"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "4 - 2 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 - 4 = -3 (left: -3)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "4 - 2 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "4 - 2 = 2 (left: 1 2 12) || 12 / 1 = 12 (left: || 1 + 12 = 13 (left: 13)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                40.001,
                60.0,
                0.001,
                0.003,
                0.003,
                0.001,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 2.8",
                "2 <- 3.3",
                "3 <- 1.1",
                "4 <- 1.4",
                "5 <- 2.2",
                "6 <- 1.6",
                "7 <- 3.9",
                "8 <- 1.6",
                "9 <- 1.1"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 * 1 = 10 (left || 10 + 1 = 11 (left: 11)",
                "4 - 2 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "4 - 2 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.003,
                0.001,
                0.003,
                0.0,
                0.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 2.8",
                "2 <- 0.9",
                "3 <- 1.3",
                "4 <- 0.9",
                "5 <- 0.5",
                "6 <- 1.7",
                "7 <- 3.9",
                "8 <- 3.2",
                "9 <- 3.9"
            ]
        },
        "Step 5": {
            "steps": [
                "2 * 4 = 8 (left: 1 8 12) || 8 / 1 = 8 (left: 8 12)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || Possible next steps:",
                "12 - 4 = 8 (left: 1 2 8) || Possible",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "4 - 2 = 2 (left: 1 2 12) || 2 + 12 = 14 (left:",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6) ",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                60.0,
                0.002,
                0.002,
                0.002,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 5.4",
                "2 <- 5.4",
                "3 <- 1.4",
                "4 <- 1.5",
                "5 <- 3.3",
                "6 <- 0.9",
                "7 <- 3.2",
                "8 <- 2.2",
                "9 <- 2.8"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "4 - 2 = 2 (left: 1 2 12) || 12 / 1 = 12 (left: || 1 / 12 = 0.0833 (left: 0.0833)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 * 1 = 10 (left || 10 + 1 = 11 (left: 11)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                0.001,
                0.003,
                0.003,
                60.0,
                0.002,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 5.4",
                "2 <- 1.3",
                "3 <- 6.6",
                "4 <- 3.3",
                "5 <- 1.6",
                "6 <- 3.9",
                "7 <- 0.0",
                "8 <- 1.5",
                "9 <- 1.3"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "4 - 2 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10)",
                "4 - 2 = 2 (left: 1 2 12) || 12 / 1 = 12 (left: || 12 - 1 = 11 (left: 11)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.002,
                0.001,
                0.002,
                0.002,
                0.003,
                60.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 5.4",
                "2 <- 0.0",
                "3 <- 3.2",
                "4 <- 3.2",
                "5 <- 6.6",
                "6 <- 1.3",
                "7 <- 0.0",
                "8 <- 7.7",
                "9 <- 1.1"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 - 4 = 8 (left: 1 2 8) || 5 + 5 = 10 (left: 10",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 4 = 8 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                1.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 6.6",
                "1 <- 2.8",
                "2 <- 1.8",
                "3 <- 6.6",
                "4 <- 3.3",
                "5 <- 7.7",
                "6 <- 5.4",
                "7 <- 1.4",
                "8 <- 1.1",
                "9 <- 3.9"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 - 4 = 8 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ]
        },
        "Input": "1 2 4 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "26": {
        "puzzle": "1 1 3 6",
        "Step 0": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 6)",
                "1 * 1 = 1 (left: 1 3 6)",
                "1 + 3 = 4 (left: 4 3 6)",
                "3 * 1 = 3 (left: 3 3 6)",
                "3 + 1 = 4 (left: 1 4 6)",
                "1 * 3 = 3 (left: 3 1 6)",
                "1 * 3 = 3 (left: 3 1 6)",
                "3 + 1 = 4 (left: 1 4 6)",
                "6 / 3 = 2 (left: 1 2 ",
                "6 - 3 = 3 (left: 1 3 3)"
            ],
            "Evaluation": [
                60.0,
                21.0,
                2.001,
                2.001,
                60.0,
                41.0,
                21.001,
                60.0,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- INIT",
                "2 <- 0.4",
                "3 <- 0.1",
                "4 <- 0.1",
                "5 <- 0.7",
                "6 <- 0.4",
                "7 <- 0.0",
                "8 <- 0.6",
                "9 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "6 - 3 = 3 (left: 1 1 3)",
                "3 + 1 = 4 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "1 * 1 = 1 (left: 1 3 6) || 6 / 3 = 2 (left: 1 2)",
                "1 * 1 = 1 (left: 1 3 6) || 1 * 3 = 3 (left: 3)",
                "3 + 1 = 4 (left: 1 4 6) || 6 / 1 = ",
                "3 + 1 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)",
                "3 + 1 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4)",
                "1 * 3 = 3 (left: 3 1 6) || 3 / 1 = 3 (left: 3 6)",
                "1 * 1 = 1 (left: 1 3 6) || 3 * 1 = 3 (left: 3 6)"
            ],
            "Evaluation": [
                60.0,
                1.002,
                1.002,
                0.001,
                0.003,
                0.003,
                60.0,
                0.003,
                2.0,
                2.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.6",
                "2 <- 0.7",
                "3 <- 0.7",
                "4 <- 1.6",
                "5 <- 1.6",
                "6 <- 1.6",
                "7 <- 1.9",
                "8 <- 1.0",
                "9 <- 0.0"
            ]
        },
        "Step 2": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "3 + 1 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "3 + 1 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)",
                "3 + 1 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "3 + 1 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 10 + 5 = 15 (left: 15 2)",
                "3 + 1 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "3 + 1 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "1 * 1 = 1 (left: 1 3 6) || 3 * 1 = 3 (left: 3 6) || Input: 4 10",
                "3 + 1 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || Input: 3 6 9",
                "3 + 1 = 4 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                40.0,
                20.002,
                0.002,
                0.001,
                0.001,
                0.003,
                0.003,
                22.0
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 2.3",
                "3 <- 2.0",
                "4 <- 2.3",
                "5 <- 2.2",
                "6 <- 2.3",
                "7 <- 2.2",
                "8 <- 2.3",
                "9 <- 1.0"
            ]
        },
        "Step 3": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (3 + 1) * 6 = 24",
                "3 + 1 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (3 + 1) * (6 * 1) = 24",
                "3 + 1 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2) || 2 / 1 = 2 (left: 2)",
                "3 + 1 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (3 + 1) * (4 * 6) = 24",
                "3 + 1 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2) || 2 - 1 = 1 (left: 1)",
                "3 + 1 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "3 + 1 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2) || 1 * 2 = 2 (left: 2)",
                "3 + 1 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "3 + 1 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2) || 1 * 2 = 2 (left: 2)",
                "3 + 1 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)"
            ]
        },
        "Input": "1 1 3 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "27": {
        "puzzle": "1 1 3 9",
        "Step 0": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 9)",
                "1 * 1 = 1 (left: 1 3 9)",
                "9 - 1 = 8 (left: 1 3 8)",
                "9 - 3 = 6 (left: 1 6 9)",
                "3 + 1 = 4 (left: 1 4 9)",
                "9 - 3 = 6 (left: 1 1 6)",
                "9 / 3 = 3 (left: 1 3 9)",
                "9 - 3 = 6 (left: 1 6 9)",
                "9 - 1 = 8 (left: 1 3 ",
                "3 + 1 = 4 (left: 1 4 9)"
            ],
            "Evaluation": [
                2.001,
                0.003,
                60.0,
                1.001,
                1.001,
                3.0,
                0.003,
                0.001,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.2",
                "2 <- INIT",
                "3 <- 0.2",
                "4 <- 0.2",
                "5 <- INIT",
                "6 <- 0.2",
                "7 <- 0.2",
                "8 <- 0.2",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 9) || 4 * 1 = 4 (left: 4 9)",
                "9 - 1 = 8 (left: 1 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "3 * 1 = 3 (left: 3 3 9)",
                "9 - 1 = 8 (left: 1 3 8) || 8 / 3 = 2.67 (left: 1 2.67)",
                "9 - 1 = 8 (left: 1 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "9 - 1 = 8 (left: 1 3 8)",
                "9 - 1 = 8 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5)",
                "9 - 1 = 8 (left: 1 3 8) || 3 - 1 = 2 (left: 2 8)",
                "9 - 1 = 8 (left: 1 3 8) || 8 - 1 = 7 (left: 3 7)",
                "3 * 1 = 3 (left: 3 3 9)"
            ],
            "Evaluation": [
                21.001,
                0.001,
                40.001,
                0.003,
                0.002,
                60.0,
                20.0,
                0.003,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.2",
                "2 <- 1.5",
                "3 <- 1.0",
                "4 <- 1.5",
                "5 <- 1.5",
                "6 <- 0.0",
                "7 <- 0.2",
                "8 <- 0.2",
                "9 <- 1.6"
            ]
        },
        "Step 2": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 9) || 4 * 1 = 4 (left: 4 9) || 9 / 4 = 2.25 (left: 2.25)",
                "3 * 1 = 3 (left: 3 3 9) || 9 - 3 = 6 (left: 3 6)",
                "9 - 1 = 8 (left: 1 3 8) || 2 * 6 = 12 (",
                "3 + 1 = 4 (left: 1 4 9) || 4 * 1 = 4 (left: 4 9) || 4 * 9 = 36 (left: 9 36)",
                "9 - 1 = 8 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8)",
                "9 - 1 = 8 (left: 1 3 8) || ",
                "3 + 1 = 4 (left: 1 4 9) || 9 - 4 = 5 (left: 1 5)",
                "9 - 1 = 8 (left: 1 3 8) || 8 * 1 = 8 (left: 3 8)",
                "9 - 1 = 8 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5)",
                "9 - 1 = 8 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 5 - 1 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.001,
                1.001,
                0.003,
                20.002,
                60.0,
                20.002,
                41.0,
                60.0,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 1.0",
                "2 <- 1.6",
                "3 <- 2.3",
                "4 <- 2.7",
                "5 <- 2.7",
                "6 <- 2.7",
                "7 <- 1.5",
                "8 <- 1.2",
                "9 <- 2.4"
            ]
        },
        "Step 3": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 9) || 4 * 1 = 4 (left: 4 9) || 4 * 9 = 36 (left: 9 36) || 9 * 4 = 36 (left: 9 36)",
                "3 + 1 = 4 (left: 1 4 9) || 4 * 1 = 4 (left: 4 9) || 9 / 4 = 2.25 (left: 2.25 9)",
                "9 - 1 = 8 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "3 + 1 = 4 (left: 1 4 9) || 4 * 1 = 4 (left: 4 9) || 4 * 9 = 36 (left: 9 36) || Input: 5 25",
                "9 - 1 = 8 (left: 1 3 8) || 8 * 1 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "9 - 1 = 8 (left: 1 3 8) || 8 * 1 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "9 - 1 = 8 (left: 1 3 8) || 8 * 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "9 - 1 = 8 (left: 1 3 8) || 3 / 1 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 3 3 9) || 9 - 3 = 6 (left: 3 6)",
                "9 - 1 = 8 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)"
            ],
            "Evaluation": [
                20.0,
                1.0,
                0.001,
                0.003,
                0.001,
                0.002,
                40.0,
                60.0,
                2.0,
                0.002
            ],
            "Resampling": [
                "0 <- 3.7",
                "1 <- 2.4",
                "2 <- 3.7",
                "3 <- 2.4",
                "4 <- 2.6",
                "5 <- 2.6",
                "6 <- 1.2",
                "7 <- 1.5",
                "8 <- 0.2",
                "9 <- 3.6"
            ]
        },
        "Step 4": {
            "steps": [
                "9 - 1 = 8 (left: 1 3 8) || 3 / 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "9 - 1 = 8 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "9 - 1 = 8 (left: 1 3 8) || 3 / 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5 8)",
                "9 - 1 = 8 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 + 1 = 4 (left: 1 4 9) || 9 - 4 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "3 + 1 = 4 (left: 1 4 9) || 9 - 4 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "3 * 1 = 3 (left: 3 3 9) || 9 - 3 = 6 (left: 3 6)",
                "9 - 1 = 8 (left: 1 3 8) || 1 * 3 = 3 (left: ",
                "9 - 1 = 8 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5)",
                "9 - 1 = 8 (left: 1 3 8) || 8 * 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * (9 - 1)) * 3 = 24"
            ]
        },
        "Input": "1 1 3 9",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "28": {
        "puzzle": "7 7 12 12",
        "Step 0": {
            "steps": [
                "12 + 7 = 19 (left: 7 12 19)",
                "7 / 7 = 1 (left: 1 12 12)",
                "7 * 7 = 49 (left: 12 12 49)",
                "7 * 7 = 49 (left: 12 12 49)",
                "12 + 7 = 19 (left: 7 12 19)",
                "7 * 7 = 49 (left: 12 12 49)",
                "7 * 7 = 49 (left: 12 12 49)",
                "12 + 7 = 19 (left: 7 12 19)",
                "12 / 12 = 1 (left: 7 1 ",
                "12 + 7 = 19 (left: 7 12 19)"
            ],
            "Evaluation": [
                2.001,
                20.002,
                2.001,
                0.003,
                2.001,
                0.003,
                2.001,
                3.0,
                0.0,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- 0.6",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 0.4",
                "7 <- 0.1",
                "8 <- 0.1",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "7 / 7 = 1 (left: 1 12 12)",
                "7 * 7 = 49 (left: 12 12 49)",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "7 * 7 = 49 (left: 12 12 49) || 12 / 12 = 1 (left: 1 12 49)",
                "7 * 7 = 49 (left: 12 12 49)",
                "7 * 7 = 49 (left: 12 12 49)",
                "12 + 7 = 19 (left: 7 12 19) || 19 - 12 = 7 (left: 7)",
                "7 / 7 = 1 (left: 1 12 12) || 12 / 12 = 1 (left: 1 1)",
                "7 / 7 = 1 (left: 1 12 12) || 12 - 12 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 12 12)"
            ],
            "Evaluation": [
                41.0,
                0.003,
                20.002,
                0.003,
                1.002,
                21.001,
                0.002,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 1.0",
                "2 <- 1.9",
                "3 <- 1.9",
                "4 <- 1.9",
                "5 <- 0.6",
                "6 <- 1.2",
                "7 <- INIT",
                "8 <- 1.9",
                "9 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "7 - 7 = 0 (left: 0 12 12) || 12 / 0 = undefined",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "7 - 7 = 0 (left: 0 12 12) || 0 * 12 = 0 (left: 12 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12)",
                "7 * 7 = 49 (left: 12 12 49) || ",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 7 = 1.71 (left: 1.",
                "7 - 7 = 0 (left: 0 12 12) || 0 * 12 = 0 (left: 12 12)",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                20.002,
                60.0,
                60.0,
                0.003,
                0.003,
                20.0,
                22.0,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.2",
                "2 <- 2.3",
                "3 <- 1.5",
                "4 <- 2.4",
                "5 <- INIT",
                "6 <- 2.4",
                "7 <- 2.1",
                "8 <- 2.1",
                "9 <- 2.3"
            ]
        },
        "Step 3": {
            "steps": [
                "7 * 7 = 49 (left: 12 12 49)",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "7 * 7 = 49 (left: 12 12 49) || 12 / 12 = 1 (left: 1 12 49)",
                "7 - 7 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "7 / 7 = 1 (left: 12 1 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 - 12 = 0 (left: 0)"
            ],
            "Evaluation": [
                1.002,
                20.002,
                40.001,
                3.0,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 1.9",
                "2 <- 2.4",
                "3 <- 1.9",
                "4 <- 2.8",
                "5 <- 2.3",
                "6 <- 3.1",
                "7 <- 1.5",
                "8 <- 2.1",
                "9 <- 2.2"
            ]
        },
        "Step 4": {
            "steps": [
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 12 1)",
                "7 - 7 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12)",
                "7 - 7 = 0 (left: 0 12 12) || 0 * 12 = 0 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2)",
                "7 * 7 = 49 (left: 12 12 49) || 12 - 12 = 0 (left: 0 49)",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144) ",
                "7 - 7 = 0 (left: 0 12 12) || 0 * 12 = 0 (left: 12 12) || 12 / 12 = 1 (left: 1)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                40.001,
                0.003,
                0.003,
                0.003,
                21.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 3.2",
                "2 <- 1.9",
                "3 <- 3.1",
                "4 <- 1.9",
                "5 <- 1.2",
                "6 <- 1.9",
                "7 <- 1.9",
                "8 <- 2.7",
                "9 <- 3.2"
            ]
        },
        "Step 5": {
            "steps": [
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2 24)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12)",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 12 = 144 (left: 0 144)",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 12 12) || 0 / 12 = 0 (left: 0 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 12)",
                "12 / 7 = 1.71 (left: 1. || 1 + 1 = 2",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 12 2)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                40.001,
                20.002,
                0.003,
                41.0
            ],
            "Resampling": [
                "0 <- 5.9",
                "1 <- 5.9",
                "2 <- 3.2",
                "3 <- 1.5",
                "4 <- 4.7",
                "5 <- 5.7",
                "6 <- 2.7",
                "7 <- 2.3",
                "8 <- 3.3",
                "9 <- 2.1"
            ]
        },
        "Step 6": {
            "steps": [
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 12 2) || 12 / 2 = 6 (left: 6)",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 12 2) || 12 / 2 = 6 (left: 6)",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2 24)",
                "7 * 7 = 49 (left: 12 12 49) || 12 / 12 = 1 (left: 1 12 49)",
                "7 * 7 = 49 (left: 12 12 49) || 12 - 12 = 0 (left: 0 49) || 0 / 49 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 12) || 12 * 0 = 0 (left: 0)",
                "12 / 7 = 1.71 (left: 1. || 1 + 2 = 3",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "7 * 7 = 49 (left: 12 12 49) || 12 / 12 = 1 (left: 1 12 49) || 49 - 12 = 37 (left: 1 37)",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                3.0,
                0.003,
                0.003,
                0.003,
                60.0,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.4",
                "2 <- 1.2",
                "3 <- 2.1",
                "4 <- 2.1",
                "5 <- 5.7",
                "6 <- 5.9",
                "7 <- 1.9",
                "8 <- 5.9",
                "9 <- 5.2"
            ]
        },
        "Step 7": {
            "steps": [
                "7 - 7 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "7 - 7 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 12 2) || 12 + 2 = 14",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 12 2) || 12 * 2 = 24 (left: 24)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                60.0,
                40.001,
                0.003,
                20.002,
                0.003,
                0.002,
                0.003,
                20.002,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 5.9",
                "1 <- 5.9",
                "2 <- 2.4",
                "3 <- 6.7",
                "4 <- 5.9",
                "5 <- 2.3",
                "6 <- 6.7",
                "7 <- 7.3",
                "8 <- 7.8",
                "9 <- 5.7"
            ]
        },
        "Step 8": {
            "steps": [
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 12 2) || 12 / 2 = 6 (left: 6)",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 12 2) || 12 / 2 = 6 (left: 6)",
                "7 - 7 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 24 0)",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 12 2) || 12 / 2 = 6 (left: 6)",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24)",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 24 0)",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((7 - 7) * (12 + 12)) + (24 / 12) = 24",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 12) || 12 / 0 = undefined (cannot divide by zero)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                20.002,
                60.0,
                0.002,
                20.002,
                60.0,
                60.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 5.7",
                "2 <- 2.1",
                "3 <- 4.3",
                "4 <- 8.6",
                "5 <- 6.7",
                "6 <- 7.3",
                "7 <- 1.9",
                "8 <- 7.0",
                "9 <- 1.2"
            ]
        },
        "Step 9": {
            "steps": [
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 24 * 0 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2 24)",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 12 = 0 (left: 0 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (7 - 7) * (12 + 12) = 24",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)"
            ]
        },
        "Input": "7 7 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "29": {
        "puzzle": "4 6 7 7",
        "Step 0": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7)",
                "6 / 4 = 1.5 (left: 1.5 7 7)",
                "4 * 6 = 24 (left: 7 7 24)",
                "4 * 6 = 24 (left: 7 7 24)",
                "7 + 4 = 11 (left: 7 7 11)",
                "7 - 6 = 1 (left: 1 7 7)",
                "7 - 6 = 1 (left: 1 7 7)",
                "7 - 4 = 3 (left: 3 7 7)",
                "6 / 4 = 1.5 (left: 1.",
                "7 - 4 = 3 (left: 3 7 7)"
            ],
            "Evaluation": [
                60.0,
                3.0,
                2.001,
                2.001,
                2.001,
                1.002,
                1.002,
                40.0,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 0.9",
                "2 <- 0.7",
                "3 <- 0.0",
                "4 <- 0.7",
                "5 <- INIT",
                "6 <- 0.1",
                "7 <- 0.9",
                "8 <- 0.0",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7) || 7 - 3 = 4 (left: 4 7)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "7 - 4 = 3 (left: 3 7 7) || 7 - 3 = 4 (left: 4 7)",
                "7 - 4 = 3 (left: 3 7 7) || Input: 4 5 9",
                "7 - 6 = 1 (left: 4 1 7)",
                "6 / 4 = 1.5 (left: 1.5 7 7) || 7 - 1.5 = 5.5 (left: 5.5 7)",
                "7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2 (left: 2 7)",
                "7 - 4 = 3 (left: 3 7 7) || Input: 5 6 9",
                "4 * 6 = 24 (left: 7 7 24)"
            ],
            "Evaluation": [
                0.003,
                20.001,
                0.003,
                0.003,
                0.003,
                41.0,
                1.001,
                0.003,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.0",
                "2 <- 1.5",
                "3 <- 0.9",
                "4 <- 0.0",
                "5 <- 0.9",
                "6 <- 0.0",
                "7 <- 1.5",
                "8 <- 0.0",
                "9 <- 0.7"
            ]
        },
        "Step 2": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7) || 7 - 3 = 4 (left: 4 7)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "7 - 6 = 1 (left: 4 1 7) || 7 / 1 = 7 (left: 4 7)",
                "7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2.33 (left: 2.33 7)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "7 - 4 = 3 (left: 3 7 7) || Input:",
                "7 - 4 = 3 (left: 3 7 7) || 7 + 3 = 10 (left: 3 10)",
                "7 - 6 = 1 (left: 4 1 7) || Input: 5 9 3 2",
                "7 - 4 = 3 (left: 3 7 7) || 7 - 3 = 4 (left: 4 7)",
                "7 - 4 = 3 (left: 3 7 7) || 7 * 3 = 21 (left: 7 21)"
            ],
            "Evaluation": [
                0.003,
                1.001,
                0.003,
                2.001,
                0.003,
                0.003,
                1.001,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- INIT",
                "2 <- 0.0",
                "3 <- 0.9",
                "4 <- 1.1",
                "5 <- 1.5",
                "6 <- 1.1",
                "7 <- 0.9",
                "8 <- 0.0",
                "9 <- 0.0"
            ]
        },
        "Step 3": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2 (left: 2 7)",
                "4 * 6 = 24 (left: 7 7 24)",
                "7 - 4 = 3 (left: 3 7 7) || 7 * 3 = 21 (left: 7 21)",
                "7 - 4 = 3 (left: 3 7 7) || 7 - 3 = 4 (left: 4 7)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21)",
                "7 - 6 = 1 (left: 4 1 7) || 7 / 1 = 7 (left: 4 7)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21)",
                "7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2 (left: 2 7)",
                "7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2.33 (left: 2.33 7)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 7 21)"
            ],
            "Evaluation": [
                0.003,
                3.0,
                0.003,
                1.001,
                41.0,
                0.003,
                0.003,
                0.001,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 0.0",
                "2 <- 1.5",
                "3 <- 1.5",
                "4 <- 0.9",
                "5 <- 3.8",
                "6 <- 3.4",
                "7 <- 0.7",
                "8 <- 0.3",
                "9 <- 0.9"
            ]
        },
        "Step 4": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 3 * 21 = 63 (left: 63)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "7 - 6 = 1 (left: 4 1 7) || 1 + 7 = 8 (left: 4 8)",
                "7 - 6 = 1 (left: 4 1 7) || Input: 3 5 2",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2.33 (left: 2.33 7) || -5 + 10 = 5 (left: 5)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 21 - 3 = 18 (left: 18)",
                "7 - 4 = 3 (left: 3 7 7) || 7 - 7 = 0 (left: 3)",
                "4 * 6 = 24 (left: 7 7 24) || 7 / 7 = 1 (left: 1 7 24)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                1.002,
                0.002,
                0.003,
                0.002,
                60.0,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.6",
                "1 <- 4.6",
                "2 <- 1.1",
                "3 <- 4.6",
                "4 <- 0.7",
                "5 <- 4.6",
                "6 <- 0.9",
                "7 <- 1.5",
                "8 <- 1.5",
                "9 <- 1.1"
            ]
        },
        "Step 5": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 21 - 3 = 18 (left: 18) || 18 / 2 = 9 (left: 9)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 21 - 3 = 18 (left: 18) || None - 18 is the final result.",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 9 / 3 = 3 (left: 3 9)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 21 - 3 = 18 (left: 18) || 18 * 8 = 144 (left: 8)",
                "7 - 4 = 3 (left: 3 7 7) || 7 + 3 = 10 (left: 7 10)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 21 - 3 = 18 (left: 18) || There are no possible next steps with the number 18.",
                "7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2.33 (left: 2.33 7)",
                "7 - 6 = 1 (left: 4 1 7) || 1 * 7 = 7 (left: 4 7)",
                "7 - 6 = 1 (left: 4 1 7) || 4 * 1 = 4 (left: 4 7)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 3 = 7 (left: 7)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                1.002,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 4.6",
                "1 <- 3.4",
                "2 <- 4.6",
                "3 <- 4.6",
                "4 <- 4.6",
                "5 <- 4.6",
                "6 <- 3.4",
                "7 <- 1.5",
                "8 <- 3.4",
                "9 <- 0.7"
            ]
        },
        "Step 6": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 21 - 3 = 18 (left: 18) || There are no possible next steps with the input of 18.",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 21 - 3 = 18 (left: 18)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 21 - 3 = 18 (left: 18) || There are no possible next steps for the input 18.",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 21 - 3 = 18 (left: 18) || There are no possible next steps for the input 18.",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 21 - 3 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 21 - 3 = 18 (left: 18) || 18 / 2 = 9",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 3 * 21 = 63 (left: 63)",
                "7 - 6 = 1 (left: 4 1 7) || 1 + 7 = 8 (left: 4 8)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 3 * 21 = 63 (left: 63)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 4.6",
                "1 <- 3.4",
                "2 <- 6.1",
                "3 <- 0.0",
                "4 <- 6.1",
                "5 <- 1.1",
                "6 <- 6.1",
                "7 <- 6.1",
                "8 <- 0.0",
                "9 <- 2.3"
            ]
        },
        "Step 7": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 21 - 3 = 18 (left: 18) || There is only one possible step: 18 is already the only number left.",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 21 - 3 = 18 (left: 18)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 21 - 3 = 18 (left: 18) || 18 - 8 = 10 (left: 10)",
                "7 - 4 = 3 (left: 3 7 7) || 7 * 3 = 21 (left: 7 21)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 21 - 3 = 18 (left: 18) || 18 + 2 = 20",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 21 - 3 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 21 - 3 = 18 (left: 18) || None - the input number is already the result.",
                "7 - 4 = 3 (left: 3 7 7) || 7 + 3 = 10 (left: 7 10)",
                "7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2.33 (left: 2.33 7) || 10 + 5 = 15 (left: 15)"
            ],
            "Evaluation": [
                0.001,
                20.0,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 0.9",
                "2 <- 7.1",
                "3 <- 3.4",
                "4 <- 7.1",
                "5 <- 6.1",
                "6 <- 6.1",
                "7 <- 6.1",
                "8 <- 0.0",
                "9 <- 0.0"
            ]
        },
        "Step 8": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 21 - 3 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 21 - 3 = 18 (left: 18) || There are no possible next steps as there are no other numbers provided.",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 3 + 21 = 24 (left: 24)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 21 - 3 = 18 (left: 18) || 18 / 2 = 9 (left: 9 8)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 21 - 3 = 18 (left: 18) || There are no possible next steps with the input of 18.",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 21 - 3 = 18 (left: 18) || There are no possible next steps for the input 18.",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 21 - 3 = 18 (left: 18) || There are no possible next steps with the input of 18.",
                "7 - 4 = 3 (left: 3 7 7) || 7 - 3 = 4 (left: 4 7)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                60.0,
                2.001,
                0.003,
                0.003,
                0.003,
                0.003,
                40.001
            ],
            "Resampling": [
                "0 <- 8.3",
                "1 <- 0.9",
                "2 <- 0.9",
                "3 <- 8.9",
                "4 <- 8.9",
                "5 <- 0.7",
                "6 <- 8.3",
                "7 <- 8.3",
                "8 <- 8.3",
                "9 <- 8.3"
            ]
        },
        "Step 9": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 3 + 21 = 24 (left: 24) || Answer: ((7 - 4) * 7) + 3 = 24",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 3 = 7 (left: 7)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 3 = 7 (left: 7)",
                "7 - 4 = 3 (left: 3 7 7) || 7 + 3 = 10 (left: 7 10)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 3 + 21 = 24 (left: 24) || Answer: ((7 - 4) * 7) + 3 = 24",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 3 + 21 = 24 (left: 24) || Answer: ((7 - 4) * 7) + 3 = 24",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 3 + 21 = 24 (left: 24) || Answer: ((7 - 4) * 7) + 3 = 24",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 7 = 3 (left: 3 21) || 3 + 21 = 24 (left: 24) || Answer: ((7 - 4) * 7) + 3 = 24"
            ]
        },
        "Input": "4 6 7 7",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "30": {
        "puzzle": "1 1 2 13",
        "Step 0": {
            "steps": [
                "2 + 1 = 3 (left: 1 3 13)",
                "1 * 1 = 1 (left: 1 2 13)",
                "13 - 1 = 12 (left: 1 2 12)",
                "2 * 1 = 2 (left: 2 2 13)",
                "13 - 1 = 12 (left: 1 2 12)",
                "13 - 2 = 11 (left: 1 1 11)",
                "13 - 1 = 12 (left: 1 2 12)",
                "13 - 2 = 11 (left: 1 1 11)",
                "13 - 1 = 12 (left: 1 2 ",
                "13 - 2 = 11 (left: 1 1 11)"
            ],
            "Evaluation": [
                2.001,
                1.002,
                60.0,
                3.0,
                40.001,
                0.003,
                60.0,
                1.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 0.2",
                "2 <- 0.4",
                "3 <- 0.2",
                "4 <- 0.2",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 0.4",
                "8 <- 0.4",
                "9 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "13 - 1 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 6 12)",
                "13 - 1 = 12 (left: 1 2 12) || Possible",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "13 - 1 = 12 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12)",
                "13 - 1 = 12 (left: 1 2 12)",
                "13 - 1 = 12 (left: 1 2 12)",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 1 = 11 (left: 2 11)",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.003,
                60.0,
                60.0,
                60.0,
                60.0,
                0.002,
                40.0,
                40.001
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 1.8",
                "2 <- 0.2",
                "3 <- 1.3",
                "4 <- 1.4",
                "5 <- 1.9",
                "6 <- 1.6",
                "7 <- 1.0",
                "8 <- 1.3",
                "9 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || Input: 6 3",
                "13 - 1 = 12 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "13 - 1 = 12 (left: 1 2 12) || 2 - 1 = 1 (left: 1 12)",
                "13 - 1 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 + 1 = 25 (left: 25)",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 3 + 5 = 8 (left: 7)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.002,
                0.0
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.2",
                "2 <- 1.0",
                "3 <- 1.0",
                "4 <- 1.3",
                "5 <- 1.8",
                "6 <- 1.3",
                "7 <- 0.4",
                "8 <- 1.6",
                "9 <- 2.2"
            ]
        },
        "Step 3": {
            "steps": [
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "13 - 1 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 - 24 = -23 (left",
                "13 - 1 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 1 = 11 (left: 1 11)",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                40.001,
                60.0,
                0.001,
                0.003,
                0.003,
                40.0,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 0.4",
                "2 <- 3.3",
                "3 <- 0.6",
                "4 <- 2.2",
                "5 <- 0.6",
                "6 <- 1.3",
                "7 <- 1.0",
                "8 <- 1.4",
                "9 <- 1.5"
            ]
        },
        "Step 4": {
            "steps": [
                "13 - 1 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 - 24 = -23 (left || 1 * -24 = -24 (left: -24 -23)",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "13 - 1 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 * (13 - 1)) * 2 = 24",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 1 = 12 (left:",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "13 - 1 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "13 - 1 = 12 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "13 - 1 = 12 (left: 1 2 12) || 2 - 1 = 1 (left: 1 12)"
            ]
        },
        "Input": "1 1 2 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "31": {
        "puzzle": "1 1 5 6",
        "Step 0": {
            "steps": [
                "5 + 1 = 6 (left: 1 6 6)",
                "1 * 1 = 1 (left: 1 5 6)",
                "1 + 5 = 6 (left: 6 6 6)",
                "6 - 1 = 5 (left: 1 5 6)",
                "5 + 1 = 6 (left: 1 6 6)",
                "1 + 5 = 6 (left: 6 1 6)",
                "5 + 1 = 6 (left: 1 6 6)",
                "6 - 1 = 5 (left: 1 5 5)",
                "6 - 5 = 1 (left: 1 1 1)",
                "5 + 1 = 6 (left: 1 6 6)"
            ],
            "Evaluation": [
                41.0,
                41.0,
                2.001,
                3.0,
                60.0,
                3.0,
                41.0,
                60.0,
                1.002,
                60.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.4",
                "2 <- 0.7",
                "3 <- 0.9",
                "4 <- 0.9",
                "5 <- 0.4",
                "6 <- 0.7",
                "7 <- 0.1",
                "8 <- 0.9",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 6)",
                "5 + 1 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6)",
                "6 - 1 = 5 (left: 1 5 5) || 5 * 1 = 5 (left: 5 5)",
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6)",
                "5 + 1 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "5 + 1 = 6 (left: 1 6 6) || Input: 3 5 5",
                "6 - 1 = 5 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5)",
                "1 * 1 = 1 (left: 1 5 6) || 6 - 1 = 5 (left: 5 6)",
                "5 + 1 = 6 (left: 1 6 6) || 6 * 1 = 6 (left: 6 6)",
                "5 - 1 = 4 (left: 1 4 6)"
            ],
            "Evaluation": [
                3.0,
                0.003,
                0.002,
                0.002,
                2.001,
                0.003,
                0.002,
                0.002,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.1",
                "2 <- 0.9",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 1.9",
                "6 <- 1.9",
                "7 <- 0.0",
                "8 <- 1.9",
                "9 <- 0.6"
            ]
        },
        "Step 2": {
            "steps": [
                "5 + 1 = 6 (left: 1 6 6) || 1 + 6 = 7 (left: 6 6 7)",
                "1 * 1 = 1 (left: 1 5 6) || 5 * 1 = 5 (left: 5 6)",
                "5 + 1 = 6 (left: 1 6 6) || 6 * 1 = 6 (left: 6 6 6)",
                "1 + 5 = 6 (left: 1 6 6)",
                "1 + 5 = 6 (left: 6 6 6)",
                "5 - 1 = 4 (left: 1 4 6) || 4 / 1 = 4 (left:",
                "5 - 1 = 4 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5)",
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6)",
                "5 - 1 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)",
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6)"
            ],
            "Evaluation": [
                22.0,
                0.002,
                0.002,
                41.0,
                0.003,
                41.0,
                60.0,
                3.0,
                41.0,
                3.0
            ],
            "Resampling": [
                "0 <- 2.5",
                "1 <- 0.0",
                "2 <- 0.4",
                "3 <- 1.9",
                "4 <- 0.4",
                "5 <- 2.5",
                "6 <- 2.5",
                "7 <- 1.9",
                "8 <- 2.6",
                "9 <- 1.9"
            ]
        },
        "Step 3": {
            "steps": [
                "5 - 1 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: || 4 * 1 = 4 (left: 4)",
                "5 + 1 = 6 (left: 1 6 6) || 1 * 6 = 6 (left: 6 6)",
                "5 + 1 = 6 (left: 1 6 6) || 6 * 1 = 6 (left: 6 6 6)",
                "5 - 1 = 4 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5)",
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6)",
                "5 - 1 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: || 4 / 1 = 4 (left: 4)",
                "5 - 1 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: || 1 + 4 = 5 (left: 5)",
                "5 - 1 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "5 - 1 = 4 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || 5 + 4 = 9 (left: 9)",
                "5 - 1 = 4 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)"
            ],
            "Evaluation": [
                40.0,
                0.003,
                1.001,
                40.001,
                3.0,
                0.001,
                0.002,
                20.002,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 2.5",
                "1 <- 1.9",
                "2 <- 2.0",
                "3 <- 2.6",
                "4 <- 3.0",
                "5 <- INIT",
                "6 <- 2.0",
                "7 <- 1.9",
                "8 <- 0.4",
                "9 <- 2.6"
            ]
        },
        "Step 4": {
            "steps": [
                "5 - 1 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: || 4 / 1 = 4 (left: 4)",
                "5 - 1 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "5 + 1 = 6 (left: 1 6 6) || 1 + 6 = 7 (left: 6 6 7) || 6 * 6 = 36 (left: 7 36)",
                "5 - 1 = 4 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || 4 * 5 = 20 (left: 20)",
                "5 - 1 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: || 4 * 1 = 4 (left: 4) || There are no possible next steps with only one number.",
                "1 + 5 = 6 (left: 6 1 6)",
                "5 + 1 = 6 (left: 1 6 6) || 1 + 6 = 7 (left: 6 6 7) || 6 / 6 = 1 (left: 1 7)",
                "5 - 1 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)",
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6)",
                "5 - 1 = 4 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || 4 / 5 = 0.8 (left: 0.8)"
            ],
            "Evaluation": [
                0.003,
                40.001,
                0.003,
                0.003,
                0.003,
                22.0,
                40.0,
                60.0,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 2.8",
                "1 <- 2.8",
                "2 <- 4.1",
                "3 <- 2.8",
                "4 <- 2.3",
                "5 <- 4.7",
                "6 <- 2.8",
                "7 <- 0.9",
                "8 <- 4.5",
                "9 <- 2.6"
            ]
        },
        "Step 5": {
            "steps": [
                "5 - 1 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "5 - 1 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "5 - 1 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2) || 1 * 2 = 2 (left: 2)",
                "5 - 1 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "1 + 5 = 6 (left: 1 6 6) || 6 * 1 = 6 (left: 6 6 6)",
                "5 - 1 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "5 - 1 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6)",
                "1 + 5 = 6 (left: 6 1 6) || 1 - 6 = -5 (left: -5 6)",
                "5 - 1 = 4 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || 5 / 4 = 1.25 (left: 1.25)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.002,
                0.002,
                1.001,
                0.003,
                0.003,
                0.002,
                1.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 4.1",
                "2 <- 2.3",
                "3 <- 2.8",
                "4 <- 2.6",
                "5 <- 4.6",
                "6 <- 1.9",
                "7 <- 4.6",
                "8 <- 2.5",
                "9 <- 0.9"
            ]
        },
        "Step 6": {
            "steps": [
                "6 - 1 = 5 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5 5)",
                "5 - 1 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2) || 2 / 1 = 2 (left: 2)",
                "1 + 5 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6)",
                "5 - 1 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "5 - 1 = 4 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || 4 / 5 = 0.8 (left: 0.8)",
                "5 + 1 = 6 (left: 1 6 6) || 1 + 6 = 7 (left: 6 6 7) || 6 / 6 = 1 (left: 1 7) || 1 * 7 = 7 (left: 7)",
                "5 - 1 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "5 + 1 = 6 (left: 1 6 6) || 1 + 6 = 7 (left: 6 6 7) || 6 / 6 = 1 (left: 1 7) || 1 + 7 = 8",
                "5 - 1 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: || 1 + 4 = 5 (left: 5)",
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                3.0,
                0.0,
                0.001,
                0.0,
                0.002,
                0.003,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 2.8",
                "1 <- 1.9",
                "2 <- 4.6",
                "3 <- 4.7",
                "4 <- 0.4",
                "5 <- 2.3",
                "6 <- 1.9",
                "7 <- 4.1",
                "8 <- 0.0",
                "9 <- 4.7"
            ]
        },
        "Step 7": {
            "steps": [
                "5 - 1 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "5 - 1 = 4 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "5 + 1 = 6 (left: 1 6 6) || 1 + 6 = 7 (left: 6 6 7) || 6 / 6 = 1 (left: 1 7) || 1 * 7 = 7 (left: 7)",
                "5 - 1 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6)",
                "1 + 5 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 1 5 6)",
                "5 - 1 = 4 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "5 - 1 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2) || 1 * 2 = 2 (left: 2)",
                "5 + 1 = 6 (left: 1 6 6) || 1 * 6 = 6 (left: 6)",
                "5 - 1 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 - 6 = -2 (left: -2)"
            ],
            "Evaluation": [
                60.0,
                1.002,
                0.0,
                0.001,
                2.001,
                22.0,
                0.001,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 7.0",
                "2 <- 4.7",
                "3 <- 2.8",
                "4 <- 2.6",
                "5 <- 2.7",
                "6 <- 3.0",
                "7 <- 3.3",
                "8 <- 7.0",
                "9 <- 2.6"
            ]
        },
        "Step 8": {
            "steps": [
                "5 - 1 = 4 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || 5 / 4 = 1.25 (left: 1)",
                "5 - 1 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * (5 - 1)) * 6 = 24",
                "5 - 1 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "5 - 1 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "5 - 1 = 4 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || 5 / 4 = 1.25 (left: 1.25)",
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6) || 5 * 6 = 30 (left: 30)",
                "5 - 1 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: || 4 * 1 = 4 (left: 4) || There are no possible next steps with just the number 4.",
                "5 - 1 = 4 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || Input: 3 9",
                "5 - 1 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (5 - 1) * (1 * 6) = 24",
                "5 - 1 = 4 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || 5 / 4 = 1.25 (left: 1)"
            ]
        },
        "Input": "1 1 5 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "32": {
        "puzzle": "1 1 11 13",
        "Step 0": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 13)",
                "1 * 1 = 1 (left: 1 11 13)",
                "1 - 1 = 0 (left: 0 11 13)",
                "1 - 1 = 0 (left: 0 11 13)",
                "11 + 1 = 12 (left: 1 12 13)",
                "13 - 11 = 2 (left: 1 1 2)",
                "11 * 1 = 11 (left: 1 11 13)",
                "11 + 1 = 12 (left: 1 12 13)",
                "11 + 1 = 12 (left: 1 12 13)",
                "13 - 1 = 12 (left: 1 11 12)"
            ],
            "Evaluation": [
                21.001,
                0.003,
                60.0,
                20.002,
                1.001,
                2.001,
                0.003,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.3",
                "2 <- INIT",
                "3 <- 0.2",
                "4 <- 0.2",
                "5 <- 0.2",
                "6 <- 0.0",
                "7 <- 0.5",
                "8 <- 0.2",
                "9 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24)",
                "1 - 1 = 0 (left: 0 11 13) || 0 * 11 = 0 (left: 0 13)",
                "1 - 1 = 0 (left: 0 11 13)",
                "1 - 1 = 0 (left: 0 11 13) || 0 * 11 = 0 (left: 0 13)",
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2)",
                "1 - 1 = 0 (left: 0 11 13) || 13 / 11 = 1.1818181818181819 (left: ",
                "11 + 1 = 12 (left: 1 12 13) || Input: 5 5 5 5",
                "13 - 11 = 2 (left: 1 1 2) || 1 - 1 = 0 (left: 0 2)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 13 = -2 (left: -2 11 13)",
                "1 - 1 = 0 (left: 0 11 13) || 11 * 13 = 143 (left: 0 143)"
            ],
            "Evaluation": [
                60.0,
                0.001,
                60.0,
                0.001,
                20.001,
                0.0,
                0.003,
                20.002,
                21.001,
                1.002
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 1.0",
                "2 <- 0.3",
                "3 <- 1.7",
                "4 <- 1.2",
                "5 <- 0.2",
                "6 <- 1.2",
                "7 <- 1.7",
                "8 <- 1.2",
                "9 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "13 - 11 = 2 (left: 1 1 2) || 1 - 1 = 0 (left: 0 2) || 2 * 0 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 - 24 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13)",
                "13 - 11 = 2 (left: 1 1 2) || 1 - 1 = 0 (left: 0 2) || Input: 5 3",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13)",
                "1 - 1 = 0 (left: 0 11 13) || ",
                "1 - 1 = 0 (left: 0 11 13) || 11 / 13 = 0.846 (left: 0 11 13)",
                "13 - 11 = 2 (left: 1 1 2) || 1 - 1 = 0 (left: 0 2) || 2 - 0 = 2 (left: 2)",
                "1 - 1 = 0 (left: 0 11 13) || 0 * 11 = 0 (left: 0 13)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 0 / 24 = 0 (left: 0)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                60.0,
                0.003,
                60.0,
                0.003,
                60.0,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 2.2",
                "2 <- 2.6",
                "3 <- 2.2",
                "4 <- 2.2",
                "5 <- 2.4",
                "6 <- 1.2",
                "7 <- 0.3",
                "8 <- 2.6",
                "9 <- 1.2"
            ]
        },
        "Step 3": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 5 - 3 = ",
                "1 - 1 = 0 (left: 0 11 13) || 11 / 13 = 0.846 (left: 0 11 13) || 13 - 11 = 2 (left: 0 11 2)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.846 (left: 0.846)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.8461538461538461 (left: 0.8461538461538461)",
                "1 - 1 = 0 (left: 0 11 13) || 11 * 13 = 143 (left: 0 143)",
                "1 - 1 = 0 (left: 0 11 13) || 13 / 11 = 1.18181818182 (left: 0 1.18181818182)",
                "1 - 1 = 0 (left: 0 11 13) || 11 / 13 = 0.846 (left: 0 11 13) || 0 / 11 = 0 (left: 0 13)",
                "1 - 1 = 0 (left: 0 11 13) || 11 * 13 = 143 (left: 0 143)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                1.001,
                0.003,
                0.003,
                0.0,
                0.002,
                2.001,
                20.002,
                0.001
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 2.6",
                "2 <- 1.7",
                "3 <- 2.4",
                "4 <- 1.2",
                "5 <- 0.2",
                "6 <- 0.3",
                "7 <- 2.4",
                "8 <- 1.0",
                "9 <- 2.6"
            ]
        },
        "Step 4": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 2 * 0 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 11 13) || 11 / 13 = 0.846 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13)",
                "13 - 11 = 2 (left: 1 1 2) || 1 - 1 = 0 (left: 0 2) || 5 - 3 = 2 (left: 2)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 - 1 = 0 (left: 0 11 13) || 11 * 13 = 143 (left: 0 143)",
                "1 - 1 = 0 (left: 0 11 13) || 11 / 13 = 0.8461538461538461 (left: 0.8461538461538461 11)",
                "1 - 1 = 0 (left: 0 11 13) || 11 * 13 = 143 (left: 0 143)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 0 - 24 = -24 (left: -24)",
                "1 - 1 = 0 (left: 0 11 13) || 11 / 13 = 0.846 (left: 0 11 13) || 11 / 13 = 0.846 (left: 0.846 13)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.001,
                0.003,
                0.0,
                1.001,
                0.001,
                0.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 3.0",
                "2 <- 0.3",
                "3 <- 1.4",
                "4 <- 2.6",
                "5 <- 4.1",
                "6 <- 3.0",
                "7 <- 2.4",
                "8 <- 1.7",
                "9 <- 2.2"
            ]
        },
        "Step 5": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 13) || 11 / 13 = 0.846 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 - 0 = 24 (left: 24)",
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2)",
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 0 * 2 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 11 13) || 11 / 13 = 0.846 (left: 0 11 13) || 0 * 11 = 0 (left: 0 11 13)",
                "1 - 1 = 0 (left: 0 11 13) || 11 / 13 = 0.846 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.846 (left: 0.846)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 + 0 = 24 (left: 24)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "13 - 11 = 2 (left: 1 1 2) || 1 - 1 = 0 (left: 0 2) || 2 - 0 = 2 (left: 2)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 13 / 11 = 1.1818181818181819 (left: 1.1818181818181819)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                1.002,
                0.001,
                60.0,
                0.002,
                60.0,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 5.4",
                "2 <- 5.1",
                "3 <- 2.6",
                "4 <- 5.1",
                "5 <- 5.1",
                "6 <- 5.4",
                "7 <- 5.4",
                "8 <- 5.1",
                "9 <- 5.4"
            ]
        },
        "Step 6": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "1 - 1 = 0 (left: 0 11 13) || 11 / 13 = 0.846 (left: 0 11 13) || 0 * 11 = 0 (left: 0 11 13) || ",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: (1 - 1) + (11 + 13) = 24",
                "1 - 1 = 0 (left: 0 11 13) || 11 / 13 = 0.846 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: (1 - 1) + (11 + 13) = 24",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: (1 - 1) * (11 + 13) = 24",
                "1 - 1 = 0 (left: 0 11 13) || 11 / 13 = 0.846 (left: 0 11 13) || 0 * 11 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13)",
                "1 - 1 = 0 (left: 0 11 13) || 11 / 13 = 0.846 (left: 0 11 13) || 0 * 11 = 0 (left: 0 11 13) || 13 / 11 = 1.182 (left: 0 ",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: ((1 - 1) + 11) * 13 = 24",
                "1 - 1 = 0 (left: 0 11 13) || 11 / 13 = 0.846 (left: 0 11 13) || 0 * 11 = 0 (left: 0 11 13) || 11 * 13 = 143 (left: 0 143)"
            ]
        },
        "Input": "1 1 11 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "33": {
        "puzzle": "1 6 6 12",
        "Step 0": {
            "steps": [
                "12 - 6 = 6 (left: 1 6 6)",
                "6 / 1 = 6 (left: 6 6 12)",
                "6 * 1 = 6 (left: 6 6 12)",
                "6 * 1 = 6 (left: 6 6 12)",
                "12 + 1 = 13 (left: 6 6 13)",
                "6 * 1 = 6 (left: 6 6 12)",
                "6 * 1 = 6 (left: 6 6 12)",
                "12 - 6 = 6 (left: 1 6 6)",
                "12 - 6 = 6 (left: 1 6 ",
                "12 - 6 = 6 (left: 1 6 6)"
            ],
            "Evaluation": [
                41.0,
                60.0,
                60.0,
                60.0,
                1.002,
                60.0,
                60.0,
                1.001,
                60.0,
                22.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- 0.2",
                "4 <- 0.0",
                "5 <- 0.5",
                "6 <- INIT",
                "7 <- 0.6",
                "8 <- INIT",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "6 + 6 = 12 (left: 1 12 12)",
                "12 - 6 = 6 (left: 1 6 6)",
                "6 / 1 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12)",
                "6 * 1 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12)",
                "12 - 6 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6)",
                "6 * 1 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12)",
                "12 - 6 = 6 (left: 1 6 6)",
                "6 * 1 = 6 (left: 6 6 12) || Input: 6 2",
                "12 - 6 = 6 (left: 1 6 6)",
                "6 * 1 = 6 (left: 6 6 12) || 12 - 6 = 6 (left: 6 12)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.0,
                0.002,
                22.0,
                20.0,
                60.0,
                0.003,
                22.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 0.1",
                "2 <- 1.1",
                "3 <- 0.6",
                "4 <- 0.9",
                "5 <- 1.5",
                "6 <- 1.6",
                "7 <- 0.2",
                "8 <- 0.6",
                "9 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18)",
                "12 - 6 = 6 (left: 1 6 6) || Possible",
                "6 * 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "12 - 6 = 6 (left: 1 6 6) || Input: 3 9 9",
                "6 * 1 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12) || 12 * 0 = 0 (left: 0)",
                "12 - 6 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6)",
                "6 * 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 6)",
                "6 * 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "12 - 6 = 6 (left: 1 6 6) || 1 * 6 = 6 (left: 6 6 6)"
            ],
            "Evaluation": [
                1.002,
                20.002,
                0.003,
                2.001,
                0.003,
                20.001,
                1.002,
                1.001,
                0.001,
                3.0
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 0.6",
                "2 <- 0.8",
                "3 <- 0.5",
                "4 <- 0.0",
                "5 <- 0.3",
                "6 <- 0.3",
                "7 <- 1.5",
                "8 <- 1.1",
                "9 <- 0.3"
            ]
        },
        "Step 3": {
            "steps": [
                "6 * 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12)",
                "6 * 1 = 6 (left: 6 6 12) || 12 - 6 = 6 (left: 6 12)",
                "12 - 6 = 6 (left: 1 6  || 1 * 6 = 6 (left: 6)",
                "6 * 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "12 - 6 = 6 (left: 1 6 6) || 1 * 6 = 6 (left: 6 6 6)",
                "6 * 1 = 6 (left: 6 6 12) || Input: 1 18 72",
                "6 * 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "6 * 1 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12) || 12 * 0 = 0 (left: 0)",
                "12 - 6 = 6 (left: 1 6 6) || 6 * 1 = 6 (left: 6 6 6)",
                "6 * 1 = 6 (left: 6 6 12) || Input: 1 2 12"
            ],
            "Evaluation": [
                20.0,
                0.003,
                0.002,
                0.001,
                2.001,
                0.003,
                20.002,
                0.003,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 0.6",
                "2 <- 0.3",
                "3 <- 0.5",
                "4 <- 0.9",
                "5 <- 0.3",
                "6 <- 0.1",
                "7 <- 0.1",
                "8 <- 0.1",
                "9 <- 0.9"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 * 1 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12)",
                "6 * 1 = 6 (left: 6 6 12) || 12 - 6 = 6 (left: 6 12)",
                "6 * 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 12 36)",
                "12 - 6 = 6 (left: 1 6 6) || 6 * 1 = 6 (left: 6 6 6)",
                "6 * 1 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12)",
                "6 / 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "6 / 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12)",
                "6 / 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)"
            ],
            "Evaluation": [
                2.001,
                20.001,
                0.002,
                0.003,
                0.003,
                40.001,
                1.001,
                60.0,
                0.0,
                0.002
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 0.2",
                "2 <- 2.5",
                "3 <- 1.6",
                "4 <- 3.0",
                "5 <- 0.8",
                "6 <- 1.8",
                "7 <- 0.0",
                "8 <- 4.7",
                "9 <- 4.7"
            ]
        },
        "Step 5": {
            "steps": [
                "6 * 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12)",
                "6 * 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 6 2)",
                "6 * 1 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12) || 12 * 0 = 0 (left: 0) || There are no possible next steps as there is no input provided.",
                "12 - 6 = 6 (left: 1 6 6) || 6 * 1 = 6 (left: 6 6 6)",
                "6 * 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12) || 36 * 12 = 432 (left: 432)",
                "12 - 6 = 6 (left: 1 6  || 6 - 1 = 5 (left: 5)",
                "12 - 6 = 6 (left: 1 6 6) || 6 * 1 = 6 (left: 6 6 6)",
                "12 - 6 = 6 (left: 1 6 6) || 6 * 1 = 6 (left: 6 6)",
                "6 / 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "6 / 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 12 + 2 = 14 (left: 14)"
            ],
            "Evaluation": [
                21.001,
                0.001,
                0.003,
                1.002,
                0.003,
                0.003,
                3.0,
                0.003,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 4.1",
                "2 <- 5.8",
                "3 <- 2.5",
                "4 <- 1.5",
                "5 <- 5.8",
                "6 <- 2.1",
                "7 <- 0.8",
                "8 <- 1.1",
                "9 <- 2.1"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 * 1 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12) || 12 * 0 = 0 (left: 0)",
                "6 / 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (6 / 1) * (6 / 12) = 24",
                "6 * 1 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12) || 12 * 0 = 0 (left: 0) || There are no possible next steps as the input is 0.",
                "6 * 1 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "6 / 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (6 / 1) * (6 / 12) = 24",
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 18 / 6 = 3 (left: 3 18)",
                "12 - 6 = 6 (left: 1 6  || 1 * 6 = 6 (left: 6)",
                "12 - 6 = 6 (left: 1 6 6) || 6 + 1 = 7 (left: 6 7)",
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 18 / 6 = 3 (left: 3 18)"
            ],
            "Evaluation": [
                3.0,
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 4.7",
                "2 <- 0.3",
                "3 <- 0.3",
                "4 <- 1.8",
                "5 <- 1.6",
                "6 <- 5.8",
                "7 <- 2.5",
                "8 <- 4.7",
                "9 <- 0.3"
            ]
        },
        "Step 7": {
            "steps": [
                "6 * 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12) || 36 - 12 = 24 (left: 24)",
                "6 / 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "6 * 1 = 6 (left: 6 6 12) || 12 - 6 = 6 (left: 6 12)",
                "6 * 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "12 - 6 = 6 (left: 1 6 6) || 1 * 6 = 6 (left: 6 6)",
                "12 - 6 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6)",
                "6 / 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (6 / 1) * (6 / 12) = 24",
                "6 * 1 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12) || 12 * 0 = 0 (left: 0) || There are no possible next steps with the input 0.",
                "6 / 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "6 * 1 = 6 (left: 6 6 12) || 12 - 6 = 6 (left: 6 12)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                20.001,
                0.003,
                22.0,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 0.3",
                "2 <- 6.2",
                "3 <- 7.0",
                "4 <- 7.5",
                "5 <- 5.8",
                "6 <- 7.0",
                "7 <- 3.0",
                "8 <- 3.6",
                "9 <- 1.4"
            ]
        },
        "Step 8": {
            "steps": [
                "6 / 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (6 / 1) * (6 / 12) = 24 || .",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18)",
                "6 / 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (6 / 1) * (6 / 12) = 24 || Input: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 9 3 8)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) * (9 - 6) = 24",
                "6 * 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12) || 36 - 12 = 24 (left: 24) || Answer: (6 * 1) * (6 * 6) - 12 = 24",
                "12 - 6 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6) || Input: 3 9 27",
                "6 / 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (6 / 1) * (6 / 12) = 24",
                "6 * 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12) || 36 - 12 = 24 (left: 24) || Answer: (6 * 1) * (6 * 6 - 12) = 24",
                "6 * 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12) || 36 * 12 = 432 (left: 432)",
                "6 * 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12) || 12 - 1 = 11 (left: 11)",
                "12 - 6 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6) || 5 * 6 = 30 (left: 6 30)"
            ],
            "Evaluation": [
                20.002,
                60.0,
                60.0,
                0.003,
                0.003,
                0.003,
                60.0,
                0.002,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 4.7",
                "1 <- 8.2",
                "2 <- 8.6",
                "3 <- 4.1",
                "4 <- 8.2",
                "5 <- 7.0",
                "6 <- 8.6",
                "7 <- 8.6",
                "8 <- 7.0",
                "9 <- 7.5"
            ]
        },
        "Step 9": {
            "steps": [
                "6 / 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 + 12 = 14",
                "6 / 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (6 / 1) * (6 / 12) = 24 || Input: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 9 3 8)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) * (9 - 6) = 24 || Input: 2 3 5 6\nSteps:\n5 + 3 = 8 (left: 2 6 8)\n8 - 6 = 2 (left: 2 2)\n2 * 2 = 4 (left: 4)\n4 * 6 = 24 (left: 24)\nAnswer: ((5 + 3) - 2) * 6 = 24",
                "6 * 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12) || 36 - 12 = 24 (left: 24) || Answer: (6 * 1) * (6 * 6 - 12) = 24 || Input: 3 3 4 4\nSteps:\n3 + 4 = 7 (left: 3 7 4)\n3 * 4 = 12 (left: 7 12)\n7 * 12 = 84 (left: 84)\n84 / 4 = 21 (left: 21)\n21 - 3 = 18 (left: 18)\n18 - 12 = 6 (left: 6)\n6 * ",
                "6 * 1 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "6 / 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (6 / 1) * (6 / 12) = 24 || Input: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 9 3 8)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) * (9 - 6) = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n2 + 6 = 8 (left: 8 12)\n8 * 12 = 96 (left: 96)\nAnswer: (2 + 6) * (3 * 4) = 24",
                "6 * 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12) || 36 - 12 = 24 (left: 24) || Answer: (6 * 1) * (6 * 6 - 12) = 24",
                "6 * 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12) || 36 - 12 = 24 (left: 24) || Answer: (6 * 1) * (6 * 6 - 12) = 24 || Input: 3 3 3 8\nSteps:\n3 + 3 = 6 (left: 6 3 8)\n6 * 3 = 18 (left: 18 8)\n18 / 8 = 2.25 (left: 2.25)\n2.25 * 3 = 24 (left: 24)\nAnswer: ((3 + 3) * 3) / 8 = 24",
                "6 * 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12) || 36 - 12 = 24 (left: 24) || Answer: (6 * 1) * (6 * 6 - 12) = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n3 * 16 = 48 (left: 48)\n48 / 2 = 24 (left: 24)\nAnswer: ((3 * 7) - 5) * (3 * 16 / 2) = 24",
                "6 * 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12) || 36 - 12 = 24 (left: 24) || Answer: (6 * 1) * (6 * 6) - 12 = 24",
                "12 - 6 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6) || 6 / 5 = 1.2 (left: 1.2 6)"
            ]
        },
        "Input": "1 6 6 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "34": {
        "puzzle": "4 5 12 12",
        "Step 0": {
            "steps": [
                "5 * 3 = 15 (left: 4 12 15)",
                "5 * 4 = 20 (left: 20 12 12)",
                "12 - 5 = 7 (left: 4 7 12)",
                "12 / 5 = 2.4 (left: 4 2.4 12)",
                "12 / 4 = 3 (left: 3 5 12)",
                "12 - 4 = 8 (left: 8 12 12)",
                "12 / 4 = 3 (left: 3 12 12)",
                "12 / 4 = 3 (left: 3 5 12)",
                "12 / 5 = 2.4 (left: 4 ",
                "12 / 4 = 3 (left: 3 5 12)"
            ],
            "Evaluation": [
                0.002,
                2.001,
                21.001,
                3.0,
                0.002,
                2.001,
                60.0,
                2.001,
                0.002,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.6",
                "2 <- 0.2",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 0.6",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- 0.6",
                "9 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "5 * 4 = 20 (left: 20 12 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)",
                "12 - 5 = 7 (left: 4 7 12) || 4 * 7 = 28 (left: 28 12)",
                "12 / 4 = 3 (left: 3 5 12)",
                "12 / 4 = 3 (left: 3 12 12)",
                "12 / 4 = 3 (left: 3 12 12) || Input: 1 9",
                "12 / 4 = 3 (left: 3 5 12)",
                "12 - 5 = 7 (left: ",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 - 5 = 7 (left: 4 7 12) || 4 * 7 = 28 (left: 28 12)"
            ],
            "Evaluation": [
                2.001,
                0.003,
                0.001,
                20.001,
                41.0,
                0.003,
                1.002,
                0.0,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.4",
                "2 <- INIT",
                "3 <- 1.4",
                "4 <- 1.4",
                "5 <- 0.6",
                "6 <- 0.6",
                "7 <- 0.2",
                "8 <- 0.6",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)",
                "12 - 5 = 7 (left: 4 7 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 12 = 1 (left: 3 1 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12)",
                "12 - 5 = 7 (left: 4 7 12) || 12 - 7 = 5 (left: 4 5)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 5 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                22.0,
                0.001,
                1.002,
                20.002,
                1.002,
                0.002,
                0.002,
                3.0
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 0.6",
                "2 <- INIT",
                "3 <- 2.5",
                "4 <- 1.3",
                "5 <- 0.6",
                "6 <- 0.6",
                "7 <- 1.3",
                "8 <- 2.2",
                "9 <- 2.2"
            ]
        },
        "Step 3": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)",
                "12 / 4 = 3 (left: 3 5 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 12 = 1 (left: 3 1 12) || 3 + 1 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 + 3 = 8 (left: 8 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 5 12) || 12 / 3 = 4 (left: 5 4)",
                "12 - 5 = 7 (left: 4 7 12) || 12 - 4 = 8 (left: 8 7)",
                "12 - 5 = 7 (left: 4 7 12) || 7 * 4 = 28 (left: 28 12)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                1.002,
                0.003,
                0.002,
                0.002,
                0.002,
                2.0,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- INIT",
                "2 <- 3.7",
                "3 <- 2.5",
                "4 <- 2.2",
                "5 <- 1.3",
                "6 <- 1.4",
                "7 <- 1.4",
                "8 <- 0.6",
                "9 <- 0.6"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 5 = 7 (left: 4 7 12) || 7 / 4 = 1.75 (left: 1.75 12)",
                "12 - 4 = 8 (left: 8 12 12)",
                "12 / 4 = 3 (left: 3 5 12) || 12 / 3 = 4 (left: 5 4) || 4 / 5 =",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 12 = 1 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12)",
                "12 - 5 = 7 (left: 4 7 12) || 4 * 7 = 28 (left: 28 12)",
                "12 / 4 = 3 (left: 3 5 12) || Input: 4 6",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)"
            ],
            "Evaluation": [
                0.001,
                2.001,
                0.003,
                60.0,
                1.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 1.4",
                "2 <- 2.2",
                "3 <- 0.6",
                "4 <- 1.4",
                "5 <- INIT",
                "6 <- 2.5",
                "7 <- 2.2",
                "8 <- 2.2",
                "9 <- INIT"
            ]
        },
        "Step 5": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 12 / 12 = 1 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 2 + 12 = 14",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12 12)",
                "12 - 5 = 7 (left: 4 7 12) || 4 * 7 = 28 (left: 28 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)",
                "12 / 4 = 3 (left: 3 5 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 12 = 1 (left: 3 1 12) || 12 - 3 = 9 (left: 3 9)",
                "12 - 5 = 7 (left: 4 7 12) || 12 - 7 = 5 (left: 4 5)",
                "12 - 5 = 7 (left: 4 7 12) || 12 - 4 = 8 (left: 8 7)",
                "12 - 5 = 7 (left: 4 7 12)"
            ],
            "Evaluation": [
                0.003,
                41.0,
                0.002,
                2.001,
                0.003,
                2.001,
                0.003,
                41.0,
                0.002,
                22.0
            ],
            "Resampling": [
                "0 <- 5.9",
                "1 <- 1.4",
                "2 <- 5.9",
                "3 <- 2.5",
                "4 <- 4.3",
                "5 <- 4.3",
                "6 <- 5.9",
                "7 <- 1.4",
                "8 <- 0.6",
                "9 <- 5.7"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 5 = 7 (left: 4 7 12) || 7 - 4 = 3 (left: 3 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12)",
                "12 - 5 = 7 (left: 4 7 12) || 7 - 4 = 3 (left: 3 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 12 = 1 (left: 3 1 12) || 12 - 3 = 9 (left: 3 9)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 12 = 1 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 12 = 1 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 12 + 2 = 14 (left: 14)",
                "12 - 5 = 7 (left: 4 7 12) || 12 - 4 = 8 (left: 8 7)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 3 9 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 - 5 = 7 (left: 4 7 12) || 12 - 7 = 5 (left: 4 5) || 4 - 5 = -1 (left: -1)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                2.001,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 5.7",
                "2 <- 4.3",
                "3 <- 0.6",
                "4 <- 5.1",
                "5 <- 4.3",
                "6 <- 5.9",
                "7 <- 5.7",
                "8 <- 5.7",
                "9 <- 0.2"
            ]
        },
        "Step 7": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 12 / 12 = 1 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "12 - 5 = 7 (left: 4 7 12) || 12 - 7 = 5 (left: 4 5) || 2 - 10 = -8 (left: -8)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 12 = 1 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12 12) || 12 - 4 = 8 (left: 8 12 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 12 = 1 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "12 - 5 = 7 (left: 4 7 12) || 12 - 7 = 5 (left: 4 5)",
                "12 - 5 = 7 (left: 4 7 12) || 12 - 7 = 5 (left: 4 5) || 5 - 4 = 1 (left: 1)",
                "12 - 5 = 7 (left: 4 7 12) || 12 - 7 = 5 (left: 4 5) || 4 * 5 = 20 (left: 5 20)",
                "12 - 5 = 7 (left: 4 7 12) || 7 - 4 = 3 (left: 3 12)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.001,
                0.003,
                1.002,
                40.0,
                21.001,
                0.003,
                20.0,
                40.001
            ],
            "Resampling": [
                "0 <- 7.8",
                "1 <- 7.9",
                "2 <- 7.8",
                "3 <- 1.3",
                "4 <- 7.8",
                "5 <- 2.9",
                "6 <- 4.3",
                "7 <- 7.5",
                "8 <- 0.6",
                "9 <- 4.3"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 5 = 7 (left: 4 7 12) || 12 - 7 = 5 (left: 4 5) || 4 * 5 = 20 (left: 5 20) || 20 / 5 = 4 (left: 4)",
                "12 - 5 = 7 (left: 4 7 12) || 7 - 4 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9)",
                "12 - 5 = 7 (left: 4 7 12) || 12 - 7 = 5 (left: 4 5) || 4 * 5 = 20 (left: 5 20) || 9 / 3 = 3 (left: 3 18)",
                "12 / 4 = 3 (left: 3 5 12) || 12 - 3 = 9 (left: 9 5)",
                "12 - 5 = 7 (left: 4 7 12) || 12 - 7 = 5 (left: 4 5) || 4 * 5 = 20 (left: 5 20) || Input: 3 9 27",
                "12 / 4 = 3 (left: 3 5 12) || 12 - 5 = 7 (left:",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 12 = 1 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 2 + 12 = 14",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 12 = 1 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: ((4 / 12) - 1) * 12 = 24",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 12 = 1 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                20.001,
                0.003,
                0.001,
                0.003,
                60.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 5.9",
                "1 <- 0.6",
                "2 <- 5.3",
                "3 <- 7.5",
                "4 <- 8.3",
                "5 <- 8.7",
                "6 <- 8.9",
                "7 <- 8.9",
                "8 <- 7.9",
                "9 <- 8.9"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 5 = 7 (left: 4 7 12) || 7 + 12 = 19 (left: 4 19)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 12 = 1 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (4 + 5) * (12 / 12) * 12 = 24",
                "12 / 4 = 3 (left: 3 5 12) || 12 - 3 = 9 (left: 9 5) || 5 * 9 = 45 (left: 45)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 12 = 1 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: ((4 / 12) - 1) * 12 = 24 || Input: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) * (8 - 6) = 24",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 12 = 1 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (12 / 4) * (12 / 12) * 5 = 24",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 12 = 1 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: ((4 / 5) + 12) * 12 = 24",
                "12 - 5 = 7 (left: 4 7 12) || 7 - 4 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 12 = 1 (left: 3 1 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (12 / 4) * (12 / 12) * 5 = 24"
            ]
        },
        "Input": "4 5 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "35": {
        "puzzle": "4 6 13 13",
        "Step 0": {
            "steps": [
                "13 + 4 = 17 (left: 6 13 17)",
                "6 - 4 = 2 (left: 2 13 13)",
                "13 - 6 = 7 (left: 4 7 13)",
                "13 - 6 = 7 (left: 4 7 13)",
                "13 + 4 = 17 (left: 6 13 17)",
                "13 - 6 = 7 (left: 4 7 13)",
                "13 - 6 = 7 (left: 4 7 13)",
                "13 + 4 = 17 (left: 6 13 17)",
                "6 / 4 = 1.5 (left: 1.",
                "13 + 4 = 17 (left: 6 13 17)"
            ],
            "Evaluation": [
                2.001,
                0.003,
                20.002,
                20.002,
                3.0,
                40.001,
                2.001,
                3.0,
                0.001,
                3.0
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- INIT",
                "2 <- 0.5",
                "3 <- 0.3",
                "4 <- 0.7",
                "5 <- 0.5",
                "6 <- INIT",
                "7 <- 0.2",
                "8 <- 0.7",
                "9 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "13 - 6 = 7 (left: 4 7 13) || 7 - 4 = 3 (left: 3 13)",
                "4 * 6 = 24 (left: 24 13 13)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9)",
                "13 + 4 = 17 (left: 6 13 17) || 6 * 13 = 78 (left: 17 78)",
                "13 - 6 = 7 (left: 4 7 13) || 13 / 4 = ",
                "13 + 4 = 17 (left: 6 13 17)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6)",
                "13 + 4 = 17 (left: 6 13 17) || 6 * 13 = 78 (left: 78 17)",
                "13 + 4 = 17 (left: 6 13 17) || 13 - 6 = 7 (left: 7 17)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                1.002,
                0.002,
                0.003,
                22.0,
                60.0,
                0.0,
                40.001
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- 0.2",
                "3 <- 0.5",
                "4 <- 1.6",
                "5 <- 1.9",
                "6 <- 1.7",
                "7 <- 0.3",
                "8 <- 1.7",
                "9 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "13 - 6 = 7 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 9 7)",
                "13 + 4 = 17 (left: 6 13 17) || 13 * 6 = 78 (left: 17 78)",
                "13 + 4 = 17 (left: 6 13 17) || 13 - 6 = 7 (left: 7 17) || 17 / 7 = 2.43 (left: 2.43)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 9 7)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || Input: 1 3 5 7",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                60.0,
                0.002,
                1.002,
                0.003,
                60.0,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.9",
                "2 <- 1.2",
                "3 <- 1.7",
                "4 <- 2.2",
                "5 <- 1.9",
                "6 <- 1.2",
                "7 <- 2.2",
                "8 <- 2.2",
                "9 <- 1.9"
            ]
        },
        "Step 3": {
            "steps": [
                "6 / 4 = 1.5 (left: 1.5 13 13)",
                "13 + 4 = 17 (left: 6 13 17) || 13 - 6 = 7 (left: 7 17) || 17 / 7 = 2.42857142857 (left: 2.42857142857)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || 10 * 1",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "13 + 4 = 17 (left: 6 13 17) || 13 - 6 = 7 (left: 7 17) || 17 / 7 = 2.42857142857 (left: 2.42857142857)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || Input: 3 5 7",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || Input: 10 5 2",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "13 + 4 = 17 (left: 6 13 17) || 13 - 6 = 7 (left: 7 17) || 17 / 7 = 2.43 (left: 2.43)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                60.0,
                0.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 1.2",
                "2 <- 0.2",
                "3 <- 2.6",
                "4 <- 2.2",
                "5 <- 0.5",
                "6 <- 1.7",
                "7 <- 3.3",
                "8 <- 3.3",
                "9 <- 1.2"
            ]
        },
        "Step 4": {
            "steps": [
                "13 - 6 = 7 (left: 4 7 13) || 7 - 4 = 3 (left: 3 13)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (13 - (13 - 6)) = 24",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || 1 + 3 = 4 (left: 4 5 7)",
                "13 - 6 = 7 (left: 4 7 13) || 13 / 7 = 1 (left:",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (13 - (13 - 6)) = 24",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (13 - (13 - 6)) = 24",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)"
            ]
        },
        "Input": "4 6 13 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "36": {
        "puzzle": "12 12 12 12",
        "Step 0": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12)",
                "12 / 12 = 1 (left: 1 12 12)",
                "12 * 12 = 144 (left: 12 12 144)",
                "12 - 12 = 0 (left: 0 12 12)",
                "12 * 12 = 144 (left: 12 12 144)",
                "12 - 12 = 0 (left: 0 12 12)",
                "12 - 12 = 0 (left: 0 12 12)",
                "12 * 12 = 144 (left: 12 12 144)",
                "12 * 12 = 144 (left: 12 12 144)",
                "12 * 12 = 144 (left: 12 12 144)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                60.0,
                20.002,
                60.0,
                60.0,
                21.001,
                21.001,
                40.001
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 0.3",
                "2 <- 0.0",
                "3 <- 0.3",
                "4 <- 0.7",
                "5 <- INIT",
                "6 <- 0.0",
                "7 <- 0.5",
                "8 <- 0.9",
                "9 <- 0.6"
            ]
        },
        "Step 1": {
            "steps": [
                "12 * 12 = 144 (left: 12 12 144) || 12 * 12 = 144 (left: 12 144)",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 0 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 / 0 is undefined.",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12)",
                "12 * 12 = 144 (left: 12 12 144) || 12 - 12 = 0 (left: 0 144)",
                "12 - 12 = 0 (left: 0 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 1 12)",
                "12 * 12 = 144 (left: 12 12 144) || 12 / 12 = 1 (left: 1 144)",
                "12 - 12 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 1)"
            ],
            "Evaluation": [
                0.003,
                20.0,
                0.003,
                60.0,
                0.002,
                60.0,
                60.0,
                2.001,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.3",
                "2 <- 0.9",
                "3 <- 1.3",
                "4 <- 1.5",
                "5 <- 1.6",
                "6 <- 0.3",
                "7 <- 0.7",
                "8 <- INIT",
                "9 <- 1.5"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12) || 0 * 12 = 0 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || Input: 1 ",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 12 = 0 (left: 0 12)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12 12)",
                "12 * 12 = 144 (left: 12 12 144)",
                "12 - 12 = 0 (left: 0 12 12) || Input: 4 7 9"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                0.002,
                60.0,
                20.002,
                0.001,
                0.003,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 0.0",
                "2 <- 1.5",
                "3 <- 0.5",
                "4 <- 0.6",
                "5 <- 1.6",
                "6 <- 1.3",
                "7 <- 2.4",
                "8 <- 2.4",
                "9 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 * ",
                "12 - 12 = 0 (left: 0 12 12) || 0 * 12 = 0 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 12 = 0 (left: 0 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                40.001,
                41.0,
                60.0,
                0.003,
                60.0,
                20.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 3.7",
                "2 <- 1.8",
                "3 <- 2.4",
                "4 <- 2.2",
                "5 <- 0.6",
                "6 <- 1.6",
                "7 <- 3.6",
                "8 <- 0.0",
                "9 <- 3.2"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144) || ",
                "12 * 12 = 144 (left: 12 12 144) || 12 / 12 = 1 (left: 1 144) || 1 * 144 = 144 (left: 144 144)",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 - 12 = 0 (left: 0 12 12) || 12 / 0 is undefined",
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (12 - 12) * (12 + 12) = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 0 * 12 = 0 (left: 12 12) || 12 / 12 = 1 (left: 1)"
            ],
            "Evaluation": [
                20.002,
                20.002,
                20.002,
                0.003,
                0.003,
                0.003,
                20.002,
                60.0,
                40.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 1.3",
                "2 <- 3.3",
                "3 <- 3.4",
                "4 <- 3.3",
                "5 <- 4.6",
                "6 <- 3.6",
                "7 <- 3.0",
                "8 <- 3.4",
                "9 <- 1.5"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 1)",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 12 = 0 (left: 0 12) || 12 * 0 = 0 (left: 0)",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2 24)",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (12 - 12) + (12 + 12) = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 12 = 0 (left: 0 12) || 0 * 12 = 0 (left: 0 12)",
                "12 - 12 = 0 (left: 0 12 12) || 0 * 12 = 0 (left: 12 12)"
            ]
        },
        "Input": "12 12 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "37": {
        "puzzle": "2 11 11 12",
        "Step 0": {
            "steps": [
                "11 / 2 = 5.5 (left: 5.5 11 12)",
                "11 - 2 = 9 (left: 9 11 12)",
                "11 * 2 = 22 (left: 11 12 22)",
                "2 * 11 = 22 (left: 11 12 22)",
                "12 - 11 = 1 (left: 2 11 1)",
                "2 * 11 = 22 (left: 11 12 22)",
                "12 - 11 = 1 (left: 1 11 12)",
                "11 / 2 = 5.5 (left: 5.5 11 12)",
                "12 / 2 = 6 (left: ",
                "11 - 2 = 9 (left: 2 9 11 12)"
            ],
            "Evaluation": [
                3.0,
                1.001,
                1.002,
                0.003,
                2.0,
                1.002,
                20.002,
                3.0,
                0.0,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 0.7",
                "7 <- 0.7",
                "8 <- 0.9",
                "9 <- 0.6"
            ]
        },
        "Step 1": {
            "steps": [
                "11 / 2 = 5.5 (left: 2 11 12)",
                "11 - 2 = 9 (left: 9 11 12)",
                "11 + 2 = 13 (left: 11 11 13)",
                "11 / 2 = 5.5 (left: 5.5 11 12)",
                "11 - 2 = 9 (left: 9 11 12)",
                "11 - 11 = 0 (left: 2 0 12)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12)",
                "11 - 2 = 9 (left: 2 9 11 12) || 11 - 2 = 9 (left: 2 9 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                20.002,
                1.002,
                0.003,
                3.0,
                3.0,
                41.0,
                60.0,
                60.0,
                2.001,
                60.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 1.9",
                "2 <- INIT",
                "3 <- 1.7",
                "4 <- 1.7",
                "5 <- 1.9",
                "6 <- 1.9",
                "7 <- 0.6",
                "8 <- 1.7",
                "9 <- 1.7"
            ]
        },
        "Step 2": {
            "steps": [
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 - 5.5 = 5.5 (left: 5.5 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 - 2 = 9 (left: 9 11 12)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12) || 2 + 12 = 14",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 - 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                1.002,
                0.003,
                0.003,
                0.002,
                0.003,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 1.9",
                "2 <- 1.6",
                "3 <- 1.9",
                "4 <- 1.6",
                "5 <- 1.7",
                "6 <- 1.9",
                "7 <- 1.7",
                "8 <- 1.9",
                "9 <- 1.7"
            ]
        },
        "Step 3": {
            "steps": [
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 12 24)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                1.001,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 3.0",
                "2 <- 3.0",
                "3 <- 1.6",
                "4 <- 1.5",
                "5 <- INIT",
                "6 <- 1.0",
                "7 <- 1.3",
                "8 <- 1.5",
                "9 <- 0.6"
            ]
        },
        "Step 4": {
            "steps": [
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (11 / (11 / 2)) * 12 = 24",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (11 / (11 / 2)) * 12 = 24",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "11 - 11 = 0 (left: 2 0 12) || 12 - 2 = 10 (left: 2 10)",
                "11 - 2 = 9 (left: 9 11 12)",
                "11 / 2 = 5.5 (left: 2 11 12) || 12 - 2 = 10 (left: 2 11 10)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / ",
                "11 - 11 = 0 (left: 2 0 12) || 12 / 2 = 6 (left: 2 6)",
                "12 - 11 = 1 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)"
            ]
        },
        "Input": "2 11 11 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "38": {
        "puzzle": "4 4 4 6",
        "Step 0": {
            "steps": [
                "6 - 4 = 2 (left: 4 4 2)",
                "4 / 4 = 1 (left: 4 4 6)",
                "6 - 4 = 2 (left: 4 4 2)",
                "6 / 4 = 1.5 (left: 1.5 4 6)",
                "6 - 4 = 2 (left: 4 4 2)",
                "4 * 6 = 24 (left: 4 4 24)",
                "4 * 4 = 16 (left: 4 16 6)",
                "6 - 4 = 2 (left: 2 4 4)",
                "4 + 4 = 8 (left: 4 6 ",
                "6 - 4 = 2 (left: 4 4 2)"
            ],
            "Evaluation": [
                21.001,
                3.0,
                2.001,
                3.0,
                1.002,
                21.001,
                3.0,
                1.002,
                60.0,
                2.0
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 0.5",
                "2 <- 0.8",
                "3 <- 0.8",
                "4 <- 0.8",
                "5 <- 0.5",
                "6 <- INIT",
                "7 <- 0.5",
                "8 <- 0.8",
                "9 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "4 + 4 = 8 (left: 4 6  || 6 / 4 = 1.5 (left: 1.5)",
                "4 * 6 = 24 (left: 4 4 24) || 24 - 4 = 20 (left: 4 20)",
                "4 + 4 = 8 (left: 4 6  || 4 - 6 = -2 (left: -2)",
                "4 + 4 = 8 (left: 4 6  || 4 * 6 = 24 (left: 24)",
                "4 + 4 = 8 (left: 4 6  || 4 * 6 = 24 (left: 24)",
                "4 * 6 = 24 (left: 4 4 24) || Possible next steps:",
                "6 - 4 = 2 (left: 4 4 2)",
                "4 * 6 = 24 (left: 4 4 24) || 4 / 4 = 1 (left: 1 4 24)",
                "4 + 4 = 8 (left: 4 6  || 6 + 4 = 10 (left: 10)",
                "6 - 4 = 2 (left: 4 4 2) || 4 - 4 = 0 (left: 0 2)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.0,
                60.0,
                60.0,
                0.003,
                22.0,
                41.0,
                0.003,
                40.001
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.9",
                "2 <- 1.3",
                "3 <- 0.5",
                "4 <- 1.1",
                "5 <- 0.0",
                "6 <- INIT",
                "7 <- 1.7",
                "8 <- 0.8",
                "9 <- 0.8"
            ]
        },
        "Step 2": {
            "steps": [
                "4 * 6 = 24 (left: 4 4 24) || 24 - 4 = 20 (left: 4 20) || 4 * 20 = 80 (left: 80)",
                "6 - 4 = 2 (left: 4 4 2) || 4 - 4 = 0 (left: 0 2) || 2 / 0 = undefined (left: 2)",
                "4 + 4 = 8 (left: 4 6  || 4 * 6 = 24 (left: 24) || Answer: 4 * (4 + 6) = 24",
                "4 * 6 = 24 (left: 4 4 24) || 4 / 4 = 1 (left: 1 24)",
                "4 * 6 = 24 (left: 4 4 24) || 24 - 4 = 20 (left: 4 20) || 5 + 10 = 15 (left: 15)",
                "6 - 4 = 2 (left: 4 4 2) || 4 * 2 = 8 (left: 8 2)",
                "6 - 4 = 2 (left: 4 4 2)",
                "4 * 6 = 24 (left: 4 4 24) || 4 / 4 = 1 (left: 1 4 24) || 24 / 4 = 6 (left: 1 6 24)",
                "4 + 4 = 8 (left: 4 6  || Input: 1 5 9",
                "4 + 4 = 8 (left: 4 6  || 6 - 4 = 2 (left: 2)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                60.0,
                60.0,
                0.003,
                1.002,
                2.001,
                2.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 2.3",
                "2 <- 2.3",
                "3 <- 0.1",
                "4 <- 1.7",
                "5 <- 2.6",
                "6 <- 1.6",
                "7 <- 1.7",
                "8 <- 2.3",
                "9 <- 0.5"
            ]
        },
        "Step 3": {
            "steps": [
                "4 * 6 = 24 (left: 4 4 24) || 4 / 4 = 1 (left: 1 4 24) || 4 * 1 = 4 (left: 4 24)",
                "4 * 6 = 24 (left: 4 4 24) || 4 / 4 = 1 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "4 * 6 = 24 (left: 4 4 24) || 4 / 4 = 1 (left: 1 24) || 24 + 1 = 25 (left: 25)",
                "4 / 4 = 1 (left: 4 4 6) || 4 / 4 = 1 (left: 1 6)",
                "4 * 6 = 24 (left: 4 4 24) || 4 / 4 = 1 (left: 1 4 24) || 24 - 1 = 23 (left: 4 23)",
                "6 - 4 = 2 (left: 4 4 2) || 4 - 2 = 2 (left: 2 2)",
                "6 - 4 = 2 (left: 4 4 2) || 4 * 2 = 8 (left: 8 8)",
                "4 * 6 = 24 (left: 4 4 24) || 4 / 4 = 1 (left: 1 4 24) || 24 - 1 = 23 (left: 4 23)",
                "4 * 6 = 24 (left: 4 4 24) || 4 / 4 = 1 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "4 * 6 = 24 (left: 4 4 24) || 24 / 4 = 6 (left: 4 6)"
            ],
            "Evaluation": [
                20.001,
                60.0,
                0.002,
                60.0,
                0.0,
                21.0,
                0.003,
                0.002,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 3.5",
                "1 <- 1.9",
                "2 <- 0.8",
                "3 <- 2.2",
                "4 <- 2.2",
                "5 <- 1.7",
                "6 <- 2.2",
                "7 <- 3.3",
                "8 <- 3.8",
                "9 <- 3.1"
            ]
        },
        "Step 4": {
            "steps": [
                "6 - 4 = 2 (left: 4 4 2) || 4 - 2 = 2 (left: 2 2) || 2 + 2 = 4",
                "6 - 4 = 2 (left: 4 4 2) || 4 - 4 = 0 (left: 0 2) || 0 + 2 = 2",
                "4 + 4 = 8 (left: 4 6  || 9 - 3 = 6 (left: 6)",
                "4 + 4 = 8 (left: 4 6  || 4 * 6 = 24 (left: 24) || Answer: 4 * (4 + 6) = 24 || Input: 3 3 7 9\nSteps:\n3 * 3 = 9 (left: 7 9)\n7 + 9 = 16 (left: 16)\n16 - 7 = 9 (left: 9)\n9 * 9 = 81 (left: 81)\nAnswer: ((3 * 3) + 7) * 9 = 24",
                "4 + 4 = 8 (left: 4 6  || 4 * 6 = 24 (left: 24) || Answer: 4 * (4 + 6) = 24 || Input: 3 5 7 9\nSteps:\n5 + 7 = 12 (left: 3 9 12)\n12 - 9 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((3 * (5 + 7)) - 9) * 3 = 24",
                "4 * 6 = 24 (left: 4 4 24) || 4 / 4 = 1 (left: 1 4 24) || 4 * 6 = 24 (left:",
                "4 + 4 = 8 (left: 4 6  || 4 * 6 = 24 (left: 24) || Answer: 4 * (4 + 6) = 24 || Input: 3 3 5 7\nSteps:\n3 + 7 = 10 (left: 3 5 10)\n5 * 3 = 15 (left: 10 15)\n15 - 10 = 5 (left: 5 24)\n5 * 24 = 120 (left: 120)\n120 / 5 = 24 (left: 24)\nAnswer: ((3 + 7) * 3) - ",
                "4 / 4 = 1 (left: 4 4 6) || 4 / 4 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "4 * 6 = 24 (left: 4 4 24) || 4 / 4 = 1 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (4 * 6) / (4 / 4) = 24",
                "4 * 6 = 24 (left: 4 4 24) || 4 / 4 = 1 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (4 * 6) * (4 / 4) = 24"
            ]
        },
        "Input": "4 4 4 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            }
        ]
    },
    "39": {
        "puzzle": "1 1 1 11",
        "Step 0": {
            "steps": [
                "11 - 1 = 10 (left: 1 1 10)",
                "1 * 1 = 1 (left: 1 1 11)",
                "11 / 1 = 11 (left: 1 1 11)",
                "11 / 1 = 11 (left: 1 1 11)",
                "11 - 1 = 10 (left: 1 1 10)",
                "11 - 1 = 10 (left: 1 1 10)",
                "11 / 1 = 11 (left: 1 1 11)",
                "11 - 1 = 10 (left: 1 1 10)",
                "11 - 1 = 10 (left: 1 1 10)",
                "11 - 1 = 10 (left: 1 1 10)"
            ],
            "Evaluation": [
                3.0,
                0.003,
                0.003,
                20.002,
                2.001,
                2.001,
                20.002,
                2.001,
                1.002,
                2.001
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- INIT",
                "2 <- 0.3",
                "3 <- 0.3",
                "4 <- 0.7",
                "5 <- 0.0",
                "6 <- INIT",
                "7 <- 0.6",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "11 / 1 = 11 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11)",
                "11 / 1 = 11 (left: 1 1 11)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10)",
                "11 - 1 = 10 (left: 1 1 10) || Input: 3 5 7",
                "11 - 1 = 10 (left: 1 1 10)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10)",
                "11 - 1 = 10 (left: 1 1 10)",
                "1 * 1 = 1 (left: 1 1 11)"
            ],
            "Evaluation": [
                40.001,
                1.002,
                60.0,
                60.0,
                60.0,
                0.003,
                1.002,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.7",
                "2 <- 1.3",
                "3 <- 1.2",
                "4 <- 1.7",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 1.2",
                "8 <- 0.3",
                "9 <- 1.7"
            ]
        },
        "Step 2": {
            "steps": [
                "11 / 1 = 11 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 =",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || Input: 5 5",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 / 1 = 11 (left: 1 1 11)",
                "11 - 1 = 10 (left: 1 1 10)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 10 = 0 (left: 0)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 + 1 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                1.002,
                0.003,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.0",
                "2 <- 1.7",
                "3 <- 1.4",
                "4 <- 1.3",
                "5 <- 2.8",
                "6 <- 1.3",
                "7 <- 1.4",
                "8 <- 1.4",
                "9 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 / 1 = 11 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 - 10 =",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.002,
                0.002,
                0.001,
                0.003,
                0.003,
                0.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 0.6",
                "2 <- 1.7",
                "3 <- 1.7",
                "4 <- 0.6",
                "5 <- 1.4",
                "6 <- 1.4",
                "7 <- 1.4",
                "8 <- 1.4",
                "9 <- 1.0"
            ]
        },
        "Step 4": {
            "steps": [
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 / 1 = 11 (left: 1 1 11) || 11 / 1 = 11 (left: 1 11)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10 10)",
                "11 / 1 = 11 (left: 1 1 11) || 3 + 5 = 8 (left: 7 8)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 / 1 = 11 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.002,
                0.0,
                0.002,
                0.001,
                0.002,
                0.003,
                0.001,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 2.8",
                "1 <- 2.8",
                "2 <- 1.3",
                "3 <- 1.3",
                "4 <- 1.0",
                "5 <- 1.0",
                "6 <- 2.8",
                "7 <- 1.2",
                "8 <- 1.4",
                "9 <- 1.2"
            ]
        },
        "Step 5": {
            "steps": [
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 / 1 = 11 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "11 / 1 = 11 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.002,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.3",
                "2 <- 2.8",
                "3 <- 0.3",
                "4 <- 1.4",
                "5 <- 1.4",
                "6 <- 1.4",
                "7 <- 0.6",
                "8 <- 1.7",
                "9 <- 1.4"
            ]
        },
        "Step 6": {
            "steps": [
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 3 * 6 = 18 (left: 5 18)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 10 * 1 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 / 1 = 11 (left: 1 1 11) || Input: 5 5 10",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.0,
                0.001,
                0.002,
                40.001,
                0.0,
                0.001,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 1.4",
                "2 <- 2.8",
                "3 <- 1.4",
                "4 <- 2.8",
                "5 <- 1.0",
                "6 <- 1.0",
                "7 <- 1.4",
                "8 <- 6.3",
                "9 <- 1.3"
            ]
        },
        "Step 7": {
            "steps": [
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 / 1 = 11 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "11 / 1 = 11 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11) ",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                0.002,
                0.001,
                0.001,
                0.001,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 6.3",
                "2 <- 2.8",
                "3 <- 1.3",
                "4 <- 0.4",
                "5 <- 1.3",
                "6 <- 6.3",
                "7 <- 6.3",
                "8 <- 6.3",
                "9 <- INIT"
            ]
        },
        "Step 8": {
            "steps": [
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 * 1 = 10 (left: 10)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 * 1 = 10 (left: 10)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.002,
                60.0,
                0.003,
                0.002,
                0.001,
                0.001,
                1.002
            ],
            "Resampling": [
                "0 <- 8.4",
                "1 <- 1.3",
                "2 <- 6.3",
                "3 <- INIT",
                "4 <- 8.4",
                "5 <- 8.4",
                "6 <- 1.2",
                "7 <- 1.3",
                "8 <- 8.4",
                "9 <- 8.4"
            ]
        },
        "Step 9": {
            "steps": [
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 3 + 7 = 10 (left: 5 10)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 / 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ]
        },
        "Input": "1 1 1 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "40": {
        "puzzle": "1 1 11 12",
        "Step 0": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 12)",
                "1 * 1 = 1 (left: 1 11 12)",
                "11 - 1 = 10 (left: 1 10 12)",
                "1 - 1 = 0 (left: 0 11 12)",
                "11 + 1 = 12 (left: 1 12 12)",
                "1 - 1 = 0 (left: 0 11 12)",
                "1 + 11 = 12 (left: 12 12 12)",
                "11 + 1 = 12 (left: 1 12 12)",
                "11 * 1 = 11 (left: 1 11 ",
                "11 + 1 = 12 (left: 1 12 12)"
            ],
            "Evaluation": [
                20.002,
                20.002,
                0.003,
                2.001,
                20.002,
                0.003,
                0.003,
                40.0,
                21.0,
                20.001
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.1",
                "2 <- 0.7",
                "3 <- 0.4",
                "4 <- 0.7",
                "5 <- 0.1",
                "6 <- INIT",
                "7 <- 0.7",
                "8 <- INIT",
                "9 <- 0.7"
            ]
        },
        "Step 1": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "1 * 1 = 1 (left: 1 11 12) || 12 - 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 + 1 = 13 (left: 12 13)",
                "11 + 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "1 * 1 = 1 (left: 1 11 12) || Input: 3 5 8 13",
                "11 + 1 = 12 (left: 1 12 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 12 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                40.001,
                0.003,
                1.002,
                0.003,
                0.003,
                40.001
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.0",
                "2 <- 1.9",
                "3 <- 0.4",
                "4 <- 0.0",
                "5 <- 1.9",
                "6 <- 1.4",
                "7 <- 0.8",
                "8 <- 0.1",
                "9 <- 0.7"
            ]
        },
        "Step 2": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 12) || 1 + 12 = 13 (left: 12 13)",
                "11 + 1 = 12 (left: 1 12 12) || 12",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 + 1 = 13 (left: 12 13)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 + 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 * 1 = 11 (left: 1 11  || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 + 1 = 13 (left: 13)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.0",
                "4 <- 0.8",
                "5 <- 0.8",
                "6 <- 0.4",
                "7 <- 0.0",
                "8 <- 0.7",
                "9 <- 0.9"
            ]
        },
        "Step 3": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "1 - 1 = 0 (left: 0 11 12)",
                "1 - 1 = 0 (left: 0 11 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "11 * 1 = 11 (left: 1 11  || 11 * 1 = 11 (left: 11)",
                "11 * 1 = 11 (left: 1 11  || 3 + 6 = 9 (left: 9 9)",
                "11 + 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                1.001,
                40.001,
                0.002,
                0.003,
                0.003,
                0.002,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 3.3",
                "2 <- 3.3",
                "3 <- 1.4",
                "4 <- 3.3",
                "5 <- 0.7",
                "6 <- 0.7",
                "7 <- 0.1",
                "8 <- 0.9",
                "9 <- 1.4"
            ]
        },
        "Step 4": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 12) || 1 + 12 = 13 (left: 12 13)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 + 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 12 12) || 12 + 1 = 13 (left:",
                "11 + 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "1 * 1 = 1 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.003,
                20.002,
                0.001,
                0.003,
                21.0,
                40.001,
                0.001
            ],
            "Resampling": [
                "0 <- 4.8",
                "1 <- 4.7",
                "2 <- 1.4",
                "3 <- INIT",
                "4 <- 1.4",
                "5 <- 1.9",
                "6 <- 0.7",
                "7 <- 1.9",
                "8 <- 4.7",
                "9 <- 3.3"
            ]
        },
        "Step 5": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 + 1 = 12 (left: 1 12 12)",
                "11 + 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 + 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                21.001,
                0.003,
                0.002,
                0.003,
                40.001,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 1.9",
                "2 <- 0.4",
                "3 <- 0.1",
                "4 <- 1.4",
                "5 <- 5.7",
                "6 <- 5.3",
                "7 <- 4.8",
                "8 <- 4.4",
                "9 <- 4.8"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 + 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "1 * 1 = 1 (left: 1 11 12) || 12 / 1 = 12 (left: 11 12)",
                "11 + 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0) || No possible next steps.",
                "11 + 1 = 12 (left: 1 12 12) || 12 + 1 = 13 (left: 1 13)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144) ",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)"
            ],
            "Evaluation": [
                1.001,
                0.002,
                20.002,
                0.002,
                0.003,
                0.003,
                0.003,
                20.002,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 6.8",
                "1 <- 4.7",
                "2 <- 5.7",
                "3 <- 6.8",
                "4 <- 0.7",
                "5 <- 3.3",
                "6 <- 5.7",
                "7 <- 6.8",
                "8 <- 6.7",
                "9 <- 6.2"
            ]
        },
        "Step 7": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0) || There are no possible next steps as there is no input given.",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24) || 24 + 1 = 25 (left: 25)",
                "11 + 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0) || There are no possible next steps as there are no numbers provided in the input.",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)  || There are no possible next steps for the number 144 as it is a prime number and cannot be divided evenly by any other number.",
                "11 + 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                60.0,
                0.001,
                0.003,
                0.003,
                40.001,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 7.0",
                "2 <- 4.8",
                "3 <- 6.8",
                "4 <- 6.7",
                "5 <- 0.7",
                "6 <- 7.0",
                "7 <- 6.7",
                "8 <- 7.0",
                "9 <- 7.4"
            ]
        },
        "Step 8": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (11 + 1) * 12 = 24",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)  || No further steps can be taken with the number 144.",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left:",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: ((11 + 1) / 1) + (12 / 12) = 24",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)  || There is only one possible next step for the number 144: 12 * 12 = 144.",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: ((11 + 1) / 1) + 12 = 24",
                "11 + 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24"
            ]
        },
        "Input": "1 1 11 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "41": {
        "puzzle": "2 7 7 12",
        "Step 0": {
            "steps": [
                "12 + 2 = 14 (left: 7 7 14)",
                "7 / 2 = 3.5 (left: 3.5 7 12)",
                "12 - 7 = 5 (left: 2 5 12)",
                "2 * 7 = 14 (left: 7 12 14)",
                "12 + 2 = 14 (left: 7 7 14)",
                "7 / 2 = 3.5 (left: 3.5 7 12)",
                "7 * 2 = 14 (left: 7 12 14)",
                "12 - 7 = 5 (left: 2 5 7)",
                "12 - 7 = 5 (left: ",
                "12 - 7 = 5 (left: 2 5 7)"
            ],
            "Evaluation": [
                1.002,
                2.001,
                1.002,
                2.001,
                0.003,
                22.0,
                2.001,
                1.002,
                0.0,
                2.001
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- INIT",
                "2 <- 0.5",
                "3 <- 0.5",
                "4 <- 0.5",
                "5 <- 0.5",
                "6 <- 0.1",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12) || 7 * 12 = 84 (left: 3.5 84)",
                "2 * 7 = 14 (left: 7 12 14)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 - 3.5 = 8.5 (left: 8.5 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857 (left: 3.42857 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 - 3.5 = 8.5 (left: 8.5 7)",
                "12 - 7 = 5 (left: ",
                "12 - 2 = 10 (left: 7 7 10)",
                "2 * 7 = 14 (left: 7 12 14)"
            ],
            "Evaluation": [
                0.002,
                1.002,
                60.0,
                1.001,
                60.0,
                60.0,
                1.002,
                0.0,
                22.0,
                1.002
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 1.4",
                "2 <- 1.4",
                "3 <- 1.2",
                "4 <- 1.4",
                "5 <- 1.8",
                "6 <- 1.5",
                "7 <- 1.5",
                "8 <- 1.4",
                "9 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857 (left: 3.42857 7) || 7 - 3.42857 = 3.57143 (left: 3.57143)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7) || 7 / 3.42857142857 = 2.04347826087 (left: 2.043478260",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7) || 7 - 3.42857142857 \u2248 3.57142857143 (left: ",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7) || 3.42857142857 * 7 = 24 (left: 24)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7) || 7 / 3.42857142857 = 2.04225352113 (left:",
                "12 - 2 = 10 (left: 7 7 10) || 10 * 7",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857 (left: 3.42857 7) || 3.42857 * 7 = 24 (left: 24)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857 (left: 3.42857 7) || 7 - 3.42857 = 3.57143 (left: 3.57143)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7) || 3.42857142857 + 7 = 10.42857142857 (left: 10.42857142857)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7) || 7 / 3.42857142857 = 2.04347826087 (left: 2.043478260"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.0,
                60.0,
                1.001,
                0.003,
                60.0,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.2",
                "2 <- 1.2",
                "3 <- 1.5",
                "4 <- 0.5",
                "5 <- 1.5",
                "6 <- 1.5",
                "7 <- 1.4",
                "8 <- 1.5",
                "9 <- 1.4"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 7 = 14 (left: 7 12 14) || 12 - 7 = 5 (left: 5 14)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7) || 7 / 3.42857142857 = 2 (left: 2 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7) || 7 / 3.42857142857 = 2.04285714286 (left: 2",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857 (left: 3.42857 7) || 3.42857 * 7 = 24 (left: 24)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857 (left: 3.42857 7) || 7 / 3.42857 = 2.04081 (left: 2.04081)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857 (left: 3.42857 7) || 7 / 3.42857 = 2.04348 (left: 2.04348)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7) || 7 - 3.42857142857 = 3.57142857143 (left: 3.57142857143)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857 (left: 3.42857 7) || 7 / 3.42857 = 2.042857 (left: 2.042857)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7) || 7 / 3.42857142857 = 2.04347826087 (left: 2.043478260"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.0,
                60.0,
                60.0,
                0.002,
                0.003,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.3",
                "2 <- 3.4",
                "3 <- 0.5",
                "4 <- 2.3",
                "5 <- 3.4",
                "6 <- 1.4",
                "7 <- 3.3",
                "8 <- 2.3",
                "9 <- 1.2"
            ]
        },
        "Step 4": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7) || 3.42857142857 * 7 = 24 (left: 24) || Answer: (12 / (7 / 2)) * 7 = 24",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7) || 3.42857142857 * 7 = 24 (left: 24) || Answer: (12 / (7 / 2)) * 7 = 24",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7) || 7 / 3.42857142857 = 2 (left: 2)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 - 3.5 = 8.5 (left: 7 8.5)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7) || 3.42857142857 * 7 = 24 (left: 24) || Answer: (12 / (7 / 2)) * 7 = 24",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7) || 7 / 3.42857142857 = 2.04347826087 (left: 2.043478260",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7) || 7 - 3.42857142857 = 3.57142857143 (left: 3.57142857143)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857 (left: 3.42857 7) || 3.42857 * 7 = 24 (left: 24) || Answer: (12 / (7 / 2)) * 7 = 24",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7) || 3.42857142857 * 7 = 24 (left: 24) || Answer: (12 / (7 / 2)) * 7 = 24",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7) || 7 / 3.42857142857 = 2"
            ]
        },
        "Input": "2 7 7 12",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "42": {
        "puzzle": "1 5 7 12",
        "Step 0": {
            "steps": [
                "7 - 5 = 2 (left: 1 2 12)",
                "5 + 7 = 12 (left: 1 12 12)",
                "12 - 7 = 5 (left: 1 5 12)",
                "12 - 7 = 5 (left: 1 5 12)",
                "7 - 1 = 6 (left: 6 5 12)",
                "12 - 7 = 5 (left: 1 5 12)",
                "12 - 7 = 5 (left: 1 5 12)",
                "7 - 1 = 6 (left: 6 5 12)",
                "5 - 1 = 4 (left: 4 7 ",
                "7 * 1 = 7 (left: 5 7 12)"
            ],
            "Evaluation": [
                60.0,
                1.002,
                1.002,
                3.0,
                22.0,
                3.0,
                2.001,
                2.001,
                1.002,
                22.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.4",
                "2 <- 0.9",
                "3 <- INIT",
                "4 <- 0.5",
                "5 <- 0.0",
                "6 <- INIT",
                "7 <- 0.0",
                "8 <- 0.4",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "7 - 5 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "7 - 1 = 6 (left: 6 5 12) || 5 + 12 = 17 (left: 6 17)",
                "7 * 1 = 7 (left: 5 7 12) || 12 + 5 = 17 (left: 7 12)",
                "7 - 5 = 2 (left: 1 2 12)",
                "12 - 7 = 5 (left: 1 5 12) || 12 / 5 = 2.4 (left: 1 2.4)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 1 = 12 (left:",
                "7 - 1 = 6 (left: 5 6 12)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "7 - 1 = 6 (left: 6 5 12) || 6 - 5 = 1 (left: 1 12)",
                "12 - 7 = 5 (left: 1 5 12)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                1.002,
                60.0,
                20.002,
                40.001,
                3.0,
                60.0,
                1.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 1.7",
                "2 <- 0.0",
                "3 <- 1.0",
                "4 <- 1.5",
                "5 <- 0.4",
                "6 <- 0.4",
                "7 <- 1.8",
                "8 <- INIT",
                "9 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7",
                "7 - 5 = 2 (left: 1 2 12) || 6 - 4 = 2 (left: 2)",
                "7 - 5 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 1 = 12 (left: || 12 + 1 = 13 (left: 13)",
                "7 - 1 = 6 (left: 6 5 12) || 5 - 6 = -1 (left: -1 12)",
                "7 - 1 = 6 (left: 6 5 12) || 12 - 6 = 6 (left: 6 6)",
                "7 - 1 = 6 (left: 6 5 12) || 6 - 5 = 1 (left: 1 12) || 12 - 1 = 11 (left: 11)",
                "7 - 1 = 6 (left: 6 5 12)",
                "7 - 5 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 3 + 9 = 12 (left: 12 27)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.002,
                0.003,
                0.002,
                20.002,
                0.003,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 0.0",
                "2 <- 1.0",
                "3 <- 1.7",
                "4 <- 0.0",
                "5 <- 1.5",
                "6 <- 1.7",
                "7 <- 2.6",
                "8 <- 1.0",
                "9 <- 0.0"
            ]
        },
        "Step 3": {
            "steps": [
                "7 * 1 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "7 - 5 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 1 23)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 1 = 12 (left: || There are no more possible next steps for the input \"12 / 1\".",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "7 - 1 = 6 (left: 6 5 12) || 12 - 6 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "7 - 5 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "7 - 5 = 2 (left: 1 2 12) || 2 + 12 = 14 (left: 1 14)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                40.0,
                0.003,
                60.0,
                0.003,
                0.003,
                0.003,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.5",
                "2 <- 3.2",
                "3 <- 0.0",
                "4 <- 1.3",
                "5 <- 0.0",
                "6 <- 3.1",
                "7 <- 3.4",
                "8 <- 1.7",
                "9 <- 1.7"
            ]
        },
        "Step 4": {
            "steps": [
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 1 = 12 (left: || 12 * 1 = 12 (left: 12)",
                "7 - 5 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 1 23) || 1 * 23 = 23 (left: 23)",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6) ",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.002,
                60.0,
                60.0,
                0.003,
                0.002,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 1.5",
                "2 <- 1.7",
                "3 <- 3.0",
                "4 <- 3.4",
                "5 <- 3.1",
                "6 <- 3.4",
                "7 <- 0.0",
                "8 <- 3.1",
                "9 <- 1.7"
            ]
        },
        "Step 5": {
            "steps": [
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 1 = 12 (left: || 5 / 7 = 0.7142857142857143",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "7 * 1 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 1 = 11 (left: 2 11)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.001,
                0.001,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 3.0",
                "2 <- 3.9",
                "3 <- 0.0",
                "4 <- 3.0",
                "5 <- 4.3",
                "6 <- 1.0",
                "7 <- 3.4",
                "8 <- 4.4",
                "9 <- 4.0"
            ]
        },
        "Step 6": {
            "steps": [
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "7 * 1 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "7 - 5 = 2 (left: 1 2 12) || 2 + 12 = 14 (left: 1 14) || 14 / 1 = 14 (left: 14)",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "7 * 1 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "7 - 5 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || Input: 6 3 9",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                60.0,
                60.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 3.1",
                "2 <- 4.0",
                "3 <- 3.4",
                "4 <- 4.0",
                "5 <- 1.3",
                "6 <- 3.2",
                "7 <- 4.4",
                "8 <- 6.3",
                "9 <- 4.3"
            ]
        },
        "Step 7": {
            "steps": [
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "7 - 5 = 2 (left: 1 2 12) || 2 + 12 = 14 (left:",
                "7 - 5 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 1 23) || 1 * 23 = 23 (left: 23)",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 - 10 = -9 (left: 10)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                0.003,
                0.003,
                1.001,
                40.0,
                0.001,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 7.6",
                "2 <- 4.4",
                "3 <- 3.9",
                "4 <- 4.3",
                "5 <- 6.4",
                "6 <- 2.6",
                "7 <- 4.4",
                "8 <- 6.4",
                "9 <- 0.0"
            ]
        },
        "Step 8": {
            "steps": [
                "7 - 5 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "7 - 5 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 1 23) || 1 * 23 = 23 (left: 23) || 23 / 2 = 11.5",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "7 - 5 = 2 (left: 1 2 12) || 2 + 12 = 14 (left: 1 14) || 1 * 14 = 14 (left: 14)",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "7 * 1 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: 7 * (5 - 1) * 12 = 24",
                "7 - 1 = 6 (left: 6 5 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "7 * 1 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 * 1) * (12 - 5) = 24",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.001,
                0.003,
                0.001,
                60.0,
                0.002,
                0.002,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 8.8",
                "1 <- 6.4",
                "2 <- 8.8",
                "3 <- 8.9",
                "4 <- 3.1",
                "5 <- 8.9",
                "6 <- 8.5",
                "7 <- 8.9",
                "8 <- 6.4",
                "9 <- 8.5"
            ]
        },
        "Step 9": {
            "steps": [
                "7 * 1 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 * 1) * (12 - 5) = 24 || Input: 3 4 5 6\nSteps:\n4 + 6 = 10 (left: 3 5 10)\n5 * 3 = 15 (left: 10 15)\n15 - 10 = 5 (left: 5 24)\n5 * 24 = 120 (left: 120)\nAnswer: ((4 + 6) * 3) - 5 = 24",
                "7 * 1 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 * 1) * (12 - 5) = 24",
                "7 * 1 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 * 1) * (12 - 5) = 24 || Input: 3 3 5 7\nSteps:\n3 + 5 = 8 (left: 3 7 8)\n8 - 7 = 1 (left: 1 3)\n1 * 3 = 3 (left: 3)\n3 * 8 = 24 (left: 24)\nAnswer: ((3 + 5) - 7) * (3 * 8) = 24",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "7 * 1 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: 7 * (5 - 1) * 12 = 24 || Input: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n4 - 3 = 1 (left: 1 8)\n1 * 8 = 8 (left: 8)\nAnswer: (3 + 5) * (4 - 3) = 24",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "7 * 1 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 * 1) * (7 - 5) = 24",
                "7 * 1 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: 7 * (5 - 1) * 12 = 24 || Input: 3 3 8 9\n\n3 * 8 = 24 (left: 3 9 24)\n3 * 9 = 27 (left: 27 24)\n27 - 24 = 3 (left: 3)\nAnswer: (3 * 8) - (3 * 9) = 24"
            ]
        },
        "Input": "1 5 7 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "43": {
        "puzzle": "10 10 12 12",
        "Step 0": {
            "steps": [
                "12 + 10 = 22 (left: 10 12 22)",
                "10 / 10 = 1 (left: 1 12 12)",
                "10 * 10 = 100 (left: 12 12 100)",
                "12 / 12 = 1 (left: 1 12 12)",
                "12 + 10 = 22 (left: 10 12 22)",
                "10 / 10 = 1 (left: 1 12 12)",
                "10 * 10 = 100 (left: 12 12 100)",
                "12 + 10 = 22 (left: 10 12 22)",
                "12 / 10 = 1.2 (left: 10 ",
                "12 + 10 = 22 (left: 10 12 22)"
            ],
            "Evaluation": [
                1.002,
                20.002,
                2.001,
                20.002,
                3.0,
                20.002,
                2.001,
                3.0,
                0.001,
                3.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.1",
                "2 <- 0.1",
                "3 <- INIT",
                "4 <- 0.9",
                "5 <- INIT",
                "6 <- 0.5",
                "7 <- 0.5",
                "8 <- 0.6",
                "9 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "10 / 10 = 1 (left: 1 12 12) || 12 + 1 = 13 (left: 12 13)",
                "10 / 10 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "12 + 10 = 22 (left: 10 12 22)",
                "12 + 10 = 22 (left: 10 12 22) || 22 / 10 = 2.2 (left: 2.2 22)",
                "12 / 12 = 1 (left: 1 12 12)",
                "10 / 10 = 1 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 12 = 1 (left: 1 1)",
                "10 * 10 = 100 (left: 12 12 100) || 12 / 12 = 1 (left: 1 12 100)",
                "10 / 10 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                40.001,
                0.003,
                2.001,
                20.002,
                0.002,
                0.003,
                0.003,
                40.001
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 1.2",
                "2 <- 1.2",
                "3 <- 1.9",
                "4 <- 1.0",
                "5 <- 1.0",
                "6 <- INIT",
                "7 <- 1.9",
                "8 <- INIT",
                "9 <- 1.5"
            ]
        },
        "Step 2": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "10 / 10 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "10 / 10 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "10 / 10 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 + 10 = 22 (left: 10 12 22)",
                "10 / 10 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0) ",
                "12 + 10 = 22 (left: 10 12 22)",
                "12 / 12 = 1 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)"
            ],
            "Evaluation": [
                40.0,
                0.003,
                0.003,
                0.003,
                0.002,
                0.0,
                0.003,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.9",
                "2 <- 1.2",
                "3 <- 0.3",
                "4 <- 1.9",
                "5 <- 2.0",
                "6 <- 1.2",
                "7 <- 1.0",
                "8 <- 1.9",
                "9 <- 0.1"
            ]
        },
        "Step 3": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "10 / 10 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 / 10 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 12 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "10 / 10 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 / 10 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (10 / 10) * (12 + 12) = 24",
                "10 / 10 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "10 / 10 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1) ",
                "10 / 10 = 1 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12)"
            ]
        },
        "Input": "10 10 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "44": {
        "puzzle": "1 8 8 8",
        "Step 0": {
            "steps": [
                "8 * 1 = 8 (left: 8 8 8)",
                "8 / 1 = 8 (left: 8 8 8)",
                "8 - 1 = 7 (left: 7 8 8)",
                "8 - 1 = 7 (left: 1 7 8)",
                "8 - 1 = 7 (left: 7 8 8)",
                "8 - 1 = 7 (left: 1 7 8)",
                "1 * 8 = 8 (left: 8 8 8)",
                "8 - 1 = 7 (left: 7 8 8)",
                "8 / 1 = 8 (left: 1 8 ",
                "8 - 1 = 7 (left: 7 8 8)"
            ],
            "Evaluation": [
                40.001,
                60.0,
                2.001,
                2.001,
                2.001,
                1.002,
                1.002,
                2.001,
                60.0,
                2.001
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 0.1",
                "2 <- 0.0",
                "3 <- 0.0",
                "4 <- 0.1",
                "5 <- INIT",
                "6 <- 0.9",
                "7 <- INIT",
                "8 <- 0.0",
                "9 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "8 / 1 = 8 (left: 1 8  || 1 * 8 = 8 (left: 8)",
                "8 / 1 = 8 (left: 8 8 8) || 8 - 8 = 0 (left: 0 8)",
                "8 * 1 = 8 (left: 8 8 8) || 8 - 8 = 0 (left: 0 8)",
                "8 * 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1)",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 16 = 24 (left: 24)",
                "8 / 1 = 8 (left: 8 8 8)",
                "8 - 1 = 7 (left: 7 8 8) || 8 / 7 = 1.1428571428571428 (left: 1.1428571428571428 8)",
                "8 - 1 = 7 (left: 7 8 8)",
                "8 * 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8)",
                "8 / 1 = 8 (left: 8 8 8) || 8 - 8 = 0 (left: 0 8)"
            ],
            "Evaluation": [
                0.001,
                20.0,
                0.001,
                0.003,
                60.0,
                2.001,
                0.001,
                2.001,
                20.002,
                40.0
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 1.8",
                "2 <- 0.8",
                "3 <- 1.1",
                "4 <- 1.4",
                "5 <- 0.8",
                "6 <- 1.4",
                "7 <- 0.8",
                "8 <- INIT",
                "9 <- 0.8"
            ]
        },
        "Step 2": {
            "steps": [
                "8 * 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 * 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 8  || 8 / 1 = 8 (left: 8 8)",
                "8 / 1 = 8 (left: 8 8 8) || 8 - 8 = 0 (left: 0 8) || 0 * 8 = 0 (left: 8)",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 16 = 24 (left: 24) || Answer: 8 / (8 / 1) + 8 = 24",
                "8 / 1 = 8 (left: 1 8  || 1 * 8 = 8 (left: 8)",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 16 = 24 (left: 24) || Answer: (8 / 1) + 8 = 24",
                "8 / 1 = 8 (left: 1 8  || 1 * 8 = 8 (left: 8)",
                "8 - 1 = 7 (left: 7 8 8)",
                "8 / 1 = 8 (left: 1 8  || 8 / 1 = 8 (left: 8 8)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.003,
                60.0,
                0.002,
                40.001,
                0.002,
                2.001,
                1.002
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 2.4",
                "2 <- 0.0",
                "3 <- 2.6",
                "4 <- 1.8",
                "5 <- 2.4",
                "6 <- 2.6",
                "7 <- 1.4",
                "8 <- 2.6",
                "9 <- 1.4"
            ]
        },
        "Step 3": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8) || 8 - 8 = 0 (left: 0 8) || 8 / 0 = undefined (cannot divide by zero)",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 16 = 24 (left: 24) || Answer: 8 / (8 / 1) + 8 = 24 || Input: 3 3 5 7\nSteps:\n3 + 5 = 8 (left: 3 7 8)\n8 - 3 = 5 (left: 5 7)\n5 * 7 = 35 (left: 35)\nAnswer: (3 + 5) * (7 - 3) = 24",
                "8 * 1 = 8 (left: 8 8 8) || 8 - 0 = 8 (left: 8)",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 16 = 24 (left: 24) || Answer: (8 / 1) + 8 = 24 || Overall, there are multiple ways to obtain 24 using the given numbers and basic arithmetic operations. The examples provided above showcase different combinations that yield the desired result.",
                "8 * 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 16 = 24 (left: 24) || Answer: 8 / (8 / 1) + 8 = 24 || Input: 3 3 6 7\nSteps:\n3 * 7 = 21 (left: 3 6 21)\n3 + 6 = 9 (left: 9 21)\n9 + 21 = 30 (left: 30)\nAnswer: (3 * 7) + (3 + 6) = 24",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 16 = 24 (left: 24) || Answer: (8 / 1) + 8 = 24 || Input: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: ((3 * 3) - 3) * 8 = 24",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 16 = 24 (left: 24) || Answer: (8 / 1) + 8 + 8 = 24",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 16 = 24 (left: 24) || Answer: (8 / 1) + 8 = 24 || Input: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) * (8 - 6) = 24",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 16 = 24 (left: 24) || Answer: 8 + (8 * 8 / 1) = 24"
            ]
        },
        "Input": "1 8 8 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "45": {
        "puzzle": "2 2 3 8",
        "Step 0": {
            "steps": [
                "2 / 2 = 1 (left: 1 3 8)",
                "2 * 2 = 4 (left: 4 3 8)",
                "3 + 2 = 5 (left: 2 5 8)",
                "8 - 3 = 5 (left: 2 5 5)",
                "2 * 3 = 6 (left: 6 2 8)",
                "3 + 2 = 5 (left: 2 5 8)",
                "3 + 2 = 5 (left: 2 5 8)",
                "3 + 2 = 5 (left: 2 5 8)",
                "8 - 2 = 6 (left: 3 6 ",
                "2 ^ 2 = 4 (left: 4 3 8)"
            ],
            "Evaluation": [
                40.001,
                3.0,
                3.0,
                1.002,
                1.002,
                22.0,
                2.001,
                3.0,
                2.001,
                3.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.0",
                "2 <- 0.0",
                "3 <- 0.0",
                "4 <- 0.0",
                "5 <- 0.1",
                "6 <- 0.5",
                "7 <- 0.0",
                "8 <- 0.4",
                "9 <- 0.7"
            ]
        },
        "Step 1": {
            "steps": [
                "2 / 2 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24)",
                "2 / 2 = 1 (left: 1 3 8) || 3 - 1 = 2 (left: 2 8)",
                "2 / 2 = 1 (left: 1 3 8) || 3 - 1 = 2 (left: 2 8)",
                "2 / 2 = 1 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8)",
                "2 / 2 = 1 (left: 1 3 8) || 8 / 3 = 2 (left: 1 2)",
                "2 * 2 = 4 (left: 4 3 8) || Input: 5 2 9",
                "3 + 2 = 5 (left: 2 5 8) || 8 - 2 = 6 (left: 6 5)",
                "2 / 2 = 1 (left: 1 3 8) || 8 * 1 = 8 (left: 3 8)",
                "2 * 3 = 6 (left: 6 2 8) || 6 / 2 = 3 (left: 3 8)",
                "3 + 2 = 5 (left: 2 5 8) || 8 / 2 = 4 (left: 4 8)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                60.0,
                20.0,
                0.003,
                0.002,
                60.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.7",
                "2 <- 1.8",
                "3 <- 1.8",
                "4 <- 1.7",
                "5 <- 1.4",
                "6 <- INIT",
                "7 <- 0.0",
                "8 <- 0.0",
                "9 <- 1.7"
            ]
        },
        "Step 2": {
            "steps": [
                "2 / 2 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "2 / 2 = 1 (left: 1 3 8) || 8 * 1 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "2 * 3 = 6 (left: 6 2 8) || 6 / 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "2 * 3 = 6 (left: 6 2 8) || 6 / 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "2 / 2 = 1 (left: 1 3 8) || 8 * 1 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "2 / 2 = 1 (left: 1 3 8) || 8 / 3 = 2 (left: 1 2) || 2 / 1 = 2 (left: 2)",
                "2 / 2 = 1 (left: 1 2 3)",
                "2 / 2 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: ",
                "2 / 2 = 1 (left: 1 3 8) || 8 - 1 = 7 (left: 7 8)",
                "2 / 2 = 1 (left: 1 3 8) || 8 * 1 = 8 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)"
            ],
            "Evaluation": [
                60.0,
                0.001,
                0.001,
                60.0,
                0.002,
                0.0,
                0.003,
                0.0,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.3",
                "2 <- 2.0",
                "3 <- 2.3",
                "4 <- 1.7",
                "5 <- 2.3",
                "6 <- 1.0",
                "7 <- 1.7",
                "8 <- 1.3",
                "9 <- 1.0"
            ]
        },
        "Step 3": {
            "steps": [
                "2 / 2 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: ((2 / 2) * 3) * 8 = 24",
                "2 * 3 = 6 (left: 6 2 8) || 6 / 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: ((2 * 3) / 2) * 8 = 24",
                "2 / 2 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (2 / 2) * (3 * 8) = 24",
                "2 * 3 = 6 (left: 6 2 8) || 6 / 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (2 * 3) * (8 / 2) = 24",
                "2 / 2 = 1 (left: 1 3 8) || 8 * 1 = 8 (left: 3 8) || 5 + 10 = 15 (left: 15)",
                "2 * 3 = 6 (left: 6 2 8) || 6 / 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (2 * 3) * (8 / 2) = 24",
                "2 / 2 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "2 / 2 = 1 (left: 1 3 8) || 8 * 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "2 / 2 = 1 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || Input: 3 8 11",
                "2 / 2 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)"
            ]
        },
        "Input": "2 2 3 8",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "46": {
        "puzzle": "2 9 9 12",
        "Step 0": {
            "steps": [
                "12 - 9 = 3 (left: 2 3 9)",
                "9 / 2 = 4.5 (left: 4.5 9 12)",
                "12 - 2 = 10 (left: 9 10 12)",
                "2 * 9 = 18 (left: 9 18 12)",
                "12 - 2 = 10 (left: 9 10 12)",
                "9 - 2 = 7 (left: 7 9 12)",
                "9 - 2 = 7 (left: 7 9 12)",
                "12 - 9 = 3 (left: 2 3 12)",
                "12 - 9 = 3 (left: 2 3 12)",
                "12 - 2 = 10 (left: 9 10 12)"
            ],
            "Evaluation": [
                0.003,
                3.0,
                2.001,
                2.001,
                3.0,
                21.001,
                3.0,
                1.002,
                2.001,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.9",
                "3 <- INIT",
                "4 <- 0.5",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 0.9"
            ]
        },
        "Step 1": {
            "steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12)",
                "2 * 9 = 18 (left: 9 12 18)",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90)",
                "12 - 2 = 10 (left: 9 10 12)",
                "9 - 2 = 7 (left: 7 9 12) || 7 * 9 = 63 (left: 63 12)",
                "12 - 2 = 10 (left: 9 10 12)",
                "12 - 2 = 10 (left: 9 10 12)",
                "9 + 2 = 11",
                "12 - 9 = 3 (left: 2 9 3)",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90)"
            ],
            "Evaluation": [
                2.001,
                3.0,
                0.002,
                3.0,
                2.001,
                2.001,
                2.001,
                0.003,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.4",
                "2 <- 1.3",
                "3 <- INIT",
                "4 <- 0.5",
                "5 <- 0.1",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 1.8"
            ]
        },
        "Step 2": {
            "steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12)",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90)",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90)",
                "12 - 2 = 10 (left: 9 10 12)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12) || 4.5 * 9 = 40.5 (left: 40.5 12)",
                "12 - 2 = 10 (left: 9 10 12)",
                "12 - 9 = 3 (left: ",
                "12 - 2 = 10 (left: 9 10 12)",
                "12 - 9 = 3 (left: 2 9 3) || 2 + 2 = 4 (left: 2 4)"
            ],
            "Evaluation": [
                2.001,
                20.002,
                20.002,
                1.002,
                60.0,
                0.0,
                2.001,
                0.0,
                3.0,
                2.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.6",
                "2 <- 2.1",
                "3 <- 2.1",
                "4 <- 2.4",
                "5 <- 0.5",
                "6 <- 2.1",
                "7 <- 2.1",
                "8 <- 2.4",
                "9 <- 2.4"
            ]
        },
        "Step 3": {
            "steps": [
                "9 - 2 = 7 (left: 7 9 12)",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90)",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90) || 90 - 12 = 78 (left: 78)",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90) || 90 / 12 = 7.5 (left: 7.5 90)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12)",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90) || 12 * 90 = 1080 (left: 1080)",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90) || 90 / 12 = 7.5 (left: 7.5)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)"
            ],
            "Evaluation": [
                3.0,
                20.002,
                0.002,
                0.001,
                60.0,
                60.0,
                0.003,
                0.001,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 3.4",
                "2 <- 3.4",
                "3 <- 3.1",
                "4 <- 3.4",
                "5 <- 3.8",
                "6 <- 3.8",
                "7 <- 2.2",
                "8 <- 0.5",
                "9 <- 2.4"
            ]
        },
        "Step 4": {
            "steps": [
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: ((9 - 2) - (9 - 7)) * 12 = 24",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90) || 90 / 12 = 7.5 (left: 7.5)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90) || 12 * 90 = 1080 (left: 1080)",
                "9 - 2 = 7 (left: 7 9 12) || 7 * 9 = 63 (left: 63 12)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                20.002,
                0.002,
                0.003,
                0.003,
                20.002,
                0.003,
                1.002,
                0.002
            ],
            "Resampling": [
                "0 <- 4.6",
                "1 <- 3.8",
                "2 <- 2.4",
                "3 <- 3.8",
                "4 <- 4.1",
                "5 <- 4.2",
                "6 <- 3.8",
                "7 <- 4.1",
                "8 <- 4.6",
                "9 <- 2.4"
            ]
        },
        "Step 5": {
            "steps": [
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24 || Input: 3 3 8 9\nSteps:\n3 * 8 = 24 (left: 3 9 24)\n9 - 3 = 6 (left: 6 24)\n6 * 4 = 24 (left: 24)\nAnswer: (3 * 8) * (9 - 3) = 24",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 12 + 2 = 14 (left: 14)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) = 24",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: ((9 - 2) - (9 - 7)) * 12 = 24 || Input: 3 3 5 7\nSteps:\n3 + 5 = 8 (left: 3 7 8)\n8 - 7 = 1 (left: 3 1)\n3 * 1 = 3 (left: 3)\n3 * 8 = 24 (left: 24)\nAnswer: (3 * (3 + 5)) * 7 = 24",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24 || Input: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n1 * 9 = 9 (left: 9)\n9 * 9 = 81 (left: 81)\n81 / 3 = 27 (left: 27)\n27 - 8 = 19 (left: 19)\n19 + ",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: ((9 - 2) - (9 - 7)) * 12 = 24 || Input: 3 3 4 6\nSteps:\n3 * 4 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nAnswer: (3 * 4) * (6 - 3) = 24",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24 || Input: 3 3 4 7\nSteps:\n3 * 4 = 12 (left: 3 7 12)\n7 - 3 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (3 * 4) * (7 - 3) = 24",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.002,
                0.003,
                60.0,
                60.0,
                0.003,
                60.0,
                60.0,
                0.001
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 5.5",
                "2 <- 3.4",
                "3 <- 4.1",
                "4 <- 3.1",
                "5 <- 5.5",
                "6 <- 3.0",
                "7 <- 3.8",
                "8 <- 3.8",
                "9 <- 5.0"
            ]
        },
        "Step 6": {
            "steps": [
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24 || Input: 3 3 8 9\nSteps:\n3 * 8 = 24 (left: 3 9 24)\n9 - 3 = 6 (left: 6 24)\n6 * 4 = 24 (left: 24)\nAnswer: (3 * 8) * (9 - 3) = 24 || Input: 6 6 6 6\nSteps:\n6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 6 36)\n36 - 12 = 24 (left: 24)\nAnswer: (6 + 6) * (6 + 6) = 24",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24 || Input: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n1 * 9 = 9 (left: 9)\n9 * 9 = 81 (left: 81)\n81 / 3 = 27 (left: 27)\n27 - 8 = 19 (left: 19)\n19 +  || 8 = 27 (left: 19 27)\n27 - 19 = 8 (left: 8)\n8 * 3 = 24 (left: 24)\nAnswer: ((3 * 3) - 8) * ((9 - 8) + 8) = 24",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: ((9 - 2) - (9 - 7)) * 12 = 24 || Input: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 9 8 9)\n9 - 8 = 1 (left: 1 9)\n1 * 9 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 - 9 = 18 (left: 18)\n18 / 9 = 2 (left: 2)\n2 * ",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90) || 90 - 12 = 78 (left: 78)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24 || Input: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n1 * 9 = 9 (left: 9)\n9 * 9 = 81 (left: 81)\n81 / 3 = 27 (left: 27)\n27 - 8 = 19 (left: 19)\n19 +  || 8 = 27 (left: 19 27)\n27 - 19 = 8 (left: 8)\n8 * 3 = 24 (left: 24)\nAnswer: ((3 * 3) - 8) * ((9 - 8) * 9) = 24.",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24 || Input: 3 3 8 9\nSteps:\n3 * 8 = 24 (left: 3 9 24)\n9 - 3 = 6 (left: 6 24)\n6 * 4 = 24 (left: 24)\nAnswer: (3 * 8) * (9 - 3) = 24 || Input: 1 4 7 9\nSteps:\n7 - 1 = 6 (left: 4 6 9)\n6 * 4 = 24 (left: 24 9)\nAnswer: (7 - 1) * 4 + 9 = 24"
            ],
            "Evaluation": [
                60.0,
                60.0,
                40.001,
                60.0,
                0.003,
                60.0,
                60.0,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 3.8",
                "2 <- 6.5",
                "3 <- 3.8",
                "4 <- 6.2",
                "5 <- 3.1",
                "6 <- 5.7",
                "7 <- 5.0",
                "8 <- 6.9",
                "9 <- 6.9"
            ]
        },
        "Step 7": {
            "steps": [
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: ((9 - 2) - (9 - 7)) * 12 = 24 || Input: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 9 8 9)\n9 - 8 = 1 (left: 1 9)\n1 * 9 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 - 9 = 18 (left: 18)\n18 / 9 = 2 (left: 2)\n2 *  || (3 * 3) + (8 - 9) = 24",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24 || Input: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n1 * 9 = 9 (left: 9)\n9 * 9 = 81 (left: 81)\n81 / 3 = 27 (left: 27)\n27 - 8 = 19 (left: 19)\n19 +  || 8 = 27 (left: 19 27)\n27 - 19 = 8 (left: 8)\n8 * 3 = 24 (left: 24)\nAnswer: ((3 * 3) - 8) * ((9 - 8) * 9) = 24. || Input: 1 2 3 4\nSteps:\n3 * 4 = 12 (left: 1 2 12)\n2 + 12 = 14 (left: 1 14)\n14 - 1 = 13 (left: 13)\n13 + 1 = 14 (left: 14)\n14 + 2 = 16 (left: 16)\n16 - 4 = 12 (left: 12)\n12 * ",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24 || Input: 3 5 7 8\nSteps:\n7 - 3 = 4 (left: 4 5 8)\n5 + 4 = 9 (left: 9 8)\n9 * 8 = 72 (left: 72)\n72 / 3 = 24 (left: 24)\nAnswer: ((7 - 3) + 5) * 8 / 3 = 24",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90) || 6 + 3 = 9 (left: 9 1)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: ((9 - 2) - (9 - 7)) * 12 = 24 || Input: 3 3 4 6\nSteps:\n3 * 4 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nAnswer: (3 * 4) * (6 - 3) = 24 || Input: 2 3 6 9\nSteps:\n3 * 6 = 18 (left: 2 9 18)\n9 - 2 = 7 (left: 7 18)\n7 - 18 = 11 (left: 11)\n11 + 9 = 20 (left: 20)\n20 + 2 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - ",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24 || Input: 3 3 8 9\nSteps:\n3 * 8 = 24 (left: 3 9 24)\n9 - 3 = 6 (left: 6 24)\n6 * 4 = 24 (left: 24)\nAnswer: (3 * 8) * (9 - 3) = 24 || Input: 6 6 6 6\nSteps:\n6 * 6 = 36 (left: 6 6 36)\n6 - 6 = 0 (left: 0 36)\n36 / 6 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((6 * 6) / 6) * 4 = 24",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24 || Input: 3 3 8 9\nSteps:\n3 * 8 = 24 (left: 3 9 24)\n9 - 3 = 6 (left: 6 24)\n6 * 4 = 24 (left: 24)\nAnswer: (3 * 8) * (9 - 3) = 24 || Input: 1 4 7 9\nSteps:\n7 - 1 = 6 (left: 4 6 9)\n6 * 4 = 24 (left: 24 9)\nAnswer: (7 - 1) * 4 + 9 = 24 || Input: 2 3 4 6\nSteps:\n4 * 6 = 24 (left: 2 3 24)\n3 + 2 = 5 (left: 5 24)\n5 * 24 = 120 (left: 120)\nAnswer: (4 * 6) * (3 + 2) = 24",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24 || Input: 3 3 8 9\nSteps:\n3 * 8 = 24 (left: 3 9 24)\n9 - 3 = 6 (left: 6 24)\n6 * 4 = 24 (left: 24)\nAnswer: (3 * 8) * (9 - 3) = 24 || Input: 1 4 7 9\nSteps:\n7 - 1 = 6 (left: 4 6 9)\n6 * 4 = 24 (left: 24 9)\nAnswer: (7 - 1) * 4 + 9 = 24 || Input: 3 5 7 8\nSteps:\n5 + 7 = 12 (left: 3 8 12)\n12 - 8 = 4 (left: 3 4)\n4 * 3 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: (3 * (5 + 7)) * 8 / 2 = 24"
            ],
            "Evaluation": [
                40.001,
                0.003,
                60.0,
                0.003,
                40.0,
                20.0,
                60.0,
                40.0,
                40.0,
                60.0
            ],
            "Resampling": [
                "0 <- 7.9",
                "1 <- 6.1",
                "2 <- 6.9",
                "3 <- 7.4",
                "4 <- 7.5",
                "5 <- 7.6",
                "6 <- 5.7",
                "7 <- 5.5",
                "8 <- 5.7",
                "9 <- 6.0"
            ]
        },
        "Step 8": {
            "steps": [
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24 || Input: 3 3 8 9\nSteps:\n3 * 8 = 24 (left: 3 9 24)\n9 - 3 = 6 (left: 6 24)\n6 * 4 = 24 (left: 24)\nAnswer: (3 * 8) * (9 - 3) = 24 || Input: 1 4 7 9\nSteps:\n7 - 1 = 6 (left: 4 6 9)\n6 * 4 = 24 (left: 24 9)\nAnswer: (7 - 1) * 4 + 9 = 24 || Input: 3 5 7 8\nSteps:\n5 + 7 = 12 (left: 3 8 12)\n12 - 8 = 4 (left: 3 4)\n4 * 3 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: (3 * (5 + 7)) * 8 / 2 = 24 || Input: 2 3 6 8\nSteps:\n3 * 8 = 24 (left: 2 6 24)\n6 / 2 = 3 (left: 3 24)\nAnswer: 3 * (3 * 8) = 24",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24 || Input: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n1 * 9 = 9 (left: 9)\n9 * 9 = 81 (left: 81)\n81 / 3 = 27 (left: 27)\n27 - 8 = 19 (left: 19)\n19 +  || 8 = 27 (left: 19 27)\n27 - 19 = 8 (left: 8)\n8 * 3 = 24 (left: 24)\nAnswer: ((3 * 3) - 8) * ((9 - 8) + 8) = 24 || Input: 1 5 5 7\nSteps:\n5 + 5 = 10 (left: 1 7 10)\n10 - 7 = 3 (left: 1 3)\n3 * 1 = 3 (left: 3)\n3 * 7 = 21 (left: 21)\n21 + 5 = 26 (left: 26)\n26 - 1 = 25 (left: 25)\n25 - ",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24 || Input: 3 3 8 9\nSteps:\n3 * 8 = 24 (left: 3 9 24)\n9 - 3 = 6 (left: 6 24)\n6 * 4 = 24 (left: 24)\nAnswer: (3 * 8) * (9 - 3) = 24 || Input: 1 4 7 9\nSteps:\n7 - 1 = 6 (left: 4 6 9)\n6 * 4 = 24 (left: 24 9)\nAnswer: (7 - 1) * 4 + 9 = 24 || Input: 2 3 5 6\nSteps:\n5 * 2 = 10 (left: 3 6 10)\n6 - 3 = 3 (left: 3 10)\n3 * 10 = 30 (left: 30)\n30 / 6 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: (((",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24 || Input: 3 5 7 8\nSteps:\n7 - 3 = 4 (left: 4 5 8)\n5 + 4 = 9 (left: 9 8)\n9 * 8 = 72 (left: 72)\n72 / 3 = 24 (left: 24)\nAnswer: ((7 - 3) + 5) * 8 / 3 = 24 || Input: 1 3 4 6\nSteps:\n3 + 4 = 7 (left: 1 6 7)\n7 - 6 = 1 (left: 1 1)\n1 * 1 = 1 (left: 1)\n6 * 4 = 24 (left: 24)\nAnswer: ((3 + 4) - 6) * 1 * 1 = 24",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90) || 6 + 3 = 9 (left: 9 1) || 9 / 1 = 9 (left: 9)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: ((9 - 2) - (9 - 7)) * 12 = 24 || Input: 3 3 4 6\nSteps:\n3 * 4 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nAnswer: (3 * 4) * (6 - 3) = 24 || Input: 2 3 6 9\nSteps:\n3 * 6 = 18 (left: 2 9 18)\n9 - 2 = 7 (left: 7 18)\n7 - 18 = 11 (left: 11)\n11 + 9 = 20 (left: 20)\n20 + 2 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 -  || 3 = 22 (left: 22)\n22 - 6 = 16 (left: 16)\n16 + 9 = 25 (left: 25)\n25 - 25 = 0 (left: 0)\nAnswer: (((((2 * 3) * 6) + 9) - 3) - 6) + 9 = 24",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: ((9 - 2) - (9 - 7)) * 12 = 24 || Input: 3 3 4 6\nSteps:\n3 * 4 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nAnswer: (3 * 4) * (6 - 3) = 24 || Input: 1 3 5 8\nSteps:\n5 - 3 = 2 (left: 1 2 8)\n2 * 8 = 16 (left: 1 16)\n1 * 16 = 16 (left: 16)\nAnswer: (1 * (5 - 3)) * 8 = 24",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24 || Input: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n1 * 9 = 9 (left: 9)\n9 * 9 = 81 (left: 81)\n81 / 3 = 27 (left: 27)\n27 - 8 = 19 (left: 19)\n19 +  || 8 = 27 (left: 19 27)\n27 / 19 = 1.4210526 (left: 1.4210526)\n1.4210526 * 9 = 12.789474 (left: 12.789474)\n12.789474 - 8 = 4.789474 (left: 4.789474)\n4.789474 * 3 = 14.368421 (left: 14.368421)\n",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: ((9 - 2) - (9 - 7)) * 12 = 24 || Input: 3 3 4 6\nSteps:\n3 * 4 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nAnswer: (3 * 4) * (6 - 3) = 24 || Input: 2 3 5 8\nSteps:\n5 + 3 = 8 (left: 2 8 8)\n8 - 2 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (5 + 3) * (8 - 2) = 48",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24 || Input: 3 3 8 9\nSteps:\n3 * 8 = 24 (left: 3 9 24)\n9 - 3 = 6 (left: 6 24)\n6 * 4 = 24 (left: 24)\nAnswer: (3 * 8) * (9 - 3) = 24 || Input: 6 6 6 6\nSteps:\n6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 6 36)\n36 - 12 = 24 (left: 24)\nAnswer: (6 + 6) * (6 + 6) = 24 || Input: 7 7 8 9\nSteps:\n7 + 8 = 15 (left: 7 9 15)\n9 - 7 = 2 (left: 2 15)\n2 * 15 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((7 + 8) - 7) * 9 = 24"
            ],
            "Evaluation": [
                40.0,
                60.0,
                60.0,
                60.0,
                0.001,
                60.0,
                40.0,
                60.0,
                40.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 8.3",
                "2 <- 7.6",
                "3 <- 8.3",
                "4 <- 8.9",
                "5 <- 6.9",
                "6 <- 8.8",
                "7 <- 8.5",
                "8 <- 8.2",
                "9 <- 6.0"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90) || 12 * 90 = 1080 (left: 1080)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24 || Input: 3 5 7 8\nSteps:\n7 - 3 = 4 (left: 4 5 8)\n5 + 4 = 9 (left: 9 8)\n9 * 8 = 72 (left: 72)\n72 / 3 = 24 (left: 24)\nAnswer: ((7 - 3) + 5) * 8 / 3 = 24 || Input: 1 3 4 6\nSteps:\n3 + 4 = 7 (left: 1 6 7)\n7 - 6 = 1 (left: 1 1)\n1 * 1 = 1 (left: 1)\n6 * 4 = 24 (left: 24)\nAnswer: ((3 + 4) - 6) * 1 * 1 = 24 || Input: 2 6 7 8\nSteps:\n6 * 8 = 48 (left: 2 7 48)\n48 / 2 = 24 (left: 7 24)\nAnswer: (6 * 8) / 2 = 24",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: ((9 - 2) - (9 - 7)) * 12 = 24 || Input: 3 3 4 6\nSteps:\n3 * 4 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nAnswer: (3 * 4) * (6 - 3) = 24 || Input: 2 3 6 9\nSteps:\n3 * 6 = 18 (left: 2 9 18)\n9 - 2 = 7 (left: 7 18)\n7 - 18 = 11 (left: 11)\n11 + 9 = 20 (left: 20)\n20 + 2 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 -  || 3 = 22\nAnswer: ((((((2 + 9) - (6 * 3)) + 9) + 2) + 3) - 3) = 24",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24 || Input: 3 5 7 8\nSteps:\n7 - 3 = 4 (left: 4 5 8)\n5 + 4 = 9 (left: 9 8)\n9 * 8 = 72 (left: 72)\n72 / 3 = 24 (left: 24)\nAnswer: ((7 - 3) + 5) * 8 / 3 = 24 || Input: 1 3 4 6\nSteps:\n3 + 4 = 7 (left: 1 6 7)\n7 - 6 = 1 (left: 1 1)\n1 * 1 = 1 (left: 1)\n6 * 4 = 24 (left: 24)\nAnswer: ((3 + 4) - 6) * 1 * 1 = 24 || Input: 2 3 5 6\nSteps:\n2 * 5 = 10 (left: 3 6 10)\n10 - 6 = 4 (left: 3 4)\n4 * 3 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((2 * 5) - 6) * 3 * 2 = 24",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24 || Input: 3 3 8 9\nSteps:\n3 * 8 = 24 (left: 3 9 24)\n9 - 3 = 6 (left: 6 24)\n6 * 4 = 24 (left: 24)\nAnswer: (3 * 8) * (9 - 3) = 24 || Input: 6 6 6 6\nSteps:\n6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 6 36)\n36 - 12 = 24 (left: 24)\nAnswer: (6 + 6) * (6 + 6) = 24 || Input: 7 7 8 9\nSteps:\n7 + 8 = 15 (left: 7 9 15)\n9 - 7 = 2 (left: 2 15)\n2 * 15 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((7 + 8) - 7) * 9 = 24 || Input: 5 6 7 8\nSteps:\n5 * 6 = 30 (left: 7 8 30)\n30 - 7 = 23 (left: 23 8)\n23 - 8 = 15 (left: 15)\n15 + 9 = 24 (left: 24)\nAnswer: ((5 * 6) - 7) + 8 + 9 = 24",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24 || Input: 3 3 8 9\nSteps:\n3 * 8 = 24 (left: 3 9 24)\n9 - 3 = 6 (left: 6 24)\n6 * 4 = 24 (left: 24)\nAnswer: (3 * 8) * (9 - 3) = 24 || Input: 1 4 7 9\nSteps:\n7 - 1 = 6 (left: 4 6 9)\n6 * 4 = 24 (left: 24 9)\nAnswer: (7 - 1) * 4 + 9 = 24 || Input: 2 3 4 4\nSteps:\n3 + 4 = 7 (left: 2 4 7)\n7 * 4 = 28 (left: 2 28)\n28 - 2 = 26 (left: 26)\nAnswer: (3 + 4) * (4 + 2) = 24",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: ((9 - 2) - (9 - 7)) * 12 = 24 || Input: 3 3 4 6\nSteps:\n3 * 4 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nAnswer: (3 * 4) * (6 - 3) = 24 || Input: 2 3 5 8\nSteps:\n5 + 3 = 8 (left: 2 8 8)\n8 - 2 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (5 + 3) * (8 - 2) = 48 || There is no way to obtain 24 using the numbers 2, 3, 5, and 8.",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: ((9 - 2) - (9 - 7)) * 12 = 24 || Input: 3 3 4 6\nSteps:\n3 * 4 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nAnswer: (3 * 4) * (6 - 3) = 24 || Input: 2 3 6 9\nSteps:\n3 * 6 = 18 (left: 2 9 18)\n9 - 2 = 7 (left: 7 18)\n7 - 18 = 11 (left: 11)\n11 + 9 = 20 (left: 20)\n20 + 2 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 -  || 3 = 22 (left: 22)\n22 - 6 = 16 (left: 16)\n16 + 9 = 25 (left: 25)\n25 - 25 = 0 (left: 0)\nAnswer: (((((2 * 3) * 6) + 9) - 3) - 6) + 9 = 24 || Sorry, it seems that it is not possible to obtain 24 using the numbers 2, 3, 6, and 9 with the given restrictions.",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24 || Input: 3 3 8 9\nSteps:\n3 * 8 = 24 (left: 3 9 24)\n9 - 3 = 6 (left: 6 24)\n6 * 4 = 24 (left: 24)\nAnswer: (3 * 8) * (9 - 3) = 24 || Input: 1 4 7 9\nSteps:\n7 - 1 = 6 (left: 4 6 9)\n6 * 4 = 24 (left: 24 9)\nAnswer: (7 - 1) * 4 + 9 = 24 || Input: 2 3 5 6\nSteps:\n5 * 2 = 10 (left: 3 6 10)\n6 - 3 = 3 (left: 3 10)\n3 * 10 = 30 (left: 30)\n30 / 6 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: ((( || 5 * 2) - (6 - 3)) * 10) - 1 = 24",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24 || Input: 3 3 8 9\nSteps:\n3 * 8 = 24 (left: 3 9 24)\n9 - 3 = 6 (left: 6 24)\n6 * 4 = 24 (left: 24)\nAnswer: (3 * 8) * (9 - 3) = 24 || Input: 6 6 6 6\nSteps:\n6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 6 36)\n36 - 12 = 24 (left: 24)\nAnswer: (6 + 6) * (6 + 6) = 24 || Input: 3 5 7 8\nSteps:\n7 - 3 = 4 (left: 4 5 8)\n4 + 5 = 9 (left: 9 8)\n9 * 8 = 72 (left: 72)\n72 / 3 = 24 (left: 24)\nAnswer: ((7 - 3) + 5) * 8 / 3 = 24"
            ]
        },
        "Input": "2 9 9 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "47": {
        "puzzle": "11 11 11 12",
        "Step 0": {
            "steps": [
                "12 - 11 = 1 (left: 11 11 1)",
                "11 + 11 = 22 (left: 11 22 12)",
                "11 / 11 = 1 (left: 1 11 12)",
                "11 * 11 = 121 (left: 121 11 12)",
                "12 - 11 = 1 (left: 11 11 1)",
                "11 + 11 = 22 (left: 22 11 12)",
                "11 + 11 = 22 (left: 11 22 1)",
                "12 - 11 = 1 (left: 11 11 1)",
                "12 - 11 = 1 (left: 11 11 1)",
                "11 / 11 = 1 (left: 1 11 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                1.002,
                1.002,
                0.002,
                0.003,
                1.001,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.2",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 11 = 1 (left: 11 11 1) || 11 * 11 = 121 (left: 1 121)",
                "12 - 11 = 1 (left: 11 1 1)",
                "11 - 11 = 0 (left: 0 11 12)",
                "12 + 11 = 23 (left: 11 11 23)",
                "11 / 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 / 11 = 1.0909 (left: 11 11 1.0909)",
                "12 - 11 = 1 (left: 11 11 1)",
                "11 / 11 = 1 (left: 1 11 ",
                "12 - 11 = 1 (left: 11 11 1)",
                "11 / 11 = 1 (left: 1 11 12)"
            ],
            "Evaluation": [
                20.002,
                1.001,
                1.001,
                1.002,
                0.003,
                3.0,
                1.002,
                40.0,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 1.3",
                "2 <- 1.7",
                "3 <- INIT",
                "4 <- 1.7",
                "5 <- 0.2",
                "6 <- 0.2",
                "7 <- 1.0",
                "8 <- 1.0",
                "9 <- 1.7"
            ]
        },
        "Step 2": {
            "steps": [
                "11 / 11 = 1 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "12 + 11 = 23 (left: 11 11 23) || 11 / 11 = 1 (left: 1 11 23)",
                "11 / 11 = 1 (left: 1 11  || 11 * 1 = 11 (left: 11)",
                "12 - 11 = 1 (left: 11 11 1)",
                "11 / 11 = 1 (left: 1 11  || 11 * 1 = 11 (left: 11)",
                "11 / 11 = 1 (left: 1 11 12) || 12 - 1 = 11 (left: 11 12)",
                "11 / 11 = 1 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "12 - 11 = 1 (left: 11 11 1) || 11 * 11 = 121 (left: 1 121) || 121 - 1 = 120 (left: 120)",
                "12 - 11 = 1 (left: 11 11 1) || 11 * 11 = 121 (left: 1 121) || 121 - 121 = 0 (left: 0)",
                "11 / 11 = 1 (left: 1 11  || 3 + 5 = 8 (left: 7)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                0.002,
                0.003,
                0.002,
                0.003,
                0.002,
                0.002,
                20.001,
                0.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.7",
                "2 <- INIT",
                "3 <- 1.7",
                "4 <- 1.0",
                "5 <- 1.5",
                "6 <- 2.8",
                "7 <- 0.2",
                "8 <- 1.5",
                "9 <- 0.2"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 11 = 1 (left: 11 11 1) || 11 * 11 = 121 (left: 1 121) || 1 * 121 = 121 (left: 121)",
                "11 / 11 = 1 (left: 1 11  || 1 * 11 = 11 (left: 11)",
                "11 * 11 = 121 (left: 121 11 12)",
                "11 / 11 = 1 (left: 1 11  || 11 / 1 = 11 (left: 11)",
                "12 - 11 = 1 (left: 11 11 1) || 11 * 11 = 121 (left: 1 121) || 121 / 1 = 121 (left: 121)",
                "12 / 11 = 1.0909 (left: 11 11 1.0909) || 11 * 11 = 121 (left: 121 1.0909)",
                "12 - 11 = 1 (left: 11 11 1) || 11 * 11 = 121 (left: 1 121) || 121 - 121 = 0 (left: 0) || There are no possible next steps as there are no numbers provided to perform operations on.",
                "11 / 11 = 1 (left: 1 11 12) || 12 / 1 = 12 (left: 12 12)",
                "12 / 11 = 1.0909 (left: 11 11 1.0909) || 11 / 11 = 1 (left: 1 11 1.0909)",
                "11 / 11 = 1 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.001,
                0.003,
                21.0,
                0.003,
                60.0,
                22.0,
                0.001
            ],
            "Resampling": [
                "0 <- 3.5",
                "1 <- 3.8",
                "2 <- 3.7",
                "3 <- 1.7",
                "4 <- 3.5",
                "5 <- 1.7",
                "6 <- 3.7",
                "7 <- 3.7",
                "8 <- 3.7",
                "9 <- 3.7"
            ]
        },
        "Step 4": {
            "steps": [
                "12 / 11 = 1.0909 (left: 11 11 1.0909) || 11 * 11 = 121 (left: 121 1.0909) || 121 - 1.0909 = 119.9091 (left: 1.0909 119.9091)",
                "12 / 11 = 1.0909 (left: 11 11 1.0909) || 11 / 11 = 1 (left: 1 11 1.0909) || 11 / 1 = 11 (left: 1.0909 11)",
                "11 / 11 = 1 (left: 1 11 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "11 / 11 = 1 (left: 1 11  || 11 / 1 = 11 (left: 11) ",
                "12 / 11 = 1.0909 (left: 11 11 1.0909) || 11 * 11 = 121 (left: 121 1.0909) || 121 / 1.0909 = 110.9091 (left: 1.",
                "11 / 11 = 1 (left: 1 11  || 11 / 1 = 11 (left: 11)",
                "11 / 11 = 1 (left: 1 11 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 / 11 = 1 (left: 1 11 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 / 11 = 1 (left: 1 11 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                21.0,
                1.001,
                0.003,
                0.002,
                0.0,
                0.002,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 1.7",
                "2 <- 0.2",
                "3 <- 2.8",
                "4 <- INIT",
                "5 <- 4.0",
                "6 <- 3.7",
                "7 <- 2.8",
                "8 <- 3.7",
                "9 <- 3.7"
            ]
        },
        "Step 5": {
            "steps": [
                "12 / 11 = 1.0909 (left: 11 11 1.0909) || 11 / 11 = 1 (left: 1 11 1.0909) || 11 / 1 = 11 (left: 1 11 1.0909)",
                "11 / 11 = 1 (left: 1 11  || 1 * 11 = 11 (left: 11)",
                "11 / 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 11 = 1 (left: 11 11 1) || 11 * 11 = 121 (left: 1 121) || 121 - 121 = 0 (left: 0) || There are no possible next steps with the input of 0.",
                "11 * 11 = 121 (left: 121 11 12)",
                "12 / 11 = 1.0909 (left: 11 11 1.0909) || 11 * 11 = 121 (left: 121 1.0909) || 121 - 1.0909 = 119.9091 (left: 1.0909 119.9091) || 119.9091 / 1.0909 = 110 (left: 110)",
                "11 / 11 = 1 (left: 1 11 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 - 11 = 1 (left: 11 11 1) || 11 * 11 = 121 (left: 1 121) || 121 - 121 = 0 (left: 0) || No possible next steps as there is no input provided.",
                "11 / 11 = 1 (left: 1 11 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "11 / 11 = 1 (left: 1 11 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                2.001,
                0.001,
                0.003,
                0.003,
                2.0,
                0.003,
                0.002,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 5.0",
                "2 <- 0.2",
                "3 <- 1.0",
                "4 <- 3.8",
                "5 <- 4.0",
                "6 <- 3.7",
                "7 <- 5.0",
                "8 <- 1.0",
                "9 <- 3.8"
            ]
        },
        "Step 6": {
            "steps": [
                "11 * 11 = 121 (left: 121 11 12) || 11 + 12 = 23 (left: 121 23)",
                "12 / 11 = 1.0909 (left: 11 11 1.0909) || 11 / 11 = 1 (left: 1 11 1.0909) || 11 / 1 = 11 (left: 1 11 1.0909) || 11 / 1 = 11 (left: 1.0909 11)",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 11 11 1) || 11 * 11 = 121 (left: 1 121) || 121 / 1 = 121 (left: 121)",
                "12 / 11 = 1.0909 (left: 11 11 1.0909) || 11 / 11 = 1 (left: 1 11 1.0909) || 11 / 1 = 11 (left: 1.0909 11)",
                "12 / 11 = 1.0909 (left: 11 11 1.0909) || 11 * 11 = 121 (left: 121 1.0909) || 121 - 1.0909 = 119.9091 (left: 1.0909 119.9091) || 119.9091 / 1.0909 = 110 (left: 110)",
                "11 / 11 = 1 (left: 1 11 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 / 11 = 1.0909 (left: 11 11 1.0909) || 11 / 11 = 1 (left: 1 11 1.0909) || 11 / 1 = 11 (left: 1 11 1.0909) || 1 * 1",
                "12 - 11 = 1 (left: 11 11 1) || 11 * 11 = 121 (left: 1 121) || 121 - 1 = 120 (left: 120)",
                "12 / 11 = 1.0909 (left: 11 11 1.0909) || 11 / 11 = 1 (left: 1 11 1.0909) || 11 / 1 = 11 (left: 1.0909 1 11)"
            ],
            "Evaluation": [
                0.001,
                1.001,
                40.001,
                0.003,
                22.0,
                0.003,
                20.001,
                0.003,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 6.9",
                "2 <- 6.2",
                "3 <- 6.2",
                "4 <- 3.5",
                "5 <- 6.4",
                "6 <- 6.4",
                "7 <- 4.0",
                "8 <- 3.7",
                "9 <- 6.4"
            ]
        },
        "Step 7": {
            "steps": [
                "12 / 11 = 1.0909 (left: 11 11 1.0909) || 11 / 11 = 1 (left: 1 11 1.0909) || 11 - 1 = 10 (left: 1 10 1.0909)",
                "12 / 11 = 1.0909 (left: 11 11 1.0909) || 11 / 11 = 1 (left: 1 11 1.0909) || 11 / 1 = 11 (left: 1.0909 1 11) || 11 / 1 = 11 (left: 11 1)",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 / 11 = 1.0909 (left: 11 11 1.0909) || 11 * 11 = 121 (left: 121 1.0909) || 121 / 1.0909 = 111.1111 (left: 1.0909",
                "12 / 11 = 1.0909 (left: 11 11 1.0909) || 11 / 11 = 1 (left: 1 11 1.0909) || 11 / 1 = 11 (left: 1.0909 11) || 11 / 1.0909 = 10.0552 (left: 10.0552)",
                "12 / 11 = 1.0909 (left: 11 11 1.0909) || 11 / 11 = 1 (left: 1 11 1.0909) || 11 / 1 = 11 (left: 1.0909 11) || 1.0909 * 11 = 12 (left: 12)",
                "12 / 11 = 1.0909 (left: 11 11 1.0909) || 11 * 11 = 121 (left: 121 1.0909) || 121 - 1.0909 = 119.9091 (left: 1.0909 119.9091) || 119.9091 - 1.0909 = 118.8182 (left: 118.8182)",
                "11 / 11 = 1 (left: 1 11 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 / 11 = 1.0909 (left: 11 11 1.0909) || 11 / 11 = 1 (left: 1 11 1.0909) || 11 / 1 = 11 (left: 1.0909 11) || 1.0909 * 11 = 12 (left: 12)"
            ],
            "Evaluation": [
                3.0,
                0.001,
                20.001,
                0.001,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 7.2",
                "2 <- 7.2",
                "3 <- 4.0",
                "4 <- 3.5",
                "5 <- 6.6",
                "6 <- 3.7",
                "7 <- 3.7",
                "8 <- 3.7",
                "9 <- 4.0"
            ]
        },
        "Step 8": {
            "steps": [
                "11 / 11 = 1 (left: 1 11  || 11 - 1 = 10 (left: 10) ",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144) || 144 / 16 = 9 (left",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144) || There is only one number, so there are no possible next steps.",
                "12 / 11 = 1.0909 (left: 11 11 1.0909) || 11 * 11 = 121 (left: 121 1.0909) || 121 - 1.0909 = 119.9091 (left: 1.0909 119.9091) || 1.0909 - 119.9091 = -118.8182 (left: -118.8182 119.9091)",
                "12 / 11 = 1.0909 (left: 11 11 1.0909) || 11 * 11 = 121 (left: 121 1.0909) || 121 * 1.0909 = 131.9999 (left: 1.",
                "11 / 11 = 1 (left: 1 11 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0) || No possible next steps.",
                "11 / 11 = 1 (left: 1 11 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "11 / 11 = 1 (left: 1 11 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 / 11 = 1 (left: 1 11 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 11 = 1.0909 (left: 11 11 1.0909) || 11 * 11 = 121 (left: 121 1.0909) || 121 - 1.0909 = 119.9091 (left: 1.0909 119.9091) || 119.9091 / 1.0909 = 110 (left: 1.0909 110)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.0,
                20.0,
                0.003,
                20.002,
                0.002,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 3.7",
                "2 <- 7.0",
                "3 <- 3.7",
                "4 <- 3.7",
                "5 <- 8.4",
                "6 <- 3.5",
                "7 <- 6.9",
                "8 <- 6.4",
                "9 <- 8.4"
            ]
        },
        "Step 9": {
            "steps": [
                "12 / 11 = 1.0909 (left: 11 11 1.0909) || 11 / 11 = 1 (left: 1 11 1.0909) || 11 / 1 = 11 (left: 1.0909 11) || 11 - 1.0909 = 9.9091 (left: 9.9091)",
                "11 / 11 = 1 (left: 1 11 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 11 = 1.0909 (left: 11 11 1.0909) || 11 / 11 = 1 (left: 1 11 1.0909) || 11 - 1 = 10 (left: 1 10 1.0909) || 10 / 1 = 10 (left: 1 10 1.0909)",
                "11 / 11 = 1 (left: 1 11 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 / 11 = 1 (left: 1 11 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 / 11 = 1.0909 (left: 11 11 1.0909) || 11 * 11 = 121 (left: 121 1.0909) || 121 * 1.0909 = 131.9999 (left: 1. || There are no possible next steps with just one number provided. More numbers are needed to perform operations.",
                "12 / 11 = 1.0909 (left: 11 11 1.0909) || 11 * 11 = 121 (left: 121 1.0909) || 121 * 1.0909 = 131.9949 (left: 1.0909)",
                "12 / 11 = 1.0909 (left: 11 11 1.0909) || 11 / 11 = 1 (left: 1 11 1.0909) || 11 / 1 = 11 (left: 1.0909 1 11) || 11 - 1.0909 = 9.9091 (left: 1.0909 9.9091)",
                "12 / 11 = 1.0909 (left: 11 11 1.0909) || 11 / 11 = 1 (left: 1 11 1.0909) || 11 / 1 = 11 (left: 1.0909 11) || 11 / 1.0909 = 10.0556 (left: 10.0556)",
                "12 / 11 = 1.0909 (left: 11 11 1.0909) || 11 * 11 = 121 (left: 121 1.0909) || 121 * 1.0909 = 131.9999 (left: 1. || There are no possible next steps with just the number 1."
            ]
        },
        "Input": "11 11 11 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "48": {
        "puzzle": "3 8 13 13",
        "Step 0": {
            "steps": [
                "13 + 3 = 16 (left: 8 13 16)",
                "8 - 3 = 5 (left: 5 8 13)",
                "3 * 8 = 24 (left: 24 13 13)",
                "3 * 8 = 24 (left: 13 13 24)",
                "13 + 3 = 16 (left: 8 13 16)",
                "3 * 8 = 24 (left: 13 13 24)",
                "3 * 8 = 24 (left: 24 13 13)",
                "13 + 3 = 16 (left: 8 13 16)",
                "13 - 8 = 5 (left: 3 5 ",
                "13 + 3 = 16 (left: 8 13 16)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                1.002,
                1.002,
                2.001,
                2.001,
                1.002,
                1.002,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.3",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 0.9",
                "8 <- INIT",
                "9 <- 0.9"
            ]
        },
        "Step 1": {
            "steps": [
                "8 / 3 = 2.6666666666666665 (left: 2.6666666666666665 8 13)",
                "3 * 8 = 24 (left: 13 13 24) || 13 / 13 = 1 (left: 1 13 24)",
                "3 * 8 = 24 (left: 13 13 24)",
                "13 - 3 = 10 (left: 8 10 13)",
                "3 * 8 = 24 (left: 13 13 24)",
                "3 * 8 = 24 (left: 24 13 13)",
                "13 + 3 = 16 (left: 8 13 16)",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3)",
                "13 + 3 = 16 (left: 8 13 16)",
                "13 + 3 = 16 (left: 8 13 16) || 8 * 13 = 104 (left: 16 104)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                1.002,
                1.002,
                1.002,
                0.003,
                1.001,
                60.0,
                1.001,
                1.001
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 1.7",
                "2 <- 1.6",
                "3 <- 1.7",
                "4 <- 1.6",
                "5 <- 1.9",
                "6 <- 0.9",
                "7 <- 1.8",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 - 3 = 5 (left: 5)",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 / 3 = 2.66667 (left: 2.66667)",
                "13 + 3 = 16 (left: 8 13 16) || 8 * 13 = 104 (left: 104 16)",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24)",
                "13 + 3 = 16 (left: 8 13 16) || 8 * 13 = 104 (left: 104 16)",
                "13 + 3 = 16 (left: 8 13 16) || 8 * 13 = 104 (left: 16 104) || 104 / 16 = 6.5 (left: 16 6.5)",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 8 = 8 (left: 8 16)",
                "13 + 3 = 16 (left: 8 13 16) || 16 / 8 = 2 (left: 2 16)",
                "13 + 3 = 16 (left: 8 13 16)",
                "3 * 8 = 24 (left: 13 13 24)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.0,
                60.0,
                0.002,
                1.0,
                40.001,
                0.003,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 0.9",
                "2 <- 1.7",
                "3 <- INIT",
                "4 <- 2.3",
                "5 <- 0.9",
                "6 <- 2.6",
                "7 <- 1.7",
                "8 <- 1.7",
                "9 <- 1.7"
            ]
        },
        "Step 3": {
            "steps": [
                "13 + 3 = 16 (left: 8 13 16) || 16 - 8 = 8 (left: 8 16) || 8 * 2 = 16 (left: 16)",
                "13 + 3 = 16 (left: 8 13 16) || 13 / 8 = 1.625 (left: 1.625 16)",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 / 3 = 2.67 (left: 2.67)",
                "13 + 3 = 16 (left: 8 13 16)",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 - (13 + 3)) = 24",
                "13 + 3 = 16 (left: 8 13 16) || 13 + 8 = ",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 8 = 8 (left: 8 16) || 16 / 8 = 2 (left: 2)",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24)",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24)",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 / 3 = 2.67 (left: 2.67)"
            ],
            "Evaluation": [
                20.001,
                0.003,
                0.002,
                1.002,
                60.0,
                0.003,
                0.001,
                40.0,
                60.0,
                0.001
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 3.0",
                "2 <- 2.6",
                "3 <- 1.7",
                "4 <- 3.7",
                "5 <- 3.7",
                "6 <- 2.3",
                "7 <- 1.7",
                "8 <- 3.7",
                "9 <- 3.8"
            ]
        },
        "Step 4": {
            "steps": [
                "13 + 3 = 16 (left: 8 13 16) || 16 - 8 = 8 (left: 8 16) || 8 * 2 = 16 (left: 16) || 16 / 2 = 8",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 8 = 8 (left: 8 16) || 8 * 2 = 16 (left: 16) || 16 / 2 = 8",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 8 = 8 (left: 8 16) || 24 - 8 = 16 (left: 16)",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24)",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + (13 - 3)) = 24",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + (13 - 3)) = 24",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + (13 - 3)) = 24",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24)",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + (13 - 3)) = 24",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + (13 - 3)) = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.001,
                60.0,
                60.0,
                60.0,
                60.0,
                20.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 3.8",
                "2 <- 4.8",
                "3 <- 4.9",
                "4 <- 3.4",
                "5 <- 4.8",
                "6 <- 3.4",
                "7 <- 4.9",
                "8 <- 4.8",
                "9 <- 3.7"
            ]
        },
        "Step 5": {
            "steps": [
                "13 + 3 = 16 (left: 8 13 16) || 16 - 8 = 8 (left: 8 16) || 8 / 16 = 0.5 (left: 0.5)",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 - (13 + 3)) = 24",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + (13 - 3)) = 24 || Input: 6 6 6 6\nSteps:\n6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 12 36)\n36 / 12 = 3 (left: 3 36)\n3 * 6 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((6 * 6) / 12) * (",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + (13 - 3)) = 24 || Input: 2 3 5 6\nSteps:\n5 + 6 = 11 (left: 2 3 11)\n11 - 3 = 8 (left: 2 8)\n8 * 2 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((5 + 6) - 3) * 2 + 8 = 24",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 - (13 + 3)) = 24 || Input: 3 6 7 9\nSteps:\n6 * 3 = 18 (left: 7 9 18)\n9 - 7 = 2 (left: 2 18)\n18 * 2 = 36 (left: 36)\nAnswer: (3 * 6) * (9 - 7) = 24",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + (13 - 3)) = 24 || Input: 2 3 4 5\nSteps:\n4 * 5 = 20 (left: 2 3 20)\n3 + 2 = 5 (left: 5 20)\n5 * 4 = 20 (left: 20)\nAnswer: (3 + 2) * (4 * 5) = 24",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 - (13 + 3)) = 24 || Input: 7 2 4 9\nSteps:\n7 - 4 = 3 (left: 2 3 9)\n3 + 9 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (7 - 4) + (2 * 9) = 24",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + (13 - 3)) = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n4 - 3 = 1 (left: 1 12)\n1 * 12 = 24 (left: 24)\nAnswer: (2 * 6) * (4 - 3) = 24",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + (13 - 3)) = 24 || Input: 5 6 7 8\nSteps:\n5 * 6 = 30 (left: 7 8 30)\n7 - 8 = -1 (left: -1 30)\n-1 * 30 = -30 (left: -30)\n8 - 6 = 2 (left: 2 -30)\n2 * -30 = -60 (left: -60)\nAnswer: (5 * 6) - (7 + (",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + (13 - 3)) = 24"
            ],
            "Evaluation": [
                0.002,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.9",
                "1 <- 5.3",
                "2 <- 5.3",
                "3 <- 3.4",
                "4 <- 5.7",
                "5 <- 5.2",
                "6 <- 5.3",
                "7 <- 5.7",
                "8 <- 5.1",
                "9 <- 3.4"
            ]
        },
        "Step 6": {
            "steps": [
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + (13 - 3)) = 24 || Input: 2 3 6 9\nSteps:\n6 * 3 = 18 (left: 2 9 18)\n18 - 9 = 9 (left: 2 9)\n9 * 2 = 18 (left: 18)\nAnswer: (2 * 3) * (6 + 9) = 24",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + (13 - 3)) = 24 || Input: 2 3 5 6\nSteps:\n5 + 6 = 11 (left: 2 3 11)\n11 - 3 = 8 (left: 2 8)\n8 * 2 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((5 + 6) - 3) * 2 + 8 = 24 || Input: 1 2 3 6\nSteps:\n1 * 2 = 2 (left: 2 3 6)\n2 + 3 = 5 (left: 5 6)\n5 * 6 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((1 * 2) + 3) * 6 - 6 = 24",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + (13 - 3)) = 24 || Input: 2 3 5 6\nSteps:\n5 + 6 = 11 (left: 2 3 11)\n11 - 3 = 8 (left: 2 8)\n8 * 2 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((5 + 6) - 3) * 2 + 8 = 24 || Input: 2 4 5 7\nSteps:\n5 + 7 = 12 (left: 2 4 12)\n4 * 2 = 8 (left: 8 12)\n12 - 8 = 4 (left: 4 24)\n4 * 24 = 24\nAnswer: ((5 + 7) * 2) - 8 = 24",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 - (13 + 3)) = 24 || Input: 7 7 8 2\nSteps:\n7 + 7 = 14 (left: 8 14 2)\n14 - 8 = 6 (left: 6 2)\n6 * 2 = 12 (left: 12)\n8 * 12 = 24 (left: 24)\nAnswer: (8 - 7) * (7 + 2) * 2 = 24",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + (13 - 3)) = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n4 - 3 = 1 (left: 1 12)\n1 * 12 = 24 (left: 24)\nAnswer: (2 * 6) * (4 - 3) = 24 || Input: 7 7 8 4\nSteps:\n7 + 8 = 15 (left: 4 7 15)\n7 - 4 = 3 (left: 3 15)\n3 * 15 = 45 (left: 45)\n45 / 4 = 11.25 (left: 11.25)\n11.25 * 2 = 22.5 (left: 22.5)\n22.5 + 2",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + (13 - 3)) = 24 || Input: 6 6 6 6\nSteps:\n6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 12 36)\n36 / 12 = 3 (left: 3 36)\n3 * 6 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((6 * 6) / 12) * ( || 6 + 6) = 24",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + (13 - 3)) = 24 || Input: 2 3 5 6\nSteps:\n5 + 6 = 11 (left: 2 3 11)\n11 - 3 = 8 (left: 2 8)\n8 * 2 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((5 + 6) - 3) * 2 + 8 = 24 || Input: 1 3 4 7\nSteps:\n3 + 4 = 7 (left: 1 7 7)\n7 + 7 = 14 (left: 1 14)\n14 - 1 = 13 (left: 13)\n13 + 13 = 26 (left: 26)\n26 - 2 = 24 (left: 24)\nAnswer: ((1 + 4) + 7) + (13 +",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + (13 - 3)) = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n4 - 3 = 1 (left: 1 12)\n1 * 12 = 24 (left: 24)\nAnswer: (2 * 6) * (4 - 3) = 24 || Input: 7 3 4 5\nSteps:\n7 - 3 = 4 (left: 4 5 4)\n4 * 5 = 20 (left: 20 4)\n20 / 4 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\nAnswer: ((7 - 3) * 4) * (5 / 5) = 24",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 - (13 + 3)) = 24 || Input: 6 7 8 9\nSteps:\n7 + 9 = 16 (left: 6 8 16)\n16 - 8 = 8 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (6 * (7 + 9)) - 8 = 24",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 - (13 + 3)) = 24 || Input: 6 6 9 9\nSteps:\n9 - 6 = 3 (left: 6 9 3)\n9 - 3 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36)\nAnswer: 6 * (9 - (9 - 6)) = 24"
            ],
            "Evaluation": [
                40.0,
                40.0,
                60.0,
                60.0,
                60.0,
                0.003,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.9",
                "1 <- 5.3",
                "2 <- 5.8",
                "3 <- 6.8",
                "4 <- 5.1",
                "5 <- 5.2",
                "6 <- 4.8",
                "7 <- 6.8",
                "8 <- 5.3",
                "9 <- 4.4"
            ]
        },
        "Step 7": {
            "steps": [
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + (13 - 3)) = 24 || Input: 2 3 6 8\nSteps:\n3 * 8 = 24 (left: 2 6 24)\n2 + 6 = 8 (left: 8 24)\n8 * 3 = 24 (left: 24)\nAnswer: (3 * 8) * (2 + 6) = 24",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + (13 - 3)) = 24 || Input: 2 3 5 6\nSteps:\n5 + 6 = 11 (left: 2 3 11)\n11 - 3 = 8 (left: 2 8)\n8 * 2 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((5 + 6) - 3) * 2 + 8 = 24 || Input: 1 2 3 6\nSteps:\n2 * 6 = 12 (left: 1 3 12)\n12 - 1 = 11 (left: 3 11)\n3 * 11 = 33 (left: 33)\n33 - 9 = 24 (left: 24)\nAnswer: ((1 * 2) * 6 - 1) * 3 = 24",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + (13 - 3)) = 24 || Input: 5 6 7 8\nSteps:\n5 * 6 = 30 (left: 7 8 30)\n7 - 8 = -1 (left: -1 30)\n-1 * 30 = -30 (left: -30)\n8 - 6 = 2 (left: 2 -30)\n2 * -30 = -60 (left: -60)\nAnswer: (5 * 6) - (7 + ( || 8 - 6)) = 24",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 - (13 + 3)) = 24 || Input: 6 7 8 9\nSteps:\n7 + 9 = 16 (left: 6 8 16)\n16 - 8 = 8 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (6 * (7 + 9)) - 8 = 24 || Input: 2 3 4 6\nSteps:\n3 + 4 = 7 (left: 2 6 7)\n2 * 7 = 14 (left: 6 14)\n6 * 14 = 84 (left: 84)\n84 / 4 = 21 (left: 21)\n21 - 6 = 15 (left: 15)\n15 + 9 = 24 (left: 24)\nAnswer: (((",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 - (13 + 3)) = 24 || Input: 2 3 5 5\nSteps:\n5 * 5 = 25 (left: 2 3 25)\n3 + 2 = 5 (left: 5 25)\n5 * 5 = 25 (left: 25)\nAnswer: (5 * 5) - (3 + 2) = 24",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + (13 - 3)) = 24 || Input: 6 6 6 6\nSteps:\n6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 12 36)\n36 / 12 = 3 (left: 3 36)\n3 * 6 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((6 * 6) / 12) * ( || 6 + 6) = 24",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + (13 - 3)) = 24 || Input: 2 3 4 6\nSteps:\n4 + 6 = 10 (left: 2 3 10)\n3 * 2 = 6 (left: 6 10)\n10 - 6 = 4 (left: 4)\n4 * 6 = 24 (left: 24)\nAnswer: (4 * (10 - 6)) * 6 = 24",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 - (13 + 3)) = 24 || Input: 6 7 8 9\nSteps:\n7 + 9 = 16 (left: 6 8 16)\n16 - 8 = 8 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (6 * (7 + 9)) - 8 = 24 || Input: 2 3 7 8\nSteps:\n3 * 7 = 21 (left: 2 8 21)\n21 - 8 = 13 (left: 2 13)\n13 + 2 = 15 (left: 15)\n15 + 8 = 23 (left: 23)\n23 + 1 = 24 (left: 24)\nAnswer: (((2 + 13) + 1) + 8)",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + (13 - 3)) = 24 || Input: 2 3 5 6\nSteps:\n5 + 6 = 11 (left: 2 3 11)\n11 - 3 = 8 (left: 2 8)\n8 * 2 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((5 + 6) - 3) * 2 + 8 = 24 || Input: 1 3 7 8\nSteps:\n7 + 8 = 15 (left: 1 3 15)\n3 + 15 = 18 (left: 1 18)\n18 - 1 = 17 (left: 17)\n17 + 7 = 24 (left: 24)\nAnswer: ((1 + (3 + 7)) - 8) + 17 = 24",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + (13 - 3)) = 24 || Input: 2 3 4 6\nSteps:\n3 + 6 = 9 (left: 2 4 9)\n9 * 2 = 18 (left: 4 18)\n18 - 4 = 14 (left: 14)\n14 + 10 = 24 (left: 24)\nAnswer: ((3 + 6) * 2) + 10 = 24"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.003,
                60.0,
                60.0,
                0.003,
                60.0,
                40.0,
                40.0,
                60.0
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 6.8",
                "2 <- 4.8",
                "3 <- 3.0",
                "4 <- 5.4",
                "5 <- 6.6",
                "6 <- 4.5",
                "7 <- 5.5",
                "8 <- 4.7",
                "9 <- 7.6"
            ]
        },
        "Step 8": {
            "steps": [
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + 3 - 13) = 24",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 - (13 + 3)) = 24 || Input: 6 7 8 9\nSteps:\n7 + 9 = 16 (left: 6 8 16)\n16 - 8 = 8 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (6 * (7 + 9)) - 8 = 24 || Input: 2 3 4 6\nSteps:\n3 * 6 = 18 (left: 2 4 18)\n4 - 2 = 2 (left: 2 18)\n2 * 18 = 36 (left: 36)\nAnswer: (2 * (3 * 6)) - 4 = 24",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + (13 - 3)) = 24 || Input: 3 5 7 8\nSteps:\n7 + 8 = 15 (left: 3 5 15)\n15 - 5 = 10 (left: 3 10)\n10 * 3 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((7 + 8) - 5) * 3 = 24",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 8 = 8 (left: 8 16) || 8 * 2 = 16 (left: 16) || There are no possible next steps with only one number given.",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 - (13 + 3)) = 24 || Input: 3 6 7 9\nSteps:\n6 * 3 = 18 (left: 7 9 18)\n9 - 7 = 2 (left: 2 18)\n18 * 2 = 36 (left: 36)\nAnswer: (3 * 6) * (9 - 7) = 24 || Input: 2 3 7 9\nSteps:\n3 + 9 = 12 (left: 2 7 12)\n7 - 2 = 5 (left: 5 12)\n5 * 12 = 60 (left: 60)\n60 / 2.5 = 24 (left: 24)\nAnswer: ((3 + 9) - 7) * 2.5 = 24",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + (13 - 3)) = 24 || Input: 2 3 5 6\nSteps:\n5 + 6 = 11 (left: 2 3 11)\n11 - 3 = 8 (left: 2 8)\n8 * 2 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((5 + 6) - 3) * 2 + 8 = 24 || Input: 1 3 4 7\nSteps:\n3 + 4 = 7 (left: 1 7 7)\n7 + 7 = 14 (left: 1 14)\n14 - 1 = 13 (left: 13)\n13 + 13 = 26 (left: 26)\n26 - 2 = 24 (left: 24)\nAnswer: ((1 + 4) + 7) + (13 + || 13) - 2 = 24",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + (13 - 3)) = 24 || Input: 2 3 6 6\nSteps:\n6 * 3 = 18 (left: 2 6 18)\n6 - 2 = 4 (left: 4 18)\n4 * 18 = 72 (left: 72)\nAnswer: (2 * (6 + 6)) * 3 = 72",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + (13 - 3)) = 24 || Input: 2 3 4 5\nSteps:\n4 * 5 = 20 (left: 2 3 20)\n3 + 2 = 5 (left: 5 20)\n5 * 4 = 20 (left: 20)\nAnswer: (3 + 2) * (4 * 5) = 24 || Input: 6 6 8 9\nSteps:\n6 + 8 = 14 (left: 6 9 14)\n14 - 9 = 5 (left: 6 5)\n6 * 5 = 30 (left: 30)\nAnswer: 6 * (6 + (8 - 9)) = 24",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + (13 - 3)) = 24",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 13 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (13 + (13 - 3)) = 24 || Input: 2 3 4 6\nSteps:\n4 + 6 = 10 (left: 2 3 10)\n3 * 2 = 6 (left: 6 10)\n10 - 6 = 4 (left: 4)\n4 * 6 = 24 (left: 24)\nAnswer: (4 * (10 - 6)) * 6 = 24 || Input: 7 1 3 6\nSteps:\n7 - 1 = 6 (left: 3 6 6)\n6 * 3 = 18 (left: 6 18)\n6 * 18 = 24 (left: 24)\nAnswer: (7 - 1) * (3 * 6) = 24"
            ]
        },
        "Input": "3 8 13 13",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "49": {
        "puzzle": "9 9 12 12",
        "Step 0": {
            "steps": [
                "12 + 9 = 21 (left: 9 12 21)",
                "9 + 9 = 18 (left: 12 18 12)",
                "9 * 9 = 81 (left: 12 12 81)",
                "9 * 9 = 81 (left: 12 12 81)",
                "12 + 9 = 21 (left: 9 12 21)",
                "9 * 9 = 81 (left: 12 12 81)",
                "9 * 9 = 81 (left: 81 12 12)",
                "12 + 9 = 21 (left: 9 12 21)",
                "12 / 9 = 1.33 (left: 9 ",
                "12 + 9 = 21 (left: 9 12 21)"
            ],
            "Evaluation": [
                3.0,
                1.002,
                1.002,
                0.003,
                3.0,
                20.002,
                22.0,
                3.0,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 0.6",
                "2 <- 0.5",
                "3 <- 0.5",
                "4 <- 0.5",
                "5 <- 0.5",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "12 + 9 = 21 (left: 9 12 21) || 9 * 12 = 108 (left: 108 21)",
                "9 * 9 = 81 (left: 81 12 12) || 12 / 12 = 1 (left: 81 1)",
                "9 * 9 = 81 (left: 12 12 81) || 81 / 12 = 6.75 (left: 12 6.75)",
                "9 * 9 = 81 (left: 12 12 81) || 12 / 12 = 1 (left: 1 12 81)",
                "9 * 9 = 81 (left: 12 12 81) || 81 - 12 = 69 (left: 12 69)",
                "9 * 9 = 81 (left: 12 12 81) || 12 - 12 = 0 (left: 0 81)",
                "12 - 9 = 3 (left: 3 12 12)",
                "12 - 9 = 3 (left: 9 3 ",
                "12 + 9 = 21 (left: 9 12 21)",
                "12 + 9 = 21 (left: 9 12 21) || 9 * 12 = 108 (left: 108 21)"
            ],
            "Evaluation": [
                0.003,
                40.0,
                2.001,
                0.003,
                0.002,
                20.002,
                60.0,
                20.001,
                2.0,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.6",
                "2 <- 0.6",
                "3 <- 0.6",
                "4 <- 1.1",
                "5 <- 1.1",
                "6 <- 1.6",
                "7 <- 0.5",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "9 / 9 = 1 (left: 1 12 12)",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)",
                "9 * 9 = 81 (left: 81 12 12) || 81 / 12 = 6 (left: 6 12)",
                "9 * 9 = 81 (left: 81 12 12) || 12 * 12 = 144 (left: 144)",
                "9 * 9 = 81 (left: 81 12 12) || 12 / 12 = 1 (left: 81 1) || 81 / 1 = 81 (left: 81)",
                "9 * 9 = 81 (left: 81 12 12) || 12 / 12 = 1 (left: 81 1) || 5 + 3 = 8 (left: 8 2)",
                "12 - 9 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "9 * 9 = 81 (left: 12 12 81) || 81 / 12 = 6.75 (left: 6.75 12)",
                "12 + 9 = 21 (left: 9 12 21)",
                "9 * 9 = 81 (left: 12 12 81)"
            ],
            "Evaluation": [
                40.001,
                0.003,
                0.003,
                0.003,
                0.003,
                1.002,
                0.003,
                1.002,
                1.002,
                2.001
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 1.1",
                "2 <- 0.5",
                "3 <- 1.6",
                "4 <- 2.0",
                "5 <- 2.0",
                "6 <- 0.5",
                "7 <- INIT",
                "8 <- 1.1",
                "9 <- 2.0"
            ]
        },
        "Step 3": {
            "steps": [
                "9 * 9 = 81 (left: 81 12 12) || 12 + 12 = 24 (left: 81 24)",
                "9 * 9 = 81 (left: 81 12 12) || 12 / 12 = 1 (left: 81 1) || 81 * 1 = 81 (left: 81)",
                "9 * 9 = 81 (left: 12 12 81) || 81 - 12 = 69 (left: 12 69)",
                "12 - 9 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "9 / 9 = 1 (left: 1 12 12) || 12 - 1 = 11 (left: 1 11)",
                "9 / 9 = 1 (left: 1 12 12) || 12 + 1 = 13 (left: 13)",
                "9 * 9 = 81 (left: 12 12 81) || 12 / 12 = 1 (left: 1 12 81)",
                "12 / 9 = 1 (left: 1 12 ",
                "9 * 9 = 81 (left: 81 12 12) || 12 / 12 = 1 (left: 81 1) || 81 * 1 = 81 (left: 81)",
                "9 / 9 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                1.001,
                0.003,
                0.003,
                0.002,
                21.0,
                0.0,
                0.003,
                2.0,
                0.003,
                40.001
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 3.9",
                "2 <- 0.6",
                "3 <- 1.6",
                "4 <- 2.0",
                "5 <- 1.7",
                "6 <- 1.6",
                "7 <- 2.0",
                "8 <- 1.6",
                "9 <- 3.9"
            ]
        },
        "Step 4": {
            "steps": [
                "9 * 9 = 81 (left: 81 12 12) || 12 / 12 = 1 (left: 81 1) || 81 - 1 = 80 (left: 80)",
                "9 / 9 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "9 * 9 = 81 (left: 81 12 12) || 12 + 12 = 24 (left: 24 12 12)",
                "12 - 9 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "9 / 9 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "12 - 9 = 3 (left: 9 3  || 9 / 3 = 3 (left: 3 3)",
                "12 - 9 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "9 / 9 = 1 (left: 1 12 12) || 12 / 12 = 1 (left: 1 1)",
                "12 - 9 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "9 / 9 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                0.002,
                40.001,
                40.0,
                0.003,
                0.002,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 1.1",
                "2 <- 1.7",
                "3 <- 3.9",
                "4 <- 3.9",
                "5 <- 0.5",
                "6 <- 4.5",
                "7 <- 4.4",
                "8 <- 1.7",
                "9 <- 4.2"
            ]
        },
        "Step 5": {
            "steps": [
                "9 * 9 = 81 (left: 81 12 12) || 12 + 12 = 24 (left: 24 12 12) || 12 * 12 = 144 (left: 24 144)",
                "9 * 9 = 81 (left: 81 12 12) || 12 / 12 = 1 (left: 81 1) || 81 * 1 = 81 (left: 81)",
                "12 - 9 = 3 (left: 9 3  || 9 / 3 = 3 (left: 3)",
                "9 / 9 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "9 / 9 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "9 * 9 = 81 (left: 12 12 81) || 81 + 12 = ",
                "12 - 9 = 3 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 / 3 = 1 (left: 1)",
                "9 / 9 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 - 9 = 3 (left: 9 3  || 9 * 3 = 27 (left: 27)",
                "9 * 9 = 81 (left: 81 12 12) || 12 + 12 = 24 (left: 24 12 12) || 24 - 12 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                40.001,
                0.003,
                0.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- INIT",
                "2 <- 1.8",
                "3 <- 4.2",
                "4 <- 5.0",
                "5 <- 5.0",
                "6 <- 5.0",
                "7 <- 5.9",
                "8 <- 3.4",
                "9 <- 5.9"
            ]
        },
        "Step 6": {
            "steps": [
                "9 * 9 = 81 (left: 81 12 12) || 12 + 12 = 24 (left: 24 12 12) || 12 * 12 = 144 (left: 24 144) || 24 + 144 = 168 (left: 168)",
                "9 * 9 = 81 (left: 12 12 81)",
                "12 + 9 = 21 (left: 9 12 21) || 12 / 9 = 1.33 (left: 1.33 21)",
                "9 * 9 = 81 (left: 81 12 12) || 12 + 12 = 24 (left: 24 12 12) || 24 - 12 = 12 (left: 12 12)",
                "9 * 9 = 81 (left: 81 12 12) || 12 + 12 = 24 (left: 24 12 12) || 12 * 12 = 144 (left: 24 144) || 24 - 144 = -120 (left: -120)",
                "9 * 9 = 81 (left: 81 12 12) || 12 + 12 = 24 (left: 24 12 12) || 12 * 12 = 144 (left: 24 144) || 144 - 24 = 120 (left: 120)",
                "9 * 9 = 81 (left: 81 12 12) || 12 + 12 = 24 (left: 24 12 12) || 12 * 12 = 144 (left: 24 144) || 144 / 24 = 6 (left: 6)",
                "9 * 9 = 81 (left: 81 12 12) || 12 + 12 = 24 (left: 24 12 12) || 24 - 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "9 / 9 = 1 (left: 1 12 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "9 * 9 = 81 (left: 81 12 12) || 12 + 12 = 24 (left: 24 12 12) || 24 - 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)"
            ],
            "Evaluation": [
                0.003,
                2.001,
                0.002,
                60.0,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 4.2",
                "2 <- 2.0",
                "3 <- 0.5",
                "4 <- 6.3",
                "5 <- 2.0",
                "6 <- 5.0",
                "7 <- 6.3",
                "8 <- 1.6",
                "9 <- 2.0"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 9 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12)",
                "9 * 9 = 81 (left: 81 12 12) || 12 + 12 = 24 (left: 24 12 12) || 12 + 12 = 24 (left: 24 12)",
                "9 / 9 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "9 * 9 = 81 (left: 12 12 81) || 81 - 12 = 69 (left: 12 69)",
                "9 * 9 = 81 (left: 81 12 12) || 12 + 12 = 24 (left: 24 12 12) || 24 - 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "9 / 9 = 1 (left: 1 12 12) || 12 - 1 = 11 (left:",
                "9 * 9 = 81 (left: 81 12 12) || 12 + 12 = 24 (left: 24 12 12) || 12 * 12 = 144 (left: 24 144) || 144 / 24 = 6 (left: 6 144)",
                "9 * 9 = 81 (left: 81 12 12) || 12 + 12 = 24 (left: 24 12 12) || 24 - 12 = 12 (left: 12 12) || Input: 24 144 1 0",
                "12 - 9 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "9 / 9 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.003,
                40.001,
                20.002,
                0.003,
                0.003,
                1.001,
                0.003,
                0.003,
                1.002,
                40.001
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.6",
                "2 <- 4.5",
                "3 <- 1.7",
                "4 <- 7.1",
                "5 <- 7.1",
                "6 <- 7.8",
                "7 <- 5.9",
                "8 <- 2.0",
                "9 <- 4.2"
            ]
        },
        "Step 8": {
            "steps": [
                "9 * 9 = 81 (left: 81 12 12) || 12 / 12 = 1 (left: 81 1) || 81 - 1 = 80 (left: 80)",
                "12 - 9 = 3 (left: 3 12 12) || Possible",
                "12 - 9 = 3 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 - 3 = 0 (left: 0)",
                "12 - 9 = 3 (left: 9 3  || 9 * 3 = 27 (left: 27)",
                "9 * 9 = 81 (left: 81 12 12) || 12 + 12 = 24 (left: 24 12 12) || 12 + 12 = 24 (left: 24 12) || 24 + 12 = 36 (left: 36)",
                "9 * 9 = 81 (left: 81 12 12) || 12 + 12 = 24 (left: 24 12 12) || 12 + 12 = 24 (left: 24 12) || 24 - 2 = 22 (left: 22)",
                "12 - 9 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12) || 12 - 9 = 3 (left: 3)",
                "9 * 9 = 81 (left: 81 12 12) || 12 + 12 = 24 (left: 24 12 12) || 24 - 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "9 / 9 = 1 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "9 * 9 = 81 (left: 81 12 12) || 12 + 12 = 24 (left: 24 12 12) || 24 + 12 = 36 (left: 36 12)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.002,
                20.001,
                40.0,
                0.003,
                0.003,
                20.002,
                40.0
            ],
            "Resampling": [
                "0 <- 8.5",
                "1 <- 0.5",
                "2 <- 7.9",
                "3 <- 4.5",
                "4 <- 4.2",
                "5 <- 8.5",
                "6 <- 8.9",
                "7 <- 4.4",
                "8 <- 3.4",
                "9 <- 8.5"
            ]
        },
        "Step 9": {
            "steps": [
                "9 * 9 = 81 (left: 81 12 12) || 12 + 12 = 24 (left: 24 12 12) || 12 + 12 = 24 (left: 24 12) || 24 - 2 = 22 (left: 22) || There are no possible next steps with the input 22.",
                "9 * 9 = 81 (left: 12 12 81) || 81 / 12 = 6.75 (left: 12 6.75)",
                "9 / 9 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 - 9 = 3 (left: 9 3  || 9 / 3 = 3 (left: 3 3) || 3 / 3 = 1 (left: 1)",
                "9 * 9 = 81 (left: 81 12 12) || 12 + 12 = 24 (left: 24 12 12) || 12 * 12 = 144 (left: 24 144)",
                "9 * 9 = 81 (left: 81 12 12) || 12 + 12 = 24 (left: 24 12 12) || 12 + 12 = 24 (left: 24 12) || 24 - 2 = 22 (left: 22) || 22 / 8 = 2 (left: 2)",
                "9 * 9 = 81 (left: 81 12 12) || 12 + 12 = 24 (left: 24 12 12) || 24 + 12 = 36 (left: 36 12) || 36 * 12 = 432 (left: 432)",
                "9 / 9 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "9 / 9 = 1 (left: 1 12 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "9 * 9 = 81 (left: 81 12 12) || 12 + 12 = 24 (left: 24 12 12) || 12 + 12 = 24 (left: 24 12) || 24 - 2 = 22 (left: 22) || There are no possible next steps with the input of 22."
            ]
        },
        "Input": "9 9 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    }
}