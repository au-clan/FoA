{
    "0": {
        "puzzle": "1 1 4 6",
        "Step 0": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6)",
                "6 - 1 = 5 (left: 1 4 5)",
                "4 + 1 = 5 (left: 1 5 6)",
                "6 - 4 = 2 (left: 1 2 6)",
                "6 - 1 = 5 (left: 1 4 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                41.0,
                21.0,
                0.002,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.0",
                "2 <- 0.0",
                "3 <- 0.0",
                "4 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                1.002,
                60.0,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.2",
                "2 <- 1.3",
                "3 <- 1.3",
                "4 <- 0.0"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || Possible next steps:",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 10 + 20 = 30 (left: 30)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.4",
                "2 <- 0.1",
                "3 <- 1.3",
                "4 <- 1.2"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24 24)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "6 - 1 = 5 (left: 1 4 5) || 1 + 4 = 5 (left: 5 5)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                0.002,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 3.0",
                "2 <- 3.3",
                "3 <- 3.4",
                "4 <- 3.4"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24 24) || 24 + 24 = 48",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 1) * (4 * 6) = 24",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 * 4 * 6) / 1 = 24",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: 1 * (4 * 6) = 24"
            ]
        },
        "Input": "1 1 4 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": -1
            }
        ]
    },
    "1": {
        "puzzle": "1 1 11 11",
        "Step 0": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11)",
                "1 * 1 = 1 (left: 1 11 11)",
                "11 - 1 = 10 (left: 1 10 11)",
                "11 / 1 = 11 (left: 1 11 ",
                "11 - 1 = 10 (left: 1 11 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11)",
                "11 - 1 = 10 (left: 1 10 11)",
                "11 - 1 = 10 (left: 1 11 10)",
                "1 + 1 = 2 (left: 2 11 11)",
                "1 * 1 = 1 (left: 1 11 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                1.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "11 - 1 = 10 (left: 1 10 11)",
                "1 * 1 = 1 (left: 1 11 11)",
                "1 - 1 = 0 (left: 0 11 11)",
                "1 * 1 = 1 (left: 1 11 11)",
                "1 + 1 = 2 (left: 2 11 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                20.002,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.1",
                "2 <- 2.1",
                "3 <- 2.1",
                "4 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "11 / 1 = 11 (left: 1 11 ",
                "1 * 1 = 1 (left: 1 11 11) || 11 / 1 = 11 (left: 11 11 11)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 10 11)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 10 11 11)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 10 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                1.002,
                2.001
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 2.1",
                "2 <- 3.4",
                "3 <- 2.1",
                "4 <- 2.1"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 10 11) || 10 * 11 = 110 (left: 110)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left:",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 10 11) || 10 / 11 \u2248 0.9091 (left: 0.9091)",
                "1 * 1 = 1 (left: 1 11 11) || 11 / 1 = 11 (left: 11 11)",
                "1 * 1 = 1 (left: 1 11 11) || Input: 3 5 5"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                40.001,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 4.1",
                "2 <- 4.1",
                "3 <- 4.1",
                "4 <- 2.1"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 - 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 / 1 = 11 (left: 1 11)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 + 1 = 12 (left: 10)",
                "1 * 1 = 1 (left: 1 11 11) || 1 + 11 = 12 (left: 11 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                40.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 4.1",
                "2 <- 4.1",
                "3 <- 4.1",
                "4 <- 4.1"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 / 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 + 1 = 12 (left: 12)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 10)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: || 7 + 3 = 10 (left: 10 5)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 - 1 = 10 (left: 10)"
            ],
            "Pruning": [
                "0<-5.2"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 4.1",
                "2 <- 6.0",
                "3 <- 6.0",
                "4 <- 6.0"
            ]
        },
        "Step 7": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 / 10 = 1.1 (left: 1)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: || 5 + 3 = 8 (left: 2 7 8)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 / 1 = 11 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 / 1 = 11 (left: 1 11) || Input: 3 9 27",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 / 1 = 11 (left: 1 11) || 1 + 11 = 12"
            ],
            "Pruning": [
                "2<-6.0"
            ],
            "Evaluation": [
                0.003,
                1.002,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 7.2",
                "2 <- 5.2",
                "3 <- 6.0",
                "4 <- 6.0"
            ]
        },
        "Step 8": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 / 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 / 1 = 11 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 / 1 = 11 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 / 1 = 11 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 / 1 = 11 (left: 1 11) || 1 + 11 = 12 (left: 12)"
            ],
            "Pruning": [
                "0<-6.0",
                "1<-5.2",
                "2<-6.0",
                "3<-5.2",
                "4<-6.0"
            ],
            "Evaluation": [
                40.0,
                40.001,
                20.0,
                20.0,
                40.0
            ],
            "Resampling": [
                "0 <- 8.4",
                "1 <- 7.2",
                "2 <- 8.3",
                "3 <- 8.1",
                "4 <- 7.2"
            ]
        },
        "Step 9": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 / 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 / 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 / 1 = 11 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 / 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 / 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)"
            ],
            "Pruning": [
                "0<-7.2",
                "1<-8.2",
                "2<-7.2",
                "3<-8.1",
                "4<-7.2"
            ]
        },
        "Input": "1 1 11 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "2": {
        "puzzle": "1 1 3 8",
        "Step 0": {
            "steps": [
                "3 + 1 = 4 (left: 4 3 8)",
                "8 - 3 = 5 (left: 1 1 5)",
                "8 - 3 = 5 (left: 1 3 5)",
                "1 + 1 = 2 (left: 2 3 8)",
                "3 * 1 = 3 (left: 3 1 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.0,
                2.001,
                1.002,
                2.001,
                60.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- INIT",
                "2 <- 0.4",
                "3 <- 0.4",
                "4 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 8) || 8 / 3 = 2 (left: 2 3)",
                "8 - 3 = 5 (left: 1 1 ",
                "3 * 1 = 3 (left: 3 1 8) || 1 + 8 = 9 (left: 3 9)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 3 1 8) || 1 + 8 = 9 (left: 3 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.4",
                "2 <- 0.4",
                "3 <- INIT",
                "4 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 8) || 8 - 1 = 7 (left: 3 7)",
                "3 * 1 = 3 (left: 3 1 8) || 8 - 3 = 5 (left:",
                "3 * 1 = 3 (left: 3 1 8) || 1 + 8 = 9 (left: 3 9)",
                "8 - 3 = 5 (left: 1 1 5)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.001,
                0.003,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- 1.3",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 8 / 3 = 2.6667 (left: 2.6667)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 3 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 3.4",
                "2 <- 3.4",
                "3 <- 0.4",
                "4 <- 1.3"
            ]
        },
        "Step 4": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 3 8) || 1 + 3 = 4 (left: 4 8)",
                "1 * 1 = 1 (left: 1 3 8) || 1 + 3 = 4 (left: 4 8)",
                "3 * 1 = 3 (left: 3 1 8) || 1 / 8 = 0.125 (left: 0.125)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || Possible next steps:"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 3.4",
                "2 <- 3.4",
                "3 <- 3.4",
                "4 <- 3.4"
            ]
        },
        "Step 5": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "1 * 1 = 1 (left: 1 3 8) || 3 - 1 = 2 (left: 2 8)",
                "1 * 1 = 1 (left: 1 3 8) || 8 / 3 = 2.6667 (left: 1 2.6667)",
                "1 * 1 = 1 (left: 1 3 8) || 8 / 3 = 2.67 (left: 1 2.67)",
                "1 * 1 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.002,
                2.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 5.4",
                "2 <- 5.2",
                "3 <- 5.4",
                "4 <- 3.4"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2 (left: 2)",
                "1 * 1 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 3 8) || 8 / 3 = 2.6667 (left: 1 2.6667) || 1 / 2.6667 = 0.375 (left: 0.375 2.6667)",
                "1 * 1 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 3 8) || 1 + 3 = 4 (left: 4 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                60.0,
                3.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 5.4",
                "2 <- 5.2",
                "3 <- 5.4",
                "4 <- 3.4"
            ]
        },
        "Step 7": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 1) * (3 * 8) = 24",
                "1 * 1 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 3 8) || 8 / 3 = 2.6667 (left: 1 2.6667) || 1 + 2.6667 = 3.6667 (left: 3.6667)",
                "1 * 1 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || Possible next steps:",
                "1 * 1 = 1 (left: 1 3 8) || 3 - 1 = 2 (left: 2 8)"
            ]
        },
        "Input": "1 1 3 8",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "3": {
        "puzzle": "1 1 1 8",
        "Step 0": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 ",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 * 1 = 1 (left: 1 1 8)",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 + 8 = 9 (left: 1 1 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                22.0,
                1.001,
                60.0,
                0.001
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.3",
                "2 <- INIT",
                "3 <- 0.3",
                "4 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 8 - 1 = 7 (left:",
                "1 + 1 = 2 (left: 1 2 8) || 1 * 8 = 8 (left: 2 8)",
                "8 / 1 = 8 (left: 1 1 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.0,
                0.003,
                1.002,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 0.1",
                "2 <- 1.4",
                "3 <- 1.4",
                "4 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "1 + 1 = 2 (left: 1 2 8) || Input: 3 4 9"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 0.3",
                "2 <- 0.1",
                "3 <- 1.4",
                "4 <- 1.4"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 5 * 10 = 50"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.001,
                60.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 3.2",
                "2 <- 3.2",
                "3 <- 0.3",
                "4 <- 3.2"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 2 / 1 = 2 (left: 2 8)",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 1.4",
                "2 <- 1.4",
                "3 <- 0.1",
                "4 <- 3.2"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 6 / 4 = ",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.0,
                0.003,
                0.003,
                60.0,
                0.001
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 4.3",
                "2 <- 3.2",
                "3 <- 4.3",
                "4 <- 3.2"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || Input: 3 5 9",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.66667 (left: 2.66667)",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.001,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 5.0",
                "2 <- 5.3",
                "3 <- 4.3",
                "4 <- 5.3"
            ]
        },
        "Step 7": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "1 + 1 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.001,
                0.003,
                60.0,
                0.001
            ],
            "Resampling": [
                "0 <- 7.3",
                "1 <- 5.3",
                "2 <- 7.3",
                "3 <- 5.3",
                "4 <- 5.3"
            ]
        },
        "Step 8": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: ((1 + 1) + 2) * 8 = 24",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 10 = 0 (left: 0)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: ((1 + 1) + 1) * 8 = 24",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)"
            ]
        },
        "Input": "1 1 1 8",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "4": {
        "puzzle": "6 6 6 6",
        "Step 0": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6)",
                "6 * 6 = 36 (left: 6 6 36 6)",
                "6 / 6 = 1 (left: 1 6 6)",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 - 6 = 0 (left: 0 6 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                41.0,
                1.001,
                41.0,
                22.0,
                20.002
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.2",
                "2 <- 0.4",
                "3 <- 0.2",
                "4 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "6 - 6 = 0 (left: 0 6 6) || Possible next steps:",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 - 6 = 0 (left: 0 6 6) || Possible next steps",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                3.0,
                0.003,
                20.002,
                1.001
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.2",
                "2 <- 0.2",
                "3 <- 1.1",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left:",
                "6 / 6 = 1 (left: 1 6 6) || 6 + 1 = 7 (left: 6 7)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6) || 6 + 6 = 12 (left: 6 12)",
                "6 + 6 = 12 (left: 6 12 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                21.0,
                0.002,
                1.002,
                41.0
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 0.3",
                "2 <- 0.2",
                "3 <- 0.2",
                "4 <- 0.0"
            ]
        },
        "Step 3": {
            "steps": [
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: || 6 - 1 = 5 (left: 5)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 18 6)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6)",
                "6 + 6 = 12 (left: 6 12 6) || 12 / 6 = 2 (left: 2 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                40.001,
                0.003,
                20.002,
                1.001
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.4",
                "2 <- 3.1",
                "3 <- 2.1",
                "4 <- 3.3"
            ]
        },
        "Step 4": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6) || 6 * 12 = 72 (left: 72 6)",
                "6 + 6 = 12 (left: 6 12 6) || 12 - 6 = 6 (left: 6 6)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 18 6) || 18 + 6 = 24 (left: 24)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: || 1 + 6 = 7 (left: 7)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)"
            ],
            "Pruning": [],
            "Evaluation": [
                21.001,
                20.002,
                60.0,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 3.1",
                "2 <- 4.1",
                "3 <- 3.1",
                "4 <- 3.1"
            ]
        },
        "Step 5": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 18 6) || 18 + 6 = 24 (left: 24) || Answer: ((6 + 6) + 6) + 6 = 24",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 18 6) || 18 * 6 = 108 (left: 108)",
                "6 + 6 = 12 (left: 6 12 6) || 12 - 6 = 6 (left: 6 6) || 6 + 6 = 12 (left: 12)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 18 6) || 18 + 6 = 24 (left: 24)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 18 6) || 18 * 6 = 108 (left: 108)"
            ]
        },
        "Input": "6 6 6 6",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "Cost": {
        "input_tokens": 213384,
        "output_tokens": 21930.26666666666,
        "total_cost": 0.13958739999999997
    }
}