{
    "0": {
        "puzzle": "1 1 4 6",
        "Step 0": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6)",
                "6 - 1 = 5 (left: 1 4 5)",
                "4 + 1 = 5 (left: 1 5 6)",
                "6 - 4 = 2 (left: 1 2 6)",
                "6 - 1 = 5 (left: 1 4 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                41.0,
                21.0,
                0.002,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.0",
                "3 <- INIT",
                "4 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "6 - 1 = 5 (left: 1 4 5)",
                "6 - 4 = 2 (left: 1 2 6)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "6 / 4 = 1.5 (left: 1 1.5 6)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                1.002,
                60.0,
                21.001,
                0.002
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- INIT",
                "2 <- 1.2",
                "3 <- 1.3",
                "4 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "6 / 1 = 6 (left: 4 6 6)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 - 1 = 23 (left: 1 23)",
                "6 / 4 = 1.5 (left: 1 1.5 6) || 1 / 1.5 = 0.6666666666666666 (left: 0.6666666666666666 6)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                22.0,
                0.0,
                1.001,
                60.0
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 0.1",
                "2 <- 1.3",
                "3 <- 1.2",
                "4 <- 2.4"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: 1 * (1 * 4 * 6) = 24",
                "6 - 1 = 5 (left: 1 4 5) || 1 * 4 = 4 (left: 4 5)",
                "6 / 4 = 1.5 (left: 1 1.5 6) || 1 + 1.5 = 2.5 (left: 2.5 6)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 * 1) * (4 * 6) = 24"
            ]
        },
        "Input": "1 1 4 6",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "1": {
        "puzzle": "1 1 11 11",
        "Step 0": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11)",
                "1 * 1 = 1 (left: 1 11 11)",
                "11 - 1 = 10 (left: 1 10 11)",
                "11 / 1 = 11 (left: 1 11 ",
                "11 - 1 = 10 (left: 1 11 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11)",
                "11 - 1 = 10 (left: 1 10 11)",
                "11 - 1 = 10 (left: 1 11 10)",
                "1 + 1 = 2 (left: 2 11 11)",
                "1 * 1 = 1 (left: 1 11 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                1.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "11 - 1 = 10 (left: 1 10 11)",
                "1 * 1 = 1 (left: 1 11 11)",
                "1 - 1 = 0 (left: 0 11 11)",
                "1 * 1 = 1 (left: 1 11 11)",
                "1 + 1 = 2 (left: 2 11 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                20.002,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 2.1",
                "3 <- 1.2",
                "4 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "11 / 1 = 11 (left: 1 11 ",
                "11 / 1 = 11 (left: 1 11 ",
                "1 * 1 = 1 (left: 1 11 11) || 1 + 11 = 12 (left: 11 11 12)",
                "11 - 1 = 10 (left: 1 11 10) || 11 / 1 = 11 (left: 11 10)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 10 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.0,
                60.0,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 3.1",
                "2 <- 3.1",
                "3 <- 3.1",
                "4 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "11 / 1 = 11 (left: 1 11  || 11 / 1 = 11 (left: 11)",
                "11 / 1 = 11 (left: 1 11  || 11 / 1 = 11 (left: 11)",
                "11 / 1 = 11 (left: 1 11  || 11 * 1 = 11 (left: 11)",
                "11 / 1 = 11 (left: 1 11  || 11 / 1 = 11 (left: 11)",
                "11 / 1 = 11 (left: 1 11  || 1 * 11 = 11 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.002,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 3.0",
                "2 <- 2.1",
                "3 <- INIT",
                "4 <- 3.0"
            ]
        },
        "Step 5": {
            "steps": [
                "11 / 1 = 11 (left: 1 11  || 11 * 1 = 11 (left: 11)",
                "11 / 1 = 11 (left: 1 11  || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 11 11) || 1 + 11 = 12 (left: 11 11 12)",
                "1 + 1 = 2 (left: 2 11 11)",
                "11 / 1 = 11 (left: 1 11  || 1 + 11 = 12 (left: 12) "
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.001,
                0.003,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 5.3",
                "2 <- 5.3",
                "3 <- 5.3",
                "4 <- 3.1"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 11) || Input: 5 5 10",
                "1 + 1 = 2 (left: 2 11 11) || 11 - 2 = 9 (left: 9 11)",
                "1 + 1 = 2 (left: 2 11 11) || 11 / 2 = 5.5 (left: 5.5 11)",
                "1 + 1 = 2 (left: 2 11 11) || Possible next steps:",
                "11 / 1 = 11 (left: 1 11  || 1 + 11 = 12 (left: 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                2.0,
                1.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 6.2",
                "2 <- 3.1",
                "3 <- 3.0",
                "4 <- 3.1"
            ]
        },
        "Step 7": {
            "steps": [
                "11 / 1 = 11 (left: 1 11  || 11 - 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 11 11) || 11 / 2 = 5.5 (left: 5.5 11) || 5.5 + 11 = 16.5 (left: 16.5)",
                "11 / 1 = 11 (left: 1 11  || 1 + 11 = 12 (left: 12)",
                "11 / 1 = 11 (left: 1 11  || 11 / 1 = 11 (left: 11)",
                "11 / 1 = 11 (left: 1 11  || 11 / 1 = 11 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 3.0",
                "2 <- INIT",
                "3 <- 3.0",
                "4 <- 5.3"
            ]
        },
        "Step 8": {
            "steps": [
                "11 / 1 = 11 (left: 1 11  || 1 * 11 = 11 (left: 11)",
                "11 / 1 = 11 (left: 1 11  || 13 - 3 =",
                "1 * 1 = 1 (left: 1 11 11)",
                "11 / 1 = 11 (left: 1 11  || 1 + 11 = 12 (left: 12)",
                "1 + 1 = 2 (left: 2 11 11) || 11 * 2 = 22 (left: 11 22)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 3.1",
                "2 <- 3.1",
                "3 <- 3.1",
                "4 <- 5.3"
            ]
        },
        "Step 9": {
            "steps": [
                "11 / 1 = 11 (left: 1 11  || 11 - 1 = 10 (left: 10)",
                "11 / 1 = 11 (left: 1 11  || 1 * 11 = 11 (left: 11)",
                "11 / 1 = 11 (left: 1 11  || 1 + 11 = 12 (left: 12)",
                "11 / 1 = 11 (left: 1 11  || 1 + 11 = 12 (left: 12)",
                "1 + 1 = 2 (left: 2 11 11) || 11 / 2 = 5.5 (left: 5.5 11 11)"
            ],
            "Pruning": []
        },
        "Input": "1 1 11 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "2": {
        "puzzle": "1 1 3 8",
        "Step 0": {
            "steps": [
                "3 + 1 = 4 (left: 4 3 8)",
                "8 - 3 = 5 (left: 1 1 5)",
                "8 - 3 = 5 (left: 1 3 5)",
                "1 + 1 = 2 (left: 2 3 8)",
                "3 * 1 = 3 (left: 3 1 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.0,
                2.001,
                1.002,
                2.001,
                60.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.4",
                "2 <- 0.4",
                "3 <- 0.4",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 8) || 8 / 3 = 2 (left: 2 3)",
                "3 * 1 = 3 (left: 3 1 8) || 8 / 3 = 2 (left:",
                "3 * 1 = 3 (left: 3 1 8) || 8 - 1 = 7 (left: 3 7)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 1 3 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.001,
                0.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.4",
                "2 <- 1.3",
                "3 <- 1.4",
                "4 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 1 = 3 (left: 3 1 8) || 8 / 1 = 8 (left: 3 8)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                60.0,
                60.0,
                0.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 2.1",
                "2 <- 1.3",
                "3 <- 2.2",
                "4 <- 1.4"
            ]
        },
        "Step 3": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 8) || 1 + 8 = 9 (left: 3 9)",
                "3 * 1 = 3 (left: 3 1 8) || 8 / 1 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 8 / 3 = 2.66666666667 (left: 2.66666666667)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24)"
            ],
            "Pruning": [
                "3<-2.4"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.001,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 3.3",
                "2 <- 3.4",
                "3 <- 2.2",
                "4 <- 2.2"
            ]
        },
        "Step 4": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8) || 1 + 3 = 4 (left: 4 8)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 + 1 = 25 (left: 25)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 1) * 8 = 24",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 1) * 8 = 24"
            ],
            "Pruning": [
                "1<-1.4",
                "3<-3.4",
                "4<-2.4"
            ],
            "Evaluation": [
                0.003,
                60.0,
                20.001,
                40.0,
                60.0
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 2.2",
                "2 <- 3.3",
                "3 <- 4.4",
                "4 <- 2.2"
            ]
        },
        "Step 5": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 + 1 = 25 (left: 25) || 25 + 8 = 33 (left: 8)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 1) * 8 = 24",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 1) * 8 = 24",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 1 * 8) = 24"
            ],
            "Pruning": [
                "0<-4.4",
                "1<-3.4",
                "2<-4.1",
                "3<-1.4",
                "4<-2.2"
            ],
            "Evaluation": [
                60.0,
                60.0,
                22.0,
                40.001,
                60.0
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 4.4",
                "2 <- 5.1",
                "3 <- 5.2",
                "4 <- 5.4"
            ]
        },
        "Step 6": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8) || 3 / 1 = 3 (left:",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (1 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 24 = 1 (left: 1)",
                "3 * 1 = 3 (left: 1 3 8) || 3 / 8 = 0.375 (left: 1 0.375)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24"
            ]
        },
        "Input": "1 1 3 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            }
        ]
    },
    "3": {
        "puzzle": "1 1 1 8",
        "Step 0": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 ",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 * 1 = 1 (left: 1 1 8)",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 + 8 = 9 (left: 1 1 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                22.0,
                1.001,
                60.0,
                0.001
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.3",
                "2 <- 0.3",
                "3 <- INIT",
                "4 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 8 - 1 = 7 (left:",
                "1 + 1 = 2 (left: 1 2 8) || 1 * 8 = 8 (left: 2 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)",
                "8 / 1 = 8 (left: 1 1 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.0,
                0.003,
                0.002,
                1.002,
                60.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 0.3",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 + 1 = 2 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                60.0,
                60.0,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 0.3",
                "2 <- 1.4",
                "3 <- 2.2",
                "4 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)",
                "1 + 1 = 2 (left: 1 2 8) || Input: 3 5 7",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 5 * 10 = 50"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.002,
                0.002,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 3.3",
                "2 <- 2.2",
                "3 <- 0.3",
                "4 <- 2.2"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || Possible next steps:",
                "1 + 1 = 2 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                1.002,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 2.2",
                "2 <- 4.4",
                "3 <- 2.1",
                "4 <- 4.3"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 8 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                60.0,
                0.003,
                60.0,
                2.001
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 2.2",
                "2 <- 5.1",
                "3 <- 4.4",
                "4 <- 2.2"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 1) * (1 + 8) = 24",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.66667 (left: 2.66667 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)"
            ],
            "Pruning": [
                "0<-5.1"
            ],
            "Evaluation": [
                60.0,
                60.0,
                2.001,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 6.0",
                "2 <- 2.1",
                "3 <- 5.3",
                "4 <- 6.4"
            ]
        },
        "Step 7": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 1) * (1 + 8) = 24",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 ^ 8 = 6561 (left: 6561)"
            ],
            "Pruning": [
                "3<-4.4"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.002,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 6.4",
                "2 <- 7.3",
                "3 <- 7.0",
                "4 <- 7.0"
            ]
        },
        "Step 8": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 1) * (1 + 8) = 24",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 1) * (1 + 8) = 24"
            ],
            "Pruning": [
                "3<-6.0",
                "4<-4.4"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 8.3",
                "1 <- 8.4",
                "2 <- 8.4",
                "3 <- 2.2",
                "4 <- 8.4"
            ]
        },
        "Step 9": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)"
            ],
            "Pruning": []
        },
        "Input": "1 1 1 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "4": {
        "puzzle": "6 6 6 6",
        "Step 0": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6)",
                "6 * 6 = 36 (left: 6 6 36 6)",
                "6 / 6 = 1 (left: 1 6 6)",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 - 6 = 0 (left: 0 6 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                41.0,
                1.001,
                41.0,
                22.0,
                20.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.0",
                "2 <- INIT",
                "3 <- 0.4",
                "4 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6) || 6 * 12 = 72 (left: 72 6)",
                "6 + 6 = 12 (left: 6 12 6) || 6 / 12 = 0.5 (",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 0 = 0 (left: 6 6)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                21.001,
                0.003,
                41.0,
                20.002,
                3.0
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 1.0",
                "2 <- 0.4",
                "3 <- 0.4",
                "4 <- 0.0"
            ]
        },
        "Step 2": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 18 6)",
                "6 + 6 = 12 (left: 6 12 6) || 6 * 12 = 72 (left: 72 6) || 72 - 6 = 66 (left: 66)",
                "6 - 6 = 0 (left: 0 6 6) || 6 - 0 = 6 (left: 6 6)",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 6 = 36 (left: 6 36)",
                "6 + 6 = 12 (left: 6 12 6) || 6 * 12 = 72 (left: 72 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.001,
                0.003,
                20.002,
                0.003,
                21.0
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.3",
                "2 <- 2.0",
                "3 <- 1.0",
                "4 <- 2.0"
            ]
        },
        "Step 3": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6) || 6 * 12 = 72 (left: 6 72 6)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 6 18)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 18 6) || 18 - 6 = 12 (left: 12)",
                "6 + 6 = 12 (left: 6 12 6) || 6 * 12 = 72 (left: 72 6) || 72 * 6 = 432 (left: 432)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 18 6) || 18 + 6 = 24 (left: 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                40.001,
                0.002,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.3",
                "2 <- 3.4",
                "3 <- 1.0",
                "4 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "6 - 6 = 0 (left: 0 6 6) || 6 / 6 = 1 (left: 0 1)",
                "6 + 6 = 12 (left: 6 12 6) || 12 - 6 = 6 (left: 6",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 18 6) || 18 + 6 = 24 (left: 24) || Answer: ((6 + 6) + 6) + 6 = 24",
                "6 + 6 = 12 (left: 6 12 6) || 6 * 12 = 72 (left: 72 6) || 72 - 6 = 66 (left: 66)",
                "6 + 6 = 12 (left: 6 12 6) || 6 * 12 = 72 (left: 6 72 6) || 6 + 72 = 78 (left: 78 6)"
            ]
        },
        "Input": "6 6 6 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "5": {
        "puzzle": "1 1 2 12",
        "Step 0": {
            "steps": [
                "12 / 2 = 6 (left: 1 2 6)",
                "1 + 1 = 2 (left: 2 2 12)",
                "1 + 1 = 2 (left: 2 2 12)",
                "12 - 2 = 10 (left: 1 2 10)",
                "1 + 1 = 2 (left: 2 2 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                2.001,
                0.003,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.1",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 1 = 11 (left: 1 2 ",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 12)",
                "1 * 1 = 1 (left: 1 2 12)",
                "12 / 2 = 6 (left: 1 2 6)",
                "12 - 2 = 10 (left: 1 2 10) || 1 + 2 = 3 (left: 3 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                60.0,
                1.002,
                0.001
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 0.3",
                "2 <- 1.2",
                "3 <- 1.2",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 1 * 2 = 2 (left:",
                "12 - 2 = 10 (left: 1 2 10) || 1 + 2 = 3 (left: 3 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "1 * 1 = 1 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)",
                "12 / 2 = 6 (left: 1 2 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                40.0,
                60.0,
                1.002
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.3",
                "2 <- INIT",
                "3 <- 2.3",
                "4 <- 2.2"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 2 12)",
                "1 * 1 = 1 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 3.1",
                "2 <- 3.2",
                "3 <- 2.3",
                "4 <- 3.1"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "1 * 1 = 1 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (2 * 12) = 24",
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "1 * 1 = 1 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (2 * 12) = 24"
            ]
        },
        "Input": "1 1 2 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "6": {
        "puzzle": "1 2 2 6",
        "Step 0": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6)",
                "1 * 2 = 2 (left: 2 2 6)",
                "2 * 2 = 4 (left: 4 2 6)",
                "6 / 2 = 3 (left: 2 3 ",
                "2 * 2 = 4 (left: 4 2 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                60.0,
                1.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.1",
                "2 <- 0.1",
                "3 <- 0.1",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6)",
                "1 * 2 = 2 (left: 2 2 6) || Input: 3 3 5",
                "1 * 2 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 4)",
                "1 * 2 = 2 (left: 2 2 6) || 2 - 2 = 0 (left: 0 6)",
                "6 - 2 = 4 (left: 1 2 4)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.0,
                0.003,
                0.003,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.0",
                "2 <- 1.3",
                "3 <- 0.0",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "1 * 2 = 2 (left: 2 2 6) || 2 - 2 = 0 (left: 0 6) || 0 * 6 = 0 (left: 0)",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:",
                "6 / 2 = 3 (left: 2 3 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.0,
                0.003,
                0.002,
                0.003,
                41.0
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 2.4",
                "3 <- 2.0",
                "4 <- 1.0"
            ]
        },
        "Step 3": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "2 / 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 20 / 10 = 2 (left: 2 30)",
                "6 / 2 = 3 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6)",
                "2 / 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5) "
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                40.001,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.1",
                "2 <- 2.0",
                "3 <- 2.0",
                "4 <- 2.0"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 2 = 2 (left: 2 2 6) || 2 - 2 = 0 (left: 0 6) || 0 * 6 = 0 (left: 6)",
                "1 * 2 = 2 (left: 2 2 6) || 2 - 2 = 0 (left: 0 6)",
                "2 / 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 / 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "2 / 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                60.0,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 3.2",
                "2 <- 4.1",
                "3 <- 1.0",
                "4 <- 2.4"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 2 = 2 (left: 2 2 6) || 2 - 2 = 0 (left: 0 6) || 6 - 0 = 6 (left: 6)",
                "6 / 2 = 3 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6) || 6 + 6 = 12 (left: 12)",
                "1 * 2 = 2 (left: 2 2 6) || 2 - 2 = 0 (left: 0 6) || 0 + 6 = 6 (left: 6)",
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "6 / 2 = 3 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.002,
                41.0
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 2.4",
                "2 <- 2.0",
                "3 <- 2.4",
                "4 <- 3.2"
            ]
        },
        "Step 6": {
            "steps": [
                "6 / 2 = 3 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18)",
                "6 / 2 = 3 (left: 2 3 6) || 7 - 3 = 4 (left: 4",
                "2 / 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 3 - 9 = -6 (left:",
                "6 / 2 = 3 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6)",
                "6 / 2 = 3 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.002,
                0.0,
                0.003,
                40.0
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 6.0",
                "2 <- 2.4",
                "3 <- 6.4",
                "4 <- 4.1"
            ]
        },
        "Step 7": {
            "steps": [
                "6 / 2 = 3 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "6 / 2 = 3 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "6 / 2 = 3 (left: 2 3 6) || 6 + 2 = 8 (left: 3 8)",
                "6 / 2 = 3 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || There are no possible next steps with the input of 36 as it is already a single number.",
                "1 * 2 = 2 (left: 2 2 6) || 2 - 2 = 0 (left: 0 6) || 6 / 0 = undefined (division by zero is undefined)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 7.2",
                "1 <- 6.0",
                "2 <- 4.1",
                "3 <- 7.2",
                "4 <- 6.0"
            ]
        },
        "Step 8": {
            "steps": [
                "6 / 2 = 3 (left: 2 3 6) || 6 + 2 = 8 (left: 3 8) || 3 * 8 = 24 (left: 8 24)",
                "6 / 2 = 3 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18) || There are no possible next steps as there are no other numbers provided to perform operations with.",
                "1 * 2 = 2 (left: 2 2 6) || 2 - 2 = 0 (left: 0 6) || 10 - 4 = 6 (left: 6)",
                "6 / 2 = 3 (left: 2 3 6) || 6 + 2 = 8 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "6 / 2 = 3 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18) || There are no possible next steps with the given input of 18."
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.003,
                0.001,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 7.2",
                "1 <- 5.4",
                "2 <- 6.0",
                "3 <- 4.1",
                "4 <- 7.2"
            ]
        },
        "Step 9": {
            "steps": [
                "6 / 2 = 3 (left: 2 3 6) || 6 + 2 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "6 / 2 = 3 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 6 / 3 = 2 (left: 2)",
                "6 / 2 = 3 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18) || 18 / 2 = 9 (left: 9 8)",
                "1 * 2 = 2 (left: 2 2 6) || 2 - 2 = 0 (left: 0 6) || 0 + 6 = 6 (left: 6)",
                "6 / 2 = 3 (left: 2 3 6) || 6 + 2 = 8 (left: 3 8) || 3 + 8 = 11 (left: 11)"
            ],
            "Pruning": []
        },
        "Input": "1 2 2 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "7": {
        "puzzle": "1 1 10 12",
        "Step 0": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 10 12)",
                "1 + 1 = 2 (left: 2 10 12)",
                "1 * 10 = 10 (left: 10 1 12)",
                "1 + 1 = 2 (left: 2 10 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                1.002,
                0.003,
                1.001,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.0",
                "2 <- INIT",
                "3 <- 0.0",
                "4 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 10 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 10 = 2 (left: 1 2 12)",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12)",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.001,
                0.002,
                60.0,
                20.002,
                60.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 1.4",
                "2 <- 1.2",
                "3 <- 1.4",
                "4 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.3",
                "2 <- 2.3",
                "3 <- 2.3",
                "4 <- 1.4"
            ]
        },
        "Step 3": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (10 + 1) + (1 + 11) = 24",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((1 + 1) + 10) + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (10 + 1) + (1 + 11) = 24",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (10 + 1) + (1 + 12) = 24",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)"
            ]
        },
        "Input": "1 1 10 12",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": 1
            },
            {
                "r": -1
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "8": {
        "puzzle": "2 2 10 10",
        "Step 0": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 - 2 = 8 (left: 2 8 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                1.002,
                0.003,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.0",
                "2 <- INIT",
                "3 <- 0.0",
                "4 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 + 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                2.001,
                20.002,
                1.002,
                2.001
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- 1.2",
                "3 <- 0.0",
                "4 <- 0.0"
            ]
        },
        "Step 2": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 10 40)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                3.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.0",
                "2 <- INIT",
                "3 <- 1.2",
                "4 <- 2.2"
            ]
        },
        "Step 3": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14)",
                "2 * 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 10 = 0 (left: 4 0)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.0,
                20.002,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.0",
                "4 <- 3.1"
            ]
        },
        "Step 4": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14) || 10 + 10 = 20 (left: 20 14)",
                "2 + 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14) || 10 - 10 = 0 (left: 0 14)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                21.001,
                0.003,
                0.002,
                0.0
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 4.1",
                "2 <- 3.1",
                "3 <- 4.1",
                "4 <- 4.1"
            ]
        },
        "Step 5": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: ",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14) || 14 + 10 = 24 (left: 10 24)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                1.001,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 4.1",
                "2 <- INIT",
                "3 <- 3.1",
                "4 <- 4.1"
            ]
        },
        "Step 6": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left",
                "10 / 2 = 5 (left: 2 10 5)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14) || 10 - 10 = 0 (left: 0 14)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 14)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                0.0,
                3.0,
                0.0,
                60.0
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 6.4",
                "2 <- 6.0",
                "3 <- 6.0",
                "4 <- 6.4"
            ]
        },
        "Step 7": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 14) || 10 - 14 = -4 (left: -4 14)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 14) || 10 + 14 = 24 (left: 24)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14) || 14 / 10 = 1.4 (",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14) || 14 / 10 = 1.4 (",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 14) || 10 / 14 = 0.7142857142857143 (left: 0.7142857142857143)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                60.0,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 6.4",
                "2 <- 4.1",
                "3 <- 6.0",
                "4 <- 6.4"
            ]
        },
        "Step 8": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14) || 14 / 10 = 1.4 (",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 14) || 10 / 14 = 0.7142857142857143 (left: 0.7142857142857143)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14) || 10 / 10 = 1 (left: 1 14)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 14) || 10 + 14 = 24 (left: 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.0,
                20.001,
                20.0
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 4.1",
                "2 <- 7.1",
                "3 <- 7.1",
                "4 <- 7.1"
            ]
        },
        "Step 9": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 14) || 10 * 14 = 140 (left: 140)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 14) || 10 + 14 = 24 (left: 24) || Answer: ((2 + 2) + 10) + 10 = 24",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 14) || 10 + 14 = 24 (left: 24) || Answer: ((2 + 2) + 10) + 10 = 24",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 14) || 10 + 14 = 24 (left: 24) || Answer: ((2 + 2) + 10) + 10 = 24"
            ]
        },
        "Input": "2 2 10 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            }
        ]
    },
    "9": {
        "puzzle": "1 1 1 12",
        "Step 0": {
            "steps": [
                "12 - 1 = 11 (left: 1 1 11)",
                "1 + 1 = 2 (left: 1 2 12)",
                "1 * 1 = 1 (left: 1 1 12)",
                "12 - 1 = 11 (left: 1 1 11)",
                "1 + 1 = 2 (left: 1 2 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                60.0,
                60.0,
                1.002,
                60.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- INIT",
                "2 <- 0.2",
                "3 <- 0.2",
                "4 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "1 / 1 = 1 (left: 1 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12)",
                "1 * 1 = 1 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                41.0,
                20.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 1.4",
                "2 <- 0.4",
                "3 <- 1.4",
                "4 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 0 + 12 = 12 (left: 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                60.0,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- INIT",
                "2 <- 2.1",
                "3 <- 0.1",
                "4 <- 0.2"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "12 / 1 = 12 (left: 1 1 12)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (1 + 1) * (1 * 12) = 24",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)",
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12)"
            ]
        },
        "Input": "1 1 1 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "10": {
        "puzzle": "1 1 2 8",
        "Step 0": {
            "steps": [
                "8 - 1 = 7 (left: 1 2 7)",
                "8 - 2 = 6 (left: 1 2 6)",
                "2 + 8 = 10 (left: 1 10 ",
                "8 / 2 = 4 (left: 1 1 4)",
                "1 * 1 = 1 (left: 1 2 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                1.002,
                60.0,
                1.002,
                22.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.4",
                "2 <- 0.4",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "2 + 8 = 10 (left: 1 10  || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 8) || Input: 3 5 7 9",
                "1 * 1 = 1 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "8 / 2 = 4 (left: 1 4 ",
                "1 + 1 = 2 (left: 2 2 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                0.002,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.2",
                "2 <- INIT",
                "3 <- 0.2",
                "4 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10)",
                "2 + 8 = 10 (left: 1 10  || 1 * 10 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 2 8)",
                "2 + 8 = 10 (left: 1 10  || 10 - 10 = 0 (left: 0)",
                "2 + 8 = 10 (left: 1 10  || 10 - 1 = 9 (left: 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.002,
                1.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 2.0",
                "3 <- 0.2",
                "4 <- 0.2"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "2 + 8 = 10 (left: 1 10  || 10 - 1 = 9 (left: 9)",
                "2 + 8 = 10 (left: 1 10  || 1 * 10 = 10 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.001,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 0.4",
                "2 <- 2.0",
                "3 <- INIT",
                "4 <- 2.0"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 / 10 = 0.1 (left: 0.1)",
                "1 * 1 = 1 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "8 / 2 = 4 (left: 1 4 8)",
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.001,
                0.002,
                2.0,
                0.002
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 0.4",
                "2 <- 4.3",
                "3 <- 2.0",
                "4 <- 2.0"
            ]
        },
        "Step 5": {
            "steps": [
                "8 / 2 = 4 (left: 1 4 8) || 1 + 4 = 5 (left: 5 8)",
                "1 * 1 = 1 (left: 1 2 8) || 2 * 1 = 2 (left: 2 8)",
                "8 / 2 = 4 (left: 1 4 8) || 1 * 4 = 4 (left: 4 8)",
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.001,
                0.002,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 2.0",
                "2 <- 2.0",
                "3 <- 2.0",
                "4 <- 2.0"
            ]
        },
        "Step 6": {
            "steps": [
                "2 + 8 = 10 (left: 1 10  || 10 * 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 3 + 6 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.0,
                0.001,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 2.0",
                "2 <- 2.0",
                "3 <- 4.3",
                "4 <- 4.3"
            ]
        },
        "Step 7": {
            "steps": [
                "2 + 8 = 10 (left: 1 10  || 10 + 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "8 / 2 = 4 (left: 1 4 8) || 4 - 1 = 3 (left: 3 8)",
                "8 / 2 = 4 (left: 1 4 8) || 1 + 4 = 5 (left: 5 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 7.3",
                "1 <- 7.3",
                "2 <- 7.3",
                "3 <- 7.3",
                "4 <- 7.3"
            ]
        },
        "Step 8": {
            "steps": [
                "8 / 2 = 4 (left: 1 4 8) || 4 - 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 / 2 = 4 (left: 1 4 8) || 4 - 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 / 2 = 4 (left: 1 4 8) || 4 - 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 8 24)",
                "8 / 2 = 4 (left: 1 4 8) || 4 - 1 = 3 (left: 3 8) || 3 + 8 = 11 (left: 8 11)",
                "8 / 2 = 4 (left: 1 4 8) || 4 - 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.002,
                40.001,
                1.001,
                0.002
            ],
            "Resampling": [
                "0 <- 8.2",
                "1 <- 7.3",
                "2 <- 7.3",
                "3 <- 7.3",
                "4 <- 2.0"
            ]
        },
        "Step 9": {
            "steps": [
                "8 / 2 = 4 (left: 1 4 8) || 4 - 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3)",
                "8 / 2 = 4 (left: 1 4 8) || 4 - 1 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "8 / 2 = 4 (left: 1 4 8) || 4 - 1 = 3 (left: 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "8 / 2 = 4 (left: 1 4 8) || 4 - 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)"
            ],
            "Pruning": [
                "0<-8.2"
            ]
        },
        "Input": "1 1 2 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "11": {
        "puzzle": "1 1 4 8",
        "Step 0": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 8)",
                "4 * 1 = 4 (left: 4 4 ",
                "1 * 1 = 1 (left: 1 4 8)",
                "1 + 1 = 2 (left: 2 4 8)",
                "1 * 1 = 1 (left: 1 4 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "4 * 1 = 4 (left: 1 4 8)",
                "1 * 4 = 4 (left: 4 4 8)",
                "8 - 4 = 4 (left: 1 4 4)",
                "8 / 4 = 2 (left: 1 2 8)",
                "1 * 1 = 1 (left: 1 4 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                22.0,
                2.001,
                60.0,
                2.001
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.2",
                "2 <- 1.0",
                "3 <- INIT",
                "4 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 4 = 4 (left: 4 4 8) || 8 - 4 = 4 (left: 4 8)",
                "8 - 4 = 4 (left: 1 4 4) || 4 * 1 = 4 (left: 4 4)",
                "4 * 1 = 4 (left: 1 4 8) || 1 + 4 = 5 (left: 5 8)",
                "1 * 4 = 4 (left: 4 4 8)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                3.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.4",
                "2 <- 2.4",
                "3 <- 1.1",
                "4 <- 2.4"
            ]
        },
        "Step 3": {
            "steps": [
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 6 * 9 = 54 (left: 4 54)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "1 * 4 = 4 (left: 4 4 8) || 4 - 4 = 0 (left: 0 8)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 - 8 = -5 (left: -5)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                0.0,
                0.002,
                0.0
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.3",
                "2 <- 3.0",
                "3 <- 3.0",
                "4 <- 1.3"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 4 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8)",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 8 / 4) * 8 = 24",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 8 / 4) * 8 = 24",
                "8 / 4 = 2 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)"
            ],
            "Pruning": [
                "2<-2.4",
                "3<-3.0"
            ],
            "Evaluation": [
                40.001,
                60.0,
                60.0,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 4.0",
                "2 <- 4.2",
                "3 <- 4.2",
                "4 <- 4.0"
            ]
        },
        "Step 5": {
            "steps": [
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || Possible next steps:",
                "1 * 4 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 / 8 = 2 (left: 2)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.66667 (left: 2.66667)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 * 4 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 * 8 = 128 (left: 128)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                0.002,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- INIT",
                "2 <- 4.2",
                "3 <- 4.0",
                "4 <- 3.0"
            ]
        },
        "Step 6": {
            "steps": [
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 1 + 4) * 8 = 24",
                "4 * 1 = 4 (left: 4 4 8)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || Input: 4 7 9",
                "1 * 4 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 / 8 = 2 (left: 2 8)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 8 / 4) * 8 = 24"
            ],
            "Pruning": [
                "0<-4.2",
                "4<-4.2"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.003,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 6.0",
                "2 <- 6.1",
                "3 <- 4.2",
                "4 <- 6.1"
            ]
        },
        "Step 7": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8) || 8 - 4 = 4 (left: 4 8)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67 8)",
                "4 * 1 = 4 (left: 4 4 8) || 8 - 4 = 4 (left: 4 4)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                20.001,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 6.1",
                "2 <- 6.4",
                "3 <- 6.0",
                "4 <- 6.1"
            ]
        },
        "Step 8": {
            "steps": [
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "4 * 1 = 4 (left: 4 4 8) || 4 - 4 = 0 (left: 0 8)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                20.0,
                0.003,
                0.0,
                40.001
            ],
            "Resampling": [
                "0 <- 8.4",
                "1 <- 6.0",
                "2 <- 8.1",
                "3 <- 6.4",
                "4 <- 8.4"
            ]
        },
        "Step 9": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 8 + 16 = 24 (left: 16)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.6667 (left: 2.6667)",
                "4 * 1 = 4 (left: 4 4 8) || 4 - 4 = 0 (left: 0 8) || 0 + 8 = 8 (left: 8)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 + 8 = 24 (left: 8 24)"
            ],
            "Pruning": []
        },
        "Input": "1 1 4 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "12": {
        "puzzle": "1 1 5 8",
        "Step 0": {
            "steps": [
                "1 + 1 = 2 (left: 2 5 8)",
                "5 + 1 = 6 (left: 6 1 8)",
                "5 + 1 = 6 (left: 1 6 8)",
                "1 - 1 = 0 (left: 0 5 8)",
                "1 * 1 = 1 (left: 1 5 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                2.001,
                0.003,
                2.001,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 8)",
                "8 - 1 = 7 (left: 1 5 7)",
                "1 + 5 = 6 (left: 6 6 8)",
                "5 - 1 = 4 (left: 1 4 8)",
                "8 - 1 = 7 (left: 1 5 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.001,
                1.002,
                3.0,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "5 - 1 = 4 (left: 1 4 ",
                "1 + 1 = 2 (left: 2 5 8)",
                "1 * 5 = 5 (left: 1 5 8)",
                "8 - 1 = 7 (left: 1 5 7)",
                "1 + 8 = 9 (left: 1 5 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                3.0,
                3.0,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.3",
                "4 <- 1.2"
            ]
        },
        "Step 3": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8)",
                "1 + 1 = 2 (left: 2 5 8)",
                "5 - 1 = 4 (left: 1 4 8)",
                "1 - 1 = 0 (left: 0 5 8) || 8 / 5 = 1.6 (left: 0 1.6)",
                "1 + 5 = 6 (left: 6 6 8) || 8 / 6 = 1.33 (left: 1.33 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                3.0,
                0.002,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24)",
                "1 + 1 = 2 (left: 2 5 8)",
                "1 * 1 = 1 (left: 1 5 8)",
                "1 + 1 = 2 (left: 2 5 8)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                2.001,
                2.001,
                2.001,
                60.0
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 3.0",
                "2 <- 4.0",
                "3 <- 4.4",
                "4 <- 3.0"
            ]
        },
        "Step 5": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "8 - 5 = 3 (left: 1 3 8) || 1 + 3 = 4 (left: 4 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                40.0,
                60.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 3.0",
                "2 <- 5.2",
                "3 <- 5.0",
                "4 <- 4.0"
            ]
        },
        "Step 6": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: 1 * (8 - 5) * 24 = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (8 - 5) * (1 + 1) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: 1 * (8 - 5) * 24 = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)"
            ],
            "Pruning": [
                "0<-5.2",
                "2<-4.0",
                "3<-5.1"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 6.0",
                "2 <- 4.0",
                "3 <- 6.1",
                "4 <- 6.3"
            ]
        },
        "Step 7": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (8 - 5) * (1 * 1) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (8 - 5) * (1 * 1) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 1 + 5 = 6 (left: 6)"
            ],
            "Pruning": [
                "0<-6.0",
                "1<-6.1"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 7.0",
                "1 <- 6.0",
                "2 <- 6.0",
                "3 <- 7.2",
                "4 <- 7.0"
            ]
        },
        "Step 8": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: 24 / (1 / (8 - 5)) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (8 - 5) * (1 * 1) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (8 - 5) * (1 * 1) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (8 - 5) * (1 * 1) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (8 - 5) * (1 * 1) = 24"
            ],
            "Pruning": [
                "0<-6.2",
                "1<-6.0",
                "2<-7.0",
                "3<-5.2",
                "4<-7.0"
            ],
            "Evaluation": [
                60.0,
                60.0,
                40.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 8.4",
                "1 <- 6.0",
                "2 <- 5.3",
                "3 <- 8.4",
                "4 <- 6.3"
            ]
        },
        "Step 9": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (8 - 5) * (1 * 1) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (8 - 5) * (1 * 1) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: 1 * (8 - 5) * 24 = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (8 - 5) * (1 * 1) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)"
            ],
            "Pruning": [
                "0<-8.3",
                "1<-8.3",
                "2<-8.1",
                "3<-8.0"
            ]
        },
        "Input": "1 1 5 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "13": {
        "puzzle": "4 6 11 11",
        "Step 0": {
            "steps": [
                "6 - 4 = 2 (left: 2 11 11)",
                "11 - 4 = 7 (left: 6 7 ",
                "4 * 6 = 24 (left: 11 11 24)",
                "6 * 11 = 66 (left: 4 66 11)",
                "4 * 6 = 24 (left: 11 11 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.002,
                1.002,
                21.001,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.3",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "4 + 6 = 10 (left: 10 11 11)",
                "6 - 4 = 2 (left: 2 11 11)",
                "4 + 6 = 10 (left: 10 11 11)",
                "6 * 11 = 66 (left: 4 66 11) || 66 - 4 = 62 (left: 62 11)",
                "6 - 4 = 2 (left: 2 11 "
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                20.002,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.1",
                "2 <- 1.1",
                "3 <- 1.1",
                "4 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "11 + 4 = 15 (left: 6 11 15)",
                "6 - 4 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13)",
                "6 - 4 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 11 13)",
                "6 - 4 = 2 (left: 2 11 11) || 11 / 2 = 5.5 (left: ",
                "6 * 11 = 66 (left: 4 66 11) || 66 / 4 = 16.5 (left: 16.5 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                60.0,
                0.003,
                0.0,
                1.002
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 2.1",
                "3 <- 2.1",
                "4 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "6 - 4 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "6 - 4 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 13 / 11 = 1.1818181818181819 (left: 1.1818181818181819)",
                "6 - 4 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "6 - 4 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "6 - 4 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 - 13 = -2 (left: -2)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.0,
                0.003,
                2.0
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 1.1",
                "2 <- 2.1",
                "3 <- 0.3",
                "4 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "6 - 4 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 / 13 = 0.8461538461538461 (left: 0.8461538461538461)",
                "6 - 4 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13)",
                "6 - 4 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 / 13 = 0.8461538461538461 (left: 0.8461538461538461)",
                "6 * 11 = 66 (left: 4 66 11) || 11 + 4 = 15 (left: 15 66)",
                "6 / 4 = 1.5 (left: 1.5 11 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                60.0,
                0.001,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 4.1",
                "2 <- 4.1",
                "3 <- 4.1",
                "4 <- 4.1"
            ]
        },
        "Step 5": {
            "steps": [
                "6 - 4 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "6 - 4 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 + 13 = 24 (left: 24)",
                "6 - 4 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 + 13 = 24 (left: 24)",
                "6 - 4 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 + 13 = 24 (left: 24)",
                "6 - 4 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 * 13 = 143 (left: 143)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                60.0,
                60.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 4.1",
                "2 <- 5.3",
                "3 <- 4.1",
                "4 <- 5.1"
            ]
        },
        "Step 6": {
            "steps": [
                "6 - 4 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "6 - 4 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 + 13 = 24 (left: 24)",
                "6 - 4 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: (6 - 4) + (11 + 11) = 24",
                "6 - 4 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "6 - 4 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((6 - 4) + 11) + 13 = 24"
            ]
        },
        "Input": "4 6 11 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": -1
            }
        ]
    },
    "14": {
        "puzzle": "1 1 3 12",
        "Step 0": {
            "steps": [
                "12 - 3 = 9 (left: 1 1 9)",
                "1 + 3 = 4 (left: 1 4 12)",
                "1 * 1 = 1 (left: 1 3 12)",
                "1 + 1 = 2 (left: 2 3 12)",
                "3 + 1 = 4 (left: 1 4 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                2.001,
                41.0,
                2.001,
                1.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.3",
                "2 <- INIT",
                "3 <- 0.2",
                "4 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 3 = 9 (left: 1 1 9) || Possible next steps:",
                "1 + 1 = 2 (left: 2 3 12) || 12 / 3 = 4 (left:",
                "12 - 3 = 9 (left: 1 3 ",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.0,
                0.001,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- 0.0",
                "4 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 1 = 2 (left: 2 3 12)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "12 - 3 = 9 (left: 1 1 9) || 9 - 1 = 8 (left: 1 8)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                21.001,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.3",
                "2 <- 1.3",
                "3 <- 0.2",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 12)",
                "12 - 3 = 9 (left: 1 1 9) || 9 - 1 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 3 12) || 3 + 12 = 15 (left: 1 15)",
                "1 * 1 = 1 (left: 1 3 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.0,
                0.002,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 1.3",
                "2 <- 2.3",
                "3 <- 3.4",
                "4 <- 1.3"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 1 + 3 = 4 (left: 4 12)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "12 - 3 = 9 (left: 1 1 9) || 9 - 1 = 8 (left: 1 8) || 1 + 8 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.001,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 3.4",
                "2 <- 3.4",
                "3 <- 1.3",
                "4 <- 2.3"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 12 / 1 = 12 (left: 3 12)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 1 = 11 (left:",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 - 3 = 9 (left: 1 1 9) || 9 - 1 = 8 (left: 1 8) || 1 - 8 = -7 (left: -7)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                40.001,
                0.0,
                0.001
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 5.2",
                "2 <- 5.1",
                "3 <- 5.2",
                "4 <- 5.2"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 1 = 11 (left: || 1 + 12 = 13 (left: 11 13)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 1 = 11 (left: || 12 / 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 1 = 11 (left: || 12 - 1 = 11 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                60.0,
                0.003,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 5.2",
                "2 <- 3.4",
                "3 <- 5.1",
                "4 <- 6.1"
            ]
        },
        "Step 7": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 1 = 11 (left: || 12 / 2 = 6 (left: 6 1)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 1 = 11 (left: || 1 + 12 = 13 (left: 11 13) || 11 * 13 = 143 (left: 143)"
            ],
            "Pruning": [
                "4<-6.1"
            ],
            "Evaluation": [
                60.0,
                20.001,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 7.2",
                "1 <- 7.0",
                "2 <- 7.0",
                "3 <- 7.2",
                "4 <- 7.3"
            ]
        },
        "Step 8": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 - 2) * 12 = 24"
            ],
            "Pruning": [
                "4<-7.2"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.001,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 7.1",
                "2 <- 7.2",
                "3 <- 7.2",
                "4 <- 7.0"
            ]
        },
        "Step 9": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 12 - 1 = 11 (left: || 1 + 12 = 13 (left: 11 13) || 11 + 13 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 1 = 11 (left: || 12 / 2 = 6 (left: 6 1) || 6 * 1 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)"
            ],
            "Pruning": [
                "0<-5.2",
                "1<-8.4"
            ]
        },
        "Input": "1 1 3 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "15": {
        "puzzle": "2 2 2 12",
        "Step 0": {
            "steps": [
                "2 * 2 = 4 (left: 4 2 12)",
                "2 * 12 = 24 (left: 2 24 2)",
                "12 - 2 = 10 (left: 2 2 10)",
                "2 - 2 = 0 (left: 0 2 12)",
                "2 + 2 = 4 (left: 2 4 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                21.001,
                2.001,
                21.001,
                2.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 12 = 24 (left: 2 24 2) || 2 * 24 = 48 (left: 2 48 2)",
                "12 / 2 = 6 (left: 2 2 6)",
                "2 * 2 = 4 (left: 4 2 12)",
                "2 * 12 = 24 (left: 2 24 2) || 2 + 24 = 26 (left: 26 2)",
                "2 * 2 = 4 (left: 4 2 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                60.0,
                1.002,
                20.001,
                3.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.0",
                "2 <- 1.0",
                "3 <- 1.1",
                "4 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 2 = 4 (left: 4 2 12) || 4 - 2 = 2 (left: 2 12)",
                "2 * 12 = 24 (left: 2 24 2) || 2 * 24 = 48 (left: 2 48 2) || 48 - 2 = 46 (left: 2 46 2)",
                "2 * 12 = 24 (left: 2 24 2) || 2 * 24 = 48 (left: 2 48 2) || 2 / 48 = 0.041666666666666664 (left: 2 0.041666666666666664 2)",
                "12 / 2 = 6 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6)",
                "2 - 2 = 0 (left: 0 2 12) || 2 * 0 = 0 (left: 0 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                1.001,
                1.001,
                60.0,
                40.0
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 2.0",
                "2 <- 2.3",
                "3 <- 2.3",
                "4 <- 2.3"
            ]
        },
        "Step 3": {
            "steps": [
                "12 / 2 = 6 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6)",
                "2 * 2 = 4 (left: 4 2 12) || 4 - 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "12 / 2 = 6 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "12 / 2 = 6 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 6 + 4 = 10 (left: 10)",
                "12 / 2 = 6 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 3.0",
                "2 <- 2.0",
                "3 <- 2.0",
                "4 <- 3.1"
            ]
        },
        "Step 4": {
            "steps": [
                "2 * 2 = 4 (left: 4 2 12) || 4 - 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (2 * 2) * (2 * 12) = 24",
                "12 / 2 = 6 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || Possible next steps:",
                "2 * 2 = 4 (left: 4 2 12) || 4 - 2 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "2 * 2 = 4 (left: 4 2 12) || 4 - 2 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "2 * 2 = 4 (left: 4 2 12) || 4 - 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (2 * 2) * (2 * 12) = 24"
            ],
            "Pruning": [
                "0<-1.1",
                "4<-1.1"
            ],
            "Evaluation": [
                40.001,
                0.003,
                0.001,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 0.3",
                "2 <- 4.0",
                "3 <- 2.4",
                "4 <- 4.4"
            ]
        },
        "Step 5": {
            "steps": [
                "12 / 2 = 6 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6)",
                "2 - 2 = 0 (left: 0 2 12) || 12 - 0 =",
                "12 / 2 = 6 (left: 2 2 6) || Possible",
                "2 - 2 = 0 (left: 0 2 12) || 2 * 0 = 0 (left: 0 12) || 0 + 12 = 12",
                "12 / 2 = 6 (left: 2 2 6) || Input: 1 3 5"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 3.1",
                "2 <- 5.0",
                "3 <- 3.1",
                "4 <- 2.3"
            ]
        },
        "Step 6": {
            "steps": [
                "2 * 12 = 24 (left: 2 24 2) || 2 + 24 = 26 (left: 26 2) || 26 + 2 = 28 (left: 28)",
                "2 * 2 = 4 (left: 4 2 12) || 4 - 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (2 * 2) * (2 * 12) = 24",
                "12 / 2 = 6 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "2 * 2 = 4 (left: 4 2 12) || 4 - 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (2 * 2) * (2 * 12) = 24",
                "12 / 2 = 6 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)"
            ],
            "Pruning": [
                "1<-5.0",
                "3<-4.4"
            ],
            "Evaluation": [
                20.002,
                60.0,
                0.001,
                41.0,
                0.002
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 6.3",
                "2 <- 3.0",
                "3 <- 4.4",
                "4 <- 3.2"
            ]
        },
        "Step 7": {
            "steps": [
                "12 / 2 = 6 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "12 / 2 = 6 (left: 2 2 6) || 2 - 2 = 0 (left: 0 6)",
                "12 / 2 = 6 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "12 / 2 = 6 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6)",
                "12 / 2 = 6 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 2 * (2 * (12 / 2)) = 24"
            ]
        },
        "Input": "2 2 2 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "16": {
        "puzzle": "1 1 4 12",
        "Step 0": {
            "steps": [
                "1 / 1 = 1 (left: 1 4 12)",
                "12 / 4 = 3 (left: 1 3 12)",
                "12 * 1 = 12 (left: 1 4 ",
                "1 * 1 = 1 (left: 1 4 12)",
                "12 - 4 = 8 (left: 1 8 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                0.001,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- INIT",
                "4 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12) || 12 - 1 = 11 (left: 3 11)",
                "12 / 4 = 3 (left: 1 3 ",
                "12 / 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9)",
                "1 * 1 = 1 (left: 1 4 12)",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.001,
                60.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.1",
                "2 <- 1.4",
                "3 <- 1.4",
                "4 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36)",
                "12 / 4 = 3 (left: 1 3 12) || 1 + 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 9 / 3 = 3 (left: 3 5)",
                "12 / 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 + 9 = 10 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                40.0,
                1.001,
                0.002
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- INIT",
                "2 <- 2.2",
                "3 <- 2.0",
                "4 <- 2.2"
            ]
        },
        "Step 3": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)",
                "1 * 1 = 1 (left: 1 4 12)",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 + 2 = 38"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 3.0",
                "2 <- 3.0",
                "3 <- 3.0",
                "4 <- 0.1"
            ]
        },
        "Step 4": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 + 36 = 37 (left: 37)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 + 4 = 5",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 4 = 12 (left: 1 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 0.1",
                "2 <- 2.0",
                "3 <- 3.0",
                "4 <- 2.2"
            ]
        },
        "Step 5": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9 9)",
                "12 / 4 = 3 (left: 1 3 12) || 3 + 12 = 15 (left: 1 15)",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 ",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || There are no possible operations to perform on the number 36."
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.001,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 1.4",
                "2 <- 3.0",
                "3 <- 0.1",
                "4 <- 1.2"
            ]
        },
        "Step 6": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 + 9 = 10 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                60.0,
                0.001,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 6.3",
                "2 <- 6.3",
                "3 <- 3.0",
                "4 <- 6.1"
            ]
        },
        "Step 7": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 - 36 = 0 (left: 0)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18"
            ],
            "Pruning": [
                "0<-6.3"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.002,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 7.0",
                "1 <- 6.3",
                "2 <- 6.3",
                "3 <- 6.3",
                "4 <- 7.0"
            ]
        },
        "Step 8": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 + 4 = 5 (left: 4)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                20.001,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 6.1",
                "2 <- 6.3",
                "3 <- 6.1",
                "4 <- INIT"
            ]
        },
        "Step 9": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 * 2 = 72",
                "4 / 1 = 4 (left: 1 4 12)"
            ],
            "Pruning": []
        },
        "Input": "1 1 4 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "17": {
        "puzzle": "1 1 12 12",
        "Step 0": {
            "steps": [
                "12 - 1 = 11 (left: 1 12 11)",
                "12 - 1 = 11 (left: 1 12 11)",
                "1 + 1 = 2 (left: 2 12 12)",
                "12 - 1 = 11 (left: 1 11 12)",
                "12 + 1 = 13 (left: 1 12 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                21.001,
                1.002,
                0.003,
                21.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.0",
                "2 <- 0.0",
                "3 <- 0.3",
                "4 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 1 = 11 (left: 1 12 11) || 12 - 1 = 11 (left: 11 11)",
                "12 - 1 = 11 (left: 1 12 11) || 12 / 1 = 12 (left: 12)",
                "12 - 1 = 11 (left: 1 12 11) || 12 / 1 = 12 (left: 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11)",
                "12 - 1 = 11 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                40.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- INIT",
                "4 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 1 = 11 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "12 - 1 = 11 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "12 - 1 = 11 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 9 * 3 = 27 (left: 27 27)",
                "12 - 1 = 11 (left: 1 12 11)",
                "12 - 1 = 11 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                20.002,
                40.0
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.3",
                "2 <- 2.3",
                "3 <- 2.4",
                "4 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 1 = 11 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 - 1 = 11 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 6 / 3 = 2 (left: ",
                "12 - 1 = 11 (left: 1 12 11) || 11 + 1 = 12 (left: 12 11)",
                "12 - 1 = 11 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 - 1 = 11 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 1 + 11 = 12 (left: 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.0,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- INIT",
                "2 <- 1.3",
                "3 <- 1.3",
                "4 <- 2.4"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 1 = 11 (left: 1 12 11) || 11 - 1 = 10 (left:",
                "12 / 1 = 12 (left: 1 12 12)",
                "12 - 1 = 11 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "12 - 1 = 11 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "12 - 1 = 11 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 1 + 11 = 12 (left: 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.001,
                20.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 4.0",
                "2 <- 2.4",
                "3 <- 4.1",
                "4 <- 4.0"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 1 = 11 (left: 1 11 12) || 12 / 1 = 12 (left:",
                "12 - 1 = 11 (left: 1 12 11) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 11)",
                "12 - 1 = 11 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 12 11) || 11 - 1 = 10 (left: || 11 - 1 = 10 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                21.0,
                0.002,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- 5.0",
                "4 <- 4.1"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 1 = 11 (left: 1 11 12) || 12 / 1 = 12 (left: || 12 * 1 = 12 (left: 12)",
                "12 - 1 = 11 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 - 1 = 11 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 - 1 = 11 (left: 1 11 12) || 12 / 1 = 12 (left: || 12 * 1 = 12 (left: 12 12)",
                "12 / 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.001,
                0.002,
                40.001,
                60.0
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 4.1",
                "2 <- 6.4",
                "3 <- 6.4",
                "4 <- 6.4"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 1 = 11 (left: 1 11 12) || 12 / 1 = 12 (left: || 12 * 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 / 1 = 12 (left: 1 12 12) || 1 + 12 = 13 (left: 12 13)",
                "12 / 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 / 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 / 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)"
            ],
            "Pruning": [
                "0<-2.4"
            ],
            "Evaluation": [
                20.0,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 7.0",
                "2 <- 6.4",
                "3 <- 6.4",
                "4 <- 5.0"
            ]
        },
        "Step 8": {
            "steps": [
                "12 / 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 - 1 = 11 (left: 1 11 12) || 12 / 1 = 12 (left: || 12 + 1 = 13"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                20.002,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 7.0",
                "1 <- 6.3",
                "2 <- 6.4",
                "3 <- 8.2",
                "4 <- 8.2"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 1 = 11 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 - 1 = 11 (left: 1 11 12) || 12 / 1 = 12 (left: || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24)",
                "12 / 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24)"
            ],
            "Pruning": []
        },
        "Input": "1 1 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "18": {
        "puzzle": "3 3 3 8",
        "Step 0": {
            "steps": [
                "3 * 3 = 9 (left: 9 3 8)",
                "3 / 3 = 1 (left: 1 3 ",
                "8 - 3 = 5 (left: 3 5 ",
                "3 + 3 = 6 (left: 3 6 8)",
                "3 * 3 = 9 (left: 9 3 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.0,
                0.0,
                1.001,
                1.002,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "8 - 3 = 5 (left: 3 3 5)",
                "3 - 3 = 0 (left: 0 3 8)",
                "3 + 3 = 6 (left: 3 6 8)",
                "8 - 3 = 5 (left: 3 3 5)",
                "3 * 3 = 9 (left: 9 3 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                1.002,
                1.002,
                2.001,
                22.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- INIT",
                "2 <- 1.4",
                "3 <- 1.4",
                "4 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "3 * 3 = 9 (left: 9 3 8) || 3 * 8 = 24 (left: 24)",
                "3 + 3 = 6 (left: 3 6 8)",
                "3 * 3 = 9 (left: 9 3 8) || 10",
                "3 * 3 = 9 (left: 9 3 8) || 9 - 3 = 6 (left: 6 8)",
                "3 * 3 = 9 (left: 9 3 8) || 9 * 3 = 27 (left: 8 27)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                3.0,
                0.003,
                0.002,
                2.001
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 2.0",
                "2 <- 2.0",
                "3 <- 2.0",
                "4 <- 2.0"
            ]
        },
        "Step 3": {
            "steps": [
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8)",
                "3 * 3 = 9 (left: 9 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 3) * (3 * 8) = 24",
                "3 * 3 = 9 (left: 9 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (3 + 8) = 24",
                "3 * 3 = 9 (left: 9 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (3 * 8) = 24",
                "3 * 3 = 9 (left: 9 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (3 * 8) = 24"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 3.3",
                "2 <- 1.4",
                "3 <- 3.4",
                "4 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 8 24)",
                "3 * 3 = 9 (left: 9 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (3 * 8) = 24 || Input: 2 3 6 8\nSteps:\n3 * 8 = 24 (left: 2 6 24)\n2 * 6 = 12 (left: 12 24)\nAnswer: (2 * 6) * (3 * 8) = 24",
                "3 * 3 = 9 (left: 9 3 8) || 9 + 3 = 12 (left: 12 8)",
                "3 * 3 = 9 (left: 9 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (3 * 8) = 24 || Input: 2 3 6 6\nSteps:\n6 - 3 = 3 (left: 2 3 6)\n3 * 6 = 18 (left: 2 18)\n2 * 18 = 36 (left: 36)\nAnswer: 2 * (3 * (6 - 3)) = 24",
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)"
            ],
            "Pruning": [
                "1<-3.2",
                "3<-3.0"
            ],
            "Evaluation": [
                21.001,
                60.0,
                0.002,
                60.0,
                0.001
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 3.2",
                "2 <- 4.1",
                "3 <- 4.0",
                "4 <- 4.3"
            ]
        },
        "Step 5": {
            "steps": [
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 8 24) || 8 + 24 = 32 (left: 32)",
                "3 * 3 = 9 (left: 9 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (3 + 8) = 24 || Input: 6 6 6 6\nSteps:\n6 * 6 = 36 (left: 6 6 36)\n36 / 6 = 6 (left: 6 6)\n6 * 6 = 24 (left: 24)\nAnswer: (6 * 6) / (6 / 6) = 24",
                "3 * 3 = 9 (left: 9 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (3 + 8) = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 * 2 = 12 (left: 12 12)\n12 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (6 * 2) = 24",
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8)",
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)"
            ],
            "Pruning": [
                "0<-4.0",
                "1<-4.3",
                "2<-4.1"
            ],
            "Evaluation": [
                2.0,
                60.0,
                60.0,
                60.0,
                40.0
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 3.3",
                "2 <- 2.0",
                "3 <- 5.2",
                "4 <- 5.2"
            ]
        },
        "Step 6": {
            "steps": [
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "3 * 3 = 9 (left: 9 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (3 * 8) = 24 || Input: 6 6 6 6\nSteps:\n6 * 6 = 36 (left: 6 6 36)\n6 - 6 = 0 (left: 0 36)\n0 + 36 = 36 (left: 36)\nAnswer: ((6 * 6) - 6) + 6 = 24",
                "3 * 3 = 9 (left: 9 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 3) * 8 = 24",
                "3 * 3 = 9 (left: 9 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (3 + 8) = 24 || Input: 2 3 4 9\nSteps:\n3 * 4 = 12 (left: 2 9 12)\n9 + 2 = 11 (left: 11 12)\n11 + 12 = 23 (left: 23)\n23 + 1 = 24 (left: 24)\nAnswer: ((3 * 4) + 2) + (9 + 1) = 24",
                "3 * 3 = 9 (left: 9 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (3 + 8) = 24 || Input: 2 3 4 6\nSteps:\n3 + 4 = 7 (left: 2 6 7)\n2 * 7 = 14 (left: 6 14)\n6 * 14 = 84 (left: 84)\n84 / 4 = 21 (left: 21)\n21 - 14 = 7 (left: 7)\n7 * 3 = 21 (left: 21)\n21 - "
            ],
            "Pruning": [
                "0<-3.0",
                "1<-5.2",
                "3<-5.2",
                "4<-5.1"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 3.0",
                "2 <- 6.1",
                "3 <- 4.0",
                "4 <- 6.3"
            ]
        },
        "Step 7": {
            "steps": [
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8) || 3 / 8 = 0.375 (left: 0.375)",
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8) || Possible next steps:",
                "3 * 3 = 9 (left: 9 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (3 + 8) = 24 || Input: 7 3 5 2\nSteps:\n7 - 5 = 2 (left: 2 3 2)\n2 + 3 = 5 (left: 5 2)\n5 * 2 = 10 (left: 10)\n10 + 2 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((7 - 5) + 3) * (2 +",
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 8 24) || 24 - 8 = 16 (left: 8 16)",
                "3 * 3 = 9 (left: 9 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (3 + 8) = 24 || Input: 6 7 8 9\nSteps:\n6 * 7 = 42 (left: 8 9 42)\n42 / 9 = 4 (left: 8 4)\n8 - 4 = 4 (left: 4)\nAnswer: ((6 * 7) / 9) - 8 = 24"
            ],
            "Pruning": [
                "2<-6.4",
                "4<-6.0"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 7.2",
                "1 <- 3.4",
                "2 <- 6.2",
                "3 <- 5.4",
                "4 <- 6.3"
            ]
        },
        "Step 8": {
            "steps": [
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "3 * 3 = 9 (left: 9 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (3 * 8) = 24 || Input: 6 7 8 9\nSteps:\n6 * 7 = 42 (left: 8 9 42)\n42 - 9 = 33 (left: 8 33)\n33 - 8 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: ((6 * 7) - 9) - 8 = 24",
                "3 * 3 = 9 (left: 9 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 3) * 8 = 24 || Input: 6 6 6 6\nSteps:\n6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 / 12 = 3 (left: 3)\n3 * 8 = 24\nAnswer: ((6 + 6) * 6) / 12 = 24",
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * (3 * 3)) * 8 = 24",
                "3 * 3 = 9 (left: 9 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (3 + 8) = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 * 2 = 12 (left: 12 12)\n12 * 12 = 24 (left: 24)\nAnswer: ((2 * 3) * 4) * 6 = 24"
            ],
            "Pruning": [
                "1<-6.3",
                "2<-7.3",
                "3<-5.3",
                "4<-7.2"
            ],
            "Evaluation": [
                0.0,
                60.0,
                40.001,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 8.3",
                "1 <- 7.3",
                "2 <- 8.2",
                "3 <- 4.1",
                "4 <- 6.3"
            ]
        },
        "Step 9": {
            "steps": [
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 8 24) || 24 / 8 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 8 24) || 24 - 8 = 16 (left: 8 16) || 16 / 8 = 2 (left: 2)",
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 8 24) || 24 - 8 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24)",
                "3 * 3 = 9 (left: 9 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (3 + 8) = 24 || Input: 2 3 6 7\nSteps:\n6 * 3 = 18 (left: 2 7 18)\n18 - 7 = 11 (left: 2 11)\n11 + 2 = 13 (left: 13)\n13 * 2 = 26 (left: 26)\n26 - 13 = 13 (left: 13)\n13 + 13 = 26 (left: 26)\nAnswer: ((",
                "3 * 3 = 9 (left: 9 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (3 + 8) = 24 || Input: 6 6 4 2\nSteps:\n6 * 4 = 24 (left: 6 2 24)\n6 * 2 = 12 (left: 12 24)\n12 + 24 = 36 (left: 36)\nAnswer: (6 * 4) + (6 * 2) = 24"
            ],
            "Pruning": [
                "0<-8.4",
                "1<-7.2",
                "2<-5.1",
                "3<-6.4",
                "4<-8.4"
            ]
        },
        "Input": "3 3 3 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "19": {
        "puzzle": "1 1 2 6",
        "Step 0": {
            "steps": [
                "2 * 1 = 2 (left: 2 6 4)",
                "1 + 1 = 2 (left: 2 2 6)",
                "6 - 1 = 5 (left: 1 2 ",
                "1 * 1 = 1 (left: 1 2 6)",
                "1 + 1 = 2 (left: 2 2 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                60.0,
                0.002,
                0.003,
                41.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.4",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 6) || Possible",
                "1 + 1 = 2 (left: 2 2 6) || Input: 4 4 4",
                "2 * 1 = 2 (left: 2 2 6)",
                "1 + 1 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6)",
                "1 + 1 = 2 (left: 2 2 6) || 2 - 2 = 0 (left: 0 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 0.1",
                "2 <- 1.2",
                "3 <- 1.4",
                "4 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 6) || 2 - 2 = 0 (left: 0 6) || 3 + 9 = 12 (left: 12)",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6)",
                "2 * 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6)",
                "1 + 1 = 2 (left: 2 2 6) || 2 - 2 = 0 (left: 0 6) || 6 - 0 = 6 (left: 6)",
                "2 * 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.2",
                "2 <- 2.1",
                "3 <- 0.4",
                "4 <- 2.2"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 6) || 2 - 2 = 0 (left: 0 6) || 0 + 6 = 6 (left: 6)",
                "2 * 1 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6)",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)",
                "2 * 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                60.0,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 3.1",
                "2 <- 1.4",
                "3 <- INIT",
                "4 <- 0.1"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 6) || 2 - 2 = 0 (left: 0 6) || 0 + 6 = 6 (left: 6)",
                "2 * 1 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "1 + 1 = 2 (left: 2 2 6) || 2 - 2 = 0 (left: 0 6) || 6 / 0 = undefined (left: 0 6)",
                "6 / 2 = 3 (left: 1 3 6)",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                41.0,
                2.001,
                60.0
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 3.1",
                "2 <- 4.4",
                "3 <- 1.4",
                "4 <- 2.4"
            ]
        },
        "Step 5": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6)",
                "2 * 1 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "1 + 1 = 2 (left: 2 2 6) || 2 - 2 = 0 (left: 0 6) || 0 * 6 = 0 (left: 6)",
                "2 * 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 4 / 6 = 0.6666666666666666 (left: 0.6666666666666666)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.002,
                0.0,
                0.001,
                1.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 3.1",
                "2 <- 3.2",
                "3 <- 5.0",
                "4 <- 5.0"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)",
                "2 * 1 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 10 - 5 = 5 (left: 5 2)",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 1) * (2 + 6) = 24",
                "2 * 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "2 * 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 1 - 6 = -5 (left: -5)"
            ],
            "Pruning": [
                "2<-2.1"
            ],
            "Evaluation": [
                0.001,
                21.001,
                60.0,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 6.2",
                "2 <- 6.2",
                "3 <- 4.4",
                "4 <- 1.3"
            ]
        },
        "Step 7": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "1 + 1 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 4 - 6 = -2 (left: -2)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.001,
                0.002,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 4.2",
                "2 <- 6.2",
                "3 <- 2.4",
                "4 <- 3.1"
            ]
        },
        "Step 8": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 + 1 = 2 (left: 2 2 6) || 2 - 2 = 0 (left: 0 6) || 6 / 0 = undefined (left: 0 6) || 6 - 0 = 6 (left: 6)",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "2 * 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "2 * 1 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)"
            ],
            "Pruning": [
                "1<-1.4"
            ],
            "Evaluation": [
                0.0,
                40.001,
                60.0,
                20.001,
                0.001
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 8.1",
                "2 <- 3.1",
                "3 <- 6.2",
                "4 <- 8.2"
            ]
        },
        "Step 9": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "1 + 1 = 2 (left: 2 2 6) || 2 - 2 = 0 (left: 0 6) || 0 * 6 = 0 (left: 6)",
                "2 * 1 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 1) * (2 + 6) = 24"
            ],
            "Pruning": [
                "4<-8.1"
            ]
        },
        "Input": "1 1 2 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "20": {
        "puzzle": "1 1 2 11",
        "Step 0": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 11)",
                "1 + 1 = 2 (left: 2 2 11)",
                "11 - 1 = 10 (left: 1 2 10)",
                "2 * 1 = 2 (left: 2 2 11)",
                "2 * 1 = 2 (left: 2 2 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                21.001,
                3.0,
                1.001,
                21.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.1",
                "2 <- 0.4",
                "3 <- 0.1",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10)",
                "1 + 1 = 2 (left: 2 2 11) || 2 * 2 = 4 (left: 4 11)",
                "2 * 1 = 2 (left: 2 2 11) || 2 + 2 = 4 (left: 4 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 + 11 = 13 (left: 2 13)",
                "2 * 1 = 2 (left: 1 2 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                0.003,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.1",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.4"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 11) || 11 * 2 = ",
                "1 + 1 = 2 (left: 2 2 11) || 2 * 2 = 4 (left: 4 11)",
                "1 + 1 = 2 (left: 2 2 11)",
                "11 - 1 = 10 (left: 1 2 10)",
                "2 * 1 = 2 (left: 2 2 11) || 2 - 2 = 0 (left: 0 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                20.002,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 2.2",
                "3 <- INIT",
                "4 <- 2.2"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 1 = 2 (left: 2 1 ",
                "1 + 1 = 2 (left: 2 2 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 * 2 = 4 (left: 4 11)",
                "11 - 1 = 10 (left: 1 2 ",
                "1 + 1 = 2 (left: 2 2 11) || 11 / 2 = 5.5 (left: 2 5.5)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                1.002,
                0.003,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 3.1",
                "3 <- INIT",
                "4 <- 0.4"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 11)",
                "1 * 1 = 1 (left: 1 2 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 - 2 = 0 (left: 0 11)",
                "11 - 1 = 10 (left: 1 2 ",
                "2 * 1 = 2 (left: 2 2 11) || 2 + 2 = 4 (left: 4 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                2.0,
                0.0,
                20.002,
                0.002
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.2",
                "2 <- 4.1",
                "3 <- 4.3",
                "4 <- 0.1"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11)",
                "1 + 1 = 2 (left: 2 2 11) || 11 - 2 = 9 (left:",
                "1 * 1 = 1 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9)",
                "11 - 1 = 10 (left: 1 2  || 1 + 2 = 3 (left: 3)",
                "1 + 1 = 2 (left: 2 2 11) || Possible next steps:"
            ],
            "Pruning": [],
            "Evaluation": [
                40.0,
                0.001,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 5.0",
                "2 <- 5.0",
                "3 <- 5.0",
                "4 <- 5.2"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 1 + 9 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 5.0",
                "2 <- 5.2",
                "3 <- 5.2",
                "4 <- 5.2"
            ]
        },
        "Step 7": {
            "steps": [
                "11 - 1 = 10 (left: 1 2  || 2 / 1 = 2 (left: 2)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "1 * 1 = 1 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 1 + 9 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 1 + 9 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.003,
                0.003,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 5.2",
                "2 <- 5.2",
                "3 <- 5.0",
                "4 <- 5.0"
            ]
        },
        "Step 8": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 11)",
                "1 * 1 = 1 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 5.2",
                "2 <- 5.0",
                "3 <- 5.0",
                "4 <- 4.3"
            ]
        },
        "Step 9": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 1 + 9 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "11 - 1 = 10 (left: 1 2  || 2 / 1 = 2 (left: 2)"
            ],
            "Pruning": []
        },
        "Input": "1 1 2 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "21": {
        "puzzle": "1 2 3 4",
        "Step 0": {
            "steps": [
                "3 + 4 = 7 (left: 1 2 7)",
                "2 * 3 = 6 (left: 1 6 4)",
                "4 - 3 = 1 (left: 1 2 4)",
                "3 + 4 = 7 (left: 1 2 7)",
                "3 + 4 = 7 (left: 1 2 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                60.0,
                2.001,
                1.002,
                2.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.1",
                "2 <- 0.1",
                "3 <- 0.1",
                "4 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 3 = 6 (left: 1 6 4) || 6 - 4 = 2 (left: 2)",
                "2 * 3 = 6 (left: 1 6 4) || 4 + 1 = 5 (left: 6 5)",
                "2 * 3 = 6 (left: 1 6 4) || 1 + 6 = 7 (left: 4 7)",
                "2 * 3 = 6 (left: 1 6 4) || 6 + 4 = 10 (left: 1 10)",
                "2 * 3 = 6 (left: 1 6 4) || 1 + 6 = 7 (left: 4 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                1.0,
                60.0,
                1.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- INIT",
                "2 <- 1.3",
                "3 <- 1.3",
                "4 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 3 = 6 (left: 1 6 4) || 6 + 4 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "4 - 2 = 2 (left: 1 3 4)",
                "2 * 3 = 6 (left: 1 6 4) || 6 + 4 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "2 * 3 = 6 (left: 1 6 4) || 6 + 4 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "2 * 3 = 6 (left: 1 6 4) || 4 + 1 = 5 (left: 5 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                41.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 0.1",
                "2 <- 1.3",
                "3 <- 2.1",
                "4 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "4 - 2 = 2 (left: 1 3 4) || 3 / 1 = 3 (left: 3 4)",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4)",
                "2 * 3 = 6 (left: 1 6 4) || 6 + 4 = 10 (left: 1 10) || 10 - 10 = 0 (left: 0)",
                "4 - 2 = 2 (left: 1 3 4) || 3 / 1 = 3 (left: 3 4)",
                "2 * 3 = 6 (left: 1 6 4) || 6 + 4 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                21.0,
                60.0,
                0.003,
                22.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 3.0",
                "2 <- 3.1",
                "3 <- 3.0",
                "4 <- 3.3"
            ]
        },
        "Step 4": {
            "steps": [
                "2 * 3 = 6 (left: 1 6 4) || 6 + 4 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "4 - 2 = 2 (left: 1 3 4) || 3 / 1 = 3 (left: 3 4) || 3 + 4 = 7 (left: 7)",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4) || 10 * 3 = 30",
                "4 - 2 = 2 (left: 1 3 4) || 3 / 1 = 3 (left: 3 4) || 4 - 3 = 1 (left: 1)",
                "4 - 2 = 2 (left: 1 3 4) || 3 / 1 = 3 (left: 3 4) || 4 - 3 = 1 (left: 1)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.001,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 2.1",
                "2 <- 3.1",
                "3 <- 3.3",
                "4 <- 3.1"
            ]
        },
        "Step 5": {
            "steps": [
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24)",
                "4 - 2 = 2 (left: 1 3 4) || 4 - 3 = 1 (left: 1 4)",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4) || 6 / 4 = 1.5 (left: 1.5)",
                "4 - 2 = 2 (left: 1 3 4) || 3 / 1 = 3 (left: 3 4) || 3 + 4 = 7 (left: 7)",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4) || 6 - 4 = 2 (left: 2)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.0,
                40.0,
                0.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 3.0",
                "2 <- 5.1",
                "3 <- 3.1",
                "4 <- 5.1"
            ]
        },
        "Step 6": {
            "steps": [
                "4 - 2 = 2 (left: 1 3 4) || 4 - 3 = 1 (left:",
                "4 - 2 = 2 (left: 1 3 4) || 3 / 1 = 3 (left: 3 4) || 10 / 5 = 2",
                "4 - 2 = 2 (left: 1 3 4) || 4 - 3 = 1 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24)",
                "4 - 2 = 2 (left: 1 3 4) || 4 - 3 = 1 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                20.001,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 6.3",
                "2 <- 5.1",
                "3 <- 6.3",
                "4 <- 5.1"
            ]
        },
        "Step 7": {
            "steps": [
                "4 - 2 = 2 (left: 1 3 4) || 3 / 1 = 3 (left: 3 4)",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24) || Answer: ((2 * 3) / 1) * 4 = 24",
                "4 - 2 = 2 (left: 1 3 4) || 4 - 3 = 1 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24) || Answer: (2 * 3) * (6 / 1) = 24",
                "4 - 2 = 2 (left: 1 3 4) || 4 - 3 = 1 (left: 1 4) || 4 - 1 = 3 (left: 3)"
            ]
        },
        "Input": "1 2 3 4",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            }
        ]
    },
    "22": {
        "puzzle": "11 11 12 12",
        "Step 0": {
            "steps": [
                "11 / 11 = 1 (left: 1 12 12)",
                "11 / 11 = 1 (left: 1 12 12)",
                "11 * 11 = 121 (left: 12 12 121)",
                "12 - 11 = 1 (left: 11 1 ",
                "12 + 11 = 23 (left: 11 12 23)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                21.001,
                0.003,
                20.0,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.4",
                "3 <- INIT",
                "4 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "11 / 11 = 1 (left: 1 12 12)",
                "12 - 11 = 1 (left: 11 12 1)",
                "12 + 11 = 23 (left: 11 12 23) || 12 / 11 = 1.09 (left: 1.09 23)",
                "12 - 11 = 1 (left: 1 12 12)",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                41.0,
                0.002,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 1.1",
                "2 <- INIT",
                "3 <- 1.4",
                "4 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 1 11)",
                "12 - 11 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132)",
                "11 / 11 = 1 (left: 1 12 12)",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.001,
                20.002,
                1.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 0.3",
                "2 <- 0.1",
                "3 <- 2.0",
                "4 <- 1.4"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 11 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 132 / 1 = 132 (left: 132)",
                "12 - 11 = 1 (left: 11 1  || 11 + 1 = 12 (left: 12)",
                "11 / 11 = 1 (left: 1 12 12) || 1 + 12 = 13 (left: 12 13)",
                "12 - 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 0.1",
                "3 <- INIT",
                "4 <- 2.1"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 11 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 132 / 1 = 132 (left: 132)",
                "12 - 11 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 132 / 1 = 132 (left: 132)",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "12 + 11 = 23 (left: 11 12 23)",
                "12 - 11 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 1 * 132 = 132 (left: 132)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                2.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 4.2",
                "2 <- 2.1",
                "3 <- 2.0",
                "4 <- 4.2"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 11 = 1 (left: 11 12 1) || 12 / 11 = 1.0909 (left: 1 1.0909)",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 - 11 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 132 - 1 = 131 (left: 131)",
                "12 - 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 0.3",
                "2 <- 4.2",
                "3 <- 5.0",
                "4 <- 4.2"
            ]
        },
        "Step 6": {
            "steps": [
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 11)",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 11 12 1) || 12 / 11 = 1.0909 (left: 1 1.0909) || 1.0909 / 1 = 1.0909 (left: 1.0909)",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.001,
                0.001,
                60.0,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 1.4",
                "2 <- 6.0",
                "3 <- 1.1",
                "4 <- 1.1"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24)",
                "12 - 11 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132)",
                "12 - 11 = 1 (left: 11 12 1) || 12 + 1 = 13 (left: 11 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                60.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 7.4",
                "2 <- 7.2",
                "3 <- 7.4",
                "4 <- 1.1"
            ]
        },
        "Step 8": {
            "steps": [
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24)",
                "12 - 11 = 1 (left: 11 12 1) || 12 + 1 = 13 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 0 + 24 = 24 (left: 24)",
                "12 - 11 = 1 (left: 11 12 1) || 12 + 1 = 13 (left: 11 13) || Input: 5 10 15",
                "12 - 11 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132)"
            ],
            "Pruning": [
                "2<-6.0"
            ],
            "Evaluation": [
                60.0,
                0.0,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 7.4",
                "1 <- 6.2",
                "2 <- 7.4",
                "3 <- 6.0",
                "4 <- 7.2"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 11 = 1 (left: 11 12 1) || 12 + 1 = 13 (left: 11 13) || 11 + 13 = 24 (left: 24)",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 + 12 = 36 (left: 12 36)",
                "12 - 11 = 1 (left: 11 12 1) || 12 + 1 = 13 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24)",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 24 / 0 = undefined"
            ],
            "Pruning": []
        },
        "Input": "11 11 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "23": {
        "puzzle": "3 7 7 8",
        "Step 0": {
            "steps": [
                "3 * 7 = 21 (left: 7 8 21)",
                "8 - 7 = 1 (left: 3 7 1)",
                "3 + 7 = 10 (left: 7 7 8)",
                "3 + 7 = 10 (left: 7 7 8)",
                "3 + 7 = 10 (left: 7 7 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.0,
                3.0,
                2.001,
                3.0,
                2.001
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.4",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8)",
                "7 - 3 = 4 (left: 4 7 8)",
                "8 - 7 = 1 (left: 3 7 ",
                "3 + 7 = 10 (left: 7 7 8) || 1",
                "3 + 7 = 10 (left: 7 7 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                22.0,
                1.0,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- INIT",
                "2 <- 1.0",
                "3 <- 0.2",
                "4 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "7 - 3 = 4 (left: 4 7 8) || 8 - 4 = 4 (left: 4 8)",
                "7 / 3 = 2 (left: 2 7 8)",
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 + 7 = 10 (left: 7 7 8) || 7 + 7 = 14 (left: 8 14)",
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.002,
                60.0,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 2.2",
                "2 <- 1.0",
                "3 <- INIT",
                "4 <- 2.2"
            ]
        },
        "Step 3": {
            "steps": [
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 6 / 4 = ",
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) - (7 - 8) = 24",
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "7 - 3 = 4 (left: 4 7 8)",
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) - (8 - 3) = 24"
            ],
            "Pruning": [
                "1<-1.2",
                "4<-2.2"
            ],
            "Evaluation": [
                0.003,
                20.0,
                0.001,
                2.001,
                60.0
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.2",
                "2 <- INIT",
                "3 <- 2.2",
                "4 <- 3.4"
            ]
        },
        "Step 4": {
            "steps": [
                "7 - 3 = 4 (left: 4 7 8) || Possible",
                "8 - 7 = 1 (left: 3 7  || 3 + 7 = 10 (left: 7 10)",
                "7 / 3 = 2 (left: 2 7 8)",
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (8 / 3) = 24",
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (8 / 3) = 24"
            ],
            "Pruning": [
                "3<-3.4",
                "4<-3.4"
            ],
            "Evaluation": [
                0.003,
                0.002,
                3.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 4.4",
                "2 <- 3.4",
                "3 <- 2.2",
                "4 <- 4.3"
            ]
        },
        "Step 5": {
            "steps": [
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (8 / 3) = 24",
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) - 7 + 8 = 24",
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (3 - 8) = 24",
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (8 - 3) = 24",
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) - (7 - 8) = 24"
            ],
            "Pruning": [
                "0<-2.2",
                "1<-3.4",
                "2<-3.4",
                "3<-3.4",
                "4<-4.3"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 5.4",
                "2 <- 4.4",
                "3 <- 5.2",
                "4 <- 5.0"
            ]
        },
        "Step 6": {
            "steps": [
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) + (8 - 3) = 24",
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (7 - 8) = 24",
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (8 / 3) = 24",
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (7 + (7 / 8)) = 24"
            ],
            "Pruning": [
                "1<-5.3",
                "2<-5.0",
                "3<-3.1",
                "4<-4.3"
            ],
            "Evaluation": [
                40.0,
                60.0,
                60.0,
                20.002,
                60.0
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 4.4",
                "2 <- 4.3",
                "3 <- 6.0",
                "4 <- 5.4"
            ]
        },
        "Step 7": {
            "steps": [
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (8 - 3) = 24",
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (8 / 3) = 24",
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (8 / 3) = 24",
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (8 / 3) = 24",
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (8 / 3) = 24"
            ],
            "Pruning": [
                "0<-5.2",
                "1<-6.2",
                "2<-5.3",
                "3<-6.1",
                "4<-4.3"
            ],
            "Evaluation": [
                40.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 7.2",
                "1 <- 6.4",
                "2 <- 7.2",
                "3 <- 7.4",
                "4 <- 6.1"
            ]
        },
        "Step 8": {
            "steps": [
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (8 / 3) = 24",
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (7 - 8) = 24",
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) - (8 - 3) = 24",
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) - (8 - 3) = 24",
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) - (8 - 3) = 24"
            ],
            "Pruning": [
                "0<-7.4",
                "1<-7.2",
                "2<-6.0",
                "3<-7.4",
                "4<-5.1"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 8.0",
                "1 <- 8.1",
                "2 <- 8.1",
                "3 <- 8.1",
                "4 <- 5.4"
            ]
        },
        "Step 9": {
            "steps": [
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (8 - 3) = 24",
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (8 - 3) = 24",
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (8 - 3) = 24",
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (8 - 3) = 24",
                "3 * 7 = 21 (left: 7 8 21) || 21 / 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 7) / (7 - 8) = 24"
            ],
            "Pruning": [
                "0<-8.0",
                "1<-6.4",
                "2<-7.1",
                "3<-6.2",
                "4<-7.4"
            ]
        },
        "Input": "3 7 7 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "24": {
        "puzzle": "1 1 13 13",
        "Step 0": {
            "steps": [
                "13 - 1 = 12 (left: 1 13 12)",
                "13 - 1 = 12 (left: 1 12 13)",
                "13 * 1 = 13 (left: 13 13 13)",
                "13 + 1 = 14 (left: 1 13 14)",
                "13 - 1 = 12 (left: 1 12 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                21.001,
                0.003,
                0.003,
                1.002,
                0.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- INIT",
                "2 <- 0.0",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "13 - 1 = 12 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12)",
                "13 + 1 = 14 (left: 1 13 14)",
                "13 - 1 = 12 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12)",
                "1 + 1 = 2 (left: 2 13 13)",
                "13 + 1 = 14 (left: 1 13 14)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                1.002,
                40.001,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.0",
                "2 <- 0.0",
                "3 <- 1.2",
                "4 <- 0.0"
            ]
        },
        "Step 2": {
            "steps": [
                "13 - 1 = 12 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "13 - 1 = 12 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "13 - 1 = 12 (left: 1 13 12) || 1 - 13 = -12 (left:",
                "13 - 1 = 12 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "13 - 1 = 12 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                20.002,
                20.001,
                20.002,
                60.0
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- INIT",
                "2 <- 1.2",
                "3 <- 2.4",
                "4 <- 1.2"
            ]
        },
        "Step 3": {
            "steps": [
                "13 - 1 = 12 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "1 * 1 = 1 (left: 1 13 13)",
                "13 - 1 = 12 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "13 - 1 = 12 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "13 - 1 = 12 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                20.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 1.2",
                "2 <- INIT",
                "3 <- 1.2",
                "4 <- 2.4"
            ]
        },
        "Step 4": {
            "steps": [
                "13 - 1 = 12 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "13 - 1 = 12 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "1 * 1 = 1 (left: 1 13 13)",
                "13 - 1 = 12 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "13 - 1 = 12 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 3.2",
                "2 <- 2.4",
                "3 <- 4.0",
                "4 <- 4.0"
            ]
        },
        "Step 5": {
            "steps": [
                "13 - 1 = 12 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((13 - 1) * (13 - 1)) = 24",
                "13 - 1 = 12 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24)",
                "13 - 1 = 12 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "13 - 1 = 12 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (13 - 1) * (13 - 1) = 24",
                "13 - 1 = 12 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (13 - 1) + (13 - 1) = 24"
            ]
        },
        "Input": "1 1 13 13",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 1
            }
        ]
    },
    "25": {
        "puzzle": "1 2 4 12",
        "Step 0": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8)",
                "4 + 12 = 16 (left: 1 2 16)",
                "12 - 2 = 10 (left: 1 4 10)",
                "12 - 2 = 10 (left: 1 4 10)",
                "2 * 4 = 8 (left: 1 8 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                21.001,
                1.002,
                3.0,
                2.001,
                2.001
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.0",
                "2 <- 0.0",
                "3 <- INIT",
                "4 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 4 = 8 (left: 1 8 12) || 12 / 1 = 12 (left: 8 12)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "12 - 4 = 8 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "12 - 4 = 8 (left: 1 2 8)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                60.0,
                0.003,
                22.0,
                40.0
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.4",
                "2 <- 0.0",
                "3 <- 1.3",
                "4 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "12 - 4 = 8 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "12 - 4 = 8 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)",
                "12 - 4 = 8 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                1.002,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.3",
                "2 <- INIT",
                "3 <- 2.3",
                "4 <- 1.1"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 * 1 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 1 * 2 = 2 (left: 2)",
                "2 * 4 = 8 (left: 1 8 12)",
                "12 - 4 = 8 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || Input: 4 6 12",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.0,
                1.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 2.3",
                "2 <- INIT",
                "3 <- 1.1",
                "4 <- 1.4"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "12 - 4 = 8 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.66666666667 (left: 2.66666666667)",
                "4 * 12 = 48 (left: 1 2 48)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.0,
                20.002,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 2.3",
                "2 <- 4.2",
                "3 <- 1.1",
                "4 <- 4.0"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || Possible next steps:",
                "12 - 4 = 8 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || Possible next steps:",
                "4 * 12 = 48 (left: 1 2 48) || 48 / 2 = 24 (left: 1 24)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 5.2",
                "2 <- 5.2",
                "3 <- 4.0",
                "4 <- 4.0"
            ]
        },
        "Step 6": {
            "steps": [
                "4 * 12 = 48 (left: 1 2 48) || 48 / 2 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)",
                "4 * 12 = 48 (left: 1 2 48) || 48 / 2 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "4 * 12 = 48 (left: 1 2 48) || 48 / 2 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 + 4 = 5"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 6.2",
                "2 <- 6.2",
                "3 <- 6.1",
                "4 <- 5.2"
            ]
        },
        "Step 7": {
            "steps": [
                "4 * 12 = 48 (left: 1 2 48) || 48 / 2 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 * 24) + 2 * 4 = 24",
                "4 * 12 = 48 (left: 1 2 48) || 48 / 2 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (4 * 12) / 2 = 24",
                "4 * 12 = 48 (left: 1 2 48) || 48 / 2 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 * (2 * 12)) / 24 = 24",
                "4 * 12 = 48 (left: 1 2 48) || 48 / 2 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (4 * 12) / 2 * 1 = 24",
                "4 * 12 = 48 (left: 1 2 48) || 48 / 2 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)"
            ]
        },
        "Input": "1 2 4 12",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "26": {
        "puzzle": "1 1 3 6",
        "Step 0": {
            "steps": [
                "1 / 1 = 1 (left: 1 3 6)",
                "3 * 1 = 3 (left: 3 1 6)",
                "1 * 1 = 1 (left: 1 3 6)",
                "3 * 1 = 3 (left: 3 3 6)",
                "6 - 3 = 3 (left: 1 3 3)"
            ],
            "Pruning": [],
            "Evaluation": [
                22.0,
                21.0,
                0.002,
                3.0,
                0.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.1",
                "2 <- 0.1",
                "3 <- INIT",
                "4 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 6) || 6 - 3 = 3 (left: 3 3)",
                "3 * 1 = 3 (left: 3 1 6) || 3 * 1 = 3 (left: 3 6)",
                "3 * 1 = 3 (left: 3 1 6) || 6 - 3 = 3 (left: 3 3)",
                "1 + 1 = 2 (left: 2 3 6)",
                "1 / 1 = 1 (left: 1 3 6) || 6 / 3 = 2 (left: 1 2)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.0,
                3.0,
                40.0,
                60.0,
                1.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.3",
                "2 <- 1.2",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 1 = 2 (left: 2 3 6) || 3 - 2 = 1 (left: 1 6)",
                "1 + 1 = 2 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6)",
                "3 * 1 = 3 (left: 3 1 6) || 6 - 3 = 3 (left: 3 3) || 3 + 3 = 6 (left: 6)",
                "3 * 1 = 3 (left: 3 3 6)",
                "1 * 1 = 1 (left: 1 3 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                41.0,
                20.002,
                0.003,
                3.0,
                21.001
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- 1.1",
                "4 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 1 = 2 (left: 2 3 6) || 3 - 2 = 1 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "1 + 1 = 2 (left: 2 3 6) || 6 - 3 = 3 (left: 2 3)",
                "1 + 1 = 2 (left: 2 3 6) || Input",
                "3 * 1 = 3 (left: 3 1 6) || 3 * 1 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18)",
                "1 + 1 = 2 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6) || 6 + 6 = 12"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.003,
                0.003,
                20.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.1",
                "2 <- 2.4",
                "3 <- 2.1",
                "4 <- 0.0"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 1 = 2 (left: 2 3 6) || 6",
                "3 * 1 = 3 (left: 3 1 6) || 6 - 3 = 3 (left: 3 3)",
                "1 * 1 = 1 (left: 1 3 6) || 3 * 3 = 9 (left: 6)",
                "1 + 1 = 2 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6) || 6 + 6 = 12",
                "1 / 1 = 1 (left: 1 3 6) || 6 / 3 = 2 (left: 1 2)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                21.0,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.4",
                "2 <- 4.1",
                "3 <- 4.1",
                "4 <- 1.3"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 6)",
                "1 * 1 = 1 (left: 1 3 6) || 1 + 3 = 4 (left: 4 6)",
                "3 * 1 = 3 (left: 3 1 6) || 6 - 3 = 3 (left: 3 3) || 3 * 3 = 9 (left: 9)",
                "3 * 1 = 3 (left: 3 1 6) || 6 - 3 = 3 (left: 3 3) || 3 + 3 = 6 (left: 6)",
                "1 + 1 = 2 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                41.0,
                60.0,
                0.0,
                0.003,
                20.0
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 5.0",
                "2 <- 5.1",
                "3 <- 5.1",
                "4 <- 5.1"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 1 = 2 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 3 6) || 3 + 6 = 9 (left: 1 9)",
                "1 * 1 = 1 (left: 1 3 6) || 1 + 3 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 3 6) || 1 + 3 = 4 (left: 4 6) || Input: 3 5 7",
                "1 * 1 = 1 (left: 1 3 6) || 1 + 3 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                40.0,
                60.0,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 6.1",
                "2 <- 6.1",
                "3 <- 6.2",
                "4 <- 5.1"
            ]
        },
        "Step 7": {
            "steps": [
                "1 + 1 = 2 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18)",
                "1 * 1 = 1 (left: 1 3 6) || 3 + 6 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 3 6) || 3 + 6 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 3 6) || 1 + 3 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 1) * (3 + 6) = 24",
                "1 * 1 = 1 (left: 1 3 6) || 1 + 3 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)"
            ],
            "Pruning": [
                "3<-6.2"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 7.3",
                "1 <- 6.1",
                "2 <- 7.3",
                "3 <- 5.0",
                "4 <- 5.1"
            ]
        },
        "Step 8": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 6) || 1 + 3 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 1) * (3 + 6) = 24",
                "1 * 1 = 1 (left: 1 3 6) || 3 + 6 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 3 6) || 1 + 3 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 1) * (3 + 6) = 24",
                "1 * 1 = 1 (left: 1 3 6) || 1 * 3 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 3 6) || 1 + 3 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)"
            ],
            "Pruning": [
                "0<-7.3",
                "2<-6.2"
            ],
            "Evaluation": [
                60.0,
                0.002,
                60.0,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 8.2",
                "2 <- 8.2",
                "3 <- 6.1",
                "4 <- 4.1"
            ]
        },
        "Step 9": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 6) || 1 + 3 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 1) * (3 + 6) = 24",
                "1 * 1 = 1 (left: 1 3 6) || 1 + 3 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 1) * (3 + 6) = 24",
                "1 * 1 = 1 (left: 1 3 6) || 1 + 3 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 1) * (3 + 6) = 24",
                "1 * 1 = 1 (left: 1 3 6) || 3 + 6 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "3 * 1 = 3 (left: 3 1 6) || 6 - 3 = 3 (left: 3 3) || 3 - 3 = 0 (left: 0)"
            ],
            "Pruning": [
                "0<-8.2",
                "1<-8.2",
                "2<-8.0"
            ]
        },
        "Input": "1 1 3 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "27": {
        "puzzle": "1 1 3 9",
        "Step 0": {
            "steps": [
                "9 - 3 = 6 (left: 1 1 6)",
                "3 * 1 = 3 (left: 1 3 9)",
                "9 / 3 = 3 (left: 1 3 ",
                "9 - 3 = 6 (left: 1 3 6)",
                "1 * 1 = 1 (left: 1 3 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.003,
                0.002,
                60.0,
                1.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- INIT",
                "2 <- 0.3",
                "3 <- 0.3",
                "4 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "9 - 3 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3 6)",
                "1 * 3 = 3 (left: 1 3 9)",
                "9 - 3 = 6 (left: 1 3 6) || 6 / 3 = 2 (left: 1 2)",
                "9 - 3 = 6 (left: 1 3 6) || 1 + 3 = 4 (left: 4 6)",
                "9 - 3 = 6 (left: 1 3 6) || 3 * 6 = 18 (left: 1 18)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.0,
                20.002,
                0.002,
                41.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.1",
                "2 <- 0.3",
                "3 <- 0.3",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "9 - 3 = 6 (left: 1 3 6) || 1 + 3 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "1 * 3 = 3 (left: 1 3 9) || 9 - 1 = 8 (left: 3 8)",
                "9 - 3 = 6 (left: 1 3 6) || 1 + 3 = 4 (left: 4 6)",
                "9 - 3 = 6 (left: 1 3 6) || 1 + 3 = 4 (left: 4 6)",
                "9 - 1 = 8 (left: 1 3 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                60.0,
                20.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 0.3",
                "2 <- 2.1",
                "3 <- 2.3",
                "4 <- 2.4"
            ]
        },
        "Step 3": {
            "steps": [
                "9 - 1 = 8 (left: 1 3 8) || 8 / 3 = 2.67 (",
                "9 - 3 = 6 (left: 1 3 6) || 1 * 6 = 6 (left: 6",
                "1 * 3 = 3 (left: 1 3 9) || 9 - 1 = 8 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "9 - 3 = 6 (left: 1 3 6) || 1 + 3 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "9 - 1 = 8 (left: 1 3 8) || 3 / 1 = 3 (left: 3 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.1",
                "2 <- 0.3",
                "3 <- 2.3",
                "4 <- 2.3"
            ]
        },
        "Step 4": {
            "steps": [
                "9 - 1 = 8 (left: 1 3 8) || 8 / 1 = ",
                "1 * 3 = 3 (left: 1 3 9) || 9 - 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "9 - 3 = 6 (left: 1 3 6) || 3 / 1 = 3 (left: 3)",
                "9 - 3 = 6 (left: 1 3 6) || 1 + 3 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "9 - 3 = 6 (left: 1 3 6) || 1 + 3 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                0.001,
                0.0,
                0.001
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 4.1",
                "2 <- 4.1",
                "3 <- 2.3",
                "4 <- 2.2"
            ]
        },
        "Step 5": {
            "steps": [
                "9 - 1 = 8 (left: 1 3 8) || 3 - 1 = 2 (left: 2 8)",
                "1 * 3 = 3 (left: 1 3 9) || 9 - 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (9 - 1) = 24",
                "1 * 3 = 3 (left: 1 3 9) || 9 - 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (9 - 1) = 24",
                "9 - 3 = 6 (left: 1 3 6) || 1 + 3 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "9 - 3 = 6 (left: 1 3 6) || 1 + 3 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)"
            ]
        },
        "Input": "1 1 3 9",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "28": {
        "puzzle": "7 7 12 12",
        "Step 0": {
            "steps": [
                "7 / 7 = 1 (left: 1 12 12)",
                "7 * 7 = 49 (left: 12 12 49)",
                "7 * 12 = 84 (left: 12 19 84)",
                "7 - 7 = 0 (left: 0 12 12)",
                "12 / 7 = 1 (left: 1 12 "
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                2.001,
                0.003,
                60.0,
                1.001
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- INIT",
                "2 <- 0.3",
                "3 <- 0.3",
                "4 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "7 - 7 = 0 (left: 0 12 12) || 0 - 12 = -12 (left: -12 12)",
                "7 / 7 = 1 (left: 1 12 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 1)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                22.0,
                40.001,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 1.3",
                "2 <- 1.1",
                "3 <- 1.2",
                "4 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "7 / 7 = 1 (left: 1 12 12) || 12 / 1 = 12 (left:",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.4",
                "2 <- 1.4",
                "3 <- 1.1",
                "4 <- 1.4"
            ]
        },
        "Step 3": {
            "steps": [
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 1) || Possible next steps:",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 1) || 0 + 1 = 1 (left: 1)",
                "7 / 7 = 1 (left: 1 12 12) || 12 - 1 = 11 (left: 11",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 1) || 1 / 0 = undefined"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.001,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.4",
                "2 <- 1.2",
                "3 <- 1.0",
                "4 <- 2.0"
            ]
        },
        "Step 4": {
            "steps": [
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 1) || 0 + 1 = 1 (left: 1)",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "7 - 7 = 0 (left: 0 12 12) || 0 - 12 = -12 (left: -12 12) || -12 / 12 = -1 (left: -1)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                0.003,
                20.002,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 1.3",
                "2 <- 2.0",
                "3 <- 2.0",
                "4 <- 4.0"
            ]
        },
        "Step 5": {
            "steps": [
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) ",
                "7 - 7 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)"
            ],
            "Pruning": [
                "4<-0.3"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 4.0",
                "2 <- 1.3",
                "3 <- 4.2",
                "4 <- 5.4"
            ]
        },
        "Step 6": {
            "steps": [
                "7 - 7 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 1)",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left:",
                "7 - 7 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 12 * 12 = 144 (left: 24 144)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                40.001,
                0.003,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 6.3",
                "2 <- INIT",
                "3 <- 6.1",
                "4 <- 6.1"
            ]
        },
        "Step 7": {
            "steps": [
                "7 - 7 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 1) || 0 - 1 = -1 (left: -1)",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 12 * 12 = 144 (left: 24 144) || 24 * 6 = 144 (left: 144)",
                "7 + 7 = 14 (left: 12 12 14)",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: || 24 - 12 = 12 (left: 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: || 5 * 2 = 10 (left: 10 10)"
            ],
            "Pruning": [
                "1<-6.0",
                "3<-6.3"
            ],
            "Evaluation": [
                0.0,
                60.0,
                21.001,
                60.0,
                20.002
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 7.2",
                "2 <- 7.1",
                "3 <- 7.1",
                "4 <- 7.3"
            ]
        },
        "Step 8": {
            "steps": [
                "7 - 7 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0)",
                "7 + 7 = 14 (left: 12 12 14) || 12 + 12 = 24 (left: 24 14)",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 12 * 12 = 144 (left: 24 144) || 24 * 6 = 144 (left: 144)"
            ],
            "Pruning": [
                "4<-7.4"
            ],
            "Evaluation": [
                40.0,
                40.001,
                0.002,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 7.2",
                "1 <- 4.2",
                "2 <- 5.0",
                "3 <- 6.0",
                "4 <- 6.0"
            ]
        },
        "Step 9": {
            "steps": [
                "7 + 7 = 14 (left: 12 12 14) || 12 + 12 = 24 (left: 14 24)",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)  || Answer: (7 - 7) * (12 + 12) = 24",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 1) || 5 + 10 = 15 (left: 15)",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 1) || 1 / 0 = Undefined "
            ],
            "Pruning": [
                "1<-7.1",
                "2<-7.4"
            ]
        },
        "Input": "7 7 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "29": {
        "puzzle": "4 6 7 7",
        "Step 0": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7)",
                "6 + 7 = 13 (left: 4 7 13)",
                "6 + 7 = 13 (left: 4 7 13)",
                "7 - 6 = 1 (left: 1 7 7)",
                "6 + 7 = 13 (left: 4 7 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                20.002,
                3.0,
                2.001,
                1.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.2",
                "4 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2 (left: 2 7)",
                "6 + 7 = 13 (left: 4 7 13)",
                "6 + 7 = 13 (left: 4 7 13)",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9)",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                21.001,
                20.002,
                40.0,
                1.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.0",
                "2 <- 1.3",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10)",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 10)",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 4 * 9 = 36 (left: 9)",
                "7 - 4 = 3 (left: ",
                "4 * 6 = 24 (left: 7 7 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.0,
                0.002,
                0.0,
                2.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.3",
                "3 <- 1.3",
                "4 <- 1.1"
            ]
        },
        "Step 3": {
            "steps": [
                "7 - 6 = 1 (left: 4 1 7)",
                "7 - 4 = 3 (left: ",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 4 * 9 = 36 (left: 36)",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 4 + 9 = 13 (left: 13)",
                "6 + 7 = 13 (left: 4 7 13) || 7 - 4 = 3 (left: 3 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                21.001,
                0.0,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 3.0",
                "2 <- 1.3",
                "3 <- 2.0",
                "4 <- 3.2"
            ]
        },
        "Step 4": {
            "steps": [
                "6 + 7 = 13 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 4 * 9 = 36 (left: 36) || None - 36 is the final result.",
                "7 - 6 = 1 (left: 4 1 7) || 7 - 4 = 3 (left: 4 3)",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 10",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10) || 7 / 7 = 1 (left: 1 10)",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 4 * 9 = 36 (left: 36) || There are no possible next steps as there is only one number provided."
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                2.0,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 4.3",
                "2 <- 4.3",
                "3 <- 2.0",
                "4 <- 4.3"
            ]
        },
        "Step 5": {
            "steps": [
                "6 + 7 = 13 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 4 * 9 = 36 (left: 36) || 36 / 2 = 18",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10) || 7 / 7 = 1 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10) || 7 / 7 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10) || 10 / 7 = 1.428571",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10) || 7 / 7 = 1 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Pruning": [
                "1<-4.3",
                "2<-3.0",
                "4<-2.0"
            ],
            "Evaluation": [
                0.003,
                60.0,
                3.0,
                0.003,
                41.0
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 5.1",
                "2 <- 3.2",
                "3 <- 4.3",
                "4 <- 4.3"
            ]
        },
        "Step 6": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10) || 7 / 7 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10) || 7 / 7 = 1 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 4 * 9 = 36 (left: 36) || 36 / 2 = 18",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10) || 7 / 7 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10) || 7 / 7 = 1 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Pruning": [
                "0<-5.4",
                "1<-1.3",
                "3<-5.1",
                "4<-2.0"
            ],
            "Evaluation": [
                22.0,
                1.002,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 6.4",
                "2 <- 6.0",
                "3 <- 6.4",
                "4 <- 6.4"
            ]
        },
        "Step 7": {
            "steps": [
                "6 + 7 = 13 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 4 * 9 = 36 (left: 36) || No possible next steps with the input of 36.",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10) || Input: 1 3 3 9",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17)",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10) || 10 - 7 = 3 (left: 3 10)",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10) || 10 - 7 = 3 (left:"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 7.2",
                "2 <- 6.3",
                "3 <- 6.3",
                "4 <- 3.2"
            ]
        },
        "Step 8": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10) || 7 + 7 = 14 (left: 10 14)",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 7 * 17 = 119 (left: 119)",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10) || 7 / 7 = 1 (left: 1 10) || 10 - 10 = 0 (left: 0)",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10) || 7 / 7 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 4 * 9 = 36 (left: 36) || 36 / 2 = 18"
            ],
            "Pruning": [
                "1<-7.2",
                "2<-7.2",
                "3<-5.1"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 8.0",
                "1 <- 8.2",
                "2 <- 8.0",
                "3 <- 8.2",
                "4 <- 8.1"
            ]
        },
        "Step 9": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10) || 7 + 7 = 14 (left: 10 14) || 14 - 10 = 4 (left: 4)",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 7 + 17 = 24 (left: 24)",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10) || 7 + 7 = 14 (left: 10 14) || Possible next steps:",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 7 * 17 = 119 (left: 119)",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || Input: 24 119 10 2.42857142857"
            ],
            "Pruning": [
                "0<-6.0",
                "1<-7.2",
                "3<-8.1"
            ]
        },
        "Input": "4 6 7 7",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "30": {
        "puzzle": "1 1 2 13",
        "Step 0": {
            "steps": [
                "13 - 2 = 11 (left: 1 1 11)",
                "1 + 1 = 2 (left: 2 2 13)",
                "13 - 1 = 12 (left: 1 2 12)",
                "13 - 1 = 12 (left: 1 2 12)",
                "1 + 1 = 2 (left: 2 2 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                1.002,
                60.0,
                60.0,
                21.001
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.4",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "13 - 1 = 12 (left: 1 2 12) || 10 - 3 = 7 (left: 7",
                "1 + 1 = 2 (left: 2 2 13) || 2 * 2 = 4 (left: 4 13)",
                "2 * 1 = 2 (left: 2 2 13)",
                "2 + 1 = 3 (left: 1 3 13)",
                "1 + 1 = 2 (left: 2 2 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                1.002,
                22.0,
                22.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 1.2",
                "2 <- 1.2",
                "3 <- INIT",
                "4 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "13 - 1 = 12 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "2 * 1 = 2 (left: 2 2 13) || 2 * 13 = 26 (left: 2 26)",
                "2 * 1 = 2 (left: 2 2 13) || 13 - 2 = ",
                "2 + 1 = 3 (left: 3 2 13)",
                "13 - 1 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                3.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 2.4",
                "2 <- 0.4",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 13) || 13 - 2 = 11 (left: 2 11)",
                "13 - 1 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 2 13) || 2 / 2 = 1 (left: 1 13)",
                "2 * 1 = 2 (left: 2 2 ",
                "13 - 1 = 12 (left: 1 2 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                1.001,
                20.002,
                60.0
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 2.0",
                "2 <- 3.1",
                "3 <- 3.1",
                "4 <- 1.3"
            ]
        },
        "Step 4": {
            "steps": [
                "2 * 1 = 2 (left: 2 2  || 2 - 2 = 0 (left: 0)",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "13 - 1 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (13 - 1) * (1 * 24) = 24",
                "13 - 1 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (13 - 1) * (1 * 24) = 24",
                "2 + 1 = 3 (left: 1 3 13) || 3 * 1 = 3 (left: 3 13)"
            ],
            "Pruning": [
                "2<-3.1",
                "3<-2.0"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 4.2",
                "2 <- 4.3",
                "3 <- 4.3",
                "4 <- 4.2"
            ]
        },
        "Step 5": {
            "steps": [
                "13 - 1 = 12 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "13 - 1 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 * 24) * (13 - 1) = 24",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "13 - 1 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: 1 * (2 * (13 - 1)) = 24"
            ]
        },
        "Input": "1 1 2 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "31": {
        "puzzle": "1 1 5 6",
        "Step 0": {
            "steps": [
                "5 * 1 = 5 (left: 5 5 6)",
                "5 + 1 = 6 (left: 1 6 6)",
                "6 - 5 = 1 (left: 1 1 ",
                "1 * 5 = 5 (left: 1 5 6)",
                "1 + 5 = 6 (left: 1 6 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                21.0,
                0.003,
                41.0,
                41.0
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.3",
                "2 <- 0.4",
                "3 <- 0.3",
                "4 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 5 = 5 (left: 1 5 6) || 1 * 5 = 5 (left: 5 6)",
                "1 * 5 = 5 (left: 1 5 6) || 1 - 5 = -4 (left: -4 6)",
                "1 + 5 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6)",
                "1 * 5 = 5 (left: 1 5 6) || 5 / 1 = 5 (left: 5 6)",
                "1 * 5 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                2.0,
                1.001,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.3",
                "2 <- 0.4",
                "3 <- 0.3",
                "4 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 5 = 6 (left: 6 6 6)",
                "1 * 5 = 5 (left: 1 5 6) || 1 + 5 = 6 (left: 6 6)",
                "1 + 5 = 6 (left: 1 6 6) || 6 / 1 = 6 (left:",
                "1 * 5 = 5 (left: 1 5 6) || 1 - 5 = -4 (left: -4 6)",
                "1 * 5 = 5 (left: 1 5 6) || 5 * 1 = 5 (left: 5 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                21.001,
                21.0,
                21.001,
                0.002
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.2",
                "2 <- 0.4",
                "3 <- 2.2",
                "4 <- 0.4"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 5 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: || 6 / 1 = 6 (left: 6)",
                "1 + 5 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: || 1 * 6 = 6 (left: 6)",
                "1 + 5 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6)",
                "1 + 5 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: || 6 * 1 = 6 (left: 6)",
                "1 + 5 = 6 (left: 1 6 6) || 1 + 6 = 7 (left: 6 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                20.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- INIT",
                "2 <- 0.3",
                "3 <- 3.2",
                "4 <- 2.1"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 5 = 5 (left: 1 5 6) || Possible next steps:",
                "6 - 1 = 5 (left: 1 5 6)",
                "1 * 5 = 5 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6)",
                "1 + 5 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)",
                "1 * 5 = 5 (left: 1 5 6) || 1 + 5 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                22.0,
                60.0,
                20.0,
                60.0
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 4.4",
                "2 <- 4.2",
                "3 <- 2.1",
                "4 <- 3.2"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 5 = 5 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "1 * 5 = 5 (left: 1 5 6) || 1 + 5 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 6 = 6 (left: 6)",
                "1 * 5 = 5 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "1 * 5 = 5 (left: 1 5 6) || 1 + 5 = 6 (left: 6 6) || 6 + 6 = 12 (left: 12) ",
                "1 + 5 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)"
            ],
            "Pruning": [
                "1<-4.2"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.002,
                0.003,
                20.0
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 4.2",
                "2 <- 4.3",
                "3 <- 4.4",
                "4 <- 5.0"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 5 = 5 (left: 1 5 6) || 1 + 5 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 5 = 5 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 3 + 9 = 12 (left: 12 5)",
                "1 + 5 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 5 = 5 (left: 1 5 6) || 1 + 5 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 + 2 = 38",
                "1 * 5 = 5 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 5) * (6 - 1) = 24"
            ],
            "Pruning": [
                "4<-2.1"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 4.2",
                "2 <- 4.4",
                "3 <- 5.1",
                "4 <- 4.2"
            ]
        },
        "Step 7": {
            "steps": [
                "6 - 1 = 5 (left: 1 5 6) || 1 + 5 = 6 (left: 6 6)",
                "1 * 5 = 5 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "1 * 5 = 5 (left: 1 5 6) || 1 + 5 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 4 = 9 (left: 9)",
                "1 * 5 = 5 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "1 * 5 = 5 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)"
            ],
            "Pruning": [
                "2<-5.0"
            ],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 7.1",
                "1 <- 7.1",
                "2 <- 4.4",
                "3 <- 5.0",
                "4 <- 5.1"
            ]
        },
        "Step 8": {
            "steps": [
                "1 * 5 = 5 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 5) * (6 - 1) = 24",
                "1 * 5 = 5 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 5) * (6 - 1) = 24",
                "1 * 5 = 5 (left: 1 5 6) || 1 + 5 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 cannot be broken down further as it is already a single number.",
                "1 * 5 = 5 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 5) * (6 - 1) = 24",
                "1 * 5 = 5 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || Possible next steps:"
            ],
            "Pruning": [
                "0<-7.1",
                "1<-2.3",
                "3<-7.2"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 8.0",
                "2 <- 8.3",
                "3 <- 7.2",
                "4 <- 4.4"
            ]
        },
        "Step 9": {
            "steps": [
                "1 * 5 = 5 (left: 1 5 6) || 1 + 5 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || No more possible next steps as there is only one number left.",
                "1 * 5 = 5 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 5) * (6 - 1) = 24",
                "1 * 5 = 5 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 5) * (6 - 1) = 24",
                "1 * 5 = 5 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 5) * (6 - 1) = 24",
                "1 * 5 = 5 (left: 1 5 6) || 1 + 5 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 6 = 6"
            ],
            "Pruning": [
                "1<-8.3",
                "2<-7.2",
                "3<-8.3"
            ]
        },
        "Input": "1 1 5 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "32": {
        "puzzle": "1 1 11 13",
        "Step 0": {
            "steps": [
                "13 - 11 = 2 (left: 1 2 13)",
                "11 + 1 = 12 (left: 1 12 13)",
                "1 + 11 = 12 (left: 12 1 13)",
                "13 - 11 = 2 (left: 1 2 13)",
                "13 - 11 = 2 (left: 1 2 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                20.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.3",
                "2 <- INIT",
                "3 <- 0.3",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 13)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11)",
                "13 - 11 = 2 (left: 1 1 ",
                "13 - 11 = 2 (left: 1 2 13) || 1 + 2 = 3 (left: 3 13)",
                "1 * 11 = 11 (left: 11 1 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                2.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.1",
                "2 <- 0.3",
                "3 <- INIT",
                "4 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "13 - 11 = 2 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 + 11 = 12",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "13 - 11 = 2 (left: 1 2 13) || 1 * 2 = 2 (left: 2 13)",
                "13 - 1 = 12 (left: 1 11 ",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.1",
                "2 <- 1.1",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 13)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 11 13)",
                "13 - 11 = 2 (left: 1 2 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.1",
                "2 <- INIT",
                "3 <- 1.1",
                "4 <- 1.1"
            ]
        },
        "Step 4": {
            "steps": [
                "13 - 11 = 2 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "13 - 11 = 2 (left: 1 2 ",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 + 11 = 12",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 3.4",
                "2 <- 1.1",
                "3 <- 1.1",
                "4 <- 1.1"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 13)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 7 - 3 =",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 + 11 = 12"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                20.0,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 5.1",
                "2 <- 1.1",
                "3 <- 1.1",
                "4 <- 5.1"
            ]
        },
        "Step 6": {
            "steps": [
                "13 - 11 = 2 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 1.1",
                "2 <- INIT",
                "3 <- 5.1",
                "4 <- INIT"
            ]
        },
        "Step 7": {
            "steps": [
                "13 - 11 = 2 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 + 11 = 12",
                "1 - 1 = 0 (left: 0 11 13)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "11 + 1 = 12 (left: 1 12 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                21.0,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 7.4",
                "1 <- 7.2",
                "2 <- 7.4",
                "3 <- 7.4",
                "4 <- 7.4"
            ]
        },
        "Step 8": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 13) || 12 / 1 = 12 (left: 12 13)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13)",
                "11 + 1 = 12 (left: 1 12 13) || 1 * 12 = 12 (left: 12 13)",
                "11 + 1 = 12 (left: 1 12 13) || 12 / 1 = 12 (left: 12 13)",
                "11 + 1 = 12 (left: 1 12 13) || 13 / 1 = 13 (left: 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 8.1",
                "1 <- 5.1",
                "2 <- 7.2",
                "3 <- 7.2",
                "4 <- 7.4"
            ]
        },
        "Step 9": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24)",
                "1 - 1 = 0 (left: 0 11 13) || 11 * 13 = 143 (left: 0 143)",
                "11 + 1 = 12 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13)"
            ],
            "Pruning": []
        },
        "Input": "1 1 11 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "33": {
        "puzzle": "1 6 6 12",
        "Step 0": {
            "steps": [
                "6 + 1 = 7 (left: 6 7 12)",
                "12 / 6 = 2 (left: 1 2 ",
                "12 - 6 = 6 (left: 1 6 6)",
                "6 * 1 = 6 (left: 6 6 12)",
                "6 / 1 = 6 (left: 6 6 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                22.0,
                20.002,
                40.001,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.2",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12)",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "12 / 6 = 2 (left: 1 6 ",
                "1 + 6 = 7 (left: 6 7 12)",
                "12 / 6 = 2 (left: 1 2  || 1 * 2 = 2 (left: 2)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                1.001,
                60.0,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.0",
                "2 <- 0.4",
                "3 <- 1.2",
                "4 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "6 + 1 = 7 (left: 6 7 12) || 7 / 6 = 1.17 (left: 1.17 12)",
                "6 + 1 = 7 (left: 6 7 12) || 6 + 7 = 13 (left: 13 12)",
                "6 / 1 = 6 (left: 6 6 12) || 12 - 6 = 6 (left: 6 6)",
                "12 / 6 = 2 (left: 1 6  || 6 - 1 = 5 (left: 5)",
                "12 - 6 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.2",
                "2 <- 1.2",
                "3 <- 1.0",
                "4 <- 0.3"
            ]
        },
        "Step 3": {
            "steps": [
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "12 / 6 = 2 (left: 1 6  || 1 * 6 = 6 (left: 6)",
                "12 / 6 = 2 (left: 1 6  || 1 + 6 = 7 (left: 7)",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24",
                "6 * 1 = 6 (left: 6 6 12) || 12 - 6 = 6 (left: 6 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.002,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 3.0",
                "2 <- 3.0",
                "3 <- 3.0",
                "4 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "12 / 6 = 2 (left: 1 6  || 6 / 1 = 6 (left: 6)",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (6 * 1) + (6 + 6) = 24",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (6 * 1) + (6 + 6) = 24",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (6 * 1) + (6 + 6) = 24",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (6 * 1) + (6 + 6) = 24"
            ],
            "Pruning": [
                "1<-1.2",
                "2<-1.2",
                "3<-3.0",
                "4<-0.4"
            ],
            "Evaluation": [
                0.001,
                40.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 4.2",
                "2 <- 3.0",
                "3 <- 4.3",
                "4 <- 4.2"
            ]
        },
        "Step 5": {
            "steps": [
                "12 / 6 = 2 (left: 1 6  || 1 * 6 = 6 (left: 6)",
                "12 / 6 = 2 (left: 1 6  || 6 / 1 = 6 (left: 6)",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((6 * 1) + 6) + 12 = 24",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (6 * 1) + (6 + 6) = 24",
                "12 / 6 = 2 (left: 1 6  || 6 - 1 = 5 (left: 5) "
            ]
        },
        "Input": "1 6 6 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": -1
            },
            {
                "r": 0
            }
        ]
    },
    "34": {
        "puzzle": "4 5 12 12",
        "Step 0": {
            "steps": [
                "12 + 4 = 16 (left: ",
                "12 / 5 = 2.4 (left: 4 ",
                "4 + 5 = 9 (left: 9 12 12)",
                "12 / 4 = 3 (left: 3 5 12)",
                "12 / 4 = 3 (left: 3 12 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.001,
                21.001,
                2.001,
                60.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.4",
                "4 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "12 / 4 = 3 (left: 5 3 12)",
                "4 + 5 = 9 (left: 9 12 12)",
                "12 / 4 = 3 (left: 3 12 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 + 3 = 15 (left: 12 15)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                1.002,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- INIT",
                "2 <- 1.2",
                "3 <- 0.2",
                "4 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12)",
                "4 + 5 = 9 (left: 9 12 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12 12)",
                "4 + 5 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 12 108)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.002,
                21.001,
                0.003,
                40.001
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.4",
                "2 <- INIT",
                "3 <- 1.2",
                "4 <- 1.2"
            ]
        },
        "Step 3": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 36 / 12 = 3 (left: 3 12)",
                "5 * 4 = 20 (left: 20 12 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                1.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 2.2",
                "2 <- 2.4",
                "3 <- 0.4",
                "4 <- 0.4"
            ]
        },
        "Step 4": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 - 12 = 0 (left: 0 36)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left:"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                41.0,
                40.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 4.2",
                "2 <- 4.1",
                "3 <- 4.1",
                "4 <- 2.4"
            ]
        },
        "Step 5": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 - 12 = 0 (left: 0 36) || 0 / 36 = 0 (left: 36)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 36 / 12 = 3 (left: 3 12)"
            ],
            "Pruning": [
                "1<-2.4",
                "3<-2.4"
            ],
            "Evaluation": [
                21.001,
                60.0,
                20.002,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 5.1",
                "2 <- 5.2",
                "3 <- 0.4",
                "4 <- 5.0"
            ]
        },
        "Step 6": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 + 12 = 24 (left: 24 36)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 36 - 12 = 24 (left: 12 24)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36) || 12 * 3 = 36 (left: 36)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108)"
            ],
            "Pruning": [
                "2<-5.0"
            ],
            "Evaluation": [
                1.002,
                0.003,
                2.001,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 5.3",
                "2 <- 6.4",
                "3 <- 5.1",
                "4 <- 4.1"
            ]
        },
        "Step 7": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 12 * 9 = 108 (left: 108)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 * 36 = 432 (left: 432)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 12 + 108 = 120 (left: 120)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 12 36)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left:"
            ],
            "Pruning": [
                "0<-1.2",
                "2<-6.4"
            ],
            "Evaluation": [
                60.0,
                0.003,
                40.0,
                0.003,
                1.0
            ],
            "Resampling": [
                "0 <- 7.0",
                "1 <- 7.0",
                "2 <- 7.2",
                "3 <- 4.2",
                "4 <- 7.2"
            ]
        },
        "Step 8": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 + 12 = 15 (left: 12 15)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 108 / 12 = 9 (left: 9)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 - 12 = 0 (left: 0 36) || 36 / 36 = 1 (left: 1)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 108 / 12 = 9 (left: 9)"
            ],
            "Pruning": [
                "2<-5.3",
                "3<-7.2",
                "4<-5.0"
            ],
            "Evaluation": [
                2.001,
                0.003,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 8.3",
                "1 <- 5.1",
                "2 <- 8.3",
                "3 <- 8.3",
                "4 <- 8.3"
            ]
        },
        "Step 9": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 9 + 27 = 36 (left: 36 8)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 36 / 12 = 3 (left: 3 36)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 12 * 108 = 1296 (left: 1296)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 108 - 12 = 96 (left: 96)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 108 / 12 = 9 (left: 9 108)"
            ],
            "Pruning": [
                "2<-6.4",
                "3<-7.2"
            ]
        },
        "Input": "4 5 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "35": {
        "puzzle": "4 6 13 13",
        "Step 0": {
            "steps": [
                "6 + 13 = 19 (left: 4 19 13)",
                "4 + 6 = 10 (left: 10 13 13)",
                "13 - 6 = 7 (left: 4 7 13)",
                "4 + 6 = 10 (left: 10 13 13)",
                "13 - 4 = 9 (left: 6 9 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                41.0,
                0.003,
                1.002,
                0.003,
                21.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.4",
                "2 <- 0.0",
                "3 <- 0.0",
                "4 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "13 - 6 = 7 (left: ",
                "13 - 4 = 9 (left: 6 9 13) || 6 * 9 = 54 (left: 13 54)",
                "6 + 13 = 19 (left: 4 19 13) || 4 + 19 = 23 (left: 13 23)",
                "6 + 13 = 19 (left: 4 19 13) || 13 + 4 = 17 (left: 17)",
                "6 + 13 = 19 (left: 4 19 13) || 4 * 19 = 76 (left: 76 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                2.001,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.4",
                "3 <- 0.0",
                "4 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "13 / 6 = 2.16666666667 (left: 4 13 13)",
                "4 + 6 = 10 (left: 10 13 13)",
                "13 - 4 = 9 (left: 6 9 13) || 13 - 6 = 7 (left: 7 13)",
                "6 + 13 = 19 (left: 4 19 13) || 19 - 13 = 6 (left: 4 6)",
                "13 - 4 = 9 (left: 6 9 13) || 6 * 9 = 54 (left: 13 54) || 13 * 54 = 702 (left: 702)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.0,
                40.0,
                0.002
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.3",
                "2 <- 1.1",
                "3 <- 2.3",
                "4 <- 2.3"
            ]
        },
        "Step 3": {
            "steps": [
                "6 + 13 = 19 (left: 4 19 13) || 19 - 13 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "6 + 13 = 19 (left: 4 19 13) || 19 - 13 = 6 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "13 - 4 = 9 (left: 6 9 13) || 6 * 9 = 54 (left: 13 54) || 13 - 54 = -41 (left: -41)",
                "6 + 13 = 19 (left: 4 19 13) || 19 - 13 = 6 (left: 4 6) || 4 - 6 = -2 (left: -2)",
                "6 + 13 = 19 (left: 4 19 13) || 19 - 13 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                0.002,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.0",
                "2 <- 3.4",
                "3 <- INIT",
                "4 <- 2.3"
            ]
        },
        "Step 4": {
            "steps": [
                "4 + 6 = 10 (left: 10 13 13)",
                "6 + 13 = 19 (left: 4 19 13) || 4 * 19 = 76 (left: 13 76)",
                "6 + 13 = 19 (left: 4 19 13) || 19 - 13 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (6 + (13 - 13)) = 24",
                "4 + 6 = 10 (left: 10 13 13)",
                "6 + 13 = 19 (left: 4 19 13) || 19 - 13 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)"
            ]
        },
        "Input": "4 6 13 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "36": {
        "puzzle": "12 12 12 12",
        "Step 0": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12)",
                "12 + 12 = 24 (left: 12 24 12)",
                "12 + 12 = 24 (left: 12 24 12)",
                "12 / 12 = 1 (left: 1 12 12)",
                "12 * 12 = 144 (left: 12 12 144)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                2.001,
                60.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.0",
                "2 <- 0.0",
                "3 <- INIT",
                "4 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "12 + 12 = 24 (left: 12 24 12) || 24 / 12 = 2 (left: 2 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 12 = 0 (left: 0)",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)",
                "12 * 12 = 144 (left: 12 12 144)",
                "12 * 12 = 144 (left: 12 12 144) || 12 - 12 = 0 (left: 0 144)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                20.002,
                20.002,
                1.002,
                1.001
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 0.0",
                "2 <- 0.2",
                "3 <- 1.2",
                "4 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "12 + 12 = 24 (left: 12 24 12) || 24 / 12 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "12 - 12 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 12)",
                "12 + 12 = 24 (left: 12 24 12) || 24 - 12 = 12 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 + 12 = 24 (left: 12 24 12) || 24 / 12 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                40.0,
                41.0,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 2.1",
                "3 <- 2.2",
                "4 <- 1.0"
            ]
        },
        "Step 3": {
            "steps": [
                "12 + 12 = 24 (left: 12 24 12) || 24 / 12 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (12 + 12) + (12 / 12) = 24",
                "12 + 12 = 24 (left: 12 24 12) || 24 / 12 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (12 + 12) / (12 / 2) = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 12) || 12 + 0 = 12 (left: 12)",
                "12 + 12 = 24 (left: 12 24 12) || 24 - 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 + 12 = 24 (left: 12 24 12) || 24 / 12 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)"
            ],
            "Pruning": [
                "0<-0.2",
                "1<-1.1"
            ],
            "Evaluation": [
                60.0,
                0.001,
                0.003,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 1.0",
                "2 <- 2.2",
                "3 <- 0.2",
                "4 <- 1.0"
            ]
        },
        "Step 4": {
            "steps": [
                "12 + 12 = 24 (left: 12 24 12) || 24 + 12 = 36 (left: 12 36)",
                "12 + 12 = 24 (left: 12 24 12) || 24 / 12 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "12 + 12 = 24 (left: 12 24 12) || 24 - 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 + 12 = 24 (left: 12 24 12) || Possible next steps:",
                "12 + 12 = 24 (left: 12 24 12) || 24 / 12 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 2.0",
                "2 <- 3.0",
                "3 <- 3.0",
                "4 <- 2.0"
            ]
        },
        "Step 5": {
            "steps": [
                "12 + 12 = 24 (left: 12 24 12) || 24 - 12 = 12 (left: 12 12)",
                "12 + 12 = 24 (left: 12 24 12) || 24 / 12 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (12 + 12) * (12 / 12) = 24",
                "12 + 12 = 24 (left: 12 24 12) || Input: 2 3 6 24",
                "12 + 12 = 24 (left: 12 24 12) || 24 / 12 = 2 (left: 2 12)",
                "12 + 12 = 24 (left: 12 24 12) || 24 / 12 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (12 + 12) + (12 / 12) = 24"
            ]
        },
        "Input": "12 12 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            }
        ]
    },
    "37": {
        "puzzle": "2 11 11 12",
        "Step 0": {
            "steps": [
                "12 - 11 = 1 (left: 2 11 1)",
                "12 - 11 = 1 (left: 1 11 12)",
                "11 - 2 = 9 (left: 9 11 12)",
                "11 / 2 = 5.5 (left: 5.5 11 12)",
                "2 * 11 = 22 (left: 11 12 22)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.0,
                41.0,
                1.002,
                3.0,
                20.002
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.1",
                "2 <- 0.1",
                "3 <- 0.4",
                "4 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 11 = 1 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11)",
                "2 * 11 = 22 (left: 11 12 22) || 11 * 12 = 132 (left: 132 22)",
                "2 * 11 = 22 (left: 11 12 22) || 11 + 12 = 23 (left: 23 22)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                40.001,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.1",
                "2 <- 1.2",
                "3 <- INIT",
                "4 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "12 - 11 = 1 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 - 11 = 1 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 2 = 6 (left: 6 11 11)",
                "12 - 11 = 1 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.002,
                0.002,
                41.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 1.1",
                "2 <- 2.4",
                "3 <- 2.4",
                "4 <- 2.4"
            ]
        },
        "Step 3": {
            "steps": [
                "12 / 2 = 6 (left: 6 11 11) || Input: 8 3",
                "12 - 11 = 1 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 - 11 = 1 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((2 + 11 - 11) + 12) + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((2 + 11) + 11) + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((2 + 11) + 11) + 12 = 24"
            ],
            "Pruning": [
                "2<-2.4",
                "3<-2.3",
                "4<-1.1"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                2.001,
                60.0
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 3.4",
                "3 <- 3.4",
                "4 <- 2.3"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (12 + (11 + (11 - 2))) = 24",
                "12 - 11 = 1 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((2 + 11) + 11) + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 - 11 = 1 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 / 2 = 6 (left: 6 11 11) || 11 - 6 = 5 (left: 5 11 11)"
            ],
            "Pruning": [
                "0<-2.3",
                "1<-2.4"
            ],
            "Evaluation": [
                40.001,
                60.0,
                0.003,
                0.003,
                21.001
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 1.2",
                "2 <- 4.1",
                "3 <- 1.2",
                "4 <- 2.0"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((2 + 11) + (11 - 12)) + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "12 - 11 = 1 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (12 + (11 - 11)) + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 - 11 = 1 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (2 + (11 - 11)) + 12 = 24"
            ],
            "Pruning": [
                "0<-2.0",
                "2<-2.4",
                "4<-2.4"
            ],
            "Evaluation": [
                60.0,
                0.003,
                60.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 4.1",
                "2 <- 5.4",
                "3 <- 0.4",
                "4 <- 3.2"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((2 + 11) + 11) + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (2 + (11 - 11)) * 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (2 + (11 - 11)) + 12 = 24",
                "2 * 11 = 22 (left: 11 12 22) || 11 + 12 = 23 (left: 22)",
                "12 - 11 = 1 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (2 + (11 - 11)) + 12 = 24"
            ]
        },
        "Input": "2 11 11 12",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": 1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            }
        ]
    },
    "38": {
        "puzzle": "4 4 4 6",
        "Step 0": {
            "steps": [
                "6 - 4 = 2 (left: 4 4 2)",
                "4 / 4 = 1 (left: 4 4 6)",
                "4 + 4 = 8 (left: 4 6 8)",
                "4 / 4 = 1 (left: 4 4 6)",
                "4 + 4 = 8 (left: 4 8 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                3.0,
                60.0,
                22.0,
                41.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.2",
                "2 <- 0.4",
                "3 <- 0.2",
                "4 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = ",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6)",
                "4 + 4 = 8 (left: 4 8 6) || 4 + 8 = 12 (left: 6 12)",
                "4 + 4 = 8 (left: 4 6 8) || 6 * 8 = 48 (left: 4 48)",
                "4 + 4 = 8 (left: 4 8 6) || 8 / 4 = 2 (left: 2 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                40.0,
                1.002,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.2",
                "2 <- 0.0",
                "3 <- INIT",
                "4 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "4 + 4 = 8 (left: 4 6 8) || 6 + 8 = 14 (left: 4 14)",
                "4 + 4 = 8 (left: 4 6 8) || 6 + 8 = 14 (left: 4 14)",
                "6 - 4 = 2 (left: 4 4 2) || 2 * 4 = 8 (left: 4 8)",
                "6 - 4 = 2 (left: 2 4 6)",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = "
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 0.2",
                "2 <- 0.3",
                "3 <- 1.1",
                "4 <- 1.1"
            ]
        },
        "Step 3": {
            "steps": [
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 / 6 = 0.6666666666666666 (left: 0.6666666666666666)",
                "4 + 4 = 8 (left: 4 6 8) || 6 * 8 = 48 (left: 4 48)",
                "4 / 4 = 1 (left: 4 4 6) || 4 + 4 = 8 (left: 8 6)",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                0.003,
                0.003,
                40.0,
                0.002
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 0.2",
                "2 <- 3.0",
                "3 <- INIT",
                "4 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 6 8) || 6 * 8 = 48 (left: 4 48)",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 / 6 = 0.6666666666666666 (left: 0.6666666666666666) || There are no possible next steps with the input 0.6666666666666666.",
                "4 * 4 = 16 (left: 6 4 16)",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 / 6 = 0.6666666666666666 (left: 0.6666666666666666) || 0.6666666666666666 * 2 = 1.3333333333333333"
            ],
            "Pruning": [
                "0<-3.3"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 4.3",
                "2 <- 4.0",
                "3 <- 4.0",
                "4 <- 4.0"
            ]
        },
        "Step 5": {
            "steps": [
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 * 4 = 16 (left: 6 4 16) || 4 * 6 = 24 (left: 24 16)",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24"
            ],
            "Pruning": [
                "0<-4.3",
                "2<-4.3",
                "3<-3.3",
                "4<-4.3"
            ],
            "Evaluation": [
                60.0,
                0.003,
                21.001,
                40.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 5.2",
                "2 <- 4.3",
                "3 <- 5.3",
                "4 <- 3.3"
            ]
        },
        "Step 6": {
            "steps": [
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * 6) = 24",
                "4 * 4 = 16 (left: 6 4 16) || 16 / 4 = 4 (left: 6 4)",
                "4 * 4 = 16 (left: 6 4 16) || Input: 1.5",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24"
            ],
            "Pruning": [
                "0<-5.0",
                "3<-4.3",
                "4<-4.3"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 6.1",
                "2 <- 6.4",
                "3 <- 5.4",
                "4 <- 5.0"
            ]
        },
        "Step 7": {
            "steps": [
                "4 * 4 = 16 (left: 6 4 16) || 6 + 4 = 10 (left: 10 16)",
                "4 * 4 = 16 (left: 6 4 16) || 16 / 4 = 4 (left: 6 4) || 6 - 4 = 2 (left: 2)",
                "4 * 4 = 16 (left: 6 4 16) || 6 / 4 = 1.5 (left: 1.5 16)",
                "4 * 4 = 16 (left: 6 4 16) || 6 / 4 = 1.5 (left: 1.5 16)",
                "4 * 4 = 16 (left: 6 4 16) || 6 / 4 = 1.5 (left: 1.5 16)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 6.3",
                "2 <- 5.2",
                "3 <- 7.3",
                "4 <- 6.3"
            ]
        },
        "Step 8": {
            "steps": [
                "4 * 4 = 16 (left: 6 4 16) || 6 * 4 = 24 (left: 24 16)",
                "4 * 4 = 16 (left: 6 4 16) || 4 * 16 = 64 (left: 6 64)",
                "4 * 4 = 16 (left: 6 4 16) || ",
                "4 * 4 = 16 (left: 6 4 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 + 1.5 = 17.5 (left: 17.5)",
                "4 * 4 = 16 (left: 6 4 16) || 16 - 6 = 10 (left: 4 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                1.001,
                0.003,
                0.003,
                40.0
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 7.3",
                "2 <- 6.0",
                "3 <- 7.3",
                "4 <- 8.0"
            ]
        },
        "Step 9": {
            "steps": [
                "4 * 4 = 16 (left: 6 4 16) || 6 * 4 = 24 (left: 24 16)",
                "4 * 4 = 16 (left: 6 4 16) || 6 / 4 = 1.5 (left: 1.5 16) || 3 + 5 = 8 (left",
                "4 * 4 = 16 (left: 6 4 16) || 16 - 6 = 10 (left: 4 10)",
                "4 * 4 = 16 (left: 6 4 16) || 6 / 4 = 1.5 (left: 1.5 16) || 1.5 + 16 = 17.5 (left: 16 17.5)",
                "4 * 4 = 16 (left: 6 4 16) || 6 * 4 = 24 (left: 24 16) || 24 + 16 = 40 (left: 40)"
            ],
            "Pruning": []
        },
        "Input": "4 4 4 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "39": {
        "puzzle": "1 1 1 11",
        "Step 0": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 11)",
                "1 / 1 = 1 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1 ",
                "11 - 1 = 10 (left: 1 1 10)",
                "1 * 1 * 1 = 1 (left: "
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 11)",
                "1 + 1 = 2 (left: 1 2 11)",
                "11 - 1 = 10 (left: 1 1 10)",
                "1 * 1 = 1 (left: 1 1 ",
                "1 + 1 = 2 (left: 1 2 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                0.003,
                1.002,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 1.4",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "11 - 1 = 10 (left: 1 1 10)",
                "11 - 1 = 10 (left: 1 1 10)",
                "11 - 1 = 10 (left: 1 1 10)",
                "1 + 1 = 2 (left: 1 2 11) || 1 + 11 = ",
                "11 / 1 = 11 (left: 1 1 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                1.002,
                0.003,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.4",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 11)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9)",
                "11 - 1 = 10 (left: 1 1 10)",
                "11 / 1 = 11 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 3.1",
                "2 <- 1.0",
                "3 <- 3.1",
                "4 <- 3.1"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 1 + 9 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 1 + 9 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 11) || 1 + 2 = 3 (left: 3 11)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 3.1",
                "2 <- 3.1",
                "3 <- 3.1",
                "4 <- 3.1"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 1 + 9 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 1 + 9 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.001,
                0.002,
                0.002,
                0.0
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 3.1",
                "2 <- 3.1",
                "3 <- INIT",
                "4 <- 3.1"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 1 2 11)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 1 + 9 = 10 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.001,
                0.002,
                1.001,
                0.002
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 3.1",
                "2 <- 3.1",
                "3 <- 3.1",
                "4 <- 3.1"
            ]
        },
        "Step 7": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 1 + 9 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 1 + 9 = 10 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.0,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 3.1",
                "2 <- 3.1",
                "3 <- 3.1",
                "4 <- 3.1"
            ]
        },
        "Step 8": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 11)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 1 + 9 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.003,
                0.002,
                0.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 3.1",
                "2 <- 3.1",
                "3 <- 3.1",
                "4 <- 3.1"
            ]
        },
        "Step 9": {
            "steps": [
                "1 * 1 = 1 (left: 1 1  || 1 / 1 = 1 (left: 1)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 1 + 9 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)"
            ],
            "Pruning": []
        },
        "Input": "1 1 1 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "40": {
        "puzzle": "1 1 11 12",
        "Step 0": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 12)",
                "1 - 1 = 0 (left: 0 11 12)",
                "12 - 1 = 11 (left: 1 11 ",
                "1 + 1 = 2 (left: 2 11 12)",
                "1 + 11 = 12 (left: 11 12 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                3.0,
                0.003,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 12)",
                "1 * 1 = 1 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 11 12)",
                "1 * 11 = 11 (left: 11 11 ",
                "11 - 1 = 10 (left: 1 10 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                21.001,
                21.001,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- 1.1",
                "3 <- 1.1",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12)",
                "1 * 1 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "1 * 1 = 1 (left: 1 11 12) || 12 / 1 = 12 (left: 11 12)",
                "1 * 1 = 1 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12)",
                "11 - 1 = 10 (left: 1 10 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                40.001,
                1.002
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.0",
                "2 <- 2.3",
                "3 <- 2.0",
                "4 <- 2.0"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 * 1 = 1 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "1 * 1 = 1 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.3",
                "2 <- 3.0",
                "3 <- 3.0",
                "4 <- 0.1"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 * 1 = 1 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (1 * 1) + (11 + 12) = 24",
                "1 * 1 = 1 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (1 * 1) + (11 + 12) = 24",
                "1 - 1 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132)"
            ]
        },
        "Input": "1 1 11 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "41": {
        "puzzle": "2 7 7 12",
        "Step 0": {
            "steps": [
                "2 * 7 = 14 (left: 7 12 14)",
                "12 - 7 = 5 (left: ",
                "12 - 7 = 5 (left: 2 5 7)",
                "2 * 7 = 14 (left: 7 14 12)",
                "12 - 7 = 5 (left: "
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                0.0,
                3.0,
                2.001,
                0.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.0",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "7 - 2 = 5 (left: 5 5 12)",
                "7 - 2 = 5 (left: 5 7 12)",
                "7 + 2 = 9 (left: 7 9 12)",
                "2 * 7 = 14 (left: 7 12 14) || 14 - 7 = 7 (left: 7 7)",
                "7 * 2 = 14 (left: 5 12 14)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                21.001,
                2.001,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.1",
                "3 <- INIT",
                "4 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "12 + 2 = 14 (left: 7 7 14)",
                "7 / 2 = 3.5 (left: 3.5 7 12)",
                "7 - 2 = 5 (left: 5 7 12) || 12 - 5 = 7 (left: 7 12)",
                "12 - 2 = 10 (left: 7 10 12)",
                "7 - 2 = 5 (left: 5 7 12) || 5 - 7 = -2 (left: -2 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                40.001,
                1.001,
                2.001,
                20.001
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.1",
                "2 <- INIT",
                "3 <- 2.1",
                "4 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "7 - 2 = 5 (left: 5 7 12) || 12 - 5 = 7 (left: 7 12) || 12 - 7 = 5 (left: 5)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 7 * 3.5 = 24.5 (left: 12 24.5)",
                "2 * 7 = 14 (left: 7 14 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 7 - 3.5 = 3.5 (left: 3.5",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 7 - 3.5 = 3."
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                3.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 1.1",
                "2 <- 2.1",
                "3 <- INIT",
                "4 <- 3.2"
            ]
        },
        "Step 4": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12) || 3.5 + 7 = 10.5 (left: 10.5 12)",
                "7 - 2 = 5 (left: 5 7 12) || 12 / 5 = 2.4 (left: 2.4 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 7 * 12 = 84 (left: 3.5",
                "2 + 7 = 9 (left: 7 9 12)",
                "2 * 7 = 14 (left: 7 14 12) || 14 / 7 = 2 (left: 2 2 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.002,
                0.002,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.4",
                "2 <- 4.3",
                "3 <- INIT",
                "4 <- 2.1"
            ]
        },
        "Step 5": {
            "steps": [
                "7 - 2 = 5 (left: 5 7 12) || 5 - 7 = -2 (left: -2 12) || -2 - 12 = -14 (left: -14)",
                "7 - 2 = 5 (left: 5 7 12) || 5 - 7 = -2 (left: -2 12) || -2 - 12 = -14 (left: -14)",
                "2 + 7 = 9 (left: 7 9 12) || 7 + 9 = 16 (left: 16 12)",
                "12 - 7 = 5 (left: ",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.0,
                21.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 4.3",
                "2 <- 5.4",
                "3 <- 2.1",
                "4 <- INIT"
            ]
        },
        "Step 6": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12)",
                "2 + 7 = 9 (left: 7 9 12) || 7 + 9 = 16 (left: 16 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7 12) || 12 - 3.42857142857 = 8.57142857143 (left: 8.57142857143 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7)",
                "2 + 7 = 9 (left: 7 9 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                0.003,
                3.0,
                60.0,
                1.002
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 6.3",
                "2 <- 6.3",
                "3 <- 6.3",
                "4 <- 6.3"
            ]
        },
        "Step 7": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7) || 3.42857142857 * 7 = 24 (left: 7 24)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7) || 7 / 3.42857142857 = 2.04347826087 (left: 2.04347826087 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7) || 7 / 3.42857142857 = 2.04347826087 (left:",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7) || 7 - 3.42857142857 = 3.57142857143 (left: 3.57142857143 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7) || 3.42857142857 + 7 = 10.42857142857 (left: 7 10.42857142857)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.001,
                0.001,
                2.001,
                1.002
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 6.3",
                "2 <- 6.3",
                "3 <- 6.3",
                "4 <- 6.3"
            ]
        },
        "Step 8": {
            "steps": [
                "2 * 7 = 14 (left: 7 14 12) || 12 + 7 = 19 (left: 19)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7) || 3.42857142857 * 7 = 24 (left: 24)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7) || 7 / 3.42857142857 = 2.04347826087 (left: 2.04347826087 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7) || 3.42857142857 - 7 = -3.57142857143 (left: -3.571428571",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7) || 7 / 3.42857142857 = 2.04166666667 (left: 2.04166666667 3.42857142857)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                60.0,
                1.001,
                0.0,
                3.0
            ],
            "Resampling": [
                "0 <- 8.1",
                "1 <- 8.1",
                "2 <- 8.1",
                "3 <- 8.1",
                "4 <- 5.4"
            ]
        },
        "Step 9": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7) || 3.42857142857 * 7 = 24 (left: 24) || Answer: (12 / (7 / 2)) * 7 = 24",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7) || 3.42857142857 * 7 = 24 (left: 24) || Answer: (12 / (7 / 2)) * 7 = 24",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7) || 3.42857142857 * 7 = 24 (left: 24) || Answer: (12 / (7 / 2)) * 7 = 24",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7) || 3.42857142857 * 7 = 24 (left: 24) || Answer: (12 / (7 / 2)) * 7 = 24",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7 12) || 12 - 3.42857142857 = 8.57142857143 (left: 8.57142857143 12)"
            ]
        },
        "Input": "2 7 7 12",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "42": {
        "puzzle": "1 5 7 12",
        "Step 0": {
            "steps": [
                "5 + 7 = 12 (left: 1 12 12)",
                "12 - 7 = 5 (left: 1 5 12)",
                "1 + 5 = 6 (left: 6 7 12)",
                "1 + 5 = 6 (left: 6 7 12)",
                "12 - 7 = 5 (left: 1 5 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.001,
                22.0,
                22.0,
                2.001,
                1.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.1",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 5 = 6 (left: 6 7 12)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7)",
                "5 * 7 = 35 (left: 1 35 ",
                "5 + 7 = 12 (left: 1 12 12)",
                "7 - 5 = 2 (left: 1 2 "
            ],
            "Pruning": [],
            "Evaluation": [
                22.0,
                20.0,
                1.002,
                22.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.0",
                "2 <- 0.0",
                "3 <- 1.0",
                "4 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 7 = 5 (left: 1 5 12) || 12 / 5 = 2.4 (",
                "5 + 7 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "5 + 7 = 12 (left: 1 12 12) || 12 - 12 = 0 (left: 1 0)",
                "1 + 5 = 6 (left: 6 7 12) || 12 - 6 = 6 (left: 6 6)",
                "5 + 7 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                20.002,
                40.001,
                40.001
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.1",
                "2 <- 2.2",
                "3 <- 0.2",
                "4 <- 2.3"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 5 = 6 (left: 6 7 12) || 12 - 6 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "5 + 7 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "5 + 7 = 12 (left: 1 12 12) || 12 - 12 = 0 (left: 1 0) || 5 - 3 = 2 (left: 2)",
                "1 + 5 = 6 (left: 6 7 12) || 7 * 6 = 42 (left: 42 12)",
                "1 + 5 = 6 (left: 6 7 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                1.002,
                60.0
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 3.4",
                "2 <- 0.2",
                "3 <- INIT",
                "4 <- 1.0"
            ]
        },
        "Step 4": {
            "steps": [
                "5 + 7 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "1 + 5 = 6 (left: 6 7 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "1 + 5 = 6 (left: 6 7 12) || 7 + 12 = 19 (left: 6 19)",
                "12 - 7 = 5 (left: 1 5 12)",
                "1 + 5 = 6 (left: 6 7 12) || 12 - 6 = 6 (left: 6 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.003,
                0.003,
                3.0,
                1.002
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 4.3",
                "2 <- 0.1",
                "3 <- 2.1",
                "4 <- 0.0"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 5 = 6 (left: 6 7 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || There are no possible next steps with the input 36.",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7)",
                "5 + 7 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "5 + 7 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                21.0,
                60.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 3.4",
                "2 <- 5.4",
                "3 <- 5.2",
                "4 <- 2.3"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 1 * 7 = 7 (left: 7)",
                "1 + 5 = 6 (left: 6 7 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || There are no possible next steps with only one number provided.",
                "5 + 7 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 * 1 = 7 (left: 7)",
                "1 + 5 = 6 (left: 6 7 12) || 12 - 6 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 3.4",
                "2 <- 1.1",
                "3 <- 5.1",
                "4 <- 5.2"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 1 * 7 = 7 (left: 7)",
                "1 + 5 = 6 (left: 6 7 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || None, as there is only one number provided.",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 1 + 7 = 8 (left: 8)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.001,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 2.2",
                "2 <- 5.4",
                "3 <- 2.3",
                "4 <- 1.0"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "5 + 7 = 12 (left: 1 12 12) || 12 - 12 = 0 (left: 1 0) || 1 / 0 = undefined (left: 1 0)",
                "5 + 7 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "1 + 5 = 6 (left: 6 7 12) || 12 - 6 = 6 (left: 6 6) || 6 + 6 = 12 (left: 12)",
                "1 + 5 = 6 (left: 6 7 12) || 6 + 7 = 13 (left: 13 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                20.002,
                60.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 8.2",
                "2 <- 8.2",
                "3 <- 8.1",
                "4 <- 1.0"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "5 + 7 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (5 + 7) * (12 / 1) = 24",
                "5 + 7 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (5 + 7) * (12 / 1) = 24",
                "5 + 7 = 12 (left: 1 12 12) || 12 - 12 = 0 (left: 1 0) || 1 / 0 = undefined (left: 1 0) || 1 / 0 = undefined",
                "1 + 5 = 6 (left: 6 7 12) || 12 - 7 = 5 (left: 6 5)"
            ],
            "Pruning": [
                "1<-8.1",
                "2<-8.2"
            ]
        },
        "Input": "1 5 7 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "43": {
        "puzzle": "10 10 12 12",
        "Step 0": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12)",
                "12 + 10 = 22 (left: 10 12 22)",
                "10 / 10 = 1 (left: 1 12 12)",
                "12 - 10 = 2 (left: 2 12 12)",
                "12 - 10 = 2 (left: 2 12 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.002,
                21.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.2",
                "4 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "10 * 10 = 100 (left: 12 12 100)",
                "10 * 10 = 100 (left: 12 12 100)",
                "10 * 10 = 100 (left: 12 12 100)",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "10 / 10 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                2.001,
                20.002,
                60.0,
                20.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- 1.3",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "10 / 10 = 1 (left: 1 12 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                60.0,
                20.002
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- INIT",
                "2 <- 2.2",
                "3 <- 2.4",
                "4 <- 1.4"
            ]
        },
        "Step 3": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (10 / 10) * (12 + 12) = 24",
                "12 + 10 = 22 (left: 10 12 22)",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (10 / 10) + (12 + 12) = 24",
                "10 / 10 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "10 / 10 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)"
            ]
        },
        "Input": "10 10 12 12",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "44": {
        "puzzle": "1 8 8 8",
        "Step 0": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8)",
                "8 - 1 = 7 (left: 7 8 8)",
                "8 * 1 = 8 (left: 8 8 8)",
                "1 + 8 = 9 (left: 8 8 9)",
                "8 / 1 = 8 (left: 8 8 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                3.0,
                0.003,
                2.001,
                21.001
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8) || 8 - 8 = 0 (left: 0)",
                "8 - 8 = 0 (left: 1 0 8)",
                "8 / 1 = 8 (left: 8 8 8)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8)",
                "1 + 8 = 9 (left: 8 8 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.001,
                20.002,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- INIT",
                "2 <- 1.3",
                "3 <- 0.1",
                "4 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8)",
                "8 / 1 = 8 (left: 8 8 8)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 7 8 8) || 7 + 8 = 15 (left: 8 8 15)",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.0,
                1.002,
                0.0,
                1.002,
                60.0
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.0",
                "2 <- 2.4",
                "3 <- 2.0",
                "4 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16) || 8 - 16 = -8 (left: -8)",
                "8 / 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16) || 16 - 8 = 8 (left: 8)",
                "8 / 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 1 + 8 = 9 (left: 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.002,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.4",
                "2 <- 2.4",
                "3 <- 2.4",
                "4 <- 2.0"
            ]
        },
        "Step 4": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16) || 8 * 16 = 128 (left: 128)",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16) || 16 - 8 = 8 (left: 8)",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16) || 16 / 8 =",
                "8 / 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.001,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 2.4",
                "2 <- 2.4",
                "3 <- 2.0",
                "4 <- 2.0"
            ]
        },
        "Step 5": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1)",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24)",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16) || 8 + 16 =",
                "8 / 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 / 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                60.0,
                0.003,
                0.0,
                0.002
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 5.1",
                "2 <- 5.1",
                "3 <- 5.1",
                "4 <- 5.1"
            ]
        },
        "Step 6": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24) || Answer: ((8 / 1) + 8) + 16 = 24",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24) || Answer: (8 / 1) * (8 + 8) = 24",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24) || Answer: (8 / 1) * (8 + 8) = 24",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24) || Answer: ((8 / 1) + 8) + 8 = 24",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24) || Answer: (8 / 1) * (8 + 8) = 24"
            ]
        },
        "Input": "1 8 8 8",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 1
            },
            {
                "r": -1
            }
        ]
    },
    "45": {
        "puzzle": "2 2 3 8",
        "Step 0": {
            "steps": [
                "2 * 2 = 4 (left: 4 3 8)",
                "2 + 2 = 4 (left: 3 4 8)",
                "3 * 2 = 6 (left: 6 2 ",
                "2 + 3 = 5 (left: 2 5 8)",
                "8 - 2 = 6 (left: 2 3 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                3.0,
                1.0,
                2.0,
                22.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.4",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "3 + 2 = 5 (left: 2 5 8)",
                "3 + 2 = 5 (left: 5 3 8)",
                "3 * 2 = 6 (left: 2 6 8)",
                "8 - 2 = 6 (left: 2 3 6) || 6 - 2 = 4 (left: 2 4 6)",
                "3 + 2 = 5 (left: 2 5 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                3.0,
                1.002,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.0",
                "2 <- 0.2",
                "3 <- 0.1",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "3 + 2 = 5 (left: 2 5 8)",
                "2 * 2 = 4 (left: 4 3 8) || 3 * 8 = 24 (left: 4 24)",
                "3 * 2 = 6 (left: 6 2  || 6 / 2 = 3 (left: 3)",
                "2 + 2 = 4 (left: 3 4 8) || 8 - 3 = 5 (left: 5 8)",
                "2 * 2 = 4 (left: 4 3 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                40.001,
                0.0,
                0.002,
                2.0
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 2.0",
                "3 <- INIT",
                "4 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 2 = 4 (left: 4 3 8) || 3 * 8 = 24 (left: 4 24) || 4 * 6 = 24 (left: 6)",
                "2 * 2 = 4 (left: 4 3 8) || 3 * 8 = 24 (left: 4 24) || 24 / 4 = 6 (left: 6)",
                "3 + 2 = 5 (left: 2 5 8) || 2 * 5 = 10 (left: 10 8)",
                "8 - 2 = 6 (left: 2 3 ",
                "2 * 2 = 4 (left: 4 3 8) || 3 * 8 = 24 (left: 4 24) || 4 + 24 = 28 (left: 28)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.1",
                "2 <- 2.1",
                "3 <- 2.1",
                "4 <- 1.1"
            ]
        },
        "Step 4": {
            "steps": [
                "2 * 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8)",
                "2 * 2 = 4 (left: 4 3 8) || 3 * 8 = 24 (left: 4 24) || 24 * 4 = 96 (left: 96)",
                "2 * 2 = 4 (left: 4 3 8) || 3 * 8 = 24 (left: 4 24) || 3 * ",
                "2 * 2 = 4 (left: 4 3 8) || 3 * 8 = 24 (left: 4 24) || 24 - 4 = 20 (left: 20)",
                "3 + 2 = 5 (left: 5 3 8) || 8 / 3 = 2.66666666667 (left: 2.66666666667 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 4.0",
                "2 <- 4.0",
                "3 <- 4.0",
                "4 <- 2.1"
            ]
        },
        "Step 5": {
            "steps": [
                "2 * 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "2 * 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "2 * 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "2 * 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "2 * 2 = 4 (left: 4 3 8) || 3 * 8 = 24 (left: 4 24) || 4 * 24 = 96 (left: 96)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.002,
                0.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 4.0",
                "2 <- 2.0",
                "3 <- 4.0",
                "4 <- 4.0"
            ]
        },
        "Step 6": {
            "steps": [
                "2 * 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 1 + 8 = 9 (left: 9)",
                "2 * 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 1 + 8 = 9 (left: 9)",
                "3 + 2 = 5 (left: 2 5 8) || 2 + 5 = 7 (left: 7 8)",
                "2 * 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "2 * 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                21.001,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 6.2",
                "2 <- 6.2",
                "3 <- 4.0",
                "4 <- 6.2"
            ]
        },
        "Step 7": {
            "steps": [
                "2 * 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "3 + 2 = 5 (left: 2 5 8) || 2 + 5 = 7 (left: 7 8) || 7 + 8 = 15 (left: 15)",
                "3 + 2 = 5 (left: 2 5 8) || 2 + 5 = 7 (left: 7 8) || 7 + 8 = 15 (left: 15)",
                "2 * 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "3 + 2 = 5 (left: 2 5 8) || 2 + 5 = 7 (left: 7 8) || 7 / 8 = 0.875 (left: 0.875)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 4.0",
                "2 <- 2.4",
                "3 <- 1.2",
                "4 <- 6.2"
            ]
        },
        "Step 8": {
            "steps": [
                "2 * 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "2 * 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "2 * 2 = 4 (left: 4 3 8) || 4 * 3 = 12 (left: 12 8)",
                "3 * 2 = 6 (left: 2 6 8) || 2 + 6 = 8 (left: 8 8)",
                "3 + 2 = 5 (left: 2 5 8) || 2 + 5 = 7 (left: 7 8) || 7 + 8 = 15 (left: 15)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.001,
                1.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 4.0",
                "2 <- 4.0",
                "3 <- 6.2",
                "4 <- 6.2"
            ]
        },
        "Step 9": {
            "steps": [
                "3 + 2 = 5 (left: 2 5 8) || 2 + 5 = 7 (left: 7 8) || 8 + 7 = 15 (left: 15)",
                "2 * 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 1 + 8 = 9 (left: 8 9)",
                "2 * 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "3 + 2 = 5 (left: 2 5 8) || 2 + 5 = 7 (left: 7 8) || 7 * 8 = 56 (left: 56)",
                "3 + 2 = 5 (left: 2 5 8) || 2 + 5 = 7 (left: 7 8) || 7 + 8 = 15 (left: 8 15)"
            ],
            "Pruning": []
        },
        "Input": "2 2 3 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "46": {
        "puzzle": "2 9 9 12",
        "Step 0": {
            "steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12)",
                "12 - 2 = 10 (left: 9 10 12)",
                "2 * 9 = 18 (left: 9 12 18)",
                "9 - 2 = 7 (left: 7 9 12)",
                "12 - 9 = 3 (left: 2 3 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                3.0,
                3.0,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12)",
                "9 - 2 = 7 (left: 7 9 12)",
                "9 - 2 = 7 (left: 7 9 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                3.0,
                2.001,
                2.001,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.2",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12)",
                "9 - 2 = 7 (left: 7 9 12) || 12 - 9 = 3 (left: 7 3)",
                "9 - 2 = 7 (left: 7 9 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12)",
                "9 - 2 = 7 (left: 7 9 12) || 9 + 12 = 21 (left: 7 21)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.0,
                22.0,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- INIT",
                "2 <- 2.3",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12)",
                "12 - 9 = 3 (left: ",
                "9 / 2 = 4.5 (left: 4.5 9 12) || 9 / 4.5 = 2 (left: 2 12",
                "2 * 9 = 18 (left: 9 18 12)",
                "12 - 2 = 10 (left: 9 10 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.0,
                60.0,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 2.2",
                "2 <- 3.2",
                "3 <- 3.2",
                "4 <- 1.1"
            ]
        },
        "Step 4": {
            "steps": [
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "9 - 2 = 7 (left: 7 9 12) || 7 + 9 = 16 (left: 16 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12) || 9 / 4.5 = 2 (left: 2 12 || 12 - 2 = 10 (left: 10)",
                "9 / 2 = 4.5 (left: 4.5 9 12) || 9 / 4.5 = 2 (left: 2 12 || 12 / 2 = 6 (left: 6)",
                "9 / 2 = 4.5 (left: 4.5 9 12) || 9 - 4.5 = 4.5 ("
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                1.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 3.2",
                "2 <- 3.2",
                "3 <- 3.2",
                "4 <- 3.0"
            ]
        },
        "Step 5": {
            "steps": [
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12) || 9 / 4.5 = 2 (left: 2 12 || 2 * 12 = 24 (left: 24)",
                "9 / 2 = 4.5 (left: 4.5 9 12) || 9 / 4.5 = 2 (left: 2 12 || 2 + 12 = 14",
                "9 / 2 = 4.5 (left: 4.5 9 12) || 9 / 4.5 = 2 (left: 2 12 || 12 / 2 = 6 (left: 6)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                60.0,
                0.003,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 5.1",
                "2 <- 5.1",
                "3 <- 5.1",
                "4 <- 3.2"
            ]
        },
        "Step 6": {
            "steps": [
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "9 / 2 = 4.5 (left: 4.5 9 12) || 9 / 4.5 = 2 (left: 2 12 || 2 * 12 = 24 (left: 24) || Answer: (9 / 2) * (9 / (9 / 2)) = 24",
                "9 / 2 = 4.5 (left: 4.5 9 12) || 9 / 4.5 = 2 (left: 2 12 || 2 * 12 = 24 (left: 24) || Answer: (9 / 2) * (9 / (9 / 4.5)) = 24",
                "9 / 2 = 4.5 (left: 4.5 9 12) || 9 / 4.5 = 2 (left: 2 12 || 2 * 12 = 24 (left: 24) || Answer: (9 / 2) * (9 / (9 / 2)) = 24",
                "9 / 2 = 4.5 (left: 4.5 9 12) || 9 / 4.5 = 2 (left: 2 12 || 2 + 12 = 14"
            ],
            "Pruning": [
                "1<-3.2",
                "2<-5.1",
                "3<-5.1"
            ],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 6.3",
                "2 <- 6.1",
                "3 <- 6.2",
                "4 <- 6.3"
            ]
        },
        "Step 7": {
            "steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12) || 9 / 4.5 = 2 (left: 2 12 || 2 * 12 = 24 (left: 24) || Answer: (9 / (9 / 2)) * 12 = 24",
                "9 / 2 = 4.5 (left: 4.5 9 12) || 9 / 4.5 = 2 (left: 2 12 || 2 * 12 = 24 (left: 24) || Answer: (9 / 2) * (9 / (9 / 2)) = 24",
                "9 / 2 = 4.5 (left: 4.5 9 12) || 9 / 4.5 = 2 (left: 2 12 || 12 / 2 = 6 (left: 6 6)",
                "9 / 2 = 4.5 (left: 4.5 9 12) || 9 / 4.5 = 2 (left: 2 12 || 2 * 12 = 24 (left: 24) || Answer: (9 / 2) * (9 / (9 / 2)) = 24",
                "9 / 2 = 4.5 (left: 4.5 9 12) || 9 / 4.5 = 2 (left: 2 12 || 2 * 12 = 24 (left: 24) || Answer: (9 / (9 / 2)) * 12 = 24"
            ]
        },
        "Input": "2 9 9 12",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 1
            }
        ]
    },
    "47": {
        "puzzle": "11 11 11 12",
        "Step 0": {
            "steps": [
                "12 - 11 = 1 (left: 11 1 1)",
                "11 + 11 = 22 (left: 11 22 12)",
                "11 + 11 = 22 (left: 11 22 12)",
                "12 - 11 = 1 (left: 11 11 1)",
                "11 - 11 = 0 (left: 0 11 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.001,
                1.002,
                3.0,
                0.003,
                21.001
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.4",
                "2 <- INIT",
                "3 <- 0.4",
                "4 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1)",
                "11 / 11 = 1 (left: 1 11 12)",
                "11 - 11 = 0 (left: 0 11 12) || 11 + 12 = 23 (left: 0 23)",
                "11 - 11 = 0 (left: 0 11 12) || 11 + 12 = 23 (left: 0 23)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.001,
                60.0,
                1.002,
                0.0,
                0.0
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.1",
                "2 <- 1.1",
                "3 <- 1.1",
                "4 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 + 1 = 1 (left: 1)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 + 1 = 1 (left: 1)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined."
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 1.1",
                "2 <- 2.3",
                "3 <- 2.3",
                "4 <- 1.0"
            ]
        },
        "Step 3": {
            "steps": [
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 0 - 1 = -1 (left: -1)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined.",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 0 - 1 = -1 (left: -1)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 0 + 1 = 1 (left: 1)",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 0 + 132 = 132 (left: 132)"
            ],
            "Pruning": [
                "0<-2.3",
                "2<-1.0",
                "3<-0.4"
            ],
            "Evaluation": [
                60.0,
                0.003,
                40.001,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 1.0",
                "2 <- 2.3",
                "3 <- 3.2",
                "4 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 0 - 1 = -1 (left: -1)",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 132 / 0 = undefined (left: 0 132)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 0 - 1 = -1 (left: -1)",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 0 - 132 = -132 (left: -132)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 0 - 1 = -1 (left: -1)"
            ],
            "Pruning": [
                "0<-1.0",
                "2<-3.0",
                "4<-1.1"
            ],
            "Evaluation": [
                0.002,
                20.002,
                40.0,
                0.0,
                40.001
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 4.2",
                "2 <- 3.0",
                "3 <- 2.3",
                "4 <- 3.0"
            ]
        },
        "Step 5": {
            "steps": [
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 132 / 0 = undefined (left: 0 132) || 0 + 132 = 132 (left: 132)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 - 0 = 1 (left: 1)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 * 0 = 0 (left: 0)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 0 + 1 = 1 (left: 1)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 / 0 is undefined (left: none)"
            ],
            "Pruning": [
                "0<-4.4",
                "1<-1.0",
                "2<-4.4",
                "3<-4.2",
                "4<-2.3"
            ],
            "Evaluation": [
                60.0,
                40.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 3.0",
                "2 <- 5.2",
                "3 <- 5.3",
                "4 <- 5.4"
            ]
        },
        "Step 6": {
            "steps": [
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 - 0 = 1 (left: 1)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 / 0 is undefined (left: 0 1)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 6 - 5 = 1 (left:",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 5 + 5 = 10 (left: 10)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 0 - 1 = -1 (left: -1)"
            ],
            "Pruning": [
                "3<-5.3",
                "4<-5.0"
            ],
            "Evaluation": [
                0.002,
                60.0,
                1.001,
                40.001,
                60.0
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 5.0",
                "2 <- 6.1",
                "3 <- 5.0",
                "4 <- 6.1"
            ]
        },
        "Step 7": {
            "steps": [
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 / 0 is undefined (left: 0 1) || Input: 3 5 7",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 = undefined",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 * 0 = 0 (left: 0)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 = undefined",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 0 + 1 = 1 (left: 1)"
            ],
            "Pruning": [
                "2<-5.3",
                "4<-5.0"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                0.003,
                40.0
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 5.3",
                "2 <- 5.2",
                "3 <- 6.1",
                "4 <- 6.4"
            ]
        },
        "Step 8": {
            "steps": [
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 + 1 = 1 (left: 1)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 - 0 = 1 (left: 1)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 - 0 = 1 (left: 1)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 / 0 = undefined",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 - 0 = 1 (left: 1)"
            ],
            "Pruning": [
                "1<-5.0"
            ],
            "Evaluation": [
                0.002,
                40.001,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 8.1",
                "1 <- 8.1",
                "2 <- 5.4",
                "3 <- 5.2",
                "4 <- 7.4"
            ]
        },
        "Step 9": {
            "steps": [
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 + 1 = 1 (left: 1)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || Input: 5 5",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 / 0 = undefined",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 - 0 = 1 (left: 1)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 - 1 = -1 (left: -1)"
            ],
            "Pruning": []
        },
        "Input": "11 11 11 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "48": {
        "puzzle": "3 8 13 13",
        "Step 0": {
            "steps": [
                "13",
                "13",
                "3 + 8 = 11 (left: 11 13 13)",
                "3 + 8 = 11 (left: 11 13 13)",
                "3 + 8 = 11 (left: 11 13 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                1.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "13 - 8 = 5 (left: ",
                "8 / 3 = 2.67 (left: 2.67 13 13)",
                "8 - 3 = 5 (left: 5 8 13)",
                "8 / 3 = 2.6666666666666665 (left: 2.6666666666666665 8 13)",
                "13 - 8 = 5 (left"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                1.001,
                1.002,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "13 + 3 = 16 (left: 8 13 16)",
                "3 + 8 = 11 (left: 11 13 13)",
                "8 / 3 = 2.67 (left: 2.67 8 13)",
                "3 + 8 = 11 (left: 11 13 13)",
                "3 + 8 = 11 (left: 11 13 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                1.002,
                1.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 2.0",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "3 + 8 = 11 (left: 11 13 13) || 11 * 13 = 143 (left: 13 13 143)",
                "3 * 8 = 24 (left: 13 13 24)",
                "3 + 8 = 11 (left: 11 13 13)",
                "13 + 3 = 16 (left: 8 13 16) || 16 / 8 = 2 (left: ",
                "8 / 3 = 2.6666666666666665 (left: 2.67 8 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                21.001,
                2.001,
                1.002,
                0.0,
                3.0
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 3.0",
                "2 <- INIT",
                "3 <- 3.0",
                "4 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "3 + 8 = 11 (left: 11 13 13) || 11 * 13 = 143 (left: 13 13 143) || 13 / 13 = 1 (left: 1 13 143)",
                "3 + 8 = 11 (left: 11 13 13) || 11 * 13 = 143 (left: 13 13 143) || 143 - 13 = 130 (left: 13 130)",
                "3 * 8 = 24 (left: 13 13 24)",
                "3 + 8 = 11 (left: 11 13 13) || 11 * 13 = 143 (left: 13 13 143) || 143 - 13 = 130 (left: 13 130)",
                "3 + 8 = 11 (left: 11 13 13) || 11 * 13 = 143 (left: 13 13 143) || 143 - 13 = 130 (left: 13 130)"
            ],
            "Pruning": [],
            "Evaluation": [
                21.001,
                0.003,
                3.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 4.3",
                "2 <- 4.4",
                "3 <- 4.3",
                "4 <- 4.4"
            ]
        },
        "Step 5": {
            "steps": [
                "3 + 8 = 11 (left: 11 13 13) || 11 * 13 = 143 (left: 13 13 143) || 13 / 13 = 1 (left: 1 13 143) || 13 + 1 = 14 (left: 14 143)",
                "3 + 8 = 11 (left: 11 13 13) || 11 * 13 = 143 (left: 13 13 143) || 143 - 13 = 130 (left: 13 130) || 13 * 130 = 1690 (left: 1690)",
                "3 + 8 = 11 (left: 11 13 13) || 11 * 13 = 143 (left: 13 13 143) || 143 - 13 = 130 (left: 13 130) || 130 / 10 = 13 (left: 13)",
                "3 + 8 = 11 (left: 11 13 13) || 11 * 13 = 143 (left: 13 13 143) || 143 - 13 = 130 (left: 13 130) || 130 / 10 = 13 (left: 13)",
                "3 + 8 = 11 (left: 11 13 13) || 11 * 13 = 143 (left: 13 13 143) || 143 - 13 = 130 (left: 13 130) || 13 * 130 = 1690 (left: 1690)"
            ],
            "Pruning": [
                "1<-4.3",
                "2<-4.3",
                "3<-4.3",
                "4<-4.3"
            ],
            "Evaluation": [
                1.001,
                20.002,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 4.0",
                "2 <- 5.1",
                "3 <- 4.4",
                "4 <- 4.4"
            ]
        },
        "Step 6": {
            "steps": [
                "3 + 8 = 11 (left: 11 13 13) || 11 * 13 = 143 (left: 13 13 143) || 143 - 13 = 130 (left: 13 130) || 13 / 130 = 0.1 (left: 0.1)",
                "3 + 8 = 11 (left: 11 13 13) || 11 * 13 = 143 (left: 13 13 143) || 13 / 13 = 1 (left: 1 13 143) || 1 * 13 = 13 (left: 13 143)",
                "3 + 8 = 11 (left: 11 13 13) || 11 * 13 = 143 (left: 13 13 143) || 143 - 13 = 130 (left: 13 130) || 130 - 13 = 117 (left: 117)",
                "3 + 8 = 11 (left: 11 13 13) || 11 * 13 = 143 (left: 13 13 143) || 143 - 13 = 130 (left: 13 130) || Input: 5 25 50 100",
                "3 + 8 = 11 (left: 11 13 13) || 11 * 13 = 143 (left: 13 13 143) || 143 - 13 = 130 (left: 13 130) || 130 - 13 = 117 (left: 117)"
            ],
            "Pruning": [
                "0<-3.4",
                "2<-4.4",
                "4<-4.3"
            ],
            "Evaluation": [
                1.002,
                0.001,
                40.001,
                0.003,
                40.001
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 4.4",
                "2 <- 6.4",
                "3 <- 4.4",
                "4 <- 6.4"
            ]
        },
        "Step 7": {
            "steps": [
                "3 + 8 = 11 (left: 11 13 13) || 11 * 13 = 143 (left: 13 13 143) || 143 - 13 = 130 (left: 13 130) || 13 + 130 = 143 (left: 143)",
                "3 + 8 = 11 (left: 11 13 13) || 11 * 13 = 143 (left: 13 13 143) || 143 - 13 = 130 (left: 13 130) || 130 / 10 =",
                "3 + 8 = 11 (left: 11 13 13) || 11 * 13 = 143 (left: 13 13 143) || 143 - 13 = 130 (left: 13 130) || 13 + 130 = 143 (left: 143)",
                "3 + 8 = 11 (left: 11 13 13) || 11 * 13 = 143 (left: 13 13 143) || 143 - 13 = 130 (left: 13 130) || 13 - 130 = -117 (left: -117)",
                "3 + 8 = 11 (left: 11 13 13) || 11 * 13 = 143 (left: 13 13 143) || 143 - 13 = 130 (left: 13 130) || 13 / 130 = 0.1 (left: 0.1)"
            ],
            "Pruning": [
                "0<-6.2",
                "2<-6.4",
                "3<-4.3",
                "4<-4.4"
            ],
            "Evaluation": [
                20.002,
                0.003,
                60.0,
                40.001,
                40.001
            ],
            "Resampling": [
                "0 <- 7.4",
                "1 <- 4.3",
                "2 <- 7.4",
                "3 <- 6.2",
                "4 <- 7.4"
            ]
        },
        "Step 8": {
            "steps": [
                "3 + 8 = 11 (left: 11 13 13) || 11 * 13 = 143 (left: 13 13 143) || 143 - 13 = 130 (left: 13 130) || 130 - 13 = 117 (left: 117)",
                "3 + 8 = 11 (left: 11 13 13) || 11 * 13 = 143 (left: 13 13 143) || 143 - 13 = 130 (left: 13 130) || 130 - 13 = 117 (left: 117)",
                "3 + 8 = 11 (left: 11 13 13) || 11 * 13 = 143 (left: 13 13 143) || 143 - 13 = 130 (left: 13 130) || 13 + 130 = 143 (left: 143)",
                "3 + 8 = 11 (left: 11 13 13) || 11 * 13 = 143 (left: 13 13 143) || 143 - 13 = 130 (left: 13 130) || 130 - 13 = 117 (left: 117)",
                "3 + 8 = 11 (left: 11 13 13) || 11 * 13 = 143 (left: 13 13 143) || 143 - 13 = 130 (left: 13 130) || 13 * 130 = 1690 (left: 1690)"
            ],
            "Pruning": [
                "0<-4.3",
                "1<-6.2",
                "2<-7.2",
                "3<-7.2",
                "4<-7.2"
            ],
            "Evaluation": [
                20.001,
                20.002,
                20.002,
                20.002,
                20.001
            ],
            "Resampling": [
                "0 <- 7.3",
                "1 <- 4.4",
                "2 <- 6.4",
                "3 <- 8.1",
                "4 <- 8.2"
            ]
        },
        "Step 9": {
            "steps": [
                "3 + 8 = 11 (left: 11 13 13) || 11 * 13 = 143 (left: 13 13 143) || 143 - 13 = 130 (left: 13 130) || 13 + 130 = 143 (left: 143)",
                "3 + 8 = 11 (left: 11 13 13) || 11 * 13 = 143 (left: 13 13 143) || 143 - 13 = 130 (left: 13 130) || 13 + 130 = 143 (left: 143)",
                "3 + 8 = 11 (left: 11 13 13) || 11 * 13 = 143 (left: 13 13 143) || 143 - 13 = 130 (left: 13 130) || 13 * 10 = 130 (left: 130)",
                "3 + 8 = 11 (left: 11 13 13) || 11 * 13 = 143 (left: 13 13 143) || 143 - 13 = 130 (left: 13 130) || 13 - 10 = 3 (left: 3)",
                "3 + 8 = 11 (left: 11 13 13) || 11 * 13 = 143 (left: 13 13 143) || 143 - 13 = 130 (left: 13 130) || 13 + 130 = 143 (left: 143)"
            ],
            "Pruning": [
                "0<-7.2",
                "1<-8.1",
                "2<-7.4",
                "3<-8.4",
                "4<-8.4"
            ]
        },
        "Input": "3 8 13 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "49": {
        "puzzle": "9 9 12 12",
        "Step 0": {
            "steps": [
                "12 + 9 = 21 (left: 9 12 21)",
                "12 + 9 = 21 (left: 9 12 21)",
                "12 / 9 = 1.33 (left: 9 ",
                "9 + 9 = 18 (left: 12 12 18)",
                "12 / 9 = 1.33 (left: 9 "
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                3.0,
                0.0,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "12 / 9 = 1 (left: 1 12 ",
                "9 + 9 = 18 (left: 12 18 12)",
                "9 * 9 = 81 (left: 12 12 81)",
                "12 / 9 = 1.3333333333333333 (",
                "9 / 9 = 1 (left: 1 12 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                1.002,
                1.002,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.4",
                "2 <- 1.4",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "9 - 9 = 0 (left: 0 12 12)",
                "9 / 9 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "9 / 9 = 1 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "12 + 9 = 21 (left: 9 12 21)",
                "12 - 9 = 3 (left: 3 12 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                1.002,
                0.003,
                2.001,
                60.0
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 2.4",
                "3 <- 2.0",
                "4 <- 2.4"
            ]
        },
        "Step 3": {
            "steps": [
                "9 - 9 = 0 (left: 0 12 12) || 12 / 0 = undefined (cannot divide by zero)",
                "9 - 9 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12)",
                "12 - 9 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12 12)",
                "9 - 9 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 1 12)",
                "12 - 9 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                1.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.0",
                "2 <- 3.1",
                "3 <- 3.1",
                "4 <- 3.1"
            ]
        },
        "Step 4": {
            "steps": [
                "9 / 9 = 1 (left: 1 12 12)",
                "9 - 9 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12)",
                "9 - 9 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "9 - 9 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "9 - 9 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                40.001,
                40.0,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 2.4",
                "2 <- 4.1",
                "3 <- 4.3",
                "4 <- 4.3"
            ]
        },
        "Step 5": {
            "steps": [
                "9 - 9 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 9 = 3 (left: 3 12 12) || 3 + 12 = 15 (left: 12 15)",
                "9 - 9 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "9 - 9 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((9 - 9) + 12) + 12 = 24",
                "9 - 9 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((9 - 9) + 12) + 12 = 24"
            ]
        },
        "Input": "9 9 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            }
        ]
    },
    "Cost": {
        "input_tokens": 2365716,
        "output_tokens": 239527.25,
        "total_cost": 1.542148875
    }
}