{
    "0": {
        "puzzle": "1 1 4 6",
        "Step 0": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6)",
                "1 * 4 = 4 (left: 4 4 6)",
                "6 - 1 = 5 (left: 1 4 5)",
                "6 - 4 = 2 (left: 1 2 6)",
                "6 - 1 = 5 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 4 5)",
                "4 + 1 = 5 (left: 1 5 6)",
                "4 * 1 = 4 (left: 1 4 ",
                "6 - 4 = 2 (left: 1 2 6)",
                "6 - 1 = 5 (left: 1 4 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                22.0,
                2.0,
                0.003,
                1.001,
                3.0,
                41.0,
                1.001,
                2.001,
                21.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.6",
                "2 <- 0.1",
                "3 <- 0.1",
                "4 <- 0.0",
                "5 <- 0.5",
                "6 <- 0.0",
                "7 <- 0.9",
                "8 <- 0.9",
                "9 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 4 = 4 (left: 4 4 6) || 6 - 4 = 2 (left: 4 2)",
                "4 + 1 = 5 (left: 1 5 6) || 5 * 1 = 5 (left: 5 6)",
                "1 * 4 = 4 (left: 4 4 6) || 4 * 4 = 16 (left: 16 6)",
                "1 * 4 = 4 (left: 4 4 6) || 6 - 4 = 2 (left: 2 6)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "6 - 1 = 5 (left: 1 4 5) || 1 + 4 = 5 (left: 5 5)",
                "1 * 1 = 1 (left: 1 4 6) || 1 + 4 = 5 (left: 5 6)",
                "6 - 1 = 5 (left: 1 4 5) || 1 + 4 = 5 (left: 5 5)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 4 = 1 (left: 1)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.0,
                2.001,
                0.003,
                1.002,
                0.002,
                0.003,
                0.003,
                0.002,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- INIT",
                "2 <- 0.9",
                "3 <- 1.9",
                "4 <- 0.6",
                "5 <- 1.9",
                "6 <- 0.0",
                "7 <- 0.1",
                "8 <- 0.6",
                "9 <- 0.6"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)",
                "1 * 1 = 1 (left: 1 4 6)",
                "6 - 1 = 5 (left: 1 4 5) || 5 + 1 = 6 (left: 4 6)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 / 6 = 0.6666666666666666 (left: 0.6666666666666666)",
                "4 + 1 = 5 (left: 1 5 6) || 6 - 1 = 5 (left: 5 6)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 4 6) || 1 + 4 = 5 (left: 5 6)",
                "1 * 4 = 4 (left: 4 4 6) || 4 / 4 = 1 (left: 1 6)",
                "4 + 1 = 5 (left: 1 5 6) || 6 / 1 = 6 (left: 6 6)",
                "4 + 1 = 5 (left: 1 5 6) || 1 * 5 = 5 (left: 5 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                0.001,
                0.002,
                0.003,
                0.003,
                60.0,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 2.1",
                "2 <- 2.1",
                "3 <- 0.0",
                "4 <- 2.0",
                "5 <- 1.9",
                "6 <- 2.2",
                "7 <- 0.6",
                "8 <- 0.0",
                "9 <- 2.7"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || Input: 3 9",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 1 = ",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 / 6 = 0.6666666666666666 (left: 0.6666666666666666)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "6 - 1 = 5 (left: 1 4 5) || 5 + 1 = 6 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "4 + 1 = 5 (left: 1 5 6) || 6 / 1 = 6 (left: 6 6)",
                "1 * 1 = 1 (left: 1 4 6) || 1 + 4 = 5 (left: 5 6)",
                "1 * 4 = 4 (left: 4 4 6) || 4 / 4 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                2.001,
                0.003,
                0.003,
                1.001,
                0.003,
                0.003,
                1.001,
                0.002
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- INIT",
                "2 <- 3.1",
                "3 <- 2.0",
                "4 <- 2.1",
                "5 <- 3.1",
                "6 <- 3.1",
                "7 <- 2.2",
                "8 <- 3.1",
                "9 <- 3.1"
            ]
        },
        "Step 4": {
            "steps": [
                "6 - 1 = 5 (left: 1 4 5) || 5 + 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "6 - 1 = 5 (left: 1 4 5)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || Input: 3 9 27",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "1 * 1 = 1 (left: 1 4 6) || 6 * 1 = 6 (left: 4 6)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "6 - 1 = 5 (left: 1 4 5) || 5 + 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                2.001,
                0.003,
                0.002,
                60.0,
                60.0,
                0.003,
                60.0,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 4.4",
                "2 <- 2.2",
                "3 <- 4.0",
                "4 <- 4.4",
                "5 <- 4.7",
                "6 <- 4.4",
                "7 <- 4.0",
                "8 <- 1.9",
                "9 <- 4.8"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 / 6 = 0.6666666666666666 (left: 0.6666666666666666)",
                "1 * 1 = 1 (left: 1 4 6) || 6 * 1 = 6 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "6 - 1 = 5 (left: 1 4 5) || 5 + 1 = 6 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "6 - 1 = 5 (left: 1 4 5) || 5 + 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 1) * (1 + 4) = 24",
                "1 * 1 = 1 (left: 1 4 6) || 6 * 1 = 6 (left: 4 6) || 10 + 12 = 22 (left: 14 22)",
                "6 - 1 = 5 (left: 1 4 5) || 5 + 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 1) + (1 + 4) * 6 = 24",
                "1 * 1 = 1 (left: 1 4 6) || 6 * 1 = 6 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "6 - 1 = 5 (left: 1 4 5) || 5 + 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 1) * (1 + 4) = 24",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 1) * (4 * 6) = 24"
            ]
        },
        "Input": "1 1 4 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "1": {
        "puzzle": "1 1 11 11",
        "Step 0": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11)",
                "1 * 1 = 1 (left: 1 11 11)",
                "11 - 1 = 10 (left: 1 11 10)",
                "11 / 1 = 11 (left: 1 11 ",
                "1 - 1 = 0 (left: 0 11 11)",
                "11 / 1 = 11 (left: 1 11 11)",
                "1 * 1 = 1 (left: 1 11 11)",
                "1 * 1 = 1 (left: 1 11 11)",
                "11 / 1 = 11 (left: 1 11 11)",
                "11 - 1 = 10 (left: 1 10 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                1.002,
                21.0,
                2.001,
                0.001,
                0.003,
                0.002,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.3",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11)",
                "11 / 1 = 11 (left: 1 11  || 1 + 11 = 12 (left: 12)",
                "11 - 1 = 10 (left: 1 11 10)",
                "1 + 1 = 2 (left: 2 11 11)",
                "11 / 1 = 11 (left: 1 11 11)",
                "11 / 1 = 11 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12)",
                "1 + 1 = 2 (left: 2 11 11)",
                "11 - 1 = 10 (left: 1 11 10)",
                "1 * 1 = 1 (left: 1 11 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.003,
                1.002,
                0.003,
                2.001,
                0.003,
                1.002,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.4",
                "2 <- INIT",
                "3 <- 0.3",
                "4 <- 1.4",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 1.6",
                "8 <- INIT",
                "9 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "11 / 1 = 11 (left: 1 11  || 11 - 1 = 10 (left: 10) ",
                "1 - 1 = 0 (left: 0 11 11) || Input: 3 5 9",
                "11 + 1 = 12 (left: 1 11 12)",
                "11 / 1 = 11 (left: 1 11  || 1 * 11 = 11 (left: 11)",
                "11 / 1 = 11 (left: 1 11 11) || 3 * 2 = 6 (left: 6",
                "11 / 1 = 11 (left: 1 11 ",
                "1 * 1 = 1 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "11 - 1 = 10 (left: 1 11 10)",
                "11 / 1 = 11 (left: 1 11  || 5 + 7 = 12 (left: 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                21.001,
                0.002,
                0.003,
                40.0,
                0.003,
                0.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.5",
                "2 <- 2.5",
                "3 <- 0.9",
                "4 <- 2.2",
                "5 <- INIT",
                "6 <- 2.5",
                "7 <- 2.2",
                "8 <- 2.2",
                "9 <- 0.3"
            ]
        },
        "Step 3": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12)",
                "11 / 1 = 11 (left: 1 11  || 1 + 11 = 12 (left: 12)",
                "11 / 1 = 11 (left: 1 11  || 11 / 1 = 11 (left: 11)",
                "11 - 1 = 10 (left: 1 10 11) || 1 * 10 = 10 (left: 10 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 * 1 = 11 (left: 11 11 11)",
                "11 / 1 = 11 (left: 1 11  || 1 + 11 = 12 (left: 12)",
                "11 + 1 = 12 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 12 / 1 = 12 (left: 12)",
                "11 / 1 = 11 (left: 1 11  || 11 - 1 = 10 (left: 1 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.002,
                0.002,
                1.002,
                60.0,
                0.003,
                0.003,
                0.002,
                0.003,
                40.0
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 3.4",
                "2 <- 2.5",
                "3 <- 3.0",
                "4 <- 3.9",
                "5 <- 3.4",
                "6 <- 3.0",
                "7 <- 3.4",
                "8 <- 3.9",
                "9 <- 3.4"
            ]
        },
        "Step 4": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "11 / 1 = 11 (left: 1 11  || 11 / 1 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 / 1 = 11 (left: 1 11  || 11 - 1 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "11 + 1 = 12 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 1 = 11 (left: 1 11  || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                60.0,
                0.003,
                0.003,
                0.001,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 3.0",
                "2 <- 3.0",
                "3 <- 4.1",
                "4 <- 3.9",
                "5 <- 3.4",
                "6 <- 4.1",
                "7 <- 4.1",
                "8 <- 3.0",
                "9 <- 3.0"
            ]
        },
        "Step 5": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "11 + 1 = 12 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 * 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (11 + 1) * (11 + 1) = 24",
                "11 / 1 = 11 (left: 1 11  || 11 - 1 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((1 + 1) + 11) + 11 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((11 + 1) + (11 + 1)) = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11)"
            ]
        },
        "Input": "1 1 11 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "2": {
        "puzzle": "1 1 3 8",
        "Step 0": {
            "steps": [
                "8 - 1 = 7 (left: 1 3 7)",
                "8 - 3 = 5 (left: 1 5 8)",
                "8 / 1 = 8 (left: 1 3 8)",
                "1 + 1 = 2 (left: 2 3 8)",
                "8 - 3 = 5 (left: 1 3 5)",
                "1 + 1 = 2 (left: 2 3 8)",
                "8 - 3 = 5 (left: 1 1 5)",
                "1 * 1 = 1 (left: 1 3 8)",
                "1 + 3 = 4 (left: 1 4 8)",
                "3 + 1 = 4 (left: 1 4 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.0,
                2.0,
                41.0,
                1.002,
                3.0,
                0.003,
                1.002,
                60.0,
                2.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- INIT",
                "2 <- 0.3",
                "3 <- 0.2",
                "4 <- 0.2",
                "5 <- 0.2",
                "6 <- INIT",
                "7 <- 0.7",
                "8 <- 0.2",
                "9 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "8 / 1 = 8 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "3 / 1 = 3 (left: 1 3 ",
                "1 + 1 = 2 (left: 2 3 8) || 8 - 2 = 6 (left: 6 6)",
                "8 / 1 = 8 (left: 1 3 8) || 3 - 1 = 2 (left: 2 8)",
                "8 / 1 = 8 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8)",
                "8 / 1 = 8 (left: 1 3 8) || 8 - 1 = 7 (left: 3 7)",
                "1 * 1 = 1 (left: 1 3 8)",
                "1 * 1 = 1 (left: 1 3 8) || 1 + 3 = 4 (left: 4 8)",
                "8 / 1 = 8 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8)",
                "8 - 3 = 5 (left: 1 5 8) || 1 + 5 = 6 (left: 6 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.002,
                0.003,
                1.002,
                60.0,
                1.0,
                60.0,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.8",
                "2 <- 0.7",
                "3 <- 0.7",
                "4 <- 1.4",
                "5 <- 0.1",
                "6 <- 1.6",
                "7 <- 1.6",
                "8 <- 1.8",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "8 / 1 = 8 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "8 / 1 = 8 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || Input: 5 9",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 3 8) || 3 - 1 = 2 (left: 2 8)",
                "8 / 1 = 8 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 - 3 = 5 (left: 1 5 8) || 8 / 1 = 8 (left:",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8)",
                "1 * 1 = 1 (left: 1 3 8) || 1 + 3 = 4 (left: 4 8)",
                "8 / 1 = 8 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "8 / 1 = 8 (left: 1 3 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                60.0,
                0.002,
                0.001,
                1.0,
                60.0,
                0.003,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 1.8",
                "2 <- INIT",
                "3 <- 2.2",
                "4 <- 2.9",
                "5 <- 2.9",
                "6 <- 1.0",
                "7 <- 1.8",
                "8 <- 0.2",
                "9 <- 1.0"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 / 1 = 8 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) ",
                "8 - 3 = 5 (left: 1 1 5)",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "8 / 1 = 8 (left: 1 3 8) || 8 / 3 = 2.67 (left: 1 2.67)",
                "8 / 1 = 8 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24)",
                "8 / 1 = 8 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 / 1 = 8 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 + 8 = 11 (left: 8)",
                "8 / 1 = 8 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8)",
                "8 / 1 = 8 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                60.0,
                2.001,
                60.0,
                1.001,
                60.0,
                60.0,
                0.001,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 3.6",
                "2 <- 2.6",
                "3 <- 3.5",
                "4 <- 3.8",
                "5 <- 2.9",
                "6 <- 3.6",
                "7 <- 2.9",
                "8 <- 3.3",
                "9 <- 2.6"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "8 / 1 = 8 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * (1 * 3) = 24",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 / 3 = 2.66667 (left: 2.66667)",
                "8 / 1 = 8 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "8 / 1 = 8 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 / 1 = 8 (left: 1 3 8) || 3 - 1 = 2 (left: 2 8)",
                "8 / 1 = 8 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * (1 * 3) = 24",
                "8 / 1 = 8 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 * 1) * (3 * 8) = 24",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)"
            ]
        },
        "Input": "1 1 3 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "3": {
        "puzzle": "1 1 1 8",
        "Step 0": {
            "steps": [
                "8 / 1 = 8 (left: 1 1 ",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 * 1 = 1 (left: 1 1 8)",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 * 1 = 1 (left: 1 1 8)",
                "8 - 1 = 7 (left: 1 1 7)",
                "1 * 1 = 1 (left: 1 1 8)",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 / 1 = 1 (left: 1 1 8)",
                "1 + 1 = 2 (left: 1 2 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                22.0,
                1.002,
                21.0,
                3.0,
                3.0,
                1.0,
                41.0,
                0.002,
                22.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.7",
                "2 <- 0.1",
                "3 <- 0.3",
                "4 <- 0.9",
                "5 <- 0.9",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8)",
                "1 + 1 = 2 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "1 + 1 = 2 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)",
                "1 + 1 = 2 (left: 1 2 8) || 3 + 5 = 8 (left: 8",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "1 + 1 = 2 (left: 2 1 8)",
                "1 * 1 = 1 (left: 1 1 8)",
                "8 / 1 = 8 (left: 1 1 8)",
                "1 + 1 = 2 (left: 1 2 8) || Input: 3 5 7"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                0.003,
                60.0,
                40.0,
                41.0,
                1.002,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.0",
                "2 <- 1.4",
                "3 <- 1.5",
                "4 <- 1.4",
                "5 <- 1.0",
                "6 <- 0.3",
                "7 <- 1.6",
                "8 <- 0.9",
                "9 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.66666666667 (left: 2.66666666667)",
                "1 * 1 = 1 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 8)",
                "1 + 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "1 * 1 = 1 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "1 + 1 = 2 (left: 2 1 8) || 1 * 8 = 8 (left: 2 8)",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.0,
                0.002,
                0.002,
                0.002,
                0.001,
                0.002,
                1.002,
                0.002,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 1.6",
                "2 <- 0.7",
                "3 <- 1.5",
                "4 <- 2.8",
                "5 <- 1.5",
                "6 <- 0.7",
                "7 <- 1.0",
                "8 <- 1.4",
                "9 <- 2.8"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 + 4 =",
                "1 + 1 = 2 (left: 2 1 8) || 8 / 1 = 8 (left: 2 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)",
                "1 + 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 + 1 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)",
                "1 * 1 = 1 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67 8)",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.002,
                1.001,
                0.002,
                0.002,
                0.002,
                60.0,
                0.002,
                2.0,
                0.002
            ],
            "Resampling": [
                "0 <- 2.8",
                "1 <- 3.6",
                "2 <- 2.8",
                "3 <- INIT",
                "4 <- 1.5",
                "5 <- 1.4",
                "6 <- 3.6",
                "7 <- 2.8",
                "8 <- 1.0",
                "9 <- 1.5"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 + 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "1 + 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.002,
                0.001,
                41.0,
                0.001,
                60.0,
                0.002,
                0.001,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 1.5",
                "2 <- 0.7",
                "3 <- 3.6",
                "4 <- 3.6",
                "5 <- 4.5",
                "6 <- 4.5",
                "7 <- 0.3",
                "8 <- 2.8",
                "9 <- 4.3"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 1) * (1 + 8) = 24",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: ((1 + 1) + 2) * 8 = 24",
                "1 + 1 = 2 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)"
            ],
            "Pruning": [
                "5<-4.3",
                "6<-3.6"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.002,
                0.002,
                0.002,
                22.0,
                60.0,
                0.001,
                0.003,
                2.0
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 5.6",
                "2 <- 5.6",
                "3 <- 5.0",
                "4 <- 3.6",
                "5 <- 3.6",
                "6 <- 4.5",
                "7 <- 0.1",
                "8 <- 1.6",
                "9 <- 5.5"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 10 - 5 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: ((1 + 1) + 2) * 8 = 24",
                "1 + 1 = 2 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "1 + 1 = 2 (left: 2 1 8) || 8 - 2 = 6 (left: 2 6)",
                "1 + 1 = 2 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)"
            ],
            "Pruning": [
                "6<-1.4"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.0,
                0.003,
                0.003,
                0.002,
                60.0,
                0.002,
                0.0,
                1.001
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 3.6",
                "2 <- 5.6",
                "3 <- 5.5",
                "4 <- 6.6",
                "5 <- 6.6",
                "6 <- 5.6",
                "7 <- 5.6",
                "8 <- 0.7",
                "9 <- 5.0"
            ]
        },
        "Step 7": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 8) || 1 * 8 = 8 (left: 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8) || 2 / 1 = 2 (left: 2 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || Possible next steps:",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 8 - 1 = 7 (left:",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.001,
                0.002,
                0.002,
                0.001,
                0.003,
                0.001,
                0.002,
                21.001,
                60.0
            ],
            "Resampling": [
                "0 <- 6.6",
                "1 <- 7.9",
                "2 <- 7.9",
                "3 <- 6.6",
                "4 <- 4.5",
                "5 <- 5.0",
                "6 <- 7.9",
                "7 <- 6.6",
                "8 <- 6.6",
                "9 <- 7.8"
            ]
        },
        "Step 8": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: ((1 + 1) + 1) * 8 = 24",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: ((1 + 1) + 2) * 8 = 24",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.66667 (left: 2.66667)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: ((1 + 1) + 1) * 8 = 24",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: ((1 + 1) + 1) * 8 = 24",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 8) || 8 - 1 = 7 (left: || 8 + 1 = 9 (left: 7 9)"
            ]
        },
        "Input": "1 1 1 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "4": {
        "puzzle": "6 6 6 6",
        "Step 0": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6)",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 * 6 = 36 (left: 36 6 6)",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 - 6 = 0 (left: 6 6 0)",
                "6 / 6 = 1 (left: 1 6 6)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 / 6 = 1 (left: 6 1 ",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 / 6 = 1 (left: 1 6 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                2.001,
                40.001,
                22.0,
                1.0,
                41.0,
                41.0,
                40.0,
                40.001,
                22.0
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 0.5",
                "2 <- 0.9",
                "3 <- 0.7",
                "4 <- 0.6",
                "5 <- 0.0",
                "6 <- 0.9",
                "7 <- INIT",
                "8 <- 0.0",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "6 / 6 = 1 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6)",
                "6 / 6 = 1 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6)",
                "6 / 6 = 1 (left: 1 6 6) || 6 * 1 = 6 (left: 6 6 6)",
                "6 / 6 = 1 (left: 6 1  || 6 + 1 = 7",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6)",
                "6 + 6 = 12 (left: 6 12 6) || 12 / 6 = 2 (left: 6 2 6)",
                "6 / 6 = 1 (left: 1 6 6) || 1 * 6 = 6 (left: 6 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 + 6 = 12 (left: 6 12 6) || 12 - 6 = 6 (left: 6 6)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 18 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                22.0,
                0.003,
                3.0,
                0.003,
                0.003,
                60.0,
                0.003,
                22.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.5",
                "2 <- 1.5",
                "3 <- INIT",
                "4 <- 0.2",
                "5 <- INIT",
                "6 <- 0.5",
                "7 <- 1.5",
                "8 <- 0.5",
                "9 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6)",
                "6 + 6 = 12 (left: 6 12 6) || 12 / 6 = 2 (left: 6 2 6) || 6 + 2 = 8 (left: 6 8)",
                "6 + 6 = 12 (left: 6 6 12)",
                "6 * 6 = 36 (left: 36 6 6) || 36 / 6 = 6 (left: 6 6 6)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 / 6 = 1 (left: 1 6 6) || Possible",
                "6 + 6 = 12 (left: 6 12 6) || 12 / 6 = 2 (left: 6 2 6) || 6 * 2 = 12 (left: 12 6)",
                "6 / 6 = 1 (left: 1 6 6) || 1 + 6 = 7 (left: 6 7)",
                "6 / 6 = 1 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6) || 5 + 6 = 11 (left: 6 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.001,
                40.001,
                0.003,
                60.0,
                1.001,
                60.0,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 2.0",
                "2 <- 1.9",
                "3 <- 1.2",
                "4 <- 2.0",
                "5 <- 0.8",
                "6 <- 0.7",
                "7 <- 2.5",
                "8 <- 2.5",
                "9 <- 2.3"
            ]
        },
        "Step 3": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 18 6) || 18 - 6 = 12 (left: 12)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 18 6) || 18 + 6 = 24 (left: 24)",
                "6 / 6 = 1 (left: 1 6 6) || 6 * 1 = 6 (left: 6 6 6) || 7 - 2 = 5 (left: 4 5)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 6 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 6 36)",
                "6 / 6 = 1 (left: 6 1  || 6 - 1 = 5 (left: 5)",
                "6 * 6 = 36 (left: 6 6 36) || 6 + 6 = 12 (left:",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36)",
                "6 + 6 = 12 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                60.0,
                2.001,
                0.003,
                0.003,
                0.001,
                1.0,
                60.0,
                2.001
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 0.8",
                "2 <- 1.0",
                "3 <- 3.8",
                "4 <- 3.8",
                "5 <- 2.0",
                "6 <- INIT",
                "7 <- 3.2",
                "8 <- 3.8",
                "9 <- 0.0"
            ]
        },
        "Step 4": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 36)",
                "6 / 6 = 1 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6) || 5 * 6 = 30 (left: 30)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36)",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 18 6) || 18 + 6 = 24 (left: 24) || Answer: ((6 + 6) + 6) + 6 = 24",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 + 36 = 37 (left: 37)",
                "6 + 6 = 12 (left: 6 12 6) || 12 / 6 = 2 (left: 6 2 6)"
            ]
        },
        "Input": "6 6 6 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "5": {
        "puzzle": "1 1 2 12",
        "Step 0": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 12)",
                "1 + 1 = 2 (left: 2 2 12)",
                "1 + 1 = 2 (left: 2 2 12)",
                "12 - 2 = 10 (left: 2 10 12)",
                "1 + 1 = 2 (left: 2 2 12)",
                "1 * 1 = 1 (left: 1 2 12)",
                "12 - 2 = 10 (left: 1 2 10)",
                "12 - 2 = 10 (left: 1 2 10)",
                "1 + 1 = 2 (left: 2 2 12)",
                "1 + 1 = 2 (left: 2 2 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                20.002,
                1.002,
                0.003,
                21.001,
                60.0,
                1.002,
                3.0,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.7",
                "2 <- INIT",
                "3 <- 0.8",
                "4 <- 0.5",
                "5 <- 0.5",
                "6 <- 0.5",
                "7 <- 0.5",
                "8 <- 0.1",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 1 = 11 (left: 1 2 ",
                "12 - 2 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8)",
                "1 * 1 = 1 (left: 1 2 12)",
                "1 + 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10)",
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 12)",
                "2 * 1 = 2 (left: 2 2 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                60.0,
                60.0,
                2.0,
                60.0,
                20.002,
                20.001,
                60.0,
                1.001,
                21.001
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 1.2",
                "2 <- 0.8",
                "3 <- 1.2",
                "4 <- 1.1",
                "5 <- 1.5",
                "6 <- 1.5",
                "7 <- 0.4",
                "8 <- 0.5",
                "9 <- 1.7"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12) || 3 + 12 = 15 (left: 15)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 2 2 12) || 12 * 2 = 24 (left: 2 12 24)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12)",
                "12 - 2 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12) || 3 + 12 = 15 (left: 15)",
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36)",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 12)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 1 = 11 (left: 1 11)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                60.0,
                0.003,
                0.002,
                60.0,
                2.001,
                3.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 2.1",
                "2 <- 2.1",
                "3 <- 1.2",
                "4 <- 1.1",
                "5 <- 1.6",
                "6 <- 2.6",
                "7 <- 2.2",
                "8 <- 0.8",
                "9 <- 1.2"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)",
                "12 - 2 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || There are no possible next steps for the number 36 as it is already a single number.",
                "1 + 1 = 2 (left: 2 2 12) || 12 * 2 = 24 (left: 2 12 24) || 12 + 2 = 14 (left: 14 24)",
                "1 + 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10)",
                "1 * 1 = 1 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                60.0,
                0.003,
                0.002,
                0.003,
                0.003,
                1.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 0.5",
                "2 <- 2.3",
                "3 <- 1.1",
                "4 <- 2.3",
                "5 <- 1.7",
                "6 <- 3.3",
                "7 <- 1.1",
                "8 <- 2.7",
                "9 <- 3.9"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 - 2 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 + 8 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "1 * 1 = 1 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "12 - 2 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 + 8 = 9 (left: 9)",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 12) || 12 - 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                40.0,
                0.001,
                0.003,
                0.003,
                0.001,
                0.0,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 4.1",
                "2 <- 1.4",
                "3 <- 1.7",
                "4 <- 2.3",
                "5 <- 2.3",
                "6 <- 1.6",
                "7 <- 1.2",
                "8 <- 1.4",
                "9 <- 2.2"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9 12)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 - 2 = 10 (left",
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "1 + 1 = 2 (left: 2 2 12) || 12 * 2 = 24 (left: 2 12 24) || 2 * 12 = 24 (left: 24 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.003,
                60.0,
                2.001,
                0.002,
                60.0,
                0.003,
                40.0
            ],
            "Resampling": [
                "0 <- 5.9",
                "1 <- 5.7",
                "2 <- 4.1",
                "3 <- 2.6",
                "4 <- 1.7",
                "5 <- 5.9",
                "6 <- 2.6",
                "7 <- 2.3",
                "8 <- 4.1",
                "9 <- 5.9"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 12) || 12 * 2 = 24 (left: 2 12 24) || 2 * 12 = 24 (left: 24 24) || 24 + 24 = 48",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || There are no possible next steps with only one number provided.",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "1 + 1 = 2 (left: 2 2 12) || 12 * 2 = 24 (left: 2 12 24) || 2 * 12 = 24 (left: 24 24) || 24 / 24 = 1 (left: 1)",
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 + 2 = 38",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 + 1 = 2 (left: 2 2 12) || 12 * 2 = 24 (left: 2 12 24) || 2 * 12 = 24 (left: 24 24) || 24 + 24 = 48"
            ],
            "Pruning": [
                "5<-2.6"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                40.0,
                0.003,
                0.001,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.9",
                "1 <- 5.9",
                "2 <- 2.2",
                "3 <- 5.7",
                "4 <- 5.7",
                "5 <- 5.4",
                "6 <- 3.9",
                "7 <- 5.4",
                "8 <- 5.9",
                "9 <- 5.4"
            ]
        },
        "Step 7": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 2 12) || 12 * 2 = 24 (left: 2 12 24) || 2 * 12 = 24 (left: 24 24) || 24 + 24 = 48",
                "1 + 1 = 2 (left: 2 2 12) || 12 * 2 = 24 (left: 2 12 24) || 24 - 2 = 22 (left: 12 22)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 10 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (2 * 12) = 24",
                "1 * 1 = 1 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (2 * 12) = 24",
                "1 + 1 = 2 (left: 2 2 12) || 12 * 2 = 24 (left: 2 12 24) || 2 * 12 = 24 (left: 24 24) || 24 + 24 = 48",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (2 * 12) = 24"
            ]
        },
        "Input": "1 1 2 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "6": {
        "puzzle": "1 2 2 6",
        "Step 0": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6)",
                "2 * 2 = 4 (left: 4 6)",
                "2 * 2 = 4 (left: 4 6)",
                "6 - 2 = 4 (left: 1 4 6)",
                "2 * 2 = 4 (left: 1 4 6)",
                "2 * 2 = 4 (left: 4 2 6)",
                "6 / 2 = 3 (left: 2 3 ",
                "6 / 2 = 3 (left: 1 2 3)",
                "1 + 2 = 3 (left: 2 3 6)",
                "1 + 2 = 3 (left: 2 3 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                40.0,
                60.0,
                60.0,
                60.0,
                2.001,
                0.001,
                0.002,
                21.001,
                40.001
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 0.1",
                "2 <- 0.4",
                "3 <- INIT",
                "4 <- 0.0",
                "5 <- 0.3",
                "6 <- 0.3",
                "7 <- 0.2",
                "8 <- 0.1",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 2 = 3 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6)",
                "2 * 2 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "2 * 2 = 4 (left: 1 4 6) || 1 + 4 = 5 (left: 5 6)",
                "2 + 2 = 4 (left: 4 4 6)",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5)",
                "2 * 2 = 4 (left: 4 6) || 5 + 3 = 8 (left: 7 8)",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                1.002,
                2.0,
                60.0,
                60.0,
                21.001,
                1.001,
                60.0,
                20.002
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 0.2",
                "2 <- 1.8",
                "3 <- 1.5",
                "4 <- 1.5",
                "5 <- 1.4",
                "6 <- 1.8",
                "7 <- 1.8",
                "8 <- 0.0",
                "9 <- 1.6"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 2) * (2 * 6) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 / 24 = 0.0416666666666667 (left: 0.0416666666666667)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 / 6 = 0.6666666666666666 (left: 0.6666666666666666)",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6)",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || 4 + 5 = 9 (left: 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                0.003,
                60.0,
                0.003,
                60.0,
                60.0,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 2.7",
                "1 <- 2.8",
                "2 <- 2.7",
                "3 <- 2.7",
                "4 <- 2.7",
                "5 <- 2.7",
                "6 <- 2.0",
                "7 <- 2.0",
                "8 <- 2.2",
                "9 <- 0.1"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || In the given examples, the numbers and arithmetic operations were used to obtain the target number 24.",
                "6 - 2 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n3 * 6 = 18 (left: 18)\nAnswer: 3 * (3 * 8) = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 4 6\nSteps:\n3 + 4 = 7 (left: 3 6 7)\n7 - 3 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (3 + 4) * 6 = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n5 + 3 = 8 (left: 8 21)\n8 * 3 = 24 (left: 24)\nAnswer: (3 * 7) - (5 + 3) = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 - 3 = 13 (left: 13)\n13 * 3 = 39 (left: 39)\nAnswer: ((3 * 7) - 5) - 3 = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 4 8\nSteps:\n3 + 8 = 11 (left: 3 4 11)\n3 * 4 = 12 (left: 12 11)\n12 - 11 = 1 (left: 1)\n1 * 24 = 24\nAnswer: ((3 + 8) * 4) - 11 = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n4 * 3 = 12 (left: 8 12)\n12 * 2 = 24 (left: 24)\nAnswer: (3 + 5) * (4 * 3 * 2) = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 2) * (2 * 6) = 24 || Input: 3 3 7 8\nSteps:\n3 + 7 = 10 (left: 3 8 10)\n10 - 8 = 2 (left: 2 3)\n2 * 3 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((3 + 7) - 8) * (3 * 4) = 24",
                "2 * 2 = 4 (left: 4 6) || 5 / 2 = 2.5 (left: 10 2"
            ],
            "Pruning": [
                "0<-2.7",
                "2<-0.2",
                "3<-0.4",
                "4<-2.6",
                "5<-2.8",
                "6<-1.5",
                "7<-2.7",
                "8<-2.0"
            ],
            "Evaluation": [
                60.0,
                40.0,
                60.0,
                41.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 3.0",
                "2 <- 3.1",
                "3 <- 1.4",
                "4 <- 3.8",
                "5 <- 3.3",
                "6 <- 3.8",
                "7 <- 3.0",
                "8 <- 3.5",
                "9 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 4 7\nSteps:\n3 * 7 = 21 (left: 3 4 21)\n3 + 4 = 7 (left: 7 21)\n7 * 21 = 147 (left: 147)\n147 / 7 = 21 (left: 21)\n21 * 3 = 63 (left: 63)\n63 / 3 = 21 (left: 21)\n21 + ",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || The answer to the question is (2 * 2) * 6 = 24.",
                "6 - 2 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) / 1 * 4 = 24",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Great job with the examples provided! You were able to reach the target number 24 using the given input numbers and basic arithmetic operations. Keep practicing to improve your skills further.",
                "2 * 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Great job on solving those math problems!",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n3 + 5 = 8 (left: 8 12)\n8 * 12 = 96 (left: 96)\nAnswer: (3 * 4) * (5 + 3) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n3 * 6 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: (3 * 8) + (3 * 6) = 24"
            ],
            "Pruning": [
                "0<-3.7",
                "1<-3.5",
                "2<-2.8",
                "4<-3.0",
                "6<-0.0",
                "7<-3.6",
                "9<-2.6"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                0.002,
                60.0,
                40.0,
                60.0,
                60.0,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 2.1",
                "2 <- 2.0",
                "3 <- 4.9",
                "4 <- 4.6",
                "5 <- 4.9",
                "6 <- 4.9",
                "7 <- 4.7",
                "8 <- 3.7",
                "9 <- 4.1"
            ]
        },
        "Step 5": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 2) * (2 * 6) = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 8 9)\n8 - 9 = -1 (left: -1)\n-1 * 24 = 24\nAnswer: ((3 * 3) - 8) * 24 = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 4 5 6\nSteps:\n4 + 6 = 10 (left: 3 5 10)\n10 - 5 = 5 (left: 3 5)\n5 * 3 = 15 (left: 15)\n15 + 15 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((4 + 6) - 5) * 3 +",
                "6 - 2 = 4 (left: 1 4 6) || 1 - 4 = -3 (left:",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 5 7\nSteps:\n3 + 5 = 8 (left: 3 7 8)\n8 - 7 = 1 (left: 1 3)\n1 * 3 = 3 (left: 3)\n3 * 8 = 24 (left: 24)\nAnswer: ((3 + 5) - 7) * 3 = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || The examples provided are correct.",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 4 6\nSteps:\n3 * 4 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nAnswer: (3 * 4) * (6 - 3) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)"
            ],
            "Pruning": [
                "2<-4.9",
                "3<-3.4",
                "5<-4.0",
                "6<-4.1",
                "8<-3.6"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                0.001,
                60.0,
                60.0,
                60.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 4.2",
                "2 <- 5.3",
                "3 <- 4.1",
                "4 <- 5.8",
                "5 <- 5.2",
                "6 <- 5.6",
                "7 <- 3.4",
                "8 <- 5.0",
                "9 <- 5.3"
            ]
        },
        "Step 6": {
            "steps": [
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 7 9\nSteps:\n3 * 7 = 21 (left: 3 9 21)\n9 - 3 = 6 (left: 6 21)\n6 * 21 = 126 (left: 126)\nAnswer: (3 * 7) * (9 - 3) = 126\nInput: 2 3 6 9\nSteps:\n3 * 6 = 18 (left:",
                "6 - 2 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 - 3 = 13 (left: 13)\n13 + 5 = 18 (left: 18)\n18 + 3 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: (((",
                "6 - 2 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24 24)",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 5 7\nSteps:\n3 * 5 = 15 (left: 3 7 15)\n15 - 7 = 8 (left: 3 8)\n8 * 3 = 24 (left: 24)\nAnswer: (3 * 5) - (15 - 7) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || Input: 10 5",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 4 8\nSteps:\n3 + 4 = 7 (left: 3 7 8)\n7 * 3 = 21 (left: 21 8)\n21 + 8 = 29 (left: 29)\nAnswer: (3 + 4) * (7 * 3) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 * (6 - 2)) * 2 = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 4 5 6\nSteps:\n5 * 4 = 20 (left: 3 6 20)\n20 / 6 = 3.33 (left: 3 3.33)\n3 + 3.33 = 6.33 (left: 6.33)\n6.33 * 3 = 19 (left: 19)\n19 + 5 = 24 (left: 24)\nAnswer: (5"
            ],
            "Pruning": [
                "0<-5.3",
                "2<-5.1",
                "5<-5.1",
                "7<-5.2",
                "8<-5.6",
                "9<-5.5"
            ],
            "Evaluation": [
                60.0,
                0.001,
                60.0,
                0.0,
                40.0,
                60.0,
                0.003,
                60.0,
                40.0,
                60.0
            ],
            "Resampling": [
                "0 <- 6.5",
                "1 <- 3.6",
                "2 <- 5.8",
                "3 <- 5.7",
                "4 <- 5.5",
                "5 <- 6.2",
                "6 <- 0.1",
                "7 <- 6.2",
                "8 <- 5.3",
                "9 <- 6.5"
            ]
        },
        "Step 7": {
            "steps": [
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 2) * (2 * 6) = 24 || Input: 3 3 5 5\nSteps:\n3 * 5 = 15 (left: 3 15 5)\n15 - 5 = 10 (left: 3 10)\n10 * 3 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((3 * 5) - 5) * 3 = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: 1 * (6 - 2) * 2 * 24 = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 5 6 8\nSteps:\n3 * 8 = 24 (left: 5 6 24)\n5 - 6 = -1 (left: -1 24)\n-1 * 24 = 24 (left: 24)\nAnswer: (3 * 8) + (5 - 6) = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 2) * (2 * 6) = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n5 - 3 = 2 (left: 2 21)\n2 * 21 = 42 (left: 42)\nAnswer: (3 * 7) - (5 - 3) = 42",
                "2 * 2 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 2) * (2 * 6) = 24 || Input: 3 3 8 9\nSteps:\n3 * 8 = 24 (left: 3 9 24)\n9 - 3 = 6 (left: 6 24)\n6 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (9 - 3) = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n5 + 3 = 8 (left: 8 21)\n21 - 8 = 13 (left: 13)\n13 + 3 = 16 (left: 16)\n16 + 5 = 21 (left: 21)\n21 * 1 = 24 (left: 24)\nAnswer: (((",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 2) * (2 * 6) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24"
            ],
            "Pruning": [
                "0<-6.8",
                "3<-6.7",
                "4<-4.2",
                "5<-5.8",
                "7<-5.6",
                "8<-4.7",
                "9<-1.5"
            ],
            "Evaluation": [
                60.0,
                40.001,
                0.001,
                60.0,
                60.0,
                60.0,
                0.002,
                40.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 7.9",
                "1 <- 0.2",
                "2 <- 7.0",
                "3 <- 6.0",
                "4 <- 5.1",
                "5 <- 4.1",
                "6 <- 3.0",
                "7 <- 5.0",
                "8 <- 5.7",
                "9 <- 4.0"
            ]
        },
        "Step 8": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 + 1 = 25 (left: 25)",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n4 * 3 = 12 (left: 8 12)\n12 - 8 = 4 (left: 4 24)\n4 * 24 = 96 (left: 96)\nAnswer: (3 + 5) * (4 * 3) = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 2) * (2 * 6) = 24 || Input: 3 3 8 9\nSteps:\n3 * 8 = 24 (left: 3 9 24)\n3 + 9 = 12 (left: 12 24)\n12 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (3 + 9) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 5 * 6 = 30 (left: 1",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 6 8\nSteps:\n3 + 8 = 11 (left: 3 6 11)\n6 - 3 = 3 (left: 3 11)\n3 * 11 = 33 (left: 33)\n33 - 9 = 24 (left: 24)\nAnswer: ((3 + 8) - 6) * 11 = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 * (6 - 2)) * 24 = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (6 - 2) * (1 * 2) = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 4 5\nSteps:\n3 + 4 = 7 (left: 3 5 7)\n3 * 5 = 15 (left: 7 15)\n7 - 15 = -8 (left: -8)\n-8 * -3 = 24 (left: 24)\nAnswer: (-8) * (-3) * (3 + 4) = 24"
            ],
            "Pruning": [
                "3<-6.4",
                "4<-5.5",
                "6<-5.1",
                "7<-7.7",
                "8<-4.7",
                "9<-7.8"
            ],
            "Evaluation": [
                40.0,
                40.0,
                0.002,
                60.0,
                60.0,
                0.003,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 8.1",
                "1 <- 8.9",
                "2 <- 6.7",
                "3 <- 7.9",
                "4 <- 3.6",
                "5 <- 4.1",
                "6 <- 8.0",
                "7 <- 2.8",
                "8 <- 6.0",
                "9 <- 6.2"
            ]
        },
        "Step 9": {
            "steps": [
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 2) * (2 * 6) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 3 4 8\nSteps:\n3 * 8 = 24 (left: 3 4 24)\n3 * 4 = 12 (left: 12 24)\n12 * 2 = 24 (left: 24)\nAnswer: (3 * 8) - (3 * 4) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 + 1 = 25 (left: 25) || 25 + 25 = 50",
                "6 - 2 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * 6 = 24 || Input: 3 4 5 6\nSteps:\n4 * 6 = 24 (left: 3 5 24)\n3 + 5 = 8 (left: 8 24)\n8 * 24 = 192 (left: 192)\nAnswer: (3 + 5) * (4 * 6) = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 2) * (2 * 6) = 24 || Input: 3 3 4 5\nSteps:\n3 + 4 = 7 (left: 3 5 7)\n3 + 5 = 8 (left: 7 8)\n7 * 8 = 56 (left: 56)\n56 / 2 = 28 (left: 28)\n28 / 4 = 7 (left: 7)\n7 * 3 = 21 (left: 21)\n21 + "
            ],
            "Pruning": [
                "2<-8.7",
                "8<-6.5",
                "9<-8.0"
            ]
        },
        "Input": "1 2 2 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "7": {
        "puzzle": "1 1 10 12",
        "Step 0": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 10 12)",
                "1 + 1 = 2 (left: 2 10 12)",
                "1 * 10 = 10 (left: 10 1 12)",
                "1 + 1 = 2 (left: 2 10 12)",
                "12 - 10 = 2 (left: 1 2 12)",
                "1 * 1 = 1 (left: 1 10 12)",
                "1 + 1 = 2 (left: 2 10 12)",
                "10 + 1 = 11 (left: 1 11 12)",
                "10 + 1 = 11 (left: 1 11 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.003,
                1.002,
                1.002,
                0.003,
                60.0,
                2.001,
                1.002,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.5",
                "2 <- 0.5",
                "3 <- 0.5",
                "4 <- 0.6",
                "5 <- 0.5",
                "6 <- 0.5",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 10 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12)",
                "12 - 10 = 2 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 10 12) || 1 + 10 = 11 (left: 11 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "12 - 10 = 2 (left: 1 2 12) || 4 * 8 = 32 (left: 3",
                "10 - 1 = 9 (left: 1 9 12)",
                "12 - 10 = 2 (left: 1 2 ",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                60.0,
                60.0,
                0.003,
                0.003,
                40.0,
                0.003,
                2.001,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 1.9",
                "2 <- 1.2",
                "3 <- 1.1",
                "4 <- 1.5",
                "5 <- 1.1",
                "6 <- 1.9",
                "7 <- 1.9",
                "8 <- 0.5",
                "9 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 10 = 0 (left: 0)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12) || 2 + 12 = 14 (left: 1 14)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.0,
                20.0,
                40.0,
                0.002,
                0.002,
                0.002,
                60.0,
                60.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 1.1",
                "2 <- 2.2",
                "3 <- 2.6",
                "4 <- 2.6",
                "5 <- 2.6",
                "6 <- 1.5",
                "7 <- 2.6",
                "8 <- 2.6",
                "9 <- 1.1"
            ]
        },
        "Step 3": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 2) * (10 + 12) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23) || Sorry, I cannot provide possible next steps for the input \"23\" as it is not clear what operations are being performed. Can you provide more context or details?",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23) || There are no possible next steps for the number 23 as it is a single number with no other numbers to perform operations with.",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23) || 23 / 2 = 11.5 (left: 11.5)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23) || 23 + 2 = 25 (left: 2)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23) || There are no possible next steps with only one number provided.",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)"
            ],
            "Pruning": [
                "2<-1.5",
                "5<-1.9",
                "7<-2.6"
            ],
            "Evaluation": [
                1.001,
                0.002,
                60.0,
                0.003,
                0.003,
                60.0,
                0.001,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 3.2",
                "2 <- 3.2",
                "3 <- 2.2",
                "4 <- 0.5",
                "5 <- 1.9",
                "6 <- 3.2",
                "7 <- 1.5",
                "8 <- 1.5",
                "9 <- 1.5"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5) ",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (10 + 12) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 1 = 12 (left:",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7) ",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ],
            "Pruning": [
                "3<-2.2"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                60.0,
                20.002,
                60.0,
                0.003,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 4.5",
                "1 <- 1.2",
                "2 <- 4.5",
                "3 <- 2.2",
                "4 <- 4.3",
                "5 <- 3.5",
                "6 <- 4.5",
                "7 <- 4.5",
                "8 <- 1.2",
                "9 <- 3.5"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: ((1 * 10) + 12) / 1 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 * (10 - 1)) * 12 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (10 + 12) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (12 - 10) * (1 * 1) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (12 - 10) * 12 / 1 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 + (1 * 10)) * 12 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 24 = 0 (left: 0)"
            ],
            "Pruning": [
                "0<-3.5",
                "2<-3.2",
                "3<-4.3",
                "4<-3.2",
                "6<-4.5",
                "7<-4.5"
            ],
            "Evaluation": [
                60.0,
                0.003,
                60.0,
                60.0,
                60.0,
                60.0,
                40.0,
                60.0,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 5.0",
                "2 <- 5.3",
                "3 <- 5.2",
                "4 <- 4.5",
                "5 <- 5.5",
                "6 <- 5.3",
                "7 <- 5.0",
                "8 <- 1.2",
                "9 <- 5.6"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: 2 * (1 + (12 - 10)) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 10) * (12 - 2) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 * (12 - 10)) * 24 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: 1 * (2 * (12 - 10)) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * (10 - 1)) * 12 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 + 12 = 14",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 + (1 * (10 - 12))) * 24 = 24"
            ],
            "Pruning": [
                "0<-4.5",
                "2<-5.7",
                "4<-4.3",
                "5<-5.3",
                "6<-5.7",
                "9<-5.5"
            ],
            "Evaluation": [
                60.0,
                40.0,
                40.0,
                0.003,
                60.0,
                40.0,
                60.0,
                0.002,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 6.9",
                "1 <- 6.0",
                "2 <- 5.5",
                "3 <- 6.5",
                "4 <- 4.5",
                "5 <- 6.5",
                "6 <- 6.2",
                "7 <- 6.0",
                "8 <- 6.6",
                "9 <- 6.0"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 * (1 * 10)) * 12 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (12 - 10) * 12 / 1 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 * (10 - 1)) * 12 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 10) * (12 - 2) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (12 - 10) * (1 * 24) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * (10 - 1)) * 12 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: ((1 + 1) * (10 - 12)) * 24 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (12 - 10) * 12 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 + (12 - 10)) * 24 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 * 10) + (12 - 2) = 24"
            ],
            "Pruning": [
                "0<-5.4",
                "1<-6.1",
                "2<-2.0",
                "3<-6.2",
                "4<-6.9",
                "5<-6.9",
                "6<-5.5",
                "7<-3.2",
                "8<-5.7",
                "9<-6.0"
            ],
            "Evaluation": [
                40.0,
                0.003,
                20.001,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                40.0
            ],
            "Resampling": [
                "0 <- 7.0",
                "1 <- 7.6",
                "2 <- 7.3",
                "3 <- 6.1",
                "4 <- 7.6",
                "5 <- 6.2",
                "6 <- 6.0",
                "7 <- 6.4",
                "8 <- 4.4",
                "9 <- 7.8"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: 1 * (2 * (12 - 10)) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (12 - 10) * 1 * 24 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25) || 25 / 2 = 12.5",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 * (12 - 10)) * 24 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (12 - 10) * 12 / 1 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (12 - 10) * (1 * 24) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1 + 10) * 12 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 1 = 12 (left: || 12 / 1 = 12 (left: 1 12)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (12 - 10) * 12 = 24"
            ],
            "Pruning": [
                "1<-7.4",
                "2<-7.2",
                "4<-7.0",
                "5<-7.3",
                "6<-7.0",
                "7<-5.6",
                "9<-5.7"
            ],
            "Evaluation": [
                0.001,
                60.0,
                40.001,
                0.003,
                60.0,
                60.0,
                40.0,
                40.0,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 4.5",
                "1 <- 7.8",
                "2 <- 7.8",
                "3 <- 7.4",
                "4 <- 6.0",
                "5 <- 8.5",
                "6 <- 7.6",
                "7 <- 1.5",
                "8 <- 8.9",
                "9 <- 6.4"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: ((12 - 10) * 12) / 1 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 * 10) + (12 - 1) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (12 - 10) * 12 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: 1 * (12 - 10) * 24 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (12 - 10) * 12 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (12 - 10) * 1 * 24 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: 1 * (1 + (10 - 12)) * 24 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (12 - 10) * 12 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 10 - 1) * 12 = 24"
            ],
            "Pruning": [
                "0<-6.0",
                "1<-8.6",
                "2<-7.7",
                "3<-7.5",
                "4<-7.6",
                "5<-8.1",
                "6<-8.9",
                "8<-7.5",
                "9<-8.5"
            ]
        },
        "Input": "1 1 10 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "8": {
        "puzzle": "2 2 10 10",
        "Step 0": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 / 2 = 5 (left: 2 10 ",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "2 * 2 = 4 (left: 4 10 10)",
                "10 - 2 = 8 (left: 2 10 8)",
                "2 * 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)",
                "10 - 2 = 8 (left: 2 10 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                3.0,
                60.0,
                3.0,
                1.002,
                20.002,
                1.002,
                40.001,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 0.7",
                "2 <- 0.7",
                "3 <- 0.2",
                "4 <- 0.1",
                "5 <- INIT",
                "6 <- 0.2",
                "7 <- 0.2",
                "8 <- 0.2",
                "9 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 14)",
                "10 / 2 = 5 (left: 2 10  || 2 + 10 = 12 (left: 12)",
                "10 - 2 = 8 (left: 2 8 10) || 2 * 8 = 16 (left: 10 16)",
                "2 + 2 = 4 (left: 4 10 10)",
                "10 / 2 = 5 (left: 2 10  || 10 / 2 = 5 (left: 5)",
                "10 / 2 = 5 (left: 2 10  || 10 / 2 = 5 (left: 5)",
                "10 / 2 = 5 (left: 2 10  || 10 - 2 = 8 (left: 8)",
                "10 / 2 = 5 (left: 2 10  || 2 + 10 = 12 (left: 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.002,
                60.0,
                0.003,
                0.003,
                20.002,
                0.003,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 0.7",
                "2 <- INIT",
                "3 <- 0.7",
                "4 <- 1.2",
                "5 <- 0.2",
                "6 <- INIT",
                "7 <- 1.2",
                "8 <- 1.2",
                "9 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 + 2 = 4 (left: 4 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 14) || 10 + 14 = 24 (left: 24)",
                "10 / 2 = 5 (left: 2 10  || 10 - 2 = 8 (left: 8)",
                "2 * 2 = 4 (left: 4 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 14) || 14 / 10 = 1.4 (left: 1.4)",
                "2 * 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 14) || 10 + 14 = 24 (left: 24)",
                "10 / 2 = 5 (left: 2 10  || 2 + 10 = 12 (left: 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                1.002,
                20.002,
                21.001,
                60.0,
                0.003,
                21.0,
                0.0,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 2.6",
                "2 <- 1.2",
                "3 <- 2.6",
                "4 <- 2.8",
                "5 <- 1.5",
                "6 <- 2.8",
                "7 <- 2.2",
                "8 <- 2.4",
                "9 <- 1.5"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 14) || 10 + 14 = 24 (left: 14 24)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10)",
                "2 * 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 14) || 10 / 14 = 0.71428571429 (left: 0.71428571429 14)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 14) || 10 + 14 = 24 (left: 24) || Answer: (2 * 2) + (10 + 10) = 24",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 14) || 10 + 14 = 24 (left: 24) || Answer: (2 * 2 + 10) + 10 = 24",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 14) || 10 + 14 = 24 (left: 24) || Answer: ((2 * 2) + 10) + 10 = 24",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)"
            ]
        },
        "Input": "2 2 10 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "9": {
        "puzzle": "1 1 1 12",
        "Step 0": {
            "steps": [
                "12 - 1 = 11 (left: 1 1 11)",
                "1 + 1 = 2 (left: 1 2 12)",
                "1 * 1 = 1 (left: 1 1 12)",
                "1 * 1 = 1 (left: 1 1 12)",
                "1 + 1 = 2 (left: 1 2 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "1 + 1 = 2 (left: 1 2 12)",
                "1 + 1 = 2 (left: 1 2 12)",
                "1 - 1 = 0 (left: 0 1 12)",
                "12 - 1 = 11 (left: 1 1 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                40.0,
                40.001,
                60.0,
                21.001,
                60.0,
                60.0,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.4",
                "2 <- 0.4",
                "3 <- 0.1",
                "4 <- 0.1",
                "5 <- 0.1",
                "6 <- 0.3",
                "7 <- 0.1",
                "8 <- INIT",
                "9 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "1 + 1 = 2 (left: 1 2 12) || 12 - 1 = 11 (left: 2 11)",
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "1 * 1 = 1 (left: 1 12 1)",
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                0.001,
                60.0,
                60.0,
                60.0,
                1.001,
                60.0
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 0.7",
                "2 <- 1.7",
                "3 <- 1.6",
                "4 <- 1.5",
                "5 <- 1.6",
                "6 <- 1.2",
                "7 <- 0.1",
                "8 <- 1.7",
                "9 <- 0.4"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                60.0,
                0.003,
                0.003,
                0.002,
                0.002,
                0.002,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 2.7",
                "2 <- 1.9",
                "3 <- 1.6",
                "4 <- INIT",
                "5 <- 1.2",
                "6 <- 1.6",
                "7 <- 1.3",
                "8 <- 0.2",
                "9 <- 1.1"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 1 12)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 + 1 = 25 (left: 25)",
                "1 * 1 = 1 (left: 1 1 12) || 1 / 1 = 1 (left: 1 12)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 - 2 = 10 (left: 2 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.0,
                0.002,
                0.002,
                60.0,
                60.0,
                0.003,
                40.0,
                0.0,
                1.002,
                0.0
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 0.6",
                "2 <- 2.7",
                "3 <- 1.7",
                "4 <- 1.0",
                "5 <- 1.0",
                "6 <- 1.5",
                "7 <- 1.5",
                "8 <- 3.3",
                "9 <- 3.3"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "1 + 1 = 2 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) + (1 + 12) = 24",
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (1 + 12) = 24"
            ],
            "Pruning": [
                "8<-1.6",
                "9<-1.0"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.003,
                0.003,
                60.0,
                40.001,
                0.001,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.6",
                "2 <- 1.7",
                "3 <- 0.6",
                "4 <- 3.4",
                "5 <- INIT",
                "6 <- 4.9",
                "7 <- 4.1",
                "8 <- 1.6",
                "9 <- 4.4"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 2 + 12 = 14 (left: 1 14)",
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)",
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "1 + 1 = 2 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 24 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.001,
                0.001,
                0.003,
                60.0,
                60.0,
                1.001,
                1.002,
                20.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 4.5",
                "2 <- 5.7",
                "3 <- 4.1",
                "4 <- 4.5",
                "5 <- 5.4",
                "6 <- 3.4",
                "7 <- 5.7",
                "8 <- 2.1",
                "9 <- 5.4"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "1 + 1 = 2 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12) || 3 + 12 = 15 (left: 15)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 24 = 0 (left: 0) || There are no possible next steps with the input 0.",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)",
                "1 + 1 = 2 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36)",
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 24 = 0 (left: 0) || No possible next steps with the input 0.",
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                60.0,
                40.0,
                0.003,
                60.0,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 5.4",
                "2 <- 0.4",
                "3 <- 6.6",
                "4 <- 1.0",
                "5 <- 5.4",
                "6 <- 1.5",
                "7 <- 4.8",
                "8 <- 5.4",
                "9 <- 3.4"
            ]
        },
        "Step 7": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 3 - 6 = -3 (left: -",
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                60.0,
                0.003,
                0.003,
                0.003,
                0.002,
                0.0,
                0.003,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 6.9",
                "1 <- 7.9",
                "2 <- 7.1",
                "3 <- 4.8",
                "4 <- 7.1",
                "5 <- 6.3",
                "6 <- 6.4",
                "7 <- 6.4",
                "8 <- 6.3",
                "9 <- 7.1"
            ]
        },
        "Step 8": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) + (1 + 12) = 24",
                "1 * 1 = 1 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12) || 1 + 12 = 13 (left: 13)",
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (1 + 12) = 24",
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: ((1 * 1) + 1) * 12 = 24",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25) || 25 / 2 = 12.5 (left: 2)",
                "1 + 1 = 2 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || None - 36 is a single number and cannot be combined with any other numbers.",
                "1 + 1 = 2 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 / 2 = 18",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25) || 25 / 25 = 1 (left: )",
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) + (1 + 12) = 24"
            ]
        },
        "Input": "1 1 1 12",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "Cost": {
        "input_tokens": 0,
        "output_tokens": 73896.0,
        "total_cost": 0.110844
    }
}