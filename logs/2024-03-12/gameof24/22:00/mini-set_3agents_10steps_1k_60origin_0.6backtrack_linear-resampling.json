{
    "0": {
        "puzzle": "1 1 4 6",
        "Step 0": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6)",
                "4 + 1 = 5 (left: 1 5 6)",
                "6 - 4 = 2 (left: 1 2 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.1",
                "2 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "4 + 1 = 5 (left: 1 5 6) || 1 * 5 = 5 (left: 5 6)",
                "4 + 1 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.0",
                "2 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "6 - 4 = 2 (left: 1 2 6)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5)",
                "1 * 4 = 4 (left: 4 4 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                41.0,
                3.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.1",
                "2 <- 0.0"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6)",
                "4 + 1 = 5 (left: 1 5 6) || 6 / 1 = 6 (left: 6 6)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 1 = 5 ("
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.2",
                "2 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 1 = 2 (left: 2 4 6)",
                "4 + 1 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6) || 6 + 6 = 12",
                "1 + 1 = 2 (left: 2 4 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 0.1",
                "2 <- 2.1"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "4 + 1 = 5 (left: 1 5 6) || 5 / 1 = 5 (left: 5 6)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || 4 + 5 = 9 (left: 5 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.1",
                "2 <- 2.1"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || 5 - 4 = 1 (left: 1)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || 4 * 5 = 20 (left: 20)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 6.0",
                "2 <- 6.0"
            ]
        },
        "Step 7": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "1 * 1 = 1 (left: 1 4 6) || 1 + 4 = 5 (left: 5 6)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 0.1",
                "2 <- 3.0"
            ]
        },
        "Step 8": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6)",
                "4 + 1 = 5 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 4 + 6 = 10 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 8.1",
                "1 <- 7.2",
                "2 <- 8.0"
            ]
        },
        "Step 9": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)"
            ],
            "Pruning": []
        },
        "Input": "1 1 4 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1": {
        "puzzle": "1 1 11 11",
        "Step 0": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11)",
                "1 * 1 = 1 (left: 1 11 11)",
                "11 - 1 = 10 (left: 1 10 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11)",
                "1 + 1 = 2 (left: 2 11 11)",
                "11 - 1 = 10 (left: 1 10 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "11 - 1 = 10 (left: 1 11 10)",
                "11 / 1 = 11 (left: 1 11 ",
                "1 * 1 = 1 (left: 1 11 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                40.001,
                2.001
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- INIT",
                "2 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "11 / 1 = 11 (left: 1 11  || 11 + 1 = 12 (left: 11)",
                "1 + 1 = 2 (left: 2 11 11)",
                "11 / 1 = 11 (left: 1 11  || 11 - 1 = 10 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                21.001,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 3.1"
            ]
        },
        "Step 4": {
            "steps": [
                "11 / 1 = 11 (left: 1 11  || 11 / 1 = 11 (left: 11)",
                "11 / 1 = 11 (left: 1 11  || 1 + 11 = 12 (left: 11)",
                "1 + 1 = 2 (left: 2 11 11) || 11 / 2 = 5.5 (left: 5.5 11 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 2.1",
                "2 <- 2.1"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 11) || 2 * 11 = 22 (left: 11 11 22)",
                "11 / 1 = 11 (left: 1 11  || 11 - 1 = 10 (left: 10)",
                "11 / 1 = 11 (left: 1 11  || 1 + 11 = 12 (left: 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 5.0",
                "2 <- 2.1"
            ]
        },
        "Step 6": {
            "steps": [
                "11 / 1 = 11 (left: 1 11  || 1 + 11 = 12 (left: 12)",
                "1 + 1 = 2 (left: 2 11 11) || 2 * 11 = 22 (left: 11 11 22) || 11 / 11 = 1 (left: 1 22)",
                "11 / 1 = 11 (left: 1 11  || 1 + 11 = 12"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 5.0",
                "2 <- 3.1"
            ]
        },
        "Step 7": {
            "steps": [
                "11 / 1 = 11 (left: 1 11  || 11 - 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 11 11) || 2 * 11 = 22 (left: 11 11 22) || Input: 3 5 8 10",
                "1 + 1 = 2 (left: 2 11 11) || 11 - 2 = 9 (left: 9 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 5.0",
                "2 <- 2.1"
            ]
        },
        "Step 8": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 11) || 2 * 11 = 22 (left: 11 11 22) || 22 / 11 = 2 (left: 2 22)",
                "1 + 1 = 2 (left: 2 11 11) || 2 * 11 = 22 (left: 11 11 22) || 22 - 11 = 11 (left: 11 11)",
                "11 / 1 = 11 (left: 1 11  || 1 * 11 = 11 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 8.0",
                "1 <- 5.0",
                "2 <- 8.0"
            ]
        },
        "Step 9": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 11) || 2 * 11 = 22 (left: 11 11 22) || 22 / 11 = 2 (left: 2 22) || 2 + 22 = 24",
                "1 + 1 = 2 (left: 2 11 11) || 2 * 11 = 22 (left: 11 11 22) || 22 / 11 = 2 (left: 11 2 11)",
                "1 + 1 = 2 (left: 2 11 11) || 2 * 11 = 22 (left: 11 11 22) || 22 / 11 = 2 (left: 2 22) || 2 + 22 = 24 (left: 24)"
            ],
            "Pruning": [
                "2<-8.0"
            ]
        },
        "Input": "1 1 11 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "2": {
        "puzzle": "1 1 3 8",
        "Step 0": {
            "steps": [
                "1 + 1 = 2 (left: 2 3 8)",
                "3 + 1 = 4 (left: 1 4 8)",
                "3 * 1 = 3 (left: 3 1 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                20.002,
                60.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- INIT",
                "2 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 8) || 8 / 4 = 2 (left: 1 2)",
                "3 * 1 = 3 (left: 3 3 ",
                "3 * 1 = 3 (left: 3 1 8) || 8 - 1 = 7 (left: 3 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                20.0,
                0.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.0",
                "2 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 8) || 8 / 4 = 2 (left: 1 2) || 2 - 1 = 1 (left: 1)",
                "3 + 1 = 4 (left: 1 4 8) || 8 / 4 = 2 (left: 1 2) || 1 * 2 = 2 (left: 2)",
                "3 * 1 = 3 (left: 3 1 8) || 1 + 8 = 9 (left: 3 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 0.2",
                "2 <- 1.0"
            ]
        },
        "Step 3": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 8) || 8 / 4 = 2 (left: 1 2) || 2 / 1 = 2 (left: 2)",
                "3 * 1 = 3 (left: 3 1 8) || 8 / 1 = 8 (left: 3 8)",
                "3 + 1 = 4 (left: 1 4 8) || 8 / 4 = 2 (left: 1 2) || 1 * 2 = 2 (left: 2)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 3.1",
                "2 <- 1.0"
            ]
        },
        "Step 4": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 8) || 8 / 4 = 2 (left: 1 2) || 2 / 1 = 2 (left: 2)",
                "3 * 1 = 3 (left: 3 1 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 + 1 = 4 (left: 1 4 8) || 8 / 4 = 2 (left: 1 2) || 1 - 2 = -1 (left: -1)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                60.0,
                0.0
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 3.1",
                "2 <- 1.0"
            ]
        },
        "Step 5": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (8 / 1) = 24",
                "3 * 1 = 3 (left: 3 1 8) || 8 / 1 = 8 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "3 + 1 = 4 (left: 1 4 8) || 8 / 4 = 2 (left: 1 2) || 1 + 2 = 3 (left: 3)"
            ]
        },
        "Input": "1 1 3 8",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "3": {
        "puzzle": "1 1 1 8",
        "Step 0": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8)",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 + 1 = 2 (left: 2 1 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                41.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.2",
                "2 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left:",
                "1 + 1 = 2 (left: 2 1 8) || 2 + 1 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.0,
                60.0,
                1.001
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.1",
                "2 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "1 + 1 = 2 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8) || 8 - 2 = 6 (left: 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 1.1",
                "2 <- 0.0"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 9 - 5 = 4 (left: 4)",
                "1 + 1 = 2 (left: 2 1 8) || 2 + 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 2.1",
                "2 <- 2.1"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 8) || 2 + 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: ((1 + 1) + 1) * 8 = 24",
                "1 + 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 + 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)"
            ]
        },
        "Input": "1 1 1 8",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "4": {
        "puzzle": "6 6 6 6",
        "Step 0": {
            "steps": [
                "6 + 6 = 12 (left: 6 6 12)",
                "6 / 6 = 1 (left: 6 6 1 6)",
                "6 * 6 = 36 (left: 6 6 36)"
            ],
            "Pruning": [],
            "Evaluation": [
                41.0,
                2.001,
                60.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.0",
                "2 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 36 - 6 = 30 (left: 6 30)",
                "6 + 6 = 12 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "6 * 6 = 36 (left: 6 6 36) || Possible next steps:"
            ],
            "Pruning": [],
            "Evaluation": [
                20.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.0",
                "2 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "6 + 6 = 12 (left: 6 6 12)",
                "6 * 6 = 36 (left: 6 6 36) || 36 - 6 = 30 (left: 6 30) || 6 * 30 = 180 (left: 30 180)",
                "6 / 6 = 1 (left: 6 6 1 6) || 6 / 1 = 6 (left: 6 6 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                41.0,
                40.001,
                2.001
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 2.1",
                "2 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 36 - 6 = 30 (left: 6 30) || 30 / 6 = 5 (left: 5)",
                "6 * 6 = 36 (left: 6 6 36) || 36 - 6 = 30 (left: 6 30) || 6 * 30 = 180 (left: 30 180) || Possible next steps:",
                "6 + 6 = 12 (left: 6 12 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 2.0",
                "2 <- 0.2"
            ]
        },
        "Step 4": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6) || 6 * 12 = 72 (left: 72 6)",
                "6 + 6 = 12 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 6 36)"
            ],
            "Pruning": [],
            "Evaluation": [
                21.0,
                40.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 2.0",
                "2 <- 4.1"
            ]
        },
        "Step 5": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 + 6 = 12 (left: 12 36)",
                "6 + 6 = 12 (left: 6 6 12) || 12 - 6 = 6 (left: 6 12)",
                "6 + 6 = 12 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 5.2",
                "2 <- 5.2"
            ]
        },
        "Step 6": {
            "steps": [
                "6 + 6 = 12 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((6 + 6) + (6 + 6)) = 24",
                "6 + 6 = 12 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((6 + 6) + (6 + 6)) = 24",
                "6 + 6 = 12 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((6 + 6) + 6) + 6 = 24"
            ]
        },
        "Input": "6 6 6 6",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            }
        ]
    },
    "5": {
        "puzzle": "1 1 2 12",
        "Step 0": {
            "steps": [
                "12 / 2 = 6 (left: 1 2 6)",
                "1 + 1 = 2 (left: 2 2 12)",
                "1 + 1 = 2 (left: 2 2 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                40.001,
                21.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.2",
                "2 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 2 = 10 (left: 1 2 ",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12)",
                "1 * 1 = 1 (left: 1 2 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                40.001,
                60.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12)",
                "1 * 1 = 1 (left: 1 2 12)",
                "1 + 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.001,
                60.0,
                3.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 1.1",
                "2 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 12) || 2 + 2 = 4 (left: 4 12)",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                40.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 1.2",
                "2 <- 2.0"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 10 2)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                60.0,
                1.0
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 3.1",
                "2 <- 4.1"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)"
            ],
            "Pruning": [
                "0<-3.2",
                "1<-3.1"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 5.0",
                "2 <- 1.2"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || Input: 5 3 7",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left:"
            ],
            "Pruning": [
                "0<-3.2"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 6.0",
                "2 <- 6.0"
            ]
        },
        "Step 7": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 6.0",
                "2 <- 2.1"
            ]
        },
        "Step 8": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 + 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 7.0",
                "1 <- 5.1",
                "2 <- 5.1"
            ]
        },
        "Step 9": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24 24)",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)"
            ],
            "Pruning": [
                "0<-7.0",
                "2<-5.0"
            ]
        },
        "Input": "1 1 2 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "6": {
        "puzzle": "1 2 2 6",
        "Step 0": {
            "steps": [
                "2 * 2 = 4 (left: 1 4 ",
                "6 / 2 = 3 (left: 1 2 3)",
                "2 * 2 = 4 (left: 1 4 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- INIT",
                "2 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "6 - 2 = 4 (left: 1 2 4)",
                "2 * 2 = 4 (left: 1 4 6) || 1 + 4 = 5 (left: 5 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.2",
                "2 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4)",
                "2 * 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 2)",
                "2 * 2 = 4 (left: 1 4 6) || 4 / 1 = "
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- INIT",
                "2 <- 0.2"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 2 = 4 (left: 1 4 6) || 4 + 6 = 10 (left: 1 10)",
                "6 - 2 = 4 (left: 1 4 6)",
                "2 * 2 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 3.1",
                "2 <- 3.1"
            ]
        },
        "Step 4": {
            "steps": [
                "2 * 2 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 0.2",
                "2 <- 3.1"
            ]
        },
        "Step 5": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "2 * 2 = 4 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                2.001,
                40.001
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 5.0",
                "2 <- 5.0"
            ]
        },
        "Step 6": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (6 - 2) * (1 * 24) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 * (6 - 2)) * 24 = 24"
            ],
            "Pruning": [
                "1<-4.2",
                "2<-3.1"
            ],
            "Evaluation": [
                0.002,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 4.2",
                "2 <- 6.2"
            ]
        },
        "Step 7": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 / 24 = 0.041666666666666664 (left: 0.041666",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 7.2",
                "1 <- 7.2",
                "2 <- 6.1"
            ]
        },
        "Step 8": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 - 6 = -2 (left: -2)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 8.2",
                "1 <- 7.2",
                "2 <- 6.1"
            ]
        },
        "Step 9": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: ((1 * 2) * 6) * 2 = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)"
            ]
        },
        "Input": "1 2 2 6",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "7": {
        "puzzle": "1 1 10 12",
        "Step 0": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 10 12)",
                "1 + 1 = 2 (left: 2 10 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                21.001,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.2",
                "2 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 10 12)",
                "1 + 1 = 2 (left: 2 10 12) || 10 / 2 = 5 (left: 5 10 12)",
                "12 - 10 = 2 (left: 1 2 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.0,
                1.001,
                60.0
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "1 + 10 = 11 (left: 11 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                41.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 1.2",
                "2 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 2.1"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.2",
                "2 <- 0.2"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 10 12) || 12 - 10 = 2 (left: 1 2 12)",
                "12 - 10 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)",
                "1 + 1 = 2 (left: 2 10 12) || 2 + 10 = 12 (left: 12 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                60.0,
                40.001
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 5.0"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 10 12) || 12 - 10 = 2 (left: 1 2 12) || 12 / 1 = 12 (left:"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                60.0,
                40.001
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 6.2",
                "2 <- 6.0"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 10 12) || 12 - 10 = 2 (left: 1 2 12) || 12 / 1 = 12 (left: || 12 - 1 = 11 (left: 11)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 * (12 - 10)) * 24 = 24"
            ],
            "Pruning": [
                "1<-6.0",
                "2<-5.1"
            ],
            "Evaluation": [
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 7.2",
                "2 <- 5.1"
            ]
        },
        "Step 8": {
            "steps": [
                "1 + 1 = 2 (left: 2 10 12) || 2 + 10 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 - 10 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "12 - 10 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 7.2",
                "1 <- 6.0",
                "2 <- 7.1"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 * (1 + 10)) * 12 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: 1 * (12 - 10) * 24 = 24"
            ],
            "Pruning": [
                "1<-6.0",
                "2<-6.2"
            ]
        },
        "Input": "1 1 10 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "8": {
        "puzzle": "2 2 10 10",
        "Step 0": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 10 "
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                2.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.2",
                "2 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "10 * 2 = 20 (left: 2 10 ",
                "10 - 2 = 8 (left: 2 10  || 10 / 2 = 5 (left: 5)",
                "2 + 2 = 4 (left: 4 10 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.0,
                0.003,
                21.001
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.0",
                "2 <- 1.2"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10)",
                "10 * 2 = 20 (left: 2 10  || 10 / 2 = 5 (left: 5)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 3.0",
                "2 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.002,
                1.001
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 0.2",
                "2 <- 3.0"
            ]
        },
        "Step 5": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 10 40)",
                "10 - 2 = 8 (left: 2 10  || 2 + 10 = 12 (left: 12)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                2.001
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 5.2",
                "2 <- 5.2"
            ]
        },
        "Step 6": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 10 - 2.5 = 7.5 (left: 7.5 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 10 - 2.5 = 7.5 (left: 7.5 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 3.0",
                "2 <- 4.1"
            ]
        },
        "Step 7": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 2.5 * 10 = 25 (left: 10 25)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 2.5 * 10 = 25 (left: 10 25)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 7.1",
                "1 <- 7.1",
                "2 <- 7.1"
            ]
        },
        "Step 8": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 6 - 4 = 2 (left: 2 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 4 + 6 = 10 (left: 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 10 - 4 = 6 (left: 6 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.0,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 7.1",
                "1 <- 7.1",
                "2 <- 7.1"
            ]
        },
        "Step 9": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 4 * 6 = 24 (left: 24 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 4 * 6 = 24 (left: 24 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 4 6 10) || 6 * 4 = 24 (left: 24 10)"
            ],
            "Pruning": []
        },
        "Input": "2 2 10 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "9": {
        "puzzle": "1 1 1 12",
        "Step 0": {
            "steps": [
                "12 - 1 = 11 (left: 1 1 11)",
                "1 + 1 = 2 (left: 1 2 12)",
                "1 * 1 = 1 (left: 1 1 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                60.0,
                20.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.1",
                "2 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12)",
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 1 2 12) || 2 + 1 = 3 (left: 3 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                60.0,
                20.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 0.1",
                "2 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 1 = 12 (left:",
                "1 * 1 = 1 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 1.0",
                "2 <- 2.0"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "1 + 1 = 2 (left: 1 2 12) || 1 + 3 = 4 (left: 4 5 7)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 2.1",
                "2 <- 2.2"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 1 = 12 (left: || 12 - 1 = 11 (left: 1 11)",
                "1 * 1 = 1 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 1.0",
                "2 <- 1.2"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)",
                "1 + 1 = 2 (left: 1 2 12) || 2 + 1 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                20.0
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 2.0",
                "2 <- 5.1"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 5.1",
                "2 <- 5.1"
            ]
        },
        "Step 7": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 0.1",
                "2 <- 1.1"
            ]
        },
        "Step 8": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 12 / 1 = 12 (left: || None",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)",
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 8.1",
                "1 <- 5.1",
                "2 <- 8.1"
            ]
        },
        "Step 9": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)"
            ],
            "Pruning": []
        },
        "Input": "1 1 1 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "Cost": {
        "input_tokens": 0,
        "output_tokens": 31530.0,
        "total_cost": 0.047295000000000004
    }
}