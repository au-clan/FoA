{
    "0": {
        "puzzle": "1 1 4 6",
        "Step 0": {
            "steps": [
                "6 - 4 = 2 (left: 1 2 6)",
                "1 * 1 = 1 (left: 1 4 6)",
                "6 - 1 = 5 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 4 5)",
                "6 - 4 = 2 (left: 1 2 6)"
            ],
            "Evaluation": [
                1.002,
                41.0,
                21.0,
                21.0,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.2",
                "3 <- 0.1",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6)",
                "6 - 1 = 5 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "6 - 1 = 5 (left: 1 4 5)"
            ],
            "Evaluation": [
                41.0,
                21.0,
                0.002,
                2.0,
                21.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.0",
                "2 <- 1.4",
                "3 <- INIT",
                "4 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "6 - 4 = 2 (left: 1 2 6)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.002,
                1.002,
                0.002
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 2.0",
                "2 <- 2.0",
                "3 <- 0.0",
                "4 <- 0.2"
            ]
        },
        "Step 3": {
            "steps": [
                "6 - 1 = 5 (left: 1 4 5) || 4 / 1 = 4 (left: 4 5)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 10 / 5 = 2 (left: 2)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 10 / 5 = 2 (left: 2)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)"
            ],
            "Evaluation": [
                3.0,
                0.001,
                0.001,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 2.0",
                "2 <- 3.3",
                "3 <- 2.0",
                "4 <- 1.1"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 10 / 5 = 2 (left: 2)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || Input: 5 10",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)"
            ],
            "Evaluation": [
                60.0,
                0.001,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 2.0",
                "2 <- 1.4",
                "3 <- 3.3",
                "4 <- 1.0"
            ]
        },
        "Step 5": {
            "steps": [
                "6 - 1 = 5 (left: 1 4 5) || 4 / 1 = 4 (left: 4 5)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 10 / 5 = 2 (left: 2)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)"
            ],
            "Evaluation": [
                3.0,
                0.001,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 1.1",
                "2 <- 3.3",
                "3 <- 0.0",
                "4 <- INIT"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4)",
                "6 - 1 = 5 (left: 1 4 5)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.002,
                60.0,
                21.0
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 6.3",
                "2 <- 6.4",
                "3 <- 6.3",
                "4 <- 6.0"
            ]
        },
        "Step 7": {
            "steps": [
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: 1 * (1 * 4 * 6) = 24"
            ]
        },
        "Input": "1 1 4 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "1": {
        "puzzle": "1 1 11 11",
        "Step 0": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 11 11)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12)"
            ],
            "Evaluation": [
                20.002,
                1.002,
                1.002,
                1.002,
                20.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.0",
                "2 <- 0.0",
                "3 <- INIT",
                "4 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.002,
                20.002,
                20.002,
                20.002,
                20.002
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.2",
                "2 <- INIT",
                "3 <- 1.3",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 * 1 = 11 (left: 1 11 11)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                1.002,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.3",
                "2 <- 0.0",
                "3 <- 0.4",
                "4 <- 1.1"
            ]
        },
        "Step 3": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                20.002,
                20.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.1",
                "2 <- 3.1",
                "3 <- 3.2",
                "4 <- 1.3"
            ]
        },
        "Step 4": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 1.4",
                "2 <- 1.1",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 5": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12)",
                "11 * 1 = 11 (left: 1 11 11)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                20.002,
                1.002
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 1.4",
                "2 <- 1.3",
                "3 <- INIT",
                "4 <- 4.4"
            ]
        },
        "Step 6": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 6.3",
                "2 <- 6.3",
                "3 <- 0.0",
                "4 <- 1.3"
            ]
        },
        "Step 7": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                20.002,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 7.1",
                "1 <- 6.3",
                "2 <- 7.2",
                "3 <- 5.3",
                "4 <- 6.2"
            ]
        },
        "Step 8": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 1.2",
                "2 <- 7.4",
                "3 <- 3.2",
                "4 <- 4.4"
            ]
        },
        "Step 9": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ]
        },
        "Input": "1 1 11 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    }
}