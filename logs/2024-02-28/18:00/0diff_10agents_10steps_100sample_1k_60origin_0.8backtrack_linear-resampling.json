{
    "0": {
        "puzzle": "1 1 4 6",
        "Step 0": {
            "steps": [
                "6 - 4 = 2 (left: 1 2 6)",
                "1 * 1 = 1 (left: 1 4 6)",
                "6 - 1 = 5 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 4 5)",
                "6 - 4 = 2 (left: 1 2 6)",
                "6 - 1 = 5 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 4 5)",
                "6 - 4 = 2 (left: 1 2 6)",
                "4 + 1 = 5 (left: 1 5 ",
                "6 - 4 = 2 (left: 1 2 6)"
            ],
            "Evaluation": [
                1.002,
                41.0,
                21.0,
                21.0,
                1.002,
                21.0,
                21.0,
                1.002,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.5",
                "2 <- INIT",
                "3 <- 0.2",
                "4 <- 0.5",
                "5 <- 0.6",
                "6 <- INIT",
                "7 <- 0.6",
                "8 <- 0.6",
                "9 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "6 - 1 = 5 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 4 = 1 (left:",
                "6 - 4 = 2 (left: 1 2 6)",
                "6 - 1 = 5 (left: 1 4 5) || 4 - 1 = 3 (left: 3 5)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                21.0,
                0.003,
                0.002,
                0.001,
                1.002,
                1.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 0.2",
                "2 <- 0.1",
                "3 <- 1.0",
                "4 <- 0.1",
                "5 <- 0.1",
                "6 <- 1.2",
                "7 <- 0.3",
                "8 <- 0.6",
                "9 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || Input: 5 10",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "1 * 1 = 1 (left: 1 4 6) || Input: 3 9",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "6 - 1 = 5 (left: 1 4 5) || 4 - 1 = 3 (left: 3 5)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 5 + 10 = 15 (left: 15)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.002,
                0.003,
                0.002,
                0.003,
                0.003,
                1.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 0.1",
                "2 <- 0.1",
                "3 <- 1.2",
                "4 <- 1.0",
                "5 <- 2.0",
                "6 <- 1.0",
                "7 <- 0.3",
                "8 <- 0.6",
                "9 <- 1.2"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: 1 * (1 * 4 * 6) = 24",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 5 + 10 = 15 (left: 15)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: 1 * (1 * 4 * 6) = 24",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || Input: 5 10",
                "6 - 1 = 5 (left: 1 4 5) || 4 - 1 = 3 (left: 3 5)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)"
            ]
        },
        "Input": "1 1 4 6",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1": {
        "puzzle": "1 1 11 11",
        "Step 0": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 11 11)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12)",
                "11 / 1 = 11 (left: 1 11 ",
                "11 + 1 = 12 (left: 1 11 12)"
            ],
            "Evaluation": [
                20.002,
                1.002,
                1.002,
                1.002,
                20.002,
                1.002,
                1.002,
                20.002,
                0.001,
                20.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.4",
                "2 <- 0.7",
                "3 <- INIT",
                "4 <- 0.0",
                "5 <- INIT",
                "6 <- 0.7",
                "7 <- INIT",
                "8 <- 0.7",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 / 1 = 11 (left: 1 11 ",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 * 1 = 11 (left: 1 11 11)"
            ],
            "Evaluation": [
                1.002,
                20.002,
                20.002,
                20.002,
                20.002,
                1.002,
                0.002,
                0.001,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.2",
                "2 <- 1.4",
                "3 <- 0.0",
                "4 <- 1.1",
                "5 <- 0.7",
                "6 <- INIT",
                "7 <- 1.0",
                "8 <- INIT",
                "9 <- 0.4"
            ]
        },
        "Step 2": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 11 11) || 11 / 1 = 11 (left: 11 11 11)",
                "11 + 1 = 12 (left: 1 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                20.002,
                20.002,
                0.003,
                20.002,
                20.002
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- INIT",
                "2 <- 0.0",
                "3 <- 2.6",
                "4 <- 2.8",
                "5 <- 1.9",
                "6 <- 1.2",
                "7 <- 0.7",
                "8 <- 2.9",
                "9 <- 2.5"
            ]
        },
        "Step 3": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 10 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.002,
                1.002,
                20.002,
                0.002,
                20.002,
                1.002,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.1",
                "2 <- 0.9",
                "3 <- 1.3",
                "4 <- 2.5",
                "5 <- 2.8",
                "6 <- 3.2",
                "7 <- 1.1",
                "8 <- 2.8",
                "9 <- 1.1"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                1.002,
                0.003,
                20.002,
                0.002,
                0.003,
                20.002,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 3.4",
                "2 <- 3.2",
                "3 <- 4.5",
                "4 <- 2.9",
                "5 <- 4.5",
                "6 <- 4.5",
                "7 <- 3.4",
                "8 <- 2.9",
                "9 <- 1.4"
            ]
        },
        "Step 5": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.5",
                "1 <- 0.0",
                "2 <- 1.1",
                "3 <- 2.6",
                "4 <- 4.5",
                "5 <- 3.1",
                "6 <- 4.2",
                "7 <- 2.5",
                "8 <- 2.9",
                "9 <- 0.7"
            ]
        },
        "Step 6": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 10 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.003,
                0.002,
                0.003,
                1.002,
                0.003,
                0.003,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 2.5",
                "2 <- 4.2",
                "3 <- 3.2",
                "4 <- 2.5",
                "5 <- 6.1",
                "6 <- 6.1",
                "7 <- 2.9",
                "8 <- 6.9",
                "9 <- 2.8"
            ]
        },
        "Step 7": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 2.9",
                "1 <- INIT",
                "2 <- 3.4",
                "3 <- 1.2",
                "4 <- 4.5",
                "5 <- 2.8",
                "6 <- 1.3",
                "7 <- 7.9",
                "8 <- 7.9",
                "9 <- 6.1"
            ]
        },
        "Step 8": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                1.002,
                0.003,
                0.003,
                0.003,
                20.002,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 6.9",
                "1 <- 4.5",
                "2 <- 1.3",
                "3 <- 0.9",
                "4 <- 3.4",
                "5 <- 3.4",
                "6 <- 6.1",
                "7 <- 0.7",
                "8 <- 3.2",
                "9 <- 8.5"
            ]
        },
        "Step 9": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ]
        },
        "Input": "1 1 11 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "2": {
        "puzzle": "1 1 3 8",
        "Step 0": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8)",
                "1 * 3 = 3 (left: 3 1 8)",
                "8 - 3 = 5 (left: 1 3 5)",
                "8 - 3 = 5 (left: 1 3 5)",
                "3 * 1 = 3 (left: 1 3 8)",
                "8 - 3 = 5 (left: 1 3 5)",
                "8 - 3 = 5 (left: 1 3 5)",
                "3 * 1 = 3 (left: 1 3 8)",
                "1 * 8 = 8 (left: 8 1 ",
                "3 * 1 = 3 (left: 1 3 8)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                1.002,
                1.002,
                60.0,
                1.002,
                1.002,
                60.0,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 0.1",
                "2 <- 0.1",
                "3 <- 0.9",
                "4 <- 0.1",
                "5 <- 0.0",
                "6 <- 0.1",
                "7 <- 0.9",
                "8 <- 0.7",
                "9 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8)",
                "1 * 3 = 3 (left: 3 1 8) || 8 / 3 = 2 (left: 2 3)",
                "1 * 3 = 3 (left: 3 1 8) || 8 / 3 = 2 (left: 2 3)",
                "3 * 1 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "1 * 3 = 3 (left: 3 1 8) || 8 / 3 = 2 (left: 2 3)",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "1 * 3 = 3 (left: 3 1 8) || 8 - 3 = 5 (left: 3 5)",
                "3 * 1 = 3 (left: 1 3 8) || 1 * 8 = 8 (left: 8)",
                "3 * 1 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.002,
                0.0,
                0.002,
                0.0,
                1.001,
                0.002,
                0.0,
                0.0
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 0.4",
                "2 <- INIT",
                "3 <- 1.0",
                "4 <- 0.7",
                "5 <- 0.1",
                "6 <- 0.1",
                "7 <- 0.7",
                "8 <- 0.1",
                "9 <- 0.4"
            ]
        },
        "Step 2": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "8 - 3 = 5 (left: 1 3 5)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "1 * 3 = 3 (left: 3 1 8) || Input: 5 6",
                "1 * 3 = 3 (left: 3 1 8) || 8 - 3 = 5 (left: 3 5)",
                "3 * 1 = 3 (left: 1 3 8) || 1 * 8 = 8 (left: 8)",
                "1 * 3 = 3 (left: 3 1 8) || 8 - 3 = 5 (left: 3 5)",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)"
            ],
            "Evaluation": [
                60.0,
                0.0,
                1.002,
                0.002,
                0.0,
                0.003,
                1.001,
                0.002,
                1.001,
                0.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.7",
                "2 <- 1.0",
                "3 <- 1.0",
                "4 <- 0.6",
                "5 <- 0.0",
                "6 <- 0.7",
                "7 <- 0.4",
                "8 <- INIT",
                "9 <- 0.9"
            ]
        },
        "Step 3": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 - 3 = 5 (left: 1 3 5) || Input: 10 5 2",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "3 * 1 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "3 * 1 = 3 (left: 1 3 8) || 1 * 8 = 8 (left: 8)",
                "3 * 1 = 3 (left: 1 3 8)",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)"
            ],
            "Evaluation": [
                60.0,
                0.0,
                60.0,
                0.002,
                0.003,
                0.0,
                0.0,
                0.002,
                60.0,
                0.0
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 3.2",
                "2 <- 3.2",
                "3 <- 3.0",
                "4 <- 1.0",
                "5 <- 3.2",
                "6 <- 3.0",
                "7 <- 0.0",
                "8 <- 3.0",
                "9 <- 2.6"
            ]
        },
        "Step 4": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 1 = 3 (left: 1 3 8) || 1 * 8 = 8 (left: 8)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 * 3 = 3 (left: 3 1 8) || 8 - 3 = 5 (left: 3 5) || 10 + 2 = 12 (left: 12)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                0.002,
                60.0,
                0.003,
                0.002,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 4.0",
                "2 <- 4.4",
                "3 <- 4.0",
                "4 <- 2.0",
                "5 <- 1.0",
                "6 <- 0.4",
                "7 <- 0.0",
                "8 <- 0.1",
                "9 <- 4.0"
            ]
        },
        "Step 5": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 * 1 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "3 * 1 = 3 (left: 1 3 8) || 1 * 8 = 8 (left: 8)",
                "1 * 3 = 3 (left: 3 1 8) || 8 - 3 = 5 (left: 3 5)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.003,
                0.002,
                60.0,
                60.0,
                0.0,
                0.002,
                1.001,
                60.0
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 5.0",
                "2 <- 3.8",
                "3 <- 0.0",
                "4 <- 5.0",
                "5 <- 0.7",
                "6 <- 4.0",
                "7 <- 4.4",
                "8 <- 4.4",
                "9 <- 5.9"
            ]
        },
        "Step 6": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "3 * 1 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.0,
                0.0,
                60.0,
                0.0,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 5.0",
                "2 <- 3.2",
                "3 <- 5.5",
                "4 <- 2.0",
                "5 <- 6.4",
                "6 <- 6.0",
                "7 <- 5.4",
                "8 <- 5.9",
                "9 <- 6.0"
            ]
        },
        "Step 7": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.003,
                0.003,
                60.0,
                0.003,
                0.002,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 2.0",
                "2 <- 7.1",
                "3 <- 2.0",
                "4 <- 4.0",
                "5 <- 6.4",
                "6 <- 5.5",
                "7 <- 7.9",
                "8 <- 7.1",
                "9 <- 7.1"
            ]
        },
        "Step 8": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.003,
                0.002,
                60.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 3.2",
                "2 <- 5.5",
                "3 <- 5.0",
                "4 <- 5.4",
                "5 <- 6.0",
                "6 <- 6.1",
                "7 <- 6.0",
                "8 <- 7.1",
                "9 <- 8.4"
            ]
        },
        "Step 9": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24"
            ]
        },
        "Input": "1 1 3 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "3": {
        "puzzle": "1 1 1 8",
        "Step 0": {
            "steps": [
                "8 - 1 = 7 (left: 1 1 7)",
                "1 * 1 = 1 (left: 1 1 8)",
                "8 / 1 = 8 (left: 1 1 8)",
                "8 / 1 = 8 (left: 1 1 8)",
                "8 - 1 = 7 (left: 1 1 7)",
                "8 / 1 = 8 (left: 1 1 8)",
                "8 / 1 = 8 (left: 1 1 8)",
                "8 - 1 = 7 (left: 1 1 7)",
                "1 * 1 = 1 (left: 1 1 ",
                "8 - 1 = 7 (left: 1 1 7)"
            ],
            "Evaluation": [
                2.001,
                1.001,
                1.001,
                1.001,
                2.001,
                1.001,
                1.001,
                2.001,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.0",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 0.3",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- 0.9",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 8)",
                "8 / 1 = 8 (left: 1 1 8)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7)",
                "8 - 1 = 7 (left: 1 1 7)",
                "8 / 1 = 8 (left: 1 1 8)",
                "8 / 1 = 8 (left: 1 1 8) || Input: 5 5 10",
                "8 - 1 = 7 (left: 1 1 7)",
                "1 * 1 = 1 (left: 1 1 ",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6)",
                "8 / 1 = 8 (left: 1 1 8)"
            ],
            "Evaluation": [
                1.001,
                1.001,
                20.0,
                2.001,
                1.001,
                0.003,
                2.001,
                0.003,
                40.0,
                1.001
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.2",
                "2 <- 0.4",
                "3 <- 1.8",
                "4 <- 1.8",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 1.8",
                "8 <- 1.2",
                "9 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "8 - 1 = 7 (left: 1 1 7) || 1 * 1 = 1 (left: 1 7)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 / 1 = 8 (left: 1 1 8)",
                "8 - 1 = 7 (left: 1 1 7)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7)"
            ],
            "Evaluation": [
                20.0,
                0.001,
                20.0,
                0.003,
                0.003,
                1.001,
                2.001,
                0.002,
                0.003,
                20.0
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 0.4",
                "2 <- 2.0",
                "3 <- 0.7",
                "4 <- 2.0",
                "5 <- 1.8",
                "6 <- 2.0",
                "7 <- 2.2",
                "8 <- 1.2",
                "9 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 1 + 7 = 8 (left: 8)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7)",
                "8 - 1 = 7 (left: 1 1 7) || 1 * 1 = 1 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6)",
                "8 - 1 = 7 (left: 1 1 7) || 1 * 1 = 1 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 1 * 1 = 1 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "8 / 1 = 8 (left: 1 1 8)"
            ],
            "Evaluation": [
                0.002,
                20.0,
                0.001,
                40.0,
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.2",
                "3 <- 2.2",
                "4 <- 3.3",
                "5 <- 1.8",
                "6 <- 1.3",
                "7 <- 3.1",
                "8 <- 0.0",
                "9 <- 2.9"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 8)",
                "8 / 1 = 8 (left: 1 1 8)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)"
            ],
            "Evaluation": [
                1.001,
                1.001,
                0.001,
                0.003,
                0.003,
                0.003,
                40.0,
                0.003,
                40.0,
                0.001
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 4.6",
                "2 <- 4.8",
                "3 <- 1.8",
                "4 <- 4.6",
                "5 <- 2.2",
                "6 <- 4.8",
                "7 <- 2.0",
                "8 <- 2.2",
                "9 <- 3.1"
            ]
        },
        "Step 5": {
            "steps": [
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 1 * 1 = 1 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.001,
                0.003,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 4.6",
                "2 <- 3.3",
                "3 <- 4.8",
                "4 <- 3.1",
                "5 <- 2.9",
                "6 <- 4.6",
                "7 <- 1.8",
                "8 <- 3.3",
                "9 <- 2.9"
            ]
        },
        "Step 6": {
            "steps": [
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 1 + 7 = 8 (left: 8)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.001,
                0.001,
                0.003,
                0.002,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 4.8",
                "2 <- 3.1",
                "3 <- 4.6",
                "4 <- 2.9",
                "5 <- 4.6",
                "6 <- 1.8",
                "7 <- 1.8",
                "8 <- 2.9",
                "9 <- 1.8"
            ]
        },
        "Step 7": {
            "steps": [
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 1 + 7 = 8 (left: 8)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.001,
                0.003,
                0.001,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 4.8",
                "2 <- 4.8",
                "3 <- 2.9",
                "4 <- 2.9",
                "5 <- 1.8",
                "6 <- 4.8",
                "7 <- 4.8",
                "8 <- 4.6",
                "9 <- 3.3"
            ]
        },
        "Step 8": {
            "steps": [
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.003,
                0.001,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.8",
                "1 <- 4.8",
                "2 <- 4.8",
                "3 <- 2.9",
                "4 <- 2.2",
                "5 <- 4.6",
                "6 <- 2.2",
                "7 <- 3.3",
                "8 <- 2.5",
                "9 <- 2.9"
            ]
        },
        "Step 9": {
            "steps": [
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "8 / 1 = 8 (left: 1 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)"
            ]
        },
        "Input": "1 1 1 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "4": {
        "puzzle": "6 6 6 6",
        "Step 0": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36)",
                "6 / 6 = 1 (left: 1 6 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 * 6 = 36 (left: 6 6 36)"
            ],
            "Evaluation": [
                41.0,
                41.0,
                20.002,
                20.002,
                41.0,
                20.002,
                20.002,
                41.0,
                41.0,
                41.0
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.4",
                "2 <- 0.7",
                "3 <- 0.7",
                "4 <- 0.9",
                "5 <- 0.8",
                "6 <- 0.8",
                "7 <- 0.6",
                "8 <- INIT",
                "9 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "6 - 6 = 0 (left: 0 6 6) || 6 * 0 = 0 (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || Input: 3 5 7 15",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36)",
                "6 - 6 = 0 (left: 0 6 6) || Input: 3 3 6",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6)"
            ],
            "Evaluation": [
                20.002,
                20.002,
                20.002,
                60.0,
                20.002,
                0.003,
                60.0,
                0.003,
                41.0,
                20.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 1.6",
                "2 <- 1.3",
                "3 <- 1.1",
                "4 <- 0.4",
                "5 <- 1.6",
                "6 <- 0.2",
                "7 <- 0.0",
                "8 <- 0.3",
                "9 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 + 6 = 12 (left: 12 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "6 - 6 = 0 (left: 0 6 6) || Input: 3 3 6",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36)",
                "6 - 6 = 0 (left: 0 6 6) || Input: 3 3 6",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36)"
            ],
            "Evaluation": [
                0.003,
                40.0,
                40.0,
                0.002,
                20.002,
                40.0,
                0.003,
                40.001,
                0.003,
                40.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 2.1",
                "2 <- 0.8",
                "3 <- 2.5",
                "4 <- 1.6",
                "5 <- 0.4",
                "6 <- 1.3",
                "7 <- 2.1",
                "8 <- 0.0",
                "9 <- 2.7"
            ]
        },
        "Step 3": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 + 6 = 12 (left: 12 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || Input: 3 5 7 15",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 - 0 = 36 (left: 36)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                0.003,
                40.0,
                0.003,
                0.003,
                0.003,
                60.0,
                40.0
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 3.8",
                "2 <- 2.5",
                "3 <- 0.4",
                "4 <- INIT",
                "5 <- 2.2",
                "6 <- 1.6",
                "7 <- 0.1",
                "8 <- 3.8",
                "9 <- 2.7"
            ]
        },
        "Step 4": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 + 6 = 12 (left: 12 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "6 / 6 = 1 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 - 0 = 36 (left: 36)"
            ],
            "Evaluation": [
                0.003,
                40.0,
                0.003,
                60.0,
                20.002,
                0.003,
                0.003,
                22.0,
                0.003,
                40.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.0",
                "2 <- 3.9",
                "3 <- 4.4",
                "4 <- 1.6",
                "5 <- 2.9",
                "6 <- 2.2",
                "7 <- 4.9",
                "8 <- 4.1",
                "9 <- 3.9"
            ]
        },
        "Step 5": {
            "steps": [
                "6 / 6 = 1 (left: 1 6 6)",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 0 = 0 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 - 0 = 36 (left: 36) || 36 / 2 = 18",
                "6 - 6 = 0 (left: 0 6 6) || Input: 3 3 6",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 - 0 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 - 0 = 36 (left: 36) || 36 / 2 = 18"
            ],
            "Evaluation": [
                41.0,
                20.002,
                0.003,
                0.003,
                40.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 2.9",
                "2 <- 1.8",
                "3 <- 2.7",
                "4 <- 5.1",
                "5 <- 3.9",
                "6 <- 4.9",
                "7 <- 5.4",
                "8 <- 5.0",
                "9 <- 1.9"
            ]
        },
        "Step 6": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 0 / 36 = 0 (left: 36)",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 0 = 0 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 - 0 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 - 0 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                40.0,
                0.003,
                0.003,
                0.003,
                0.003,
                3.0,
                20.002
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 2.1",
                "2 <- 5.1",
                "3 <- 4.1",
                "4 <- 5.1",
                "5 <- 5.4",
                "6 <- 3.8",
                "7 <- 1.3",
                "8 <- 4.7",
                "9 <- 5.4"
            ]
        },
        "Step 7": {
            "steps": [
                "6 / 6 = 1 (left: 1 6 6) || 1 + 6 = 7 (left: 6 6 7)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 0 = 0 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 0 = 0 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "6 / 6 = 1 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6) || 5 - 6 = -1 (left: -1 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                1.001,
                0.003
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 2.7",
                "2 <- 2.9",
                "3 <- 2.2",
                "4 <- 6.3",
                "5 <- 5.1",
                "6 <- 6.3",
                "7 <- 0.6",
                "8 <- 3.8",
                "9 <- 6.3"
            ]
        },
        "Step 8": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 - 0 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 0 / 36 = 0 (left: 36) || 36 / 2 = 18",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 0 = 0 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 0 / 36 = 0 (left: 36) || 36 / 2 = 18",
                "6 - 6 = 0 (left: 0 6 6) || Input: 3 3 6",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 0 / 36 = 0 (left: 36) || 36 / 2 = 18"
            ],
            "Evaluation": [
                40.0,
                40.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 8.0",
                "1 <- 0.8",
                "2 <- 1.0",
                "3 <- 5.4",
                "4 <- 4.3",
                "5 <- 8.0",
                "6 <- 5.4",
                "7 <- 6.3",
                "8 <- 4.4",
                "9 <- 0.3"
            ]
        },
        "Step 9": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6)",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 0 = 0 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 0 / 36 = 0 (left: 36) || 36 / 2 = 18",
                "6 - 6 = 0 (left: 0 6 6) || Input: 3 3 6",
                "6 - 6 = 0 (left: 0 6 6) || 3 + 3 = 6 (left: 6 6)"
            ]
        },
        "Input": "6 6 6 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "5": {
        "puzzle": "1 1 2 12",
        "Step 0": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 12)",
                "1 + 1 = 2 (left: 2 2 12)",
                "12 / 2 = 6 (left: 1 2 6)",
                "12 / 2 = 6 (left: 1 2 6)",
                "2 * 1 = 2 (left: 2 2 12)",
                "12 / 2 = 6 (left: 1 2 6)",
                "12 / 2 = 6 (left: 1 2 6)",
                "2 * 1 = 2 (left: 2 2 12)",
                "2 * 1 = 2 (left: 2 2 12)",
                "2 * 1 = 2 (left: 2 2 12)"
            ],
            "Evaluation": [
                2.001,
                2.001,
                1.002,
                1.002,
                2.001,
                1.002,
                1.002,
                2.001,
                2.001,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.7",
                "5 <- 0.8",
                "6 <- 0.1",
                "7 <- 0.8",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 12)",
                "12 / 2 = 6 (left: 1 2 6)",
                "12 / 2 = 6 (left: 1 2 6)",
                "2 * 1 = 2 (left: 2 2 12)",
                "2 * 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10)",
                "2 * 1 = 2 (left: 2 2 12) || Input: 1 4 4",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 12)",
                "2 * 1 = 2 (left: 2 2 12) || 12 * 2 = 24 (left: 2 24)",
                "2 * 1 = 2 (left: 2 2 12)",
                "12 / 2 = 6 (left: 1 2 6)"
            ],
            "Evaluation": [
                2.001,
                1.002,
                1.002,
                2.001,
                3.0,
                0.003,
                0.002,
                0.003,
                2.001,
                1.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.8",
                "2 <- 0.9",
                "3 <- INIT",
                "4 <- 1.4",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 1.8"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 12) || 2 * 2 = 4 (left: 4 12)",
                "2 * 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10)",
                "2 * 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10)",
                "2 * 1 = 2 (left: 2 2 12)",
                "2 * 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10) || 2 + 10 = 12 (left: 12)",
                "12 / 2 = 6 (left: 1 2 6)",
                "2 * 1 = 2 (left: 2 2 12)",
                "2 * 1 = 2 (left: 2 2 12)",
                "2 * 1 = 2 (left: 2 2 12)",
                "2 * 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10)"
            ],
            "Evaluation": [
                0.003,
                3.0,
                3.0,
                2.001,
                0.003,
                1.002,
                2.001,
                2.001,
                2.001,
                3.0
            ],
            "Resampling": [
                "0 <- 2.7",
                "1 <- 1.4",
                "2 <- 1.2",
                "3 <- INIT",
                "4 <- 0.1",
                "5 <- 2.6",
                "6 <- 1.8",
                "7 <- 2.8",
                "8 <- 2.9",
                "9 <- 1.0"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 12) || 2 * 2 = 4 (left: 4 12)",
                "2 * 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10) || 2 + 10 = 12 (left: 12)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3)",
                "2 * 1 = 2 (left: 2 2 12)",
                "1 + 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10)",
                "2 * 1 = 2 (left: 2 2 12) || Input: 1 4 4",
                "2 * 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 12)",
                "2 * 1 = 2 (left: 2 2 12) || 12 * 2 = 24 (left: 2 24)",
                "2 * 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10) || 10 - 2 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                21.0,
                2.001,
                3.0,
                0.003,
                0.002,
                0.003,
                0.002,
                3.0
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 3.2",
                "2 <- 2.2",
                "3 <- 3.2",
                "4 <- 3.2",
                "5 <- 0.1",
                "6 <- INIT",
                "7 <- 3.3",
                "8 <- 3.2",
                "9 <- 1.0"
            ]
        },
        "Step 4": {
            "steps": [
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 - 1 = 2 (left: 2)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "2 * 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10) || 2 + 10 = 12 (left: 12)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 1 * 3 = 3 (left: 3)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "1 + 1 = 2 (left: 2 2 12) || Input: 1 4 4",
                "2 * 1 = 2 (left: 2 2 12)",
                "2 * 1 = 2 (left: 2 2 12) || 12 * 2 = 24 (left: 2 24)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 1 * 3 = 3 (left: 3)",
                "1 + 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10)"
            ],
            "Evaluation": [
                0.001,
                0.0,
                0.003,
                0.0,
                0.0,
                0.003,
                2.001,
                0.003,
                0.0,
                3.0
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 2.9",
                "2 <- 0.3",
                "3 <- 2.6",
                "4 <- INIT",
                "5 <- 3.2",
                "6 <- 2.2",
                "7 <- INIT",
                "8 <- 0.0",
                "9 <- 3.2"
            ]
        },
        "Step 5": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 12) || 2 * 2 = 4 (left: 4 12)",
                "2 * 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10) || 2 + 10 = 12 (left: 12)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3)",
                "2 * 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 12)",
                "12 / 2 = 6 (left: 1 2 6)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "2 * 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10) || 10 - 2 = 8 (left: 8)",
                "2 * 1 = 2 (left: 2 2 12)",
                "2 * 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 12)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                21.0,
                0.002,
                1.002,
                0.0,
                0.002,
                2.001,
                0.002,
                0.0
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 5.2",
                "2 <- INIT",
                "3 <- 0.8",
                "4 <- 5.2",
                "5 <- 0.1",
                "6 <- 5.4",
                "7 <- 3.2",
                "8 <- INIT",
                "9 <- 5.4"
            ]
        },
        "Step 6": {
            "steps": [
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 - 1 = 2 (left: 2)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "12 / 2 = 6 (left: 1 2 6)",
                "2 * 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 12)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "1 + 1 = 2 (left: 2 2 12) || Input: 1 4 4",
                "12 / 2 = 6 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 1 * 3 = 3 (left: 3)",
                "2 * 1 = 2 (left: 2 2 12)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3)"
            ],
            "Evaluation": [
                0.001,
                0.0,
                1.002,
                0.002,
                0.0,
                0.003,
                60.0,
                0.0,
                2.001,
                21.0
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 6.2",
                "2 <- 6.6",
                "3 <- 5.2",
                "4 <- 5.2",
                "5 <- 3.2",
                "6 <- 6.6",
                "7 <- 6.6",
                "8 <- 6.6",
                "9 <- 3.2"
            ]
        },
        "Step 7": {
            "steps": [
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 - 1 = 2 (left: 2)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3)",
                "12 / 2 = 6 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 1 * 3 = 3 (left: 3)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "12 / 2 = 6 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 / 2 = 6 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 / 2 = 6 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)"
            ],
            "Evaluation": [
                0.001,
                21.0,
                0.002,
                0.0,
                0.0,
                0.0,
                0.002,
                0.002,
                0.002,
                0.0
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 1.8",
                "2 <- 5.2",
                "3 <- 6.6",
                "4 <- 6.6",
                "5 <- 6.8",
                "6 <- 6.6",
                "7 <- 1.3",
                "8 <- 6.6",
                "9 <- 3.2"
            ]
        },
        "Step 8": {
            "steps": [
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 - 1 = 2 (left: 2)",
                "2 * 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "12 / 2 = 6 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 / 2 = 6 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "2 * 1 = 2 (left: 2 2 12) || Input: 1 4 4",
                "12 / 2 = 6 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "2 * 1 = 2 (left: 2 2 12) || 12 * 2 = 24 (left: 2 24)",
                "12 / 2 = 6 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)"
            ],
            "Evaluation": [
                0.001,
                3.0,
                0.0,
                0.002,
                0.002,
                0.003,
                0.002,
                0.003,
                0.002,
                0.0
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- INIT",
                "2 <- 2.1",
                "3 <- 5.2",
                "4 <- 7.1",
                "5 <- 3.4",
                "6 <- 5.2",
                "7 <- 6.6",
                "8 <- 6.6",
                "9 <- 5.2"
            ]
        },
        "Step 9": {
            "steps": [
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 - 1 = 2 (left: 2)",
                "12 / 2 = 6 (left: 1 2 6)",
                "2 * 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10) || 2 + 10 = 12 (left: 12)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 1 * 3 = 3 (left: 3)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "1 + 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10) || 2 + 10 = 12 (left: 12)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 1 * 3 = 3 (left: 3)",
                "12 / 2 = 6 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 / 2 = 6 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)"
            ]
        },
        "Input": "1 1 2 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "6": {
        "puzzle": "1 2 2 6",
        "Step 0": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6)",
                "2 * 2 = 4 (left: 4 2 6)",
                "6 - 2 = 4 (left: 1 2 4)",
                "6 - 2 = 4 (left: 1 2 4)",
                "2 / 1 = 2 (left: 2 2 6)",
                "6 - 2 = 4 (left: 1 2 4)",
                "6 - 2 = 4 (left: 1 2 4)",
                "2 / 1 = 2 (left: 2 2 6)",
                "2 / 1 = 2 (left: 2 2 6)",
                "2 / 1 = 2 (left: 2 2 6)"
            ],
            "Evaluation": [
                60.0,
                1.002,
                2.001,
                2.001,
                60.0,
                2.001,
                2.001,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 0.4",
                "2 <- INIT",
                "3 <- 0.0",
                "4 <- 0.4",
                "5 <- 0.0",
                "6 <- 0.0",
                "7 <- 0.8",
                "8 <- 0.7",
                "9 <- 0.7"
            ]
        },
        "Step 1": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)",
                "2 / 1 = 2 (left: 2 2 6) || 6 + 6 = 12 (left: 8",
                "6 - 2 = 4 (left: 1 2 4)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:"
            ],
            "Evaluation": [
                0.003,
                0.002,
                2.001,
                0.002,
                0.003,
                0.003,
                0.002,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- INIT",
                "2 <- 0.9",
                "3 <- 0.8",
                "4 <- 0.8",
                "5 <- 0.9",
                "6 <- 0.9",
                "7 <- 0.9",
                "8 <- 0.4",
                "9 <- 0.9"
            ]
        },
        "Step 2": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)",
                "6 - 2 = 4 (left: 1 2 4)",
                "2 / 1 = 2 (left: 2 2 6) || 6 + 6 = 12 (left: 8",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:"
            ],
            "Evaluation": [
                0.003,
                2.001,
                0.002,
                0.002,
                0.003,
                0.003,
                0.002,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.0",
                "2 <- 0.4",
                "3 <- 0.0",
                "4 <- 1.2",
                "5 <- 0.4",
                "6 <- 0.0",
                "7 <- 0.7",
                "8 <- 0.4",
                "9 <- 0.4"
            ]
        },
        "Step 3": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)",
                "2 / 1 = 2 (left: 2 2 6) || 6 + 6 = 12 (left: 8",
                "2 / 1 = 2 (left: 2 2 6) || 6 + 6 = 12 (left: 8",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "6 - 2 = 4 (left: 1 2 4) || Input: 3 6 9",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.002,
                0.003,
                0.003,
                0.002,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.4",
                "2 <- 0.9",
                "3 <- 0.0",
                "4 <- 0.7",
                "5 <- 0.0",
                "6 <- 0.9",
                "7 <- 0.8",
                "8 <- 0.8",
                "9 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "2 * 2 = 4 (left: 4 2 6)",
                "2 / 1 = 2 (left: 2 2 6) || 6 + 6 = 12 (left: 8",
                "2 / 1 = 2 (left: 2 2 6) || 6 + 6 = 12 (left: 8",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "6 - 2 = 4 (left: 1 2 4)"
            ],
            "Evaluation": [
                1.002,
                0.002,
                0.002,
                0.002,
                0.003,
                0.003,
                0.002,
                0.002,
                0.002,
                2.001
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 0.7",
                "2 <- 0.7",
                "3 <- 0.8",
                "4 <- 0.9",
                "5 <- 0.4",
                "6 <- 0.0",
                "7 <- 0.4",
                "8 <- 0.8",
                "9 <- 4.9"
            ]
        },
        "Step 5": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)",
                "2 / 1 = 2 (left: 2 2 6) || 6 + 6 = 12 (left: 8",
                "2 / 1 = 2 (left: 2 2 6) || 6 + 6 = 12 (left: 8",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "6 - 2 = 4 (left: 1 2 4) || Input: 3 6 9"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.002,
                0.003,
                0.003,
                0.002,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 0.4",
                "2 <- 0.8",
                "3 <- 0.7",
                "4 <- 0.9",
                "5 <- 0.0",
                "6 <- 0.8",
                "7 <- 0.9",
                "8 <- 0.4",
                "9 <- 0.6"
            ]
        },
        "Step 6": {
            "steps": [
                "2 * 2 = 4 (left: 4 2 6) || 4 * 2 = 8 (left: 8 6)",
                "2 / 1 = 2 (left: 2 2 6) || 6 + 6 = 12 (left: 8",
                "2 / 1 = 2 (left: 2 2 6) || 6 + 6 = 12 (left: 8",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "6 - 2 = 4 (left: 1 2 4) || Input: 3 6 9"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.002,
                0.003,
                0.003,
                0.002,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.9",
                "1 <- 0.8",
                "2 <- 0.0",
                "3 <- 0.4",
                "4 <- 0.9",
                "5 <- 0.7",
                "6 <- 0.4",
                "7 <- 0.8",
                "8 <- 0.9",
                "9 <- 0.0"
            ]
        },
        "Step 7": {
            "steps": [
                "6 - 2 = 4 (left: 1 2 4) || 1 * 2 = 2 (left: 2)",
                "2 / 1 = 2 (left: 2 2 6) || 6 + 6 = 12 (left: 8",
                "2 / 1 = 2 (left: 2 2 6) || 6 + 6 = 12 (left: 8",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.002,
                0.002,
                0.003,
                0.003,
                0.002,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 0.9",
                "2 <- 0.0",
                "3 <- 0.7",
                "4 <- 4.0",
                "5 <- 0.9",
                "6 <- 0.0",
                "7 <- 0.4",
                "8 <- 0.7",
                "9 <- 0.4"
            ]
        },
        "Step 8": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)",
                "2 / 1 = 2 (left: 2 2 6) || 6 + 6 = 12 (left: 8",
                "2 / 1 = 2 (left: 2 2 6) || 6 + 6 = 12 (left: 8",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 * 2 = 4 (left: 4 2 6) || 4 / 2 = 2 (left: 2 6)",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.002,
                1.001,
                0.003,
                0.002,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 0.8",
                "2 <- 0.0",
                "3 <- 0.4",
                "4 <- 0.7",
                "5 <- 0.9",
                "6 <- 0.0",
                "7 <- 0.8",
                "8 <- 0.7",
                "9 <- 0.7"
            ]
        },
        "Step 9": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)",
                "2 / 1 = 2 (left: 2 2 6) || 6 + 6 = 12 (left: 8",
                "2 / 1 = 2 (left: 2 2 6) || 6 + 6 = 12 (left: 8",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || Possible next steps:"
            ]
        },
        "Input": "1 2 2 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "7": {
        "puzzle": "1 1 10 12",
        "Step 0": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 10 12)",
                "1 + 10 = 11 (left: 11 10 12)",
                "1 + 10 = 11 (left: 11 10 12)",
                "10 + 1 = 11 (left: 1 11 12)",
                "1 + 10 = 11 (left: 11 10 12)",
                "1 + 10 = 11 (left: 11 10 12)",
                "10 + 1 = 11 (left: 1 11 12)",
                "12 - 10 = 2 (left: 1 2 ",
                "10 + 1 = 11 (left: 1 11 12)"
            ],
            "Evaluation": [
                20.002,
                1.002,
                3.0,
                3.0,
                20.002,
                3.0,
                3.0,
                20.002,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.9",
                "4 <- INIT",
                "5 <- 0.7",
                "6 <- INIT",
                "7 <- 0.7",
                "8 <- INIT",
                "9 <- 0.7"
            ]
        },
        "Step 1": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "1 + 10 = 11 (left: 11 10 12)",
                "1 + 10 = 11 (left: 11 10 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "1 + 10 = 11 (left: 11 10 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "10 + 1 = 11 (left: 1 11 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "10 + 1 = 11 (left: 1 11 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.002,
                3.0,
                3.0,
                0.002,
                3.0,
                20.002,
                20.002,
                0.002,
                20.002,
                20.002
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 1.9",
                "2 <- 1.6",
                "3 <- INIT",
                "4 <- 1.9",
                "5 <- 0.7",
                "6 <- 1.6",
                "7 <- 1.9",
                "8 <- 1.2",
                "9 <- 1.6"
            ]
        },
        "Step 2": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "10 + 1 = 11 (left: 1 11 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 + 10 = 11 (left: 11 10 12) || 10 + 12 = 22 (left: 11 22)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                20.002,
                20.002,
                0.003,
                20.002,
                0.002,
                0.003,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 2.5",
                "2 <- 1.9",
                "3 <- 1.8",
                "4 <- 2.3",
                "5 <- 1.9",
                "6 <- 1.9",
                "7 <- 2.9",
                "8 <- 2.0",
                "9 <- 2.5"
            ]
        },
        "Step 3": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12) || 12 - 10 = 2 (left: 2)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.002,
                20.002,
                0.003,
                0.003,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 1.5",
                "2 <- 3.4",
                "3 <- 1.9",
                "4 <- 2.9",
                "5 <- 0.4",
                "6 <- 1.8",
                "7 <- 1.6",
                "8 <- 0.4",
                "9 <- 3.4"
            ]
        },
        "Step 4": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                20.002,
                0.002,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.5",
                "1 <- 1.8",
                "2 <- 0.4",
                "3 <- 4.5",
                "4 <- 2.9",
                "5 <- 2.3",
                "6 <- 2.3",
                "7 <- 2.5",
                "8 <- 2.9",
                "9 <- 2.2"
            ]
        },
        "Step 5": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                20.002,
                20.002,
                0.003,
                0.003,
                20.002,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 5.1",
                "2 <- 2.5",
                "3 <- 1.9",
                "4 <- 3.4",
                "5 <- 2.9",
                "6 <- 2.5",
                "7 <- 0.4",
                "8 <- 2.9",
                "9 <- 0.7"
            ]
        },
        "Step 6": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 4.5",
                "2 <- 2.3",
                "3 <- 6.9",
                "4 <- 0.9",
                "5 <- 5.5",
                "6 <- 4.5",
                "7 <- 4.5",
                "8 <- 0.4",
                "9 <- 5.1"
            ]
        },
        "Step 7": {
            "steps": [
                "1 + 10 = 11 (left: 11 10 12) || 11 / 10 = 1.1 (left: 1.1 10 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                2.001,
                0.003,
                20.002,
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.5",
                "1 <- 7.2",
                "2 <- 2.2",
                "3 <- 3.4",
                "4 <- 2.9",
                "5 <- 7.4",
                "6 <- 1.6",
                "7 <- 5.1",
                "8 <- 7.2",
                "9 <- 2.9"
            ]
        },
        "Step 8": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 7.2",
                "2 <- 5.2",
                "3 <- 5.2",
                "4 <- 2.2",
                "5 <- 7.2",
                "6 <- 1.6",
                "7 <- 7.2",
                "8 <- 7.2",
                "9 <- 0.4"
            ]
        },
        "Step 9": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ]
        },
        "Input": "1 1 10 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "8": {
        "puzzle": "2 2 10 10",
        "Step 0": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10)",
                "2 * 2 = 4 (left: 4 10 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 / 2 = 5 (left: 2 5 10)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                1.002,
                1.002,
                0.003,
                1.002,
                1.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.6",
                "4 <- 0.1",
                "5 <- INIT",
                "6 <- 0.6",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10) || 10 / 2 = 5 (left: 5 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10) || 10 / 2 = 5 (left: 5 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 - 2 = 8 (left: 2 8 10)"
            ],
            "Evaluation": [
                2.001,
                1.002,
                1.002,
                0.001,
                2.001,
                1.002,
                0.001,
                0.003,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- 0.1",
                "4 <- INIT",
                "5 <- 0.3",
                "6 <- 1.4",
                "7 <- 0.1",
                "8 <- INIT",
                "9 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10) || 10 - 2 = 8 (left: 8 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 10 - 2.5 = 7.5 (left: 7.5 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2",
                "10 / 2 = 5 (left: 2 5 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)"
            ],
            "Evaluation": [
                2.001,
                1.002,
                2.001,
                2.001,
                1.002,
                1.001,
                2.001,
                0.003,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 2.5",
                "4 <- 0.1",
                "5 <- 0.1",
                "6 <- 0.1",
                "7 <- 0.3",
                "8 <- 2.6",
                "9 <- 2.0"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10) || 10 - 2 = 8 (left: 8 10) || 8 * 10 = 80 (left: 80)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 - 2 = 8 (left: 2 8 10) || 10 / 2 = 5 (left: 5 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 10 - 2.5 = 7.5 (left: 7.5 10) || 10 - 7.5 = 2.5 (left: 2.5 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 2.5 * 10 = 25 (left: 10 25)"
            ],
            "Evaluation": [
                20.002,
                1.002,
                1.002,
                0.002,
                2.001,
                2.001,
                2.001,
                0.001,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 3.0",
                "2 <- 3.0",
                "3 <- 3.0",
                "4 <- 0.1",
                "5 <- 3.0",
                "6 <- 2.5",
                "7 <- INIT",
                "8 <- 0.1",
                "9 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 - 2 = 8 (left: 2 8 10) || 10 - 2 = 8 (left: 8 10) || 8 * 10 = 80 (left: 80)",
                "10 / 2 = 5 (left: 2 5 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)"
            ],
            "Evaluation": [
                2.001,
                2.001,
                2.001,
                2.001,
                2.001,
                2.001,
                0.002,
                0.003,
                2.001,
                2.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 4.9",
                "2 <- 0.1",
                "3 <- INIT",
                "4 <- 4.8",
                "5 <- 3.0",
                "6 <- 4.9",
                "7 <- 4.4",
                "8 <- 2.1",
                "9 <- 3.4"
            ]
        },
        "Step 5": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 2.5 * 10 = 25 (left: 10 25)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 10 - 2.5 = 7.5 (left: 7.5 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 10 / ",
                "10 - 2 = 8 (left: 2 8 10) || 10 / 2 = 5 (left: 5 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 2.5 * 10 = 25 (left: 10 25)"
            ],
            "Evaluation": [
                2.001,
                0.003,
                2.001,
                0.003,
                1.002,
                2.001,
                2.001,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 2.3",
                "3 <- 4.9",
                "4 <- 3.0",
                "5 <- 0.1",
                "6 <- 3.0",
                "7 <- 1.5",
                "8 <- 3.0",
                "9 <- 2.5"
            ]
        },
        "Step 6": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 10 - 2.5 = 7.5 (left: 7.5 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 - 2 = 8 (left: 2 8 10) || 10 / 2 = 5 (left: 5 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 - 2 = 8 (left: 2 8 10) || 10 - 2 = 8 (left: 8 10) || 8 / 10 = 0.8 (left: 0.8)"
            ],
            "Evaluation": [
                20.002,
                1.002,
                1.002,
                2.001,
                2.001,
                2.001,
                2.001,
                0.001,
                2.001,
                0.002
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 4.9",
                "2 <- 4.9",
                "3 <- 6.8",
                "4 <- 4.0",
                "5 <- 6.0",
                "6 <- 4.4",
                "7 <- 6.5",
                "8 <- 6.0",
                "9 <- 3.2"
            ]
        },
        "Step 7": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60) || 10 / 10 = 1 (left: 1 60)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 2.5 * 10 = 25 (left: 10 25)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 2.5 * 10 = 25 (left: 10 25)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 / 6 = 1.6666666666666667 (left: 1.6666666666666667 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 2.5 * 10 = 25 (left: 10 25)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 10 - 2.5 = 7.5 (left: 7.5 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 10 / ",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 - 2 = 8 (left: 2 8 10) || 10 - 2 = 8 (left: 8 10)"
            ],
            "Evaluation": [
                41.0,
                0.003,
                0.003,
                2.001,
                0.003,
                2.001,
                2.001,
                0.003,
                2.001,
                1.001
            ],
            "Resampling": [
                "0 <- 7.0",
                "1 <- 7.0",
                "2 <- 7.0",
                "3 <- 7.0",
                "4 <- 1.4",
                "5 <- 2.3",
                "6 <- 7.0",
                "7 <- 6.0",
                "8 <- 6.5",
                "9 <- 7.3"
            ]
        },
        "Step 8": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60) || 10 / 10 = 1 (left: 1 60) || 60 / 1 = 60 (left: 60)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60) || 10 / 10 = 1 (left: 1 60) || 60 - 1 = 59 (left: 59)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60) || 10 / 10 = 1 (left: 1 60) || 60 - 1 = 59 (left: 59)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60) || 10 / 10 = 1 (left: 1 60) || 1 * 60 = 60 (left: 60)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 2.5 * 10 = 25 (left: 10 25)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60) || 10 / 10 = 1 (left: 1 60) || 1 * 60 = 60 (left: 60)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 10 - 2.5 = 7.5 (left: 7.5 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 / 6 = 1.6666666666666667 (left: 1.6666666666666667 10 10) || 1.6666666666666667 * "
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                1.002,
                0.003,
                0.003,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 7.6",
                "2 <- 7.0",
                "3 <- 6.0",
                "4 <- 7.5",
                "5 <- 6.0",
                "6 <- 0.1",
                "7 <- 6.0",
                "8 <- 6.0",
                "9 <- 7.0"
            ]
        },
        "Step 9": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 10 / 2.5 = 4 (left: 4 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 10 - 2.5 = 7.5 (left: 7.5 10) || 10 / 7.5 = 1.33333 (left: 1.33333 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60) || 10 / 10 = 1 (left: 1 60) || 60 - 1 = 59 (left: 59)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 2.5 * 10 = 25 (left: 10 25)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60) || 10 / 10 = 1 (left: 1 60) || 60 - 1 = 59 (left: 59)"
            ]
        },
        "Input": "2 2 10 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "9": {
        "puzzle": "1 1 1 12",
        "Step 0": {
            "steps": [
                "12 - 1 = 11 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "12 - 1 = 11 (left: 1 1 11)",
                "12 / 1 = 12 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "12 - 1 = 11 (left: 1 1 11)",
                "12 - 1 = 11 (left: 1 1 11)",
                "12 - 1 = 11 (left: 1 1 11)"
            ],
            "Evaluation": [
                1.002,
                60.0,
                60.0,
                60.0,
                1.002,
                60.0,
                60.0,
                1.002,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.6",
                "2 <- 0.2",
                "3 <- INIT",
                "4 <- 0.2",
                "5 <- INIT",
                "6 <- 0.3",
                "7 <- 0.3",
                "8 <- 0.1",
                "9 <- 0.6"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 - 1 = 11 (left: 1 1 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12) || Input: 0 12",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.002,
                1.002,
                0.002,
                60.0,
                40.0,
                0.003,
                40.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 0.3",
                "2 <- 0.3",
                "3 <- 1.5",
                "4 <- 0.1",
                "5 <- 1.5",
                "6 <- 0.3",
                "7 <- 1.5",
                "8 <- 1.5",
                "9 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12) || Input: 0 12",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                40.0,
                0.002,
                0.002,
                40.0,
                0.003,
                40.0,
                0.002
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- 0.2",
                "4 <- 0.6",
                "5 <- 1.0",
                "6 <- 2.6",
                "7 <- INIT",
                "8 <- 0.6",
                "9 <- 0.5"
            ]
        },
        "Step 3": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 - 1 = 11 (left: 1 1 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.002,
                40.0,
                0.002,
                0.002,
                0.003,
                1.002,
                40.0,
                0.002
            ],
            "Resampling": [
                "0 <- 2.8",
                "1 <- 1.8",
                "2 <- 3.1",
                "3 <- 2.3",
                "4 <- 3.3",
                "5 <- 0.5",
                "6 <- 0.2",
                "7 <- 3.8",
                "8 <- 0.6",
                "9 <- 0.2"
            ]
        },
        "Step 4": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                0.003,
                0.003,
                0.002,
                40.0,
                0.003,
                40.0,
                0.002
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 1.0",
                "2 <- 1.0",
                "3 <- 3.3",
                "4 <- 3.3",
                "5 <- 1.6",
                "6 <- 4.8",
                "7 <- 1.0",
                "8 <- 3.3",
                "9 <- 3.1"
            ]
        },
        "Step 5": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || Input: 0 12",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 4.8",
                "2 <- 1.8",
                "3 <- 3.8",
                "4 <- 1.8",
                "5 <- 1.0",
                "6 <- 3.1",
                "7 <- 3.8",
                "8 <- 3.3",
                "9 <- 4.6"
            ]
        },
        "Step 6": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                40.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 3.1",
                "2 <- 3.3",
                "3 <- INIT",
                "4 <- 0.1",
                "5 <- 0.3",
                "6 <- 4.8",
                "7 <- 3.8",
                "8 <- 0.2",
                "9 <- 6.6"
            ]
        },
        "Step 7": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 - 1 = 11 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                1.002,
                0.002,
                0.002,
                0.003,
                0.003,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 0.3",
                "2 <- 6.6",
                "3 <- 3.8",
                "4 <- 4.6",
                "5 <- 1.5",
                "6 <- 2.3",
                "7 <- 3.8",
                "8 <- 1.0",
                "9 <- 2.8"
            ]
        },
        "Step 8": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 4.8",
                "2 <- 6.6",
                "3 <- 8.8",
                "4 <- 3.3",
                "5 <- 1.0",
                "6 <- 3.3",
                "7 <- 1.5",
                "8 <- 4.8",
                "9 <- 8.8"
            ]
        },
        "Step 9": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || Input: 0 12",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ]
        },
        "Input": "1 1 1 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "10": {
        "puzzle": "1 1 2 8",
        "Step 0": {
            "steps": [
                "1 + 2 = 3 (left: 1 3 8)",
                "1 * 1 = 1 (left: 1 2 8)",
                "2 * 1 = 2 (left: 2 2 8)",
                "2 * 1 = 2 (left: 2 2 8)",
                "1 + 2 = 3 (left: 1 3 8)",
                "2 * 1 = 2 (left: 2 2 8)",
                "2 * 1 = 2 (left: 2 2 8)",
                "1 + 2 = 3 (left: 1 3 8)",
                "8 / 2 = 4 (left: 1 4 ",
                "1 + 2 = 3 (left: 1 3 8)"
            ],
            "Evaluation": [
                60.0,
                22.0,
                1.002,
                1.002,
                60.0,
                1.002,
                1.002,
                60.0,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 0.0",
                "2 <- 0.0",
                "3 <- 0.4",
                "4 <- 0.4",
                "5 <- 0.9",
                "6 <- INIT",
                "7 <- 0.4",
                "8 <- 0.0",
                "9 <- 0.9"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8)",
                "1 + 2 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "1 + 2 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "1 + 2 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "1 + 2 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "1 + 2 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "1 + 2 = 3 (left: 1 3 8)",
                "1 + 2 = 3 (left: 1 3 8) || 1 * 8 = 8 (left: 8)",
                "1 + 2 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "1 + 2 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)"
            ],
            "Evaluation": [
                60.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                60.0,
                0.002,
                0.0,
                0.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.7",
                "2 <- 0.9",
                "3 <- 1.6",
                "4 <- 1.0",
                "5 <- 0.1",
                "6 <- 1.0",
                "7 <- 0.9",
                "8 <- 1.0",
                "9 <- 1.6"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8)",
                "1 + 2 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "1 + 2 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "1 + 2 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 2 8) || 8 - 1 = 7 (left:",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 + 2 = 3 (left: 1 3 8) || 1 * 8 = 8 (left: 8)",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 + 2 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)"
            ],
            "Evaluation": [
                60.0,
                0.0,
                0.0,
                0.0,
                60.0,
                1.0,
                0.002,
                0.002,
                0.002,
                0.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.0",
                "2 <- 0.7",
                "3 <- 2.4",
                "4 <- 0.0",
                "5 <- 1.6",
                "6 <- 2.0",
                "7 <- 0.4",
                "8 <- 1.6",
                "9 <- 1.0"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8)",
                "1 + 2 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "1 + 2 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24",
                "1 + 2 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "1 + 2 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 + 2 = 3 (left: 1 3 8) || 1 * 8 = 8 (left: 8)",
                "1 + 2 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)"
            ],
            "Evaluation": [
                60.0,
                0.0,
                0.0,
                20.002,
                0.0,
                0.0,
                0.002,
                0.002,
                0.0,
                60.0
            ],
            "Resampling": [
                "0 <- 3.9",
                "1 <- 0.4",
                "2 <- 0.7",
                "3 <- 3.9",
                "4 <- 2.4",
                "5 <- 0.1",
                "6 <- INIT",
                "7 <- 2.4",
                "8 <- 0.7",
                "9 <- 1.6"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24",
                "1 + 2 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "1 + 2 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24",
                "1 * 1 = 1 (left: 1 2 8) || 8 - 1 = 7 (left:",
                "1 + 2 = 3 (left: 1 3 8)",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24",
                "1 + 2 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "1 + 2 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)"
            ],
            "Evaluation": [
                20.002,
                0.0,
                0.0,
                20.002,
                20.002,
                1.0,
                60.0,
                20.002,
                0.0,
                0.0
            ],
            "Resampling": [
                "0 <- 3.9",
                "1 <- 4.6",
                "2 <- 0.1",
                "3 <- 3.3",
                "4 <- 1.6",
                "5 <- 4.6",
                "6 <- 4.6",
                "7 <- 3.9",
                "8 <- 0.4",
                "9 <- 4.0"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24",
                "1 + 2 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10)",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24",
                "1 + 2 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "1 + 2 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "1 + 2 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24",
                "1 + 2 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24"
            ],
            "Evaluation": [
                20.002,
                0.0,
                60.0,
                60.0,
                0.0,
                0.0,
                0.0,
                20.002,
                0.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 3.0",
                "2 <- 1.6",
                "3 <- 4.0",
                "4 <- 4.3",
                "5 <- 5.2",
                "6 <- 2.0",
                "7 <- 2.4",
                "8 <- 4.4",
                "9 <- 4.6"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 + 2 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24",
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24",
                "1 + 2 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.0,
                60.0,
                60.0,
                0.001,
                0.002,
                20.002,
                60.0,
                0.0
            ],
            "Resampling": [
                "0 <- 3.9",
                "1 <- 3.9",
                "2 <- 6.3",
                "3 <- 0.9",
                "4 <- 6.4",
                "5 <- 3.0",
                "6 <- 4.3",
                "7 <- 6.1",
                "8 <- 6.1",
                "9 <- 6.4"
            ]
        },
        "Step 7": {
            "steps": [
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (4 * (6 - 2)) * 3 = 24",
                "1 + 2 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (4 * (6 - 2)) * 3 = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (4 * (6 - 2)) * 3 = 24"
            ],
            "Evaluation": [
                20.002,
                20.002,
                60.0,
                0.0,
                60.0,
                60.0,
                60.0,
                20.002,
                20.002,
                60.0
            ],
            "Resampling": [
                "0 <- 6.8",
                "1 <- 4.0",
                "2 <- 7.4",
                "3 <- 0.0",
                "4 <- 2.4",
                "5 <- 7.4",
                "6 <- 7.4",
                "7 <- 2.0",
                "8 <- 3.0",
                "9 <- 6.1"
            ]
        },
        "Step 8": {
            "steps": [
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (4 * (6 - 2)) * 3 = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (4 * (6 - 2)) * 3 = 24 || Input: 3 5 5 7\nSteps:\n5 + 7 = 12 (left: 3 5 12)\n5 * 3 = 15 (left: 15 12)\n15 - 12 = 3 (left: 3)\n3 * 5 = 15 (left: 15)\n15 + 15 = 30 (left: 30)\n30 - 3 = 27 (left: 27)\nAnswer: ((",
                "1 + 2 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (4 * (6 - 2)) * 3 = 24 || Input: 3 5 5 7\nSteps:\n5 + 7 = 12 (left: 3 5 12)\n5 * 3 = 15 (left: 15 12)\n15 - 12 = 3 (left: 3)\n3 * 5 = 15 (left: 15)\n15 + 15 = 30 (left: 30)\n30 - 3 = 27 (left: 27)\nAnswer: ((",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (4 * (6 - 2)) * 3 = 24 || Input: 3 5 5 7\nSteps:\n5 + 7 = 12 (left: 3 5 12)\n5 * 3 = 15 (left: 15 12)\n15 - 12 = 3 (left: 3)\n3 * 5 = 15 (left: 15)\n15 + 15 = 30 (left: 30)\n30 - 3 = 27 (left: 27)\nAnswer: ((",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                0.0,
                20.002,
                60.0,
                60.0,
                0.002,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 8.2",
                "1 <- 6.3",
                "2 <- 8.5",
                "3 <- 6.1",
                "4 <- 8.4",
                "5 <- 7.5",
                "6 <- 6.8",
                "7 <- 7.2",
                "8 <- 8.1",
                "9 <- 8.1"
            ]
        },
        "Step 9": {
            "steps": [
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (4 * (6 - 2)) * 3 = 24 || Input: 3 5 5 7\nSteps:\n5 + 7 = 12 (left: 3 5 12)\n5 * 3 = 15 (left: 15 12)\n15 - 12 = 3 (left: 3)\n3 * 5 = 15 (left: 15)\n15 + 15 = 30 (left: 30)\n30 - 3 = 27 (left: 27)\nAnswer: (( || 5 + 7) * (5 - 3)) - 3 = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (4 * (6 - 2)) * 3 = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (4 * (6 - 2)) * 3 = 24 || Input: 3 5 5 7\nSteps:\n5 + 7 = 12 (left: 3 5 12)\n5 * 3 = 15 (left: 15 12)\n15 - 12 = 3 (left: 3)\n3 * 5 = 15 (left: 15)\n15 + 15 = 30 (left: 30)\n30 - 3 = 27 (left: 27)\nAnswer: (( || 5 + 7) * (5 - 3)) - 3 = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (4 * (6 - 2)) * 3 = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (4 * (6 - 2)) * 3 = 24 || Input: 3 5 5 7\nSteps:\n5 + 7 = 12 (left: 3 5 12)\n5 * 3 = 15 (left: 15 12)\n15 - 12 = 3 (left: 3)\n3 * 5 = 15 (left: 15)\n15 + 15 = 30 (left: 30)\n30 - 3 = 27 (left: 27)\nAnswer: ((",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (4 * (6 - 2)) * 3 = 24",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 2) * (1 + 8) = 24 || Input: 3 6 6 9\nSteps:\n6 - 3 = 3 (left: 3 6 9)\n9 - 6 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((6 - 3) * (9 - 6)) - 3 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (4 * (6 - 2)) * 3 = 24"
            ]
        },
        "Input": "1 1 2 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "11": {
        "puzzle": "1 1 4 8",
        "Step 0": {
            "steps": [
                "8 - 4 = 4 (left: 1 4 4)",
                "1 * 1 = 1 (left: 1 4 8)",
                "4 * 1 = 4 (left: 4 4 8)",
                "4 * 1 = 4 (left: 4 4 8)",
                "8 - 4 = 4 (left: 1 4 4)",
                "4 * 1 = 4 (left: 4 4 8)",
                "4 * 1 = 4 (left: 4 4 8)",
                "8 - 4 = 4 (left: 1 4 4)",
                "8 / 4 = 2 (left: 1 2 ",
                "8 - 4 = 4 (left: 1 4 4)"
            ],
            "Evaluation": [
                2.001,
                0.003,
                22.0,
                22.0,
                2.001,
                22.0,
                22.0,
                2.001,
                0.002,
                2.001
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 0.3",
                "2 <- 0.2",
                "3 <- 0.2",
                "4 <- INIT",
                "5 <- 0.6",
                "6 <- 0.6",
                "7 <- 0.2",
                "8 <- 0.6",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "8 - 4 = 4 (left: 1 4 4) || 4 / 1 = 4 (left: 4 4)",
                "4 * 1 = 4 (left: 4 4 8) || 8 - 4 = 4 (left: 4 8)",
                "4 * 1 = 4 (left: 4 4 8) || 8 - 4 = 4 (left: 4 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8)",
                "4 * 1 = 4 (left: 4 4 8)",
                "4 * 1 = 4 (left: 4 4 8) || 8 - 4 = 4 (left: 4 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8)",
                "4 * 1 = 4 (left: 4 4 8) || 8 - 4 = 4 (left: 4 8)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                40.0,
                22.0,
                0.003,
                40.0,
                40.0,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 1.3",
                "2 <- 1.7",
                "3 <- 1.3",
                "4 <- 1.3",
                "5 <- INIT",
                "6 <- 0.3",
                "7 <- 1.8",
                "8 <- 1.8",
                "9 <- 1.7"
            ]
        },
        "Step 2": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                0.001,
                0.002,
                22.0,
                40.0,
                0.001,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.3",
                "2 <- 2.5",
                "3 <- 2.6",
                "4 <- 0.3",
                "5 <- 2.5",
                "6 <- 0.2",
                "7 <- 2.6",
                "8 <- 1.3",
                "9 <- 2.6"
            ]
        },
        "Step 3": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 8 - 4 = 4 (left: 4 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "4 * 1 = 4 (left: 4 4 8) || 8 - 4 = 4 (left: 4 8)",
                "4 * 1 = 4 (left: 4 4 8) || 8 - 4 = 4 (left: 4 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)"
            ],
            "Evaluation": [
                40.001,
                0.002,
                0.003,
                0.001,
                0.003,
                0.003,
                40.0,
                0.001,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 3.6",
                "2 <- 1.8",
                "3 <- 0.2",
                "4 <- 0.0",
                "5 <- 3.0",
                "6 <- 1.8",
                "7 <- 3.6",
                "8 <- 0.2",
                "9 <- 1.6"
            ]
        },
        "Step 4": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8)",
                "8 - 4 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 - 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                40.0,
                21.0,
                0.002,
                0.001,
                0.001,
                40.0,
                0.002
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 3.6",
                "2 <- 2.6",
                "3 <- 1.6",
                "4 <- 0.6",
                "5 <- 1.8",
                "6 <- 4.8",
                "7 <- 2.6",
                "8 <- 4.8",
                "9 <- 1.4"
            ]
        },
        "Step 5": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "4 * 1 = 4 (left: 4 4 8) || 8 - 4 = 4 (left: 4 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "4 * 1 = 4 (left: 4 4 8) || 8 - 4 = 4 (left: 4 8)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                0.001,
                0.003,
                0.002,
                0.001,
                0.001,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 3.0",
                "2 <- 1.4",
                "3 <- 4.8",
                "4 <- 3.0",
                "5 <- 1.6",
                "6 <- 2.5",
                "7 <- 4.3",
                "8 <- 4.4",
                "9 <- 2.5"
            ]
        },
        "Step 6": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 - 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 8 - 4 = 4 (left: 4 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 - 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 - 4 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 3 * 4 = 12 (left: 12)",
                "4 * 1 = 4 (left: 4 4 8) || 8 - 4 = 4 (left: 4 8)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.001,
                0.002,
                0.002,
                40.0,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 6.6",
                "2 <- 3.6",
                "3 <- 4.8",
                "4 <- 6.6",
                "5 <- 3.0",
                "6 <- 4.3",
                "7 <- 1.6",
                "8 <- 6.6",
                "9 <- 6.6"
            ]
        },
        "Step 7": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 - 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                0.001,
                0.002,
                0.002,
                0.001,
                0.001,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 4.8",
                "2 <- 6.6",
                "3 <- 0.2",
                "4 <- 4.3",
                "5 <- 1.6",
                "6 <- 3.6",
                "7 <- 4.4",
                "8 <- 1.6",
                "9 <- 4.4"
            ]
        },
        "Step 8": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 - 4 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 3 * 4 = 12 (left: 12)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 - 4 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 3 - 4 = -1 (left: -1)"
            ],
            "Evaluation": [
                40.001,
                0.002,
                0.002,
                40.0,
                0.002,
                0.002,
                0.001,
                0.003,
                0.001,
                0.0
            ],
            "Resampling": [
                "0 <- 6.6",
                "1 <- 8.3",
                "2 <- 8.3",
                "3 <- 0.7",
                "4 <- 0.5",
                "5 <- 8.3",
                "6 <- 1.6",
                "7 <- 0.6",
                "8 <- 3.0",
                "9 <- 8.0"
            ]
        },
        "Step 9": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 4 = 4 (left: 1 4 4) || 4 * 1 = 4 (left: 4 4)",
                "4 * 1 = 4 (left: 4 4 8) || 8 - 4 = 4 (left: 4 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "4 * 1 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 * 8 = 128 (left: 128)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 - 8 = 8 (left: 8)"
            ]
        },
        "Input": "1 1 4 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "12": {
        "puzzle": "1 1 5 8",
        "Step 0": {
            "steps": [
                "5 - 1 = 4 (left: 1 4 8)",
                "1 * 1 = 1 (left: 1 5 8)",
                "8 - 5 = 3 (left: 1 3 8)",
                "8 - 5 = 3 (left: 1 3 8)",
                "5 - 1 = 4 (left: 1 4 8)",
                "8 - 5 = 3 (left: 1 3 8)",
                "8 - 5 = 3 (left: 1 3 8)",
                "5 - 1 = 4 (left: 1 4 8)",
                "5 + 1 = 6 (left: 1 6 ",
                "5 - 1 = 4 (left: 1 4 8)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                60.0,
                60.0,
                0.003,
                60.0,
                60.0,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- INIT",
                "2 <- 0.6",
                "3 <- 0.3",
                "4 <- 0.2",
                "5 <- 0.6",
                "6 <- INIT",
                "7 <- 0.8",
                "8 <- 0.5",
                "9 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8)",
                "8 - 5 = 3 (left: 1 3 8)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "5 - 1 = 4 (left: 1 4 8)",
                "5 + 1 = 6 (left: 1 6  || 1 * 6 = 6 (left: 6)",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.003,
                0.003,
                0.0,
                0.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 0.3",
                "2 <- 0.5",
                "3 <- 1.1",
                "4 <- 0.2",
                "5 <- 0.8",
                "6 <- INIT",
                "7 <- 1.0",
                "8 <- INIT",
                "9 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "5 + 1 = 6 (left: 1 6  || 6 / 1 = 6 (left: 6)",
                "5 - 1 = 4 (left: 1 4 8)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "5 - 1 = 4 (left: 1 4 8)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)"
            ],
            "Evaluation": [
                0.003,
                0.0,
                0.0,
                0.0,
                0.0,
                0.003,
                0.003,
                0.002,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 0.2",
                "2 <- 1.1",
                "3 <- 0.2",
                "4 <- 0.6",
                "5 <- 1.0",
                "6 <- 0.6",
                "7 <- 0.6",
                "8 <- 0.3",
                "9 <- 0.8"
            ]
        },
        "Step 3": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 8 = 8 (left: 8)",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "5 + 1 = 6 (left: 1 6  || 6 / 1 = 6 (left: 6)"
            ],
            "Evaluation": [
                60.0,
                0.0,
                0.0,
                0.0,
                0.0,
                60.0,
                0.0,
                0.002,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 1.1",
                "2 <- 0.5",
                "3 <- 0.5",
                "4 <- 0.8",
                "5 <- 1.0",
                "6 <- 3.0",
                "7 <- 3.0",
                "8 <- 0.8",
                "9 <- 0.3"
            ]
        },
        "Step 4": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "5 + 1 = 6 (left: 1 6  || 6 / 1 = 6 (left: 6)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "5 + 1 = 6 (left: 1 6  || 1 * 6 = 6 (left: 6)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)"
            ],
            "Evaluation": [
                0.003,
                0.0,
                0.0,
                0.0,
                0.003,
                60.0,
                0.002,
                0.002,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 4.5",
                "1 <- 0.2",
                "2 <- 3.0",
                "3 <- 4.5",
                "4 <- 0.8",
                "5 <- 4.5",
                "6 <- 1.1",
                "7 <- 0.3",
                "8 <- 0.6",
                "9 <- 0.6"
            ]
        },
        "Step 5": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "5 + 1 = 6 (left: 1 6  || 6 / 1 = 6 (left: 6)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 8 = 8 (left: 8)",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)"
            ],
            "Evaluation": [
                0.003,
                0.0,
                60.0,
                0.003,
                0.003,
                0.003,
                0.0,
                0.002,
                0.0,
                0.0
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 4.5",
                "2 <- 0.5",
                "3 <- 0.8",
                "4 <- 4.5",
                "5 <- 3.5",
                "6 <- 0.6",
                "7 <- 1.1",
                "8 <- 1.0",
                "9 <- 1.0"
            ]
        },
        "Step 6": {
            "steps": [
                "5 + 1 = 6 (left: 1 6  || 6 - 1 = 5 (left: 5)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "5 + 1 = 6 (left: 1 6  || 1 * 6 = 6 (left: 6)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 8 = 8 (left: 8)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.0,
                0.003,
                0.003,
                0.003,
                0.0,
                0.002,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 6.9",
                "1 <- 5.2",
                "2 <- 6.9",
                "3 <- 0.3",
                "4 <- 5.2",
                "5 <- 1.1",
                "6 <- 0.8",
                "7 <- 6.9",
                "8 <- 5.2",
                "9 <- 4.5"
            ]
        },
        "Step 7": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "5 + 1 = 6 (left: 1 6  || 1 * 6 = 6 (left: 6)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.0,
                0.003,
                0.0,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.5",
                "1 <- 6.9",
                "2 <- 5.2",
                "3 <- 3.0",
                "4 <- 0.3",
                "5 <- 5.2",
                "6 <- 3.0",
                "7 <- 3.5",
                "8 <- 3.5",
                "9 <- 3.0"
            ]
        },
        "Step 8": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.0,
                0.003,
                0.002,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 8.9",
                "1 <- 4.5",
                "2 <- 6.9",
                "3 <- 6.9",
                "4 <- 1.1",
                "5 <- 8.9",
                "6 <- 0.2",
                "7 <- 8.9",
                "8 <- 0.2",
                "9 <- 6.9"
            ]
        },
        "Step 9": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 - 5) = 24"
            ]
        },
        "Input": "1 1 5 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "13": {
        "puzzle": "4 6 11 11",
        "Step 0": {
            "steps": [
                "11 + 4 = 15 (left: 6 11 15)",
                "6 / 4 = 1.5 (left: 1.5 11 11)",
                "4 * 6 = 24 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24)",
                "11 + 4 = 15 (left: 6 11 15)",
                "4 * 6 = 24 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24)",
                "11 + 4 = 15 (left: 6 11 15)",
                "11 - 6 = 5 (left: ",
                "11 + 4 = 15 (left: 6 11 15)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                1.002,
                1.002,
                1.002,
                1.002,
                1.002,
                1.002,
                0.0,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.2",
                "5 <- 0.7",
                "6 <- 0.9",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "6 / 4 = 1.5 (left: 1.5 11 11)",
                "4 * 6 = 24 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24)",
                "11 + 4 = 15 (left: 6 11 15)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24)",
                "11 + 4 = 15 (left: 6 11 15) || 15 - 11 = ",
                "11 + 4 = 15 (left: 6 11 15) || 15 - 6 = 9 (left: 9 11)",
                "11 - 6 = 5 (left: ",
                "11 + 4 = 15 (left: 6 11 15)",
                "4 * 6 = 24 (left: 11 11 24)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                1.002,
                1.002,
                20.002,
                0.003,
                2.0,
                0.0,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.2",
                "2 <- 0.1",
                "3 <- 1.4",
                "4 <- 1.4",
                "5 <- 1.1",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- 0.7",
                "9 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "6 / 4 = 1.5 (left: 1.5 11 11)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24)",
                "6 / 4 = 1.5 (left: 1.5 11 11) || 11 + 1.5 = 12.5 (left: 12.5 11)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24)",
                "11 + 4 = 15 (left: 6 11 15)",
                "11 - 6 = 5 (left: ",
                "11 + 4 = 15 (left: 6 11 15) || 15 - 6 = 9 (left: 9 11)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24)"
            ],
            "Evaluation": [
                1.002,
                20.002,
                0.001,
                1.002,
                0.003,
                20.002,
                1.002,
                0.0,
                2.0,
                20.002
            ],
            "Resampling": [
                "0 <- 2.9",
                "1 <- INIT",
                "2 <- 1.4",
                "3 <- 1.4",
                "4 <- 2.1",
                "5 <- 2.5",
                "6 <- 2.9",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 2.5"
            ]
        },
        "Step 3": {
            "steps": [
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24)",
                "4 * 6 = 24 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "11 - 6 = 5 (left: ",
                "11 + 4 = 15 (left: 6 11 15)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)"
            ],
            "Evaluation": [
                20.002,
                1.002,
                0.003,
                1.002,
                0.003,
                0.003,
                1.002,
                0.0,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.5",
                "1 <- 2.5",
                "2 <- 3.6",
                "3 <- 2.1",
                "4 <- 1.4",
                "5 <- 2.1",
                "6 <- 1.4",
                "7 <- 3.0",
                "8 <- 2.9",
                "9 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 24 / 11 = 2.1818181818181817 (left:",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                20.002,
                1.002,
                0.003,
                0.003,
                1.002,
                0.001,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 4.0",
                "2 <- 3.0",
                "3 <- 4.2",
                "4 <- 4.0",
                "5 <- 2.5",
                "6 <- 4.0",
                "7 <- 3.0",
                "8 <- 2.9",
                "9 <- 1.4"
            ]
        },
        "Step 5": {
            "steps": [
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 24 / 11 = 2.1818181818181817 (left:",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                0.003,
                1.002,
                0.003,
                0.003,
                1.002,
                0.001,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.9",
                "1 <- 1.4",
                "2 <- 4.0",
                "3 <- 2.5",
                "4 <- 2.6",
                "5 <- 4.2",
                "6 <- 2.9",
                "7 <- 2.5",
                "8 <- 2.9",
                "9 <- 4.2"
            ]
        },
        "Step 6": {
            "steps": [
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "11 + 4 = 15 (left: 6 11 15) || 6 * 11 = 66 (left: 66 15)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 24 / 11 = 2.1818181818181817 (left:",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                0.003,
                1.002,
                1.002,
                0.003,
                1.002,
                0.001,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 4.2",
                "2 <- 3.0",
                "3 <- 6.0",
                "4 <- 4.0",
                "5 <- 5.0",
                "6 <- 4.0",
                "7 <- 4.2",
                "8 <- 2.5",
                "9 <- 2.1"
            ]
        },
        "Step 7": {
            "steps": [
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 24 / 11 = 2.1818181818181817 (left:",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                0.003,
                1.002,
                0.003,
                0.003,
                1.002,
                0.001,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 7.0",
                "1 <- 4.2",
                "2 <- 6.0",
                "3 <- 6.0",
                "4 <- 7.0",
                "5 <- 6.0",
                "6 <- 5.0",
                "7 <- 4.0",
                "8 <- 4.0",
                "9 <- 1.4"
            ]
        },
        "Step 8": {
            "steps": [
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 24 / 11 = 2.1818181818181817 (left:",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                0.003,
                1.002,
                0.003,
                0.003,
                1.002,
                0.001,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 1.0",
                "2 <- 5.0",
                "3 <- 4.2",
                "4 <- 6.0",
                "5 <- 3.0",
                "6 <- 3.0",
                "7 <- 2.1",
                "8 <- 2.5",
                "9 <- 7.3"
            ]
        },
        "Step 9": {
            "steps": [
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24)",
                "6 / 4 = 1.5 (left: 1.5 11 11) || 11 + 1.5 = 12.5 (left: 12.5 11)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 24 / 11 = 2.1818181818181817 (left:",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24)"
            ]
        },
        "Input": "4 6 11 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "14": {
        "puzzle": "1 1 3 12",
        "Step 0": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 12)",
                "1 * 1 = 1 (left: 1 3 12)",
                "12 - 3 = 9 (left: 1 1 9)",
                "12 - 3 = 9 (left: 1 1 9)",
                "3 + 1 = 4 (left: 1 4 12)",
                "12 - 3 = 9 (left: 1 1 9)",
                "12 - 3 = 9 (left: 1 1 9)",
                "3 + 1 = 4 (left: 1 4 12)",
                "12 / 3 = 4 (left: 1 4 ",
                "3 + 1 = 4 (left: 1 4 12)"
            ],
            "Evaluation": [
                2.001,
                41.0,
                0.001,
                0.001,
                2.001,
                0.001,
                0.001,
                2.001,
                0.001,
                2.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.1",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 0.4",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)",
                "12 - 3 = 9 (left: 1 1 9)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)",
                "12 - 3 = 9 (left: 1 1 9)",
                "12 - 3 = 9 (left: 1 1 9)",
                "3 + 1 = 4 (left: 1 4 12) || 4 + 12 = 16 (left: 1 16)",
                "12 / 3 = 4 (left: 1 4 ",
                "3 + 1 = 4 (left: 1 4 12)",
                "12 - 3 = 9 (left: 1 1 9)"
            ],
            "Evaluation": [
                60.0,
                20.002,
                0.001,
                60.0,
                0.001,
                0.001,
                0.002,
                0.001,
                2.001,
                0.001
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- 1.3",
                "4 <- 0.1",
                "5 <- 1.3",
                "6 <- INIT",
                "7 <- 1.0",
                "8 <- 1.0",
                "9 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 12) || 4 * 3 = 12 (left: 12 12)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "3 + 1 = 4 (left: 1 4 12)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                20.002,
                0.002,
                0.002,
                0.002,
                20.002,
                0.002,
                2.001,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.0",
                "2 <- 1.3",
                "3 <- 1.1",
                "4 <- 1.1",
                "5 <- 1.0",
                "6 <- 1.3",
                "7 <- 1.0",
                "8 <- 1.0",
                "9 <- 1.1"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || Possible next steps:",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || Possible next steps:"
            ],
            "Evaluation": [
                0.0,
                40.0,
                0.002,
                0.003,
                0.003,
                40.0,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.1",
                "2 <- 1.1",
                "3 <- 3.1",
                "4 <- 3.5",
                "5 <- 1.0",
                "6 <- 1.3",
                "7 <- 0.1",
                "8 <- 1.0",
                "9 <- 3.5"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 4 + 7 = 11 (left: 11 10)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 12) || 3 + 12 = 15 (left: 1 15)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18"
            ],
            "Evaluation": [
                0.0,
                20.002,
                0.003,
                0.003,
                0.003,
                40.0,
                0.002,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 3.5",
                "2 <- 1.3",
                "3 <- 3.1",
                "4 <- 1.0",
                "5 <- 4.5",
                "6 <- 0.1",
                "7 <- 4.5",
                "8 <- 4.1",
                "9 <- 4.5"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.002,
                0.003,
                40.0,
                0.003,
                60.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 4.5",
                "2 <- 5.4",
                "3 <- 5.6",
                "4 <- 4.5",
                "5 <- 1.3",
                "6 <- 3.5",
                "7 <- 5.4",
                "8 <- 1.0",
                "9 <- 5.6"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.003,
                0.002,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 5.4",
                "2 <- 5.6",
                "3 <- 5.6",
                "4 <- 0.1",
                "5 <- 4.1",
                "6 <- 2.0",
                "7 <- 3.1",
                "8 <- 4.5",
                "9 <- 5.6"
            ]
        },
        "Step 7": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || Possible next steps:",
                "3 + 1 = 4 (left: 1 4 12) || 4 * 3 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.002,
                20.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 5.6",
                "1 <- 5.6",
                "2 <- 7.4",
                "3 <- 5.6",
                "4 <- 3.1",
                "5 <- 4.5",
                "6 <- 1.0",
                "7 <- 7.4",
                "8 <- 1.3",
                "9 <- 3.5"
            ]
        },
        "Step 8": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 4 + 7 = 11 (left: 11 10)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 5.6",
                "2 <- 7.4",
                "3 <- 5.4",
                "4 <- 5.4",
                "5 <- 3.5",
                "6 <- 5.6",
                "7 <- 4.1",
                "8 <- 2.0",
                "9 <- 5.4"
            ]
        },
        "Step 9": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9 12)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 4 + 7 = 11 (left: 11 10)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "3 + 1 = 4 (left: 1 4 12) || 4 * 3 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18"
            ]
        },
        "Input": "1 1 3 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "15": {
        "puzzle": "2 2 2 12",
        "Step 0": {
            "steps": [
                "2 * 2 = 4 (left: 2 4 12)",
                "2 * 2 = 4 (left: 4 2 12)",
                "2 + 2 = 4 (left: 4 2 12)",
                "2 + 2 = 4 (left: 4 2 12)",
                "2 * 2 = 4 (left: 2 4 12)",
                "2 + 2 = 4 (left: 4 2 12)",
                "2 + 2 = 4 (left: 4 2 12)",
                "2 * 2 = 4 (left: 2 4 12)",
                "2 * 2 = 4 (left: 4 4 ",
                "2 * 2 = 4 (left: 2 4 12)"
            ],
            "Evaluation": [
                2.0,
                2.001,
                2.001,
                2.001,
                2.0,
                2.001,
                2.001,
                2.0,
                0.003,
                2.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.6",
                "3 <- INIT",
                "4 <- 0.1",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 2 = 4 (left: 4 2 12)",
                "2 + 2 = 4 (left: 4 2 12)",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6)",
                "2 * 2 = 4 (left: 2 4 12)",
                "2 * 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6)",
                "2 + 2 = 4 (left: 4 2 12)",
                "2 * 2 = 4 (left: 2 4 12)",
                "2 * 2 = 4 (left: 4 4 ",
                "2 * 2 = 4 (left: 2 4 12)",
                "2 + 2 = 4 (left: 4 2 12)"
            ],
            "Evaluation": [
                2.001,
                2.001,
                60.0,
                2.0,
                60.0,
                2.001,
                2.0,
                0.003,
                2.0,
                2.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- INIT",
                "2 <- 1.2",
                "3 <- 1.4",
                "4 <- 1.2",
                "5 <- 1.2",
                "6 <- 1.4",
                "7 <- 1.2",
                "8 <- 1.4",
                "9 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 2 = 4 (left: 4 2 12) || 4 * 2 = 8 (left: 8 12)",
                "2 + 2 = 4 (left: 4 2 12)",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 * 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 * 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "2 * 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)"
            ],
            "Evaluation": [
                0.002,
                2.001,
                0.002,
                60.0,
                0.002,
                0.002,
                60.0,
                60.0,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 2.7",
                "1 <- 1.4",
                "2 <- INIT",
                "3 <- 2.7",
                "4 <- 2.3",
                "5 <- 2.6",
                "6 <- 2.6",
                "7 <- 2.8",
                "8 <- INIT",
                "9 <- 2.7"
            ]
        },
        "Step 3": {
            "steps": [
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (2 + 2) * 12 = 24",
                "2 * 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 + 2 = 4 (left: 4 2 12)",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (2 + 2) * 12 = 24",
                "2 * 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * (12 / 2) = 24",
                "2 * 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * (12 / 2) = 24",
                "2 * 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * (12 / 2) = 24",
                "2 * 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * (12 / 2) = 24",
                "2 * 2 = 4 (left: 2 4 12)",
                "2 + 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (2 + 2) * 12 = 24"
            ]
        },
        "Input": "2 2 2 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "16": {
        "puzzle": "1 1 4 12",
        "Step 0": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 12)",
                "1 * 1 = 1 (left: 1 4 12)",
                "1 / 1 = 1 (left: 1 4 12)",
                "1 / 1 = 1 (left: 1 4 12)",
                "4 + 1 = 5 (left: 1 5 12)",
                "1 / 1 = 1 (left: 1 4 12)",
                "1 / 1 = 1 (left: 1 4 12)",
                "4 + 1 = 5 (left: 1 5 12)",
                "12 - 1 = 11 (left: 1 4 ",
                "4 + 1 = 5 (left: 1 5 12)"
            ],
            "Evaluation": [
                22.0,
                2.001,
                2.001,
                2.001,
                22.0,
                2.001,
                2.001,
                22.0,
                0.001,
                22.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.0",
                "2 <- 0.4",
                "3 <- 0.9",
                "4 <- INIT",
                "5 <- 0.2",
                "6 <- 0.9",
                "7 <- 0.9",
                "8 <- 0.0",
                "9 <- 0.7"
            ]
        },
        "Step 1": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60)",
                "4 + 1 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "4 + 1 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7)",
                "1 / 1 = 1 (left: 1 4 12)",
                "1 / 1 = 1 (left: 1 4 12) || 12 - 4 = 8 (",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 1 = 5 (left: 5 12)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7)",
                "4 + 1 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)"
            ],
            "Evaluation": [
                41.0,
                1.001,
                1.001,
                20.0,
                2.001,
                0.003,
                20.0,
                1.001,
                20.0,
                1.001
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 0.0",
                "2 <- INIT",
                "3 <- 1.3",
                "4 <- 0.7",
                "5 <- 1.3",
                "6 <- 1.3",
                "7 <- 0.0",
                "8 <- 1.0",
                "9 <- 0.9"
            ]
        },
        "Step 2": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 1 + 7 = 8 (left: 8)",
                "4 + 1 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "1 / 1 = 1 (left: 1 4 12)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "4 + 1 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 1 = 5 (left: 5 12)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 1 * 60 = 60 (left: 60)",
                "4 + 1 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)"
            ],
            "Evaluation": [
                0.002,
                1.001,
                2.001,
                0.003,
                1.001,
                0.001,
                0.003,
                1.001,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.4",
                "2 <- 0.9",
                "3 <- 1.6",
                "4 <- 1.6",
                "5 <- 0.7",
                "6 <- 0.7",
                "7 <- 0.5",
                "8 <- 0.4",
                "9 <- 0.0"
            ]
        },
        "Step 3": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60)",
                "4 + 1 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "4 + 1 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "4 + 1 = 5 (left: 1 5 12) || 12 / 5 = 2.4 (",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7)",
                "1 / 1 = 1 (left: 1 4 12) || 12 / 4 = 3 (left: 1 3 12)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7)",
                "4 + 1 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)"
            ],
            "Evaluation": [
                41.0,
                1.001,
                1.001,
                0.003,
                0.001,
                0.003,
                20.0,
                41.0,
                20.0,
                1.001
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 1.6",
                "2 <- 3.8",
                "3 <- 3.6",
                "4 <- 1.3",
                "5 <- 1.0",
                "6 <- 2.4",
                "7 <- INIT",
                "8 <- 3.6",
                "9 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 / 1 = 60 (left: 60)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)",
                "4 + 1 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12) || 12 / 5 = 2.4 (left: 2.4)",
                "12 - 1 = 11 (left: 1 4 ",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.001,
                0.003,
                0.001,
                0.003,
                0.003,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.7",
                "1 <- 1.3",
                "2 <- 0.5",
                "3 <- 0.0",
                "4 <- 3.8",
                "5 <- 1.0",
                "6 <- 0.7",
                "7 <- INIT",
                "8 <- 3.0",
                "9 <- 3.2"
            ]
        },
        "Step 5": {
            "steps": [
                "1 / 1 = 1 (left: 1 4 12) || 12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "1 / 1 = 1 (left: 1 4 12) || 12 + 4 = 16 (left: 1 16)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7)",
                "12 - 1 = 11 (left: 1 4 ",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 1 * 60 = 60 (left: 60)",
                "4 + 1 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12) || 12 - 5 = 7 (left: 7)"
            ],
            "Evaluation": [
                60.0,
                0.001,
                0.002,
                20.0,
                0.001,
                0.003,
                20.0,
                0.001,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 5.0",
                "2 <- 3.7",
                "3 <- 5.0",
                "4 <- 0.0",
                "5 <- 3.0",
                "6 <- 3.8",
                "7 <- 5.0",
                "8 <- 3.0",
                "9 <- 1.3"
            ]
        },
        "Step 6": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 1 + 7 = 8 (left: 8)",
                "1 / 1 = 1 (left: 1 4 12) || 12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "1 / 1 = 1 (left: 1 4 12) || 12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)",
                "1 / 1 = 1 (left: 1 4 12) || 12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "4 + 1 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "1 / 1 = 1 (left: 1 4 12) || 12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 1 * 60 = 60 (left: 60)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)"
            ],
            "Evaluation": [
                0.002,
                40.0,
                20.002,
                0.003,
                1.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 0.7",
                "2 <- 1.0",
                "3 <- 6.2",
                "4 <- 0.7",
                "5 <- 3.0",
                "6 <- 0.4",
                "7 <- 5.0",
                "8 <- 6.1",
                "9 <- 5.3"
            ]
        },
        "Step 7": {
            "steps": [
                "1 / 1 = 1 (left: 1 4 12) || 12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9 12)",
                "4 + 1 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)",
                "1 / 1 = 1 (left: 1 4 12) || 12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "4 + 1 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7)",
                "1 / 1 = 1 (left: 1 4 12) || 12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "1 / 1 = 1 (left: 1 4 12) || 12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)"
            ],
            "Evaluation": [
                0.003,
                1.001,
                0.003,
                0.003,
                1.001,
                0.003,
                20.0,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.9",
                "2 <- 0.9",
                "3 <- 1.6",
                "4 <- 5.3",
                "5 <- 1.8",
                "6 <- 3.7",
                "7 <- 3.0",
                "8 <- 5.0",
                "9 <- 6.2"
            ]
        },
        "Step 8": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 1 + 7 = 8 (left: 8)",
                "4 + 1 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "4 + 1 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "1 / 1 = 1 (left: 1 4 12) || 12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 1 * 60 = 60 (left: 60)",
                "1 / 1 = 1 (left: 1 4 12) || 12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "1 / 1 = 1 (left: 1 4 12) || 12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || Possible next steps:"
            ],
            "Evaluation": [
                0.002,
                1.001,
                1.001,
                0.003,
                0.001,
                0.001,
                60.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 1.3",
                "2 <- 6.1",
                "3 <- 7.6",
                "4 <- 3.0",
                "5 <- 3.8",
                "6 <- 8.6",
                "7 <- 5.0",
                "8 <- 5.0",
                "9 <- 5.3"
            ]
        },
        "Step 9": {
            "steps": [
                "1 / 1 = 1 (left: 1 4 12) || 12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 / 1 = 36 (left: 36)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "1 / 1 = 1 (left: 1 4 12) || 12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "1 / 1 = 1 (left: 1 4 12) || 12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 / 1 = 1 (left: 1 4 12) || 12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "1 / 1 = 1 (left: 1 4 12) || 12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)"
            ]
        },
        "Input": "1 1 4 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "17": {
        "puzzle": "1 1 12 12",
        "Step 0": {
            "steps": [
                "12 / 1 = 12 (left: 1 12 12)",
                "1 * 1 = 1 (left: 1 12 12)",
                "12 - 1 = 11 (left: 1 11 12)",
                "12 - 1 = 11 (left: 1 11 12)",
                "12 / 1 = 12 (left: 1 12 12)",
                "12 - 1 = 11 (left: 1 11 12)",
                "12 - 1 = 11 (left: 1 11 12)",
                "12 / 1 = 12 (left: 1 12 12)",
                "12 / 1 = 12 (left: 1 12 ",
                "12 / 1 = 12 (left: 1 12 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                20.002,
                0.003,
                20.002,
                20.002,
                0.003,
                1.001,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.6",
                "2 <- INIT",
                "3 <- 0.3",
                "4 <- INIT",
                "5 <- 0.5",
                "6 <- 0.3",
                "7 <- 0.3",
                "8 <- 0.5",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 12 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 1 = 11 (left: 1 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                20.002,
                0.002,
                20.002,
                20.002,
                0.002,
                0.002,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.1",
                "2 <- 1.2",
                "3 <- 1.9",
                "4 <- 1.4",
                "5 <- 1.9",
                "6 <- 1.1",
                "7 <- INIT",
                "8 <- 0.2",
                "9 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 1 = 11 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 1 = 12 (left: 1 12 ",
                "12 - 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.002,
                0.003,
                20.002,
                0.003,
                20.002,
                0.003,
                0.003,
                1.001,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.5",
                "2 <- 2.2",
                "3 <- 2.4",
                "4 <- 0.5",
                "5 <- 1.9",
                "6 <- 0.3",
                "7 <- 2.4",
                "8 <- 1.9",
                "9 <- 1.4"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 12 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.003,
                0.003,
                20.002,
                0.003,
                0.002,
                0.003,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 3.1",
                "2 <- 3.9",
                "3 <- 3.1",
                "4 <- 0.6",
                "5 <- 3.1",
                "6 <- 3.9",
                "7 <- 2.2",
                "8 <- 1.9",
                "9 <- 1.9"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 1 = 11 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 3.1",
                "2 <- 1.2",
                "3 <- 2.4",
                "4 <- 2.4",
                "5 <- 1.4",
                "6 <- 3.1",
                "7 <- 3.9",
                "8 <- 2.2",
                "9 <- 0.5"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                0.003,
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 5.5",
                "2 <- 3.9",
                "3 <- 4.4",
                "4 <- 3.4",
                "5 <- 1.9",
                "6 <- 1.4",
                "7 <- 5.5",
                "8 <- 1.2",
                "9 <- 0.2"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 1 = 11 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.5",
                "2 <- 5.9",
                "3 <- 0.5",
                "4 <- 5.9",
                "5 <- 0.2",
                "6 <- 5.9",
                "7 <- 5.5",
                "8 <- 2.4",
                "9 <- 0.6"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 1 = 11 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.002,
                20.002,
                0.003,
                0.002,
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 7.9",
                "1 <- 1.9",
                "2 <- 7.5",
                "3 <- 7.1",
                "4 <- 3.4",
                "5 <- 5.9",
                "6 <- 7.5",
                "7 <- 1.2",
                "8 <- 3.1",
                "9 <- 5.5"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 7.1",
                "2 <- 5.9",
                "3 <- 0.2",
                "4 <- 2.2",
                "5 <- 5.9",
                "6 <- 5.9",
                "7 <- 7.1",
                "8 <- 1.5",
                "9 <- 1.1"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ]
        },
        "Input": "1 1 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "18": {
        "puzzle": "3 3 3 8",
        "Step 0": {
            "steps": [
                "3 - 3 = 0 (left: 0 3 8)",
                "3 * 3 = 9 (left: 9 3 8)",
                "3 + 3 = 6 (left: 6 3 8)",
                "3 + 3 = 6 (left: 6 3 8)",
                "3 - 3 = 0 (left: 0 3 8)",
                "3 + 3 = 6 (left: 6 3 8)",
                "3 + 3 = 6 (left: 6 3 8)",
                "3 - 3 = 0 (left: 0 3 8)",
                "3 - 3 = 0 (left: 0 3 ",
                "3 - 3 = 0 (left: 0 3 8)"
            ],
            "Evaluation": [
                1.002,
                2.0,
                3.0,
                3.0,
                1.002,
                3.0,
                3.0,
                1.002,
                20.002,
                1.002
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 0.8",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.2",
                "5 <- INIT",
                "6 <- 0.8",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 0.8"
            ]
        },
        "Step 1": {
            "steps": [
                "3 - 3 = 0 (left: 0 3  || 3 / 0 = undefined",
                "3 - 3 = 0 (left: 0 3  || 3 - 0 = 3 (left: 3)",
                "3 + 3 = 6 (left: 6 3 8)",
                "3 - 3 = 0 (left: 0 3 8)",
                "3 + 3 = 6 (left: 6 3 8) || 3 + 8 = 11 (left: 6 11)",
                "3 + 3 = 6 (left: 6 3 8)",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0)",
                "3 - 3 = 0 (left: 0 3 ",
                "3 - 3 = 0 (left: 0 3 8)",
                "3 - 3 = 0 (left: 0 3  || 3 - 0 = 3 (left: 3)"
            ],
            "Evaluation": [
                0.003,
                0.0,
                3.0,
                1.002,
                20.002,
                3.0,
                20.002,
                20.002,
                1.002,
                0.0
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 1.7",
                "2 <- INIT",
                "3 <- 1.4",
                "4 <- 1.4",
                "5 <- 1.4",
                "6 <- 1.6",
                "7 <- 0.2",
                "8 <- 1.6",
                "9 <- 1.7"
            ]
        },
        "Step 2": {
            "steps": [
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 - 3 = 0 (left: 0 3  || 3 - 0 = 3 (left: 3)",
                "3 + 3 = 6 (left: 6 3 8)",
                "3 + 3 = 6 (left: 6 3 8) || 3 + 8 = 11 (left: 6 11) || 6 * 11 = 66 (left: 66)",
                "3 + 3 = 6 (left: 6 3 8) || 3 + 8 = 11 (left: 6 11) || 6 / 11 = 0.5454545454545454 (left: 0.5454545454545454)",
                "3 + 3 = 6 (left: 6 3 8) || 3 + 8 = 11 (left: 6 11) || 6 / 11 = 0.5454545454545454 (left: 0.5454545454545454)",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 + 3 = 6 (left: 6 3 8) || 3 / 8 = 0.375 (left: 0.375 8)",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 - 3 = 0 (left: 0 3  || 3 - 0 = 3 (left: 3)"
            ],
            "Evaluation": [
                0.003,
                0.0,
                3.0,
                0.003,
                0.002,
                0.002,
                0.003,
                2.001,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 1.6",
                "2 <- 1.6",
                "3 <- INIT",
                "4 <- 1.7",
                "5 <- 1.6",
                "6 <- 1.4",
                "7 <- 1.6",
                "8 <- 1.7",
                "9 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 - 3 = 0 (left: 0 3 8)",
                "3 - 3 = 0 (left: 0 3  || 3 - 0 = 3 (left: 3)",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 + 3 = 6 (left: 6 3 8) || 3 + 8 = 11 (left: 6 11) || 6 * 11 = 66 (left: 66)",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0)",
                "3 + 3 = 6 (left: 6 3 8)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.002,
                0.0,
                0.003,
                0.003,
                0.003,
                20.002,
                3.0
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 0.8",
                "2 <- 1.7",
                "3 <- 2.7",
                "4 <- 1.6",
                "5 <- 3.8",
                "6 <- 1.6",
                "7 <- 0.3",
                "8 <- 3.8",
                "9 <- 0.8"
            ]
        },
        "Step 4": {
            "steps": [
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 - 3 = 0 (left: 0 3  || 3 - 0 = 3 (left: 3)",
                "3 - 3 = 0 (left: 0 3  || 3 - 0 = 3 (left: 3)",
                "3 + 3 = 6 (left: 6 3 8) || 3 / 8 = 0.375 (left: 0.375 8) || 0.375 / 8 = 0.046875 (left: 0.046875)",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 + 3 = 6 (left: 6 3 8) || 3 / 8 = 0.375 (left: 0.375 8)",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 - 3 = 0 (left: 0 3  || 3 - 0 = 3 (left: 3)"
            ],
            "Evaluation": [
                0.003,
                0.0,
                0.0,
                0.003,
                0.003,
                0.003,
                0.003,
                2.001,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 1.6",
                "2 <- 1.4",
                "3 <- 1.2",
                "4 <- 0.8",
                "5 <- 1.7",
                "6 <- 1.4",
                "7 <- 1.5",
                "8 <- 2.2",
                "9 <- 4.7"
            ]
        },
        "Step 5": {
            "steps": [
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 + 3 = 6 (left: 6 3 8) || 3 + 8 = 11 (left: 6 11) || 6 / 11 = 0.5454545454545454 (left: 0.5454545454545454)",
                "3 + 3 = 6 (left: 6 3 8) || 6 / 3 = 2 (left: 2 8)",
                "3 - 3 = 0 (left: 0 3  || 3 - 0 = 3 (left: 3)",
                "3 - 3 = 0 (left: 0 3  || 3 - 0 = 3 (left: 3)",
                "3 + 3 = 6 (left: 6 3 8) || 3 + 8 = 11 (left: 6 11) || 6 * 11 = 66 (left: 66)",
                "3 + 3 = 6 (left: 6 3 8) || 3 / 8 = 0.375 (left: 0.375 8)",
                "3 + 3 = 6 (left: 6 3 8) || 6 / 3 = 2 (left: 2 8)",
                "3 + 3 = 6 (left: 6 3 8) || 3 / 8 = 0.375 (left: 0.375 8) || 0.375 - 8 = -7.625 (left: -7.625)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.003,
                0.0,
                0.0,
                0.003,
                2.001,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 1.6",
                "2 <- 1.7",
                "3 <- 0.8",
                "4 <- 1.4",
                "5 <- 3.8",
                "6 <- 1.6",
                "7 <- 1.2",
                "8 <- 0.0",
                "9 <- 4.7"
            ]
        },
        "Step 6": {
            "steps": [
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 - 3 = 0 (left: 0 3  || 3 - 0 = 3 (left: 3)",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0)",
                "3 + 3 = 6 (left: 6 3 8) || 3 + 8 = 11 (left: 6 11) || 6 / 11 = 0.5454545454545454 (left: 0.5454545454545454)",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 + 3 = 6 (left: 6 3 8) || 3 / 8 = 0.375 (left: 0.375 8)",
                "3 - 3 = 0 (left: 0 3 8) || 8 / 3 = 2.66666666667 (left: 0 2.66666666667)",
                "3 + 3 = 6 (left: 6 3 8) || 3 / 8 = 0.375 (left: 0.375 8) || 0.375 - 8 = -7.625 (left: -7.625)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.0,
                20.002,
                0.002,
                0.003,
                0.003,
                2.001,
                2.001,
                0.001
            ],
            "Resampling": [
                "0 <- 3.9",
                "1 <- 6.3",
                "2 <- 6.3",
                "3 <- 0.8",
                "4 <- 3.9",
                "5 <- 1.7",
                "6 <- 6.3",
                "7 <- 1.7",
                "8 <- 6.3",
                "9 <- 6.3"
            ]
        },
        "Step 7": {
            "steps": [
                "3 + 3 = 6 (left: 6 3 8) || 6 * 3 = 18 (left: 18 8)",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0)",
                "3 + 3 = 6 (left: 6 3 8) || 3 + 8 = 11 (left: 6 11)",
                "3 - 3 = 0 (left: 0 3  || 3 - 0 = 3 (left: 3)",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 - 3 = 0 (left: 0 3  || 0 - 3 = -3 (left: -3)",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                20.002,
                20.002,
                0.0,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 6.3",
                "2 <- 3.9",
                "3 <- 7.3",
                "4 <- 3.8",
                "5 <- 6.7",
                "6 <- 0.8",
                "7 <- 0.9",
                "8 <- 7.4",
                "9 <- 3.8"
            ]
        },
        "Step 8": {
            "steps": [
                "3 - 3 = 0 (left: 0 3  || 3 / 0 = undefined",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 + 3 = 6 (left: 6 3 8) || 3 + 8 = 11 (left: 6 11)",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 + 3 = 6 (left: 6 3 8) || 3 / 8 = 0.375 (left: 0.375 8) || 0.375 - 8 = -7.625 (left: -7.625)",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0)",
                "3 - 3 = 0 (left: 0 3 8) || 3 * 8 = 24 (left: 0 24)",
                "3 + 3 = 6 (left: 6 3 8) || 3 + 8 = 11 (left: 6 11) || 6 * 11 = 66 (left: 66)",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                0.003,
                0.003,
                0.001,
                20.002,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 8.7",
                "1 <- 8.7",
                "2 <- 3.8",
                "3 <- 8.7",
                "4 <- 8.2",
                "5 <- 8.7",
                "6 <- 8.6",
                "7 <- 8.7",
                "8 <- 8.6",
                "9 <- 7.4"
            ]
        },
        "Step 9": {
            "steps": [
                "3 - 3 = 0 (left: 0 3 8) || 3 * 8 = 24 (left: 0 24) || 24 - 0 = 24 (left: 24)",
                "3 - 3 = 0 (left: 0 3 8) || 3 * 8 = 24 (left: 0 24) || 5 * 3 = 15 (left: 15)",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 - 3 = 0 (left: 0 3 8) || 3 * 8 = 24 (left: 0 24) || Input: 5 3",
                "3 + 3 = 6 (left: 6 3 8) || 3 + 8 = 11 (left: 6 11) || 6 / 11 = 0.5454545454545454 (left: 0.5454545454545454)",
                "3 - 3 = 0 (left: 0 3 8) || 3 * 8 = 24 (left: 0 24) || 5 + 3 = 8 (left: 8)",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 - 3 = 0 (left: 0 3 8) || 3 * 8 = 24 (left: 0 24) || Input: 5 3",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 + 3 = 6 (left: 6 3 8) || 3 + 8 = 11 (left: 6 11) || 6 / 11 = 0.5454545454545454 (left: 0.5454545454545454)"
            ]
        },
        "Input": "3 3 3 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "19": {
        "puzzle": "1 1 2 6",
        "Step 0": {
            "steps": [
                "6 - 2 = 4 (left: 1 2 4)",
                "1 * 1 = 1 (left: 1 2 6)",
                "2 * 1 = 2 (left: 2 6 4)",
                "2 * 1 = 2 (left: 2 6 4)",
                "6 - 2 = 4 (left: 1 2 4)",
                "2 * 1 = 2 (left: 2 6 4)",
                "2 * 1 = 2 (left: 2 6 4)",
                "6 - 2 = 4 (left: 1 2 4)",
                "6 / 2 = 3 (left: 1 3 ",
                "6 - 2 = 4 (left: 1 2 4)"
            ],
            "Evaluation": [
                2.001,
                1.002,
                1.002,
                1.002,
                2.001,
                1.002,
                1.002,
                2.001,
                0.0,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.6",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 0.7",
                "8 <- INIT",
                "9 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 6)",
                "2 * 1 = 2 (left: 2 6 4)",
                "2 * 1 = 2 (left: 2 6 4) || 4",
                "6 - 2 = 4 (left: 1 2 4)",
                "2 * 1 = 2 (left: 2 6 4)",
                "2 * 1 = 2 (left: 2 6 4)",
                "6 - 2 = 4 (left: 1 2 4)",
                "6 - 2 = 4 (left: 1 2 4) || 4 / 2 = 2 (left: 1 2)",
                "6 - 2 = 4 (left: 1 2 4)",
                "6 - 2 = 4 (left: 1 2 4) || Input: 3 6 9"
            ],
            "Evaluation": [
                1.002,
                1.002,
                0.003,
                2.001,
                1.002,
                1.002,
                2.001,
                0.002,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.5",
                "3 <- 0.9",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- 1.1",
                "9 <- 0.4"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 6)",
                "2 * 1 = 2 (left: 2 6 4)",
                "2 * 1 = 2 (left: 2 6 4) || 4",
                "6 - 2 = 4 (left: 1 2 4) || 4 / 2 = 2 (left: 1 2)",
                "2 * 1 = 2 (left: 2 6 4)",
                "2 * 1 = 2 (left: 2 6 4)",
                "6 - 2 = 4 (left: 1 2 4)",
                "6 / 2 = 3 (left: 1 3 ",
                "2 * 1 = 2 (left: 2 6 4) || 4 + 2 = 6 (left: 6)",
                "6 - 2 = 4 (left: 1 2 4) || Input: 3 6 9"
            ],
            "Evaluation": [
                1.002,
                1.002,
                0.003,
                0.002,
                1.002,
                1.002,
                2.001,
                0.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- INIT",
                "2 <- 0.4",
                "3 <- 2.4",
                "4 <- 1.4",
                "5 <- 2.5",
                "6 <- INIT",
                "7 <- 0.2",
                "8 <- INIT",
                "9 <- 0.3"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4)",
                "2 * 1 = 2 (left: 2 6 4)",
                "6 - 2 = 4 (left: 1 2 4) || Possible next steps:",
                "2 * 1 = 2 (left: 2 6 4) || 4 + 2 = 6 (left: 6)",
                "2 * 1 = 2 (left: 2 6 4) || 2 * 4 = 8 (left: 8)",
                "2 * 1 = 2 (left: 2 6 4) || 2 * 4 = 8 (left: 8)",
                "6 - 2 = 4 (left: 1 2 4)",
                "2 * 1 = 2 (left: 2 6 4) || 4 + 2 = 6 (left: 6)",
                "6 - 2 = 4 (left: 1 2 4)",
                "2 * 1 = 2 (left: 2 6 4) || 2 * 4 = 8 (left: 8)"
            ],
            "Evaluation": [
                21.0,
                1.002,
                0.003,
                0.003,
                0.002,
                0.002,
                2.001,
                0.003,
                2.001,
                0.002
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 2.1",
                "2 <- 3.6",
                "3 <- 3.0",
                "4 <- 3.0",
                "5 <- 3.8",
                "6 <- 3.1",
                "7 <- 3.0",
                "8 <- 3.0",
                "9 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75)",
                "2 * 1 = 2 (left: 2 6 4) || 4",
                "6 - 2 = 4 (left: 1 2 4) || Possible next steps:",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 * 4 = 12 (left: 12)",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 - 4 = -1 (left: -1)",
                "6 - 2 = 4 (left: 1 2 4) || Input: 3 6 9",
                "2 * 1 = 2 (left: 2 6 4) || 4 + 2 = 6 (left: 6)",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 * 4 = 12 (left: 12)",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 * 4 = 12 (left: 12)",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 - 4 = -1 (left: -1)"
            ],
            "Evaluation": [
                20.001,
                0.003,
                0.003,
                0.003,
                0.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 4.0",
                "2 <- 1.6",
                "3 <- INIT",
                "4 <- 3.0",
                "5 <- 3.6",
                "6 <- INIT",
                "7 <- 1.6",
                "8 <- 4.0",
                "9 <- 3.0"
            ]
        },
        "Step 5": {
            "steps": [
                "6 - 2 = 4 (left: 1 2 4) || 1 * 2 = 2 (left: 2)",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 * 2 = 1.5",
                "6 - 2 = 4 (left: 1 2 4) || Possible next steps:",
                "6 - 2 = 4 (left: 1 2 4)",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 - 4 = -1 (left: -1)",
                "6 - 2 = 4 (left: 1 2 4) || Input: 3 6 9",
                "6 - 2 = 4 (left: 1 2 4)",
                "6 - 2 = 4 (left: 1 2 4) || 4 / 2 = 2 (left: 1 2)",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 * 2 = 1.5",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 - 4 = -1 (left: -1)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                2.001,
                0.0,
                0.003,
                2.001,
                0.002,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 4.0",
                "2 <- 4.0",
                "3 <- 1.5",
                "4 <- 4.0",
                "5 <- 3.0",
                "6 <- 4.0",
                "7 <- 3.6",
                "8 <- 4.0",
                "9 <- 4.0"
            ]
        },
        "Step 6": {
            "steps": [
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 + 2 = 2.75",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 * 2 = 1.5",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 * 2 = 1.5",
                "2 * 1 = 2 (left: 2 6 4) || 4 + 2 = 6 (left: 6)",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 * 2 = 1.5",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 - 4 = -1 (left: -1)",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 * 2 = 1.5",
                "6 - 2 = 4 (left: 1 2 4) || 4 / 2 = 2 (left: 1 2)",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 * 2 = 1.5",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 * 2 = 1.5"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.0,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 4.0",
                "2 <- 4.0",
                "3 <- 4.0",
                "4 <- 3.0",
                "5 <- 0.4",
                "6 <- 5.3",
                "7 <- 3.0",
                "8 <- 4.0",
                "9 <- 4.0"
            ]
        },
        "Step 7": {
            "steps": [
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75)",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 * 2 = 1.5",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 * 2 = 1.5",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 * 2 = 1.5",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 - 4 = -1 (left: -1)",
                "6 - 2 = 4 (left: 1 2 4) || Input: 3 6 9",
                "6 - 2 = 4 (left: 1 2 4) || 4 / 2 = 2 (left: 1 2)",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 * 4 = 12 (left: 12)",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 * 2 = 1.5",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 * 2 = 1.5"
            ],
            "Evaluation": [
                20.001,
                0.003,
                0.003,
                0.003,
                0.0,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 3.0",
                "2 <- 4.0",
                "3 <- 4.0",
                "4 <- 7.0",
                "5 <- 2.1",
                "6 <- 4.0",
                "7 <- 4.0",
                "8 <- 4.0",
                "9 <- 3.8"
            ]
        },
        "Step 8": {
            "steps": [
                "6 - 2 = 4 (left: 1 2 4) || 1 * 2 = 2 (left: 2)",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 - 4 = -1 (left: -1)",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 * 2 = 1.5",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 * 2 = 1.5",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 * 2 = 1.5",
                "2 * 1 = 2 (left: 2 6 4) || 2 * 4 = 8 (left: 8)",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 * 2 = 1.5",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 / 2 = 0.375",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 * 2 = 1.5",
                "6 - 2 = 4 (left: 1 2 4) || Input: 3 6 9"
            ],
            "Evaluation": [
                0.001,
                0.0,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 7.0",
                "2 <- 7.0",
                "3 <- 7.0",
                "4 <- 7.0",
                "5 <- 7.0",
                "6 <- 7.0",
                "7 <- 7.0",
                "8 <- 1.1",
                "9 <- 0.2"
            ]
        },
        "Step 9": {
            "steps": [
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 + 2 = 2.75",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 * 2 = 1.5",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 * 2 = 1.5",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 * 2 = 1.5",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 * 2 = 1.5",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 * 2 = 1.5",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 * 2 = 1.5",
                "2 * 1 = 2 (left: 2 6 4) || 6 / 2 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 / 2 = 0.375",
                "2 * 1 = 2 (left: 2 6 4) || 4 + 2 = 6 (left: 6)",
                "2 * 1 = 2 (left: 2 6 4) || 2 * 4 = 8 (left: 8)"
            ]
        },
        "Input": "1 1 2 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "20": {
        "puzzle": "1 1 2 11",
        "Step 0": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10)",
                "1 * 1 = 1 (left: 1 2 11)",
                "11 - 2 = 9 (left: 1 2 9)",
                "11 - 2 = 9 (left: 1 2 9)",
                "11 - 1 = 10 (left: 1 2 10)",
                "11 - 2 = 9 (left: 1 2 9)",
                "11 - 2 = 9 (left: 1 2 9)",
                "11 - 1 = 10 (left: 1 2 10)",
                "11 - 1 = 10 (left: 1 2 10)",
                "11 - 1 = 10 (left: 1 2 10)"
            ],
            "Evaluation": [
                1.002,
                0.002,
                1.001,
                1.001,
                1.002,
                1.001,
                1.001,
                1.002,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.5",
                "3 <- 0.7",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- 0.5",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 11)",
                "11 - 2 = 9 (left: 1 2 9)",
                "11 - 2 = 9 (left: 1 2 9) || 5 * 10 = 50 (",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8)",
                "11 - 2 = 9 (left: 1 2 9)",
                "11 - 2 = 9 (left: 1 2 9)",
                "11 - 1 = 10 (left: 1 2 10)",
                "11 - 1 = 10 (left: 1 2 10)",
                "11 - 2 = 9 (left: 1 2 9) || Input: 5 5 10",
                "11 - 2 = 9 (left: 1 2 9)"
            ],
            "Evaluation": [
                0.002,
                1.001,
                0.003,
                40.0,
                1.001,
                1.001,
                1.002,
                1.002,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.3",
                "2 <- 1.1",
                "3 <- INIT",
                "4 <- 1.3",
                "5 <- INIT",
                "6 <- 1.3",
                "7 <- 1.3",
                "8 <- 1.3",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 11)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 2 = 9 (left: 1 2 9) || 5 * 10 = 50 (",
                "11 - 1 = 10 (left: 1 2 10)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 2 = 9 (left: 1 2 9)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 2 = 9 (left: 1 2 9)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                1.002,
                0.002,
                1.001,
                0.001,
                0.001,
                0.001,
                1.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.3",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 1.3",
                "5 <- 1.3",
                "6 <- INIT",
                "7 <- 2.3",
                "8 <- 0.9",
                "9 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 11)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 2 = 9 (left: 1 2 9)",
                "11 - 1 = 10 (left: 1 2 10)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10)",
                "11 - 1 = 10 (left: 1 2 10) || 2 + 10 = 12 (left: 1 12)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                1.001,
                1.002,
                0.002,
                0.002,
                1.002,
                0.002,
                40.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 3.8",
                "2 <- 3.8",
                "3 <- 2.3",
                "4 <- 1.3",
                "5 <- 3.8",
                "6 <- 3.8",
                "7 <- 3.8",
                "8 <- 3.3",
                "9 <- 1.3"
            ]
        },
        "Step 4": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                40.0,
                0.002,
                0.002,
                0.001,
                0.001,
                40.0,
                0.002
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 4.8",
                "2 <- 1.3",
                "3 <- 4.3",
                "4 <- 3.6",
                "5 <- 4.3",
                "6 <- 3.6",
                "7 <- 4.3",
                "8 <- 4.3",
                "9 <- 3.8"
            ]
        },
        "Step 5": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10) || 1 * 2 = 2 (left: 2 10)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                0.001,
                3.0,
                0.002,
                40.0,
                0.001,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 4.8",
                "1 <- 4.3",
                "2 <- 3.8",
                "3 <- 4.8",
                "4 <- 3.8",
                "5 <- 5.6",
                "6 <- 3.8",
                "7 <- 3.8",
                "8 <- 4.8",
                "9 <- 5.6"
            ]
        },
        "Step 6": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                0.001,
                0.002,
                0.002,
                0.001,
                0.001,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 3.8",
                "2 <- 1.3",
                "3 <- 5.6",
                "4 <- 1.3",
                "5 <- 4.8",
                "6 <- 5.6",
                "7 <- 5.6",
                "8 <- 5.6",
                "9 <- 4.8"
            ]
        },
        "Step 7": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                0.001,
                0.002,
                0.002,
                0.001,
                0.001,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 3.8",
                "2 <- 1.3",
                "3 <- 4.8",
                "4 <- 4.3",
                "5 <- 5.6",
                "6 <- 5.6",
                "7 <- 5.6",
                "8 <- 4.8",
                "9 <- 5.6"
            ]
        },
        "Step 8": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                0.001,
                0.002,
                0.002,
                0.001,
                0.001,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 5.6",
                "1 <- 5.6",
                "2 <- 4.8",
                "3 <- 4.3",
                "4 <- 4.8",
                "5 <- 1.3",
                "6 <- 4.3",
                "7 <- 4.8",
                "8 <- 4.3",
                "9 <- 3.8"
            ]
        },
        "Step 9": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)"
            ]
        },
        "Input": "1 1 2 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "21": {
        "puzzle": "1 2 3 4",
        "Step 0": {
            "steps": [
                "3 + 4 = 7 (left: 1 2 7)",
                "2 * 3 = 6 (left: 1 6 4)",
                "4 - 1 = 3 (left: 2 3 4)",
                "4 - 1 = 3 (left: 2 3 4)",
                "3 + 4 = 7 (left: 1 2 7)",
                "4 - 1 = 3 (left: 2 3 4)",
                "4 - 1 = 3 (left: 2 3 4)",
                "3 + 4 = 7 (left: 1 2 7)",
                "4 / 2 = 2 (left: 1 2 ",
                "3 + 4 = 7 (left: 1 2 7)"
            ],
            "Evaluation": [
                1.002,
                60.0,
                60.0,
                60.0,
                1.002,
                60.0,
                60.0,
                1.002,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 0.1",
                "2 <- 0.2",
                "3 <- 0.3",
                "4 <- 0.1",
                "5 <- 0.1",
                "6 <- 0.1",
                "7 <- 0.3",
                "8 <- 0.5",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "4 - 1 = 3 (left: 2 3 4) || 3 + 4 = 7 (left: 2 7)",
                "2 * 3 = 6 (left: 1 6 4) || 1",
                "4 - 1 = 3 (left: 2 3 4) || 4 - 2 = 2 (left: 2 3)",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6)",
                "2 * 3 = 6 (left: 1 6 4) || 4 / 1 = 4 (left: 4)",
                "2 * 3 = 6 (left: 1 6 4) || 4 / 1 = 4 (left: 4)",
                "2 * 3 = 6 (left: 1 6 4) || 6 - 4 = 2 (left: 2)",
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12)",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6)",
                "4 - 1 = 3 (left: 2 3 4) || 4 - 2 = 2 (left: 2 3)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.002,
                60.0,
                0.002,
                0.002,
                0.001,
                60.0,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 0.1",
                "2 <- 1.3",
                "3 <- 0.1",
                "4 <- 0.2",
                "5 <- 0.3",
                "6 <- 1.8",
                "7 <- 0.3",
                "8 <- 0.1",
                "9 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "2 * 3 = 6 (left: 1 6 4) || 1",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 * 3 = 6 (left: 1 6 4) || 6 - 4 = 2 (left: 2)",
                "4 - 1 = 3 (left: 2 3 4) || 4 - 2 = 2 (left: 2 3)",
                "4 - 1 = 3 (left: 2 3 4) || 4 / 3 = 1.333333",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12)",
                "2 * 3 = 6 (left: 1 6 4) || 6 - 4 = 2 (left: 2)",
                "4 - 1 = 3 (left: 2 3 4) || 4 - 2 = 2 (left: 2 3)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.001,
                0.002,
                0.003,
                60.0,
                60.0,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 2.7",
                "1 <- 0.1",
                "2 <- 1.8",
                "3 <- 2.7",
                "4 <- 2.6",
                "5 <- 2.7",
                "6 <- 0.2",
                "7 <- 0.5",
                "8 <- 0.2",
                "9 <- 0.2"
            ]
        },
        "Step 3": {
            "steps": [
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "2 * 3 = 6 (left: 1 6 4) || 1",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24",
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 * 2 = 24 (left: 24)",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6)",
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12)",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6)",
                "4 - 1 = 3 (left: 2 3 4) || 4 - 2 = 2 (left: 2 3)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.002,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 1.7",
                "2 <- 0.3",
                "3 <- 3.6",
                "4 <- 3.5",
                "5 <- INIT",
                "6 <- 3.8",
                "7 <- 1.3",
                "8 <- 2.6",
                "9 <- 3.8"
            ]
        },
        "Step 4": {
            "steps": [
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24 || Input: 3 3 5 8\nSteps:\n3 * 8 = 24 (left: 3 5 24)\n5 - 3 = 2 (left: 2 24)\n2 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (5 - 3) = 24",
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 * 2 = 24 (left: 24)",
                "4 - 1 = 3 (left: 2 3 4) || 4 - 2 = 2 (left: 2 3)",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (4 - 1) * (3 * 2) = 24",
                "4 - 1 = 3 (left: 2 3 4)",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.002,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 2.7",
                "2 <- 0.5",
                "3 <- 4.4",
                "4 <- 4.5",
                "5 <- 4.3",
                "6 <- 4.4",
                "7 <- 2.7",
                "8 <- 4.0",
                "9 <- 4.1"
            ]
        },
        "Step 5": {
            "steps": [
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (4 - 1) * (3 * 2) = 24",
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 * 2 = 24 (left: 24)",
                "4 - 1 = 3 (left: 2 3 4) || 4 - 2 = 2 (left: 2 3)",
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (4 - 1) * (3 * 2) = 24 || Input: 2 3 5 6\nSteps:\n3 + 5 = 8 (left: 2 6 8)\n6 * 2 = 12 (left: 8 12)\n8 * 12 = 96 (left: 96)\n96 / 4 = 24\nAnswer: ((3 + 5) * 2) * 6 = 24",
                "4 - 1 = 3 (left: 2 3 4) || 4 - 2 = 2 (left: 2 3)",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24",
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (4 - 1) * (3 * 2) = 24 || Input: 2 3 5 6\nSteps:\n3 + 5 = 8 (left: 2 6 8)\n6 * 2 = 12 (left: 8 12)\n8 * 12 = 96 (left: 96)\n96 / 4 = 24\nAnswer: ((3 + 5) * 2) * 6 = 24",
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24 || Input: 3 3 5 8\nSteps:\n3 * 8 = 24 (left: 3 5 24)\n5 - 3 = 2 (left: 2 24)\n2 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (5 - 3) = 24 || Input: 6 6 6 6\nSteps:\n6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 6 36)\n36 / 6 = 6 (left: 6 6)\n6 * 6 = 24 (left: 24)\nAnswer: ((6 + 6) * 6) - 6 = 24",
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (4 - 1) * (3 * 2) = 24"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.002,
                60.0,
                0.002,
                60.0,
                60.0,
                0.002,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.5",
                "1 <- 4.3",
                "2 <- 5.9",
                "3 <- 5.8",
                "4 <- 5.3",
                "5 <- 0.1",
                "6 <- 5.0",
                "7 <- 4.1",
                "8 <- 4.8",
                "9 <- 5.6"
            ]
        },
        "Step 6": {
            "steps": [
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24 || Input: 3 3 5 8\nSteps:\n3 * 8 = 24 (left: 3 5 24)\n5 - 3 = 2 (left: 2 24)\n2 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (5 - 3) = 24",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24",
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (4 - 1) * (3 * 2) = 24 || Input: 2 3 5 6\nSteps:\n3 + 5 = 8 (left: 2 6 8)\n6 * 2 = 12 (left: 8 12)\n8 * 12 = 96 (left: 96)\n96 / 4 = 24\nAnswer: ((3 + 5) * 2) * 6 = 24",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24 || Input: 3 3 5 8\nSteps:\n3 * 8 = 24 (left: 3 5 24)\n5 - 3 = 2 (left: 2 24)\n2 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (5 - 3) = 24 || Input: 6 6 6 6\nSteps:\n6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 6 36)\n36 / 6 = 6 (left: 6 6)\n6 * 6 = 24 (left: 24)\nAnswer: ((6 + 6) * 6) - 6 = 24 || Input: 2 3 5 7\nSteps:\n3 + 7 = 10 (left: 2 5 10)\n10 - 5 = 5 (left: 2 5)\n2 * 5 = 10 (left: 10)\n10 * 10 = 100 (left: 100)\n100 / 4 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: (((",
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (4 - 1) * (3 * 2) = 24 || Input: 2 3 5 6\nSteps:\n3 + 5 = 8 (left: 2 6 8)\n6 * 2 = 12 (left: 8 12)\n8 * 12 = 96 (left: 96)\n96 / 4 = 24\nAnswer: ((3 + 5) * 2) * 6 = 24 || Input: 3 3 7 8\nSteps:\n7 + 8 = 15 (left: 3 3 15)\n3 + 3 = 6 (left: 6 15)\n6 * 15 = 90 (left: 90)\n90 / 3 = 30 (left: 30)\n30 - 6 = 24\nAnswer: ((3 + 3) * (7 + 8)) - 6 = 24",
                "2 * 3 = 6 (left: 1 6 4) || 4 / 1 = 4 (left: 4)",
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (4 - 1) * (3 * 2) = 24 || Input: 2 3 5 6\nSteps:\n3 + 5 = 8 (left: 2 6 8)\n6 * 2 = 12 (left: 8 12)\n8 * 12 = 96 (left: 96)\n96 / 4 = 24\nAnswer: ((3 + 5) * 2) * 6 = 24",
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (4 - 1) * (3 * 2) = 24",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24 || Input: 3 3 5 8\nSteps:\n3 * 8 = 24 (left: 3 5 24)\n5 - 3 = 2 (left: 2 24)\n2 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (5 - 3) = 24",
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (4 - 1) * (3 * 2) = 24 || Input: 2 3 5 6\nSteps:\n3 + 5 = 8 (left: 2 6 8)\n6 * 2 = 12 (left: 8 12)\n8 * 12 = 96 (left: 96)\n96 / 4 = 24\nAnswer: ((3 + 5) * 2) * 6 = 24 || Input: 3 3 7 8\nSteps:\n7 + 8 = 15 (left: 3 3 15)\n3 + 3 = 6 (left: 6 15)\n6 * 15 = 90 (left: 90)\n90 / 3 = 30 (left: 30)\n30 - 6 = 24\nAnswer: ((3 + 3) * (7 + 8)) - 6 = 24"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                0.002,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.7",
                "1 <- 6.4",
                "2 <- 6.7",
                "3 <- 6.1",
                "4 <- 6.6",
                "5 <- 4.4",
                "6 <- 5.9",
                "7 <- 5.5",
                "8 <- 4.0",
                "9 <- 6.6"
            ]
        },
        "Step 7": {
            "steps": [
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (4 - 1) * (3 * 2) = 24 || Input: 2 3 5 6\nSteps:\n3 + 5 = 8 (left: 2 6 8)\n6 * 2 = 12 (left: 8 12)\n8 * 12 = 96 (left: 96)\n96 / 4 = 24\nAnswer: ((3 + 5) * 2) * 6 = 24 || Input: 3 3 7 8\nSteps:\n7 + 8 = 15 (left: 3 3 15)\n3 + 3 = 6 (left: 6 15)\n6 * 15 = 90 (left: 90)\n90 / 3 = 30 (left: 30)\n30 - 6 = 24\nAnswer: ((3 + 3) * (7 + 8)) - 6 = 24 || Input: 2 4 6 8\nSteps:\n4 + 6 = 10 (left: 2 8 10)\n8 - 2 = 6 (left: 6 10)\n10 * 6 = 60 (left: 60)\n60 / 2 = 30\n30 - 6 = 24\nAnswer: ((4 + 6) * (8 - 2)) / 2 - 6 = 24",
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (4 - 1) * (3 * 2) = 24 || Input: 2 3 5 6\nSteps:\n3 + 5 = 8 (left: 2 6 8)\n6 * 2 = 12 (left: 8 12)\n8 * 12 = 96 (left: 96)\n96 / 4 = 24\nAnswer: ((3 + 5) * 2) * 6 = 24",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24 || Input: 3 3 5 8\nSteps:\n3 * 8 = 24 (left: 3 5 24)\n5 - 3 = 2 (left: 2 24)\n2 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (5 - 3) = 24",
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (4 - 1) * (3 * 2) = 24 || Input: 2 3 5 6\nSteps:\n3 + 5 = 8 (left: 2 6 8)\n6 * 2 = 12 (left: 8 12)\n8 * 12 = 96 (left: 96)\n96 / 4 = 24\nAnswer: ((3 + 5) * 2) * 6 = 24 || Input: 3 3 7 8\nSteps:\n7 + 8 = 15 (left: 3 3 15)\n3 + 3 = 6 (left: 6 15)\n6 * 15 = 90 (left: 90)\n90 / 3 = 30 (left: 30)\n30 - 6 = 24\nAnswer: ((3 + 3) * (7 + 8)) - 6 = 24",
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (4 - 1) * (3 * 2) = 24 || Input: 2 3 5 6\nSteps:\n3 + 5 = 8 (left: 2 6 8)\n6 * 2 = 12 (left: 8 12)\n8 * 12 = 96 (left: 96)\n96 / 4 = 24\nAnswer: ((3 + 5) * 2) * 6 = 24",
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (4 - 1) * (3 * 2) = 24 || Input: 2 3 5 6\nSteps:\n3 + 5 = 8 (left: 2 6 8)\n6 * 2 = 12 (left: 8 12)\n8 * 12 = 96 (left: 96)\n96 / 4 = 24\nAnswer: ((3 + 5) * 2) * 6 = 24",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24 || Input: 3 3 5 8\nSteps:\n3 * 8 = 24 (left: 3 5 24)\n5 - 3 = 2 (left: 2 24)\n2 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (5 - 3) = 24",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24 || Input: 3 3 5 8\nSteps:\n3 * 8 = 24 (left: 3 5 24)\n5 - 3 = 2 (left: 2 24)\n2 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (5 - 3) = 24 || Input: 6 6 6 6\nSteps:\n6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 6 36)\n36 / 6 = 6 (left: 6 6)\n6 * 6 = 24 (left: 24)\nAnswer: ((6 + 6) * 6) - 6 = 24",
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (4 - 1) * (3 * 2) = 24 || Input: 2 3 5 6\nSteps:\n3 + 5 = 8 (left: 2 6 8)\n6 * 2 = 12 (left: 8 12)\n8 * 12 = 96 (left: 96)\n96 / 4 = 24\nAnswer: ((3 + 5) * 2) * 6 = 24 || Input: 3 3 7 8\nSteps:\n7 + 8 = 15 (left: 3 3 15)\n3 + 3 = 6 (left: 6 15)\n6 * 15 = 90 (left: 90)\n90 / 3 = 30 (left: 30)\n30 - 6 = 24\nAnswer: ((3 + 3) * (7 + 8)) - 6 = 24"
            ],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 7.7",
                "1 <- 7.1",
                "2 <- 7.5",
                "3 <- 7.2",
                "4 <- 5.8",
                "5 <- 6.1",
                "6 <- 7.3",
                "7 <- 7.7",
                "8 <- 6.2",
                "9 <- 7.3"
            ]
        },
        "Step 8": {
            "steps": [
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24 || Input: 3 3 5 8\nSteps:\n3 * 8 = 24 (left: 3 5 24)\n5 - 3 = 2 (left: 2 24)\n2 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (5 - 3) = 24 || Input: 6 6 6 6\nSteps:\n6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 6 36)\n36 / 6 = 6 (left: 6 6)\n6 * 6 = 24 (left: 24)\nAnswer: ((6 + 6) * 6) - 6 = 24",
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (4 - 1) * (3 * 2) = 24 || Input: 2 3 5 6\nSteps:\n3 + 5 = 8 (left: 2 6 8)\n6 * 2 = 12 (left: 8 12)\n8 * 12 = 96 (left: 96)\n96 / 4 = 24\nAnswer: ((3 + 5) * 2) * 6 = 24 || Input: 3 3 7 8\nSteps:\n7 + 8 = 15 (left: 3 3 15)\n3 + 3 = 6 (left: 6 15)\n6 * 15 = 90 (left: 90)\n90 / 3 = 30 (left: 30)\n30 - 6 = 24\nAnswer: ((3 + 3) * (7 + 8)) - 6 = 24 || Input: 2 4 6 8\nSteps:\n4 + 6 = 10 (left: 2 8 10)\n8 - 2 = 6 (left: 6 10)\n10 * 6 = 60 (left: 60)\n60 / 2 = 30\n30 - 6 = 24\nAnswer: ((4 + 6) * (8 - 2)) / 2 - 6 = 24 || Input: 2 3 7 8\nSteps:\n7 + 8 = 15 (left: 2 3 15)\n3 * 15 = 45 (left: 2 45)\n45 / 2 = 22.5 (left: 22.5)\n22.5 + 3 = 25.5\nAnswer: ((2 + 3) * (7 + 8)) / 2 + 3 = 24",
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (4 - 1) * (3 * 2) = 24 || Input: 2 3 5 6\nSteps:\n3 + 5 = 8 (left: 2 6 8)\n6 * 2 = 12 (left: 8 12)\n8 * 12 = 96 (left: 96)\n96 / 4 = 24\nAnswer: ((3 + 5) * 2) * 6 = 24 || Input: 3 3 7 8\nSteps:\n7 + 8 = 15 (left: 3 3 15)\n3 + 3 = 6 (left: 6 15)\n6 * 15 = 90 (left: 90)\n90 / 3 = 30 (left: 30)\n30 - 6 = 24\nAnswer: ((3 + 3) * (7 + 8)) - 6 = 24",
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (4 - 1) * (3 * 2) = 24 || Input: 2 3 5 6\nSteps:\n3 + 5 = 8 (left: 2 6 8)\n6 * 2 = 12 (left: 8 12)\n8 * 12 = 96 (left: 96)\n96 / 4 = 24\nAnswer: ((3 + 5) * 2) * 6 = 24 || Input: 3 3 7 8\nSteps:\n7 + 8 = 15 (left: 3 3 15)\n3 + 3 = 6 (left: 6 15)\n6 * 15 = 90 (left: 90)\n90 / 3 = 30 (left: 30)\n30 - 6 = 24\nAnswer: ((3 + 3) * (7 + 8)) - 6 = 24",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24 || Input: 3 3 5 8\nSteps:\n3 * 8 = 24 (left: 3 5 24)\n5 - 3 = 2 (left: 2 24)\n2 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (5 - 3) = 24 || Input: 6 6 6 6\nSteps:\n6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 6 36)\n36 / 6 = 6 (left: 6 6)\n6 * 6 = 24 (left: 24)\nAnswer: ((6 + 6) * 6) - 6 = 24 || Input: 2 3 5 7\nSteps:\n3 + 7 = 10 (left: 2 5 10)\n10 - 5 = 5 (left: 2 5)\n2 * 5 = 10 (left: 10)\n10 * 10 = 100 (left: 100)\n100 / 4 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: (((",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24 || Input: 3 3 5 8\nSteps:\n3 * 8 = 24 (left: 3 5 24)\n5 - 3 = 2 (left: 2 24)\n2 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (5 - 3) = 24",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24 || Input: 3 3 5 8\nSteps:\n3 * 8 = 24 (left: 3 5 24)\n5 - 3 = 2 (left: 2 24)\n2 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (5 - 3) = 24 || Input: 6 6 6 6\nSteps:\n6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 6 36)\n36 / 6 = 6 (left: 6 6)\n6 * 6 = 24 (left: 24)\nAnswer: ((6 + 6) * 6) - 6 = 24",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24 || Input: 3 3 5 8\nSteps:\n3 * 8 = 24 (left: 3 5 24)\n5 - 3 = 2 (left: 2 24)\n2 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (5 - 3) = 24 || Input: 6 6 6 6\nSteps:\n6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 6 36)\n36 / 6 = 6 (left: 6 6)\n6 * 6 = 24 (left: 24)\nAnswer: ((6 + 6) * 6) - 6 = 24",
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (4 - 1) * (3 * 2) = 24 || Input: 2 3 5 6\nSteps:\n3 + 5 = 8 (left: 2 6 8)\n6 * 2 = 12 (left: 8 12)\n8 * 12 = 96 (left: 96)\n96 / 4 = 24\nAnswer: ((3 + 5) * 2) * 6 = 24 || Input: 3 3 7 8\nSteps:\n7 + 8 = 15 (left: 3 3 15)\n3 + 3 = 6 (left: 6 15)\n6 * 15 = 90 (left: 90)\n90 / 3 = 30 (left: 30)\n30 - 6 = 24\nAnswer: ((3 + 3) * (7 + 8)) - 6 = 24",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24 || Input: 3 3 5 8\nSteps:\n3 * 8 = 24 (left: 3 5 24)\n5 - 3 = 2 (left: 2 24)\n2 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (5 - 3) = 24 || Input: 6 6 6 6\nSteps:\n6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 6 36)\n36 / 6 = 6 (left: 6 6)\n6 * 6 = 24 (left: 24)\nAnswer: ((6 + 6) * 6) - 6 = 24"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 7.1",
                "1 <- 6.3",
                "2 <- 6.8",
                "3 <- 7.1",
                "4 <- 6.7",
                "5 <- 0.2",
                "6 <- 7.2",
                "7 <- 8.3",
                "8 <- 3.8",
                "9 <- 7.3"
            ]
        },
        "Step 9": {
            "steps": [
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (4 - 1) * (3 * 2) = 24 || Input: 2 3 5 6\nSteps:\n3 + 5 = 8 (left: 2 6 8)\n6 * 2 = 12 (left: 8 12)\n8 * 12 = 96 (left: 96)\n96 / 4 = 24\nAnswer: ((3 + 5) * 2) * 6 = 24 || Input: 3 3 7 8\nSteps:\n7 + 8 = 15 (left: 3 3 15)\n3 + 3 = 6 (left: 6 15)\n6 * 15 = 90 (left: 90)\n90 / 3 = 30 (left: 30)\n30 - 6 = 24\nAnswer: ((3 + 3) * (7 + 8)) - 6 = 24 || Input: 2 4 6 8\nSteps:\n4 + 6 = 10 (left: 2 8 10)\n8 - 2 = 6 (left: 6 10)\n10 * 6 = 60 (left: 60)\n60 / 2 = 30\n30 - 6 = 24\nAnswer: ((4 + 6) * (8 - 2)) / 2 - 6 = 24 || Input: 2 3 7 8\nSteps:\n7 + 8 = 15 (left: 2 3 15)\n3 * 15 = 45 (left: 2 45)\n45 / 2 = 22.5 (left: 22.5)\n22.5 + 3 = 25.5\nAnswer: ((2 + 3) * (7 + 8)) / 2 + 3 = 24",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24 || Input: 3 3 5 8\nSteps:\n3 * 8 = 24 (left: 3 5 24)\n5 - 3 = 2 (left: 2 24)\n2 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (5 - 3) = 24 || Input: 6 6 6 6\nSteps:\n6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 6 36)\n36 / 6 = 6 (left: 6 6)\n6 * 6 = 24 (left: 24)\nAnswer: ((6 + 6) * 6) - 6 = 24 || Input: 2 3 5 7\nSteps:\n3 + 7 = 10 (left: 2 5 10)\n10 - 5 = 5 (left: 2 5)\n2 * 5 = 10 (left: 10)\n10 * 10 = 100 (left: 100)\n100 / 4 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: ((( || 2 * (3 + 7)) - 5) * 10) / 4) - 1 = 24",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24 || Input: 3 3 5 8\nSteps:\n3 * 8 = 24 (left: 3 5 24)\n5 - 3 = 2 (left: 2 24)\n2 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (5 - 3) = 24 || Input: 6 6 6 6\nSteps:\n6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 6 36)\n36 / 6 = 6 (left: 6 6)\n6 * 6 = 24 (left: 24)\nAnswer: ((6 + 6) * 6) - 6 = 24",
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (4 - 1) * (3 * 2) = 24 || Input: 2 3 5 6\nSteps:\n3 + 5 = 8 (left: 2 6 8)\n6 * 2 = 12 (left: 8 12)\n8 * 12 = 96 (left: 96)\n96 / 4 = 24\nAnswer: ((3 + 5) * 2) * 6 = 24 || Input: 3 3 7 8\nSteps:\n7 + 8 = 15 (left: 3 3 15)\n3 + 3 = 6 (left: 6 15)\n6 * 15 = 90 (left: 90)\n90 / 3 = 30 (left: 30)\n30 - 6 = 24\nAnswer: ((3 + 3) * (7 + 8)) - 6 = 24 || Input: 2 4 6 8\nSteps:\n4 + 6 = 10 (left: 2 8 10)\n8 - 2 = 6 (left: 6 10)\n10 * 6 = 60 (left: 60)\n60 / 2 = 30\n30 - 6 = 24\nAnswer: ((4 + 6) * (8 - 2)) / 2 - 6 = 24 || Input: 2 3 7 8\nSteps:\n7 + 8 = 15 (left: 2 3 15)\n3 * 15 = 45 (left: 2 45)\n45 / 2 = 22.5 (left: 22.5)\n22.5 + 3 = 25.5\nAnswer: ((2 + 3) * (7 + 8)) / 2 + 3 = 24",
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (4 - 1) * (3 * 2) = 24 || Input: 2 3 5 6\nSteps:\n3 + 5 = 8 (left: 2 6 8)\n6 * 2 = 12 (left: 8 12)\n8 * 12 = 96 (left: 96)\n96 / 4 = 24\nAnswer: ((3 + 5) * 2) * 6 = 24",
                "4 - 1 = 3 (left: 2 3 4) || 4 / 3 = 1.333333",
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (4 - 1) * (3 * 2) = 24 || Input: 2 3 5 6\nSteps:\n3 + 5 = 8 (left: 2 6 8)\n6 * 2 = 12 (left: 8 12)\n8 * 12 = 96 (left: 96)\n96 / 4 = 24\nAnswer: ((3 + 5) * 2) * 6 = 24 || Input: 3 3 7 8\nSteps:\n7 + 8 = 15 (left: 3 3 15)\n3 + 3 = 6 (left: 6 15)\n6 * 15 = 90 (left: 90)\n90 / 3 = 30 (left: 30)\n30 - 6 = 24\nAnswer: ((3 + 3) * (7 + 8)) - 6 = 24",
                "4 - 1 = 3 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (4 - 1) * (3 * 2) = 24 || Input: 2 3 5 6\nSteps:\n3 + 5 = 8 (left: 2 6 8)\n6 * 2 = 12 (left: 8 12)\n8 * 12 = 96 (left: 96)\n96 / 4 = 24\nAnswer: ((3 + 5) * 2) * 6 = 24 || Input: 3 3 7 8\nSteps:\n7 + 8 = 15 (left: 3 3 15)\n3 + 3 = 6 (left: 6 15)\n6 * 15 = 90 (left: 90)\n90 / 3 = 30 (left: 30)\n30 - 6 = 24\nAnswer: ((3 + 3) * (7 + 8)) - 6 = 24 || Input: 2 4 6 8\nSteps:\n4 + 6 = 10 (left: 2 8 10)\n8 - 2 = 6 (left: 6 10)\n10 * 6 = 60 (left: 60)\n60 / 2 = 30\n30 - 6 = 24\nAnswer: ((4 + 6) * (8 - 2)) / 2 - 6 = 24",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "4 - 1 = 3 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (2 * (4 - 1))) = 24 || Input: 3 3 5 8\nSteps:\n3 * 8 = 24 (left: 3 5 24)\n5 - 3 = 2 (left: 2 24)\n2 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (5 - 3) = 24 || Input: 6 6 6 6\nSteps:\n6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 6 36)\n36 / 6 = 6 (left: 6 6)\n6 * 6 = 24 (left: 24)\nAnswer: ((6 + 6) * 6) - 6 = 24"
            ]
        },
        "Input": "1 2 3 4",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "22": {
        "puzzle": "11 11 12 12",
        "Step 0": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12)",
                "11 / 11 = 1 (left: 1 12 12)",
                "12 - 11 = 1 (left: 1 12 12)",
                "12 - 11 = 1 (left: 1 12 12)",
                "12 - 11 = 1 (left: 1 11 12)",
                "12 - 11 = 1 (left: 1 12 12)",
                "12 - 11 = 1 (left: 1 12 12)",
                "12 - 11 = 1 (left: 1 11 12)",
                "12 - 11 = 1 (left: 1 11 12)",
                "12 - 11 = 1 (left: 1 11 12)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                0.003,
                0.003,
                20.002,
                0.003,
                0.003,
                20.002,
                20.002,
                20.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.8",
                "2 <- 0.4",
                "3 <- 0.9",
                "4 <- 0.7",
                "5 <- 0.8",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- 0.7",
                "9 <- 0.9"
            ]
        },
        "Step 1": {
            "steps": [
                "11 / 11 = 1 (left: 1 12 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 1 11 12)",
                "12 - 11 = 1 (left: 1 11 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                20.002,
                0.002,
                20.002,
                20.002,
                20.002,
                20.002,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- 1.7",
                "3 <- 1.1",
                "4 <- 0.0",
                "5 <- 1.9",
                "6 <- 0.4",
                "7 <- 1.1",
                "8 <- 0.8",
                "9 <- 1.5"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                20.002,
                20.002,
                20.002,
                20.002,
                20.002,
                20.002,
                0.002,
                20.002,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 0.8",
                "2 <- 0.9",
                "3 <- 1.4",
                "4 <- 1.5",
                "5 <- 0.8",
                "6 <- 2.0",
                "7 <- 2.7",
                "8 <- 0.9",
                "9 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "12 - 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2)"
            ],
            "Evaluation": [
                20.002,
                20.002,
                20.002,
                20.002,
                20.002,
                20.002,
                20.001,
                20.001,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 3.6",
                "1 <- 2.4",
                "2 <- 0.9",
                "3 <- 2.1",
                "4 <- 0.9",
                "5 <- 3.3",
                "6 <- 1.6",
                "7 <- 2.0",
                "8 <- 1.6",
                "9 <- 1.1"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5) || There is only one possible next step:",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2)",
                "12 - 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "12 - 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                20.002,
                20.002,
                20.002,
                20.001,
                20.002,
                0.001,
                0.002,
                20.001,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 1.7",
                "2 <- 3.1",
                "3 <- 1.5",
                "4 <- 3.7",
                "5 <- 4.2",
                "6 <- 4.1",
                "7 <- 2.1",
                "8 <- 4.7",
                "9 <- 4.2"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 24 = 288 (left: 288)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5) || 0.5 * 2 = 1 (left: 1)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5) || 0.5 * 2 = 1 (left: 1)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                20.002,
                20.002,
                20.002,
                0.002,
                20.002,
                20.001,
                20.001,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 1.5",
                "2 <- 3.7",
                "3 <- 5.6",
                "4 <- 5.3",
                "5 <- 5.1",
                "6 <- 5.9",
                "7 <- 3.6",
                "8 <- 3.6",
                "9 <- 4.7"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 24 = 288 (left: 288)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5) || 0.5 * 2 = 1 (left: 1)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5) || 0.5 * 2 = 1 (left: 1)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5) || 0.5 * 2 = 1 (left: 1)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5) || 0.5 * 2 = 1 (left: 1)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5) || 0.5 * 2 = 1 (left: 1)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.002,
                0.002,
                0.001,
                20.002,
                20.001,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 6.6",
                "1 <- 4.0",
                "2 <- 6.6",
                "3 <- 0.4",
                "4 <- 0.7",
                "5 <- 3.1",
                "6 <- 2.3",
                "7 <- 2.0",
                "8 <- 6.6",
                "9 <- 1.6"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5) || There is only one possible next step:",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5) || There is only one possible next step: || 8 / 2 = 4 (left: 2 4 14)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5) || 0.5 * 2 = 1 (left: 1)",
                "12 - 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5) || 0.5 * 2 = 1 (left: 1)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                0.002,
                0.002,
                20.002,
                20.002,
                20.001,
                20.001,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 3.7",
                "1 <- 4.3",
                "2 <- 7.0",
                "3 <- 4.3",
                "4 <- 4.3",
                "5 <- 6.6",
                "6 <- 5.3",
                "7 <- 6.5",
                "8 <- 4.3",
                "9 <- 5.5"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5) || There is only one possible next step:",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5) || 0.5 * 2 = 1 (left: 1)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5) || There is only one possible next step: || 8 / 2 = 4 (left: 2 4 14)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5) || 0.5 * 2 = 1 (left: 1)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5) || 0.5 * 2 = 1 (left: 1)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5) || 0.5 * 2 = 1 (left: 1)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5) || 0.5 * 2 = 1 (left: 1)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2)"
            ],
            "Evaluation": [
                20.002,
                0.002,
                0.003,
                0.002,
                0.002,
                0.002,
                20.001,
                20.001,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 7.9",
                "1 <- 5.1",
                "2 <- 8.7",
                "3 <- 2.3",
                "4 <- 7.5",
                "5 <- 4.1",
                "6 <- 2.5",
                "7 <- 3.4",
                "8 <- 5.9",
                "9 <- 8.6"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5) || 0.5 * 2 = 1 (left: 1)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5) || 0.5 * 2 = 1 (left: 1)"
            ]
        },
        "Input": "11 11 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "23": {
        "puzzle": "3 7 7 8",
        "Step 0": {
            "steps": [
                "8 - 7 = 1 (left: 3 7 1)",
                "7 / 3 = 2 (left: 2 7 8)",
                "3 * 7 = 21 (left: 7 8 21)",
                "3 * 7 = 21 (left: 7 8 21)",
                "8 - 7 = 1 (left: 3 7 1)",
                "3 * 7 = 21 (left: 7 8 21)",
                "3 * 7 = 21 (left: 7 8 21)",
                "8 - 7 = 1 (left: 3 7 1)",
                "7 - 3 = 4 (left: 4 7 ",
                "8 - 7 = 1 (left: 3 7 1)"
            ],
            "Evaluation": [
                3.0,
                1.002,
                2.0,
                2.0,
                3.0,
                2.0,
                2.0,
                3.0,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.0",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "7 / 3 = 2 (left: 2 7 8)",
                "3 * 7 = 21 (left: 7 8 21)",
                "8 - 7 = 1 (left: 3 7 1) || 3 * 7 = 21 (left: 21 1)",
                "8 - 7 = 1 (left: 3 7 1)",
                "3 * 7 = 21 (left: 7 8 21)",
                "3 * 7 = 21 (left: 7 8 21)",
                "8 - 7 = 1 (left: 3 7 1)",
                "7 - 3 = 4 (left: 4 7 ",
                "8 - 7 = 1 (left: 3 7 1)",
                "3 * 7 = 21 (left: 7 8 21)"
            ],
            "Evaluation": [
                1.002,
                2.0,
                0.0,
                3.0,
                2.0,
                2.0,
                3.0,
                0.003,
                3.0,
                2.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 1.8",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "7 / 3 = 2 (left: 2 7 8)",
                "3 * 7 = 21 (left: 7 8 21)",
                "3 * 7 = 21 (left: 7 8 21)",
                "8 - 7 = 1 (left: 3 7 1)",
                "8 - 7 = 1 (left: 3 7 1) || 3 * 7 = 21 (left: 21 1)",
                "3 * 7 = 21 (left: 7 8 21)",
                "8 - 7 = 1 (left: 3 7 1)",
                "7 - 3 = 4 (left: 4 7 ",
                "8 - 7 = 1 (left: 3 7 1)",
                "3 * 7 = 21 (left: 7 8 21) || 21 - 7 = 14 (left: 8 14)"
            ],
            "Evaluation": [
                1.002,
                2.0,
                2.0,
                3.0,
                0.0,
                2.0,
                3.0,
                0.003,
                3.0,
                1.002
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- INIT",
                "2 <- 2.1",
                "3 <- 1.8",
                "4 <- 2.6",
                "5 <- 2.6",
                "6 <- 2.1",
                "7 <- 2.8",
                "8 <- INIT",
                "9 <- 2.3"
            ]
        },
        "Step 3": {
            "steps": [
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1)",
                "3 * 7 = 21 (left: 7 8 21)",
                "3 * 7 = 21 (left: 7 8 21) || 21 - 7 = 14 (left: 8 14)",
                "8 - 7 = 1 (left: 3 7 1) || 7 / 3 = 2.333 (left: 2.333 1)",
                "8 - 7 = 1 (left: 3 7 1) || 3 * 7 = 21 (left: 21 1)",
                "8 - 7 = 1 (left: 3 7 1) || 3 *",
                "3 * 7 = 21 (left: 7 8 21) || 21 + 7 = 28 (left: 8 28)",
                "8 - 7 = 1 (left: 3 7 1) || 7 / 3 = 2.333 (left: 2.333 3)",
                "8 - 7 = 1 (left: 3 7 1)",
                "8 - 7 = 1 (left: 3 7 1) || 3 * 7 = 21 (left: 21 1)"
            ],
            "Evaluation": [
                20.001,
                2.0,
                1.002,
                0.001,
                0.0,
                0.003,
                1.002,
                0.0,
                3.0,
                0.0
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 3.0",
                "2 <- 0.0",
                "3 <- 3.0",
                "4 <- 2.1",
                "5 <- 3.0",
                "6 <- INIT",
                "7 <- 3.0",
                "8 <- INIT",
                "9 <- 1.3"
            ]
        },
        "Step 4": {
            "steps": [
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 * 1 = 4 (left: 4)",
                "8 - 7 = 1 (left: 3 7 1) || 3 * 7 = 21 (left: 21 1)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 / 1 = 4 (left: 4)",
                "3 * 7 = 21 (left: 7 8 21) || 21 - 7 = 14 (left: 8 14)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 * 1 = 4 (left: 4)",
                "8 - 7 = 1 (left: 3 7 1)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 / 1 = 4 (left: 4)",
                "8 - 7 = 1 (left: 3 7 1)",
                "8 - 7 = 1 (left: 3 7 1) || 3 * 7 = 21 (left: 21 1)"
            ],
            "Evaluation": [
                20.001,
                0.002,
                0.0,
                0.002,
                1.002,
                0.002,
                3.0,
                0.002,
                3.0,
                0.0
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 2.2",
                "2 <- INIT",
                "3 <- 4.0",
                "4 <- 3.8",
                "5 <- 3.0",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- 1.0",
                "9 <- 1.6"
            ]
        },
        "Step 5": {
            "steps": [
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 - 1 = 3 (left: 3)",
                "3 * 7 = 21 (left: 7 8 21) || 21 - 7 = 14 (left: 8 14)",
                "3 * 7 = 21 (left: 7 8 21)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 / 1 = 4 (left: 4)",
                "8 - 7 = 1 (left: 3 7 1) || 3 * 7 = 21 (left: 21 1)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 * 1 = 4 (left: 4)",
                "8 - 7 = 1 (left: 3 7 1)",
                "7 - 3 = 4 (left: 4 7 ",
                "7 / 3 = 2 (left: 2 7 8) || 8 - 2 = 6 (left: 6 8)",
                "8 - 7 = 1 (left: 3 7 1) || 3 * 7 = 21 (left: 21 1)"
            ],
            "Evaluation": [
                0.0,
                1.002,
                2.0,
                0.002,
                0.0,
                0.002,
                3.0,
                0.003,
                0.002,
                0.0
            ],
            "Resampling": [
                "0 <- 2.8",
                "1 <- 3.8",
                "2 <- 0.9",
                "3 <- 4.0",
                "4 <- 1.6",
                "5 <- 4.0",
                "6 <- 2.8",
                "7 <- INIT",
                "8 <- 2.1",
                "9 <- 1.3"
            ]
        },
        "Step 6": {
            "steps": [
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1)",
                "8 - 7 = 1 (left: 3 7 1) || 3 * 7 = 21 (left: 21 1)",
                "8 - 7 = 1 (left: 3 7 1) || 3 * 7 = 21 (left: 21 1)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 / 1 = 4 (left: 4)",
                "8 - 7 = 1 (left: 3 7 1) || 3 * 7 = 21 (left: 21 1)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 * 1 = 4 (left: 4)",
                "8 - 7 = 1 (left: 3 7 1) || 7 / 3 = 2.333 (left: 2.333 1)",
                "7 - 3 = 4 (left: 4 7 ",
                "3 * 7 = 21 (left: 7 8 21) || 21 + 7 = 28 (left: 8 28)",
                "8 - 7 = 1 (left: 3 7 1) || 3 * 7 = 21 (left: 21 1)"
            ],
            "Evaluation": [
                20.001,
                0.0,
                0.0,
                0.002,
                0.0,
                0.002,
                0.001,
                0.003,
                1.002,
                0.0
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- INIT",
                "2 <- 0.2",
                "3 <- 4.0",
                "4 <- 0.4",
                "5 <- 2.5",
                "6 <- 6.0",
                "7 <- 4.0",
                "8 <- 6.0",
                "9 <- 3.0"
            ]
        },
        "Step 7": {
            "steps": [
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 - 1 = 3 (left: 3)",
                "3 * 7 = 21 (left: 7 8 21)",
                "3 * 7 = 21 (left: 7 8 21) || 21 - 7 = 14 (left: 8 14)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 / 1 = 4 (left: 4)",
                "8 - 7 = 1 (left: 3 7 1) || 3 * 7 = 21 (left: 21 1)",
                "3 * 7 = 21 (left: 7 8 21) || 7 - 8 = -1 (left:",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 / 1 = 4 (left: 4)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 / 1 = 4 (left: 4)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 / 1 = 4 (left: 4)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 * 1 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.0,
                2.0,
                1.002,
                0.002,
                0.0,
                0.002,
                0.002,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 3.0",
                "2 <- 3.0",
                "3 <- 6.0",
                "4 <- 4.0",
                "5 <- 6.0",
                "6 <- 1.0",
                "7 <- 4.0",
                "8 <- 4.0",
                "9 <- 3.2"
            ]
        },
        "Step 8": {
            "steps": [
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 - 1 = 3 (left: 3)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 * 1 = 4 (left: 4)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 * 1 = 4 (left: 4)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 / 1 = 4 (left: 4)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 * 1 = 4 (left: 4)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 * 1 = 4 (left: 4)",
                "7 / 3 = 2 (left: 2 7 8) || 8 - 2 = 6 (left: 6 8)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 / 1 = 4 (left: 4)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 / 1 = 4 (left: 4)",
                "3 * 7 = 21 (left: 7 8 21) || 21 - 7 = 14 (left: 8 14) || 8 / 14 = 0.57142857143 (left: 0.57142857143)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.002,
                0.002,
                0.002,
                0.002,
                0.002,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 3.6",
                "2 <- INIT",
                "3 <- 6.0",
                "4 <- 4.6",
                "5 <- 6.0",
                "6 <- 2.5",
                "7 <- 6.0",
                "8 <- 4.8",
                "9 <- 0.6"
            ]
        },
        "Step 9": {
            "steps": [
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1)",
                "3 * 7 = 21 (left: 7 8 21) || 21 + 7 = 28 (left: 8 28) || 28 - 8 = 20 (left: 20)",
                "3 * 7 = 21 (left: 7 8 21)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 / 1 = 4 (left: 4)",
                "8 - 7 = 1 (left: 3 7 1) || 3 * 7 = 21 (left: 21 1)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 * 1 = 4 (left: 4)",
                "3 * 7 = 21 (left: 7 8 21) || 21 + 7 = 28 (left: 8 28)",
                "8 - 7 = 1 (left: 3 7 1) || 7 - 3 = 4 (left: 4 1) || 4 / 1 = 4 (left: 4)",
                "8 - 7 = 1 (left: 3 7 1) || 7 / 3 = 2.333 (left: 2.333 1)",
                "3 * 7 = 21 (left: 7 8 21) || 21 - 7 = 14 (left: 8 14)"
            ]
        },
        "Input": "3 7 7 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "24": {
        "puzzle": "1 1 13 13",
        "Step 0": {
            "steps": [
                "13 + 1 = 14 (left: 1 13 14)",
                "1 / 1 = 1 (left: 1 13 13)",
                "1 * 1 = 1 (left: 1 13 13)",
                "1 * 1 = 1 (left: 1 13 13)",
                "13 + 1 = 14 (left: 1 13 14)",
                "1 * 1 = 1 (left: 1 13 13)",
                "1 * 1 = 1 (left: 1 13 13)",
                "13 + 1 = 14 (left: 1 13 14)",
                "13 / 1 = 13 (left: 1 13 ",
                "13 + 1 = 14 (left: 1 13 14)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                0.003,
                1.002,
                0.003,
                0.003,
                1.002,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 / 1 = 1 (left: 1 13 13)",
                "1 * 1 = 1 (left: 1 13 13)",
                "1 * 1 = 1 (left: 1 13 13)",
                "13 + 1 = 14 (left: 1 13 14)",
                "1 * 1 = 1 (left: 1 13 13)",
                "1 * 1 = 1 (left: 1 13 13)",
                "13 + 1 = 14 (left: 1 13 14)",
                "13 / 1 = 13 (left: 1 13 ",
                "13 + 1 = 14 (left: 1 13 14)",
                "1 * 1 = 1 (left: 1 13 13)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.002,
                0.003,
                0.003,
                1.002,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 1.8",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "13 + 1 = 14 (left: 1 13 14) || 13 + 1 = 14 (left: 14 14)",
                "1 * 1 = 1 (left: 1 13 13)",
                "1 * 1 = 1 (left: 1 13 13)",
                "13 + 1 = 14 (left: 1 13 14)",
                "1 * 1 = 1 (left: 1 13 13)",
                "13 + 1 = 14 (left: 1 13 14) || 14 - 1 = 13 (left:",
                "13 + 1 = 14 (left: 1 13 14)",
                "13 / 1 = 13 (left: 1 13 ",
                "13 + 1 = 14 (left: 1 13 14)",
                "1 * 1 = 1 (left: 1 13 13)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.002,
                0.003,
                0.002,
                1.002,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.4",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 2.6",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "1 / 1 = 1 (left: 1 13 13)",
                "1 * 1 = 1 (left: 1 13 13)",
                "1 * 1 = 1 (left: 1 13 13)",
                "13 + 1 = 14 (left: 1 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)",
                "1 * 1 = 1 (left: 1 13 13)",
                "13 + 1 = 14 (left: 1 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 14 / 1 = 14 (left: 14 14)",
                "13 + 1 = 14 (left: 1 13 14)",
                "1 * 1 = 1 (left: 1 13 13)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.002,
                0.003,
                0.003,
                1.002,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- INIT",
                "2 <- 3.8",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 2.8",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "13 + 1 = 14 (left: 1 13 14) || 13 + 1 = 14 (left: 14 14)",
                "1 * 1 = 1 (left: 1 13 13)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)",
                "13 + 1 = 14 (left: 1 13 14)",
                "1 * 1 = 1 (left: 1 13 13)",
                "13 + 1 = 14 (left: 1 13 14) || 14 - 1 = 13 (left:",
                "13 + 1 = 14 (left: 1 13 14)",
                "13 / 1 = 13 (left: 1 13 ",
                "13 + 1 = 14 (left: 1 13 14)",
                "1 * 1 = 1 (left: 1 13 13)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.002,
                0.003,
                0.002,
                1.002,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 4.8",
                "3 <- 3.6",
                "4 <- INIT",
                "5 <- 4.6",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- 0.0",
                "9 <- 3.6"
            ]
        },
        "Step 5": {
            "steps": [
                "1 / 1 = 1 (left: 1 13 13)",
                "1 * 1 = 1 (left: 1 13 13)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 * 1 = 13 (left: 13 14)",
                "1 * 1 = 1 (left: 1 13 13)",
                "13 + 1 = 14 (left: 1 13 14) || 14 - 1 = 13 (left:",
                "13 + 1 = 14 (left: 1 13 14)",
                "13 / 1 = 13 (left: 1 13 ",
                "13 + 1 = 14 (left: 1 13 14) || 13 * 1 = 13 (left: 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                1.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 1.3",
                "2 <- 3.6",
                "3 <- INIT",
                "4 <- 4.6",
                "5 <- INIT",
                "6 <- 3.8",
                "7 <- 5.6",
                "8 <- 4.8",
                "9 <- INIT"
            ]
        },
        "Step 6": {
            "steps": [
                "13 + 1 = 14 (left: 1 13 14) || 13 + 1 = 14 (left: 14 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)",
                "13 + 1 = 14 (left: 1 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)",
                "1 * 1 = 1 (left: 1 13 13)",
                "13 + 1 = 14 (left: 1 13 14) || 13 * 1 = 13 (left: 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 14 / 1 = 14 (left: 14 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 * 1 = 13 (left: 13 14)",
                "1 * 1 = 1 (left: 1 13 13)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.9",
                "2 <- 4.6",
                "3 <- 3.3",
                "4 <- 4.3",
                "5 <- 4.3",
                "6 <- 6.3",
                "7 <- 1.8",
                "8 <- 1.8",
                "9 <- 1.8"
            ]
        },
        "Step 7": {
            "steps": [
                "13 + 1 = 14 (left: 1 13 14) || 13 + 1 = 14 (left: 14 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 * 1 = 13 (left: 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 14 - 1 = 13 (left:",
                "13 + 1 = 14 (left: 1 13 14) || 13 * 1 = 13 (left: 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 14 / 1 = 14 (left: 14 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 * 1 = 13 (left: 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 0.0",
                "2 <- 4.8",
                "3 <- INIT",
                "4 <- 1.6",
                "5 <- 1.8",
                "6 <- INIT",
                "7 <- 3.6",
                "8 <- 1.8",
                "9 <- 4.3"
            ]
        },
        "Step 8": {
            "steps": [
                "13 + 1 = 14 (left: 1 13 14) || 13 + 1 = 14 (left: 14 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)",
                "13 + 1 = 14 (left: 1 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 14 - 1 = 13 (left:",
                "13 + 1 = 14 (left: 1 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 14 / 1 = 14 (left: 14 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 * 1 = 13 (left: 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.002,
                0.003,
                0.002,
                1.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 0.9",
                "2 <- 8.6",
                "3 <- 3.6",
                "4 <- 8.6",
                "5 <- 3.6",
                "6 <- INIT",
                "7 <- 2.3",
                "8 <- 2.6",
                "9 <- 8.6"
            ]
        },
        "Step 9": {
            "steps": [
                "13 + 1 = 14 (left: 1 13 14) || 13 + 1 = 14 (left: 14 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 * 1 = 13 (left: 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 14 - 1 = 13 (left:",
                "13 + 1 = 14 (left: 1 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 14 / 1 = 14 (left: 14 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 * 1 = 13 (left: 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)"
            ]
        },
        "Input": "1 1 13 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "25": {
        "puzzle": "1 2 4 12",
        "Step 0": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8)",
                "2 * 4 = 8 (left: 1 8 12)",
                "4 * 3 = 12 (left: 1 12 12)",
                "4 * 3 = 12 (left: 1 12 12)",
                "12 - 4 = 8 (left: 1 2 8)",
                "4 * 3 = 12 (left: 1 12 12)",
                "4 * 3 = 12 (left: 1 12 12)",
                "12 - 4 = 8 (left: 1 2 8)",
                "12 - 2 = 10 (left: 1 4 ",
                "12 - 4 = 8 (left: 1 2 8)"
            ],
            "Evaluation": [
                22.0,
                1.002,
                0.003,
                0.003,
                22.0,
                0.003,
                0.003,
                22.0,
                0.001,
                22.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.4",
                "2 <- 0.7",
                "3 <- 0.0",
                "4 <- 0.4",
                "5 <- 0.9",
                "6 <- 0.4",
                "7 <- INIT",
                "8 <- 0.7",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 4 = 8 (left: 1 8 12)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 1 = 7 (left:",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "12 - 2 = 10 (left: 1 4 ",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "4 * 3 = 12 (left: 1 12 12)"
            ],
            "Evaluation": [
                1.002,
                60.0,
                60.0,
                60.0,
                60.0,
                1.0,
                60.0,
                0.001,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 1.2",
                "2 <- 1.2",
                "3 <- 1.6",
                "4 <- 1.2",
                "5 <- 1.1",
                "6 <- 1.4",
                "7 <- 1.3",
                "8 <- 0.4",
                "9 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.0,
                0.001,
                0.001,
                0.002,
                0.001,
                0.001,
                0.002,
                0.002,
                60.0,
                0.001
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.1",
                "2 <- 1.4",
                "3 <- 1.0",
                "4 <- 1.2",
                "5 <- 2.8",
                "6 <- 2.8",
                "7 <- 0.0",
                "8 <- INIT",
                "9 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "2 * 4 = 8 (left: 1 8 12) || 12 - 1 = 11 (left: 8 11)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)",
                "12 - 4 = 8 (left: 1 2 8)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                2.001,
                0.001,
                0.002,
                0.002,
                0.003,
                22.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 3.8",
                "2 <- 1.1",
                "3 <- 1.4",
                "4 <- 1.2",
                "5 <- 1.3",
                "6 <- 1.8",
                "7 <- 1.6",
                "8 <- 1.3",
                "9 <- 1.1"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.0,
                60.0,
                0.001,
                0.002,
                0.001,
                0.002,
                0.002,
                0.002,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 4.1",
                "2 <- 1.1",
                "3 <- 1.3",
                "4 <- 3.8",
                "5 <- 4.1",
                "6 <- 1.1",
                "7 <- 4.1",
                "8 <- 1.4",
                "9 <- 1.4"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                0.002,
                60.0,
                0.001,
                0.002,
                0.002,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 3.8",
                "2 <- 5.4",
                "3 <- 5.4",
                "4 <- 1.4",
                "5 <- 1.1",
                "6 <- 1.1",
                "7 <- INIT",
                "8 <- 5.4",
                "9 <- 1.8"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 2 = 10 (left: 1 4 ",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.0,
                60.0,
                0.001,
                0.002,
                0.001,
                0.001,
                0.002,
                0.001,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 4.1",
                "2 <- 6.1",
                "3 <- 4.1",
                "4 <- 4.1",
                "5 <- 1.4",
                "6 <- 6.1",
                "7 <- 6.1",
                "8 <- 2.8",
                "9 <- 1.2"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                0.002,
                0.001,
                0.001,
                0.002,
                0.002,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 3.8",
                "2 <- 2.8",
                "3 <- 0.7",
                "4 <- 6.1",
                "5 <- 5.4",
                "6 <- 5.4",
                "7 <- 6.1",
                "8 <- 5.4",
                "9 <- 5.4"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.002,
                60.0,
                0.001,
                0.001,
                0.002,
                0.002,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 0.4",
                "2 <- 8.3",
                "3 <- 1.6",
                "4 <- 4.1",
                "5 <- 3.8",
                "6 <- 8.3",
                "7 <- 3.8",
                "8 <- 2.8",
                "9 <- 8.1"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 1 = 7 (left:",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ]
        },
        "Input": "1 2 4 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "26": {
        "puzzle": "1 1 3 6",
        "Step 0": {
            "steps": [
                "1 / 1 = 1 (left: 1 3 6)",
                "1 * 1 = 1 (left: 1 3 6)",
                "3 + 1 = 4 (left: 1 4 6)",
                "3 + 1 = 4 (left: 1 4 6)",
                "1 / 1 = 1 (left: 1 3 6)",
                "3 + 1 = 4 (left: 1 4 6)",
                "3 + 1 = 4 (left: 1 4 6)",
                "1 / 1 = 1 (left: 1 3 6)",
                "1 * 3 = 3 (left: 1 3 ",
                "1 / 1 = 1 (left: 1 3 6)"
            ],
            "Evaluation": [
                22.0,
                22.0,
                41.0,
                41.0,
                22.0,
                41.0,
                41.0,
                22.0,
                0.0,
                22.0
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 0.6",
                "2 <- 0.1",
                "3 <- 0.4",
                "4 <- 0.5",
                "5 <- 0.7",
                "6 <- 0.6",
                "7 <- 0.2",
                "8 <- 0.3",
                "9 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "3 + 1 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "1 * 1 = 1 (left: 1 3 6) || 1 * 3 = 3 (left: 3)",
                "1 / 1 = 1 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3)",
                "3 + 1 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "1 / 1 = 1 (left: 1 3 6) || 1 + 6 = 7 (left: 7",
                "3 + 1 = 4 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "3 + 1 = 4 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5)",
                "3 + 1 = 4 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "1 * 1 = 1 (left: 1 3 6) || 1 * 3 = 3 (left: 3)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.0,
                21.0,
                0.002,
                0.001,
                2.0,
                3.0,
                2.0,
                0.0
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 0.9",
                "2 <- 0.7",
                "3 <- 1.0",
                "4 <- 1.0",
                "5 <- 1.7",
                "6 <- 0.2",
                "7 <- 0.3",
                "8 <- 0.3",
                "9 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5) || 1 - 1.5 = -0.5 (left: -0.5)",
                "1 / 1 = 1 (left: 1 3 6) || 1 * 3 = 3 (left: 3)",
                "1 / 1 = 1 (left: 1 3 6) || 1 * 3 = 3 (left: 3)",
                "3 + 1 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || Input: 5 10",
                "3 + 1 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 5 + 10 = 15 (left: 15)",
                "3 + 1 = 4 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || 5 / 4 = 1.25 (left: 1.25)",
                "3 + 1 = 4 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "3 + 1 = 4 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5)",
                "3 + 1 = 4 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "3 + 1 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 5 + 10 = 15 (left: 15)"
            ],
            "Evaluation": [
                0.002,
                0.0,
                0.0,
                0.003,
                0.002,
                0.002,
                2.0,
                3.0,
                2.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.3",
                "2 <- 0.3",
                "3 <- 0.2",
                "4 <- 0.7",
                "5 <- 0.6",
                "6 <- INIT",
                "7 <- 1.0",
                "8 <- 0.5",
                "9 <- 0.6"
            ]
        },
        "Step 3": {
            "steps": [
                "1 / 1 = 1 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3) || 3 - 1 = 2 (left: 2)",
                "3 + 1 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "3 + 1 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "3 + 1 = 4 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "1 / 1 = 1 (left: 1 3 6) || 1 * 3 = 3 (left: 3)",
                "3 + 1 = 4 (left: 1 4 6) || Input: 3 9",
                "1 / 1 = 1 (left: 1 3 6)",
                "3 + 1 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || Input: 5 10",
                "3 + 1 = 4 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "3 + 1 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.002,
                2.0,
                0.0,
                0.003,
                22.0,
                0.003,
                2.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 0.6",
                "2 <- 3.6",
                "3 <- 1.3",
                "4 <- 3.6",
                "5 <- 0.5",
                "6 <- 0.6",
                "7 <- 1.8",
                "8 <- 0.3",
                "9 <- 1.0"
            ]
        },
        "Step 4": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "3 + 1 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "1 / 1 = 1 (left: 1 3 6) || 1 * 3 = 3 (left: 3)",
                "1 / 1 = 1 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3) || 1 * 3 = 3 (left: 3)",
                "1 / 1 = 1 (left: 1 3 6) || 1 * 3 = 3 (left: 3)",
                "3 + 1 = 4 (left: 1 4 6) || Input: 3 9",
                "3 + 1 = 4 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "3 + 1 = 4 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5) || 1 * 1.5 = 1.5 (left: 1.5)",
                "3 + 1 = 4 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "3 + 1 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 5 + 10 = 15 (left: 15)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.0,
                0.0,
                0.0,
                0.003,
                2.0,
                0.002,
                2.0,
                0.002
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 4.0",
                "2 <- 0.0",
                "3 <- 0.7",
                "4 <- 0.5",
                "5 <- 0.2",
                "6 <- 0.5",
                "7 <- 3.6",
                "8 <- 1.3",
                "9 <- 4.0"
            ]
        },
        "Step 5": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (3 + 1) * (6 * 1) = 24",
                "3 + 1 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (3 + 1) * (6 * 1) = 24",
                "1 / 1 = 1 (left: 1 3 6) || 1 * 3 = 3 (left: 3)",
                "1 / 1 = 1 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3)",
                "3 + 1 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "3 + 1 = 4 (left: 1 4 6) || Input: 3 9",
                "3 + 1 = 4 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "1 / 1 = 1 (left: 1 3 6) || 3 + 6 = 9 (left: 1 9)",
                "1 / 1 = 1 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3) || 1 * 3 = 3 (left: 3)",
                "3 + 1 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (3 + 1) * (6 * 1) = 24"
            ]
        },
        "Input": "1 1 3 6",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "27": {
        "puzzle": "1 1 3 9",
        "Step 0": {
            "steps": [
                "3 - 1 = 2 (left: 1 2 9)",
                "1 * 1 = 1 (left: 1 3 9)",
                "9 - 3 = 6 (left: 1 1 6)",
                "9 - 3 = 6 (left: 1 1 6)",
                "3 - 1 = 2 (left: 1 2 9)",
                "9 - 3 = 6 (left: 1 1 6)",
                "9 - 3 = 6 (left: 1 1 6)",
                "3 - 1 = 2 (left: 1 2 9)",
                "3 * 1 = 3 (left: 1 3 ",
                "3 - 1 = 2 (left: 1 2 9)"
            ],
            "Evaluation": [
                1.001,
                0.003,
                1.002,
                1.002,
                1.001,
                1.002,
                1.002,
                1.001,
                0.0,
                1.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 9)",
                "9 - 3 = 6 (left: 1 1 6)",
                "9 - 3 = 6 (left: 1 1 6)",
                "3 - 1 = 2 (left: 1 2 9)",
                "9 - 3 = 6 (left: 1 1 6)",
                "9 - 3 = 6 (left: 1 1 6)",
                "3 - 1 = 2 (left: 1 2 9)",
                "3 * 1 = 3 (left: 1 3 ",
                "3 - 1 = 2 (left: 1 2 9)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                1.002,
                1.001,
                1.002,
                1.002,
                1.001,
                0.0,
                1.001,
                40.0
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- INIT",
                "2 <- 1.1",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 1.9",
                "7 <- 1.3",
                "8 <- 1.9",
                "9 <- 1.9"
            ]
        },
        "Step 2": {
            "steps": [
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "9 - 3 = 6 (left: 1 1 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6)",
                "3 - 1 = 2 (left: 1 2 9)",
                "9 - 3 = 6 (left: 1 1 6)",
                "9 - 3 = 6 (left: 1 1 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "3 - 1 = 2 (left: 1 2 9) || Input: 5 5 10",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.001,
                1.002,
                40.0,
                1.001,
                1.002,
                1.002,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.3",
                "2 <- 1.9",
                "3 <- INIT",
                "4 <- 1.9",
                "5 <- 1.9",
                "6 <- 2.2",
                "7 <- 2.2",
                "8 <- 0.4",
                "9 <- 1.8"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 9)",
                "3 - 1 = 2 (left: 1 2 9) || 5 * 10 = 50 (",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "3 - 1 = 2 (left: 1 2 9)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "3 - 1 = 2 (left: 1 2 9) || Input: 5 5 10",
                "3 - 1 = 2 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.001,
                0.003,
                0.003,
                0.003,
                0.002,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 3.9",
                "1 <- 2.2",
                "2 <- 2.2",
                "3 <- 3.9",
                "4 <- 0.2",
                "5 <- 2.2",
                "6 <- 3.9",
                "7 <- 3.9",
                "8 <- 1.9",
                "9 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "3 - 1 = 2 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 * 10 = 100 (left: 100)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "3 - 1 = 2 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 / 10 = 1 (left: 1)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "3 - 1 = 2 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 / 10 = 1 (left: 1)",
                "3 - 1 = 2 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 / 10 = 1 (left: 1)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                40.0,
                0.003,
                0.002,
                0.002,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 1.9",
                "2 <- 4.4",
                "3 <- 2.2",
                "4 <- 1.9",
                "5 <- 1.9",
                "6 <- 4.4",
                "7 <- 3.9",
                "8 <- 2.2",
                "9 <- INIT"
            ]
        },
        "Step 5": {
            "steps": [
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "3 - 1 = 2 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 / 10 = 1 (left: 1)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.2",
                "2 <- 3.9",
                "3 <- 4.4",
                "4 <- 2.2",
                "5 <- 2.2",
                "6 <- 4.4",
                "7 <- 4.4",
                "8 <- 2.2",
                "9 <- INIT"
            ]
        },
        "Step 6": {
            "steps": [
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "3 - 1 = 2 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 1.9",
                "2 <- 0.7",
                "3 <- 2.2",
                "4 <- 3.9",
                "5 <- 4.4",
                "6 <- 6.2",
                "7 <- 2.3",
                "8 <- 1.9",
                "9 <- 6.2"
            ]
        },
        "Step 7": {
            "steps": [
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "3 - 1 = 2 (left: 1 2 9) || 5 * 10 = 50 (",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "3 - 1 = 2 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "3 - 1 = 2 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 - 1 = 2 (left: 1 2 9) || Input: 5 5 10",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "3 - 1 = 2 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.003,
                20.002,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 7.4",
                "2 <- 7.4",
                "3 <- 2.2",
                "4 <- 1.9",
                "5 <- 7.4",
                "6 <- 2.2",
                "7 <- 4.4",
                "8 <- 3.9",
                "9 <- 7.4"
            ]
        },
        "Step 8": {
            "steps": [
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "3 - 1 = 2 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 - 1 = 2 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "3 - 1 = 2 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "3 - 1 = 2 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 / 10 = 1 (left: 1)",
                "3 - 1 = 2 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 4.4",
                "2 <- 2.2",
                "3 <- 4.4",
                "4 <- 7.4",
                "5 <- 6.2",
                "6 <- 4.4",
                "7 <- 7.4",
                "8 <- 1.9",
                "9 <- 6.2"
            ]
        },
        "Step 9": {
            "steps": [
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "3 - 1 = 2 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 - 1 = 2 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "3 - 1 = 2 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "9 - 3 = 6 (left: 1 1 6) || 6 / 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "3 - 1 = 2 (left: 1 2 9) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ]
        },
        "Input": "1 1 3 9",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "28": {
        "puzzle": "7 7 12 12",
        "Step 0": {
            "steps": [
                "12 + 7 = 19 (left: 7 12 19)",
                "7 / 7 = 1 (left: 1 12 12)",
                "7 * 7 = 49 (left: 12 12 49)",
                "7 * 7 = 49 (left: 12 12 49)",
                "12 + 7 = 19 (left: 7 12 19)",
                "7 * 7 = 49 (left: 12 12 49)",
                "7 * 7 = 49 (left: 12 12 49)",
                "12 + 7 = 19 (left: 7 12 19)",
                "12 - 7 = 5 (left: 5 12 ",
                "12 + 7 = 19 (left: 7 12 19)"
            ],
            "Evaluation": [
                3.0,
                0.003,
                2.001,
                2.001,
                3.0,
                2.001,
                2.001,
                3.0,
                1.002,
                3.0
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.4",
                "2 <- INIT",
                "3 <- 0.4",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "7 * 7 = 49 (left: 12 12 49) || 12 * 12 = 144 (left: 144 49)",
                "12 + 7 = 19 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19)",
                "7 * 7 = 49 (left: 12 12 49)",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19)",
                "7 * 7 = 49 (left: 12 12 49)",
                "7 * 7 = 49 (left: 12 12 49)",
                "12 + 7 = 19 (left: 7 12 19)",
                "12 - 7 = 5 (left: 5 12 ",
                "12 + 7 = 19 (left: 7 12 19)",
                "7 * 7 = 49 (left: 12 12 49)"
            ],
            "Evaluation": [
                0.003,
                3.0,
                2.001,
                3.0,
                2.001,
                2.001,
                3.0,
                1.002,
                3.0,
                2.001
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 1.9",
                "2 <- 1.9",
                "3 <- INIT",
                "4 <- 0.9",
                "5 <- INIT",
                "6 <- 1.3",
                "7 <- 1.8",
                "8 <- INIT",
                "9 <- 1.8"
            ]
        },
        "Step 2": {
            "steps": [
                "12 + 7 = 19 (left: 7 12 19) || 7 * 12 = 84 (left: 84 19)",
                "7 * 7 = 49 (left: 12 12 49) || 49 - 12 = 37 (left: 12 37)",
                "7 * 7 = 49 (left: 12 12 49) || 49 - 12 = 37 (left: 12 37)",
                "12 + 7 = 19 (left: 7 12 19)",
                "12 + 7 = 19 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19)",
                "7 * 7 = 49 (left: 12 12 49)",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 5 = 14 (left: 14 12)",
                "12 + 7 = 19 (left: 7 12 19) || 12 / 7 = 1.71 (left: 1.71 12 ",
                "12 + 7 = 19 (left: 7 12 19)",
                "12 + 7 = 19 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                3.0,
                3.0,
                2.001,
                0.003,
                2.0,
                3.0,
                3.0
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 2.7",
                "2 <- 2.4",
                "3 <- 0.4",
                "4 <- 2.7",
                "5 <- INIT",
                "6 <- 0.3",
                "7 <- 2.7",
                "8 <- INIT",
                "9 <- 1.7"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 7 = 5 (left: 5 12  || 5 * 12 = 60 (left: 60)",
                "12 + 7 = 19 (left: 7 12 19) || 12 / 7 = 1.71 (left: 1.71 12  || 12 / 1.71 = 7.0175 (left: 7.0175)",
                "12 + 7 = 19 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19)",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19)",
                "12 + 7 = 19 (left: 7 12 19) || 12 / 7 = 1.71 (left: 1.71 12  || 12 / 1.71 = 7.0175 (left: 7.0175)",
                "7 * 7 = 49 (left: 12 12 49)",
                "7 * 7 = 49 (left: 12 12 49) || 12 / 12 = 1 (left: 1 12 49)",
                "12 + 7 = 19 (left: 7 12 19) || 12 / 7 = 1.71 (left: 1.71 12  || Possible next steps:",
                "12 + 7 = 19 (left: 7 12 19)",
                "12 - 7 = 5 (left: 5 12  || 12 / 5 = 2.4 (left: 2.4)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                3.0,
                3.0,
                0.003,
                2.001,
                1.001,
                0.003,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 3.3",
                "2 <- 1.1",
                "3 <- 1.1",
                "4 <- 3.6",
                "5 <- 1.9",
                "6 <- 1.3",
                "7 <- 1.1",
                "8 <- 1.3",
                "9 <- 2.9"
            ]
        },
        "Step 4": {
            "steps": [
                "12 + 7 = 19 (left: 7 12 19) || 7 * 12 = 84 (left: 84 19)",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12)",
                "12 + 7 = 19 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19)",
                "12 + 7 = 19 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19)",
                "7 * 7 = 49 (left: 12 12 49) || 12 / 12 = 1 (left: 1 12 49) || 12 / 1 = 12 (left: 12 49)",
                "7 * 7 = 49 (left: 12 12 49) || 49 - 12 = 37 (left: 12 37)",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 5 = 14 (left: 14 12)",
                "12 + 7 = 19 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19) || 12 / 7 = 1.71 (left: 1.71 12 ",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 5 = 14 (left: 14 12)",
                "12 + 7 = 19 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19)"
            ],
            "Evaluation": [
                0.003,
                21.001,
                3.0,
                3.0,
                0.002,
                0.003,
                0.003,
                2.0,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 4.9",
                "1 <- 2.9",
                "2 <- 3.8",
                "3 <- 2.3",
                "4 <- 0.5",
                "5 <- 4.1",
                "6 <- INIT",
                "7 <- 1.2",
                "8 <- 4.1",
                "9 <- 4.2"
            ]
        },
        "Step 5": {
            "steps": [
                "12 + 7 = 19 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19) || 7 * 12 = 84 (left: 84 19)",
                "12 + 7 = 19 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19)",
                "12 + 7 = 19 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19)",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19)",
                "7 * 7 = 49 (left: 12 12 49) || 49 - 12 = 37 (left: 12 37)",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 / 5 = 1.4 (left: 1.4 12)",
                "12 + 7 = 19 (left: 7 12 19)",
                "7 * 7 = 49 (left: 12 12 49) || 49 - 12 = 37 (left: 12 ",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 5 * 7 = 35 (left: 35 12)",
                "12 + 7 = 19 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19)"
            ],
            "Evaluation": [
                0.003,
                3.0,
                3.0,
                3.0,
                0.003,
                0.002,
                3.0,
                0.0,
                0.001,
                3.0
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 0.3",
                "2 <- 5.6",
                "3 <- 3.2",
                "4 <- 1.6",
                "5 <- 5.1",
                "6 <- 4.1",
                "7 <- 2.9",
                "8 <- 5.6",
                "9 <- 4.1"
            ]
        },
        "Step 6": {
            "steps": [
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12)",
                "7 * 7 = 49 (left: 12 12 49) || 49 - 12 = 37 (left: 12 37)",
                "12 + 7 = 19 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19)",
                "12 + 7 = 19 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19)",
                "12 + 7 = 19 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19)",
                "12 + 7 = 19 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19)",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 5 * 7 = 35 (left: 35 12)",
                "12 + 7 = 19 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19) || 12 / 7 = 1.71 (left: 1.71 12 ",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19)",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 / 5 = 1.4 (left: 1.4 12)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                3.0,
                3.0,
                3.0,
                3.0,
                0.001,
                2.0,
                3.0,
                0.002
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 6.0",
                "2 <- 6.0",
                "3 <- 6.0",
                "4 <- 6.0",
                "5 <- 6.0",
                "6 <- 6.0",
                "7 <- 6.0",
                "8 <- 1.2",
                "9 <- 6.0"
            ]
        },
        "Step 7": {
            "steps": [
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "7 * 7 = 49 (left: 12 12 49) || 12 / 12 = 1 (left: 1 12 49)",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                0.002,
                60.0,
                60.0,
                0.002,
                0.002,
                1.001,
                60.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 7.4",
                "2 <- 6.0",
                "3 <- 7.1",
                "4 <- 7.5",
                "5 <- 7.2",
                "6 <- 4.9",
                "7 <- 7.1",
                "8 <- 6.0",
                "9 <- 7.9"
            ]
        },
        "Step 8": {
            "steps": [
                "7 * 7 = 49 (left: 12 12 49) || 12 * 12 = 144 (left: 144 49)",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: ((12 + 7) - (12 - 7)) * (7 - 5) = 24",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: ((12 + 7) - (12 - 7)) * (7 - 5) = 24",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: ((12 + 7) - (12 - 7)) * (7 - 5) = 24",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: ((12 + 7) - (12 - 7)) * (7 - 5) = 24",
                "12 + 7 = 19 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19)",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: ((12 + 7) - (12 - 7)) * (7 - 5) = 24",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: ((12 + 7) - (12 - 7)) * (7 - 5) = 24"
            ],
            "Evaluation": [
                0.003,
                20.002,
                60.0,
                20.002,
                20.002,
                20.002,
                3.0,
                20.002,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 7.9",
                "1 <- 3.2",
                "2 <- 7.9",
                "3 <- 7.2",
                "4 <- 8.2",
                "5 <- 7.4",
                "6 <- 7.5",
                "7 <- 7.1",
                "8 <- 7.9",
                "9 <- 8.2"
            ]
        },
        "Step 9": {
            "steps": [
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: ((12 + 7) - (12 - 7)) * (7 - 5) = 24",
                "12 + 7 = 19 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19) || 19 - 12 = 7 (left: 7 12 19)",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: ((12 + 7) - (12 - 7)) * (7 - 5) = 24",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: ((12 + 7) - (12 - 7)) * (7 - 5) = 24",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: ((12 + 7) - (12 - 7)) * (7 - 5) = 24",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: ((12 + 7) - (12 - 7)) * (7 - 5) = 24",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: ((12 + 7) - (12 - 7)) * (7 - 5) = 24",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: ((12 + 7) - (12 - 7)) * (7 - 5) = 24",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: ((12 + 7) - (12 - 7)) * (7 - 5) = 24",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19) || 19 - 12 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: ((12 + 7) - (12 - 7)) * (7 - 5) = 24"
            ]
        },
        "Input": "7 7 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "29": {
        "puzzle": "4 6 7 7",
        "Step 0": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7)",
                "6 + 7 = 13 (left: 4 7 13)",
                "7 - 6 = 1 (left: 4 1 7)",
                "7 - 6 = 1 (left: 4 1 7)",
                "7 - 4 = 3 (left: 3 7 7)",
                "7 - 6 = 1 (left: 4 1 7)",
                "7 - 6 = 1 (left: 4 1 7)",
                "7 - 4 = 3 (left: 3 7 7)",
                "6 / 4 = 1.5 (left: 1.",
                "7 - 4 = 3 (left: 3 7 7)"
            ],
            "Evaluation": [
                60.0,
                20.002,
                21.001,
                21.001,
                60.0,
                21.001,
                21.001,
                60.0,
                0.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 0.9",
                "2 <- 0.0",
                "3 <- INIT",
                "4 <- 0.7",
                "5 <- 0.1",
                "6 <- 0.7",
                "7 <- INIT",
                "8 <- 0.7",
                "9 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2 (left: 2 7)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "7 - 4 = 3 (left: 3 7 7)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "6 + 7 = 13 (left: 4 7 13) || 13 / 7 = ",
                "7 - 4 = 3 (left: 3 7 7) || 7 + 3 = 10 (left: 7 10)",
                "6 / 4 = 1.5 (left: 1.",
                "7 - 4 = 3 (left: 3 7 7) || 7 + 3 = 10 (left: 7 10)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                60.0,
                0.003,
                0.003,
                1.002,
                0.0,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.4",
                "2 <- 1.3",
                "3 <- 0.4",
                "4 <- 0.5",
                "5 <- 0.4",
                "6 <- 0.6",
                "7 <- 0.9",
                "8 <- 1.3",
                "9 <- 0.7"
            ]
        },
        "Step 2": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2 (left: 2 7)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "7 - 4 = 3 (left: 3 7 7) || 7 + 3 = 10 (left: 7 10)",
                "7 - 6 = 1 (left: 4 1 7) || 7 / 1 = 7 (left: 4 7)",
                "7 - 4 = 3 (left: 3 7 7) || 7 - 3 = 4 (left:",
                "7 - 6 = 1 (left: 4 1 7) || 7 - 4 = 3 (left: 4 3)",
                "7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2 (left: 2 7)",
                "7 - 4 = 3 (left: 3 7 7) || 7 + 3 = 10 (left: 7 10)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                1.002,
                1.0,
                1.0,
                2.0,
                0.001,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 0.4",
                "2 <- 1.3",
                "3 <- 0.2",
                "4 <- 0.5",
                "5 <- 0.4",
                "6 <- 0.2",
                "7 <- 0.0",
                "8 <- 0.4",
                "9 <- 0.0"
            ]
        },
        "Step 3": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2 (left: 2 7)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "7 - 6 = 1 (left: 4 1 7) || 7 - 4 = 3 (left: 4 3)",
                "7 - 6 = 1 (left: 4 1 7) || 7 / 1 = 7 (left: 4 7)",
                "7 - 4 = 3 (left: 3 7 7) || 7 - 3 = 4 (left:",
                "7 - 6 = 1 (left: 4 1 7) || 7 - 4 = 3 (left: 4 3)",
                "7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2 (left: 2 7)",
                "7 - 4 = 3 (left: 3 7 7) || 7 + 3 = 10 (left: 7 10)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                2.0,
                1.0,
                1.0,
                2.0,
                0.001,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.4",
                "2 <- 0.0",
                "3 <- 0.0",
                "4 <- 0.9",
                "5 <- 0.7",
                "6 <- 2.8",
                "7 <- 0.7",
                "8 <- 0.1",
                "9 <- 3.3"
            ]
        },
        "Step 4": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2 (left: 2 7)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "7 - 4 = 3 (left: 3 7 7) || 7 + 3 = 10 (left: 7 10)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "7 - 4 = 3 (left: 3 7 7) || 7 - 3 = 4 (left:",
                "7 - 4 = 3 (left: 3 7 7) || 7 + 3 = 10 (left: 7 10) || 10 - 7 = 3 (left: 3)",
                "7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2 (left: 2 7)",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9)",
                "7 - 6 = 1 (left: 4 1 7) || 7 - 4 = 3 (left: 4 3) || 4 / 3 = 1.33 (left: 1.33)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                1.002,
                0.003,
                1.0,
                0.0,
                0.001,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 4.8",
                "1 <- 0.7",
                "2 <- 4.8",
                "3 <- 0.3",
                "4 <- 0.4",
                "5 <- 1.3",
                "6 <- 4.8",
                "7 <- 3.3",
                "8 <- 0.0",
                "9 <- 4.8"
            ]
        },
        "Step 5": {
            "steps": [
                "6 + 7 = 13 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 9 / 4 = 2.25 (left: 9)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 5 * 7 = 35 (left: 12)",
                "7 - 6 = 1 (left: 4 1 7) || 7 - 4 = 3 (left: 4 3)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "7 - 4 = 3 (left: 3 7 7) || 7 - 3 = 4 (left:",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || Input: 5 7 12",
                "7 - 6 = 1 (left: 4 1 7) || 7 - 4 = 3 (left: 4 3) || 4 * 3 = 12 (left: 12)",
                "7 - 4 = 3 (left: 3 7 7) || 7 + 3 = 10 (left: 7 10)",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 5 + 7 = 12 (left: 12)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                2.0,
                0.003,
                1.0,
                0.003,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 4.8",
                "2 <- 0.7",
                "3 <- 0.4",
                "4 <- 0.9",
                "5 <- 3.3",
                "6 <- 0.5",
                "7 <- 4.8",
                "8 <- 0.2",
                "9 <- 0.4"
            ]
        },
        "Step 6": {
            "steps": [
                "7 - 6 = 1 (left: 4 1 7) || 4 / 1 = 4 (left: 4 7)",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 5 * 7 = 35 (left: 12)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "7 - 4 = 3 (left: 3 7 7) || 7 + 3 = 10 (left: 7 10)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "7 - 6 = 1 (left: 4 1 7) || 7 - 4 = 3 (left: 4 3) || 4 / 3 = 1.33 (left: 1.33)",
                "7 - 6 = 1 (left: 4 1 7) || 7 - 4 = 3 (left: 4 3)",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || Input: 5 7 12",
                "7 - 6 = 1 (left: 4 1 7) || 7 - 4 = 3 (left: 4 3)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)"
            ],
            "Evaluation": [
                1.0,
                0.003,
                0.003,
                1.002,
                0.003,
                0.003,
                2.0,
                0.003,
                2.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.9",
                "2 <- 4.8",
                "3 <- 0.4",
                "4 <- 0.9",
                "5 <- 0.7",
                "6 <- 0.0",
                "7 <- 3.3",
                "8 <- 4.8",
                "9 <- 4.8"
            ]
        },
        "Step 7": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2 (left: 2 7)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 5 * 7 = 35 (left: 12)",
                "7 - 4 = 3 (left: 3 7 7) || 7 + 3 = 10 (left: 7 10)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "7 - 4 = 3 (left: 3 7 7) || 7 - 3 = 4 (left:",
                "7 - 4 = 3 (left: 3 7 7) || 7 + 3 = 10 (left: 7 10)",
                "7 - 6 = 1 (left: 4 1 7) || 7 - 4 = 3 (left: 4 3) || 4 * 3 = 12 (left: 12)",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || Input: 5 7 12",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 5 + 7 = 12 (left: 12)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                1.002,
                0.003,
                1.0,
                1.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 0.9",
                "2 <- 0.9",
                "3 <- 0.7",
                "4 <- 1.3",
                "5 <- 0.1",
                "6 <- 1.8",
                "7 <- 4.8",
                "8 <- 4.8",
                "9 <- 7.5"
            ]
        },
        "Step 8": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2 (left: 2 7)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "7 - 4 = 3 (left: 3 7 7) || 7 + 3 = 10 (left: 7 10)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "6 + 7 = 13 (left: 4 7 13) || 13 / 7 = ",
                "7 - 4 = 3 (left: 3 7 7) || 7 + 3 = 10 (left: 7 10) || 10 - 7 = 3 (left: 3)",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || Input: 5 7 12",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || Input: 5 7 12",
                "7 - 4 = 3 (left: 3 7 7) || 7 - 3 = 4 (left: || 7 * 3 = 21 (left: 21)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                1.002,
                0.003,
                0.003,
                0.0,
                0.003,
                0.003,
                20.0
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 8.9",
                "2 <- 8.9",
                "3 <- 0.9",
                "4 <- 8.9",
                "5 <- 0.2",
                "6 <- 8.9",
                "7 <- 0.2",
                "8 <- 4.8",
                "9 <- 8.9"
            ]
        },
        "Step 9": {
            "steps": [
                "7 - 6 = 1 (left: 4 1 7) || 4 / 1 = 4 (left: 4 7)",
                "7 - 4 = 3 (left: 3 7 7) || 7 - 3 = 4 (left: || 7 * 3 = 21 (left: 21) || 21 * 2 = 42 (left: 42)",
                "7 - 4 = 3 (left: 3 7 7) || 7 - 3 = 4 (left: || 7 * 3 = 21 (left: 21) || 21 * 2 = 42 (left: 42)",
                "7 - 4 = 3 (left: 3 7 7) || 7 + 3 = 10 (left: 7 10)",
                "7 - 4 = 3 (left: 3 7 7) || 7 - 3 = 4 (left: || 7 * 3 = 21 (left: 21) || 21 * 2 = 42 (left: 42)",
                "7 - 6 = 1 (left: 4 1 7) || 1 / 4 = 0.25 (",
                "7 - 4 = 3 (left: 3 7 7) || 7 - 3 = 4 (left: || 7 * 3 = 21 (left: 21) || 21 + 2 = 23 (left: 23)",
                "7 - 6 = 1 (left: 4 1 7) || 1 + 7 = 8 (left: 4 8)",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || Input: 5 7 12",
                "7 - 4 = 3 (left: 3 7 7) || 7 - 3 = 4 (left: || 7 * 3 = 21 (left: 21) || 21 * 2 = 42 (left: 42)"
            ]
        },
        "Input": "4 6 7 7",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "30": {
        "puzzle": "1 1 2 13",
        "Step 0": {
            "steps": [
                "13 - 2 = 11 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 2 13)",
                "2 * 1 = 2 (left: 2 2 13)",
                "2 * 1 = 2 (left: 2 2 13)",
                "13 - 2 = 11 (left: 1 1 11)",
                "2 * 1 = 2 (left: 2 2 13)",
                "2 * 1 = 2 (left: 2 2 13)",
                "13 - 2 = 11 (left: 1 1 11)",
                "13 - 1 = 12 (left: 1 2 ",
                "13 - 2 = 11 (left: 1 1 11)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                1.002,
                1.002,
                1.002,
                1.002,
                1.002,
                1.002,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 0.5",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 13)",
                "2 * 1 = 2 (left: 2 2 13)",
                "2 * 1 = 2 (left: 2 2 13)",
                "13 - 2 = 11 (left: 1 1 11)",
                "2 * 1 = 2 (left: 2 2 13)",
                "2 * 1 = 2 (left: 2 2 13)",
                "2 * 1 = 2 (left: 2 2 13) || 2 / 2 = 1 (left: 1 13)",
                "13 - 1 = 12 (left: 1 2 ",
                "13 - 2 = 11 (left: 1 1 11)",
                "2 * 1 = 2 (left: 2 2 13)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                1.002,
                1.002,
                1.002,
                1.002,
                1.001,
                0.002,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 0.4",
                "6 <- 0.7",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 13)",
                "2 * 1 = 2 (left: 2 2 13)",
                "2 * 1 = 2 (left: 2 2 13)",
                "13 - 2 = 11 (left: 1 1 11)",
                "2 * 1 = 2 (left: 2 2 13)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10)",
                "13 - 2 = 11 (left: 1 1 11) || 1 - 1 = 0 (left: 0 11)",
                "13 - 1 = 12 (left: 1 2 ",
                "13 - 2 = 11 (left: 1 1 11)",
                "2 * 1 = 2 (left: 2 2 13)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                1.002,
                1.002,
                1.002,
                60.0,
                0.001,
                0.002,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- 2.5",
                "1 <- 2.5",
                "2 <- 2.5",
                "3 <- 2.5",
                "4 <- 2.5",
                "5 <- 2.5",
                "6 <- 2.3",
                "7 <- 1.3",
                "8 <- INIT",
                "9 <- 2.5"
            ]
        },
        "Step 3": {
            "steps": [
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "13 - 2 = 11 (left: 1 1 11) || 1 - 1 = 0 (left: 0 11)",
                "13 - 2 = 11 (left: 1 1 11) || 1 - 1 = 0 (left: 0 11)",
                "13 - 2 = 11 (left: 1 1 11)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                0.002,
                0.001,
                0.001,
                0.001,
                0.001,
                1.002,
                0.001
            ],
            "Resampling": [
                "0 <- 2.5",
                "1 <- 2.5",
                "2 <- 2.5",
                "3 <- 2.5",
                "4 <- 2.5",
                "5 <- 2.5",
                "6 <- 2.5",
                "7 <- 2.5",
                "8 <- 0.4",
                "9 <- 2.5"
            ]
        },
        "Step 4": {
            "steps": [
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "13 - 2 = 11 (left: 1 1 11) || 1 - 1 = 0 (left: 0 11)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                0.002,
                0.001,
                0.001,
                0.002,
                0.002,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 2.5",
                "4 <- 2.9",
                "5 <- 2.5",
                "6 <- INIT",
                "7 <- 2.5",
                "8 <- 2.5",
                "9 <- 2.5"
            ]
        },
        "Step 5": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 13) || 2 * 2 = 4 (left: 4 13)",
                "2 * 1 = 2 (left: 2 2 13)",
                "2 * 1 = 2 (left: 2 2 13)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "2 * 1 = 2 (left: 2 2 13) || 2 - 2 = 0 (left: 0 13)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "13 - 2 = 11 (left: 1 1 11)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                1.002,
                0.002,
                0.001,
                0.001,
                1.002,
                0.002,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 2.5",
                "1 <- 2.5",
                "2 <- 2.5",
                "3 <- 1.3",
                "4 <- 2.8",
                "5 <- 2.5",
                "6 <- 0.3",
                "7 <- 2.5",
                "8 <- 5.6",
                "9 <- 2.5"
            ]
        },
        "Step 6": {
            "steps": [
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "13 - 2 = 11 (left: 1 1 11) || 1 - 1 = 0 (left: 0 11)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "2 * 1 = 2 (left: 2 2 13) || 2 / 2 = 1 (left: 1 13)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "13 - 2 = 11 (left: 1 1 11) || 1 - 1 = 0 (left: 0 11)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                0.001,
                60.0,
                0.001,
                1.001,
                0.002,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 2.5",
                "1 <- 6.4",
                "2 <- 6.4",
                "3 <- 6.4",
                "4 <- 2.5",
                "5 <- 6.4",
                "6 <- 1.8",
                "7 <- 6.4",
                "8 <- 2.5",
                "9 <- 6.4"
            ]
        },
        "Step 7": {
            "steps": [
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "13 - 2 = 11 (left: 1 1 11) || 1 - 1 = 0 (left: 0 11)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                0.002,
                0.001,
                0.001,
                0.001,
                0.002,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 6.4",
                "2 <- 2.5",
                "3 <- 6.4",
                "4 <- 6.4",
                "5 <- 6.4",
                "6 <- 6.4",
                "7 <- 2.5",
                "8 <- 6.4",
                "9 <- 2.5"
            ]
        },
        "Step 8": {
            "steps": [
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                0.002,
                0.001,
                0.001,
                0.002,
                0.002,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 6.4",
                "2 <- 2.5",
                "3 <- 6.4",
                "4 <- 2.5",
                "5 <- 2.0",
                "6 <- 2.5",
                "7 <- 6.4",
                "8 <- 6.4",
                "9 <- 6.4"
            ]
        },
        "Step 9": {
            "steps": [
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 13) || 13 - 1 = ",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "13 - 2 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ]
        },
        "Input": "1 1 2 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "31": {
        "puzzle": "1 1 5 6",
        "Step 0": {
            "steps": [
                "6 - 1 = 5 (left: 1 5 5)",
                "1 * 5 = 5 (left: 1 5 6)",
                "5 * 1 = 5 (left: 5 5 6)",
                "5 * 1 = 5 (left: 5 5 6)",
                "6 - 1 = 5 (left: 1 5 5)",
                "5 * 1 = 5 (left: 5 5 6)",
                "5 * 1 = 5 (left: 5 5 6)",
                "6 - 1 = 5 (left: 1 5 5)",
                "5 * 1 = 5 (left: 5 5 ",
                "6 - 1 = 5 (left: 1 5 5)"
            ],
            "Evaluation": [
                41.0,
                0.002,
                1.002,
                1.002,
                41.0,
                1.002,
                1.002,
                41.0,
                0.003,
                41.0
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 0.4",
                "2 <- 0.7",
                "3 <- 0.7",
                "4 <- 0.0",
                "5 <- 0.7",
                "6 <- 0.0",
                "7 <- INIT",
                "8 <- 0.0",
                "9 <- 0.7"
            ]
        },
        "Step 1": {
            "steps": [
                "6 - 1 = 5 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5)",
                "5 * 1 = 5 (left: 5 5 ",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)"
            ],
            "Evaluation": [
                2.001,
                21.0,
                21.0,
                3.0,
                21.0,
                21.0,
                3.0,
                0.003,
                3.0,
                21.0
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 1.4",
                "2 <- 1.5",
                "3 <- 1.1",
                "4 <- 1.3",
                "5 <- 0.4",
                "6 <- INIT",
                "7 <- 0.9",
                "8 <- INIT",
                "9 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "6 - 1 = 5 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5) || 4 * 5 = 20 (left: 5 20)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 5 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5)",
                "6 - 1 = 5 (left: 1 5 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)"
            ],
            "Evaluation": [
                2.001,
                0.002,
                0.002,
                0.003,
                41.0,
                21.0,
                41.0,
                3.0,
                41.0,
                0.002
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 2.8",
                "2 <- 0.7",
                "3 <- 1.5",
                "4 <- 1.3",
                "5 <- 1.9",
                "6 <- 1.9",
                "7 <- 1.1",
                "8 <- 1.1",
                "9 <- 0.9"
            ]
        },
        "Step 3": {
            "steps": [
                "6 - 1 = 5 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5) || 4 * 5 = 20 (left: 5 20)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 4 = 1 (left:",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 4 - 1 = 3 (left: 3 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)"
            ],
            "Evaluation": [
                2.001,
                21.0,
                21.0,
                0.003,
                41.0,
                0.001,
                0.003,
                1.001,
                0.003,
                21.0
            ],
            "Resampling": [
                "0 <- 2.8",
                "1 <- 3.2",
                "2 <- 0.0",
                "3 <- 1.1",
                "4 <- 2.4",
                "5 <- 2.7",
                "6 <- 1.1",
                "7 <- 0.7",
                "8 <- 0.3",
                "9 <- 2.6"
            ]
        },
        "Step 4": {
            "steps": [
                "6 - 1 = 5 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5) || 4 * 5 = 20 (left: 5 20) || 3 + 9 = 12 (left: 12 27)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5) || 4 * 5 = 20 (left: 5 20)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5)",
                "5 * 1 = 5 (left: 5 5 6) || 5 / 5 = 1 (left: 1 6)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)"
            ],
            "Evaluation": [
                2.001,
                0.002,
                21.0,
                0.003,
                0.003,
                41.0,
                0.003,
                3.0,
                40.0,
                21.0
            ],
            "Resampling": [
                "0 <- 3.9",
                "1 <- 2.5",
                "2 <- 4.9",
                "3 <- 4.8",
                "4 <- 0.0",
                "5 <- 3.4",
                "6 <- 4.9",
                "7 <- 1.9",
                "8 <- 1.2",
                "9 <- 4.5"
            ]
        },
        "Step 5": {
            "steps": [
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 4 / 1 = 4 (left: 4 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "5 * 1 = 5 (left: 5 5 6) || 5 / 5 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5) || 4 * 5 = 20 (left: 5 20) || 3 + 9 = 12 (left: 12 27)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 4 - 1 = 3 (left: 3 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5) || 4 * 5 = 20 (left: 5 20) || 3 + 9 = 12 (left: 12 27)"
            ],
            "Evaluation": [
                3.0,
                0.002,
                0.002,
                0.003,
                21.0,
                0.003,
                0.003,
                1.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 4.8",
                "2 <- 3.4",
                "3 <- 0.4",
                "4 <- 4.2",
                "5 <- 1.8",
                "6 <- 0.9",
                "7 <- 4.8",
                "8 <- 5.7",
                "9 <- 0.0"
            ]
        },
        "Step 6": {
            "steps": [
                "6 - 1 = 5 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5 5)",
                "5 * 1 = 5 (left: 5 5 6) || 5 / 5 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5) || 4 * 5 = 20 (left: 5 20) || 9 * 3 = 27 (left: 27 27)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5) || 4 * 5 = 20 (left: 5 20)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5)",
                "5 * 1 = 5 (left: 5 5 6) || 5 / 5 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 4 - 1 = 3 (left: 3 5) || Input: 10 2",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)"
            ],
            "Evaluation": [
                2.001,
                0.003,
                0.003,
                3.0,
                0.002,
                41.0,
                3.0,
                0.002,
                0.003,
                21.0
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 4.5",
                "2 <- 6.5",
                "3 <- 4.2",
                "4 <- 4.2",
                "5 <- 0.9",
                "6 <- 4.5",
                "7 <- 3.4",
                "8 <- 0.4",
                "9 <- 3.4"
            ]
        },
        "Step 7": {
            "steps": [
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 4 / 1 = 4 (left: 4 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5) || 4 * 5 = 20 (left: 5 20) || 9 * 3 = 27 (left: 27 27)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5) || 4 * 5 = 20 (left: 5 20) || 9 * 3 = 27 (left: 27 27)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5) || 4 * 5 = 20 (left: 5 20) || Input: 3 9 27",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5) || 4 * 5 = 20 (left: 5 20) || Input: 3 9 27",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5) || 4 * 5 = 20 (left: 5 20) || 3 + 9 = 12 (left: 12 27)"
            ],
            "Evaluation": [
                3.0,
                0.003,
                0.003,
                0.003,
                0.002,
                21.0,
                0.003,
                0.003,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- 6.9",
                "1 <- 5.4",
                "2 <- 0.9",
                "3 <- 4.8",
                "4 <- 1.9",
                "5 <- 4.2",
                "6 <- 3.4",
                "7 <- 6.9",
                "8 <- 6.9",
                "9 <- 0.0"
            ]
        },
        "Step 8": {
            "steps": [
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 4 / 1 = 4 (left: 4 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)",
                "5 * 1 = 5 (left: 5 5 6) || 5 / 5 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 4 = 1 (left:",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5) || 4 * 5 = 20 (left: 5 20) || Input: 3 9 27",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 4 - 1 = 3 (left: 3 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)"
            ],
            "Evaluation": [
                3.0,
                0.002,
                21.0,
                0.003,
                0.002,
                0.001,
                0.003,
                1.001,
                0.003,
                21.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 7.5",
                "2 <- 3.4",
                "3 <- 8.9",
                "4 <- 3.9",
                "5 <- 3.4",
                "6 <- 3.2",
                "7 <- 6.3",
                "8 <- 4.8",
                "9 <- 6.0"
            ]
        },
        "Step 9": {
            "steps": [
                "6 - 1 = 5 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5) || 4 * 5 = 20 (left: 5 20) || 9 * 3 = 27 (left: 27 27)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5) || 4 * 5 = 20 (left: 5 20) || 3 + 9 = 12 (left: 12 27)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5) || 5 / 4 = 1.25 (left: 1.25 ",
                "5 * 1 = 5 (left: 5 5 6) || 5 / 5 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "6 - 1 = 5 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5 5) || 3 + 6 = 9 (left: 9 9)"
            ]
        },
        "Input": "1 1 5 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "32": {
        "puzzle": "1 1 11 13",
        "Step 0": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 13)",
                "1 * 1 = 1 (left: 1 11 13)",
                "1 - 1 = 0 (left: 0 11 13)",
                "1 - 1 = 0 (left: 0 11 13)",
                "11 + 1 = 12 (left: 1 12 13)",
                "1 - 1 = 0 (left: 0 11 13)",
                "1 - 1 = 0 (left: 0 11 13)",
                "11 + 1 = 12 (left: 1 12 13)",
                "13 - 1 = 12 (left: 1 11 ",
                "11 + 1 = 12 (left: 1 12 13)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                21.0,
                21.0,
                0.003,
                21.0,
                21.0,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- INIT",
                "2 <- 0.2",
                "3 <- 0.2",
                "4 <- 0.3",
                "5 <- 0.6",
                "6 <- INIT",
                "7 <- 0.6",
                "8 <- 0.3",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24)",
                "1 - 1 = 0 (left: 0 11 13)",
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13)",
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2)",
                "1 - 1 = 0 (left: 0 11 13) || 13 / 11 = 1.1818181818181819 (left: ",
                "11 + 1 = 12 (left: 1 12 13)",
                "1 - 1 = 0 (left: 0 11 13) || 11 / 0 = undefined",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13)",
                "1 - 1 = 0 (left: 0 11 13)"
            ],
            "Evaluation": [
                60.0,
                21.0,
                20.002,
                60.0,
                20.002,
                0.0,
                0.003,
                0.003,
                60.0,
                21.0
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- INIT",
                "2 <- 1.0",
                "3 <- 1.0",
                "4 <- 1.9",
                "5 <- 1.0",
                "6 <- 0.5",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "1 - 1 = 0 (left: 0 11 13)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 5 * 3 = 15 (left: 15)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || Input: 5 3",
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 5 + 3 = 8 (left: 8)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13)",
                "13 - 1 = 12 (left: 1 11 ",
                "11 + 1 = 12 (left: 1 12 13)",
                "1 - 1 = 0 (left: 0 11 13)"
            ],
            "Evaluation": [
                0.0,
                21.0,
                0.002,
                0.003,
                20.002,
                0.002,
                60.0,
                0.001,
                0.003,
                21.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.8",
                "3 <- 1.8",
                "4 <- 2.6",
                "5 <- INIT",
                "6 <- 2.6",
                "7 <- 2.6",
                "8 <- 1.3",
                "9 <- 2.6"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 13)",
                "1 - 1 = 0 (left: 0 11 13)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "1 - 1 = 0 (left: 0 11 13)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)"
            ],
            "Evaluation": [
                1.002,
                21.0,
                0.002,
                0.003,
                0.002,
                21.0,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- 1.1",
                "3 <- 3.5",
                "4 <- 1.8",
                "5 <- 2.6",
                "6 <- 1.0",
                "7 <- 2.6",
                "8 <- 2.6",
                "9 <- 1.9"
            ]
        },
        "Step 4": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 0 * 2 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 2 - 0 = 2 (left: 2)",
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || Input: 5 3",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2)"
            ],
            "Evaluation": [
                20.002,
                0.001,
                20.002,
                60.0,
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- INIT",
                "2 <- 1.4",
                "3 <- 1.0",
                "4 <- 4.3",
                "5 <- 1.4",
                "6 <- 4.9",
                "7 <- 1.3",
                "8 <- 4.3",
                "9 <- 1.8"
            ]
        },
        "Step 5": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 0 * 2 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 11 13)",
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 2 - 0 = 2 (left: 2)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || Input: 5 3",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 2 - 0 = 2 (left: 2)",
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 2 / 0 is undefined",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)"
            ],
            "Evaluation": [
                20.002,
                21.0,
                0.001,
                0.003,
                0.002,
                0.001,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 5.0",
                "2 <- 5.1",
                "3 <- 0.5",
                "4 <- 4.3",
                "5 <- 4.3",
                "6 <- 1.0",
                "7 <- 1.0",
                "8 <- 4.0",
                "9 <- 1.8"
            ]
        },
        "Step 6": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 0 * 2 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || Input: 5 3",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || Input: 5 3",
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 0 * 2 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                20.002,
                60.0,
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.9",
                "1 <- 4.3",
                "2 <- 2.1",
                "3 <- 1.9",
                "4 <- 0.2",
                "5 <- 1.8",
                "6 <- 2.9",
                "7 <- 5.1",
                "8 <- 5.1",
                "9 <- 4.3"
            ]
        },
        "Step 7": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13)",
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13)",
                "1 - 1 = 0 (left: 0 11 13) || 11 / 0 = undefined",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                20.002,
                60.0,
                20.002,
                0.002,
                60.0,
                0.003,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 7.0",
                "1 <- 7.6",
                "2 <- 5.0",
                "3 <- 3.1",
                "4 <- 7.3",
                "5 <- 7.3",
                "6 <- 2.4",
                "7 <- 1.1",
                "8 <- 4.9",
                "9 <- 1.1"
            ]
        },
        "Step 8": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 - 0 = 24 (left: 24)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 0 * 2 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 2 / 0 is undefined",
                "1 - 1 = 0 (left: 0 11 13) || 11 / 0 = undefined",
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 2 / 0 is undefined",
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.003,
                60.0,
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 7.0",
                "2 <- 0.6",
                "3 <- 1.0",
                "4 <- 4.3",
                "5 <- 7.2",
                "6 <- 7.6",
                "7 <- 8.3",
                "8 <- 8.0",
                "9 <- 8.3"
            ]
        },
        "Step 9": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 5 * 3 = 15 (left: 15)",
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || Input: 5 3",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 2 - 0 = 2 (left: 2)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: (1 - 1) + (11 + 13) = 24",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)"
            ]
        },
        "Input": "1 1 11 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "33": {
        "puzzle": "1 6 6 12",
        "Step 0": {
            "steps": [
                "12 - 6 = 6 (left: 1 6 6)",
                "6 / 1 = 6 (left: 6 6 12)",
                "6 * 1 = 6 (left: 6 6 12)",
                "6 * 1 = 6 (left: 6 6 12)",
                "12 - 6 = 6 (left: 1 6 6)",
                "6 * 1 = 6 (left: 6 6 12)",
                "6 * 1 = 6 (left: 6 6 12)",
                "12 - 6 = 6 (left: 1 6 6)",
                "12 / 6 = 2 (left: 1 6 ",
                "12 - 6 = 6 (left: 1 6 6)"
            ],
            "Evaluation": [
                41.0,
                60.0,
                60.0,
                60.0,
                41.0,
                60.0,
                60.0,
                41.0,
                60.0,
                41.0
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 0.8",
                "2 <- 0.7",
                "3 <- 0.8",
                "4 <- 0.1",
                "5 <- 0.7",
                "6 <- INIT",
                "7 <- 0.4",
                "8 <- 0.8",
                "9 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "12 / 6 = 2 (left: 1 6  || 6 - 1 = 5 (left: 5)",
                "12 / 6 = 2 (left: 1 6  || 6 / 1 = 6 (left: 6)",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "12 / 6 = 2 (left: 1 6  || 1 * 6 = 6 (left: 6)",
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18)",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "12 - 6 = 6 (left: 1 6 6)",
                "12 - 6 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6)",
                "12 / 6 = 2 (left: 1 6  || 1 * 6 = 6 (left: 6)",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                3.0,
                0.003,
                40.001,
                3.0,
                41.0,
                22.0,
                0.003,
                40.001
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.9",
                "2 <- 0.3",
                "3 <- 0.0",
                "4 <- 0.1",
                "5 <- 0.1",
                "6 <- 1.9",
                "7 <- 0.7",
                "8 <- 0.0",
                "9 <- 0.7"
            ]
        },
        "Step 2": {
            "steps": [
                "6 * 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12)",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18)",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18)",
                "6 / 1 = 6 (left: 6 6 12) || 12 - 6 = 6 (left:",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 18 - 12 = 6 (left: 6)",
                "12 - 6 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6)",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)"
            ],
            "Evaluation": [
                40.0,
                3.0,
                40.001,
                3.0,
                40.001,
                0.001,
                0.003,
                22.0,
                3.0,
                3.0
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 0.4",
                "2 <- 0.7",
                "3 <- 0.4",
                "4 <- 0.9",
                "5 <- 0.5",
                "6 <- 0.1",
                "7 <- 0.5",
                "8 <- 0.1",
                "9 <- 0.1"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 6 = 6 (left: 1 6 6) || 1 + 6 = 7 (left: 6 6 7)",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 * 1 = 6 (left: 6 6 12) || 12 - 6 = 6 (left:",
                "6 / 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "6 * 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 6 2)",
                "6 / 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18)"
            ],
            "Evaluation": [
                1.002,
                3.0,
                3.0,
                3.0,
                3.0,
                0.001,
                0.002,
                0.003,
                0.002,
                40.001
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 0.6",
                "2 <- 0.6",
                "3 <- 1.6",
                "4 <- 1.4",
                "5 <- 3.9",
                "6 <- 0.0",
                "7 <- 2.2",
                "8 <- 2.4",
                "9 <- 0.7"
            ]
        },
        "Step 4": {
            "steps": [
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 6 + 12 = 18 (left: 18)",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18)",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18)",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 6 * 3 = 18 (left: 18)",
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 6 * 3 = 18 (left: 18)",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 18 - 12 = 6 (left: 6)",
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 18 - 12 = 6 (left: 6)",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)"
            ],
            "Evaluation": [
                60.0,
                40.001,
                40.001,
                3.0,
                60.0,
                60.0,
                3.0,
                0.003,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 2.2",
                "2 <- 2.0",
                "3 <- 0.6",
                "4 <- 1.4",
                "5 <- 4.4",
                "6 <- 4.4",
                "7 <- 4.2",
                "8 <- 0.8",
                "9 <- 4.2"
            ]
        },
        "Step 5": {
            "steps": [
                "6 * 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12)",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || Input: 9 3 9 ",
                "6 * 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12) || 36 + 12 = 48 (left: 48)",
                "6 * 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 6 * 3 = 18 (left: 18)",
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 6 * 3 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 6 * 3 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 18 - 12 = 6 (left: 6)",
                "12 / 6 = 2 (left: 1 6  || 1 * 6 = 6 (left: 6)",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 6 * 3 = 18 (left: 18)"
            ],
            "Evaluation": [
                40.0,
                0.003,
                0.003,
                0.002,
                60.0,
                0.003,
                0.003,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 5.0",
                "2 <- 0.4",
                "3 <- 5.4",
                "4 <- 3.9",
                "5 <- 0.8",
                "6 <- 0.0",
                "7 <- 4.2",
                "8 <- 1.6",
                "9 <- 0.6"
            ]
        },
        "Step 6": {
            "steps": [
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 6 * 3 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "6 * 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12) || 36 + 12 = 48 (left: 48)",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 6 * 3 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 6 * 3 = 18 (left: 18)",
                "12 / 6 = 2 (left: 1 6  || 6 / 1 = 6 (left: 6)",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 18 - 12 = 6 (left: 6)",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                3.0,
                0.003,
                60.0,
                0.003,
                3.0,
                0.003,
                3.0,
                40.001
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 1.9",
                "2 <- 4.0",
                "3 <- 5.4",
                "4 <- 4.0",
                "5 <- 0.6",
                "6 <- 4.4",
                "7 <- 4.0",
                "8 <- 0.3",
                "9 <- 6.8"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 6 = 6 (left: 1 6 6) || 1 + 6 = 7 (left: 6 6 7)",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || Input: 9 3 9 ",
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 6 + 12 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 6 * 3 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 6 + 12 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "6 * 1 = 6 (left: 6 6 12) || 12 - 6 = 6 (left:",
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 6 * 3 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 6 + 12 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "6 * 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6) || 6 - 6 = 0 (left: 0)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.001,
                0.003,
                0.003,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 2.0",
                "2 <- 6.6",
                "3 <- 0.7",
                "4 <- 0.5",
                "5 <- 2.4",
                "6 <- 5.4",
                "7 <- 7.9",
                "8 <- 5.4",
                "9 <- 2.7"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 6 = 6 (left: 1 6 6) || 1 + 6 = 7 (left: 6 6 7)",
                "6 * 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12) || 36 + 12 = 48 (left: 48)",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6) || 6 - 6 = 0 (left: 0)",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18)",
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 6 * 3 = 18 (left: 18)",
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 6 * 3 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 6 * 3 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "12 - 6 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6) || Possible next steps:"
            ],
            "Evaluation": [
                1.002,
                0.003,
                20.002,
                3.0,
                40.001,
                60.0,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 0.5",
                "2 <- 3.2",
                "3 <- 0.3",
                "4 <- 5.0",
                "5 <- 4.0",
                "6 <- 8.4",
                "7 <- 0.6",
                "8 <- 8.2",
                "9 <- 0.2"
            ]
        },
        "Step 9": {
            "steps": [
                "6 * 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12) || 36 - 12 = 24 (left: 24)",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18)",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6) || 6 - 6 = 0 (left: 0)",
                "6 * 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "6 * 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12) || 36 + 12 = 48 (left: 48)",
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 6 + 12 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 18 - 12 = 6 (left: 6)",
                "6 * 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 6 2)",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18)"
            ]
        },
        "Input": "1 6 6 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "34": {
        "puzzle": "4 5 12 12",
        "Step 0": {
            "steps": [
                "4 * 5 = 20 (left: 20 12 12)",
                "5 + 12 = 17 (left: 4 17 12)",
                "12 / 4 = 3 (left: 3 5 12)",
                "12 / 4 = 3 (left: 3 5 12)",
                "4 * 5 = 20 (left: 20 12 12)",
                "12 / 4 = 3 (left: 3 5 12)",
                "12 / 4 = 3 (left: 3 5 12)",
                "4 * 5 = 20 (left: 20 12 12)",
                "12 + 4 = 16 (left: ",
                "4 * 5 = 20 (left: 20 12 12)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                2.001,
                2.001,
                1.002,
                2.001,
                2.001,
                1.002,
                0.0,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- 0.5",
                "4 <- INIT",
                "5 <- 0.2",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "5 + 12 = 17 (left: 4 17 12)",
                "12 / 4 = 3 (left: 3 5 12)",
                "5 + 12 = 17 (left: 4 17 12) || 17 / 4 = 4.25 (left: 4.25 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "12 / 4 = 3 (left: 3 5 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "4 * 5 = 20 (left: 20 12 12)",
                "12 + 4 = 16 (left: ",
                "4 * 5 = 20 (left: 20 12 12)",
                "12 / 4 = 3 (left: 3 5 12)"
            ],
            "Evaluation": [
                1.002,
                2.001,
                0.003,
                0.003,
                2.001,
                0.003,
                1.002,
                0.0,
                1.002,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 1.1",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 1.4",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 0.4"
            ]
        },
        "Step 2": {
            "steps": [
                "5 + 12 = 17 (left: 4 17 12)",
                "12 / 4 = 3 (left: 3 5 12)",
                "12 / 4 = 3 (left: 3 5 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "12 / 4 = 3 (left: 3 5 12)",
                "12 / 4 = 3 (left: 3 5 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "12 + 4 = 16 (left: ",
                "4 * 5 = 20 (left: 20 12 12)",
                "4 * 5 = 20 (left: 20 12 12) || 20 + 12 = 32 (left: 32 12)"
            ],
            "Evaluation": [
                1.002,
                2.001,
                2.001,
                0.003,
                2.001,
                2.001,
                0.003,
                0.0,
                1.002,
                0.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 2.1",
                "2 <- 0.1",
                "3 <- 0.6",
                "4 <- 0.9",
                "5 <- 0.2",
                "6 <- INIT",
                "7 <- 2.1",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "4 * 5 = 20 (left: 20 12 12) || 20 / 12 = 1.6666666666666667 (left: 1.6666666666666667 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "5 + 12 = 17 (left: 4 17 12) || 17 / 4 = 4.25 (left: 4.25 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "4 * 5 = 20 (left: 20 12 12) || 20 + 12 = 32 (left: 32 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "4 * 5 = 20 (left: 20 12 12)",
                "12 / 4 = 3 (left: 3 5 12) || 12 - 3 = 9 (left: 5 9)",
                "4 * 5 = 20 (left: 20 12 12)",
                "12 / 4 = 3 (left: 3 5 12)"
            ],
            "Evaluation": [
                2.0,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                1.002,
                0.003,
                1.002,
                2.001
            ],
            "Resampling": [
                "0 <- 3.9",
                "1 <- 2.0",
                "2 <- 2.0",
                "3 <- 3.0",
                "4 <- 3.9",
                "5 <- 0.2",
                "6 <- 0.7",
                "7 <- 0.6",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "12 / 4 = 3 (left: 3 5 12) || 3 + 5 = 8 (left: 8 12)",
                "5 + 12 = 17 (left: 4 17 12) || 17 / 4 = 4.25 (left: 4.25 12)",
                "5 + 12 = 17 (left: 4 17 12) || 17 / 4 = 4.25 (left: 4.25 12)",
                "4 * 5 = 20 (left: 20 12 12) || 20 / 12 = 1.6666666666666667 (left: 1.6666666666666667 12) || 12 + 1.6666666666666667 = 13.6666666666666667 (left: 13.6666666666666667)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "4 * 5 = 20 (left: 20 12 12) || 20 * 12 = 240 (left: 240 12)",
                "12 / 4 = 3 (left: 3 5 12) || 12 - 3 = 9 (left: 5 9)",
                "4 * 5 = 20 (left: 20 12 12)",
                "12 / 4 = 3 (left: 3 5 12)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.001,
                0.003,
                0.003,
                40.0,
                0.003,
                1.002,
                2.001
            ],
            "Resampling": [
                "0 <- 4.8",
                "1 <- 2.4",
                "2 <- 2.4",
                "3 <- 4.6",
                "4 <- 4.6",
                "5 <- 4.9",
                "6 <- 0.2",
                "7 <- 4.6",
                "8 <- 0.2",
                "9 <- 4.6"
            ]
        },
        "Step 5": {
            "steps": [
                "4 * 5 = 20 (left: 20 12 12) || 20 / 12 = 1.6666666666666667 (left: 1.6666666666666667 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "4 * 5 = 20 (left: 20 12 12) || 20 * 12 = 240 (left: 240 12) || 240 + 12 = 252 (left: 252)",
                "4 * 5 = 20 (left: 20 12 12) || 20 * 12 = 240 (left: 240 12) || 240 * 12 = 2880 (left: 2880)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "4 * 5 = 20 (left: 20 12 12) || 20 * 12 = 240 (left: 240 12) || 240 + 12 = 252 (left: 252)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "4 * 5 = 20 (left: 20 12 12) || 20 * 12 = 240 (left: 240 12) || 240 * 12 = 2880 (left: 2880)"
            ],
            "Evaluation": [
                2.0,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.6",
                "1 <- 4.9",
                "2 <- 2.0",
                "3 <- 4.6",
                "4 <- 5.0",
                "5 <- 0.4",
                "6 <- 4.6",
                "7 <- 4.6",
                "8 <- 4.6",
                "9 <- INIT"
            ]
        },
        "Step 6": {
            "steps": [
                "4 * 5 = 20 (left: 20 12 12) || 20 * 12 = 240 (left: 240 12) || 240 - 12 = 228 (left: 228)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "5 + 12 = 17 (left: 4 17 12) || 17 / 4 = 4.25 (left: 4.25 12)",
                "4 * 5 = 20 (left: 20 12 12) || 20 * 12 = 240 (left: 240 12) || 240 + 12 = 252 (left: 252)",
                "4 * 5 = 20 (left: 20 12 12) || 20 / 12 = 1.6666666666666667 (left: 1.6666666666666667 12) || 12 - 1.6666666666666667 = 10.3333333333333333 (",
                "4 * 5 = 20 (left: 20 12 12) || 20 + 12 = 32 (left: 32 12)",
                "4 * 5 = 20 (left: 20 12 12) || 20 * 12 = 240 (left: 240 12) || 240 + 12 = 252 (left: 252)",
                "4 * 5 = 20 (left: 20 12 12) || 20 * 12 = 240 (left: 240 12) || 240 + 12 = 252 (left: 252)",
                "4 * 5 = 20 (left: 20 12 12) || 20 * 12 = 240 (left: 240 12) || 240 + 12 = 252 (left: 252)",
                "12 / 4 = 3 (left: 3 5 12)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.002,
                0.003,
                0.002,
                0.002,
                0.002,
                0.002,
                2.001
            ],
            "Resampling": [
                "0 <- 6.9",
                "1 <- 3.9",
                "2 <- 4.6",
                "3 <- 4.6",
                "4 <- 4.6",
                "5 <- 2.5",
                "6 <- 3.0",
                "7 <- 2.5",
                "8 <- 4.6",
                "9 <- 4.6"
            ]
        },
        "Step 7": {
            "steps": [
                "12 / 4 = 3 (left: 3 5 12) || 3 + 5 = 8 (left: 8 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "4 * 5 = 20 (left: 20 12 12) || 20 * 12 = 240 (left: 240 12) || 240 * 12 = 2880 (left: 2880)",
                "4 * 5 = 20 (left: 20 12 12) || 20 * 12 = 240 (left: 240 12) || 240 + 12 = 252 (left: 252)",
                "4 * 5 = 20 (left: 20 12 12) || 20 * 12 = 240 (left: 240 12) || 240 * 12 = 2880 (left: 2880)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "4 * 5 = 20 (left: 20 12 12) || 20 / 12 = 1.6666666666666667 (left: 1.6666666666666667 12) || 12 + 1.6666666666666667 = 13.6666666666666667 (left: 13.6666666666666667)",
                "12 / 4 = 3 (left: 3 5 12) || 12 - 3 = 9 (left: 5 9)",
                "4 * 5 = 20 (left: 20 12 12) || 20 * 12 = 240 (left: 240 12) || 240 + 12 = 252 (left: 252)",
                "4 * 5 = 20 (left: 20 12 12) || 20 * 12 = 240 (left: 240 12) || 240 * 12 = 2880 (left: 2880)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.001,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.6",
                "1 <- 4.6",
                "2 <- 3.6",
                "3 <- 5.0",
                "4 <- 3.8",
                "5 <- 4.6",
                "6 <- 2.5",
                "7 <- 4.6",
                "8 <- 4.6",
                "9 <- 4.6"
            ]
        },
        "Step 8": {
            "steps": [
                "4 * 5 = 20 (left: 20 12 12) || 20 * 12 = 240 (left: 240 12) || 240 - 12 = 228 (left: 228)",
                "4 * 5 = 20 (left: 20 12 12) || 20 * 12 = 240 (left: 240 12) || 240 * 12 = 2880 (left: 2880)",
                "4 * 5 = 20 (left: 20 12 12) || 20 + 12 = 32 (left: 32 12)",
                "4 * 5 = 20 (left: 20 12 12) || 20 / 12 = 1.6666666666666667 (left: 1.6666666666666667 12) || 12 + 1.6666666666666667 = 13.6666666666666667 (left: 13.6666666666666667)",
                "4 * 5 = 20 (left: 20 12 12) || 20 + 12 = 32 (left: 32 12)",
                "4 * 5 = 20 (left: 20 12 12) || 20 * 12 = 240 (left: 240 12) || 240 * 12 = 2880 (left: 2880)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "4 * 5 = 20 (left: 20 12 12) || 20 * 12 = 240 (left: 240 12) || 240 + 12 = 252 (left: 252)",
                "4 * 5 = 20 (left: 20 12 12) || 20 * 12 = 240 (left: 240 12) || 240 + 12 = 252 (left: 252)",
                "4 * 5 = 20 (left: 20 12 12) || 20 * 12 = 240 (left: 240 12) || 240 * 12 = 2880 (left: 2880)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.002,
                0.001,
                0.002,
                0.003,
                0.003,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.6",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- 2.4",
                "4 <- 3.0",
                "5 <- 2.5",
                "6 <- 4.6",
                "7 <- 4.8",
                "8 <- 4.6",
                "9 <- 4.6"
            ]
        },
        "Step 9": {
            "steps": [
                "4 * 5 = 20 (left: 20 12 12) || 20 * 12 = 240 (left: 240 12) || 240 - 12 = 228 (left: 228)",
                "12 / 4 = 3 (left: 3 5 12)",
                "5 + 12 = 17 (left: 4 17 12) || 17 / 4 = 4.25 (left: 4.25 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "4 * 5 = 20 (left: 20 12 12) || 20 / 12 = 1.6666666666666667 (left: 1.6666666666666667 12) || 12 - 1.6666666666666667 = 10.3333333333333333 (",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "4 * 5 = 20 (left: 20 12 12) || 20 * 12 = 240 (left: 240 12) || 240 + 12 = 252 (left: 252)",
                "4 * 5 = 20 (left: 20 12 12) || 20 * 12 = 240 (left: 240 12)",
                "4 * 5 = 20 (left: 20 12 12) || 20 * 12 = 240 (left: 240 12) || 240 + 12 = 252 (left: 252)",
                "4 * 5 = 20 (left: 20 12 12) || 20 * 12 = 240 (left: 240 12) || 240 * 12 = 2880 (left: 2880)"
            ]
        },
        "Input": "4 5 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "35": {
        "puzzle": "4 6 13 13",
        "Step 0": {
            "steps": [
                "13 - 4 = 9 (left: 6 9 13)",
                "6 + 13 = 19 (left: 4 19 13)",
                "13 - 6 = 7 (left: 4 7 13)",
                "13 - 6 = 7 (left: 4 7 13)",
                "13 - 4 = 9 (left: 6 9 13)",
                "13 - 6 = 7 (left: 4 7 13)",
                "13 - 6 = 7 (left: 4 7 13)",
                "13 - 4 = 9 (left: 6 9 13)",
                "13 + 6 = 19 (left: 4 13 ",
                "13 - 4 = 9 (left: 6 9 13)"
            ],
            "Evaluation": [
                21.001,
                41.0,
                20.002,
                20.002,
                21.001,
                20.002,
                20.002,
                21.001,
                1.002,
                21.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.7",
                "3 <- 0.4",
                "4 <- 0.1",
                "5 <- 0.1",
                "6 <- INIT",
                "7 <- 0.6",
                "8 <- 0.0",
                "9 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "6 + 13 = 19 (left: 4 19 13)",
                "13 - 6 = 7 (left: 4 7 13)",
                "13 - 4 = 9 (left: 6 9 13) || 6 * 9 = 54 (left: 13 54)",
                "13 - 4 = 9 (left: 6 9 13) || 13 - 6 = 7 (left: 7 13)",
                "6 + 13 = 19 (left: 4 19 13) || 19 / 4 = 4.75 (left: 4.75 13)",
                "6 + 13 = 19 (left: 4 19 13) || 13 - 4 = ",
                "13 - 4 = 9 (left: 6 9 13)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6)",
                "13 - 4 = 9 (left: 6 9 13) || 13 - 6 = 7 (left: 7 13)",
                "13 - 6 = 7 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13)"
            ],
            "Evaluation": [
                41.0,
                20.002,
                2.001,
                0.0,
                1.002,
                0.003,
                21.001,
                60.0,
                0.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.4",
                "2 <- 0.7",
                "3 <- 0.2",
                "4 <- 1.9",
                "5 <- 1.9",
                "6 <- 1.7",
                "7 <- 1.7",
                "8 <- 1.7",
                "9 <- 1.7"
            ]
        },
        "Step 2": {
            "steps": [
                "13 - 4 = 9 (left: 6 9 13) || 9 - 6 = 3 (left: 3 13)",
                "13 - 4 = 9 (left: 6 9 13) || 6 * 9 = 54 (left: 13 54)",
                "13 - 4 = 9 (left: 6 9 13) || 6 * 9 = 54 (left: 13 54)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9)",
                "13 - 6 = 7 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "13 - 6 = 7 (left: 4 7 13) || 7 + 4 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)"
            ],
            "Evaluation": [
                0.003,
                2.001,
                2.001,
                40.0,
                0.002,
                0.002,
                60.0,
                60.0,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.7",
                "2 <- 1.0",
                "3 <- 2.6",
                "4 <- 2.8",
                "5 <- 0.7",
                "6 <- 0.4",
                "7 <- INIT",
                "8 <- 1.0",
                "9 <- 2.7"
            ]
        },
        "Step 3": {
            "steps": [
                "13 - 4 = 9 (left: 6 9 13) || 6 * 9 = 54 (left: 13 54) || 13 * 54 = 702 (left: 702)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (13 - (13 - 6)) = 24",
                "6 + 13 = 19 (left: 4 19 13) || 19 / 4 = 4.75 (left: 4.75 13)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (13 - (13 - 6)) = 24",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (13 - (13 - 6)) = 24",
                "13 - 4 = 9 (left: 6 9 13) || 13 / 6 = ",
                "13 - 4 = 9 (left: 6 9 13) || 13 - 6 = 7 (left: 7 13)",
                "13 + 6 = 19 (left: 4 13 ",
                "6 + 13 = 19 (left: 4 19 13) || 4 * 19 = 76 (left: 13 76)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (13 - (13 - 6)) = 24"
            ]
        },
        "Input": "4 6 13 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "36": {
        "puzzle": "12 12 12 12",
        "Step 0": {
            "steps": [
                "Input: 0 0 0 0",
                "12 - 12 = 0 (left: 0 12 12)",
                "",
                "",
                "Input: 0 0 0 0",
                "0 + 0 = 0 (left: 0 0 0)",
                "0 + 0 = 0 (left: 0 0 0)",
                "Input: 0 0 0 0",
                "Input: 0 0 0 0",
                "Input: 0 0 0 0"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.002,
                0.002,
                0.003,
                0.001,
                0.001,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.1",
                "5 <- INIT",
                "6 <- 0.1",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12)",
                "",
                "",
                "Input: 0 0 0 0",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)",
                "0 + 0 = 0 (left: 0 0 0)",
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12)",
                "Input: 0 0 0 0",
                "Input: 0 0 0 0",
                "0 + 0 = 0 (left: 0 0 0)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.002,
                0.003,
                20.002,
                0.001,
                20.002,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 1.4",
                "2 <- INIT",
                "3 <- 1.6",
                "4 <- 0.1",
                "5 <- 1.0",
                "6 <- 1.4",
                "7 <- 0.1",
                "8 <- INIT",
                "9 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 0 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "",
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 0 - 12 = -12 (left: -12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12)",
                "Input: 0 0 0 0",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)"
            ],
            "Evaluation": [
                20.0,
                0.003,
                0.002,
                0.003,
                20.002,
                1.002,
                0.003,
                20.002,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.7",
                "2 <- 2.9",
                "3 <- 2.7",
                "4 <- 1.4",
                "5 <- 2.7",
                "6 <- INIT",
                "7 <- 1.0",
                "8 <- 1.0",
                "9 <- 2.0"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "Input: 0 0 0 0",
                "12 - 12 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 0 12) || 12 - 0 = 12 (left: 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                20.002,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 1.0",
                "3 <- 1.4",
                "4 <- 2.4",
                "5 <- INIT",
                "6 <- 0.1",
                "7 <- 2.0",
                "8 <- 1.6",
                "9 <- 1.4"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 0 12) || 0 + 12 = 12 (left: 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "0 + 0 = 0 (left: 0 0 0)",
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 0 12) || 12 / 0 = undefined (left: 0 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                0.003,
                0.003,
                0.001,
                20.002,
                20.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 4.2",
                "2 <- 1.0",
                "3 <- 1.0",
                "4 <- 4.6",
                "5 <- 1.0",
                "6 <- 4.6",
                "7 <- 1.0",
                "8 <- 4.6",
                "9 <- 2.9"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 0 - 12 = -12 (left: -12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                20.002,
                0.003,
                1.002,
                0.003,
                20.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.7",
                "1 <- 5.3",
                "2 <- 1.0",
                "3 <- 5.3",
                "4 <- 0.1",
                "5 <- 4.6",
                "6 <- 5.2",
                "7 <- 1.0",
                "8 <- 1.6",
                "9 <- 2.0"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 0 12) || 12 - 0 = 12 (left: 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                0.003,
                20.002,
                0.003,
                0.003,
                20.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 1.0",
                "2 <- 5.3",
                "3 <- 4.2",
                "4 <- 2.9",
                "5 <- 5.2",
                "6 <- 6.4",
                "7 <- 1.0",
                "8 <- 5.3",
                "9 <- 2.7"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                20.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 7.1",
                "1 <- 4.6",
                "2 <- 4.2",
                "3 <- 4.7",
                "4 <- 5.2",
                "5 <- 4.2",
                "6 <- 6.7",
                "7 <- 5.7",
                "8 <- 6.2",
                "9 <- 6.4"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 0 12) || 12 / 0 = undefined (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 6.7",
                "1 <- 7.7",
                "2 <- 7.1",
                "3 <- 1.0",
                "4 <- 1.0",
                "5 <- 6.4",
                "6 <- 7.7",
                "7 <- 4.6",
                "8 <- 6.7",
                "9 <- 6.4"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24"
            ]
        },
        "Input": "12 12 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "37": {
        "puzzle": "2 11 11 12",
        "Step 0": {
            "steps": [
                "12 - 11 = 1 (left: 2 11 1)",
                "11 / 2 = 5.5 (left: 5.5 11 12)",
                "11 - 2 = 9 (left: 9 11 12)",
                "11 - 2 = 9 (left: 9 11 12)",
                "12 - 11 = 1 (left: 2 11 1)",
                "11 - 2 = 9 (left: 9 11 12)",
                "11 - 2 = 9 (left: 9 11 12)",
                "12 - 11 = 1 (left: 2 11 1)",
                "11 - 2 = 9",
                "12 - 11 = 1 (left: 2 11 1)"
            ],
            "Evaluation": [
                1.0,
                3.0,
                1.002,
                1.002,
                1.0,
                1.002,
                1.002,
                1.0,
                0.003,
                1.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.1",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 0.3",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "11 / 2 = 5.5 (left: 5.5 11 12)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 12 - 5.5 = 6.5 (left: 6.5 11)",
                "11 - 2 = 9 (left: 9 11 12)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12)",
                "11 - 2 = 9 (left: 9 11 12)",
                "11 - 2 = 9 (left: 9 11 12)",
                "12 - 11 = 1 (left: 2 11 1)",
                "11 - 2 = 9 (left: 9 11 12) || 12 - 9 = 3 (left: ",
                "12 - 11 = 1 (left: 2 11 1)",
                "11 - 2 = 9 (left: 9 11 12)"
            ],
            "Evaluation": [
                3.0,
                1.002,
                1.002,
                60.0,
                1.002,
                1.002,
                1.0,
                0.0,
                1.0,
                1.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- INIT",
                "2 <- 1.3",
                "3 <- 1.3",
                "4 <- 1.3",
                "5 <- 1.3",
                "6 <- 1.3",
                "7 <- 1.3",
                "8 <- 1.3",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "11 - 2 = 9 (left: 9 11 12)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "11 - 2 = 9 (left: 9 11 12)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                60.0,
                0.002,
                60.0,
                60.0,
                0.002,
                0.002,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 2.5",
                "1 <- 2.2",
                "2 <- INIT",
                "3 <- 1.3",
                "4 <- 1.3",
                "5 <- 2.5",
                "6 <- INIT",
                "7 <- 1.3",
                "8 <- 2.2",
                "9 <- 2.2"
            ]
        },
        "Step 3": {
            "steps": [
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (11 / (11 / 2)) * 12 = 24",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (11 / (11 / 2)) * 12 = 24",
                "11 - 2 = 9 (left: 9 11 12)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (11 / (11 / 2)) * 12 = 24",
                "12 - 11 = 1 (left: 2 11 1)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (11 / (11 / 2)) * 12 = 24",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 11 / 5.5 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (11 / (11 / 2)) * 12 = 24"
            ]
        },
        "Input": "2 11 11 12",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            }
        ]
    },
    "38": {
        "puzzle": "4 4 4 6",
        "Step 0": {
            "steps": [
                "6 - 4 = 2 (left: 4 4 2)",
                "4 / 4 = 1 (left: 4 4 6)",
                "4 * 4 = 16 (left: 4 6 16)",
                "4 * 4 = 16 (left: 4 6 16)",
                "6 - 4 = 2 (left: 4 4 2)",
                "4 * 4 = 16 (left: 4 6 16)",
                "4 * 4 = 16 (left: 4 6 16)",
                "6 - 4 = 2 (left: 4 4 2)",
                "6 - 4 = 2 (left: 4 4 ",
                "6 - 4 = 2 (left: 4 4 2)"
            ],
            "Evaluation": [
                2.001,
                3.0,
                60.0,
                60.0,
                2.001,
                60.0,
                60.0,
                2.001,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.5",
                "2 <- 0.5",
                "3 <- 0.5",
                "4 <- 0.6",
                "5 <- 0.3",
                "6 <- 0.2",
                "7 <- 0.5",
                "8 <- INIT",
                "9 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)",
                "4 * 4 = 16 (left: 4 6 16) || 16 - 4 = 12 (left: 4 12)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)",
                "4 * 4 = 16 (left: 4 6 16) || 16 - 4 = 12 (left: 4 12)",
                "4 * 4 = 16 (left: 4 6 16) || 6 - 4 = 2 (left: 2 16)",
                "6 - 4 = 2 (left: 4 4 2)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- INIT",
                "2 <- 0.6",
                "3 <- 0.6",
                "4 <- 1.0",
                "5 <- 0.6",
                "6 <- 0.2",
                "7 <- 0.3",
                "8 <- 0.2",
                "9 <- 0.5"
            ]
        },
        "Step 2": {
            "steps": [
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 / 1.5 = 10.67 (left: 10.67)",
                "4 * 4 = 16 (left: 4 6 16)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)",
                "4 * 4 = 16 (left: 4 6 16) || 16 - 4 = 12 (left: 4 12)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 - 1.5 = 14.5 (left: 14.5)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)",
                "4 * 4 = 16 (left: 4 6 16) || 16 - 4 = 12 (left: 4 12)",
                "4 * 4 = 16 (left: 4 6 16) || 6 - 4 = 2 (left: 2 16)",
                "4 * 4 = 16 (left: 4 6 16) || 16 - 4 = 12 (left: 4 12)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.003,
                0.003,
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 2.1",
                "2 <- 0.6",
                "3 <- 0.3",
                "4 <- 0.6",
                "5 <- 0.3",
                "6 <- 2.1",
                "7 <- 2.1",
                "8 <- 0.5",
                "9 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 / 1.5 = 10.67 (left: 10.67)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)",
                "4 * 4 = 16 (left: 4 6 16) || 16 - 4 = 12 (left: 4 12)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)",
                "4 * 4 = 16 (left: 4 6 16) || 16 - 4 = 12 (left: 4 12)",
                "4 * 4 = 16 (left: 4 6 16) || 6 - 4 = 2 (left: 2 16)",
                "4 * 4 = 16 (left: 4 6 16) || 16 - 4 = 12 (left: 4 12)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.6",
                "2 <- 0.6",
                "3 <- 2.1",
                "4 <- 1.0",
                "5 <- 0.3",
                "6 <- 0.2",
                "7 <- 2.1",
                "8 <- 0.2",
                "9 <- 2.1"
            ]
        },
        "Step 4": {
            "steps": [
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)",
                "4 * 4 = 16 (left: 4 6 16) || 16 - 4 = 12 (left: 4 12)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 - 1.5 = 14.5 (left: 14.5)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)",
                "4 * 4 = 16 (left: 4 6 16) || 16 - 4 = 12 (left: 4 12)",
                "4 * 4 = 16 (left: 4 6 16) || 6 - 4 = 2 (left: 2 16)",
                "4 * 4 = 16 (left: 4 6 16) || 16 - 4 = 12 (left: 4 12)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                0.003,
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 4.0",
                "2 <- 4.0",
                "3 <- 0.3",
                "4 <- 0.6",
                "5 <- 2.1",
                "6 <- 4.0",
                "7 <- 2.1",
                "8 <- 4.0",
                "9 <- 0.2"
            ]
        },
        "Step 5": {
            "steps": [
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 - 1.5 = 14.5 (left: 14.5)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 - 1.5 = 14.5 (left: 14.5)",
                "4 * 4 = 16 (left: 4 6 16) || 16 - 4 = 12 (left: 4 12)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 1.5 * 16 = 24 (left: 16 24)",
                "4 * 4 = 16 (left: 4 6 16) || 6 - 4 = 2 (left: 2 16)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 1.5 * 16 = 24 (left: 16 24)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)"
            ],
            "Evaluation": [
                60.0,
                0.001,
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 0.5",
                "2 <- 1.0",
                "3 <- 4.0",
                "4 <- 4.0",
                "5 <- 4.0",
                "6 <- 1.0",
                "7 <- 0.9",
                "8 <- 0.6",
                "9 <- 0.2"
            ]
        },
        "Step 6": {
            "steps": [
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 / 1.5 = 10.67 (left: 10.67)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 - 1.5 = 14.5 (left: 14.5)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 1.5 * 16 = 24 (left: 16 24)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 - 1.5 = 14.5 (left: 14.5)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 - 1.5 = 14.5 (left: 14.5)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 1.5 * 16 = 24 (left: 16 24)",
                "6 - 4 = 2 (left: 4 4 2) || 4 * 4 = 16 (left: 2 16)",
                "4 * 4 = 16 (left: 4 6 16) || 16 - 4 = 12 (left: 4 12)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.001,
                0.003,
                0.001,
                0.001,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 0.3",
                "2 <- 4.0",
                "3 <- 0.2",
                "4 <- 5.0",
                "5 <- 1.0",
                "6 <- 0.3",
                "7 <- 1.0",
                "8 <- 4.0",
                "9 <- 0.3"
            ]
        },
        "Step 7": {
            "steps": [
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 / 1.5 = 10.67 (left: 10.67)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 - 1.5 = 14.5 (left: 14.5)",
                "4 * 4 = 16 (left: 4 6 16) || 16 - 4 = 12 (left: 4 12)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 - 1.5 = 14.5 (left: 14.5)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 - 1.5 = 14.5 (left: 14.5)",
                "4 * 4 = 16 (left: 4 6 16) || 16 - 4 = 12 (left: 4 12)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 1.5 - ",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 1.5 * 16 = 24 (left: 16 24)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.001,
                0.003,
                0.001,
                0.001,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 5.0",
                "2 <- 2.1",
                "3 <- 2.1",
                "4 <- 1.0",
                "5 <- 2.1",
                "6 <- 0.6",
                "7 <- 4.0",
                "8 <- 5.0",
                "9 <- 0.4"
            ]
        },
        "Step 8": {
            "steps": [
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 / 1.5 = 10.67 (left: 10.67)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 - 1.5 = 14.5 (left: 14.5)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)",
                "4 * 4 = 16 (left: 4 6 16) || 16 - 4 = 12 (left: 4 12)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 - 1.5 = 14.5 (left: 14.5)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)",
                "4 * 4 = 16 (left: 4 6 16) || 16 - 4 = 12 (left: 4 12)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 1.5 - ",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 1.5 * 16 = 24 (left: 16 24)",
                "6 - 4 = 2 (left: 4 4 2) || Input: 3 5 7"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.003,
                0.003,
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 0.6",
                "2 <- 4.0",
                "3 <- 5.0",
                "4 <- 4.0",
                "5 <- 1.8",
                "6 <- 5.0",
                "7 <- 2.1",
                "8 <- 0.2",
                "9 <- INIT"
            ]
        },
        "Step 9": {
            "steps": [
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 / 1.5 = 10.67 (left: 10.67)",
                "4 * 4 = 16 (left: 4 6 16) || 16 / 4 = 4 (left: 4 4)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 - 1.5 = 14.5 (left: 14.5)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 1.5 * 16 = 24 (left: 16 24)",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 16 - 1.5 = 14.5 (left: 14.5)",
                "6 - 4 = 2 (left: 4 4 2) || Input: 3 5 7",
                "4 * 4 = 16 (left: 4 6 16) || 6 / 4 = 1.5 (left: 1.5 16) || 1.5 * 16 = 24 (left: 16 24)",
                "4 * 4 = 16 (left: 4 6 16) || 6 - 4 = 2 (left: 2 16)",
                "4 * 4 = 16 (left: 4 6 16) || 16 - 4 = 12 (left: 4 12)",
                "4 * 4 = 16 (left: 4 6 16)"
            ]
        },
        "Input": "4 4 4 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "39": {
        "puzzle": "1 1 1 11",
        "Step 0": {
            "steps": [
                "11 - 1 = 10 (left: 1 1 10)",
                "1 / 1 = 1 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1 11)",
                "11 - 1 = 10 (left: 1 1 10)",
                "1 * 1 = 1 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1 11)",
                "11 - 1 = 10 (left: 1 1 10)",
                "11 - 1 = 10 (left: 1 1 ",
                "11 - 1 = 10 (left: 1 1 10)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                1.002,
                1.002,
                0.003,
                1.002,
                1.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.3",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 / 1 = 1 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1 11)",
                "11 - 1 = 10 (left: 1 1 10)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10)",
                "1 * 1 = 1 (left: 1 1 11)",
                "11 - 1 = 10 (left: 1 1 10)",
                "11 - 1 = 10 (left: 1 1 ",
                "11 - 1 = 10 (left: 1 1 10)",
                "1 * 1 = 1 (left: 1 1 11)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                1.002,
                0.003,
                60.0,
                1.002,
                0.003,
                0.003,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.4",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 1.4",
                "6 <- INIT",
                "7 <- 1.4",
                "8 <- 1.4",
                "9 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 1 11)",
                "11 - 1 = 10 (left: 1 1 10)",
                "1 * 1 = 1 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                1.002,
                0.003,
                1.002,
                0.001,
                0.003,
                0.002,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- INIT",
                "2 <- 1.4",
                "3 <- 1.4",
                "4 <- 1.4",
                "5 <- 1.4",
                "6 <- 1.4",
                "7 <- 1.4",
                "8 <- 1.4",
                "9 <- 1.9"
            ]
        },
        "Step 3": {
            "steps": [
                "1 / 1 = 1 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11)",
                "1 * 1 = 1 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10)"
            ],
            "Evaluation": [
                40.0,
                1.002,
                0.001,
                0.002,
                0.001,
                0.001,
                0.002,
                0.002,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 3.9",
                "2 <- 3.9",
                "3 <- INIT",
                "4 <- 3.0",
                "5 <- 1.4",
                "6 <- 3.9",
                "7 <- 3.0",
                "8 <- 3.0",
                "9 <- 0.2"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10)",
                "1 / 1 = 1 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 / 1 = 1 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 / 1 = 1 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10)"
            ],
            "Evaluation": [
                40.0,
                0.001,
                0.001,
                0.003,
                0.003,
                0.001,
                0.002,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 3.9",
                "2 <- 4.0",
                "3 <- 4.9",
                "4 <- 4.9",
                "5 <- 3.0",
                "6 <- 4.0",
                "7 <- 3.0",
                "8 <- 4.9",
                "9 <- 4.0"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 / 1 = 1 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 / 1 = 1 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.003,
                0.002,
                0.001,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 3.9",
                "2 <- 3.0",
                "3 <- 4.0",
                "4 <- INIT",
                "5 <- 3.9",
                "6 <- 4.0",
                "7 <- 4.0",
                "8 <- 3.0",
                "9 <- 4.0"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 / 1 = 1 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 / 1 = 1 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.003,
                0.003,
                1.002,
                0.001,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 4.9",
                "2 <- 4.9",
                "3 <- 4.9",
                "4 <- 3.9",
                "5 <- 3.9",
                "6 <- 1.4",
                "7 <- 3.0",
                "8 <- 4.9",
                "9 <- 3.9"
            ]
        },
        "Step 7": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 / 1 = 1 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                0.002,
                0.001,
                0.001,
                0.002,
                0.003,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 3.9",
                "2 <- 3.0",
                "3 <- 3.9",
                "4 <- 4.0",
                "5 <- 3.9",
                "6 <- 4.9",
                "7 <- 4.9",
                "8 <- 4.0",
                "9 <- 3.9"
            ]
        },
        "Step 8": {
            "steps": [
                "1 / 1 = 1 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 / 1 = 1 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.003,
                0.002,
                0.003,
                0.001,
                0.002,
                0.002,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 3.0",
                "2 <- 4.9",
                "3 <- 4.9",
                "4 <- 4.9",
                "5 <- 4.0",
                "6 <- 1.4",
                "7 <- 4.0",
                "8 <- 4.0",
                "9 <- 3.9"
            ]
        },
        "Step 9": {
            "steps": [
                "1 / 1 = 1 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 / 1 = 1 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 11) || 1 * 1 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ]
        },
        "Input": "1 1 1 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "40": {
        "puzzle": "1 1 11 12",
        "Step 0": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 12)",
                "1 * 1 = 1 (left: 1 11 12)",
                "1 - 1 = 0 (left: 0 11 12)",
                "1 - 1 = 0 (left: 0 11 12)",
                "11 + 1 = 12 (left: 1 12 12)",
                "1 - 1 = 0 (left: 0 11 12)",
                "1 - 1 = 0 (left: 0 11 12)",
                "11 + 1 = 12 (left: 1 12 12)",
                "11 + 1 = 12 (left: 1 12 12)",
                "11 + 1 = 12 (left: 1 12 12)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                3.0,
                3.0,
                0.003,
                3.0,
                3.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.1",
                "2 <- 0.1",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 0.2",
                "7 <- 0.1",
                "8 <- 0.1",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 12 12)",
                "1 - 1 = 0 (left: 0 11 12)",
                "1 - 1 = 0 (left: 0 11 12)",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1)",
                "1 * 1 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "1 * 1 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "1 - 1 = 0 (left: 0 11 12)"
            ],
            "Evaluation": [
                20.002,
                20.002,
                20.002,
                0.003,
                3.0,
                3.0,
                60.0,
                0.002,
                0.002,
                3.0
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.0",
                "2 <- INIT",
                "3 <- 1.1",
                "4 <- 1.6",
                "5 <- 1.6",
                "6 <- 1.6",
                "7 <- 1.0",
                "8 <- INIT",
                "9 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "1 - 1 = 0 (left: 0 11 12)",
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 12 12)",
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                3.0,
                0.003,
                20.002,
                20.002,
                20.002,
                0.002,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 2.1",
                "2 <- 1.1",
                "3 <- 1.9",
                "4 <- 2.5",
                "5 <- 1.2",
                "6 <- 2.5",
                "7 <- 0.1",
                "8 <- INIT",
                "9 <- 2.6"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1)",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 * 1 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 12 12)",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                60.0,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 3.3",
                "2 <- 2.9",
                "3 <- 3.3",
                "4 <- 1.6",
                "5 <- 2.5",
                "6 <- 3.3",
                "7 <- 2.9",
                "8 <- 2.5",
                "9 <- 2.6"
            ]
        },
        "Step 4": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.003,
                20.002,
                20.002,
                0.003,
                20.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.9",
                "1 <- 3.3",
                "2 <- 4.6",
                "3 <- 4.1",
                "4 <- 4.4",
                "5 <- 4.6",
                "6 <- 3.3",
                "7 <- 2.4",
                "8 <- 4.4",
                "9 <- 4.4"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                0.003,
                20.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 2.9",
                "2 <- 1.6",
                "3 <- 5.1",
                "4 <- 4.1",
                "5 <- 3.3",
                "6 <- 3.3",
                "7 <- 4.4",
                "8 <- 5.6",
                "9 <- 2.6"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                0.003,
                0.003,
                20.002,
                20.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 6.6",
                "1 <- 5.1",
                "2 <- 6.6",
                "3 <- 0.1",
                "4 <- 5.1",
                "5 <- 6.2",
                "6 <- 4.6",
                "7 <- 4.6",
                "8 <- 1.6",
                "9 <- 2.4"
            ]
        },
        "Step 7": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 * 1 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 2.4",
                "2 <- 3.3",
                "3 <- 6.2",
                "4 <- 6.5",
                "5 <- 4.3",
                "6 <- 4.1",
                "7 <- 4.6",
                "8 <- 2.6",
                "9 <- 6.2"
            ]
        },
        "Step 8": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 8.2",
                "1 <- 3.3",
                "2 <- 6.6",
                "3 <- 4.1",
                "4 <- 4.4",
                "5 <- 1.1",
                "6 <- 6.2",
                "7 <- 2.4",
                "8 <- 1.6",
                "9 <- 1.2"
            ]
        },
        "Step 9": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ]
        },
        "Input": "1 1 11 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "41": {
        "puzzle": "2 7 7 12",
        "Step 0": {
            "steps": [
                "12 + 2 = 14 (left: 7 7 14)",
                "7 / 2 = 3.5 (left: 3.5 7 12)",
                "2 * 7 = 14 (left: 7 12 14)",
                "2 * 7 = 14 (left: 7 12 14)",
                "12 + 2 = 14 (left: 7 7 14)",
                "2 * 7 = 14 (left: 7 12 14)",
                "2 * 7 = 14 (left: 7 12 14)",
                "12 + 2 = 14 (left: 7 7 14)",
                "12 - 7 = 5 (left: ",
                "12 + 2 = 14 (left: 7 7 14)"
            ],
            "Evaluation": [
                0.003,
                40.001,
                3.0,
                3.0,
                0.003,
                3.0,
                3.0,
                0.003,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.1",
                "5 <- 0.3",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12) || 7 * 3.5 = 24.5 (left: 12 24.5)",
                "2 * 7 = 14 (left: 7 12 14)",
                "2 * 7 = 14 (left: 7 12 14)",
                "12 + 2 = 14 (left: 7 7 14)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7)",
                "2 * 7 = 14 (left: 7 12 14) || 12 / 7 = 1.71 (left: 1.71 14)",
                "12 + 2 = 14 (left: 7 7 14)",
                "12 - 7 = 5 (left: ",
                "12 + 2 = 14 (left: 7 7 14)",
                "2 * 7 = 14 (left: 7 12 14)"
            ],
            "Evaluation": [
                0.003,
                3.0,
                3.0,
                0.003,
                60.0,
                2.0,
                0.003,
                0.0,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 1.4",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- 1.2",
                "5 <- INIT",
                "6 <- 1.4",
                "7 <- 1.4",
                "8 <- 0.1",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12) || 7 * 3.5 = 24.5 (left: 12 24.5)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)",
                "2 * 7 = 14 (left: 7 12 14)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 - 3.5 = 8.5 (left: 8.5 7)",
                "2 * 7 = 14 (left: 7 12 14) || 12 / 7 = 1.71 (left: 1.71 14)",
                "2 * 7 = 14 (left: 7 12 14)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 + 3.43 = 10.43 (left: 3.43 10.43)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 + 3.43 = 10.43 (left: 3.43 10.43)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 - 3.5 = 8.5 (left: 8.5 7)",
                "2 * 7 = 14 (left: 7 12 14)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                3.0,
                2.001,
                2.0,
                3.0,
                1.002,
                1.002,
                2.001,
                3.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.4",
                "2 <- 0.1",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 2.8",
                "6 <- 0.1",
                "7 <- INIT",
                "8 <- 1.4",
                "9 <- 1.2"
            ]
        },
        "Step 3": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 / 7 = 0.49 (left: 0.49 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7)",
                "12 + 2 = 14 (left: 7 7 14)",
                "2 * 7 = 14 (left: 7 12 14)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 - 3.5 = 8.5 (left: 8.5 7) || 8.5 / 7 = 1.2142857142857142 (left: 1.2142857142857142)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 - 3.5 = 8.5 (left: 8.5 7)",
                "12 - 7 = 5 (left: ",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 + 3.43 = 10.43 (left: 3.43 10.43)",
                "2 * 7 = 14 (left: 7 12 14) || 12 / 7 = 1.71 (left: 1.71 14)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                0.003,
                3.0,
                0.002,
                2.001,
                0.0,
                1.002,
                2.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 1.4",
                "2 <- 1.4",
                "3 <- 1.4",
                "4 <- 3.2",
                "5 <- 1.4",
                "6 <- 3.2",
                "7 <- 0.2",
                "8 <- 2.9",
                "9 <- 1.9"
            ]
        },
        "Step 4": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12) || 7 * 3.5 = 24.5 (left: 12 24.5)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 + 3.43 = 10.43 (left: 3.43 10.43)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 + 3.43 = 10.43 (left: 3.43 10.43)",
                "2 * 7 = 14 (left: 7 12 14) || 14 / 7 = 2 (left: 2 14)",
                "2 * 7 = 14 (left: 7 12 14) || 7 * 12 = 84 (left: 84 14)",
                "2 * 7 = 14 (left: 7 12 14) || 12 / 7 = 1.71 (left: 1.71 14)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.002,
                0.003,
                0.003,
                1.002,
                0.003,
                0.001,
                2.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.9",
                "2 <- 3.2",
                "3 <- 3.2",
                "4 <- 4.9",
                "5 <- INIT",
                "6 <- 4.3",
                "7 <- 0.1",
                "8 <- 1.4",
                "9 <- 0.1"
            ]
        },
        "Step 5": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 / 7 = 0.49 (left: 0.49 7)",
                "2 * 7 = 14 (left: 7 12 14) || 12 / 7 = 1.71 (left: 1.71 14)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 + 3.43 = 10.43 (left: 3.43 10.43)",
                "2 * 7 = 14 (left: 7 12 14) || 12 / 7 = 1.71 (left: 1.71 14) || 14 / 1.71 = 8.1871 (left: 8.1871)",
                "2 * 7 = 14 (left: 7 12 14)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 + 3.43 = 10.43 (left: 3.43 10.43) || 10.43 - 3.43 = 7 (left: 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 - 3.5 = 8.5 (left: 8.5 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 + 3.43 = 10.43 (left: 3.43 10.43)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7)"
            ],
            "Evaluation": [
                0.003,
                2.0,
                0.003,
                1.002,
                0.003,
                3.0,
                0.001,
                2.001,
                1.002,
                60.0
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 5.9",
                "2 <- 5.9",
                "3 <- 1.4",
                "4 <- 0.1",
                "5 <- 2.2",
                "6 <- 5.3",
                "7 <- 2.9",
                "8 <- 5.9",
                "9 <- 0.6"
            ]
        },
        "Step 6": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 / 7 = 0.49 (left: 0.49 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 + 3.43 = 10.43 (left: 3.43 10.43)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7)",
                "2 * 7 = 14 (left: 7 12 14) || 12 / 7 = 1.71 (left: 1.71 14)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 + 3.43 = 10.43 (left: 3.43 10.43) || 10.43 - 3.43 = 7 (left: 7)",
                "2 * 7 = 14 (left: 7 12 14) || 14 / 7 = 2 (left: 2 14)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 + 3.43 = 10.43 (left: 3.43 10.43)",
                "2 * 7 = 14 (left: 7 12 14) || 12 / 7 = 1.71 (left: 1.71 14)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.002,
                60.0,
                2.0,
                0.001,
                0.003,
                1.002,
                2.0
            ],
            "Resampling": [
                "0 <- 5.9",
                "1 <- 5.9",
                "2 <- 5.7",
                "3 <- 3.2",
                "4 <- 3.9",
                "5 <- 5.9",
                "6 <- 5.9",
                "7 <- 5.9",
                "8 <- 1.4",
                "9 <- 2.8"
            ]
        },
        "Step 7": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 / 7 = 0.49 (left: 0.49 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 - 3.5 = 8.5 (left: 8.5 7) || 8.5 / 7 = 1.2142857142857142 (left: 1.2142857142857142)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 + 3.43 = 10.43 (left: 3.43 10.43)",
                "2 * 7 = 14 (left: 7 12 14) || 12 / 7 = 1.71 (left: 1.71 14) || 14 / 1.71 = 8.1871 (left: 8.1871)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 + 3.43 = 10.43 (left: 3.43 10.43)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 + 3.43 = 10.43 (left: 3.43 10.43)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 + 3.43 = 10.43 (left: 3.43 10.43)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 - 3.5 = 8.5 (left: 8.5 7) || 8.5 / 7 = 1.2142857142857142 (left: 1.2142857142857142)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                1.002,
                0.003,
                0.003,
                1.002,
                1.002,
                1.002,
                0.002
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 0.1",
                "2 <- 5.9",
                "3 <- 6.4",
                "4 <- 5.9",
                "5 <- 6.4",
                "6 <- 3.2",
                "7 <- 6.4",
                "8 <- 2.5",
                "9 <- 6.4"
            ]
        },
        "Step 8": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 / 7 = 0.49 (left: 0.49 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 + 3.43 = 10.43 (left: 3.43 10.43)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 + 3.43 = 10.43 (left: 3.43 10.43)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 + 3.43 = 10.43 (left: 3.43 10.43)",
                "2 * 7 = 14 (left: 7 12 14) || 7 * 12 = 84 (left: 84 14)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.003,
                1.002,
                0.003,
                0.003,
                1.002,
                1.002,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 2.9",
                "1 <- 5.9",
                "2 <- 1.4",
                "3 <- 0.1",
                "4 <- 1.4",
                "5 <- 5.9",
                "6 <- 6.4",
                "7 <- 5.9",
                "8 <- 1.4",
                "9 <- 8.1"
            ]
        },
        "Step 9": {
            "steps": [
                "2 * 7 = 14 (left: 7 12 14) || 12 + 14 = 26 (left: 7 26)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 - 3.5 = 8.5 (left: 8.5 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 + 3.43 = 10.43 (left: 3.43 10.43)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 + 3.43 = 10.43 (left: 3.43 10.43)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 + 3.43 = 10.43 (left: 3.43 10.43)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)"
            ]
        },
        "Input": "2 7 7 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "42": {
        "puzzle": "1 5 7 12",
        "Step 0": {
            "steps": [
                "7 - 1 = 6 (left: 6 5 12)",
                "5 + 7 = 12 (left: 1 12 12)",
                "12 - 7 = 5 (left: 1 5 12)",
                "12 - 7 = 5 (left: 1 5 12)",
                "7 - 1 = 6 (left: 6 5 12)",
                "12 - 7 = 5 (left: 1 5 12)",
                "12 - 7 = 5 (left: 1 5 12)",
                "7 - 1 = 6 (left: 6 5 12)",
                "7 - 5 = 2 (left: 1 2 ",
                "7 - 1 = 6 (left: 6 5 12)"
            ],
            "Evaluation": [
                3.0,
                0.003,
                22.0,
                22.0,
                3.0,
                22.0,
                22.0,
                3.0,
                0.002,
                3.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- INIT",
                "2 <- 0.3",
                "3 <- 0.6",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 0.2",
                "7 <- 0.0",
                "8 <- 0.2",
                "9 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60)",
                "12 - 7 = 5 (left: 1 5 12)",
                "12 - 7 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7)",
                "12 - 7 = 5 (left: 1 5 12)",
                "12 - 7 = 5 (left: 1 5 12)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7)",
                "7 - 1 = 6 (left: 6 5 12) || 12 / 5 = 2.4 (left: 6 2.4)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7)",
                "12 - 7 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)"
            ],
            "Evaluation": [
                41.0,
                22.0,
                1.001,
                20.0,
                22.0,
                22.0,
                20.0,
                1.0,
                20.0,
                1.001
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- INIT",
                "2 <- 0.6",
                "3 <- 1.4",
                "4 <- 1.0",
                "5 <- 1.5",
                "6 <- 1.6",
                "7 <- 1.5",
                "8 <- 1.0",
                "9 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60)",
                "12 - 7 = 5 (left: 1 5 12)",
                "12 - 7 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7)",
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)",
                "12 - 7 = 5 (left: 1 5 12) || 12 / 5 = 2.4 (",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "12 - 7 = 5 (left: 1 5 12) || 5 * 1 = 5 (left: 5 12)",
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 1 * 60 = 60 (left: 60)",
                "12 - 7 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)"
            ],
            "Evaluation": [
                41.0,
                22.0,
                1.001,
                20.0,
                0.003,
                0.003,
                0.003,
                1.001,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- INIT",
                "2 <- 2.0",
                "3 <- 2.3",
                "4 <- 2.3",
                "5 <- 2.0",
                "6 <- 2.0",
                "7 <- 1.3",
                "8 <- 1.5",
                "9 <- 1.8"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 1 + 7 = 8 (left: 8)",
                "12 - 7 = 5 (left: 1 5 12)",
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)",
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 1 * 60 = 60 (left: 60)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)"
            ],
            "Evaluation": [
                0.002,
                22.0,
                0.003,
                0.003,
                0.001,
                0.003,
                0.003,
                0.003,
                20.0,
                0.001
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 1.1",
                "2 <- 1.3",
                "3 <- 2.3",
                "4 <- 1.0",
                "5 <- 0.2",
                "6 <- 1.6",
                "7 <- 1.8",
                "8 <- 3.1",
                "9 <- 1.4"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60)",
                "12 - 7 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)",
                "12 - 7 = 5 (left: 1 5 12) || 12 / 5 = 2.4 (",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7)",
                "12 - 7 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)"
            ],
            "Evaluation": [
                41.0,
                1.001,
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                20.0,
                1.001
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 2.3",
                "2 <- 3.8",
                "3 <- 0.3",
                "4 <- 1.4",
                "5 <- 3.1",
                "6 <- 1.1",
                "7 <- 2.0",
                "8 <- 1.0",
                "9 <- 1.5"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 1 + 7 = 8 (left: 8)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7)",
                "12 - 7 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "12 - 7 = 5 (left: 1 5 12) || 12 / 5 = 2.4 (",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7)",
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 1 * 60 = 60 (left: 60)",
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 1 * 60 = 60 (left: 60)",
                "12 - 7 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                20.0,
                1.001,
                0.003,
                20.0,
                0.003,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 5.3",
                "2 <- 5.6",
                "3 <- 5.3",
                "4 <- 1.5",
                "5 <- 1.5",
                "6 <- 2.0",
                "7 <- 4.0",
                "8 <- 1.4",
                "9 <- 4.1"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 1 + 7 = 8 (left: 8)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "12 - 7 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "12 - 7 = 5 (left: 1 5 12) || 12 / 5 = 2.4 (",
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 1 * 60 = 60 (left: 60)",
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 1 * 60 = 60 (left: 60)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7)",
                "12 - 7 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12) || 12 - 5 = 7 (left: 7)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                0.003,
                1.001,
                0.003,
                0.003,
                0.003,
                20.0,
                0.001
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 2.0",
                "2 <- 5.6",
                "3 <- 0.2",
                "4 <- 0.3",
                "5 <- 0.2",
                "6 <- 1.3",
                "7 <- 1.3",
                "8 <- 5.3",
                "9 <- 4.8"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 1 + 7 = 8 (left: 8)",
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7)",
                "12 - 7 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "12 - 7 = 5 (left: 1 5 12) || 12 / 5 = 2.4 (",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.001,
                20.0,
                1.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 4.8",
                "1 <- 1.4",
                "2 <- 3.1",
                "3 <- 4.8",
                "4 <- 6.8",
                "5 <- 1.4",
                "6 <- 0.6",
                "7 <- 0.6",
                "8 <- 5.3",
                "9 <- 1.1"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 1 + 7 = 8 (left: 8)",
                "12 - 7 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "12 - 7 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "12 - 7 = 5 (left: 1 5 12) || 12 / 5 = 2.4 (",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7)",
                "12 - 7 = 5 (left: 1 5 12) || 5 * 1 = 5 (left: 5 12)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "12 - 7 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)"
            ],
            "Evaluation": [
                0.002,
                1.001,
                1.001,
                0.003,
                0.001,
                0.003,
                20.0,
                1.001,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 8.6",
                "2 <- 8.6",
                "3 <- 4.0",
                "4 <- 2.1",
                "5 <- 2.3",
                "6 <- 3.1",
                "7 <- 1.0",
                "8 <- 6.8",
                "9 <- 5.3"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 1 + 7 = 8 (left: 8)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 1 * 60 = 60 (left: 60)",
                "12 - 7 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7)",
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 1 * 60 = 60 (left: 60)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)"
            ]
        },
        "Input": "1 5 7 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "43": {
        "puzzle": "10 10 12 12",
        "Step 0": {
            "steps": [
                "12 + 10 = 22 (left: 10 12 22)",
                "10 / 10 = 1 (left: 1 12 12)",
                "10 * 10 = 100 (left: 12 12 100)",
                "10 * 10 = 100 (left: 12 12 100)",
                "12 + 10 = 22 (left: 10 12 22)",
                "10 * 10 = 100 (left: 12 12 100)",
                "10 * 10 = 100 (left: 12 12 100)",
                "12 + 10 = 22 (left: 10 12 22)",
                "12 / 10 = 1.2 (left: 1.",
                "12 + 10 = 22 (left: 10 12 22)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                0.003,
                1.002,
                0.003,
                0.003,
                1.002,
                0.0,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12)",
                "10 * 10 = 100 (left: 12 12 100)",
                "10 * 10 = 100 (left: 12 12 100)",
                "12 + 10 = 22 (left: 10 12 22)",
                "10 * 10 = 100 (left: 12 12 100)",
                "10 * 10 = 100 (left: 12 12 100)",
                "12 + 10 = 22 (left: 10 12 22)",
                "12 / 10 = 1.2 (left: 1.",
                "12 + 10 = 22 (left: 10 12 22)",
                "10 * 10 = 100 (left: 12 12 100)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.002,
                0.003,
                0.003,
                1.002,
                0.0,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- 1.3",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12)",
                "10 * 10 = 100 (left: 12 12 100)",
                "10 * 10 = 100 (left: 12 12 100)",
                "12 + 10 = 22 (left: 10 12 22)",
                "10 * 10 = 100 (left: 12 12 100)",
                "10 * 10 = 100 (left: 12 12 100)",
                "12 + 10 = 22 (left: 10 12 22)",
                "12 / 10 = 1.2 (left: 1.",
                "12 + 10 = 22 (left: 10 12 22) || 12 - 10 = 2 (left: 2 22)",
                "10 * 10 = 100 (left: 12 12 100)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.002,
                0.003,
                0.003,
                1.002,
                0.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 2.6",
                "5 <- 1.8",
                "6 <- 2.6",
                "7 <- 2.3",
                "8 <- 1.6",
                "9 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12)",
                "10 * 10 = 100 (left: 12 12 100)",
                "10 * 10 = 100 (left: 12 12 100)",
                "12 + 10 = 22 (left: 10 12 22)",
                "12 + 10 = 22 (left: 10 12 22) || 22 - 10 = 12 (left: 12 22)",
                "12 + 10 = 22 (left: 10 12 22) || Input:",
                "12 + 10 = 22 (left: 10 12 22) || 12 - 10 = 2 (left: 2 22)",
                "12 + 10 = 22 (left: 10 12 22) || 12 / 10 = 1.2 (left: 10 1.2)",
                "12 + 10 = 22 (left: 10 12 22) || 12 - 10 = 2 (left: 2 22)",
                "10 * 10 = 100 (left: 12 12 100)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.002,
                0.003,
                20.002,
                0.003,
                2.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 3.7",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 3.5",
                "6 <- 3.3",
                "7 <- 3.5",
                "8 <- 3.5",
                "9 <- 3.5"
            ]
        },
        "Step 4": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12)",
                "10 * 10 = 100 (left: 12 12 100)",
                "12 + 10 = 22 (left: 10 12 22) || 12 / 10 = 1.2 (left: 10 1.2) || 10 / 1.2 = 8.33 (left: 8.33 1.2)",
                "12 + 10 = 22 (left: 10 12 22)",
                "10 * 10 = 100 (left: 12 12 100)",
                "12 + 10 = 22 (left: 10 12 22) || Input: || Please provide a list of numbers to find possible next steps.",
                "12 + 10 = 22 (left: 10 12 22) || 12 - 10 = 2 (left: 2 22)",
                "12 + 10 = 22 (left: 10 12 22) || Input: || Please provide a list of numbers to find possible next steps.",
                "12 + 10 = 22 (left: 10 12 22) || Input: || Please provide a list of numbers to find possible next steps.",
                "12 + 10 = 22 (left: 10 12 22) || Input: || Please provide a list of numbers to find possible next steps."
            ],
            "Evaluation": [
                0.003,
                0.003,
                3.0,
                1.002,
                0.003,
                0.001,
                0.003,
                0.001,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 3.3",
                "2 <- 3.5",
                "3 <- 1.8",
                "4 <- 4.2",
                "5 <- 4.2",
                "6 <- INIT",
                "7 <- 0.4",
                "8 <- 4.2",
                "9 <- INIT"
            ]
        },
        "Step 5": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12)",
                "12 + 10 = 22 (left: 10 12 22) || 22 - 10 = 12 (left: 12 22)",
                "12 + 10 = 22 (left: 10 12 22) || Input: || Please provide a list of numbers to find possible next steps.",
                "12 + 10 = 22 (left: 10 12 22) || 12 - 10 = 2 (left: 2 22)",
                "12 + 10 = 22 (left: 10 12 22) || 12 / 10 = 1.2 (left: 10 1.2) || 10 / 1.2 = 8.33 (left: 8.33 1.2) || 8.33 / 1.2 = 6.94166666667 (left: 6.94166666667)",
                "12 + 10 = 22 (left: 10 12 22) || 12 / 10 = 1.2 (left: 10 1.2) || 10 / 1.2 = 8.33 (left: 8.33 1.2) || 8.33 / 1.2 = 6.94166666667 (left: 6.94166666667)",
                "12 + 10 = 22 (left: 10 12 22)",
                "12 + 10 = 22 (left: 10 12 22) || 12 / 10 = 1.2 (left: 10 1.2)",
                "12 + 10 = 22 (left: 10 12 22) || 12 / 10 = 1.2 (left: 10 1.2) || 10 / 1.2 = 8.33 (left: 8.33 1.2) || 8.33 * 1.2 = 9.996 (left: 9.996)",
                "10 * 10 = 100 (left: 12 12 100)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.001,
                0.003,
                0.002,
                0.002,
                1.002,
                2.001,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.5",
                "1 <- 3.5",
                "2 <- 5.6",
                "3 <- 3.5",
                "4 <- 5.6",
                "5 <- 5.7",
                "6 <- 3.5",
                "7 <- 3.5",
                "8 <- 4.2",
                "9 <- INIT"
            ]
        },
        "Step 6": {
            "steps": [
                "12 + 10 = 22 (left: 10 12 22) || Input: || Please provide a list of numbers to find possible next steps.",
                "12 + 10 = 22 (left: 10 12 22) || Input: || Please provide a list of numbers to find possible next steps.",
                "12 + 10 = 22 (left: 10 12 22) || 22 - 10 = 12 (left: 12 22)",
                "12 + 10 = 22 (left: 10 12 22) || Input: || Please provide a list of numbers to find possible next steps.",
                "12 + 10 = 22 (left: 10 12 22) || 22 - 10 = 12 (left: 12 22)",
                "12 + 10 = 22 (left: 10 12 22) || 12 / 10 = 1.2 (left: 10 1.2) || 10 / 1.2 = 8.33 (left: 8.33 1.2)",
                "12 + 10 = 22 (left: 10 12 22) || Input: || Please provide a list of numbers to find possible next steps.",
                "12 + 10 = 22 (left: 10 12 22) || Input: || Please provide a list of numbers to find possible next steps.",
                "12 + 10 = 22 (left: 10 12 22) || 12 / 10 = 1.2 (left: 10 1.2) || 10 / 1.2 = 8.33 (left: 8.33 1.2) || 8.33 * 1.2 = 9.996 (left: 9.996)",
                "10 * 10 = 100 (left: 12 12 100)"
            ],
            "Evaluation": [
                0.001,
                0.001,
                0.003,
                0.001,
                0.003,
                3.0,
                0.001,
                0.001,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.5",
                "1 <- 6.5",
                "2 <- 3.5",
                "3 <- 5.6",
                "4 <- 5.7",
                "5 <- 4.2",
                "6 <- 5.6",
                "7 <- INIT",
                "8 <- 5.7",
                "9 <- 4.3"
            ]
        },
        "Step 7": {
            "steps": [
                "12 + 10 = 22 (left: 10 12 22) || Input: || Please provide a list of numbers to find possible next steps.",
                "12 + 10 = 22 (left: 10 12 22) || 12 / 10 = 1.2 (left: 10 1.2) || 10 / 1.2 = 8.33 (left: 8.33 1.2) || 8.33 / 1.2 = 6.94166666667 (left: 6.94166666667)",
                "12 + 10 = 22 (left: 10 12 22) || Input: || Please provide a list of numbers to find possible next steps.",
                "12 + 10 = 22 (left: 10 12 22) || 12 - 10 = 2 (left: 2 22)",
                "12 + 10 = 22 (left: 10 12 22) || 12 / 10 = 1.2 (left: 10 1.2) || 10 / 1.2 = 8.33 (left: 8.33 1.2)",
                "12 + 10 = 22 (left: 10 12 22) || 12 / 10 = 1.2 (left: 10 1.2) || 10 / 1.2 = 8.33 (left: 8.33 1.2) || 8.33 / 1.2 = 6.94166666667 (left: 6.94166666667)",
                "12 + 10 = 22 (left: 10 12 22) || 12 - 10 = 2 (left: 2 22)",
                "12 / 10 = 1.2 (left: 1.",
                "12 + 10 = 22 (left: 10 12 22) || 12 / 10 = 1.2 (left: 10 1.2) || 10 * 1.2 = 12 (left: 1.2 12)",
                "12 + 10 = 22 (left: 10 12 22) || 22 - 10 = 12 (left: 12 22)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.001,
                0.003,
                3.0,
                0.002,
                0.003,
                0.0,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 6.5",
                "1 <- 4.2",
                "2 <- 5.7",
                "3 <- 4.2",
                "4 <- 3.5",
                "5 <- 3.5",
                "6 <- 6.5",
                "7 <- 5.7",
                "8 <- 7.8",
                "9 <- 3.3"
            ]
        },
        "Step 8": {
            "steps": [
                "12 + 10 = 22 (left: 10 12 22) || 12 / 10 = 1.2 (left: 10 1.2) || 10 / 1.2 = 8.33 (left: 8.33 1.2) || 8.33 - 1.2 = 7.13 (left: 7.13)",
                "12 + 10 = 22 (left: 10 12 22) || 12 / 10 = 1.2 (left: 10 1.2) || 10 / 1.2 = 8.33 (left: 8.33 1.2) || 8.33 / 1.2 = 6.94166666667 (left: 6.94166666667)",
                "12 + 10 = 22 (left: 10 12 22) || 12 / 10 = 1.2 (left: 10 1.2) || 10 / 1.2 = 8.33 (left: 8.33 1.2)",
                "12 + 10 = 22 (left: 10 12 22) || 12 / 10 = 1.2 (left: 10 1.2) || 10 / 1.2 = 8.33 (left: 8.33 1.2) || 8.33 * 1.2 = 9.996 (left: 9.996)",
                "12 + 10 = 22 (left: 10 12 22) || Input: || Please provide a list of numbers to find possible next steps.",
                "12 + 10 = 22 (left: 10 12 22) || Input: || Please provide a list of numbers to find possible next steps.",
                "12 + 10 = 22 (left: 10 12 22) || 12 / 10 = 1.2 (left: 10 1.2) || 10 / 1.2 = 8.33 (left: 8.33 1.2) || 8.33 * 1.2 = 9.996 (left: 9.996)",
                "12 + 10 = 22 (left: 10 12 22) || 12 / 10 = 1.2 (left: 10 1.2) || 10 * 1.2 = 12 (left: 1.2 12)",
                "12 + 10 = 22 (left: 10 12 22) || 12 / 10 = 1.2 (left: 10 1.2) || 10 * 1.2 = 12 (left: 1.2 12) || 1.2 + 12 = 13.2 (left: 13.2)",
                "12 + 10 = 22 (left: 10 12 22) || 22 - 10 = 12 (left: 12 22)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                3.0,
                0.002,
                0.001,
                0.001,
                0.002,
                2.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 8.2",
                "2 <- 8.2",
                "3 <- 3.5",
                "4 <- 7.8",
                "5 <- 0.0",
                "6 <- 8.7",
                "7 <- 7.4",
                "8 <- 7.4",
                "9 <- 7.4"
            ]
        },
        "Step 9": {
            "steps": [
                "12 + 10 = 22 (left: 10 12 22) || 12 / 10 = 1.2 (left: 10 1.2) || 10 / 1.2 = 8.33 (left: 8.33 1.2) || 8.33 - 1.2 = 7.13 (left: 7.13)",
                "12 + 10 = 22 (left: 10 12 22) || 12 / 10 = 1.2 (left: 10 1.2) || 10 / 1.2 = 8.33 (left: 8.33 1.2) || 8.33 / 1.2 = 6.94166666667 (left: 6.94166666667)",
                "12 + 10 = 22 (left: 10 12 22) || 12 / 10 = 1.2 (left: 10 1.2) || 10 / 1.2 = 8.33 (left: 8.33 1.2) || 8.33 / 1.2 = 6.94166666667 (left: 6.94166666667)",
                "12 + 10 = 22 (left: 10 12 22) || Input: || Please provide a list of numbers to find possible next steps.",
                "12 + 10 = 22 (left: 10 12 22) || 12 / 10 = 1.2 (left: 10 1.2) || 10 * 1.2 = 12 (left: 1.2 12) || 12 - 1.2 = 10.8 (left: 10.8)",
                "12 + 10 = 22 (left: 10 12 22) || Input:",
                "12 + 10 = 22 (left: 10 12 22) || 12 / 10 = 1.2 (left: 10 1.2) || 10 * 1.2 = 12 (left: 1.2 12) || 1.2 + 12 = 13.2 (left: 13.2)",
                "12 + 10 = 22 (left: 10 12 22) || 12 / 10 = 1.2 (left: 10 1.2) || 10 / 1.2 = 8.33 (left: 8.33 1.2) || 8.33 * 1.2 = 9.996 (left: 9.996)",
                "12 + 10 = 22 (left: 10 12 22) || 12 / 10 = 1.2 (left: 10 1.2) || 10 / 1.2 = 8.33 (left: 8.33 1.2) || 8.33 * 1.2 = 9.996 (left: 9.996)",
                "12 + 10 = 22 (left: 10 12 22) || 12 / 10 = 1.2 (left: 10 1.2) || 10 / 1.2 = 8.33 (left: 8.33 1.2) || 8.33 / 1.2 = 6.94166666667 (left: 6.94166666667)"
            ]
        },
        "Input": "10 10 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "44": {
        "puzzle": "1 8 8 8",
        "Step 0": {
            "steps": [
                "8 * 1 = 8 (left: 8 8 8)",
                "8 / 1 = 8 (left: 8 8 8)",
                "8 - 1 = 7 (left: 7 8 8)",
                "8 - 1 = 7 (left: 7 8 8)",
                "8 * 1 = 8 (left: 8 8 8)",
                "8 - 1 = 7 (left: 7 8 8)",
                "8 - 1 = 7 (left: 7 8 8)",
                "8 * 1 = 8 (left: 8 8 8)",
                "8 / 1 = 8 (left: 8 8 ",
                "8 * 1 = 8 (left: 8 8 8)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                3.0,
                3.0,
                1.002,
                3.0,
                3.0,
                1.002,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 0.2",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8)",
                "8 - 1 = 7 (left: 7 8 8)",
                "8 - 1 = 7 (left: 7 8 8)",
                "8 * 1 = 8 (left: 8 8 8)",
                "8 - 1 = 7 (left: 7 8 8)",
                "8 - 1 = 7 (left: 7 8 8)",
                "8 * 1 = 8 (left: 8 8 8)",
                "8 - 1 = 7 (left: 7 8 8) || 8 / 7 = 1.14285714286 (left:",
                "8 * 1 = 8 (left: 8 8 8)",
                "8 - 1 = 7 (left: 7 8 8)"
            ],
            "Evaluation": [
                1.002,
                3.0,
                3.0,
                1.002,
                3.0,
                3.0,
                1.002,
                1.0,
                1.002,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.2",
                "2 <- INIT",
                "3 <- 1.9",
                "4 <- 0.6",
                "5 <- 1.0",
                "6 <- 1.4",
                "7 <- 1.6",
                "8 <- 0.0",
                "9 <- 1.9"
            ]
        },
        "Step 2": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56)",
                "8 - 1 = 7 (left: 7 8 8)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56)",
                "8 / 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8)",
                "8 * 1 = 8 (left: 8 8 8) || Possible next steps:",
                "8 * 1 = 8 (left: 8 8 8) || Possible next steps:",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56)"
            ],
            "Evaluation": [
                1.002,
                41.0,
                3.0,
                40.0,
                41.0,
                0.002,
                40.0,
                0.003,
                0.003,
                41.0
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.3",
                "2 <- 2.4",
                "3 <- 2.6",
                "4 <- 2.3",
                "5 <- 2.6",
                "6 <- 2.3",
                "7 <- INIT",
                "8 <- 2.9",
                "9 <- 2.6"
            ]
        },
        "Step 3": {
            "steps": [
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 / 8 = 7 (left: 7)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 - 8 = 48 (left: 48)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 / 1 = 8 (left: 8 8 ",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 8 + 56 = 64 (left: 64)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.003,
                0.001,
                0.002,
                0.002,
                0.001,
                1.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 2.6",
                "2 <- 2.1",
                "3 <- 2.1",
                "4 <- 2.3",
                "5 <- 2.6",
                "6 <- 2.4",
                "7 <- 2.9",
                "8 <- 2.3",
                "9 <- 1.5"
            ]
        },
        "Step 4": {
            "steps": [
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 - 8 = 48 (left: 48)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 8 + 56 = 64 (left: 64)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 8 + 56 = 64 (left: 64)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 8 + 56 = 64 (left: 64)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.002,
                0.002,
                0.002,
                0.002,
                0.002,
                0.001,
                41.0
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 0.9",
                "2 <- 2.9",
                "3 <- 4.9",
                "4 <- 2.4",
                "5 <- 2.9",
                "6 <- 2.1",
                "7 <- 2.3",
                "8 <- 0.6",
                "9 <- 2.3"
            ]
        },
        "Step 5": {
            "steps": [
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 / 8 = 7 (left: 7)",
                "8 * 1 = 8 (left: 8 8 8) || 8 - 8 = 0 (left: 0)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 - 8 = 48 (left: 48)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 8 + 56 = 64 (left: 64)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 - 8 = 48 (left: 48)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 - 8 = 48 (left: 48)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 8 + 56 = 64 (left: 64)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)"
            ],
            "Evaluation": [
                0.001,
                20.002,
                0.003,
                0.002,
                0.003,
                0.003,
                0.002,
                0.001,
                40.0,
                0.002
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 3.7",
                "2 <- 2.6",
                "3 <- 1.2",
                "4 <- 2.1",
                "5 <- 2.3",
                "6 <- 2.6",
                "7 <- 2.3",
                "8 <- 2.6",
                "9 <- 0.3"
            ]
        },
        "Step 6": {
            "steps": [
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 / 1 = 8 (left: 8 8  || 8 - 8 = 0 (left: 0)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 - 8 = 48 (left: 48)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56)"
            ],
            "Evaluation": [
                0.002,
                20.002,
                0.002,
                40.0,
                0.003,
                0.002,
                0.001,
                0.001,
                0.001,
                41.0
            ],
            "Resampling": [
                "0 <- 6.9",
                "1 <- 6.3",
                "2 <- 6.9",
                "3 <- 6.1",
                "4 <- 6.9",
                "5 <- 6.9",
                "6 <- 2.3",
                "7 <- 2.9",
                "8 <- 5.8",
                "9 <- 6.1"
            ]
        },
        "Step 7": {
            "steps": [
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 / 8 = 7 (left: 7)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 - 8 = 48 (left: 48)",
                "8 / 1 = 8 (left: 8 8  || 8 - 8 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 - 8 = 48 (left: 48)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 - 8 = 48 (left: 48)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 8 + 56 = 64 (left: 64)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 / 1 = 8 (left: 8 8  || 8 - 8 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.001,
                0.002,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 5.8",
                "1 <- 6.3",
                "2 <- 6.9",
                "3 <- 6.9",
                "4 <- 2.1",
                "5 <- 6.9",
                "6 <- 2.3",
                "7 <- 6.9",
                "8 <- 2.9",
                "9 <- 5.1"
            ]
        },
        "Step 8": {
            "steps": [
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 - 8 = 48 (left: 48)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 8 + 56 = 64 (left: 64)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 - 8 = 48 (left: 48)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 - 8 = 48 (left: 48)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 8 + 56 = 64 (left: 64)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 8 + 56 = 64 (left: 64)",
                "8 * 1 = 8 (left: 8 8 8) || 8 - 8 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.002,
                0.003,
                0.003,
                0.001,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.9",
                "1 <- 6.9",
                "2 <- 5.1",
                "3 <- 6.1",
                "4 <- 6.3",
                "5 <- 4.9",
                "6 <- 2.3",
                "7 <- 2.9",
                "8 <- 6.1",
                "9 <- 6.9"
            ]
        },
        "Step 9": {
            "steps": [
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 / 8 = 7 (left: 7)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 - 8 = 48 (left: 48)",
                "8 * 1 = 8 (left: 8 8 8) || 8 - 8 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "8 / 1 = 8 (left: 8 8  || 8 - 8 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 - 8 = 48 (left: 48)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 8 + 56 = 64 (left: 64)",
                "8 / 1 = 8 (left: 8 8  || 8 - 8 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "8 - 1 = 7 (left: 7 8 8) || 7 * 8 = 56 (left: 8 56) || 56 - 8 = 48 (left: 48)"
            ]
        },
        "Input": "1 8 8 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "45": {
        "puzzle": "2 2 3 8",
        "Step 0": {
            "steps": [
                "2 + 3 = 5 (left: 2 5 8)",
                "2 * 2 = 4 (left: 4 3 8)",
                "3 + 2 = 5 (left: 5 2 8)",
                "3 + 2 = 5 (left: 5 2 8)",
                "2 + 3 = 5 (left: 2 5 8)",
                "3 + 2 = 5 (left: 5 2 8)",
                "3 + 2 = 5 (left: 5 2 8)",
                "2 + 3 = 5 (left: 2 5 8)",
                "8 - 3 = 5 (left: 2 5 ",
                "2 + 3 = 5 (left: 2 5 8)"
            ],
            "Evaluation": [
                0.003,
                2.0,
                3.0,
                3.0,
                0.003,
                3.0,
                3.0,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 0.6",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 0.2",
                "6 <- 0.2",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "3 + 2 = 5 (left: 5 2 8) || 5 * 2 = 10 (left: 10 8)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4)",
                "3 + 2 = 5 (left: 5 2 8)",
                "2 + 3 = 5 (left: 2 5 8)",
                "3 + 2 = 5 (left: 5 2 8)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4)",
                "3 + 2 = 5 (left: 5 2 8) || 8 - 2 = 6 (left: 5 6)",
                "8 - 3 = 5 (left: 2 5 ",
                "2 + 3 = 5 (left: 2 5 8)",
                "3 + 2 = 5 (left: 5 2 8)"
            ],
            "Evaluation": [
                0.003,
                3.0,
                3.0,
                0.003,
                3.0,
                3.0,
                0.003,
                0.001,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.4",
                "2 <- 0.3",
                "3 <- 1.4",
                "4 <- 0.5",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 1.9",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 5 / 4 = 1.25 (left: 1.25)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4)",
                "3 + 2 = 5 (left: 5 2 8) || 8 - 2 = 6 (left: 5 6)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4)",
                "3 + 2 = 5 (left: 5 2 8)",
                "2 + 3 = 5 (left: 2 5 8)",
                "3 + 2 = 5 (left: 5 2 8) || 8 - 2 = 6 (left: 5 6)",
                "2 + 3 = 5 (left: 2 5 8)",
                "3 + 2 = 5 (left: 5 2 8)"
            ],
            "Evaluation": [
                0.002,
                3.0,
                3.0,
                0.003,
                3.0,
                3.0,
                0.003,
                0.003,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.2",
                "2 <- 2.2",
                "3 <- 1.2",
                "4 <- 2.5",
                "5 <- 1.4",
                "6 <- 2.4",
                "7 <- 1.4",
                "8 <- 2.5",
                "9 <- 2.4"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 2 = 4 (left: 4 3 8)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 / 5 =",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 / 5 =",
                "3 + 2 = 5 (left: 5 2 8) || 8 - 2 = 6 (left: 5 6)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 + 5 = 9 (left: 9)",
                "3 + 2 = 5 (left: 5 2 8) || 8 - 2 = 6 (left: 5 6)",
                "3 + 2 = 5 (left: 5 2 8) || 8 - 2 = 6 (left: 5 6)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 * 5 = 20 (left: 20)"
            ],
            "Evaluation": [
                2.0,
                0.003,
                0.003,
                0.003,
                3.0,
                3.0,
                0.001,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.5",
                "2 <- 2.4",
                "3 <- 2.9",
                "4 <- 3.4",
                "5 <- INIT",
                "6 <- 2.2",
                "7 <- 2.5",
                "8 <- 1.9",
                "9 <- 2.9"
            ]
        },
        "Step 4": {
            "steps": [
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 5 / 4 = 1.25 (left: 1.25)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 / 5 =",
                "3 + 2 = 5 (left: 5 2 8) || 8 - 2 = 6 (left: 5 6)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 * 5 = 20 (left: 20)",
                "3 + 2 = 5 (left: 5 2 8)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 + 5 = 9 (left: 9)",
                "3 + 2 = 5 (left: 5 2 8) || 8 - 2 = 6 (left: 5 6)",
                "3 + 2 = 5 (left: 5 2 8) || 8 - 2 = 6 (left: 5 6)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4)"
            ],
            "Evaluation": [
                0.002,
                3.0,
                0.003,
                0.003,
                0.003,
                3.0,
                0.001,
                0.003,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.2",
                "2 <- 3.4",
                "3 <- INIT",
                "4 <- 2.9",
                "5 <- 0.1",
                "6 <- 4.9",
                "7 <- 2.2",
                "8 <- 0.2",
                "9 <- 3.0"
            ]
        },
        "Step 5": {
            "steps": [
                "2 * 2 = 4 (left: 4 3 8)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 / 5 =",
                "2 + 3 = 5 (left: 2 5 8)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4)",
                "2 * 2 = 4 (left: 4 3 8) || 8 - 3 = ",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 + 5 = 9 (left: 9)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 + 5 = 9 (left: 9)",
                "3 + 2 = 5 (left: 5 2 8) || 8 - 2 = 6 (left: 5 6)",
                "2 * 2 = 4 (left: 4 3 8) || 8 / 4 = 2 (left: 2 3 8)"
            ],
            "Evaluation": [
                2.0,
                3.0,
                0.003,
                0.003,
                3.0,
                0.003,
                0.001,
                0.001,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- 3.5",
                "1 <- 5.1",
                "2 <- 1.2",
                "3 <- 1.9",
                "4 <- 4.1",
                "5 <- 2.5",
                "6 <- 2.4",
                "7 <- 3.5",
                "8 <- 4.1",
                "9 <- INIT"
            ]
        },
        "Step 6": {
            "steps": [
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 5 / 4 = 1.25 (left: 1.25)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 / 5 =",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4)",
                "3 + 2 = 5 (left: 5 2 8) || 8 - 2 = 6 (left: 5 6)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 * 5 = 20 (left: 20)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 + 5 = 9 (left: 9)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 + 5 = 9 (left: 9)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 + 5 = 9 (left: 9)",
                "3 + 2 = 5 (left: 5 2 8)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                3.0,
                0.003,
                0.003,
                3.0,
                0.001,
                0.001,
                0.001,
                3.0
            ],
            "Resampling": [
                "0 <- 3.5",
                "1 <- 2.2",
                "2 <- 1.5",
                "3 <- 1.4",
                "4 <- INIT",
                "5 <- 3.4",
                "6 <- 4.5",
                "7 <- 3.5",
                "8 <- 3.4",
                "9 <- 5.9"
            ]
        },
        "Step 7": {
            "steps": [
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 5 / 4 = 1.25 (left: 1.25)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 / 5 =",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 / 5 =",
                "3 + 2 = 5 (left: 5 2 8) || 8 - 2 = 6 (left: 5 6)",
                "3 + 2 = 5 (left: 5 2 8)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 * 5 = 20 (left: 20)",
                "3 + 2 = 5 (left: 5 2 8) || 8 - 2 = 6 (left: 5 6)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 + 5 = 9 (left: 9)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 + 5 = 9 (left: 9)",
                "2 * 2 = 4 (left: 4 3 8) || 8 / 4 = 2 (left: 2 3 8) || 8 / 2 = 4 (left: 4 8)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                3.0,
                0.003,
                0.003,
                0.001,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 2.5",
                "2 <- 6.2",
                "3 <- 2.2",
                "4 <- 3.5",
                "5 <- 5.4",
                "6 <- 1.2",
                "7 <- 2.9",
                "8 <- 7.4",
                "9 <- 1.1"
            ]
        },
        "Step 8": {
            "steps": [
                "3 + 2 = 5 (left: 5 2 8) || 5 * 2 = 10 (left: 10 8)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 / 5 =",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 + 5 = 9 (left: 9)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 * 5 = 20 (left: 20)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 * 5 = 20 (left: 20)",
                "3 + 2 = 5 (left: 5 2 8) || 8 - 2 = 6 (left: 5 6)",
                "3 + 2 = 5 (left: 5 2 8) || 8 - 2 = 6 (left: 5 6)",
                "3 + 2 = 5 (left: 5 2 8) || 8 - 2 = 6 (left: 5 6)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 * 5 = 20 (left: 20)"
            ],
            "Evaluation": [
                0.003,
                3.0,
                0.003,
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.5",
                "1 <- 0.5",
                "2 <- 2.5",
                "3 <- 1.9",
                "4 <- 6.5",
                "5 <- 2.1",
                "6 <- 4.9",
                "7 <- 8.1",
                "8 <- 8.1",
                "9 <- 8.1"
            ]
        },
        "Step 9": {
            "steps": [
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 5 / 4 = 1.25 (left: 1.25)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4)",
                "3 + 2 = 5 (left: 5 2 8) || 8 - 2 = 6 (left: 5 6)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 * 5 = 20 (left: 20)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 * 5 = 20 (left: 20)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 + 5 = 9 (left: 9)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 + 5 = 9 (left: 9)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 + 5 = 9 (left: 9)",
                "3 + 2 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4) || 4 * 5 = 20 (left: 20)"
            ]
        },
        "Input": "2 2 3 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "46": {
        "puzzle": "2 9 9 12",
        "Step 0": {
            "steps": [
                "12 - 2 = 10 (left: 9 10 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12)",
                "9 - 2 = 7 (left: 7 9 12)",
                "9 - 2 = 7 (left: 7 9 12)",
                "12 - 2 = 10 (left: 9 10 12)",
                "9 - 2 = 7 (left: 7 9 12)",
                "9 - 2 = 7 (left: 7 9 12)",
                "12 - 2 = 10 (left: 9 10 12)",
                "9 + 2 = 11",
                "12 - 2 = 10 (left: 9 10 12)"
            ],
            "Evaluation": [
                3.0,
                3.0,
                2.001,
                2.001,
                3.0,
                2.001,
                2.001,
                3.0,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.0",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.4",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12)",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90)",
                "9 - 2 = 7 (left: 7 9 12)",
                "12 - 2 = 10 (left: 9 10 12)",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90)",
                "9 - 2 = 7 (left: 7 9 12)",
                "12 - 2 = 10 (left: 9 10 12)",
                "9 + 2 = 11",
                "12 - 2 = 10 (left: 9 10 12)",
                "9 - 2 = 7 (left: 7 9 12)"
            ],
            "Evaluation": [
                3.0,
                0.003,
                2.001,
                3.0,
                0.003,
                2.001,
                3.0,
                0.003,
                3.0,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.2",
                "3 <- INIT",
                "4 <- 1.8",
                "5 <- 0.4",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- 1.8",
                "9 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12)",
                "9 - 2 = 7 (left: 7 9 12)",
                "9 - 2 = 7 (left: 7 9 12) || 12 - 7 = 5 (left: 7 5)",
                "12 - 2 = 10 (left: 9 10 12)",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90)",
                "12 - 2 = 10 (left: 9 10 12) || 12 / 9 = ",
                "12 - 2 = 10 (left: 9 10 12)",
                "9 + 2 = 11",
                "12 - 2 = 10 (left: 9 10 12) || 12 + 9 = 21 (left: 10 21)",
                "9 - 2 = 7 (left: 7 9 12) || 12 - 7 = 5 (left: 7 5)"
            ],
            "Evaluation": [
                3.0,
                2.001,
                1.002,
                3.0,
                0.003,
                0.003,
                3.0,
                0.003,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- INIT",
                "2 <- 0.3",
                "3 <- 1.8",
                "4 <- 0.7",
                "5 <- 2.3",
                "6 <- 0.0",
                "7 <- 2.6",
                "8 <- 0.9",
                "9 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "9 - 2 = 7 (left: 7 9 12) || 7 * 9 = 63 (left: 63 12)",
                "9 - 2 = 7 (left: 7 9 12)",
                "9 - 2 = 7 (left: 7 9 12) || 12 - 7 = 5 (left: 7 5)",
                "12 - 2 = 10 (left: 9 10 12) || 12 + 9 = 21 (left: 10 21)",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90)",
                "12 - 2 = 10 (left: 9 10 12) || 12 / 9 = ",
                "12 - 2 = 10 (left: 9 10 12) || 12 + 9 = 21 (left: 10 21)",
                "12 - 2 = 10 (left: 9 10 12) || 12 - 9 = 3 (left: 3 12)",
                "12 - 2 = 10 (left: 9 10 12) || 12 + 9 = 21 (left: 10 21)",
                "9 - 2 = 7 (left: 7 9 12)"
            ],
            "Evaluation": [
                0.001,
                2.001,
                1.002,
                0.003,
                0.003,
                0.003,
                0.003,
                20.002,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 3.7",
                "2 <- 0.0",
                "3 <- INIT",
                "4 <- 3.9",
                "5 <- 1.0",
                "6 <- 3.7",
                "7 <- 2.2",
                "8 <- 2.0",
                "9 <- 1.3"
            ]
        },
        "Step 4": {
            "steps": [
                "9 - 2 = 7 (left: 7 9 12) || 7 * 9 = 63 (left: 63 12)",
                "12 - 2 = 10 (left: 9 10 12) || 12 - 9 = 3 (left: 3 12) || 4 + 7 = 11 (left: 11 10)",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90)",
                "12 - 2 = 10 (left: 9 10 12)",
                "9 - 2 = 7 (left: 7 9 12) || 12 - 7 = 5 (left: 7 5)",
                "9 / 2 = 4.5 (left: 4.5 9 12) || 4.5 * 9 = 40.5 (left: 12 40.5)",
                "12 - 2 = 10 (left: 9 10 12) || 12 - 9 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "9 - 2 = 7 (left: 7 9 12) || 12 - 7 = 5 (left: 7 5) || 7 * 5 = 35 (left: 35)",
                "9 / 2 = 4.5 (left: 4.5 9 12) || 12 - 4.5 = 7.5 (left: 7.5 12)",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                3.0,
                1.002,
                0.002,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 1.3",
                "2 <- 3.9",
                "3 <- 3.7",
                "4 <- 3.7",
                "5 <- 4.4",
                "6 <- INIT",
                "7 <- 4.3",
                "8 <- 1.8",
                "9 <- 1.2"
            ]
        },
        "Step 5": {
            "steps": [
                "9 - 2 = 7 (left: 7 9 12) || 12 - 7 = 5 (left: 7 5) || 7 - 5 = 2 (left: 2)",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90)",
                "9 - 2 = 7 (left: 7 9 12) || 12 - 7 = 5 (left: 7 5)",
                "12 - 2 = 10 (left: 9 10 12) || 12 - 9 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "12 - 2 = 10 (left: 9 10 12) || 12 - 9 = 3 (left: 3 12) || Possible next steps:",
                "9 - 2 = 7 (left: 7 9 12) || 12 - 7 = 5 (left: 7 5) || 7 / 5 = 1.4 (left: 1.4)",
                "12 - 2 = 10 (left: 9 10 12)",
                "12 - 2 = 10 (left: 9 10 12) || 12 - 9 = 3 (left: 3 12)",
                "12 - 2 = 10 (left: 9 10 12) || 12 + 9 = 21 (left: 10 21)",
                "9 - 2 = 7 (left: 7 9 12) || 12 - 7 = 5 (left: 7 5)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                1.002,
                0.003,
                0.003,
                0.0,
                3.0,
                20.002,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 3.7",
                "1 <- 5.7",
                "2 <- 4.4",
                "3 <- 2.3",
                "4 <- 3.7",
                "5 <- 1.6",
                "6 <- 5.7",
                "7 <- 1.6",
                "8 <- 1.6",
                "9 <- 5.7"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 2 = 10 (left: 9 10 12) || 12 - 9 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9 12)",
                "12 - 2 = 10 (left: 9 10 12) || 12 - 9 = 3 (left: 3 12) || 4 + 7 = 11 (left: 11 10)",
                "9 - 2 = 7 (left: 7 9 12) || 12 - 7 = 5 (left: 7 5) || 7 / 5 = 1.4 (left: 1.4)",
                "12 - 2 = 10 (left: 9 10 12) || 12 + 9 = 21 (left: 10 21)",
                "12 - 2 = 10 (left: 9 10 12) || 12 - 9 = 3 (left: 3 12) || Possible next steps:",
                "12 - 2 = 10 (left: 9 10 12) || 12 / 9 = ",
                "12 - 2 = 10 (left: 9 10 12) || 12 - 9 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "12 - 2 = 10 (left: 9 10 12) || 12 - 9 = 3 (left: 3 12)",
                "12 - 2 = 10 (left: 9 10 12) || 12 + 9 = 21 (left: 10 21)",
                "12 - 2 = 10 (left: 9 10 12) || 12 - 9 = 3 (left: 3 12) || Possible next steps:"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.0,
                0.003,
                0.003,
                0.003,
                0.003,
                20.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.7",
                "1 <- 6.7",
                "2 <- 2.3",
                "3 <- 6.7",
                "4 <- 0.4",
                "5 <- 6.7",
                "6 <- 0.3",
                "7 <- 1.9",
                "8 <- 5.7",
                "9 <- 5.2"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 2 = 10 (left: 9 10 12) || 12 - 9 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9 12)",
                "12 - 2 = 10 (left: 9 10 12) || 12 - 9 = 3 (left: 3 12) || 4 + 7 = 11 (left: 11 10)",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90)",
                "12 - 2 = 10 (left: 9 10 12) || 12 - 9 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90)",
                "12 - 2 = 10 (left: 9 10 12) || 12 - 9 = 3 (left: 3 12) || Possible next steps:",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12)",
                "9 - 2 = 7 (left: 7 9 12) || 12 - 9 = 3 (left: 7 3)",
                "12 - 2 = 10 (left: 9 10 12) || 12 - 9 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "9 - 2 = 7 (left: 7 9 12) || 12 - 7 = 5 (left: 7 5) || 7 / 5 = 1.4 (left: 1.4)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                60.0,
                0.0,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 7.6",
                "1 <- INIT",
                "2 <- 6.7",
                "3 <- 5.7",
                "4 <- 5.7",
                "5 <- 7.6",
                "6 <- 6.7",
                "7 <- 6.7",
                "8 <- 5.7",
                "9 <- 0.1"
            ]
        },
        "Step 8": {
            "steps": [
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "9 - 2 = 7 (left: 7 9 12)",
                "12 - 2 = 10 (left: 9 10 12) || 12 - 9 = 3 (left: 3 12) || 4 + 7 = 11 (left: 11 10)",
                "12 - 2 = 10 (left: 9 10 12) || 12 - 9 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "12 - 2 = 10 (left: 9 10 12) || 12 - 9 = 3 (left: 3 12) || Possible next steps:",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)",
                "12 - 2 = 10 (left: 9 10 12) || 12 - 9 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "12 - 2 = 10 (left: 9 10 12) || 12 - 9 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "12 - 2 = 10 (left: 9 10 12) || 12 - 9 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12) || 4.5 * 9 = 40.5 (left: 12 40.5)"
            ],
            "Evaluation": [
                0.003,
                2.001,
                0.003,
                0.003,
                0.003,
                60.0,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 8.5",
                "1 <- 5.6",
                "2 <- 5.7",
                "3 <- 3.7",
                "4 <- 8.5",
                "5 <- 8.1",
                "6 <- 2.3",
                "7 <- 6.7",
                "8 <- 7.6",
                "9 <- 7.6"
            ]
        },
        "Step 9": {
            "steps": [
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90)",
                "12 - 2 = 10 (left: 9 10 12) || 12 - 9 = 3 (left: 3 12) || 4 + 7 = 11 (left: 11 10)",
                "12 - 2 = 10 (left: 9 10 12) || 12 - 9 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24",
                "9 - 2 = 7 (left: 7 9 12) || Input: 63 7 5 3",
                "12 - 2 = 10 (left: 9 10 12) || 12 + 9 = 21 (left: 10 21)",
                "12 - 2 = 10 (left: 9 10 12) || 12 - 9 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)"
            ]
        },
        "Input": "2 9 9 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "47": {
        "puzzle": "11 11 11 12",
        "Step 0": {
            "steps": [
                "12 - 11 = 1 (left: 11 11 1)",
                "11 / 11 = 1 (left: 1 11 12)",
                "12 - 11 = 1 (left: 11 1 1)",
                "12 - 11 = 1 (left: 11 1 1)",
                "12 - 11 = 1 (left: 11 11 1)",
                "12 - 11 = 1 (left: 11 1 1)",
                "12 - 11 = 1 (left: 11 1 1)",
                "12 - 11 = 1 (left: 11 11 1)",
                "11 * 11 = 121 (left: 121 11 ",
                "12 - 11 = 1 (left: 11 11 1)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                1.001,
                1.001,
                0.003,
                1.001,
                1.001,
                0.003,
                20.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- INIT",
                "2 <- 0.5",
                "3 <- 0.1",
                "4 <- INIT",
                "5 <- 0.8",
                "6 <- 0.1",
                "7 <- 0.1",
                "8 <- 0.1",
                "9 <- 0.8"
            ]
        },
        "Step 1": {
            "steps": [
                "11 * 11 = 121 (left: 121 11  || 121 / 11 = 11 (left: 11)",
                "12 - 11 = 1 (left: 11 1 1)",
                "12 - 11 = 1 (left: 11 1 1) || Possible next steps:",
                "11 / 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 11 = 1 (left: 11 1 1)",
                "11 * 11 = 121 (left: 121 11  || 25 + 5 = 30 (left: 30)",
                "11 / 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 / 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 / 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 * 11 = 121 (left: 121 11  || 25 + 5 = 30 (left: 30)"
            ],
            "Evaluation": [
                0.003,
                1.001,
                0.003,
                0.002,
                1.001,
                0.003,
                0.002,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.4",
                "2 <- 0.5",
                "3 <- 0.8",
                "4 <- 0.5",
                "5 <- 0.8",
                "6 <- 0.1",
                "7 <- INIT",
                "8 <- 0.8",
                "9 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "11 / 11 = 1 (left: 1 11 12)",
                "12 - 11 = 1 (left: 11 1 1) || Possible next steps:",
                "12 - 11 = 1 (left: 11 1 1) || Possible next steps:",
                "11 * 11 = 121 (left: 121 11  || Input: 25 5",
                "12 - 11 = 1 (left: 11 1 1) || Input: 5 3 9",
                "11 * 11 = 121 (left: 121 11  || 25 + 5 = 30 (left: 30)",
                "11 / 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 * 11 = 121 (left: 121 11 ",
                "11 * 11 = 121 (left: 121 11  || Input: 25 5",
                "12 - 11 = 1 (left: 11 1 1) || Input: 5 3 9"
            ],
            "Evaluation": [
                20.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                20.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.7",
                "1 <- 2.0",
                "2 <- 2.7",
                "3 <- 2.7",
                "4 <- 2.7",
                "5 <- 2.7",
                "6 <- 2.7",
                "7 <- 2.7",
                "8 <- 0.2",
                "9 <- 0.1"
            ]
        },
        "Step 3": {
            "steps": [
                "11 * 11 = 121 (left: 121 11  || 121 / 11 = 11 (left: 11)",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 * 11 = 121 (left: 121 11  || 25 - 5 = 20 (left: 20)",
                "11 * 11 = 121 (left: 121 11  || Input: 25 5",
                "11 * 11 = 121 (left: 121 11  || 25 + 5 = 30 (left: 30)",
                "11 * 11 = 121 (left: 121 11  || 25 + 5 = 30 (left: 30)",
                "11 * 11 = 121 (left: 121 11  || Input: 25 5",
                "11 * 11 = 121 (left: 121 11  || Input: 25 5",
                "12 - 11 = 1 (left: 11 1 1) || 1 - 1 = 0 (left: 0)",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                20.002,
                20.002
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 2.0",
                "2 <- 3.9",
                "3 <- 3.9",
                "4 <- 0.1",
                "5 <- INIT",
                "6 <- 3.8",
                "7 <- 3.8",
                "8 <- 3.1",
                "9 <- 3.9"
            ]
        },
        "Step 4": {
            "steps": [
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 11 1 1)",
                "12 - 11 = 1 (left: 11 1 1) || 1 - 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "12 - 11 = 1 (left: 11 1 1) || 1 - 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.003,
                0.003,
                20.002,
                1.001,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 4.1",
                "2 <- 0.5",
                "3 <- INIT",
                "4 <- 3.8",
                "5 <- 3.8",
                "6 <- 4.1",
                "7 <- 4.1",
                "8 <- 0.1",
                "9 <- 2.7"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 11 = 1 (left: 11 1 1) || 1 - 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 11 1 1) || Possible next steps:",
                "12 - 11 = 1 (left: 11 11 1)",
                "12 - 11 = 1 (left: 11 1 1) || 1 - 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "12 - 11 = 1 (left: 11 1 1) || 1 - 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 * 11 = 121 (left: 121 11  || 25 + 5 = 30 (left: 30)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 2.0",
                "2 <- 4.4",
                "3 <- 4.4",
                "4 <- 3.9",
                "5 <- 0.1",
                "6 <- 4.4",
                "7 <- 2.0",
                "8 <- 4.1",
                "9 <- 3.9"
            ]
        },
        "Step 6": {
            "steps": [
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                20.002,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.9",
                "1 <- 6.5",
                "2 <- 0.3",
                "3 <- 4.1",
                "4 <- 3.8",
                "5 <- 4.4",
                "6 <- 2.7",
                "7 <- 6.1",
                "8 <- 3.1",
                "9 <- 3.8"
            ]
        },
        "Step 7": {
            "steps": [
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 11 1 1) || Possible next steps:",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 11 1 1) || 1 - 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 * 11 = 121 (left: 121 11  || Input: 25 5",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 11 1 1) || 1 - 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 2.7",
                "2 <- 4.4",
                "3 <- 2.7",
                "4 <- 6.1",
                "5 <- 3.1",
                "6 <- 6.5",
                "7 <- 6.1",
                "8 <- 3.9",
                "9 <- 6.1"
            ]
        },
        "Step 8": {
            "steps": [
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 * 11 = 121 (left: 121 11  || 25 - 5 = 20 (left: 20)",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 * 11 = 121 (left: 121 11  || Input: 25 5",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 2.0",
                "2 <- 3.8",
                "3 <- 0.8",
                "4 <- 3.9",
                "5 <- 6.5",
                "6 <- 3.1",
                "7 <- 3.9",
                "8 <- 4.4",
                "9 <- 2.0"
            ]
        },
        "Step 9": {
            "steps": [
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 11 1 1) || 1 - 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "11 * 11 = 121 (left: 121 11  || Input: 25 5",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ]
        },
        "Input": "11 11 11 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "48": {
        "puzzle": "3 8 13 13",
        "Step 0": {
            "steps": [
                "13 + 3 = 16 (left: 8 13 16)",
                "8 / 3 = 2.6666666666666665 (left: 2.6666666666666665 8 13)",
                "3 * 8 = 24 (left: 24 13 13)",
                "3 * 8 = 24 (left: 24 13 13)",
                "13 + 3 = 16 (left: 8 13 16)",
                "3 * 8 = 24 (left: 24 13 13)",
                "3 * 8 = 24 (left: 24 13 13)",
                "13 + 3 = 16 (left: 8 13 16)",
                "13",
                "13 + 3 = 16 (left: 8 13 16)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                20.002,
                20.002,
                1.002,
                20.002,
                20.002,
                1.002,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.9",
                "4 <- 0.6",
                "5 <- 0.5",
                "6 <- 0.3",
                "7 <- 0.5",
                "8 <- 0.6",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "3 * 8 = 24 (left: 24 13 13) || 13 * 13 = 169 (left: 24 169)",
                "3 * 8 = 24 (left: 24 13 13)",
                "3 * 8 = 24 (left: 24 13 13)",
                "13 + 3 = 16 (left: 8 13 16) || 8 / 13 = 0.6153846153846154 (left: 0.6153846153846154 16)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13)",
                "3 * 8 = 24 (left: 24 13 13) || 24 +",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13)",
                "3 * 8 = 24 (left: 24 13 13) || 13 - 24 = -11 (left: -11 13)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13)",
                "3 * 8 = 24 (left: 24 13 13)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                20.002,
                0.001,
                22.0,
                0.003,
                60.0,
                0.001,
                60.0,
                20.002
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- INIT",
                "2 <- 1.6",
                "3 <- 0.5",
                "4 <- 1.9",
                "5 <- 0.2",
                "6 <- 0.3",
                "7 <- 1.8",
                "8 <- 1.6",
                "9 <- 1.6"
            ]
        },
        "Step 2": {
            "steps": [
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "3 * 8 = 24 (left: 24 13 13)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13)",
                "3 * 8 = 24 (left: 24 13 13) || 24 +",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)"
            ],
            "Evaluation": [
                0.0,
                20.002,
                0.002,
                60.0,
                22.0,
                0.003,
                60.0,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.6",
                "2 <- 2.6",
                "3 <- 2.6",
                "4 <- 2.3",
                "5 <- 2.6",
                "6 <- 1.4",
                "7 <- 2.6",
                "8 <- 2.3",
                "9 <- 2.6"
            ]
        },
        "Step 3": {
            "steps": [
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 13 - 1.846 = 11.154 (left: 11.154)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 1.846 * 13 = 23.978 (left: 23.978)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                0.003,
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.3",
                "2 <- 1.4",
                "3 <- 2.6",
                "4 <- 0.2",
                "5 <- 2.6",
                "6 <- 2.3",
                "7 <- INIT",
                "8 <- 0.5",
                "9 <- 2.3"
            ]
        },
        "Step 4": {
            "steps": [
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 13 / 1.846 = 7.048 (left: 7.048)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "13",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.003,
                0.003,
                22.0,
                0.002,
                0.003,
                0.003,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 4.8",
                "2 <- 4.8",
                "3 <- 4.8",
                "4 <- 1.8",
                "5 <- 1.8",
                "6 <- 2.4",
                "7 <- 4.8",
                "8 <- 1.8",
                "9 <- 1.2"
            ]
        },
        "Step 5": {
            "steps": [
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 1.846 * 13 = 23.978 (left: 23.978)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.002,
                0.003,
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                22.0
            ],
            "Resampling": [
                "0 <- 5.9",
                "1 <- 2.1",
                "2 <- 4.4",
                "3 <- 1.2",
                "4 <- 5.9",
                "5 <- 0.5",
                "6 <- 2.1",
                "7 <- 5.9",
                "8 <- 4.8",
                "9 <- 4.8"
            ]
        },
        "Step 6": {
            "steps": [
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 13 - 1.846 = 11.154 (left: 11.154)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 13 / 1.846 = 7.048 (left: 7.048)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 13 / 1.846 = 7.048 (left: 7.048)",
                "3 * 8 = 24 (left: 24 13 13) || 24 +",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || Possible next steps:",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)"
            ],
            "Evaluation": [
                0.002,
                22.0,
                0.003,
                60.0,
                0.003,
                0.003,
                60.0,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 6.6",
                "1 <- 1.1",
                "2 <- 5.9",
                "3 <- 2.1",
                "4 <- INIT",
                "5 <- 6.6",
                "6 <- 2.6",
                "7 <- 2.4",
                "8 <- 1.9",
                "9 <- 6.3"
            ]
        },
        "Step 7": {
            "steps": [
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 13 / 1.846 = 7.048 (left: 7.048)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13)",
                "3 * 8 = 24 (left: 24 13 13)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || Possible next steps:",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)"
            ],
            "Evaluation": [
                0.0,
                22.0,
                0.003,
                60.0,
                20.002,
                0.002,
                0.003,
                0.003,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 5.9",
                "1 <- 7.8",
                "2 <- 7.3",
                "3 <- 4.8",
                "4 <- 6.3",
                "5 <- 2.6",
                "6 <- 6.1",
                "7 <- 7.1",
                "8 <- 6.1",
                "9 <- 7.8"
            ]
        },
        "Step 8": {
            "steps": [
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 13 - 1.846 = 11.154 (left: 11.154)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 1.846 * 13 = 23.978 (left: 23.978)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || Possible next steps:",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 1.846 * 13 = 23.978 (left: 23.978)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                0.003,
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 6.6",
                "1 <- 7.3",
                "2 <- 4.8",
                "3 <- 7.8",
                "4 <- 6.1",
                "5 <- 4.8",
                "6 <- 6.3",
                "7 <- 7.1",
                "8 <- 2.4",
                "9 <- 7.4"
            ]
        },
        "Step 9": {
            "steps": [
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 13 / 1.846 = 7.048 (left: 7.048)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || Possible next steps:",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 1.846 * 13 = 23.978 (left: 23.978)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13)"
            ]
        },
        "Input": "3 8 13 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "49": {
        "puzzle": "9 9 12 12",
        "Step 0": {
            "steps": [
                "12 + 9 = 21 (left: 9 12 21)",
                "9 / 9 = 1 (left: 1 12 12)",
                "9 * 9 = 81 (left: 12 12 81)",
                "9 * 9 = 81 (left: 12 12 81)",
                "12 + 9 = 21 (left: 9 12 21)",
                "9 * 9 = 81 (left: 12 12 81)",
                "9 * 9 = 81 (left: 12 12 81)",
                "12 + 9 = 21 (left: 9 12 21)",
                "12 - 9 = 3 (left: 3 12 ",
                "12 + 9 = 21 (left: 9 12 21)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                1.002,
                1.002,
                1.002,
                1.002,
                1.002,
                1.002,
                60.0,
                1.002
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 0.8",
                "2 <- 0.8",
                "3 <- 0.8",
                "4 <- 0.8",
                "5 <- 0.8",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- 0.8",
                "9 <- 0.8"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 9 = 3 (left: 3 12  || 12 / 3 = 4 (left: 4 12)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 - 9 = 3 (left: 3 12  || 12 - 3 = 9 (left: 9 12)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 + 9 = 21 (left: 9 12 21)",
                "12 - 9 = 3 (left: 3 12 ",
                "12 - 9 = 3 (left: 3 12  || 12 - 3 = 9 (left: 9 12)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                1.002,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.7",
                "3 <- 0.8",
                "4 <- INIT",
                "5 <- 1.7",
                "6 <- 0.8",
                "7 <- 0.8",
                "8 <- 1.7",
                "9 <- 0.8"
            ]
        },
        "Step 2": {
            "steps": [
                "9 / 9 = 1 (left: 1 12 12)",
                "9 * 9 = 81 (left: 12 12 81)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 - 9 = 3 (left: 3 12  || 12 - 3 = 9 (left: 9 12)",
                "9 * 9 = 81 (left: 12 12 81)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 - 9 = 3 (left: 3 12  || 12 - 3 = 9 (left: 9 12)",
                "12 - 9 = 3 (left: 3 12  || 12 ^ 3 = 1728 (left: 1728)",
                "12 - 9 = 3 (left: 3 12  || 12 - 3 = 9 (left: 9 12)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                0.003,
                0.003,
                1.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.7",
                "2 <- INIT",
                "3 <- 0.8",
                "4 <- 0.8",
                "5 <- 1.7",
                "6 <- 1.6",
                "7 <- INIT",
                "8 <- 0.8",
                "9 <- 0.8"
            ]
        },
        "Step 3": {
            "steps": [
                "9 / 9 = 1 (left: 1 12 12)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "9 * 9 = 81 (left: 12 12 81)",
                "12 - 9 = 3 (left: 3 12  || 12 - 3 = 9 (left: 9 12)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 + 9 = 21 (left: 9 12 21) || 21 / 3 = 7 (left: 7 21)",
                "12 - 9 = 3 (left: 3 12 ",
                "12 - 9 = 3 (left: 3 12  || 12 - 3 = 9 (left: 9 12)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                1.002,
                0.003,
                0.003,
                0.003,
                0.003,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.5",
                "2 <- 3.7",
                "3 <- 3.7",
                "4 <- 3.7",
                "5 <- 3.7",
                "6 <- 0.8",
                "7 <- 3.7",
                "8 <- 1.7",
                "9 <- 0.8"
            ]
        },
        "Step 4": {
            "steps": [
                "9 / 9 = 1 (left: 1 12 12)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15) || 15 / 3 = 5 (left: 5)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 - 9 = 3 (left: 3 12  || 12 - 3 = 9 (left: 9 12)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 - 9 = 3 (left: 3 12  || 12 - 3 = 9 (left: 9 12)",
                "12 - 9 = 3 (left: 3 12  || 12 ^ 3 = 1728 (left: 1728)",
                "12 - 9 = 3 (left: 3 12  || 12 - 3 = 9 (left: 9 12)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.7",
                "1 <- 3.7",
                "2 <- 3.7",
                "3 <- 0.8",
                "4 <- 0.8",
                "5 <- 1.7",
                "6 <- 1.7",
                "7 <- 3.7",
                "8 <- 3.7",
                "9 <- 3.7"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 9 = 3 (left: 3 12  || 12 / 3 = 4 (left: 4 12)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 - 9 = 3 (left: 3 12  || 12 - 3 = 9 (left: 9 12)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 - 9 = 3 (left: 3 12  || 12 - 3 = 9 (left: 9 12)",
                "12 - 9 = 3 (left: 3 12  || 12 ^ 3 = 1728 (left: 1728)",
                "12 - 9 = 3 (left: 3 12  || 12 - 3 = 9 (left: 9 12)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.7",
                "1 <- 1.7",
                "2 <- 1.7",
                "3 <- 3.7",
                "4 <- 1.7",
                "5 <- 0.8",
                "6 <- 1.7",
                "7 <- 3.7",
                "8 <- 3.7",
                "9 <- 0.8"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 9 = 3 (left: 3 12  || 12 / 3 = 4 (left: 4 12)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 - 9 = 3 (left: 3 12  || 12 - 3 = 9 (left: 9 12)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 - 9 = 3 (left: 3 12  || 12 - 3 = 9 (left: 9 12)",
                "12 - 9 = 3 (left: 3 12  || 12 ^ 3 = 1728 (left: 1728)",
                "12 - 9 = 3 (left: 3 12  || 12 - 3 = 9 (left: 9 12)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 1.7",
                "2 <- 1.7",
                "3 <- 0.8",
                "4 <- 1.7",
                "5 <- 3.7",
                "6 <- 3.7",
                "7 <- 1.7",
                "8 <- 0.8",
                "9 <- 3.7"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 9 = 3 (left: 3 12  || 12 / 3 = 4 (left: 4 12)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 - 9 = 3 (left: 3 12  || 12 - 3 = 9 (left: 9 12)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 - 9 = 3 (left: 3 12  || 12 - 3 = 9 (left: 9 12)",
                "12 - 9 = 3 (left: 3 12  || 12 ^ 3 = 1728 (left: 1728)",
                "12 - 9 = 3 (left: 3 12  || 12 - 3 = 9 (left: 9 12)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.7",
                "1 <- 1.7",
                "2 <- 1.7",
                "3 <- 1.7",
                "4 <- 3.7",
                "5 <- 3.7",
                "6 <- 1.7",
                "7 <- 1.7",
                "8 <- 0.8",
                "9 <- 3.7"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 9 = 3 (left: 3 12  || 12 / 3 = 4 (left: 4 12)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 - 9 = 3 (left: 3 12  || 12 - 3 = 9 (left: 9 12)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 - 9 = 3 (left: 3 12  || 12 - 3 = 9 (left: 9 12)",
                "12 - 9 = 3 (left: 3 12  || 12 ^ 3 = 1728 (left: 1728)",
                "12 - 9 = 3 (left: 3 12  || 12 - 3 = 9 (left: 9 12)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 0.8",
                "2 <- 1.7",
                "3 <- 0.8",
                "4 <- 1.7",
                "5 <- 3.7",
                "6 <- 3.7",
                "7 <- 3.7",
                "8 <- 3.7",
                "9 <- 1.7"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 9 = 3 (left: 3 12  || 12 / 3 = 4 (left: 4 12)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 - 9 = 3 (left: 3 12  || 12 - 3 = 9 (left: 9 12)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 - 9 = 3 (left: 3 12  || 12 - 3 = 9 (left: 9 12)",
                "12 - 9 = 3 (left: 3 12  || 12 ^ 3 = 1728 (left: 1728)",
                "12 - 9 = 3 (left: 3 12  || 12 - 3 = 9 (left: 9 12)",
                "12 - 9 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)"
            ]
        },
        "Input": "9 9 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "50": {
        "puzzle": "1 1 5 5",
        "Step 0": {
            "steps": [
                "5 + 1 = 6 (left: 1 5 6)",
                "1 * 1 = 1 (left: 1 5 5)",
                "5 * 1 = 5 (left: 1 5 5)",
                "1 * 5 = 5 (left: 5 5 5)",
                "5 + 1 = 6 (left: 1 5 6)",
                "1 * 1 = 1 (left: 1 5 5)",
                "5 - 1 = 4 (left: 1 5 4)",
                "5 + 1 = 6 (left: 1 5 6)",
                "5 / 1 = 5 (left: 1 5 ",
                "5 + 1 = 6 (left: 1 5 6)"
            ],
            "Evaluation": [
                0.002,
                41.0,
                41.0,
                2.001,
                0.002,
                41.0,
                3.0,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.2",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 0.5",
                "7 <- 0.5",
                "8 <- 0.3",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5 5)",
                "1 - 1 = 0 (left: 0 5 5)",
                "1 - 1 = 0 (left: 0 5 5)",
                "5 * 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5)",
                "1 - 1 = 0 (left: 0 5 5)",
                "1 - 1 = 0 (left: 0 5 5)",
                "1 * 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5)",
                "1 * 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5)",
                "1 * 5 = 5 (left: 5 5 5) || Input: 3 6 9",
                "1 - 1 = 0 (left: 0 5 5)"
            ],
            "Evaluation": [
                2.001,
                21.001,
                2.001,
                3.0,
                22.0,
                20.002,
                3.0,
                3.0,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 1.4",
                "2 <- 0.2",
                "3 <- 0.1",
                "4 <- 1.4",
                "5 <- 0.5",
                "6 <- 1.4",
                "7 <- 0.1",
                "8 <- 0.1",
                "9 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "5 * 1 = 5 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5 5)",
                "1 - 1 = 0 (left: 0 5 5) || 3 + 7 = 10 (left:",
                "5 * 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)",
                "1 * 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5)",
                "1 - 1 = 0 (left: 0 5 5) || 3 + 6 = 9 (left: 9 9)",
                "1 * 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)",
                "1 - 1 = 0 (left: 0 5 5) || 5 / 5 = 1 (left: 0 1)",
                "1 * 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5)",
                "1 * 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5)",
                "5 * 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)"
            ],
            "Evaluation": [
                2.001,
                0.0,
                21.0,
                3.0,
                0.002,
                21.0,
                60.0,
                3.0,
                3.0,
                21.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- INIT",
                "2 <- 0.5",
                "3 <- 2.2",
                "4 <- 2.2",
                "5 <- INIT",
                "6 <- 0.1",
                "7 <- INIT",
                "8 <- 2.8",
                "9 <- 2.6"
            ]
        },
        "Step 3": {
            "steps": [
                "5 * 1 = 5 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5 5)",
                "1 - 1 = 0 (left: 0 5 5)",
                "1 * 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)",
                "5 * 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "5 * 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "1 - 1 = 0 (left: 0 5 5)",
                "1 * 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5)",
                "5 * 1 = 5 (left: 1 5 ",
                "1 * 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5) || 5 / 4 = 1.25 (left: 1.25 5)",
                "1 - 1 = 0 (left: 0 5 5) || 5 / 5 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)"
            ],
            "Evaluation": [
                2.001,
                2.001,
                21.0,
                0.003,
                0.002,
                2.001,
                3.0,
                0.002,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 2.6",
                "2 <- INIT",
                "3 <- 3.2",
                "4 <- 0.2",
                "5 <- 1.5",
                "6 <- 1.6",
                "7 <- 0.5",
                "8 <- 2.6",
                "9 <- 2.6"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5 5)",
                "1 - 1 = 0 (left: 0 5 5) || 5 / 5 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 5 5)",
                "1 * 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "5 * 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)",
                "1 - 1 = 0 (left: 0 5 5) || 3 + 6 = 9 (left: 9 9)",
                "1 * 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5) || 5 / 4 = 1.25 (left: 1.25 5)",
                "1 * 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5)",
                "1 - 1 = 0 (left: 0 5 5) || 5 / 5 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 5 5) || 5 / 5 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)"
            ],
            "Evaluation": [
                2.001,
                20.002,
                2.001,
                0.003,
                21.0,
                0.002,
                0.002,
                3.0,
                20.002,
                20.002
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.5",
                "2 <- 3.5",
                "3 <- 0.5",
                "4 <- 4.1",
                "5 <- 2.5",
                "6 <- 0.5",
                "7 <- 0.5",
                "8 <- 4.1",
                "9 <- 3.1"
            ]
        },
        "Step 5": {
            "steps": [
                "1 - 1 = 0 (left: 0 5 5) || 5 * 0 = 0 (left: 0 5)",
                "1 - 1 = 0 (left: 0 5 5) || 6 - 3 = 3 (left: 3 ",
                "1 - 1 = 0 (left: 0 5 5) || 6 - 3 = 3 (left: 3 ",
                "1 * 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5)",
                "1 - 1 = 0 (left: 0 5 5) || 5 / 5 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 * 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 4 = 1 (left:",
                "1 * 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5)",
                "1 * 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5)",
                "1 - 1 = 0 (left: 0 5 5) || 5 / 5 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 5 5) || 3 + 6 = 9 (left: 9 9)"
            ],
            "Evaluation": [
                40.0,
                0.0,
                0.0,
                3.0,
                0.003,
                0.001,
                3.0,
                3.0,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 4.8",
                "1 <- 0.5",
                "2 <- 4.1",
                "3 <- 5.0",
                "4 <- 2.5",
                "5 <- 3.2",
                "6 <- 3.9",
                "7 <- 3.2",
                "8 <- INIT",
                "9 <- 4.4"
            ]
        },
        "Step 6": {
            "steps": [
                "1 - 1 = 0 (left: 0 5 5) || 5 / 5 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 * 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)",
                "1 - 1 = 0 (left: 0 5 5) || 5 / 5 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 5 5) || 5 * 0 = 0 (left: 0 5) || 5 - 0 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "1 * 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 4 = 1 (left:",
                "1 - 1 = 0 (left: 0 5 5) || 5 / 5 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 * 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 4 - 1 = 3 (left: 3 5)",
                "5 + 1 = 6 (left: 1 5 6)",
                "5 * 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)"
            ],
            "Evaluation": [
                0.003,
                21.0,
                0.003,
                0.002,
                0.002,
                0.001,
                0.003,
                1.001,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 2.9",
                "2 <- 3.9",
                "3 <- 3.6",
                "4 <- 0.2",
                "5 <- 5.7",
                "6 <- 4.1",
                "7 <- 4.4",
                "8 <- 1.4",
                "9 <- 1.4"
            ]
        },
        "Step 7": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 4 / 1 = 4 (left: 4 5)",
                "5 * 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "1 - 1 = 0 (left: 0 5 5) || 5 / 5 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 * 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5) || 5 / 4 = 1.25 (left: 1.25 5)",
                "5 * 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)",
                "1 * 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5) || 4 * 5 = 20 (left: 5 20)",
                "1 - 1 = 0 (left: 0 5 5) || 5 / 5 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "5 * 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 4 - 1 = 3 (left: 3 5)",
                "1 - 1 = 0 (left: 0 5 5) || Input: 3 6 9",
                "1 - 1 = 0 (left: 0 5 5) || 3 + 6 = 9 (left: 9 9)"
            ],
            "Evaluation": [
                3.0,
                0.002,
                0.003,
                0.002,
                21.0,
                41.0,
                0.003,
                1.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 3.9",
                "1 <- 5.0",
                "2 <- 4.0",
                "3 <- 1.5",
                "4 <- 0.5",
                "5 <- 0.1",
                "6 <- 4.7",
                "7 <- 2.2",
                "8 <- 1.4",
                "9 <- 4.9"
            ]
        },
        "Step 8": {
            "steps": [
                "1 - 1 = 0 (left: 0 5 5) || 5 / 5 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "1 - 1 = 0 (left: 0 5 5) || 5 * 0 = 0 (left: 0 5) || 5 * 0 = 0 (left:",
                "1 * 1 = 1 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5 5) || 6 / 3 = 2 (left: 2",
                "1 - 1 = 0 (left: 0 5 5) || Input: 3 6 9",
                "1 * 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)",
                "1 * 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)",
                "1 * 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5) || 5 / 4 = 1.25 (left: 1.25 5)",
                "5 * 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 4 - 1 = 3 (left: 3 5)",
                "1 - 1 = 0 (left: 0 5 5) || Input: 3 6 9",
                "1 - 1 = 0 (left: 0 5 5) || 5 / 5 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.001,
                0.003,
                21.0,
                21.0,
                0.002,
                1.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 2.2",
                "2 <- 5.0",
                "3 <- 8.1",
                "4 <- 7.4",
                "5 <- 5.3",
                "6 <- 7.5",
                "7 <- 6.1",
                "8 <- 7.4",
                "9 <- 2.6"
            ]
        },
        "Step 9": {
            "steps": [
                "1 - 1 = 0 (left: 0 5 5) || 5 * 0 = 0 (left: 0 5)",
                "5 * 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "1 - 1 = 0 (left: 0 5 5) || 5 * 0 = 0 (left: 0 5) || 5 * 0 = 0 (left:",
                "1 - 1 = 0 (left: 0 5 5) || 5 * 0 = 0 (left: 0 5) || 5 * 0 = 0 (left: || 5 / 0 = undefined (cannot divide by zero)",
                "5 * 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "1 * 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5) || 4 * 5 = 20 (left: 5 20)",
                "1 * 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5) || 4 * 5 = 20 (left: 5 20) || Input: 3 9 27",
                "1 * 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 4 - 1 = 3 (left: 3 5)",
                "5 * 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "1 - 1 = 0 (left: 0 5 5) || 5 / 5 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)"
            ]
        },
        "Input": "1 1 5 5",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "51": {
        "puzzle": "3 3 12 12",
        "Step 0": {
            "steps": [
                "12 / 3 = 4 (left: 4 3 12)",
                "3 * 3 = 9 (left: 9 12 12)",
                "12 - 3 = 9 (left: 3 9 12)",
                "12 - 3 = 9 (left: 3 9 12)",
                "12 / 3 = 4 (left: 4 3 12)",
                "12 / 3 = 4 (left: 3 4 12)",
                "12 - 3 = 9 (left: 3 9 12)",
                "12 / 3 = 4 (left: 4 12 12)",
                "12 - 3 = 9 (left: 3 12 ",
                "12 / 3 = 4 (left: 4 12 12)"
            ],
            "Evaluation": [
                41.0,
                21.001,
                2.001,
                2.001,
                60.0,
                22.0,
                0.003,
                21.001,
                60.0,
                21.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.7",
                "2 <- 0.4",
                "3 <- 0.5",
                "4 <- 0.7",
                "5 <- INIT",
                "6 <- 0.4",
                "7 <- 0.7",
                "8 <- 0.4",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "3 * 3 = 9 (left: 9 12 12)",
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12)",
                "12 / 3 = 4 (left: 4 3 12) || 3 + 12 = 15 (left: 4 15)",
                "12 / 3 = 4 (left: 3 4 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12)",
                "12 - 3 = 9 (left: 3 9 12)",
                "12 / 3 = 4 (left: 4 3 12) || 4 - 3 = 1 (left: 1 12)",
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12)",
                "12 / 3 = 4 (left: 4 3 12) || 3 + 12 = 15 (left: 4 15)",
                "12 - 3 = 9 (left: 3 9 12)"
            ],
            "Evaluation": [
                21.001,
                20.002,
                1.002,
                0.003,
                20.002,
                2.001,
                0.002,
                20.002,
                0.002,
                2.001
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 0.0",
                "2 <- 1.0",
                "3 <- 0.2",
                "4 <- 1.1",
                "5 <- 0.8",
                "6 <- 0.0",
                "7 <- 0.0",
                "8 <- 0.5",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 3 = 4 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12)",
                "3 * 3 = 9 (left: 9 12 12) || 12 + 9 = 21 (left: 9 12 21)",
                "12 - 3 = 9 (left: 3 9 12) || 12 / 3 = 4 (left: 4 9)",
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12) || Possible next steps:",
                "12 - 3 = 9 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 / 3 = 4 (left: 4 3 12) || 3 + 12 = 15 (left: 4 15)",
                "12 / 3 = 4 (left: 4 3 12) || 12 / 4 = 3 (left: 3 12)",
                "12 / 3 = 4 (left: 3 4 12) || 12 / 3 = 4 (left: 4 12)",
                "12 - 3 = 9 (left: 3 9 12)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                1.002,
                40.0,
                0.003,
                0.003,
                0.001,
                20.002,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 2.7",
                "2 <- 0.4",
                "3 <- INIT",
                "4 <- 2.1",
                "5 <- 0.8",
                "6 <- 0.7",
                "7 <- 0.4",
                "8 <- 2.3",
                "9 <- 0.4"
            ]
        },
        "Step 3": {
            "steps": [
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 3 = 4 (left: 4 3 12) || 12 / 4 = 3 (left: 3 12) || 4 + 7 = 11 (left: 11 10)",
                "12 / 3 = 4 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12)",
                "12 / 3 = 4 (left: 4 12 12)",
                "12 / 3 = 4 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 3 = 9 (left: 3 12  || 12 + 3 = 15 (left: 3 15)",
                "12 / 3 = 4 (left: 4 12 12) || 12 - 4 = 8 (left: 8 12)",
                "12 / 3 = 4 (left: 4 3 12) || 12 / 4 = 3 (left: 3 12)",
                "12 - 3 = 9 (left: 3 9 12) || 12 / 3 = 4 (left: 4 9) || Input: 5 7 12",
                "12 / 3 = 4 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                21.001,
                0.003,
                0.003,
                0.002,
                20.002,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.4",
                "2 <- 0.0",
                "3 <- 1.0",
                "4 <- 1.4",
                "5 <- 1.4",
                "6 <- 0.5",
                "7 <- 3.3",
                "8 <- 3.3",
                "9 <- 2.1"
            ]
        },
        "Step 4": {
            "steps": [
                "12 / 3 = 4 (left: 4 3 12) || 4 * 3 = 12 (left: 12 12)",
                "12 / 3 = 4 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12)",
                "12 / 3 = 4 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12)",
                "3 * 3 = 9 (left: 9 12 12) || 12 / 9 = 1.33333 (left: 1.33333 12 12)",
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12) || Possible next steps:",
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12) || Possible next steps:",
                "12 / 3 = 4 (left: 3 4 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12)",
                "12 / 3 = 4 (left: 4 12 12) || 12 - 4 = 8 (left: 8 12)",
                "12 / 3 = 4 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                20.002,
                20.002,
                20.002,
                1.002,
                0.003,
                0.003,
                0.003,
                20.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.0",
                "2 <- 3.2",
                "3 <- 1.0",
                "4 <- 4.0",
                "5 <- 0.0",
                "6 <- 3.9",
                "7 <- 3.9",
                "8 <- 4.2",
                "9 <- 3.9"
            ]
        },
        "Step 5": {
            "steps": [
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9 12)",
                "3 * 3 = 9 (left: 9 12 12) || 12 + 9 = 21 (left: 9 12 21)",
                "12 / 3 = 4 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "3 * 3 = 9 (left: 9 12 12) || 12 / 9 = 1.33333 (left: 1.33333 12 12)",
                "12 / 3 = 4 (left: 4 3 12) || 4 * 3 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 3 = 4 (left: 4 3 12) || 12 - 3 = 9 (left:",
                "12 / 3 = 4 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 3 = 4 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 3 = 4 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 3 = 4 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                1.002,
                0.003,
                1.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 0.0",
                "2 <- 4.1",
                "3 <- 1.1",
                "4 <- 1.0",
                "5 <- 0.4",
                "6 <- 2.9",
                "7 <- 3.9",
                "8 <- 1.0",
                "9 <- 2.3"
            ]
        },
        "Step 6": {
            "steps": [
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 3 = 4 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12)",
                "12 / 3 = 4 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "3 * 3 = 9 (left: 9 12 12) || 12 + 9 = 21 (left: 9 12 21)",
                "12 / 3 = 4 (left: 4 3 12) || 12 - 3 = 9 (left:",
                "12 - 3 = 9 (left: 3 9 12) || 12 / 3 = 4 (left: 4 9)",
                "12 / 3 = 4 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "3 * 3 = 9 (left: 9 12 12) || 12 / 9 = 1.33333 (left: 1.33333 12 12)",
                "12 - 3 = 9 (left: 3 9 12) || 12 / 3 = 4 (left: 4 9) || 5 + 7 = 12 (left: 12)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.003,
                0.003,
                1.002,
                0.003,
                40.0,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 6.1",
                "2 <- 1.0",
                "3 <- 3.3",
                "4 <- 3.9",
                "5 <- 2.1",
                "6 <- 0.8",
                "7 <- 6.6",
                "8 <- 0.9",
                "9 <- 3.9"
            ]
        },
        "Step 7": {
            "steps": [
                "12 / 3 = 4 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 3 = 4 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "3 * 3 = 9 (left: 9 12 12) || 12 + 9 = 21 (left: 9 12 21)",
                "12 / 3 = 4 (left: 4 12 12) || 12 - 4 = 8 (left: 8 12)",
                "12 / 3 = 4 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 3 = 4 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 3 = 9 (left: 3 12  || 12 - 3 = 9 (left: 9 12)",
                "12 - 3 = 9 (left: 3 9 12) || 12 / 3 = 4 (left: 4 9) || Input: 5 7 12",
                "12 / 3 = 4 (left: 4 12 12) || 12 - 4 = 8 (left: 8 12)",
                "12 / 3 = 4 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                1.002,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 6.6",
                "2 <- 6.6",
                "3 <- 3.2",
                "4 <- 2.3",
                "5 <- 4.7",
                "6 <- 4.7",
                "7 <- 6.1",
                "8 <- 4.1",
                "9 <- 0.1"
            ]
        },
        "Step 8": {
            "steps": [
                "12 / 3 = 4 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 3 = 9 (left: 3 9 12) || 12 / 3 = 4 (left: 4 9) || 5 * 7 = 35 (left: 12)",
                "12 - 3 = 9 (left: 3 9 12) || 12 / 3 = 4 (left: 4 9) || 5 * 7 = 35 (left: 12)",
                "12 / 3 = 4 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 3 = 9 (left: 3 9 12) || 12 / 3 = 4 (left: 4 9) || 5 + 7 = 12 (left: 12)",
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12) || Possible next steps:",
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 3 = 4 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 3 = 4 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "3 * 3 = 9 (left: 9 12 12) || 12 + 9 = 21 (left: 9 12 21)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 4.0",
                "2 <- 3.7",
                "3 <- 3.2",
                "4 <- 6.6",
                "5 <- 3.2",
                "6 <- 0.8",
                "7 <- 3.9",
                "8 <- 0.9",
                "9 <- 3.2"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 3 = 9 (left: 3 9 12) || 12 / 3 = 4 (left: 4 9) || 9 / 4 = 2.25 (left: 9)",
                "12 / 3 = 4 (left: 4 3 12) || 4 * 3 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 3 = 4 (left: 4 3 12) || 12 / 4 = 3 (left: 3 12) || 4 + 7 = 11 (left: 11 10)",
                "12 / 3 = 4 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 3 = 9 (left: 3 9 12) || 12 / 3 = 4 (left: 4 9) || 5 + 7 = 12 (left: 12)",
                "12 / 3 = 4 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 3 = 9 (left: 3 12  || 12 - 3 = 9 (left: 9 12)",
                "12 / 3 = 4 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 3 = 4 (left: 4 12 12) || 12 - 4 = 8 (left: 8 12)",
                "12 / 3 = 4 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24"
            ]
        },
        "Input": "3 3 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "52": {
        "puzzle": "1 1 4 5",
        "Step 0": {
            "steps": [
                "5 - 1 = 4 (left: 1 4 4)",
                "1 * 1 = 1 (left: 1 4 5)",
                "5 - 4 = 1 (left: 1 1 4)",
                "5 - 4 = 1 (left: 1 1 4)",
                "5 - 1 = 4 (left: 1 4 4)",
                "Possible next steps:",
                "4 - 1 = 3 (left: 1 3 5)",
                "5 - 4 = 1 (left: 1 1 1)",
                "1 * 4 = 4 (left: 4 4 ",
                "5 - 4 = 1 (left: 1 1 1)"
            ],
            "Evaluation": [
                2.001,
                21.0,
                3.0,
                2.001,
                2.001,
                0.003,
                1.002,
                1.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.1",
                "2 <- 0.1",
                "3 <- INIT",
                "4 <- 0.1",
                "5 <- 0.0",
                "6 <- 0.4",
                "7 <- 0.1",
                "8 <- 0.1",
                "9 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 5) || 4 / 1 = 4 (left: 4 5)",
                "1 * 1 = 1 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "1 * 1 = 1 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "5 - 4 = 1 (left: 1 1 1)",
                "1 * 1 = 1 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "5 - 1 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4)",
                "5 - 1 = 4 (left: 1 4 4) || 4 * 1 = 4 (left: 4 4)",
                "1 * 1 = 1 (left: 1 4 5) || 4 - 1 = 3 (left: 3 5)",
                "1 * 1 = 1 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "1 * 1 = 1 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)"
            ],
            "Evaluation": [
                3.0,
                0.002,
                0.002,
                0.003,
                0.002,
                21.0,
                0.003,
                1.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 1.5",
                "4 <- 1.5",
                "5 <- 0.1",
                "6 <- 0.1",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4)",
                "4 - 1 = 3 (left: 1 3 5)",
                "4 - 1 = 3 (left: 1 3 5)",
                "5 - 1 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 3 * 4 = 12 (left: 12)",
                "5 - 1 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 3 - 4 = -1 (left: -1)",
                "1 * 1 = 1 (left: 1 4 5) || 5 - 4 = 1 (left:",
                "1 * 1 = 1 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "4 / 1 = 4 (left: 1 4 ",
                "5 - 4 = 1 (left: 1 1 1)",
                "4 - 1 = 3 (left: 1 3 5)"
            ],
            "Evaluation": [
                60.0,
                1.002,
                1.002,
                0.003,
                0.0,
                0.001,
                0.003,
                0.001,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 1.5",
                "2 <- 1.5",
                "3 <- 1.5",
                "4 <- 2.0",
                "5 <- 2.0",
                "6 <- 0.0",
                "7 <- 2.0",
                "8 <- 2.0",
                "9 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "5 - 1 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 3 - 4 = -1 (left: -1)",
                "5 - 1 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 3 - 4 = -1 (left: -1)",
                "5 - 1 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 3 * 4 = 12 (left: 12)",
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "5 - 1 = 4 (left: 1 4 4) || 4 * 1 = 4 (left: 4 4)",
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "4 - 1 = 3 (left: 1 3 5)"
            ],
            "Evaluation": [
                0.0,
                0.0,
                0.0,
                0.003,
                0.002,
                0.002,
                0.003,
                0.002,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 1.5",
                "2 <- 1.5",
                "3 <- 0.2",
                "4 <- 1.5",
                "5 <- 2.0",
                "6 <- 2.0",
                "7 <- 0.1",
                "8 <- 2.0",
                "9 <- 2.0"
            ]
        },
        "Step 4": {
            "steps": [
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "5 - 1 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 3 - 4 = -1 (left: -1)",
                "5 - 1 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 3 - 4 = -1 (left: -1)",
                "5 - 4 = 1 (left: 1 1 4) || Input: 3 5 7",
                "5 - 1 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 3 - 4 = -1 (left: -1)",
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 4 5) || 4 - 1 = 3 (left: 3 5)",
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.0,
                0.0,
                0.0,
                0.003,
                0.0,
                0.002,
                0.002,
                1.001,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- INIT",
                "2 <- 2.2",
                "3 <- 2.0",
                "4 <- 1.5",
                "5 <- 1.5",
                "6 <- 1.7",
                "7 <- 0.3",
                "8 <- 2.0",
                "9 <- 2.0"
            ]
        },
        "Step 5": {
            "steps": [
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "4 - 1 = 3 (left: 1 3 5)",
                "4 - 1 = 3 (left: 1 3 5) || Possible",
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "5 - 1 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 3 - 4 = -1 (left: -1)",
                "5 - 1 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 3 - 4 = -1 (left: -1)",
                "1 * 1 = 1 (left: 1 4 5) || 4 - 1 = 3 (left: 3 5) || Input: 10 2",
                "5 - 4 = 1 (left: 1 1 4) || Input: 3 5 7",
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.0,
                1.002,
                0.003,
                0.002,
                0.0,
                0.0,
                0.003,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 2.0",
                "2 <- 0.1",
                "3 <- 1.5",
                "4 <- 2.0",
                "5 <- 2.0",
                "6 <- 5.1",
                "7 <- 2.0",
                "8 <- 0.1",
                "9 <- 2.0"
            ]
        },
        "Step 6": {
            "steps": [
                "5 - 1 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75)",
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "5 - 1 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 3 * 4 = 12 (left: 12)",
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "4 - 1 = 3 (left: 1 3 5) || 3 - 1 = 2 (left: 2 5)",
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                20.001,
                0.002,
                0.002,
                0.003,
                0.002,
                0.002,
                60.0,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 2.0",
                "2 <- 6.6",
                "3 <- 0.1",
                "4 <- 6.0",
                "5 <- 6.6",
                "6 <- 6.6",
                "7 <- 2.0",
                "8 <- 6.6",
                "9 <- 6.0"
            ]
        },
        "Step 7": {
            "steps": [
                "5 - 1 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 + 2 = 2.75",
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "4 - 1 = 3 (left: 1 3 5) || 3 - 1 = 2 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)",
                "1 * 1 = 1 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "5 - 1 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 * 2 = 1.5",
                "4 - 1 = 3 (left: 1 3 5) || 3 - 1 = 2 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)",
                "4 - 1 = 3 (left: 1 3 5) || 3 - 1 = 2 (left: 2 5) || 5 - 2 = 3 (left: 3)",
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "4 - 1 = 3 (left: 1 3 5) || 3 - 1 = 2 (left: 2 5) || 5 - 2 = 3 (left: 3)",
                "5 - 1 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 * 2 = 1.5"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.003,
                0.003,
                0.002,
                0.0,
                0.002,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 6.6",
                "2 <- 6.6",
                "3 <- 0.1",
                "4 <- 6.6",
                "5 <- 2.0",
                "6 <- 6.6",
                "7 <- 6.6",
                "8 <- 6.6",
                "9 <- 6.6"
            ]
        },
        "Step 8": {
            "steps": [
                "5 - 1 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 3 / 4 = 0.75 (left: 0.75) || 0.75 + 2 = 2.75",
                "4 - 1 = 3 (left: 1 3 5) || 3 - 1 = 2 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)",
                "4 - 1 = 3 (left: 1 3 5) || 3 - 1 = 2 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)",
                "1 * 1 = 1 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "4 - 1 = 3 (left: 1 3 5) || 3 - 1 = 2 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)",
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "4 - 1 = 3 (left: 1 3 5) || 3 - 1 = 2 (left: 2 5) || 5 - 2 = 3 (left: 3)",
                "4 - 1 = 3 (left: 1 3 5) || 3 - 1 = 2 (left: 2 5) || 5 - 2 = 3 (left: 3)",
                "4 - 1 = 3 (left: 1 3 5) || 3 - 1 = 2 (left: 2 5) || 5 - 2 = 3 (left: 3)",
                "4 - 1 = 3 (left: 1 3 5) || 3 - 1 = 2 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.003,
                0.002,
                0.002,
                0.0,
                0.0,
                0.0,
                0.002
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 2.0",
                "3 <- 2.9",
                "4 <- 6.6",
                "5 <- 6.6",
                "6 <- 1.7",
                "7 <- 2.0",
                "8 <- 6.6",
                "9 <- 6.6"
            ]
        },
        "Step 9": {
            "steps": [
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "4 - 1 = 3 (left: 1 3 5) || 3 - 1 = 2 (left: 2 5)",
                "4 - 1 = 3 (left: 1 3 5) || 3 - 1 = 2 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)",
                "4 - 1 = 3 (left: 1 3 5) || 3 - 1 = 2 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)",
                "1 * 1 = 1 (left: 1 4 5) || 4 - 1 = 3 (left: 3 5) || Input: 10 2",
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "4 - 1 = 3 (left: 1 3 5) || 3 - 1 = 2 (left: 2 5) || 5 - 2 = 3 (left: 3)",
                "4 - 1 = 3 (left: 1 3 5) || 3 - 1 = 2 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)"
            ]
        },
        "Input": "1 1 4 5",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "53": {
        "puzzle": "1 6 8 12",
        "Step 0": {
            "steps": [
                "12 - 6 = 6 (left: 1 6 8)",
                "6 / 1 = 6 (left: 6 8 12)",
                "8 - 6 = 2 (left: 1 2 12)",
                "8 - 6 = 2 (left: 1 2 12)",
                "12 - 8 = 4 (left: 1 4 8)",
                "12 - 6 = 6 (left: 1 8 6)",
                "8 - 6 = 2 (left: 1 2 12)",
                "12 - 8 = 4 (left: 1 6 4)",
                "12 - 1 = 11 (left: 6 8 ",
                "12 - 6 = 6 (left: 1 6 8)"
            ],
            "Evaluation": [
                0.003,
                1.001,
                60.0,
                60.0,
                0.003,
                3.0,
                60.0,
                60.0,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.6",
                "2 <- INIT",
                "3 <- 0.6",
                "4 <- 0.6",
                "5 <- 0.3",
                "6 <- 0.2",
                "7 <- 0.7",
                "8 <- 0.6",
                "9 <- 0.7"
            ]
        },
        "Step 1": {
            "steps": [
                "8 - 6 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12)",
                "1 * 6 = 6 (left: 6 8 12)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12)",
                "8 - 6 = 2 (left: 1 2 12) || 1 * 12 = 12 (left:",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "12 - 8 = 4 (left: 1 6 4) || 6 - 4 = 2 (left: 2)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "12 - 8 = 4 (left: 1 6 4) || 4 / 1 = 4 (left: 4)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                1.001,
                40.0,
                60.0,
                21.0,
                40.0,
                0.001,
                40.0,
                0.002
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 0.7",
                "2 <- 1.1",
                "3 <- 0.7",
                "4 <- 0.6",
                "5 <- 1.1",
                "6 <- 1.3",
                "7 <- INIT",
                "8 <- 0.7",
                "9 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 8 = 4 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4)",
                "12 - 8 = 4 (left: 1 6 4) || 1",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)",
                "12 - 8 = 4 (left: 1 6 4) || 6 - 4 = 2 (left: 2)",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12)",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 1 = 11 (left: 6 8 ",
                "12 - 8 = 4 (left: 1 6 4) || 6 - 4 = 2 (left: 2)",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 5 + 10 = 15 (left: 15)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                60.0,
                0.001,
                60.0,
                60.0,
                0.003,
                1.002,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 1.0",
                "2 <- 0.7",
                "3 <- 2.0",
                "4 <- 1.8",
                "5 <- 2.0",
                "6 <- 2.2",
                "7 <- 2.0",
                "8 <- 2.2",
                "9 <- 0.3"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 8 = 4 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4) || 6 / 4 = 1.5 (left: 1.5)",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 10 / 5 = 2 (left: 2)",
                "12 - 8 = 4 (left: 1 6 4) || 1",
                "12 - 8 = 4 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4) || Input: 10 3",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 8 = 4 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4) || 10 + 3 = 13 (left: 13)",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (8 - 6) * (1 * 2) = 24",
                "12 - 8 = 4 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4) || Input: 10 3",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (8 - 6) * (1 * 2) = 24",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 2.0",
                "2 <- 1.4",
                "3 <- 2.2",
                "4 <- 1.6",
                "5 <- 1.1",
                "6 <- 1.8",
                "7 <- 2.0",
                "8 <- 2.0",
                "9 <- 3.9"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 8 = 4 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4)",
                "12 - 8 = 4 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4) || 10 - 3 = 7 (left: 7)",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (8 - 6) * (1 * 2) = 24",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 8 = 4 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4) || Input: 10 3",
                "12 - 8 = 4 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4) || Input: 10 3",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)"
            ],
            "Evaluation": [
                60.0,
                0.001,
                60.0,
                0.003,
                0.003,
                60.0,
                0.003,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 2.5",
                "2 <- 4.5",
                "3 <- 4.9",
                "4 <- 2.5",
                "5 <- 1.6",
                "6 <- 4.5",
                "7 <- 2.0",
                "8 <- 0.6",
                "9 <- 2.0"
            ]
        },
        "Step 5": {
            "steps": [
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (8 - 6) * (1 * 2) = 24",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (8 - 6) * (1 * 2) = 24",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (8 - 6) * (1 * 2) = 24",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (8 - 6) * (1 * 2) = 24",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (8 - 6) * (1 * 2) = 24",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (8 - 6) * (1 * 2) = 24",
                "12 - 8 = 4 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4) || Input: 10 3",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "12 - 8 = 4 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4) || 10 + 3 = 13 (left: 13)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 4.9",
                "2 <- 1.3",
                "3 <- 4.0",
                "4 <- 4.5",
                "5 <- 1.6",
                "6 <- 4.2",
                "7 <- 2.2",
                "8 <- 4.0",
                "9 <- 2.0"
            ]
        },
        "Step 6": {
            "steps": [
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (8 - 6) * (1 * 2) = 24",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (8 - 6) * (1 * 2) = 24",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 8 = 4 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4) || Input: 10 3",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (8 - 6) * (1 * 2) = 24",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (8 - 6) * (1 * 2) = 24",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (8 - 6) * (1 * 2) = 24",
                "12 - 8 = 4 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4) || Input: 10 3",
                "12 - 8 = 4 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4) || 10 + 3 = 13 (left: 13)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 4.2",
                "2 <- 4.0",
                "3 <- 2.4",
                "4 <- 2.5",
                "5 <- 4.9",
                "6 <- 1.1",
                "7 <- 0.2",
                "8 <- 0.6",
                "9 <- 2.5"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 8 = 4 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4) || 6 / 4 = 1.5 (left: 1.5)",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (8 - 6) * (1 * 2) = 24",
                "12 - 8 = 4 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4) || 10 - 3 = 7 (left: 7)",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (8 - 6) * (1 * 2) = 24",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (8 - 6) * (1 * 2) = 24",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 1 = 12 (left: 2 12)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (8 - 6) * (1 * 2) = 24"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.001,
                0.002,
                0.003,
                0.003,
                0.002,
                60.0,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 7.7",
                "1 <- 1.3",
                "2 <- 4.2",
                "3 <- 4.5",
                "4 <- 7.8",
                "5 <- 1.6",
                "6 <- 7.8",
                "7 <- 7.8",
                "8 <- 7.8",
                "9 <- 1.4"
            ]
        },
        "Step 8": {
            "steps": [
                "8 - 6 = 2 (left: 1 2 12) || 12 / 1 = 12 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (8 - 6) * (1 * 2) = 24",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (8 - 6) * (1 * 2) = 24",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 7.7",
                "1 <- 0.6",
                "2 <- 1.0",
                "3 <- 0.2",
                "4 <- 4.9",
                "5 <- 5.8",
                "6 <- 2.5",
                "7 <- 4.9",
                "8 <- 4.2",
                "9 <- 0.6"
            ]
        },
        "Step 9": {
            "steps": [
                "8 - 6 = 2 (left: 1 2 12) || 12 / 1 = 12 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12)",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 10 / 5 = 2 (left: 2)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (8 - 6) * (1 * 2) = 24",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (8 - 6) * (1 * 2) = 24",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (8 - 6) * (1 * 2) = 24",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (8 - 6) * (1 * 2) = 24",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12)"
            ]
        },
        "Input": "1 6 8 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "54": {
        "puzzle": "8 8 12 12",
        "Step 0": {
            "steps": [
                "12 + 8 = 20 (left: 8 12 20)",
                "8 / 8 = 1 (left: 1 12 12)",
                "12 - 8 = 4 (left: 4 12 12)",
                "8 - 8 = 0 (left: 0 12 12)",
                "12 + 8 = 20 (left: 8 12 20)",
                "8 * 8 = 64 (left: 12 12 64)",
                "",
                "12 + 8 = 20 (left: 8 12 20)",
                "12 / 8 = 1.5 (left: 1.",
                "12 + 8 = 20 (left: 8 12 20)"
            ],
            "Evaluation": [
                20.001,
                0.003,
                21.001,
                60.0,
                2.001,
                2.001,
                0.003,
                3.0,
                0.0,
                21.0
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.3",
                "4 <- 0.3",
                "5 <- 0.9",
                "6 <- 0.2",
                "7 <- 0.2",
                "8 <- 0.3",
                "9 <- 0.9"
            ]
        },
        "Step 1": {
            "steps": [
                "8 - 8 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 0 12)",
                "8 * 8 = 64 (left: 12 12 64)",
                "8 * 8 = 64 (left: 12 12 64)",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)",
                "12 + 8 = 20 (left: 8 12 20) || ",
                "12 - 8 = 4 (left: 4 12 12) || 12 - 4 = 8 (left: 8 12)",
                "12 - 8 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12)",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12)",
                "12 + 8 = 20 (left: 8 12 20) || 20 - 12 = 8 (left: 8 8)"
            ],
            "Evaluation": [
                20.0,
                2.001,
                2.001,
                20.002,
                20.002,
                0.003,
                0.002,
                20.002,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- INIT",
                "2 <- 1.8",
                "3 <- 0.9",
                "4 <- 0.3",
                "5 <- 0.9",
                "6 <- 1.1",
                "7 <- 1.4",
                "8 <- 0.2",
                "9 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "12 + 8 = 20 (left: 8 12 20) || 12 + 8 = 20 (left: 8 20)",
                "8 * 8 = 64 (left: 12 12 64)",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 + 8 = 20 (left: 8 12 20) || 20 - 8 = 12 (left: 12 20)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)",
                "12 + 8 = 20 (left: 8 12 20) || 20 / 2 = 10 (left:",
                "8 * 8 = 64 (left: 12 12 64) || 12 / 12 = 1 (left: 1 12 64)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 8 = 4 (left: 4 12 12) || 12 - 4 = 8 (left: 8 12)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)"
            ],
            "Evaluation": [
                1.002,
                2.001,
                0.003,
                0.002,
                20.002,
                0.001,
                0.003,
                40.001,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 0.9",
                "2 <- 2.7",
                "3 <- 1.8",
                "4 <- 1.0",
                "5 <- INIT",
                "6 <- 1.7",
                "7 <- 1.4",
                "8 <- 0.3",
                "9 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 + 8 = 20 (left: 8 12 20) || 20 - 12 = 8 (left: 8 8)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 - 12 =",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "8 - 8 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "8 * 8 = 64 (left: 12 12 64)",
                "12 - 8 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12)",
                "8 * 8 = 64 (left: 12 12 64) || 64 - 12 = 52 (left: 12 52)"
            ],
            "Evaluation": [
                40.001,
                0.003,
                0.003,
                40.001,
                0.003,
                2.001,
                0.003,
                40.001,
                20.002,
                1.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 3.7",
                "2 <- 0.3",
                "3 <- 3.0",
                "4 <- 0.9",
                "5 <- 3.7",
                "6 <- 0.3",
                "7 <- 3.0",
                "8 <- 2.7",
                "9 <- 3.7"
            ]
        },
        "Step 4": {
            "steps": [
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 - 12 =",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "12 + 8 = 20 (left: 8 12 20) || 20 - 12 = 8 (left: 8 8)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2)",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12)",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2)"
            ],
            "Evaluation": [
                40.001,
                0.003,
                20.002,
                20.001,
                0.003,
                0.001,
                20.002,
                20.001,
                20.001,
                0.001
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 3.7",
                "2 <- 2.4",
                "3 <- 4.8",
                "4 <- 4.3",
                "5 <- 0.9",
                "6 <- 3.3",
                "7 <- 4.8",
                "8 <- INIT",
                "9 <- 4.7"
            ]
        },
        "Step 5": {
            "steps": [
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 - 12 =",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5) || 0.5 * 2 = 1 (left: 1)",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5) || 0.5 * 2 = 1 (left: 1)",
                "12 + 8 = 20 (left: 8 12 20) || 20 / 2 = 10 (left:",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5) || 0.5 * 2 = 1 (left: 1)",
                "12 + 8 = 20 (left: 8 12 20)",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5) || 0.5 * 2 = 1 (left: 1)"
            ],
            "Evaluation": [
                40.001,
                0.003,
                40.001,
                0.002,
                0.002,
                0.001,
                20.001,
                0.002,
                21.0,
                0.002
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 4.8",
                "2 <- 5.0",
                "3 <- 3.3",
                "4 <- 5.2",
                "5 <- 0.2",
                "6 <- 2.4",
                "7 <- 3.3",
                "8 <- 4.6",
                "9 <- 1.3"
            ]
        },
        "Step 6": {
            "steps": [
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 24 = 288 (left: 288)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5) || 0.5 * 2 = 1 (left: 1)",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24 || 24 - 12 =",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2)",
                "12 - 8 = 4 (left: 4 12 12) || 12 - 4 = 8 (left:",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                20.001,
                0.001,
                0.001,
                40.001,
                20.001,
                40.001,
                40.001
            ],
            "Resampling": [
                "0 <- 4.6",
                "1 <- 3.7",
                "2 <- 6.8",
                "3 <- 6.9",
                "4 <- 6.7",
                "5 <- 0.0",
                "6 <- 3.3",
                "7 <- 2.9",
                "8 <- 3.7",
                "9 <- 6.8"
            ]
        },
        "Step 7": {
            "steps": [
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 - 12 =",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24 || 24 - 12 =",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5) || 0.5 * 2 = 1 (left: 1)",
                "12 + 8 = 20 (left: 8 12 20) || 20 / 2 = 10 (left:",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2)"
            ],
            "Evaluation": [
                40.001,
                0.003,
                0.003,
                20.001,
                0.002,
                0.001,
                20.001,
                40.001,
                20.001,
                0.001
            ],
            "Resampling": [
                "0 <- 5.8",
                "1 <- 0.2",
                "2 <- 5.0",
                "3 <- 1.8",
                "4 <- 0.0",
                "5 <- 5.0",
                "6 <- 7.6",
                "7 <- 4.3",
                "8 <- 7.0",
                "9 <- 3.7"
            ]
        },
        "Step 8": {
            "steps": [
                "12 + 8 = 20 (left: 8 12 20) || 12 + 8 = 20 (left: 8 20)",
                "12 - 8 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12)",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24 || 24 - 12 =",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 + 8 = 20 (left: 8 12 20) || 20 - 12 = 8 (left: 8 8)",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2)",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5) || 0.5 * 2 = 1 (left: 1)",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5) || 0.5 * 2 = 1 (left: 1)",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2)"
            ],
            "Evaluation": [
                1.002,
                20.002,
                0.003,
                40.001,
                0.003,
                0.001,
                0.002,
                0.002,
                20.001,
                0.001
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 6.9",
                "2 <- 1.0",
                "3 <- 1.7",
                "4 <- 7.8",
                "5 <- 8.1",
                "6 <- 0.4",
                "7 <- 8.3",
                "8 <- 7.0",
                "9 <- 6.6"
            ]
        },
        "Step 9": {
            "steps": [
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 24 = 288 (left: 288)",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24 || 24 - 12 =",
                "8 - 8 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "12 - 8 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5) || 0.5 * 2 = 1 (left: 1)",
                "12 - 8 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12) || Possible next steps:",
                "12 + 8 = 20 (left: 8 12 20) || 20 - 8 = 12 (left: 12 20)",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2)"
            ]
        },
        "Input": "8 8 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "55": {
        "puzzle": "3 8 11 11",
        "Step 0": {
            "steps": [
                "11 - 3 = 8 (left: 8 11 11)",
                "8 / 3 = 2.67 (left: 2.67 11 11)",
                "3 * 8 = 24 (left: 11 11 24)",
                "3 * 8 = 24 (left: 11 11 24)",
                "11 + 3 = 14 (left: 8 11 14)",
                "3 * 8 = 24 (left: 11 11 24)",
                "",
                "11 + 3 = 14 (left: 8 11 14)",
                "11 + 3 = 14 (left: 8 ",
                "11 + 3 = 14 (left: 8 11 14)"
            ],
            "Evaluation": [
                2.001,
                1.002,
                1.002,
                1.002,
                1.002,
                1.002,
                0.003,
                2.001,
                0.002,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.1",
                "2 <- 0.9",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 0.9"
            ]
        },
        "Step 1": {
            "steps": [
                "8 / 3 = 2.6666666666666665 (left: 2.6666666666666665 11 11)",
                "8 / 3 = 2.67 (left: 2.67 11 11) || 11 + 11 = 22 (left: 11 22)",
                "11 + 3 = 14 (left: 8 11 14) || 11 / 8 = 1.375 (left: 1.375 14)",
                "11 + 3 = 14 (left: 8 11 14)",
                "3 * 8 = 24 (left: 11 11 24)",
                "3 * 8 = 24 (left: 11 11 24)",
                "11 + 3 = 14 (left: 8 11 14)",
                "11 - ",
                "11 + 3 = 14 (left: 8 11 14)",
                "11 + 3 = 14 (left: 8 11 14) || 11 * 14 = 154 (left: 8 154)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                2.0,
                2.001,
                1.002,
                1.002,
                2.001,
                0.003,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.2",
                "2 <- INIT",
                "3 <- 1.5",
                "4 <- 1.3",
                "5 <- INIT",
                "6 <- 1.3",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "8 / 3 = 2.6666666666666665 (left: 2.6666666666666665 11 11)",
                "11 + 3 = 14 (left: 8 11 14) || 11 / 8 = 1.375 (left: 1.375 14) || 14 / 1.375 = 10.181818181818182 (left: 10.181818181818182)",
                "3 * 8 = 24 (left: 11 11 24)",
                "3 * 8 = 24 (left: 11 11 24) || 11 * 11 = 121 (left: 121 24)",
                "11 + 3 = 14 (left: 8 11 14) || 11 / 8 = 1.375 (left: 1.375 14)",
                "3 * 8 = 24 (left: 11 11 24)",
                "11 + 3 = 14 (left: 8 11 14) || 8 * 11 = 88 (left: 88 14)",
                "11 - ",
                "11 + 3 = 14 (left: 8 11 14)",
                "3 * 8 = 24 (left: 11 11 24)"
            ],
            "Evaluation": [
                1.002,
                0.001,
                1.002,
                0.002,
                2.0,
                1.002,
                1.001,
                0.003,
                2.001,
                1.002
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.4",
                "2 <- 2.0",
                "3 <- INIT",
                "4 <- 1.2",
                "5 <- INIT",
                "6 <- 2.5",
                "7 <- 2.2",
                "8 <- INIT",
                "9 <- 2.4"
            ]
        },
        "Step 3": {
            "steps": [
                "8 / 3 = 2.6666666666666665 (left: 2.6666666666666665 11 11) || 11 - 2.6666666666666665 = 8.333333333333334 (left: 8.333333333333334 11)",
                "11 + 3 = 14 (left: 8 11 14) || 11 / 8 = 1.375 (left: 1.375 14) || 14 / 1.375 = 10.181818181818182 (left: 10.181818181818182)",
                "8 / 3 = 2.6666666666666665 (left: 2.6666666666666665 11 11) || 11 *",
                "11 + 3 = 14 (left: 8 11 14)",
                "11 + 3 = 14 (left: 8 11 14) || 11 / 8 = 1.375 (left: 1.375 14) || 14 / 1.375 = 10.181818181818182 (left: 10.181818181818182)",
                "3 * 8 = 24 (left: 11 11 24)",
                "3 * 8 = 24 (left: 11 11 24) || 11 * 11 = 121 (left: 121 24)",
                "3 * 8 = 24 (left: 11 11 24) || 24 / 11 = 2 (left: 11 2 13)",
                "11 + 3 = 14 (left: 8 11 14)",
                "11 + 3 = 14 (left: 8 11 14) || 11 / 8 = 1.375 (left: 1.375 14) || 14 / 1.375 = 10.181818181818182 (left: 10.181818181818182)"
            ],
            "Evaluation": [
                0.0,
                0.001,
                0.003,
                2.001,
                0.001,
                1.002,
                0.002,
                0.003,
                2.001,
                0.001
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- INIT",
                "2 <- 2.4",
                "3 <- 1.3",
                "4 <- INIT",
                "5 <- 1.4",
                "6 <- 1.6",
                "7 <- 2.9",
                "8 <- 2.0",
                "9 <- 2.4"
            ]
        },
        "Step 4": {
            "steps": [
                "11 + 3 = 14 (left: 8 11 14) || 11 - 8 = 3 (left: 3 14)",
                "3 * 8 = 24 (left: 11 11 24)",
                "11 + 3 = 14 (left: 8 11 14) || 11 / 8 = 1.375 (left: 1.375 14) || 14 / 1.375 = 10.181818181818182 (left: 10.181818181818182)",
                "11 + 3 = 14 (left: 8 11 14) || 8 * 11 = 88 (left: 88 14)",
                "3 * 8 = 24 (left: 11 11 24)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24)",
                "11 + 3 = 14 (left: 8 11 14) || 8 * 11 = 88 (left: 88 14)",
                "3 * 8 = 24 (left: 11 11 24) || 24 / 11 = 2 (left: 11 2 13)",
                "8 / 3 = 2.6666666666666665 (left: 2.6666666666666665 11 11) || 11 / 2.6666666666666665 = 4.125 (left: 4.125 11)",
                "11 + 3 = 14 (left: 8 11 14) || 11 / 8 = 1.375 (left: 1.375 14) || 14 / 1.375 = 10.181818181818182 (left: 10.181818181818182)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                0.001,
                1.001,
                1.002,
                20.002,
                1.001,
                0.003,
                1.002,
                0.001
            ],
            "Resampling": [
                "0 <- 4.5",
                "1 <- INIT",
                "2 <- 4.5",
                "3 <- 4.5",
                "4 <- 4.4",
                "5 <- 4.3",
                "6 <- INIT",
                "7 <- 4.3",
                "8 <- 2.6",
                "9 <- INIT"
            ]
        },
        "Step 5": {
            "steps": [
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24)",
                "3 * 8 = 24 (left: 11 11 24)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24)",
                "11 + 3 = 14 (left: 8 11 14) || 8 * 11 = 88 (left: 88 14) || 88 * 14 = 1232 (left: 1232)",
                "11 + 3 = 14 (left: 8 11 14)",
                "11 + 3 = 14 (left: 8 11 14) || 8 * 11 = 88 (left: 88 14) || 88 + 14 = 102 (left: 102)",
                "11 + 3 = 14 (left: 8 11 14) || 8 * 11 = 88 (left: 88 14) || 88 / 14 = 6.28571428571 (left: 6.28571428571)",
                "3 * 8 = 24 (left: 11 11 24)"
            ],
            "Evaluation": [
                20.002,
                1.002,
                0.003,
                1.002,
                20.002,
                0.002,
                2.001,
                0.003,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 4.8",
                "2 <- 5.0",
                "3 <- 2.4",
                "4 <- 4.5",
                "5 <- 4.1",
                "6 <- 5.9",
                "7 <- 4.6",
                "8 <- 5.4",
                "9 <- 5.4"
            ]
        },
        "Step 6": {
            "steps": [
                "3 * 8 = 24 (left: 11 11 24) || 11 / 11 = 1 (left: 1 11 24)",
                "8 / 3 = 2.6666666666666665 (left: 2.6666666666666665 11 11) || 11 / 2.6666666666666665 = 4.125 (left: 4.125 11) || 11 / 4.125 = 2.6666666666666665 (left: 2.6666666666666665)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "11 + 3 = 14 (left: 8 11 14) || 11 / 8 = 1.375 (left: 1.375 14) || 14 - 1.375 = 12.625 (left: 12.625)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24)",
                "3 * 8 = 24 (left: 11 11 24) || 11 * 11 = 121 (left: 121 24)",
                "11 + 3 = 14 (left: 8 11 14) || 8 * 11 = 88 (left: 88 14) || 88 / 14 = 6.28571428571 (left: 6.28571428571)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)"
            ],
            "Evaluation": [
                2.001,
                0.0,
                0.003,
                0.003,
                0.003,
                20.002,
                0.002,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 5.4",
                "2 <- 4.5",
                "3 <- 5.0",
                "4 <- 6.5",
                "5 <- 6.5",
                "6 <- 5.0",
                "7 <- 5.4",
                "8 <- 5.4",
                "9 <- 1.8"
            ]
        },
        "Step 7": {
            "steps": [
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 24 / 11 = 2.1818181818181817 (left:",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "11 + 3 = 14 (left: 8 11 14) || 11 / 8 = 1.375 (left: 1.375 14)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                0.003,
                1.002,
                0.003,
                0.003,
                1.002,
                0.001,
                1.002,
                2.0
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- INIT",
                "2 <- 7.0",
                "3 <- 7.0",
                "4 <- 5.4",
                "5 <- 7.0",
                "6 <- 1.3",
                "7 <- 2.9",
                "8 <- 6.5",
                "9 <- 5.4"
            ]
        },
        "Step 8": {
            "steps": [
                "11 + 3 = 14 (left: 8 11 14) || 11 - 8 = 3 (left: 3 14)",
                "3 * 8 = 24 (left: 11 11 24)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "11 + 3 = 14 (left: 8 11 14) || 8 * 11 = 88 (left: 88 14)",
                "3 * 8 = 24 (left: 11 11 24) || 24 / 11 = 2 (left: 11 2 13)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                0.003,
                1.002,
                0.003,
                0.003,
                1.001,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 6.5",
                "1 <- 3.3",
                "2 <- 5.4",
                "3 <- 6.5",
                "4 <- 5.4",
                "5 <- 3.5",
                "6 <- 7.0",
                "7 <- 5.0",
                "8 <- 6.5",
                "9 <- 5.4"
            ]
        },
        "Step 9": {
            "steps": [
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24)",
                "11 + 3 = 14 (left: 8 11 14) || 11 / 8 = 1.375 (left: 1.375 14)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 * 0 = 0 (left: 0 11 24) || 24 / 11 = 2.1818181818181817 (left:",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 11 24)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)"
            ]
        },
        "Input": "3 8 11 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "56": {
        "puzzle": "5 6 12 12",
        "Step 0": {
            "steps": [
                "12 / 6 = 2 (left: 5 2 12)",
                "6 / 5 = 1.2 (left: 1.2 6 12)",
                "12 / 6 = 2 (left: 2 12 12)",
                "12 - 6 = 6 (left: 5 6 6)",
                "12 / 6 = 2 (left: 5 2 12)",
                "12 - 5 = 7 (left: 7 6 12)",
                "12 - 5 = 7 (left: 7 6 12)",
                "12 / 6 = 2 (left: 5 2 12)",
                "6 / 5 = 1.2 (left: 1.",
                "12 - 5 = 7 (left: 7 6 12)"
            ],
            "Evaluation": [
                3.0,
                3.0,
                1.002,
                22.0,
                1.001,
                22.0,
                1.002,
                3.0,
                0.0,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.3",
                "3 <- 0.3",
                "4 <- 0.5",
                "5 <- 0.0",
                "6 <- 0.3",
                "7 <- 0.0",
                "8 <- 0.9",
                "9 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "6 + 12 = 18 (left: 5 18 12)",
                "12 / 6 = 2 (left: 5 2 12)",
                "12 - 6 = 6 (left: 5 6 6) || 3 + 9 = 12 (left:",
                "12 - 6 = 6 (left: 5 6 6) || 5 - 6 = -1 (left: -1 6)",
                "12 - 5 = 7 (left: 7 6 12) || 12 - 7 = 5 (left: 7 5)",
                "12 / 6 = 2 (left: 5 2 12) || 12 - 5 = 7 (left: 2 7)",
                "12 - 6 = 6 (left: 5 6 6) || 5 - 6 = -1 (left: -1 6)",
                "12 / 6 = 2 (left: 5 2 12) || 12 - 2 = 10 (left: 10 12)",
                "12 - 5 = 7 (left: 7 6 12) || 7 - 6 = 1 (left: 1 12)",
                "12 - 5 = 7 (left: 7 6 12) || Input: 7 18 2"
            ],
            "Evaluation": [
                3.0,
                3.0,
                1.001,
                1.001,
                1.002,
                0.001,
                1.001,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- INIT",
                "2 <- 0.5",
                "3 <- 0.2",
                "4 <- INIT",
                "5 <- 0.3",
                "6 <- 0.5",
                "7 <- INIT",
                "8 <- 0.5",
                "9 <- 0.5"
            ]
        },
        "Step 2": {
            "steps": [
                "12 / 6 = 2 (left: 5 2 12) || 5 * 2 = 10 (left: 10 12)",
                "12 / 6 = 2 (left: 5 2 12)",
                "12 - 5 = 7 (left: 7 6 12) || Possible",
                "12 / 6 = 2 (left: 2 12 12) || 12 - 2 = 10 (left: 10 12)",
                "12 / 6 = 2 (left: 5 2 12)",
                "12 - 6 = 6 (left: 5 6 6) || Possible next steps:",
                "12 - 5 = 7 (left: 7 6 12) || 12 - 6 = 6 (left: 7 6)",
                "12 - 5 = 7 (left: 7 6 12)",
                "12 - 5 = 7 (left: 7 6 12) || 12 - 6 = 6 (left: 7 6)",
                "12 - 5 = 7 (left: 7 6 12) || Input: 7 18 2"
            ],
            "Evaluation": [
                0.002,
                3.0,
                0.003,
                0.002,
                3.0,
                0.003,
                0.003,
                2.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.3",
                "2 <- INIT",
                "3 <- 0.5",
                "4 <- 2.7",
                "5 <- 0.5",
                "6 <- 0.0",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 0.0"
            ]
        },
        "Step 3": {
            "steps": [
                "6 / 5 = 1.2 (left: 1.2 6 12) || 6 * 12 = 72 (left: 1.2 72)",
                "12 - 6 = 6 (left: 5 6 6) || 3 + 9 = 12 (left:",
                "12 / 6 = 2 (left: 5 2 12)",
                "12 - 5 = 7 (left: 7 6 12) || 12 - 6 = 6 (left: 7 6)",
                "12 - 5 = 7 (left: 7 6 12) || Input: 7 18 2",
                "12 - 5 = 7 (left: 7 6 12) || Input: 7 18 2",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12)",
                "12 - 5 = 7 (left: 7 6 12)",
                "12 - 5 = 7 (left: 7 6 12)",
                "12 / 6 = 2 (left: 5 2 12) || 12 - 5 = 7 (left: 2 7)"
            ],
            "Evaluation": [
                0.003,
                1.001,
                3.0,
                0.003,
                0.003,
                0.003,
                20.002,
                2.001,
                2.001,
                0.001
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 2.4",
                "2 <- 3.6",
                "3 <- INIT",
                "4 <- 0.3",
                "5 <- 1.0",
                "6 <- INIT",
                "7 <- 3.7",
                "8 <- 3.7",
                "9 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 6 = 6 (left: 5 6 6) || 6 * 5 = 30 (left: 30)",
                "12 / 6 = 2 (left: 5 2 12) || 12 - 5 = 7 (left: 2 7)",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12) || 4 + 7 = 11 (left: 11 10)",
                "12 - 5 = 7 (left: 7 6 12)",
                "12 - 6 = 6 (left: 5 6 6) || Possible next steps:",
                "6 + 12 = 18 (left: 5 18 12) || 12 / 5 = ",
                "12 - 5 = 7 (left: 7 6 12)",
                "12 - 5 = 7 (left: 7 6 12) || 12 - 6 = 6 (left: 7 6)",
                "12 - 5 = 7 (left: 7 6 12) || 12 - 6 = 6 (left: 7 6)",
                "12 / 6 = 2 (left: 5 2 12)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                2.001,
                0.003,
                0.003,
                2.001,
                0.003,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 2.4",
                "2 <- 0.5",
                "3 <- 3.6",
                "4 <- 2.7",
                "5 <- 3.6",
                "6 <- 0.0",
                "7 <- INIT",
                "8 <- 3.6",
                "9 <- 3.6"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 6 = 6 (left: 5 6 6) || 3 + 9 = 12 (left: || 3 / 9 = 0.3333333333333333 (left: 0.3333333333333333)",
                "12 / 6 = 2 (left: 5 2 12) || 12 - 5 = 7 (left: 2 7)",
                "12 - 5 = 7 (left: 7 6 12) || Possible",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "12 - 5 = 7 (left: 7 6 12) || Input: 7 18 2",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12) || Possible next steps:",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12)",
                "12 - 5 = 7 (left: 7 6 12)",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12) || Possible next steps:"
            ],
            "Evaluation": [
                1.001,
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                20.002,
                2.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.6",
                "1 <- 2.7",
                "2 <- 3.6",
                "3 <- 5.6",
                "4 <- 3.6",
                "5 <- 3.6",
                "6 <- 0.5",
                "7 <- 5.6",
                "8 <- 3.6",
                "9 <- 0.5"
            ]
        },
        "Step 6": {
            "steps": [
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9 12)",
                "12 - 5 = 7 (left: 7 6 12) || Possible",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12) || 4 + 7 = 11 (left: 11 10)",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12) || Possible next steps:",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12) || Possible next steps:",
                "12 - 5 = 7 (left: 7 6 12) || 12 - 6 = 6 (left: 7 6)",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "12 - 5 = 7 (left: 7 6 12) || Input: 7 18 2"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.6",
                "1 <- 3.6",
                "2 <- 1.3",
                "3 <- 3.6",
                "4 <- 5.6",
                "5 <- 5.6",
                "6 <- 3.6",
                "7 <- 5.6",
                "8 <- 2.1",
                "9 <- 5.6"
            ]
        },
        "Step 7": {
            "steps": [
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12) || 4 + 7 = 11 (left: 11 10)",
                "12 - 6 = 6 (left: 5 6 6) || 5 - 6 = -1 (left: -1 6) || -1 / 6 = -0.16666666666666666 (left: -0.16666666666666666)",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12) || Possible next steps:",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12) || Possible next steps:",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12)",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12) || Possible next steps:"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.7",
                "1 <- 7.8",
                "2 <- 7.8",
                "3 <- 4.6",
                "4 <- 7.8",
                "5 <- 5.6",
                "6 <- 1.2",
                "7 <- INIT",
                "8 <- 7.8",
                "9 <- 3.6"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 5 = 7 (left: 7 6 12) || 6 + 12 = 18 (left: 7 18)",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12) || 4 + 7 = 11 (left: 11 10)",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12) || 4 + 7 = 11 (left: 11 10)",
                "12 - 5 = 7 (left: 7 6 12) || 12 - 6 = 6 (left: 7 6)",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12) || Possible next steps:",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12) || Possible next steps:",
                "12 - 6 = 6 (left: 5 6 6) || 3 + 9 = 12 (left: || 9 - 3 = 6 (left: 6)",
                "12 - 5 = 7 (left: 7 6 12)",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12) || Possible next steps:"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                2.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 7.8",
                "1 <- 4.9",
                "2 <- 5.6",
                "3 <- 7.8",
                "4 <- 0.5",
                "5 <- 3.1",
                "6 <- 0.0",
                "7 <- 7.8",
                "8 <- 0.5",
                "9 <- 3.6"
            ]
        },
        "Step 9": {
            "steps": [
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 6 = 2 (left: 5 2 12) || 12 - 5 = 7 (left: 2 7)",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12) || 4 + 7 = 11 (left: 11 10)",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "12 - 5 = 7 (left: 7 6 12) || Input: 7 18 2",
                "12 - 6 = 6 (left: 5 6 6) || 3 + 9 = 12 (left: || Input: 4 5 6",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12)",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "12 - 5 = 7 (left: 7 6 12) || 12 - 6 = 6 (left: 7 6)",
                "12 / 6 = 2 (left: 5 2 12) || 5 - 2 = 3 (left: 3 12) || Possible next steps:"
            ]
        },
        "Input": "5 6 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "57": {
        "puzzle": "11 12 12 12",
        "Step 0": {
            "steps": [
                "12 - 11 = 1 (left: 1 12 12)",
                "12 / 11 = 1.0909090909090908 (left: 1.0909090909090908 12 12)",
                "11 * 12 = 132 (left: 12 12 132)",
                "12 * 12 = 144 (left: 12 12 144)",
                "12 - 11 = 1 (left: 1 12 12)",
                "12 * 11 = 132 (left: 12 12 132)",
                "11 - 12 = -1 (left: -1 12 12)",
                "12 - 11 = 1 (left: 1 12 12)",
                "12 / 11 = 1 (left: 11 1 ",
                "12 + 11 = 23 (left: 12 23 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                2.001,
                60.0,
                0.003,
                0.002,
                3.0,
                0.003,
                20.0,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.3",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.3",
                "5 <- 0.3",
                "6 <- 0.3",
                "7 <- 0.3",
                "8 <- INIT",
                "9 <- 0.9"
            ]
        },
        "Step 1": {
            "steps": [
                "12 / 11 = 1.0909090909090908 (left: 1.0909090909090908 12 12)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144)",
                "11 * 12 = 132 (left: 12 12 132)",
                "12 + 11 = 23 (left: 12 23 12)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12)",
                "12 * 12 = 144 (left: 12 12 144) || 144 - 12 = 132 (left: 12 132)",
                "12 + 11 = 23 (left: 12 23 12)",
                "12 + 11 = 23 (left: 12 23 12) || 23 / 12 = 1.91666666667 (left: 1.91666666667 12)"
            ],
            "Evaluation": [
                0.003,
                40.0,
                0.002,
                2.001,
                40.0,
                40.0,
                20.002,
                0.0,
                2.001,
                0.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.1",
                "2 <- 0.8",
                "3 <- 0.3",
                "4 <- 1.4",
                "5 <- 1.1",
                "6 <- 0.9",
                "7 <- 1.5",
                "8 <- 1.4",
                "9 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 / 24 = 6 (left: 6)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 - 24 = 120 (left: 120)",
                "12 / 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 1 11)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 - 24 = 120 (left: 120)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 - 24 = 120 (left: 120)",
                "12 + 11 = 23 (left: 12 23 12) || 12 * 23 = 276 (left: 276 12)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 24 + 144 = 168 (left: 168)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 24 + 144 = 168 (left: 168)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                40.0,
                20.002,
                0.003,
                0.003,
                1.0,
                0.003,
                0.003,
                40.0
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.9",
                "2 <- 0.3",
                "3 <- 2.2",
                "4 <- 2.9",
                "5 <- 2.2",
                "6 <- 1.4",
                "7 <- 1.4",
                "8 <- 1.4",
                "9 <- 0.3"
            ]
        },
        "Step 3": {
            "steps": [
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 - 24 = 120 (left: 120)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144)",
                "12 / 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 - 24 = 120 (left: 120)",
                "12 / 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 24 + 144 = 168 (left: 168)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 24 + 144 = 168 (left: 168)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 24 + 144 = 168 (left: 168)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                40.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                40.0
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 3.9",
                "2 <- 1.5",
                "3 <- 1.1",
                "4 <- 0.3",
                "5 <- 2.2",
                "6 <- 3.9",
                "7 <- 2.3",
                "8 <- 1.4",
                "9 <- 0.8"
            ]
        },
        "Step 4": {
            "steps": [
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 - 24 = 120 (left: 120)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 - 24 = 120 (left: 120)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 24 + 144 = 168 (left: 168)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144)",
                "12 / 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 24 + 144 = 168 (left: 168)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 24 + 144 = 168 (left: 168)",
                "12 / 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 1 11)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                40.0,
                0.003,
                0.003,
                0.003,
                0.003,
                40.0
            ],
            "Resampling": [
                "0 <- 3.9",
                "1 <- 1.4",
                "2 <- 3.9",
                "3 <- 1.6",
                "4 <- 4.4",
                "5 <- 2.2",
                "6 <- 4.4",
                "7 <- 3.9",
                "8 <- 1.5",
                "9 <- 2.2"
            ]
        },
        "Step 5": {
            "steps": [
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 / 24 = 6 (left: 6)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 - 24 = 120 (left: 120)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 - 24 = 120 (left: 120)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 - 24 = 120 (left: 120)",
                "12 / 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 24 + 144 = 168 (left: 168)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 24 + 144 = 168 (left: 168)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 24 + 144 = 168 (left: 168)",
                "12 / 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 2.9",
                "2 <- 2.9",
                "3 <- 4.9",
                "4 <- 4.9",
                "5 <- 1.6",
                "6 <- 2.3",
                "7 <- 1.6",
                "8 <- 2.3",
                "9 <- 4.9"
            ]
        },
        "Step 6": {
            "steps": [
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 / 24 = 6 (left: 6)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 - 24 = 120 (left: 120)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 - 24 = 120 (left: 120)",
                "12 / 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 4.4",
                "2 <- 3.2",
                "3 <- 2.2",
                "4 <- 3.9",
                "5 <- 2.2",
                "6 <- 1.6",
                "7 <- 1.5",
                "8 <- 0.3",
                "9 <- 0.9"
            ]
        },
        "Step 7": {
            "steps": [
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 - 24 = 120 (left: 120)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 - 24 = 120 (left: 120)",
                "12 / 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 - 24 = 120 (left: 120)",
                "12 / 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 24 + 144 = 168 (left: 168)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12)",
                "12 + 11 = 23 (left: 12 23 12) || 23 / 12 = 1.91666666667 (left: 1.91666666667 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                20.002,
                0.002
            ],
            "Resampling": [
                "0 <- 2.9",
                "1 <- 1.5",
                "2 <- 2.3",
                "3 <- 4.4",
                "4 <- 2.2",
                "5 <- 4.9",
                "6 <- 0.3",
                "7 <- 7.8",
                "8 <- 4.9",
                "9 <- 3.9"
            ]
        },
        "Step 8": {
            "steps": [
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 / 24 = 6 (left: 6)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 - 24 = 120 (left: 120)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 24 + 144 = 168 (left: 168)",
                "12 / 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 / 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 - 24 = 120 (left: 120)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                20.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.9",
                "1 <- 4.9",
                "2 <- 1.4",
                "3 <- 4.4",
                "4 <- 3.2",
                "5 <- 8.6",
                "6 <- 2.2",
                "7 <- 3.9",
                "8 <- 0.9",
                "9 <- INIT"
            ]
        },
        "Step 9": {
            "steps": [
                "12 / 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "12 / 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 - 24 = 120 (left: 120)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 24 + 144 = 168 (left: 168)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 - 24 = 120 (left: 120)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 24 + 144 = 168 (left: 168)",
                "12 + 11 = 23 (left: 12 23 12) || 12 * 23 = 276 (left: 276 12)",
                "11 * 12 = 132 (left: 12 12 132)"
            ]
        },
        "Input": "11 12 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "58": {
        "puzzle": "12 12 13 13",
        "Step 0": {
            "steps": [
                "13 - 12 = 1 (left: 1 13 13)",
                "12 / 12 = 1 (left: 1 13 13)",
                "12 * 12 = 144 (left: 13 13 144)",
                "12 * 12 = 144 (left: 13 13 144)",
                "13 + 12 = 25 (left: 13 25 13)",
                "12 * 12 = 144 (left: 13 13 144)",
                "12 * 13 = 156 (left: 13 13 156)",
                "13 + 12 = 25 (left: 12 13 25)",
                "13 / 12 = 1 (left: 12 1 ",
                "13 - 12 = 1 (left: 1 13 13)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                2.001,
                1.002,
                3.0,
                1.002,
                1.002,
                21.001,
                1.001,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.7",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 0.2",
                "8 <- INIT",
                "9 <- 0.7"
            ]
        },
        "Step 1": {
            "steps": [
                "12 * 12 = 144 (left: 13 13 144)",
                "13 - 12 = 1 (left: 12 1 13)",
                "13 - 12 = 1 (left: 12 1 13)",
                "13 - 12 = 1 (left: 1 13 13)",
                "13 + 12 = 25 (left: 12 13 25) || 25 / 12 = 2.08 (left: 2.08)",
                "13 - 12 = 1 (left: 12 1 13)",
                "13 - 12 = 1 (left: 1 13 13)",
                "12 * 12 = 144 (left: 13 13 144) || 13 + 144 = 157 (left: 13 157)",
                "13 - 12 = 1 (left: 1 13 13)",
                "13 + 12 = 25 (left: 12 13 25) || 13 / 12 = 1.08 (left: 1.08 25)"
            ],
            "Evaluation": [
                1.002,
                20.002,
                2.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 1.1",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.7",
                "5 <- INIT",
                "6 <- 0.7",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "13 + 12 = 25 (left: 12 13 25) || 13 - 12 = 1 (left: 1 25)",
                "13 - 12 = 1 (left: 12 1 13) || 12 / 1 = 12 (left: 1 13)",
                "13 - 12 = 1 (left: 12 1 13)",
                "13 - 12 = 1 (left: 1 13 13)",
                "13 + 12 = 25 (left: 12 13 25) || 13 / 12 = 1.08 (left: 1.08 25)",
                "13 - 12 = 1 (left: 12 1 13)",
                "13 + 12 = 25 (left: 12 13 25) || 12 * 13 = 156 (left: 156 25)",
                "13 * 12 = 156 (left: 13 13 ",
                "13 - 12 = 1 (left: 1 13 13)",
                "13 - 12 = 1 (left: 12 1 13)"
            ],
            "Evaluation": [
                40.0,
                1.001,
                0.003,
                0.003,
                0.002,
                0.003,
                0.001,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 2.0",
                "3 <- 1.2",
                "4 <- 2.0",
                "5 <- 0.5",
                "6 <- 2.0",
                "7 <- 2.0",
                "8 <- 1.1",
                "9 <- 1.1"
            ]
        },
        "Step 3": {
            "steps": [
                "13 + 12 = 25 (left: 12 13 25) || 13 - 12 = 1 (left: 1 25) || 25 - 1 = 24 (left: 24)",
                "13 + 12 = 25 (left: 12 13 25) || 13 - 12 = 1 (left: 1 25) || 25 / 1 = 25 (left: 1)",
                "13 + 12 = 25 (left: 12 13 25) || 13 - 12 = 1 (left: 1 25) || 1 * 25 = 25 (left: 25)",
                "13 - 12 = 1 (left: 12 1 13) || 12 * 1 = 12 (left: 12 13)",
                "13 + 12 = 25 (left: 12 13 25) || 13 - 12 = 1 (left: 1 25) || 25 / 1 = 25 (left: 25)",
                "12 * 12 = 144 (left: 13 13 144) || 144 / 13",
                "13 + 12 = 25 (left: 12 13 25) || 13 - 12 = 1 (left: 1 25) || 1 * 25 = 25 (left: 25)",
                "13 + 12 = 25 (left: 12 13 25) || 13 - 12 = 1 (left: 1 25) || Input: 3 9 27",
                "13 - 12 = 1 (left: 12 1 13) || 12 * 1 = 12 (left: 12 13)",
                "13 - 12 = 1 (left: 12 1 13) || 12 / 1 = 12 (left: 1 13)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                20.001,
                0.003,
                20.001,
                0.003,
                20.001,
                0.002,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 3.0",
                "2 <- 3.2",
                "3 <- 1.2",
                "4 <- 2.0",
                "5 <- 2.0",
                "6 <- 1.1",
                "7 <- 3.0",
                "8 <- INIT",
                "9 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "13 + 12 = 25 (left: 12 13 25) || 13 - 12 = 1 (left: 1 25) || 1 * 25 = 25 (left: 25) || 25 - 8 = 17 (left: 8)",
                "13 + 12 = 25 (left: 12 13 25) || 13 - 12 = 1 (left: 1 25) || 25 - 1 = 24 (left: 24) || Answer: ((13 + 12) - 13) - 12 = 24",
                "13 + 12 = 25 (left: 12 13 25) || 13 - 12 = 1 (left: 1 25) || 1 * 25 = 25 (left: 25) || 25 / 8 = 3.125 (left: 8)",
                "13 - 12 = 1 (left: 12 1 13) || 12 * 1 = 12 (left: 12 13)",
                "13 + 12 = 25 (left: 12 13 25) || 13 - 12 = 1 (left: 1 25) || 3 + 9 = 12 (left: 12 27)",
                "13 + 12 = 25 (left: 12 13 25) || 13 - 12 = 1 (left: 1 25) || 3 + 9 = 12 (left: 12 27)",
                "13 - 12 = 1 (left: 12 1 13) || 12 * 1 = 12 (left: 12 13)",
                "13 + 12 = 25 (left: 12 13 25) || 13 - 12 = 1 (left: 1 25) || 25 - 1 = 24 (left: 24) || Answer: (13 + 12) - (13 - 12) = 24",
                "13 - 12 = 1 (left: 1 13 13)",
                "13 + 12 = 25 (left: 12 13 25) || 13 - 12 = 1 (left: 1 25) || 25 - 1 = 24 (left: 24) || Answer: (13 + 12) - (13 - 12) = 24"
            ]
        },
        "Input": "12 12 13 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "59": {
        "puzzle": "1 1 12 13",
        "Step 0": {
            "steps": [
                "12 + 1 = 13 (left: 1 13 13)",
                "1 * 1 = 1 (left: 1 12 13)",
                "1 - 1 = 0 (left: 0 12 13)",
                "1 / 1 = 1 (left: 1 12 13)",
                "12 + 1 = 13 (left: 1 13 13)",
                "1 + 1 = 2 (left: 2 12 13)",
                "12 - 1 = 11 (left: 1 11 13)",
                "12 + 1 = 13 (left: 1 13 13)",
                "12 + 1 = 13 (left: 1 12 ",
                "12 + 1 = 13 (left: 1 13 13)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                41.0,
                1.002,
                0.003,
                1.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.5",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.5",
                "5 <- 0.5",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- 0.5",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 1 = 2 (left: 2 12 13) || 12 - 2 = 10 (left: 10 13)",
                "1 + 1 = 2 (left: 2 12 13) || 12 - 2 = 10 (left: 10 13)",
                "1 + 1 = 2 (left: 2 12 13)",
                "12 + 1 = 13 (left: 1 13 13)",
                "1 + 1 = 2 (left: 2 12 13) || 12 * 2 = 24 (left: 2 24 13)",
                "1 + 1 = 2 (left: 2 12 13) || Input: 6.5",
                "12 + 1 = 13 (left: 1 13 13)",
                "12 + 1 = 13 (left: 1 13 ",
                "1 + 1 = 2 (left: 2 12 13) || 2 * 12 = 24 (left: 24 13)",
                "1 + 1 = 2 (left: 2 12 13)"
            ],
            "Evaluation": [
                0.001,
                0.001,
                41.0,
                0.003,
                2.001,
                0.003,
                0.003,
                0.003,
                0.003,
                41.0
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.9",
                "2 <- 1.2",
                "3 <- 1.9",
                "4 <- 0.5",
                "5 <- INIT",
                "6 <- 0.5",
                "7 <- 1.2",
                "8 <- 1.9",
                "9 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 1 = 2 (left: 2 12 13) || 12 - 2 = 10 (left: 10 13)",
                "1 + 1 = 2 (left: 2 12 13) || 12 / 2 = 6 (left: 6 13)",
                "1 + 1 = 2 (left: 2 12 13) || 12 / 2 = 6 (left: 6 13)",
                "1 + 1 = 2 (left: 2 12 13) || 2 * 12 = 24 (left: 24 13)",
                "1 + 1 = 2 (left: 2 12 13) || 12 / 2 = 6 (left: 6 13)",
                "1 + 1 = 2 (left: 2 12 13)",
                "1 + 1 = 2 (left: 2 12 13) || 2 * 12 = 24 (left: 24 13)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13)",
                "1 + 1 = 2 (left: 2 12 13) || 2 * 12 = 24 (left: 24 13)",
                "1 + 1 = 2 (left: 2 12 13) || 12 / 2 = 6 (left: 6 13)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                41.0,
                0.003,
                21.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.5",
                "1 <- 1.2",
                "2 <- 1.2",
                "3 <- 0.5",
                "4 <- 0.5",
                "5 <- 2.5",
                "6 <- 1.9",
                "7 <- 1.9",
                "8 <- 1.9",
                "9 <- 2.5"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 1 = 2 (left: 2 12 13) || 12 - 2 = 10 (left: 10 13)",
                "1 + 1 = 2 (left: 2 12 13) || 12 / 2 = 6 (left: 6 13)",
                "1 + 1 = 2 (left: 2 12 13) || 12 / 2 = 6 (left: 6 13)",
                "1 + 1 = 2 (left: 2 12 13) || 2 * 12 = 24 (left: 24 13)",
                "1 + 1 = 2 (left: 2 12 13) || 12 / 2 = 6 (left: 6 13)",
                "1 + 1 = 2 (left: 2 12 13) || Input: 6.5",
                "1 + 1 = 2 (left: 2 12 13) || 2 * 12 = 24 (left: 24 13)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13)",
                "1 + 1 = 2 (left: 2 12 13) || 2 * 12 = 24 (left: 24 13)",
                "1 + 1 = 2 (left: 2 12 13) || 12 / 2 = 6 (left: 6 13)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                21.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.9",
                "2 <- 2.7",
                "3 <- 2.7",
                "4 <- 2.5",
                "5 <- INIT",
                "6 <- 2.7",
                "7 <- 1.9",
                "8 <- INIT",
                "9 <- 2.5"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 12 13)",
                "1 + 1 = 2 (left: 2 12 13) || 12 / 2 = 6 (left: 6 13)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 / 6.5 = 2 (left: 2)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13)",
                "1 + 1 = 2 (left: 2 12 13) || 12 / 2 = 6 (left: 6 13)",
                "1 + 1 = 2 (left: 2 12 13)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 / 6.5 = 2 (left: 2 13)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13)",
                "12 + 1 = 13 (left: 1 13 13)",
                "1 + 1 = 2 (left: 2 12 13) || 12 / 2 = 6 (left: 6 13)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.001,
                21.0,
                0.003,
                41.0,
                0.003,
                21.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 4.5",
                "2 <- 2.7",
                "3 <- 4.3",
                "4 <- 1.9",
                "5 <- 4.7",
                "6 <- 3.7",
                "7 <- 4.3",
                "8 <- 1.2",
                "9 <- 2.5"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 1 = 2 (left: 2 12 13) || 12 - 2 = 10 (left: 10 13)",
                "1 + 1 = 2 (left: 2 12 13) || 12 / 2 = 6 (left: 6 13)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 / 2 = 6.5 (left: 6.5 6.5)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13)",
                "1 + 1 = 2 (left: 2 12 13) || 12 / 2 = 6 (left: 6 13)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 / 2 = 6.5 (left: 6.5 6.5)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13) || 6.5",
                "1 + 1 = 2 (left: 2 12 13) || 2 * 12 = 24 (left: 24 13)",
                "1 + 1 = 2 (left: 2 12 13) || 12 / 2 = 6 (left: 6 13)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                21.0,
                0.003,
                1.002,
                21.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 5.6",
                "2 <- 4.7",
                "3 <- 3.7",
                "4 <- 2.5",
                "5 <- 1.2",
                "6 <- 4.3",
                "7 <- 4.5",
                "8 <- 0.5",
                "9 <- 4.3"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 1 = 2 (left: 2 12 13) || 12 - 2 = 10 (left: 10 13)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13) || 13 / 2 = 6.5 (left: 6.5 6.5)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 / 2 = 6.5 (left: 6.5 6.5)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13)",
                "1 + 1 = 2 (left: 2 12 13) || 12 / 2 = 6 (left: 6 13)",
                "1 + 1 = 2 (left: 2 12 13) || Input: 6.5",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13)",
                "1 + 1 = 2 (left: 2 12 13) || 2 * 12 = 24 (left: 24 13)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13) || 13 / 2 = 6.5 (left: 6.5 6.5)"
            ],
            "Evaluation": [
                0.001,
                1.002,
                1.002,
                21.0,
                0.003,
                0.003,
                21.0,
                21.0,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 4.5",
                "1 <- 4.7",
                "2 <- 2.5",
                "3 <- 4.5",
                "4 <- 4.3",
                "5 <- 1.9",
                "6 <- 5.3",
                "7 <- 5.3",
                "8 <- 6.6",
                "9 <- 5.6"
            ]
        },
        "Step 7": {
            "steps": [
                "1 + 1 = 2 (left: 2 12 13) || 12 - 2 = 10 (left: 10 13)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 / 2 = 6.5 (left: 6.5 6.5)",
                "1 + 1 = 2 (left: 2 12 13) || 12 / 2 = 6 (left: 6 13)",
                "1 + 1 = 2 (left: 2 12 13) || 2 * 12 = 24 (left: 24 13)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13) || 13 / 2 = 6.5 (left: 6.5 6.5)",
                "1 + 1 = 2 (left: 2 12 13) || Input: 6.5",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13) || 6.5",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13) || 13 / 2 = 6.5 (left: 6.5 6.5)"
            ],
            "Evaluation": [
                0.001,
                1.002,
                0.003,
                0.003,
                1.002,
                0.003,
                21.0,
                0.003,
                21.0,
                1.002
            ],
            "Resampling": [
                "0 <- 3.7",
                "1 <- 4.7",
                "2 <- 6.7",
                "3 <- 7.8",
                "4 <- 1.9",
                "5 <- 6.6",
                "6 <- 6.3",
                "7 <- 6.6",
                "8 <- 4.7",
                "9 <- 5.6"
            ]
        },
        "Step 8": {
            "steps": [
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 / 6.5 = 2 (left: 2 13)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 / 2 = 6.5 (left: 6.5 6.5)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 / 2 = 6.5 (left: 6.5 6.5)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13)",
                "1 + 1 = 2 (left: 2 12 13) || 12 / 2 = 6 (left: 6 13)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13) || 13 / 2 = 6.5 (left: 6.5 6.5)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13) || 6.5",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13) || 13 / 2 = 6.5 (left: 6.5 6.5)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                1.002,
                21.0,
                0.003,
                1.002,
                21.0,
                0.003,
                21.0,
                1.002
            ],
            "Resampling": [
                "0 <- 8.6",
                "1 <- 2.5",
                "2 <- 5.3",
                "3 <- 8.6",
                "4 <- 8.8",
                "5 <- 4.5",
                "6 <- 8.2",
                "7 <- 4.5",
                "8 <- 6.7",
                "9 <- 1.2"
            ]
        },
        "Step 9": {
            "steps": [
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13) || 13 / 6.5 = 2 (left: 2 13)",
                "1 + 1 = 2 (left: 2 12 13) || 12 / 2 = 6 (left: 6 13)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13) || 13 / 2 = 6.5 (left: 6.5 6.5)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13) || 13 / 2 = 6.5 (left: 6.5 6.5)",
                "1 + 1 = 2 (left: 2 12 13) || Input: 6.5",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 / 2 = 6.5 (left: 6.5 6.5) || 6.5 / 6.5 = 1 (left: 1)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (left: 6.5 13) || 13 - 6.5 = 6.5 (left: 6.5 13)",
                "1 + 1 = 2 (left: 2 12 13) || 12 / 2 = 6 (left: 6 13)"
            ]
        },
        "Input": "1 1 12 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "60": {
        "puzzle": "1 3 5 12",
        "Step 0": {
            "steps": [
                "5 + 12 = 17 (left: 1 3 17)",
                "3 + 5 = 8 (left: 1 8 12)",
                "12 - 5 = 7 (left: 1 3 7)",
                "12 - 1 = 11 (left: 3 5 11)",
                "5 * 3 = 15 (left: 1 15 12)",
                "12 - 5 = 7 (left: 1 3 7)",
                "12 - 5 = 7 (left: 1 3 7)",
                "5 * 3 = 15 (left: 1 15 12)",
                "12 / 3 = 4 (left: 1 4 ",
                "5 * 3 = 15 (left: 1 15 12)"
            ],
            "Evaluation": [
                22.0,
                1.002,
                2.001,
                3.0,
                22.0,
                1.001,
                2.0,
                2.001,
                0.001,
                2.001
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- INIT",
                "2 <- 0.9",
                "3 <- 0.4",
                "4 <- 0.3",
                "5 <- 0.0",
                "6 <- 0.9",
                "7 <- 0.0",
                "8 <- 0.6",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "5 + 12 = 17 (left: 1 3 17) || 3 * 17 = 51 (left: 1 51)",
                "12 - 5 = 7 (left: 1 3 7)",
                "5 * 3 = 15 (left: 1 15 12) || 15 / 1 = 15 (left: 15 12)",
                "5 * 3 = 15 (left: 1 15 12) || 1 * 15 = 15 (left: 15 12)",
                "12 - 1 = 11 (left: 3 5 11) || 11 - 5 = 6 (left: 3 6)",
                "5 + 12 = 17 (left: 1 3 17) || 1 * 3 = 3 (left:",
                "5 * 3 = 15 (left: 1 15 12) || 1 * 15 = 15 (left: 15 12)",
                "5 + 12 = 17 (left: 1 3 17) || 17 / 3 = 5 (left: 1 5)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4)",
                "12 - 1 = 11 (left: 3 5 11) || 11 - 5 = 6 (left: 3 6)"
            ],
            "Evaluation": [
                0.002,
                2.001,
                0.003,
                0.003,
                3.0,
                0.001,
                0.003,
                40.0,
                60.0,
                3.0
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 0.0",
                "2 <- 1.8",
                "3 <- 1.7",
                "4 <- 1.7",
                "5 <- INIT",
                "6 <- 1.8",
                "7 <- INIT",
                "8 <- 1.7",
                "9 <- 0.4"
            ]
        },
        "Step 2": {
            "steps": [
                "5 + 12 = 17 (left: 1 3 17) || 17 / 3 = 5 (left: 1 5) || 5 - 1 = 4 (left: 4)",
                "5 + 12 = 17 (left: 1 3 17) || 3 - 1 = 2 (left: 2 17)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "5 + 12 = 17 (left: 1 3 17) || 17 / 3 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "5 + 12 = 17 (left: 1 3 17) || 17 / 3 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "12 - 5 = 7 (left: 1 3 7)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "5 + 3 = 8 (left: 1 8 ",
                "5 + 12 = 17 (left: 1 3 17) || 17 / 3 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "5 * 3 = 15 (left: 1 15 12) || 15 / 1 = 15 (left: 15 12)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                0.002,
                0.002,
                2.001,
                0.002,
                1.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 0.3",
                "2 <- 1.8",
                "3 <- 1.8",
                "4 <- 1.8",
                "5 <- 1.8",
                "6 <- 1.7",
                "7 <- 0.2",
                "8 <- 1.7",
                "9 <- 1.7"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 - 1 = 11 (left: 3 5 11) || 11 - 5 = 6 (left: 3 6)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "5 + 12 = 17 (left: 1 3 17) || 17 / 3 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "12 - 5 = 7 (left: 1 3 7) || 1 * 7 = 7 (left: 7)",
                "5 + 12 = 17 (left: 1 3 17) || 17 / 3 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "5 + 12 = 17 (left: 1 3 17) || 17 / 3 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)"
            ],
            "Evaluation": [
                0.0,
                3.0,
                0.002,
                0.002,
                0.002,
                0.002,
                0.002,
                0.001,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 0.7",
                "2 <- INIT",
                "3 <- 1.8",
                "4 <- 0.4",
                "5 <- 1.8",
                "6 <- 1.8",
                "7 <- 0.4",
                "8 <- 0.1",
                "9 <- 0.2"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "5 * 3 = 15 (left: 1 15 12) || 15 / 1 = 15 (left: 15 12)",
                "12 - 5 = 7 (left: 1 3 7)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "5 * 3 = 15 (left: 1 15 12) || 15 / 1 = 15 (left: 15 12)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "5 * 3 = 15 (left: 1 15 12) || 15 - 12 = 3 (left: 1 3)",
                "3 + 5 = 8 (left: 1 8 12) || 12 - 1 = 11 (left: 8 11)",
                "12 - 5 = 7 (left: 1 3 7) || 3 / 1 = 3 (left: 3 7)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                2.001,
                0.002,
                0.003,
                0.002,
                0.002,
                21.0,
                2.001,
                0.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 4.7",
                "2 <- 1.9",
                "3 <- 1.8",
                "4 <- 4.7",
                "5 <- 4.7",
                "6 <- 4.2",
                "7 <- INIT",
                "8 <- 1.8",
                "9 <- 1.9"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 5 = 7 (left: 1 3 7) || 3 * 7 = 21 (left: 1 21)",
                "5 * 3 = 15 (left: 1 15 12) || 15 - 12 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "12 - 1 = 11 (left: 3 5 11) || 11 - 5 = 6 (left: 3 6) || 6 - 3 = 3 (left: 3)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "5 * 3 = 15 (left: 1 15 12) || 15 - 12 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "5 * 3 = 15 (left: 1 15 12) || 15 - 12 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4)",
                "5 + 3 = 8 (left: 1 8 ",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 1 = 11 (left: 3 5 11) || 11 - 5 = 6 (left: 3 6) || 6 - 3 = 3 (left: 3)"
            ],
            "Evaluation": [
                0.002,
                0.0,
                0.0,
                0.002,
                0.0,
                0.0,
                60.0,
                1.002,
                0.002,
                0.0
            ],
            "Resampling": [
                "0 <- 5.6",
                "1 <- 4.7",
                "2 <- 1.7",
                "3 <- 5.6",
                "4 <- 3.1",
                "5 <- 5.6",
                "6 <- 5.6",
                "7 <- 4.7",
                "8 <- 1.8",
                "9 <- 4.8"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "5 * 3 = 15 (left: 1 15 12) || 15 - 12 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "5 + 12 = 17 (left: 1 3 17) || 17 / 3 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 1 = 11 (left: 3 5 11) || 11 - 5 = 6 (left: 3 6) || 6 - 3 = 3 (left: 3)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "5 * 3 = 15 (left: 1 15 12) || 15 - 12 = 3 (left: 1 3) || 1 * 3 = 3 (left: 3)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "3 + 5 = 8 (left: 1 8 12) || 12 - 1 = 11 (left: 8 11) || 8 * 11 = 88 (left: 88)"
            ],
            "Evaluation": [
                0.0,
                0.0,
                0.002,
                0.002,
                0.0,
                0.002,
                0.002,
                0.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 5.6",
                "2 <- 5.6",
                "3 <- 0.4",
                "4 <- 1.8",
                "5 <- 4.7",
                "6 <- 1.7",
                "7 <- 1.7",
                "8 <- 1.8",
                "9 <- 1.8"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "5 * 3 = 15 (left: 1 15 12) || 1 * 15 = 15 (left: 15 12)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "5 * 3 = 15 (left: 1 15 12) || 15 - 12 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "5 + 12 = 17 (left: 1 3 17) || 17 / 3 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "5 + 12 = 17 (left: 1 3 17) || 17 / 3 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.002,
                0.003,
                0.002,
                0.0,
                0.002,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 5.6",
                "1 <- INIT",
                "2 <- 4.2",
                "3 <- 0.0",
                "4 <- 4.7",
                "5 <- 4.7",
                "6 <- 5.6",
                "7 <- 4.7",
                "8 <- 1.8",
                "9 <- 5.6"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 - 5 = 7 (left: 1 3 7)",
                "12 - 5 = 7 (left: 1 3 7) || 3 / 1 = 3 (left: 3 7)",
                "5 + 12 = 17 (left: 1 3 17) || 17 - 3 = 14 (left: 1 14)",
                "5 * 3 = 15 (left: 1 15 12) || 15 - 12 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "5 * 3 = 15 (left: 1 15 12) || 15 - 12 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "5 * 3 = 15 (left: 1 15 12) || 15 - 12 = 3 (left: 1 3) || 1 * 3 = 3 (left: 3)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.0,
                2.001,
                0.0,
                20.001,
                0.0,
                0.0,
                0.002,
                0.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 5.6",
                "1 <- 5.6",
                "2 <- 5.6",
                "3 <- 8.3",
                "4 <- 5.6",
                "5 <- 4.7",
                "6 <- 4.7",
                "7 <- 5.6",
                "8 <- 3.1",
                "9 <- 5.6"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "5 + 12 = 17 (left: 1 3 17) || 17 - 3 = 14 (left: 1 14) || 14 - 1 = 13 (left: 13)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "5 * 3 = 15 (left: 1 15 12) || 15 - 12 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "5 * 3 = 15 (left: 1 15 12) || 15 - 12 = 3 (left: 1 3) || 1 * 3 = 3 (left: 3)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 1 = 11 (left: 3 5 11) || 11 - 5 = 6 (left: 3 6) || 3 * 6 = 18 (left: 18)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ]
        },
        "Input": "1 3 5 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "61": {
        "puzzle": "5 5 12 12",
        "Step 0": {
            "steps": [
                "12 + 5 = 17 (left: 5 12 17)",
                "5 * 5 = 25 (left: 12 12 25)",
                "12 / 5 = 2.4 (left: 2.4 12 12)",
                "12 / 5 = 2 (left: 2 12 12)",
                "12 - 5 = 7 (left: 5 7 12)",
                "12 / 5 = 2 (left: 2 12 12)",
                "5 / 5 = 1 (left: 1 5 12)",
                "12 - 5 = 7 (left: 5 7 12)",
                "12 / 5 = 2 (left: 5 2 ",
                "12 + 5 = 17 (left: 5 17 12)"
            ],
            "Evaluation": [
                2.001,
                2.001,
                0.003,
                20.002,
                21.001,
                1.002,
                22.0,
                21.001,
                0.001,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.4",
                "2 <- INIT",
                "3 <- 0.7",
                "4 <- 0.1",
                "5 <- INIT",
                "6 <- 0.7",
                "7 <- INIT",
                "8 <- 0.4",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "5 * 5 = 25 (left: 25 12 12)",
                "12 - 5 = 7 (left: 5 7 12) || 7 / 5 = 1.4 (left: 1.4 12)",
                "5 - 5 = 0 (left: 0 12 12)",
                "12 - 5 = 7 (left: 5 7 12) || 5 * 7 = 35 (left: 35 12)",
                "5 * 5 = 25 (left: 12 12 25) || Possible next steps:",
                "5 - 5 = 0 (left: 0 12 12)",
                "12 - 5 = 7 (left: 5 7 12) || 5 * 7 = 35 (left: 35 12)",
                "12 / 5 = 2.4 (left: 5 ",
                "12 - 5 = 7 (left: 5 7 12) || 5 * 7 = 35 (left: 35 12)",
                "5 - 5 = 0 (left: 0 12 12)"
            ],
            "Evaluation": [
                21.001,
                0.002,
                60.0,
                0.001,
                0.003,
                60.0,
                0.001,
                0.001,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 0.7",
                "2 <- 1.9",
                "3 <- 1.2",
                "4 <- 1.5",
                "5 <- 0.5",
                "6 <- 1.2",
                "7 <- 1.9",
                "8 <- INIT",
                "9 <- 1.9"
            ]
        },
        "Step 2": {
            "steps": [
                "5 - 5 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 0 12)",
                "12 - 5 = 7 (left: 5 7 12) || 7 / 5 = 1.4 (left: 1.4 12)",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)",
                "5 - 5 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12)",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)",
                "12 / 5 = 2 (left: 2 12 12) || Possible next steps:",
                "5 - 5 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12)",
                "5 - 5 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12)",
                "12 + 5 = 17 (left: 5 17 12)",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)"
            ],
            "Evaluation": [
                20.0,
                0.002,
                20.002,
                20.002,
                20.002,
                0.003,
                20.002,
                20.002,
                2.001,
                20.002
            ],
            "Resampling": [
                "0 <- 2.7",
                "1 <- 1.5",
                "2 <- 1.0",
                "3 <- 2.7",
                "4 <- 2.4",
                "5 <- 1.5",
                "6 <- 0.4",
                "7 <- 0.7",
                "8 <- 1.9",
                "9 <- 1.9"
            ]
        },
        "Step 3": {
            "steps": [
                "5 - 5 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)",
                "5 * 5 = 25 (left: 25 12 12) || 25 - 12 = 13 (left: 13 12)",
                "5 - 5 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "5 - 5 = 0 (left: 0 12 12) || 0 - 12 = -12 (left: -12 12)",
                "12 - 5 = 7 (left: 5 7 12) || 5 * 7 = 35 (left: 35 12)",
                "12 - 5 = 7 (left: 5 7 12) || 12 / 5 = 2.4 (left: 2.4 12)",
                "5 - 5 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12)",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)"
            ],
            "Evaluation": [
                40.001,
                20.002,
                0.003,
                20.002,
                60.0,
                1.002,
                0.001,
                1.002,
                20.002,
                20.002
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 3.3",
                "2 <- 1.9",
                "3 <- 3.8",
                "4 <- 2.3",
                "5 <- 3.0",
                "6 <- 3.0",
                "7 <- 1.5",
                "8 <- 2.7",
                "9 <- 1.2"
            ]
        },
        "Step 4": {
            "steps": [
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "5 - 5 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24 || 24 - 12 =",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)",
                "5 - 5 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 - 5 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 - 5 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2)",
                "5 - 5 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "5 - 5 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12)",
                "5 - 5 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                20.002,
                20.002,
                20.002,
                0.001,
                20.001,
                20.002,
                20.002,
                20.002
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 4.9",
                "2 <- 4.7",
                "3 <- 3.0",
                "4 <- 0.7",
                "5 <- 3.0",
                "6 <- 2.2",
                "7 <- 2.6",
                "8 <- 3.7",
                "9 <- 4.9"
            ]
        },
        "Step 5": {
            "steps": [
                "5 / 5 = 1 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60)",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "5 - 5 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 - 5 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "12 - 5 = 7 (left: 5 7 12) || 7 / 5 = 1.4 (left: 1.4 12)",
                "5 - 5 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2)",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "5 - 5 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 5 = 7 (left: 5 7 12) || 12 / 5 = 2.4 (left: 2.4 12) || 2.4 + 12 = 14.4 (left: 14.4)",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                41.0,
                20.002,
                20.002,
                20.001,
                0.002,
                0.001,
                20.002,
                20.002,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.9",
                "2 <- 1.2",
                "3 <- 3.1",
                "4 <- 3.9",
                "5 <- 4.0",
                "6 <- 4.7",
                "7 <- 4.2",
                "8 <- 3.0",
                "9 <- 5.2"
            ]
        },
        "Step 6": {
            "steps": [
                "5 - 5 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 0 12) || 0 + 12 = 12 (left: 12)",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2)",
                "5 - 5 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "5 - 5 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "5 - 5 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                20.002,
                20.002,
                20.002,
                0.001,
                20.002,
                20.002,
                20.001,
                0.001
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 4.0",
                "2 <- 2.2",
                "3 <- 3.8",
                "4 <- 1.9",
                "5 <- 5.1",
                "6 <- 4.0",
                "7 <- 0.6",
                "8 <- 5.0",
                "9 <- 5.0"
            ]
        },
        "Step 7": {
            "steps": [
                "5 - 5 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 - 12 =",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "5 - 5 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2)",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "5 / 5 = 1 (left: 1 5 12) || 5 * 1 = 5 (left: 5 12)",
                "5 / 5 = 1 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 1 * 60 = 60 (left: 60)",
                "5 / 5 = 1 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                20.002,
                20.002,
                20.002,
                0.001,
                20.001,
                1.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 7.2",
                "2 <- 2.4",
                "3 <- 5.7",
                "4 <- 2.3",
                "5 <- 1.2",
                "6 <- 1.0",
                "7 <- 1.5",
                "8 <- 2.4",
                "9 <- 6.2"
            ]
        },
        "Step 8": {
            "steps": [
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 12 * 24 = 288 (left: 288)",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 - 12 =",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "5 - 5 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "5 - 5 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 - 5 = 0 (left: 0 12 12) || 0 - 12 = -12 (left: -12 12)",
                "5 * 5 = 25 (left: 25 12 12) || 25 / 12 = 2.08 (left: 2.08 12)",
                "5 - 5 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12)",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                20.001,
                20.002,
                1.002,
                22.0,
                20.002,
                20.002,
                20.002
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 5.3",
                "2 <- 7.4",
                "3 <- 6.2",
                "4 <- 5.9",
                "5 <- 4.8",
                "6 <- 8.6",
                "7 <- 4.8",
                "8 <- 1.2",
                "9 <- 8.4"
            ]
        },
        "Step 9": {
            "steps": [
                "5 - 5 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 24 = 288 (left: 288)",
                "5 - 5 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5) || 0.5 * 2 = 1 (left: 1)",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2)",
                "5 - 5 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2)",
                "5 * 5 = 25 (left: 25 12 12) || 25 / 12 = 2.08 (left: 2.08 12) || 2.08 * 12 = 24.96 (left: 24.96)",
                "5 - 5 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "5 - 5 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12)",
                "5 - 5 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2)"
            ]
        },
        "Input": "5 5 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "62": {
        "puzzle": "1 9 9 12",
        "Step 0": {
            "steps": [
                "12 - 1 = 11 (left: 9 9 11)",
                "9 / 1 = 9 (left: 9 9 12)",
                "12 - 1 = 11 (left: 9 9 11)",
                "1 * 9 = 9 (left: 9 9 12)",
                "12 - 1 = 11 (left: 9 9 11)",
                "1 * 9 = 9 (left: 9 12 9)",
                "9 / 1 = 9 (left: 9 9 12)",
                "12 - 9 = 3 (left: 1 9 3)",
                "12 - 9 = 3 (left: 1 3 ",
                "12 - 1 = 11 (left: 9 9 11)"
            ],
            "Evaluation": [
                1.001,
                3.0,
                1.002,
                1.002,
                1.002,
                22.0,
                2.001,
                60.0,
                0.0,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.7",
                "3 <- 0.7",
                "4 <- INIT",
                "5 <- 0.5",
                "6 <- INIT",
                "7 <- 0.7",
                "8 <- INIT",
                "9 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "9 / 1 = 9 (left: 9 9 12)",
                "1 * 9 = 9 (left: 9 9 12)",
                "12 - 9 = 3 (left: 1 9 3) || 1 * 9 = 9 (left: 9 3)",
                "12 - 9 = 3 (left: 1 9 3) || 1 * 9 = 9 (left: 9 3)",
                "1 * 9 = 9 (left: 9 9 12)",
                "1 * 9 = 9 (left: 9 12 9) || 9 / 12 = ",
                "12 - 1 = 11 (left: 9 9 11)",
                "12 - 9 = 3 (left: 1 9 3) || 3 * 1 = 3 (left: 3)",
                "12 - 1 = 11 (left: 9 9 11)",
                "1 * 9 = 9 (left: 9 12 9) || 12 / 9 = 1.33 (left: 1.33 9)"
            ],
            "Evaluation": [
                2.001,
                2.001,
                0.002,
                0.003,
                2.001,
                0.003,
                2.001,
                0.0,
                2.001,
                2.001
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- INIT",
                "2 <- 0.7",
                "3 <- 0.7",
                "4 <- 0.7",
                "5 <- 0.7",
                "6 <- 0.9",
                "7 <- 0.7",
                "8 <- INIT",
                "9 <- 0.7"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 9 = 3 (left: 1 9 3) || 9 / 3 = 3 (left: 1 3)",
                "1 * 9 = 9 (left: 9 9 12)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6)",
                "12 - 9 = 3 (left: 1 9 3) || 3 * 1 = 3 (left: 3)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6)",
                "12 - 1 = 11 (left: 9 9 11) || 9 - 9 = 0 (left: 0 11)",
                "12 - 9 = 3 (left: 1 9 3) || 3 * 1 = 3 (left: 3)",
                "12 - 1 = 11 (left: 9 9 11)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6)"
            ],
            "Evaluation": [
                21.0,
                2.001,
                40.0,
                0.0,
                40.0,
                40.0,
                0.001,
                0.0,
                2.001,
                40.0
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.2",
                "2 <- 0.7",
                "3 <- 2.2",
                "4 <- INIT",
                "5 <- 2.8",
                "6 <- 2.0",
                "7 <- 2.5",
                "8 <- 2.4",
                "9 <- 0.5"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 * 9 = 9 (left: 9 9 12)",
                "12 - 1 = 11 (left: 9 9 11) || 9 / 9 = 1 (left: 1 11)",
                "12 - 9 = 3 (left: 1 9 3) || 9 / 3 = 3 (left: 1 3) || 1 * 3 = 3 (left: 3)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 * 9 = 9 (left: 9 12 9) || 12 / 9 = 1.33 (left: 1.33 9)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                40.0,
                0.003,
                2.001,
                40.0,
                0.0,
                0.002,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 3.5",
                "2 <- 2.2",
                "3 <- 3.2",
                "4 <- 2.5",
                "5 <- 2.2",
                "6 <- 2.2",
                "7 <- 3.5",
                "8 <- 2.9",
                "9 <- 3.9"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "12 - 1 = 11 (left: 9 9 11) || 9 / 9 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 1 = 11 (left: 9 9 11) || 9 / 9 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 * 9 = 9 (left: 9 12 9) || 12 / 9 = 1.33 (left: 1.33 9) || 9 / 1.33 = 6.766 (left: 6.766)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 3.5",
                "2 <- 2.4",
                "3 <- 2.4",
                "4 <- 2.0",
                "5 <- 2.4",
                "6 <- 2.4",
                "7 <- 3.5",
                "8 <- 3.5",
                "9 <- 3.2"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 9 = 3 (left: 1 9 3) || 9 / 3 = 3 (left: 1 3) || 3 - 1 = 2 (left: 2)",
                "12 - 1 = 11 (left: 9 9 11) || 9 / 9 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 9 = 3 (left: 1 9 3) || 9 / 3 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 1 = 11 (left: 9 9 11) || 9 / 9 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 - 1 = 11 (left: 9 9 11) || 9 / 9 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.003,
                0.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 3.2",
                "2 <- 2.4",
                "3 <- INIT",
                "4 <- 3.5",
                "5 <- 2.2",
                "6 <- 3.5",
                "7 <- 2.0",
                "8 <- 3.5",
                "9 <- 2.4"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 1 = 11 (left: 9 9 11)",
                "12 - 1 = 11 (left: 9 9 11) || 9 / 9 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 1 = 11 (left: 9 9 11) || 9 / 9 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 - 9 = 3 (left: 1 9 3) || 9 / 3 = 3 (left: 1 3) || 1 * 3 = 3 (left: 3)",
                "12 - 1 = 11 (left: 9 9 11) || 9 / 9 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                2.001,
                0.003,
                0.003,
                0.003,
                0.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.5",
                "1 <- 0.5",
                "2 <- 2.9",
                "3 <- 3.5",
                "4 <- 3.2",
                "5 <- 3.5",
                "6 <- 3.2",
                "7 <- 3.5",
                "8 <- 2.2",
                "9 <- 0.7"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 1 = 11 (left: 9 9 11) || 9 / 9 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 * 9 = 9 (left: 9 12 9) || 12 / 9 = 1.33 (left: 1.33 9)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 1 = 11 (left: 9 9 11) || 9 / 9 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 1 = 11 (left: 9 9 11) || 9 / 9 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 1 = 11 (left: 9 9 11) || 9 / 9 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6)"
            ],
            "Evaluation": [
                0.002,
                2.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                40.0
            ],
            "Resampling": [
                "0 <- 7.9",
                "1 <- 3.2",
                "2 <- 7.9",
                "3 <- 7.9",
                "4 <- 2.0",
                "5 <- 2.4",
                "6 <- 7.9",
                "7 <- 7.9",
                "8 <- 3.2",
                "9 <- 7.9"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 9 = 3 (left: 1 9 3) || 9 / 3 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.003,
                0.0,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.5",
                "2 <- 3.2",
                "3 <- 7.9",
                "4 <- 7.9",
                "5 <- 7.9",
                "6 <- 2.1",
                "7 <- 0.5",
                "8 <- 6.3",
                "9 <- 3.5"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 * 9 = 9 (left: 9 9 12) || 12 + 9 = 21 (left: 9 21)",
                "1 * 9 = 9 (left: 9 12 9) || 12 + 9 = 21 (left: 9 21)",
                "12 - 1 = 11 (left: 9 9 11) || 9 - 9 = 0 (left: 0 11)",
                "12 - 1 = 11 (left: 9 9 11) || 9 / 9 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ]
        },
        "Input": "1 9 9 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "63": {
        "puzzle": "2 3 3 12",
        "Step 0": {
            "steps": [
                "12 - 2 = 10 (left: 3 3 10)",
                "3 + 3 = 6 (left: 2 6 12)",
                "3 * 3 = 9 (left: 2 9 12)",
                "3 * 4 = 12 (left: 2 12 12)",
                "3 * 3 = 9 (left: 2 9 12)",
                "3 + 3 = 6 (left: 2 6 12)",
                "3 + 3 = 6 (left: 2 6 12)",
                "12 - 2 = 10 (left: 3 3 10)",
                "12 - 2 = 10 (left: 3 3 10)",
                "12 - 2 = 10 (left: 3 10 12)"
            ],
            "Evaluation": [
                3.0,
                3.0,
                1.002,
                21.001,
                1.002,
                3.0,
                3.0,
                20.001,
                3.0,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.5",
                "3 <- INIT",
                "4 <- 0.3",
                "5 <- INIT",
                "6 <- 0.7",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "3 * 3 = 9 (left: 2 9 12)",
                "3 + 3 = 6 (left: 2 6 12)",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6)",
                "12 - 2 = 10 (left: 3 10 12)",
                "3 * 4 = 12 (left: 2 12 12) || Possible next steps:",
                "3 + 3 = 6 (left: 2 6 12)",
                "12 - 2 = 10 (left: 3 3 10) || 10 - 3 = 7 (left: 3 7)",
                "3 * 12 = 36 (left: 2 3 ",
                "12 - 2 = 10 (left: 3 10 12)",
                "3 * 4 = 12 (left: 2 12 12) || Possible next steps:"
            ],
            "Evaluation": [
                1.002,
                3.0,
                20.002,
                1.002,
                0.003,
                3.0,
                0.0,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.2",
                "2 <- 1.2",
                "3 <- INIT",
                "4 <- 0.3",
                "5 <- INIT",
                "6 <- 0.7",
                "7 <- 0.3",
                "8 <- 1.1",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "3 * 3 = 9 (left: 2 9 12)",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "12 - 2 = 10 (left: 3 10 12)",
                "3 * 4 = 12 (left: 2 12 12) || Possible next steps:",
                "3 + 3 = 6 (left: 2 6 12)",
                "12 - 2 = 10 (left: 3 3 10) || 10 - 3 = 7 (left: 3 7)",
                "3 * 4 = 12 (left: 2 12 12) || 12 - 2 = 10 (left: 10 12)",
                "3 + 3 = 6 (left: 2 6 12) || 12 / 2 = 6 (left: 6 12)",
                "3 + 3 = 6 (left: 2 6 12)"
            ],
            "Evaluation": [
                1.002,
                20.002,
                20.002,
                1.002,
                0.003,
                3.0,
                0.0,
                0.002,
                1.002,
                3.0
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 1.1",
                "2 <- 0.7",
                "3 <- INIT",
                "4 <- 2.2",
                "5 <- 2.1",
                "6 <- 0.3",
                "7 <- 2.2",
                "8 <- 2.2",
                "9 <- 2.2"
            ]
        },
        "Step 3": {
            "steps": [
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6)",
                "12 - 2 = 10 (left: 3 3 10) || 10 / 3 = 3.33 (left: 3 3.33)",
                "12 - 2 = 10 (left: 3 10 12)",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 * 4 = 12 (left: 2 12 12) || 12 - 2 = 10 (left: 10 12)",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                0.003,
                20.002,
                22.0,
                1.002,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- INIT",
                "2 <- 3.1",
                "3 <- 0.7",
                "4 <- 2.1",
                "5 <- 0.8",
                "6 <- 2.1",
                "7 <- 2.1",
                "8 <- 0.3",
                "9 <- 2.2"
            ]
        },
        "Step 4": {
            "steps": [
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)",
                "3 + 3 = 6 (left: 2 6 12)",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "12 - 2 = 10 (left: 3 3 10) || 10 - 3 = 7 (left: 3 7)",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "12 - 2 = 10 (left: 3 3 10) || 10 - 3 = 7 (",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 * 4 = 12 (left: 2 12 12) || 12 - 2 = 10 (left: 10 12)",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                40.0,
                3.0,
                20.002,
                0.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 4.0",
                "2 <- 3.2",
                "3 <- 0.5",
                "4 <- 2.5",
                "5 <- 4.1",
                "6 <- 0.0",
                "7 <- 4.0",
                "8 <- 0.3",
                "9 <- 4.2"
            ]
        },
        "Step 5": {
            "steps": [
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "12 - 2 = 10 (left: 3 3 10) || 10 / 3 = 3.33 (left: 3 3.33) || 3 / 3.33 = 0.90 (left: 0.90)",
                "3 + 3 = 6 (left: 2 6 12) || 12 / 2 = 6 (left: 6 12)",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6)",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left:",
                "12 - 2 = 10 (left: 3 3 10) || 10 - 3 = 7 (left: 3 7)",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "3 * 4 = 12 (left: 2 12 12) || 12 - 2 = 10 (left: 10 12)",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.002,
                20.002,
                0.001,
                0.0,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 5.4",
                "2 <- 1.2",
                "3 <- 5.4",
                "4 <- 3.2",
                "5 <- 3.2",
                "6 <- 3.1",
                "7 <- 5.4",
                "8 <- INIT",
                "9 <- 4.2"
            ]
        },
        "Step 6": {
            "steps": [
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "12 - 2 = 10 (left: 3 3 10) || 10 / 3 = 3.33 (left: 3 3.33) || 3 / 3.33 = 0.90 (left: 0.90)",
                "12 - 2 = 10 (left: 3 3 10) || 10 / 3 = 3.33 (left: 3 3.33) || 3 / 3.33 = 0.90 (left: 0.90)",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "12 - 2 = 10 (left: 3 10 12)",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                40.0,
                20.002,
                20.002,
                0.002,
                0.003,
                0.003,
                0.002,
                0.002,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 6.2",
                "2 <- 6.2",
                "3 <- 3.2",
                "4 <- 2.2",
                "5 <- 3.2",
                "6 <- 0.3",
                "7 <- 6.8",
                "8 <- 4.0",
                "9 <- 6.0"
            ]
        },
        "Step 7": {
            "steps": [
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "12 - 2 = 10 (left: 3 3 10) || 10 / 3 = 3.33 (left: 3 3.33) || 3 - 3.33 = -0.33 (left: -0.33)",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "12 - 2 = 10 (left: 3 3 10) || 10 / 3 = 3.33 (left: 3 3.33) || 3 / 3.33 = 0.90 (left: 0.90)",
                "3 * 4 = 12 (left: 2 12 12) || 12 - 2 = 10 (left: 10 12)",
                "12 - 2 = 10 (left: 3 10 12) || 10 - 3 = 7 (left: 7 12)",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18"
            ],
            "Evaluation": [
                40.0,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.002,
                1.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 7.0",
                "2 <- 6.1",
                "3 <- 7.0",
                "4 <- 6.0",
                "5 <- 2.8",
                "6 <- 3.2",
                "7 <- 7.0",
                "8 <- 6.0",
                "9 <- 2.9"
            ]
        },
        "Step 8": {
            "steps": [
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "3 + 3 = 6 (left: 2 6 12) || 12 / 2 = 6 (left: 6 12) || 12 + 6 = 18 (left: 18)",
                "12 - 2 = 10 (left: 3 3 10) || 10 / 3 = 3.33 (left: 3 3.33) || 3 - 3.33 = -0.33 (left: -0.33)",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6)"
            ],
            "Evaluation": [
                40.0,
                0.003,
                0.003,
                0.003,
                0.003,
                60.0,
                0.002,
                0.003,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 7.0",
                "1 <- 6.0",
                "2 <- 8.0",
                "3 <- 8.0",
                "4 <- 1.2",
                "5 <- 6.0",
                "6 <- 6.2",
                "7 <- 5.4",
                "8 <- 5.4",
                "9 <- 8.5"
            ]
        },
        "Step 9": {
            "steps": [
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "3 + 3 = 6 (left: 2 6 12) || 12 - 6 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "3 + 3 = 6 (left: 2 6 12) || 12 / 2 = 6 (left: 6 12) || 12 + 6 = 18 (left: 18) || There are no possible next steps with the input 18."
            ]
        },
        "Input": "2 3 3 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "64": {
        "puzzle": "3 4 4 8",
        "Step 0": {
            "steps": [
                "8 - 4 = 4 (left: 3 4 4)",
                "4 / 3 = 1.33 (left: 1.33 4 8)",
                "3 * 4 = 12 (left: 4 8 12)",
                "4 * 3 = 12 (left: 4 8 12)",
                "8 - 4 = 4 (left: 3 4 4)",
                "3 * 4 = 12 (left: 4 8 12)",
                "4 * 3 = 12 (left: 4 8 12)",
                "8 - 4 = 4 (left: 3 4 4)",
                "8 / 4 = 2 (left: ",
                "8 - 4 = 4 (left: 3 4 4)"
            ],
            "Evaluation": [
                1.002,
                3.0,
                2.001,
                1.002,
                1.002,
                0.003,
                21.001,
                0.003,
                0.0,
                20.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.9",
                "2 <- 0.9",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 0.9",
                "7 <- 0.9",
                "8 <- 0.9",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "4 / 3 = 1.33 (left: 1.33 4 8)",
                "8 - 4 = 4 (left: 3 4 4) || 3 * 4 = 12 (left: 4 12)",
                "8 - 4 = 4 (left: 3 4 4) || 3 * 4 = 12 (left: 4 12)",
                "8 - 4 = 4 (left: 3 4 4)",
                "4 * 3 = 12 (left: 4 8 12)",
                "4 * 3 = 12 (left: 4 8 12)",
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4)",
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4)",
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4)",
                "4 * 3 = 12 (left: 4 8 12)"
            ],
            "Evaluation": [
                3.0,
                0.003,
                0.003,
                20.001,
                21.001,
                21.001,
                60.0,
                60.0,
                60.0,
                21.001
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 1.8",
                "2 <- 1.7",
                "3 <- 1.6",
                "4 <- INIT",
                "5 <- 1.3",
                "6 <- 1.4",
                "7 <- 1.5",
                "8 <- 1.7",
                "9 <- 1.7"
            ]
        },
        "Step 2": {
            "steps": [
                "4 * 3 = 12 (left: 4 8 12) || 4 * 8 = 32 (left: 12 32)",
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "4 * 3 = 12 (left: 4 8 12)",
                "8 - 4 = 4 (left: 3 4 4) || 3 * 4 = 12 (left: 4 12)",
                "4 * 3 = 12 (left: 4 8 12) || 12 - 4 = 8 (left: 8 12)",
                "4 * 3 = 12 (left: 4 8 12) || 12 / 4 = 3 (left: 3 8)",
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.002,
                2.001,
                0.003,
                0.002,
                60.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 1.6",
                "2 <- 1.9",
                "3 <- 1.9",
                "4 <- 1.5",
                "5 <- 1.7",
                "6 <- 1.4",
                "7 <- 1.8",
                "8 <- 2.7",
                "9 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "4 * 3 = 12 (left: 4 8 12) || 4 * 8 = 32 (left: 32 12)",
                "4 * 3 = 12 (left: 4 8 12) || 12 - 4 = 8 (left: 8 12)",
                "4 * 3 = 12 (left: 4 8 12) || 4 * 8 = 32 (left: 32 12)",
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "4 * 3 = 12 (left: 4 8 12) || 12 - 4 = 8 (left: 8 12)",
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "4 * 3 = 12 (left: 4 8 12) || 12 / 4 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "4 * 3 = 12 (left: 4 8 12)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.002,
                0.002,
                0.002,
                0.002,
                0.002,
                0.002,
                0.002,
                2.001
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 1.8",
                "2 <- 2.7",
                "3 <- 1.3",
                "4 <- 2.7",
                "5 <- 1.6",
                "6 <- 1.8",
                "7 <- 1.3",
                "8 <- 1.9",
                "9 <- 0.9"
            ]
        },
        "Step 4": {
            "steps": [
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "4 * 3 = 12 (left: 4 8 12) || 12 / 4 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4)",
                "4 * 3 = 12 (left: 4 8 12) || 12 / 4 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4)",
                "4 * 3 = 12 (left: 4 8 12) || 12 - 4 = 8 (left: 8 12)",
                "8 - 4 = 4 (left: 3 4 4) || 3 * 4 = 12 (left: 4 12)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                60.0,
                60.0,
                60.0,
                0.002,
                0.002,
                60.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.7",
                "1 <- 2.7",
                "2 <- 1.6",
                "3 <- 1.7",
                "4 <- 4.3",
                "5 <- 4.3",
                "6 <- 4.7",
                "7 <- 1.6",
                "8 <- 1.7",
                "9 <- 4.3"
            ]
        },
        "Step 5": {
            "steps": [
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "4 * 3 = 12 (left: 4 8 12) || 12 / 4 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.0,
                60.0,
                0.002,
                0.002,
                0.002,
                0.002,
                0.002,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 2.7",
                "1 <- 4.4",
                "2 <- 1.6",
                "3 <- 5.1",
                "4 <- 4.4",
                "5 <- 5.1",
                "6 <- 5.1",
                "7 <- 4.4",
                "8 <- 5.1",
                "9 <- 1.4"
            ]
        },
        "Step 6": {
            "steps": [
                "4 * 3 = 12 (left: 4 8 12) || 12 / 4 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "4 * 3 = 12 (left: 4 8 12) || 12 / 4 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (4 * 3) * (4 / 8) = 24",
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "4 * 3 = 12 (left: 4 8 12) || 12 / 4 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (4 * 3) * (4 / 8) = 24",
                "4 * 3 = 12 (left: 4 8 12) || 12 / 4 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (4 * 3) * (4 / 8) = 24",
                "4 * 3 = 12 (left: 4 8 12) || 12 / 4 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (4 * 3) * (4 / 8) = 24",
                "4 * 3 = 12 (left: 4 8 12) || 12 / 4 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (4 * 3) * (4 / 8) = 24",
                "4 * 3 = 12 (left: 4 8 12) || 12 / 4 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (4 * 3) * (4 / 8) = 24",
                "4 * 3 = 12 (left: 4 8 12) || 12 / 4 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (4 * 3) * (8 / 4) = 24",
                "4 * 3 = 12 (left: 4 8 12) || 4 * 8 = 32 (left: 32 12)"
            ]
        },
        "Input": "3 4 4 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "65": {
        "puzzle": "3 8 10 10",
        "Step 0": {
            "steps": [
                "10 - 3 = 7 (left: 7 10 10)",
                "8 / 3 = 2.67 (left: 2.67 10 10)",
                "3 * 8 = 24 (left: 10 10 24)",
                "10 - 3 = 7 (left: 7 10 10)",
                "10 - 3 = 7 (left: 7 10 10)",
                "3 * 8 = 24 (left: 10 10 24)",
                "3 * 8 = 24 (left: 10 10 24)",
                "10 + 3 = 13 (left: 8 10 13)",
                "10 - 3 = 7 (left: ",
                "10 + 3 = 13 (left: 8 10 13)"
            ],
            "Evaluation": [
                1.002,
                3.0,
                20.002,
                3.0,
                1.001,
                20.002,
                20.002,
                1.002,
                0.0,
                1.002
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 0.6",
                "2 <- 0.1",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 0.6",
                "7 <- 0.6",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "3 * 8 = 24 (left: 10 10 24) || 10 * 10 = 100 (left: 24 100)",
                "3 * 8 = 24 (left: 10 10 24) || 24 - 10 = 14 (left: 10 14)",
                "8 / 3 = 2.67 (left: 2.67 10 10) || 10 - 2.67 = 7.33 (left: 7.33 10)",
                "10 + 3 = 13 (left: 8 10 13)",
                "3 * 8 = 24 (left: 10 10 24)",
                "3 * 8 = 24 (left: 10 10 24)",
                "3 * 8 = 24 (left: 10 10 24) || 10 / 10 = 1 (left: 1 10 24)",
                "3 * 8 = 24 (left: 10 10 24) || 24 / 10 = 2.4 (left: 2.4 10)",
                "10 + 3 = 13 (left: 8 10 13)",
                "3 * 8 = 24 (left: 10 10 24)"
            ],
            "Evaluation": [
                20.002,
                60.0,
                2.0,
                1.002,
                20.002,
                20.002,
                1.002,
                60.0,
                1.002,
                20.002
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.2",
                "2 <- 1.1",
                "3 <- 1.2",
                "4 <- 1.7",
                "5 <- 1.7",
                "6 <- 1.1",
                "7 <- 1.1",
                "8 <- 1.9",
                "9 <- 1.9"
            ]
        },
        "Step 2": {
            "steps": [
                "3 * 8 = 24 (left: 10 10 24) || 10 * 10 = 100 (left: 100 24)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24)",
                "3 * 8 = 24 (left: 10 10 24) || 24 - 10 = 14 (left: 10 14) || 10 - 14 = -4 (left: -4 14)",
                "8 / 3 = 2.67 (left: 2.67 10 10) || 10 - 2.67 = 7.33 (left: 7.33 10) || 7.33 * 10 = 73.3 (left: 73.3)",
                "3 * 8 = 24 (left: 10 10 24) || 24 / 10 = 2.4 (left: 2.4 10) || 10 - 2.4 = 7.6 (left: 7.6 10)",
                "3 * 8 = 24 (left: 10 10 24) || 24 / 10 = 2.4 (left: 2.4 10) || 10 - 2.4 = 7.6 (left: 7.6)",
                "3 * 8 = 24 (left: 10 10 24) || 24 - 10 = 14 (left: 10 14) || 10 * 14 = 140 (left: 14 140)",
                "3 * 8 = 24 (left: 10 10 24) || 24 - 10 = 14 (left: 10 14) || 10 * 14 = 140 (left: 14 140)",
                "3 * 8 = 24 (left: 10 10 24) || 10 / 10 = 1 (left: 1 10 24)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24)"
            ],
            "Evaluation": [
                0.001,
                20.002,
                0.0,
                0.003,
                2.001,
                0.0,
                0.002,
                0.002,
                1.002,
                21.001
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 0.5",
                "2 <- 2.1",
                "3 <- 2.9",
                "4 <- 1.9",
                "5 <- INIT",
                "6 <- 1.7",
                "7 <- 0.5",
                "8 <- 0.2",
                "9 <- 0.2"
            ]
        },
        "Step 3": {
            "steps": [
                "3 * 8 = 24 (left: 10 10 24) || 24 - 10 = 14 (left: 10 14) || 10 / 14 = 0.7142857142857143 (left: 0.7142857142857143 14)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 24 - 10 = 14 (left: 0 14)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 24 - 10 = 14 (left: 0 14)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24)",
                "3 * 8 = 24 (left: 10 10 24)",
                "3 * 8 = 24 (left: 10 10 24) || 24 / 10 = 2.4 (left: 2.4 10) || 2.4 * 10 = 24 (left: 10 24)",
                "3 * 8 = 24 (left: 10 10 24) || 24 / 10 = 2.4 (left: 2.4 10)",
                "3 * 8 = 24 (left: 10 10 24) || 10 / 10 = 1 (left: 1 10 24)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24)"
            ],
            "Evaluation": [
                2.0,
                21.001,
                0.0,
                0.0,
                21.001,
                20.002,
                0.003,
                60.0,
                1.002,
                21.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 3.9",
                "2 <- 3.5",
                "3 <- 3.7",
                "4 <- 3.7",
                "5 <- 1.0",
                "6 <- 3.1",
                "7 <- 3.7",
                "8 <- 0.2",
                "9 <- 3.9"
            ]
        },
        "Step 4": {
            "steps": [
                "8 / 3 = 2.67 (left: 2.67 10 10)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 24 / 10 = 2.4 (left: 0 2.4)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24)",
                "3 * 8 = 24 (left: 10 10 24) || 24 / 10 = 2.4 (left: 2.4 10) || 2.4 * 10 = 24 (left: 10 24)",
                "3 * 8 = 24 (left: 10 10 24) || 24 / 10 = 2.4 (left: 2.4 10) || 10 - 2.4 = 7.6 (left: 7.6 10)",
                "3 * 8 = 24 (left: 10 10 24) || 10 * 10 = 100 (left: 24 100) || 100 - 24 = 76 (left: 76)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 24 - 10 = 14 (left: 0 14)",
                "3 * 8 = 24 (left: 10 10 24) || 24 / 10 = 2.4 (left: 2.4 10) || 2.4 * 10 = 24 (left: 10 24)",
                "3 * 8 = 24 (left: 10 10 24) || 10 / 10 = 1 (left: 1 10 24)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 24 / 10 = 2.4 (left: 0 2.4)"
            ],
            "Evaluation": [
                3.0,
                1.001,
                21.001,
                0.003,
                2.001,
                0.002,
                0.0,
                0.003,
                1.002,
                20.001
            ],
            "Resampling": [
                "0 <- 3.9",
                "1 <- 1.0",
                "2 <- 1.1",
                "3 <- 0.5",
                "4 <- 0.5",
                "5 <- 1.1",
                "6 <- 4.9",
                "7 <- 0.3",
                "8 <- 3.1",
                "9 <- 3.1"
            ]
        },
        "Step 5": {
            "steps": [
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 10 * 0 = 0 (left: 0 24)",
                "3 * 8 = 24 (left: 10 10 24) || 10 * 10 = 100 (left: 24 100) || 100 - 24 = 76 (left: 76)",
                "3 * 8 = 24 (left: 10 10 24) || 24 - 10 = 14 (left: 10 14) || 10 - 14 = -4 (left: -4 14)",
                "3 * 8 = 24 (left: 10 10 24) || 10 / 10 = 1 (left: 1 10 24)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24)",
                "3 * 8 = 24 (left: 10 10 24) || 24 - 10 = 14 (left: 10 14) || 10 - 14 = -4 (left: -4 14)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 24 / 10 = 2.4 (left: 0 2.4) || Input: 5 10 15 20",
                "10 - 3 = 7 (left: 7 10 10) || 10 / 7 = 1.428",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 24 - 10 = 14 (left: 0 14)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 24 / 10 = 2.4 (left: 0 2.4)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.0,
                1.002,
                21.001,
                0.0,
                0.003,
                0.003,
                0.0,
                20.001
            ],
            "Resampling": [
                "0 <- 3.9",
                "1 <- 2.9",
                "2 <- 1.0",
                "3 <- 5.0",
                "4 <- 5.0",
                "5 <- 1.9",
                "6 <- 3.9",
                "7 <- 1.1",
                "8 <- 0.2",
                "9 <- 5.4"
            ]
        },
        "Step 6": {
            "steps": [
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 10 * 0 = 0 (left: 0 24)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 24 / 10 = 2.4 (left: 0 2.4)",
                "3 * 8 = 24 (left: 10 10 24) || 10 * 10 = 100 (left: 24 100) || 100 - 24 = 76 (left: 76)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 10 * 0 = 0 (left: 0 24) || Input: 5 3",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 10 * 0 = 0 (left: 0 24) || 5 + 3 = 8 (left: 8)",
                "3 * 8 = 24 (left: 10 10 24) || 24 -",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 24 - 10 = 14 (left: 0 14)",
                "3 * 8 = 24 (left: 10 10 24) || 24 - 10 = 14 (left: 10 14) || 10 * 14 = 140 (left: 14 140)",
                "3 * 8 = 24 (left: 10 10 24) || 10 / 10 = 1 (left: 1 10 24)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 24 / 10 = 2.4 (left: 0 2.4)"
            ],
            "Evaluation": [
                60.0,
                20.001,
                0.002,
                0.003,
                0.002,
                0.003,
                0.0,
                0.002,
                1.002,
                20.001
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 0.2",
                "2 <- 5.0",
                "3 <- 3.7",
                "4 <- 5.0",
                "5 <- 6.1",
                "6 <- 5.0",
                "7 <- 1.1",
                "8 <- 5.0",
                "9 <- 3.9"
            ]
        },
        "Step 7": {
            "steps": [
                "3 * 8 = 24 (left: 10 10 24) || 10 * 10 = 100 (left: 24 100) || 24 / 100 = 0.24 (left: 0.24)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 10 * 0 = 0 (left: 0 24) || 5 * 3 = 15 (left: 15)",
                "3 * 8 = 24 (left: 10 10 24) || 24 / 10 = 2.4 (left: 2.4 10) || 2.4 * 10 = 24 (left: 10 24)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 10 * 0 = 0 (left: 0 24) || 5 + 3 = 8 (left: 8)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 24 / 10 = 2.4 (left: 0 2.4) || 5 + 10 = 15 (left: 15 15 20)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 10 * 0 = 0 (left: 0 24) || Input: 5 3",
                "3 * 8 = 24 (left: 10 10 24) || 24 - 10 = 14 (left: 10 14) || 10 * 14 = 140 (left: 14 140)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 10 * 0 = 0 (left: 0 24) || Input: 5 3",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 24 / 10 = 2.4 (left: 0 2.4)"
            ],
            "Evaluation": [
                0.002,
                21.001,
                0.002,
                0.003,
                0.002,
                1.002,
                0.003,
                0.002,
                0.003,
                20.001
            ],
            "Resampling": [
                "0 <- 3.5",
                "1 <- 5.0",
                "2 <- 6.1",
                "3 <- 1.5",
                "4 <- 0.5",
                "5 <- 7.9",
                "6 <- 6.0",
                "7 <- 5.0",
                "8 <- 3.7",
                "9 <- 5.0"
            ]
        },
        "Step 8": {
            "steps": [
                "3 * 8 = 24 (left: 10 10 24) || 10 * 10 = 100 (left: 100 24)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 10 * 0 = 0 (left: 0 24) || 5 * 3 = 15 (left: 15)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 24 / 10 = 2.4 (left: 0 2.4) || ",
                "3 * 8 = 24 (left: 10 10 24) || 10 / 10 = 1 (left: 1 10 24)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 24 / 10 = 2.4 (left: 0 2.4) || 5 + 10 = 15 (left: 15 15 20)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 10 * 0 = 0 (left: 0 24) || Input: 5 3",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 10 * 0 = 0 (left: 0 24) || Input: 5 3",
                "3 * 8 = 24 (left: 10 10 24) || 24 / 10 = 2.4 (left: 2.4 10) || 2.4 * 10 = 24 (left: 10 24)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 10 * 0 = 0 (left: 0 24) || 5 + 3 = 8 (left: 8)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.003,
                1.002,
                21.001,
                1.002,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 4.9",
                "2 <- 6.1",
                "3 <- 5.0",
                "4 <- 8.4",
                "5 <- 5.0",
                "6 <- 5.0",
                "7 <- 8.5",
                "8 <- 5.4",
                "9 <- 1.1"
            ]
        },
        "Step 9": {
            "steps": [
                "3 * 8 = 24 (left: 10 10 24) || 24 / 10 = 2.4 (left: 2.4 10) || 10 / 2.4 = 4.16666666667 (left: 4.16666666667 10)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 24 / 10 = 2.4 (left: 0 2.4) || ",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 24 / 10 = 2.4 (left: 0 2.4) || ",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 10 * 0 = 0 (left: 0 24) || Input: 5 3",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 24 / 10 = 2.4 (left: 0 2.4)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 10 * 0 = 0 (left: 0 24) || 5 + 3 = 8 (left: 8)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 10 * 0 = 0 (left: 0 24) || Input: 5 3",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 24 / 10 = 2.4 (left: 0 2.4) || 5 + 10 = 15 (left: 15 15 20) || 20 / 15 = 1.33 (left: 1.33 15)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 24 - 10 = 14 (left: 0 14)",
                "3 * 8 = 24 (left: 10 10 24) || 24 - 10 = 14 (left: 10 14) || 10 - 14 = -4 (left: -4 14)"
            ]
        },
        "Input": "3 8 10 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "66": {
        "puzzle": "3 8 9 9",
        "Step 0": {
            "steps": [
                "9 - 3 = 6 (left: 6 9 9)",
                "8 / 3 = 2.67 (left: 2.67 9 9)",
                "3 * 8 = 24 (left: 9 9 24)",
                "3 * 8 = 24 (left: 9 9 24)",
                "9 / 3 = 3 (left: 8 9 9)",
                "3 * 8 = 24 (left: 9 9 24)",
                "3 * 8 = 24 (left: 9 9 24)",
                "9 + 3 = 12 (left: 8 9 12)",
                "9 - 8 = 1 (left: ",
                "9 + 3 = 12 (left: 8 9 12)"
            ],
            "Evaluation": [
                40.001,
                41.0,
                1.002,
                1.001,
                2.001,
                0.002,
                0.003,
                3.0,
                0.0,
                3.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- 0.0",
                "4 <- 0.1",
                "5 <- 0.0",
                "6 <- 0.1",
                "7 <- 0.0",
                "8 <- 0.0",
                "9 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 / 2.67 \u2248 3.36 (left: 3.36 9)",
                "3 * 8 = 24 (left: 9 9 24)",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 * 2.67 = 24.03 (left: 9 24.03)",
                "9 - 3 = 6 (left: 6 9 9) || 9 / 3 = 3 (left: 6 9 3)",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 2.67 * 9 = 24.03 (left: 9 24.03)",
                "9 - 3 = 6 (left: 6 9 9) || 6 * 9 = 54 (left: 9 54)",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 * 2.67 = 24.03 (left: 9 24.03)",
                "9 - 3 = 6 (left: 6 9 9) || 9 - 6 = 3 (left: 3 9 ",
                "9 - 3 = 6 (left: 6 9 9) || 9 / 3 = 3 (left: 6 3 9)",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 * 2.67 = 24.03 (left: 9 24.03)"
            ],
            "Evaluation": [
                21.0,
                0.003,
                0.002,
                3.0,
                0.003,
                0.0,
                1.001,
                0.003,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 0.1",
                "2 <- 1.0",
                "3 <- 0.0",
                "4 <- 1.0",
                "5 <- 1.0",
                "6 <- 0.1",
                "7 <- INIT",
                "8 <- 1.8",
                "9 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "9 + 3 = 12 (left: 8 9 12) || 8 * 9 = 72 (left: 72 12)",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 * 2.67 = 24.03 (left: 9 24.03)",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 / 2.67 \u2248 3.36 (left: 3.36 9) || 9 - 3.36 = 5.64 (left: 5.64)",
                "9 - 3 = 6 (left: 6 9 9) || 9 / 3 = 3 (left: 6 3 9)",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 / 2.67 \u2248 3.36 (left: 3.36 9) || 9 / 3.36 = 2.67857142857 (left: 2.67857142857)",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 / 2.67 \u2248 3.36 (left: 3.36 9) || 9 - 3.36 = 5.64 (left: 5.64)",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 - 2.67 = 6.33 (left: 6.33 9)",
                "9 - 3 = 6 (left: ",
                "9 - 3 = 6 (left: 6 9 9) || 9 / 3 = 3 (left: 6 3 9) || 3 * 3 = 9 (left: 6 9)",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 * 2.67 = 24.03 (left: 9 24.03)"
            ],
            "Evaluation": [
                1.001,
                0.003,
                0.001,
                20.002,
                0.002,
                0.003,
                2.001,
                0.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.8",
                "2 <- 1.8",
                "3 <- 1.8",
                "4 <- 2.3",
                "5 <- 0.1",
                "6 <- INIT",
                "7 <- 1.0",
                "8 <- 0.1",
                "9 <- 0.0"
            ]
        },
        "Step 3": {
            "steps": [
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 / 2.67 \u2248 3.36 (left: 3.36 9) || 3.36 * 9 = 30.24 (left: 30.24)",
                "9 - 3 = 6 (left: 6 9 9) || 9 / 3 = 3 (left: 6 3 9) || Possible",
                "9 - 3 = 6 (left: 6 9 9) || 9 / 3 = 3 (left: 6 3 9) || Possible",
                "9 - 3 = 6 (left: 6 9 9) || 9 / 3 = 3 (left: 6 3 9) || 3 * 3 = 9 (left: 6 9)",
                "9 - 3 = 6 (left: 6 9 9) || 9 / 3 = 3 (left: 6 3 9) || Input: 5 7 12",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 * 2.67 = 24.03 (left: 9 24.03)",
                "9 + 3 = 12 (left: 8 9 12)",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 / 2.67 \u2248 3.36 (left: 3.36 9) || 3.36 / 9 = 0.37333333333333336 (left: 0.37333333333333336)",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 - 2.67 = 6.33 (left: 6.33 9)",
                "9 - 3 = 6 (left: 6 9 9) || 9 - 6 = 3 (left: 3 9 9)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                3.0,
                0.003,
                2.001,
                20.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- 2.3",
                "4 <- 2.3",
                "5 <- 0.1",
                "6 <- 0.0",
                "7 <- 0.1",
                "8 <- 2.3",
                "9 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 / 2.67 \u2248 3.36 (left: 3.36 9) || 3.36 * 9 = 30.24 (left: 30.24)",
                "3 * 8 = 24 (left: 9 9 24)",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 * 2.67 = 24.03 (left: 9 24.03)",
                "9 - 3 = 6 (left: 6 9 9) || 9 / 3 = 3 (left: 6 3 9) || 3 * 3 = 9 (left: 6 9)",
                "9 - 3 = 6 (left: 6 9 9) || 9 / 3 = 3 (left: 6 3 9) || Input: 5 7 12",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 * 2.67 = 24.03 (left: 9 24.03)",
                "9 - 3 = 6 (left: 6 9 9) || 9 / 3 = 3 (left: 6 3 9)",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 - 2.67 = 6.33 (left: 6.33 9)",
                "9 - 3 = 6 (left: 6 9 9) || 9 / 3 = 3 (left: 6 3 9) || 3 * 3 = 9 (left: 6 9)",
                "3 * 8 = 24 (left: 9 9 24)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                20.002,
                2.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 1.0",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- 4.6",
                "5 <- 0.1",
                "6 <- 2.3",
                "7 <- 2.6",
                "8 <- INIT",
                "9 <- 3.9"
            ]
        },
        "Step 5": {
            "steps": [
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 / 2.67 = 3.36 (left: 3.36 9)",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 / 2.67 \u2248 3.36 (left: 3.36 9) || 9 - 3.36 = 5.64 (left: 5.64)",
                "3 * 8 = 24 (left: 9 9 24)",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 - 2.67 = 6.33 (left: 6.33 9)",
                "9 - 3 = 6 (left: 6 9 9) || 9 / 3 = 3 (left: 6 3 9) || Input: 5 7 12",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 * 2.67 = 24.03 (left: 9 24.03)",
                "9 - 3 = 6 (left: 6 9 9) || 9 / 3 = 3 (left: 6 3 9) || 3 * 3 = 9 (left: 6 9)",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 - 2.67 = 6.33 (left: 6.33 9) || 6.33 * 9 = 56.97 (left: 9 56.97)",
                "9 + 3 = 12 (left: 8 9 12)",
                "9 - 3 = 6 (left: 6 9 9) || 9 - 6 = 3 (left: 3 9 9) || 9 - 3 = 6 (left: 6 9)"
            ],
            "Evaluation": [
                21.0,
                0.001,
                0.003,
                2.001,
                0.003,
                0.003,
                0.003,
                0.0,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 5.0",
                "2 <- 4.6",
                "3 <- 2.3",
                "4 <- 2.3",
                "5 <- 5.3",
                "6 <- 4.6",
                "7 <- 0.4",
                "8 <- 1.8",
                "9 <- 5.0"
            ]
        },
        "Step 6": {
            "steps": [
                "3 * 8 = 24 (left: 9 9 24) || 9 * 9 = 81 (left: 81 24)",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 / 2.67 = 3.36 (left: 3.36 9) || 9 - 3.36 = 5.64 (left: 5.64)",
                "9 - 3 = 6 (left: 6 9 9) || 9 / 3 = 3 (left: 6 3 9) || Possible",
                "9 - 3 = 6 (left: 6 9 9) || 9 / 3 = 3 (left: 6 3 9) || 3 * 3 = 9 (left: 6 9)",
                "9 - 3 = 6 (left: 6 9 9) || 9 / 3 = 3 (left: 6 3 9) || Input: 5 7 12",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 - 2.67 = 6.33 (left: 6.33 9) || 9 / 6.33 = 1.42 (left: 1.42 9)",
                "9 - 3 = 6 (left: 6 9 9) || 9 / 3 = 3 (left: 6 3 9) || 3 * 3 = 9 (left: 6 9)",
                "9 / 3 = 3 (left: 8 9 9) || 9 / 8 = 1.125 (left: 1.125 9)",
                "9 - 3 = 6 (left: 6 9 9) || 9 / 3 = 3 (left: 6 3 9) || 3 * 3 = 9 (left: 6 9)",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 / 2.67 = 3.36 (left: 3.36 9) || 9 - 3.36 = 5.64 (left: 5.64)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                0.003,
                0.003,
                1.002,
                0.003,
                0.001,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 4.7",
                "2 <- 5.0",
                "3 <- 4.6",
                "4 <- 4.6",
                "5 <- 5.3",
                "6 <- INIT",
                "7 <- 4.6",
                "8 <- 4.6",
                "9 <- 5.0"
            ]
        },
        "Step 7": {
            "steps": [
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 / 2.67 \u2248 3.36 (left: 3.36 9) || 3.36 * 9 = 30.24 (left: 30.24)",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 - 2.67 = 6.33 (left: 6.33 9) || 9 / 6.33 = 1.42 (left: 1.42 9)",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 / 2.67 = 3.36 (left: 3.36 9) || 9 - 3.36 = 5.64 (left: 5.64)",
                "9 - 3 = 6 (left: 6 9 9) || 9 / 3 = 3 (left: 6 3 9) || 3 * 3 = 9 (left: 6 9)",
                "9 - 3 = 6 (left: 6 9 9) || 9 / 3 = 3 (left: 6 3 9) || Input: 5 7 12",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 - 2.67 = 6.33 (left: 6.33 9) || 9 / 6.33 = 1.42 (left: 1.42 9)",
                "9 + 3 = 12 (left: 8 9 12)",
                "9 - 3 = 6 (left: 6 9 9) || 9 / 3 = 3 (left: 6 3 9) || 3 * 3 = 9 (left: 6 9)",
                "9 - 3 = 6 (left: 6 9 9) || 9 / 3 = 3 (left: 6 3 9) || 3 * 3 = 9 (left: 6 9)",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 / 2.67 = 3.36 (left: 3.36 9) || 9 - 3.36 = 5.64 (left: 5.64)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                0.001,
                0.003,
                0.003,
                1.002,
                3.0,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 5.0",
                "2 <- 0.9",
                "3 <- 4.7",
                "4 <- 0.0",
                "5 <- 0.1",
                "6 <- 0.9",
                "7 <- 0.0",
                "8 <- 3.9",
                "9 <- 5.0"
            ]
        },
        "Step 8": {
            "steps": [
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 / 2.67 = 3.36 (left: 3.36 9)",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 / 2.67 = 3.36 (left: 3.36 9) || 9 - 3.36 = 5.64 (left: 5.64)",
                "9 + 3 = 12 (left: 8 9 12) || 12 - 8 = 4 (left: 4 9)",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 - 2.67 = 6.33 (left: 6.33 9) || 6.33 * 9 = 56.97 (left: 9 56.97)",
                "9 - 3 = 6 (left: 6 9 9) || 9 - 6 = 3 (left: 3 9 9)",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 * 2.67 = 24.03 (left: 9 24.03)",
                "9 + 3 = 12 (left: 8 9 12) || 9 - 8 = 1 (left: 1 12)",
                "9 - 3 = 6 (left: 6 9 9) || 9 - 6 = 3 (left: 3 9 ",
                "9 - 3 = 6 (left: 6 9 9) || 9 - 6 = 3 (left: 3 9 9) || 9 / 3 = 3 (left: 3 9)",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 / 2.67 = 3.36 (left: 3.36 9) || 9 - 3.36 = 5.64 (left: 5.64)"
            ],
            "Evaluation": [
                21.0,
                0.001,
                40.0,
                0.0,
                20.002,
                0.003,
                0.002,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 2.3",
                "2 <- 4.6",
                "3 <- 2.3",
                "4 <- 2.3",
                "5 <- 8.2",
                "6 <- 8.0",
                "7 <- 4.7",
                "8 <- 7.5",
                "9 <- 2.3"
            ]
        },
        "Step 9": {
            "steps": [
                "9 - 3 = 6 (left: 6 9 9) || 9 - 6 = 3 (left: 3 9 9)",
                "9 - 3 = 6 (left: 6 9 9) || 9 / 3 = 3 (left: 6 3 9) || Possible",
                "9 - 3 = 6 (left: 6 9 9) || 9 / 3 = 3 (left: 6 3 9) || Possible",
                "9 - 3 = 6 (left: 6 9 9) || 9 / 3 = 3 (left: 6 3 9) || 3 * 3 = 9 (left: 6 9)",
                "9 - 3 = 6 (left: 6 9 9) || 9 / 3 = 3 (left: 6 3 9) || Input: 5 7 12",
                "9 + 3 = 12 (left: 8 9 12) || 12 - 8 = 4 (left: 4 9) || 5 + 7 = 12 (left: 12)",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 / 2.67 = 3.36 (left: 3.36 9) || 3.36 / 9 = 0.37333333333333336 (left: 0.37333333333333336)",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 - 2.67 = 6.33 (left: 6.33 9) || 6.33 * 9 = 56.97 (left: 9 56.97)",
                "8 / 3 = 2.67 (left: 2.67 9 9) || 9 - 2.67 = 6.33 (left: 6.33 9) || 9 / 6.33 = 1.42 (left: 1.42 9) || 9 / 1.42 = 6.338 (left: 6.338)",
                "9 - 3 = 6 (left: 6 9 9) || 9 / 3 = 3 (left: 6 3 9) || Input: 5 7 12"
            ]
        },
        "Input": "3 8 9 9",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "67": {
        "puzzle": "2 5 5 12",
        "Step 0": {
            "steps": [
                "12 - 2 = 10 (left: 5 10 10)",
                "5 / 2 = 2.5 (left: 2.5 5 12)",
                "12 - 2 = 10 (left: 5 10 12)",
                "2 * 5 = 10 (left: 5 10 12)",
                "12 - 5 = 7 (left: 2 5 7)",
                "2 * 5 = 10 (left: 5 10 12)",
                "5 * 2 = 10 (left: 5 10 12)",
                "12 - 2 = 10 (left: 5 10 12)",
                "12 - 5 = 7 (left: ",
                "12 + 2 = 14 (left: 5 5 14)"
            ],
            "Evaluation": [
                1.002,
                21.001,
                1.002,
                1.002,
                3.0,
                1.002,
                0.003,
                1.002,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- 0.1",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 0.1",
                "8 <- 0.7",
                "9 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "5 / 2 = 2.5 (left: 2.5 5 12) || 5 * 2.5 = 12.5 (left: 12.5 12)",
                "2 * 5 = 10 (left: 5 10 12)",
                "2 * 5 = 10 (left: 5 10 12)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 + 2.5 = 14.5 (left: 5 14.5)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12)",
                "2 * 5 = 10 (left: 5 10 12)",
                "12 + 2 = 14 (left: 5 5 14)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 - 2.5 = 9.5 (left: 9.5 12)",
                "12 - 2 = 10 (left: 5 10 12) || 12 - 5 = 7 (left: 5 7)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 4.8 12)"
            ],
            "Evaluation": [
                1.0,
                1.002,
                1.002,
                3.0,
                60.0,
                1.002,
                0.003,
                0.002,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- INIT",
                "2 <- 1.4",
                "3 <- 0.1",
                "4 <- 0.1",
                "5 <- INIT",
                "6 <- 0.5",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 5 * 4.8 = 24 (left: 24 12)",
                "2 * 5 = 10 (left: 5 10 12)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 5 - 4.8 = 0.2 (left: 0.2 12)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 - 2.5 = 9.5 (left: 2.5 9.5 12)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 4.8 12)",
                "2 * 5 = 10 (left: 5 10 12)",
                "2 * 5 = 10 (left: 5 10 12) || 12 - 5 = 7 (left: 5 7)",
                "12 - 5 = 7 (left: ",
                "12 + 2 = 14 (left: 5 5 14)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                1.001,
                3.0,
                1.002,
                1.002,
                0.003,
                0.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.4",
                "2 <- 2.9",
                "3 <- 2.3",
                "4 <- 2.3",
                "5 <- INIT",
                "6 <- 2.9",
                "7 <- 2.9",
                "8 <- 0.2",
                "9 <- 0.5"
            ]
        },
        "Step 3": {
            "steps": [
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 5 * 4.8 = 24 (left: 24 12)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 57.6 / 5 = 11.52 (left: 11.52)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 - 2.5 = 9.5 (left: 2.5 9.5 12) || 2.5 * 9.5 = 23.75 (left: 12 23.75)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 - 2.5 = 9.5 (left: 2.5 9.5 12) || 2.5 * 9.5 = 23.75 (left: 12 23.75)",
                "2 * 5 = 10 (left: 5 10 12)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 57.6 / 5 = 11.52 (left: 11.52)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 - 57.6 = -52.6 (left: -52.6)",
                "12 - 2 = 10 (left: 5 10 12) || 12 - 5 = 7 (left: 5 7)",
                "2 * 5 = 10 (left: 5 10 12) || 5 * 10 = 50 (left: 50 12)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.002,
                0.003,
                20.002,
                1.002,
                0.003,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 1.4",
                "2 <- 3.1",
                "3 <- 3.1",
                "4 <- INIT",
                "5 <- 1.4",
                "6 <- 3.5",
                "7 <- 3.1",
                "8 <- 3.4",
                "9 <- 3.1"
            ]
        },
        "Step 4": {
            "steps": [
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 + 57.6 = 62.6 (left: 62.6)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 / 57.6 = 0.0868 (left: 0.0868)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 - 57.6 = -52.6 (left: -52.6)",
                "2 * 5 = 10 (left: 5 10 12)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6)",
                "2 * 5 = 10 (left: 5 10 12) || 12 - 5 = 7 (left: 5 7)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 - 57.6 = -52.6 (left: -52.6)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 - 2.5 = 9.5 (left: 2.5 9.5 12) || 2.5 * 9.5 = 23.75 (left: 12 23.75) || 23.75 - 12 = 11.75 (left: 11.75)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 / 57.6 = 0.0868 (left: 0.0868)"
            ],
            "Evaluation": [
                0.0,
                60.0,
                0.002,
                0.003,
                1.002,
                60.0,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 4.5",
                "2 <- 2.9",
                "3 <- 3.4",
                "4 <- 3.4",
                "5 <- 4.1",
                "6 <- 3.4",
                "7 <- 2.3",
                "8 <- 3.1",
                "9 <- 4.1"
            ]
        },
        "Step 5": {
            "steps": [
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 5 * 4.8 = 24 (left: 24 12)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 / 57.6 = 0.0868 (left: 0.0868)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 / 57.6 = 0.0868 (left: 0.0868)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 - 2.5 = 9.5 (left: 2.5 9.5 12) || 2.5 * 9.5 = 23.75 (left: 12 23.75) || 23.75 - 12 = 11.75 (left: 11.75)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 - 2.5 = 9.5 (left: 2.5 9.5 12) || 2.5 * 9.5 = 23.75 (left: 12 23.75) || 23.75 / 12 = 1.97916666667 (left: 1.97916666667)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 / 57.6 = 0.0868 (left: 0.0868)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 - 2.5 = 9.5 (left: 2.5 9.5 12) || 2.5 * 9.5 = 23.75 (left: 12 23.75) || 23.75 - 12 = 11.75 (left: 11.75)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 - 2.5 = 9.5 (left: 2.5 9.5 12) || 12 - 2.5 = 9.5 (left: 9.5 12)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 - 57.6 = -52.6 (left: -52.6)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 / 57.6 = 0.0868 (left: 0.0868)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 4.1",
                "2 <- 4.5",
                "3 <- 4.1",
                "4 <- 2.9",
                "5 <- 4.1",
                "6 <- 2.9",
                "7 <- 4.5",
                "8 <- 3.4",
                "9 <- 3.4"
            ]
        },
        "Step 6": {
            "steps": [
                "5 / 2 = 2.5 (left: 2.5 5 12)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 / 57.6 = 0.0868 (left: 0.0868)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 / 57.6 = 0.0868 (left: 0.0868)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 - 57.6 = -52.6 (left: -52.6)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 / 57.6 = 0.0868 (left: 0.0868)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 / 57.6 = 0.0868 (left: 0.0868)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 - 57.6 = -52.6 (left: -52.6)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 - 57.6 = -52.6 (left: -52.6)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 - 2.5 = 9.5 (left: 2.5 9.5 12) || 2.5 * 9.5 = 23.75 (left: 12 23.75) || 23.75 - 12 = 11.75 (left: 11.75)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 - 2.5 = 9.5 (left: 2.5 9.5 12) || 2.5 * 9.5 = 23.75 (left: 12 23.75) || 23.75 / 12 = 1.97916666667 (left: 1.97916666667)"
            ],
            "Evaluation": [
                21.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 4.1",
                "2 <- 2.9",
                "3 <- 4.1",
                "4 <- 4.5",
                "5 <- 3.1",
                "6 <- 3.4",
                "7 <- 3.1",
                "8 <- 3.1",
                "9 <- 3.1"
            ]
        },
        "Step 7": {
            "steps": [
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 + 57.6 = 62.6 (left: 62.6)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 / 57.6 = 0.0868 (left: 0.0868)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 / 57.6 = 0.0868 (left: 0.0868)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 - 57.6 = -52.6 (left: -52.6)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 / 57.6 = 0.0868 (left: 0.0868)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 / 57.6 = 0.0868 (left: 0.0868)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 - 2.5 = 9.5 (left: 2.5 9.5 12) || 2.5 * 9.5 = 23.75 (left: 12 23.75) || 23.75 - 12 = 11.75 (left: 11.75)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 - 57.6 = -52.6 (left: -52.6)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 - 57.6 = -52.6 (left: -52.6)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 / 57.6 = 0.0868 (left: 0.0868)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.5",
                "1 <- 4.1",
                "2 <- 2.9",
                "3 <- 2.9",
                "4 <- 4.5",
                "5 <- 3.1",
                "6 <- 0.1",
                "7 <- 3.1",
                "8 <- 4.1",
                "9 <- 3.1"
            ]
        },
        "Step 8": {
            "steps": [
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 + 57.6 = 62.6 (left: 62.6)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 / 57.6 = 0.0868 (left: 0.0868)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 / 57.6 = 0.0868 (left: 0.0868)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 - 57.6 = -52.6 (left: -52.6)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 / 57.6 = 0.0868 (left: 0.0868)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 / 57.6 = 0.0868 (left: 0.0868)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 - 2.5 = 9.5 (left: 2.5 9.5 12)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 - 57.6 = -52.6 (left: -52.6)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 - 57.6 = -52.6 (left: -52.6)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 / 57.6 = 0.0868 (left: 0.0868)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                3.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 4.5",
                "2 <- 3.1",
                "3 <- 2.9",
                "4 <- 6.0",
                "5 <- 1.4",
                "6 <- 4.5",
                "7 <- 8.6",
                "8 <- 4.1",
                "9 <- 2.9"
            ]
        },
        "Step 9": {
            "steps": [
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 + 57.6 = 62.6 (left: 62.6)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 / 57.6 = 0.0868 (left: 0.0868)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 / 57.6 = 0.0868 (left: 0.0868)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 - 57.6 = -52.6 (left: -52.6)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 4.8 12)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 - 57.6 = -52.6 (left: -52.6)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 - 2.5 = 9.5 (left: 2.5 9.5 12) || 12 - 2.5 = 9.5 (left: 9.5 12)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 - 57.6 = -52.6 (left: -52.6)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 5 4.8 12) || 4.8 * 12 = 57.6 (left: 5 57.6) || 5 / 57.6 = 0.0868 (left: 0.0868)"
            ]
        },
        "Input": "2 5 5 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "68": {
        "puzzle": "11 11 11 13",
        "Step 0": {
            "steps": [
                "13 - 11 = 2 (left: 11 11 2)",
                "11 / 11 = 1 (left: 1 11 13)",
                "11 * 11 = 121 (left: 11 13 121)",
                "11 + 13 = 24 (left: 11 11 24)",
                "13 + 11 = 24 (left: 11 11 24)",
                "11 / 11 = 1 (left: 1 11 13)",
                "11 * 11 = 121 (left: 11 13 121)",
                "13 - 11 = 2 (left: 11 11 2)",
                "13 - 11 = 2 (left: 11 11 ",
                "13 - 11 = 2 (left: 11 11 2)"
            ],
            "Evaluation": [
                60.0,
                1.002,
                21.001,
                1.002,
                1.002,
                1.002,
                3.0,
                40.001,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.9",
                "2 <- 0.9",
                "3 <- 0.7",
                "4 <- 0.9",
                "5 <- 0.9",
                "6 <- 0.0",
                "7 <- 0.2",
                "8 <- 0.0",
                "9 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "13 - 11 = 2 (left: 11 11 2) || 11 / 11 = 1 (left: 1 2)",
                "13 - 11 = 2 (left: 11 11 2) || 11 - 11 = 0 (left: 0 2)",
                "13 - 11 = 2 (left: 11 11 2) || 11 - 2 = 9 (left: 9 11)",
                "13 - 11 = 2 (left: 11 11 2) || Input: 4 6 3 3",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121)",
                "13 - 11 = 2 (left: 11 11 2) || 3 + 6 = 9 (left: 9 9)",
                "13 - 11 = 2 (left: 11 11 2) || 11 - 11 = 0 (left: 0 2)",
                "11 * 11 = 121 (left: 11 13 121) || 11 - 13 = -2 (left: -",
                "13 - 11 = 2 (left: 11 11 2) || 11 - 2 = 9 (left: 9 11)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121)"
            ],
            "Evaluation": [
                0.002,
                20.002,
                2.0,
                0.003,
                60.0,
                0.002,
                20.002,
                0.0,
                2.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 0.2",
                "2 <- 1.9",
                "3 <- 0.7",
                "4 <- 1.4",
                "5 <- 1.9",
                "6 <- 1.6",
                "7 <- 0.0",
                "8 <- 1.6",
                "9 <- 0.7"
            ]
        },
        "Step 2": {
            "steps": [
                "13 - 11 = 2 (left: 11 11 2) || 11 / 2 = 5.5 (left: 5.5 11)",
                "11 * 11 = 121 (left: 11 13 121) || 13 / 11 = 1.1818181818181819 (left: 1.1818181818181819 121)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 2 * 121 = 242 (left: 121 242)",
                "13 - 11 = 2 (left: 11 11 2) || 11 - 2 = 9 (left: 9 11)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 / 2 = 60.5 (left: 60.5)",
                "13 - 11 = 2 (left: 11 11 2) || 11 - 11 = 0 (left: 0 2) || 2 / 0 is undefined",
                "13 - 11 = 2 (left: 11 11 2) || 2 / 11 = 0.18181818181818182 (left: 0.181",
                "13 - 11 = 2 (left: 11 11 2) || 11 - 11 = 0 (left: 0 2) || 2 / 0 is undefined",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 2 = 22 (left: 11 22)"
            ],
            "Evaluation": [
                1.002,
                41.0,
                0.002,
                2.0,
                60.0,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 0.7",
                "2 <- 1.1",
                "3 <- 0.7",
                "4 <- INIT",
                "5 <- 1.4",
                "6 <- 1.6",
                "7 <- 2.4",
                "8 <- 1.9",
                "9 <- 1.4"
            ]
        },
        "Step 3": {
            "steps": [
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 242 / 2 = 121 (left: 121)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 2 = 22 (left: 11 22)",
                "13 - 11 = 2 (left: 11 11 2) || 11 - 11 = 0 (left: 0 2) || 2 - 0 = 2 (left: 2)",
                "13 - 11 = 2 (left: 11 11 2) || 11 - 2 = 9 (left: 9 11)",
                "11 + 11 = 22 (left: 11 22 13)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242)",
                "13 - 11 = 2 (left: 11 11 2) || 11 - 11 = 0 (left: 0 2) || 2 / 0 is undefined",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 242 - 242 = 0 (left: 0)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 - 2 = 119 (left: 2 119)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.001,
                2.0,
                1.002,
                60.0,
                0.003,
                20.002,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 2.1",
                "2 <- 1.1",
                "3 <- 3.5",
                "4 <- 1.9",
                "5 <- 1.4",
                "6 <- 0.1",
                "7 <- 3.5",
                "8 <- 2.4",
                "9 <- 2.4"
            ]
        },
        "Step 4": {
            "steps": [
                "13 - 11 = 2 (left: 11 11 2) || 11 / 2 = 5.5 (left: 5.5 11)",
                "11 * 11 = 121 (left: 11 13 121) || 13 / 11 = 1.1818181818181819 (left: 1.1818181818181819 121) || 121 + 1.1818181818181819 =",
                "13 - 11 = 2 (left: 11 11 2) || 11 - 11 = 0 (left: 0 2) || 2 - 0 = 2 (left: 2)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 242 - 242 = 0 (left: 0)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242)",
                "11 / 11 = 1 (left: 1 11 13) || 11 - 1 = 10 (left: 10 13)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 242 - 242 = 0 (left: 0)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 242 - 242 = 0 (left: 0)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || Input: 3 9 27"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.001,
                20.002,
                60.0,
                60.0,
                0.001,
                20.002,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 1.4",
                "2 <- INIT",
                "3 <- 4.5",
                "4 <- 4.4",
                "5 <- 4.8",
                "6 <- 1.4",
                "7 <- 4.5",
                "8 <- 3.9",
                "9 <- 4.8"
            ]
        },
        "Step 5": {
            "steps": [
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 / 2 = 60.5 (left: 2 60.5)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242)",
                "11 + 11 = 22 (left: 11 22 13)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 242 - 242 = 0 (left: 0)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || Input: 3 9 27",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 242 - 242 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 - 2 = 119 (left: 2 119)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 242 - 242 = 0 (left: 0)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 242 - 242 = 0 (left: 0)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 242 - 242 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                2.0,
                60.0,
                1.002,
                20.002,
                0.003,
                0.003,
                0.002,
                20.002,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.5",
                "1 <- 5.1",
                "2 <- 0.0",
                "3 <- 5.7",
                "4 <- 4.5",
                "5 <- 2.4",
                "6 <- 0.9",
                "7 <- 2.4",
                "8 <- 4.4",
                "9 <- 4.8"
            ]
        },
        "Step 6": {
            "steps": [
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 2 * 242 = 484 (left: 484)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || Possible next steps:",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 2 = 22 (left: 11 22)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 242 - 242 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || Input: 3 9 27",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || Input: 3 9 27",
                "13 - 11 = 2 (left: 11 11 2) || 11 - 2 = 9 (left: 9 11)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 242 - 242 = 0 (left: 0)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 242 - 242 = 0 (left: 0)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 242 - 242 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                2.0,
                20.002,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 6.8",
                "2 <- 4.4",
                "3 <- 3.9",
                "4 <- 0.0",
                "5 <- 3.7",
                "6 <- 1.1",
                "7 <- 4.3",
                "8 <- 2.4",
                "9 <- 6.8"
            ]
        },
        "Step 7": {
            "steps": [
                "13 - 11 = 2 (left: 11 11 2) || 11 / 2 = 5.5 (left: 5.5 11)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 242 - 242 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || Possible next steps:",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 242 - 242 = 0 (left: 0)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 2 = 22 (left: 11 22)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 242 - 242 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "13 - 11 = 2 (left: 11 11 2) || 11 - 11 = 0 (left: 0 2) || 2 / 0 is undefined",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 242 - 242 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 242 - 242 = 0 (left: 0)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 242 - 242 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                0.003,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.7",
                "1 <- 7.0",
                "2 <- 4.4",
                "3 <- 4.7",
                "4 <- 4.4",
                "5 <- 1.4",
                "6 <- 2.4",
                "7 <- 2.1",
                "8 <- 3.9",
                "9 <- 6.8"
            ]
        },
        "Step 8": {
            "steps": [
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 242 - 242 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "13 - 11 = 2 (left: 11 11 2) || 11 / 2 = 5.5 (left: 5.5 11) || ",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || Possible next steps:",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 242 - 242 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || Input: 3 9 27",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 242 - 242 = 0 (left: 0)",
                "11 * 11 = 121 (left: 11 13 121) || 13 / 11 = 1.1818181818181819 (left: 1.1818181818181819 121) || 121 / 1.1818181818181819 = 102.0 (left: 102.0)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 242 - 242 = 0 (left: 0)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 242 - 242 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                60.0,
                20.002,
                0.003,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 4.5",
                "2 <- 3.9",
                "3 <- 8.5",
                "4 <- 5.7",
                "5 <- 3.5",
                "6 <- 5.1",
                "7 <- 0.7",
                "8 <- 4.4",
                "9 <- 3.5"
            ]
        },
        "Step 9": {
            "steps": [
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 2 * 242 = 484 (left: 484)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || Possible next steps:",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || Possible next steps:",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 242 - 242 = 0 (left: 0)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 242 - 242 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || Input: 3 9 27",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 242 - 242 = 0 (left: 0)",
                "13 - 11 = 2 (left: 11 11 2) || 2 / 11 = 0.18181818181818182 (left: 0.181",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 242 - 242 = 0 (left: 0)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || Input: 3 9 27"
            ]
        },
        "Input": "11 11 11 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "69": {
        "puzzle": "2 12 13 13",
        "Step 0": {
            "steps": [
                "13 + 13 = 26 (left: 2 12 26)",
                "12 + 2 = 14 (left: 13 13 14)",
                "2 * 12 = 24 (left: 13 13 24)",
                "13 - 12 = 1 (left: 1 13 13)",
                "13 + 2 = 15 (left: 12 13 15)",
                "2 * 12 = 24 (left: 13 13 24)",
                "2 * 12 = 24 (left: 13 13 24)",
                "13 - 12 = 1 (left: 2 13 13)",
                "13 - 2 = 11 (left: 12 11 ",
                "13 + 2 = 15 (left: 12 13 15)"
            ],
            "Evaluation": [
                21.001,
                1.002,
                3.0,
                0.003,
                1.002,
                20.002,
                2.001,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- INIT",
                "2 <- 0.5",
                "3 <- INIT",
                "4 <- 0.0",
                "5 <- INIT",
                "6 <- 0.5",
                "7 <- 0.0",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 12 = 24 (left: 13 13 24) || 13 * 13 = 169 (left: 24 169)",
                "2 * 12 = 24 (left: 13 13 24)",
                "2 * 12 = 24 (left: 13 13 24) || 24 - 13 = 11 (left: 11 13)",
                "13 + 2 = 15 (left: 12 13 15)",
                "13 + 13 = 26 (left: 2 12 26) || 26 - 2 = 24 (left: 12 24)",
                "2 * 12 = 24 (left: 13 13 24)",
                "2 * 12 = 24 (left: 13 13 24) || 13 / 13 = 1 (left: 1 24)",
                "13 + 13 = 26 (left: 2 12 26) || 26 - 2 = 24 (left: 12 24)",
                "13 + 2 = 15 (left: 12 13 15)",
                "2 * 12 = 24 (left: 13 13 24)"
            ],
            "Evaluation": [
                0.003,
                2.001,
                60.0,
                0.002,
                0.003,
                2.001,
                60.0,
                0.003,
                0.002,
                2.001
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- 1.6",
                "3 <- 0.5",
                "4 <- 1.2",
                "5 <- 0.0",
                "6 <- 0.0",
                "7 <- 1.2",
                "8 <- 1.5",
                "9 <- 0.0"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 12 = 24 (left: 13 13 24) || 24 - 13 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "2 * 12 = 24 (left: 13 13 24) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "2 * 12 = 24 (left: 13 13 24) || 13 / 13 = 1 (left: 1 24) || 10 / 5 = 2 (left: 2)",
                "2 * 12 = 24 (left: 13 13 24) || 13 / 13 = 1 (left: 1 24)",
                "2 * 12 = 24 (left: 13 13 24) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "13 + 13 = 26 (left: 2 12 26) || 12 - 2 = 10 (left:",
                "13 + 13 = 26 (left: 2 12 26) || 26 - 12 = 14 (left: 2 14)",
                "2 * 12 = 24 (left: 13 13 24) || 24 - 13 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "2 * 12 = 24 (left: 13 13 24) || 13 / 13 = 1 (left: 1 24)",
                "13 + 13 = 26 (left: 2 12 26) || 26 - 2 = 24 (left: 12 24)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.001,
                60.0,
                0.002,
                0.001,
                0.003,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 0.5",
                "2 <- 1.6",
                "3 <- 1.6",
                "4 <- 1.6",
                "5 <- INIT",
                "6 <- 2.3",
                "7 <- 1.2",
                "8 <- 2.3",
                "9 <- 2.8"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 12 = 24 (left: 13 13 24) || 13 / 13 = 1 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "2 * 12 = 24 (left: 13 13 24) || 24 - 13 = 11 (left: 11 13)",
                "2 * 12 = 24 (left: 13 13 24) || 13 / 13 = 1 (left: 1 24) || 10 / 5 = 2 (left: 2)",
                "2 * 12 = 24 (left: 13 13 24) || 13 / 13 = 1 (left: 1 24) || Input: 5 10",
                "2 * 12 = 24 (left: 13 13 24) || 13 / 13 = 1 (left: 1 24) || 5 + 10 = 15 (left: 15)",
                "2 * 12 = 24 (left: 13 13 24)",
                "2 * 12 = 24 (left: 13 13 24) || 13 / 13 = 1 (left: 1 24) || Input: 5 10",
                "2 * 12 = 24 (left: 13 13 24) || 24 - 13 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "2 * 12 = 24 (left: 13 13 24) || 13 / 13 = 1 (left: 1 24) || Input: 5 10",
                "2 * 12 = 24 (left: 13 13 24) || 13 / 13 = 1 (left: 1 24) || 5 + 10 = 15 (left: 15)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.001,
                0.003,
                0.002,
                2.001,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 3.0",
                "2 <- INIT",
                "3 <- 2.8",
                "4 <- 3.0",
                "5 <- 1.2",
                "6 <- 1.2",
                "7 <- 2.8",
                "8 <- 1.6",
                "9 <- 1.6"
            ]
        },
        "Step 4": {
            "steps": [
                "2 * 12 = 24 (left: 13 13 24) || 24 - 13 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "2 * 12 = 24 (left: 13 13 24) || 13 / 13 = 1 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (2 * 12) * (13 / 13) = 24",
                "2 * 12 = 24 (left: 13 13 24)",
                "2 * 12 = 24 (left: 13 13 24) || 13 / 13 = 1 (left: 1 24) || Input: 5 10",
                "2 * 12 = 24 (left: 13 13 24) || 13 / 13 = 1 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (2 * 12) * (13 / 13) = 24",
                "2 * 12 = 24 (left: 13 13 24) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "2 * 12 = 24 (left: 13 13 24) || 24 - 13 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "2 * 12 = 24 (left: 13 13 24) || 13 / 13 = 1 (left: 1 24) || Input: 5 10",
                "2 * 12 = 24 (left: 13 13 24) || 13 / 13 = 1 (left: 1 24) || Input: 5 10",
                "2 * 12 = 24 (left: 13 13 24) || 13 / 13 = 1 (left: 1 24) || 5 + 10 = 15 (left: 15)"
            ]
        },
        "Input": "2 12 13 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "70": {
        "puzzle": "7 7 11 12",
        "Step 0": {
            "steps": [
                "11 + 7 = 18 (left: 7 12 18)",
                "7 * 7 = 49 (left: 11 12 49)",
                "7 * 7 = 49 (left: 11 12 49)",
                "7 * 1 = 7 (left: 7 11 12)",
                "11 + 7 = 18 (left: 7 12 18)",
                "7 - 7 = 0 (left: 0 11 12)",
                "7 * 7 = 49 (left: 11 12 49)",
                "11 + 7 = 18 (left: 7 12 18)",
                "11 - 7 = 4 (left: 4 12 ",
                "11 + 1 = 12 (left: 7 12 12)"
            ],
            "Evaluation": [
                2.001,
                0.003,
                3.0,
                3.0,
                2.001,
                3.0,
                3.0,
                2.0,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.7",
                "3 <- INIT",
                "4 <- 0.0",
                "5 <- 0.6",
                "6 <- 0.5",
                "7 <- INIT",
                "8 <- 0.6",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "7 / 7 = 1 (left: 1 11 12)",
                "7 * 1 = 7 (left: 7 11 12)",
                "11 + 7 = 18 (left: 7 12 18) || 12 * 18 = 216 (left: 7 216)",
                "11 + 1 = 12 (left: 7 12 12)",
                "11 + 7 = 18 (left: 7 12 18) || 18 / 12 = 1.5 (left: 7 1.5)",
                "7 * 7 = 49 (left: 11 12 49) || Input: 3",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1)",
                "12 - 7 = 5 (left: 7 11 ",
                "7 * 7 = 49 (left: 11 12 49) || 49 - 11 = 38 (left: 12 38)",
                "7 * 1 = 7 (left: 7 11 12)"
            ],
            "Evaluation": [
                20.002,
                3.0,
                0.003,
                1.002,
                0.002,
                0.003,
                60.0,
                0.001,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 1.6",
                "2 <- 1.6",
                "3 <- 1.6",
                "4 <- 1.6",
                "5 <- 1.6",
                "6 <- 1.6",
                "7 <- 1.6",
                "8 <- 0.3",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 - 1 = -1 (left: -1)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0)",
                "7 * 1 = 7 (left: 7 11 12) || 7 * 11 = 77 (left: 12 77)",
                "7 * 1 = 7 (left: 7 11 12)"
            ],
            "Evaluation": [
                0.0,
                20.002,
                20.002,
                20.002,
                20.002,
                20.002,
                20.002,
                20.002,
                20.002,
                3.0
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 1.6",
                "2 <- 2.7",
                "3 <- 2.4",
                "4 <- 1.6",
                "5 <- 2.5",
                "6 <- 2.2",
                "7 <- 1.6",
                "8 <- 2.7",
                "9 <- 2.6"
            ]
        },
        "Step 3": {
            "steps": [
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.003,
                0.003,
                20.002,
                0.003,
                0.003,
                20.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 1.0",
                "2 <- 2.1",
                "3 <- 2.2",
                "4 <- 3.4",
                "5 <- 1.6",
                "6 <- 1.6",
                "7 <- 2.7",
                "8 <- 0.5",
                "9 <- 2.5"
            ]
        },
        "Step 4": {
            "steps": [
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 / 7 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                20.002,
                20.002,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 1.6",
                "2 <- INIT",
                "3 <- 4.6",
                "4 <- 2.5",
                "5 <- 2.6",
                "6 <- 4.1",
                "7 <- 4.8",
                "8 <- 2.2",
                "9 <- 4.1"
            ]
        },
        "Step 5": {
            "steps": [
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "7 * 1 = 7 (left: 7 11 12)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 / 7 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 / 7 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                20.002,
                3.0,
                0.003,
                0.003,
                0.003,
                0.003,
                20.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.8",
                "1 <- 2.6",
                "2 <- 4.8",
                "3 <- 2.1",
                "4 <- 4.1",
                "5 <- 0.3",
                "6 <- 4.8",
                "7 <- 3.4",
                "8 <- 4.8",
                "9 <- 4.8"
            ]
        },
        "Step 6": {
            "steps": [
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 - 1 = -1 (left: -1)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 / 7 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "7 * 1 = 7 (left: 7 11 12) || 7 - 11 = -",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                20.002,
                0.003,
                20.002,
                20.002
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 4.8",
                "2 <- 4.8",
                "3 <- 4.1",
                "4 <- 4.7",
                "5 <- 6.6",
                "6 <- 6.9",
                "7 <- 2.2",
                "8 <- 0.6",
                "9 <- 6.2"
            ]
        },
        "Step 7": {
            "steps": [
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "7 / 7 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input. || Please provide numbers in the input to determine possible next steps.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 * 7 = 49 (left: 11 12 49) || 49 - 11 = 38 (left: 12 38)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                0.003,
                20.002,
                20.002,
                0.003,
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 2.5",
                "2 <- 2.3",
                "3 <- 6.9",
                "4 <- 4.1",
                "5 <- 4.5",
                "6 <- 6.9",
                "7 <- 6.8",
                "8 <- 6.9",
                "9 <- 2.5"
            ]
        },
        "Step 8": {
            "steps": [
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 / 7 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 6.6",
                "1 <- 6.9",
                "2 <- 2.4",
                "3 <- 4.5",
                "4 <- 2.2",
                "5 <- 4.5",
                "6 <- 3.4",
                "7 <- 4.1",
                "8 <- 6.8",
                "9 <- 2.5"
            ]
        },
        "Step 9": {
            "steps": [
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 / 7 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ]
        },
        "Input": "7 7 11 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "71": {
        "puzzle": "1 1 3 7",
        "Step 0": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 7)",
                "1 * 1 = 1 (left: 1 3 7)",
                "7 - 3 = 4 (left: 1 4 4)",
                "7 - 3 = 4 (left: 1 1 4)",
                "7 - 3 = 4 (left: 1 4 7)",
                "1 + 3 = 4 (left: 4 7)",
                "7 - 1 = 6 (left: 1 3 6)",
                "3 + 1 = 4 (left: 1 4 7)",
                "7 / 1 = 7 (left: 1 3 ",
                "1 + 3 = 4 (left: 1 4 7)"
            ],
            "Evaluation": [
                1.002,
                22.0,
                2.001,
                1.002,
                1.002,
                1.0,
                22.0,
                1.002,
                0.0,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.6",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 0.6",
                "8 <- INIT",
                "9 <- 0.6"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 7)",
                "3 + 1 = 4 (left: 1 4 7)",
                "3 + 1 = 4 (left: 1 4 7)",
                "7 - 1 = 6 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3)",
                "3 + 1 = 4 (left: 1 4 7)",
                "3 + 1 = 4 (left: 1 4 7)",
                "1 + 3 = 4 (left: 1 4 7)",
                "7 - 1 = 6 (left: 1 3 6) || 3 + 6 = 9 (left: 1 9)",
                "1 + 3 = 4 (left: 1 4 7)",
                "7 - 1 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3)"
            ],
            "Evaluation": [
                22.0,
                1.002,
                1.002,
                21.0,
                1.002,
                1.002,
                1.002,
                60.0,
                1.002,
                0.0
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 0.6",
                "2 <- 1.7",
                "3 <- 1.0",
                "4 <- 1.3",
                "5 <- 0.6",
                "6 <- 0.1",
                "7 <- 0.1",
                "8 <- 1.7",
                "9 <- 1.7"
            ]
        },
        "Step 2": {
            "steps": [
                "7 - 1 = 6 (left: 1 3 6) || 3 + 6 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "7 - 1 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3)",
                "7 - 1 = 6 (left: 1 3 6) || 3 + 6 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4)",
                "7 - 1 = 6 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "7 - 1 = 6 (left: 1 3 6) || 1 + 6 = 7 (left: 7",
                "1 * 1 = 1 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4)",
                "1 * 1 = 1 (left: 1 3 7) || 3 - 1 = 2 (left: 2 7)",
                "7 - 1 = 6 (left: 1 3 6) || 3 + 6 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "7 - 1 = 6 (left: 1 3 6) || 3 + 6 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.002,
                0.0,
                0.001,
                60.0,
                0.0,
                0.001,
                60.0,
                0.001,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 0.2",
                "2 <- 1.3",
                "3 <- 2.3",
                "4 <- 0.6",
                "5 <- 2.6",
                "6 <- 1.7",
                "7 <- 1.1",
                "8 <- 1.7",
                "9 <- 1.7"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "7 - 3 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4)",
                "7 - 1 = 6 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "7 - 1 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "7 - 1 = 6 (left: 1 3 6) || 3 + 6 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "3 + 1 = 4 (left: 1 4 7) || 7 - 4 = 3 (left: 1 3)",
                "7 - 1 = 6 (left: 1 3 6) || 3 + 6 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "7 - 1 = 6 (left: 1 3 6) || 3 + 6 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.0,
                21.0,
                0.0,
                0.002,
                0.0,
                0.002,
                0.001,
                21.0,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 2.6",
                "2 <- 2.3",
                "3 <- 2.6",
                "4 <- 1.0",
                "5 <- 1.0",
                "6 <- 0.6",
                "7 <- 2.6",
                "8 <- 2.3",
                "9 <- 1.7"
            ]
        },
        "Step 4": {
            "steps": [
                "7 - 1 = 6 (left: 1 3 6) || 3 * 6 = 18 (left: 1 18)",
                "1 * 1 = 1 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 7) || 1 * 7 = 7 (left: 3 7)",
                "1 * 1 = 1 (left: 1 3 7) || 7 - 3 = 4 (left:",
                "7 - 1 = 6 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3)",
                "1 * 1 = 1 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "7 - 1 = 6 (left: 1 3 6) || 3 + 6 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.002,
                0.0,
                1.0,
                21.0,
                0.002,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 2.3",
                "2 <- 3.1",
                "3 <- 2.3",
                "4 <- INIT",
                "5 <- 2.3",
                "6 <- 1.7",
                "7 <- 0.1",
                "8 <- 2.3",
                "9 <- 2.3"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "7 - 3 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 3 - 4 = -1 (left: -1)",
                "1 * 1 = 1 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "3 + 1 = 4 (left: 1 4 7)",
                "1 * 1 = 1 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "7 - 1 = 6 (left: 1 3 6) || 3 + 6 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 3 7) || 3 - 1 = 2 (left: 2 7)",
                "1 * 1 = 1 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.0,
                0.002,
                1.002,
                0.002,
                0.001,
                0.001,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 5.4",
                "2 <- 2.3",
                "3 <- 2.6",
                "4 <- 3.1",
                "5 <- 0.6",
                "6 <- 2.6",
                "7 <- 4.6",
                "8 <- 2.6",
                "9 <- 4.6"
            ]
        },
        "Step 6": {
            "steps": [
                "7 - 1 = 6 (left: 1 3 6) || 3 * 6 = 18 (left: 1 18)",
                "3 + 1 = 4 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6)",
                "1 * 1 = 1 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "7 - 3 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 3 - 4 = -1 (left: -1)",
                "7 - 1 = 6 (left: 1 3 6) || 1 + 6 = 7 (left: 7",
                "1 * 1 = 1 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "7 - 1 = 6 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3) || 1 * 3 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "7 - 1 = 6 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.002,
                0.002,
                0.0,
                0.001,
                0.002,
                0.0,
                0.002,
                0.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 1.2",
                "2 <- 6.1",
                "3 <- 6.1",
                "4 <- 2.3",
                "5 <- 2.3",
                "6 <- 1.0",
                "7 <- 6.1",
                "8 <- 2.3",
                "9 <- 6.1"
            ]
        },
        "Step 7": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 7) || 3 * 7 = 21 (left: 1 21)",
                "3 + 1 = 4 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6)",
                "3 + 1 = 4 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "3 + 1 = 4 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4)",
                "3 + 1 = 4 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "3 + 1 = 4 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)"
            ],
            "Evaluation": [
                1.002,
                60.0,
                0.002,
                60.0,
                0.002,
                0.002,
                60.0,
                60.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 3.7",
                "1 <- 7.1",
                "2 <- 7.1",
                "3 <- 7.3",
                "4 <- 7.1",
                "5 <- 1.3",
                "6 <- 2.3",
                "7 <- 3.1",
                "8 <- 2.6",
                "9 <- 7.7"
            ]
        },
        "Step 8": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 7) || 7 - 4 = 3 (left: 1 3) || 3 - 1 = 2 (left: 2)",
                "3 + 1 = 4 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "3 + 1 = 4 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "3 + 1 = 4 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (3 + 1) * (7 - 1) = 24",
                "3 + 1 = 4 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "7 - 1 = 6 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "7 - 3 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 3 * 4 = 12 (left: 12)",
                "1 * 1 = 1 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "3 + 1 = 4 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (3 + 1) * (7 - 1) = 24"
            ]
        },
        "Input": "1 1 3 7",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "72": {
        "puzzle": "1 4 10 10",
        "Step 0": {
            "steps": [
                "10 - 1 = 9 (left: 4 9 10)",
                "4 * 10 = 40 (left: 1 10 40)",
                "10 / 1 = 10 (left: 4 10 10)",
                "10 - 4 = 6 (left: 1 6 10)",
                "10 / 1 = 10 (left: 4 10 10)",
                "10 - 4 = 6 (left: 1 6 10)",
                "10 / 1 = 10 (left: 4 10 10)",
                "10 - 1 = 9 (left: 4 9 10)",
                "10 - 4 = 6 (left: 1 6 ",
                "10 - 1 = 9 (left: 4 9 10)"
            ],
            "Evaluation": [
                21.001,
                1.002,
                20.002,
                2.001,
                20.002,
                2.001,
                20.002,
                3.0,
                60.0,
                1.001
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.8",
                "2 <- INIT",
                "3 <- 0.0",
                "4 <- INIT",
                "5 <- 0.5",
                "6 <- 0.2",
                "7 <- 0.8",
                "8 <- 0.8",
                "9 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "10 - 1 = 9 (left: 4 9 10) || 9 + 10 = 19 (left: 4 19)",
                "10 - 4 = 6 (left: 1 6  || 6 / 1 = 6 (left: 6)",
                "10 / 1 = 10 (left: 4 10 10)",
                "10 - 1 = 9 (left: 4 9 10) || 10 - 4 = 6 (left: 6 9 10)",
                "10 / 1 = 10 (left: 4 10 10)",
                "10 - 4 = 6 (left: 1 6 10) || 10 / 1 = 10 (left: 6 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 - 4 = 6 (left: 1 6  || 1 * 6 = 6 (left: 6)",
                "10 - 4 = 6 (left: 1 6  || 1 * 6 = 6 (left: 6)",
                "10 - 1 = 9 (left: 4 9 10) || 9 - 4 = 5 (left: 5 10)"
            ],
            "Evaluation": [
                1.001,
                0.003,
                20.002,
                2.0,
                20.002,
                0.003,
                2.001,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.8",
                "2 <- 0.8",
                "3 <- 0.4",
                "4 <- INIT",
                "5 <- 0.8",
                "6 <- 0.2",
                "7 <- 1.4",
                "8 <- 0.8",
                "9 <- 0.8"
            ]
        },
        "Step 2": {
            "steps": [
                "10 - 1 = 9 (left: 4 9 10) || 9 + 10 = 19 (left: 4 19)",
                "10 - 4 = 6 (left: 1 6  || 6 / 1 = 6 (left: 6)",
                "10 - 4 = 6 (left: 1 6  || 6 / 1 = 6 (left: 6)",
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 / 1 = 10 (left: 4 10 10)",
                "10 - 4 = 6 (left: 1 6  || 6 / 1 = 6 (left: 6)",
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 / 4 = 2",
                "10 - 4 = 6 (left: 1 6  || 1 * 6 = 6 (left: 6)",
                "10 - 4 = 6 (left: 1 6  || 6 / 1 = 6 (left: 6)"
            ],
            "Evaluation": [
                1.001,
                0.003,
                0.003,
                2.001,
                20.002,
                0.003,
                2.001,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.5",
                "2 <- 2.3",
                "3 <- 0.4",
                "4 <- 1.2",
                "5 <- 0.8",
                "6 <- 0.0",
                "7 <- 0.2",
                "8 <- 0.8",
                "9 <- 0.4"
            ]
        },
        "Step 3": {
            "steps": [
                "10 - 1 = 9 (left: 4 9 10) || 9 + 10 = 19 (left: 4 19)",
                "10 - 4 = 6 (left: 1 6 10) || 10 / 1 = 10 (left: 6 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60)",
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 - 4 = 6 (left: 1 6  || 6 / 1 = 6 (left: 6)",
                "10 - 1 = 9 (left: 4 9 10) || 4 * 9 = 36 (left: 10 36)",
                "10 / 1 = 10 (left: 4 10 10) || 10 / 4 = 2",
                "10 - 4 = 6 (left: 1 6  || 1 * 6 = 6 (left: 6)",
                "10 / 1 = 10 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                1.002,
                2.001,
                2.001,
                0.003,
                0.003,
                0.003,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 3.9",
                "2 <- INIT",
                "3 <- 3.9",
                "4 <- 0.8",
                "5 <- 0.2",
                "6 <- 0.8",
                "7 <- 0.8",
                "8 <- 0.8",
                "9 <- 2.4"
            ]
        },
        "Step 4": {
            "steps": [
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 2.5 * 10 = 25 (left: 10 25)",
                "10 / 1 = 10 (left: 4 10 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 10 - 2.5 = 7.5 (left: 7.5 10)",
                "10 - 4 = 6 (left: 1 6  || 6 / 1 = 6 (left: 6)",
                "10 / 1 = 10 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 - 4 = 6 (left: 1 6  || 1 * 6 = 6 (left: 6)",
                "10 - 4 = 6 (left: 1 6  || 1 * 6 = 6 (left: 6)",
                "10 - 4 = 6 (left: 1 6  || 1 * 6 = 6 (left: 6)",
                "10 / 1 = 10 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                20.002,
                2.001,
                0.003,
                2.001,
                0.003,
                0.003,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 1.4",
                "2 <- 4.0",
                "3 <- 3.2",
                "4 <- 0.0",
                "5 <- 0.0",
                "6 <- 2.0",
                "7 <- 3.9",
                "8 <- 0.4",
                "9 <- 4.2"
            ]
        },
        "Step 5": {
            "steps": [
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60) || 60 / 10 = 6 (left: 6 10)",
                "10 - 1 = 9 (left: 4 9 10) || 9 - 4 = 5 (left: 5 10)",
                "10 - 1 = 9 (left: 4 9 10) || Input: 3 5",
                "10 - 1 = 9 (left: 4 9 10) || 9 + 10 = 19 (left: 4 19) || 19 - 4 = 15 (left: 15)",
                "10 / 1 = 10 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 10 / ",
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)"
            ],
            "Evaluation": [
                20.002,
                2.001,
                2.001,
                0.003,
                0.001,
                0.003,
                0.002,
                0.003,
                2.001,
                2.001
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 1.2",
                "2 <- 0.0",
                "3 <- 5.0",
                "4 <- 0.2",
                "5 <- 0.2",
                "6 <- 0.6",
                "7 <- 5.0",
                "8 <- 1.3",
                "9 <- INIT"
            ]
        },
        "Step 6": {
            "steps": [
                "10 - 4 = 6 (left: 1 6  || 6 - 1 = 5 (left: 5)",
                "10 / 1 = 10 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 - 1 = 9 (left: 4 9 10) || 9 - 4 = 5 (left: 5 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10) || 10 / 4 = 2",
                "10 - 1 = 9 (left: 4 9 10) || 10 - 4 = 6 (left: 6 9 10) || 6 * 9 = 54 (left: 10 54)",
                "10 / 1 = 10 (left: 4 10 10)"
            ],
            "Evaluation": [
                0.002,
                2.001,
                0.001,
                2.001,
                2.001,
                2.001,
                2.001,
                0.003,
                1.001,
                20.002
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 4.5",
                "2 <- 0.7",
                "3 <- 1.4",
                "4 <- 6.9",
                "5 <- 4.0",
                "6 <- 2.4",
                "7 <- 0.8",
                "8 <- 0.6",
                "9 <- 5.8"
            ]
        },
        "Step 7": {
            "steps": [
                "10 / 1 = 10 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 10 - 2.5 = 7.5 (left: 7.5 10) || 7.5 * 10 = 75 (left: 75)",
                "10 / 1 = 10 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 2.5 * 10 = 25 (left: 10 25)",
                "10 - 1 = 9 (left: 4 9 10) || 9 - 4 = 5 (left: 5 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 - 4 = 6 (left: 1 6  || 1 * 6 = 6 (left: 6)",
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.001,
                2.001,
                2.001,
                2.001,
                2.001,
                0.003,
                2.001,
                1.002
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 6.9",
                "2 <- 1.4",
                "3 <- 5.1",
                "4 <- 4.0",
                "5 <- 4.0",
                "6 <- 4.0",
                "7 <- 6.9",
                "8 <- 0.7",
                "9 <- 4.0"
            ]
        },
        "Step 8": {
            "steps": [
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 10 - 2.5 = 7.5 (left: 7.5 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 / 4 = 2",
                "10 - 1 = 9 (left: 4 9 10) || 4 * 9 = 36 (left: 10 36)",
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)"
            ],
            "Evaluation": [
                2.001,
                2.001,
                2.001,
                2.001,
                2.001,
                2.001,
                2.001,
                0.003,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 8.2",
                "2 <- 2.4",
                "3 <- 2.4",
                "4 <- 5.0",
                "5 <- 6.9",
                "6 <- 1.4",
                "7 <- 0.8",
                "8 <- 0.8",
                "9 <- 7.3"
            ]
        },
        "Step 9": {
            "steps": [
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 2.5 * 10 = 25 (left: 10 25)",
                "10 / 1 = 10 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 - 4 = 6 (left: 1 6  || 1 * 6 = 6 (left: 6)",
                "10 - 4 = 6 (left: 1 6  || 1 * 6 = 6 (left: 6)",
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60)"
            ]
        },
        "Input": "1 4 10 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "73": {
        "puzzle": "4 4 12 12",
        "Step 0": {
            "steps": [
                "12 + 4 = 16 (left: 4 12 16)",
                "4 / 4 = 1 (left: 1 12 12)",
                "12 / 4 = 3 (left: 4 3 12)",
                "12 - 4 = 8 (left: 4 8 12)",
                "12 / 4 = 3 (left: 3 12 12)",
                "12 / 4 = 3 (left: 3 12 12)",
                "12 / 4 = 3 (left: 4 3 12)",
                "12 / 4 = 3 (left: 4 3 12)",
                "12 / 4 = 3 (left: 4 3 ",
                "12 - 4 = 8 (left: 4 8 12)"
            ],
            "Evaluation": [
                41.0,
                0.003,
                60.0,
                3.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                2.001
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.7",
                "2 <- 0.8",
                "3 <- 0.2",
                "4 <- 0.8",
                "5 <- 0.7",
                "6 <- 0.2",
                "7 <- 0.7",
                "8 <- INIT",
                "9 <- 0.6"
            ]
        },
        "Step 1": {
            "steps": [
                "12 / 4 = 3 (left: 4 3 12) || 4 * 3 = 12 (left: 12 12)",
                "12 / 4 = 3 (left: 4 3 12) || 3 + 12 = 15 (left: 4 15)",
                "12 / 4 = 3 (left: 4 3  || 4 / 3 = 1.33 (left: 1.33)",
                "12 / 4 = 3 (left: 4 3 12) || 4 / 3 = 1.33 (left: 1.33 12)",
                "12 / 4 = 3 (left: 4 3  || 3 * 4 = 12 (left: 12)",
                "12 / 4 = 3 (left: 4 3 12) || 12 / 4",
                "12 / 4 = 3 (left: 4 3 12) || 4 / 3 = 1.33 (left: 1.33 12)",
                "12 / 4 = 3 (left: 4 3 12) || 3 - 12 = -9 (left: -9 12)",
                "12 - 4 = 8 (left: 4 8 12)",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                20.002,
                0.001,
                0.003,
                2.001,
                0.003,
                0.003,
                1.001,
                0.003,
                2.001,
                20.002
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 0.7",
                "2 <- INIT",
                "3 <- 0.2",
                "4 <- 0.4",
                "5 <- 0.5",
                "6 <- 0.2",
                "7 <- 0.2",
                "8 <- 0.3",
                "9 <- 1.9"
            ]
        },
        "Step 2": {
            "steps": [
                "12 / 4 = 3 (left: 4 3 12) || 4 * 3 = 12 (left: 12 12)",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12)",
                "12 / 4 = 3 (left: 3 12 12)",
                "12 / 4 = 3 (left: 4 3 12) || 3 + 12 = 15 (left: 4 15)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left:",
                "12 / 4 = 3 (left: 4 3 12) || 3 + 12 = 15 (left: 4 15)",
                "12 / 4 = 3 (left: 4 3 12) || 12 / 4 = 3 (left: 3 12)",
                "12 - 4 = 8 (left: 4 8 12) || 12 - 4 = 8 (left: 8 12)",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                20.002,
                20.002,
                60.0,
                0.001,
                0.003,
                0.003,
                0.001,
                20.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 2.2",
                "2 <- INIT",
                "3 <- 2.0",
                "4 <- 0.0",
                "5 <- 0.7",
                "6 <- 0.8",
                "7 <- 0.5",
                "8 <- 0.2",
                "9 <- 0.7"
            ]
        },
        "Step 3": {
            "steps": [
                "12 / 4 = 3 (left: 4 3 12) || 4 * 3 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)",
                "12 / 4 = 3 (left: 3 12 12)",
                "12 / 4 = 3 (left: 4 3 12) || 4 * 3 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 + 4 = 16 (left: 4 12 16) || 4 * 3 = 12 (left: 12 16)",
                "12 / 4 = 3 (left: 4 3 12) || 12 - 3 = 9 (left:",
                "12 / 4 = 3 (left: 4 3  || 3 + 4 = 7 (left: 7)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 4 3 12) || 3 + 12 = 15 (left: 4 15)",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                0.003,
                0.003,
                0.003,
                0.001,
                0.003,
                0.001,
                20.002
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 0.4",
                "2 <- 2.7",
                "3 <- 0.2",
                "4 <- 0.6",
                "5 <- 2.2",
                "6 <- 0.2",
                "7 <- 2.2",
                "8 <- 2.2",
                "9 <- 3.2"
            ]
        },
        "Step 4": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)",
                "12 / 4 = 3 (left: 4 3 12) || 12 / 4 = 3 (left: 3 12) || 4 + 7 = 11 (left: 11 10)",
                "12 / 4 = 3 (left: 4 3 12) || 3 + 12 = 15 (left: 4 15)",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left:",
                "12 / 4 = 3 (left: 4 3 12) || 3 + 12 = 15 (left: 4 15)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.001,
                20.002,
                0.003,
                0.001,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 4.4",
                "2 <- 4.4",
                "3 <- 0.4",
                "4 <- 0.5",
                "5 <- 0.7",
                "6 <- 1.9",
                "7 <- 2.2",
                "8 <- 0.7",
                "9 <- 0.2"
            ]
        },
        "Step 5": {
            "steps": [
                "12 / 4 = 3 (left: 4 3 12) || 4 * 3 = 12 (left: 12 12)",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)",
                "12 / 4 = 3 (left: 4 3 12) || 12 - 3 = 9 (left:",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 4 3 12) || 3 + 12 = 15 (left: 4 15)",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.001,
                20.002
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 0.2",
                "2 <- 0.7",
                "3 <- 2.7",
                "4 <- 2.7",
                "5 <- 2.7",
                "6 <- 2.2",
                "7 <- 0.5",
                "8 <- 3.9",
                "9 <- 0.6"
            ]
        },
        "Step 6": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12)",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12)",
                "12 / 4 = 3 (left: 4 3 12) || 12 / 4 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 4 3 12) || 12 / 4 = 3 (left: 3 12) || Possible next steps:",
                "12 / 4 = 3 (left: 4 3 12) || 12 / 4 = 3 (left: 3 12) || Possible next steps:",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                20.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 4.4",
                "2 <- 6.2",
                "3 <- 3.2",
                "4 <- 3.9",
                "5 <- 6.2",
                "6 <- 0.2",
                "7 <- INIT",
                "8 <- 5.9",
                "9 <- 4.4"
            ]
        },
        "Step 7": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 4 = 3 (left: 4 3 12) || 3 + 12 = 15 (left: 4 15)",
                "12 / 4 = 3 (left: 3 12 ",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.001,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 5.9",
                "2 <- 3.9",
                "3 <- 2.2",
                "4 <- 2.2",
                "5 <- 2.1",
                "6 <- 7.7",
                "7 <- 7.7",
                "8 <- 7.7",
                "9 <- 7.7"
            ]
        },
        "Step 8": {
            "steps": [
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 4 = 3 (left: 3 12  || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 12  || 12 ^ 3 = 1728 (left: 1728)",
                "12 / 4 = 3 (left: 3 12  || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 12  || 12 + 3 = 15 (left: 3 15)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 0.2",
                "2 <- 6.2",
                "3 <- 7.7",
                "4 <- 0.2",
                "5 <- 1.9",
                "6 <- 0.6",
                "7 <- 7.7",
                "8 <- INIT",
                "9 <- 2.0"
            ]
        },
        "Step 9": {
            "steps": [
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12)",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 4 = 3 (left: 3 12  || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12)",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 4 = 3 (left: 4 3 12) || 3 + 12 = 15 (left: 4 15)",
                "12 / 4 = 3 (left: 3 12  || 12 ^ 3 = 1728 (left: 1728)",
                "12 - 4 = 8 (left: 4 8 12)",
                "12 / 4 = 3 (left: 4 3 12) || 4 * 3 = 12 (left: 12 12) || 12 + 12 = 24"
            ]
        },
        "Input": "4 4 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "74": {
        "puzzle": "1 3 4 12",
        "Step 0": {
            "steps": [
                "4 * 3 = 12 (left: 1 4 12)",
                "3 * 4 = 12 (left: 1 12 12)",
                "12 / 4 = 3 (left: 1 3 12)",
                "12 - 1 = 11 (left: 3 4 11)",
                "4 * 3 = 12 (left: 1 12 12)",
                "12 - 4 = 8 (left: 1 3 8)",
                "12 / 4 = 3 (left: 1 3 12)",
                "4 * 3 = 12 (left: 1 12 12)",
                "12 - 4 = 8 (left: 1 3 ",
                "12 / 4 = 3 (left: 1 3 12)"
            ],
            "Evaluation": [
                2.001,
                0.003,
                41.0,
                22.0,
                0.003,
                60.0,
                41.0,
                0.003,
                0.0,
                41.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.9",
                "2 <- 0.2",
                "3 <- INIT",
                "4 <- 0.9",
                "5 <- 0.5",
                "6 <- 0.3",
                "7 <- 0.5",
                "8 <- 0.9",
                "9 <- 0.6"
            ]
        },
        "Step 1": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)",
                "12 / 4 = 3 (left: 1 3 12)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)",
                "12 - 4 = 8 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "12 - 1 = 11 (left: 3 4 11) || 11 - 3 = 8 (left: 8 4)",
                "12 - 4 = 8 (left: 1 3 8) || 1 * 8 = 8 (left: 8)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)"
            ],
            "Evaluation": [
                60.0,
                20.002,
                20.002,
                41.0,
                20.002,
                0.0,
                0.003,
                0.002,
                60.0,
                20.002
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.8",
                "2 <- 0.2",
                "3 <- 0.5",
                "4 <- 1.8",
                "5 <- 0.6",
                "6 <- 1.1",
                "7 <- 1.8",
                "8 <- 0.2",
                "9 <- 0.9"
            ]
        },
        "Step 2": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)",
                "12 - 4 = 8 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 - 1 = 11 (left:",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                20.002,
                0.0,
                0.002,
                40.001,
                0.003,
                0.002,
                60.0,
                20.002
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 0.2",
                "2 <- 1.2",
                "3 <- 0.9",
                "4 <- 1.8",
                "5 <- 0.5",
                "6 <- 0.6",
                "7 <- 1.1",
                "8 <- 0.6",
                "9 <- 1.8"
            ]
        },
        "Step 3": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 4 + 7 = 11 (left: 11 10)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.0,
                20.002,
                0.003,
                60.0,
                0.002,
                0.0,
                60.0,
                0.003,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 3.3",
                "2 <- 3.8",
                "3 <- 3.8",
                "4 <- 0.6",
                "5 <- 1.8",
                "6 <- 1.0",
                "7 <- 1.4",
                "8 <- 3.6",
                "9 <- 0.0"
            ]
        },
        "Step 4": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 / 1 = 36 (left: 36)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "4 * 3 = 12 (left: 1 4 12) || 12 + 4 = 16 (left: 1 16)"
            ],
            "Evaluation": [
                40.0,
                0.002,
                0.002,
                0.002,
                20.002,
                0.002,
                0.003,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 3.6",
                "2 <- 3.6",
                "3 <- 3.6",
                "4 <- 3.8",
                "5 <- 0.3",
                "6 <- 4.0",
                "7 <- 3.8",
                "8 <- 3.3",
                "9 <- 3.1"
            ]
        },
        "Step 5": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 1 = 11 (left: 3 4 11) || 11 - 3 = 8 (left:",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 / 1 = 36 (left: 36) || 36 / 2 = 18",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || Possible next steps:"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.002,
                0.002,
                22.0,
                0.003,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.6",
                "1 <- 3.1",
                "2 <- 4.0",
                "3 <- 3.8",
                "4 <- 3.3",
                "5 <- 1.8",
                "6 <- 2.9",
                "7 <- 3.3",
                "8 <- 3.8",
                "9 <- 1.4"
            ]
        },
        "Step 6": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 4 + 7 = 11 (left: 11 10)",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 / 1 = 36 (left: 36) || 36 / 2 = 18",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || Possible next steps:"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.003,
                0.002,
                0.002,
                0.002,
                0.003,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.2",
                "2 <- 0.2",
                "3 <- 1.9",
                "4 <- 5.5",
                "5 <- 4.4",
                "6 <- 1.0",
                "7 <- 1.2",
                "8 <- 4.4",
                "9 <- 4.4"
            ]
        },
        "Step 7": {
            "steps": [
                "3 * 4 = 12 (left: 1 12 12)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 4 + 7 = 11 (left: 11 10)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "12 - 1 = 11 (left: 3 4 11) || 11 - 3 = 8 (left: || 3 - 11 = -8 (left: -8)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || Possible next steps:",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || Possible next steps:"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                0.003,
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 4.0",
                "2 <- 3.8",
                "3 <- 0.5",
                "4 <- 7.2",
                "5 <- 7.2",
                "6 <- 7.2",
                "7 <- 2.8",
                "8 <- 0.2",
                "9 <- 3.8"
            ]
        },
        "Step 8": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 / 1 = 36 (left: 36) || 36 / 2 = 18",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || Possible next steps:",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || Possible next steps:",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.0,
                0.003,
                0.003,
                0.003,
                0.002,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 8.8",
                "1 <- 2.9",
                "2 <- 2.8",
                "3 <- 1.0",
                "4 <- 3.6",
                "5 <- 8.8",
                "6 <- 3.1",
                "7 <- 0.5",
                "8 <- 8.8",
                "9 <- 1.3"
            ]
        },
        "Step 9": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 4 + 7 = 11 (left: 11 10)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "12 - 4 = 8 (left: 1 3 8) || 1 * 8 = 8 (left: 8)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)"
            ]
        },
        "Input": "1 3 4 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "75": {
        "puzzle": "5 5 11 12",
        "Step 0": {
            "steps": [
                "11 + 5 = 16 (left: 5 16 12)",
                "5 / 5 = 1 (left: 1 11 12)",
                "5 / 5 = 1 (left: 1 11 12)",
                "5 + 11 = 16 (left: 16 12)",
                "11 + 5 = 16 (left: 5 16 12)",
                "5 - 5 = 0 (left: 0 11 12)",
                "",
                "11 + 5 = 16 (left: 5 12 16)",
                "11 - 5 = 6 (left: 5 6 12)",
                "5 + 11 = 16 (left: 16 12)"
            ],
            "Evaluation": [
                3.0,
                20.002,
                20.002,
                1.002,
                3.0,
                3.0,
                20.002,
                3.0,
                3.0,
                1.002
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 0.2",
                "2 <- 0.1",
                "3 <- 0.4",
                "4 <- 0.1",
                "5 <- 0.1",
                "6 <- 0.0",
                "7 <- INIT",
                "8 <- 0.6",
                "9 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                " || There are no more possible next steps.",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80)",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80)",
                "5 * 12 = 60 (left: 60)",
                " || There are no more possible next steps.",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                20.002,
                20.002,
                20.002,
                20.002,
                0.0,
                0.003,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.6",
                "2 <- 1.4",
                "3 <- 1.9",
                "4 <- 0.1",
                "5 <- 1.2",
                "6 <- 1.9",
                "7 <- 1.3",
                "8 <- 1.2",
                "9 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "5 * 5 = 25 (left: 11 12 25)",
                " || There are no more possible next steps.",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 - 80 = -68 (left: -68 12)",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                20.002,
                0.003,
                0.003,
                0.0,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.5",
                "2 <- 0.2",
                "3 <- 1.9",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 1.3",
                "7 <- 1.3",
                "8 <- INIT",
                "9 <- 2.9"
            ]
        },
        "Step 3": {
            "steps": [
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 * 11 = 55 (left: 12 55)",
                "11 + 12 = 23 (left:",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960)",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 - 80 = -68 (left: -68 12)",
                "5 + 11 = 16 (left: 16 12)",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                0.003,
                0.003,
                0.0,
                40.0,
                0.0,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.9",
                "1 <- 3.6",
                "2 <- INIT",
                "3 <- 3.2",
                "4 <- 0.2",
                "5 <- 2.4",
                "6 <- 1.1",
                "7 <- 1.4",
                "8 <- 1.9",
                "9 <- 1.3"
            ]
        },
        "Step 4": {
            "steps": [
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 960 - 80 = 880 (left: 880)",
                "5 * 11 = 55 (left: 12 55)",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 80 - 12 = 68 (left: 12 68)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 1.2",
                "2 <- INIT",
                "3 <- 2.9",
                "4 <- 0.6",
                "5 <- 1.1",
                "6 <- 3.6",
                "7 <- 1.2",
                "8 <- 4.4",
                "9 <- 2.4"
            ]
        },
        "Step 5": {
            "steps": [
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 * 11 = 55 (left: 12 55)",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                " || There are no more possible next steps.",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 80 + 960 = 1040 (left: 1040)",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 4.4",
                "2 <- 1.4",
                "3 <- 3.6",
                "4 <- 2.9",
                "5 <- 2.9",
                "6 <- 1.1",
                "7 <- 0.1",
                "8 <- 1.5",
                "9 <- 1.3"
            ]
        },
        "Step 6": {
            "steps": [
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 80 + 960 = 1040 (left: 1040)",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 / 5 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 80 - 12 = 68 (left: 12 68)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 3.6",
                "1 <- 1.4",
                "2 <- 3.6",
                "3 <- 0.6",
                "4 <- 2.9",
                "5 <- 3.6",
                "6 <- 2.4",
                "7 <- 2.9",
                "8 <- 1.1",
                "9 <- 1.2"
            ]
        },
        "Step 7": {
            "steps": [
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 960 / 80 = 12 (left: 12)",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 960 - 80 = 880 (left: 880)",
                " || There are no more possible next steps.",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 960 - 80 = 880 (left: 880)",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 4.4",
                "2 <- 3.8",
                "3 <- 0.2",
                "4 <- 1.1",
                "5 <- 1.3",
                "6 <- 3.6",
                "7 <- 3.6",
                "8 <- 3.6",
                "9 <- 0.6"
            ]
        },
        "Step 8": {
            "steps": [
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 + 11 = 16 (left: 16 12) || 16 * 12 = 192 (left: 192)",
                "5 / 5 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || Input:",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 80 + 960 = 1040 (left: 1040)",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 80 + 960 = 1040 (left: 1040)",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 80 + 960 = 1040 (left: 1040)",
                " || There are no more possible next steps."
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.6",
                "1 <- 8.5",
                "2 <- 1.9",
                "3 <- 8.5",
                "4 <- 1.3",
                "5 <- 1.5",
                "6 <- 3.2",
                "7 <- 4.4",
                "8 <- 4.4",
                "9 <- 2.4"
            ]
        },
        "Step 9": {
            "steps": [
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 960 / 80 = 12 (left: 12)",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || Input: || Please provide a list of numbers to find possible next steps.",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || Input: || Please provide a list of numbers to find possible next steps.",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 80 - 12 = 68 (left: 12 68)",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 / 5 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ]
        },
        "Input": "5 5 11 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "76": {
        "puzzle": "1 2 5 8",
        "Step 0": {
            "steps": [
                "5 + 8 = 13 (left: 1 2 13)",
                "2 * 5 = 10 (left: 1 10 8)",
                "8 - 5 = 3 (left: 1 2 3)",
                "8 - 2 = 6 (left: 1 6 5)",
                "5 + 8 = 13 (left: 1 2 13)",
                "8 - 5 = 3 (left: 1 2 3)",
                "8 - 2 = 6 (left: 1 6 8)",
                "5 + 8 = 13 (left: 1 2 13)",
                "5 - 2 = 3 (left: 1 3 ",
                "5 + 8 = 13 (left: 1 2 13)"
            ],
            "Evaluation": [
                1.002,
                2.001,
                1.0,
                21.001,
                1.002,
                1.0,
                0.003,
                1.002,
                0.0,
                1.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 0.4",
                "6 <- 0.3",
                "7 <- 0.3",
                "8 <- INIT",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "8 - 2 = 6 (left: 1 6 5) || 6 / 1 = 6 (left: 6)",
                "8 - 2 = 6 (left: 1 6 8)",
                "8 - 2 = 6 (left: 1 6 8)",
                "5 + 8 = 13 (left: 1 2 13)",
                "8 - 2 = 6 (left: 1 6 8)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 1 = ",
                "8 - 2 = 6 (left: 1 6 5) || 1 * 6 = 6 (left: 6 5)",
                "8 - 2 = 6 (left: 1 6 5) || 5 * 1 = 5 (left: 5 5)",
                "5 + 8 = 13 (left: 1 2 13)",
                "8 - 2 = 6 (left: 1 6 5) || 6 - 1 = 5 (left: 5 5)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.002,
                0.003,
                0.003,
                0.003,
                0.002,
                1.002,
                0.002
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 0.3",
                "6 <- 0.3",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 5 = 10 (left: 1 10 8) || 10 - 1 = 9 (left: 9 8)",
                "8 - 2 = 6 (left: 1 6 8)",
                "8 - 2 = 6 (left: 1 6 8)",
                "5 + 8 = 13 (left: 1 2 13)",
                "8 - 2 = 6 (left: 1 6 8)",
                "8 - 2 = 6 (left: 1 6 5) || 6 / 1 = 6 (left: 5 6)",
                "8 - 2 = 6 (left: 1 6 5) || 5 * 1 = 5 (left: 5 5)",
                "5 - 2 = 3 (left: 1 3 ",
                "5 + 8 = 13 (left: 1 2 13)",
                "8 - 2 = 6 (left: 1 6 8)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.002,
                0.003,
                0.003,
                0.002,
                0.0,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 0.2",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- 1.3",
                "9 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "8 - 2 = 6 (left: 1 6 5) || 6 - 1 = 5 (left: 5 5)",
                "8 - 2 = 6 (left: 1 6 8)",
                "8 - 2 = 6 (left: 1 6 8)",
                "5 + 8 = 13 (left: 1 2 13)",
                "8 - 2 = 6 (left: 1 6 8)",
                "8 - 5 = 3 (left: 1 2 3) || Input: 5 10 15",
                "5 + 8 = 13 (left: 1 2 13)",
                "5 - 2 = 3 (left: 1 3 ",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11)",
                "8 - 2 = 6 (left: 1 6 8)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                1.002,
                0.003,
                0.003,
                1.002,
                0.0,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 3.8",
                "2 <- 3.8",
                "3 <- 1.3",
                "4 <- 0.7",
                "5 <- INIT",
                "6 <- 3.8",
                "7 <- 0.3",
                "8 <- 3.8",
                "9 <- 3.8"
            ]
        },
        "Step 4": {
            "steps": [
                "8 - 2 = 6 (left: 1 6 5) || 6 - 1 = 5 (left: 5 5)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 / 2 = 6.5 (left: 1 6.5)",
                "8 - 2 = 6 (left: 1 6 8)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "8 - 2 = 6 (left: 1 6 5) || 5 * 1 = 5 (left: 5 5)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                40.0,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 4.3",
                "2 <- 3.8",
                "3 <- 4.3",
                "4 <- 3.8",
                "5 <- 4.3",
                "6 <- 3.8",
                "7 <- 4.3",
                "8 <- 0.1",
                "9 <- 4.3"
            ]
        },
        "Step 5": {
            "steps": [
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "2 * 5 = 10 (left: 1 10 8) || 1 * 10 = 10 (left: 10 8)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 4.3",
                "2 <- 4.3",
                "3 <- 3.8",
                "4 <- 4.3",
                "5 <- 3.8",
                "6 <- 4.3",
                "7 <- 4.3",
                "8 <- 4.3",
                "9 <- 3.8"
            ]
        },
        "Step 6": {
            "steps": [
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 3.8",
                "2 <- 3.8",
                "3 <- 3.8",
                "4 <- 4.3",
                "5 <- 3.8",
                "6 <- 3.8",
                "7 <- 0.3",
                "8 <- 4.3",
                "9 <- 3.8"
            ]
        },
        "Step 7": {
            "steps": [
                "8 - 2 = 6 (left: 1 6 5) || 6 - 1 = 5 (left: 5 5)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "8 - 2 = 6 (left: 1 6 5) || 5 * 1 = 5 (left: 5 5)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 3.8",
                "2 <- 3.8",
                "3 <- 3.8",
                "4 <- 4.3",
                "5 <- 3.8",
                "6 <- 3.8",
                "7 <- 4.3",
                "8 <- 4.3",
                "9 <- 3.8"
            ]
        },
        "Step 8": {
            "steps": [
                "5 + 8 = 13 (left: 1 2 13) || 2 * 13 = 26 (left: 1 26)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 4.3",
                "2 <- 4.3",
                "3 <- 4.3",
                "4 <- 4.3",
                "5 <- 3.8",
                "6 <- 3.8",
                "7 <- 4.3",
                "8 <- 8.0",
                "9 <- 3.8"
            ]
        },
        "Step 9": {
            "steps": [
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "5 + 8 = 13 (left: 1 2 13) || 2 * 13 = 26 (left: 1 26) || 1 * 26 = 26 (left: 26)",
                "5 + 8 = 13 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ]
        },
        "Input": "1 2 5 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "77": {
        "puzzle": "2 2 4 6",
        "Step 0": {
            "steps": [
                "2 / 2 = 1 (left: 1 4 6)",
                "2 * 2 = 4 (left: 4 4 6)",
                "6 - 2 = 4 (left: 2 4 4)",
                "2 * 4 = 8 (left: 4 6 8)",
                "2 / 2 = 1 (left: 1 4 6)",
                "6 / 2 = 3 (left: 2 4 3)",
                "2 * 4 = 8 (left: 8 4 6)",
                "2 / 2 = 1 (left: 1 4 6)",
                "6 * 2 = 12 (left: 2 4 ",
                "4 + 2 = 6 (left: 2 4 6)"
            ],
            "Evaluation": [
                41.0,
                3.0,
                1.002,
                60.0,
                41.0,
                60.0,
                60.0,
                41.0,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.7",
                "2 <- 0.7",
                "3 <- 0.6",
                "4 <- 0.3",
                "5 <- 0.1",
                "6 <- 0.1",
                "7 <- INIT",
                "8 <- 0.3",
                "9 <- 0.6"
            ]
        },
        "Step 1": {
            "steps": [
                "6 - 2 = 4 (left: 2 4 4) || 2 + 4 = 6 (left: 4 6)",
                "2 / 2 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "2 / 2 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "2 * 4 = 8 (left: 8 4 6) || 4 + 6 = 10 (left: 10)",
                "2 * 4 = 8 (left: 4 6 8) || 6 * 8 = 48 (left: 4 48)",
                "2 * 2 = 4 (left: 4 4 6) || Input: 3 9",
                "2 * 2 = 4 (left: 4 4 6) || 4 / 4 = 1 (left: 1 6)",
                "6 * 2 = 12 (left: 2 4 ",
                "2 * 4 = 8 (left: 4 6 8) || 4 * 6 = 24 (left: 8 24)",
                "2 * 4 = 8 (left: 8 4 6) || 8 / 4 = 2 (left: 2 6)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.002,
                0.002,
                0.003,
                0.003,
                40.0,
                0.001,
                1.002,
                1.001
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.6",
                "2 <- 0.4",
                "3 <- 0.7",
                "4 <- 0.7",
                "5 <- 0.0",
                "6 <- 0.4",
                "7 <- 1.6",
                "8 <- 0.7",
                "9 <- 1.6"
            ]
        },
        "Step 2": {
            "steps": [
                "2 / 2 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "2 * 4 = 8 (left: 8 4 6) || 8 / 4 = 2 (left: 2 6)",
                "2 / 2 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "2 / 2 = 1 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "2 / 2 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "2 / 2 = 1 (left: 1 4 6) || Input: 3 9",
                "2 / 2 = 1 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "2 * 2 = 4 (left: 4 4 6) || 4 / 4 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "2 / 2 = 1 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "2 * 2 = 4 (left: 4 4 6) || 4 / 4 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ],
            "Evaluation": [
                60.0,
                1.001,
                0.002,
                2.0,
                0.002,
                0.003,
                2.0,
                0.002,
                2.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 0.5",
                "2 <- INIT",
                "3 <- 1.0",
                "4 <- 0.4",
                "5 <- INIT",
                "6 <- 2.0",
                "7 <- 0.0",
                "8 <- 0.6",
                "9 <- 2.0"
            ]
        },
        "Step 3": {
            "steps": [
                "2 / 2 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "6 / 2 = 3 (left: 2 4 3) || Possible",
                "4 * 2 = 8 (left: 2 6 8)",
                "6 - 2 = 4 (left: 2 4 4) || 2 + 4 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "2 / 2 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "4 * 2 = 8 (left: 2 6 8)",
                "2 / 2 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || Input: 5 10",
                "2 / 2 = 1 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5)",
                "2 * 4 = 8 (left: 8 4 6) || 8 * 4 = 32 (left: 6 32)",
                "2 / 2 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 5 + 10 = 15 (left: 15)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                1.002,
                60.0,
                0.002,
                1.002,
                0.003,
                3.0,
                1.001,
                0.002
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 3.3",
                "2 <- 3.0",
                "3 <- 3.3",
                "4 <- 3.0",
                "5 <- 3.3",
                "6 <- 0.3",
                "7 <- 1.6",
                "8 <- 3.7",
                "9 <- 1.6"
            ]
        },
        "Step 4": {
            "steps": [
                "6 / 2 = 3 (left: 2 4 3) || 4 / 2 = 2 (left: 2 3)",
                "6 - 2 = 4 (left: 2 4 4) || 2 + 4 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (2 + 4) = 24",
                "2 / 2 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (2 / 2) * (4 * 6) = 24",
                "6 - 2 = 4 (left: 2 4 4) || 2 + 4 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 + (2 - 6)) * 4 = 24",
                "2 / 2 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (2 / 2) * (4 * 6) = 24",
                "6 - 2 = 4 (left: 2 4 4) || 2 + 4 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (2 + 4) = 24",
                "2 * 4 = 8 (left: 4 6 8) || 4 * 6 = 24 (left: 8 24)",
                "2 * 2 = 4 (left: 4 4 6) || 4 / 4 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "2 / 2 = 1 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || 5 - 4 = 1 (left: 1)",
                "2 * 2 = 4 (left: 4 4 6) || 4 / 4 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ]
        },
        "Input": "2 2 4 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "78": {
        "puzzle": "1 6 7 12",
        "Step 0": {
            "steps": [
                "7 - 1 = 6 (left: 6 7 12)",
                "6 + 7 = 13 (left: 1 13 12)",
                "12 - 6 = 6 (left: 1 6 12)",
                "12 - 6 = 6 (left: 1 7 6)",
                "7 + 1 = 8 (left: 6 8 12)",
                "12 - 6 = 6 (left: 1 6 12)",
                "12 - 6 = 6 (left: 1 6 7)",
                "7 - 1 = 6 (left: 6 7 12)",
                "7 - 1 = 6 (left: 6 13 ",
                "7 * 1 = 7 (left: 7 12 7)"
            ],
            "Evaluation": [
                22.0,
                21.001,
                2.001,
                2.001,
                1.001,
                0.003,
                1.002,
                22.0,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.1",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- INIT",
                "5 <- 0.7",
                "6 <- INIT",
                "7 <- 0.0",
                "8 <- INIT",
                "9 <- 0.7"
            ]
        },
        "Step 1": {
            "steps": [
                "6 + 7 = 13 (left: 1 13 12)",
                "6 + 7 = 13 (left: 1 13 12) || 13 / 1 = 13 (left: 13 12)",
                "12 - 1 = 11 (left: 11 6 7)",
                "6 + 7 = 13 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12)",
                "12 - 1 = 11 (left: 11 6 7)",
                "7 - 1 = 6 (left: 6 7 12) || 7 - 6 = 1 (left:",
                "7 * 1 = 7 (left: 7 12 7)",
                "7 - 1 = 6 (left: 6 7 12) || 12 / 6 = 2 (left: 1 2)",
                "7 * 1 = 7 (left: 7 12 7)",
                "7 - 1 = 6 (left: 6 7 12) || 6 * 7 = 42 (left: 42 12)"
            ],
            "Evaluation": [
                21.001,
                0.003,
                60.0,
                20.002,
                41.0,
                0.0,
                3.0,
                0.002,
                3.0,
                1.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.4",
                "2 <- 1.2",
                "3 <- 0.1",
                "4 <- 1.4",
                "5 <- 1.4",
                "6 <- 0.2",
                "7 <- 1.2",
                "8 <- 0.1",
                "9 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "6 + 7 = 13 (left: 1 13 12) || 13 + 1 = 14 (left: 12 14)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13)",
                "6 + 7 = 13 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13)",
                "12 - 6 = 6 (left: 1 6 12) || 12 - 6 = 6 (left: 1 6)",
                "12 - 1 = 11 (left: 11 6 7) || 6 - 7 = -1 (left: -1 7)",
                "6 + 7 = 13 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                20.002,
                60.0,
                60.0,
                40.0,
                0.002,
                20.002,
                60.0
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 1.2",
                "2 <- INIT",
                "3 <- 2.9",
                "4 <- 2.5",
                "5 <- 2.4",
                "6 <- 1.0",
                "7 <- 1.2",
                "8 <- 2.9",
                "9 <- 2.9"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13)",
                "12 - 1 = 11 (left: 11 6 7)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "6 + 7 = 13 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12)",
                "12 - 1 = 11 (left: 11 6 7) || 6 / 7 = 0.86 (left: 0.86 7)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)"
            ],
            "Evaluation": [
                0.0,
                60.0,
                41.0,
                0.003,
                0.002,
                0.002,
                20.002,
                0.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 1.3",
                "2 <- 2.5",
                "3 <- 2.5",
                "4 <- 0.7",
                "5 <- 2.2",
                "6 <- 2.6",
                "7 <- 3.1",
                "8 <- 2.2",
                "9 <- 0.0"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "6 + 7 = 13 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "7 - 1 = 6 (left: 6 7 12) || 6 * 7 = 42 (left: 42 12)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "12 - 6 = 6 (left: 1 6 12) || 12 - 6 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "7 - 1 = 6 (left: 6 7 12) || 6 * 7 = 42 (left: 42 12)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.002,
                0.003,
                1.002,
                0.002,
                0.003,
                0.003,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 2.9",
                "1 <- 3.6",
                "2 <- 2.2",
                "3 <- 2.2",
                "4 <- 1.2",
                "5 <- 2.9",
                "6 <- 0.0",
                "7 <- 0.7",
                "8 <- 3.6",
                "9 <- 2.1"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "6 + 7 = 13 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "7 - 1 = 6 (left: 6 7 12) || 12 + 6 = 18 (left: 7 18)",
                "7 - 1 = 6 (left: 6 7 12) || 12 - 6 = 6 (left: 7 6)",
                "6 + 7 = 13 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.002,
                0.003,
                60.0,
                0.002,
                0.002,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 1.2",
                "2 <- 2.9",
                "3 <- 2.6",
                "4 <- 3.2",
                "5 <- 3.1",
                "6 <- 3.1",
                "7 <- 3.2",
                "8 <- 2.3",
                "9 <- 2.2"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "12 - 6 = 6 (left: 1 6 12) || 12 - 6 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "12 - 1 = 11 (left: 11 6 7) || 6 / 7 = 0.86 (left: 0.86 7)",
                "6 + 7 = 13 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)"
            ],
            "Evaluation": [
                0.0,
                60.0,
                0.002,
                0.003,
                60.0,
                0.002,
                0.003,
                0.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 2.9",
                "2 <- 2.4",
                "3 <- 5.4",
                "4 <- 2.2",
                "5 <- 2.6",
                "6 <- 2.9",
                "7 <- 5.4",
                "8 <- 1.2",
                "9 <- 2.2"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "12 - 6 = 6 (left: 1 6 12) || 12 - 6 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "12 - 1 = 11 (left: 11 6 7) || 11 / 6 = 1.83 (left: 1.83 7)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.002,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                1.001,
                0.002
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 2.5",
                "2 <- 2.8",
                "3 <- 2.6",
                "4 <- 1.4",
                "5 <- 0.7",
                "6 <- 1.2",
                "7 <- 2.5",
                "8 <- 7.8",
                "9 <- 3.1"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "6 + 7 = 13 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 6 = 6 (left: 1 6 12) || 12 - 6 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13)",
                "7 - 1 = 6 (left: 6 7 12) || 12 / 6 = ",
                "12 - 1 = 11 (left: 11 6 7) || 11 / 6 = 1.83 (left: 1.83 7)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "12 - 1 = 11 (left: 11 6 7) || 11 / 6 = 1.83 (left: 1.83 7) || 1.83 * 7 = 12.81 (left: 12.81)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.003,
                0.003,
                60.0,
                0.003,
                1.001,
                0.003,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 8.4",
                "2 <- 6.1",
                "3 <- 6.4",
                "4 <- 2.5",
                "5 <- 3.6",
                "6 <- 2.3",
                "7 <- 2.5",
                "8 <- 1.3",
                "9 <- 1.3"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "6 + 7 = 13 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "6 + 7 = 13 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 1 = 11 (left: 11 6 7) || 6 + 7 = 13 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "6 + 7 = 13 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "6 + 7 = 13 (left: 1 13 12) || 13 - 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ]
        },
        "Input": "1 6 7 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "79": {
        "puzzle": "1 8 9 12",
        "Step 0": {
            "steps": [
                "9 - 1 = 8 (left: 8 9 12)",
                "8 - 1 = 7 (left: 7 9 12)",
                "9 - 8 = 1 (left: 1 1 12)",
                "9 - 1 = 8 (left: 8 8 12)",
                "9 + 3 = 12 (left: 8 9 12)",
                "12 - 9 = 3 (left: 1 8 3)",
                "9 / 1 = 9 (left: 8 9 12)",
                "12 - 1 = 11 (left: 8 9 11)",
                "12 - 8 = 4 (left: 1 9 ",
                "9 + 1 = 10 (left: 8 10 12)"
            ],
            "Evaluation": [
                3.0,
                2.001,
                60.0,
                2.001,
                3.0,
                40.001,
                3.0,
                3.0,
                41.0,
                3.0
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 0.5",
                "2 <- 0.2",
                "3 <- INIT",
                "4 <- 0.5",
                "5 <- INIT",
                "6 <- 0.8",
                "7 <- 0.8",
                "8 <- 0.0",
                "9 <- 0.8"
            ]
        },
        "Step 1": {
            "steps": [
                "9 / 1 = 9 (left: 8 9 12) || 9 - 8 = 1 (left: 1 12)",
                "12 - 9 = 3 (left: 1 8 3) || 1 * 8 = 8 (left: 3 8)",
                "9 - 8 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "9 + 1 = 10 (left: 8 10 12)",
                "12 - 9 = 3 (left: 1 8 3) || 1 * 8 = 8 (left: 8 8)",
                "12 - 1 = 11 (left: 8 9 11)",
                "12 - 8 = 4 (left: 1 9  || 9 / 1 = 9 (left: 9)",
                "12 - 8 = 4 (left: 1 9  || 9 / 1 = 9 (left: 9)",
                "9 - 1 = 8 (left: 8 9 12) || 9 - 8 = 1 (left: 1 12)",
                "12 - 8 = 4 (left: 1 9  || 1 * 9 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.002,
                3.0,
                0.003,
                3.0,
                0.001,
                0.001,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 0.5",
                "2 <- 0.2",
                "3 <- 0.2",
                "4 <- 1.1",
                "5 <- 0.2",
                "6 <- 0.0",
                "7 <- 0.5",
                "8 <- 0.2",
                "9 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 9 = 3 (left: 1 8 3) || 1 * 8 = 8 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "12 - 9 = 3 (left: 1 8 3) || 1 * 8 = 8 (left: 3 8)",
                "9 - 8 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "9 - 8 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "12 - 9 = 3 (left: 1 8 3) || 1 * 8 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "9 - 8 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "9 - 1 = 8 (left: 8 9 12) || 9 - 8 = 1 (left: 1 12)",
                "12 - 9 = 3 (left: 1 8 3) || 3 * 1 = 3 (left: 3)",
                "9 - 8 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "9 - 8 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.002,
                40.0,
                60.0,
                0.002,
                0.002,
                0.0,
                40.0,
                0.002
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.1",
                "2 <- 1.1",
                "3 <- 2.4",
                "4 <- 2.4",
                "5 <- 2.1",
                "6 <- 2.1",
                "7 <- 2.3",
                "8 <- 1.1",
                "9 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 9 = 3 (left: 1 8 3) || 1 * 8 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 8) * (12 - 9) = 24",
                "12 - 9 = 3 (left: 1 8 3) || 1 * 8 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "12 - 9 = 3 (left: 1 8 3) || 1 * 8 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "12 - 9 = 3 (left: 1 8 3) || 1 * 8 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 1 * 8 * (12 - 9) = 24",
                "12 - 9 = 3 (left: 1 8 3) || 1 * 8 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 1 * 8 * (12 - 9) = 24",
                "12 - 9 = 3 (left: 1 8 3) || 1 * 8 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "12 - 9 = 3 (left: 1 8 3) || 1 * 8 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "9 - 8 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 - 9 = 3 (left: 1 8 3) || 1 * 8 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "12 - 9 = 3 (left: 1 8 3) || 1 * 8 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)"
            ]
        },
        "Input": "1 8 9 12",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "80": {
        "puzzle": "6 7 12 12",
        "Step 0": {
            "steps": [
                "12 - 6 = 6 (left: 6 12 12)",
                "7 - 6 = 1 (left: 1 12 12)",
                "12 - 7 = 5 (left: 5 12 12)",
                "12 - 7 = 5 (left: 6 5 12)",
                "12 - 6 = 6 (left: 6 12 12)",
                "12 - 7 = 5 (left: 5 12 12)",
                "6 * 7 = 42 (left: 12 12 42)",
                "12 / 6 = 2 (left: 2 12 12)",
                "7 + 12 = 19 (left: 6 19 ",
                "12 + 6 = 18 (left: 7 12 18)"
            ],
            "Evaluation": [
                3.0,
                0.003,
                2.001,
                3.0,
                3.0,
                1.002,
                20.002,
                0.003,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.6",
                "5 <- INIT",
                "6 <- 0.9",
                "7 <- INIT",
                "8 <- 0.6",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "7 - 6 = 1 (left: 1 12 12)",
                "6 * 7 = 42 (left: 12 12 42)",
                "6 * 7 = 42 (left: 12 12 42)",
                "12 + 6 = 18 (left: 7 12 18)",
                "6 * 7 = 42 (left: 12 12 42) || 42 - 12 = 30 (left: 12 30)",
                "6 * 7 = 42 (left: 12 12 42)",
                "12 + 6 = 18 (left: 7 12 18) || 18 - 7 = 11 (left: 11 18)",
                "12 - 7 = 5 (left: 5 12 ",
                "6 * 7 = 42 (left: 12 12 42) || 12 / 12 = 1 (left: 1 12 42)",
                "6 * 7 = 42 (left: 12 12 42)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                20.002,
                3.0,
                0.003,
                20.002,
                0.003,
                1.002,
                1.0,
                20.002
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 1.5",
                "2 <- 1.2",
                "3 <- 1.1",
                "4 <- 1.5",
                "5 <- 0.5",
                "6 <- 1.9",
                "7 <- INIT",
                "8 <- 1.1",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "6 * 7 = 42 (left: 12 12 42) || 12 * 12 = 144 (left: 144 42)",
                "6 * 7 = 42 (left: 12 12 42) || 42 - 12 = 30 (left: 12 30)",
                "6 * 7 = 42 (left: 12 12 42) || 42 - 12 = 30 (left: 12 30)",
                "6 * 7 = 42 (left: 12 12 42) || 12 / 12 = 1 (left: 1 12 42)",
                "6 * 7 = 42 (left: 12 12 42) || 42 - 12 = 30 (left: 12 30)",
                "12 - 7 = 5 (left: 5 12 12) || 12 / 5 = 2.4 (left: 2.4 12)",
                "6 * 7 = 42 (left: 12 12 42) || 12 / 12 = 1 (left: 1 12 42)",
                "12 - 7 = 5 (left: 5 12 ",
                "6 * 7 = 42 (left: 12 12 42) || 12 / 12 = 1 (left: 1 12 42)",
                "6 * 7 = 42 (left: 12 12 42)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                1.0,
                0.003,
                1.002,
                1.0,
                1.002,
                1.0,
                20.002
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- INIT",
                "2 <- 2.9",
                "3 <- INIT",
                "4 <- 1.1",
                "5 <- 1.2",
                "6 <- 1.9",
                "7 <- INIT",
                "8 <- 0.4",
                "9 <- 1.2"
            ]
        },
        "Step 3": {
            "steps": [
                "6 * 7 = 42 (left: 12 12 42) || 12 * 12 = 144 (left: 144 42)",
                "6 * 7 = 42 (left: 12 12 42)",
                "6 * 7 = 42 (left: 12 12 42) || 42 - 12 = 30 (left: 12 30)",
                "12 + 6 = 18 (left: 7 12 18)",
                "6 * 7 = 42 (left: 12 12 42) || 42 - 12 = 30 (left: 12 30)",
                "6 * 7 = 42 (left: 12 12 42) || 42 - 12 = 30 (left: 12 30)",
                "6 * 7 = 42 (left: 12 12 42) || 12 / 12 = 1 (left: 1 12 42)",
                "12 - 7 = 5 (left: 5 12 ",
                "12 - 6 = 6 (left: 6 12 12) || 12 - 6 = 6 (left: 6 12)",
                "6 * 7 = 42 (left: 12 12 42) || 42 - 12 = 30 (left: 12 30)"
            ],
            "Evaluation": [
                0.001,
                20.002,
                0.003,
                3.0,
                0.003,
                0.003,
                1.0,
                1.002,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- INIT",
                "2 <- 1.5",
                "3 <- 1.5",
                "4 <- 1.5",
                "5 <- 0.6",
                "6 <- 1.9",
                "7 <- 3.1",
                "8 <- 1.9",
                "9 <- 1.1"
            ]
        },
        "Step 4": {
            "steps": [
                "6 * 7 = 42 (left: 12 12 42) || 12 * 12 = 144 (left: 144 42)",
                "6 * 7 = 42 (left: 12 12 42)",
                "6 * 7 = 42 (left: 12 12 42) || 42 - 12 = 30 (left: 12 30)",
                "6 * 7 = 42 (left: 12 12 42) || 12 / 12 = 1 (left: 1 12 42)",
                "6 * 7 = 42 (left: 12 12 42) || 42 - 12 = 30 (left: 12 30)",
                "6 * 7 = 42 (left: 12 12 42) || 42 - 12 = 30 (left: 12 30)",
                "6 * 7 = 42 (left: 12 12 42) || 12 / 12 = 1 (left: 1 12 42)",
                "6 * 7 = 42 (left: 12 12 42) || 12 - 12 = 0 (left: 0 12 42)",
                "6 * 7 = 42 (left: 12 12 42) || 12 / 12 = 1 (left: 1 12 42)",
                "6 * 7 = 42 (left: 12 12 42) || 42 - 12 = 30 (left: 12 30)"
            ],
            "Evaluation": [
                0.001,
                20.002,
                0.003,
                1.0,
                0.003,
                0.003,
                1.0,
                1.002,
                1.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- INIT",
                "2 <- 2.9",
                "3 <- 4.1",
                "4 <- 4.1",
                "5 <- 3.3",
                "6 <- 1.1",
                "7 <- INIT",
                "8 <- 4.1",
                "9 <- 1.2"
            ]
        },
        "Step 5": {
            "steps": [
                "6 * 7 = 42 (left: 12 12 42) || 12 * 12 = 144 (left: 144 42)",
                "6 * 7 = 42 (left: 12 12 42)",
                "6 * 7 = 42 (left: 12 12 42) || 42 - 12 = 30 (left: 12 30)",
                "6 * 7 = 42 (left: 12 12 42) || 12 / 12 = 1 (left: 1 12 42)",
                "6 * 7 = 42 (left: 12 12 42) || 42 - 12 = 30 (left: 12 30)",
                "12 + 6 = 18 (left: 7 12 18) || 18 / 7 = 2.57 (left: 2.57 12)",
                "6 * 7 = 42 (left: 12 12 42) || 12 / 12 = 1 (left: 1 12 42)",
                "12 - 7 = 5 (left: 5 12 ",
                "6 * 7 = 42 (left: 12 12 42) || 12 / 12 = 1 (left: 1 12 42)",
                "6 * 7 = 42 (left: 12 12 42) || 42 - 12 = 30 (left: 12 30)"
            ],
            "Evaluation": [
                0.001,
                20.002,
                0.003,
                1.0,
                0.003,
                0.003,
                1.0,
                1.002,
                1.0,
                0.003
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 0.6",
                "2 <- 1.9",
                "3 <- 1.2",
                "4 <- 3.1",
                "5 <- 4.3",
                "6 <- 0.6",
                "7 <- 5.1",
                "8 <- 5.1",
                "9 <- 5.3"
            ]
        },
        "Step 6": {
            "steps": [
                "6 * 7 = 42 (left: 12 12 42) || 12 * 12 = 144 (left: 144 42)",
                "6 * 7 = 42 (left: 12 12 42) || 42 - 12 = 30 (left: 12 30)",
                "6 * 7 = 42 (left: 12 12 42) || 42 - 12 = 30 (left: 12 30)",
                "6 * 7 = 42 (left: 12 12 42) || 12 / 12 = 1 (left: 1 12 42)",
                "6 * 7 = 42 (left: 12 12 42) || 42 - 12 = 30 (left: 12 30)",
                "6 * 7 = 42 (left: 12 12 42) || 12 / 12 = 1 (left: 1 12 42) || 42 / 12 = 3.5 (",
                "6 * 7 = 42 (left: 12 12 42) || 12 / 12 = 1 (left: 1 12 42)",
                "6 * 7 = 42 (left: 12 12 42) || 12 - 12 = 0 (left: 0 12 42)",
                "6 * 7 = 42 (left: 12 12 42) || 12 / 12 = 1 (left: 1 12 42)",
                "6 * 7 = 42 (left: 12 12 42) || 12 / 12 = 1 (left: 1 12 42) || 42 / 1 = 42 (left: 12 42)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                1.0,
                0.003,
                0.003,
                1.0,
                1.002,
                1.0,
                0.0
            ],
            "Resampling": [
                "0 <- 2.9",
                "1 <- 1.5",
                "2 <- 3.1",
                "3 <- 0.6",
                "4 <- 4.1",
                "5 <- 4.1",
                "6 <- 1.5",
                "7 <- 1.1",
                "8 <- 3.1",
                "9 <- INIT"
            ]
        },
        "Step 7": {
            "steps": [
                "6 * 7 = 42 (left: 12 12 42) || 12 * 12 = 144 (left: 144 42)",
                "6 * 7 = 42 (left: 12 12 42) || 42 - 12 = 30 (left: 12 30)",
                "6 * 7 = 42 (left: 12 12 42) || 42 - 12 = 30 (left: 12 30)",
                "6 * 7 = 42 (left: 12 12 42) || 12 / 12 = 1 (left: 1 12 42)",
                "6 * 7 = 42 (left: 12 12 42) || 42 - 12 = 30 (left: 12 30)",
                "6 * 7 = 42 (left: 12 12 42) || 42 - 12 = 30 (left: 12 30)",
                "6 * 7 = 42 (left: 12 12 42) || 12 / 12 = 1 (left: 1 12 42)",
                "6 * 7 = 42 (left: 12 12 42) || 12 - 12 = 0 (left: 0 12 42)",
                "6 * 7 = 42 (left: 12 12 42) || 12 / 12 = 1 (left: 1 12 42)",
                "6 * 7 = 42 (left: 12 12 42)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                1.0,
                0.003,
                0.003,
                1.0,
                1.002,
                1.0,
                20.002
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- INIT",
                "2 <- 1.2",
                "3 <- 1.3",
                "4 <- 7.9",
                "5 <- 7.9",
                "6 <- 1.5",
                "7 <- 5.1",
                "8 <- 7.9",
                "9 <- 7.9"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 7 = 5 (left: 5 12 12) || 12 / 5 = 2.4 (left: 2.4 12)",
                "6 * 7 = 42 (left: 12 12 42)",
                "6 * 7 = 42 (left: 12 12 42) || 42 - 12 = 30 (left: 12 30)",
                "12 + 6 = 18 (left: 7 12 18) || 18 - 7 = 11 (left: 11 18)",
                "6 * 7 = 42 (left: 12 12 42) || 42 - 12 = 30 (left: 12 30)",
                "6 * 7 = 42 (left: 12 12 42) || 42 - 12 = 30 (left: 12 30)",
                "6 * 7 = 42 (left: 12 12 42) || 12 / 12 = 1 (left: 1 12 42)",
                "6 * 7 = 42 (left: 12 12 42) || 12 - 12 = 0 (left: 0 12 42)",
                "6 * 7 = 42 (left: 12 12 42) || 12 / 12 = 1 (left: 1 12 42)",
                "6 * 7 = 42 (left: 12 12 42) || 42 - 12 = 30 (left: 12 30)"
            ],
            "Evaluation": [
                1.002,
                20.002,
                0.003,
                0.003,
                0.003,
                0.003,
                1.0,
                1.002,
                1.0,
                0.003
            ],
            "Resampling": [
                "0 <- 7.9",
                "1 <- 7.9",
                "2 <- 0.4",
                "3 <- 7.9",
                "4 <- 4.1",
                "5 <- 1.2",
                "6 <- 8.1",
                "7 <- 1.2",
                "8 <- 8.1",
                "9 <- 5.1"
            ]
        },
        "Step 9": {
            "steps": [
                "6 * 7 = 42 (left: 12 12 42) || 12 * 12 = 144 (left: 144 42)",
                "6 * 7 = 42 (left: 12 12 42) || 42 - 12 = 30 (left: 12 30)",
                "12 - 6 = 6 (left: 6 12 12) || 12 * 6 = 72 (left: 12 72)",
                "6 * 7 = 42 (left: 12 12 42) || 12 / 12 = 1 (left: 1 12 42)",
                "6 * 7 = 42 (left: 12 12 42) || 42 - 12 = 30 (left: 12 30)",
                "6 * 7 = 42 (left: 12 12 42) || 42 - 12 = 30 (left: 12 30)",
                "6 * 7 = 42 (left: 12 12 42) || 12 / 12 = 1 (left: 1 12 42)",
                "6 * 7 = 42 (left: 12 12 42) || 12 - 12 = 0 (left: 0 12 42)",
                "6 * 7 = 42 (left: 12 12 42) || 12 / 12 = 1 (left: 1 12 42)",
                "6 * 7 = 42 (left: 12 12 42) || 42 - 12 = 30 (left: 12 30)"
            ]
        },
        "Input": "6 7 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "81": {
        "puzzle": "1 3 10 10",
        "Step 0": {
            "steps": [
                "10 - 3 = 7 (left: 1 7 10)",
                "3 + 10 = 13 (left: 1 10 13)",
                "1 * 3 = 3 (left: 3 10 10)",
                "10 / 1 = 10 (left: 3 10 10)",
                "10 + 1 = 11 (left: 3 10 11)",
                "1 * 3 = 3 (left: 3 10 10)",
                "10 - 3 = 7 (left: 1 7 10)",
                "10 + 1 = 11 (left: 3 10 11)",
                "10 - 3 = 7 (left: 1 7 ",
                "10 / 1 = 10 (left: 3 10 10)"
            ],
            "Evaluation": [
                2.001,
                1.002,
                0.003,
                20.002,
                0.003,
                1.002,
                2.001,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.3",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 0.3",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "3 * 1 = 3 (left: 3 10 10)",
                "10 - 1 = 9 (left: 9 10 10)",
                "10 / 1 = 10 (left: 3 10 10) || 3 * 10 = 30 (left: 10 30)",
                "10 / 1 = 10 (left: 3 10 10)",
                "10 - 1 = 9 (left: 9 10 10)",
                "10 / 1 = 10 (left: 3 10 10) || Input:",
                "10 / 1 = 10 (left: 3 10 10)",
                "10 + 1 = 11 (left: 3 10 ",
                "10 / 1 = 10 (left: 3 10 10)",
                "10 - 1 = 9 (left: 9 10 10)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                0.003,
                0.003,
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.3",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 0.3",
                "8 <- 1.5",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "10 / 1 = 10 (left: 3 10 10) || Input: || Please provide a list of numbers to find possible next steps.",
                "10 - 1 = 9 (left: 9 10 10)",
                "10 - 1 = 9 (left: 9 10 10)",
                "10 / 1 = 10 (left: 3 10 10)",
                "10 / 1 = 10 (left: 3 10 10) || 3 * 10 = 30 (left: 10 30)",
                "10 - 1 = 9 (left: 9 10 10)",
                "10 / 1 = 10 (left: 3 10 10)",
                "10 / 1 = 10 (left: 3 10 10) || 10 / 3 = 3.33 (left: 3.33 10)",
                "10 / 1 = 10 (left: 3 10 10) || Input: || Please provide a list of numbers to find possible next steps.",
                "10 - 1 = 9 (left: 9 10 10)"
            ],
            "Evaluation": [
                0.003,
                1.001,
                1.001,
                0.003,
                0.003,
                1.001,
                0.003,
                1.001,
                0.001,
                1.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.3",
                "3 <- 0.3",
                "4 <- 1.9",
                "5 <- 1.5",
                "6 <- 0.3",
                "7 <- 1.5",
                "8 <- 0.5",
                "9 <- 1.5"
            ]
        },
        "Step 3": {
            "steps": [
                "3 * 1 = 3 (left: 3 10 10)",
                "10 - 1 = 9 (left: 9 10 10)",
                "10 / 1 = 10 (left: 3 10 10) || 3 * 10 = 30 (left: 10 30)",
                "10 / 1 = 10 (left: 3 10 10) || 10 - 3 = 7 (left: 7 10)",
                "10 - 1 = 9 (left: 9 10 10) || 10 * 9 = 90 (left: 10 10 90)",
                "10 / 1 = 10 (left: 3 10 10) || Input: || Please provide a list of numbers to find possible next steps.",
                "10 / 1 = 10 (left: 3 10 10) || 10 - 3 = 7 (left: 7 10)",
                "10 / 1 = 10 (left: 3 10 10) || Input: || Please provide a list of numbers to find possible next steps.",
                "1 * 3 = 3 (left: 3 10 10) || 10 - 3 = 7 (left: 7 10)",
                "10 / 1 = 10 (left: 3 10 10) || Input: || Please provide a list of numbers to find possible next steps."
            ],
            "Evaluation": [
                0.003,
                1.001,
                0.003,
                1.002,
                1.002,
                0.001,
                1.002,
                0.001,
                1.002,
                0.001
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 3.1",
                "2 <- 2.9",
                "3 <- 2.5",
                "4 <- 1.1",
                "5 <- 0.0",
                "6 <- 1.5",
                "7 <- 2.7",
                "8 <- 1.5",
                "9 <- 1.5"
            ]
        },
        "Step 4": {
            "steps": [
                "10 / 1 = 10 (left: 3 10 10) || 10 / 3 = 3.33 (left: 3.33 10)",
                "10 - 1 = 9 (left: 9 10 10) || 10 * 9 = 90 (left: 10 10 90)",
                "10 - 1 = 9 (left: 9 10 10) || 10 * 9 = 90 (left: 10 10 90)",
                "10 - 1 = 9 (left: 9 10 10) || 10 / 9 = 1.11 (left: 1.11 10 10)",
                "10 - 1 = 9 (left: 9 10 10) || 10 * 9 = 90 (left: 10 10 90)",
                "10 - 3 = 7 (left: 1 7 10) || 10 - 7 = 3 (left:",
                "10 / 1 = 10 (left: 3 10 10) || Input: || Please provide a list of numbers to find possible next steps.",
                "10 / 1 = 10 (left: 3 10 10) || 10 / 3 = 3.33 (left: 3.33 10) || 3.33 * 10 = 33.3 (left: 10 33.3)",
                "10 / 1 = 10 (left: 3 10 10) || Input: || Please provide a list of numbers to find possible next steps.",
                "10 / 1 = 10 (left: 3 10 10) || Input: || Please provide a list of numbers to find possible next steps."
            ],
            "Evaluation": [
                1.001,
                1.002,
                1.002,
                1.002,
                1.002,
                0.001,
                0.001,
                0.002,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 2.7",
                "2 <- 0.3",
                "3 <- 4.2",
                "4 <- 1.5",
                "5 <- 0.0",
                "6 <- 1.5",
                "7 <- 2.9",
                "8 <- 1.5",
                "9 <- 1.5"
            ]
        },
        "Step 5": {
            "steps": [
                "10 - 1 = 9 (left: 9 10 10) || 10 * 9 = 90 (left: 10 10 90) || 10 * 10 = 100 (left: 100 90)",
                "10 / 1 = 10 (left: 3 10 10) || 10 / 3 = 3.33 (left: 3.33 10) || 10 / 3.33 = 3.003 (left: 3.33 3.003)",
                "10 / 1 = 10 (left: 3 10 10) || 3 * 10 = 30 (left: 10 30)",
                "10 - 1 = 9 (left: 9 10 10) || 10 * 9 = 90 (left: 10 10 90) || 10 / 10 = 1 (left: 1 90)",
                "10 / 1 = 10 (left: 3 10 10) || Input: || Please provide a list of numbers to find possible next steps.",
                "10 - 3 = 7 (left: 1 7 10) || 10 - 7 = 3 (left:",
                "10 / 1 = 10 (left: 3 10 10) || Input: || Please provide a list of numbers to find possible next steps.",
                "10 - 1 = 9 (left: 9 10 10) || 10 - 10 = 0 (left: ",
                "10 / 1 = 10 (left: 3 10 10) || Input: || Please provide a list of numbers to find possible next steps.",
                "10 / 1 = 10 (left: 3 10 10) || Input: || Please provide a list of numbers to find possible next steps."
            ],
            "Evaluation": [
                0.003,
                2.0,
                0.003,
                1.002,
                0.001,
                0.001,
                0.001,
                0.0,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 1.5",
                "2 <- 0.3",
                "3 <- 3.3",
                "4 <- 0.3",
                "5 <- 0.3",
                "6 <- 0.1",
                "7 <- 4.2",
                "8 <- 5.1",
                "9 <- 0.6"
            ]
        },
        "Step 6": {
            "steps": [
                "10 / 1 = 10 (left: 3 10 10) || Input: || Please provide a list of numbers to find possible next steps.",
                "10 / 1 = 10 (left: 3 10 10) || Input: || Please provide a list of numbers to find possible next steps.",
                "10 / 1 = 10 (left: 3 10 10) || 3 * 10 = 30 (left: 10 30)",
                "10 / 1 = 10 (left: 3 10 10) || 10 - 3 = 7 (left: 7 10) || 10 - 7 = 3 (left: 3)",
                "10 / 1 = 10 (left: 3 10 10) || 3 * 10 = 30 (left: 10 30)",
                "10 / 1 = 10 (left: 3 10 10) || Input:",
                "3 + 10 = 13 (left: 1 10 13) || 13 - 1 = 12 (left: 10 12)",
                "10 - 1 = 9 (left: 9 10 10) || 10 * 9 = 90 (left: 10 10 90) || 90 - 10 = 80 (left: 10 80)",
                "10 / 1 = 10 (left: 3 10 10) || 10 / 3 = 3.33 (left: 3.33 10) || 10 / 3.33 = 3.003 (left: 3.33 3.003) || 3.33 * 3.003 = 9.99899 (left: 9.99899)",
                "10 - 3 = 7 (left: 1 7 10) || 1 * 7 = 7 (left: 7 10)"
            ],
            "Evaluation": [
                0.001,
                0.001,
                0.003,
                0.0,
                0.003,
                20.002,
                0.002,
                40.001,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 6.7",
                "1 <- 6.5",
                "2 <- 1.5",
                "3 <- 6.7",
                "4 <- 3.3",
                "5 <- 1.5",
                "6 <- 6.5",
                "7 <- 6.7",
                "8 <- 3.6",
                "9 <- 6.5"
            ]
        },
        "Step 7": {
            "steps": [
                "10 - 1 = 9 (left: 9 10 10) || 10 * 9 = 90 (left: 10 10 90) || 90 - 10 = 80 (left: 10 80) || 10 * 80 = 800 (left: 800)",
                "10 / 1 = 10 (left: 3 10 10) || Input: || Please provide a list of numbers to find possible next steps.",
                "10 / 1 = 10 (left: 3 10 10) || Input: || Please provide a list of numbers to find possible next steps.",
                "10 - 1 = 9 (left: 9 10 10) || 10 * 9 = 90 (left: 10 10 90) || 90 - 10 = 80 (left: 10 80) || 10 + 80 = 90 (left: 90)",
                "10 / 1 = 10 (left: 3 10 10) || 10 - 3 = 7 (left: 7 10) || 10 / 7 = 1.43 (left: 1.43)",
                "10 / 1 = 10 (left: 3 10 10) || Input: || Please provide a list of numbers to find possible next steps.",
                "10 / 1 = 10 (left: 3 10 10) || Input: || Please provide a list of numbers to find possible next steps.",
                "10 - 1 = 9 (left: 9 10 10) || 10 * 9 = 90 (left: 10 10 90) || 90 - 10 = 80 (left: 10 80) || 80 / 10 = 8 (left: 8)",
                "10 / 1 = 10 (left: 3 10 10) || 10 - 3 = 7 (left: 7 10) || 10 - 7 = 3 (left: 3)",
                "10 / 1 = 10 (left: 3 10 10) || Input: || Please provide a list of numbers to find possible next steps."
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                0.003,
                0.002,
                0.001,
                0.001,
                0.002,
                0.0,
                0.001
            ],
            "Resampling": [
                "0 <- 6.5",
                "1 <- 6.5",
                "2 <- 6.7",
                "3 <- 6.5",
                "4 <- 6.7",
                "5 <- 6.7",
                "6 <- 1.5",
                "7 <- 6.7",
                "8 <- 6.7",
                "9 <- 0.3"
            ]
        },
        "Step 8": {
            "steps": [
                "10 / 1 = 10 (left: 3 10 10) || Input: || Please provide a list of numbers to find possible next steps.",
                "10 / 1 = 10 (left: 3 10 10) || Input: || Please provide a list of numbers to find possible next steps.",
                "10 - 1 = 9 (left: 9 10 10) || 10 * 9 = 90 (left: 10 10 90) || 90 - 10 = 80 (left: 10 80) || 80 - 10 = 70 (left: 70)",
                "10 / 1 = 10 (left: 3 10 10) || Input: || Please provide a list of numbers to find possible next steps.",
                "10 - 1 = 9 (left: 9 10 10) || 10 * 9 = 90 (left: 10 10 90) || 90 - 10 = 80 (left: 10 80) || 80 - 10 = 70 (left: 70)",
                "10 - 1 = 9 (left: 9 10 10) || 10 * 9 = 90 (left: 10 10 90) || 90 - 10 = 80 (left: 10 80) || 80 - 10 = 70 (left: 70)",
                "10 / 1 = 10 (left: 3 10 10) || Input: || Please provide a list of numbers to find possible next steps.",
                "10 - 1 = 9 (left: 9 10 10) || 10 * 9 = 90 (left: 10 10 90) || 90 - 10 = 80 (left: 10 80) || 80 / 10 = 8 (left: 8)",
                "10 - 1 = 9 (left: 9 10 10) || 10 * 9 = 90 (left: 10 10 90) || 90 - 10 = 80 (left: 10 80) || 80 / 10 = 8 (left: 8)",
                "10 / 1 = 10 (left: 3 10 10) || 3 * 10 = 30 (left: 10 30)"
            ],
            "Evaluation": [
                0.001,
                0.001,
                0.003,
                0.001,
                0.003,
                0.003,
                0.001,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 6.5",
                "2 <- 4.3",
                "3 <- 6.7",
                "4 <- 6.5",
                "5 <- 6.5",
                "6 <- 6.9",
                "7 <- 3.6",
                "8 <- 6.7",
                "9 <- 6.5"
            ]
        },
        "Step 9": {
            "steps": [
                "10 / 1 = 10 (left: 3 10 10) || 10 / 3 = 3.33 (left: 3.33 10) || 10 / 3.33 = 3.003 (left: 3.33 3.003) || 3.33 / 3.003 = 1.109 (left: 1.109)",
                "10 / 1 = 10 (left: 3 10 10) || Input: || Please provide a list of numbers to find possible next steps.",
                "10 - 1 = 9 (left: 9 10 10) || 10 / 9 = 1.11 (left: 1.11 10 10) || 1.11 * 10 = 11.1 (left: 10 11.1)",
                "10 - 1 = 9 (left: 9 10 10) || 10 * 9 = 90 (left: 10 10 90) || 90 - 10 = 80 (left: 10 80) || 80 / 10 = 8 (left: 8)",
                "10 / 1 = 10 (left: 3 10 10) || Input: || Please provide a list of numbers to find possible next steps.",
                "10 / 1 = 10 (left: 3 10 10) || Input: || Please provide a list of numbers to find possible next steps.",
                "10 - 3 = 7 (left: 1 7 10) || 1 * 7 = 7 (left: 7 10) || 10 - 7 = 3 (left: 3)",
                "10 / 1 = 10 (left: 3 10 10) || 10 - 3 = 7 (left: 7 10) || 10 - 7 = 3 (left: 3)",
                "10 - 1 = 9 (left: 9 10 10) || 10 * 9 = 90 (left: 10 10 90) || 90 - 10 = 80 (left: 10 80) || 80 / 10 = 8 (left: 8)",
                "10 / 1 = 10 (left: 3 10 10) || Input: || Please provide a list of numbers to find possible next steps."
            ]
        },
        "Input": "1 3 10 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "82": {
        "puzzle": "2 3 3 8",
        "Step 0": {
            "steps": [
                "8 - 3 = 5 (left: 3 5 5)",
                "3 * 3 = 9 (left: 2 9 8)",
                "8 / 2 = 4 (left: 3 3 4)",
                "3 + 3 = 6 (left: 2 6 8)",
                "8 - 2 = 6 (left: 6 3 8)",
                "3 * 3 = 9 (left: 2 8 9)",
                "3 + 3 = 6 (left: 2 6 8)",
                "8 - 3 = 5 (left: 2 5 8)",
                "8 - 2 = 6 (left: 3 6 ",
                "8 - 3 = 5 (left: 2 3 5)"
            ],
            "Evaluation": [
                22.0,
                1.001,
                1.002,
                1.002,
                3.0,
                2.001,
                1.002,
                0.003,
                41.0,
                3.0
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 0.0",
                "2 <- 0.8",
                "3 <- 0.8",
                "4 <- 0.8",
                "5 <- 0.8",
                "6 <- INIT",
                "7 <- 0.0",
                "8 <- 0.8",
                "9 <- 0.8"
            ]
        },
        "Step 1": {
            "steps": [
                "8 - 2 = 6 (left: 3 6  || 6 / 3 = 2 (left: 2)",
                "8 - 3 = 5 (left: 3 5 5) || 3 * 5 = 15 (left: 5 5 15)",
                "8 - 2 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3)",
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18)",
                "8 - 2 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3)",
                "8 - 2 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3)",
                "8 - 3 = 5 (left: 2 5 8)",
                "8 - 3 = 5 (left: 3 5 5) || 5 / 3 = 1.67 (left: 1.67 5)",
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18)",
                "8 - 2 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3)"
            ],
            "Evaluation": [
                0.001,
                1.002,
                0.0,
                60.0,
                0.0,
                0.0,
                0.003,
                0.002,
                60.0,
                0.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 1.1",
                "2 <- 1.3",
                "3 <- 0.8",
                "4 <- 1.3",
                "5 <- 0.8",
                "6 <- INIT",
                "7 <- 1.3",
                "8 <- 1.8",
                "9 <- 0.8"
            ]
        },
        "Step 2": {
            "steps": [
                "8 - 3 = 5 (left: 3 5 5) || 5 / 3 = 1.67 (left: 1.67 5)",
                "8 - 3 = 5 (left: 3 5 5) || 3 * 5 = 15 (left: 5 5 15) || 5 * 15 = 75 (left: 5 75)",
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18)",
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "8 - 2 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3)",
                "8 - 3 = 5 (left: 2 5 8)",
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "8 - 2 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3)"
            ],
            "Evaluation": [
                0.002,
                1.002,
                0.003,
                60.0,
                0.003,
                0.0,
                0.003,
                0.003,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.3",
                "2 <- 2.3",
                "3 <- 2.3",
                "4 <- 1.3",
                "5 <- 2.3",
                "6 <- 2.3",
                "7 <- 1.3",
                "8 <- 0.0",
                "9 <- 1.8"
            ]
        },
        "Step 3": {
            "steps": [
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8)",
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18."
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 1.8",
                "2 <- 2.3",
                "3 <- 2.3",
                "4 <- 2.3",
                "5 <- 2.3",
                "6 <- 2.3",
                "7 <- 3.8",
                "8 <- 3.8",
                "9 <- 3.8"
            ]
        },
        "Step 4": {
            "steps": [
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 4.9",
                "2 <- 4.9",
                "3 <- 4.9",
                "4 <- 0.8",
                "5 <- 4.9",
                "6 <- 4.9",
                "7 <- 1.3",
                "8 <- 3.8",
                "9 <- 2.3"
            ]
        },
        "Step 5": {
            "steps": [
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (8 + (8 - 3)) = 24",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 - 3) + (5 + 3) = 24",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 - 3) + (5 + 3) = 24",
                "8 - 2 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3)",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (8 + (5 - 3)) = 24",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 - 3) * (3 + 5) = 24",
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18."
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.003,
                0.003,
                0.0,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 4.9",
                "2 <- 4.9",
                "3 <- 1.8",
                "4 <- 2.3",
                "5 <- 1.8",
                "6 <- 0.0",
                "7 <- 2.3",
                "8 <- 0.0",
                "9 <- 3.8"
            ]
        },
        "Step 6": {
            "steps": [
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (8 + (5 - 3)) = 24",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (8 + (5 - 3)) = 24",
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8)",
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8)",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                60.0,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 6.9",
                "1 <- 3.8",
                "2 <- 4.9",
                "3 <- 5.1",
                "4 <- 6.9",
                "5 <- 1.8",
                "6 <- 6.8",
                "7 <- 3.8",
                "8 <- 6.6",
                "9 <- 3.8"
            ]
        },
        "Step 7": {
            "steps": [
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (8 + (5 - 3)) = 24",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (8 + (5 - 3)) = 24",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (8 + (8 - 3)) = 24 || Input: 3 3 5 7\nSteps:\n3 + 7 = 10 (left: 3 5 10)\n10 - 5 = 5 (left: 3 5)\n5 * 3 = 15 (left: 15)\n15 + 3 = 18 (left: 18)\n18 - 3 = 15 (left: 15)\n15 + 5 = 20 (left: 20)\n20 + ",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (8 + (5 - 3)) = 24",
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.003,
                60.0,
                0.003,
                0.003,
                0.002,
                0.002,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 6.9",
                "2 <- 6.8",
                "3 <- 7.1",
                "4 <- 4.9",
                "5 <- 6.8",
                "6 <- 7.9",
                "7 <- 2.3",
                "8 <- 0.5",
                "9 <- 7.3"
            ]
        },
        "Step 8": {
            "steps": [
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (8 + (5 - 3)) = 24",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (8 + (5 - 3)) = 24",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (8 + (5 - 3)) = 24",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (8 + (5 - 3)) = 24",
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "3 * 3 = 9 (left: 2 8 9) || 9 - 2 = 7 (left: 7 8)",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (8 + (8 - 3)) = 24 || Input: 3 3 5 7\nSteps:\n3 + 7 = 10 (left: 3 5 10)\n10 - 5 = 5 (left: 3 5)\n5 * 3 = 15 (left: 15)\n15 + 3 = 18 (left: 18)\n18 - 3 = 15 (left: 15)\n15 + 5 = 20 (left: 20)\n20 +  || 3 = 23 (left: 23)\n23 + 2 = 25 (left: 25)\n25 - 5 = 20 (left: 20)\n20 + 5 = 25 (left: 25)\n25 - 5 = 20 (left: 20)\n20 + 3 = 23 (left: 23)\n23 + 2 = 25 (left: 25)\n25 - 5 = 20 (left: 20"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                0.003,
                0.003,
                60.0,
                0.003,
                0.003,
                21.001,
                60.0
            ],
            "Resampling": [
                "0 <- 7.1",
                "1 <- 8.5",
                "2 <- 5.1",
                "3 <- 6.6",
                "4 <- 8.8",
                "5 <- 0.8",
                "6 <- 7.9",
                "7 <- 4.9",
                "8 <- 6.6",
                "9 <- 8.5"
            ]
        },
        "Step 9": {
            "steps": [
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (8 + (5 - 3)) = 24",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (8 + (5 - 3)) = 24",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (8 + (8 - 3)) = 24 || Input: 3 3 5 7\nSteps:\n3 + 7 = 10 (left: 3 5 10)\n10 - 5 = 5 (left: 3 5)\n5 * 3 = 15 (left: 15)\n15 + 3 = 18 (left: 18)\n18 - 3 = 15 (left: 15)\n15 + 5 = 20 (left: 20)\n20 + ",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 3 = 9 (left: 2 8 9) || 9 - 2 = 7 (left: 7 8) || 8 / 7 = 1.14 (left: 1.14)",
                "8 - 2 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3)",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (8 + (5 - 3)) = 24",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (8 + (5 - 3)) = 24",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 - 3 = 5 (left: 3 5 5) || 5 + 3 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (8 + (5 - 3)) = 24"
            ]
        },
        "Input": "2 3 3 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "83": {
        "puzzle": "3 5 5 8",
        "Step 0": {
            "steps": [
                "8 - 5 = 3 (left: 3 5 8)",
                "5 - 3 = 2 (left: 2 5 8)",
                "8 - 3 = 5 (left: 5 5 5)",
                "5 / 3 = 1.67 (left: 1.67 5 8)",
                "8 - 3 = 5 (left: 5 5 8)",
                "5 / 3 = 1.67 (left: 1.67 5 8)",
                "5 * 8",
                "8 + 3 = 11 (left: 5 5 11)",
                "8 / 5 = 1.6 (left: 3 ",
                "8 + 3 = 11 (left: 5 5 11)"
            ],
            "Evaluation": [
                3.0,
                0.003,
                2.001,
                3.0,
                3.0,
                3.0,
                0.003,
                3.0,
                0.0,
                1.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 0.4",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "5 / 3 = 1.67 (left: 1.67 5 8)",
                "3 * 5 = 15 (left: 5 8 15)",
                "3 * 5 = 15 (left: 5 8 15)",
                "8 + 3 = 11 (left: 5 5 11)",
                "3 * 5 = 15 (left: 5 8 15)",
                "3 * 5 = 15 (left: 5 8 15)",
                "8 - 3 = 5 (left: 5 5 8) || 5 + 8 = 13 (left: 13)",
                "8 - 5 = 3 (left: ",
                "8 + 3 = 11 (left: 5 5 11)",
                "5 / 3 = 1.67 (left: 1.67 5 8) || 5 / 1.67 = 2.994 (left: 2.994 8)"
            ],
            "Evaluation": [
                3.0,
                2.001,
                3.0,
                1.001,
                2.001,
                1.002,
                0.003,
                0.0,
                1.001,
                3.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.8",
                "2 <- 0.5",
                "3 <- 1.8",
                "4 <- 0.2",
                "5 <- 1.1",
                "6 <- INIT",
                "7 <- 1.2",
                "8 <- INIT",
                "9 <- 1.9"
            ]
        },
        "Step 2": {
            "steps": [
                "5 / 3 = 1.67 (left: 1.67 5 8) || 5 * 8 = 40 (left: 1.67 40)",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6)",
                "5 / 3 = 1.67 (left: 1.67 5 8) || 5 / 1.67 = 2.994 (left: 2.994 8)",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6)",
                "8 - 3 = 5 (left: 5 5 5) || 3 + 6 = 9 (left: 9 9)",
                "3 * 5 = 15 (left: 5 8 15) || 15 / 5 = ",
                "8 + 3 = 11 (left: 5 5 11)",
                "3 * 5 = 15 (left: 5 8 15) || 15 - 8 = 7 (left: 5 7)",
                "8 + 3 = 11 (left: 5 5 11)",
                "5 / 3 = 1.67 (left: 1.67 5 8) || 5 / 1.67 = 2.994 (left: 2.994 8) || 8 / 2.994 = 2.676 (left: 2.676)"
            ],
            "Evaluation": [
                0.002,
                20.002,
                3.0,
                20.002,
                0.002,
                0.003,
                1.001,
                0.003,
                1.001,
                0.002
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 0.4",
                "2 <- 1.8",
                "3 <- 2.1",
                "4 <- INIT",
                "5 <- 2.1",
                "6 <- 0.5",
                "7 <- 2.3",
                "8 <- 0.3",
                "9 <- 2.3"
            ]
        },
        "Step 3": {
            "steps": [
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)",
                "8 - 3 = 5 (left: 5 5 8) || Possible",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6)",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "3 * 5 = 15 (left: 5 8 15)",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "5 / 3 = 1.67 (left: 1.67 5 8) || 8 - 5 = 3 (left: 1.67 3)",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "5 / 3 = 1.67 (left: 1.67 5 8) || 8 - 5 = 3 (left: 1.67 3)",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)"
            ],
            "Evaluation": [
                40.0,
                0.003,
                20.002,
                0.002,
                1.002,
                20.002,
                0.001,
                0.002,
                0.0,
                20.002
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 2.3",
                "2 <- 2.3",
                "3 <- 3.0",
                "4 <- 0.7",
                "5 <- 2.3",
                "6 <- 3.0",
                "7 <- 1.2",
                "8 <- 2.1",
                "9 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6)",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "3 * 5 = 15 (left: 5 8 15) || 15 - 8 = 7 (left: 5 7)",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18"
            ],
            "Evaluation": [
                40.0,
                20.002,
                20.002,
                0.003,
                20.002,
                20.002,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 4.5",
                "2 <- 2.3",
                "3 <- 4.0",
                "4 <- 4.2",
                "5 <- 3.9",
                "6 <- 4.2",
                "7 <- 4.0",
                "8 <- 4.4",
                "9 <- 4.0"
            ]
        },
        "Step 5": {
            "steps": [
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 1.3",
                "2 <- 0.5",
                "3 <- 3.5",
                "4 <- 2.3",
                "5 <- 3.0",
                "6 <- 2.3",
                "7 <- 5.2",
                "8 <- 4.2",
                "9 <- 3.0"
            ]
        },
        "Step 6": {
            "steps": [
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6)",
                "5 / 3 = 1.67 (left: 1.67 5 8) || 5 / 1.67 = 2.994 (left: 2.994 8)",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18"
            ],
            "Evaluation": [
                0.003,
                20.002,
                3.0,
                0.003,
                20.002,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.8",
                "1 <- 6.4",
                "2 <- 6.4",
                "3 <- 6.4",
                "4 <- 3.9",
                "5 <- 5.2",
                "6 <- 4.0",
                "7 <- 6.1",
                "8 <- 6.4",
                "9 <- 4.0"
            ]
        },
        "Step 7": {
            "steps": [
                "8 + 3 = 11 (left: 5 5 11) || 5 / 5 = 1 (left: 1 11)",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18"
            ],
            "Evaluation": [
                40.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 7.0",
                "2 <- 3.0",
                "3 <- 4.4",
                "4 <- 3.5",
                "5 <- 4.0",
                "6 <- 6.1",
                "7 <- 4.2",
                "8 <- 4.5",
                "9 <- 6.4"
            ]
        },
        "Step 8": {
            "steps": [
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "8 + 3 = 11 (left: 5 5 11) || 5 / 5 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 3.0",
                "2 <- 6.4",
                "3 <- 6.2",
                "4 <- 2.2",
                "5 <- 4.4",
                "6 <- 3.9",
                "7 <- 4.0",
                "8 <- 7.0",
                "9 <- 2.3"
            ]
        },
        "Step 9": {
            "steps": [
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "5 / 3 = 1.67 (left: 1.67 5 8) || 5 / 1.67 = 2.994 (left: 2.994 8) || 2.994 * 8 = 23.952 (left: 23.952)",
                "5 / 3 = 1.67 (left: 1.67 5 8) || 5 / 1.67 = 2.994 (left: 2.994 8) || 8 / 2.994 = 2.676 (left: 2.676)",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "8 + 3 = 11 (left: 5 5 11) || 5 / 5 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "8 + 3 = 11 (left: 5 5 11) || 11 - 5 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)"
            ]
        },
        "Input": "3 5 5 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "84": {
        "puzzle": "1 1 1 13",
        "Step 0": {
            "steps": [
                "13 + 1 = 14 (left: 1 1 14)",
                "1 * 1 = 1 (left: 1 1 13)",
                "13 / 1 = 13 (left: 1 1 13)",
                "1 * 1 = 1 (left: 1 1 13)",
                "1 * 1 = 1 (left: 1 1 13)",
                "1 * 1 = 1 (left: 1 1 13)",
                "13 / 1 = 13 (left: 1 1 13)",
                "13 - 1 = 12 (left: 1 1 12)",
                "13 / 1 = 13 (left: 1 1 ",
                "13 + 1 = 14 (left: 1 1 14)"
            ],
            "Evaluation": [
                1.002,
                1.001,
                21.001,
                0.003,
                1.002,
                20.002,
                21.001,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.7",
                "2 <- INIT",
                "3 <- 0.7",
                "4 <- 0.1",
                "5 <- 0.7",
                "6 <- 0.7",
                "7 <- 0.5",
                "8 <- 0.5",
                "9 <- 0.7"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 13) || 13 / 1 = 13 (left: 1 13)",
                "13 - 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 - 1 = 0 (left: 0 1 13)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "1 * 1 = 1 (left: 1 1 13) || 13 / 1 = 13 (left: 1 13)",
                "13 - 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "1 * 1 = 1 (left: 1 1 13) || 13 - 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 13) || 13 - 1 = 12 (left: 1 12)",
                "13 - 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)"
            ],
            "Evaluation": [
                1.001,
                0.002,
                0.003,
                40.0,
                1.001,
                0.002,
                40.0,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.3",
                "2 <- 0.2",
                "3 <- 0.6",
                "4 <- INIT",
                "5 <- 1.3",
                "6 <- 1.6",
                "7 <- 0.7",
                "8 <- 0.7",
                "9 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 13)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "13 / 1 = 13 (left: 1 1 13) || 1 / 1 = 1 (left: 1 13)",
                "13 / 1 = 13 (left: 1 1 13) || 1 - 1 = 0 (left: 0 13)",
                "1 - 1 = 0 (left: 0 1 13)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "13 - 1 = 12 (left: 1 1 12) || Input: 0 12",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                21.001,
                0.003,
                1.001,
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 1.6",
                "2 <- 2.0",
                "3 <- 2.8",
                "4 <- INIT",
                "5 <- 0.7",
                "6 <- INIT",
                "7 <- 1.6",
                "8 <- 0.5",
                "9 <- 0.2"
            ]
        },
        "Step 3": {
            "steps": [
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 13) || 1 / 1 = 1 (left: 1 13)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 - 1 = 0 (left: 0 1 13)",
                "13 - 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "13 + 1 = 14 (left: 1 1 14)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 13) || 1 - 1 = 0 (left: 0 13)",
                "13 / 1 = 13 (left: 1 1 13) || 1 / 1 = 1 (left: 1 13)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                1.001,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.001,
                1.001
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 1.6",
                "2 <- INIT",
                "3 <- 0.7",
                "4 <- 1.3",
                "5 <- 0.2",
                "6 <- 2.0",
                "7 <- 2.8",
                "8 <- 0.7",
                "9 <- 2.8"
            ]
        },
        "Step 4": {
            "steps": [
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 - 1 = 0 (left: 0 1 13)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "13 / 1 = 13 (left: 1 1 13) || 13 / 1 = 13 (left:",
                "1 * 1 = 1 (left: 1 1 13) || 1 - 1 = 0 (left: 0 13)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                40.0,
                0.003,
                20.002,
                0.001,
                0.003,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 0.7",
                "2 <- 2.8",
                "3 <- 4.3",
                "4 <- 4.3",
                "5 <- 4.3",
                "6 <- 4.5",
                "7 <- 0.7",
                "8 <- 0.7",
                "9 <- 4.3"
            ]
        },
        "Step 5": {
            "steps": [
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "13 - 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "13 / 1 = 13 (left: 1 1 13) || 13 / 1 = 13 (left: || Input: 5 4 6 2",
                "13 - 1 = 12 (left: 1 1 12) || Input: 0 12",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 5.8",
                "1 <- 5.8",
                "2 <- 1.3",
                "3 <- 4.5",
                "4 <- 2.0",
                "5 <- 2.8",
                "6 <- 2.0",
                "7 <- 0.1",
                "8 <- 0.5",
                "9 <- 0.5"
            ]
        },
        "Step 6": {
            "steps": [
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "13 / 1 = 13 (left: 1 1 13) || 13 / 1 = 13 (left: || Input: 5 4 6 2",
                "1 * 1 = 1 (left: 1 1 13) || 1 / 1 = 1 (left: 1 13)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 13) || 1 - 1 = 0 (left: 0 13)",
                "1 * 1 = 1 (left: 1 1 13) || 13 - 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 13) || 1 - 1 = 0 (left: 0 13)",
                "1 * 1 = 1 (left: 1 1 13) || 1 / 1 = 1 (left: 1 13)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                1.001,
                0.003,
                0.001,
                0.002,
                0.001,
                1.001
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 2.8",
                "2 <- 2.8",
                "3 <- 4.5",
                "4 <- 4.5",
                "5 <- 4.5",
                "6 <- 4.3",
                "7 <- 0.2",
                "8 <- 4.3",
                "9 <- 4.8"
            ]
        },
        "Step 7": {
            "steps": [
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "13 / 1 = 13 (left: 1 1 13) || 13 / 1 = 13 (left: || Input: 5 4 6 2",
                "13 / 1 = 13 (left: 1 1 13) || 13 / 1 = 13 (left: || 5 + 4 = 9 (left: 6 9 2)",
                "13 / 1 = 13 (left: 1 1 13) || 13 / 1 = 13 (left: || 5 + 4 = 9 (left: 6 9 2)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "13 / 1 = 13 (left: 1 1 13) || 13 - 1 = 12 (left: 1 12)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                3.0,
                3.0,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 4.8",
                "2 <- 0.7",
                "3 <- 4.8",
                "4 <- 5.8",
                "5 <- 4.5",
                "6 <- 4.3",
                "7 <- 5.8",
                "8 <- 4.3",
                "9 <- 5.8"
            ]
        },
        "Step 8": {
            "steps": [
                "13 / 1 = 13 (left: 1 1 13) || 1 * 1 = 1 (left: 1 13)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "13 - 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "13 / 1 = 13 (left: 1 1 13) || 13 / 1 = 13 (left: || 5 + 4 = 9 (left: 6 9 2)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                1.001,
                0.003,
                0.002,
                0.003,
                0.003,
                3.0,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 8.5",
                "2 <- 2.8",
                "3 <- 2.0",
                "4 <- 4.8",
                "5 <- 1.3",
                "6 <- 4.8",
                "7 <- 1.3",
                "8 <- 8.5",
                "9 <- 4.5"
            ]
        },
        "Step 9": {
            "steps": [
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "13 / 1 = 13 (left: 1 1 13) || 13 / 1 = 13 (left: || 5 + 4 = 9 (left: 6 9 2) || 6 * 9 = 54 (left: 2 54)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 13) || 1 - 1 = 0 (left: 0 13)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "13 / 1 = 13 (left: 1 1 13) || 13 / 1 = 13 (left: || 5 + 4 = 9 (left: 6 9 2) || 9 / 6 = 1.5 (left: 1.5 2)",
                "13 / 1 = 13 (left: 1 1 13) || 13 / 1 = 13 (left: || 5 + 4 = 9 (left: 6 9 2)"
            ]
        },
        "Input": "1 1 1 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "85": {
        "puzzle": "2 3 12 12",
        "Step 0": {
            "steps": [
                "12 / 2 = 6 (left: 6 12 12)",
                "3 * 12 = 36 (left: 2 36 12)",
                "12 / 3 = 4 (left: 2 4 12)",
                "12 - 3 = 9 (left: 2 9 12)",
                "12 / 2 = 6 (left: 3 6 12)",
                "12 - 3 = 9 (left: 2 9 12)",
                "12 - 2 = 10 (left: 10 12 12)",
                "12 / 3 = 4 (left: 2 4 12)",
                "3 * 12 = 36 (left: 2 12 ",
                "12 / 2 = 6 (left: 6 12 12)"
            ],
            "Evaluation": [
                3.0,
                22.0,
                2.0,
                1.002,
                0.003,
                1.002,
                2.001,
                2.0,
                60.0,
                3.0
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 0.1",
                "2 <- 0.9",
                "3 <- 0.8",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- 0.5",
                "9 <- 0.8"
            ]
        },
        "Step 1": {
            "steps": [
                "3 * 12 = 36 (left: 2 12  || 2 + 12 = 14 (left: 14)",
                "3 * 12 = 36 (left: 2 36 12) || 36 / 12 = 3 (left: 2 3)",
                "12 / 2 = 6 (left: 6 12 12) || 12 * 6 = 72 (left: 12 72)",
                "3 * 12 = 36 (left: 2 12  || 2 + 12 = 14 (left: 14)",
                "12 - 2 = 10 (left: 2 10 12)",
                "12 - 2 = 10 (left: 2 10 12)",
                "12 / 2 = 6 (left: 6 12 12)",
                "12 / 2 = 6 (left: 6 12 12)",
                "12 - 3 = 9 (left: 2 9 12) || 2 * 9 = 18 (left: 18 12)",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.003,
                0.001,
                0.003,
                0.003,
                3.0,
                3.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 0.8",
                "2 <- 0.8",
                "3 <- 1.9",
                "4 <- INIT",
                "5 <- 0.1",
                "6 <- 0.1",
                "7 <- 1.9",
                "8 <- 1.9",
                "9 <- 1.9"
            ]
        },
        "Step 2": {
            "steps": [
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 12 * (3 * 2) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 / 2 = 6 (left: 6)",
                "3 * 12 = 36 (left: 2 12  || 12 / 2 = 6 (left: 6)",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: (3 * 12) - (12 - 2) = 24",
                "12 - 2 = 10 (left: 2 10 12)",
                "3 * 12 = 36 (left: 2 36 12) || 12 - 2 = 10 (left: 10)",
                "3 * 12 = 36 (left: 2 36 12) || 36 - 2 = 34 (left: 34 12)",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: (2 * (3 * 12)) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * 12 - 12 = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * (12 - 2) = 24"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                60.0,
                0.003,
                0.002,
                0.002,
                60.0,
                60.0,
                40.001
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.3",
                "2 <- 2.9",
                "3 <- 2.8",
                "4 <- 2.8",
                "5 <- 0.8",
                "6 <- 0.8",
                "7 <- 2.0",
                "8 <- 2.7",
                "9 <- 2.9"
            ]
        },
        "Step 3": {
            "steps": [
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 12 * (3 * 2) = 24 || Input: 3 3 4 6\nSteps:\n3 * 6 = 18 (left: 3 4 18)\n4 + 18 = 22 (left: 3 22)\n3 * 22 = 66 (left: 66)\n66 / 4 = 24 (left: 24)\nAnswer: ((3 * 6) + 4) / (3 + 22) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: (3 * 12) - (12 - 2) = 24 || Input: 3 3 6 2\nSteps:\n3 * 6 = 18 (left: 3 2 18)\n18 - 2 = 16 (left: 3 16)\n16 / 3 = 5.333 (left: 5.333)\nAnswer: (3 * 6) - (2 + 3) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * (12 - 2) = 24 || Input: 3 3 8 8\nSteps:\n3 + 8 = 11 (left: 3 11 8)\n11 - 3 = 8 (left: 8 8)\n8 * 8 = 64 (left: 64)\nAnswer: (3 + 8) * (8 - 3) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * 12 - 12 = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 + 3 = 19 (left: 19)\n19 + 5 = 24 (left: 24)\nAnswer: ((3 * 7) - 5) + 3 + 5 = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * 12 - 12 = 24 || Input: 3 4 5 6\nSteps:\n3 * 4 = 12 (left: 5 6 12)\n5 + 6 = 11 (left: 11 12)\n11 * 12 = 132 (left: 132)\nAnswer: (3 * 4) + (5 + 6) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 / 2 = 6 (left: 6)",
                "3 * 12 = 36 (left: 2 12  || 12 / 2 = 6 (left: 6)",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 12 * (3 * 2) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: (2 * (3 * 12)) = 24 || Input: 3 6 7 8\nSteps:\n6 + 8 = 14 (left: 3 7 14)\n7 - 3 = 4 (left: 4 14)\n4 * 14 = 56 (left: 56)\n56 / 2 = 28 (left: 28)\n28 / 7 = 4 (left: 4)\n4 * 6 = 24 (left: 24)\nAnswer: ((",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * (12 - 2) = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 * 3 = 18 (left: 12 18)\n18 - 12 = 6 (left: 6 24)\nAnswer: (5 + 7) * (6 - 3) = 24"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                0.003,
                0.003,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.8",
                "2 <- 3.7",
                "3 <- 3.9",
                "4 <- 3.9",
                "5 <- 3.8",
                "6 <- 2.8",
                "7 <- 2.7",
                "8 <- 2.8",
                "9 <- 3.9"
            ]
        },
        "Step 4": {
            "steps": [
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: (3 * 12) - (12 - 2) = 24 || Input: 3 3 6 2\nSteps:\n3 * 6 = 18 (left: 3 2 18)\n18 - 2 = 16 (left: 3 16)\n16 / 3 = 5.333 (left: 5.333)\nAnswer: (3 * 6) - (2 + 3) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * 12 - 12 = 24 || Input: 3 4 5 6\nSteps:\n3 * 4 = 12 (left: 5 6 12)\n5 + 6 = 11 (left: 11 12)\n11 * 12 = 132 (left: 132)\nAnswer: (3 * 4) + (5 + 6) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 12 * (3 * 2) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24 || Input: 2 6 8 9\nSteps:\n8 - 6 = 2 (left: 2 9 2)\n2 * 2 = 4 (left: 9 4)\n9 * 4 = 36 (left: 36)\nAnswer: (2 * (8 - 6)) * (9 * 4) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * (12 - 2) = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 * 3 = 18 (left: 12 18)\n18 - 12 = 6 (left: 6 24)\nAnswer: (5 + 7) * (6 - 3) = 24 || Input: 1 3 4 7\nSteps:\n1 * 4 = 4 (left: 3 7 4)\n4 + 7 = 11 (left: 3 11)\n3 * 11 = 33 (left: 33)\n33 - 9 = 24 (left: 24)\nAnswer: (1 * 4) + (7 + 3) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * (12 - 2) = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 * 3 = 18 (left: 12 18)\n18 - 12 = 6 (left: 6 24)\nAnswer: (5 + 7) * (6 - 3) = 24 || Input: 1 3 5 8\nSteps:\n3 + 5 = 8 (left: 1 8 8)\n8 - 1 = 7 (left: 7 8)\n7 * 8 = 56 (left: 56)\nAnswer: (3 + 5) * (8 - 1) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: (2 * (3 * 12)) = 24 || Input: 3 6 7 8\nSteps:\n6 + 8 = 14 (left: 3 7 14)\n7 - 3 = 4 (left: 4 14)\n4 * 14 = 56 (left: 56)\n56 / 2 = 28 (left: 28)\n28 / 7 = 4 (left: 4)\n4 * 6 = 24 (left: 24)\nAnswer: (( || (3 + 6) + 7) * 8 / 2 / 7) * 6 = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * 12 - 12 = 24 || Input: 3 4 5 6\nSteps:\n3 * 4 = 12 (left: 5 6 12)\n5 + 6 = 11 (left: 11 12)\n11 * 12 = 132 (left: 132)\nAnswer: (3 * 4) + (5 + 6) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: (2 * (3 * 12)) = 24 || Input: 3 6 7 8\nSteps:\n6 + 8 = 14 (left: 3 7 14)\n7 - 3 = 4 (left: 4 14)\n4 * 14 = 56 (left: 56)\n56 / 2 = 28 (left: 28)\n28 / 7 = 4 (left: 4)\n4 * 6 = 24 (left: 24)\nAnswer: ((",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * 12 - 12 = 24 || Input: 3 4 5 6\nSteps:\n3 * 4 = 12 (left: 5 6 12)\n5 + 6 = 11 (left: 11 12)\n11 * 12 = 132 (left: 132)\nAnswer: (3 * 4) + (5 + 6) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * (12 - 2) = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 * 3 = 18 (left: 12 18)\n18 - 12 = 6 (left: 6 24)\nAnswer: (5 + 7) * (6 - 3) = 24 || Input: 1 2 3 6\nSteps:\n3 * 6 = 18 (left: 1 2 18)\n2 * 18 = 36 (left: 1 36)\n36 / 1 = 36 (left: 36)\nAnswer: ((3 * 6) * 2) / 1 = 24"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                0.003,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.9",
                "1 <- 4.9",
                "2 <- 4.6",
                "3 <- 4.0",
                "4 <- 4.1",
                "5 <- 3.9",
                "6 <- 4.7",
                "7 <- 4.9",
                "8 <- 3.1",
                "9 <- 2.3"
            ]
        },
        "Step 5": {
            "steps": [
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * (12 - 2) = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 * 3 = 18 (left: 12 18)\n18 - 12 = 6 (left: 6 24)\nAnswer: (5 + 7) * (6 - 3) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * (12 - 2) = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 * 3 = 18 (left: 12 18)\n18 - 12 = 6 (left: 6 24)\nAnswer: (5 + 7) * (6 - 3) = 24 || Input: 1 2 3 6\nSteps:\n3 * 6 = 18 (left: 1 2 18)\n2 * 18 = 36 (left: 1 36)\n36 / 1 = 36 (left: 36)\nAnswer: ((3 * 6) * 2) / 1 = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n6 - 3 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\nAnswer: (3 * 8) - (6 - 3) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * 12 - 12 = 24 || Input: 3 4 5 6\nSteps:\n3 * 4 = 12 (left: 5 6 12)\n5 + 6 = 11 (left: 11 12)\n11 * 12 = 132 (left: 132)\nAnswer: (3 * 4) + (5 + 6) = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n4 + 3 = 7 (left: 7 12)\n7 * 12 = 84 (left: 84)\nAnswer: (2 * 6) + (4 + 3) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: (3 * 12) - (12 - 2) = 24 || Input: 3 3 6 2\nSteps:\n3 * 6 = 18 (left: 3 2 18)\n18 - 2 = 16 (left: 3 16)\n16 / 3 = 5.333 (left: 5.333)\nAnswer: (3 * 6) - (2 + 3) = 24 || Input: 1 3 4 9\nSteps:\n4 * 9 = 36 (left: 1 3 36)\n3 + 1 = 4 (left: 4 36)\n4 * 9 = 24 (left: 24)\nAnswer: 4 * (9 + (1 + 3)) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * 12 - 12 = 24 || Input: 3 4 5 6\nSteps:\n3 * 4 = 12 (left: 5 6 12)\n5 + 6 = 11 (left: 11 12)\n11 * 12 = 132 (left: 132)\nAnswer: (3 * 4) + (5 + 6) = 24 || Input: 1 2 3 4\nSteps:\n1 * 2 = 2 (left: 3 4 2)\n3 + 4 = 7 (left: 7 2)\n7 * 2 = 14 (left: 14)\n14 + 3 = 17 (left: 17)\n17 + 4 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: (((",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * (12 - 2) = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 * 3 = 18 (left: 12 18)\n18 - 12 = 6 (left: 6 24)\nAnswer: (5 + 7) * (6 - 3) = 24 || Input: 1 2 3 6\nSteps:\n3 * 6 = 18 (left: 1 2 18)\n2 * 18 = 36 (left: 1 36)\n36 / 1 = 36 (left: 36)\nAnswer: ((3 * 6) * 2) / 1 = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: (2 * (3 * 12)) = 24 || Input: 3 6 7 8\nSteps:\n6 + 8 = 14 (left: 3 7 14)\n7 - 3 = 4 (left: 4 14)\n4 * 14 = 56 (left: 56)\n56 / 2 = 28 (left: 28)\n28 / 7 = 4 (left: 4)\n4 * 6 = 24 (left: 24)\nAnswer: (( || (3 + 6) + 7) * 8 / 2 / 7) * 6 = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * (12 - 2) = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 * 3 = 18 (left: 12 18)\n18 - 12 = 6 (left: 6 24)\nAnswer: (5 + 7) * (6 - 3) = 24 || Input: 1 2 3 6\nSteps:\n3 * 6 = 18 (left: 1 2 18)\n2 * 18 = 36 (left: 1 36)\n36 / 1 = 36 (left: 36)\nAnswer: ((3 * 6) * 2) / 1 = 24 || Input: 3 4 5 6\nSteps:\n4 * 5 = 20 (left: 3 6 20)\n3 + 6 = 9 (left: 9 20)\n20 - 9 = 11 (left: 11)\n11 + 9 = 20 (left: 20)\nAnswer: ((3 * 4) + 5) + 6 = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: (3 * 12) - (12 - 2) = 24 || Input: 3 3 6 2\nSteps:\n3 * 6 = 18 (left: 3 2 18)\n18 - 2 = 16 (left: 3 16)\n16 / 3 = 5.333 (left: 5.333)\nAnswer: (3 * 6) - (2 + 3) = 24 || Input: 2 5 6 7\nSteps:\n2 * 7 = 14 (left: 5 6 14)\n14 - 6 = 8 (left: 5 8)\n8 * 5 = 40 (left: 40)\nAnswer: (2 * 7) - (6 - 5) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: (3 * 12) - (12 - 2) = 24 || Input: 3 3 6 2\nSteps:\n3 * 6 = 18 (left: 3 2 18)\n18 - 2 = 16 (left: 3 16)\n16 / 3 = 5.333 (left: 5.333)\nAnswer: (3 * 6) - (2 + 3) = 24"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                0.003,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.8",
                "2 <- 3.7",
                "3 <- 4.8",
                "4 <- 5.7",
                "5 <- 0.1",
                "6 <- 3.0",
                "7 <- 5.1",
                "8 <- 3.1",
                "9 <- 5.1"
            ]
        },
        "Step 6": {
            "steps": [
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 12 * (3 * 2) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * 12 - 12 = 24 || Input: 3 4 5 6\nSteps:\n3 * 4 = 12 (left: 5 6 12)\n5 + 6 = 11 (left: 11 12)\n11 * 12 = 132 (left: 132)\nAnswer: (3 * 4) + (5 + 6) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 12 * (3 * 2) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24 || Input: 2 6 8 9\nSteps:\n8 - 6 = 2 (left: 2 9 2)\n2 * 2 = 4 (left: 9 4)\n9 * 4 = 36 (left: 36)\nAnswer: (2 * (8 - 6)) * (9 * 4) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * 12 - 12 = 24 || Input: 3 4 5 6\nSteps:\n3 * 4 = 12 (left: 5 6 12)\n5 + 6 = 11 (left: 11 12)\n11 * 12 = 132 (left: 132)\nAnswer: (3 * 4) + (5 + 6) = 24 || Input: 1 2 3 4\nSteps:\n1 * 2 = 2 (left: 3 4 2)\n3 + 4 = 7 (left: 7 2)\n7 * 2 = 14 (left: 14)\n14 + 3 = 17 (left: 17)\n17 + 4 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: (((",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * (12 - 2) = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 * 3 = 18 (left: 12 18)\n18 - 12 = 6 (left: 6 24)\nAnswer: (5 + 7) * (6 - 3) = 24 || Input: 1 2 3 6\nSteps:\n3 * 6 = 18 (left: 1 2 18)\n2 * 18 = 36 (left: 1 36)\n36 / 1 = 36 (left: 36)\nAnswer: ((3 * 6) * 2) / 1 = 24 || Input: 3 4 5 6\nSteps:\n4 * 5 = 20 (left: 3 6 20)\n3 + 6 = 9 (left: 9 20)\n20 - 9 = 11 (left: 11)\n11 + 9 = 20 (left: 20)\nAnswer: ((3 * 4) + 5) + 6 = 24 || Input: 2 4 5 6\nSteps:\n4 * 6 = 24 (left: 2 5 24)\n5 * 2 = 10 (left: 10 24)\n10 + 24 = 34 (left: 34)\nAnswer: (4 * 6) + (5 * 2) = 24",
                "3 * 12 = 36 (left: 2 36 12) || 12 - 2 = 10 (left: 10)",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 12 * (3 * 2) = 24 || Input: 3 3 4 6\nSteps:\n3 * 6 = 18 (left: 3 4 18)\n4 + 18 = 22 (left: 3 22)\n3 * 22 = 66 (left: 66)\n66 / 4 = 24 (left: 24)\nAnswer: ((3 * 6) + 4) / (3 + 22) = 24 || Input: 1 3 5 7\nSteps:\n5 * 3 = 15 (left: 1 7 15)\n7 - 1 = 6 (left: 6 15)\n6 * 15 = 90 (left: 90)\n90 / 3 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: (((5 * 3) - 1) * 15)",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * (12 - 2) = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 * 3 = 18 (left: 12 18)\n18 - 12 = 6 (left: 6 24)\nAnswer: (5 + 7) * (6 - 3) = 24 || Input: 1 2 3 6\nSteps:\n3 * 6 = 18 (left: 1 2 18)\n2 * 18 = 36 (left: 1 36)\n36 / 1 = 36 (left: 36)\nAnswer: ((3 * 6) * 2) / 1 = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n6 - 3 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\nAnswer: (3 * 8) - (6 - 3) = 24 || Input: 2 4 5 6\nSteps:\n4 * 6 = 24 (left: 2 5)\n5 + 2 = 7 (left: 7)\nAnswer: (4 * 6) + (5 + 2) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: (3 * 12) - (12 - 2) = 24 || Input: 3 3 6 2\nSteps:\n3 * 6 = 18 (left: 3 2 18)\n18 - 2 = 16 (left: 3 16)\n16 / 3 = 5.333 (left: 5.333)\nAnswer: (3 * 6) - (2 + 3) = 24 || Input: 2 5 6 7\nSteps:\n2 * 7 = 14 (left: 5 6 14)\n14 - 6 = 8 (left: 5 8)\n8 * 5 = 40 (left: 40)\nAnswer: (2 * 7) - (6 - 5) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * (12 - 2) = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 * 3 = 18 (left: 12 18)\n18 - 12 = 6 (left: 6 24)\nAnswer: (5 + 7) * (6 - 3) = 24 || Input: 1 2 3 6\nSteps:\n3 * 6 = 18 (left: 1 2 18)\n2 * 18 = 36 (left: 1 36)\n36 / 1 = 36 (left: 36)\nAnswer: ((3 * 6) * 2) / 1 = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n6 - 3 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\nAnswer: (3 * 8) - (6 - 3) = 24 || Input: 2 2 8 9\nSteps:\n2 * 9 = 18 (left: 2 8 18)\n8 - 2 = 6 (left: 6 18)\n18 / 6 = 3 (left: 3 18)\n3 * 8 = 24 (left: 24)\nAnswer: ((2 * 9) - (8 - 2)) * 3 = 24"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                0.002,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 6.7",
                "1 <- 5.4",
                "2 <- 3.8",
                "3 <- 4.8",
                "4 <- 5.7",
                "5 <- 5.0",
                "6 <- 5.1",
                "7 <- 3.4",
                "8 <- 6.4",
                "9 <- 3.1"
            ]
        },
        "Step 7": {
            "steps": [
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * (12 - 2) = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 * 3 = 18 (left: 12 18)\n18 - 12 = 6 (left: 6 24)\nAnswer: (5 + 7) * (6 - 3) = 24 || Input: 1 2 3 6\nSteps:\n3 * 6 = 18 (left: 1 2 18)\n2 * 18 = 36 (left: 1 36)\n36 / 1 = 36 (left: 36)\nAnswer: ((3 * 6) * 2) / 1 = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n6 - 3 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\nAnswer: (3 * 8) - (6 - 3) = 24 || Input: 2 4 5 6\nSteps:\n4 * 6 = 24 (left: 2 5)\n5 + 2 = 7 (left: 7)\nAnswer: (4 * 6) + (5 + 2) = 24 || Input: 2 2 4 6\nSteps:\n2 * 6 = 12 (left: 2 4 12)\n4 + 12 = 16 (left: 2 16)\n16 - 2 = 14 (left: 14)\nAnswer: ((2 * 6) + (4 + 12)) - 2 = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * 12 - 12 = 24 || Input: 3 4 5 6\nSteps:\n3 * 4 = 12 (left: 5 6 12)\n5 + 6 = 11 (left: 11 12)\n11 * 12 = 132 (left: 132)\nAnswer: (3 * 4) + (5 + 6) = 24 || Input: 1 2 3 4\nSteps:\n1 * 2 = 2 (left: 3 4 2)\n3 + 4 = 7 (left: 7 2)\n7 * 2 = 14 (left: 14)\n14 + 3 = 17 (left: 17)\n17 + 4 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: ((( || 1 * 2) + (3 + 4) + 3) + 4 = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: (2 * (3 * 12)) = 24 || Input: 3 6 7 8\nSteps:\n6 + 8 = 14 (left: 3 7 14)\n7 - 3 = 4 (left: 4 14)\n4 * 14 = 56 (left: 56)\n56 / 2 = 28 (left: 28)\n28 / 7 = 4 (left: 4)\n4 * 6 = 24 (left: 24)\nAnswer: (( || (3 + 6) + 7) * 8 / 2 / 7) * 6 = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * 12 - 12 = 24 || Input: 3 4 5 6\nSteps:\n3 * 4 = 12 (left: 5 6 12)\n5 + 6 = 11 (left: 11 12)\n11 * 12 = 132 (left: 132)\nAnswer: (3 * 4) + (5 + 6) = 24 || Input: 1 2 3 4\nSteps:\n1 * 2 = 2 (left: 3 4 2)\n3 + 4 = 7 (left: 7 2)\n7 * 2 = 14 (left: 14)\n14 + 3 = 17 (left: 17)\n17 + 4 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: (((",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * (12 - 2) = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 * 3 = 18 (left: 12 18)\n18 - 12 = 6 (left: 6 24)\nAnswer: (5 + 7) * (6 - 3) = 24 || Input: 1 2 3 6\nSteps:\n3 * 6 = 18 (left: 1 2 18)\n2 * 18 = 36 (left: 1 36)\n36 / 1 = 36 (left: 36)\nAnswer: ((3 * 6) * 2) / 1 = 24 || Input: 3 4 5 6\nSteps:\n4 * 5 = 20 (left: 3 6 20)\n3 + 6 = 9 (left: 9 20)\n20 - 9 = 11 (left: 11)\n11 + 9 = 20 (left: 20)\nAnswer: ((3 * 4) + 5) + 6 = 24 || Input: 2 4 5 6\nSteps:\n4 * 6 = 24 (left: 2 5 24)\n5 * 2 = 10 (left: 10 24)\n10 + 24 = 34 (left: 34)\nAnswer: (4 * 6) + (5 * 2) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * (12 - 2) = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 * 3 = 18 (left: 12 18)\n18 - 12 = 6 (left: 6 24)\nAnswer: (5 + 7) * (6 - 3) = 24 || Input: 1 2 3 6\nSteps:\n3 * 6 = 18 (left: 1 2 18)\n2 * 18 = 36 (left: 1 36)\n36 / 1 = 36 (left: 36)\nAnswer: ((3 * 6) * 2) / 1 = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * (12 - 2) = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 * 3 = 18 (left: 12 18)\n18 - 12 = 6 (left: 6 24)\nAnswer: (5 + 7) * (6 - 3) = 24 || Input: 1 2 3 6\nSteps:\n3 * 6 = 18 (left: 1 2 18)\n2 * 18 = 36 (left: 1 36)\n36 / 1 = 36 (left: 36)\nAnswer: ((3 * 6) * 2) / 1 = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n6 - 3 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\nAnswer: (3 * 8) - (6 - 3) = 24 || Input: 2 2 8 9\nSteps:\n2 * 9 = 18 (left: 2 8 18)\n8 - 2 = 6 (left: 6 18)\n18 / 6 = 3 (left: 3 18)\n3 * 8 = 24 (left: 24)\nAnswer: ((2 * 9) - (8 - 2)) * 3 = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * 12 - 12 = 24 || Input: 3 4 5 6\nSteps:\n3 * 4 = 12 (left: 5 6 12)\n5 + 6 = 11 (left: 11 12)\n11 * 12 = 132 (left: 132)\nAnswer: (3 * 4) + (5 + 6) = 24 || Input: 1 2 3 4\nSteps:\n1 * 2 = 2 (left: 3 4 2)\n3 + 4 = 7 (left: 7 2)\n7 * 2 = 14 (left: 14)\n14 + 3 = 17 (left: 17)\n17 + 4 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: (((",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * (12 - 2) = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 * 3 = 18 (left: 12 18)\n18 - 12 = 6 (left: 6 24)\nAnswer: (5 + 7) * (6 - 3) = 24 || Input: 1 2 3 6\nSteps:\n3 * 6 = 18 (left: 1 2 18)\n2 * 18 = 36 (left: 1 36)\n36 / 1 = 36 (left: 36)\nAnswer: ((3 * 6) * 2) / 1 = 24 || Input: 3 4 5 6\nSteps:\n4 * 5 = 20 (left: 3 6 20)\n3 + 6 = 9 (left: 9 20)\n20 - 9 = 11 (left: 11)\n11 + 9 = 20 (left: 20)\nAnswer: ((3 * 4) + 5) + 6 = 24 || Input: 2 4 5 6\nSteps:\n4 * 6 = 24 (left: 2 5 24)\n5 * 2 = 10 (left: 10 24)\n10 + 24 = 34 (left: 34)\nAnswer: (4 * 6) + (5 * 2) = 24 || Input: 2 6 8 9\nSteps:\n8 - 6 = 2 (left: 2 9)\n2 * 9 = 18 (left: 18)\n18 + 2 = 20 (left: 20)\n20 + 8 = 28 (left: 28)\nAnswer: ((8 - 6) * 9) + (2 + 20) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: (3 * 12) - (12 - 2) = 24 || Input: 3 3 6 2\nSteps:\n3 * 6 = 18 (left: 3 2 18)\n18 - 2 = 16 (left: 3 16)\n16 / 3 = 5.333 (left: 5.333)\nAnswer: (3 * 6) - (2 + 3) = 24 || Input: 2 5 6 7\nSteps:\n2 * 7 = 14 (left: 5 6 14)\n14 - 6 = 8 (left: 5 8)\n8 * 5 = 40 (left: 40)\nAnswer: (2 * 7) - (6 - 5) = 24"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 7.8",
                "1 <- 6.3",
                "2 <- 4.8",
                "3 <- 4.6",
                "4 <- 7.9",
                "5 <- 3.1",
                "6 <- 5.9",
                "7 <- 7.7",
                "8 <- 4.4",
                "9 <- 6.0"
            ]
        },
        "Step 8": {
            "steps": [
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * (12 - 2) = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 * 3 = 18 (left: 12 18)\n18 - 12 = 6 (left: 6 24)\nAnswer: (5 + 7) * (6 - 3) = 24 || Input: 1 2 3 6\nSteps:\n3 * 6 = 18 (left: 1 2 18)\n2 * 18 = 36 (left: 1 36)\n36 / 1 = 36 (left: 36)\nAnswer: ((3 * 6) * 2) / 1 = 24 || Input: 3 4 5 6\nSteps:\n4 * 5 = 20 (left: 3 6 20)\n3 + 6 = 9 (left: 9 20)\n20 - 9 = 11 (left: 11)\n11 + 9 = 20 (left: 20)\nAnswer: ((3 * 4) + 5) + 6 = 24 || Input: 2 4 5 6\nSteps:\n4 * 6 = 24 (left: 2 5 24)\n5 * 2 = 10 (left: 10 24)\n10 + 24 = 34 (left: 34)\nAnswer: (4 * 6) + (5 * 2) = 24 || Input: 2 6 8 9\nSteps:\n8 - 6 = 2 (left: 2 9)\n2 * 9 = 18 (left: 18)\n18 + 2 = 20 (left: 20)\n20 + 8 = 28 (left: 28)\nAnswer: ((8 - 6) * 9) + (2 + 20) = 24 || Input: 1 3 4 9\nSteps:\n3 * 9 = 27 (left: 1 4 27)\n4 - 1 = 3 (left: 3 27)\n3 * 27 = 81 (left: 81)\n81 / 3 = 27 (left: 27)\nAnswer: ((1 * 3) + 4) * (9 / 27) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * 12 - 12 = 24 || Input: 3 4 5 6\nSteps:\n3 * 4 = 12 (left: 5 6 12)\n5 + 6 = 11 (left: 11 12)\n11 * 12 = 132 (left: 132)\nAnswer: (3 * 4) + (5 + 6) = 24 || Input: 1 2 3 4\nSteps:\n1 * 2 = 2 (left: 3 4 2)\n3 + 4 = 7 (left: 7 2)\n7 * 2 = 14 (left: 14)\n14 + 3 = 17 (left: 17)\n17 + 4 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: ((( || 1 * 2) + (3 + 4) + 3) + 4 = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * 12 - 12 = 24 || Input: 3 4 5 6\nSteps:\n3 * 4 = 12 (left: 5 6 12)\n5 + 6 = 11 (left: 11 12)\n11 * 12 = 132 (left: 132)\nAnswer: (3 * 4) + (5 + 6) = 24 || Input: 1 2 3 4\nSteps:\n1 * 2 = 2 (left: 3 4 2)\n3 + 4 = 7 (left: 7 2)\n7 * 2 = 14 (left: 14)\n14 + 3 = 17 (left: 17)\n17 + 4 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: (((",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * 12 - 12 = 24 || Input: 3 4 5 6\nSteps:\n3 * 4 = 12 (left: 5 6 12)\n5 + 6 = 11 (left: 11 12)\n11 * 12 = 132 (left: 132)\nAnswer: (3 * 4) + (5 + 6) = 24 || Input: 1 2 3 4\nSteps:\n1 * 2 = 2 (left: 3 4 2)\n3 + 4 = 7 (left: 7 2)\n7 * 2 = 14 (left: 14)\n14 + 3 = 17 (left: 17)\n17 + 4 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: (((",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: (3 * 12) - (12 - 2) = 24 || Input: 3 3 6 2\nSteps:\n3 * 6 = 18 (left: 3 2 18)\n18 - 2 = 16 (left: 3 16)\n16 / 3 = 5.333 (left: 5.333)\nAnswer: (3 * 6) - (2 + 3) = 24 || Input: 2 5 6 7\nSteps:\n2 * 7 = 14 (left: 5 6 14)\n14 - 6 = 8 (left: 5 8)\n8 * 5 = 40 (left: 40)\nAnswer: (2 * 7) - (6 - 5) = 24 || Input: 2 4 5 6\nSteps:\n5 * 4 = 20 (left: 2 6 20)\n20 - 6 = 14 (left: 2 14)\n14 + 2 = 16 (left: 16)\n16 + 24 = 24\nAnswer: ((5 * 4) - 6) + 2 = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: (3 * 12) - (12 - 2) = 24 || Input: 3 3 6 2\nSteps:\n3 * 6 = 18 (left: 3 2 18)\n18 - 2 = 16 (left: 3 16)\n16 / 3 = 5.333 (left: 5.333)\nAnswer: (3 * 6) - (2 + 3) = 24 || Input: 2 5 6 7\nSteps:\n2 * 7 = 14 (left: 5 6 14)\n14 - 6 = 8 (left: 5 8)\n8 * 5 = 40 (left: 40)\nAnswer: (2 * 7) - (6 - 5) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: (3 * 12) - (12 - 2) = 24 || Input: 3 3 6 2\nSteps:\n3 * 6 = 18 (left: 3 2 18)\n18 - 2 = 16 (left: 3 16)\n16 / 3 = 5.333 (left: 5.333)\nAnswer: (3 * 6) - (2 + 3) = 24 || Input: 2 5 6 7\nSteps:\n2 * 7 = 14 (left: 5 6 14)\n14 - 6 = 8 (left: 5 8)\n8 * 5 = 40 (left: 40)\nAnswer: (2 * 7) - (6 - 5) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * 12 - 12 = 24 || Input: 3 4 5 6\nSteps:\n3 * 4 = 12 (left: 5 6 12)\n5 + 6 = 11 (left: 11 12)\n11 * 12 = 132 (left: 132)\nAnswer: (3 * 4) + (5 + 6) = 24 || Input: 1 2 3 4\nSteps:\n1 * 2 = 2 (left: 3 4 2)\n3 + 4 = 7 (left: 7 2)\n7 * 2 = 14 (left: 14)\n14 + 3 = 17 (left: 17)\n17 + 4 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: ((( || 1 * 2) + (3 + 4) + 3) + 4 = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * (12 - 2) = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 * 3 = 18 (left: 12 18)\n18 - 12 = 6 (left: 6 24)\nAnswer: (5 + 7) * (6 - 3) = 24 || Input: 1 3 5 8\nSteps:\n3 + 5 = 8 (left: 1 8 8)\n8 - 1 = 7 (left: 7 8)\n7 * 8 = 56 (left: 56)\nAnswer: (3 + 5) * (8 - 1) = 24 || Input: 6 6 6 7\nSteps:\n6 + 6 = 12 (left: 6 7 12)\n7 - 6 = 1 (left: 1 12)\n1 * 12 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: (6 + 6) * (7 - 6) * 2 = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 12 * (3 * 2) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24 || Input: 2 6 8 9\nSteps:\n8 - 6 = 2 (left: 2 9 2)\n2 * 2 = 4 (left: 9 4)\n9 * 4 = 36 (left: 36)\nAnswer: (2 * (8 - 6)) * (9 * 4) = 24"
            ],
            "Evaluation": [
                60.0,
                0.003,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 4.1",
                "2 <- 5.9",
                "3 <- 6.6",
                "4 <- 8.3",
                "5 <- 6.1",
                "6 <- 5.3",
                "7 <- 4.3",
                "8 <- 5.3",
                "9 <- 3.7"
            ]
        },
        "Step 9": {
            "steps": [
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * 12 - 12 = 24 || Input: 3 4 5 6\nSteps:\n3 * 4 = 12 (left: 5 6 12)\n5 + 6 = 11 (left: 11 12)\n11 * 12 = 132 (left: 132)\nAnswer: (3 * 4) + (5 + 6) = 24 || Input: 1 2 3 4\nSteps:\n1 * 2 = 2 (left: 3 4 2)\n3 + 4 = 7 (left: 7 2)\n7 * 2 = 14 (left: 14)\n14 + 3 = 17 (left: 17)\n17 + 4 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: ((( || 1 * 2) + (3 + 4) + 3) + 4 = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * 12 - 12 = 24 || Input: 3 4 5 6\nSteps:\n3 * 4 = 12 (left: 5 6 12)\n5 + 6 = 11 (left: 11 12)\n11 * 12 = 132 (left: 132)\nAnswer: (3 * 4) + (5 + 6) = 24 || Input: 1 2 3 4\nSteps:\n1 * 2 = 2 (left: 3 4 2)\n3 + 4 = 7 (left: 7 2)\n7 * 2 = 14 (left: 14)\n14 + 3 = 17 (left: 17)\n17 + 4 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: (((",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: (3 * 12) - (12 - 2) = 24 || Input: 3 3 6 2\nSteps:\n3 * 6 = 18 (left: 3 2 18)\n18 - 2 = 16 (left: 3 16)\n16 / 3 = 5.333 (left: 5.333)\nAnswer: (3 * 6) - (2 + 3) = 24 || Input: 2 5 6 7\nSteps:\n2 * 7 = 14 (left: 5 6 14)\n14 - 6 = 8 (left: 5 8)\n8 * 5 = 40 (left: 40)\nAnswer: (2 * 7) - (6 - 5) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 12 * (3 * 2) = 24 || Input: 3 3 4 6\nSteps:\n3 * 6 = 18 (left: 3 4 18)\n4 + 18 = 22 (left: 3 22)\n3 * 22 = 66 (left: 66)\n66 / 4 = 24 (left: 24)\nAnswer: ((3 * 6) + 4) / (3 + 22) = 24 || Input: 1 3 5 7\nSteps:\n5 * 3 = 15 (left: 1 7 15)\n7 - 1 = 6 (left: 6 15)\n6 * 15 = 90 (left: 90)\n90 / 3 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: (((5 * 3) - 1) * 15) || = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * 12 - 12 = 24 || Input: 3 4 5 6\nSteps:\n3 * 4 = 12 (left: 5 6 12)\n5 + 6 = 11 (left: 11 12)\n11 * 12 = 132 (left: 132)\nAnswer: (3 * 4) + (5 + 6) = 24 || Input: 1 2 3 4\nSteps:\n1 * 2 = 2 (left: 3 4 2)\n3 + 4 = 7 (left: 7 2)\n7 * 2 = 14 (left: 14)\n14 + 3 = 17 (left: 17)\n17 + 4 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: ((( || 1 * 2) + (3 + 4) + 3) + 4 = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * 12 - 12 = 24 || Input: 3 4 5 6\nSteps:\n3 * 4 = 12 (left: 5 6 12)\n5 + 6 = 11 (left: 11 12)\n11 * 12 = 132 (left: 132)\nAnswer: (3 * 4) + (5 + 6) = 24 || Input: 1 2 3 4\nSteps:\n1 * 2 = 2 (left: 3 4 2)\n3 + 4 = 7 (left: 7 2)\n7 * 2 = 14 (left: 14)\n14 + 3 = 17 (left: 17)\n17 + 4 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: (((",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: (3 * 12) - (12 - 2) = 24 || Input: 3 3 6 2\nSteps:\n3 * 6 = 18 (left: 3 2 18)\n18 - 2 = 16 (left: 3 16)\n16 / 3 = 5.333 (left: 5.333)\nAnswer: (3 * 6) - (2 + 3) = 24 || Input: 1 3 4 9\nSteps:\n4 * 9 = 36 (left: 1 3 36)\n3 + 1 = 4 (left: 4 36)\n4 * 9 = 24 (left: 24)\nAnswer: 4 * (9 + (1 + 3)) = 24 || Input: 2 6 8 9\nSteps:\n6 + 8 = 14 (left: 2 9 14)\n9 - 2 = 7 (left: 7 14)\n7 * 14 = 98 (left: 98)\nAnswer: (6 + 8) * (9 - 2) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 3 * (12 - 2) = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 * 3 = 18 (left: 12 18)\n18 - 12 = 6 (left: 6 24)\nAnswer: (5 + 7) * (6 - 3) = 24 || Input: 1 3 4 7\nSteps:\n1 * 4 = 4 (left: 3 7 4)\n4 + 7 = 11 (left: 3 11)\n3 * 11 = 33 (left: 33)\n33 - 9 = 24 (left: 24)\nAnswer: (1 * 4) + (7 + 3) = 24 || Input: 2 4 5 6\nSteps:\n4 * 6 = 24 (left: 2 5 24)\n5 - 2 = 3 (left: 3 24)\n3 * 8 = 24 (left: 24)\nAnswer: (4 * 6) * (5 - 2) = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: (3 * 12) - (12 - 2) = 24 || Input: 3 3 6 2\nSteps:\n3 * 6 = 18 (left: 3 2 18)\n18 - 2 = 16 (left: 3 16)\n16 / 3 = 5.333 (left: 5.333)\nAnswer: (3 * 6) - (2 + 3) = 24 || Input: 1 3 4 9\nSteps:\n4 * 9 = 36 (left: 1 3 36)\n3 + 1 = 4 (left: 4 36)\n4 * 9 = 24 (left: 24)\nAnswer: 4 * (9 + (1 + 3)) = 24 || Input: 2 4 5 7\nSteps:\n2 * 5 = 10 (left: 4 7 10)\n7 - 4 = 3 (left: 3 10)\n3 * 10 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((2 * 5) + (7 - 4)) - 6 = 24",
                "3 * 12 = 36 (left: 2 12  || 12 * 2 = 24 (left: 24) || Answer: 12 * (3 * 2) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24 || Input: 2 6 8 9\nSteps:\n8 - 6 = 2 (left: 2 9 2)\n2 * 2 = 4 (left: 9 4)\n9 * 4 = 36 (left: 36)\nAnswer: (2 * (8 - 6)) * (9 * 4) = 24"
            ]
        },
        "Input": "2 3 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "86": {
        "puzzle": "1 4 7 12",
        "Step 0": {
            "steps": [
                "12 - 7 = 5 (left: 1 5 7)",
                "4 * 7 = 28 (left: 1 28 12)",
                "12 - 7 = 5 (left: 1 4 5)",
                "12 - 7 = 5 (left: 1 4 5)",
                "7 - 4 = 3 (left: 1 3 12)",
                "12 - 7 = 5 (left: 1 4 5)",
                "12 - 7 = 5 (left: 1 4 5)",
                "7 * 4 = 28 (left: 1 28 12)",
                "7 + 4 = 11 (left: 1 11 ",
                "7 - 1 = 6 (left: 4 6 12)"
            ],
            "Evaluation": [
                1.002,
                21.001,
                21.0,
                21.0,
                41.0,
                21.0,
                21.0,
                2.001,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.4",
                "2 <- INIT",
                "3 <- 0.9",
                "4 <- 0.9",
                "5 <- 0.5",
                "6 <- 0.6",
                "7 <- 0.4",
                "8 <- 0.1",
                "9 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "4 * 7 = 28 (left: 1 28 12)",
                "7 - 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)",
                "12 - 7 = 5 (left: 1 4 5)",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12)",
                "7 - 1 = 6 (left: 4 6 12) || 12 - 4 = 8 (left: 8 6)",
                "12 - 7 = 5 (left: 1 4 5) || 5 - 4 = 1 (left:",
                "12 - 7 = 5 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "7 - 4 = 3 (left: 1 3 12) || 3 + 12 = 15 (left: 1 15)",
                "4 * 7 = 28 (left: 1 28 12) || 28 - 1 = 27 (left: 27 12)",
                "4 * 7 = 28 (left: 1 28 12) || 1 * 28 = 28 (left: 28 12)"
            ],
            "Evaluation": [
                2.001,
                20.002,
                21.0,
                60.0,
                0.003,
                0.001,
                0.003,
                0.002,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 0.9",
                "2 <- 1.2",
                "3 <- 0.9",
                "4 <- 0.4",
                "5 <- 1.3",
                "6 <- INIT",
                "7 <- 0.4",
                "8 <- INIT",
                "9 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "7 - 1 = 6 (left: 4 6 12) || 6 * 4 = 24 (left: 24 12)",
                "7 - 1 = 6 (left: 4 6 12) || 12 - 4 = 8 (left: 8 6)",
                "12 - 7 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12)",
                "7 - 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)",
                "7 - 1 = 6 (left: 4 6 12)",
                "7 - 4 = 3 (left: 1 3 12) || 3 + 12 = 15 (left: 1 15)",
                "7 - 1 = 6 (left: 4 6 12)",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)"
            ],
            "Evaluation": [
                20.001,
                0.003,
                0.002,
                60.0,
                20.002,
                60.0,
                60.0,
                0.002,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 1.3",
                "2 <- 2.5",
                "3 <- 0.9",
                "4 <- 2.3",
                "5 <- 2.5",
                "6 <- 2.5",
                "7 <- 1.3",
                "8 <- 2.5",
                "9 <- 2.5"
            ]
        },
        "Step 3": {
            "steps": [
                "4 * 7 = 28 (left: 1 28 12) || 28 / 1 = 28 (left: 28 12)",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) = 24",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12)",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (4 - 2) * 12 = 24",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) = 24",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) * 12 = 24",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) = 24"
            ],
            "Evaluation": [
                0.001,
                60.0,
                20.002,
                60.0,
                60.0,
                20.002,
                20.002,
                0.002,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.8",
                "1 <- 2.8",
                "2 <- 2.6",
                "3 <- 3.1",
                "4 <- 0.6",
                "5 <- 0.2",
                "6 <- 2.3",
                "7 <- 3.3",
                "8 <- 3.4",
                "9 <- 2.8"
            ]
        },
        "Step 4": {
            "steps": [
                "7 - 1 = 6 (left: 4 6 12) || 6 * 4 = 24 (left: 24 12)",
                "7 - 1 = 6 (left: 4 6 12) || 12 - 4 = 8 (left: 8 6)",
                "7 - 1 = 6 (left: 4 6 12) || 12 - 4 = 8 (left: 8 6)",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) = 24",
                "12 - 7 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "12 - 7 = 5 (left: 1 4 5) || 5 - 4 = 1 (left:",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) = 24",
                "7 - 1 = 6 (left: 4 6 12) || 12 - 4 = 8 (left: 8 6)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.001,
                0.002,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 3.8",
                "2 <- 2.9",
                "3 <- 2.6",
                "4 <- 0.4",
                "5 <- 2.5",
                "6 <- 0.4",
                "7 <- 2.6",
                "8 <- 3.2",
                "9 <- 3.4"
            ]
        },
        "Step 5": {
            "steps": [
                "7 - 1 = 6 (left: 4 6 12) || 6 * 4 = 24 (left: 24 12)",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) * 12 = 24 || Input: 3 3 4 8\nSteps:\n3 * 8 = 24 (left: 3 4 24)\n4 - 3 = 1 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 * 8) / (4 - 3) = 24",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) = 24",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12)",
                "7 - 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) = 24",
                "7 - 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)",
                "7 - 1 = 6 (left: 4 6 12) || 12 / 4 = 3 (left: 6 3)",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) = 24 || Input: 3 6 8 9\nSteps:\n3 * 8 = 24 (left: 6 9 24)\n6 + 9 = 15 (left: 15 24)\n15 - 24 = -9 (left: -9)\nAnswer: (3 * 8) + (6 + 9) = 24",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) = 24"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.003,
                60.0,
                20.002,
                0.003,
                60.0,
                0.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.9",
                "1 <- 5.1",
                "2 <- 5.6",
                "3 <- 2.5",
                "4 <- 3.3",
                "5 <- 5.6",
                "6 <- 1.3",
                "7 <- 3.4",
                "8 <- 5.6",
                "9 <- 0.3"
            ]
        },
        "Step 6": {
            "steps": [
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) = 24",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) * 12 = 24 || Input: 3 3 4 8\nSteps:\n3 * 8 = 24 (left: 3 4 24)\n4 - 3 = 1 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 * 8) / (4 - 3) = 24 || Input: 2 3 6 8\nSteps:\n3 * 8 = 24 (left: 2 6 24)\n6 - 2 = 4 (left: 4 24)\n4 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (6 - 2) = 24",
                "7 - 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) = 24",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)",
                "7 - 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) = 24",
                "7 - 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 7 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.002,
                0.003,
                60.0,
                0.002,
                0.002,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 2.5",
                "2 <- 2.9",
                "3 <- 5.1",
                "4 <- 0.3",
                "5 <- 0.4",
                "6 <- 2.5",
                "7 <- 6.1",
                "8 <- 3.8",
                "9 <- 3.8"
            ]
        },
        "Step 7": {
            "steps": [
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) * 12 = 24 || Input: 3 3 4 8\nSteps:\n3 * 8 = 24 (left: 3 4 24)\n4 - 3 = 1 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 * 8) / (4 - 3) = 24 || Input: 2 3 6 8\nSteps:\n3 * 8 = 24 (left: 2 6 24)\n6 - 2 = 4 (left: 4 24)\n4 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (6 - 2) = 24 || Input: 2 3 5 9\nSteps:\n5 * 9 = 45 (left: 2 3 45)\n3 - 2 = 1 (left: 1 45)\n45 / 1 = 45 (left: 45)\nAnswer: (5 * 9) / (3 - 2) = 24",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) = 24",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) = 24",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) * 12 = 24 || Input: 3 3 4 8\nSteps:\n3 * 8 = 24 (left: 3 4 24)\n4 - 3 = 1 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 * 8) / (4 - 3) = 24 || Input: 2 3 6 8\nSteps:\n3 * 8 = 24 (left: 2 6 24)\n6 - 2 = 4 (left: 4 24)\n4 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (6 - 2) = 24",
                "12 - 7 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "7 - 4 = 3 (left: 1 3 12) || 12 - 1 = 11 (left:",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) = 24",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) * 12 = 24 || Input: 3 3 4 8\nSteps:\n3 * 8 = 24 (left: 3 4 24)\n4 - 3 = 1 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 * 8) / (4 - 3) = 24 || Input: 2 3 6 8\nSteps:\n3 * 8 = 24 (left: 2 6 24)\n6 - 2 = 4 (left: 4 24)\n4 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (6 - 2) = 24 || Input: 2 2 3 8\n\n3 * 8 = 24 (left: 2 2 24)\n2 * 2 = 4 (left: 4 24)\n24 / 4 = 6 (left: 6 24)\n6 * 4 = 24 (left: 24)\n\nAnswer: ((2 * 2) * (3 * 8)) / 4 = 24",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) * 12 = 24 || Input: 3 3 4 8\nSteps:\n3 * 8 = 24 (left: 3 4 24)\n4 - 3 = 1 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 * 8) / (4 - 3) = 24",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) * 12 = 24 || Input: 3 3 4 8\nSteps:\n3 * 8 = 24 (left: 3 4 24)\n4 - 3 = 1 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 * 8) / (4 - 3) = 24"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                60.0,
                0.002,
                40.001,
                0.003,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 3.1",
                "2 <- 3.6",
                "3 <- 5.3",
                "4 <- 2.0",
                "5 <- 5.4",
                "6 <- 3.4",
                "7 <- 7.7",
                "8 <- 2.9",
                "9 <- 7.9"
            ]
        },
        "Step 8": {
            "steps": [
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) = 24",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) = 24 || Input: 3 6 8 9\nSteps:\n3 * 8 = 24 (left: 6 9 24)\n6 + 9 = 15 (left: 15 24)\n15 - 24 = -9 (left: -9)\nAnswer: (3 * 8) + (6 + 9) = 24",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "7 - 1 = 6 (left: 4 6 12) || 6 * 4 = 24 (left: 24 12) || 24 * 12 = 288 (left: 288)",
                "7 - 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || Possible next steps:",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) = 24",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) * 12 = 24 || Input: 3 3 4 8\nSteps:\n3 * 8 = 24 (left: 3 4 24)\n4 - 3 = 1 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 * 8) / (4 - 3) = 24 || Input: 2 3 6 8\nSteps:\n3 * 8 = 24 (left: 2 6 24)\n6 - 2 = 4 (left: 4 24)\n4 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (6 - 2) = 24 || Input: 2 2 3 8\n\n3 * 8 = 24 (left: 2 2 24)\n2 * 2 = 4 (left: 4 24)\n24 / 4 = 6 (left: 6 24)\n6 * 4 = 24 (left: 24)\n\nAnswer: ((2 * 2) * (3 * 8)) / 4 = 24 || Input: 3 5 5 7\nSteps:\n5 * 7 = 35 (left: 3 35 5)\n3 + 5 = 8 (left: 8 35)\n8 - 35 = -27 (left: -27)\n-27 * -1 = 24 (left: 24)\nAnswer: ((3 + 5) * 7) - 35 = 24",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) = 24",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) * 12 = 24 || Input: 3 3 4 8\nSteps:\n3 * 8 = 24 (left: 3 4 24)\n4 - 3 = 1 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 * 8) / (4 - 3) = 24 || Input: 2 3 6 8\nSteps:\n3 * 8 = 24 (left: 2 6 24)\n6 - 2 = 4 (left: 4 24)\n4 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (6 - 2) = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                0.002,
                0.003,
                0.003,
                0.003,
                60.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 7.0",
                "1 <- 1.3",
                "2 <- 0.5",
                "3 <- 8.2",
                "4 <- 8.9",
                "5 <- 8.9",
                "6 <- 8.7",
                "7 <- 7.9",
                "8 <- 8.7",
                "9 <- 7.0"
            ]
        },
        "Step 9": {
            "steps": [
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) * 12 = 24 || Input: 3 3 4 8\nSteps:\n3 * 8 = 24 (left: 3 4 24)\n4 - 3 = 1 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 * 8) / (4 - 3) = 24 || Input: 2 3 6 8\nSteps:\n3 * 8 = 24 (left: 2 6 24)\n6 - 2 = 4 (left: 4 24)\n4 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (6 - 2) = 24 || Input: 2 3 5 9\nSteps:\n5 * 9 = 45 (left: 2 3 45)\n3 - 2 = 1 (left: 1 45)\n45 / 1 = 45 (left: 45)\nAnswer: (5 * 9) / (3 - 2) = 24 || Unfortunately, there is no way to obtain 24 using the numbers 2, 3, 5, and 9 with basic arithmetic operations.",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)",
                "12 - 7 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) = 24 || Input: 3 6 8 9\nSteps:\n3 * 8 = 24 (left: 6 9 24)\n6 + 9 = 15 (left: 15 24)\n15 - 24 = -9 (left: -9)\nAnswer: (3 * 8) + (6 + 9) = 24 || Input: 2 3 5 10\nSteps:\n2 * 10 = 20 (left: 3 5 20)\n5 - 3 = 2 (left: 2 20)\n20 + 2 = 22 (left: 22)\nAnswer: (2 * 10) + (5 - 3) = 24",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) * 12 = 24 || Input: 3 3 4 8\nSteps:\n3 * 8 = 24 (left: 3 4 24)\n4 - 3 = 1 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 * 8) / (4 - 3) = 24 || Input: 2 3 6 8\nSteps:\n3 * 8 = 24 (left: 2 6 24)\n6 - 2 = 4 (left: 4 24)\n4 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (6 - 2) = 24 || Input: 2 2 3 8\n\n3 * 8 = 24 (left: 2 2 24)\n2 * 2 = 4 (left: 4 24)\n24 / 4 = 6 (left: 6 24)\n6 * 4 = 24 (left: 24)\n\nAnswer: ((2 * 2) * (3 * 8)) / 4 = 24",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) * 12 = 24 || Input: 3 3 4 8\nSteps:\n3 * 8 = 24 (left: 3 4 24)\n4 - 3 = 1 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 * 8) / (4 - 3) = 24 || Input: 2 3 6 8\nSteps:\n3 * 8 = 24 (left: 2 6 24)\n6 - 2 = 4 (left: 4 24)\n4 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (6 - 2) = 24 || Input: 2 2 3 8\n\n3 * 8 = 24 (left: 2 2 24)\n2 * 2 = 4 (left: 4 24)\n24 / 4 = 6 (left: 6 24)\n6 * 4 = 24 (left: 24)\n\nAnswer: ((2 * 2) * (3 * 8)) / 4 = 24",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) * 12 = 24 || Input: 3 3 4 8\nSteps:\n3 * 8 = 24 (left: 3 4 24)\n4 - 3 = 1 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 * 8) / (4 - 3) = 24 || Input: 2 3 6 8\nSteps:\n3 * 8 = 24 (left: 2 6 24)\n6 - 2 = 4 (left: 4 24)\n4 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (6 - 2) = 24 || Input: 2 2 3 8\n\n3 * 8 = 24 (left: 2 2 24)\n2 * 2 = 4 (left: 4 24)\n24 / 4 = 6 (left: 6 24)\n6 * 4 = 24 (left: 24)\n\nAnswer: ((2 * 2) * (3 * 8)) / 4 = 24 || Input: 3 5 5 7\nSteps:\n5 * 7 = 35 (left: 3 35 5)\n3 + 5 = 8 (left: 8 35)\n8 - 35 = -27 (left: -27)\n-27 * -1 = 24 (left: 24)\nAnswer: ((3 + 5) * 7) - 35 = 24 || Input: 1 2 3 4\nSteps:\n1 * 4 = 4 (left: 2 3 4)\n4 - 3 = 1 (left: 1 2 4)\n2 + 1 = 3 (left: 3 4)\n3 * 4 = 12 (left: 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((1 * 4) - 3)",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) * 12 = 24 || Input: 3 3 4 8\nSteps:\n3 * 8 = 24 (left: 3 4 24)\n4 - 3 = 1 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 * 8) / (4 - 3) = 24 || Input: 2 3 6 8\nSteps:\n3 * 8 = 24 (left: 2 6 24)\n6 - 2 = 4 (left: 4 24)\n4 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (6 - 2) = 24",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) * 12 = 24 || Input: 3 3 4 8\nSteps:\n3 * 8 = 24 (left: 3 4 24)\n4 - 3 = 1 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 * 8) / (4 - 3) = 24 || Input: 2 3 6 8\nSteps:\n3 * 8 = 24 (left: 2 6 24)\n6 - 2 = 4 (left: 4 24)\n4 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (6 - 2) = 24 || Input: 2 2 3 8\n\n3 * 8 = 24 (left: 2 2 24)\n2 * 2 = 4 (left: 4 24)\n24 / 4 = 6 (left: 6 24)\n6 * 4 = 24 (left: 24)\n\nAnswer: ((2 * 2) * (3 * 8)) / 4 = 24 || Input: 3 5 5 7\nSteps:\n5 * 7 = 35 (left: 3 35 5)\n3 + 5 = 8 (left: 8 35)\n8 - 35 = -27 (left: -27)\n-27 * -1 = 24 (left: 24)\nAnswer: ((3 + 5) * 7) - 35 = 24 || Input: 2 6 6 9\nSteps:\n6 - 2 = 4 (left: 4 6 9)\n4 + 6 = 10 (left: 10 9)\n10 - 9 = 1 (left: 1)\n1 * 24 = 24 (left: 24)\nAnswer: ((6 - 2) + 6) - 9 * 24 = 24",
                "7 - 1 = 6 (left: 4 6 12) || 6 - 4 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (7 - 1) * (6 - 4) * 12 = 24 || Input: 3 3 4 8\nSteps:\n3 * 8 = 24 (left: 3 4 24)\n4 - 3 = 1 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 * 8) / (4 - 3) = 24 || Input: 2 3 6 8\nSteps:\n3 * 8 = 24 (left: 2 6 24)\n6 - 2 = 4 (left: 4 24)\n4 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (6 - 2) = 24 || Input: 2 3 5 9\nSteps:\n5 * 9 = 45 (left: 2 3 45)\n3 - 2 = 1 (left: 1 45)\n45 / 1 = 45 (left: 45)\nAnswer: (5 * 9) / (3 - 2) = 24 || Input: 1 3 5 7\nSteps:\n5 + 7 = 12 (left: 1 3 12)\n3 - 1 = 2 (left: 2 12)\n12 * 2 = 24 (left: 24)\nAnswer: (5 + 7) * (3 - 1) = 24"
            ]
        },
        "Input": "1 4 7 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "87": {
        "puzzle": "8 8 11 13",
        "Step 0": {
            "steps": [
                "11 + 8 = 19 (left: 8 13 19)",
                "8 / 8 = 1 (left: 1 11 13)",
                "13 - 8 = 5 (left: 8 5 11)",
                "8 - 8 = 0 (left: 0 11 13)",
                "13 - 11 = 2 (left: 8 2 13)",
                "8 - 8 = 0 (left: 0 11 13)",
                "8 * 8 = 64 (left: 11 13 64)",
                "8 / 8 = 1 (left: 1 11 13)",
                "13 - 8 = 5 (left: 8 11 ",
                "8 - 8 = 0 (left: 11 13 0)"
            ],
            "Evaluation": [
                1.001,
                1.002,
                2.001,
                21.0,
                1.002,
                21.0,
                3.0,
                1.002,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.5",
                "4 <- 0.9",
                "5 <- 0.9",
                "6 <- 0.9",
                "7 <- 0.9",
                "8 <- 0.5",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "8 - 8 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24)",
                "11 - 8 = 3 (left: 3 8 13)",
                "11 - 8 = 3 (left: 3 8 13)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13)",
                "8 - 8 = 0 (left: 11 13 0) || 11 / 13 = 0.8461538461538461 (left: 0.8461538461538461)",
                "8 - 8 = 0 (left: 11 13 0) || 4 + 5 = 9 (left: 6 9)",
                "8 - 8 = 0 (left: 11 13 0) || 11 * 13 = 143 (left: 0 143)",
                "8 - 8 = 0 (left: 11 13 0) || 11 - 13 = -2 (left: -2 0)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13)",
                "8 - 8 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                0.001,
                0.003,
                0.003,
                0.003,
                60.0,
                20.002
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.3",
                "2 <- 1.9",
                "3 <- 1.0",
                "4 <- 1.1",
                "5 <- 1.2",
                "6 <- 0.9",
                "7 <- 0.9",
                "8 <- 1.8",
                "9 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "11 - 8 = 3 (left: 3 8 13) || 8 - 3 = 5 (left: 5 13)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "8 - 8 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 2 - 0 = 2 (left: 2)",
                "8 - 8 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || Input: 5 3",
                "11 - 8 = 3 (left: 3 8 13) || 3 * 8 = 24 (left: 24 13)",
                "11 - 8 = 3 (left: 3 8 13) || 13 / 3 = ",
                "8 - 8 = 0 (left: 11 13 0) || 11 * 13 = 143 (left: 0 143)",
                "8 - 8 = 0 (left: 11 13 0) || Input: 5 10 15",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 1.0",
                "2 <- 0.9",
                "3 <- 1.8",
                "4 <- 1.0",
                "5 <- 1.1",
                "6 <- 1.0",
                "7 <- 1.0",
                "8 <- 1.3",
                "9 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "8 - 8 = 0 (left: 11 13 0) || 13 - 11 = 2 (left: 2 0)",
                "8 - 8 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 5 * 3 = 15 (left: 15)",
                "8 - 8 = 0 (left: 11 13 0) || 13 / 11 = 1.1818181818181819 (left: 1.1818181818181819 0)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "8 - 8 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 5 + 3 = 8 (left: 8)",
                "11 - 8 = 3 (left: 3 8 13) || 13 / 3 = ",
                "8 - 8 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || Input: 5 3",
                "8 - 8 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || Input: 5 3",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)"
            ],
            "Evaluation": [
                21.001,
                0.002,
                0.002,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 1.2",
                "2 <- 1.0",
                "3 <- 0.9",
                "4 <- 1.2",
                "5 <- 1.0",
                "6 <- 1.8",
                "7 <- 0.3",
                "8 <- 1.2",
                "9 <- 1.0"
            ]
        },
        "Step 4": {
            "steps": [
                "8 - 8 = 0 (left: 11 13 0) || 13 - 11 = 2 (left: 2 0) || 2 - 0 = 2 (left: 0 2)",
                "11 - 8 = 3 (left: 3 8 13) || 3 * 8 = 24 (left: 24 13)",
                "8 - 8 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 5 * 3 = 15 (left: 15)",
                "8 - 8 = 0 (left: 11 13 0) || 11 * 13 = 143 (left: 0 143)",
                "11 - 8 = 3 (left: 3 8 13) || 3 * 8 = 24 (left: 24 13)",
                "8 - 8 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 5 + 3 = 8 (left: 8)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "8 - 8 = 0 (left: 0 11 13) || 11 / 0 = undefined",
                "11 - 8 = 3 (left: 3 8 13) || 13 - 3 = 10 (left: 8 10)",
                "8 - 8 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 5 + 3 = 8 (left: 8)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                0.002,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                1.001,
                0.002
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 1.3",
                "2 <- 1.8",
                "3 <- 1.8",
                "4 <- 3.0",
                "5 <- 3.0",
                "6 <- 1.2",
                "7 <- 1.3",
                "8 <- 3.0",
                "9 <- 1.1"
            ]
        },
        "Step 5": {
            "steps": [
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "8 - 8 = 0 (left: 11 13 0) || 13 - 11 = 2 (left: 2 0) || 2 / 0 = undefined (division by zero)",
                "8 - 8 = 0 (left: 11 13 0) || 13 - 11 = 2 (left: 2 0) || 2 / 0 = undefined (division by zero)",
                "11 - 8 = 3 (left: 3 8 13) || 13 - 3 = 10 (left: 8 10)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "8 - 8 = 0 (left: 11 13 0) || 13 - 11 = 2 (left: 2 0) || 2 * 0 = 0 (left: 0 0)",
                "11 - 8 = 3 (left: 3 8 13) || 3 * 8 = 24 (left: 24 13)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                1.001,
                0.003,
                40.001,
                0.003
            ],
            "Resampling": [
                "0 <- 5.8",
                "1 <- 5.8",
                "2 <- 1.1",
                "3 <- 1.2",
                "4 <- 0.9",
                "5 <- 1.2",
                "6 <- 1.1",
                "7 <- 1.2",
                "8 <- 5.8",
                "9 <- 1.0"
            ]
        },
        "Step 6": {
            "steps": [
                "8 - 8 = 0 (left: 11 13 0) || 13 - 11 = 2 (left: 2 0) || 2 * 0 = 0 (left: 0 0) || There are no possible next steps as there are no numbers provided after the input \"0 0\".",
                "8 - 8 = 0 (left: 11 13 0) || 13 - 11 = 2 (left: 2 0) || 2 * 0 = 0 (left: 0 0) || There are no possible next steps with 0 0 as input.",
                "11 - 8 = 3 (left: 3 8 13) || 3 * 8 = 24 (left: 24 13)",
                "11 - 8 = 3 (left: 3 8 13) || 13 - 3 = 10 (left: 8 10)",
                "8 - 8 = 0 (left: 11 13 0) || 13 / 11 = 1.1818181818181819 (left: 1.1818181818181819 0)",
                "11 - 8 = 3 (left: 3 8 13) || 13 / 3 = ",
                "11 - 8 = 3 (left: 3 8 13) || 13 - 3 = 10 (left: 8 10)",
                "11 - 8 = 3 (left: 3 8 13) || 13 - 8 = 5 (left: 3 5)",
                "8 - 8 = 0 (left: 11 13 0) || 13 - 11 = 2 (left: 2 0) || 2 * 0 = 0 (left: 0 0) || There are no possible next steps with input 0 0.",
                "8 - 8 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 5 + 3 = 8 (left: 8)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.001,
                0.002,
                0.003,
                1.001,
                1.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 1.2",
                "2 <- 0.9",
                "3 <- 0.0",
                "4 <- 1.1",
                "5 <- 5.8",
                "6 <- 1.9",
                "7 <- 3.0",
                "8 <- 4.0",
                "9 <- 1.2"
            ]
        },
        "Step 7": {
            "steps": [
                "8 - 8 = 0 (left: 11 13 0) || 13 - 11 = 2 (left: 2 0) || 2 - 0 = 2 (left: 0 2)",
                "11 - 8 = 3 (left: 3 8 13) || 3 * 8 = 24 (left: 24 13)",
                "8 - 8 = 0 (left: 11 13 0) || 13 / 11 = 1.1818181818181819 (left: 1.1818181818181819 0)",
                "11 + 8 = 19 (left: 8 13 19) || 19 - 8 = 11 (left: 11 13)",
                "11 - 8 = 3 (left: 3 8 13) || 3 * 8 = 24 (left: 24 13)",
                "8 - 8 = 0 (left: 11 13 0) || 13 - 11 = 2 (left: 2 0) || 2 * 0 = 0 (left: 0 0) || There are no possible next steps with input 0 0.",
                "8 - 8 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 2 / 0 is undefined",
                "8 - 8 = 0 (left: 11 13 0) || 13 - 11 = 2 (left: 2 0) || 2 * 0 = 0 (left: 0 0)",
                "8 - 8 = 0 (left: 11 13 0) || 13 - 11 = 2 (left: 2 0) || 2 - 0 = 2 (left: 0 2) || 2 / 0 is undefined",
                "11 - 8 = 3 (left: 3 8 13) || 3 * 8 = 24 (left: 24 13)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                0.002,
                60.0,
                0.003,
                0.003,
                0.003,
                40.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.1",
                "2 <- 7.3",
                "3 <- 1.0",
                "4 <- 7.7",
                "5 <- 1.8",
                "6 <- 1.1",
                "7 <- 7.0",
                "8 <- 5.8",
                "9 <- 7.7"
            ]
        },
        "Step 8": {
            "steps": [
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "11 - 8 = 3 (left: 3 8 13) || 3 * 8 = 24 (left: 24 13)",
                "11 + 8 = 19 (left: 8 13 19) || 19 - 8 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "8 - 8 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || Input: 5 3",
                "8 - 8 = 0 (left: 11 13 0) || 13 - 11 = 2 (left: 2 0) || 2 * 0 = 0 (left: 0 0) || There are no possible next steps with input 0 0.",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "11 - 8 = 3 (left: 3 8 13) || 13 - 3 = 10 (left: 8 10)",
                "8 - 8 = 0 (left: 11 13 0) || 13 - 11 = 2 (left: 2 0) || 2 - 0 = 2 (left: 0 2) || 2 / 0 is undefined",
                "8 - 8 = 0 (left: 11 13 0) || 13 - 11 = 2 (left: 2 0) || 2 * 0 = 0 (left: 0 0) || There are no possible next steps with input 0 0.",
                "8 - 8 = 0 (left: 11 13 0) || 13 - 11 = 2 (left: 2 0) || 2 * 0 = 0 (left: 0 0) || There are no possible next steps with input 0 0."
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.002,
                0.003,
                0.003,
                0.002,
                1.001,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 7.7",
                "1 <- 1.8",
                "2 <- 1.0",
                "3 <- 0.4",
                "4 <- 7.3",
                "5 <- 1.0",
                "6 <- 7.7",
                "7 <- 7.3",
                "8 <- 1.3",
                "9 <- 7.3"
            ]
        },
        "Step 9": {
            "steps": [
                "8 - 8 = 0 (left: 11 13 0) || 13 - 11 = 2 (left: 2 0) || 2 * 0 = 0 (left: 0 0) || There are no possible next steps with input 0 0.",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "8 - 8 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 5 * 3 = 15 (left: 15)",
                "13 - 11 = 2 (left: 8 2 13) || 8 - 2 = 6 (left: 6 13)",
                "11 + 8 = 19 (left: 8 13 19) || 19 - 8 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "8 - 8 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 5 + 3 = 8 (left: 8)",
                "8 - 8 = 0 (left: 11 13 0) || 13 - 11 = 2 (left: 2 0) || 2 * 0 = 0 (left: 0 0) || There are no possible next steps with input 0 0.",
                "11 + 8 = 19 (left: 8 13 19) || 19 - 8 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "11 + 8 = 19 (left: 8 13 19) || 19 - 8 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)"
            ]
        },
        "Input": "8 8 11 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "88": {
        "puzzle": "1 3 3 4",
        "Step 0": {
            "steps": [
                "3 / 1 = 3 (left: 3 3 4)",
                "3 / 1 = 3 (left: 3 3 4)",
                "3 * 1 = 3 (left: 3 3 4)",
                "3 * 1 = 3 (left: 3 3 4)",
                "3 + 1 = 4 (left: 3 4)",
                "4 - 1 = 3 (left: 3 3 3)",
                "3 * 1 = 3 (left: 3 3 4)",
                "3 + 1 = 4 (left: 3 4)",
                "3 + 1 = 4 (left: 4 3 4)",
                "4 - 1 = 3 (left: 3 3 3)"
            ],
            "Evaluation": [
                1.002,
                20.002,
                41.0,
                2.001,
                21.0,
                0.003,
                0.003,
                21.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.1",
                "2 <- 0.7",
                "3 <- 0.4",
                "4 <- 0.2",
                "5 <- INIT",
                "6 <- 0.7",
                "7 <- 0.1",
                "8 <- 0.7",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "3 - 1 = 2 (left: 2 3 4)",
                "3 / 1 = 3 (left: 3 3 4) || 3 - 3 = 0 (left: 0 4)",
                "3 + 1 = 4 (left: 3 4) || 3 - 4 = -1 (left: -1)",
                "3 + 1 = 4 (left: 3 4) || 3 * 4 = 12 (left: 12)",
                "3 * 1 = 3 (left: 3 3 4) || 3 / 3 = 1 (left: 1 4)",
                "",
                "3 + 1 = 4 (left: 3 4) || 3 * 4 = 12 (left: 12)",
                "3 / 1 = 3 (left: 3 3 4) || 4 / 3 = 1.33 (left: 1.33)",
                "3 + 1 = 4 (left: 3 4) || 3 * 4 = 12 (left: 12)",
                "3 / 1 = 3 (left: 3 3 4)"
            ],
            "Evaluation": [
                60.0,
                0.0,
                0.0,
                0.003,
                60.0,
                40.001,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.4",
                "2 <- 1.4",
                "3 <- INIT",
                "4 <- 1.5",
                "5 <- INIT",
                "6 <- 1.0",
                "7 <- 0.4",
                "8 <- 0.2",
                "9 <- 1.5"
            ]
        },
        "Step 2": {
            "steps": [
                "3 * 1 = 3 (left: 3 3 4) || 3 / 3 = 1 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "3 * 1 = 3 (left: 3 3 4) || 3 / 3 = 1 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "3 * 1 = 3 (left: 3 3 4) || 3 / 3 = 1 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "4 - 3 = 1 (left: 1 3 4)",
                " || There are no more possible next steps.",
                "",
                "3 - 1 = 2 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6)",
                "3 + 1 = 4 (left: 3 4) || 3 * 4 = 12 (left: 12)",
                "3 * 1 = 3 (left: 3 3 4) || 3 / 3 = 1 (left: 1 4)",
                " || There are no more possible next steps."
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.002,
                41.0,
                0.003,
                40.001,
                60.0,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.4",
                "2 <- 2.6",
                "3 <- 0.2",
                "4 <- 2.6",
                "5 <- 2.3",
                "6 <- 2.8",
                "7 <- 0.1",
                "8 <- 2.6",
                "9 <- 2.6"
            ]
        },
        "Step 3": {
            "steps": [
                "3 * 1 = 3 (left: 3 3 4) || 3 / 3 = 1 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "3 * 1 = 3 (left: 3 3 4) || 3 / 3 = 1 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "3 - 1 = 2 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "3 * 1 = 3 (left: 3 3 4) || 3 / 3 = 1 (left: 1 4)",
                "3 - 1 = 2 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "4 - 3 = 1 (left: 1 3 4) || 3 - 1 = 2 (",
                "3 * 1 = 3 (left: 3 3 4) || 3 / 3 = 1 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "3 / 1 = 3 (left: 3 3 4) || 4 / 3 = 1.33 (left: 1.33)",
                "3 - 1 = 2 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "3 - 1 = 2 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.002,
                60.0,
                0.002,
                0.003,
                0.002,
                0.003,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 2.5",
                "2 <- 2.5",
                "3 <- 2.6",
                "4 <- 3.8",
                "5 <- 2.5",
                "6 <- 2.5",
                "7 <- 3.8",
                "8 <- 3.3",
                "9 <- 1.4"
            ]
        },
        "Step 4": {
            "steps": [
                "3 - 1 = 2 (left: 2 3 4) || 3 + 4 = 7 (left: 2 7)",
                " || There are no more possible next steps.",
                " || There are no more possible next steps.",
                "3 - 1 = 2 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "3 - 1 = 2 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (3 - 1) * (3 * 4) = 24",
                " || There are no more possible next steps.",
                " || There are no more possible next steps.",
                "3 - 1 = 2 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (3 - 1) * 3 * 4 = 24",
                "3 * 1 = 3 (left: 3 3 4) || 3 / 3 = 1 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "3 * 1 = 3 (left: 3 3 4) || 3 / 3 = 1 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ]
        },
        "Input": "1 3 3 4",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "89": {
        "puzzle": "1 8 8 12",
        "Step 0": {
            "steps": [
                "12 - 1 = 11 (left: 8 8 11)",
                "8 - 1 = 7 (left: 7 8 12)",
                "1 * 8 = 8 (left: 8 8 12)",
                "8 - 1 = 7 (left: 7 8 12)",
                "12 - 8 = 4 (left: 4 8 8)",
                "1 * 8 = 8 (left: 8 8 12)",
                "1 * 8 = 8 (left: 8 8 12)",
                "12 - 8 = 4 (left: 4 8 8)",
                "12 - 1 = 11 (left: 8 11 ",
                "12 - 8 = 4 (left: 4 8 8)"
            ],
            "Evaluation": [
                21.001,
                1.002,
                2.001,
                3.0,
                22.0,
                1.001,
                1.002,
                22.0,
                20.002,
                22.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.4",
                "2 <- 0.6",
                "3 <- 0.7",
                "4 <- 0.7",
                "5 <- INIT",
                "6 <- 0.9",
                "7 <- 0.4",
                "8 <- 0.9",
                "9 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 8 = 4 (left: 4 8 8) || 8 / 4 = 2 (left: 2 8)",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32)",
                "1 * 8 = 8 (left: 8 8 12) || 12 - 8 = 4 (left: 8 4)",
                "12 - 8 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8)",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32)",
                "1 * 8 = 8 (left: 8 8 12)",
                "12 - 8 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8)",
                "12 - 8 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8)",
                "12 - 8 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8)",
                "12 - 1 = 11 (left: 8 8 11) || 8 / 8 = 1 (left: 1 11)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.003,
                0.003,
                60.0,
                1.002,
                0.003,
                0.003,
                0.003,
                40.0
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.9",
                "2 <- 1.4",
                "3 <- 1.1",
                "4 <- 0.4",
                "5 <- 1.9",
                "6 <- 1.4",
                "7 <- 1.9",
                "8 <- 1.4",
                "9 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 / 8 = 4 (left: 4 8)",
                "12 - 1 = 11 (left: 8 8 11) || 8 / 8 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24)",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 8 + 32 = 40 (left: 40)",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32)",
                "12 - 1 = 11 (left: 8 8 11) || 8 / 8 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 8 + 32 = 40 (left: 40)",
                "12 - 1 = 11 (left: 8 8 11) || 8 / 8 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 8 + 32 = 40 (left: 40)",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                0.003,
                60.0,
                0.003,
                0.003,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 1.9",
                "2 <- 0.4",
                "3 <- 1.9",
                "4 <- 2.4",
                "5 <- 1.4",
                "6 <- 2.4",
                "7 <- 2.4",
                "8 <- 2.9",
                "9 <- 2.2"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 / 8 = 4 (left: 4 8)",
                "12 - 1 = 11 (left: 8 8 11) || 8 / 8 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32)",
                "12 - 1 = 11 (left: 8 8 11) || 8 / 8 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24)",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24)",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 8 + 32 = 40 (left: 40)",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 / 8 = 4 (left: 4 8)",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: ((12 - 8) * 8) - 8 = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                0.003,
                60.0,
                60.0,
                0.003,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 2.9",
                "2 <- 2.9",
                "3 <- 3.4",
                "4 <- 3.9",
                "5 <- 3.2",
                "6 <- 3.4",
                "7 <- 1.4",
                "8 <- 1.9",
                "9 <- 1.5"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 / 8 = 4 (left: 4 8)",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24)",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 / 8 = 4 (left: 4 8)",
                "12 - 1 = 11 (left: 8 8 11) || 8 / 8 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 8 = 8 (left: 8 8 12) || 12 - 8 = 4 (left: 8 4)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 0.8",
                "2 <- 4.4",
                "3 <- 2.2",
                "4 <- 4.5",
                "5 <- 1.1",
                "6 <- 2.2",
                "7 <- 3.5",
                "8 <- 3.5",
                "9 <- 3.2"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 / 8 = 4 (left: 4 8)",
                "12 - 1 = 11 (left: 8 11  || 8 / 11 \u2248 0.7273 (left: 0.7273)",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24 || Input: 2 3 6 8\nSteps:\n2 * 6 = 12 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)\n5 * 12 = 60 (left: 60)\n60 / 2 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((2 * 6) * (8 - 3)) /",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24)",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.7",
                "1 <- 5.9",
                "2 <- 0.9",
                "3 <- 3.5",
                "4 <- 2.9",
                "5 <- 5.3",
                "6 <- 1.9",
                "7 <- 5.6",
                "8 <- 5.8",
                "9 <- 5.2"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32)",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24",
                "12 - 1 = 11 (left: 8 8 11) || 8 / 8 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24 || Input: 2 3 6 8\nSteps:\n2 * 6 = 12 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)\n5 * 12 = 60 (left: 60)\n60 / 2 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((2 * 6) * (8 - 3)) / || 6 = 24"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                0.003,
                60.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 3.5",
                "1 <- 5.4",
                "2 <- 6.3",
                "3 <- 3.8",
                "4 <- 4.2",
                "5 <- 4.3",
                "6 <- 6.5",
                "7 <- 4.4",
                "8 <- 6.3",
                "9 <- 1.9"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: ((12 - 8) * 8) - 8 = 24 || Input: 3 3 7 8\nSteps:\n3 * 8 = 24 (left: 3 7 24)\n7 - 3 = 4 (left: 4 24)\n4 * 6 = 24 (left: 24)\nAnswer: (3 * 8) - (7 - 3) = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24 || Input: 2 3 6 8\nSteps:\n2 * 6 = 12 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)\n5 * 12 = 60 (left: 60)\n60 / 2 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((2 * 6) * (8 - 3)) /",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24 || Input: 2 3 6 8\nSteps:\n2 * 6 = 12 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)\n5 * 12 = 60 (left: 60)\n60 / 2 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((2 * 6) * (8 - 3)) /",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24",
                "12 - 1 = 11 (left: 8 8 11) || 8 / 8 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 5.2",
                "2 <- 7.3",
                "3 <- 5.3",
                "4 <- 7.6",
                "5 <- 7.1",
                "6 <- 7.4",
                "7 <- 6.2",
                "8 <- 4.1",
                "9 <- 6.5"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24 || Input: 2 3 6 8\nSteps:\n2 * 6 = 12 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)\n5 * 12 = 60 (left: 60)\n60 / 2 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((2 * 6) * (8 - 3)) / || 6 = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: ((12 - 8) * 8) - 8 = 24 || Input: 3 3 7 8\nSteps:\n3 * 8 = 24 (left: 3 7 24)\n7 - 3 = 4 (left: 4 24)\n4 * 6 = 24 (left: 24)\nAnswer: (3 * 8) - (7 - 3) = 24 || Input: 2 3 5 7\nSteps:\n3 * 7 = 21 (left: 2 5 21)\n21 - 2 = 19 (left: 5 19)\n5 * 19 = 95 (left: 95)\nAnswer: ((3 * 7) - 2) * 5 = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24 || Input: 2 3 6 8\nSteps:\n2 * 6 = 12 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)\n5 * 12 = 60 (left: 60)\n60 / 2 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((2 * 6) * (8 - 3)) / || 6 = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24 || Input: 2 3 6 8\nSteps:\n2 * 6 = 12 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)\n5 * 12 = 60 (left: 60)\n60 / 2 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((2 * 6) * (8 - 3)) /",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24 || Input: 2 3 6 8\nSteps:\n2 * 6 = 12 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)\n5 * 12 = 60 (left: 60)\n60 / 2 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((2 * 6) * (8 - 3)) /",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 / 8 = 4 (left: 4 8)",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24 || Input: 2 3 6 8\nSteps:\n2 * 6 = 12 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)\n5 * 12 = 60 (left: 60)\n60 / 2 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((2 * 6) * (8 - 3)) /"
            ],
            "Evaluation": [
                60.0,
                0.003,
                60.0,
                60.0,
                0.003,
                60.0,
                60.0,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 8.0",
                "1 <- 8.6",
                "2 <- 8.0",
                "3 <- 5.5",
                "4 <- 8.0",
                "5 <- 3.2",
                "6 <- 8.3",
                "7 <- 8.8",
                "8 <- 7.7",
                "9 <- 7.6"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24 || Input: 2 3 6 8\nSteps:\n2 * 6 = 12 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)\n5 * 12 = 60 (left: 60)\n60 / 2 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((2 * 6) * (8 - 3)) /",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24 || Input: 2 3 6 8\nSteps:\n2 * 6 = 12 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)\n5 * 12 = 60 (left: 60)\n60 / 2 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((2 * 6) * (8 - 3)) / || 6 = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24 || Input: 2 3 6 8\nSteps:\n2 * 6 = 12 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)\n5 * 12 = 60 (left: 60)\n60 / 2 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((2 * 6) * (8 - 3)) /",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24 || Input: 2 3 6 8\nSteps:\n2 * 6 = 12 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)\n5 * 12 = 60 (left: 60)\n60 / 2 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((2 * 6) * (8 - 3)) /",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24)",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24 || Input: 2 3 6 8\nSteps:\n2 * 6 = 12 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)\n5 * 12 = 60 (left: 60)\n60 / 2 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((2 * 6) * (8 - 3)) /",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24 || Input: 2 3 6 8\nSteps:\n2 * 6 = 12 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)\n5 * 12 = 60 (left: 60)\n60 / 2 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((2 * 6) * (8 - 3)) /",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24 || Input: 2 3 6 8\nSteps:\n2 * 6 = 12 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)\n5 * 12 = 60 (left: 60)\n60 / 2 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((2 * 6) * (8 - 3)) / || 6 = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (12 - 8) * (8 + 8) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24 || Input: 2 3 6 8\nSteps:\n2 * 6 = 12 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)\n5 * 12 = 60 (left: 60)\n60 / 2 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((2 * 6) * (8 - 3)) / || 6 = 24"
            ]
        },
        "Input": "1 8 8 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "90": {
        "puzzle": "3 7 8 8",
        "Step 0": {
            "steps": [
                "8 + 3 = 11 (left: 7 8 11)",
                "7 - 3 = 4 (left: 4 8 8)",
                "8 - 7 = 1 (left: 1 8 8)",
                "3 * 7 = 21 (left: 8 8 21)",
                "8 + 3 = 11 (left: 7 8 11)",
                "3 * 7 = 21 (left: 8 8 21)",
                "3 * 7 = 21 (left: 8 8 21)",
                "8 + 3 = 11 (left: 7 8 11)",
                "8 - 3 = 5 (left: 5 8 ",
                "8 / 3 = 2.6666666666666665 (left: 2.6666666666666665 7 8)"
            ],
            "Evaluation": [
                3.0,
                22.0,
                0.003,
                3.0,
                1.002,
                0.003,
                1.002,
                2.0,
                1.002,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.1",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- INIT",
                "5 <- 0.1",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "7 - 3 = 4 (left: 4 8 8)",
                "7 - 3 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32)",
                "8 - 3 = 5 (left: 5 7 8)",
                "7 - 3 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8)",
                "8 - 3 = 5 (left: 5 7 8)",
                "7 - 3 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32)",
                "8 / 3 = 2.6666666666666665 (left: 2.6666666666666665 7 8)",
                "7",
                "8 / 3 = 2.6666666666666665 (left: 2.6666666666666665 7 8)",
                "3 * 7 = 21 (left: 8 8 21) || Possible next steps:"
            ],
            "Evaluation": [
                22.0,
                60.0,
                3.0,
                0.003,
                3.0,
                60.0,
                3.0,
                0.003,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.5",
                "2 <- 1.1",
                "3 <- 1.5",
                "4 <- 1.5",
                "5 <- 0.1",
                "6 <- 1.5",
                "7 <- 0.8",
                "8 <- 1.0",
                "9 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "7 - 3 = 4 (left: 4 8 8)",
                "7 - 3 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24)",
                "7 - 3 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24)",
                "7 - 3 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 8 + 32 = 40 (left: 40)",
                "7 - 3 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24)",
                "7 - 3 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32)",
                "7 - 3 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 8 + 32 = 40 (left: 40)",
                "8 - 3 = 5 (left: 5 8  || Input: 3 3 3",
                "7 - 3 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8)",
                "7 - 3 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24)"
            ],
            "Evaluation": [
                22.0,
                60.0,
                60.0,
                0.003,
                60.0,
                60.0,
                0.003,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 2.0",
                "2 <- INIT",
                "3 <- 2.9",
                "4 <- 1.1",
                "5 <- 2.1",
                "6 <- 2.9",
                "7 <- 2.2",
                "8 <- 2.0",
                "9 <- 2.9"
            ]
        },
        "Step 3": {
            "steps": [
                "7 - 3 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 / 8 = 4 (left: 4 8)",
                "7 - 3 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32)",
                "8 - 3 = 5 (left: 5 7 8)",
                "7 - 3 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (7 - 3) * (8 + 8) = 24",
                "7 - 3 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24)",
                "7 - 3 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (7 - 3) * (8 + 8) = 24",
                "7 - 3 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (7 - 3) * (8 + 8) = 24",
                "7 - 3 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: (7 - 3) * (8 * 8) = 24",
                "7 - 3 = 4 (left: 4 8 8) || 8 - 4 = 4 (left: 4 8)",
                "7 - 3 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 32 - 8 = 24 (left: 24) || Answer: ((7 - 3) * 8) - 8 = 24"
            ]
        },
        "Input": "3 7 8 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "91": {
        "puzzle": "7 8 12 12",
        "Step 0": {
            "steps": [
                "12 + 7 = 19 (left: 8 12 19)",
                "7 - 8 = -1 (left: -1 12 12)",
                "7 * 8 = 56 (left: 12 12 56)",
                "7 * 8 = 56 (left: 12 12 56)",
                "12 - 7 = 5 (left: 5 12 12)",
                "7 * 8 = 56 (left: 12 12 56)",
                "7 * 8 = 56 (left: 12 12 56)",
                "12 - 7 = 5 (left: 5 12 12)",
                "12 - 7 = 5",
                "12 + 7 = 19 (left: 8 19 12)"
            ],
            "Evaluation": [
                1.002,
                1.001,
                1.002,
                1.002,
                1.002,
                2.001,
                21.001,
                0.003,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.0",
                "2 <- 0.6",
                "3 <- 0.9",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 0.5",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "8 / 7 = 1.14285714286 (left: 1.14285714286 12 12)",
                "12 + 7 = 19 (left: 8 12 19) || 12 - 8 = 4 (left: 4 19)",
                "7 * 8 = 56 (left: 12 12 56) || 56 - 12 = 44 (left: 12 44)",
                "12 + 7 = 19 (left: 8 19 12) || 8 * 19 = 152 (left: 152 12)",
                "12 / 8 = 1.5 (left: 1.5 12 12)",
                "12 / 8 = 1.5 (left: 1.5 12 12)",
                "7 * 8 = 56 (left: 12 12 56) || 12 / 12 = 1 (left: 1 12 56)",
                "12",
                "12 - 7 = 5 (left: 5 12 12)",
                "12 / 8 = 1.5 (left: 1.5 12 12)"
            ],
            "Evaluation": [
                1.002,
                0.001,
                0.003,
                0.0,
                3.0,
                3.0,
                0.003,
                0.003,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.6",
                "3 <- 0.5",
                "4 <- INIT",
                "5 <- 0.9",
                "6 <- 0.6",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "8 / 7 = 1.14285714286 (left: 1.14285714286 12 12)",
                "12 / 8 = 1.5 (left: 1.5 12 12)",
                "7 * 8 = 56 (left: 12 12 56) || 56 - 12 = 44 (left: 12 44)",
                "7 * 8 = 56 (left: 12 12 56) || 12 / 12 = 1 (left: 1 12 56)",
                "12 / 8 = 1.5 (left: 1.5 12 12)",
                "12 + 7 = 19 (left: 8 19 12) || 19 + 8 = ",
                "7 * 8 = 56 (left: 12 12 56) || 12 / 12 = 1 (left: 1 12 56)",
                "12",
                "12 - 7 = 5 (left: 5 12 12)",
                "12 / 8 = 1.5 (left: 1.5 12 12)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                0.003,
                0.003,
                1.002,
                0.003,
                0.003,
                0.003,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.4",
                "2 <- 0.6",
                "3 <- 1.4",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 1.0",
                "7 <- INIT",
                "8 <- 0.6",
                "9 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "8 / 7 = 1.14285714286 (left: 1.14285714286 12 12)",
                "12 / 8 = 1.5 (left: 1.5 12 12) || 1.5 * 12 = 18 (left: 12 18)",
                "7 * 8 = 56 (left: 12 12 56) || 56 - 12 = 44 (left: 12 44)",
                "12 / 8 = 1.5 (left: 1.5 12 12) || 12 / 1.5 = 8 (left: 8 12)",
                "12 / 8 = 1.5 (left: 1.5 12 12)",
                "12 / 8 = 1.5 (left: 1.5 12 12)",
                "8 / 7 = 1.14285714286 (left: 1.14285714286 12 12) || 12 - 1.14285714286 = 10.85714285714 (left: 10.85714285714 12)",
                "12",
                "7 * 8 = 56 (left: 12 12 56) || 12 / 12 = 1 (left: 1 12 56)",
                "12 / 8 = 1.5 (left: 1.5 12 12)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                0.002,
                1.002,
                1.002,
                2.001,
                0.003,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 0.6",
                "2 <- 1.4",
                "3 <- 0.6",
                "4 <- 0.6",
                "5 <- 0.0",
                "6 <- 1.5",
                "7 <- INIT",
                "8 <- 2.0",
                "9 <- 0.5"
            ]
        },
        "Step 4": {
            "steps": [
                "7 * 8 = 56 (left: 12 12 56) || 12 * 12 = 144 (left: 144 56)",
                "7 * 8 = 56 (left: 12 12 56) || 56 - 12 = 44 (left: 12 44)",
                "12 / 8 = 1.5 (left: 1.5 12 12) || 1.5 + 12 = 13.5 (left: 12 13.5)",
                "7 * 8 = 56 (left: 12 12 56) || 12 / 12 = 1 (left: 1 12 56)",
                "7 * 8 = 56 (left: 12 12 56) || 56 - 12 = 44 (left: 12 44)",
                "12 + 7 = 19 (left: 8 12 19) || 8 / 12 = 0.666666",
                "12 / 8 = 1.5 (left: 1.5 12 12) || 12 / 1.5 = 8 (left: 8 12)",
                "12",
                "8 / 7 = 1.14285714286 (left: 1.14285714286 12 12) || 12 - 1.14285714286 = 10.85714285714 (left: 10.85714285714 12)",
                "7 * 8 = 56 (left: 12 12 56) || 56 - 12 = 44 (left: 12 44)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 0.6",
                "2 <- 0.4",
                "3 <- 3.4",
                "4 <- 3.4",
                "5 <- 0.6",
                "6 <- INIT",
                "7 <- 0.6",
                "8 <- 3.0",
                "9 <- 4.8"
            ]
        },
        "Step 5": {
            "steps": [
                "12 + 7 = 19 (left: 8 19 12) || 19 - 8 = 11 (left: 11 12)",
                "7 * 8 = 56 (left: 12 12 56) || 56 - 12 = 44 (left: 12 44)",
                "12 - 7 = 5 (left: 5 12 12) || 12 / 5 = 2.4 (left: 2.4 12)",
                "12 / 8 = 1.5 (left: 1.5 12 12) || 12 / 1.5 = 8 (left: 8 12)",
                "12 / 8 = 1.5 (left: 1.5 12 12) || 1.5 + 12 = 13.5 (left: 12 13.5)",
                "7 * 8 = 56 (left: 12 12 56) || 56 - 12 = 44 (left: 12 44)",
                "12 - 7 = 5 (left: 5 12 12)",
                "7 * 8 = 56 (left: 12 12 56) || 12 - 12 = 0 (left: 0 12 56)",
                "8 / 7 = 1.14285714286 (left: 1.14285714286 12 12) || 12 - 1.14285714286 = 10.85714285714 (left: 10.85714285714 12)",
                "8 / 7 = 1.14285714286 (left: 1.14285714286 12 12) || 12 - 1.14285714286 = 10.85714285714 (left: 10.85714285714 12) || 12 / 10.85714285714 = 1.10526315789"
            ],
            "Evaluation": [
                0.002,
                0.003,
                1.002,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 1.4",
                "2 <- 2.9",
                "3 <- INIT",
                "4 <- 4.8",
                "5 <- 4.8",
                "6 <- 1.0",
                "7 <- INIT",
                "8 <- 0.6",
                "9 <- INIT"
            ]
        },
        "Step 6": {
            "steps": [
                "12 / 8 = 1.5 (left: 1.5 12 12) || 12 - 1.5 = 10.5 (left: 10.5 12)",
                "12 / 8 = 1.5 (left: 1.5 12 12) || 1.5 + 12 = 13.5 (left: 12 13.5)",
                "12 / 8 = 1.5 (left: 1.5 12 12) || 1.5 + 12 = 13.5 (left: 12 13.5)",
                "12 - 7 = 5 (left: 5 12 12)",
                "8 / 7 = 1.14285714286 (left: 1.14285714286 12 12) || 12 - 1.14285714286 = 10.85714285714 (left: 10.85714285714 12) || 12 / 10.85714285714 = 1.10526315789",
                "8 / 7 = 1.14285714286 (left: 1.14285714286 12 12) || 12 - 1.14285714286 = 10.85714285714 (left: 10.85714285714 12) || 12 / 10.85714285714 = 1.10526315789",
                "8 / 7 = 1.14285714286 (left: 1.14285714286 12 12) || 12 - 1.14285714286 = 10.85714285714 (left: 10.85714285714 12)",
                "12",
                "7 * 8 = 56 (left: 12 12 56) || 12 / 12 = 1 (left: 1 12 56)",
                "12 / 8 = 1.5 (left: 1.5 12 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                2.001,
                0.003,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 3.6",
                "1 <- INIT",
                "2 <- 5.8",
                "3 <- 0.2",
                "4 <- 0.4",
                "5 <- 3.5",
                "6 <- 4.8",
                "7 <- INIT",
                "8 <- 2.9",
                "9 <- INIT"
            ]
        },
        "Step 7": {
            "steps": [
                "8 / 7 = 1.14285714286 (left: 1.14285714286 12 12) || 12 - 1.14285714286 = 10.85714285714 (left: 10.85714285714 12) || 10.85714285714 / 12 = 0.90476190476 (left: 0.90476190476 12)",
                "12 / 8 = 1.5 (left: 1.5 12 12)",
                "8 / 7 = 1.14285714286 (left: 1.14285714286 12 12) || 12 - 1.14285714286 = 10.85714285714 (left: 10.85714285714 12) || 12 / 10.85714285714 = 1.10526315789",
                "7 * 8 = 56 (left: 12 12 56) || 12 / 12 = 1 (left: 1 12 56)",
                "12 - 7 = 5 (left: 5 12 12) || 12 / 5 = 2.4 (left: 2.4 12)",
                "12 / 8 = 1.5 (left: 1.5 12 12) || 1.5 + 12 = 13.5 (left: 12 13.5)",
                "8 / 7 = 1.14285714286 (left: 1.14285714286 12 12) || 12 - 1.14285714286 = 10.85714285714 (left: 10.85714285714 12) || 12 - 10.85714285714 = 1.14285714286 (left: 1.14285714286 12)",
                "12",
                "12 / 8 = 1.5 (left: 1.5 12 12) || 12 / 1.5 = 8 (left: 8 12)",
                "12 / 8 = 1.5 (left: 1.5 12 12)"
            ],
            "Evaluation": [
                1.0,
                1.002,
                0.003,
                0.003,
                1.002,
                0.003,
                1.001,
                0.003,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 7.9",
                "1 <- 0.6",
                "2 <- 7.4",
                "3 <- 0.9",
                "4 <- 1.5",
                "5 <- 6.6",
                "6 <- 3.6",
                "7 <- 5.8",
                "8 <- 7.4",
                "9 <- 0.6"
            ]
        },
        "Step 8": {
            "steps": [
                "12 / 8 = 1.5 (left: 1.5 12 12) || 12 - 1.5 = 10.5 (left: 10.5 12)",
                "7 * 8 = 56 (left: 12 12 56) || 56 - 12 = 44 (left: 12 44)",
                "12 - 7 = 5 (left: 5 12 12) || 12 / 5 = 2.4 (left: 2.4 12) || 12 - 2.4 = 9.6 (left: 9.6)",
                "12 + 7 = 19 (left: 8 19 12) || 8 * 19 = 152 (left: 152 12)",
                "12 / 8 = 1.5 (left: 1.5 12 12) || 1.5 + 12 = 13.5 (left: 12 13.5)",
                "8 / 7 = 1.14285714286 (left: 1.14285714286 12 12) || 12 - 1.14285714286 = 10.85714285714 (left: 10.85714285714 12) || 12 / 10.85714285714 = 1.10526315789",
                "8 / 7 = 1.14285714286 (left: 1.14285714286 12 12) || 12 - 1.14285714286 = 10.85714285714 (left: 10.85714285714 12) || 12 - 10.85714285714 = 1.14285714286 (left: 1.14285714286 12)",
                "8 / 7 = 1.14285714286 (left: 1.14285714286 12 12) || 12 - 1.14285714286 = 10.85714285714 (left: 10.85714285714 12) || 12 - 10.85714285714 = 1.14285714286 (left: 1.14285714286 12)",
                "12 - 7 = 5 (left: 5 12 12) || 12 / 5 = 2.4 (left: 2.4 12) || 2.4 + 12 = 14.4 (left: 14.4)",
                "7 * 8 = 56 (left: 12 12 56) || 56 - 12 = 44 (left: 12 44)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.0,
                0.003,
                0.003,
                1.001,
                1.001,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 5.8",
                "2 <- 7.9",
                "3 <- 1.4",
                "4 <- 6.6",
                "5 <- 6.6",
                "6 <- 0.4",
                "7 <- 0.6",
                "8 <- 0.6",
                "9 <- 0.6"
            ]
        },
        "Step 9": {
            "steps": [
                "8 / 7 = 1.14285714286 (left: 1.14285714286 12 12)",
                "8 / 7 = 1.14285714286 (left: 1.14285714286 12 12) || 12 - 1.14285714286 = 10.85714285714 (left: 10.85714285714 12) || 12 / 10.85714285714 = 1.10526315789",
                "12 / 8 = 1.5 (left: 1.5 12 12) || 1.5 + 12 = 13.5 (left: 12 13.5)",
                "12 / 8 = 1.5 (left: 1.5 12 12) || 12 / 1.5 = 8 (left: 8 12)",
                "8 / 7 = 1.14285714286 (left: 1.14285714286 12 12) || 12 - 1.14285714286 = 10.85714285714 (left: 10.85714285714 12) || 12 / 10.85714285714 = 1.10526315789",
                "8 / 7 = 1.14285714286 (left: 1.14285714286 12 12) || 12 - 1.14285714286 = 10.85714285714 (left: 10.85714285714 12) || 12 / 10.85714285714 = 1.10526315789",
                "12 - 7 = 5 (left: 5 12 12) || 12 - 5 = 7 (left: 7 12)",
                "7 * 8 = 56 (left: 12 12 56) || 12 - 12 = 0 (left: 0 12 56)",
                "7 * 8 = 56 (left: 12 12 56) || 12 / 12 = 1 (left: 1 12 56)",
                "7 * 8 = 56 (left: 12 12 56) || 56 - 12 = 44 (left: 12 44)"
            ]
        },
        "Input": "7 8 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "92": {
        "puzzle": "9 9 11 12",
        "Step 0": {
            "steps": [
                "11 + 9 = 20 (left: 9 12 20)",
                "9 / 9 = 1 (left: 11 12 1)",
                "9 - 9 = 0 (left: 11 12 0)",
                "9 - 9 = 0 (left: 11 12 0)",
                "12 - 9 = 3 (left: 3 11 12)",
                "9 * 9 = 81 (left: 11 12 81)",
                "9 * 9 = 81 (left: 11 12 81)",
                "11 + 9 = 20 (left: 9 12 20)",
                "11 - 9 = 2 (left: 2 12 ",
                "11 + 9 = 20 (left: 9 12 20)"
            ],
            "Evaluation": [
                1.002,
                41.0,
                0.002,
                2.001,
                1.002,
                0.003,
                2.001,
                2.001,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- 0.8",
                "4 <- 0.8",
                "5 <- 0.8",
                "6 <- 0.1",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 0.6"
            ]
        },
        "Step 1": {
            "steps": [
                "11 - 9 = 2 (left: 2 12  || 12 / 2 = 6 (left: 6)",
                "9 * 9 = 81 (left: 11 12 81)",
                "9 / 9 = 1 (left: 11 12 1) || 12 / 11 = 1.0909 (left: 1 1.0909)",
                "11 - 9 = 2 (left: 2 12  || 12 - 2 = 10 (left: 10)",
                "11 - 9 = 2 (left: 2 12  || 12 / 2 = 6 (left: 6)",
                "11 - 9 = 2 (left: 2 12  || 2 + 12 = 14 (left: 14)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132)",
                "12 - 9 = 3 (left: 9 11 ",
                "11 + 9 = 20 (left: 9 12 20)",
                "9 * 9 = 81 (left: 11 12 81) || 81 / 12 = 6.75 (left: 11 6.75)"
            ],
            "Evaluation": [
                0.003,
                2.001,
                2.001,
                0.002,
                0.003,
                0.001,
                20.002,
                0.001,
                2.001,
                1.001
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 0.8",
                "2 <- 0.8",
                "3 <- 1.6",
                "4 <- 0.1",
                "5 <- 0.1",
                "6 <- 0.1",
                "7 <- 0.8",
                "8 <- 0.6",
                "9 <- 0.8"
            ]
        },
        "Step 2": {
            "steps": [
                "9 / 9 = 1 (left: 11 12 1) || 12 / 11 = 1.0909 (left: 1 1.0909) || 1.0909 - 1 = 0.0909 (left: 1 0.0909)",
                "11 - 9 = 2 (left: 2 12  || 12 / 2 = 6 (left: 6)",
                "11 - 9 = 2 (left: 2 12  || 12 / 2 = 6 (left: 6)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 132 - 1 = 131 (left: 131)",
                "9 / 9 = 1 (left: 11 12 1) || 12 / 11 = 1.0909090909090908 (left: 1 1.0909090909090908)",
                "9 / 9 = 1 (left: 11 12 1) || 12 / 11 = 1.0909090909090908 (left: 1 1.0909090909090908)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132)",
                "11 - 9 = 2 (left: 2 12  || 12 / 2 = 6 (left: 6)",
                "9 * 9 = 81 (left: 11 12 81) || 81 - 11 = 70 (left: 12 70)",
                "11 - 9 = 2 (left: 2 12  || 12 / 2 = 6 (left: 6)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                0.003,
                0.003,
                3.0,
                3.0,
                20.002,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.8",
                "2 <- 0.3",
                "3 <- 2.0",
                "4 <- 1.6",
                "5 <- 0.8",
                "6 <- 0.8",
                "7 <- 2.6",
                "8 <- 0.8",
                "9 <- 1.6"
            ]
        },
        "Step 3": {
            "steps": [
                "9 / 9 = 1 (left: 1 11 12)",
                "11 - 9 = 2 (left: 2 12  || 12 / 2 = 6 (left: 6)",
                "9 - 9 = 0 (left: 11 12 0) || 12 / 11 = 1 (left: 1 1)",
                "9 / 9 = 1 (left: 11 12 1) || 12 / 11 = 1.0909 (left: 1 1.0909) || 1.0909 - 1 = 0.0909 (left: 1 0.0909) || 1 + 0.0909 = 1.0909 (left: 1.0909)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 1 * 132 = 132 (left: 132)",
                "11 - 9 = 2 (left: 2 12  || 12 / 2 = 6 (left: 6)",
                "11 - 9 = 2 (left: 2 12  || 12 / 2 = 6 (left: 6)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 132 - 1 = 131 (left: 131)",
                "11 - 9 = 2 (left: 2 12  || 12 / 2 = 6 (left: 6)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 1 * 132 = 132 (left: 132)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.6",
                "2 <- 0.3",
                "3 <- 0.1",
                "4 <- 0.8",
                "5 <- INIT",
                "6 <- 3.0",
                "7 <- 2.0",
                "8 <- 1.6",
                "9 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "9 / 9 = 1 (left: 1 11 12)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 1 * 132 = 132 (left: 132)",
                "9 - 9 = 0 (left: 11 12 0) || 12 / 11 = 1 (left: 1 1)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132)",
                "11 - 9 = 2 (left: 2 12  || 12 / 2 = 6 (left: 6)",
                "9 * 9 = 81 (left: 11 12 81)",
                "9 / 9 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "9 / 9 = 1 (left: 11 12 1) || 12 / 11 = 1.0909 (left: 1 1.0909) || 1.0909 - 1 = 0.0909 (left: 1 0.0909) || 1 + 0.0909 = 1.0909 (left: 1.0909)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 132 - 1 = 131 (left: 131)",
                "9 / 9 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                0.003,
                20.002,
                0.003,
                2.001,
                0.002,
                0.003,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 0.8",
                "2 <- 0.1",
                "3 <- 3.0",
                "4 <- 4.9",
                "5 <- 4.3",
                "6 <- 0.8",
                "7 <- 4.9",
                "8 <- INIT",
                "9 <- 4.3"
            ]
        },
        "Step 5": {
            "steps": [
                "9 / 9 = 1 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "11 - 9 = 2 (left: 2 12  || 12 / 2 = 6 (left: 6)",
                "9 / 9 = 1 (left: 11 12 1) || 12 / 11 = 1.0909090909090908 (left: 1 1.0909090909090908)",
                "9 / 9 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "9 / 9 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 1 * 132 = 132 (left: 132)",
                "11 - 9 = 2 (left: 2 12  || 12 / 2 = 6 (left: 6)",
                "9 / 9 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 9 = 20 (left: 9 12 20)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 1 * 132 = 132 (left: 132)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                3.0,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.8",
                "2 <- 1.1",
                "3 <- 0.1",
                "4 <- 0.8",
                "5 <- 4.3",
                "6 <- 2.6",
                "7 <- 3.0",
                "8 <- 4.3",
                "9 <- 3.0"
            ]
        },
        "Step 6": {
            "steps": [
                "9 / 9 = 1 (left: 11 12 1) || 12 - 11 = 1 (left: 1 1)",
                "11 - 9 = 2 (left: 2 12  || 12 / 2 = 6 (left: 6)",
                "9 * 9 = 81 (left: 11 12 81) || 81 / 12 = 6.75 (left: 11 6.75)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132)",
                "11 - 9 = 2 (left: 2 12  || 12 / 2 = 6 (left: 6)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 1 * 132 = 132 (left: 132)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 132 - 1 = 131 (left: 131)",
                "9 / 9 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 132 - 1 = 131 (left: 131)",
                "9 / 9 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                1.001,
                20.002,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 5.2",
                "2 <- 2.0",
                "3 <- 4.3",
                "4 <- 0.6",
                "5 <- 0.8",
                "6 <- 6.9",
                "7 <- 6.9",
                "8 <- 4.9",
                "9 <- 0.8"
            ]
        },
        "Step 7": {
            "steps": [
                "9 / 9 = 1 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "9 / 9 = 1 (left: 11 12 1) || 12 / 11 = 1.0909090909090908 (left: 1 1.0909090909090908) || 1 - 1 = 0 (left: 0.0909090909090908)",
                "9 / 9 = 1 (left: 11 12 1) || 12 / 11 = 1.0909 (left: 1 1.0909) || 1.0909 - 1 = 0.0909 (left: 1 0.0909) || 1 - 0.0909 = 0.9091 (left: 0.9091)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 132 - 1 = 131 (left: 131)",
                "9 * 9 = 81 (left: 11 12 81) || 81 / 12 = 6.75 (left: 11 6.75)",
                "11 - 9 = 2 (left: 2 12  || 12 / 2 = 6 (left: 6)",
                "9 / 9 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "9 / 9 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "9 / 9 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 - 9 = 2 (left: 2 12  || 12 / 2 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.002,
                0.0,
                0.003,
                0.003,
                1.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 6.3",
                "2 <- 4.0",
                "3 <- 0.8",
                "4 <- 4.3",
                "5 <- 4.3",
                "6 <- 4.0",
                "7 <- 3.0",
                "8 <- 7.4",
                "9 <- 4.0"
            ]
        },
        "Step 8": {
            "steps": [
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 132 / 1 = 132 (left: 132)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 1 * 132 = 132 (left: 132)",
                "9 / 9 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 - 9 = 2 (left: 2 12  || 12 / 2 = 6 (left: 6)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 1 * 132 = 132 (left: 132)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 1 * 132 = 132 (left: 132)",
                "9 / 9 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "9 / 9 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "9 * 9 = 81 (left: 11 12 81) || 81 / 12 = 6.75 (left: 11 6.75) || 11 * 6.75 = 74.25 (left: 74.25)",
                "9 / 9 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                0.002,
                0.002,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 8.9",
                "2 <- 0.1",
                "3 <- 1.6",
                "4 <- 8.2",
                "5 <- 6.3",
                "6 <- 8.9",
                "7 <- 0.1",
                "8 <- 3.0",
                "9 <- 8.9"
            ]
        },
        "Step 9": {
            "steps": [
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 132 / 1 = 132 (left: 132)",
                "9 / 9 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "9 / 9 = 1 (left: 11 12 1) || 12 / 11 = 1.0909090909090908 (left: 1 1.0909090909090908)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 132 - 1 = 131 (left: 131)",
                "9 / 9 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 1 * 132 = 132 (left: 132)",
                "9 / 9 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "9 / 9 = 1 (left: 11 12 1) || 1 * 12 = 12 (left: ",
                "9 / 9 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "9 / 9 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ]
        },
        "Input": "9 9 11 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "93": {
        "puzzle": "1 2 5 12",
        "Step 0": {
            "steps": [
                "5 + 12 = 17 (left: 1 2 17)",
                "2 * 5 = 10 (left: 1 10 12)",
                "1 * 2 = 2 (left: 2 5 12)",
                "12 - 5 = 7 (left: 1 2 7)",
                "5 + 12 = 17 (left: 1 2 17)",
                "1 * 2 = 2 (left: 2 5 12)",
                "12 - 5 = 7 (left: 1 2 7)",
                "5 + 12 = 17 (left: 1 2 17)",
                "12 - 2 = 10 (left: 1 5 ",
                "5 + 12 = 17 (left: 1 2 17)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                1.002,
                1.002,
                1.002,
                3.0,
                1.002,
                0.002,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.3",
                "3 <- INIT",
                "4 <- 0.5",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 5 = 10 (left: 1 10 12)",
                "12 - 5 = 7 (left: 1 2 7)",
                "12 - 5 = 7 (left: 1 2 7) || 7 / 2 = 3.5 (left: 1 3.5)",
                "5 + 12 = 17 (left: 1 2 17)",
                "1 * 2 = 2 (left: 2 5 12) || 12 / 2 = 6 (left: 6 12)",
                "12 - 5 = 7 (left: 1 2 7)",
                "5 + 12 = 17 (left: 1 2 17)",
                "5 - 1 = 4 (left: 2 4 ",
                "5 + 12 = 17 (left: 1 2 17)",
                "12 - 5 = 7 (left: 1 2 7)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                0.001,
                1.002,
                1.002,
                1.002,
                1.002,
                0.001,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.5",
                "4 <- 0.5",
                "5 <- 0.1",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- 0.5",
                "9 <- 0.5"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 5 = 10 (left: 1 10 12)",
                "12 - 5 = 7 (left: 1 2 7)",
                "12 - 5 = 7 (left: 1 2 7)",
                "1 * 2 = 2 (left: 2 5 12) || 12 - 2 = 10 (left: 2 10)",
                "1 * 2 = 2 (left: 2 5 12) || 12 / 2 = 6 (left: 6 12)",
                "2 * 5 = 10 (left: 1 10 12) || 1 * 10 = 10 (left: 10 12)",
                "5 + 12 = 17 (left: 1 2 17)",
                "5 - 1 = 4 (left: 2 4 ",
                "1 * 2 = 2 (left: 2 5 12) || 12 - 2 = 10 (left: 2 10)",
                "1 * 2 = 2 (left: 2 5 12) || 12 / 2 = 6 (left: 6 12)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                1.002,
                3.0,
                1.002,
                0.002,
                1.002,
                0.001,
                3.0,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.9",
                "2 <- 0.6",
                "3 <- 2.3",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 2.8",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 5 = 10 (left: 1 10 12)",
                "5 + 12 = 17 (left: 1 2 17) || 17 - 1 = 16 (left: 2 16)",
                "12 - 5 = 7 (left: 1 2 7) || 7 / 2 = 3.5 (left: 1 3.5)",
                "1 * 2 = 2 (left: 2 5 12) || 12 - 2 = 10 (left: 2 10) || 10 - 2 = 8 (left: 8)",
                "12 - 5 = 7 (left: 1 2 7)",
                "12 - 5 = 7 (left: 1 2 7)",
                "1 * 2 = 2 (left: 2 5 12) || 12 - 2 = 10 (left: 2 10) || 10 - 2 = 8 (left: 8)",
                "5 - 1 = 4 (left: 2 4 ",
                "5 + 12 = 17 (left: 1 2 17)",
                "12 - 5 = 7 (left: 1 2 7)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.001,
                0.002,
                1.002,
                1.002,
                0.002,
                0.001,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 3.0",
                "2 <- 3.0",
                "3 <- 2.8",
                "4 <- INIT",
                "5 <- 0.3",
                "6 <- INIT",
                "7 <- 3.8",
                "8 <- 1.1",
                "9 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "2 * 5 = 10 (left: 1 10 12)",
                "2 * 5 = 10 (left: 1 10 12) || 1 * 10 = 10 (left: 10 12)",
                "2 * 5 = 10 (left: 1 10 12) || 1 * 10 = 10 (left: 10 12)",
                "1 * 2 = 2 (left: 2 5 12) || 12 - 2 = 10 (left: 2 10) || 10 - 2 = 8 (left: 8)",
                "12 - 5 = 7 (left: 1 2 7)",
                "12 - 5 = 7 (left: 1 2 7) || 7 / 1 = ",
                "5 + 12 = 17 (left: 1 2 17)",
                "5 + 12 = 17 (left: 1 2 17) || 1 * 17 = 17 (left: 2 17)",
                "12 - 5 = 7 (left: 1 2 7) || 7 - 2 = 5 (left: 1 5)",
                "12 - 5 = 7 (left: 1 2 7)"
            ],
            "Evaluation": [
                1.002,
                0.002,
                0.002,
                0.002,
                1.002,
                0.003,
                1.002,
                0.003,
                40.0,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 4.8",
                "2 <- INIT",
                "3 <- 4.8",
                "4 <- 4.8",
                "5 <- INIT",
                "6 <- 4.8",
                "7 <- 2.3",
                "8 <- 4.8",
                "9 <- 4.8"
            ]
        },
        "Step 5": {
            "steps": [
                "2 * 5 = 10 (left: 1 10 12)",
                "12 - 5 = 7 (left: 1 2 7) || 7 - 2 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "12 - 5 = 7 (left: 1 2 7)",
                "12 - 5 = 7 (left: 1 2 7) || 7 - 2 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "12 - 5 = 7 (left: 1 2 7) || 7 - 2 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "12 - 5 = 7 (left: 1 2 7)",
                "12 - 5 = 7 (left: 1 2 7) || 7 - 2 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "1 * 2 = 2 (left: 2 5 12) || 12 - 2 = 10 (left: 2 10) || 10 - 2 = 8 (left: 8)",
                "12 - 5 = 7 (left: 1 2 7) || 7 - 2 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "12 - 5 = 7 (left: 1 2 7) || 7 - 2 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)"
            ],
            "Evaluation": [
                1.002,
                0.002,
                1.002,
                0.002,
                0.002,
                1.002,
                0.002,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 1.4",
                "2 <- 2.3",
                "3 <- 3.4",
                "4 <- 4.8",
                "5 <- 4.8",
                "6 <- 4.8",
                "7 <- 4.4",
                "8 <- 4.8",
                "9 <- 1.8"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 5 = 7 (left: 1 2 7) || 2 * 7 = 14 (left: 1 14)",
                "1 * 2 = 2 (left: 2 5 12) || 12 / 2 = 6 (left: 6 12) || 12 + 6 = 18 (left: 18)",
                "1 * 2 = 2 (left: 2 5 12) || 12 - 2 = 10 (left: 2 10) || 2 + 10 = 12 (left: 12)",
                "12 - 5 = 7 (left: 1 2 7) || 7 - 2 = 5 (left: 1 5)",
                "12 - 5 = 7 (left: 1 2 7) || 7 - 2 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "12 - 5 = 7 (left: 1 2 7) || 7 - 2 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "12 - 5 = 7 (left: 1 2 7) || 7 - 2 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "12 - 5 = 7 (left: 1 2 7) || 7 - 1 = 6 (left: 2 6)",
                "12 - 5 = 7 (left: 1 2 7) || 7 - 2 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "5 + 12 = 17 (left: 1 2 17) || 17 - 1 = 16 (left: 2 16)"
            ],
            "Evaluation": [
                20.001,
                60.0,
                0.003,
                40.0,
                0.002,
                0.002,
                0.002,
                1.001,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 6.1",
                "2 <- 4.8",
                "3 <- 6.0",
                "4 <- 6.3",
                "5 <- 4.8",
                "6 <- 6.3",
                "7 <- 4.8",
                "8 <- 6.1",
                "9 <- 0.4"
            ]
        },
        "Step 7": {
            "steps": [
                "1 * 2 = 2 (left: 2 5 12) || 12 / 2 = 6 (left: 6 12) || 12 + 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "1 * 2 = 2 (left: 2 5 12) || 12 / 2 = 6 (left: 6 12) || 12 + 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "12 - 5 = 7 (left: 1 2 7) || 7 - 2 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "12 - 5 = 7 (left: 1 2 7) || 2 * 7 = 14 (left: 1 14) || 14 - 1 = 13 (left: 13)",
                "12 - 5 = 7 (left: 1 2 7) || 7 - 2 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "12 - 5 = 7 (left: 1 2 7) || 7 - 2 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "12 - 5 = 7 (left: 1 2 7) || 7 - 2 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "12 - 5 = 7 (left: 1 2 7) || 7 - 2 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "1 * 2 = 2 (left: 2 5 12) || 12 / 2 = 6 (left: 6 12) || 12 + 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "5 + 12 = 17 (left: 1 2 17) || 17 - 1 = 16 (left: 2 16)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.003,
                0.002,
                0.002,
                0.002,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 6.1",
                "2 <- 6.1",
                "3 <- 6.1",
                "4 <- 6.3",
                "5 <- 6.3",
                "6 <- 6.0",
                "7 <- 2.3",
                "8 <- 6.3",
                "9 <- 6.3"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 5 = 7 (left: 1 2 7) || 7 - 2 = 5 (left: 1 5) || 5 - 1 = 4 (left: 4)",
                "1 * 2 = 2 (left: 2 5 12) || 12 / 2 = 6 (left: 6 12) || 12 + 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "1 * 2 = 2 (left: 2 5 12) || 12 / 2 = 6 (left: 6 12) || 12 + 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "1 * 2 = 2 (left: 2 5 12) || 12 / 2 = 6 (left: 6 12) || 12 + 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "12 - 5 = 7 (left: 1 2 7) || 7 - 2 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "12 - 5 = 7 (left: 1 2 7) || 7 - 2 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "12 - 5 = 7 (left: 1 2 7) || 2 * 7 = 14 (left: 1 14) || 14 - 1 = 13 (left: 13)",
                "1 * 2 = 2 (left: 2 5 12) || 12 - 2 = 10 (left: 2 10) || 10 - 2 = 8 (left: 8)",
                "12 - 5 = 7 (left: 1 2 7) || 7 - 2 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "12 - 5 = 7 (left: 1 2 7) || 7 - 2 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.002,
                0.002,
                0.003,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 6.1",
                "2 <- 6.1",
                "3 <- 6.1",
                "4 <- 6.1",
                "5 <- INIT",
                "6 <- 6.1",
                "7 <- 6.1",
                "8 <- 6.0",
                "9 <- 6.1"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 5 = 7 (left: 1 2 7) || 7 - 2 = 5 (left: 1 5) || 5 - 1 = 4 (left: 4)",
                "1 * 2 = 2 (left: 2 5 12) || 12 / 2 = 6 (left: 6 12) || 12 + 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "1 * 2 = 2 (left: 2 5 12) || 12 / 2 = 6 (left: 6 12) || 12 + 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "1 * 2 = 2 (left: 2 5 12) || 12 / 2 = 6 (left: 6 12) || 12 + 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "1 * 2 = 2 (left: 2 5 12) || 12 / 2 = 6 (left: 6 12) || 12 + 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "12 - 5 = 7 (left: 1 2 7)",
                "1 * 2 = 2 (left: 2 5 12) || 12 / 2 = 6 (left: 6 12) || 12 + 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "1 * 2 = 2 (left: 2 5 12) || 12 / 2 = 6 (left: 6 12) || 12 + 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "12 - 5 = 7 (left: 1 2 7) || 2 * 7 = 14 (left: 1 14) || 14 - 1 = 13 (left: 13)",
                "1 * 2 = 2 (left: 2 5 12) || 12 / 2 = 6 (left: 6 12) || 12 + 6 = 18 (left: 18) || There are no possible next steps with the input 18."
            ]
        },
        "Input": "1 2 5 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "94": {
        "puzzle": "2 7 7 8",
        "Step 0": {
            "steps": [
                "8 - 2 = 6 (left: 7 7 6)",
                "7 / 2 = 3.5 (left: 3.5 7 8)",
                "7 - 2 = 5 (left: 5 7 8)",
                "7 - 2 = 5 (left: 5 7 8)",
                "8 - 7 = 1 (left: 1 7 8)",
                "7 - 2 = 5 (left: 5 7 8)",
                "7 - 2 = 5 (left: 5 7 8)",
                "8 - 2 = 6 (left: 6 7 8)",
                "8 - 7 = 1 (left: ",
                "8 - 2 = 6 (left: 6 7 8)"
            ],
            "Evaluation": [
                3.0,
                22.0,
                3.0,
                3.0,
                1.002,
                3.0,
                3.0,
                3.0,
                0.0,
                2.001
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.1",
                "2 <- 0.1",
                "3 <- INIT",
                "4 <- 0.7",
                "5 <- 0.6",
                "6 <- INIT",
                "7 <- 0.1",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "8 - 2 = 6 (left: 7 7 6) || 7 - 6 = 1 (left: 1 7)",
                "7 / 2 = 3.5 (left: 3.5 7 8) || 3.5 * 7 = 24.5 (left: 8 24.5)",
                "7 / 2 = 3.5 (left: 3.5 7 8) || 7 + 3.5 = 10.5 (left: 8 10.5)",
                "8 - 2 = 6 (left: 6 7 8)",
                "8 - 2 = 6 (left: 6 7 8) || 7 - 6 = 1 (left: 1 8)",
                "7 - 2 = 5 (left: 5 7 8) || 7 / 5 = 1.4 (",
                "8 - 2 = 6 (left: 6 7 8)",
                "7 / 2 = 3.5 (left: 3.5 7 8) || 8 / 3.5 =",
                "8 - 2 = 6 (left: 6 7 8)",
                "7 - 2 = 5 (left: 5 7 8)"
            ],
            "Evaluation": [
                20.0,
                1.001,
                2.001,
                2.001,
                40.0,
                0.003,
                2.001,
                0.003,
                2.001,
                3.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.4",
                "2 <- INIT",
                "3 <- 1.4",
                "4 <- 1.0",
                "5 <- 1.4",
                "6 <- 1.0",
                "7 <- 1.0",
                "8 <- 0.7",
                "9 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "8 - 2 = 6 (left: 7 7 6) || 7 - 6 = 1 (left: 1 7) || 1 + 7 = 8 (left: 8)",
                "8 - 2 = 6 (left: 6 7 8) || 7 - 6 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "7 - 2 = 5 (left: 5 7 8)",
                "8 - 2 = 6 (left: 6 7 8) || 7 - 6 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 - 2 = 6 (left: 7 7 6) || 7 - 6 = 1 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "8 - 2 = 6 (left: 6 7 8) || 7 - 6 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 2 = 6 (left: 7 7 6) || 7 - 6 = 1 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "8 - 2 = 6 (left: 7 7 6) || 7 - 6 = 1 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "8 - 2 = 6 (left: 6 7 8) || 6 * 7 = 42 (left: 8 42)",
                "8 - 2 = 6 (left: 7 7 6) || 7 - 6 = 1 (left: 1 7) || 7 / 1 = 7 (left: 7)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                3.0,
                0.001,
                0.001,
                0.002,
                0.003,
                0.003,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 2.2",
                "2 <- 1.4",
                "3 <- INIT",
                "4 <- 1.4",
                "5 <- 0.5",
                "6 <- 0.4",
                "7 <- 0.6",
                "8 <- 1.4",
                "9 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "7 - 2 = 5 (left: 5 7 8) || 7 + 8 = 15 (left: 5 15)",
                "7 - 2 = 5 (left: 5 7 8) || 7 * 8 = 56 (left: 5 56)",
                "8 - 2 = 6 (left: 6 7 8) || 7 - 6 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 2 = 6 (left: 6 7 8)",
                "8 - 2 = 6 (left: 6 7 8) || 7 - 6 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "7 - 2 = 5 (left: 5 7 8) || 7 / 5 = 1.4 (",
                "8 - 7 = 1 (left: 1 7 8) || 1 * 7 = 7 (left: 7 8)",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8)",
                "8 - 2 = 6 (left: 6 7 8) || 7 - 6 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "7 - 2 = 5 (left: 5 7 8)"
            ],
            "Evaluation": [
                0.003,
                2.001,
                0.002,
                2.001,
                0.002,
                0.003,
                21.001,
                60.0,
                0.001,
                3.0
            ],
            "Resampling": [
                "0 <- 3.7",
                "1 <- 3.1",
                "2 <- 1.2",
                "3 <- 3.7",
                "4 <- 1.0",
                "5 <- 3.7",
                "6 <- 3.7",
                "7 <- 3.6",
                "8 <- 0.1",
                "9 <- 1.4"
            ]
        },
        "Step 4": {
            "steps": [
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "7 - 2 = 5 (left: 5 7 8) || 7 * 8 = 56 (left: 5 56) || 10 - 3 = 7 (left: 7 7)",
                "7 / 2 = 3.5 (left: 3.5 7 8) || 7 + 3.5 = 10.5 (left: 8 10.5) || 8 / 10.5 = 0.7619047619047619 (left: 0.7619047619047619)",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 - 2 = 6 (left: 7 7 6) || 7 - 6 = 1 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 - 7 = 1 (left: 1 7 8) || 1 * 7 = 7 (left: 7 8) || 7 * 8 = 56 (left: 56)",
                "7 / 2 = 3.5 (left: 3.5 7 8) || 3.5 * 2 = 7 (left: 7 8)",
                "8 - 2 = 6 (left: 6 7 8) || 7 - 6 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.002,
                0.001,
                60.0,
                0.002,
                0.003,
                21.001,
                0.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 4.8",
                "2 <- 4.5",
                "3 <- 3.1",
                "4 <- 4.5",
                "5 <- 4.5",
                "6 <- 4.8",
                "7 <- 3.7",
                "8 <- 0.7",
                "9 <- 3.7"
            ]
        },
        "Step 5": {
            "steps": [
                "8 - 2 = 6 (left: 6 7 8) || 7 - 6 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "7 / 2 = 3.5 (left: 3.5 7 8) || 3.5 * 2 = 7 (left: 7 8) || 8 / 7 = 1.14 (left: 1.14)",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24",
                "7 - 2 = 5 (left: 5 7 8) || 7 * 8 = 56 (left: 5 56) || Input: 10 3 7",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (8 - 5) = 24",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24",
                "7 / 2 = 3.5 (left: 3.5 7 8) || 3.5 * 2 = 7 (left: 7 8) || 7 * 8 = 56 (left: 56)",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 - 2 = 6 (left: 6 7 8) || 6 * 7 = 42 (left: 8 42)",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                20.002,
                0.003,
                0.002,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 5.5",
                "2 <- 3.7",
                "3 <- 0.1",
                "4 <- 1.4",
                "5 <- 3.1",
                "6 <- 1.0",
                "7 <- 5.9",
                "8 <- 1.4",
                "9 <- 3.7"
            ]
        },
        "Step 6": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 8) || 7 - 3.5 = 3.5 (left: 3.5 8)",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24 || Input: 3 3 4 7\nSteps:\n3 + 4 = 7 (left: 3 7 7)\n7 + 7 = 14 (left: 14)\n14 - 14 = 0 (left: 0)\n7 * 0 = 0 (left: 0)\n3 * 4 * 7 = 84 (left: 84)\n84 / 7 = 12 (left: 12)\n12 -",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "7 / 2 = 3.5 (left: 3.5 7 8) || 3.5 * 2 = 7 (left: 7 8)",
                "8 - 2 = 6 (left: 6 7 8) || 7 - 6 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "7 - 2 = 5 (left: 5 7 8) || 7 * 8 = 56 (left: 5 56) || 10 + 3 = 13 (left: 13 7)",
                "8 - 2 = 6 (left: 7 7 6) || 7 - 6 = 1 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24",
                "8 - 2 = 6 (left: 6 7 8) || 7 - 6 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                21.001,
                0.002,
                0.002,
                0.003,
                20.002,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 6.9",
                "2 <- 5.9",
                "3 <- 5.5",
                "4 <- 5.9",
                "5 <- 6.1",
                "6 <- 4.5",
                "7 <- 6.9",
                "8 <- 5.5",
                "9 <- 6.2"
            ]
        },
        "Step 7": {
            "steps": [
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24 || Input: 3 3 4 7\nSteps:\n3 + 4 = 7 (left: 3 7 7)\n7 + 7 = 14 (left: 14)\n14 - 14 = 0 (left: 0)\n7 * 0 = 0 (left: 0)\n3 * 4 * 7 = 84 (left: 84)\n84 / 7 = 12 (left: 12)\n12 -",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24 || Input: 3 3 4 7\nSteps:\n3 + 4 = 7 (left: 3 7 7)\n7 + 7 = 14 (left: 14)\n14 - 14 = 0 (left: 0)\n7 * 0 = 0 (left: 0)\n3 * 4 * 7 = 84 (left: 84)\n84 / 7 = 12 (left: 12)\n12 - || 0 = 12 (left: 12)\nAnswer: ((3 + 4) + 7) * 0 = 12",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24 || Input: 3 3 4 7\nSteps:\n3 + 4 = 7 (left: 3 7 7)\n7 + 7 = 14 (left: 14)\n14 - 14 = 0 (left: 0)\n7 * 0 = 0 (left: 0)\n3 * 4 * 7 = 84 (left: 84)\n84 / 7 = 12 (left: 12)\n12 -",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24"
            ],
            "Evaluation": [
                20.002,
                20.002,
                20.002,
                60.0,
                20.002,
                60.0,
                20.002,
                20.002,
                60.0,
                20.002
            ],
            "Resampling": [
                "0 <- 7.7",
                "1 <- 6.2",
                "2 <- 7.8",
                "3 <- 7.9",
                "4 <- 6.1",
                "5 <- 3.7",
                "6 <- 6.9",
                "7 <- 7.6",
                "8 <- 7.8",
                "9 <- 7.0"
            ]
        },
        "Step 8": {
            "steps": [
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24 || Input: 3 3 4 7\nSteps:\n3 + 4 = 7 (left: 3 7 7)\n7 + 7 = 14 (left: 14)\n14 - 14 = 0 (left: 0)\n7 * 0 = 0 (left: 0)\n3 * 4 * 7 = 84 (left: 84)\n84 / 7 = 12 (left: 12)\n12 -",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24 || Input: 3 3 4 7\nSteps:\n3 + 4 = 7 (left: 3 7 7)\n7 + 7 = 14 (left: 14)\n14 - 14 = 0 (left: 0)\n7 * 0 = 0 (left: 0)\n3 * 4 * 7 = 84 (left: 84)\n84 / 7 = 12 (left: 12)\n12 - || 0 = 12 (left: 12)\nAnswer: ((3 + 4) + 7) * 0 = 12",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24 || Input: 3 3 4 7\nSteps:\n3 + 4 = 7 (left: 3 7 7)\n7 + 7 = 14 (left: 14)\n14 - 14 = 0 (left: 0)\n7 * 0 = 0 (left: 0)\n3 * 4 * 7 = 84 (left: 84)\n84 / 7 = 12 (left: 12)\n12 -",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24 || Input: 3 3 4 7\nSteps:\n3 + 4 = 7 (left: 3 7 7)\n7 + 7 = 14 (left: 14)\n14 - 14 = 0 (left: 0)\n7 * 0 = 0 (left: 0)\n3 * 4 * 7 = 84 (left: 84)\n84 / 7 = 12 (left: 12)\n12 - || 0 = 12 (left: 12)\nAnswer: ((3 + 4) + 7) * 0 = 12",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24 || Input: 3 3 4 7\nSteps:\n3 + 4 = 7 (left: 3 7 7)\n7 + 7 = 14 (left: 14)\n14 - 14 = 0 (left: 0)\n7 * 0 = 0 (left: 0)\n3 * 4 * 7 = 84 (left: 84)\n84 / 7 = 12 (left: 12)\n12 -",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24 || Input: 3 3 4 7\nSteps:\n3 + 4 = 7 (left: 3 7 7)\n7 + 7 = 14 (left: 14)\n14 - 14 = 0 (left: 0)\n7 * 0 = 0 (left: 0)\n3 * 4 * 7 = 84 (left: 84)\n84 / 7 = 12 (left: 12)\n12 - || 0 = 12 (left: 12)\nAnswer: ((3 + 4) + 7) * 0 = 12",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24 || Input: 3 3 4 7\nSteps:\n3 + 4 = 7 (left: 3 7 7)\n7 + 7 = 14 (left: 14)\n14 - 14 = 0 (left: 0)\n7 * 0 = 0 (left: 0)\n3 * 4 * 7 = 84 (left: 84)\n84 / 7 = 12 (left: 12)\n12 -"
            ],
            "Evaluation": [
                60.0,
                20.002,
                60.0,
                60.0,
                60.0,
                60.0,
                20.002,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 8.5",
                "1 <- 7.4",
                "2 <- 8.7",
                "3 <- 7.3",
                "4 <- 8.0",
                "5 <- 6.1",
                "6 <- 7.1",
                "7 <- 6.9",
                "8 <- 7.5",
                "9 <- 6.1"
            ]
        },
        "Step 9": {
            "steps": [
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24 || Input: 3 3 4 7\nSteps:\n3 + 4 = 7 (left: 3 7 7)\n7 + 7 = 14 (left: 14)\n14 - 14 = 0 (left: 0)\n7 * 0 = 0 (left: 0)\n3 * 4 * 7 = 84 (left: 84)\n84 / 7 = 12 (left: 12)\n12 -",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24 || Input: 3 3 4 7\nSteps:\n3 + 4 = 7 (left: 3 7 7)\n7 + 7 = 14 (left: 14)\n14 - 14 = 0 (left: 0)\n7 * 0 = 0 (left: 0)\n3 * 4 * 7 = 84 (left: 84)\n84 / 7 = 12 (left: 12)\n12 - || 0 = 12 (left: 12)\nAnswer: ((3 + 4) + 7) * 0 = 12",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24 || Input: 3 3 4 7\nSteps:\n3 + 4 = 7 (left: 3 7 7)\n7 + 7 = 14 (left: 14)\n14 - 14 = 0 (left: 0)\n7 * 0 = 0 (left: 0)\n3 * 4 * 7 = 84 (left: 84)\n84 / 7 = 12 (left: 12)\n12 - || 0 = 12 (left: 12)\nAnswer: ((3 + 4) + 7) * 0 = 12",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24 || Input: 3 3 4 7\nSteps:\n3 + 4 = 7 (left: 3 7 7)\n7 + 7 = 14 (left: 14)\n14 - 14 = 0 (left: 0)\n7 * 0 = 0 (left: 0)\n3 * 4 * 7 = 84 (left: 84)\n84 / 7 = 12 (left: 12)\n12 - || 0 = 12 (left: 12)\nAnswer: ((3 + 4) + 7) * 0 = 12",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24 || Input: 3 3 4 7\nSteps:\n3 + 4 = 7 (left: 3 7 7)\n7 + 7 = 14 (left: 14)\n14 - 14 = 0 (left: 0)\n7 * 0 = 0 (left: 0)\n3 * 4 * 7 = 84 (left: 84)\n84 / 7 = 12 (left: 12)\n12 - || 0 = 12 (left: 12)\nAnswer: ((3 + 4) + 7) * 0 = 12",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24 || Input: 3 3 4 7\nSteps:\n3 + 4 = 7 (left: 3 7 7)\n7 + 7 = 14 (left: 14)\n14 - 14 = 0 (left: 0)\n7 * 0 = 0 (left: 0)\n3 * 4 * 7 = 84 (left: 84)\n84 / 7 = 12 (left: 12)\n12 -",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24 || Input: 3 3 4 7\nSteps:\n3 + 4 = 7 (left: 3 7 7)\n7 + 7 = 14 (left: 14)\n14 - 14 = 0 (left: 0)\n7 * 0 = 0 (left: 0)\n3 * 4 * 7 = 84 (left: 84)\n84 / 7 = 12 (left: 12)\n12 - || 0 = 12 (left: 12)\nAnswer: ((3 + 4) + 7) * 0 = 12 || Sorry, it seems that it's not possible to obtain 24 with the given numbers using the specified operations.",
                "7 - 2 = 5 (left: 5 7 8) || 8 - 5 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (7 - 2) * (7 - 8) = 24 || Input: 3 3 4 7\nSteps:\n3 + 4 = 7 (left: 3 7 7)\n7 + 7 = 14 (left: 14)\n14 - 14 = 0 (left: 0)\n7 * 0 = 0 (left: 0)\n3 * 4 * 7 = 84 (left: 84)\n84 / 7 = 12 (left: 12)\n12 - || 0 = 12 (left: 12)\nAnswer: ((3 + 4) + 7) * 0 = 12"
            ]
        },
        "Input": "2 7 7 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "95": {
        "puzzle": "4 4 11 13",
        "Step 0": {
            "steps": [
                "11 + 4 = 15 (left: 4 15 13)",
                "4 / 4 = 1 (left: 1 11 13)",
                "4 * 4 = 16 (left: 16 11 13)",
                "4 * 4 = 16 (left: 16 11 13)",
                "11 + 4 = 15 (left: 4 11 15)",
                "4 * 4 = 16 (left: 16 11 13)",
                "4 * 4 = 16 (left: 16 11 13)",
                "11 + 4 = 15 (left: 4 15 13)",
                "13 - 11 = 2 (left: 4 2 ",
                "11 + 4 = 15 (left: 4 15 13)"
            ],
            "Evaluation": [
                2.001,
                1.002,
                3.0,
                3.0,
                1.002,
                3.0,
                3.0,
                0.002,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.5",
                "3 <- 0.0",
                "4 <- 0.3",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 0.6",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "4 / 4 = 1 (left: 1 11 13)",
                "4 * 4 = 16 (left: 16 11 13)",
                "4 * 4 = 16 (left: 16 11 13) || 16 / 11 = 1.4545 (left: 1.4545 13)",
                "11 + 4 = 15 (left: 4 15 13) || 4 * 15 = 60 (left: 13 60)",
                "4 * 4 = 16 (left: 16 11 13) || 16 + 13 = 29 (left: 11 29)",
                "4 * 4 = 16 (left: 16 11 13)",
                "11 + 4 = 15 (left: 4 15 13)",
                "4 * 4 = 16 (left: 16 11 13) || 16 / 11 = 1.45 (left: 1.45 13)",
                "11 + 4 = 15 (left: 4 15 13)",
                "4 * 4 = 16 (left: 16 11 13)"
            ],
            "Evaluation": [
                1.002,
                3.0,
                2.001,
                40.0,
                0.003,
                3.0,
                0.003,
                2.001,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- INIT",
                "4 <- 1.3",
                "5 <- INIT",
                "6 <- 1.9",
                "7 <- INIT",
                "8 <- 0.4",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "4 * 4 = 16 (left: 16 11 13) || 16 - 13 = 3 (left: 11 3)",
                "11 + 4 = 15 (left: 4 15 13) || 4 * 15 = 60 (left: 13 60) || 25 * 5 = 125 (",
                "11 + 4 = 15 (left: 4 15 13) || 4 * 15 = 60 (left: 13 60) || 60 / 13 = 4.61538461538 (left: 4.61538461538)",
                "11 + 4 = 15 (left: 4 15 13)",
                "11 + 4 = 15 (left: 4 15 13) || 4 * 15 = 60 (left: 13 60) || 13 / 60 = 0.21666666666666667 (left: 0.21666666666666667)",
                "4 * 4 = 16 (left: 16 11 13)",
                "4 * 4 = 16 (left: 16 11 13) || 16 + 11 = 27 (left: 27 13)",
                "13 - 11 = 2 (left: 4 11 ",
                "11 + 4 = 15 (left: 4 11 15) || 15 - 11 = 4 (left: 4 15)",
                "4 * 4 = 16 (left: 16 11 13)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.0,
                0.003,
                0.001,
                3.0,
                0.002,
                3.0,
                0.001,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 1.9",
                "4 <- 1.3",
                "5 <- 0.6",
                "6 <- 1.3",
                "7 <- INIT",
                "8 <- 1.3",
                "9 <- 0.2"
            ]
        },
        "Step 3": {
            "steps": [
                "4 / 4 = 1 (left: 1 11 13)",
                "4 * 4 = 16 (left: 16 11 13)",
                "4 * 4 = 16 (left: 16 11 13)",
                "4 * 4 = 16 (left: 16 11 13) || 16 + 11 = 27 (left: 27 13)",
                "11 + 4 = 15 (left: 4 15 13) || 4 * 15 = 60 (left: 13 60) || 25 + 5 = 30 (left: 30 7)",
                "4 * 4 = 16 (left: 16 11 13) || 16 / 13 = ",
                "11 + 4 = 15 (left: 4 15 13) || 4 * 15 = 60 (left: 13 60) || Input: 25 5 7",
                "13 - 11 = 2 (left: 4 11 ",
                "11 + 4 = 15 (left: 4 15 13) || 4 * 15 = 60 (left: 13 60) || Input: 25 5 7",
                "4 * 4 = 16 (left: 16 11 13) || 16 + 13 = 29 (left: 11 29)"
            ],
            "Evaluation": [
                1.002,
                3.0,
                3.0,
                0.002,
                0.002,
                0.003,
                0.002,
                3.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.3",
                "2 <- 3.1",
                "3 <- INIT",
                "4 <- 3.1",
                "5 <- 0.6",
                "6 <- 1.9",
                "7 <- 2.7",
                "8 <- 0.5",
                "9 <- 1.3"
            ]
        },
        "Step 4": {
            "steps": [
                "4 * 4 = 16 (left: 16 11 13) || 16 - 13 = 3 (left: 11 3)",
                "11 + 4 = 15 (left: 4 15 13) || 4 * 15 = 60 (left: 13 60) || 25 * 5 = 125 (",
                "4 * 4 = 16 (left: 16 11 13) || 16 + 13 = 29 (left: 11 29)",
                "11 + 4 = 15 (left: 4 15 13)",
                "4 * 4 = 16 (left: 16 11 13) || 16 + 13 = 29 (left: 11 29)",
                "4 * 4 = 16 (left: 16 11 13) || 16 / 13 = ",
                "4 * 4 = 16 (left: 16 11 13) || 16 + 11 = 27 (left: 27 13)",
                "13 - 11 = 2 (left: 4 11  || Input: 5 5 ",
                "4 * 4 = 16 (left: 16 11 13) || 16 + 11 = 27 (left: 27 13)",
                "11 + 4 = 15 (left: 4 15 13) || 4 * 15 = 60 (left: 13 60) || 25 + 5 = 30 (left: 30 7)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 2.5",
                "2 <- 2.5",
                "3 <- 0.5",
                "4 <- 1.3",
                "5 <- 1.9",
                "6 <- 1.3",
                "7 <- 0.2",
                "8 <- 1.3",
                "9 <- 2.9"
            ]
        },
        "Step 5": {
            "steps": [
                "4 * 4 = 16 (left: 16 11 13) || 16 - 13 = 3 (left: 11 3)",
                "4 * 4 = 16 (left: 16 11 13) || 16 + 13 = 29 (left: 11 29)",
                "4 * 4 = 16 (left: 16 11 13) || 16 + 13 = 29 (left: 11 29)",
                "4 * 4 = 16 (left: 16 11 13) || 16 + 11 = 27 (left: 27 13)",
                "11 + 4 = 15 (left: 4 15 13) || 4 * 15 = 60 (left: 13 60) || 25 + 5 = 30 (left: 30 7)",
                "4 * 4 = 16 (left: 16 11 13) || 16 / 13 = ",
                "11 + 4 = 15 (left: 4 15 13) || 4 * 15 = 60 (left: 13 60) || Input: 25 5 7",
                "4 * 4 = 16 (left: 16 11 13) || 16 / 11 = 1.45 (left: 1.45 13)",
                "11 + 4 = 15 (left: 4 15 13) || 4 * 15 = 60 (left: 13 60) || Input: 25 5 7",
                "4 * 4 = 16 (left: 16 11 13) || 16 + 13 = 29 (left: 11 29)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.002,
                0.002,
                0.003,
                0.003,
                2.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.7",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- INIT",
                "4 <- 1.0",
                "5 <- 1.3",
                "6 <- 1.2",
                "7 <- 5.7",
                "8 <- 1.3",
                "9 <- 1.3"
            ]
        },
        "Step 6": {
            "steps": [
                "13 - 11 = 2 (left: 4 11  || 11 / 4 = 2.75 (left: 2.75)",
                "11 + 4 = 15 (left: 4 15 13) || 4 * 15 = 60 (left: 13 60) || 25 * 5 = 125 (",
                "11 + 4 = 15 (left: 4 15 13) || 4 * 15 = 60 (left: 13 60) || 25 * 5 = 125 (",
                "11 + 4 = 15 (left: 4 15 13)",
                "4 / 4 = 1 (left: 1 11 13) || 13 - 1 = 12 (left: 11 12)",
                "11 + 4 = 15 (left: 4 15 13) || 4 * 15 = 60 (left: 13 60) || 25 + 5 = 30 (left: 30 7)",
                "4 * 4 = 16 (left: 16 11 13) || 16 / 11 = 1.4545 (left: 1.4545 13) || 13 - 1.4545 = 11.5455 (left: 11.5455)",
                "4 * 4 = 16 (left: 16 11 13) || 16 / 11 = 1.45 (left: 1.45 13) || 1.45 * 13 = 18.85 (left: 18.85)",
                "11 + 4 = 15 (left: 4 15 13) || 4 * 15 = 60 (left: 13 60) || Input: 25 5 7",
                "11 + 4 = 15 (left: 4 15 13) || 4 * 15 = 60 (left: 13 60) || 25 + 5 = 30 (left: 30 7)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.002,
                0.002,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.9",
                "2 <- 0.1",
                "3 <- 1.3",
                "4 <- 1.3",
                "5 <- 5.8",
                "6 <- 2.9",
                "7 <- 1.3",
                "8 <- 1.3",
                "9 <- 1.1"
            ]
        },
        "Step 7": {
            "steps": [
                "11 + 4 = 15 (left: 4 15 13) || 4 * 15 = 60 (left: 13 60) || 60 / 13 = 4.615384615384615 (left: 4.615384615384615)",
                "4 * 4 = 16 (left: 16 11 13) || 16 + 13 = 29 (left: 11 29)",
                "4 / 4 = 1 (left: 1 11 13) || 13 - 1 = 12 (left: 11 12)",
                "11 + 4 = 15 (left: 4 15 13) || 4 * 15 = 60 (left: 13 60) || Input: 25 5 7",
                "11 + 4 = 15 (left: 4 15 13) || 4 * 15 = 60 (left: 13 60) || 25 + 5 = 30 (left: 30 7)",
                "11 + 4 = 15 (left: 4 15 13) || 4 * 15 = 60 (left: 13 60) || Input: 25 5 7 || 5 / 7 = 0.71 (left: 0",
                "4 * 4 = 16 (left: 16 11 13) || 16 + 11 = 27 (left: 27 13)",
                "11 + 4 = 15 (left: 4 15 13) || 4 * 15 = 60 (left: 13 60) || Input: 25 5 7",
                "11 + 4 = 15 (left: 4 15 13) || 4 * 15 = 60 (left: 13 60) || Input: 25 5 7",
                "4 * 4 = 16 (left: 16 11 13) || 16 + 13 = 29 (left: 11 29)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.002,
                0.003,
                0.002,
                20.002,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 7.5",
                "1 <- 3.2",
                "2 <- 2.7",
                "3 <- 1.3",
                "4 <- 5.7",
                "5 <- 7.5",
                "6 <- 7.5",
                "7 <- 7.5",
                "8 <- 2.9",
                "9 <- 2.9"
            ]
        },
        "Step 8": {
            "steps": [
                "11 + 4 = 15 (left: 4 15 13) || 4 * 15 = 60 (left: 13 60) || Input: 25 5 7 || 5 / 7 = 0.71 (left: 0 || There are no possible next steps as there are no numbers given in the input.",
                "4 * 4 = 16 (left: 16 11 13) || 16 + 13 = 29 (left: 11 29)",
                "13 - 11 = 2 (left: 4 11  || 5 - 5 = 0 (left: 0)",
                "11 + 4 = 15 (left: 4 15 13) || 4 * 15 = 60 (left: 13 60) || Input: 25 5 7",
                "4 * 4 = 16 (left: 16 11 13) || 16 / 11 = 1.45 (left: 1.45 13) || 13 / 1.45 = 8.9655 (left: 8.9655)",
                "11 + 4 = 15 (left: 4 15 13) || 4 * 15 = 60 (left: 13 60) || Input: 25 5 7 || 5 / 7 = 0.71 (left: 0 || There are no possible next steps as there are no numbers given in the input.",
                "11 + 4 = 15 (left: 4 15 13) || 4 * 15 = 60 (left: 13 60) || Input: 25 5 7 || 5 / 7 = 0.71 (left: 0 || There are no possible next steps as there are no numbers given in the input.",
                "11 + 4 = 15 (left: 4 15 13) || 4 * 15 = 60 (left: 13 60) || Input: 25 5 7 || 5 / 7 = 0.71 (left: 0 || There are no possible next steps as there are no numbers given in the input.",
                "4 * 4 = 16 (left: 16 11 13) || 16 + 11 = 27 (left: 27 13)",
                "4 * 4 = 16 (left: 16 11 13) || 16 + 13 = 29 (left: 11 29)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 8.2",
                "2 <- 1.1",
                "3 <- 7.5",
                "4 <- 8.2",
                "5 <- INIT",
                "6 <- 1.9",
                "7 <- 1.3",
                "8 <- 7.5",
                "9 <- 8.2"
            ]
        },
        "Step 9": {
            "steps": [
                "4 * 4 = 16 (left: 16 11 13) || 16 - 13 = 3 (left: 11 3)",
                "13 - 11 = 2 (left: 4 11  || 5 - 5 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "4 * 4 = 16 (left: 16 11 13) || 16 + 13 = 29 (left: 11 29)",
                "11 + 4 = 15 (left: 4 15 13) || 4 * 15 = 60 (left: 13 60) || Input: 25 5 7 || 5 / 7 = 0.71 (left: 0 || There are no possible next steps as there are no numbers given in the input.",
                "13 - 11 = 2 (left: 4 11  || 5 - 5 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "4 * 4 = 16 (left: 16 11 13)",
                "4 * 4 = 16 (left: 16 11 13) || 16 + 11 = 27 (left: 27 13)",
                "11 + 4 = 15 (left: 4 15 13) || 4 * 15 = 60 (left: 13 60) || Input: 25 5 7",
                "11 + 4 = 15 (left: 4 15 13) || 4 * 15 = 60 (left: 13 60) || Input: 25 5 7 || 5 / 7 = 0.71 (left: 0 || There are no possible next steps as there are no numbers given in the input.",
                "13 - 11 = 2 (left: 4 11  || 5 - 5 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input."
            ]
        },
        "Input": "4 4 11 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "96": {
        "puzzle": "1 1 4 7",
        "Step 0": {
            "steps": [
                "7 - 1 = 6 (left: 1 4 6)",
                "1 * 1 = 1 (left: 1 4 7)",
                "1 * 1 = 1 (left: 1 4 7)",
                "7 - 1 = 6 (left: 1 4 6)",
                "7 - 4 = 3 (left: 1 3 7)",
                "7 - 1 = 6 (left: 1 4 6)",
                "7 - 4 = 3 (left: 1 3 7)",
                "7 - 4 = 3 (left: 1 3 7)",
                "4 + 1 = 5 (left: 1 5 ",
                "7 - 4 = 3 (left: 1 3 7)"
            ],
            "Evaluation": [
                41.0,
                1.002,
                1.002,
                41.0,
                2.001,
                41.0,
                3.0,
                3.0,
                0.002,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.3",
                "2 <- 0.5",
                "3 <- 0.5",
                "4 <- 0.3",
                "5 <- INIT",
                "6 <- 0.0",
                "7 <- 0.5",
                "8 <- 0.3",
                "9 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 7)",
                "7 - 1 = 6 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "7 - 1 = 6 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "7 - 1 = 6 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "7 - 1 = 6 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "4 + 1 = 5 (left: 1 5 7)",
                "7 - 1 = 6 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "7 - 1 = 6 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5)",
                "7 - 1 = 6 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "7 - 1 = 6 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)"
            ],
            "Evaluation": [
                1.002,
                0.002,
                0.002,
                2.0,
                0.002,
                1.002,
                2.0,
                3.0,
                2.0,
                0.002
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.3",
                "2 <- 0.5",
                "3 <- 0.9",
                "4 <- 1.3",
                "5 <- 0.0",
                "6 <- INIT",
                "7 <- 0.5",
                "8 <- INIT",
                "9 <- 0.5"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 7) || 4 / 1 = 4 (left: 4 7)",
                "7 - 1 = 6 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "7 - 1 = 6 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "7 - 4 = 3 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4)",
                "7 - 1 = 6 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5) || 1 / 1.5 = 0.6666666666666666 (left: 0.6666666666666666)",
                "7 - 1 = 6 (left: 1 4 6) || Input: 3 9",
                "7 - 4 = 3 (left: 1 3 7)",
                "7 - 1 = 6 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5)",
                "7 - 4 = 3 (left: 1 3 7)",
                "7 - 1 = 6 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)"
            ],
            "Evaluation": [
                1.0,
                0.002,
                0.002,
                60.0,
                1.001,
                0.003,
                2.001,
                3.0,
                2.001,
                0.002
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 0.5",
                "2 <- 2.3",
                "3 <- 1.3",
                "4 <- 2.3",
                "5 <- INIT",
                "6 <- 2.3",
                "7 <- 2.3",
                "8 <- 0.0",
                "9 <- 2.3"
            ]
        },
        "Step 3": {
            "steps": [
                "7 - 4 = 3 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "7 - 1 = 6 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "7 - 4 = 3 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "7 - 1 = 6 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5) || 1 * 1.5 = 1.5 (left: 1.5)",
                "7 - 4 = 3 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "4 + 1 = 5 (left: 1 5 7)",
                "7 - 4 = 3 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "7 - 4 = 3 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "7 - 1 = 6 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "7 - 4 = 3 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.002,
                0.002,
                0.002,
                1.002,
                0.002,
                0.002,
                2.0,
                0.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.5",
                "2 <- 0.0",
                "3 <- 0.5",
                "4 <- 2.3",
                "5 <- 2.7",
                "6 <- INIT",
                "7 <- 0.3",
                "8 <- 2.3",
                "9 <- 0.5"
            ]
        },
        "Step 4": {
            "steps": [
                "7 - 1 = 6 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "7 - 1 = 6 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "7 - 1 = 6 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "7 - 1 = 6 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "7 - 4 = 3 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "7 - 1 = 6 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || 5 / 4 = 1.25 (left: 1.25)",
                "7 - 4 = 3 (left: 1 3 7)",
                "7 - 1 = 6 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5)",
                "7 - 4 = 3 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "7 - 1 = 6 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.002,
                2.0,
                0.002,
                0.002,
                2.001,
                3.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 1.0",
                "2 <- 4.0",
                "3 <- 0.5",
                "4 <- 4.6",
                "5 <- 4.7",
                "6 <- 4.0",
                "7 <- 4.0",
                "8 <- 0.5",
                "9 <- 0.3"
            ]
        },
        "Step 5": {
            "steps": [
                "7 - 1 = 6 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6)",
                "7 - 1 = 6 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 10 / 5 = 2 (left: 2)",
                "7 - 1 = 6 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "7 - 4 = 3 (left: 1 3 7) || 3 / 1 = 3 (left: 3 7)",
                "7 - 1 = 6 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || 5 / 4 = 1.25 (left: 1.25)",
                "7 - 1 = 6 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || Input: 5 10",
                "7 - 1 = 6 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || Input: 5 10",
                "7 - 1 = 6 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "7 - 1 = 6 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.001,
                2.0,
                0.0,
                0.002,
                0.003,
                0.003,
                2.0,
                0.002
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 4.0",
                "2 <- 5.0",
                "3 <- 4.0",
                "4 <- 5.1",
                "5 <- 0.4",
                "6 <- 4.0",
                "7 <- INIT",
                "8 <- 2.3",
                "9 <- 4.0"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "7 - 1 = 6 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 10 / 5 = 2 (left: 2)",
                "7 - 1 = 6 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 10 / 5 = 2 (left: 2)",
                "7 - 1 = 6 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || Input: 5 10",
                "1 * 1 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "7 - 4 = 3 (left: 1 3 7) || 3 / 1 = 3 (left: 3 7)",
                "7 - 1 = 6 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || Input: 5 10",
                "4 / 1 = 4 (left: 4 4 ",
                "7 - 4 = 3 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "7 - 1 = 6 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 5 + 10 = 15 (left: 15)"
            ],
            "Evaluation": [
                0.001,
                0.001,
                0.001,
                0.003,
                0.002,
                0.0,
                0.003,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 5.1",
                "2 <- 5.1",
                "3 <- 5.1",
                "4 <- 5.1",
                "5 <- 5.1",
                "6 <- 4.7",
                "7 <- 0.5",
                "8 <- 0.5",
                "9 <- 5.1"
            ]
        },
        "Step 7": {
            "steps": [
                "7 - 1 = 6 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "1 * 1 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "1 * 1 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "1 * 1 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "7 - 1 = 6 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || 5 - 4 = 1 (left: 1)",
                "7 - 1 = 6 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5)",
                "7 - 1 = 6 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "1 * 1 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.002,
                60.0,
                0.002,
                0.002,
                0.002,
                3.0,
                2.0,
                0.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 5.0",
                "2 <- 5.1",
                "3 <- 7.0",
                "4 <- 7.0",
                "5 <- 2.3",
                "6 <- 7.0",
                "7 <- 7.0",
                "8 <- 0.3",
                "9 <- 2.3"
            ]
        },
        "Step 8": {
            "steps": [
                "7 - 1 = 6 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "7 - 1 = 6 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 10 / 5 = 2 (left: 2)",
                "1 * 1 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "7 - 1 = 6 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || Input: 5 10",
                "7 - 1 = 6 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 5 + 10 = 15 (left: 15)",
                "7 - 4 = 3 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "7 - 1 = 6 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || Input: 5 10",
                "7 - 1 = 6 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || Input: 5 10",
                "7 - 1 = 6 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "7 - 4 = 3 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                60.0,
                0.001,
                0.002,
                0.003,
                0.002,
                0.002,
                0.003,
                0.003,
                2.0,
                0.002
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 7.0",
                "2 <- 5.1",
                "3 <- 8.0",
                "4 <- 4.0",
                "5 <- 5.0",
                "6 <- 7.0",
                "7 <- 2.3",
                "8 <- 8.0",
                "9 <- 5.1"
            ]
        },
        "Step 9": {
            "steps": [
                "7 - 1 = 6 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "7 - 1 = 6 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 10 / 5 = 2 (left: 2)",
                "1 * 1 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "7 - 1 = 6 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || Input: 5 10",
                "7 - 1 = 6 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 5 + 10 = 15 (left: 15)",
                "7 - 1 = 6 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 5 + 10 = 15 (left: 15)",
                "7 - 1 = 6 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || Input: 5 10",
                "7 - 4 = 3 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "7 - 1 = 6 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || Input: 5 10",
                "1 * 1 = 1 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)"
            ]
        },
        "Input": "1 1 4 7",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "97": {
        "puzzle": "1 1 10 13",
        "Step 0": {
            "steps": [
                "10 - 1 = 9 (left: 1 9 13)",
                "1 * 1 = 1 (left: 1 10 13)",
                "10 - 1 = 9 (left: 9 1 13)",
                "1 * 10 = 10 (left: 10 1 13)",
                "10 + 1 = 11 (left: 1 11 13)",
                "10 + 1 = 11 (left: 1 11 13)",
                "1 + 10 = 11 (left: 11 10 13)",
                "10 + 1 = 11 (left: 1 11 13)",
                "13 - 10 = 3 (left: 1 3 13)",
                "10 + 1 = 11 (left: 1 11 13)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                1.002,
                41.0,
                1.002,
                1.002,
                1.002,
                1.002,
                22.0,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.3",
                "2 <- 0.8",
                "3 <- 0.1",
                "4 <- 0.3",
                "5 <- INIT",
                "6 <- 0.8",
                "7 <- 0.3",
                "8 <- 0.8",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 10 13)",
                "1 * 10 = 10 (left: 10 1 13) || 1 + 13 = 14 (left: 10 14)",
                "13 - 10 = 3 (left: 1 3 13) || 13 - 3 = 10 (left: 1 10)",
                "1 * 1 = 1 (left: 1 10 13) || 13 - 1 = 12 (left: 10 12)",
                "1 * 10 = 10 (left: 10 1 13) || 1 * 10 = 10 (left: 10 13)",
                "",
                "13 - 10 = 3 (left: 1 3 13) || 13 - 1 = 12 (left: 3 12)",
                "1 * 10 = 10 (left: 10 1 13) || 13 - 1 = 12 (left: 10 12)",
                "13 - 10 = 3 (left: 1 3 13) || 13 / 1 = 13 (left: 3 13)",
                "1 * 10 = 10 (left: 10 1 13) || Input: 5 3 7 15"
            ],
            "Evaluation": [
                1.002,
                60.0,
                60.0,
                0.002,
                0.001,
                0.003,
                20.002,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- 1.2",
                "3 <- 1.1",
                "4 <- 0.3",
                "5 <- 1.6",
                "6 <- 1.1",
                "7 <- 1.6",
                "8 <- 1.6",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "13 - 10 = 3 (left: 1 3 13) || 13 - 3 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "13 - 10 = 3 (left: 1 3 13) || 13 - 3 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "13 - 10 = 3 (left: 1 3 13) || 13 - 3 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 10 = 10 (left: 10 1 13) || 1 + 13 = 14 (left: 10 14) || 10 * 14 = 140 (left: 14 140)",
                "1 * 10 = 10 (left: 10 1 13) || Input: 5 3 7 15",
                "13 - 10 = 3 (left: 1 3 13) || 13 - 1 = 12 (left: 3 12) || Possible next steps:",
                "1 * 10 = 10 (left: 10 1 13) || 1 + 13 = 14 (left: 10 14) || 10 * 14 = 140 (left: 14 140)",
                "13 - 10 = 3 (left: 1 3 13) || 13 - 1 = 12 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "13 - 10 = 3 (left: 1 3 13) || 13 - 1 = 12 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "1 + 10 = 11 (left: 11 13)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                0.002,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 1.2",
                "2 <- 1.2",
                "3 <- 2.9",
                "4 <- INIT",
                "5 <- 1.1",
                "6 <- 2.9",
                "7 <- INIT",
                "8 <- 1.1",
                "9 <- 2.9"
            ]
        },
        "Step 3": {
            "steps": [
                "13 - 10 = 3 (left: 1 3 13) || 13 - 1 = 12 (left: 3 12) || 12 - 3 = 9 (left: 9 12)",
                "13 - 10 = 3 (left: 1 3 13) || 13 - 3 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "13 - 10 = 3 (left: 1 3 13) || 13 - 3 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 + 10 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 + 10 = 11 (left: 11 13)",
                "1 * 10 = 10 (left: 10 1 13) || 1 + 13 = 14 (left: 10 14) || 10 - 14 = -4 (left: -4 14)",
                "1 + 10 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "13 - 10 = 3 (left: 1 3 13)",
                "1 * 10 = 10 (left: 10 1 13) || 1 + 13 = 14 (left: 10 14) || 10 * 14 = 140 (left: 14 140)",
                "1 + 10 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.001,
                0.003,
                60.0,
                0.0,
                0.003,
                22.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 3.4",
                "2 <- 0.3",
                "3 <- 1.6",
                "4 <- 2.9",
                "5 <- INIT",
                "6 <- 2.9",
                "7 <- 1.2",
                "8 <- 3.4",
                "9 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 10 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "1 + 10 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "1 * 10 = 10 (left: 10 1 13) || Possible",
                "13 - 10 = 3 (left: 1 3 13) || 13 - 1 = 12 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "1 + 10 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "",
                "1 + 10 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "13 - 10 = 3 (left: 1 3 13) || 13 - 3 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 + 10 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 + 10 = 11 (left: 11 13)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.002,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 2.9",
                "2 <- 1.1",
                "3 <- 1.1",
                "4 <- 3.4",
                "5 <- 4.9",
                "6 <- 0.8",
                "7 <- 0.3",
                "8 <- 4.9",
                "9 <- 1.6"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 10 = 10 (left: 10 1 13) || 1 + 13 = 14 (left: 10 14) || 10 / 14 = 0.7142857142857143 (left: 0.7142857142857143 14)",
                "1 + 10 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "1 * 10 = 10 (left: 10 1 13) || 1 + 13 = 14 (left: 10 14) || 10 - 14 = -4 (left: -4 14)",
                "1 * 10 = 10 (left: 10 1 13) || 1 + 13 = 14 (left: 10 14) || 10 * 14 = 140 (left: 14 140)",
                "1 + 10 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "1 + 10 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "13 - 10 = 3 (left: 1 3 13) || 13 / 1 = 13 (left: 3 13)",
                "1 * 10 = 10 (left: 10 1 13) || 13 - 1 = 12 (left: 10 12)",
                "1 + 10 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "13 - 10 = 3 (left: 1 3 13) || 13 - 1 = 12 (left: 3 12) || Possible next steps:"
            ],
            "Evaluation": [
                2.0,
                0.002,
                0.0,
                0.002,
                0.002,
                0.002,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 4.9",
                "2 <- 3.4",
                "3 <- 3.4",
                "4 <- 4.9",
                "5 <- 4.9",
                "6 <- 1.2",
                "7 <- 0.3",
                "8 <- 0.0",
                "9 <- 2.9"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 10 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "1 + 10 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "1 + 10 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "1 + 10 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 + 10 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "1 + 10 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "13 - 10 = 3 (left: 1 3 13) || 13 - 3 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 10 = 10 (left: 10 1 13) || 13 - 1 = 12 (left: 10 12)",
                "10 - 1 = 9 (left: 1 9 13) || 13 - 1 = 12 (left: 9 12)",
                "1 + 10 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.002,
                0.003,
                0.002,
                0.002,
                0.002,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 4.9",
                "1 <- 0.3",
                "2 <- 2.9",
                "3 <- 1.1",
                "4 <- 4.9",
                "5 <- 1.2",
                "6 <- 3.4",
                "7 <- 1.2",
                "8 <- 2.9",
                "9 <- 1.1"
            ]
        },
        "Step 7": {
            "steps": [
                "1 + 10 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "1 * 10 = 10 (left: 10 1 13) || Possible",
                "1 + 10 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "1 * 10 = 10 (left: 10 1 13) || 1 + 13 = 14 (left: 10 14) || 10 * 14 = 140 (left: 14 140)",
                "1 + 10 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "13 - 10 = 3 (left: 1 3 13) || 13 - 3 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 + 10 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "13 - 10 = 3 (left: 1 3 13) || 13 - 3 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 + 10 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 * 10 = 10 (left: 10 1 13) || 1 + 13 = 14 (left: 10 14) || 10 - 14 = -4 (left: -4 14)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.002,
                0.002,
                0.002,
                0.001,
                0.003,
                0.002,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 2.9",
                "1 <- 3.4",
                "2 <- 4.9",
                "3 <- 4.9",
                "4 <- 1.1",
                "5 <- 4.9",
                "6 <- 1.2",
                "7 <- 5.0",
                "8 <- 0.3",
                "9 <- 2.9"
            ]
        },
        "Step 8": {
            "steps": [
                "1 + 10 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "1 + 10 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "1 + 10 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "1 + 10 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 * 10 = 10 (left: 10 1 13) || 1 + 13 = 14 (left: 10 14) || 10 - 14 = -4 (left: -4 14)",
                "1 + 10 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "13 - 10 = 3 (left: 1 3 13) || 13 - 3 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 10 = 10 (left: 10 1 13) || 1 + 13 = 14 (left: 10 14) || 10 / 14 = 0.7142857142857143 (left: 0.7142857142857143 14) || 0.7142857142857143 - 14 = -13.285714285714286 (left: -13.285714285714286)",
                "1 * 10 = 10 (left: 10 1 13) || 13 - 1 = 12 (left: 10 12)",
                "1 + 10 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.002,
                0.003,
                0.0,
                0.002,
                0.002,
                0.001,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 4.9",
                "1 <- 3.4",
                "2 <- 4.9",
                "3 <- 1.6",
                "4 <- 3.4",
                "5 <- 0.8",
                "6 <- 3.4",
                "7 <- 0.8",
                "8 <- 1.2",
                "9 <- 3.4"
            ]
        },
        "Step 9": {
            "steps": [
                "1 + 10 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "1 + 10 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "1 + 10 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "13 - 10 = 3 (left: 1 3 13) || 13 - 1 = 12 (left: 3 12) || 12 / 3 = 4 (left: 4 12)",
                "1 + 10 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "13 - 10 = 3 (left: 1 3 13) || Input: 5 5 25",
                "1 + 10 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "13 - 10 = 3 (left: 1 3 13) || 13 / 1 = 13 (left: 3 13)",
                "13 - 10 = 3 (left: 1 3 13) || 13 - 3 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 + 10 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)"
            ]
        },
        "Input": "1 1 10 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "98": {
        "puzzle": "4 6 6 6",
        "Step 0": {
            "steps": [
                "6 * 4 = 24 (left: 6 6 24)",
                "6 / 4 = 1.5 (left: 1.5 6 6)",
                "6 - 4 = 2 (left: 2 6 6)",
                "6 - 4 = 2 (left: 2 6 6)",
                "6 * 6 = 36 (left: 4 6 36)",
                "4 * 6 = 24 (left: 6 6 24)",
                "6 - 4 = 2 (left: 4 6 6)",
                "6 + 4 = 10 (left: 6 6 10)",
                "6 - 4 = 2",
                "6 * 4 = 24 (left: 6 6 24)"
            ],
            "Evaluation": [
                0.003,
                3.0,
                60.0,
                60.0,
                21.001,
                1.002,
                22.0,
                40.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 0.6",
                "2 <- 0.2",
                "3 <- 0.7",
                "4 <- 0.7",
                "5 <- INIT",
                "6 <- 0.3",
                "7 <- INIT",
                "8 <- 0.4",
                "9 <- 0.7"
            ]
        },
        "Step 1": {
            "steps": [
                "6 - 4 = 2 (left: 4 6 6) || 6 / 4 = 1.5 (left: 1.5 6)",
                "6 - 4 = 2 (left: 4 6 6) || 4 * 6 = 24 (left: 6 24)",
                "6 - 4 = 2 (left: 2 6 6) || 6 / 2 = 3 (left: 3 6)",
                "6 + 4 = 10 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10)",
                "6 + 4 = 10 (left: 6 6 10) || 6 * 6 = 36 (left: 10 36)",
                "6 - 4 = 2 (left: 2 6 6)",
                "6 - 4 = 2 (left: 2 6 6) || Input: 3 6",
                "6 - 4 = 2",
                "6 * 6 = 36 (left: 4 6 36) || 36 / 4 = 9 (left: 6 9)",
                "6 + 4 = 10 (left: 6 6 10) || 10 + 6 = 16 (left: 6 16)"
            ],
            "Evaluation": [
                1.0,
                1.002,
                3.0,
                60.0,
                0.003,
                60.0,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 1.5",
                "2 <- 0.2",
                "3 <- 1.5",
                "4 <- 1.3",
                "5 <- 1.5",
                "6 <- 0.4",
                "7 <- 0.3",
                "8 <- 0.7",
                "9 <- 0.7"
            ]
        },
        "Step 2": {
            "steps": [
                "6 - 4 = 2 (left: 4 6 6) || 6 / 4 = 1.5 (left: 1.5 6)",
                "6 - 4 = 2 (left: 2 6 6) || 6 / 3 = 2 (left: 2)",
                "6 - 4 = 2 (left: 2 6 6) || 6 / 3 = 2 (left: 2)",
                "6 - 4 = 2 (left: 2 6 6) || Input: 3 6",
                "6 + 4 = 10 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "6 - 4 = 2 (left: 2 6 6) || 3 + 6 = 9 (left: 9)",
                "6 * 6 = 36 (left: 4 6 36) || 36 / 4 = 9 (left: 6 9)",
                "6 - 4 = 2 (left: 2 6 6) || Input: 3 6",
                "6 + 4 = 10 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10)",
                "6 + 4 = 10 (left: 6 6 10) || 10 + 6 = 16 (left: 6 16)"
            ],
            "Evaluation": [
                1.0,
                0.001,
                0.001,
                0.003,
                0.001,
                0.001,
                0.003,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 1.5",
                "2 <- 0.4",
                "3 <- 0.7",
                "4 <- INIT",
                "5 <- 2.8",
                "6 <- 1.3",
                "7 <- 1.5",
                "8 <- 0.3",
                "9 <- 2.8"
            ]
        },
        "Step 3": {
            "steps": [
                "6 * 6 = 36 (left: 4 6 36) || 6 * 4 = 24 (left: 24 36)",
                "6 - 4 = 2 (left: 2 6 6) || 6 / 3 = 2 (left: 2)",
                "6 * 6 = 36 (left: 4 6 36) || 36 / 6 = 6 (left: 4 6)",
                "6 + 4 = 10 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10)",
                "6 - 4 = 2 (left: 2 6 6)",
                "6 + 4 = 10 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "6 + 4 = 10 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "6 - 4 = 2 (left: 2 6 6) || Input: 3 6",
                "6 - 4 = 2 (left: 2 6 6) || Input: 3 6",
                "6 + 4 = 10 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                1.002,
                0.001,
                60.0,
                60.0,
                60.0,
                0.001,
                0.002,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 3.3",
                "2 <- 3.4",
                "3 <- 3.4",
                "4 <- 3.4",
                "5 <- 3.3",
                "6 <- 0.6",
                "7 <- 3.3",
                "8 <- 0.3",
                "9 <- 3.2"
            ]
        },
        "Step 4": {
            "steps": [
                "6 * 6 = 36 (left: 4 6 36) || 36 / 6 = 6 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "6 + 4 = 10 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "6 - 4 = 2 (left: 2 6 6) || 6 / 3 = 2 (left: 2)",
                "6 - 4 = 2 (left: 2 6 6) || Input: 3 6",
                "6 - 4 = 2 (left: 2 6 6) || 3 + 6 = 9 (left: 9)",
                "6 + 4 = 10 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "6 - 4 = 2 (left: 4 6 6) || 6 - 4 = 2 (left: 2 6)",
                "6 + 4 = 10 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "6 - 4 = 2 (left: 2 6 6) || Input: 3 6",
                "6 * 6 = 36 (left: 4 6 36) || 36 / 6 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)"
            ],
            "Evaluation": [
                0.001,
                0.001,
                0.001,
                0.003,
                0.001,
                0.001,
                1.001,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 0.2",
                "2 <- 3.2",
                "3 <- 2.8",
                "4 <- 3.4",
                "5 <- 3.2",
                "6 <- 3.4",
                "7 <- 3.2",
                "8 <- 0.3",
                "9 <- 3.3"
            ]
        },
        "Step 5": {
            "steps": [
                "6 + 4 = 10 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "6 - 4 = 2 (left: 2 6 6) || 6 / 3 = 2 (left: 2)",
                "6 * 6 = 36 (left: 4 6 36) || 36 / 6 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "6 + 4 = 10 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "6 - 4 = 2 (left: 2 6 6) || 3 + 6 = 9 (left: 9)",
                "6 * 6 = 36 (left: 4 6 36) || 36 / 6 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "6 - 4 = 2 (left: 2 6 6) || Input: 3 6",
                "6 * 6 = 36 (left: 4 6 36) || 36 / 6 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "6 - 4 = 2 (left: 2 6 6) || Input: 3 6",
                "6 + 4 = 10 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.002,
                0.002,
                0.001,
                0.002,
                0.003,
                60.0,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 3.2",
                "2 <- 5.7",
                "3 <- 5.7",
                "4 <- INIT",
                "5 <- 3.4",
                "6 <- 5.7",
                "7 <- 1.3",
                "8 <- 5.7",
                "9 <- 1.5"
            ]
        },
        "Step 6": {
            "steps": [
                "6 - 4 = 2 (left: 2 6 6) || 6 - 2 = 4 (left: 4 6)",
                "6 * 6 = 36 (left: 4 6 36) || 36 / 6 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "6 * 6 = 36 (left: 4 6 36) || 36 / 6 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (6 * (6 / 6)) = 24",
                "6 * 6 = 36 (left: 4 6 36) || 36 / 6 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (6 * (6 / 6)) = 24",
                "6 - 4 = 2 (left: 2 6 6)",
                "6 - 4 = 2 (left: 2 6 6) || 3 + 6 = 9 (left: 9)",
                "6 * 6 = 36 (left: 4 6 36) || 36 / 6 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (6 + (6 * 6)) = 24",
                "6 + 4 = 10 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "6 * 6 = 36 (left: 4 6 36) || 36 / 6 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (6 * (6 / 6)) = 24",
                "6 - 4 = 2 (left: 2 6 6) || 3 + 6 = 9 (left: 9)"
            ]
        },
        "Input": "4 6 6 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "99": {
        "puzzle": "5 5 7 7",
        "Step 0": {
            "steps": [
                "7 - 5 = 2 (left: 2 7 7)",
                "5 / 5 = 1 (left: 1 7 7)",
                "7 - 5 = 2 (left: 2 7 7)",
                "7 - 5 = 2 (left: 2 7 7)",
                "7 - 5 = 2 (left: 2 7 7)",
                "7 / 5 = 1.4 (left: 5 7 1.4)",
                "5 * 5 = 25 (left: 7 7 25)",
                "7 - 5 = 2 (left: 2 7 7)",
                "7 / 5 = 1.4 (left: 1.",
                "7 + 5 = 12 (left: 5 7 12)"
            ],
            "Evaluation": [
                1.002,
                2.001,
                3.0,
                0.003,
                3.0,
                2.001,
                20.002,
                1.002,
                0.0,
                21.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.9",
                "2 <- 0.6",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 0.9"
            ]
        },
        "Step 1": {
            "steps": [
                "5 / 5 = 1 (left: 1 7 7)",
                "7 + 5 = 12 (left: 5 7 12) || 7 / 5 = 1.4 (left: 1.4 12)",
                "5 * 5 = 25 (left: 7 7 25) || 25 - 7 = 18 (left: 7 18)",
                "7 + 5 = 12 (left: 5 7 12)",
                "5 * 7 = 35 (left: 7 7 35)",
                "5 * 7 = 35 (left: 7 7 35)",
                "7 + 5 = 12 (left: 5 7 12)",
                "7 / 5 = 1.4 (left: 1.",
                "7 + 5 = 12 (left: 5 7 12)",
                "7 + 5 = 12 (left: 5 7 12) || 7 / 5 = 1.4 (left: 1.4 12)"
            ],
            "Evaluation": [
                2.001,
                0.002,
                0.002,
                21.001,
                3.0,
                1.001,
                21.001,
                0.0,
                21.001,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.3",
                "2 <- 1.8",
                "3 <- 1.3",
                "4 <- INIT",
                "5 <- 0.1",
                "6 <- 1.6",
                "7 <- 1.3",
                "8 <- 1.6",
                "9 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "5 / 5 = 1 (left: 1 7 7)",
                "7 + 5 = 12 (left: 5 7 12) || 7 / 5 = 1.4 (left: 1.4 12)",
                "7 + 5 = 12 (left: 5 7 12) || 7 / 5 = 1.4 (left: 1.4 12)",
                "7 + 5 = 12 (left: 5 7 12) || 5 * 7 = 35 (left: 35 12)",
                "5 * 7 = 35 (left: 7 7 35)",
                "5 / 5 = 1 (left: 1 7 7) || 7 / 1 = 7 (left: 7 7 7)",
                "7 + 5 = 12 (left: 5 7 12) || 5 * 7 = 35 (left: 35 12)",
                "7 + 5 = 12 (left: 5 7 12) || 12 / 5 = 2.4 (left: 2.4 12)",
                "7 + 5 = 12 (left: 5 7 12) || 5 * 7 = 35 (left: 35 12)",
                "7 + 5 = 12 (left: 5 7 12) || 7 / 5 = 1.4 (left: 1.4 12)"
            ],
            "Evaluation": [
                2.001,
                0.002,
                0.002,
                0.001,
                1.001,
                3.0,
                0.001,
                1.002,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 0.6",
                "2 <- 2.5",
                "3 <- 2.5",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 0.9",
                "8 <- 0.2",
                "9 <- 1.8"
            ]
        },
        "Step 3": {
            "steps": [
                "5 * 5 = 25 (left: 7 7 25) || 7 * 7 = 49 (left: 49 25)",
                "5 * 5 = 25 (left: 7 7 25) || 25 - 7 = 18 (left: 7 18)",
                "5 / 5 = 1 (left: 1 7 7) || 7 / 1 = 7 (left: 7 7 7) || 7 / 7 = 1 (left: 1 7)",
                "5 / 5 = 1 (left: 1 7 7) || 7 / 1 = 7 (left: 7 7 7) || 7 / 7 = 1 (left: 1 7)",
                "5 * 7 = 35 (left: 7 7 35)",
                "5 * 7 = 35 (left: 7 7 35)",
                "7 + 5 = 12 (left: 5 7 12)",
                "7 + 5 = 12 (left: 5 7 12) || 12 / 5 = 2.4 (left: 2.4 12)",
                "7 - 5 = 2 (left: 2 7 7) || 7 - 2 = 5 (left: 5 7)",
                "7 + 5 = 12 (left: 5 7 12) || 7 / 5 = 1.4 (left: 1.4 12)"
            ],
            "Evaluation": [
                41.0,
                0.002,
                20.0,
                20.0,
                1.001,
                1.001,
                21.001,
                1.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 3.5",
                "2 <- 1.3",
                "3 <- 1.3",
                "4 <- 1.3",
                "5 <- INIT",
                "6 <- 3.0",
                "7 <- 3.6",
                "8 <- 2.5",
                "9 <- 0.6"
            ]
        },
        "Step 4": {
            "steps": [
                "7 - 5 = 2 (left: 2 7 7) || 7 / 2 = 3.5 (left: 3.5 7)",
                "5 * 7 = 35 (left: 7 7 35) || 49 / 49 = 1 (left:",
                "7 + 5 = 12 (left: 5 7 12) || 7 / 5 = 1.4 (left: 1.4 12)",
                "7 + 5 = 12 (left: 5 7 12) || 5 * 7 = 35 (left: 35 12)",
                "7 + 5 = 12 (left: 5 7 12) || 7 / 5 = 1.4 (left: 1.4 12)",
                "5 * 7 = 35 (left: 7 7 35)",
                "5 * 5 = 25 (left: 7 7 25) || 7 * 7 = 49 (left: 49 25) || 49 / 25 = 1.96 (left: 1.96)",
                "7 + 5 = 12 (left: 5 7 12) || 12 / 5 = 2.4 (left: 2.4 12)",
                "5 / 5 = 1 (left: 1 7 7) || 7 / 1 = 7 (left: 7 7 7) || 7 / 7 = 1 (left: 1 7)",
                "5 * 5 = 25 (left: 7 7 25) || 25 - 7 = 18 (left: 7 18)"
            ],
            "Evaluation": [
                1.001,
                0.002,
                0.002,
                0.001,
                0.002,
                1.001,
                0.003,
                1.002,
                20.0,
                0.002
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 3.2",
                "2 <- 3.6",
                "3 <- 3.0",
                "4 <- 0.6",
                "5 <- 2.5",
                "6 <- 3.0",
                "7 <- 0.9",
                "8 <- 4.0",
                "9 <- 0.9"
            ]
        },
        "Step 5": {
            "steps": [
                "5 * 5 = 25 (left: 7 7 25) || 7 * 7 = 49 (left: 49 25) || 49 - 25 = 24 (left: 24)",
                "5 / 5 = 1 (left: 1 7 7) || 7 / 1 = 7 (left: 7 7 7) || 7 / 7 = 1 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "7 + 5 = 12 (left: 5 7 12) || 7 / 5 = 1.4 (left: 1.4 12)",
                "5 * 5 = 25 (left: 7 7 25) || 7 * 7 = 49 (left: 49 25) || 49 / 25 = 1.96 (left: 1.96)",
                "5 * 5 = 25 (left: 7 7 25) || 25 - 7 = 18 (left: 7 18)",
                "5 / 5 = 1 (left: 1 7 7) || 7 / 1 = 7 (left: 7 7 7) || 7 / 7 = 1 (left: 1 7)",
                "5 * 5 = 25 (left: 7 7 25) || 7 * 7 = 49 (left: 49 25) || 49 / 25 = 1.96 (left: 1.96)",
                "7 + 5 = 12 (left: 5 7 12) || 12 / 5 = 2.4 (left: 2.4 12)",
                "7 - 5 = 2 (left: 2 7 7) || 7 / 2 = 3.5 (left: 3.5 7) || 7 - 3.5 = 3.5 (left: 3.5)",
                "7 + 5 = 12 (left: 5 7 12) || 7 / 5 = 1.4 (left: 1.4 12)"
            ],
            "Evaluation": [
                60.0,
                0.001,
                0.002,
                0.003,
                0.002,
                20.0,
                0.003,
                1.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- 3.3",
                "4 <- 5.0",
                "5 <- 1.8",
                "6 <- 3.3",
                "7 <- 3.6",
                "8 <- 5.0",
                "9 <- 1.3"
            ]
        },
        "Step 6": {
            "steps": [
                "5 / 5 = 1 (left: 1 7 7) || 1 + 7 = 8 (left: 7 7 8)",
                "5 * 7 = 35 (left: 7 7 35)",
                "5 / 5 = 1 (left: 1 7 7) || 7 / 1 = 7 (left: 7 7 7)",
                "5 / 5 = 1 (left: 1 7 7) || 7 / 1 = 7 (left: 7 7 7) || 7 / 7 = 1 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "5 * 5 = 25 (left: 7 7 25) || 7 * 7 = 49 (left: 49 25) || 49 - 25 = 24 (left: 24) || Answer: (5 * 5) + (7 * 7) = 24",
                "7 + 5 = 12 (left: 5 7 12) || 7 / 5 = 1.4 (left: 1.4 12)",
                "5 / 5 = 1 (left: 1 7 7) || 7 / 1 = 7 (left: 7 7 7) || 7 / 7 = 1 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "7 + 5 = 12 (left: 5 7 12) || 12 / 5 = 2.4 (left: 2.4 12)",
                "5 * 5 = 25 (left: 7 7 25) || 7 * 7 = 49 (left: 49 25) || 49 - 25 = 24 (left: 24) || Answer: (5 * 5) - (7 * 7) = 24",
                "7 + 5 = 12 (left: 5 7 12) || 7 / 5 = 1.4 (left: 1.4 12)"
            ],
            "Evaluation": [
                2.001,
                1.001,
                3.0,
                0.003,
                0.003,
                0.002,
                0.003,
                1.002,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 5.5",
                "1 <- 6.8",
                "2 <- 3.3",
                "3 <- 5.0",
                "4 <- 5.5",
                "5 <- 3.6",
                "6 <- 0.6",
                "7 <- 3.0",
                "8 <- 6.8",
                "9 <- 3.3"
            ]
        },
        "Step 7": {
            "steps": [
                "5 / 5 = 1 (left: 1 7 7) || 7 / 1 = 7 (left: 7 7 7) || 7 / 7 = 1 (left: 1 7) || 1 + 7 = 8 (left: 8)",
                "5 * 5 = 25 (left: 7 7 25) || 7 * 7 = 49 (left: 49 25) || 49 - 25 = 24 (left: 24) || Answer: (5 * 5) - (7 * 7) = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n3 + 6 = 9 (left: 9)\n9 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (3 + 6) = 24",
                "5 / 5 = 1 (left: 1 7 7) || 7 / 1 = 7 (left: 7 7 7) || 7 / 7 = 1 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "5 * 5 = 25 (left: 7 7 25) || 7 * 7 = 49 (left: 49 25) || 49 - 25 = 24 (left: 24) || Answer: (5 * 5) - (7 * 7) = 24",
                "5 / 5 = 1 (left: 1 7 7) || 7 / 1 = 7 (left: 7 7 7) || 7 / 7 = 1 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "7 + 5 = 12 (left: 5 7 12) || 7 / 5 = 1.4 (left: 1.4 12)",
                "5 * 5 = 25 (left: 7 7 25) || 7 / 7 = 1 (left: 1 7 25)",
                "5 * 5 = 25 (left: 7 7 25) || 7 * 7 = 49 (left: 49 25) || 49 / 25 = 1.96 (left: 1.96)",
                "5 * 5 = 25 (left: 7 7 25) || 7 * 7 = 49 (left: 49 25) || 49 - 25 = 24 (left: 24) || Answer: (5 * 5) - (7 * 7) = 24 || Input: 3 3 7 8\nSteps:\n3 + 7 = 10 (left: 3 8 10)\n3 * 8 = 24 (left: 10 24)\nAnswer: 3 * (3 + 7) * 8 = 24",
                "5 / 5 = 1 (left: 1 7 7) || 7 / 1 = 7 (left: 7 7 7) || 7 / 7 = 1 (left: 1 7) || 7 / 1 = 7 (left: 7)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.001,
                60.0,
                0.001,
                0.002,
                2.001,
                0.003,
                60.0,
                0.001
            ],
            "Resampling": [
                "0 <- 6.8",
                "1 <- 5.5",
                "2 <- 7.1",
                "3 <- 1.3",
                "4 <- 3.7",
                "5 <- 6.2",
                "6 <- 6.8",
                "7 <- 7.8",
                "8 <- 5.0",
                "9 <- 7.8"
            ]
        },
        "Step 8": {
            "steps": [
                "5 * 5 = 25 (left: 7 7 25) || 7 * 7 = 49 (left: 49 25) || 49 - 25 = 24 (left: 24) || Answer: (5 * 5) - (7 * 7) = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n3 + 6 = 9 (left: 9)\n9 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (3 + 6) = 24",
                "5 / 5 = 1 (left: 1 7 7) || 7 / 1 = 7 (left: 7 7 7) || 7 / 7 = 1 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "5 * 5 = 25 (left: 7 7 25) || 7 * 7 = 49 (left: 49 25) || 49 - 25 = 24 (left: 24) || Answer: (5 * 5) - (7 * 7) = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n3 + 6 = 9 (left: 9)\n9 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (3 + 6) = 24 || Input: 2 3 5 7\nSteps:\n5 - 3 = 2 (left: 2 7)\n7 * 2 = 14 (left: 14)\n2 * 14 = 28 (left: 28)\n28 - 4 = 24 (left: 24)\nAnswer: ((5 - 3) * 7) - 4 = 24",
                "7 + 5 = 12 (left: 5 7 12) || 5 * 7 = 35 (left: 35 12)",
                "7 + 5 = 12 (left: 5 7 12) || 12 / 5 = 2.4 (left: 2.4 12) || 12 - 2.4 = 9.6 (left: 9.6)",
                "5 / 5 = 1 (left: 1 7 7) || 7 / 1 = 7 (left: 7 7 7) || 7 / 7 = 1 (left: 1 7)",
                "5 * 5 = 25 (left: 7 7 25) || 7 * 7 = 49 (left: 49 25) || 49 - 25 = 24 (left: 24) || Answer: (5 * 5) - (7 * 7) = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n3 + 6 = 9 (left: 9)\n9 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (3 + 6) = 24",
                "5 * 5 = 25 (left: 7 7 25) || 7 * 7 = 49 (left: 49 25) || 49 - 25 = 24 (left: 24) || Answer: (5 * 5) - (7 * 7) = 24 || Input: 3 3 7 8\nSteps:\n3 + 7 = 10 (left: 3 8 10)\n3 * 8 = 24 (left: 10 24)\nAnswer: 3 * (3 + 7) * 8 = 24 || Input: 6 6 6 6\nSteps:\n6 * 6 = 36 (left: 6 6 36)\n6 - 6 = 0 (left: 0 36)\n0 + 36 = 36 (left: 36)\nAnswer: (6 * 6) - (6 + 6) = 24",
                "5 * 5 = 25 (left: 7 7 25) || 7 * 7 = 49 (left: 49 25) || 49 - 25 = 24 (left: 24) || Answer: (5 * 5) - (7 * 7) = 24",
                "5 * 5 = 25 (left: 7 7 25) || 7 * 7 = 49 (left: 49 25) || 49 - 25 = 24 (left: 24) || Answer: (5 * 5) - (7 * 7) = 24 || Input: 3 3 7 8\nSteps:\n3 + 7 = 10 (left: 3 8 10)\n3 * 8 = 24 (left: 10 24)\nAnswer: 3 * (3 + 7) * 8 = 24 || Input: 6 6 7 8\nSteps:\n6 + 8 = 14 (left: 6 7 14)\n6 + 7 = 13 (left: 13 14)\n13 * 14 = 182 (left: 182)\n182 / 8 = 22.75 (left: 22.75)\n22.75 + 6 = 28.75 (left: 28.75)\n28.75 - 6"
            ],
            "Evaluation": [
                60.0,
                0.001,
                60.0,
                0.001,
                0.002,
                20.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 8.7",
                "2 <- 3.2",
                "3 <- 8.6",
                "4 <- 7.1",
                "5 <- 8.0",
                "6 <- 7.8",
                "7 <- 8.9",
                "8 <- 8.2",
                "9 <- 7.8"
            ]
        },
        "Step 9": {
            "steps": [
                "5 * 5 = 25 (left: 7 7 25) || 7 * 7 = 49 (left: 49 25) || 49 - 25 = 24 (left: 24) || Answer: (5 * 5) - (7 * 7) = 24",
                "5 * 5 = 25 (left: 7 7 25) || 7 * 7 = 49 (left: 49 25) || 49 - 25 = 24 (left: 24) || Answer: (5 * 5) - (7 * 7) = 24 || Input: 3 3 7 8\nSteps:\n3 + 7 = 10 (left: 3 8 10)\n3 * 8 = 24 (left: 10 24)\nAnswer: 3 * (3 + 7) * 8 = 24 || Input: 6 6 6 6\nSteps:\n6 * 6 = 36 (left: 6 6 36)\n6 - 6 = 0 (left: 0 36)\n0 + 36 = 36 (left: 36)\nAnswer: (6 * 6) - (6 + 6) = 24 || Input: 2 2 6 9\nSteps:\n2 * 9 = 18 (left: 2 6 18)\n2 + 6 = 8 (left: 8 18)\n8 * 18 = 144 (left: 144)\n144 / 6 = 24 (left: 24)\nAnswer: ((2 * 9) * (2 + 6)) / 6 = 24",
                "5 / 5 = 1 (left: 1 7 7) || 7 / 1 = 7 (left: 7 7 7) || 7 / 7 = 1 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "5 * 5 = 25 (left: 7 7 25) || 7 * 7 = 49 (left: 49 25) || 49 - 25 = 24 (left: 24) || Answer: (5 * 5) - (7 * 7) = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n3 + 6 = 9 (left: 9)\n9 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (3 + 6) = 24 || Input: 2 3 5 7\nSteps:\n5 - 3 = 2 (left: 2 7)\n7 * 2 = 14 (left: 14)\n2 * 14 = 28 (left: 28)\n28 - 4 = 24 (left: 24)\nAnswer: ((5 - 3) * 7) - 4 = 24",
                "5 * 5 = 25 (left: 7 7 25) || 7 * 7 = 49 (left: 49 25) || 49 - 25 = 24 (left: 24) || Answer: (5 * 5) - (7 * 7) = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n3 + 6 = 9 (left: 9)\n9 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (3 + 6) = 24 || Input: 2 3 5 7\nSteps:\n5 - 3 = 2 (left: 2 7)\n7 * 2 = 14 (left: 14)\n2 * 14 = 28 (left: 28)\n28 - 4 = 24 (left: 24)\nAnswer: ((5 - 3) * 7) - 4 = 24",
                "5 * 5 = 25 (left: 7 7 25) || 7 * 7 = 49 (left: 49 25) || 49 - 25 = 24 (left: 24) || Answer: (5 * 5) - (7 * 7) = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n3 + 6 = 9 (left: 9)\n9 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (3 + 6) = 24 || Input: 2 3 5 7\nSteps:\n5 - 3 = 2 (left: 2 7)\n7 * 2 = 14 (left: 14)\n2 * 14 = 28 (left: 28)\n28 - 4 = 24 (left: 24)\nAnswer: ((5 - 3) * 7) - 4 = 24",
                "5 * 5 = 25 (left: 7 7 25) || 7 * 7 = 49 (left: 49 25) || 49 - 25 = 24 (left: 24) || Answer: (5 * 5) - (7 * 7) = 24 || Input: 3 3 7 8\nSteps:\n3 + 7 = 10 (left: 3 8 10)\n3 * 8 = 24 (left: 10 24)\nAnswer: 3 * (3 + 7) * 8 = 24 || Input: 6 6 7 8\nSteps:\n6 + 8 = 14 (left: 6 7 14)\n6 + 7 = 13 (left: 13 14)\n13 * 14 = 182 (left: 182)\n182 / 8 = 22.75 (left: 22.75)\n22.75 + 6 = 28.75 (left: 28.75)\n28.75 - 6",
                "5 * 5 = 25 (left: 7 7 25) || 7 * 7 = 49 (left: 49 25) || 49 - 25 = 24 (left: 24) || Answer: (5 * 5) - (7 * 7) = 24 || Input: 3 3 7 8\nSteps:\n3 + 7 = 10 (left: 3 8 10)\n3 * 8 = 24 (left: 10 24)\nAnswer: 3 * (3 + 7) * 8 = 24 || Input: 6 6 7 8\nSteps:\n6 + 8 = 14 (left: 6 7 14)\n6 + 7 = 13 (left: 13 14)\n13 * 14 = 182 (left: 182)\n182 / 8 = 22.75 (left: 22.75)\n22.75 + 6 = 28.75 (left: 28.75)\n28.75 - 6 || = 22.75 (left: 22.75)\n22.75 * 6 = 24 (left: 24)\nAnswer: ((6 + 8) * (6 + 7)) / 8 = 24",
                "5 * 5 = 25 (left: 7 7 25) || 7 * 7 = 49 (left: 49 25) || 49 - 25 = 24 (left: 24) || Answer: (5 * 5) - (7 * 7) = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n3 + 6 = 9 (left: 9)\n9 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (3 + 6) = 24 || Input: 2 3 5 7\nSteps:\n5 - 3 = 2 (left: 2 7)\n7 * 2 = 14 (left: 14)\n2 * 14 = 28 (left: 28)\n28 - 4 = 24 (left: 24)\nAnswer: ((5 - 3) * 7) - 4 = 24 || Input: 1 3 4 6\nSteps:\n1 + 6 = 7 (left: 3 4 7)\n4 * 3 = 12 (left: 7 12)\n12 - 7 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: ((1 + 6) * (4 * 3)) -",
                "5 * 5 = 25 (left: 7 7 25) || 7 * 7 = 49 (left: 49 25) || 49 - 25 = 24 (left: 24) || Answer: (5 * 5) - (7 * 7) = 24 || Input: 3 3 7 8\nSteps:\n3 + 7 = 10 (left: 3 8 10)\n3 * 8 = 24 (left: 10 24)\nAnswer: 3 * (3 + 7) * 8 = 24 || Input: 6 6 7 8\nSteps:\n6 + 8 = 14 (left: 6 7 14)\n6 + 7 = 13 (left: 13 14)\n13 * 14 = 182 (left: 182)\n182 / 8 = 22.75 (left: 22.75)\n22.75 + 6 = 28.75 (left: 28.75)\n28.75 - 6"
            ]
        },
        "Input": "5 5 7 7",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    }
}