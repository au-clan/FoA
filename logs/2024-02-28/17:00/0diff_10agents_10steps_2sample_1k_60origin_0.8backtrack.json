{
    "0": {
        "puzzle": "1 1 4 6",
        "Step 0": {
            "steps": [
                "6 - 4 = 2 (left: 1 2 6)",
                "1 * 1 = 1 (left: 1 4 6)",
                "6 - 1 = 5 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 4 5)",
                "6 - 4 = 2 (left: 1 2 6)",
                "6 - 1 = 5 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 4 5)",
                "6 - 4 = 2 (left: 1 2 6)",
                "4 + 1 = 5 (left: 1 5 ",
                "6 - 4 = 2 (left: 1 2 6)"
            ],
            "Evaluation": [
                1.002,
                41.0,
                21.0,
                21.0,
                1.002,
                21.0,
                21.0,
                1.002,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 0.2",
                "2 <- 0.5",
                "3 <- 0.9",
                "4 <- 0.2",
                "5 <- 0.6",
                "6 <- 0.2",
                "7 <- INIT",
                "8 <- 0.6",
                "9 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "6 - 1 = 5 (left: 1 4 5) || 4 / 1 = 4 (left: 4 5)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 4 = 1 (left:",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "4 + 1 = 5 (left: 1 5 ",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)"
            ],
            "Evaluation": [
                3.0,
                0.002,
                0.002,
                60.0,
                0.002,
                0.001,
                0.003,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- INIT",
                "2 <- 1.3",
                "3 <- 0.5",
                "4 <- 1.3",
                "5 <- 0.6",
                "6 <- 0.2",
                "7 <- 1.3",
                "8 <- 0.1",
                "9 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "6 - 1 = 5 (left: 1 4 5)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 4 = 1 (left:",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)"
            ],
            "Evaluation": [
                0.0,
                21.0,
                0.002,
                0.003,
                0.002,
                0.001,
                0.003,
                0.002,
                2.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.5",
                "2 <- 0.6",
                "3 <- 0.1",
                "4 <- 0.2",
                "5 <- 0.3",
                "6 <- 1.3",
                "7 <- 0.3",
                "8 <- INIT",
                "9 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 4 = 1 (left:",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "6 - 1 = 5 (left: 1 4 5) || 4 - 1 = 3 (left: 3 5)",
                "6 - 4 = 2 (left: 1 2 6)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.002,
                2.0,
                0.002,
                0.001,
                0.002,
                1.001,
                1.002,
                0.002
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 1.3",
                "2 <- 3.3",
                "3 <- 0.0",
                "4 <- 0.1",
                "5 <- 1.3",
                "6 <- 0.3",
                "7 <- 1.3",
                "8 <- 2.1",
                "9 <- 1.3"
            ]
        },
        "Step 4": {
            "steps": [
                "6 - 1 = 5 (left: 1 4 5) || 4 / 1 = 4 (left: 4 5)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5) || 1 / 1.5 = 0.6666666666666666 (left: 0.6666666666666666)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                3.0,
                0.002,
                1.001,
                60.0,
                0.002,
                0.002,
                0.003,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 0.6",
                "2 <- 1.3",
                "3 <- 1.3",
                "4 <- 0.3",
                "5 <- 0.1",
                "6 <- 4.3",
                "7 <- 2.1",
                "8 <- 0.9",
                "9 <- 3.7"
            ]
        },
        "Step 5": {
            "steps": [
                "6 - 1 = 5 (left: 1 4 5) || 4 / 1 = 4 (left: 4 5) || 4 * 5 = 20 (left: 20)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "1 * 1 = 1 (left: 1 4 6) || Input: 3 9",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "6 - 1 = 5 (left: 1 4 5) || 4 - 1 = 3 (left: 3 5)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4)",
                "6 - 1 = 5 (left: 1 4 5) || 4 - 1 = 3 (left: 3 5) || 10 + 2 = 12 (left: 12)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.002,
                0.002,
                0.003,
                0.002,
                1.001,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 5.8",
                "1 <- 0.6",
                "2 <- 1.3",
                "3 <- INIT",
                "4 <- 0.5",
                "5 <- 1.0",
                "6 <- 1.3",
                "7 <- 5.8",
                "8 <- 4.3",
                "9 <- 1.0"
            ]
        },
        "Step 6": {
            "steps": [
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "6 - 4 = 2 (left: 1 2 6)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "6 - 1 = 5 (left: 1 4 5) || 4 / 1 = 4 (left: 4 5) || 5 / 4 = 1.25 (left: 1.25)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "6 - 1 = 5 (left: 1 4 5) || 4 / 1 = 4 (left: 4 5) || 5 / 4 = 1.25 (left: 1.25)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.002,
                1.002,
                0.002,
                0.002,
                0.002,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.1",
                "2 <- 2.1",
                "3 <- 0.1",
                "4 <- 0.1",
                "5 <- 2.1",
                "6 <- 0.6",
                "7 <- 5.8",
                "8 <- 4.3",
                "9 <- 5.8"
            ]
        },
        "Step 7": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 4 = 1 (left:",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                41.0,
                0.002,
                0.002,
                2.0,
                0.002,
                0.001,
                0.003,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 5.8",
                "1 <- 7.0",
                "2 <- 4.3",
                "3 <- 4.3",
                "4 <- 5.8",
                "5 <- 7.0",
                "6 <- 4.3",
                "7 <- INIT",
                "8 <- 1.3",
                "9 <- 7.0"
            ]
        },
        "Step 8": {
            "steps": [
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 4 6) || Input: 3 9",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "4 + 1 = 5 (left: 1 5 ",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.002,
                0.002,
                0.002,
                0.003,
                0.002,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 7.0",
                "1 <- 7.0",
                "2 <- 4.3",
                "3 <- 4.3",
                "4 <- 7.0",
                "5 <- 7.3",
                "6 <- 5.8",
                "7 <- 5.8",
                "8 <- 0.2",
                "9 <- 0.1"
            ]
        },
        "Step 9": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5) || 1 / 1.5 = 0.6666666666666666 (left: 0.6666666666666666)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)"
            ]
        },
        "Input": "1 1 4 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1": {
        "puzzle": "1 1 11 11",
        "Step 0": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 11 11)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12)",
                "11 / 1 = 11 (left: 1 11 ",
                "11 + 1 = 12 (left: 1 11 12)"
            ],
            "Evaluation": [
                20.002,
                1.002,
                1.002,
                1.002,
                20.002,
                1.002,
                1.002,
                20.002,
                0.001,
                20.002
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.9",
                "4 <- INIT",
                "5 <- 0.0",
                "6 <- 0.7",
                "7 <- INIT",
                "8 <- 0.2",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 / 1 = 11 (left: 1 11 ",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 10 11 11)",
                "11 * 1 = 11 (left: 1 11 11)"
            ],
            "Evaluation": [
                0.002,
                1.002,
                1.002,
                0.002,
                1.002,
                20.002,
                0.002,
                0.001,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 0.3",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.1",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 0.4",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 10 11 11)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 10 11 11)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12)",
                "11 * 1 = 11 (left: 1 11 11)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                1.002,
                20.002,
                1.002,
                1.002,
                20.002,
                0.002,
                20.002,
                1.002
            ],
            "Resampling": [
                "0 <- 2.8",
                "1 <- 0.0",
                "2 <- 0.9",
                "3 <- 2.8",
                "4 <- 2.3",
                "5 <- 0.7",
                "6 <- INIT",
                "7 <- 0.7",
                "8 <- 0.7",
                "9 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 * 1 = 11 (left: 1 11 11)"
            ],
            "Evaluation": [
                0.002,
                20.002,
                20.002,
                0.002,
                20.002,
                20.002,
                20.002,
                0.002,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 3.6",
                "2 <- 3.2",
                "3 <- 3.5",
                "4 <- 1.5",
                "5 <- 2.8",
                "6 <- 3.6",
                "7 <- 2.3",
                "8 <- 3.5",
                "9 <- 3.2"
            ]
        },
        "Step 4": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                20.002,
                0.002,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 4.5",
                "2 <- 4.1",
                "3 <- 2.3",
                "4 <- 3.5",
                "5 <- 3.6",
                "6 <- 4.5",
                "7 <- 0.6",
                "8 <- 3.5",
                "9 <- 2.8"
            ]
        },
        "Step 5": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 * 1 = 11 (left: 1 11 11) || 11 / 1 = 11 (left: 11 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.002,
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 2.6",
                "2 <- 3.1",
                "3 <- 0.4",
                "4 <- 3.1",
                "5 <- 3.1",
                "6 <- 5.5",
                "7 <- 3.6",
                "8 <- 3.4",
                "9 <- INIT"
            ]
        },
        "Step 6": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 * 1 = 11 (left: 1 11 11)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 3.6",
                "2 <- 3.2",
                "3 <- 6.1",
                "4 <- 6.1",
                "5 <- 5.5",
                "6 <- 4.1",
                "7 <- 4.5",
                "8 <- 0.0",
                "9 <- 5.9"
            ]
        },
        "Step 7": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 7.1",
                "2 <- 2.8",
                "3 <- 3.2",
                "4 <- 5.5",
                "5 <- 7.1",
                "6 <- 4.1",
                "7 <- 3.1",
                "8 <- 3.5",
                "9 <- 7.1"
            ]
        },
        "Step 8": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 6.1",
                "2 <- 8.2",
                "3 <- 3.5",
                "4 <- 8.2",
                "5 <- 4.1",
                "6 <- 6.1",
                "7 <- 6.1",
                "8 <- 4.1",
                "9 <- 5.5"
            ]
        },
        "Step 9": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ]
        },
        "Input": "1 1 11 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    }
}