{
    "0": {
        "puzzle": "1 1 4 6",
        "Step 0": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6)",
                "6 - 1 = 5 (left: 1 4 5)",
                "4 + 1 = 5 (left: 1 5 6)",
                "6 - 4 = 2 (left: 1 2 6)",
                "6 - 1 = 5 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 4 5)",
                "6 - 4 = 2 (left: 1 2 6)",
                "4 * 1 = 4 (left: ",
                "6 - 4 = 2 (left: 1 2 6)",
                "6 - 1 = 5 (left: 1 4 5)"
            ],
            "Evaluation": [
                41.0,
                21.0,
                0.002,
                1.002,
                1.002,
                1.002,
                0.003,
                0.0,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.1",
                "2 <- 0.1",
                "3 <- INIT",
                "4 <- 0.0",
                "5 <- 0.5",
                "6 <- 0.0",
                "7 <- INIT",
                "8 <- 0.0",
                "9 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 5 5)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 1 = 4 (left: 4 5)",
                "6 - 1 = 5 (left: 1 4 5) || 4 / 1 = 4 (left: 4 5)",
                "6 - 1 = 5 (left: 1 4 5)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "6 - 1 = 5 (left: 1 4 5) || 1 + 4 = 5 (left: 5 5)",
                "1 * 1 = 1 (left: 1 4 6) || 1 + 4 = 5 (left: 5 6)",
                "1 + 1 = 2 (left: 2 4 6)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6)"
            ],
            "Evaluation": [
                0.002,
                3.0,
                2.001,
                2.001,
                2.0,
                0.002,
                0.003,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 1.8",
                "2 <- 1.8",
                "3 <- 1.8",
                "4 <- 0.0",
                "5 <- 1.9",
                "6 <- 1.9",
                "7 <- 1.8",
                "8 <- 0.0",
                "9 <- 1.8"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 + 24 = 25 (left: 24 25)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "1 * 1 = 1 (left: 1 4 6) || Possible next steps:",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.002,
                0.003,
                0.002,
                0.002,
                60.0,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.7",
                "1 <- 2.7",
                "2 <- 2.7",
                "3 <- 1.9",
                "4 <- 2.7",
                "5 <- 2.7",
                "6 <- 0.0",
                "7 <- INIT",
                "8 <- 2.7",
                "9 <- 2.7"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 * 1) * (4 * 6) = 24",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 * 1) * (4 * 6) = 24",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 * 1) * (4 * 6) = 24",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 * 1) * (4 * 6) = 24",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 * 1) * (4 * 6) = 24",
                "1 * 1 = 1 (left: 1 4 6) || 1 + 4 = 5 (left: 5 6)",
                "6 / 4 = 1.5 (left: 1 1.5 6)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: 1 * (1 * 4) * 6 = 24",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: 1 * (1 * 4 * 6) = 24"
            ]
        },
        "Input": "1 1 4 6",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            }
        ]
    },
    "1": {
        "puzzle": "1 1 11 11",
        "Step 0": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11)",
                "1 * 1 = 1 (left: 1 11 11)",
                "11 - 1 = 10 (left: 1 10 11)",
                "11 / 1 = 11 (left: 1 11 ",
                "11 - 1 = 10 (left: 1 11 10)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 - 1 = 10 (left: 1 10 11)",
                "11 - 1 = 10 (left: 1 11 10)",
                "11 - 1 = 10 (left: 1 10 11)",
                "11 + 1 = 12 (left: 1 11 12)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                0.001,
                0.003,
                0.002,
                0.003,
                1.002,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.9",
                "4 <- 0.9",
                "5 <- INIT",
                "6 <- 0.9",
                "7 <- INIT",
                "8 <- 0.9",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "11 - 1 = 10 (left: 1 10 11)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11)",
                "1 - 1 = 0 (left: 0 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 12 / 1 = 12 (left: 1 12)",
                "1 + 1 = 2 (left: 2 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || Input: 5 5 10",
                "1 * 1 = 1 (left: 1 11 11)"
            ],
            "Evaluation": [
                0.002,
                1.002,
                0.003,
                20.002,
                40.0,
                0.003,
                0.002,
                0.003,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- INIT",
                "2 <- 1.4",
                "3 <- 1.9",
                "4 <- 1.4",
                "5 <- 1.4",
                "6 <- 1.4",
                "7 <- 0.9",
                "8 <- 1.9",
                "9 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "11 / 1 = 11 (left: 1 11 ",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 10 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 9 * 3 = 27 (left: 27 27)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 1 + 11 = 12",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "11 + 1 = 12 (left: 1 11 12) || 12 / 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.003,
                40.0,
                0.001,
                0.003,
                0.003,
                0.003,
                0.002,
                0.001,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 2.1",
                "2 <- 2.8",
                "3 <- 1.4",
                "4 <- 2.8",
                "5 <- 2.8",
                "6 <- 2.8",
                "7 <- 2.1",
                "8 <- 2.8",
                "9 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 / 1 = 11 (left: 1 11  || 1 + 11 = 12 (left: 12)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 3 + 6 = 9 (left: 9)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 3 + 5 = 8 (left: 7 8)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 + 10 = 11 (left: 10)",
                "11 / 1 = 11 (left: 1 11  || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "11 / 1 = 11 (left: 1 11  || 11 - 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.001,
                21.001,
                0.002,
                0.002,
                0.003,
                0.002,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 2.8",
                "2 <- 1.4",
                "3 <- 2.8",
                "4 <- 2.8",
                "5 <- 3.3",
                "6 <- 1.9",
                "7 <- 3.3",
                "8 <- 2.8",
                "9 <- 3.3"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 10 11 11)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 1 + 11 = 12",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 3 + 5 = 8 (left: 7 8) || 7 * 8 = 56 (left: 56)",
                "1 * 1 = 1 (left: 1 11 11) || 11 / 1 = 11 (left: 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 3 + 5 = 8 (left: 7 8) || 7 + 8 = 15 (left: 15)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 3 + 5 = 8 (left: 7 8) || 7 / 8 = 0.875 (left: 0.875)"
            ],
            "Evaluation": [
                1.002,
                0.002,
                0.003,
                0.002,
                0.002,
                0.003,
                0.0,
                60.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 4.7",
                "1 <- 4.8",
                "2 <- 4.8",
                "3 <- 4.8",
                "4 <- 4.7",
                "5 <- 4.7",
                "6 <- 4.7",
                "7 <- 4.7",
                "8 <- 4.7",
                "9 <- 2.8"
            ]
        },
        "Step 5": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "11 + 1 = 12 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1) ",
                "11 + 1 = 12 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "11 + 1 = 12 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 + 1 = 12 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 + 1 = 12 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                60.0,
                0.003,
                0.003,
                0.003,
                40.001,
                40.001,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.8",
                "1 <- 5.8",
                "2 <- 5.8",
                "3 <- 5.7",
                "4 <- 4.8",
                "5 <- 5.8",
                "6 <- 5.8",
                "7 <- 5.0",
                "8 <- 5.6",
                "9 <- 1.4"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((11 + 1) + 1) + 11 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((1 + 11) + (1 + 11)) = 24",
                "11 + 1 = 12 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24)",
                "11 + 1 = 12 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 + 1 = 12 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((11 + 1) + 11) + 1 = 24",
                "11 + 1 = 12 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (11 + 1) + (1 + 11) = 24",
                "11 + 1 = 12 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (11 + 1) * (1 + 11) = 24",
                "11 + 1 = 12 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)"
            ]
        },
        "Input": "1 1 11 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "2": {
        "puzzle": "1 1 3 8",
        "Step 0": {
            "steps": [
                "3 + 1 = 4 (left: 4 3 8)",
                "8 - 3 = 5 (left: 1 1 5)",
                "8 - 3 = 5 (left: 1 3 5)",
                "1 + 1 = 2 (left: 2 3 8)",
                "3 * 1 = 3 (left: 3 1 8)",
                "1 + 1 = 2 (left: 2 3 8)",
                "3 + 1 = 4 (left: 1 4 8)",
                "1 * 1 = 1 (left: 1 3 8)",
                "3 + 1 = 4 (left: 1 4 8)",
                ""
            ],
            "Evaluation": [
                2.0,
                2.001,
                1.002,
                2.001,
                60.0,
                2.001,
                0.003,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 0.7",
                "2 <- 0.7",
                "3 <- 0.4",
                "4 <- 0.4",
                "5 <- 0.4",
                "6 <- 0.4",
                "7 <- INIT",
                "8 <- 0.7",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "1 * 1 = 1 (left: 1 3 8) || 8 - 1 = ",
                "1 * 1 = 1 (left: 1 3 8) || 8 - 1 = 7 (left: 3 7)",
                "3 * 1 = 3 (left: 3 1 8) || 1 * 3 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 3 1 8) || 8 - 3 = 5 (left: 5 8)",
                "3 * 1 = 3 (left: 3 1 8) || 1 + 8 = 9 (left: 3 9)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 2 3 8)",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24)",
                "1 + 1 = 2 (left: 2 3 8)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.0,
                60.0,
                0.003,
                0.003,
                60.0,
                2.001,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 1.8",
                "2 <- 1.8",
                "3 <- 1.6",
                "4 <- 1.6",
                "5 <- 0.4",
                "6 <- 0.7",
                "7 <- 1.6",
                "8 <- 0.7",
                "9 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24 24)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || Input: 5 10",
                "3 * 1 = 3 (left: 3 1 8) || 8 - 1 = 7 (left: 3 7)",
                "1 * 1 = 1 (left: 1 3 8) || 1 + 3 = 4 (left: 4 8)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 3 8) || 1 + 3 = 4 (left: 4 8)",
                "3 * 1 = 3 (left: 3 1 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2 (left: 2)"
            ],
            "Evaluation": [
                60.0,
                20.001,
                60.0,
                0.003,
                0.003,
                1.001,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 0.4",
                "2 <- 1.6",
                "3 <- 2.0",
                "4 <- 1.6",
                "5 <- 0.7",
                "6 <- 1.6",
                "7 <- 1.6",
                "8 <- 0.4",
                "9 <- 1.8"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23) || 23 / 2 = 11.5 (left: 2)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 4 + 6 = 10 (left: 9 10)",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: 1 * (1 * 3) * 8 = 24",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "3 * 1 = 3 (left: 3 1 8) || 3 * 1 = 3 (left: 3 8)",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)"
            ]
        },
        "Input": "1 1 3 8",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "3": {
        "puzzle": "1 1 1 8",
        "Step 0": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 ",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 * 1 = 1 (left: 1 1 8)",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 + 8 = 9 (left: 1 1 9)",
                "8 / 1 = 8 (left: 1 1 8)",
                "1 * 1 = 1 (left: 1 1 8)",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 * 1 = 1 (left: 1 1 8)",
                "1 + 1 = 2 (left: 1 2 8)"
            ],
            "Evaluation": [
                0.003,
                22.0,
                1.001,
                60.0,
                0.001,
                1.002,
                1.001,
                22.0,
                22.0,
                21.001
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 0.9",
                "2 <- 0.3",
                "3 <- 0.9",
                "4 <- 0.9",
                "5 <- 0.7",
                "6 <- 0.7",
                "7 <- 0.3",
                "8 <- 0.7",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 8) || Input: 5 5 10",
                "1 + 1 = 2 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)",
                "1 + 1 = 2 (left: 1 2 8) || 2 - 1 = 1 (left: 1 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8) || 3 + 5 = 8 (left:",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "1 + 1 = 2 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)",
                "1 + 1 = 2 (left: 2 1 8)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                40.0,
                0.002,
                60.0,
                0.002,
                60.0,
                0.002,
                0.001,
                41.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.4",
                "2 <- 1.6",
                "3 <- 1.6",
                "4 <- 1.4",
                "5 <- 1.4",
                "6 <- 1.6",
                "7 <- 1.9",
                "8 <- 1.6",
                "9 <- 0.8"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || Input: 4 5 10",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 1 8) || 1 + 8 = 9 (left: 2 9)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.6667 (left: 2.6667)",
                "1 * 1 = 1 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.001,
                0.003,
                0.002,
                0.002,
                60.0,
                0.003,
                0.003,
                40.0
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 2.6",
                "3 <- 0.3",
                "4 <- 2.6",
                "5 <- 2.1",
                "6 <- 2.6",
                "7 <- 2.6",
                "8 <- 0.1",
                "9 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 1) * (1 + 8) = 24",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 1) * (1 + 8) = 24",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 1) * (1 + 8) = 24",
                "1 + 1 = 2 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 1) * (1 + 8) = 24",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: ((1 + 1) + 1) * 8 = 24",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 1) * (1 + 8) = 24",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 1) * (1 + 8) = 24",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 1) * (1 + 8) = 24"
            ]
        },
        "Input": "1 1 1 8",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            }
        ]
    },
    "4": {
        "puzzle": "6 6 6 6",
        "Step 0": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6)",
                "6 * 6 = 36 (left: 6 6 36 6)",
                "6 / 6 = 1 (left: 1 6 6)",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 / 6 = 1 (left: 1 6 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 / 6 = 1 (left: 1 6 6)"
            ],
            "Evaluation": [
                41.0,
                1.001,
                41.0,
                22.0,
                20.002,
                21.0,
                41.0,
                41.0,
                60.0,
                41.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.9",
                "2 <- 0.8",
                "3 <- 0.9",
                "4 <- 0.6",
                "5 <- 0.5",
                "6 <- 0.2",
                "7 <- 0.6",
                "8 <- INIT",
                "9 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6) || 6 * 12 = 72 (left: 72 6)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6)",
                "6 - 6 = 0 (left: 0 6 6) || 3 + 3 = 6 (left: 6 6)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 / 6 = 1 (left: 1 6 6) || 1 * 6 = 6 (left: 6 6)",
                "6 - 6 = 0 (left: 0 6 6) || Possible next steps",
                "6 + 6 = 12 (left: 6 6 12)",
                "6 / 6 = 1 (left: 1 6 6) || 6 + 1 = 7 (left: 6 7)"
            ],
            "Evaluation": [
                21.001,
                3.0,
                40.001,
                20.002,
                0.003,
                1.001,
                20.002,
                0.003,
                41.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.8",
                "2 <- 0.3",
                "3 <- 0.2",
                "4 <- 0.7",
                "5 <- 0.3",
                "6 <- 0.8",
                "7 <- INIT",
                "8 <- 0.8",
                "9 <- 1.8"
            ]
        },
        "Step 2": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 0 / 36 = 0 (left: 36)",
                "6 + 6 = 12 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12)",
                "6 + 6 = 12 (left: 6 12 6) || 6 * 12 = 72 (left: 72 6)",
                "6 / 6 = 1 (left: 1 6 6) || 1 + 6 = 7 (left: 6 7)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 6 36)",
                "6 + 6 = 12 (left: 6 12 6) || 6 * 12 = 72 (left:",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36)",
                "6 + 6 = 12 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                40.0,
                40.0,
                21.0,
                0.003,
                0.003,
                0.002,
                40.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.7",
                "2 <- 0.6",
                "3 <- 2.9",
                "4 <- 2.7",
                "5 <- 0.8",
                "6 <- 2.7",
                "7 <- 1.2",
                "8 <- 1.2",
                "9 <- 1.6"
            ]
        },
        "Step 3": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 0 / 36 = 0 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6)",
                "6 - 6 = 0 (left: 0 6 6) || 0 + 6 = 6 (left: 6 6)",
                "6 + 6 = 12 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 6 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 / 0 = undefined",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 0 * 36 = 0 (left: 0 36)",
                "6 / 6 = 1 (left: 1 6 6) || 1 * 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                40.001,
                0.002,
                20.001,
                0.003,
                60.0,
                0.003,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.8",
                "1 <- 2.9",
                "2 <- 1.6",
                "3 <- 2.9",
                "4 <- 3.6",
                "5 <- 2.7",
                "6 <- 3.6",
                "7 <- 2.8",
                "8 <- 3.6",
                "9 <- 1.0"
            ]
        },
        "Step 4": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "6 + 6 = 12 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "6 / 6 = 1 (left: 1 6 6) || 1 * 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) ",
                "6 + 6 = 12 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 36) || 36 + 2 = 38",
                "6 * 6 = 36 (left: 6 6 36) || Input: 3 9 27",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 36) || None - 36 is the final result.",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 + 36 = 37 (left: 37)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 36) || There are no possible next steps as there is only one number provided.",
                "6 + 6 = 12 (left: 6 12 6) || 6 * 12 = 72 (left: 72 6) || 72 - 6 = 66 (left: 66)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                20.0,
                0.003,
                0.003,
                40.001,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 4.5",
                "2 <- 2.0",
                "3 <- 2.0",
                "4 <- 3.6",
                "5 <- 4.1",
                "6 <- 2.8",
                "7 <- 4.1",
                "8 <- 4.2",
                "9 <- 1.3"
            ]
        },
        "Step 5": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 0 / 36 = 0 (left: 0 36)",
                "6 * 6 = 36 (left: 6 6 36) || Input: 3 9 27 || 9 - 3 = 6 (left: 6 27)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 0 / 36 = 0 (left: 36) || There are no possible operations to perform on the number 36.",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 0 / 36 = 0 (left: 36) || 36 / 6 = 6 (left: 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "6 + 6 = 12 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (6 + 6) + (6 + 6) = 24",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 + 36 = 37 (left: 37)",
                "6 + 6 = 12 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((6 + 6) + (6 + 6)) = 24",
                "6 / 6 = 1 (left: 1 6 6) || 1 * 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)  || 36 / 2 = 18",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)"
            ]
        },
        "Input": "6 6 6 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "5": {
        "puzzle": "1 1 2 12",
        "Step 0": {
            "steps": [
                "12 / 2 = 6 (left: 1 2 6)",
                "1 + 1 = 2 (left: 2 2 12)",
                "1 + 1 = 2 (left: 2 2 12)",
                "12 - 2 = 10 (left: 1 2 10)",
                "1 + 1 = 2 (left: 2 2 12)",
                "1 * 1 = 1 (left: 1 2 12)",
                "12 - 2 = 10 (left: 1 2 10)",
                "12 / 2 = 6 (left: 1 2 6)",
                "1 + 1 = 2 (left: 2 2 12)",
                "1 + 1 = 2 (left: 2 2 12)"
            ],
            "Evaluation": [
                0.003,
                2.001,
                0.003,
                1.002,
                1.002,
                60.0,
                3.0,
                1.002,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.7",
                "4 <- 0.5",
                "5 <- 0.9",
                "6 <- 0.6",
                "7 <- 0.9",
                "8 <- 0.5",
                "9 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 12 / 1 = 12 (left: 2 12)",
                "2 * 1 = 2 (left: 2 2 12)",
                "1 * 1 = 1 (left: 1 2 12)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3)",
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "1 + 1 = 2 (left: 2 2 12) || 2 + 2 = 4 (left: 4 12)",
                "12 - 2 = 10 (left: 1 2 10) || 1 + 2 = 3 (left: 3 10)",
                "1 + 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10)",
                "1 * 1 = 1 (left: 1 2 12) || Possible next steps:",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                60.0,
                21.0,
                20.002,
                0.003,
                0.001,
                3.0,
                0.003,
                40.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.7",
                "2 <- 1.9",
                "3 <- 1.4",
                "4 <- 1.0",
                "5 <- 0.5",
                "6 <- 0.5",
                "7 <- 1.9",
                "8 <- 1.0",
                "9 <- 0.9"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 12 / 1 = 12 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "1 + 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10) || 10 - 2 = 8 (left: 8)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12) || 7",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 1 = 12 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 1 = 12 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "1 + 1 = 2 (left: 2 2 12) || 12 + 2 = 14 (left: 2 14)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.002,
                0.003,
                0.003,
                60.0,
                60.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 2.5",
                "2 <- 2.5",
                "3 <- 2.6",
                "4 <- 1.2",
                "5 <- 1.0",
                "6 <- 2.6",
                "7 <- 1.2",
                "8 <- 2.5",
                "9 <- 2.5"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 1 = 11 (left: 1 11)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 1 = 12 (left: 2 12) || 2 + 12 = 14",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.002,
                0.002,
                60.0,
                0.003,
                0.001,
                60.0,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 3.7",
                "1 <- 3.0",
                "2 <- 2.6",
                "3 <- 3.0",
                "4 <- 3.7",
                "5 <- 1.9",
                "6 <- 3.7",
                "7 <- 0.9",
                "8 <- 1.2",
                "9 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24 24)",
                "1 + 1 = 2 (left: 2 2 12) || 2 + 2 = 4 (left: 4 12)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.003,
                0.002,
                0.0,
                0.001,
                60.0,
                0.003,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 3.7",
                "1 <- 4.6",
                "2 <- 1.9",
                "3 <- 3.0",
                "4 <- 3.4",
                "5 <- 0.5",
                "6 <- 4.8",
                "7 <- 4.0",
                "8 <- 0.1",
                "9 <- 1.3"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24 24) || 24 + 24 = 48",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 24 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 * 1) * (2 * 12) = 24",
                "1 + 1 = 2 (left: 2 2 12) || 12 / 2 = 6 (left: 2 6)",
                "12 / 2 = 6 (left: 1 2 6) || 6 / 2 = 3 (left: 1 3) || 1 + 3 = 4 (left: 4)"
            ]
        },
        "Input": "1 1 2 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "6": {
        "puzzle": "1 2 2 6",
        "Step 0": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6)",
                "1 * 2 = 2 (left: 2 2 6)",
                "2 * 2 = 4 (left: 4 2 6)",
                "6 / 2 = 3 (left: 2 3 ",
                "2 * 2 = 4 (left: 4 2 6)",
                "2 * 2 = 4 (left: 1 4 6)",
                "6 - 2 = 4 (left: 1 4 ",
                "6 / 2 = 3 (left: 1 2 3)",
                "1 + 2 = 3 (left: 2 3 6)",
                "1 + 2 = 3 (left: 2 3 6)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                1.002,
                0.003,
                0.003,
                60.0,
                0.001,
                1.0,
                22.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.1",
                "2 <- 0.1",
                "3 <- 0.8",
                "4 <- 0.5",
                "5 <- 0.9",
                "6 <- 0.9",
                "7 <- 0.1",
                "8 <- 0.8",
                "9 <- 0.9"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "1 * 2 = 2 (left: 2 2 6) || Possible next steps:",
                "1 * 2 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 4)",
                "1 + 2 = 3 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6)",
                "2 * 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "1 + 2 = 3 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6)",
                "1 + 2 = 3 (left: 2 3 6) || 3 + 6 = 9 (left: 9)",
                "1 * 2 = 2 (left: 2 2 6) || 2 + 4 = 6 (left: 4 6 6)",
                "1 + 2 = 3 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6)",
                "1 + 2 = 3 (left: 2 3 6) || 6 - 2 = 4 (left: 4 6)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                3.0,
                0.002,
                1.0,
                0.001,
                22.0,
                20.002,
                41.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 1.0",
                "2 <- 1.8",
                "3 <- 1.0",
                "4 <- 1.0",
                "5 <- 1.9",
                "6 <- 1.7",
                "7 <- INIT",
                "8 <- 0.0",
                "9 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)",
                "2 * 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "1 + 2 = 3 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6) || 6 + 6 = 12 (left: 12)",
                "2 * 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "2 * 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "1 + 2 = 3 (left: 2 3 6) || 6 - 2 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "1 * 2 = 2 (left: 2 2 6) || 2 + 4 = 6 (left: 4 6 6) || 6 / 4 = 1.5 (left: 1.5 6)",
                "2 * 2 = 4 (left: 1 4 ",
                "2 / 1 = 2 (left: 2 2 6) || 2 + 4 = 6 (left: 6",
                "2 * 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)"
            ],
            "Evaluation": [
                0.001,
                60.0,
                0.003,
                20.002,
                60.0,
                0.002,
                1.0,
                1.001,
                0.003,
                20.001
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 1.0",
                "2 <- 2.4",
                "3 <- 0.0",
                "4 <- 2.9",
                "5 <- 1.0",
                "6 <- 2.4",
                "7 <- 2.4",
                "8 <- 1.8",
                "9 <- 1.7"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 2 = 2 (left: 2 2 6) || 2 + 4 = 6 (left: 4 6 6) || 6 + 4 = 10 (left: 6 10)",
                "2 * 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "2 * 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: ((1 * 2) * 2) * 6 = 24",
                "2 / 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)",
                "2 * 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25) || 25 - 8 = 17 (left: 8)",
                "2 * 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)",
                "2 * 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (1 * 2 * 2) * 6 = 24",
                "2 * 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (2 * 2) * (6 * 1) = 24",
                "1 + 2 = 3 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "1 * 2 = 2 (left: 2 2 6) || 2 + 4 = 6 (left: 4 6 6) || 4 * 6 = 24 (left: 6 6 24)"
            ]
        },
        "Input": "1 2 2 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "7": {
        "puzzle": "1 1 10 12",
        "Step 0": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 10 12)",
                "1 + 1 = 2 (left: 2 10 12)",
                "1 * 10 = 10 (left: 10 1 12)",
                "1 + 1 = 2 (left: 2 10 12)",
                "12 - 10 = 2 (left: 1 2 12)",
                "1 * 1 = 1 (left: 1 10 12)",
                "1 + 1 = 2 (left: 2 10 12)",
                "10 + 1 = 11 (left: 1 11 12)",
                "12 - 10 = 2 (left: 1 2 12)"
            ],
            "Evaluation": [
                21.001,
                1.002,
                0.003,
                1.001,
                0.003,
                60.0,
                1.001,
                2.001,
                41.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 0.8",
                "2 <- 0.5",
                "3 <- 0.8",
                "4 <- 0.9",
                "5 <- INIT",
                "6 <- 0.5",
                "7 <- 0.5",
                "8 <- INIT",
                "9 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "10 + 1 = 11 (left: 1 11 12) || 12 / 1 = 12 (left: 11 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12)",
                "12 - 10 = 2 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "1 / 1 = 1 (left: 1 10 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "12 - 10 = 2 (left: 1 2 12) || 2 + 12 = 14 (left: 1 14)",
                "12 - 1 = 11 (left: 1 10 ",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                60.0,
                60.0,
                0.003,
                2.001,
                60.0,
                20.001,
                40.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 1.3",
                "2 <- 1.7",
                "3 <- 0.5",
                "4 <- 1.9",
                "5 <- 0.8",
                "6 <- 1.6",
                "7 <- 1.9",
                "8 <- 1.3",
                "9 <- 0.9"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12) || 2 + 12 = 14 (left: 1 14) || 14 - 1 = 13 (left: 13)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 1 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 - 10 = 2 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.003,
                60.0,
                60.0,
                21.0,
                0.002,
                40.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 1.7",
                "2 <- 2.7",
                "3 <- 0.5",
                "4 <- 0.7",
                "5 <- 0.9",
                "6 <- 1.3",
                "7 <- 2.4",
                "8 <- 2.5",
                "9 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (10 + 1) + (1 + 11) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 + 12 = 14 (left: 1 14) || 14 - 1 = 13 (left: 13)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23) || There are no possible next steps with the input 23 as it is a single number.",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 2 10 12) || 10 / 2 = 5 (left: 2 5 12)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25) || 25 - 2 = 23 (left: 2)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 1 12) || 12 / 1 = 12 (left: 12)",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((1 + 1) + 10) + 12 = 24"
            ]
        },
        "Input": "1 1 10 12",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "8": {
        "puzzle": "2 2 10 10",
        "Step 0": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "2 * 2 = 4 (left: 4 10 10)",
                "10 - 2 = 8 (left: 2 10 8)",
                "2 * 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)",
                "10 / 2 = 5 (left: 2 10 5)"
            ],
            "Evaluation": [
                20.002,
                1.002,
                0.003,
                2.001,
                0.003,
                20.002,
                1.002,
                0.003,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.5",
                "2 <- INIT",
                "3 <- 0.5",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 0.0",
                "7 <- 0.5",
                "8 <- INIT",
                "9 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10) || 5 * 2 = 10 (left: 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 + 2 = 4 (left: 4 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14)",
                "10 - 2 = 8 (left: 2 10 8)",
                "2 + 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10)"
            ],
            "Evaluation": [
                20.002,
                2.001,
                21.001,
                1.002,
                1.002,
                0.003,
                2.001,
                3.0,
                21.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.0",
                "2 <- 1.2",
                "3 <- 1.2",
                "4 <- 1.0",
                "5 <- 1.0",
                "6 <- 1.2",
                "7 <- 0.0",
                "8 <- 1.2",
                "9 <- 1.8"
            ]
        },
        "Step 2": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 / 2 = 5 (left: 2 5 10) || 5 * 2 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 / 2 = 5 (left: 2 5 10) || 5 * 2 = 10 (left: 10 10) || 10 + 10 = 20",
                "10 / 2 = 5 (left: 2 5 10) || 5 * 2 = 10 (left: 10 10) || 10 * 10 = 100 (left: 100)",
                "2 + 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 10 40)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 / 2 = 5 (left: 2 5 10) || 2 + 5 = 7 (left: 7 10)"
            ],
            "Evaluation": [
                1.001,
                20.002,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                2.001,
                1.002
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 1.0",
                "2 <- 2.1",
                "3 <- 2.1",
                "4 <- 0.5",
                "5 <- 1.6",
                "6 <- 1.2",
                "7 <- 2.1",
                "8 <- 0.9",
                "9 <- 1.8"
            ]
        },
        "Step 3": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10) || 5 * 2 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "10 / 2 = 5 (left: 2 5 10) || 5 * 2 = 10 (left: 10 10) || 10 + 10 = 20",
                "10 / 2 = 5 (left: 2 5 10) || 5 * 2 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || No possible next steps as there is no input given.",
                "10 / 2 = 5 (left: 2 5 10) || 5 * 2 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps with the input 0.",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10)",
                "10 / 2 = 5 (left: 2 5 10) || 5 * 2 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps since there is no input provided.",
                "10 / 2 = 5 (left: 2 10 5) || 10 - 5 = 5 (left:",
                "10 / 2 = 5 (left: 2 5 10) || 5 + 2 = 7 (left: 7)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                1.002,
                0.002,
                0.003,
                2.001,
                0.001
            ],
            "Resampling": [
                "0 <- 2.8",
                "1 <- 1.8",
                "2 <- 2.1",
                "3 <- 1.2",
                "4 <- 0.0",
                "5 <- 0.0",
                "6 <- 0.0",
                "7 <- 0.0",
                "8 <- 1.7",
                "9 <- 1.8"
            ]
        },
        "Step 4": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 / 6 = 1.67 (left: 1.67 10 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 2 8 10)",
                "10 / 2 = 5 (left: 2 5 10) || 5 * 2 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || No possible next steps.",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 10 40)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 60)",
                "10 / 2 = 5 (left: 2 5 10) || 10 / 2 = 5 (left: 5 10)"
            ],
            "Evaluation": [
                2.001,
                1.002,
                0.003,
                0.003,
                0.002,
                0.003,
                2.0,
                0.003,
                1.001,
                0.001
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.5",
                "2 <- 1.0",
                "3 <- 1.4",
                "4 <- 1.8",
                "5 <- 2.8",
                "6 <- 2.1",
                "7 <- 1.3",
                "8 <- 2.1",
                "9 <- 3.5"
            ]
        },
        "Step 5": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14) || 14 + 10 = 24 (left: 10 24)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10)",
                "10 / 2 = 5 (left: 2 5 10) || 5 * 2 = 10 (left: 10 10) || 10 / 10 = 1 (left: 1) ",
                "10 - 2 = 8 (left: 2 10 8) || 8 / 2 = 4 (left:",
                "10 / 2 = 5 (left: 2 5 10) || 5 * 2 = 10 (left: 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 / 6 = 1.67 (approx) (left: 1.67 10 10)",
                "10 / 2 = 5 (left: 2 5 10) || 5 * 2 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || No possible next steps.",
                "2 * 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14) || 10 / 10 = 1 (left: 1 14)",
                "10 / 2 = 5 (left: 2 5 10) || 5 * 2 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps as the input is 0.",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60) || 60 / 10 = 6 (left: 6 10)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.001,
                0.003,
                2.001,
                0.003,
                20.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 5.7",
                "1 <- 2.1",
                "2 <- 0.5",
                "3 <- 2.1",
                "4 <- 5.7",
                "5 <- 1.8",
                "6 <- 2.1",
                "7 <- 5.7",
                "8 <- 0.0",
                "9 <- 0.1"
            ]
        },
        "Step 6": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14) || 10 / 10 = 1 (left: 1 14) || 14 / 1 = 14 (left: 14)",
                "10 / 2 = 5 (left: 2 5 10) || 5 * 2 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps since there is no input given.",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 / 2 = 5 (left: 2 5 10) || 5 * 2 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps since there is no input given.",
                "2 * 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14) || 10 / 10 = 1 (left: 1 14) || 1 * 14 = 14 (left: 14)",
                "10 / 2 = 5 (left: 2 5 10) || Input: 3 3 9",
                "10 / 2 = 5 (left: 2 5 10) || 5 * 2 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || No possible next steps.",
                "2 * 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14) || 10 / 10 = 1 (left: 1 14) || 1 + 14 = 15 (left: 14)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 - 2 = 8 (left: 2 8 10) || 10 / 2 = 5 (left: 5 10)"
            ],
            "Evaluation": [
                0.003,
                3.0,
                0.003,
                0.003,
                0.003,
                1.002,
                0.003,
                1.002,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 5.7",
                "1 <- 5.7",
                "2 <- 5.7",
                "3 <- 5.7",
                "4 <- 1.2",
                "5 <- 2.1",
                "6 <- 5.7",
                "7 <- 5.5",
                "8 <- 5.7",
                "9 <- 1.8"
            ]
        },
        "Step 7": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14) || 10 / 10 = 1 (left: 1 14) || 14 * 1 = 14 (left: 14)",
                "2 * 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14) || 10 / 10 = 1 (left: 1 14) || 1 + 14 = 15 (left: 15)",
                "2 * 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14) || 10 / 10 = 1 (left: 1 14) || 1 + 14 = 15 (left: 15)",
                "2 * 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14) || 10 / 10 = 1 (left: 1 14) || 1 * 14 = 14 (left: 14)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14)",
                "10 / 2 = 5 (left: 2 5 10) || 5 * 2 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || There are no possible next steps with an input of 0.",
                "2 * 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14) || 10 / 10 = 1 (left: 1 14) || 1 + 14 = 15 (left: 14)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 / 6 = 1.67 (approx) (left: 1.67 10 10) || 10 / 1.67 = 5.99 (left: 5.99 10)",
                "2 * 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14) || 10 / 10 = 1 (left: 1 14) || 14 - 14 = 0 (left: 0)",
                "10 / 2 = 5 (left: 2 5 10) || 5 * 2 = 10 (left: 10 10)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                2.001,
                0.001,
                2.001,
                0.002,
                2.001,
                40.001,
                20.002,
                0.0
            ],
            "Resampling": [
                "0 <- 7.7",
                "1 <- 7.7",
                "2 <- 7.4",
                "3 <- 1.7",
                "4 <- 7.7",
                "5 <- 7.8",
                "6 <- 7.8",
                "7 <- 7.8",
                "8 <- 7.7",
                "9 <- 7.8"
            ]
        },
        "Step 8": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 10 40)",
                "2 + 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 10 40)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 2 8 10) || 8 - 2 = 6 (left: 2 6)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 - 6 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left",
                "10 / 2 = 5 (left: 2 5 10) || 5 * 2 = 10 (left: 10 10)",
                "10 / 2 = 5 (left: 2 5 10) || Possible next steps:",
                "10 / 2 = 5 (left: 2 5 10) || 2 + 5 = 7 (left: 7 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6",
                "10 / 2 = 5 (left: 2 5 10) || 5 * 2 = 10 (left: 10 10)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.002,
                0.002,
                0.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 7.7",
                "1 <- 7.8",
                "2 <- 1.0",
                "3 <- 7.7",
                "4 <- 7.7",
                "5 <- 7.8",
                "6 <- 5.7",
                "7 <- 7.7",
                "8 <- 7.7",
                "9 <- 2.1"
            ]
        },
        "Step 9": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14)",
                "10 / 2 = 5 (left: 2 5 10) || 2 + 5 = 7 (left: 7 10)",
                "10 / 2 = 5 (left: 2 5 10) || 5 * 2 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14)",
                "10 / 2 = 5 (left: 2 5 10) || 5 + 10 = 15 (left: 2 15)",
                "2 * 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14) || 10 / 10 = 1 (left: 1 14) || 14 - 1 = 13 (left: 13)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 / 2 = 5 (left: 2 5 10) || 5 * 2 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0) || No possible next steps. The input is complete."
            ]
        },
        "Input": "2 2 10 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "9": {
        "puzzle": "1 1 1 12",
        "Step 0": {
            "steps": [
                "12 - 1 = 11 (left: 1 1 11)",
                "1 + 1 = 2 (left: 1 2 12)",
                "1 * 1 = 1 (left: 1 1 12)",
                "12 - 1 = 11 (left: 1 1 11)",
                "1 + 1 = 2 (left: 1 2 12)",
                "1 / 1 = 1 (left: 1 1 12)",
                "1 + 1 = 2 (left: 1 2 12)",
                "1 - 1 = 0 (left: 0 1 12)",
                "1 * 1 = 1 (left: 1 1 12)",
                "12 - 1 = 11 (left: 1 1 11)"
            ],
            "Evaluation": [
                1.002,
                60.0,
                60.0,
                1.002,
                60.0,
                41.0,
                60.0,
                0.003,
                41.0,
                1.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.8",
                "2 <- 0.6",
                "3 <- 0.4",
                "4 <- 0.8",
                "5 <- 0.5",
                "6 <- 0.1",
                "7 <- INIT",
                "8 <- 0.6",
                "9 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 1 = 11 (left: 1 1 11) || 1 + 1 = 2 (left: 2 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 12 = 12 (left: 2 12)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 / 1 = 1 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "1 + 1 = 2 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "1 + 1 = 2 (left: 1 2 12) || 2 + 12 = 14 (left: 1 14)",
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                60.0,
                0.002,
                0.003,
                1.002,
                21.001,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 1.3",
                "2 <- 0.6",
                "3 <- 1.9",
                "4 <- 0.8",
                "5 <- 0.5",
                "6 <- 1.2",
                "7 <- 1.3",
                "8 <- 0.6",
                "9 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 / 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 12 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 12) || Input: 1 1 6",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 12 = 12 (left: 2 12) || 2 + 12 = 14 (left: 14)"
            ],
            "Evaluation": [
                0.003,
                20.001,
                60.0,
                0.002,
                1.002,
                40.001,
                60.0,
                60.0,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 2.2",
                "2 <- 0.1",
                "3 <- 0.2",
                "4 <- 2.2",
                "5 <- 2.6",
                "6 <- 2.6",
                "7 <- 0.4",
                "8 <- INIT",
                "9 <- 0.6"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7",
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "1 * 1 = 1 (left: 1 1 12) || 3 + 3 = 6 (left: 6 6)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 12 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 + 1) * (1 * 12) = 24",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 12 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 + 1) * (1 * 12) = 24",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left:",
                "12 - 1 = 11 (left: 1 1 11)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)"
            ]
        },
        "Input": "1 1 1 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "10": {
        "puzzle": "1 1 2 8",
        "Step 0": {
            "steps": [
                "8 - 1 = 7 (left: 1 2 7)",
                "8 - 2 = 6 (left: 1 2 6)",
                "2 + 8 = 10 (left: 1 10 ",
                "8 / 2 = 4 (left: 1 1 4)",
                "1 * 1 = 1 (left: 1 2 8)",
                "8 - 1 = 7 (left: 1 2 7)",
                "2 * 1 = 2 (left: 2 2 8)",
                "8 / 1 = 8 (left: 1 2 ",
                "1 * 1 = 1 (left: 1 2 8)",
                "8 / 2 = 4 (left: 1 4 "
            ],
            "Evaluation": [
                1.002,
                1.002,
                60.0,
                1.002,
                60.0,
                1.002,
                1.002,
                0.002,
                22.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 0.4",
                "2 <- 0.2",
                "3 <- 0.4",
                "4 <- 0.4",
                "5 <- 0.8",
                "6 <- 0.4",
                "7 <- 0.2",
                "8 <- INIT",
                "9 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 8) || 2 / 1 = 2 (left: 2 8)",
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10)",
                "2 + 8 = 10 (left: 1 10  || 1 + 10 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10)",
                "1 * 1 = 1 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)",
                "1 * 1 = 1 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "1 * 1 = 1 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)",
                "2 + 8 = 10 (left: 1 10  || 1 + 10 = 11 (left: 11)",
                "8 / 2 = 4 (left: 1 4 8)",
                "2 + 8 = 10 (left: 1 10  || 10 * 1 = 10 (left"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.003,
                60.0,
                60.0,
                60.0,
                0.002,
                0.003,
                2.0,
                21.001
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 1.5",
                "2 <- 1.3",
                "3 <- 1.5",
                "4 <- 1.4",
                "5 <- 1.4",
                "6 <- 1.4",
                "7 <- 1.9",
                "8 <- 1.1",
                "9 <- 1.9"
            ]
        },
        "Step 2": {
            "steps": [
                "2 + 8 = 10 (left: 1 10  || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 * 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || Input: 4 6 12",
                "1 * 1 = 1 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 5 + 10 = 15 (left: 15)",
                "2 + 8 = 10 (left: 1 10  || 10 * 1 = 10 (left || 1 + 10 = 11 (left: 11 )",
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "2 + 8 = 10 (left: 1 10  || 10 * 1 = 10 (left || 1 / 10 = 0.1 (left: 0.1)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.002,
                0.003,
                0.001,
                0.002,
                0.001,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 1.1",
                "2 <- 1.5",
                "3 <- 1.3",
                "4 <- 1.4",
                "5 <- 1.4",
                "6 <- 1.3",
                "7 <- 1.5",
                "8 <- 1.1",
                "9 <- 0.4"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 8) || 8 - 2 = 6 (left:",
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 8 11)",
                "1 * 1 = 1 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)"
            ],
            "Evaluation": [
                1.001,
                0.001,
                0.003,
                0.001,
                1.001,
                0.001,
                0.001,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 3.4",
                "2 <- 1.9",
                "3 <- 0.4",
                "4 <- 1.3",
                "5 <- 1.1",
                "6 <- 1.3",
                "7 <- 1.4",
                "8 <- 1.5",
                "9 <- 1.3"
            ]
        },
        "Step 4": {
            "steps": [
                "8 / 2 = 4 (left: 1 4 8) || 4 * 1 = 4 (left: 4 8)",
                "1 * 1 = 1 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 8 11) || 8 * 11 = 88 (left: 88)",
                "2 + 8 = 10 (left: 1 10  || 10 * 1 = 10 (left || 10 * 1 = 10 (left: 1 10)",
                "1 * 1 = 1 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6)",
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 * 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 + 1 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                1.002,
                60.0,
                60.0,
                0.002,
                0.001,
                0.002,
                0.002,
                0.001,
                0.002,
                22.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 4.1",
                "2 <- 0.4",
                "3 <- 4.2",
                "4 <- 4.1",
                "5 <- 0.4",
                "6 <- 1.4",
                "7 <- 4.2",
                "8 <- 4.2",
                "9 <- 1.4"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "2 + 8 = 10 (left: 1 10  || 10 * 1 = 10 (left || 10 * 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "1 * 1 = 1 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "2 + 8 = 10 (left: 1 10  || 10 * 1 = 10 (left || 10 * 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 8) || 2 * 8 = 16 (left:",
                "1 * 1 = 1 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 + 6 = 7",
                "1 * 1 = 1 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "1 * 1 = 1 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)"
            ],
            "Evaluation": [
                0.002,
                1.002,
                0.001,
                2.0,
                0.001,
                0.003,
                0.002,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.8",
                "1 <- 1.5",
                "2 <- 4.1",
                "3 <- 4.2",
                "4 <- 4.2",
                "5 <- 5.9",
                "6 <- 4.1",
                "7 <- 4.9",
                "8 <- 4.2",
                "9 <- 5.9"
            ]
        },
        "Step 6": {
            "steps": [
                "2 + 8 = 10 (left: 1 10  || 10 * 1 = 10 (left || 10 * 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 + 4 = 5",
                "2 + 8 = 10 (left: 1 10  || 10 * 1 = 10 (left || 10 * 1 = 10 (left: 1 10) || 10 + 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "1 * 1 = 1 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "2 + 8 = 10 (left: 1 10  || 10 * 1 = 10 (left || 10 * 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "1 * 1 = 1 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 + 6 = 7",
                "1 * 1 = 1 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.001,
                0.002,
                0.003,
                60.0,
                20.002,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 5.9",
                "2 <- 5.8",
                "3 <- 4.2",
                "4 <- 4.2",
                "5 <- 4.1",
                "6 <- 6.9",
                "7 <- 4.2",
                "8 <- 4.2",
                "9 <- 6.8"
            ]
        },
        "Step 7": {
            "steps": [
                "2 + 8 = 10 (left: 1 10  || 10 * 1 = 10 (left || 10 * 1 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "2 + 8 = 10 (left: 1 10  || 10 * 1 = 10 (left || 10 * 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "1 * 1 = 1 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "2 + 8 = 10 (left: 1 10  || 10 * 1 = 10 (left || 10 * 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7) ",
                "2 + 8 = 10 (left: 1 10  || 10 * 1 = 10 (left || 10 * 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                60.0,
                0.001,
                0.002,
                60.0,
                0.003,
                0.001,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 7.3",
                "1 <- 7.9",
                "2 <- 7.9",
                "3 <- 7.9",
                "4 <- 7.3",
                "5 <- 7.8",
                "6 <- 1.1",
                "7 <- 1.5",
                "8 <- 7.3",
                "9 <- 7.6"
            ]
        },
        "Step 8": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 1) * (2 + 8) = 24",
                "2 + 8 = 10 (left: 1 10  || 10 * 1 = 10 (left || 10 * 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "2 + 8 = 10 (left: 1 10  || 10 * 1 = 10 (left || 10 * 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "2 + 8 = 10 (left: 1 10  || 10 * 1 = 10 (left || 10 * 1 = 10 (left: 1 10) || 1 - 10 =",
                "1 * 1 = 1 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 1) * (2 + 8) = 24",
                "1 * 1 = 1 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 1) * (2 + 8) = 24",
                "1 * 1 = 1 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 1) * (2 + 8) = 24",
                "1 * 1 = 1 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 3 2.67)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.001,
                1.001,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 7.7",
                "1 <- 7.0",
                "2 <- 8.8",
                "3 <- 7.0",
                "4 <- 8.6",
                "5 <- 6.6",
                "6 <- 8.9",
                "7 <- 8.5",
                "8 <- 8.5",
                "9 <- 8.9"
            ]
        },
        "Step 9": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 1) * (2 + 8) = 24",
                "2 + 8 = 10 (left: 1 10  || 10 * 1 = 10 (left || 10 * 1 = 10 (left: 1 10) || 1 + 10 = 11 (left: 10)",
                "1 * 1 = 1 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 1) * (2 + 8) = 24",
                "1 * 1 = 1 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 1) * (2 + 8) = 24",
                "1 * 1 = 1 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 1) * (2 + 8) = 24",
                "1 * 1 = 1 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 1) * (2 + 8) = 24",
                "1 * 1 = 1 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 1) * (2 + 8) = 24",
                "1 * 1 = 1 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 1) * (2 + 8) = 24"
            ]
        },
        "Input": "1 1 2 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "11": {
        "puzzle": "1 1 4 8",
        "Step 0": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 8)",
                "4 * 1 = 4 (left: 4 4 ",
                "1 * 1 = 1 (left: 1 4 8)",
                "1 + 1 = 2 (left: 2 4 8)",
                "1 * 1 = 1 (left: 1 4 8)",
                "8 / 4 = 2 (left: 1 2 8)",
                "8 - 1 = 7 (left: 1 4 7)",
                "1 + 1 = 2 (left: 2 4 8)",
                "8 / 4 = 2 (left: 1 2 8)",
                "1 * 1 = 1 (left: 1 4 8)"
            ],
            "Evaluation": [
                1.001,
                0.003,
                20.002,
                0.003,
                2.001,
                60.0,
                1.002,
                1.002,
                21.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.5",
                "2 <- 0.8",
                "3 <- 0.8",
                "4 <- 0.5",
                "5 <- 0.2",
                "6 <- 0.5",
                "7 <- 0.5",
                "8 <- 0.8",
                "9 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "8 / 4 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "8 / 4 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6)",
                "8 / 4 = 2 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)",
                "8 / 4 = 2 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "1 * 1 = 1 (left: 1 4 8) || 8 - 4 = 4 (left: 1 4)",
                "8 / 4 = 2 (left: 1 2 8) || 1 * 2 = 2 (left: 2)",
                "8 / 4 = 2 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)",
                "8 / 4 = 2 (left: 1 2 8) || 2 - 1 = 1 (left: 1 8)"
            ],
            "Evaluation": [
                60.0,
                40.0,
                40.0,
                0.002,
                0.003,
                60.0,
                0.001,
                1.002,
                60.0,
                21.001
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 1.8",
                "2 <- 1.0",
                "3 <- 0.2",
                "4 <- 1.9",
                "5 <- 1.2",
                "6 <- 1.0",
                "7 <- 1.8",
                "8 <- 0.5",
                "9 <- 0.5"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 8) || 8 - 4 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 / 4 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 4 8) || 4 * 1 = 4 (left: 4 8)",
                "8 / 4 = 2 (left: 1 2 8) || 2 - 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5) ",
                "8 / 4 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "8 / 4 = 2 (left: 1 2 8) || 2 + 8 = 10 (left:",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 1 = 7 (left: 2 7)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.001,
                0.003,
                0.002,
                0.001,
                0.001,
                0.003,
                1.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.8",
                "2 <- 1.1",
                "3 <- 1.2",
                "4 <- 1.0",
                "5 <- 0.5",
                "6 <- 1.2",
                "7 <- 0.0",
                "8 <- 1.8",
                "9 <- 1.2"
            ]
        },
        "Step 3": {
            "steps": [
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 / 4 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "8 / 4 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 4 8) || 4 + 8 = 12 (left: 1 12)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.002,
                0.002,
                0.002,
                60.0,
                0.001,
                1.0,
                0.002,
                0.0
            ],
            "Resampling": [
                "0 <- 3.5",
                "1 <- 1.8",
                "2 <- 1.1",
                "3 <- 3.1",
                "4 <- 3.5",
                "5 <- 1.5",
                "6 <- 3.5",
                "7 <- 1.2",
                "8 <- 3.1",
                "9 <- 0.5"
            ]
        },
        "Step 4": {
            "steps": [
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5 8)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 8 11)",
                "8 / 4 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 8 / 4) * 8 = 24",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "1 * 1 = 1 (left: 1 4 8) || 8 - 4 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5 8)",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 8 / 4) * 8 = 24",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6)"
            ],
            "Evaluation": [
                1.002,
                0.001,
                0.003,
                0.001,
                0.003,
                0.003,
                0.001,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 4.8",
                "1 <- 4.8",
                "2 <- 0.5",
                "3 <- 0.5",
                "4 <- 3.1",
                "5 <- 1.1",
                "6 <- 4.9",
                "7 <- 4.9",
                "8 <- 4.8",
                "9 <- 3.1"
            ]
        },
        "Step 5": {
            "steps": [
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 + 6 = 7",
                "8 / 4 = 2 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 1 + 4) * 8 = 24",
                "8 / 4 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 8 / 4) * 8 = 24",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 8 / 4) * 8 = 24",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 8 / 4) * 8 = 24"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                60.0,
                0.002,
                0.003,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.8",
                "1 <- 4.8",
                "2 <- 3.1",
                "3 <- 5.9",
                "4 <- 5.6",
                "5 <- 4.9",
                "6 <- 4.8",
                "7 <- 4.8",
                "8 <- 4.7",
                "9 <- 5.3"
            ]
        },
        "Step 6": {
            "steps": [
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 1 + 4) * 8 = 24",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 1 + 4) * 8 = 24",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.001,
                0.002,
                60.0,
                40.001
            ],
            "Resampling": [
                "0 <- 6.9",
                "1 <- 5.6",
                "2 <- 5.3",
                "3 <- 4.7",
                "4 <- 4.8",
                "5 <- 3.5",
                "6 <- 6.9",
                "7 <- 4.7",
                "8 <- 5.6",
                "9 <- 1.5"
            ]
        },
        "Step 7": {
            "steps": [
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 8)",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "1 * 1 = 1 (left: 1 4 8) || 8 - 4 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.0,
                0.002,
                0.001,
                0.003,
                0.001,
                0.0,
                0.002
            ],
            "Resampling": [
                "0 <- 5.6",
                "1 <- 5.6",
                "2 <- 6.9",
                "3 <- 6.8",
                "4 <- 5.9",
                "5 <- 3.1",
                "6 <- 6.8",
                "7 <- 5.6",
                "8 <- 5.6",
                "9 <- 5.7"
            ]
        },
        "Step 8": {
            "steps": [
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 8 / 4) * 8 = 24",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 + 6 = 7",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 8 / 4) * 8 = 24",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 8 / 4) * 8 = 24",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 8 / 4) * 8 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 8.7",
                "1 <- 5.9",
                "2 <- 8.7",
                "3 <- 5.6",
                "4 <- 8.8",
                "5 <- 8.7",
                "6 <- 8.9",
                "7 <- 8.6",
                "8 <- 8.7",
                "9 <- 8.7"
            ]
        },
        "Step 9": {
            "steps": [
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 8 / 4) * 8 = 24",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "8 / 4 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)"
            ]
        },
        "Input": "1 1 4 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "12": {
        "puzzle": "1 1 5 8",
        "Step 0": {
            "steps": [
                "1 + 1 = 2 (left: 2 5 8)",
                "5 + 1 = 6 (left: 6 1 8)",
                "5 + 1 = 6 (left: 1 6 8)",
                "1 - 1 = 0 (left: 0 5 8)",
                "1 * 1 = 1 (left: 1 5 8)",
                "1 * 1 = 1 (left: 1 5 8)",
                "8 - 5 = 3 (left: 1 3 8)",
                "1 + 5 = 6 (left: 6 6 8)",
                "8 - 1 = 7 (left: 1 5 7)",
                "1 + 5 = 6 (left: 6 8)"
            ],
            "Evaluation": [
                0.003,
                2.001,
                0.003,
                2.001,
                1.002,
                1.001,
                60.0,
                3.0,
                1.002,
                0.002
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 0.3",
                "2 <- 0.6",
                "3 <- 0.6",
                "4 <- 0.6",
                "5 <- 0.6",
                "6 <- 0.6",
                "7 <- 0.6",
                "8 <- 0.6",
                "9 <- 0.6"
            ]
        },
        "Step 1": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24)",
                "1 - 1 = 0 (left: 0 5 8) || 8 - 5 = 3 (left: 0 3)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "8 - 5 = 3 (left: 1 3 8) || 1 + 3 = 4 (left: 4 8)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "8 - 5 = 3 (left: 1 3 8) || 1 + 3 = 4 (left: 4 8)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.67 (left: 1 2.67)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                0.003,
                60.0,
                0.003,
                0.003,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 1.8",
                "2 <- 1.9",
                "3 <- 1.2",
                "4 <- 1.1",
                "5 <- 1.9",
                "6 <- 1.7",
                "7 <- 1.9",
                "8 <- 1.0",
                "9 <- 1.7"
            ]
        },
        "Step 2": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || Possible next steps:",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 - 1 = 0 (left: 0 5 8) || 8 - 5 = 3 (left: 0 3) || 3 * 0 = 0 (left: 0)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5 8)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || Possible next steps:",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)"
            ],
            "Evaluation": [
                0.001,
                60.0,
                0.003,
                0.003,
                0.0,
                1.001,
                0.002,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 1.7",
                "2 <- 1.9",
                "3 <- 1.1",
                "4 <- 1.0",
                "5 <- 1.9",
                "6 <- 0.6",
                "7 <- 1.9",
                "8 <- 1.9",
                "9 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2.66667 (left: 2.66667 8)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "1 - 1 = 0 (left: 0 5 8) || 8 - 5 = 3 (left: 0 3) || 0 + 3 = 3 (left: 3)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "8 - 5 = 3 (left: 1 3 8) || 1 + 3 = 4 (left: 4 8)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 + 8 = 11",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "5 + 1 = 6 (left: 1 6 8)"
            ],
            "Evaluation": [
                60.0,
                2.001,
                0.002,
                0.003,
                0.002,
                0.001,
                0.002,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 3.8",
                "2 <- 2.1",
                "3 <- 1.2",
                "4 <- 1.7",
                "5 <- 3.0",
                "6 <- 1.7",
                "7 <- 1.4",
                "8 <- 2.1",
                "9 <- 1.0"
            ]
        },
        "Step 4": {
            "steps": [
                "1 - 1 = 0 (left: 0 5 8) || 8 - 5 = 3 (left: 0 3) || 3 + 0 = 3 (left: 3)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 - 5) * (1 * 8) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * (1 + 5)) * 8 = 24",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 5 - 1 = 4 (left: 4)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * (1 + 5)) * 8 = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 10 / 2 = 5 (left: 5 5)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.001,
                0.0,
                0.002,
                0.003,
                40.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 4.8",
                "2 <- 4.8",
                "3 <- 0.6",
                "4 <- 4.8",
                "5 <- 4.8",
                "6 <- 2.1",
                "7 <- 1.7",
                "8 <- 4.9",
                "9 <- 2.7"
            ]
        },
        "Step 5": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * 3 = 24",
                "1 - 1 = 0 (left: 0 5 8) || 8 - 5 = 3 (left: 0 3) || 3 / 0 = undefined (left: 0 3)",
                "1 - 1 = 0 (left: 0 5 8) || 8 - 5 = 3 (left: 0 3) || 3 * 0 = 0 (left: 0)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24)",
                "1 - 1 = 0 (left: 0 5 8) || 8 - 5 = 3 (left: 0 3) || 0 + 3 = 3 (left: 3)",
                "1 - 1 = 0 (left: 0 5 8) || 8 - 5 = 3 (left: 0 3) || 3 / 0 = undefined",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * (1 + 5)) * 8 = 24",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 + 8 = 11 (left: 8 11)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * (8 - 5) = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                0.0,
                0.003,
                1.001,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 5.8",
                "2 <- 5.7",
                "3 <- 5.9",
                "4 <- 5.2",
                "5 <- 4.7",
                "6 <- 5.8",
                "7 <- 4.9",
                "8 <- 5.7",
                "9 <- 5.7"
            ]
        },
        "Step 6": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 3 2.67)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 + 8 = 11 (left: 8 11)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 1 * (1 + 5) * 8 = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2.66667 (left: 2.66667)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 - 8 = -5 (left: -5 8)"
            ],
            "Evaluation": [
                0.002,
                1.002,
                0.003,
                40.001,
                0.002,
                1.002,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 4.8",
                "2 <- 6.7",
                "3 <- 4.8",
                "4 <- 5.8",
                "5 <- 6.9",
                "6 <- 6.3",
                "7 <- 6.8",
                "8 <- 5.7",
                "9 <- 6.7"
            ]
        },
        "Step 7": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25) || 25 + 8 = 33 (left: 8)",
                "1 - 1 = 0 (left: 0 5 8) || 8 - 5 = 3 (left: 0 3) || 5 * 10 = 50 (left: 50",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 - 1 = 0 (left: 0 5 8) || 8 - 5 = 3 (left: 0 3) || 0 + 3 = 3 (left: 3)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 / 8 = 0.375 (left: 0.375)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25) || 25 - 2 = 23 (left: 2)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 \u2248 2.67 (left: 2.67)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                0.003,
                0.001,
                0.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 7.6",
                "1 <- 7.6",
                "2 <- 6.7",
                "3 <- 7.9",
                "4 <- 5.6",
                "5 <- 6.9",
                "6 <- 6.6",
                "7 <- 6.3",
                "8 <- 1.2",
                "9 <- 7.7"
            ]
        },
        "Step 8": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || Input: 4 10",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 - 1 = 0 (left: 0 5 8) || 8 - 5 = 3 (left: 0 3) || 3 - 0 = 3 (left: 3)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25) || 25 + 25 = 50 (left: 25 50)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                40.0,
                0.001,
                0.002,
                0.002,
                20.002,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 6.6",
                "1 <- 5.7",
                "2 <- 7.7",
                "3 <- 7.8",
                "4 <- 8.3",
                "5 <- 8.3",
                "6 <- 6.7",
                "7 <- 7.8",
                "8 <- 6.3",
                "9 <- 6.7"
            ]
        },
        "Step 9": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 10 / 5 = 2 (left: 2)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 4",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * (1 + 5)) * 8 = 24",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * (1 + 5)) * 8 = 24",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 + 8 = 11 (left: 8 11)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + (8 - 5)) * 8 = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25) || 25 + 8 = 33 (left: 8 33)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || Input: 4 5"
            ]
        },
        "Input": "1 1 5 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "13": {
        "puzzle": "4 6 11 11",
        "Step 0": {
            "steps": [
                "6 - 4 = 2 (left: 2 11 11)",
                "11 - 4 = 7 (left: 6 7 ",
                "4 * 6 = 24 (left: 11 11 24)",
                "6 * 11 = 66 (left: 4 66 11)",
                "4 * 6 = 24 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24)",
                "4 + 6 = 10 (left: 10 11 11)",
                "4 + 6 = 10 (left: 10 11 11)",
                "11 - 4 = 7 (left: 6 7 "
            ],
            "Evaluation": [
                0.003,
                1.002,
                1.002,
                21.001,
                0.003,
                1.002,
                0.003,
                1.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 0.3",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "6 * 11 = 66 (left: 4 66 11) || 4 + 66 = 70 (left: 11 70)",
                "6 / 4 = 1.5 (left: 1.5 11 11)",
                "4 + 6 = 10 (left: 10 11 11)",
                "11 - 6 = 5 (left: 4 5 11)",
                "11 - 4 = 7 (left: ",
                "6 * 11 = 66 (left: 4 66 11) || 4 + 66 = 70 (left: 11 70)",
                "6 / 4 = 1.5 (left: 1.5 11 11)",
                "11 - 6 = 5 (left: 4 5 11)",
                "11 - 6 = 5 (left: 4 5 11)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 11 264)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                0.003,
                2.001,
                0.0,
                0.003,
                1.002,
                2.001,
                2.001,
                21.001
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 1.0",
                "2 <- INIT",
                "3 <- 0.3",
                "4 <- INIT",
                "5 <- 1.8",
                "6 <- 0.3",
                "7 <- 0.1",
                "8 <- 1.9",
                "9 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 11 264) || 11 + 264 = 275 (left: 275)",
                "6 * 11 = 66 (left: 4 66 11) || 4 + 66 = 70 (left: 11 70) || Input: 5 25 45",
                "11 / 6 = 1.83 (left",
                "6 * 11 = 66 (left: 4 66 11) || 11 * 4 = 44 (left: 44)",
                "11 - 4 = 7 (left: 4 7 11)",
                "11 - 6 = 5 (left: 4 5 11) || 4 * 5 = 20 (left: 20 11)",
                "6 * 11 = 66 (left: 4 66 11) || 11 + 4 = 15 (left: 15 66)",
                "11 - 4 = 7 (left: 6 7  || 6 * 7 = 42 (left: 42)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 11 264) || 11 * 264 = 2904 (left: 2904)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 11 264)"
            ],
            "Evaluation": [
                0.001,
                0.001,
                0.002,
                0.003,
                2.001,
                0.003,
                0.003,
                0.002,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 0.3",
                "2 <- 0.3",
                "3 <- 0.3",
                "4 <- 1.8",
                "5 <- 0.3",
                "6 <- 0.3",
                "7 <- 1.6",
                "8 <- 1.9",
                "9 <- 0.3"
            ]
        },
        "Step 3": {
            "steps": [
                "11 - 6 = 5 (left: 4 5 11) || 5 + 11 = 16 (left: 4 16)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 264 11)",
                "6 * 11 = 66 (left: 4 66 11) || 66 / 4 = 16.5 (left: 16.5 11)",
                "6 * 11 = 66 (left: 4 66 11) || 11 * 4 = 44 (left: 44 66)",
                "11 - 6 = 5 (left: 4 5 11) || Input: 3 9 27",
                "6 * 11 = 66 (left: 4 66 11) || 4 + 66 = 70 (left: 11 70)",
                "6 * 11 = 66 (left: 4 66 11) || 11 + 4 = 15 (left: 15 66)",
                "6 / 4 = 1.5 (left: 1.5 11 11) || 11 / 1.5 = 7.33333333333 (left: 7.33333333333 11)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 11 264) || 11 - 264 = -253 (left: -253)",
                "6 * 11 = 66 (left: 4 66 11) || 11 / 4 = 2.75 (left: 66 2.75)"
            ],
            "Evaluation": [
                0.003,
                20.0,
                1.002,
                0.002,
                0.003,
                0.003,
                0.002,
                3.0,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 0.3",
                "2 <- 3.1",
                "3 <- 3.1",
                "4 <- 3.9",
                "5 <- 3.9",
                "6 <- 1.9",
                "7 <- 3.1",
                "8 <- 3.7",
                "9 <- 3.9"
            ]
        },
        "Step 4": {
            "steps": [
                "6 / 4 = 1.5 (left: 1.5 11 11) || 11 / 1.5 = 7.33 (left: 7.33 11)",
                "6 * 11 = 66 (left: 4 66 11) || 11 + 4 = 15 (left: 15 66)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 264 11) || 264 / 11 = 24 (left: 11 24)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 264 11) || 264 + 11 = 275 (left: 11 275)",
                "6 * 11 = 66 (left: 4 66 11) || 11 / 4 = 2.75 (left: 66 2.75) || Input: 10 5",
                "6 * 11 = 66 (left: 4 66 11) || 11 / 4 = 2.75 (left: 66 2.75) || 66 + 2.75 = 68.75 (left: 68.75)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 11 264) || 11 + 264 = 275 (left: 275)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 264 11) || 264 + 11 = 275 (left: 11 275)",
                "6 / 4 = 1.5 (left: 1.5 11 11) || 11 / 1.5 = 7.33333333333 (left: 7.33333333333 11) || 11 - 7.33333333333 = 3.66666666667 (left: 3.66666666667 11)",
                "6 * 11 = 66 (left: 4 66 11) || 11 / 4 = 2.75 (left: 66 2.75) || 66 * 2.75 = 181.5 (left: 2.75 181.5)"
            ],
            "Evaluation": [
                2.0,
                0.003,
                0.003,
                41.0,
                0.003,
                0.003,
                0.001,
                20.0,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 3.2",
                "2 <- 4.3",
                "3 <- 4.3",
                "4 <- 4.3",
                "5 <- 4.3",
                "6 <- 1.0",
                "7 <- 3.9",
                "8 <- 4.3",
                "9 <- 3.9"
            ]
        },
        "Step 5": {
            "steps": [
                "6 / 4 = 1.5 (left: 1.5 11 11) || 11 / 1.5 = 7.33 (left: 7.33 11) || 7.33 + 11 = 18.33 (left: 18.33)",
                "6 * 11 = 66 (left: 4 66 11) || 66 / 4 = 16.5 (left: 16.5 11) || 16.5 - 11 = 5.5 (left: 5.5)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 264 11) || 264 + 11 = 275 (left: 11 275) || Input: 3 6 9 12",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 264 11) || 264 + 11 = 275 (left: 11 275) || 27 / ",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 264 11) || 264 + 11 = 275 (left: 11 275) || 11 * 275 = 3025 (left: 3025)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 264 11) || 264 + 11 = 275 (left: 11 275) || 275 / 11 = 25 (left: 25)",
                "6 * 11 = 66 (left: 4 66 11) || 4 + 66 = 70 (left: 11 70) || 70 - 11 = 59 (left: 59)",
                "6 * 11 = 66 (left: 4 66 11) || 11 / 4 = 2.75 (left: 66 2.75) || Possible next steps:",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 264 11) || 264 + 11 = 275 (left: 11 275) || 11 / 275 = 0.04 (left: 0.04)",
                "6 * 11 = 66 (left: 4 66 11) || 11 / 4 = 2.75 (left: 66 2.75) || 66 + 2.75 = 68.75 (left: 68.75)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                20.0,
                20.002,
                40.0
            ],
            "Resampling": [
                "0 <- 5.7",
                "1 <- 3.9",
                "2 <- 4.3",
                "3 <- 4.3",
                "4 <- 5.9",
                "5 <- 5.9",
                "6 <- 4.3",
                "7 <- 5.8",
                "8 <- 3.9",
                "9 <- 5.8"
            ]
        },
        "Step 6": {
            "steps": [
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 264 11) || 264 * 11 = 2904 (left: 11 2904)",
                "6 * 11 = 66 (left: 4 66 11) || 11 / 4 = 2.75 (left: 66 2.75) || 66 * 2.75 = 181.5 (left: 181.5)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 264 11) || 264 + 11 = 275 (left: 11 275) || 11 + 275 = 286 (left: 286)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 264 11) || 264 + 11 = 275 (left: 11 275) || 11 * 275 = 3025 (left: 3025)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 264 11) || 264 + 11 = 275 (left: 11 275) || Possible next steps:",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 264 11) || 264 + 11 = 275 (left: 11 275) || 11 - 275 = -264 (left: -264)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 264 11) || 264 + 11 = 275 (left: 11 275) || 275 / 11 = 25 (left: 25)",
                "6 * 11 = 66 (left: 4 66 11) || 11 / 4 = 2.75 (left: 66 2.75) || 66 - 2.75 = 63.25 (left: 63.25)",
                "6 * 11 = 66 (left: 4 66 11) || 11 / 4 = 2.75 (left: 66 2.75) || 66 * 2.75 = 181.5 (left: 181.5)",
                "6 * 11 = 66 (left: 4 66 11) || 11 / 4 = 2.75 (left: 66 2.75) || 66 + 2.75 = 68.75"
            ],
            "Evaluation": [
                1.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.001,
                40.001,
                20.001,
                0.001
            ],
            "Resampling": [
                "0 <- 6.8",
                "1 <- 6.7",
                "2 <- 4.3",
                "3 <- 6.7",
                "4 <- 4.3",
                "5 <- 6.0",
                "6 <- 4.3",
                "7 <- 6.8",
                "8 <- 1.9",
                "9 <- 5.9"
            ]
        },
        "Step 7": {
            "steps": [
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 264 11) || 264 + 11 = 275 (left: 11 275) || 11 - 275 = -264 (left: -264)",
                "6 * 11 = 66 (left: 4 66 11) || 11 / 4 = 2.75 (left: 66 2.75) || 66 / 2.75 = 24 (left: 2.75 24)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 264 11) || 264 + 11 = 275 (left: 11 275) || 11 / 275 = 0.04 (left: )",
                "6 * 11 = 66 (left: 4 66 11) || 11 / 4 = 2.75 (left: 66 2.75) || 66 / 2.75 = 24 (left: 24)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 264 11) || 264 + 11 = 275 (left: 11 275) || 11 - 275 = -264 (left: -264)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 264 11) || 264 * 11 = 2904 (left: 11 2904) || 2904 / 11 = 264 (left: 11 264)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 264 11) || 264 + 11 = 275 (left: 11 275) || 5 - 3 = 2 (left: 2 7",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 264 11) || 264 + 11 = 275 (left: 11 275) || 11 + 275 = 286 (left: 286)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 11 264) || 11 - 264 = -253 (left: -253)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 264 11) || 264 + 11 = 275 (left: 11 275) || 6 - 3 = 3 (left: 3)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                1.001,
                1.001,
                0.0,
                40.0,
                60.0,
                0.0,
                0.0,
                0.002
            ],
            "Resampling": [
                "0 <- 6.7",
                "1 <- 7.1",
                "2 <- 7.6",
                "3 <- 7.5",
                "4 <- 3.9",
                "5 <- 7.5",
                "6 <- 5.9",
                "7 <- 5.7",
                "8 <- 7.1",
                "9 <- 7.1"
            ]
        },
        "Step 8": {
            "steps": [
                "6 * 11 = 66 (left: 4 66 11) || 11 / 4 = 2.75 (left: 66 2.75) || 66 + 2.75 = 68.75",
                "6 * 11 = 66 (left: 4 66 11) || 11 / 4 = 2.75 (left: 66 2.75) || 66 / 2.75 = 24 (left: 24) || Answer: (6 * 11) / (11 / 4) = 24",
                "6 * 11 = 66 (left: 4 66 11) || 11 / 4 = 2.75 (left: 66 2.75) || Possible next steps:",
                "6 * 11 = 66 (left: 4 66 11) || 11 / 4 = 2.75 (left: 66 2.75) || 66 * 2.75 = 181.5 (left: 181.5)",
                "6 * 11 = 66 (left: 4 66 11) || 11 / 4 = 2.75 (left: 66 2.75) || 10 - 5",
                "6 * 11 = 66 (left: 4 66 11) || 11 / 4 = 2.75 (left: 66 2.75) || 66 * 2.75 = 181.5 (left: 181.5)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 264 11) || 264 + 11 = 275 (left: 11 275) || 275 / 11 = 25 (left: 25 275)",
                "6 * 11 = 66 (left: 4 66 11) || 4 * 66 = 264 (left: 264 11) || 264 / 11 = 24 (left: 24)",
                "6 * 11 = 66 (left: 4 66 11) || 11 / 4 = 2.75 (left: 66 2.75) || 66 / 2.75 = 24 (left: 24) || Answer: (6 * 11) / (11 / 4) = 24",
                "6 * 11 = 66 (left: 4 66 11) || 11 / 4 = 2.75 (left: 66 2.75) || 66 / 2.75 = 24 (left: 24) || Answer: (6 * 11) / (11 / 4) = 24"
            ]
        },
        "Input": "4 6 11 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            }
        ]
    },
    "14": {
        "puzzle": "1 1 3 12",
        "Step 0": {
            "steps": [
                "12 - 3 = 9 (left: 1 1 9)",
                "1 + 3 = 4 (left: 1 4 12)",
                "1 * 1 = 1 (left: 1 3 12)",
                "1 + 1 = 2 (left: 2 3 12)",
                "3 + 1 = 4 (left: 1 4 12)",
                "12 / 3 = 4 (left: 1 4 12)",
                "3 * 1 = 3 (left: 3 3 12)",
                "1 + 1 = 2 (left: 2 3 12)",
                "12 - 1 = 11 (left: 1 3 11)",
                "12 - 3 = 9 (left: 1 1 9)"
            ],
            "Evaluation": [
                3.0,
                2.001,
                41.0,
                2.001,
                1.002,
                0.003,
                0.003,
                0.003,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 0.1",
                "2 <- 0.2",
                "3 <- 0.1",
                "4 <- 0.2",
                "5 <- 0.2",
                "6 <- 0.2",
                "7 <- INIT",
                "8 <- 0.2",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 3 = 9 (left: 1 1 9) || Possible next steps:",
                "1 + 3 = 4 (left: 1 4 12) || 12 - 4 = 8 (",
                "1 * 1 = 1 (left: 1 3 12) || 3 + 12 = 15 (left: 1 15)",
                "1 + 3 = 4 (left: 1 4 12) || 12 - 4 = 8 (left: 1 8)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 1 = 11 (left: 3 11)",
                "3 * 1 = 3 (left: 1 3 12)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9)",
                "3 + 1 = 4 (left: 1 4 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                40.0,
                0.003,
                60.0,
                1.002,
                40.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 1.5",
                "2 <- 1.8",
                "3 <- 0.2",
                "4 <- INIT",
                "5 <- 1.5",
                "6 <- 1.8",
                "7 <- 1.7",
                "8 <- 1.5",
                "9 <- 1.8"
            ]
        },
        "Step 2": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 12) || Input: 4 6 10",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9 9)",
                "1 * 1 = 1 (left: 1 3 12) || 1 + 3 = 4 (left: 4 12)",
                "1 * 1 = 1 (left: 1 3 12)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "3 * 1 = 3 (left: 1 3 12) || Input: 4 6 7 13",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 + 9 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 + 9 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.003,
                60.0,
                0.002,
                0.002,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 1.5",
                "2 <- 2.4",
                "3 <- 1.7",
                "4 <- 1.3",
                "5 <- 2.4",
                "6 <- 1.8",
                "7 <- 1.5",
                "8 <- 1.5",
                "9 <- 1.5"
            ]
        },
        "Step 3": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36)",
                "3 * 1 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4 12)",
                "1 + 3 = 4 (left: 1 4 12) || 12 - 4 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 1 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                60.0,
                0.003,
                0.0,
                0.003,
                0.0,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 1.8",
                "2 <- 2.4",
                "3 <- 1.5",
                "4 <- 1.3",
                "5 <- 3.0",
                "6 <- 1.7",
                "7 <- 1.5",
                "8 <- 1.3",
                "9 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 1 = 12 (left: 3 12)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "1 + 3 = 4 (left: 1 4 12) || 12 - 4 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "3 * 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "3 * 1 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 + 9 = 10 (left: 10)",
                "1 + 3 = 4 (left: 1 4 12) || 12 - 4 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "3 * 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                20.002,
                0.003,
                0.002,
                0.002,
                40.0,
                0.002,
                0.002,
                0.0
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 0.2",
                "2 <- 3.0",
                "3 <- 3.2",
                "4 <- 4.6",
                "5 <- 4.2",
                "6 <- 3.0",
                "7 <- 4.2",
                "8 <- 3.0",
                "9 <- 3.2"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12)",
                "3 * 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 + 9 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "3 * 1 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 1 = 12 (left: 3 12) || 12 - 3 = 9 (left: 9)",
                "3 * 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 1 = 12 (left: 3 12) || 3 * 12 = 36 (left: 36)",
                "3 * 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 "
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.003,
                40.0,
                0.002,
                0.003,
                0.0,
                60.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 1.6",
                "2 <- 1.8",
                "3 <- 5.1",
                "4 <- 5.7",
                "5 <- 4.2",
                "6 <- 5.1",
                "7 <- 5.7",
                "8 <- 4.6",
                "9 <- 4.6"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 12 / 1 = 12 (left: 3 12) || 3 * 12 = 36 (left: 36)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 1 = 11 (left: 3 11) || 11 / 3 = 3.66667 (left: 3.66667)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 1 = 12 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 cannot be broken down further as it is already a single number.",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 1 = 12 (left: 3 12) || 3 + 12 = 15 (left: 15)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6 12)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 1 = 12 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 / 2 = 18",
                "3 * 1 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "3 * 1 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.002,
                60.0,
                0.003,
                0.001,
                20.002,
                0.003,
                0.0,
                0.001
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 5.1",
                "2 <- 3.0",
                "3 <- 5.1",
                "4 <- 6.3",
                "5 <- 5.7",
                "6 <- 5.1",
                "7 <- 5.3",
                "8 <- 6.3",
                "9 <- 5.3"
            ]
        },
        "Step 7": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 - 2) * 12 = 24",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "3 * 1 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 - 2) * 12 = 24",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 1 = 12 (left: 3 12) || 3 * 12 = 36 (left: 36) || None, as there is only one number provided.",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || There are no possible next steps for the number 36 as it is already a single number.",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 - 2) * 12 = 24",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 + 2 = 38 (left: 38)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.002,
                0.003,
                60.0,
                0.003,
                40.001,
                60.0,
                20.001,
                40.0
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 7.4",
                "2 <- 7.4",
                "3 <- 7.7",
                "4 <- 7.6",
                "5 <- 7.6",
                "6 <- 6.3",
                "7 <- 5.3",
                "8 <- 7.8",
                "9 <- 7.6"
            ]
        },
        "Step 8": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 - 2) * 12 = 24",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 - 12) = 24",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 1 = 12 (left: 3 12) || 3 * 12 = 36 (left: 36) || No possible next steps as there is only one number.",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 1 = 12 (left: 3 12) || 3 * 12 = 36 (left: 36) || No further steps can be taken with the input of 36.",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 1 = 12 (left: 3 12) || 3 * 12 = 36 (left: 36) || There are no possible next steps for the number 36 as it is already the final result.",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 + 12) = 24",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || There are no possible next steps with the input of 36.",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 1 = 12 (left: 3 12) || 12 - 3 = 9 (left: 9 12)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 1 = 12 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 / 2 = 18 (left: 18)"
            ],
            "Evaluation": [
                20.0,
                0.003,
                0.003,
                40.001,
                0.002,
                0.003,
                60.0,
                60.0,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 7.9",
                "1 <- 8.3",
                "2 <- 8.3",
                "3 <- 8.0",
                "4 <- 8.7",
                "5 <- 2.4",
                "6 <- 8.7",
                "7 <- 7.6",
                "8 <- 4.6",
                "9 <- 8.3"
            ]
        },
        "Step 9": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 - 2) * 12 = 24",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 1 = 12 (left: 3 12) || 3 * 12 = 36 (left: 36) || There are no possible next steps for the number 36 as it is already the final result. || There are no possible next steps for the number 36 as it is already the final result.",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 1 = 12 (left: 3 12) || 3 * 12 = 36 (left: 36) || There are no possible next steps for the number 36 as it is already the final result. || There are no possible next steps for the number 36 as it is already the final result.",
                "1 * 1 = 1 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 - 2) * 12 = 24",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 1 = 11 (left: 3 11)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 - 2) * 12 = 24",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 1 = 12 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 + 2 = 38",
                "3 * 1 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5) ",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 1 = 12 (left: 3 12) || 3 * 12 = 36 (left: 36) || There are no possible next steps for the number 36 as it is already the final result. || N/A"
            ]
        },
        "Input": "1 1 3 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "15": {
        "puzzle": "2 2 2 12",
        "Step 0": {
            "steps": [
                "2 * 2 = 4 (left: 4 2 12)",
                "2 * 12 = 24 (left: 2 24 2)",
                "12 - 2 = 10 (left: 2 2 10)",
                "2 - 2 = 0 (left: 0 2 12)",
                "2 + 2 = 4 (left: 2 4 12)",
                "12 / 2 = 6 (left: 2 2 6)",
                "2 * 2 = 4 (left: 4 2 12)",
                "2 + 2 = 4 (left: 4 2 ",
                "12 / 2 = 6 (left: 2 6 2)",
                ""
            ],
            "Evaluation": [
                2.001,
                21.001,
                2.001,
                21.001,
                2.0,
                60.0,
                1.002,
                0.001,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.5",
                "2 <- 0.1",
                "3 <- INIT",
                "4 <- 0.1",
                "5 <- 0.4",
                "6 <- 0.3",
                "7 <- 0.1",
                "8 <- 0.5",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "12 / 2 = 6 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6)",
                "12 / 2 = 6 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 * 12 = 24 (left: 2 24 2) || 24 - 2 = 22 (left: 2 22 2)",
                "2 * 2 = 4 (left: 4 2 12)",
                "2 * 12 = 24 (left: 2 24 2) || 24 / 2 = 12 (left: 12 2)",
                "2 + 2 = 4 (left: 2 4 12) || 4 * 12 = 48 (left: 48)",
                "2 - 2 = 0 (left: 0 2 12) || 2 / 0 = Error (division by zero)",
                "2 * 12 = 24 (left: 2 24 2) || 24 - 2 = 22 (left: 2 22 ",
                "12 / 2 = 6 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)",
                "2 * 2 = 4 (left: 4 2 12)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                20.002,
                3.0,
                60.0,
                0.003,
                0.003,
                20.002,
                1.001,
                1.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.0",
                "2 <- 1.0",
                "3 <- 1.2",
                "4 <- 1.4",
                "5 <- 1.4",
                "6 <- 1.4",
                "7 <- 1.0",
                "8 <- 0.1",
                "9 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "12 / 2 = 6 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "12 / 2 = 6 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "12 / 2 = 6 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "2 * 12 = 24 (left: 2 24 2) || 24 - 2 = 22 (left: 2 22 2) || 2 * 22 = 44 (left: 2 44 2)",
                "2 * 12 = 24 (left: 2 24 2) || 24 / 2 = 12 (left: 12 2) || 12 - 2 = 10 (left: 10)",
                "2 * 12 = 24 (left: 2 24 2) || 24 / 2 = 12 (left: 12 2) || 12 + 2 = 14 (left: 14)",
                "2 * 12 = 24 (left: 2 24 2) || 24 / 2 = 12 (left: 12 2) || 12 + 2 = 14 (left: 14) ",
                "12 / 2 = 6 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 4 / 6 = 0.6666666666666666 (left: 0.6666666666666666)",
                "2 * 12 = 24 (left: 2 24 2) || 2 + 24 = 26 (left: 2 26 2)",
                "2 * 12 = 24 (left: 2 24 2) || 24 / 2 = 12 (left: 12 2) || 12 / 2 = 6 (left: 6 2)"
            ],
            "Evaluation": [
                60.0,
                0.001,
                0.003,
                21.001,
                0.001,
                0.001,
                0.002,
                20.002,
                21.001,
                2.001
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.0",
                "2 <- 2.8",
                "3 <- 0.8",
                "4 <- 1.4",
                "5 <- 2.0",
                "6 <- 1.0",
                "7 <- 2.0",
                "8 <- 1.4",
                "9 <- 1.0"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 12 = 24 (left: 2 24 2) || 24 / 2 = 12 (left: 12 2) || 24 - 6 = 18 (left: 18)",
                "12 / 2 = 6 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 3",
                "2 * 12 = 24 (left: 2 24 2) || 2 + 24 = 26 (left: 2 26 2) || 2 * 26 = 52 (left: 2 52 2)",
                "12 / 2 = 6 (left: 2 6 2) || 2 + 6 = 8 (left: 2 8)",
                "2 * 12 = 24 (left: 2 24 2) || 24 / 2 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24)",
                "12 / 2 = 6 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (12 / 2) * (2 + 2) = 24",
                "12 / 2 = 6 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "12 / 2 = 6 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 + 2) * (2 + 12) = 24",
                "2 * 12 = 24 (left: 2 24 2) || 24 / 2 = 12 (left: 12 2) || 12 * 2 = 24 (left: 24)",
                "12 / 2 = 6 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)"
            ]
        },
        "Input": "2 2 2 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "16": {
        "puzzle": "1 1 4 12",
        "Step 0": {
            "steps": [
                "1 / 1 = 1 (left: 1 4 12)",
                "12 / 4 = 3 (left: 1 3 12)",
                "12 * 1 = 12 (left: 1 4 ",
                "1 * 1 = 1 (left: 1 4 12)",
                "12 - 4 = 8 (left: 1 8 12)",
                "1 * 1 = 1 (left: 1 4 12)",
                "12 - 1 = 11 (left: 1 4 11)",
                "1 * 4 = 4 (left: 4 4 12)",
                "1 * 1 = 1 (left: 1 4 12)",
                "12 / 4 = 3 (left: 1 3 12)"
            ],
            "Evaluation": [
                1.002,
                60.0,
                0.002,
                0.003,
                1.002,
                1.002,
                0.003,
                21.001,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.9",
                "2 <- 0.9",
                "3 <- 0.9",
                "4 <- 0.1",
                "5 <- 0.5",
                "6 <- 0.1",
                "7 <- 0.9",
                "8 <- 0.1",
                "9 <- 0.9"
            ]
        },
        "Step 1": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12) || 12 - 1 = 11 (left: 3 11)",
                "12 / 4 = 3 (left: 1 3 12) || 3 + 12 = 15 (left: 1 15)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 1 = 12 (left:",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 1 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 4 12) || 12 - 1 = 11 (left: 4 11)",
                "12 / 4 = 3 (left: 1 3 12) || 1 + 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 1 3 12) || 12 - 1 = 11 (left:",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                40.0,
                0.001,
                0.003,
                0.003,
                0.003,
                40.001,
                21.001,
                20.002
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 0.9",
                "2 <- 1.2",
                "3 <- 1.2",
                "4 <- 1.2",
                "5 <- 1.8",
                "6 <- 1.2",
                "7 <- 1.8",
                "8 <- 0.1",
                "9 <- 1.7"
            ]
        },
        "Step 2": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12) || 12 - 1 = 11 (left: || 1 * 12",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left:",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 + 4 = 5",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9)",
                "12 / 4 = 3 (left: 1 3 12) || 12 - 1 = 11 (left:",
                "12 / 4 = 3 (left: 1 3 12) || 12 - 1 = 11 (left: || 12 / 1 = 12 (left: 1 12)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.001,
                0.001,
                0.002,
                0.002,
                0.003,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- 1.8",
                "3 <- 1.7",
                "4 <- 1.2",
                "5 <- 1.2",
                "6 <- 1.8",
                "7 <- 1.2",
                "8 <- 0.9",
                "9 <- 0.7"
            ]
        },
        "Step 3": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 3 * 4 = 12 (left: 3 12)",
                "12 / 4 = 3 (left: 1 3 12) || 12 - 1 = 11 (left: || 12 - 1 = 11 (left: 11)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 3 + 12 = 15 (left: 15)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)",
                "1 * 4 = 4 (left: 4 4 12) || 4 + 4 = 8 (left: 8 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.001,
                0.003,
                0.003,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 1.7",
                "2 <- 0.1",
                "3 <- 1.2",
                "4 <- 1.8",
                "5 <- 3.8",
                "6 <- 1.2",
                "7 <- 1.2",
                "8 <- 0.9",
                "9 <- 0.1"
            ]
        },
        "Step 4": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "12 / 4 = 3 (left: 1 3 12) || 12 - 1 = 11 (left: || 12 * 3 = 36 (left: 36)",
                "12 / 4 = 3 (left: 1 3 12) || 12 - 1 = 11 (left: 3 11)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 3 + 9 = 12 (left: 12)",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 1 = 3 (left: 3 12)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left:"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.003,
                0.002,
                60.0,
                0.002,
                0.003,
                0.003,
                40.001,
                0.0
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 3.8",
                "2 <- 4.4",
                "3 <- 1.8",
                "4 <- 4.8",
                "5 <- 3.8",
                "6 <- 1.2",
                "7 <- 4.4",
                "8 <- 3.8",
                "9 <- 4.4"
            ]
        },
        "Step 5": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || There are no possible next steps with only one number provided.",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || No more possible next steps as there is only one number left.",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36)",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 1 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 / 4 = 9",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || No possible next steps with the input of 36."
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.0,
                20.0,
                40.0,
                0.001,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.8",
                "1 <- 5.3",
                "2 <- 5.4",
                "3 <- 4.1",
                "4 <- 5.4",
                "5 <- 5.3",
                "6 <- INIT",
                "7 <- 5.4",
                "8 <- 4.1",
                "9 <- 5.3"
            ]
        },
        "Step 6": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12) || 3 * 1 = 3 (left: 3 12) || 3 + 12 = 15 (left: 15)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 * 2 = 72",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 1 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 / 4 = 9 (left: 9)",
                "12 / 4 = 3 (left: 1 3 12) || 12 - 1 = 11 (left: || 12 * 3 = 36 (left: 36) || No possible next steps as there is only one number.",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 1 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || There are no possible next steps with the input 36.",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || There are no possible next steps as there is only one number provided.",
                "4 + 1 = 5 (left: 1 5 12)",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 1 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 / 12 = 3 (left: 3)",
                "12 / 4 = 3 (left: 1 3 12) || 12 - 1 = 11 (left: || 12 * 3 = 36 (left: 36) || 36 / 2 = 18",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 / 2 = 18"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                2.001,
                0.003,
                0.003,
                20.0,
                40.0
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 4.4",
                "2 <- 0.1",
                "3 <- 6.8",
                "4 <- 6.9",
                "5 <- 4.1",
                "6 <- 4.8",
                "7 <- 4.4",
                "8 <- 5.4",
                "9 <- 4.8"
            ]
        },
        "Step 7": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || No possible next steps as there is only one number provided.",
                "12 / 4 = 3 (left: 1 3 12) || Possible",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 1 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 / 2 = 18",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 + 1 = 5 (left: 5)",
                "12 / 4 = 3 (left: 1 3 12) || 12 - 1 = 11 (left: || 12 * 3 = 36 (left: 36) || 36 is a prime number, so there are no possible arithmetic operations to perform on it.",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 1 = 3 (left: 3 12) || 3 + 12 = 15 (left: 15)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 / 2 = 18",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 1 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || There are no possible next steps for the number 36 as it is not possible to perform any arithmetic operation with the input provided.",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 1 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                40.001
            ],
            "Resampling": [
                "0 <- 7.9",
                "1 <- 6.9",
                "2 <- 6.8",
                "3 <- 7.9",
                "4 <- 4.1",
                "5 <- 4.4",
                "6 <- 6.9",
                "7 <- 7.9",
                "8 <- 4.4",
                "9 <- 1.7"
            ]
        },
        "Step 8": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12) || 3 * 1 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || There are no possible next steps for the input 36.",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 1 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 / 2 = 18",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 1 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 / 2 = 18",
                "12 / 4 = 3 (left: 1 3 12) || 12 - 1 = 11 (left: || 12 * 3 = 36 (left: 36) || 36 / 2 = 18",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || There are no possible next steps for the input 36.",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || Input: 3 9",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 1 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || There are no possible next steps for the number 36.",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 / 2 = 18",
                "12 / 4 = 3 (left: 1 3 12) || 12 - 1 = 11 (left: || 12 - 1 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 7.9",
                "1 <- 5.3",
                "2 <- 6.9",
                "3 <- 5.4",
                "4 <- 0.9",
                "5 <- 7.9",
                "6 <- 6.9",
                "7 <- 6.9",
                "8 <- 4.4",
                "9 <- 4.4"
            ]
        },
        "Step 9": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12) || 3 * 1 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 / 2 = 18",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || No possible next steps as there is only one number.",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 1 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || There are no possible next steps with only one number given.",
                "12 / 4 = 3 (left: 1 3 12) || 1 + 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 1 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 / 2 = 18",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 / 2 = 18",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 / 6 = 6 (left: 6)"
            ]
        },
        "Input": "1 1 4 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "17": {
        "puzzle": "1 1 12 12",
        "Step 0": {
            "steps": [
                "12 - 1 = 11 (left: 1 12 11)",
                "12 - 1 = 11 (left: 1 12 11)",
                "1 + 1 = 2 (left: 2 12 12)",
                "12 - 1 = 11 (left: 1 11 12)",
                "12 + 1 = 13 (left: 1 12 13)",
                "1 + 1 = 2 (left: 2 12 12)",
                "1 + 1 = 2 (left: 2 12 12)",
                "1 - 1 = 0 (left: 0 12 12)",
                "12 - 1 = 11 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 12 12)"
            ],
            "Evaluation": [
                21.001,
                1.002,
                0.003,
                21.001,
                0.003,
                0.003,
                0.003,
                60.0,
                21.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 0.3",
                "2 <- 0.8",
                "3 <- INIT",
                "4 <- 0.3",
                "5 <- 0.0",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- 0.7",
                "9 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "1 - 1 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 0 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 / 1 = 12 (left: 1 12 12)",
                "12 - 1 = 11 (left: 1 11 12) || Input: 3 5 8",
                "12 - 1 = 11 (left: 1 12 11) || 12 - 1 = 11 (left: 11 11)",
                "12 / 1 = 12 (left: 1 12 12)",
                "1 * 1 = 1 (left: 1 12 12)",
                "1 - 1 = 0 (left: 0 12 12) || 0 / 12 = 0 (left: 0 12)",
                "12 - 1 = 11 (left: 1 12 11) || 11 - 1 = 10 (left: 10 11)"
            ],
            "Evaluation": [
                20.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                40.001,
                21.001,
                40.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 1.8",
                "2 <- INIT",
                "3 <- 0.7",
                "4 <- 1.6",
                "5 <- 1.8",
                "6 <- 0.0",
                "7 <- 1.6",
                "8 <- 0.3",
                "9 <- 1.8"
            ]
        },
        "Step 2": {
            "steps": [
                "1 - 1 = 0 (left: 0 12 12) || 0 / 12 = 0 (left: 0 12) || 12 / 0 = undefined (left: 0 12)",
                "1 - 1 = 0 (left: 0 12 12) || 0 / 12 = 0 (left: 0 12) || 0 * 12 = 0 (left: 0)",
                "12 - 1 = 11 (left: 1 11 12)",
                "1 - 1 = 0 (left: 0 12 12) || 12 / 0 = undefined",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "1 - 1 = 0 (left: 0 12 12) || 0 / 12 = 0 (left: 0 12) || 0 + 12 = 12",
                "12 - 1 = 11 (left: 1 12 11) || 12 * 1 = 12 (left: 11 12)",
                "12 / 1 = 12 (left: 1 12 12) || 12 + 1 = 13 (left: 1 13)",
                "12 - 1 = 11 (left: 1 11 12) || 12 / 1 = 12 (left: 11 12)",
                "1 - 1 = 0 (left: 0 12 12) || 0 / 12 = 0 (left: 0 12) || 0 + 12 = 12 (left: 12)"
            ],
            "Evaluation": [
                20.0,
                0.003,
                21.001,
                0.003,
                60.0,
                0.003,
                0.002,
                1.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 0.7",
                "2 <- 0.8",
                "3 <- 2.4",
                "4 <- 2.4",
                "5 <- 1.6",
                "6 <- 0.3",
                "7 <- 1.6",
                "8 <- 1.8",
                "9 <- 2.4"
            ]
        },
        "Step 3": {
            "steps": [
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "1 - 1 = 0 (left: 0 12 12) || 12 / 0 = undefined",
                "12 - 1 = 11 (left: 1 11 12) || 11 - 1 = 10 (left: 10)",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 / 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 12 - 1 = 11 (left: 11 12)",
                "12 / 1 = 12 (left: 1 12 12) || 1 + 12 = 13 (left: 12 13)",
                "1 - 1 = 0 (left: 0 12 12) || 0 / 12 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.001,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 2.2",
                "2 <- 2.4",
                "3 <- 1.6",
                "4 <- 2.4",
                "5 <- 1.6",
                "6 <- 1.8",
                "7 <- 0.0",
                "8 <- 0.0",
                "9 <- 2.4"
            ]
        },
        "Step 4": {
            "steps": [
                "1 - 1 = 0 (left: 0 12 12) || 0 / 12 = 0 (left: 0 12) || 0 + 12 = 12 (left: 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 / 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 1 = 12 (left: 1 12 12) || 1 + 12 = 13 (left: 12 13)",
                "1 - 1 = 0 (left: 0 12 12) || 0 / 12 = 0 (left: 0 12) || 12 / 0 = undefined",
                "12 - 1 = 11 (left: 1 12 11) || 1 * 12 = 12 (left: 12 11)",
                "12 - 1 = 11 (left: 1 12 11) || 11 + 1 = 12 (left: 12 11)",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                60.0,
                20.002,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 4.4",
                "2 <- 4.3",
                "3 <- 4.3",
                "4 <- 4.4",
                "5 <- 4.3",
                "6 <- 1.8",
                "7 <- 4.3",
                "8 <- 2.4",
                "9 <- 2.4"
            ]
        },
        "Step 5": {
            "steps": [
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2 12)",
                "12 / 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 12 = 144 (left: 24 144)",
                "12 / 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "1 - 1 = 0 (left: 0 12 12) || 0 / 12 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "12 / 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 1 11) || 1 + 11 = 12 (left: 12) ",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)"
            ],
            "Evaluation": [
                20.002,
                60.0,
                0.002,
                0.003,
                60.0,
                0.002,
                0.003,
                0.003,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 5.1",
                "2 <- 4.3",
                "3 <- 5.4",
                "4 <- 5.4",
                "5 <- 2.0",
                "6 <- 5.4",
                "7 <- 5.8",
                "8 <- 5.8",
                "9 <- 1.6"
            ]
        },
        "Step 6": {
            "steps": [
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 / 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 12 = 144 (left: 24 144) || 144 / 24 = 6 (left: 6)",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 12 = 144 (left: 24 144) || 24 + 120 = 144 (left: 144)",
                "1 - 1 = 0 (left: 0 12 12) || 0 / 12 = 0 (left: 0 12) || 12 / 0 = undefined (left: 0 12) || 0 + 12 = 12",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 12 = 144 (left: 24 144) || 24 + 144 = 168 (left: 168)",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (12 / 1) + (12 / 1) = 24",
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (12 / 1) + (12 / 1) = 24",
                "12 / 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)"
            ]
        },
        "Input": "1 1 12 12",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "18": {
        "puzzle": "3 3 3 8",
        "Step 0": {
            "steps": [
                "3 * 3 = 9 (left: 9 3 8)",
                "3 / 3 = 1 (left: 1 3 ",
                "8 - 3 = 5 (left: 3 5 ",
                "3 + 3 = 6 (left: 3 6 8)",
                "3 * 3 = 9 (left: 9 3 8)",
                "3 / 3 = 1 (left: 1 3 8)",
                "8 - 3 = 5 (left: 3 3 5)",
                "3 / 3 = 1 (left: 1 3 ",
                "3 * 3 = 9 (left: 3 8 9)",
                "3 * 3 = 9 (left: 9 3 8)"
            ],
            "Evaluation": [
                2.0,
                0.0,
                1.001,
                1.002,
                3.0,
                60.0,
                3.0,
                0.002,
                60.0,
                22.0
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.8",
                "2 <- 0.5",
                "3 <- 0.5",
                "4 <- 0.9",
                "5 <- 0.8",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- 0.5",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "3 / 3 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5)",
                "3 * 3 = 9 (left: 3 8 9) || 8 - 3 = 5 (left: 5 8 9)",
                "3 / 3 = 1 (left: 1 3 8) || 1 + 3 = 4 (left: 4 8)",
                "3 / 3 = 1 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "3 * 3 = 9 (left: 9 3 8) || 9 * 3 = 27 (left: 27 8)",
                "3 * 3 = 9 (left: 3 8 9) || 3 + 8 = 11 (left: 9 11)",
                "3 + 3 = 6 (left: 3 6 8)",
                "3 * 3 = 9 (left: 3 9 8)",
                "3 / 3 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "3 / 3 = 1 (left: 1 3 8)"
            ],
            "Evaluation": [
                40.0,
                3.0,
                0.003,
                0.0,
                1.001,
                2.0,
                1.002,
                3.0,
                60.0,
                22.0
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 1.8",
                "2 <- 1.8",
                "3 <- 1.0",
                "4 <- 1.1",
                "5 <- 1.0",
                "6 <- 0.8",
                "7 <- 1.1",
                "8 <- 1.7",
                "9 <- 1.8"
            ]
        },
        "Step 2": {
            "steps": [
                "3 / 3 = 1 (left: 1 3 8) || 8 / 3 = 2.67 (left: 1 2.67)",
                "3 / 3 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 5 * 10 = 50",
                "3 / 3 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 / 3 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 1 + 5 = 6 (left: 6)",
                "3 * 3 = 9 (left: 3 8 9) || 8 - 3 = 5 (left: 5 8 9) || 5 * 8 = 40 (left: 9 40)",
                "3 / 3 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "3 * 3 = 9 (left: 3 8 9) || 9 - 3 = 6 (left: 8 6)",
                "3 * 3 = 9 (left: 3 8 9) || 8 - 3 = 5 (left: 5 8 9) || 8 + 5 = 13 (left: 9 13)",
                "3 * 3 = 9 (left: 3 9 8) || 9 / 3 = 3 (left: 3)",
                "3 / 3 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || Possible next steps:"
            ],
            "Evaluation": [
                0.001,
                0.003,
                60.0,
                0.003,
                0.003,
                0.002,
                0.003,
                0.002,
                20.001,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.8",
                "2 <- 2.2",
                "3 <- 2.2",
                "4 <- 2.2",
                "5 <- 1.0",
                "6 <- 1.9",
                "7 <- 1.0",
                "8 <- 0.8",
                "9 <- 0.9"
            ]
        },
        "Step 3": {
            "steps": [
                "3 * 3 = 9 (left: 3 8 9)",
                "3 * 3 = 9 (left: 3 8 9) || 9 - 3 = 6 (left: ",
                "3 / 3 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 3) * (8 / 3) = 24",
                "3 / 3 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 3) * 8 = 24",
                "3 / 3 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 8) / 3 = 24",
                "3 / 3 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 1 + 5 = 6 (left: 6)",
                "3 / 3 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "3 / 3 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 1 + 5 = 6",
                "3 * 3 = 9 (left: 3 8 9) || 9 + 3 = 12 (left: 8 12)",
                "3 * 3 = 9 (left: 9 3 8) || 10"
            ]
        },
        "Input": "3 3 3 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "19": {
        "puzzle": "1 1 2 6",
        "Step 0": {
            "steps": [
                "2 * 1 = 2 (left: 2 6 4)",
                "1 + 1 = 2 (left: 2 2 6)",
                "6 - 1 = 5 (left: 1 2 ",
                "1 * 1 = 1 (left: 1 2 6)",
                "1 + 1 = 2 (left: 2 2 6)",
                "6 - 1 = 5 (left: 1 2 ",
                "6 / 2 = 3 (left: 1 3 6)",
                "6 - 2 = 4 (left: 1 2 4)",
                "1 * 1 = 1 (left: 1 2 6)",
                "2 + 1 = 3 (left: 1 3 6)"
            ],
            "Evaluation": [
                1.002,
                41.0,
                20.002,
                1.002,
                60.0,
                0.002,
                22.0,
                2.001,
                2.001,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.2",
                "2 <- 0.6",
                "3 <- 0.4",
                "4 <- 0.6",
                "5 <- 0.1",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- 0.1",
                "9 <- 0.6"
            ]
        },
        "Step 1": {
            "steps": [
                "6 - 1 = 5 (left: 1 2 ",
                "6 - 1 = 5 (left: 1 2  || 1 * 2 = 2 (left: 2)",
                "6 / 2 = 3 (left: 1 3 6) || 1 * 3 = 3 (left: 3)",
                "1 + 1 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6)",
                "6 / 2 = 3 (left: 1 3 6) || Input: 5 10 15",
                "1 + 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6)",
                "1 * 1 = 1 (left: 1 2 6)",
                "6 - 2 = 4 (left: 1 2 4)",
                "1 + 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)",
                "6 / 2 = 3 (left: 1 3 6) || 3 / 1 = 3 (left: 3)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.0,
                40.0,
                0.003,
                41.0,
                0.003,
                3.0,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 0.1",
                "2 <- 0.1",
                "3 <- 1.7",
                "4 <- 0.4",
                "5 <- 0.1",
                "6 <- 1.5",
                "7 <- 1.5",
                "8 <- INIT",
                "9 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "6 / 2 = 3 (left: 1 3 6) || 5 + 10 = 15 (left: 15)",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6)",
                "1 + 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "6 - 2 = 4 (left: 1 2 4) || 1 + 2 = 3 (left: 3 4)",
                "1 + 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 3 2)",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6)",
                "1 + 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "1 + 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "1 + 1 = 2 (left: 2 2 6)",
                "1 + 1 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.003,
                21.0,
                1.001,
                40.0,
                0.001,
                0.003,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 1.3",
                "2 <- 2.5",
                "3 <- 2.8",
                "4 <- 2.3",
                "5 <- 0.1",
                "6 <- 1.3",
                "7 <- 2.5",
                "8 <- 2.3",
                "9 <- 2.8"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "1 + 1 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 4 - 6 = -2 (left: -2)",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 10 + 5 = 15 (left: 15 2)",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6)",
                "6 - 2 = 4 (left: 1 2 4) || 1 + 2 = 3 (left: 3 4) || 3 * 4 = 12 (left: 12)",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6)",
                "1 + 1 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 3 + 9 = 12 (left: 12",
                "6 - 2 = 4 (left: 1 2 4) || 1 + 2 = 3 (left: 3 4) || 3 * 4 = 12 (left: 12)",
                "1 + 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)"
            ],
            "Evaluation": [
                0.001,
                0.0,
                0.003,
                60.0,
                0.002,
                60.0,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.5",
                "1 <- 3.5",
                "2 <- 2.1",
                "3 <- 3.5",
                "4 <- 0.1",
                "5 <- 3.3",
                "6 <- 3.3",
                "7 <- 1.5",
                "8 <- 3.3",
                "9 <- 2.1"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 4 / 6 = 0.6666666666666666 (left: 0.6666666666666666)",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                1.001,
                60.0,
                0.001,
                60.0,
                60.0,
                0.001,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.8",
                "2 <- 1.3",
                "3 <- 4.6",
                "4 <- 4.3",
                "5 <- 2.1",
                "6 <- 3.5",
                "7 <- 4.6",
                "8 <- 4.3",
                "9 <- 4.3"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6)",
                "1 + 1 = 2 (left: 2 2 6) || 2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 1) * (2 + 6) = 24",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 1) * (2 + 6) = 24",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 1) * (2 + 6) = 24",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: ((1 + 1) + 2) * 6 = 24",
                "1 + 1 = 2 (left: 2 2 6) || 2 + 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 1) * (2 + 6) = 24"
            ]
        },
        "Input": "1 1 2 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 1
            },
            {
                "r": -1
            }
        ]
    },
    "20": {
        "puzzle": "1 1 2 11",
        "Step 0": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 11)",
                "1 + 1 = 2 (left: 2 2 11)",
                "11 - 1 = 10 (left: 1 2 10)",
                "2 * 1 = 2 (left: 2 2 11)",
                "2 * 1 = 2 (left: 2 2 11)",
                "11 / 1 = 11 (left: 1 2 ",
                "1 * 1 = 1 (left: 1 2 11)",
                "1 + 1 = 2 (left: 2 2 11)",
                "2 + 1 = 3 (left: 1 3 11)",
                "2 + 1 = 3 (left: 1 3 11)"
            ],
            "Evaluation": [
                0.003,
                21.001,
                2.001,
                1.001,
                21.001,
                0.003,
                0.002,
                20.002,
                3.0,
                2.001
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.4",
                "2 <- 0.7",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 0.1",
                "6 <- 0.7",
                "7 <- 0.4",
                "8 <- 0.1",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 11) || 2 - 2 = 0 (left: 0 11)",
                "2 * 1 = 2 (left: 2 2 11) || 2 * 2 = 4 (left: 4 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 + 2 = 4 (left: 4 11)",
                "11 - 1 = 10 (left: 1 2 10)",
                "2 * 1 = 2 (left: 2 2 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11)",
                "1 + 1 = 2 (left: 2 2 11) || 11 / 2 = 5.5 (left: 2 5.5)",
                "2 * 1 = 2 (left: 2 2 11) || 11 - 2 = 9 (left: 2 9)",
                "1 + 1 = 2 (left: 2 2 11) || 2 * 2 = 4 (left: 4 11)",
                "1 * 2 = 2 (left: 2 2 "
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.002,
                0.003,
                1.002,
                60.0,
                1.001,
                0.001,
                0.001,
                1.001
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 1.5",
                "2 <- 1.5",
                "3 <- INIT",
                "4 <- 0.1",
                "5 <- 1.5",
                "6 <- 1.5",
                "7 <- 1.5",
                "8 <- 1.5",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 6 - 3 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 2 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 * 2 = 4 (left: 4 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "11 - 2 = 9 (left: 1 2 9)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.001,
                1.0,
                0.002,
                0.002,
                0.003,
                0.003,
                0.002,
                1.001
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 1.5",
                "2 <- 1.5",
                "3 <- 1.5",
                "4 <- 0.1",
                "5 <- 1.5",
                "6 <- 1.5",
                "7 <- 1.5",
                "8 <- 1.5",
                "9 <- 1.5"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 2 11) || 11 - 2 = ",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 1 + 11 = 12",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 + 1 = 12 (left: 12)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.002,
                0.002,
                0.003,
                0.003,
                0.001,
                0.001,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 0.2",
                "2 <- 1.5",
                "3 <- 1.5",
                "4 <- 1.5",
                "5 <- 0.4",
                "6 <- 1.5",
                "7 <- 0.2",
                "8 <- 1.5",
                "9 <- 2.3"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "11 - 1 = 10 (left: 1 2 10) || 1 + 2 = 3 (left: 3 10)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "2 * 1 = 2 (left: 2 2 11) || 11 - 2 = ",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 2 11) || 1 * 11 = 11 (left:"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.002,
                60.0,
                0.002,
                1.0
            ],
            "Resampling": [
                "0 <- 4.7",
                "1 <- 0.8",
                "2 <- 4.7",
                "3 <- 4.7",
                "4 <- 4.7",
                "5 <- 4.9",
                "6 <- 4.7",
                "7 <- 4.7",
                "8 <- 4.7",
                "9 <- 4.7"
            ]
        },
        "Step 5": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 + 8 = 9 (left: 9)",
                "2 + 1 = 3 (left: 1 3 11) || 3 * 11 = 33 (left: 1 33)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 + 8 = 9 (left: 8)",
                "1 * 1 = 1 (left: 1 2 11) || 1 * 11 = 11 (left: || Possible next steps:",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 + 8 = 9 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 + 8 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.002,
                0.003,
                0.002,
                0.003,
                0.001,
                0.002,
                0.002,
                0.0
            ],
            "Resampling": [
                "0 <- 4.7",
                "1 <- 4.7",
                "2 <- 4.7",
                "3 <- 4.7",
                "4 <- 4.7",
                "5 <- 4.7",
                "6 <- 1.5",
                "7 <- 1.5",
                "8 <- 4.7",
                "9 <- 2.8"
            ]
        },
        "Step 6": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 + 8 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 + 8 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10) || 10 + 10 = 20"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.0,
                0.002,
                0.001,
                0.001,
                0.002,
                0.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.7",
                "1 <- 1.5",
                "2 <- 0.4",
                "3 <- 4.7",
                "4 <- 4.7",
                "5 <- 4.7",
                "6 <- 4.7",
                "7 <- 0.1",
                "8 <- 4.7",
                "9 <- 1.5"
            ]
        },
        "Step 7": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "2 * 1 = 2 (left: 2 2 11) || 11 / 2 = 5.5 (left: 2 5.5)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 + 8 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                2.001,
                0.003,
                0.001,
                0.0,
                0.003,
                2.0,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 4.7",
                "2 <- 7.7",
                "3 <- 7.7",
                "4 <- 1.5",
                "5 <- 4.7",
                "6 <- 7.2",
                "7 <- 4.7",
                "8 <- 4.7",
                "9 <- 4.7"
            ]
        },
        "Step 8": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10) || 10 / 2 = 5",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 + 8 = 9 (left: 9)",
                "2 * 1 = 2 (left: 2 2 11) || 11 / 2 = 5.5 (left: 2 5.5) || 5.5 / 2 = 2.75 (left: 2.75)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 + 8 = 9 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 + 8 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.002,
                0.003,
                0.002,
                0.003,
                0.002,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 4.7",
                "1 <- 7.7",
                "2 <- 1.5",
                "3 <- 4.7",
                "4 <- 7.7",
                "5 <- 7.2",
                "6 <- 4.7",
                "7 <- 1.5",
                "8 <- 4.7",
                "9 <- 4.7"
            ]
        },
        "Step 9": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 + 8 = 9 (left: 8 9)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "2 * 1 = 2 (left: 2 2 11) || 11 / 2 = 5.5 (left: 2 5.5) || 2 * 5.5 = 11 (left: 11)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 1 + 8 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 2 10) || 10 - 2 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)"
            ]
        },
        "Input": "1 1 2 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "21": {
        "puzzle": "1 2 3 4",
        "Step 0": {
            "steps": [
                "3 + 4 = 7 (left: 1 2 7)",
                "2 * 3 = 6 (left: 1 6 4)",
                "4 - 3 = 1 (left: 1 2 4)",
                "3 + 4 = 7 (left: 1 2 7)",
                "3 + 4 = 7 (left: 1 2 7)",
                "3 - 2 = 1 (left: 1 2 ",
                "1 * 2 = 2 (left: 2 3 4)",
                "2 * 3 = 6 (left: 1 6 4)",
                "1 + 2 = 3 (left: 3 3 4)",
                "2 * 3 = 6 (left: 1 6 4)"
            ],
            "Evaluation": [
                1.002,
                60.0,
                0.003,
                2.001,
                1.002,
                0.003,
                60.0,
                60.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 0.6",
                "2 <- 0.1",
                "3 <- 0.9",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 0.9",
                "7 <- 0.1",
                "8 <- 0.7",
                "9 <- 0.9"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 3 = 6 (left: 1 6 4) || 6 - 4 = 2 (left: 2)",
                "1 * 2 = 2 (left: 2 3 4) || 4 / 2 = 2 (left: 2 2)",
                "2 * 3 = 6 (left: 1 6 4) || 1 + 6 = 7 (left: 4 7)",
                "2 * 3 = 6 (left: 1 6 4) || 6 + 4 = 10 (left: 1 10)",
                "1 + 2 = 3 (left: 3 3 4)",
                "3 + 4 = 7 (left: 1 2 7)",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4)",
                "2 * 3 = 6 (left: 1 6 4) || 4 + 1 = 5 (left: 5 4)",
                "2 * 3 = 6 (left: 1 6 4) || 4 - 1 = ",
                "2 * 3 = 6 (left: 1 6 4) || 1 + 6 = 7 (left: 7 4)"
            ],
            "Evaluation": [
                0.0,
                21.0,
                1.0,
                60.0,
                2.001,
                1.002,
                60.0,
                3.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 1.3",
                "2 <- 0.6",
                "3 <- 1.6",
                "4 <- 0.6",
                "5 <- 1.1",
                "6 <- 1.6",
                "7 <- 0.1",
                "8 <- 0.1",
                "9 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24)",
                "2 * 3 = 6 (left: 1 6 4) || 6 + 4 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "1 * 2 = 2 (left: 2 3 4) || 2 + 3 = 5 (left: 4 5)",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4) || 6 - 4 = 2 (left: 2)",
                "1 * 2 = 2 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12)",
                "1 * 2 = 2 (left: 2 3 4) || 4 / 2 = 2 (left: 2 2) || 2 + 2 = 4",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4) || 6 / 4 = 1.5 (left: 1.5)",
                "2 * 3 = 6 (left: 1 6 4) || 1 + 6 = 7 (left: 4 7)",
                "2 * 3 = 6 (left: 1 6 4) || 6 - 1 = 5 (left: 5 4)",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4)"
            ],
            "Evaluation": [
                60.0,
                0.001,
                22.0,
                0.002,
                60.0,
                0.003,
                0.001,
                1.002,
                1.001,
                60.0
            ],
            "Resampling": [
                "0 <- 2.9",
                "1 <- 0.9",
                "2 <- 1.1",
                "3 <- 2.9",
                "4 <- 1.1",
                "5 <- 1.3",
                "6 <- 1.6",
                "7 <- 0.7",
                "8 <- 1.6",
                "9 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24)",
                "2 * 3 = 6 (left: 1 6 4) || 6 * 4 = 24 (left: 24)",
                "1 * 2 = 2 (left: 2 3 4) || 4 / 2 = 2 (left: 2 2) || 2 + 2 = 4",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4) || 6 - 4 = 2 (left: 2)",
                "1 * 2 = 2 (left: 2 3 4) || 4 / 2 = 2 (left: 2 2) || 2 + 2 = 4",
                "2 * 3 = 6 (left: 1 6 4) || 6 + 4 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4) || 6 + 4 = 10 (left: 10)",
                "2 * 3 = 6 (left: 1 6 4) || 6 - 1 = 5 (left: 5 4)",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4) || 6 + 4 = 10 (left: 10)",
                "2 * 3 = 6 (left: 1 6 4) || 6 + 4 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.003,
                0.002,
                0.003,
                0.002,
                0.001,
                1.001,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 3.1",
                "2 <- 0.6",
                "3 <- 0.1",
                "4 <- 3.0",
                "5 <- 2.0",
                "6 <- 3.1",
                "7 <- 0.7",
                "8 <- 0.6",
                "9 <- 3.1"
            ]
        },
        "Step 4": {
            "steps": [
                "2 * 3 = 6 (left: 1 6 4) || 4 + 1 = 5 (left:",
                "2 * 3 = 6 (left: 1 6 4) || 6 * 4 = 24 (left: 24) || Answer: 2 * (3 * 4) = 24",
                "1 * 2 = 2 (left: 2 3 4) || Possible",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4)",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24) || Answer: ((2 * 3) / 1) * 4 = 24",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24) || Answer: (2 * 3) * (6 / 1) = 24",
                "2 * 3 = 6 (left: 1 6 4) || 6 * 4 = 24 (left: 24) || Answer: (2 * 3) * 4 = 24",
                "2 * 3 = 6 (left: 1 6 4) || 1 * 4 = 4 (left:",
                "1 * 2 = 2 (left: 2 3 4) || 3 + 4 = 7 (left: 2 7)",
                "2 * 3 = 6 (left: 1 6 4) || 6 * 4 = 24 (left: 24) || Answer: (2 * 3) * 4 = 24"
            ]
        },
        "Input": "1 2 3 4",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "22": {
        "puzzle": "11 11 12 12",
        "Step 0": {
            "steps": [
                "11 / 11 = 1 (left: 1 12 12)",
                "11 / 11 = 1 (left: 1 12 12)",
                "11 * 11 = 121 (left: 12 12 121)",
                "12 - 11 = 1 (left: 11 1 ",
                "12 + 11 = 23 (left: 11 12 23)",
                "11 + 11 = 22 (left: 22 12 12)",
                "12 / 11 = 1 (left: 11 12 ",
                "12 - 11 = 1 (left: 1 12 12)",
                "11 + 11 = 22 (left: 12 12 22)",
                "11 * 11 = 121 (left: 12 12 121)"
            ],
            "Evaluation": [
                21.001,
                0.002,
                0.003,
                20.0,
                3.0,
                0.003,
                0.001,
                2.001,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.0",
                "2 <- 0.3",
                "3 <- INIT",
                "4 <- 0.9",
                "5 <- 0.0",
                "6 <- INIT",
                "7 <- 0.0",
                "8 <- 0.0",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "11 / 11 = 1 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "11 / 11 = 1 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "12 - 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 1 11)",
                "12 + 11 = 23 (left: 11 12 23)",
                "11 * 11 = 121 (left: 12 12 121) || 12 - 12 = 0 (left: 0 12 121)",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "11 + 11 = 22 (left: 12 12 22)",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12)",
                "11 / 11 = 1 (left: 1 12 12)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                60.0,
                2.0,
                20.002,
                60.0,
                1.002,
                20.002,
                0.003,
                41.0
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 0.3",
                "2 <- 1.9",
                "3 <- 1.2",
                "4 <- 1.5",
                "5 <- 1.2",
                "6 <- 0.0",
                "7 <- 1.9",
                "8 <- 1.2",
                "9 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "12 - 11 = 1 (left: 11 1  || 1 + 11 = 12 (left: 12)",
                "11 / 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 - 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "11 / 11 = 1 (left: 1 12 12) || 1 + 12 = 13 (left: 12 13)",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "12 + 11 = 23 (left: 11 12 23) || 23 - 11 = 12 (left: 12 23)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                40.001,
                0.002,
                0.002,
                0.002,
                0.003,
                60.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 2.0",
                "2 <- 2.7",
                "3 <- 1.2",
                "4 <- 2.7",
                "5 <- 2.7",
                "6 <- 0.0",
                "7 <- 1.2",
                "8 <- 1.5",
                "9 <- 2.7"
            ]
        },
        "Step 3": {
            "steps": [
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (11 / 11) * (12 + 12) = 24",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 - 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "11 / 11 = 1 (left: 1 12 12) || 12 - 1 = 11 (left:",
                "12 - 11 = 1 (left: 11 1  || 11 / 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)"
            ]
        },
        "Input": "11 11 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "23": {
        "puzzle": "3 7 7 8",
        "Step 0": {
            "steps": [
                "3 * 7 = 21 (left: 7 8 21)",
                "8 - 7 = 1 (left: 3 7 1)",
                "3 + 7 = 10 (left: 7 7 8)",
                "3 + 7 = 10 (left: 7 7 8)",
                "3 + 7 = 10 (left: 7 7 8)",
                "7 - 3 = 4 (left: 4 7 8)",
                "7 - 3 = 4 (left: 4 7 8)",
                "3 * 7 = 21 (left: 7 8 ",
                "7 / 3 = 2 (left: 2 7 8)",
                "7 / 3 = 2 (left: 2 7 8)"
            ],
            "Evaluation": [
                2.0,
                3.0,
                2.001,
                3.0,
                2.001,
                22.0,
                2.001,
                0.003,
                1.002,
                3.0
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.3",
                "4 <- 0.3",
                "5 <- INIT",
                "6 <- 0.5",
                "7 <- 0.3",
                "8 <- 0.5",
                "9 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "7 - 3 = 4 (left: 4 7 8) || 7 / 4 = 1.75 (left: 1.75 8)",
                "7 / 3 = 2 (left: 2 7 8)",
                "8 - 3 = 5 (left: 3 7 ",
                "3 + 7 = 10 (left: 7 7 8) || 1",
                "3 + 7 = 10 (left: 7 7 8) || 7 + 7 = 14 (left: 8 14)",
                "8 - 7 = 1 (left: 3 7 1)",
                "7 - 3 = 4 (left: 4 7 8) || 4 + 7 = 11 (left: 8 11)",
                "3 + 7 = 10 (left: 7 7 8) || 7 * 7 = 49 (left: 8 49)",
                "7 - 3 = 4 (left: 4 7 8) || 8 / 4 = 2 (left: 2 8)",
                "7 - 3 = 4 (left: 4 7 8) || 7 / 4 = 1.75 (left: 1.75 8)"
            ],
            "Evaluation": [
                0.002,
                2.001,
                1.0,
                0.003,
                1.002,
                3.0,
                2.001,
                21.0,
                0.002,
                1.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 1.5",
                "2 <- 1.1",
                "3 <- 0.5",
                "4 <- 0.8",
                "5 <- 0.9",
                "6 <- 0.5",
                "7 <- 1.7",
                "8 <- 0.5",
                "9 <- 0.8"
            ]
        },
        "Step 2": {
            "steps": [
                "8 - 7 = 1 (left: 3 7 1) || 3 + 7 = 10 (left: 1 10)",
                "8 - 7 = 1 (left: 3 7 1) || 7 + 1 = 8 (left: 3 8)",
                "7 / 3 = 2 (left: 2 7 8) || 8 / 2 = 4 (left: 4 8)",
                "7 - 3 = 4 (left: 4 7 8) || 7 / 4 = 1.75 (left: 1.75 8)",
                "7 / 3 = 2 (left: 2 7 8) || 8 - 2 = 6 (left: 6 8)",
                "7 / 3 = 2 (left: 2 7 8) || 8 / 2 = 4 (left: 4 8)",
                "7 - 3 = 4 (left: 4 7 8) || 7 * 8 = 56 (left: 4 56)",
                "3 + 7 = 10 (left: 7 7 8) || 7 * 7 = 49 (left: 8 49) || 49 - 8 = 41 (left: 41)",
                "7 - 3 = 4 (left: 4 7 8) || 7 + 4 = 11 (left: 8 11)",
                "7 / 3 = 2 (left: 2 7 8) || 7 / 2 = 3.5 (left: 3.5 8)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.003,
                0.002,
                1.002,
                0.003,
                0.001,
                0.003,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.0",
                "2 <- 2.8",
                "3 <- 2.0",
                "4 <- 2.8",
                "5 <- 2.1",
                "6 <- 0.8",
                "7 <- 2.1",
                "8 <- 2.0",
                "9 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "8 - 7 = 1 (left: 3 7 1) || 7 + 1 = 8 (left: 3 8) || 3 - 8 = -5 (left: -5 8)",
                "8 - 7 = 1 (left: 3 7 1) || 3 + 7 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "7 - 3 = 4 (left: 4 7 8) || 7 + 4 = 11 (left: 8 11) || 8 - 11 = -3 (left: -3)",
                "8 - 7 = 1 (left: 3 7 1) || 3 + 7 = 10 (left: 1 10) || 1 + 10 = 11",
                "7 - 3 = 4 (left: 4 7 8) || 7 + 4 = 11 (left: 8 11) || 8 - 11 = -3 (left: -3)",
                "8 - 7 = 1 (left: 3 7 1) || 7 + 1 = 8 (left: 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "7 / 3 = 2 (left: 2 7 8) || 7 - 2 = 5 (left: 5 8)",
                "8 - 7 = 1 (left: 3 7 1) || 7 + 1 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 - 7 = 1 (left: 3 7 1) || 3 + 7 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "8 - 7 = 1 (left: 3 7 1) || 7 + 1 = 8 (left: 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                0.003,
                0.001,
                0.0,
                2.001,
                0.001,
                0.002,
                0.0
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 3.1",
                "2 <- 2.8",
                "3 <- 2.1",
                "4 <- 2.0",
                "5 <- 2.0",
                "6 <- 2.0",
                "7 <- 1.7",
                "8 <- 2.0",
                "9 <- 2.1"
            ]
        },
        "Step 4": {
            "steps": [
                "8 - 7 = 1 (left: 3 7 1) || 7 + 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 - 7 = 1 (left: 3 7 1) || 3 + 7 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10) || 10 + 10 = 20 (left: 10 20)",
                "7 - 3 = 4 (left: 4 7 8) || 7 + 4 = 11 (left: 8 11) || 8 + 11 = 19 (left: 19)",
                "8 - 7 = 1 (left: 3 7 1) || 7 + 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 - 7 = 1 (left: 3 7 1) || 3 + 7 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "8 - 7 = 1 (left: 3 7 1) || 3 + 7 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "8 - 7 = 1 (left: 3 7 1) || 3 + 7 = 10 (left: 1 10) || 1 + 10 = 11 (left: 10)",
                "3 + 7 = 10 (left: 7 7 8) || 7 * 7 = 49 (left: 8 49) || 49 / 8 = 6.125 (left: 6.125)",
                "8 - 7 = 1 (left: 3 7 1) || 3 + 7 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "8 - 7 = 1 (left: 3 7 1) || 7 + 1 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)"
            ],
            "Evaluation": [
                60.0,
                1.002,
                0.002,
                40.0,
                0.002,
                0.003,
                0.002,
                0.002,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 4.3",
                "2 <- 1.1",
                "3 <- 4.0",
                "4 <- 4.3",
                "5 <- 2.0",
                "6 <- 2.0",
                "7 <- 1.7",
                "8 <- 4.0",
                "9 <- 2.0"
            ]
        },
        "Step 5": {
            "steps": [
                "8 - 7 = 1 (left: 3 7 1) || 7 + 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * (7 + (8 - 7))) = 24",
                "8 - 7 = 1 (left: 3 7 1) || 7 + 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (7 + (8 - 7)) = 24",
                "7 / 3 = 2 (left: 2 7 8) || 2 * 7 = 14 (left: 8 14)",
                "8 - 7 = 1 (left: 3 7 1) || 7 + 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (7 + (8 - 7)) = 24",
                "8 - 7 = 1 (left: 3 7 1) || 7 + 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (7 + (8 - 7)) = 24",
                "8 - 7 = 1 (left: 3 7 1) || 3 + 7 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "8 - 7 = 1 (left: 3 7 1) || 3 + 7 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "3 + 7 = 10 (left: 7 7 8) || 7 * 7 = 49 (left: 8 49) || 49 / 8 = 6.125 (left: 6.125)",
                "8 - 7 = 1 (left: 3 7 1) || 7 + 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (7 + (8 - 7)) = 24",
                "8 - 7 = 1 (left: 3 7 1) || 3 + 7 = 10 (left: 1 10) || 10 + 1 = 11 (left: 11)"
            ]
        },
        "Input": "3 7 7 8",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "24": {
        "puzzle": "1 1 13 13",
        "Step 0": {
            "steps": [
                "13 - 1 = 12 (left: 1 13 12)",
                "13 - 1 = 12 (left: 1 12 13)",
                "13 * 1 = 13 (left: 13 13 13)",
                "13 + 1 = 14 (left: 1 13 14)",
                "13 - 1 = 12 (left: 1 12 13)",
                "13 - 1 = 12 (left: 1 12 13)",
                "1 + 1 = 2 (left: 2 13 13)",
                "13 + 1 = 14 (left: 1 13 14)",
                "13 - 1 = 12 (left: 1 12 13)",
                "13 - 1 = 12 (left: 1 12 13)"
            ],
            "Evaluation": [
                21.001,
                0.003,
                0.003,
                1.002,
                0.002,
                0.003,
                0.002,
                1.002,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.9",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 0.0",
                "6 <- 0.0",
                "7 <- 0.9",
                "8 <- INIT",
                "9 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "13 + 1 = 14 (left: 1 13 14)",
                "13 + 1 = 14 (left: 1 13 14)",
                "13 - 1 = 12 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13)",
                "1 + 1 = 2 (left: 2 13 13)",
                "13 + 1 = 14 (left: 1 13 14)",
                "13 - 1 = 12 (left: 1 13 12) || 1 + 13 = 14 (left: 12 14)",
                "13 - 1 = 12 (left: 1 13 12) || 1 * 13 = 13 (left: 13 12)",
                "13 - 1 = 12 (left: 1 12 13) || 13 + 1 = 14 (left: 12 14)",
                "1 + 1 = 2 (left: 2 13 13)",
                "13 - 1 = 12 (left: 1 13 12) || 13 - 12 = 1 (left: 1 12)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                60.0,
                0.003,
                21.001,
                0.003,
                0.003,
                0.003,
                1.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.2",
                "2 <- 1.2",
                "3 <- 0.9",
                "4 <- 1.4",
                "5 <- 1.2",
                "6 <- 1.4",
                "7 <- 1.4",
                "8 <- 1.2",
                "9 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "13 + 1 = 14 (left: 1 13 14) || 13 * 1 = 13 (left: 13 14)",
                "13 - 1 = 12 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "13 - 1 = 12 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 13 / 11 = 1.1818181818181819 (left: 1.1818181818181819)",
                "13 - 1 = 12 (left: 1 12 13) || 12 / 1 = 12 (left: 12 13)",
                "13 + 1 = 14 (left: 1 13 14) || 1 * 13 = 13 (left: 13 14)",
                "13 - 1 = 12 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "13 + 1 = 14 (left: 1 13 14) || 14 - 1 = 13 (left: 13 13)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)",
                "13 - 1 = 12 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "13 + 1 = 14 (left: 1 13 14) || 13 * 1 = 13 (left: 1 13)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- 1.2",
                "3 <- 1.2",
                "4 <- 1.4",
                "5 <- 1.4",
                "6 <- 1.4",
                "7 <- 1.2",
                "8 <- 1.2",
                "9 <- 1.2"
            ]
        },
        "Step 3": {
            "steps": [
                "13 - 1 = 12 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 / 13 = 0.846153846 (left: 0.846153846)",
                "13 - 1 = 12 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "13 - 1 = 12 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "13 - 1 = 12 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24)",
                "13 + 1 = 14 (left: 1 13 14) || 13 - 1 = 12 (left: 12 14)",
                "13 + 1 = 14 (left: 1 13 14) || 1 * 13 = 13 (left: 13 14)",
                "13 + 1 = 14 (left: 1 13 14) || 1 * 13 = 13 (left: 13 14)",
                "13 - 1 = 12 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "13 - 1 = 12 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "13 - 1 = 12 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)"
            ],
            "Evaluation": [
                0.0,
                0.001,
                0.003,
                60.0,
                0.003,
                0.003,
                0.003,
                0.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 3.3",
                "2 <- 3.3",
                "3 <- 3.3",
                "4 <- 3.3",
                "5 <- 3.3",
                "6 <- 3.3",
                "7 <- 3.3",
                "8 <- 1.2",
                "9 <- 3.3"
            ]
        },
        "Step 4": {
            "steps": [
                "13 - 1 = 12 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: (13 - 1) + (11 + 1) = 24",
                "13 - 1 = 12 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((13 - 1) - 1) + 13 = 24",
                "13 - 1 = 12 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((13 - 1) - 1) + 13 = 24",
                "13 - 1 = 12 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((13 - 1) - 1) + 13 = 24",
                "13 - 1 = 12 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((13 - 1) - 1) + 11 = 24",
                "13 - 1 = 12 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((13 - 1) - 1) + 13 = 24",
                "13 - 1 = 12 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((13 - 1) - 1) + 11 = 24",
                "13 - 1 = 12 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: (13 - 1) + (1 + 11) = 24",
                "13 - 1 = 12 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 / 13 = 0.846 (left: 0.846)",
                "13 - 1 = 12 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((13 - 1) - 1) + 13 = 24"
            ]
        },
        "Input": "1 1 13 13",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": -1
            },
            {
                "r": 1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "25": {
        "puzzle": "1 2 4 12",
        "Step 0": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8)",
                "4 + 12 = 16 (left: 1 2 16)",
                "12 - 2 = 10 (left: 1 4 10)",
                "12 - 2 = 10 (left: 1 4 10)",
                "2 * 4 = 8 (left: 1 8 12)",
                "12 - 2 = 10 (left: 1 4 ",
                "1 + 2 = 3 (left: 3 4 12)",
                "2 * 4 = 8 (left: 1 8 12)",
                "4 + 1 = 5 (left: 2 5 ",
                "1 + 2 = 3 (left: 3 4 12)"
            ],
            "Evaluation": [
                60.0,
                1.002,
                3.0,
                2.001,
                2.001,
                20.0,
                22.0,
                1.002,
                0.001,
                20.002
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 0.6",
                "2 <- 0.5",
                "3 <- INIT",
                "4 <- 0.0",
                "5 <- 0.7",
                "6 <- 0.9",
                "7 <- 0.6",
                "8 <- 0.0",
                "9 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 2 = 3 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8)",
                "1 + 2 = 3 (left: 3 4 12) || 12 - 3 = 9 (left: 4 9)",
                "12 - 2 = 10 (left: 1 4  || 4 - 1 = 3 (left: 3)",
                "4 * 3 = 12 (left: 1 2 12)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "2 * 4 = 8 (left: 1 8 12) || 12 - 1 = 11 (left: 8 11)",
                "1 + 2 = 3 (left: 3 4 12) || 4 * 12 = 48 (left: 48)",
                "1 + 2 = 3 (left: 3 4 12) || 4 * 3 = 12 (left: 12 12)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6)",
                "12 - 4 = 8 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)"
            ],
            "Evaluation": [
                60.0,
                40.0,
                0.001,
                60.0,
                60.0,
                1.001,
                0.003,
                41.0,
                41.0,
                0.001
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 1.7",
                "2 <- INIT",
                "3 <- 1.8",
                "4 <- 1.1",
                "5 <- 1.1",
                "6 <- 1.4",
                "7 <- 1.3",
                "8 <- 1.3",
                "9 <- 1.7"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "1 + 2 = 3 (left: 3 4 12) || 4 * 3 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "1 + 2 = 3 (left: 3 4 12)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 + 2 = 3 (left: 3 4 12) || 12 - 3 = 9 (left: 4 9) || 7 - 5 = 2",
                "1 + 2 = 3 (left: 3 4 12) || 12 - 3 = 9 (left: 4 9) || 4 * 9 = 36 (left: 36)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "4 * 3 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "4 * 3 = 12 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "1 + 2 = 3 (left: 3 4 12) || 4 * 3 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)"
            ],
            "Evaluation": [
                60.0,
                40.0,
                41.0,
                0.002,
                0.003,
                60.0,
                0.002,
                60.0,
                21.001,
                0.002
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 1.3",
                "3 <- 1.7",
                "4 <- 2.1",
                "5 <- 2.2",
                "6 <- 2.8",
                "7 <- 2.0",
                "8 <- 1.4",
                "9 <- 2.0"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "4 * 3 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "1 + 2 = 3 (left: 3 4 12) || 4 * 3 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "1 + 2 = 3 (left: 3 4 12) || 4 * 3 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (1 + 2) * (4 + 12) = 24",
                "1 + 2 = 3 (left: 3 4 12) || 12 / 3 = 4 (left: 4 12)",
                "4 * 3 = 12 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                60.0,
                0.001,
                1.002,
                0.002,
                0.0,
                0.002,
                0.001,
                41.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.7",
                "2 <- 2.8",
                "3 <- 1.3",
                "4 <- 2.8",
                "5 <- 1.7",
                "6 <- 2.7",
                "7 <- 3.2",
                "8 <- 1.7",
                "9 <- 1.3"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "1 + 2 = 3 (left: 3 4 12) || 4 * 3 = 12 (left: 12 12) || 12 + 12 = 24",
                "4 * 3 = 12 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12) || 3 + 12 = 15 (left: 15)",
                "4 * 3 = 12 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12)",
                "4 * 3 = 12 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4)",
                "1 + 2 = 3 (left: 3 4 12) || 4 * 3 = 12 (left: 12 12) || 12 + 12 = 24",
                "4 * 3 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)",
                "4 * 3 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "1 + 2 = 3 (left: 3 4 12) || 4 * 3 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "4 * 3 = 12 (left: 1 2 12) || 12 / 1 = 12 (left:"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                60.0,
                0.001,
                0.003,
                40.0,
                60.0,
                0.002,
                21.0
            ],
            "Resampling": [
                "0 <- 2.7",
                "1 <- 4.3",
                "2 <- 2.0",
                "3 <- 2.1",
                "4 <- 3.2",
                "5 <- 4.3",
                "6 <- 2.0",
                "7 <- 1.4",
                "8 <- 2.2",
                "9 <- 2.0"
            ]
        },
        "Step 5": {
            "steps": [
                "4 * 3 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)",
                "4 * 3 = 12 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "1 + 2 = 3 (left: 3 4 12) || 4 * 3 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((1 + 2) * 4) + 12 = 24",
                "4 * 3 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "4 * 3 = 12 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6 12)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "1 + 2 = 3 (left: 3 4 12) || 4 * 3 = 12 (left: 12 12)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ]
        },
        "Input": "1 2 4 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "26": {
        "puzzle": "1 1 3 6",
        "Step 0": {
            "steps": [
                "1 / 1 = 1 (left: 1 3 6)",
                "3 * 1 = 3 (left: 3 1 6)",
                "1 * 1 = 1 (left: 1 3 6)",
                "3 * 1 = 3 (left: 3 3 6)",
                "6 - 3 = 3 (left: 1 3 3)",
                "1 * 1 = 1 (left: 1 3 6)",
                "1 + 1 = 2 (left: 2 3 6)",
                "6 - 3 = 3 (left: 1 3 3)",
                "3 * 1 = 3 (left: 1 3 6)",
                "3 - 1 = 2 (left: 1 2 6)"
            ],
            "Evaluation": [
                60.0,
                21.0,
                21.001,
                3.0,
                0.001,
                20.002,
                41.0,
                1.002,
                21.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 0.6",
                "2 <- 0.0",
                "3 <- 0.0",
                "4 <- 0.8",
                "5 <- 0.6",
                "6 <- 0.0",
                "7 <- 0.6",
                "8 <- 0.0",
                "9 <- 0.6"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 1 = 2 (left: 2 3 6) || Input: 3 7 10",
                "1 + 1 = 2 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6)",
                "1 / 1 = 1 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3)",
                "1 / 1 = 1 (left: 1 3 6) || 1 + 3 = 4 (left: 4 6)",
                "3 * 1 = 3 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3)",
                "1 + 1 = 2 (left: 2 3 6) || 6 - 2 = 4 (left: 4",
                "1 / 1 = 1 (left: 1 3 6) || 1 + 3 = 4 (left: 4 6)",
                "1 + 1 = 2 (left: 2 3 6) || 6 / 3 = 2 (left: 2)",
                "1 / 1 = 1 (left: 1 3 6) || 3 * 6 = 18 (left: 1 18)",
                "1 + 1 = 2 (left: 2 3 6) || 6 - 2 = 4 (left: 4 6)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                20.0,
                40.0,
                0.0,
                0.002,
                60.0,
                0.001,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 1.3",
                "2 <- 1.9",
                "3 <- 0.6",
                "4 <- 0.6",
                "5 <- 0.1",
                "6 <- 1.3",
                "7 <- 0.8",
                "8 <- 1.6",
                "9 <- 1.9"
            ]
        },
        "Step 2": {
            "steps": [
                "1 / 1 = 1 (left: 1 3 6) || 6 / 3 = 2 (left: 1 2)",
                "1 / 1 = 1 (left: 1 3 6) || 1 + 3 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 3 6) || 6 - 2 = 4 (left: 4 6) || 5 - 3 = 2 (left: 2 7)",
                "1 + 1 = 2 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6)",
                "1 + 1 = 2 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6)",
                "3 * 1 = 3 (left: 3 1 6) || 3 * 1 = 3 (left: 3 6)",
                "1 / 1 = 1 (left: 1 3 6) || 1 + 3 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "3 * 1 = 3 (left: 1 3 6) || 3 * 6 = 18 (left: 1 18)",
                "1 / 1 = 1 (left: 1 3 6) || 1 + 3 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 3 6) || 6 - 2 = 4 (left: 4 6) || 4 - 6 = -2 (left: -2)"
            ],
            "Evaluation": [
                1.002,
                20.001,
                0.002,
                0.003,
                41.0,
                20.0,
                60.0,
                0.001,
                60.0,
                2.0
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.6",
                "2 <- 1.9",
                "3 <- 2.4",
                "4 <- 1.6",
                "5 <- 1.6",
                "6 <- 2.6",
                "7 <- 1.1",
                "8 <- 2.5",
                "9 <- 0.0"
            ]
        },
        "Step 3": {
            "steps": [
                "1 / 1 = 1 (left: 1 3 6) || 1 + 3 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "1 / 1 = 1 (left: 1 3 6) || 1 + 3 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 3 6) || 6 - 2 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 3 + 6 = 9 (left: 9)",
                "1 / 1 = 1 (left: 1 3 6) || 1 + 3 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "1 / 1 = 1 (left: 1 3 6) || 1 + 3 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "1 / 1 = 1 (left: 1 3 6) || 1 + 3 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 / 1 + 3) * 6 = 24",
                "1 + 1 = 2 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6) || 6 + 6 = 12 (left: 12)",
                "3 * 1 = 3 (left: 3 1 6) || 3 * 1 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18)",
                "1 / 1 = 1 (left: 1 3 6) || 1 + 6 = 7 (left: 3"
            ]
        },
        "Input": "1 1 3 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "27": {
        "puzzle": "1 1 3 9",
        "Step 0": {
            "steps": [
                "9 - 3 = 6 (left: 1 1 6)",
                "3 * 1 = 3 (left: 1 3 9)",
                "9 / 3 = 3 (left: 1 3 ",
                "9 - 3 = 6 (left: 1 3 6)",
                "1 * 1 = 1 (left: 1 3 9)",
                "1 + 1 = 2 (left: 2 3 9)",
                "9 - 3 = 6 (left: 1 3 6)",
                "1 + 1 = 2 (left: 2 3 9)",
                "1 * 1 = 1 (left: 1 3 9)",
                "3 * 3 = 9 (left: 1 9)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.001,
                21.001,
                1.002,
                0.003,
                2.001,
                1.002,
                20.002,
                60.0
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.8",
                "2 <- 0.9",
                "3 <- 0.8",
                "4 <- 0.9",
                "5 <- 0.3",
                "6 <- 0.8",
                "7 <- 0.9",
                "8 <- 0.8",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "9 - 3 = 6 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3)",
                "1 * 1 = 1 (left: 1 3 9) || 9 / 3 = 3 (left: 1 3)",
                "3 * 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 3 9) || 1 + 3 = 4 (left: 4 9)",
                "3 * 3 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "9 - 3 = 6 (left: 1 3 6) || Possible",
                "1 * 1 = 1 (left: 1 3 9) || 9 / 3 = 3 (left: 1 3)",
                "3 * 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 3 9) || 3 * 9 = 27 (left: 1 27)",
                "9 - 1 = 8 (left: 1 3 8)"
            ],
            "Evaluation": [
                1.002,
                0.0,
                0.0,
                1.002,
                0.002,
                0.003,
                1.002,
                0.003,
                20.002,
                40.001
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 0.9",
                "2 <- 1.8",
                "3 <- 0.9",
                "4 <- 0.8",
                "5 <- INIT",
                "6 <- 1.9",
                "7 <- 0.3",
                "8 <- 1.8",
                "9 <- 1.9"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 9) || 3 * 9 = 27 (left: 1 27) || 27 - 1 = 26 (left: 26)",
                "3 * 3 = 9 (left: 1 9) || 1 + 9 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 3 9) || 3 * 9 = 27 (left: 1 27) || 27 - 1 = 26 (left: 26)",
                "3 * 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 3 9) || 3 * 9 = 27 (left: 1 27)",
                "1 + 3 = 4 (left: 4 1 ",
                "9 - 1 = 8 (left: 1 3 8) || 1 + 3 = 4 (left: 4 8)",
                "9 - 3 = 6 (left: 1 3 6) || 6 - 3 = 3 (left: 3",
                "1 * 1 = 1 (left: 1 3 9) || 3 * 9 = 27 (left: 1 27) || 27 - 1 = 26 (left: 26)",
                "9 - 1 = 8 (left: 1 3 8) || 1 + 8 = "
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 1.8",
                "2 <- 0.9",
                "3 <- 1.9",
                "4 <- 1.9",
                "5 <- 1.3",
                "6 <- 0.3",
                "7 <- 0.9",
                "8 <- 0.9",
                "9 <- 1.9"
            ]
        },
        "Step 3": {
            "steps": [
                "9 - 1 = 8 (left: 1 3 8) || 5 + 10 = 15 (left: 15)",
                "1 * 1 = 1 (left: 1 3 9) || 3 * 9 = 27 (left: 1 27) || 27 - 1 = 26 (left: 26)",
                "3 * 3 = 9 (left: 1 9) || 1 + 9 = 10 (left: 10)",
                "9 - 1 = 8 (left: 1 3 8) || 8 / 3 = 2.67 (left: 1 2.67)",
                "9 - 1 = 8 (left: 1 3 8) || 8 - 1 = 7 (left: 7 8)",
                "1 * 1 = 1 (left: 1 3 9) || 1 + 3 = 4 (left: 4 9) || 9 / 4 = 2.25 (left: 2.25)",
                "9 - 3 = 6 (left: 1 3 6) || Possible",
                "3 * 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "3 * 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "9 - 1 = 8 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.001,
                0.003,
                0.002,
                0.003,
                0.002,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 3.9",
                "1 <- 0.9",
                "2 <- 0.9",
                "3 <- 3.9",
                "4 <- 0.9",
                "5 <- 3.9",
                "6 <- 3.9",
                "7 <- 0.9",
                "8 <- 3.9",
                "9 <- 0.4"
            ]
        },
        "Step 4": {
            "steps": [
                "9 - 1 = 8 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 * 3 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "3 * 3 = 9 (left: 1 9) || 1 + 9 = 10 (left: 10)",
                "9 - 1 = 8 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 3 = 9 (left: 1 9) || 1 + 9 = 10 (left: 10)",
                "9 - 1 = 8 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || Input: 5 9",
                "9 - 1 = 8 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "3 * 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "9 - 1 = 8 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "1 * 1 = 1 (left: 1 3 9) || 3 * 1 = 3 (left: 3 9)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.9",
                "1 <- 4.0",
                "2 <- 0.9",
                "3 <- 4.0",
                "4 <- 4.0",
                "5 <- 4.0",
                "6 <- 3.9",
                "7 <- 3.9",
                "8 <- 4.0",
                "9 <- 3.9"
            ]
        },
        "Step 5": {
            "steps": [
                "9 - 1 = 8 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 - 8 = -5 (left: -5 8)",
                "9 - 1 = 8 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (9 - 1) = 24",
                "3 * 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "9 - 1 = 8 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (9 - 1) = 24",
                "9 - 1 = 8 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (9 - 1) * (1 * 3) = 24",
                "9 - 1 = 8 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (9 - 1) = 24",
                "9 - 1 = 8 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "9 - 1 = 8 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "9 - 1 = 8 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (9 - 1) = 24",
                "9 - 1 = 8 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)"
            ]
        },
        "Input": "1 1 3 9",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "28": {
        "puzzle": "7 7 12 12",
        "Step 0": {
            "steps": [
                "7 / 7 = 1 (left: 1 12 12)",
                "7 * 7 = 49 (left: 12 12 49)",
                "7 * 12 = 84 (left: 12 19 84)",
                "7 - 7 = 0 (left: 0 12 12)",
                "12 / 7 = 1 (left: 1 12 ",
                "7 * 7 = 49 (left: 12 12 49)",
                "7 + 7 = 14 (left: 12 12 14)",
                "12 - 7 = 5 (left: 7 5 ",
                "12 - 7 = 5 (left: 7 5 ",
                "7 * 7 = 49 (left: 12 12 49)"
            ],
            "Evaluation": [
                0.003,
                2.001,
                0.003,
                60.0,
                1.001,
                1.002,
                21.001,
                0.001,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.6",
                "2 <- 0.3",
                "3 <- 0.3",
                "4 <- 0.3",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 0.6",
                "8 <- 0.6",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12)",
                "7 + 7 = 14 (left: 12 12 14) || 12 + 12 = 24 (left: 24 14)",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 0 is undefined (left: 0 12 12)",
                "7 - 7 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 12 = 0 (left: 0",
                "12 + 7 = 19 (left: 7 12 19)",
                "7 + 7 = 14 (left: 12 14 12)",
                "7 + 7 = 14 (left: 12 12 14) || 14 + 12 = 26 (left: 12 26)",
                "7 + 7 = 14 (left: 12 12 14) || 12 - 12 = 0 (left: 0 14)",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 1 12)"
            ],
            "Evaluation": [
                20.002,
                40.001,
                60.0,
                40.001,
                0.002,
                3.0,
                22.0,
                0.003,
                0.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- 1.0",
                "4 <- 1.2",
                "5 <- 0.3",
                "6 <- 0.3",
                "7 <- 1.2",
                "8 <- 1.0",
                "9 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "7 - 7 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "7 - 7 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 0 is undefined (left: 0 12 12) || 12 - 12 = 0 (left: 0 12)",
                "7 - 7 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 0 is undefined (left: 0 12 12) || 12 / 12 = 1 (left: 0 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "7 + 7 = 14 (left: 12 12 14) || 12 + 12 = 24 (left: 24 14) || 24 - 14 = 10 (left: 10)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.003,
                0.002,
                60.0,
                20.002,
                40.001,
                60.0,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.4",
                "2 <- 0.3",
                "3 <- 2.4",
                "4 <- 2.5",
                "5 <- 2.7",
                "6 <- 2.4",
                "7 <- 2.6",
                "8 <- 1.3",
                "9 <- 2.7"
            ]
        },
        "Step 3": {
            "steps": [
                "7 - 7 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((7 - 7) + 12) + 12 = 24",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 0 is undefined (left: 0 12 12) || 12 - 12 = 0 (left: 0 12) || 0 + 12 = 12",
                "7 - 7 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 0 is undefined (left: 0 12 12) || 12 - 12 = 0 (left: 0 12) || 0 + 12 = 12 (left: 12)",
                "7 - 7 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 0 is undefined (left: 0 12 12) || 12 / 12 = 1 (left: 0 12) || 0 + 12 = 12 (left: 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 0 is undefined (left: 0 12 12) || 12 - 12 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "7 - 7 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 0 is undefined (left: 0 12 12) || 12 / 12 = 1 (left: 0 12) || 0 * 12 = 0 (left: 0)"
            ]
        },
        "Input": "7 7 12 12",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            }
        ]
    },
    "29": {
        "puzzle": "4 6 7 7",
        "Step 0": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7)",
                "6 + 7 = 13 (left: 4 7 13)",
                "6 + 7 = 13 (left: 4 7 13)",
                "7 - 6 = 1 (left: 1 7 7)",
                "6 + 7 = 13 (left: 4 7 13)",
                "7 - 4 = 3 (left: 3 7 7)",
                "4 * 6 = 24 (left: 7 7 24)",
                "4 + 6 = 10 (left: 7 7 10)",
                "7 + 7 = 14 (left: 4 6 14)",
                "7 - 4 = 3 (left: 3 7 7)"
            ],
            "Evaluation": [
                60.0,
                20.002,
                3.0,
                2.001,
                1.002,
                60.0,
                2.0,
                60.0,
                41.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 0.5",
                "2 <- 0.7",
                "3 <- 0.5",
                "4 <- 0.0",
                "5 <- 0.5",
                "6 <- 0.5",
                "7 <- 0.0",
                "8 <- 0.7",
                "9 <- 0.8"
            ]
        },
        "Step 1": {
            "steps": [
                "7 + 7 = 14 (left: 4 6 14) || 6 - 4 = 2 (left: 2 14)",
                "7 - 4 = 3 (left: 3 7 7) || 7 - 3 = 4 (left:",
                "4 + 6 = 10 (left: 7 7 10) || 7 * 7 = 49 (left: 10 49)",
                "7 - 4 = 3 (left: 3 7 7) || 7 + 3 = 10 (left: 3 10)",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10)",
                "7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2 (left: 2 7)",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 10)",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 10)",
                "4 + 6 = 10 (left: 7 7 10) || 10 - 7 = 3 (left: 7 3)",
                "7 + 7 = 14 (left: 4 6 14) || 6 + 14 = 20 (left: 4 20)"
            ],
            "Evaluation": [
                0.003,
                1.0,
                0.002,
                0.003,
                41.0,
                0.001,
                0.0,
                0.002,
                1.001,
                60.0
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 1.4",
                "2 <- 0.7",
                "3 <- 0.7",
                "4 <- 1.4",
                "5 <- 1.9",
                "6 <- 0.0",
                "7 <- 0.0",
                "8 <- 0.0",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "7 - 6 = 1 (left: 1 7 7) || 7 / 1 = 7 (left: 7 7 7)",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10) || 7 + 7 = 14 (left: 10 14)",
                "4 + 6 = 10 (left: 7 7 10) || 7 - 7 = 0 (left: 0 10)",
                "4 + 6 = 10 (left: 7 7 10) || 7 + 7 = 14 (left: 10 14)",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10) || 7 * 7 = 49 (left: 10 49)",
                "7 + 7 = 14 (left: 4 6 14) || 6 + 14 = 20 (left: 4 20) || 4 + 20 = 24 (left: 20 24)",
                "7 - 4 = 3 (left: 3 7 7) || 7 - 3 = 4 (left: 4 7)",
                "7 - 4 = 3 (left: 3 7 7) || 7 - 3 = 4 (left: 4 7)",
                "7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2 (left: 2 7)",
                "6 / 4 = 1.5 (left: 1.5 7 7)"
            ],
            "Evaluation": [
                3.0,
                60.0,
                0.0,
                60.0,
                1.002,
                0.002,
                0.002,
                0.002,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.9",
                "2 <- 0.7",
                "3 <- 1.9",
                "4 <- 0.7",
                "5 <- 0.5",
                "6 <- 2.1",
                "7 <- INIT",
                "8 <- 2.1",
                "9 <- 2.9"
            ]
        },
        "Step 3": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10) || 7 + 7 = 14 (left: 10 14)",
                "7 + 7 = 14 (left: 4 6 14) || 6 + 14 = 20 (left: 4 20) || 4 * 5 = 20 (left: 20)",
                "4 + 6 = 10 (left: 7 7 10) || 10 / 7 = 1.43 (left: 1.43 10)",
                "7 + 7 = 14 (left: 4 6 14) || 6 + 14 = 20 (left: 4 20) || 20 / 4 = 5 (left: 5)",
                "4 + 6 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17)",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 10)",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10) || 7 + 7 = 14 (left: 10 14) || 10 / 14 = 0.7142857142857143 (left: 0.7142857142857143 14)",
                "7 - 4 = 3 (left: 3 7 7)",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10) || 7 + 7 = 14 (left: 10 14) || 14 / 10 = 1.4 (left: 1.4)",
                "6 / 4 = 1.5 (left: 1.5 7 7) || 1.5 + 7 = 8.5 (left: 7 8.5)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.0,
                0.0,
                60.0,
                1.001,
                2.0,
                41.0,
                2.001,
                21.001
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 3.9",
                "2 <- 3.4",
                "3 <- 3.0",
                "4 <- 3.4",
                "5 <- 2.3",
                "6 <- 0.0",
                "7 <- 3.7",
                "8 <- 3.0",
                "9 <- 2.1"
            ]
        },
        "Step 4": {
            "steps": [
                "7 + 7 = 14 (left: 4 6 14) || 6 + 14 = 20 (left: 4 20) || 20 - 4 = 16 (left: 16)",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6)",
                "4 + 6 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 7 * 17 = 119 (left: 119)",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10) || 7 + 7 = 14 (left: 10 14) || 10 + 14 = 24 (left: 24)",
                "4 + 6 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 7 + 17 = 24 (left: 24)",
                "4 + 6 = 10 (left: 7 7 10) || 7 + 7 = 14 (left: 10 14) || 10 / 14 = 0.7142857142857143 (left: 0.7142857142857143)",
                "7 - 4 = 3 (left: 3 7 7) || 7 + 3 = 10 (left: 7 10)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10) || 7 + 7 = 14 (left: 10 14) || 10 / 14 = 0.7142857142857143 (left: 0.7142857142857143)",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10) || 7 + 7 = 14 (left: 10 14) || 10 / 14 = 0.71428571429 (left: 0.71428571429)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.002,
                60.0,
                0.001,
                0.001,
                0.003,
                60.0,
                1.0,
                20.002
            ],
            "Resampling": [
                "0 <- 3.7",
                "1 <- 3.4",
                "2 <- 4.7",
                "3 <- 0.5",
                "4 <- 4.7",
                "5 <- 0.8",
                "6 <- 3.0",
                "7 <- 4.7",
                "8 <- 4.7",
                "9 <- 4.1"
            ]
        },
        "Step 5": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2.33 (left: 2.33 7)",
                "4 + 6 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 7 - 17 = -10 (left: -10)",
                "4 + 6 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 17 - 7 = 10 (left: 10)",
                "7 - 4 = 3 (left: 3 7 7) || 7 - 3 = 4 (left:",
                "4 + 6 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 24 + 24 = 48",
                "7 + 7 = 14 (left: 4 6 14) || 14 - 6 = 8 (left: 4 8)",
                "7 - 4 = 3 (left: 3 7 7) || 3 + 7 = 10 (left: 7 7 10) || 7 + 7 = 14 (left: 10 14) || 14 / 10 = 1.4 (left: 1.4)",
                "4 + 6 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 7 + 17 = 24 (left: 24)",
                "4 + 6 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 7 + 17 = 24 (left: 24)",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || 4 + 6 = 10 (left: 10)"
            ],
            "Evaluation": [
                2.001,
                0.001,
                0.003,
                3.0,
                0.003,
                0.003,
                60.0,
                60.0,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 5.7",
                "1 <- 3.7",
                "2 <- 3.7",
                "3 <- 4.3",
                "4 <- 4.1",
                "5 <- 4.1",
                "6 <- 4.3",
                "7 <- 5.6",
                "8 <- 5.9",
                "9 <- 5.9"
            ]
        },
        "Step 6": {
            "steps": [
                "4 + 6 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 7 + 17 = 24 (left: 24) || Answer: (4 + 6) + (7 + 7) = 24",
                "7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2 (left: 2 7)",
                "7 - 4 = 3 (left: 3 7 7) || Input:",
                "4 + 6 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 7 + 17 = 24 (left: 24) || Answer: (4 + 6) + (7 + 7) = 24",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || 27",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || 6 - 4 = 2 (left: 2",
                "4 + 6 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 7 + 17 = 24 (left: 24) || Answer: ((4 + 6) + 7) + 7 = 24",
                "4 + 6 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 7 + 17 = 24 (left: 24) || Answer: ((4 + 6) + 7) + 7 = 24",
                "4 + 6 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 7 + 17 = 24 (left: 24) || Answer: ((4 + 6) + 7) + 7 = 24",
                "4 + 6 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 7 + 17 = 24 (left: 24) || Answer: ((4 + 6) + 7) + 7 = 24"
            ]
        },
        "Input": "4 6 7 7",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            }
        ]
    },
    "30": {
        "puzzle": "1 1 2 13",
        "Step 0": {
            "steps": [
                "13 - 2 = 11 (left: 1 1 11)",
                "1 + 1 = 2 (left: 2 2 13)",
                "13 - 1 = 12 (left: 1 2 12)",
                "13 - 1 = 12 (left: 1 2 12)",
                "1 + 1 = 2 (left: 2 2 13)",
                "13 - 2 = 11 (left: 1 1 11)",
                "1 + 1 = 2 (left: 2 2 13)",
                "1 + 1 = 2 (left: 2 2 13)",
                "13 - 1 = 12 (left: 1 2 12)",
                "2 * 1 = 2 (left: 2 2 "
            ],
            "Evaluation": [
                1.002,
                1.002,
                60.0,
                60.0,
                21.001,
                0.003,
                22.0,
                0.003,
                60.0,
                20.002
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.8",
                "2 <- 0.2",
                "3 <- 0.8",
                "4 <- 0.3",
                "5 <- 0.6",
                "6 <- 0.9",
                "7 <- 0.3",
                "8 <- 0.9",
                "9 <- 0.8"
            ]
        },
        "Step 1": {
            "steps": [
                "13 - 1 = 12 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12)",
                "13 - 1 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "13 - 1 = 12 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "13 - 1 = 12 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "1 + 1 = 2 (left: 2 2 13) || 2 - 2 = 0 (left: 0 13)",
                "2 * 1 = 2 (left: 2 2  || 2 / 2 = 1 (left: 1)",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "2 * 1 = 2 (left: 2 2  || 2 * 2 = 4 (left: 4)",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)"
            ],
            "Evaluation": [
                60.0,
                40.0,
                60.0,
                60.0,
                1.002,
                0.001,
                0.002,
                60.0,
                0.002,
                40.001
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 1.1",
                "2 <- 1.3",
                "3 <- 0.6",
                "4 <- 1.7",
                "5 <- 0.6",
                "6 <- 0.2",
                "7 <- 1.7",
                "8 <- 0.3",
                "9 <- 1.9"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 13) || 2 / 2 = 1 (left: 1 13)",
                "13 - 1 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 + 1 = 2 (left: 2 2 13) || 13 - 2 = 11 (left: 2 11)",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "1 + 1 = 2 (left: 2 2 13) || 2 + 2 = 4 (left: 4 13)",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 1 = 11 (left:",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 - 6 = -5 (left: -5)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.002,
                0.003,
                0.001,
                1.002,
                60.0,
                0.002,
                0.001,
                0.0
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 0.9",
                "2 <- 2.6",
                "3 <- 1.9",
                "4 <- 1.0",
                "5 <- 0.8",
                "6 <- 0.6",
                "7 <- 1.3",
                "8 <- 1.9",
                "9 <- 2.6"
            ]
        },
        "Step 3": {
            "steps": [
                "13 - 1 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (13 - 1) * (1 * 24) = 24",
                "2 * 1 = 2 (left: 2 2  || 2 * 2 = 4 (left: 4)",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "13 - 1 = 12 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "13 - 1 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "1 + 1 = 2 (left: 2 2 13) || 13 - 2 = 11 (left: 2 11)",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)"
            ],
            "Evaluation": [
                20.001,
                0.003,
                0.002,
                0.001,
                60.0,
                1.002,
                0.003,
                0.001,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 1.3",
                "2 <- 0.3",
                "3 <- 1.1",
                "4 <- 3.4",
                "5 <- 1.0",
                "6 <- 2.6",
                "7 <- 1.0",
                "8 <- 1.7",
                "9 <- 3.4"
            ]
        },
        "Step 4": {
            "steps": [
                "13 - 1 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 / 10 = 0.1 (left: 0.1)",
                "13 - 1 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "13 - 1 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "13 - 1 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "13 - 1 = 12 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12) || 2 + 12 = 14",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "13 - 1 = 12 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12) || 12 + 2 = 14 (left: 14)",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "13 - 1 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                60.0,
                60.0,
                0.003,
                0.003,
                0.003,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 4.0",
                "2 <- 3.0",
                "3 <- 1.7",
                "4 <- 0.3",
                "5 <- 1.2",
                "6 <- 4.3",
                "7 <- 4.2",
                "8 <- 4.3",
                "9 <- 4.2"
            ]
        },
        "Step 5": {
            "steps": [
                "13 - 1 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (13 - 1) * 2 * 1 = 24",
                "13 - 1 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (13 - 1) * 2 * 1 = 24",
                "2 * 1 = 2 (left: 2 2  || 2 * 2 = 4 (left: 4) || There is only one possible next step which is:",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "13 - 1 = 12 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)",
                "13 - 1 = 12 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "13 - 1 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (13 - 1) * (1 * 2) = 24",
                "13 - 1 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "13 - 1 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (13 - 1) * 2 * 1 = 24",
                "13 - 1 = 12 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)"
            ]
        },
        "Input": "1 1 2 13",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "31": {
        "puzzle": "1 1 5 6",
        "Step 0": {
            "steps": [
                "5 * 1 = 5 (left: 5 5 6)",
                "5 + 1 = 6 (left: 1 6 6)",
                "6 - 5 = 1 (left: 1 1 ",
                "1 * 5 = 5 (left: 1 5 6)",
                "1 + 5 = 6 (left: 1 6 6)",
                "1 * 1 = 1 (left: 1 5 6)",
                "1 + 5 = 6 (left: 6 5 6)",
                "6 - 1 = 5 (left: 1 5 6)",
                "1 * 1 = 1 (left: 1 5 6)",
                "5 + 1 = 6 (left: 1 6 6)"
            ],
            "Evaluation": [
                1.002,
                40.001,
                0.003,
                41.0,
                41.0,
                22.0,
                60.0,
                22.0,
                60.0,
                40.0
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 0.6",
                "2 <- 0.9",
                "3 <- 0.9",
                "4 <- 0.4",
                "5 <- 0.3",
                "6 <- 0.1",
                "7 <- 0.9",
                "8 <- 0.8",
                "9 <- 0.9"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 5 = 6 (left: 6 5 6) || Input: 4 2 3 8",
                "1 + 5 = 6 (left: 6 5 6) || 5 - 6 = -1 (left: -1)",
                "5 + 1 = 6 (left: 1 6 6) || Input: 5 7 8 9",
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6)",
                "1 + 5 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "1 * 5 = 5 (left: 1 5 6) || 5 / 1 = 5 (left:",
                "5 + 1 = 6 (left: 1 6 6) || 6 * 1 = 6 (left: 6 6 6)",
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6)",
                "1 * 1 = 1 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6)",
                "5 + 1 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6)"
            ],
            "Evaluation": [
                0.003,
                0.0,
                0.003,
                1.001,
                1.002,
                0.0,
                3.0,
                22.0,
                21.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 0.6",
                "2 <- 0.9",
                "3 <- 0.4",
                "4 <- 0.6",
                "5 <- INIT",
                "6 <- 0.4",
                "7 <- 0.9",
                "8 <- 0.8",
                "9 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6)",
                "1 + 5 = 6 (left: 6 5 6) || 6 + 5 = 11 (left: 6 11)",
                "5 + 1 = 6 (left: 1 6 6) || 1 + 6 = 7 (left: 6 7)",
                "1 + 5 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6)",
                "1 + 5 = 6 (left: 6 5 6) || 5 - 6 = -1 (left: -1 6)",
                "1 * 1 = 1 (left: 1 5 6)",
                "1 + 5 = 6 (left: 1 6 6) || 1 * 6 = 6 (left: 6 6)",
                "5 + 1 = 6 (left: 1 6 6) || 6 + 1 = 7 (left: 6 7)",
                "1 * 1 = 1 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6)",
                "1 * 5 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6)"
            ],
            "Evaluation": [
                40.001,
                20.002,
                1.002,
                1.002,
                1.001,
                22.0,
                0.003,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.8",
                "1 <- 1.7",
                "2 <- 2.8",
                "3 <- 0.3",
                "4 <- 0.6",
                "5 <- 2.1",
                "6 <- 2.1",
                "7 <- 1.7",
                "8 <- 2.0",
                "9 <- 0.6"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6) || 5 - 6 = -1 (left: -1 6)",
                "1 * 1 = 1 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "1 * 5 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6)",
                "1 + 5 = 6 (left: 6 5 6) || 6 / 5 = 1.2 (left: 1.2 6)",
                "1 + 5 = 6 (left: 6 5 6) || 6 + 5 = 11 (left: 6 11) || 6 + 11 = 17 (left: 17)",
                "1 + 5 = 6 (left: 6 5 6) || 6 + 5 = 11 (left: 6 11) || 11 * 6 = 66 (left: 66)",
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6) || Possible next steps:",
                "1 * 1 = 1 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6) || 6 + 6 = 12 (left: 12)",
                "1 + 5 = 6 (left: 6 5 6) || 5 - 6 = -1 (left: -1 6)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.003,
                1.002,
                0.002,
                0.003,
                0.003,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 1.7",
                "2 <- 0.7",
                "3 <- 0.1",
                "4 <- 0.6",
                "5 <- 1.3",
                "6 <- 2.8",
                "7 <- 2.1",
                "8 <- 2.8",
                "9 <- 0.7"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 5 = 6 (left: 6 5 6) || 6 + 5 = 11 (left: 6 11)",
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6) || 5 + 6 = 11 (left: 6 11)",
                "6 - 1 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6)",
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6)",
                "1 + 5 = 6 (left: 6 5 6) || 5 * 6 = 30 (left: 6 30)",
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6) || 5 * 6 = 30 (left: 30)",
                "1 * 1 = 1 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "1 + 5 = 6 (left: 6 5 6) || 6 + 5 = 11 (left: 6 11) || 6 + 11 = 17 (left: 17)",
                "1 * 1 = 1 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "6 - 1 = 5 (left: 1 5 6) || 3 + 9 = 12 (left: 12"
            ],
            "Evaluation": [
                1.002,
                0.001,
                0.003,
                21.0,
                0.003,
                0.003,
                20.0,
                0.003,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 2.8",
                "2 <- 0.3",
                "3 <- 2.1",
                "4 <- 4.3",
                "5 <- 3.3",
                "6 <- 2.8",
                "7 <- 2.0",
                "8 <- 2.8",
                "9 <- 4.6"
            ]
        },
        "Step 5": {
            "steps": [
                "5 + 1 = 6 (left: 1 6 6) || 1 + 6 = 7 (left: 6 6)",
                "1 * 1 = 1 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "1 * 5 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6)",
                "1 + 5 = 6 (left: 6 5 6) || 6 + 5 = 11 (left: 6 11) || 6 - 11 = -5 (left: -5)",
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6) || 6 / 5 = 1.2 (left: 1.2 6)",
                "1 * 5 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)",
                "1 * 1 = 1 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "1 * 1 = 1 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6) || 6 + 6 = 12",
                "1 * 1 = 1 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "1 * 1 = 1 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 1) * (5 - 6) = 24"
            ],
            "Evaluation": [
                1.002,
                0.001,
                0.003,
                0.001,
                0.003,
                60.0,
                0.001,
                0.003,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 2.5",
                "1 <- 5.5",
                "2 <- 5.5",
                "3 <- 5.9",
                "4 <- 5.5",
                "5 <- 5.5",
                "6 <- 5.5",
                "7 <- 5.9",
                "8 <- 5.5",
                "9 <- 5.5"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 6) || 1 + 5 = 6 (left: 6 6)",
                "1 * 5 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 5 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 - 2 = 34 (left: 34)",
                "1 * 1 = 1 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "1 * 5 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 5 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 5 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 - 2 = 34",
                "1 * 1 = 1 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "1 * 5 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || There are no possible next steps with the input 36.",
                "1 * 5 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 12 = 3 (left: 3)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.001,
                0.003,
                20.0,
                60.0
            ],
            "Resampling": [
                "0 <- 4.6",
                "1 <- 5.9",
                "2 <- 2.1",
                "3 <- 0.5",
                "4 <- 6.9",
                "5 <- 5.9",
                "6 <- 2.1",
                "7 <- 6.9",
                "8 <- 4.3",
                "9 <- 0.1"
            ]
        },
        "Step 7": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 1) * (5 - 6) = 24",
                "1 * 1 = 1 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "1 + 5 = 6 (left: 6 5 6) || 6 + 5 = 11 (left: 6 11) || 11 / 6 = 1.83 (left: 1.83)",
                "1 * 1 = 1 (left: 1 5 6) || 1 + 5 = 6 (left: 6 6)",
                "1 * 5 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || None, as there is only one number provided.",
                "1 * 1 = 1 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "1 + 5 = 6 (left: 6 5 6) || 6 + 5 = 11 (left: 6 11) || 11 - 6 = 5 (left: 5)",
                "1 * 5 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6) || 6 / 5 = 1.2 (left: 1.2 6)",
                "5 + 1 = 6 (left: 1 6 6) || 1 + 6 = 7 (left: 6 6 "
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.003,
                0.003,
                0.001,
                0.003,
                0.003,
                0.002,
                20.002,
                40.001
            ],
            "Resampling": [
                "0 <- 5.5",
                "1 <- 6.9",
                "2 <- 6.9",
                "3 <- 5.9",
                "4 <- 5.9",
                "5 <- 4.6",
                "6 <- 7.9",
                "7 <- 5.5",
                "8 <- 4.3",
                "9 <- 7.9"
            ]
        },
        "Step 8": {
            "steps": [
                "1 * 5 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || There is only one number, so no possible next steps.",
                "1 * 5 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 - 3 = 33 (left: 33)",
                "1 * 5 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || There is only one number given, so there are no possible arithmetic operations to perform on it.",
                "1 * 1 = 1 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "1 * 1 = 1 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 1) * (5 - 6) = 24",
                "1 * 5 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || There are no possible next steps with just the number 36.",
                "1 * 5 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6) || Input: 3 7 7",
                "1 * 5 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || There is only one number, so there are no possible next steps."
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                60.0,
                0.003,
                0.003,
                0.003,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 8.8",
                "1 <- 8.3",
                "2 <- 5.9",
                "3 <- 5.5",
                "4 <- 8.3",
                "5 <- 8.8",
                "6 <- 8.3",
                "7 <- 8.3",
                "8 <- 8.3",
                "9 <- 8.8"
            ]
        },
        "Step 9": {
            "steps": [
                "1 * 5 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 + 2 = 38",
                "1 * 1 = 1 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 1) * (5 - 6) = 24",
                "1 * 1 = 1 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "1 * 5 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "1 * 1 = 1 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 1) * (5 - 6) = 24",
                "1 * 5 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || None. This is the final result.",
                "1 * 1 = 1 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 1) * (5 - 6) = 24",
                "1 * 1 = 1 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 1) * (5 - 6) = 24",
                "1 * 1 = 1 (left: 1 5 6) || 5 - 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 1) * (5 - 6) = 24",
                "1 * 5 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || There is only one number, so there are no possible next steps."
            ]
        },
        "Input": "1 1 5 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "32": {
        "puzzle": "1 1 11 13",
        "Step 0": {
            "steps": [
                "13 - 11 = 2 (left: 1 2 13)",
                "11 + 1 = 12 (left: 1 12 13)",
                "1 + 11 = 12 (left: 12 1 13)",
                "13 - 11 = 2 (left: 1 2 13)",
                "13 - 11 = 2 (left: 1 2 13)",
                "11 + 1 = 12 (left: 1 12 13)",
                "11 - 1 = 10 (left: 1 10 13)",
                "11 - 1 = 10 (left: 1 10 13)",
                "13 - 1 = 12 (left: 1 11 ",
                "1 + 1 = 2 (left: 2 11 13)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                20.002,
                1.002,
                0.003,
                1.002,
                2.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- INIT",
                "2 <- 0.4",
                "3 <- INIT",
                "4 <- 0.3",
                "5 <- 0.3",
                "6 <- 0.3",
                "7 <- INIT",
                "8 <- 0.3",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "13 - 11 = 2 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11)",
                "11 + 1 = 12 (left: 1 12 13)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12)",
                "1 + 1 = 2 (left: 11 2 13)",
                "13 - 11 = 2 (left: 1 2 13) || Input: 3 5",
                "13 - 11 = 2 (left: 1 2 13) || 2 * 13 = 26 (left: 1 26)",
                "13 - 11 = 2 (left: 1 2 13) || 1 + 2 = 3 (left: 3 13)",
                "13 - 11 = 2 (left: 1 2 ",
                "13 - 11 = 2 (left: 1 2 13) || 13 / 2 = 6.5 (left: 1 6.5)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12)"
            ],
            "Evaluation": [
                20.0,
                0.003,
                60.0,
                0.003,
                0.003,
                1.002,
                0.003,
                20.002,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.9",
                "2 <- 1.9",
                "3 <- 1.0",
                "4 <- 1.9",
                "5 <- 1.9",
                "6 <- 0.3",
                "7 <- 1.2",
                "8 <- 1.7",
                "9 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "13 - 11 = 2 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "13 - 11 = 2 (left: 1 2  || 1 * 2 = 2 (left: 2)",
                "13 - 11 = 2 (left: 1 2 13) || 2 / 13 = 0.153846 (left: 1 0.153846)"
            ],
            "Evaluation": [
                0.001,
                60.0,
                0.002,
                0.003,
                60.0,
                0.003,
                60.0,
                60.0,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 2.7",
                "2 <- 2.6",
                "3 <- 1.9",
                "4 <- 2.4",
                "5 <- 2.7",
                "6 <- 2.4",
                "7 <- 2.4",
                "8 <- 2.4",
                "9 <- 2.4"
            ]
        },
        "Step 3": {
            "steps": [
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (13 - 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (13 - 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (13 - 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (13 - 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (13 - 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (13 - 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (13 - 1) = 24"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                60.0,
                60.0,
                21.0,
                60.0,
                40.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 2.6",
                "2 <- 3.6",
                "3 <- 3.7",
                "4 <- 1.0",
                "5 <- 3.6",
                "6 <- 1.9",
                "7 <- 3.9",
                "8 <- 3.6",
                "9 <- 0.3"
            ]
        },
        "Step 4": {
            "steps": [
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 + (1 + 11)) * 13 = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (1 * 12) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (1 + 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (1 + 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: 1 * ((13 - 11) * (13 - 1)) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 13) - (11 - 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || Input: 5 5 20"
            ],
            "Evaluation": [
                60.0,
                0.0,
                0.003,
                0.003,
                60.0,
                60.0,
                40.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 3.6",
                "2 <- 4.8",
                "3 <- 3.3",
                "4 <- 3.4",
                "5 <- 4.8",
                "6 <- 4.0",
                "7 <- 3.4",
                "8 <- 4.7",
                "9 <- 3.7"
            ]
        },
        "Step 5": {
            "steps": [
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (13 - 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (13 - 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (13 - 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (13 - 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (13 - 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (13 - 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (13 - 1) = 24"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.002,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 4.7",
                "2 <- 1.9",
                "3 <- 5.3",
                "4 <- 5.9",
                "5 <- 2.7",
                "6 <- 3.8",
                "7 <- 5.8",
                "8 <- 5.3",
                "9 <- 5.6"
            ]
        },
        "Step 6": {
            "steps": [
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (13 - 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (13 - 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (13 - 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (13 - 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (13 - 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (13 - 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (13 - 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (13 - 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || Input: 6 10"
            ],
            "Evaluation": [
                20.001,
                0.003,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 4.9",
                "1 <- 5.3",
                "2 <- 5.8",
                "3 <- 6.0",
                "4 <- 5.9",
                "5 <- 4.7",
                "6 <- 5.7",
                "7 <- 6.5",
                "8 <- 5.6",
                "9 <- 5.5"
            ]
        },
        "Step 7": {
            "steps": [
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (13 - 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (13 - 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (13 - 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 12 - 2 = 10 (left: 10) || 10 + 10 = 20 (left: 10 20)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (13 - 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 13 - 11) * 12 = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 + (13 - 11)) * 12 = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (13 - 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (13 - 1) = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                40.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.7",
                "1 <- 7.8",
                "2 <- 7.6",
                "3 <- 6.3",
                "4 <- 7.4",
                "5 <- 3.3",
                "6 <- 7.9",
                "7 <- 3.6",
                "8 <- 6.3",
                "9 <- 5.7"
            ]
        },
        "Step 8": {
            "steps": [
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (1 + 12) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 + 1) * (13 - 11) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 + 1) * (11 + 13) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (1 + 12) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 + (11 - 13)) * 12 = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: 1 * (11 + (13 - 1)) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 - 1) * (11 + 13) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (1 + 12) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (1 + 12) = 24"
            ],
            "Evaluation": [
                0.002,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 6.5",
                "1 <- 8.9",
                "2 <- 5.4",
                "3 <- 8.9",
                "4 <- 7.6",
                "5 <- 8.6",
                "6 <- 7.6",
                "7 <- 7.2",
                "8 <- 4.5",
                "9 <- 7.3"
            ]
        },
        "Step 9": {
            "steps": [
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * (11 - 1)) * 13 = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (13 - 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: 2 * (13 - 11) * (13 - 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 + (1 * 11)) * 13 = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (13 - 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 11) * (13 - 1) = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 + (13 - 11)) * 12 = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 + (13 - 11)) * 12 = 24",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "13 - 11 = 2 (left: 1 2 13) || 13 - 1 = 12 (left: 2 12) || 2 + 12 = 14 (left: 14)"
            ]
        },
        "Input": "1 1 11 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "33": {
        "puzzle": "1 6 6 12",
        "Step 0": {
            "steps": [
                "6 + 1 = 7 (left: 6 7 12)",
                "12 / 6 = 2 (left: 1 2 ",
                "12 - 6 = 6 (left: 1 6 6)",
                "6 * 1 = 6 (left: 6 6 12)",
                "6 / 1 = 6 (left: 6 6 12)",
                "12 / 6 = 2 (left: 1 6 ",
                "12 - 6 = 6 (left: 1 6 ",
                "1 + 6 = 7 (left: 6 7 12)",
                "6 * 1 = 6 (left: 6 6 12)",
                "6 - 1 = 5 (left: 5 6 12)"
            ],
            "Evaluation": [
                22.0,
                0.002,
                1.002,
                60.0,
                60.0,
                60.0,
                40.0,
                22.0,
                60.0,
                3.0
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.8",
                "2 <- 0.3",
                "3 <- 0.7",
                "4 <- 0.8",
                "5 <- 0.4",
                "6 <- 0.5",
                "7 <- 0.6",
                "8 <- 0.5",
                "9 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12)",
                "6 * 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "6 * 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12)",
                "1 + 6 = 7 (left: 6 7 12) || 6 + 7 = 13 (left: 13 12)",
                "6 * 1 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12)",
                "6 / 1 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12)",
                "12 / 6 = 2 (left: 1 6  || 1 + 6 = 7 (left: 7)",
                "12 - 6 = 6 (left: 1 6  || 1 * 6 = 6 (left: 6)",
                "12 / 6 = 2 (left: 1 6  || 6 - 1 = 5 (left: 5)",
                "12 / 6 = 2 (left: 1 6  || 6 - 1 = 5 (left: 5)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                40.0,
                0.003,
                60.0,
                60.0,
                0.002,
                0.003,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.5",
                "2 <- 0.8",
                "3 <- 0.5",
                "4 <- 1.2",
                "5 <- 0.3",
                "6 <- 1.2",
                "7 <- 0.0",
                "8 <- 1.4",
                "9 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "6 + 1 = 7 (left: 6 7 12) || 6 * 7 = 42 (left: 42 12)",
                "12 / 6 = 2 (left: 1 6  || 1 + 6 = 7 (left: 7)",
                "6 * 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "12 / 6 = 2 (left: 1 6  || 6 / 1 = 6 (left: 6)",
                "6 * 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12) || 36 * 12 = 432 (left: 432)",
                "6 * 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 6 2)",
                "6 * 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12) || 36 / 12 = 3 (left: 3)",
                "6 + 1 = 7 (left: 6 7 12) || 7 - 6 = 1 (left: 1 12)",
                "6 * 1 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12) || 0 + 12 = 12",
                "6 * 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12) || 36 * 12 = 432 (left: 432)"
            ],
            "Evaluation": [
                1.002,
                0.0,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                1.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.5",
                "2 <- 1.0",
                "3 <- 1.0",
                "4 <- 0.0",
                "5 <- 0.4",
                "6 <- 0.4",
                "7 <- 1.4",
                "8 <- 0.7",
                "9 <- 1.0"
            ]
        },
        "Step 3": {
            "steps": [
                "6 - 1 = 5 (left: 5 6 12)",
                "6 / 1 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12) || 12 / 0 = undefined (left: 12)",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "6 + 1 = 7 (left: 6 7 12) || 12 - 6 = 6 (left: 6 6)",
                "6 / 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12)",
                "6 / 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6",
                "6 * 1 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "1 + 6 = 7 (left: 6 7 12) || 7 + 12 = 19 (left: 6 19)",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                2.0,
                0.003,
                0.003,
                0.003,
                0.003,
                60.0,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 3.5",
                "2 <- 0.3",
                "3 <- 1.0",
                "4 <- 0.6",
                "5 <- 1.0",
                "6 <- 3.5",
                "7 <- 1.0",
                "8 <- 0.6",
                "9 <- 0.3"
            ]
        },
        "Step 4": {
            "steps": [
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12)",
                "6 / 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left:",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 - 6 = 6 (left: 1 6  || 6 - 1 = 5 (left: 5) ",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "6 / 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 6 = 6 (left: 1 6  || 6 / 1 = 6 (left: 6)",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left:"
            ],
            "Evaluation": [
                21.001,
                0.003,
                0.001,
                0.003,
                0.002,
                60.0,
                0.001,
                40.001,
                0.003,
                1.0
            ],
            "Resampling": [
                "0 <- 4.5",
                "1 <- 1.0",
                "2 <- 4.7",
                "3 <- 0.6",
                "4 <- 4.7",
                "5 <- 4.9",
                "6 <- 1.5",
                "7 <- 1.5",
                "8 <- 3.0",
                "9 <- 3.5"
            ]
        },
        "Step 5": {
            "steps": [
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (6 * 1) + (6 + 6) = 24",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24)",
                "12 - 6 = 6 (left: 1 6  || 6 - 1 = 5 (left: 5)",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 12 = 144 (left: 24 144)",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: || 18 - 6 = 12 (left: 12 14)",
                "6 / 1 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12) || 0 + 12 = 12",
                "6 / 1 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12) || 0 - 12 = -12 (left: -12)",
                "6 - 1 = 5 (left: 5 6 12) || 5 + 6 = 11 (left: 11 12)",
                "6 / 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.001,
                40.001,
                0.003,
                0.003,
                0.001,
                0.003,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 4.7",
                "1 <- 5.1",
                "2 <- 5.9",
                "3 <- 5.3",
                "4 <- 4.5",
                "5 <- 5.3",
                "6 <- 4.7",
                "7 <- 5.1",
                "8 <- 5.3",
                "9 <- 0.4"
            ]
        },
        "Step 6": {
            "steps": [
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 12 = 144 (left: 24 144)",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 5 / 3 = 1.",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (6 * 1) + (6 + 6) = 24",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 12 = 144 (left: 24 144) || 24 + 144 = 168 (left: 168)",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (6 * 1) + (6 + 6) = 24",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 12 = 144 (left: 24 144) || 24 + 144 = 168 (left: 168)",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2)",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 27 / 3 = 9 (left: ",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 12 = 144 (left: 24 144) || 24 * 144 = 3456 (left: 3456)",
                "6 / 1 = 6 (left: 6 6 12) || 12 * 6 = 72 (left: 72)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                60.0,
                40.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 6.3",
                "2 <- 6.7",
                "3 <- 1.0",
                "4 <- 6.5",
                "5 <- 5.9",
                "6 <- 5.1",
                "7 <- 6.5",
                "8 <- 6.5",
                "9 <- 6.9"
            ]
        },
        "Step 7": {
            "steps": [
                "6 * 1 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12) || 0 + 12 = 12 (left: 12)",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 0 + 24 = 24 (left: 24)",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (6 * 1) + (6 + 6) = 24",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((6 * 1) + 6) + 12 = 24",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 0 + 24 = 24 (left: 24)",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (6 * 1) + (6 + 6) = 24",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((6 * 1) + 6) + 12 = 24",
                "6 * 1 = 6 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((6 * 1) + 6) + 12 = 24"
            ]
        },
        "Input": "1 6 6 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 1
            },
            {
                "r": 1
            }
        ]
    },
    "34": {
        "puzzle": "4 5 12 12",
        "Step 0": {
            "steps": [
                "12 + 4 = 16 (left: ",
                "12 / 5 = 2.4 (left: 4 ",
                "4 + 5 = 9 (left: 9 12 12)",
                "12 / 4 = 3 (left: 3 5 12)",
                "12 / 4 = 3 (left: 3 12 12)",
                "5 + 12 = 17 (left: 4 17 12)",
                "12 - 4 = 8 (left: 5 8 12)",
                "4 + 5 = 9 (left: 9 12 12)",
                "12 / 5 = 2.4 (left: 4 2.4 12)",
                "4 + 5 = 9 (left: 9 12 12)"
            ],
            "Evaluation": [
                0.0,
                0.001,
                21.001,
                2.001,
                60.0,
                1.002,
                2.001,
                1.002,
                2.001,
                1.002
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.4",
                "2 <- 0.2",
                "3 <- 0.4",
                "4 <- INIT",
                "5 <- 0.4",
                "6 <- 0.4",
                "7 <- 0.2",
                "8 <- INIT",
                "9 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "4 + 5 = 9 (left: 9 12 12) || 12 + 9 = 21 (left: 9 12 21)",
                "12 / 4 = 3 (left: 3 12 12) || 3 + 12 = 15 (left: 12 15)",
                "4 + 5 = 9 (left: 9 12 12) || 12 / 9 = 1 (left: 1 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 12 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12)",
                "4 + 5 = 9 (left: 9 12 12) || 9 + 12 = 21 (left: 12 21)",
                "12 / 5 = 2.4 (left: 4 ",
                "4 + 5 = 9 (left: 9 12 12) || 9 + 12 = 21 (left: 12 12 21)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                2.0,
                0.003,
                60.0,
                0.002,
                1.002,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 1.4",
                "2 <- 0.2",
                "3 <- 0.4",
                "4 <- 1.4",
                "5 <- 1.4",
                "6 <- 1.4",
                "7 <- 0.8",
                "8 <- 0.4",
                "9 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "4 + 5 = 9 (left: 9 12 12) || 12 / 12 = 1 (left: 1)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 + 12 = 15 (left: 12 15)",
                "12 / 5 = 2.4 (left: 4 2.4 12) || 4 * 2.4 = 9.6 (left: 9.6 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left:"
            ],
            "Evaluation": [
                22.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                2.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 1.4",
                "3 <- 2.0",
                "4 <- 2.0",
                "5 <- 1.4",
                "6 <- 1.4",
                "7 <- 0.4",
                "8 <- 2.0",
                "9 <- 2.0"
            ]
        },
        "Step 3": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 12 / 9 = 1.33 (left: 1.33 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 12 - 9 = 3 (left: 3 12 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 12 / 9 = 1.33 (left: 1.33 12 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 12 - 12 = 0 (left: 0)",
                "12 / 4 = 3 (left: 3 12 12) || 3 + 12 = 15 (left: 12 15)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36)",
                "12 / 4 = 3 (left: 3 12 12) || 3 + 12 = 15 (left: 12 15)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 + 12 = 21 (left: 12 12 21)"
            ],
            "Evaluation": [
                2.001,
                41.0,
                0.003,
                0.003,
                0.003,
                0.003,
                60.0,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 3.1",
                "2 <- 3.1",
                "3 <- 3.8",
                "4 <- 3.1",
                "5 <- 3.1",
                "6 <- 3.6",
                "7 <- 1.4",
                "8 <- 1.4",
                "9 <- 3.6"
            ]
        },
        "Step 4": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 108 / 12 = 9 (left: 9 108)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 12 - 9 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 12 - 9 = 3 (left: 3 12 12) || 12 / 4 = 3 (left: 3 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 108 / 12 = 9 (left: 9)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 12 - 9 = 3 (left: 3 12 12) || 12 - 3 = 9 (left:",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 12 - 9 = 3 (left: 3 12 12) || 12 - 12 = 0 (left: 3 0)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || Input: 0 36 24 3",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 36 / 12 = 3 (left: 3 12)"
            ],
            "Evaluation": [
                41.0,
                0.003,
                20.002,
                1.0,
                1.002,
                0.003,
                20.002,
                0.003,
                60.0,
                40.0
            ],
            "Resampling": [
                "0 <- 3.6",
                "1 <- 4.0",
                "2 <- 4.0",
                "3 <- 4.8",
                "4 <- 3.6",
                "5 <- 3.6",
                "6 <- 0.2",
                "7 <- 4.8",
                "8 <- 4.6",
                "9 <- 4.8"
            ]
        },
        "Step 5": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 36 - 12 = 24 (left: 12 24)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 108 / 12 = 9 (left: 9 108) || 108 / 9 = 12 (left: 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 108 / 12 = 9 (left: 9 108) || 9 + 99 = 108 (left: 99)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 36 / 12 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 36 - 12 = 24 (left: 12 24)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 36 / 12 = 3 (left: 3 12)",
                "4 + 5 = 9 (left: 9 12 12) || 12 - 9 = 3 (left: 3 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 36 / 12 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12) || 4 * 12 = 48 (left: 48)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 36 / 12 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9 12)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                0.0,
                40.0,
                41.0
            ],
            "Resampling": [
                "0 <- 4.9",
                "1 <- 3.1",
                "2 <- 4.0",
                "3 <- 4.0",
                "4 <- 1.4",
                "5 <- 4.6",
                "6 <- 4.0",
                "7 <- 4.8",
                "8 <- 4.9",
                "9 <- 4.8"
            ]
        },
        "Step 6": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 108 - 12 = 96 (left: 96)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 12 - 9 = 3 (left: 3 12 12) || 12 / 12 = 1 (left: 1)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 108 / 12 = 9 (left: 9 108) || 9 * 12 = 108 (left: 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 108 / 12 = 9 (left: 9 108) || Possible next steps:",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12) || 12 - 4 = 8 (left: 8 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 108 / 12 = 9 (left: 9 108) || 108 - 99 = 9 (left: 9)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 36 / 12 = 3 (left: 3 12) || 3 + 12 = 15 (left: 15)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 12 + 108 = 120 (left: 120)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 36 / 12 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                22.0,
                41.0,
                0.003,
                0.003,
                60.0,
                20.0,
                0.002
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 6.7",
                "2 <- 4.6",
                "3 <- 6.4",
                "4 <- 6.4",
                "5 <- 6.7",
                "6 <- 6.8",
                "7 <- 5.3",
                "8 <- 6.7",
                "9 <- 6.8"
            ]
        },
        "Step 7": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 12 - 9 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || Possible next steps:",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12) || 4 * 12 = 48 (left: 48)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 12 - 9 = 3 (left: 3 12 12) || 3 + 12 = 15 (left: 12 15)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 12 - 9 = 3 (left: 3 12 12) || 3 + 12 = 15 (left: 12 15)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 12 * 108 = 1296 (left: 1296)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 108 / 12 = 9 (left: 9 108) || 108 - 9 = 99 (left: 9)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 36 / 12 = 3 (left: 3 12) || 3 + 12 = 15 (left: 15)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 108 / 12 = 9 (left: 9)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 108 / 12 = 9 (left: 9 108) || 108 - 9 = 99 (left: 99)"
            ],
            "Evaluation": [
                21.001,
                0.003,
                0.003,
                0.003,
                0.003,
                60.0,
                60.0,
                0.003,
                41.0,
                20.0
            ],
            "Resampling": [
                "0 <- 6.7",
                "1 <- 7.8",
                "2 <- 7.5",
                "3 <- 7.6",
                "4 <- 6.7",
                "5 <- 7.5",
                "6 <- 3.6",
                "7 <- 7.6",
                "8 <- 6.7",
                "9 <- 5.9"
            ]
        },
        "Step 8": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 108 / 12 = 9 (left: 9 108)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 36 / 12 = 3 (left: 3 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 108 - 12 = 96 (left: 96)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 12 * 9 = 108",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 12 / 108 = 0.1111111111111111 (left: 0.1111111111111111 108)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 108 / 12 = 9 (left: 9 108)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 36 - 12 = 24 (left: 12 24)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 12 * 9 = 108",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 108 / 9 = 12 (left: 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 108 / 12 = 9 (left: 9 108) || 9 * 12 = 108 (left: 12)"
            ],
            "Evaluation": [
                21.001,
                0.003,
                0.003,
                2.0,
                2.0,
                0.003,
                0.003,
                20.002,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 7.0",
                "1 <- 3.8",
                "2 <- 8.8",
                "3 <- 8.8",
                "4 <- 7.5",
                "5 <- 4.9",
                "6 <- 6.4",
                "7 <- 7.8",
                "8 <- 8.8",
                "9 <- 8.7"
            ]
        },
        "Step 9": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 12 - 9 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12 12) || 4 + 12 = 16 (left: 12 16)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 12 / 108 =",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 108 - 12 = 96 (left: 96)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 12 + 108 = 120 (left: 120)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 12 / 108 = 0.1111111 (left: 0.1111111)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 12 * 9 = 108 (left: 108)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 12 - 9 = 3 (left: 3 12 12) || 3 + 12 = 15 (left: 12 15)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 12 36)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 9 * 12 = 108 (left: 12 108) || 108 / 12 = 9 (left: 9)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || Input: 3 12"
            ]
        },
        "Input": "4 5 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "35": {
        "puzzle": "4 6 13 13",
        "Step 0": {
            "steps": [
                "6 + 13 = 19 (left: 4 19 13)",
                "4 + 6 = 10 (left: 10 13 13)",
                "13 - 6 = 7 (left: 4 7 13)",
                "4 + 6 = 10 (left: 10 13 13)",
                "13 - 4 = 9 (left: 6 9 13)",
                "13 + 4 = 17 (left: 6 13 17)",
                "4 * 6 = 24 (left: 24 13 13)",
                "6 + 13 = 19 (left: 4 19 13)",
                "13 - 4 = 9 (left: 9 6 13)",
                "13 + 4 = 17 (left: 6 13 17)"
            ],
            "Evaluation": [
                41.0,
                0.003,
                1.002,
                0.003,
                21.001,
                2.001,
                20.002,
                40.001,
                60.0,
                3.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.7",
                "2 <- 0.6",
                "3 <- 0.7",
                "4 <- 0.7",
                "5 <- 0.8",
                "6 <- 0.6",
                "7 <- 0.8",
                "8 <- INIT",
                "9 <- 0.8"
            ]
        },
        "Step 1": {
            "steps": [
                "6 + 13 = 19 (left: 4 19 13) || 13 + 4 = 17 (left: 17 13)",
                "6 + 13 = 19 (left: 4 19 13) || 19 / 4 = 4.75 (left: 4.75 13)",
                "4 * 6 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13)",
                "6 + 13 = 19 (left: 4 19 13) || 19 / 13 = 1.46 (left: 4 1.46)",
                "6 + 13 = 19 (left: 4 19 13) || 19 / 4 = 4.75 (left: 4.75 13)",
                "13 - 4 = 9 (left: 9 6 13) || 6 * 13 = 78 (left: 9 78)",
                "4 * 6 = 24 (left: 24 13 13) || 24 / 13 = 1 (left: 1 13)",
                "13 - 4 = 9 (left: 9 6 13) || 13 / 6 = 2.1666666666666665 (left: 9 2.166666666",
                "4 * 6 = 24 (left: 13 13 24)",
                "13 - 4 = 9 (left: 9 6 13) || Input: 3"
            ],
            "Evaluation": [
                1.001,
                1.002,
                22.0,
                0.001,
                1.001,
                0.002,
                1.001,
                2.001,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 0.8",
                "2 <- 0.7",
                "3 <- 0.0",
                "4 <- 0.4",
                "5 <- 1.2",
                "6 <- 0.7",
                "7 <- 0.0",
                "8 <- INIT",
                "9 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "4 * 6 = 24 (left: 24 13 13) || 24 / 13 = 1 (left: 1 13) || 5 - 3 = 2 (left: 2 7)",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 4 6)",
                "6 + 13 = 19 (left: 4 19 13) || 19 - 4 = 15 (left: 15 13)",
                "6 + 13 = 19 (left: 4 19 13) || 13 + 4 = 17 (left: 17 13)",
                "13 - 4 = 9 (left: 6 9 13) || 13 - 9 = 4 (left: 4 13)",
                "4 * 6 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 1.846 + 13 = 14.846 (left: 14.846)",
                "6 + 13 = 19 (left: 4 19 13) || 19 - 4 = 15 (left: 15 13)",
                "6 + 13 = 19 (left: 4 19 13) || 4 * 19 = 76 (left: 13 76)",
                "4 + 6 = 10 (left: 10 13 13)",
                "4 * 6 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 13 / 1.846 = 7.045 (left: 7.045)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 2.1",
                "2 <- 0.4",
                "3 <- 2.1",
                "4 <- 0.0",
                "5 <- 2.1",
                "6 <- 2.1",
                "7 <- 2.1",
                "8 <- 2.1",
                "9 <- 0.8"
            ]
        },
        "Step 3": {
            "steps": [
                "13 - 4 = 9 (left: 9 6 13) || 9 - 6 = 3 (left: 3 13)",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 4 6) || 3 + 9 = 12 (left: 12 5)",
                "13 - 4 = 9 (left: 6 9 13) || 6 * 9 = 54 (left: 13 54)",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "6 + 13 = 19 (left: 4 19 13) || 19 / 4 = 4.75 (left: 4.75 13)",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 4 6) || 4 - 6 = -2 (left: -2)",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 6 = 7 (left: 9 7)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                2.001,
                40.0,
                0.003,
                0.0,
                0.001,
                0.001,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 2.1",
                "2 <- 0.0",
                "3 <- 0.8",
                "4 <- 0.6",
                "5 <- 3.3",
                "6 <- 0.8",
                "7 <- 3.3",
                "8 <- 0.7",
                "9 <- 0.0"
            ]
        },
        "Step 4": {
            "steps": [
                "13 - 4 = 9 (left: 6 9 13) || 6 * 9 = 54 (left: 13 54) || 13 + 54 = 67 (left: 67)",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 4 6) || 6 * 4 = 24 (left: 24)",
                "6 + 13 = 19 (left: 4 19 13) || 19 / 4 = 4.75 (left: 4.75 13)",
                "13 - 4 = 9 (left: 9 6 13) || 9 + 6 = 15 (left: 13 15)",
                "4 * 6 = 24 (left: 24 13 13) || 24 + 13 = 37 (left: 13 37)",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (13 - 4) * (13 - 9) = 24",
                "13 - 4 = 9 (left: 9 6 13) || 13 + 9 = 22 (left: 6 22)",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (13 - 4) * (13 - 9) = 24",
                "6 + 13 = 19 (left: 4 19 13) || 4 + 19 = 23 (left: 13 23)",
                "6 + 13 = 19 (left: 4 19 13) || 19 - 4 = 15 (left: 15 13)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.001,
                0.003,
                1.002,
                0.002,
                0.003,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 4.9",
                "2 <- 4.9",
                "3 <- 4.9",
                "4 <- 4.9",
                "5 <- 2.1",
                "6 <- 0.8",
                "7 <- 4.9",
                "8 <- 4.1",
                "9 <- 4.8"
            ]
        },
        "Step 5": {
            "steps": [
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 4 6) || 6 * 4 = 24 (left: 24) || Answer: 6 * (13 - (13 - 4)) = 24",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (13 - (13 - 4)) = 24",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (13 - 4) * 6 = 24",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (13 - 4) * (13 - 9) = 24",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (13 - (13 - 4)) = 24",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "13 - 4 = 9 (left: 9 6 13) || 6 + 13 = 19 (left: 9 19)",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (13 - 4) * (13 - 9) = 24",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 4 6) || 6 * 4 = 24 (left: 24) || Answer: (13 - 4) * (13 - 9) = 24",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)"
            ]
        },
        "Input": "4 6 13 13",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 0
            }
        ]
    },
    "36": {
        "puzzle": "12 12 12 12",
        "Step 0": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12)",
                "12 + 12 = 24 (left: 12 24 12)",
                "12 + 12 = 24 (left: 12 24 12)",
                "12 / 12 = 1 (left: 1 12 12)",
                "12 * 12 = 144 (left: 12 12 144)",
                "12 * 12 = 144 (left: 12 12 144)",
                "12 * 12 = 144 (left: 12 12 144)",
                "12 * 12 = 144 (left: 12 12 144)",
                "12 / 12 = 1 (left: 1 12 12)",
                "12 * 12 = 144 (left: 12 12 144)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                40.001,
                60.0,
                1.002,
                22.0,
                21.001,
                0.003,
                41.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.4",
                "2 <- 0.0",
                "3 <- 0.3",
                "4 <- 0.4",
                "5 <- 0.0",
                "6 <- 0.7",
                "7 <- 0.3",
                "8 <- 0.0",
                "9 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "12 + 12 = 24 (left: 12 24 12) || 24 / 12 = 2 (left: 2 12)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 1 12)",
                "12 / 12 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "12 * 12 = 144 (left: 12 12 144) || 12 - 12 = 0 (left: 0 144)",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144)",
                "12 / 12 = 1 (left: 1 12 12) || 1 + 12 = 13 (left: 12 13)",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                60.0,
                40.001,
                0.001,
                40.001,
                1.001,
                0.003,
                40.0,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 0.1",
                "2 <- 0.2",
                "3 <- 1.3",
                "4 <- 0.2",
                "5 <- 0.0",
                "6 <- 1.0",
                "7 <- 0.2",
                "8 <- 0.0",
                "9 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 + 12 = 24 (left: 12 24 12) || 12 + 24 = 36 (left: 12 36)",
                "12 + 12 = 24 (left: 12 24 12) || 24 + 12 = 36 (left: 12 36)",
                "12 / 12 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 + 12 = 24 (left: 12 24 12) || 12 + 24 = 36 (left: 12 36)",
                "12 - 12 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 12)",
                "12 + 12 = 24 (left: 12 24 12) || 24 / 12 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "12 + 12 = 24 (left: 12 24 12) || 24 - 12 = 12 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12)",
                "12 + 12 = 24 (left: 12 24 12) || 24 / 12 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                0.003,
                0.003,
                20.0,
                0.0,
                20.002,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.2",
                "2 <- 2.8",
                "3 <- 0.4",
                "4 <- 2.7",
                "5 <- 2.7",
                "6 <- 2.7",
                "7 <- 0.7",
                "8 <- 1.9",
                "9 <- 1.6"
            ]
        },
        "Step 3": {
            "steps": [
                "12 + 12 = 24 (left: 12 24 12) || 12 + 24 = 36 (left: 12 36)",
                "12 + 12 = 24 (left: 12 24 12) || 12 * 24 = 288 (left: 288)",
                "12 - 12 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 * 12 = 144 (left: 12 12 144) || 12 / 12 = 1 (left: 1 12 144)",
                "12 + 12 = 24 (left: 12 24 12) || 24 - 12 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "12 + 12 = 24 (left: 12 24 12) || 24 - 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 + 12 = 24 (left: 12 24 12) || 24 - 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 * 12 = 144 (left: 12 12 144) || 12 * 12 = 144 (left: 12 144)",
                "12 - 12 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 - 24 = 120 (left: 120)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                40.001,
                60.0,
                20.002,
                40.001,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.8",
                "1 <- 3.6",
                "2 <- 3.6",
                "3 <- 3.4",
                "4 <- 3.4",
                "5 <- 0.2",
                "6 <- 2.8",
                "7 <- 3.3",
                "8 <- 3.4",
                "9 <- 3.4"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 + 12 = 24 (left: 12 24 12) || 24 - 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1)",
                "12 + 12 = 24 (left: 12 24 12) || 24 - 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 12 = 144 (left: 24 144)",
                "12 + 12 = 24 (left: 12 24 12) || 24 - 12 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (12 + 12) + (12 + 12) = 24",
                "12 + 12 = 24 (left: 12 24 12) || 24 - 12 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((12 + 12) - 12) + 12 = 24",
                "12 + 12 = 24 (left: 12 24 12) || 12 / 24 = 0.5 (left: 0.5 12)",
                "12 - 12 = 0 (left: 0 12 12) || 0 + 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 * 12 = 144 (left: 12 12 144) || 12 / 12 = 1 (left: 1 12 144) || 1 * 12 = 12 (left: 12 144)",
                "12 + 12 = 24 (left: 12 24 12) || 24 - 12 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (12 + 12) + (12 + 12) = 24",
                "12 + 12 = 24 (left: 12 24 12) || 24 - 12 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (12 + 12) + (12 + 12) = 24"
            ]
        },
        "Input": "12 12 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "37": {
        "puzzle": "2 11 11 12",
        "Step 0": {
            "steps": [
                "12 - 11 = 1 (left: 2 11 1)",
                "12 - 11 = 1 (left: 1 11 12)",
                "11 - 2 = 9 (left: 9 11 12)",
                "11 / 2 = 5.5 (left: 5.5 11 12)",
                "2 * 11 = 22 (left: 11 12 22)",
                "12 / 2 = 6 (left: 6 11 11)",
                "12 / 2 = 6 (left: ",
                "12 - 2 = 10 (left: 11 11 10)",
                "11 / 2 = 5.5 (left: 5.5 11 12)",
                "11 - 2 = 9 (left: 9 11 12)"
            ],
            "Evaluation": [
                1.0,
                1.002,
                1.002,
                3.0,
                20.002,
                41.0,
                0.0,
                0.003,
                2.001,
                2.001
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.8",
                "2 <- INIT",
                "3 <- 0.5",
                "4 <- 0.5",
                "5 <- 0.4",
                "6 <- INIT",
                "7 <- 0.5",
                "8 <- 0.5",
                "9 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "12 / 2 = 6 (left: 6 11 11) || 11 + 6 = 17 (left: 11 17)",
                "11 / 2 = 5.5 (left: 5.5 11 12) || 5.5 + 11 = 16.5 (left: 12 16.5)",
                "11 / 2 = 5.5 (left: 5.5 11 12)",
                "12 / 2 = 6 (left: 6 11 11) || 11 / 6 = 1.8333 (left: 1.8333 11 11)",
                "12 / 2 = 6 (left: 6 11 11) || 6 + 11 = 17 (left: 11 11 17)",
                "2 * 11 = 22 (left: 11 12 22) || 22 + 11 = 33 (left: 12 33)",
                "12 - 2 = 10 (left: 10 11 12)",
                "12 / 2 = 6 (left: 6 11 11) || 6 + 11 = 17 (left: 11 11 17)",
                "12 / 2 = 6 (left: 6 11 11) || 11 * 6 = 66 (left: 11 66)",
                "12 - 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                3.0,
                1.002,
                0.003,
                0.003,
                1.002,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.4",
                "2 <- INIT",
                "3 <- 1.3",
                "4 <- 0.4",
                "5 <- 0.4",
                "6 <- 0.5",
                "7 <- 0.5",
                "8 <- 0.5",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 11 = 22 (left: 11 12 22) || 22 - 11 = 11",
                "2 * 11 = 22 (left: 11 12 22) || 12 / 11 = 1.09 (left: 1.09 22)",
                "11 / 2 = 5.5 (left: 5.5 11 12)",
                "12 / 2 = 6 (left: 6 11 11) || 11 / 6 = 1.8333 (left: 1.8333 11 11) || 11 / 1.8333 = 5.9999 (left: 6 11)",
                "2 * 11 = 22 (left: 11 12 22) || 12 - 11 = 1 (left: 1 22)",
                "2 * 11 = 22 (left: 11 12 22) || 11 * 12 = 132 (left: 22)",
                "12 / 2 = 6 (left: 6 11 11) || 11 / 6 = 1.83 (left: 1.83 11 11)",
                "12 / 2 = 6 (left: 6 11 11) || 6 + 11 = 17 (left: 11 17)",
                "12 / 2 = 6 (left: 6 11 11) || 11 / 6 = 1.833333333",
                "11 - 2 = 9 (left: 9 11 12)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                3.0,
                0.002,
                1.002,
                20.001,
                0.003,
                0.003,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.5",
                "2 <- 0.4",
                "3 <- 2.5",
                "4 <- 2.5",
                "5 <- 0.5",
                "6 <- 2.5",
                "7 <- 2.5",
                "8 <- INIT",
                "9 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 11 = 22 (left: 11 12 22)",
                "2 * 11 = 22 (left: 11 12 22) || 11 * 12 = 132 (left: 22) || 22 - 2 = 20 (left: 20)",
                "2 * 11 = 22 (left: 11 12 22) || 11 + 12 = 23 (left: 23 22)",
                "2 * 11 = 22 (left: 11 12 22) || 11 * 12 = 132 (left: 22) || There are no possible next steps with the number 22 as there are no other numbers provided for arithmetic operations.",
                "2 * 11 = 22 (left: 11 12 22) || 11 * 12 = 132 (left: 22) || 22 / 2 = 11",
                "12 / 2 = 6 (left: 6 11 11) || 11 * 6 = 66 (left: 66 11)",
                "2 * 11 = 22 (left: 11 12 22) || 11 * 12 = 132 (left: 22) || Input: 5 9 3",
                "2 * 11 = 22 (left: 11 12 22) || 11 * 12 = 132 (left: 22) || None, since there is only one number.",
                "11 - 2 = 9 (left: 9 11 12)",
                "12 / 2 = 6 (left: 6 11 11) || 11 / 6 = 1.8333 (left: 1.8333 11 11) || 11 - 1.8333 = 9.1667 (left: 9.1667 11)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                0.003,
                0.003,
                1.0,
                0.003,
                0.003,
                40.001,
                1.001
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 2.5",
                "2 <- 3.8",
                "3 <- 2.4",
                "4 <- 3.8",
                "5 <- 3.8",
                "6 <- 2.5",
                "7 <- 3.8",
                "8 <- 0.4",
                "9 <- 3.8"
            ]
        },
        "Step 4": {
            "steps": [
                "11 - 2 = 9 (left: 9 11 12) || 12 - 9 = 3 (left: 3 12)",
                "2 * 11 = 22 (left: 11 12 22) || 11 * 12 = 132 (left: 22) || 22 - 8 = 14 (left: 8)",
                "11 - 2 = 9 (left: 9 11 12) || 11 / 9 = 1.22 (left: 1.22 12)",
                "2 * 11 = 22 (left: 11 12 22) || 12 - 11 = 1 (left: 1 22) || 22 + 1 = 23 (left: 23)",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12)",
                "11 - 2 = 9 (left: 9 11 12) || 9 + 11 = 20 (left: 20 12)",
                "2 * 11 = 22 (left: 11 12 22) || 11 * 12 = 132 (left: 22) || No possible next steps as there is only one number in the input.",
                "11 - 2 = 9 (left: 9 11 12) || 12 / 9 = 1.3333 (left: 1.3333)",
                "2 * 11 = 22 (left: 11 12 22) || 22 - 12 = 10 (left: 11 10)",
                "11 - 2 = 9 (left: 9 11 12) || 12 - 9 = 3 (left: 3 12)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.002,
                0.002,
                60.0,
                0.002,
                0.003,
                0.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 4.4",
                "2 <- 3.8",
                "3 <- 4.4",
                "4 <- 3.8",
                "5 <- 2.5",
                "6 <- 4.4",
                "7 <- 4.4",
                "8 <- 4.4",
                "9 <- 2.5"
            ]
        },
        "Step 5": {
            "steps": [
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 2 = 9 (left: 9 12)",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12)",
                "2 * 11 = 22 (left: 11 12 22) || 11 * 12 = 132 (left: 22) || 22 + 2 = 24",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "2 * 11 = 22 (left: 11 12 22) || 11 * 12 = 132 (left: 22) || 22 * 2 = 44 (left: 44)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                60.0,
                60.0,
                60.0,
                40.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.6",
                "1 <- 5.5",
                "2 <- 5.5",
                "3 <- 5.6",
                "4 <- 5.6",
                "5 <- 5.5",
                "6 <- 4.4",
                "7 <- 3.8",
                "8 <- 5.5",
                "9 <- 5.6"
            ]
        },
        "Step 6": {
            "steps": [
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (11 - 2) * (11 - 9) = 24",
                "2 * 11 = 22 (left: 11 12 22) || 11 * 12 = 132 (left: 22) || 22 + 2 = 24 || 22 * 2 = 44 (left: 44)",
                "2 * 11 = 22 (left: 11 12 22) || 11 * 12 = 132 (left: 22) || 22 + 2 = 24 || 24 - 8 = 16 (left: 8 14 ",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (11 - 2) * (11 - 9) * 12 = 24",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (11 - 2) * (11 - 9) * 12 = 24",
                "2 * 11 = 22 (left: 11 12 22) || 11 * 12 = 132 (left: 22) || 22 + 2 = 24 || 22 - 2 = 20 (left: 8 20 ",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 + 12 = 14 (left: 12 14)",
                "11 - 2 = 9 (left: 9 11 12) || 9 / 11 = 0.818181",
                "2 * 11 = 22 (left: 11 12 22) || 11 * 12 = 132 (left: 22) || 22 + 2 = 24 || 14 - 8 = 6 (left: 6 6)",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (11 - 2) * (11 - 9) * 12 = 24"
            ],
            "Evaluation": [
                1.002,
                0.002,
                0.003,
                0.003,
                0.003,
                40.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 6.6",
                "2 <- 4.4",
                "3 <- 6.6",
                "4 <- 6.8",
                "5 <- 6.9",
                "6 <- 6.7",
                "7 <- 6.6",
                "8 <- 6.7",
                "9 <- 5.6"
            ]
        },
        "Step 7": {
            "steps": [
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "2 * 11 = 22 (left: 11 12 22) || 11 * 12 = 132 (left: 22) || 22 + 2 = 24 || 22 * 2 = 44 (left: 8 14 44)",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "2 * 11 = 22 (left: 11 12 22) || 11 * 12 = 132 (left: 22) || 22 + 2 = 24 || 22 / 2 = 11 (left: 11 2)",
                "2 * 11 = 22 (left: 11 12 22) || 11 * 12 = 132 (left: 22) || 22 + 2 = 24 || 22 - 2 = 20 (left: 20 24)",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: 2 * (11 - (11 - 12)) = 24",
                "2 * 11 = 22 (left: 11 12 22) || 11 * 12 = 132 (left: 22) || 22 + 2 = 24 || 2 * 2 = 4 (left: 4 24)",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (11 - 2) * (11 - 9) * 12 = 24",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (11 - 2) * (11 - 9) = 24"
            ]
        },
        "Input": "2 11 11 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "38": {
        "puzzle": "4 4 4 6",
        "Step 0": {
            "steps": [
                "6 - 4 = 2 (left: 4 4 2)",
                "4 / 4 = 1 (left: 4 4 6)",
                "4 + 4 = 8 (left: 4 6 8)",
                "4 / 4 = 1 (left: 4 4 6)",
                "4 + 4 = 8 (left: 4 8 6)",
                "4 + 4 = 8 (left: 4 6 8)",
                "4 / 4 = 1 (left: 1 4 6)",
                "4 + 4 = 8 (left: 4 6 8)",
                "4 + 4 = 8 (left: 4 8 6)",
                "6 / 4 = 1.5 (left: 1.5 4 4)"
            ],
            "Evaluation": [
                2.001,
                3.0,
                60.0,
                22.0,
                41.0,
                60.0,
                60.0,
                60.0,
                41.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 0.7",
                "2 <- 0.7",
                "3 <- INIT",
                "4 <- 0.2",
                "5 <- 0.2",
                "6 <- 0.7",
                "7 <- 0.6",
                "8 <- 0.7",
                "9 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "6 / 4 = 1.5 (left: 1.5 4 4) || 1.5 + 4 = 5.5 (left: 4 5.5)",
                "4 + 4 = 8 (left: 4 6 8) || 8 / 4 = 2 (left: 2 6)",
                "4 + 4 = 8 (left: 4 6 8) || 4 + 6 = 10 (left: 8 10)",
                "4 / 4 = 1 (left: 4 4 6)",
                "4 + 4 = 8 (left: 4 6 8) || 6 - 4 = 2 (left: 2 8)",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6)",
                "4 + 4 = 8 (left: 4 6 8) || 6 / 4 = 1.5 (left: 1.5 8)",
                "4 / 4 = 1 (left: 1 4 6) || 4 + 6 = 10 (left: 1 10)",
                "4 + 4 = 8 (left: 4 6 8) || 8 / 4 = 2 (left: 2 6)",
                "4 + 4 = 8 (left: 4 8 6) || 4 + 8 = 12 (left: 6 12)"
            ],
            "Evaluation": [
                3.0,
                1.001,
                1.001,
                3.0,
                2.0,
                60.0,
                0.001,
                40.0,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 0.8",
                "2 <- 0.4",
                "3 <- 1.5",
                "4 <- 0.6",
                "5 <- 0.7",
                "6 <- INIT",
                "7 <- 1.5",
                "8 <- 0.5",
                "9 <- 1.5"
            ]
        },
        "Step 2": {
            "steps": [
                "4 / 4 = 1 (left: 1 4 6) || 4 + 6 = 10 (left: 1 10)",
                "4 + 4 = 8 (left: 4 8 6) || 4 + 8 = 12 (left: 6 12)",
                "4 + 4 = 8 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6)",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "4 / 4 = 1 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5)",
                "4 + 4 = 8 (left: 4 6 8) || 6 / 4 = 1.5 (",
                "4 - 4 = 0 (left: 0 4 6)",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 6 = 2 (left:",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                60.0,
                60.0,
                1.002,
                0.003,
                1.002,
                0.001,
                0.002,
                40.0
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.3",
                "2 <- 0.9",
                "3 <- 2.9",
                "4 <- 1.5",
                "5 <- 2.9",
                "6 <- 2.0",
                "7 <- 1.5",
                "8 <- 0.5",
                "9 <- 2.3"
            ]
        },
        "Step 3": {
            "steps": [
                "4 / 4 = 1 (left: 1 4 6) || 4 + 6 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "6 / 4 = 1.5 (left: 1.5 4 4) || 4 - 1.5 = 2.",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 / 4 = 1 (left: 1 4 6) || 4 + 6 = 10 (left: 1 10) || 1 / 10 = 0.1 (left: 0.1)",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "4 + 4 = 8 (left: 4 6 8) || 6 + 8 = 14 (left: 4 14)",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.0,
                0.003,
                60.0,
                0.003,
                60.0,
                41.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 3.4",
                "2 <- 2.2",
                "3 <- 0.7",
                "4 <- 1.5",
                "5 <- 3.4",
                "6 <- 2.3",
                "7 <- 1.5",
                "8 <- 2.0",
                "9 <- 2.2"
            ]
        },
        "Step 4": {
            "steps": [
                "4 + 4 = 8 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 10",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "4 + 4 = 8 (left: 4 6 8) || 6 / 4 = 1.5 (left: 1.5 8)",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "4 / 4 = 1 (left: 1 4 6) || 4 + 6 = 10 (left: 1 10) || 1 - 10 =",
                "4 + 4 = 8 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                1.001,
                0.002,
                0.003,
                0.003,
                0.002,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 3.6",
                "1 <- 4.8",
                "2 <- 4.8",
                "3 <- 0.7",
                "4 <- 4.8",
                "5 <- 3.4",
                "6 <- 3.7",
                "7 <- 3.7",
                "8 <- 3.8",
                "9 <- 3.8"
            ]
        },
        "Step 5": {
            "steps": [
                "4 + 4 = 8 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * 6 = 24",
                "4 + 4 = 8 (left: 4 6 8) || 4 + 6 = 10 (left: 8 10)",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 8 6) || 4 + 8 = 12 (left: 6 12)",
                "4 + 4 = 8 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6)",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)"
            ],
            "Evaluation": [
                60.0,
                20.0,
                20.002,
                60.0,
                0.001,
                0.003,
                60.0,
                60.0,
                60.0,
                3.0
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 3.8",
                "2 <- 4.7",
                "3 <- 2.3",
                "4 <- 0.8",
                "5 <- 5.0",
                "6 <- 5.8",
                "7 <- 5.0",
                "8 <- 5.8",
                "9 <- 2.2"
            ]
        },
        "Step 6": {
            "steps": [
                "4 + 4 = 8 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "4 / 4 = 1 (left: 1 4 6) || 4 + 6 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * 6 = 24",
                "4 + 4 = 8 (left: 4 8 6) || 8 - 4 = 4 (left: 4",
                "4 + 4 = 8 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "4 + 4 = 8 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "4 + 4 = 8 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.002,
                0.002,
                0.002,
                0.001,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 6.7",
                "1 <- 6.7",
                "2 <- 5.0",
                "3 <- 5.1",
                "4 <- 4.9",
                "5 <- 5.0",
                "6 <- 0.7",
                "7 <- 6.7",
                "8 <- 4.8",
                "9 <- 0.5"
            ]
        },
        "Step 7": {
            "steps": [
                "4 + 4 = 8 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 9 - 3 = 6 (left: 6)",
                "4 + 4 = 8 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "4 + 4 = 8 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 6 8) || 4 + 6 = 10 (left: 8 10) || 10 - 8 = 2 (left: 2)",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "4 + 4 = 8 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6)",
                "4 + 4 = 8 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 6 8) || 6 / 4 = 1.5 (left: 1.5 8)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.001,
                60.0,
                20.0,
                0.002,
                1.002,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 5.6",
                "2 <- 6.9",
                "3 <- 7.7",
                "4 <- 5.3",
                "5 <- 7.3",
                "6 <- 5.3",
                "7 <- 7.9",
                "8 <- 5.6",
                "9 <- 5.0"
            ]
        },
        "Step 8": {
            "steps": [
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "4 + 4 = 8 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 8 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24"
            ],
            "Evaluation": [
                0.0,
                0.003,
                2.001,
                60.0,
                60.0,
                40.0,
                60.0,
                60.0,
                40.0,
                60.0
            ],
            "Resampling": [
                "0 <- 6.9",
                "1 <- 8.3",
                "2 <- 6.9",
                "3 <- 8.6",
                "4 <- 8.4",
                "5 <- 8.7",
                "6 <- 8.3",
                "7 <- 8.4",
                "8 <- 8.8",
                "9 <- 5.1"
            ]
        },
        "Step 9": {
            "steps": [
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 6 8) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 4) * (4 * 6) = 24",
                "4 + 4 = 8 (left: 4 6 8) || 4 + 6 = 10 (left: 8 10) || 8 + 10 = 18 (left: 18)"
            ]
        },
        "Input": "4 4 4 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "39": {
        "puzzle": "1 1 1 11",
        "Step 0": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 11)",
                "1 / 1 = 1 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1 ",
                "11 - 1 = 10 (left: 1 1 10)",
                "1 * 1 * 1 = 1 (left: ",
                "1 + 1 = 2 (left: 1 2 11)",
                "11 - 1 = 10 (left: 1 1 10)",
                "1 * 1 = 1 (left: 1 1 ",
                "11 - 1 = 10 (left: 1 1 10)",
                "1 * 1 = 1 (left: 1 1 11)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                0.003,
                0.0,
                2.001,
                1.002,
                2.001,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 0.8",
                "7 <- INIT",
                "8 <- 0.8",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 11)",
                "1 + 1 = 2 (left: 1 2 11)",
                "11 + 1 = 12 (left: 1 1 12)",
                "11 - 1 = 10 (left: 1 1 10)",
                "1 + 1 = 2 (left: 1 2 11)",
                "1 * 1 = 1 (left: 1 1 11)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10)",
                "11 - 1 = 10 (left: 1 1 10)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10)",
                "1 + 11 = 12 (left: 1 1 12)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                21.001,
                1.002,
                0.003,
                0.003,
                60.0,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 1.6",
                "2 <- 1.6",
                "3 <- INIT",
                "4 <- 1.8",
                "5 <- 1.6",
                "6 <- 1.2",
                "7 <- 1.6",
                "8 <- INIT",
                "9 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 1 / 10 = 0.1 (left: 0.1)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "11 - 1 = 10 (left: 1 1 10)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 + 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 / 1 = 1 (left: 1 1 11)",
                "11 + 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                1.002,
                20.0
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 1.6",
                "2 <- 1.2",
                "3 <- 2.9",
                "4 <- 1.8",
                "5 <- 1.6",
                "6 <- 1.8",
                "7 <- 0.7",
                "8 <- 1.6",
                "9 <- 1.8"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 11 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 + 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "11 + 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1  || 1 * 1 = 1 (left: 1)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                40.0,
                0.002,
                0.003,
                0.003,
                0.003,
                0.001,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 3.2",
                "2 <- 2.9",
                "3 <- 1.9",
                "4 <- 3.0",
                "5 <- 3.0",
                "6 <- 1.8",
                "7 <- 3.0",
                "8 <- INIT",
                "9 <- 0.5"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 11 = 12 (left: 1 1 12) || 1 / 1 = 1 (left: 1 12)",
                "11 + 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "11 + 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "1 + 11 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 + 11 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 / 0 = undefined",
                "1 + 11 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 0 + 12 = 12 (left: 12)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "1 + 11 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 * 0 = 0 (left: 0)",
                "11 - 1 = 10 (left: 1 1 10)",
                "1 + 1 = 2 (left: 1 2 11) || 11 / 2 = 5.5 (left: 1 5.5)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.002,
                21.0,
                0.003,
                0.003,
                0.001,
                0.003,
                21.001,
                1.001
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 1.6",
                "2 <- 3.2",
                "3 <- 4.8",
                "4 <- 3.0",
                "5 <- 4.8",
                "6 <- 3.0",
                "7 <- 3.0",
                "8 <- 4.0",
                "9 <- 3.2"
            ]
        },
        "Step 5": {
            "steps": [
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || Possible next steps:",
                "11 + 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "11 - 1 = 10 (left: 1 1 10) || 1 - 1 = 0 (left: 0 10)",
                "1 + 11 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 0 + 12 = 12 (left: 12)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10)",
                "1 + 11 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 0 * 12 = 0 (left: 0)",
                "1 + 11 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 0 + 12 = 12 (left: 12)",
                "1 + 11 = 12 (left: 1 1 12) || 1 / 1 = 1 (left: 1 12) || 12 - 1 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                20.0,
                0.001,
                60.0,
                0.002,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 5.3",
                "2 <- 1.9",
                "3 <- 5.5",
                "4 <- 5.5",
                "5 <- 1.9",
                "6 <- 5.5",
                "7 <- 1.9",
                "8 <- 3.0",
                "9 <- 1.6"
            ]
        },
        "Step 6": {
            "steps": [
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10) || 1 - 1 = 0 (left: 0 10) || 0 + 10 = 10 (left: 10)",
                "1 + 11 = 12 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 + 11 = 12 (left: 1 1 12) || 1 + 1 = 2 (left:",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "1 + 11 = 12 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12)",
                "1 + 11 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 0 + 12 = 12 (left: 12)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.002,
                0.002,
                0.003,
                0.003,
                0.001,
                40.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.5",
                "1 <- 6.7",
                "2 <- 6.7",
                "3 <- 3.0",
                "4 <- 6.7",
                "5 <- 6.7",
                "6 <- 5.5",
                "7 <- 6.7",
                "8 <- 5.5",
                "9 <- 6.7"
            ]
        },
        "Step 7": {
            "steps": [
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 1 / 10 = 0.1 (left: 0.1)",
                "1 + 11 = 12 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "1 + 11 = 12 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "1 + 11 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 * 0 = 0 (left: 0)",
                "1 + 11 = 12 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10 12)",
                "1 + 11 = 12 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 + 11 = 12 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 + 11 = 12 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)"
            ],
            "Evaluation": [
                1.0,
                0.001,
                0.002,
                0.003,
                1.002,
                0.003,
                0.003,
                0.003,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 5.3",
                "2 <- 1.8",
                "3 <- 7.9",
                "4 <- 7.9",
                "5 <- 7.9",
                "6 <- 6.7",
                "7 <- 7.9",
                "8 <- 4.8",
                "9 <- 3.2"
            ]
        },
        "Step 8": {
            "steps": [
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10) || 1 - 1 = 0 (left: 0 10) || 10 + 0 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "1 + 11 = 12 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 + 11) * (1 + 1) = 24",
                "1 + 11 = 12 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 + 11) * (1 + 1) = 24",
                "1 + 11 = 12 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 + 11) * (1 + 1) = 24",
                "1 + 11 = 12 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "1 + 11 = 12 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 + 1 + 11) * 1 = 24",
                "11 - 1 = 10 (left: 1 1 10) || Possible next steps:",
                "11 + 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)"
            ]
        },
        "Input": "1 1 1 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "40": {
        "puzzle": "1 1 11 12",
        "Step 0": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 12)",
                "1 - 1 = 0 (left: 0 11 12)",
                "12 - 1 = 11 (left: 1 11 ",
                "1 + 1 = 2 (left: 2 11 12)",
                "1 + 11 = 12 (left: 11 12 12)",
                "11 + 1 = 12 (left: 1 12 12)",
                "11 - 1 = 10 (left: 1 10 12)",
                "12 - 11 = 1 (left: 1 1 ",
                "1 * 1 = 1 (left: 1 11 12)",
                "11 - 1 = 10 (left: 1 10 12)"
            ],
            "Evaluation": [
                21.001,
                3.0,
                0.002,
                0.003,
                1.002,
                0.003,
                1.002,
                1.002,
                20.002,
                1.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.0",
                "2 <- 0.8",
                "3 <- 0.0",
                "4 <- 0.0",
                "5 <- 0.0",
                "6 <- INIT",
                "7 <- 0.0",
                "8 <- 0.8",
                "9 <- 0.8"
            ]
        },
        "Step 1": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 12) || 1 + 12 = 13 (left: 12 13)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "1 * 1 = 1 (left: 1 11 12) || 12 * 1 = 12 (left:",
                "11 + 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 1 11)",
                "11 + 1 = 12 (left: 1 12 12) || 12 - 12 = 0 (left: 1)",
                "11 + 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "11 - 1 = 10 (left: 1 10 12)",
                "11 + 1 = 12 (left: 1 12 12) || Input: 5 5 5",
                "1 * 1 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "1 * 1 = 1 (left: 1 11 12) || 12 - 1 = 11 (left: 11 12)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                0.002,
                40.0,
                0.002,
                0.003,
                1.002,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- 0.0",
                "4 <- 1.3",
                "5 <- 1.1",
                "6 <- 1.1",
                "7 <- 1.3",
                "8 <- 1.3",
                "9 <- 0.0"
            ]
        },
        "Step 2": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 1 11) || 1 + 11 = 12",
                "11 + 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "11 + 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                0.001,
                40.0,
                0.001,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 2.3",
                "2 <- INIT",
                "3 <- 0.0",
                "4 <- 1.1",
                "5 <- 2.0",
                "6 <- 2.3",
                "7 <- 2.3",
                "8 <- 2.3",
                "9 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 11 = 1 (left: 1 1  || 1 * 1 = 1 (left: 1) ",
                "11 + 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 + 1 = 2 (left: 2 11 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 12 12) || 12 + 1 = 13 (left: 13 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "11 + 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "11 + 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                60.0,
                0.003,
                40.0,
                0.001
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 2.0",
                "2 <- 2.3",
                "3 <- 3.6",
                "4 <- 2.3",
                "5 <- 1.3",
                "6 <- 3.6",
                "7 <- 2.0",
                "8 <- 3.6",
                "9 <- 3.6"
            ]
        },
        "Step 4": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 + 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (11 + 1) * (1 + 12) = 24",
                "11 + 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "11 + 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((11 + 1) * 1) + 12 = 24",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (11 + 1) * (1 + 12) = 24",
                "11 + 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (11 + 1) * (1 + 12) = 24"
            ]
        },
        "Input": "1 1 11 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "41": {
        "puzzle": "2 7 7 12",
        "Step 0": {
            "steps": [
                "2 * 7 = 14 (left: 7 12 14)",
                "12 - 7 = 5 (left: ",
                "12 - 7 = 5 (left: 2 5 7)",
                "2 * 7 = 14 (left: 7 14 12)",
                "12 - 7 = 5 (left: ",
                "7 / 2 = 3.5 (left: 3.5 7 12)",
                "7 - 2 = 5 (left: 5 7 12)",
                "7 + 2 = 9 (left: 7 9 12)",
                "7 * 2 = 14 (left: 5 12 14)",
                "7 - 2 = 5 (left: 5 7 12)"
            ],
            "Evaluation": [
                3.0,
                0.0,
                3.0,
                2.001,
                0.0,
                40.001,
                21.001,
                2.001,
                1.002,
                3.0
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.5",
                "2 <- INIT",
                "3 <- 0.9",
                "4 <- 0.6",
                "5 <- 0.6",
                "6 <- 0.6",
                "7 <- 0.7",
                "8 <- INIT",
                "9 <- 0.6"
            ]
        },
        "Step 1": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 7 - 3.5 = 3.5 (left: 3.5",
                "7 - 2 = 5 (left: 5 7 12)",
                "7 - 2 = 5 (left: 5 7 12) || 12 - 5 = 7 (left: 7 12)",
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12)",
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12)",
                "7 - 2 = 5 (left: 5 7 12) || 12 - 5 = 7 (left: 7 12)",
                "7 + 2 = 9 (left: 7 9 12) || 7 + 9 = 16 (left: 16 12)",
                "12 - 7 = 5 (left: ",
                "7 - 2 = 5 (left: 5 7 12) || 5 + 7 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                1.002,
                1.001,
                60.0,
                60.0,
                0.002,
                1.002,
                0.0,
                40.001
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.9",
                "2 <- 1.5",
                "3 <- 1.5",
                "4 <- 1.4",
                "5 <- 1.9",
                "6 <- 1.4",
                "7 <- 1.4",
                "8 <- 1.5",
                "9 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 + 7 = 10.43 (left: 10.43)",
                "7 - 2 = 5 (left: 5 7 12) || 5 + 7 = 12 (left: 12 12) || 12 + 12 = 24",
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 + 12 = 14",
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "7 - 2 = 5 (left: 5 7 12) || 5 + 7 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                60.0,
                60.0,
                0.001,
                60.0,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 1.4",
                "2 <- 1.5",
                "3 <- 0.6",
                "4 <- 2.4",
                "5 <- 1.4",
                "6 <- 2.7",
                "7 <- 2.5",
                "8 <- 2.5",
                "9 <- 2.4"
            ]
        },
        "Step 3": {
            "steps": [
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 2) * (7 - 5) * 12 = 24",
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "7 - 2 = 5 (left: 5 7 12) || 5 + 7 = 12 (left: 12 12)",
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 2) * (7 - 5) * 12 = 24",
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 2) * (7 - 5) * 12 = 24",
                "7 - 2 = 5 (left: 5 7 12) || 5 + 7 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (7 - 2) + (5 + 7) = 24",
                "7 - 2 = 5 (left: 5 7 12) || 5 + 7 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((7 - 2) + 7) + 12 = 24",
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 2) * (7 - 5) * 12 = 24"
            ]
        },
        "Input": "2 7 7 12",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 1
            },
            {
                "r": -1
            }
        ]
    },
    "42": {
        "puzzle": "1 5 7 12",
        "Step 0": {
            "steps": [
                "5 + 7 = 12 (left: 1 12 12)",
                "12 - 7 = 5 (left: 1 5 12)",
                "1 + 5 = 6 (left: 6 7 12)",
                "1 + 5 = 6 (left: 6 7 12)",
                "12 - 7 = 5 (left: 1 5 12)",
                "5 / 1 = 5 (left: 5 7 ",
                "1 * 5 = 5 (left: 5 7 12)",
                "5 + 7 = 12 (left: 1 12 12)",
                "1 + 5 = 6 (left: 6 7 12)",
                "1 + 5 = 6 (left: 6 7 12)"
            ],
            "Evaluation": [
                0.003,
                22.0,
                2.001,
                3.0,
                1.001,
                0.0,
                21.001,
                2.001,
                22.0,
                3.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.1",
                "2 <- INIT",
                "3 <- 0.6",
                "4 <- 0.8",
                "5 <- INIT",
                "6 <- 0.1",
                "7 <- 0.6",
                "8 <- INIT",
                "9 <- 0.6"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 7 = 5 (left: 1 5 12) || 12 / 5 = 2.4 (",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7)",
                "7 - 5 = 2 (left: 1 2 ",
                "1 * 5 = 5 (left: 5 7 12) || 7 + 5 = 12 (left: 12 12)",
                "1 + 5 = 6 (left: 6 7 12) || 12 - 6 = 6 (left: 7 6)",
                "12 - 7 = 5 (left: 1 5 12)",
                "12 - 7 = 5 (left: 1 5 12) || 5 - 1 = 4 (left: 4 12)",
                "1 * 5 = 5 (left: 5 7 12) || 5 * 7 = 35 (left: 35 12)",
                "1 * 5 = 5 (left: 5 7 12)",
                "1 * 5 = 5 (left: 5 7 12) || 7 / 5 = 1.4 (left: 1.4 12)"
            ],
            "Evaluation": [
                0.003,
                20.0,
                0.003,
                60.0,
                0.003,
                3.0,
                0.003,
                0.001,
                2.001,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.3",
                "2 <- 1.3",
                "3 <- 1.1",
                "4 <- 0.8",
                "5 <- 1.3",
                "6 <- 0.6",
                "7 <- 0.9",
                "8 <- 1.1",
                "9 <- 0.8"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 5 = 5 (left: 5 7 12) || 7 + 5 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "1 + 5 = 6 (left: 6 7 12) || 12 / 6 = 2 (left: 2 6)",
                "1 * 5 = 5 (left: 5 7 12) || 7 + 5 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "1 + 5 = 6 (left: 6 7 12) || 12 / 6 = 2 (left: ",
                "1 * 5 = 5 (left: 5 7 12) || 7 + 5 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 * 5 = 5 (left: 5 7 12) || 7 * 5 = 35 (left: 35 12)",
                "1 + 5 = 6 (left: 6 7 12) || 7 + 12 = 19 (left: 6 19)",
                "12 - 7 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "1 + 5 = 6 (left: 6 7 12) || 7 - 6 = 1 (left: 1 12)"
            ],
            "Evaluation": [
                0.003,
                2.001,
                0.003,
                0.003,
                0.0,
                0.003,
                3.0,
                0.003,
                0.0,
                1.002
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- 1.3",
                "4 <- 0.6",
                "5 <- 1.3",
                "6 <- 0.8",
                "7 <- 1.3",
                "8 <- 0.8",
                "9 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60)",
                "1 * 5 = 5 (left: 5 7 12) || 7 + 5 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "1 * 5 = 5 (left: 5 7 12) || 7 + 5 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "1 * 5 = 5 (left: 5 7 12) || 7 + 5 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "1 * 5 = 5 (left: 5 7 12) || 5 + 7 = 12 (left: 12 12)",
                "1 * 5 = 5 (left: 5 7 12) || 7 + 5 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "1 + 5 = 6 (left: 6 7 12) || 12 / 6 = 2 (left: 7 2)",
                "1 * 5 = 5 (left: 5 7 12) || 7 + 5 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "1 + 5 = 6 (left: 6 7 12) || 7 + 12 = 19 (left: 6 19)",
                "1 * 5 = 5 (left: 5 7 12) || 7 + 5 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)"
            ],
            "Evaluation": [
                41.0,
                60.0,
                0.003,
                0.003,
                20.002,
                60.0,
                1.001,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 1.3",
                "2 <- 3.5",
                "3 <- 3.1",
                "4 <- 3.4",
                "5 <- 3.0",
                "6 <- 0.1",
                "7 <- 3.4",
                "8 <- 1.3",
                "9 <- 3.1"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 1 + 60 = 61 (left: 61)",
                "1 * 5 = 5 (left: 5 7 12) || 7 + 5 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "1 * 5 = 5 (left: 5 7 12) || 7 + 5 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (1 * 5) + (7 + 12) = 24",
                "1 * 5 = 5 (left: 5 7 12) || 7 + 5 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (1 * 5) + (7 + 12) = 24",
                "1 * 5 = 5 (left: 5 7 12) || 5 + 7 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "12 - 7 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 60)",
                "12 - 7 = 5 (left: 1 5 12) || 5 + 12 = 17 (left: 1 17)",
                "1 * 5 = 5 (left: 5 7 12) || 5 + 7 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "1 * 5 = 5 (left: 5 7 12) || 7 + 5 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "1 * 5 = 5 (left: 5 7 12) || 7 + 5 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (1 * 5) + (7 + 12) = 24"
            ]
        },
        "Input": "1 5 7 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "43": {
        "puzzle": "10 10 12 12",
        "Step 0": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12)",
                "12 + 10 = 22 (left: 10 12 22)",
                "10 / 10 = 1 (left: 1 12 12)",
                "12 - 10 = 2 (left: 2 12 12)",
                "12 - 10 = 2 (left: 2 12 12)",
                "12 + 10 = 22 (left: 10 12 22)",
                "10 + 10 = 20 (left: 12 20 12)",
                "10 * 10 = 100 (left: 12 12 100)",
                "12 - 10 = 2 (left: 2 12 12)",
                "10 + 10 = 20 (left: 12 12 20)"
            ],
            "Evaluation": [
                21.001,
                1.002,
                0.003,
                0.003,
                0.003,
                2.001,
                0.003,
                0.003,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 0.0",
                "2 <- 0.8",
                "3 <- INIT",
                "4 <- 0.0",
                "5 <- 0.0",
                "6 <- 0.8",
                "7 <- 0.0",
                "8 <- INIT",
                "9 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 10 = 2 (left: 2 12 12) || 6 + 10 = 16 (left: 12",
                "10 / 10 = 1 (left: 1 12 12) || Possible",
                "12 - 10 = 2 (left: 2 12 12) || 2 * 12 = 24 (left: 12 24)",
                "10 / 10 = 1 (left: 1 12 12)",
                "10 / 10 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "10 / 10 = 1 (left: 1 12 12) || 12 + 1 = 13 (left: 12 13)",
                "12 - 10 = 2 (left: 2 12 12) || 2 + 12 = 14 (left: 12 14)",
                "10 / 10 = 1 (left: 1 12 12) || 1 + 12 = 13 (left: 12 13)",
                "12 / 10 = 1.2 (left: 1.",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                2.001,
                40.001,
                0.003,
                0.003,
                0.003,
                0.0,
                21.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.0",
                "2 <- 1.9",
                "3 <- INIT",
                "4 <- 0.1",
                "5 <- 0.5",
                "6 <- 1.9",
                "7 <- 1.4",
                "8 <- 1.9",
                "9 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "12 / 10 = 1.2 (left: 1.",
                "10 / 10 = 1 (left: 1 12 12) || Input: 5 5 10",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 - 10 = 2 (left: 2 12 12)",
                "12 + 10 = 22 (left: 10 12 22) || 22 - 10 = 12 (left: 12 22)",
                "12 + 10 = 22 (left: 10 12 22) || 10 + 12 = 22 (left: 22)",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "10 / 10 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "10 / 10 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.003,
                20.002,
                0.003,
                0.001,
                60.0,
                60.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 2.9",
                "1 <- 2.9",
                "2 <- 2.7",
                "3 <- 2.9",
                "4 <- 2.6",
                "5 <- 2.7",
                "6 <- 2.7",
                "7 <- 2.6",
                "8 <- 2.7",
                "9 <- 2.7"
            ]
        },
        "Step 3": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 12 = 144 (left: 24 144)",
                "10 / 10 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 12 = 144 (left: 144)",
                "10 / 10 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 2 = 24 (left: 24)",
                "10 / 10 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24)",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (10 / 10) * (12 + 12) = 24",
                "10 / 10 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 24 - 12 = 12 (left: 12 24)",
                "10 / 10 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 24 1)",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (10 / 10) + (12 + 12) = 24",
                "10 / 10 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24)",
                "10 / 10 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 12 24)"
            ]
        },
        "Input": "10 10 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "44": {
        "puzzle": "1 8 8 8",
        "Step 0": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8)",
                "8 - 1 = 7 (left: 7 8 8)",
                "8 * 1 = 8 (left: 8 8 8)",
                "1 + 8 = 9 (left: 8 8 9)",
                "8 / 1 = 8 (left: 8 8 8)",
                "8 / 1 = 8 (left: 8 8 8)",
                "8 - 1 = 7 (left: 7 8 8)",
                "8 / 1 = 8 (left: 8 8 8)",
                "1 + 8 = 9 (left: 8 8 9)",
                "1 + 8 = 9 (left: 8 8 9)"
            ],
            "Evaluation": [
                1.002,
                3.0,
                0.003,
                2.001,
                21.001,
                20.002,
                3.0,
                1.002,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.5",
                "2 <- 0.5",
                "3 <- INIT",
                "4 <- 0.4",
                "5 <- INIT",
                "6 <- 0.5",
                "7 <- 0.5",
                "8 <- 0.6",
                "9 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8)",
                "8 / 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1)",
                "8 / 1 = 8 (left: 8 8 8) || Input: 8 8",
                "8 - 1 = 7 (left: 7 8 8)",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16)",
                "8 - 1 = 7 (left: 7 8 8)",
                "8 / 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8)",
                "8 / 1 = 8 (left: 8 8 8) || 8 * 8 = 64 (left: 8 64)",
                "8 - 1 = 7 (left: 7 8 8) || 7 + 8 = 15 (left: 8 8 15)",
                "8 / 1 = 8 (left: 8 8 8) || 8 * 8 = 64 (left: 8 64)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                3.0,
                60.0,
                3.0,
                40.0,
                0.001,
                1.002,
                0.002
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 1.4",
                "2 <- 1.6",
                "3 <- 1.4",
                "4 <- 0.5",
                "5 <- 1.0",
                "6 <- 1.0",
                "7 <- 0.4",
                "8 <- 1.0",
                "9 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1)",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16) || 8 * 16 = 128 (left: 128)",
                "8 / 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 1 + 8 = 9 (left: 9)",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16) || 16 / 8 = 2 (left: 2)",
                "8 / 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 1 + 8 = 9 (left: 9)",
                "8 / 1 = 8 (left: 8 8 8) || Possible next steps:",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.001,
                0.001,
                21.001,
                0.003,
                0.001,
                0.003,
                0.0,
                0.0
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 1.4",
                "2 <- 1.4",
                "3 <- 1.4",
                "4 <- 1.6",
                "5 <- 2.4",
                "6 <- 1.6",
                "7 <- 0.5",
                "8 <- 1.0",
                "9 <- 1.6"
            ]
        },
        "Step 3": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24)",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16) || 24 + 8 = 32 (left: 32)",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16) || 8 * 16 = 128 (left: 128)",
                "8 / 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 / 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 / 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 1 + 8 = 9 (left: 9)",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 / 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 1 + 8 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.003,
                0.003,
                0.001,
                0.002,
                0.002,
                60.0,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 1.0",
                "2 <- 3.7",
                "3 <- 3.1",
                "4 <- 3.1",
                "5 <- 3.7",
                "6 <- 1.6",
                "7 <- 0.5",
                "8 <- 0.5",
                "9 <- 3.7"
            ]
        },
        "Step 4": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24) || Answer: ((8 / 1) + 8) + 16 = 24",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16) || 8 * 16 = 128 (left: 128)",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24) || Answer: (8 / 1) * (8 + 8) = 24",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24) || Answer: (8 / 1) * (8 + 8) = 24",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16) || 8 + 16 =",
                "8 / 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 1 + 8 = 9 (left: 9)",
                "8 / 1 = 8 (left: 8 8 8) || 8 - 8 = 0 (left: 0)",
                "8 / 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8)",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16) || 8 * 16 = 128 (left: 128)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.0,
                0.003,
                40.001,
                0.001,
                60.0,
                40.001,
                60.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.0",
                "2 <- 3.1",
                "3 <- 4.5",
                "4 <- 4.8",
                "5 <- 4.5",
                "6 <- 4.7",
                "7 <- 4.7",
                "8 <- 4.9",
                "9 <- 4.5"
            ]
        },
        "Step 5": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16) || 16 / 8 = 2 (left: 2)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24) || Answer: ((8 / 1) + 8) + 8 = 24",
                "8 / 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16) || 8 - 16 = -8 (left: -8)",
                "8 / 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 1 + 8 = 9 (left: 9)",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24) || Answer: (8 / 1) * (8 + 8) = 24",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24) || Answer: (8 / 1) + (8 + 8) = 24",
                "8 / 1 = 8 (left: 8 8 8) || 8 + 8 = 16 (left: 8 16) || 8 + 16 = 24 (left: 24) || Answer: (8 / 1) + (8 + 8) = 24",
                "8 / 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)"
            ]
        },
        "Input": "1 8 8 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "45": {
        "puzzle": "2 2 3 8",
        "Step 0": {
            "steps": [
                "2 * 2 = 4 (left: 4 3 8)",
                "2 + 2 = 4 (left: 3 4 8)",
                "3 * 2 = 6 (left: 6 2 ",
                "2 + 3 = 5 (left: 2 5 8)",
                "8 - 2 = 6 (left: 2 3 6)",
                "8 - 2 = 6 (left: 2 3 6)",
                "2 * 2 = 4 (left: 4 3 8)",
                "8 - 2 = 6 (left: 2 3 6)",
                "2 * 2 = 4 (left: 4 3 8)",
                "8 - 2 = 6 (left: 2 3 6)"
            ],
            "Evaluation": [
                3.0,
                3.0,
                1.0,
                2.0,
                41.0,
                60.0,
                2.0,
                22.0,
                2.001,
                22.0
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.7",
                "2 <- 0.4",
                "3 <- 0.9",
                "4 <- 0.7",
                "5 <- 0.5",
                "6 <- 0.1",
                "7 <- INIT",
                "8 <- 0.9",
                "9 <- 0.7"
            ]
        },
        "Step 1": {
            "steps": [
                "8 - 2 = 6 (left: 2 3 6) || 6 - 2 = 4 (left: 4)",
                "8 - 2 = 6 (left: 2 3 6) || Input: 4 4 9",
                "8 - 2 = 6 (left: 2 3 6) || Possible next steps",
                "8 - 2 = 6 (left: 2 3 6) || 2 * 3 = 6 (left: 6 6)",
                "8 - 2 = 6 (left: 2 3 6) || 6 - 2 = 4 (left: 4 6)",
                "8 - 2 = 6 (left: 2 3 6) || 6 / 3 = 2 (left:",
                "2 + 2 = 4 (left: 3 4 8) || 8 - 3 = 5 (left: 5 8)",
                "2 ^ 2 = 4 (left: 4 3 8)",
                "8 - 2 = 6 (left: 2 3 6) || 5 * 7 = ",
                "8 - 2 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.003,
                20.0,
                0.002,
                0.002,
                3.0,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 0.5",
                "2 <- 0.4",
                "3 <- 1.4",
                "4 <- 0.3",
                "5 <- 1.7",
                "6 <- 0.5",
                "7 <- 1.4",
                "8 <- 0.9",
                "9 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "8 - 2 = 6 (left: 2 3 6) || 2 + 3 = 5 (left: 5 6)",
                "8 - 2 = 6 (left: 2 3 6) || 2 + 3 = 5 (left: 5 6)",
                "8 - 2 = 6 (left: 2 3 6) || 6 - 3 = 3 (left: 2 3)",
                "8 - 2 = 6 (left: 2 3 6) || 6 - 2 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "2 + 3 = 5 (left: 2 5 8) || 5 + 8 = 13 (left: 2 13)",
                "2 ^ 2 = 4 (left: 4 3 8) || 3 + 8 = 11 (left: 4 11)",
                "8 - 2 = 6 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6)",
                "8 - 2 = 6 (left: 2 3 6) || 6 - 2 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "8 - 2 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6)",
                "8 - 2 = 6 (left: 2 3 6) || 6 - 2 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.0,
                0.003,
                0.001,
                0.003,
                0.002,
                3.0,
                0.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.7",
                "2 <- 0.2",
                "3 <- 0.5",
                "4 <- 1.4",
                "5 <- 0.5",
                "6 <- 1.4",
                "7 <- 1.7",
                "8 <- 2.8",
                "9 <- 2.8"
            ]
        },
        "Step 3": {
            "steps": [
                "8 - 2 = 6 (left: 2 3 6) || 6 - 2 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "2 ^ 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8)",
                "3 * 2 = 6 (left: 6 2  || 6 / 2 = 3 (left: 3)",
                "8 - 2 = 6 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6)",
                "8 - 2 = 6 (left: 2 3 6) || 6 - 2 = 4 (left: 4 6) || 4 - 6 = -2 (left: -2)",
                "8 - 2 = 6 (left: 2 3 6) || 3 * 2 = 6 (left: 3 6)",
                "8 - 2 = 6 (left: 2 3 6) || 6 - 2 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 ^ 2 = 4 (left: 4 3 8) || 3 + 8 = 11 (left: 4 11)",
                "8 - 2 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18)",
                "8 - 2 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 6 - 3 = 3 (left: 3)"
            ],
            "Evaluation": [
                0.003,
                40.001,
                0.001,
                0.003,
                0.002,
                2.0,
                0.001,
                1.002,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 3.1",
                "2 <- 0.9",
                "3 <- 3.8",
                "4 <- 3.8",
                "5 <- 3.1",
                "6 <- 3.1",
                "7 <- 3.8",
                "8 <- 0.7",
                "9 <- 0.4"
            ]
        },
        "Step 4": {
            "steps": [
                "8 - 2 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "2 ^ 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 - 2 = 6 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6)",
                "8 - 2 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "8 - 2 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18) || There are no possible next steps as there are no other numbers provided to perform operations with.",
                "2 ^ 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 1 + 8 = 9 (left: 9)",
                "2 ^ 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 - 2 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18) || There are no possible next steps with the given input of 18.",
                "8 - 2 = 6 (left: 2 3 6) || 2 * 6 = 12 (left: 12)",
                "8 - 2 = 6 (left: 2 3 6) || 6"
            ],
            "Evaluation": [
                0.003,
                0.0,
                0.003,
                0.003,
                0.003,
                0.001,
                0.002,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.5",
                "2 <- 3.8",
                "3 <- 0.4",
                "4 <- 3.1",
                "5 <- 3.1",
                "6 <- 3.1",
                "7 <- 3.8",
                "8 <- 0.7",
                "9 <- 3.8"
            ]
        },
        "Step 5": {
            "steps": [
                "8 - 2 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6)",
                "8 - 2 = 6 (left: 2 3 6) || 6 - 2 = 4 (left: 4 6)",
                "8 - 2 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18) || 18 - 8 = 10 (left: 8 10)",
                "8 - 2 = 6 (left: 2 3 6) || 2 + 3 = 5 (left: 5 6)",
                "2 ^ 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "2 ^ 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 1 + 8 = 9 (left: 9)",
                "2 ^ 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 1 + 8 = 9 (left: 9)",
                "8 - 2 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18) || 18 / 2 = 9 (left: 9)",
                "8 - 2 = 6 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6)",
                "8 - 2 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18) || No possible next steps with the input 18."
            ],
            "Evaluation": [
                1.0,
                60.0,
                21.001,
                0.002,
                0.003,
                0.0,
                0.002,
                20.002,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 5.2",
                "2 <- 3.8",
                "3 <- 5.1",
                "4 <- 5.1",
                "5 <- 5.1",
                "6 <- 5.2",
                "7 <- 5.2",
                "8 <- 3.1",
                "9 <- 5.2"
            ]
        },
        "Step 6": {
            "steps": [
                "2 ^ 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 - 2 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18) || 18 - 8 = 10 (left: 8 10) || 8 + 10 = 18 (left: 18)",
                "8 - 2 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input of 18.",
                "8 - 2 = 6 (left: 2 3 6) || 6 - 2 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "8 - 2 = 6 (left: 2 3 6) || 6 - 2 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "8 - 2 = 6 (left: 2 3 6) || 6 - 2 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "8 - 2 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18) || 18 - 8 = 10 (left: 8 10) || 18 * 2 = 36",
                "8 - 2 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18) || 18 - 8 = 10 (left: 8 10) || Input: 2 6 8",
                "2 ^ 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 1 + 8 = 9",
                "8 - 2 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18) || 18 - 8 = 10 (left: 8 10) || 8 / 10 = 0.8 (left: 0.8)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.001,
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                20.002,
                40.001
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 3.8",
                "2 <- 6.8",
                "3 <- 6.9",
                "4 <- 6.9",
                "5 <- 3.1",
                "6 <- 6.8",
                "7 <- 3.1",
                "8 <- 6.9",
                "9 <- 0.3"
            ]
        },
        "Step 7": {
            "steps": [
                "8 - 2 = 6 (left: 2 3 6) || 6 - 2 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "8 - 2 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18) || 18 - 2 = 16 (left: 8)",
                "8 - 2 = 6 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6) || 6 + 6 = 12",
                "2 ^ 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "2 ^ 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "2 ^ 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 2 = 6 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "2 ^ 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 1 + 8 = 9 (left: 8)",
                "2 ^ 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 5 - 3 = 2 (left: ",
                "2 + 3 = 5 (left: 2 5 8) || 8 - 2 = 6 (left: 6 8)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                0.001,
                0.002,
                0.003,
                0.002,
                0.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 7.9",
                "2 <- 6.9",
                "3 <- 7.9",
                "4 <- 5.1",
                "5 <- 7.9",
                "6 <- 6.8",
                "7 <- 3.8",
                "8 <- 7.9",
                "9 <- 7.9"
            ]
        },
        "Step 8": {
            "steps": [
                "8 - 2 = 6 (left: 2 3 6) || 6 - 2 = 4 (left: 4 6) || 1.5 + 2 = 3.5 (left: 3.5 10 24)",
                "2 ^ 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "2 ^ 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "2 ^ 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7 8)",
                "8 - 2 = 6 (left: 2 3 6) || 6 - 2 = 4 (left: 4 6) || 4 / 6 = 0.6667 (left: 0.6667)",
                "2 ^ 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8 8)",
                "8 - 2 = 6 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6) || 6 + 6 = 12 (left: 12)",
                "8 - 2 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18) || There are no possible next steps for the input 18.",
                "2 ^ 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7 8)",
                "2 ^ 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 1 + 8 = 9 (left: 9)"
            ],
            "Evaluation": [
                2.001,
                0.001,
                0.003,
                0.003,
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 5.2",
                "2 <- 7.9",
                "3 <- 7.9",
                "4 <- 6.8",
                "5 <- 5.1",
                "6 <- 7.9",
                "7 <- 6.9",
                "8 <- 5.1",
                "9 <- 5.7"
            ]
        },
        "Step 9": {
            "steps": [
                "8 - 2 = 6 (left: 2 3 6) || 6 - 2 = 4 (left: 4 6) || 4 / 6 = 0.6666666666666666 (left: 0.6666666666666666)",
                "8 - 2 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18) || 18 - 8 = 10 (left: 8 10) || 10 / 8 = 1.25 (left: 1.25)",
                "2 ^ 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "2 ^ 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 - 2 = 6 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6) || 6 + 6 = 12 (left: 12)",
                "8 - 2 = 6 (left: 2 3 6) || 6 - 2 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 ^ 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8 8)",
                "2 ^ 2 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 2 = 6 (left: 2 3 6) || 6 - 2 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "8 - 2 = 6 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)"
            ]
        },
        "Input": "2 2 3 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "46": {
        "puzzle": "2 9 9 12",
        "Step 0": {
            "steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12)",
                "12 - 2 = 10 (left: 9 10 12)",
                "2 * 9 = 18 (left: 9 12 18)",
                "9 - 2 = 7 (left: 7 9 12)",
                "12 - 9 = 3 (left: 2 3 9)",
                "2 + 9 = 11 (left: 9 11 12)",
                "9 + 2 = 11 (left: ",
                "9 / 2 = 4.5 (left: 4.5 9 12)",
                "12 - 2 = 10 (left: 9 10 12)",
                "2 + 9 = 11 (left: 9 11 12)"
            ],
            "Evaluation": [
                3.0,
                3.0,
                3.0,
                2.001,
                1.002,
                21.001,
                0.0,
                3.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.5",
                "2 <- INIT",
                "3 <- 0.3",
                "4 <- INIT",
                "5 <- 0.5",
                "6 <- INIT",
                "7 <- 0.5",
                "8 <- 0.3",
                "9 <- 0.7"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 9 = 18 (left: 9 12 18) || 12 / 9 = 1.33 (left: 1.33 18)",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12)",
                "9 - 2 = 7 (left: 7 9 12)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12)",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12)",
                "12 - 2 = 10",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12)",
                "9 - 2 = 7 (left: 7 9 12) || 7 * 9 = 63 (left: 63 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12) || 12 - 4.5 = 7.5 (left: 7.5 12)"
            ],
            "Evaluation": [
                3.0,
                60.0,
                2.001,
                60.0,
                3.0,
                60.0,
                0.003,
                60.0,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- INIT",
                "2 <- 1.1",
                "3 <- 1.7",
                "4 <- 0.5",
                "5 <- 1.3",
                "6 <- 1.3",
                "7 <- 1.1",
                "8 <- INIT",
                "9 <- 1.5"
            ]
        },
        "Step 2": {
            "steps": [
                "2 + 9 = 11 (left: 9 11 12) || Input:",
                "2 * 9 = 18 (left: 9 12 18)",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "2 + 9 = 11 (left: 9 11 12) || 9 * 11 = 99 (left: 99 12)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "12 - 9 = 3 (left: ",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                0.003,
                0.003,
                0.001,
                0.001,
                0.002,
                60.0,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 1.1",
                "2 <- 1.3",
                "3 <- 1.5",
                "4 <- 2.7",
                "5 <- 1.5",
                "6 <- 1.5",
                "7 <- 2.7",
                "8 <- 2.7",
                "9 <- 2.9"
            ]
        },
        "Step 3": {
            "steps": [
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6 12)",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (2 + 9) * (9 - 12) = 24",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (2 + 9) * (9 - 12) = 24",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (2 + 9) * (9 - 12) = 24",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10) || 10 / 2 = 5 (left: 5)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.002,
                0.002,
                0.003,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 2.7",
                "2 <- 1.3",
                "3 <- 1.4",
                "4 <- 3.9",
                "5 <- 0.5",
                "6 <- 3.6",
                "7 <- 3.6",
                "8 <- 1.5",
                "9 <- 3.6"
            ]
        },
        "Step 4": {
            "steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12) || 9 / 4.5 = 2 (left: 2 12 13.5)",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (2 + 9) * (9 - 12) = 24",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "9 / 2 = 4.5 (left: 4.5 9 12) || 4.5 + 9 = 13.5 (left: 9 12 13.5)",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "2 + 9 = 11 (left: 9 11 12) || 12 / 9 = 1.33 (left: 1.33 12)",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 + 12 = 14 (left: 12 14)",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)"
            ],
            "Evaluation": [
                22.0,
                0.001,
                2.001,
                0.002,
                1.001,
                0.001,
                0.003,
                0.003,
                0.002,
                40.0
            ],
            "Resampling": [
                "0 <- 3.7",
                "1 <- 3.8",
                "2 <- 3.6",
                "3 <- 1.3",
                "4 <- 3.7",
                "5 <- 4.9",
                "6 <- 3.6",
                "7 <- 0.5",
                "8 <- 1.3",
                "9 <- 3.8"
            ]
        },
        "Step 5": {
            "steps": [
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (2 + 9) * (9 - 12) = 24",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 12 + 2 = 14 (left: 14)",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (2 + 9) * (9 - 12) = 24",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (2 + 9) * (9 - 12) = 24",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "2 + 9 = 11 (left: 9 11 12) || 12 / 9 = 1.33 (left: 1.33 12)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.003,
                0.003,
                2.0,
                60.0,
                0.002,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.9",
                "1 <- 5.7",
                "2 <- 5.5",
                "3 <- 5.9",
                "4 <- 5.5",
                "5 <- 5.5",
                "6 <- 5.9",
                "7 <- 5.7",
                "8 <- 0.5",
                "9 <- 5.9"
            ]
        },
        "Step 6": {
            "steps": [
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - (9 - 2)) * 12 = 24",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: 2 * (9 - (9 - 2)) = 24",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 + 12 = 14",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12)",
                "2 + 9 = 11 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)"
            ]
        },
        "Input": "2 9 9 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "47": {
        "puzzle": "11 11 11 12",
        "Step 0": {
            "steps": [
                "12 - 11 = 1 (left: 11 1 1)",
                "11 + 11 = 22 (left: 11 22 12)",
                "11 + 11 = 22 (left: 11 22 12)",
                "12 - 11 = 1 (left: 11 11 1)",
                "11 - 11 = 0 (left: 0 11 12)",
                "11 - 11 = 0 (left: 0 11 12)",
                "12 - 11 = 1 (left: 11 11 ",
                "11 / 11 = 1 (left: 1 11 12)",
                "12 - 11 = 1 (left: 11 11 1)",
                "11 + 11 = 22 (left: 11 22 12)"
            ],
            "Evaluation": [
                1.001,
                1.002,
                3.0,
                0.003,
                21.001,
                0.002,
                0.003,
                20.002,
                1.002,
                20.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.4",
                "2 <- 0.9",
                "3 <- 0.9",
                "4 <- 0.4",
                "5 <- INIT",
                "6 <- 0.4",
                "7 <- INIT",
                "8 <- 0.9",
                "9 <- 0.9"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 11 = 1 (left: 11 11 1)",
                "11 - 11 = 0 (left: 0 11 12) || 11 - 12 = -1 (left: 0 -1)",
                "11 + 11 = 22 (left: 11 22 12) || 22 - 11 = 11 (left: 11 12)",
                "11 + 11 = 22 (left: 11 22 12) || 22 - 11 = 11 (left: 11 12)",
                "11 - 11 = 0 (left: 0 11 12) || 11 + 12 = 23 (left: 0 23)",
                "11 + 11 = 22 (left: 11 22 12)",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132)",
                "11 + 11 = 22 (left: 22 11 12)",
                "11 + 11 = 22 (left: 11 22 12) || 12 / 2 = 6 (left:",
                "11 + 11 = 22 (left: 11 22 12) || 11 + 22 = 33 (left: 12 33)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                0.003,
                0.0,
                2.001,
                40.001,
                1.002,
                1.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 0.9",
                "2 <- 1.6",
                "3 <- 1.6",
                "4 <- 1.6",
                "5 <- 0.4",
                "6 <- INIT",
                "7 <- 0.4",
                "8 <- 1.5",
                "9 <- 1.6"
            ]
        },
        "Step 2": {
            "steps": [
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 132 / 0 is undefined",
                "11 + 11 = 22 (left: 11 22 12) || 12 - 11 = 1 (left: 1 12)",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 0 + 132 = 132 (left: 132)",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 132 / 0 = undefined (left: 0 132)",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 0 + 132 = 132 (left: 132)",
                "11 - 11 = 0 (left: 0 11 12) || 11 - 12 = -1 (left: -1 12)",
                "11 + 11 = 22 (left: 22 11 12)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1)",
                "11 + 11 = 22 (left: 11 22 12) || 11 * 2 = 22 (left: 22 12)",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 132 - 0 = 132 (left: 132)"
            ],
            "Evaluation": [
                0.003,
                21.001,
                0.003,
                40.001,
                0.003,
                0.002,
                2.001,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.1",
                "2 <- 2.6",
                "3 <- 1.6",
                "4 <- 0.7",
                "5 <- 2.7",
                "6 <- 2.3",
                "7 <- 2.7",
                "8 <- 2.7",
                "9 <- 1.6"
            ]
        },
        "Step 3": {
            "steps": [
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 132 / 0 = undefined (left: 0 132) || 132 * 0 = 0 (left: 0)",
                "11 + 11 = 22 (left: 11 22 12) || 12 - 11 = 1 (left: 1 12) || 12 / 1 = 12 (left: 12)",
                "11 + 11 = 22 (left: 22 11 12) || 22 - 11 = 11 (left: 11 12)",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 0 - 132 = -132 (left: -132)",
                "11 / 11 = 1 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0)",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 132 / 0 = undefined (left: 0 132) || ",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 - 1 = -1 (left: -1)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 + 1 = 1 (left: 1)",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 0 + 132 = 132 (left: 132)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                0.0,
                0.002,
                0.0,
                0.0,
                0.002,
                0.003,
                0.001,
                1.002
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 2.7",
                "2 <- 2.3",
                "3 <- 2.7",
                "4 <- 2.7",
                "5 <- 1.6",
                "6 <- 0.9",
                "7 <- 1.6",
                "8 <- 2.3",
                "9 <- 2.6"
            ]
        },
        "Step 4": {
            "steps": [
                "11 + 11 = 22 (left: 22 11 12) || 22 - 12 = 10 (left: 10 12)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 - 0 = 1 (left: 1)",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 132 / 0 = undefined (left: 0 132) || 0 * 132 = 0 (left: 132)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 + 1 = 1 (left: 1)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 132 - 0 = 132 (left: 132)",
                "11 + 11 = 22 (left: 11 22 12) || Input: 9 3 5 15",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 0 / 132 = 0 (left: 0 132)",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 132 / 0 = undefined (left: 0 132) || Input: 3 9 27",
                "11 + 11 = 22 (left: 22 11 12) || 22 - 12 = 10 (left: 10 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                20.001,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 4.9",
                "1 <- 2.7",
                "2 <- 4.9",
                "3 <- 2.3",
                "4 <- 4.9",
                "5 <- 2.3",
                "6 <- 4.9",
                "7 <- 4.9",
                "8 <- 2.7",
                "9 <- 2.7"
            ]
        },
        "Step 5": {
            "steps": [
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 - 0 = 1 (left: 1)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 = undefined",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined.",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 132 / 0 = undefined (left: 0 132) || 0 / 132 = 0 (left: 0 132)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined.",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 132 / 0 = undefined (left: 0 132) || 132 / 0 is undefined (left: 0 132)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 - 1 = -1 (left: -1)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 = Undefined",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.9",
                "1 <- 4.6",
                "2 <- 4.6",
                "3 <- 1.6",
                "4 <- 4.9",
                "5 <- 4.9",
                "6 <- 2.1",
                "7 <- 4.6",
                "8 <- 2.3",
                "9 <- 2.3"
            ]
        },
        "Step 6": {
            "steps": [
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0)",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 0 / 132 = 0 (left: 0 132) || 0 + 132 = 132 (left: 132)",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 0 / 132 = 0 (left: 0 132) || 0 * 132 = 0 (left: 132)",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 0 + 132 = 132 (left: 132)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 - 0 = 1 (left: 1)",
                "11 + 11 = 22 (left: 11 22 12) || 12 - 11 = 1 (left: 1 12) || 1 * 12 = 12 (left: 12)",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 0 / 132 = 0 (left: 0 132) || 132 - 132 = 0 (left: 0)",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 132 / 0 = undefined (left: 0 132) || 132 / 0 is undefined as division by zero is not possible.",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 132 / 0 = undefined (left: 0 132) || 0 * 132 = 0 (left: 132)"
            ],
            "Evaluation": [
                40.001,
                0.003,
                20.001,
                0.003,
                0.002,
                0.003,
                40.001,
                40.0,
                60.0,
                20.002
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 6.9",
                "2 <- 6.8",
                "3 <- 6.7",
                "4 <- 6.7",
                "5 <- 4.9",
                "6 <- 6.7",
                "7 <- 6.2",
                "8 <- 6.2",
                "9 <- 4.9"
            ]
        },
        "Step 7": {
            "steps": [
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || No possible next steps.",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 132 / 0 = undefined (left: 0 132) || 132 + 0 = 132 (left: 132)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 + 1 = 1 (left: 1)",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 132 - 0 = 132 (left: 132)",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || Input: 3 9 27",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 = Undefined ",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 0 / 132 = 0 (left: 132)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as the input is 0.",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps with the input of 0.",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 * 0 = 0 (left: 0)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                20.001,
                20.002
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 3.9",
                "2 <- 7.8",
                "3 <- 6.8",
                "4 <- 6.0",
                "5 <- 6.7",
                "6 <- 6.8",
                "7 <- 2.7",
                "8 <- 6.2",
                "9 <- 7.9"
            ]
        },
        "Step 8": {
            "steps": [
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 132 / 0 = undefined (left: 0 132) || 0 + 132 = 132 (left: 132)",
                "11 + 11 = 22 (left: 11 22 12) || 22 / 11 = 2 (left: 2 12)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 * 0 = 0 (left: 0) || There are no calculations that can be done with just one number.",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 - 1 = -1 (left: -1)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || No possible next steps.",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 0 / 132 = 0 (left: 0)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 - 1 = -1 (left: -1)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || There are no possible next steps as there are no numbers to work with in the input.",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 132 / 0 = undefined (left: 0 132) || 132 + 0 = 132 (left: 132)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.0,
                0.003,
                0.003,
                0.003,
                0.0,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 6.0",
                "2 <- 6.8",
                "3 <- 4.9",
                "4 <- 7.9",
                "5 <- 6.9",
                "6 <- 7.9",
                "7 <- 6.7",
                "8 <- 8.0",
                "9 <- 7.8"
            ]
        },
        "Step 9": {
            "steps": [
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || No possible next steps, as there are no numbers provided.",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0) || No possible next steps as there are no numbers provided.",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 = undefined (left: 0)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 - 0 = 1 (left: 1)",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 132 / 0 = undefined (left: 0 132) || Input: 5 25 30",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 132 / 0 = undefined (left: 0 132) || 0 + 132 = 132 (left: 132)",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 132 / 0 = undefined (left: 0 132) || 0 * 132 = 0 (left: 132)",
                "11 - 11 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 132 + 0 = 132 (left: 132)",
                "11 + 11 = 22 (left: 11 22 12) || 22 / 11 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "11 - 11 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 * 0 = 0 (left: 0) || No possible next steps as there is no input provided."
            ]
        },
        "Input": "11 11 11 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "48": {
        "puzzle": "3 8 13 13",
        "Step 0": {
            "steps": [
                "13",
                "13",
                "3 + 8 = 11 (left: 11 13 13)",
                "3 + 8 = 11 (left: 11 13 13)",
                "3 + 8 = 11 (left: 11 13 13)",
                "3 + 8 = 11 (left: 11 13 13)",
                "3 + 8 = 11 (left: 11 13 13)",
                "3 * 8 = 24 (left: 24 13 13)",
                "3 * 8 = 24 (left: 24 13 13)",
                "8 - 3 = 5 (left: 5 8 13)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                1.002,
                0.003,
                0.003,
                1.002,
                0.002,
                0.003,
                21.001,
                1.002
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 0.8",
                "6 <- INIT",
                "7 <- 0.8",
                "8 <- 0.8",
                "9 <- 0.8"
            ]
        },
        "Step 1": {
            "steps": [
                "3 * 8 = 24 (left: 24 13 13) || 13 / 24 = 0.5416666666666666 (left: 0.541666666",
                "8 - 3 = 5 (left: 5 8 13)",
                "8 - 3 = 5 (left: 5 8 13)",
                "8 / 3 = 2.67 (left: 2.67 8 13)",
                "13 - 8 = 5 (left: ",
                "3 * 8 = 24 (left: 24 13 13) || 24 + 13 = 37 (left: 13 37)",
                "8 - 3 = 5 (left: 5 8 13)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13)",
                "3 * 8 = 24 (left: 24 13 13) || 13 / 24 = 0.5416666666666666",
                "3 * 8 = 24 (left: 24 13 13) || 13 / 13 = 1 (left: 24 1)"
            ],
            "Evaluation": [
                0.001,
                1.002,
                21.0,
                1.002,
                0.0,
                0.003,
                21.001,
                41.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 1.9",
                "2 <- 1.6",
                "3 <- 0.8",
                "4 <- 1.7",
                "5 <- 1.7",
                "6 <- 1.7",
                "7 <- 1.6",
                "8 <- 1.9",
                "9 <- 1.6"
            ]
        },
        "Step 2": {
            "steps": [
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 1.846 * 13 = 23.978 (left: 23.978)",
                "3 * 8 = 24 (left: 24 13 13) || 13 / 13 = 1 (left: 24 1) || 24 + 1 = 25 (left: 1 25)",
                "8 - 3 = 5 (left: 5 8 13) || 8 - 5 = 3 (left: 3 13)",
                "3 * 8 = 24 (left: 24 13 13) || 13 + 13 = 26 (left: 24 26)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 1.846 + 13 = 14.846 (left: 14.846)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 1.846 * 13 = 23.978 (left: 23.978)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 1.846 * 13 = 24.018 (left: 24.018)",
                "8 - 3 = 5 (left: 5 8 13) || 8 + 5 = 13 (left: 13 13)",
                "3 * 8 = 24 (left: 24 13 13) || 13 / 13 = 1 (left: 24 1) || 24 * 1 = 24 (left: 1 24)",
                "8 - 3 = 5 (left: 5 8 13) || 13 / 5 = 2.6 (left: 2.6 8)"
            ],
            "Evaluation": [
                0.003,
                40.0,
                0.003,
                0.002,
                0.003,
                0.001,
                0.003,
                0.003,
                60.0,
                1.0
            ],
            "Resampling": [
                "0 <- 2.8",
                "1 <- 2.8",
                "2 <- 1.6",
                "3 <- 2.1",
                "4 <- 2.8",
                "5 <- 1.7",
                "6 <- 1.7",
                "7 <- 2.1",
                "8 <- 2.1",
                "9 <- 1.9"
            ]
        },
        "Step 3": {
            "steps": [
                "3 * 8 = 24 (left: 24 13 13) || 13 / 13 = 1 (left: 24 1) || 24 * 1 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)",
                "3 * 8 = 24 (left: 24 13 13) || 13 / 13 = 1 (left: 24 1) || 24 * 1 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "8 - 3 = 5 (left: 5 8 13) || 13 - 8 = 5 (left: 5 13)",
                "3 * 8 = 24 (left: 24 13 13) || 13 / 13 = 1 (left: 24 1) || 24 + 1 = 25 (left: 1 25) || 3 + 9 = 12 (left: 12 27)",
                "3 * 8 = 24 (left: 24 13 13) || 13 / 13 = 1 (left: 24 1) || 24 * 1 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 13 / 1.846 = 7.047 (left: 7.047)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || 1.846 * 13 = 23.978 (left: 23.978)",
                "3 * 8 = 24 (left: 24 13 13) || 13 / 13 = 1 (left: 24 1) || 24 + 1 = 25 (left: 1 25) || 25 * 1 = 25 (left: 25)",
                "3 * 8 = 24 (left: 24 13 13) || 13 / 13 = 1 (left: 24 1) || 24 + 1 = 25 (left: 1 25) || 1 + 25 = 26 (left: 26)",
                "3 * 8 = 24 (left: 24 13 13) || 13 / 13 = 1 (left: 24 1) || 24 / 1 = 24 (left: 24)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.001,
                60.0,
                0.003,
                21.001,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.8",
                "1 <- 3.9",
                "2 <- 3.8",
                "3 <- 3.7",
                "4 <- 3.4",
                "5 <- 3.4",
                "6 <- 1.7",
                "7 <- 3.7",
                "8 <- 3.9",
                "9 <- 3.8"
            ]
        },
        "Step 4": {
            "steps": [
                "3 * 8 = 24 (left: 24 13 13) || 13 / 13 = 1 (left: 24 1) || 24 * 1 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24 24)",
                "3 * 8 = 24 (left: 24 13 13) || 13 / 13 = 1 (left: 24 1) || 24 * 1 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "3 * 8 = 24 (left: 24 13 13) || 13 / 13 = 1 (left: 24 1) || 24 * 1 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)",
                "3 * 8 = 24 (left: 24 13 13) || 13 / 13 = 1 (left: 24 1) || 24 * 1 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "3 * 8 = 24 (left: 24 13 13) || 13 / 13 = 1 (left: 24 1) || 24 / 1 = 24 (left: 24) || Answer: (3 * 8) / (13 / 13) = 24",
                "3 * 8 = 24 (left: 24 13 13) || 13 / 13 = 1 (left: 24 1) || 24 / 1 = 24 (left: 24) || Answer: (3 * 8) / (13 / 13) = 24",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1.846 (left: 1.846 13) || Input: 5 25 5.5",
                "3 * 8 = 24 (left: 24 13 13) || 13 / 13 = 1 (left: 24 1) || 24 * 1 = 24 (left: 1 24) || 1 + 24 = 25 (left: 24 25)",
                "3 * 8 = 24 (left: 24 13 13) || 13 / 13 = 1 (left: 24 1) || 24 * 1 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "3 * 8 = 24 (left: 24 13 13) || 13 / 13 = 1 (left: 24 1) || 24 * 1 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)"
            ]
        },
        "Input": "3 8 13 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "49": {
        "puzzle": "9 9 12 12",
        "Step 0": {
            "steps": [
                "12 + 9 = 21 (left: 9 12 21)",
                "12 + 9 = 21 (left: 9 12 21)",
                "12 / 9 = 1.33 (left: 9 ",
                "9 + 9 = 18 (left: 12 12 18)",
                "12 / 9 = 1.33 (left: 9 ",
                "9 * 9 = 81 (left: 12 12 81)",
                "9 / 9 = 1 (left: 1 12 12)",
                "9 - 9 = 0 (left: 0 12 ",
                "12 + 9 = 21 (left: 9 12 21)",
                "9 * 12 = 108 (left: 12 12 108)"
            ],
            "Evaluation": [
                1.002,
                3.0,
                0.0,
                0.003,
                0.001,
                1.002,
                2.001,
                0.001,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.0",
                "3 <- INIT",
                "4 <- 0.1",
                "5 <- INIT",
                "6 <- 0.1",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "12 / 9 = 1 (left: 9 1 ",
                "9 + 9 = 18 (left: 12 12 18)",
                "12 + 9 = 21 (left: 9 12 21) || 12 + 9 = 21 (left: 21 21)",
                "12 / 9 = 1 (left: 1 12 ",
                "12 + 9 = 21 (left: 9 12 21) || 12 - 9 = 3 (left: 3 21)",
                "9 / 9 = 1 (left: 1 12 12)",
                "12 + 9 = 21 (left: 9 12 21) || 9 * 2 = 18 (left: 18 21)",
                "9 + 9 = 18 (left: 12 12 18)",
                "9 / 9 = 1 (left: 1 12 12)",
                "9 / 9 = 1 (left: 1 12 12)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 0.8",
                "7 <- 0.8",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "9 * 9 = 81 (left: 12 12 81)",
                "12 + 9 = 21 (left: 9 12 21)",
                "9 / 9 = 1 (left: 1 12 12)",
                "9 / 9 = 1 (left: 1 12 12)",
                "12 - 9 = 3 (left: 3 12 12)",
                "12 / 9 = 1 (left: 9 12 ",
                "12 + 9 = 21 (left: 9 12 21) || 21 / 9 = 3 (left: 3 12)",
                "12 + 9 = 21 (left: 9 12 21) || 21 / 9 = 3 (left: 3 12)",
                "12 + 9 = 21 (left: 9 21 12)",
                "12 + 9 = 21 (left: 9 12 21)"
            ],
            "Evaluation": [
                1.001,
                1.002,
                3.0,
                1.002,
                60.0,
                0.003,
                20.002,
                0.003,
                3.0,
                3.0
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.4",
                "2 <- 0.0",
                "3 <- 2.6",
                "4 <- 2.6",
                "5 <- 2.6",
                "6 <- 2.6",
                "7 <- 2.8",
                "8 <- 0.1",
                "9 <- 2.4"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36)",
                "12 - 9 = 3 (left: 3 12 12) || 3 + 12 = 15 (left: 12 15)",
                "12 + 9 = 21 (left: 9 12 21) || 9 * 12 = 108 (left: 108 21)",
                "12 + 9 = 21 (left: 9 12 21) || 21 / 9 = 3 (left: 3 12) || 3 / 12 = 0.25 (left: 0.25 12)",
                "12 + 9 = 21 (left: 9 12 21) || 21 / 9 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4)",
                "12 + 9 = 21 (left: 9 12 21) || 21 / 9 = 3 (left: 3 12) || 3 + 12 = 15 (left: 15)",
                "12 + 9 = 21 (left: 9 12 21) || 21 / 9 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36)",
                "12 + 9 = 21 (left: 9 21 12) || 21 + 9 = 30 (left: 12 30)",
                "12 + 9 = 21 (left: 9 12 21) || 12 - 9 = 3 (left: 3 21)",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)"
            ],
            "Evaluation": [
                40.001,
                0.003,
                0.002,
                1.0,
                0.002,
                0.003,
                20.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 3.0",
                "2 <- 3.0",
                "3 <- 2.4",
                "4 <- 3.6",
                "5 <- 3.0",
                "6 <- 3.6",
                "7 <- 3.6",
                "8 <- 3.0",
                "9 <- 2.8"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 9 = 3 (left: 3 12 12) || 12 - 3 = 9 (left:",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36)",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 - 12 = 0 (left: 0 36)",
                "12 - 9 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 + 9 = 21 (left: 9 12 21) || 21 / 9 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 + 2 = 38",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 + 12 = 24 (left: 24 36)",
                "12 + 9 = 21 (left: 9 12 21) || 21 / 9 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 / 2 = 18",
                "12 + 9 = 21 (left: 9 12 21) || 21 / 9 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || There are no possible next steps with the input of 36 as it is already a single number.",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 36 - 12 = 24 (left: 12 24)",
                "12 + 9 = 21 (left: 9 21 12) || 21 / 9 = 3 (left: 3 12)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                20.0,
                0.003,
                0.003,
                1.002,
                0.003,
                0.003,
                1.002,
                20.001
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 4.2",
                "2 <- 4.1",
                "3 <- 4.2",
                "4 <- 4.1",
                "5 <- 4.1",
                "6 <- 3.0",
                "7 <- 2.4",
                "8 <- 4.9",
                "9 <- 4.1"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 1 + 36 = 37 (left: 37)",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 - 12 = 0 (left: 0 36) || 0 / 36 = 0 (left: 0)",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 - 12 = 0 (left: 0 36) || 0 * 36 = 0 (left: 36)",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 1 + 36 = 37 (left: 37)",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 * 12 = 144 (left: 144 36)",
                "12 - 9 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 + 9 = 21 (left: 9 21 12) || 21 / 9 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36)",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36)"
            ],
            "Evaluation": [
                21.001,
                0.002,
                40.0,
                60.0,
                60.0,
                0.003,
                60.0,
                40.001,
                60.0,
                41.0
            ],
            "Resampling": [
                "0 <- 5.6",
                "1 <- 4.1",
                "2 <- 5.2",
                "3 <- 5.8",
                "4 <- 5.3",
                "5 <- 5.3",
                "6 <- 5.6",
                "7 <- 5.2",
                "8 <- 5.4",
                "9 <- 4.2"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 9 = 3 (left: 3 12 12) || 12 - 3 = 9 (left:",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "12 + 9 = 21 (left: 9 21 12) || 21 / 9 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 + 8 = 44 (left: 8) ",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 1 + 36 = 37 (left: 37)",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 4 / 10 =",
                "12 - 9 = 3 (left: 3 12 12) || 3 + 12 = 15 (left: 12 15)",
                "12 + 9 = 21 (left: 9 21 12) || 21 / 9 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 / 2 = 18",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 1 + 36 = 37 (left: 37)",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 - 12 = 0 (left: 0 36) || 0 / 36 = 0 (left: 36)"
            ],
            "Evaluation": [
                1.001,
                0.003,
                0.003,
                0.002,
                60.0,
                60.0,
                2.001,
                60.0,
                21.001,
                60.0
            ],
            "Resampling": [
                "0 <- 6.9",
                "1 <- 6.7",
                "2 <- 6.9",
                "3 <- 6.7",
                "4 <- 6.4",
                "5 <- 6.9",
                "6 <- 4.1",
                "7 <- 5.2",
                "8 <- 6.5",
                "9 <- 2.4"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36)",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 1 + 36 = 37 (left: 37)",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 1 / 36 = 0.027777777777777776 (left: 0.027777777777777776)",
                "12 + 9 = 21 (left: 9 21 12) || 21 / 9 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 / 18 = 2 (left: 2)",
                "12 + 9 = 21 (left: 9 21 12) || 21 / 9 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 + 2 = 38",
                "12 - 9 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                20.002,
                60.0,
                20.001,
                41.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 7.3",
                "1 <- 6.5",
                "2 <- 4.2",
                "3 <- 5.9",
                "4 <- 6.4",
                "5 <- 7.7",
                "6 <- 7.6",
                "7 <- 7.3",
                "8 <- 6.5",
                "9 <- 7.7"
            ]
        },
        "Step 8": {
            "steps": [
                "9 / 9 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "12 + 9 = 21 (left: 9 21 12) || 21 / 9 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || There are no possible next steps as there are no other numbers given to perform operations on.",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 - 12 = 0 (left: 0 36) || 0 + 36 = 36 (left: 36)",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 1 + 36 = 37 (left: 37)",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 1 + 36 = 37 (left: 37)",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36)",
                "9 / 9 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "12 + 9 = 21 (left: 9 21 12) || 21 / 9 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 - 2 = 34",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                60.0,
                0.003,
                40.0,
                20.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 7.7",
                "2 <- 8.6",
                "3 <- 7.8",
                "4 <- 6.7",
                "5 <- 8.7",
                "6 <- 8.4",
                "7 <- 8.8",
                "8 <- 8.6",
                "9 <- 7.6"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 1 + 36 = 37 (left: 37)",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36)",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "12 + 9 = 21 (left: 9 21 12) || 21 / 9 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || No possible next steps as there is only one number provided.",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 1 + 36 = 37 (left: 37)",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36)",
                "12 - 9 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36)"
            ]
        },
        "Input": "9 9 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    }
}