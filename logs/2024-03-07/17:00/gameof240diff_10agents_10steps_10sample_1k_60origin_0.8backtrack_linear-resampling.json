{
    "0": {
        "puzzle": "1 1 4 6",
        "Step 0": {
            "steps": [
                "6 - 4 = 2 (left: 1 2 6)",
                "1 * 1 = 1 (left: 1 4 6)",
                "4 + 1 = 5 (left: 1 5 6)",
                "4 + 1 = 5 (left: 1 5 6)",
                "6 - 4 = 2 (left: 1 2 6)",
                "6 - 1 = 5 (left: 1 4 5)",
                "4 + 1 = 5 (left: 1 5 6)",
                "6 - 4 = 2 (left: 1 2 6)",
                "4 + 1 = 5 (left: 5 4 ",
                "6 - 4 = 2 (left: 1 2 6)"
            ],
            "Evaluation": [
                1.002,
                41.0,
                0.002,
                41.0,
                0.003,
                21.0,
                22.0,
                1.002,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.8",
                "2 <- 0.6",
                "3 <- 0.6",
                "4 <- INIT",
                "5 <- 0.6",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- 0.5",
                "9 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 4 = 4 (left: 4 4 6)",
                "4 + 1 = 5 (left: 5 4  || 4 / 5 =",
                "4 + 1 = 5 (left: 1 5 6) || 5 * 1 = 5 (left: 5 6)",
                "4 + 1 = 5 (left: 1 5 6) || 1 * 5 = 5 (left: 5 6)",
                "6 - 1 = 5 (left: 1 4 5)",
                "4 + 1 = 5 (left: 1 5 6) || Input: 3 9 27",
                "6 - 4 = 2 (left: 1 2 6)",
                "6 / 1 = 6 (left: ",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 4 = 1 (left: 1 5)"
            ],
            "Evaluation": [
                3.0,
                0.003,
                0.003,
                1.001,
                1.002,
                0.003,
                1.002,
                0.0,
                0.003,
                40.0
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 0.1",
                "2 <- 0.8",
                "3 <- 0.8",
                "4 <- 0.1",
                "5 <- 0.8",
                "6 <- 1.9",
                "7 <- 0.5",
                "8 <- 0.1",
                "9 <- 1.9"
            ]
        },
        "Step 2": {
            "steps": [
                "6 - 1 = 5 (left: 1 4 5) || 5 - 4 = 1 (left: 1 5) || 5 - 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "4 + 1 = 5 (left: 5 4  || 4 / 5 =",
                "4 + 1 = 5 (left: 5 4  || 4 + 5 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "4 + 1 = 5 (left: 5 4  || 5 / 4 = 1.25 (left: 1.25)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 4 = 1 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "6 - 1 = 5 (left: 1 4 5) || 4 - 1 = 3 (left: 3 4)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 4 = 1 (left: 1 5) || 5 / 1 = 5 (left: 5)"
            ],
            "Evaluation": [
                0.002,
                2.0,
                0.003,
                0.001,
                1.002,
                0.002,
                0.002,
                21.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.3",
                "2 <- 2.7",
                "3 <- 0.3",
                "4 <- 0.5",
                "5 <- 0.6",
                "6 <- 0.6",
                "7 <- 0.3",
                "8 <- 0.6",
                "9 <- 1.9"
            ]
        },
        "Step 3": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6)",
                "4 + 1 = 5 (left: 1 5 6) || 5 * 1 = 5 (left: 5 6)",
                "6 - 1 = 5 (left: 1 4 5) || 4 - 1 = 3 (left: 3 4) || 3 - 4 = -1 (left: -1)",
                "4 + 1 = 5 (left: 1 5 6) || 1 * 5 = 5 (left: 5 6)",
                "6 - 1 = 5 (left: 1 4 5) || 1 * 4 = 4 (left: 4 5)",
                "4 + 1 = 5 (left: 1 5 6) || 5 - 1 = ",
                "4 + 1 = 5 (left: 1 5 6) || 5 / 1 = 5 (left: 5 6)",
                "4 + 1 = 5 (left: 1 5 6) || 5 / 1 = 5 (left: 5 6)",
                "4 + 1 = 5 (left: 1 5 6) || 1 * 5 = 5 (left: 5 6)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 4 = 1 (left: 1 5) || 1 + 5 = 6"
            ],
            "Evaluation": [
                20.002,
                1.002,
                0.0,
                0.003,
                3.0,
                0.003,
                0.002,
                0.002,
                1.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 0.5",
                "2 <- 1.9",
                "3 <- 0.8",
                "4 <- 0.5",
                "5 <- 0.8",
                "6 <- 0.1",
                "7 <- 0.1",
                "8 <- 2.7",
                "9 <- 0.6"
            ]
        },
        "Step 4": {
            "steps": [
                "6 - 1 = 5 (left: 1 4 5) || 5 - 4 = 1 (left: 1 5) || 5 - 1 = 4 (left: 4)",
                "6 - 1 = 5 (left: 1 4 5) || 3 * 9 = 27 (left: 12",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 4 = 1 (left: 1 5) || 5 * 1 = 5 (left: 5)",
                "4 + 1 = 5 (left: 5 4  || Input: 10 3",
                "6 - 1 = 5 (left: 1 4 5) || 1 * 4 = 4 (left: 4 5)",
                "4 + 1 = 5 (left: 5 4  || 4 * 5 = 20 (left: 20)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "1 * 1 = 1 (left: 1 4 6) || 4 - 1 = 3 (left: 3 6)",
                "6 - 1 = 5 (left: 1 4 5) || 4 - 1 = 3 (left: 3 4) || 4 - 3 = 1 (left: 1)",
                "4 + 1 = 5 (left: 1 5 6) || 5 * 1 = 5 (left: 5 6)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                0.003,
                2.001,
                0.003,
                1.002,
                3.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.7",
                "1 <- 0.1",
                "2 <- 0.3",
                "3 <- 4.4",
                "4 <- 0.5",
                "5 <- 0.8",
                "6 <- 0.1",
                "7 <- 3.0",
                "8 <- 3.0",
                "9 <- INIT"
            ]
        },
        "Step 5": {
            "steps": [
                "6 - 1 = 5 (left: 1 4 5) || 4 - 1 = 3 (left: 3 4) || 3 * 4 = 12 (left: 12)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6)",
                "4 + 1 = 5 (left: 1 5 6) || 5 * 1 = 5 (left: 5 6)",
                "6 - 1 = 5 (left: 1 4 5) || 1 * 4 = 4 (left: 4 5) || 5 - 4 = 1 (left: 1)",
                "6 - 1 = 5 (left: 1 4 5) || Input: 3 6 9",
                "4 + 1 = 5 (left: 5 4  || 4 * 5 = 20 (left: 20)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5)",
                "4 + 1 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) ",
                "4 + 1 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "4 + 1 = 5 (left: 1 4 6)"
            ],
            "Evaluation": [
                0.003,
                40.0,
                0.002,
                0.001,
                0.003,
                0.002,
                22.0,
                40.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 5.9",
                "2 <- 5.7",
                "3 <- 5.1",
                "4 <- 5.6",
                "5 <- 1.9",
                "6 <- 1.9",
                "7 <- 0.1",
                "8 <- 5.9",
                "9 <- 5.1"
            ]
        },
        "Step 6": {
            "steps": [
                "4 + 1 = 5 (left: 5 4  || 5 / 4 = 1.25 (left: 1.25)",
                "4 + 1 = 5 (left: 1 4 6) || 7 - 5 = ",
                "4 + 1 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)  || 36 + 2 = 38",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5) || 4 / 5 = 0.8 (left: 0.8)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 4 = 1 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 4 = 1 (left: 1 5) || 1 + 5 = 6",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "4 + 1 = 5 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 4 / 6 = 0.6666666666666666 (left: 0.6666666666666666)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.002,
                0.003,
                0.003,
                0.002,
                60.0,
                1.001
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 6.8",
                "2 <- 6.8",
                "3 <- 5.9",
                "4 <- 5.1",
                "5 <- 5.1",
                "6 <- 5.7",
                "7 <- 0.3",
                "8 <- 6.8",
                "9 <- 1.9"
            ]
        },
        "Step 7": {
            "steps": [
                "4 + 1 = 5 (left: 5 4  || 5 / 4 = 1.25 (left: 1.25)",
                "4 + 1 = 5 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 - 6 = -2 (left: -2)",
                "4 + 1 = 5 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "4 + 1 = 5 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 4 - 6 = -2 (left: -2)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 4 - 6 = -2 (left: -2)",
                "4 + 1 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)  || 36 / 4 = 9 (left: 9)",
                "4 + 1 = 5 (left: 1 5 6) || 1 - 5 = -4 (left: -4 6)",
                "4 + 1 = 5 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 4 = 1 (left: 1 5) || 1 + 5 = 6"
            ],
            "Evaluation": [
                0.003,
                0.0,
                0.001,
                1.002,
                2.0,
                0.0,
                0.002,
                2.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 7.8",
                "1 <- 0.1",
                "2 <- 5.9",
                "3 <- 5.9",
                "4 <- 5.1",
                "5 <- 0.8",
                "6 <- 5.7",
                "7 <- 1.9",
                "8 <- 6.8",
                "9 <- 7.8"
            ]
        },
        "Step 8": {
            "steps": [
                "4 + 1 = 5 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 1) * (1 * 6) = 24",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "4 + 1 = 5 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "4 + 1 = 5 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 3 + 9 = 12 (left: 12)",
                "4 + 1 = 5 (left: 5 4  || 4 * 5 = 20 (left: 20)",
                "4 + 1 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)  || 36 / 2 = 18",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 4 = 1 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "4 + 1 = 5 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "4 + 1 = 5 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (1 + 1)) * 6 = 24"
            ],
            "Evaluation": [
                60.0,
                20.001,
                0.0,
                1.002,
                0.002,
                0.003,
                0.003,
                0.001,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 8.0",
                "1 <- 6.8",
                "2 <- 7.8",
                "3 <- 8.0",
                "4 <- 8.1",
                "5 <- 8.0",
                "6 <- 5.1",
                "7 <- 7.8",
                "8 <- 5.9",
                "9 <- 8.9"
            ]
        },
        "Step 9": {
            "steps": [
                "4 + 1 = 5 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 1) * (1 * 6) = 24 || Input: 3 3 7 8\nSteps:\n3 * 8 = 24 (left: 3 7 24)\n7 - 3 = 4 (left: 4 24)\n4 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (7 - 3) = 24",
                "4 + 1 = 5 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "4 + 1 = 5 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * 6) = 24",
                "4 + 1 = 5 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 1) * (1 * 6) = 24 || Input: 3 3 7 8\nSteps:\n3 * 7 = 21 (left: 3 8 21)\n21 - 8 = 13 (left: 3 13)\n3 * 13 = 39 (left: 39)\n39 / 3 = 13 (left: 13)\n13 + 13 = 26 (left: 26)\n26 - 2 = 24 (left: 24)\nAnswer: (((",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2) || 1 * 2 = 2 (left: 2)",
                "4 + 1 = 5 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 + 1) * (1 * 6) = 24 || Input: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n8 - 4 = 4 (left: 3 4)\n4 * 3 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((3 + 5) - 4) * 3 * 2 = 24",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 6 + 4 = 10 (left: 10)",
                "4 + 1 = 5 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (1 + 1)) * 6 = 24",
                "4 + 1 = 5 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2 6)",
                "4 + 1 = 5 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * (1 + 1)) * 6 = 24 || Input: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 3 8 9)\n9 - 8 = 1 (left: 1 9)\n1 * 9 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 - 3 = 24 (left: 24)\nAnswer: ((3 * 3) - 8) * 9 ="
            ]
        },
        "Input": "1 1 4 6",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            }
        ]
    },
    "1": {
        "puzzle": "1 1 11 11",
        "Step 0": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 11 11)",
                "1 - 1 = 0 (left: 0 11 11)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 - 1 = 10 (left: 1 10 11)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 - 1 = 10 (left: 1 10 11)",
                "11 / 1 = 11 (left: 1 11 ",
                "11 + 1 = 12 (left: 1 11 12)"
            ],
            "Evaluation": [
                20.002,
                1.002,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.001,
                21.001
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- INIT",
                "2 <- 0.0",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 0.0",
                "6 <- INIT",
                "7 <- 0.0",
                "8 <- INIT",
                "9 <- 0.9"
            ]
        },
        "Step 1": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "1 - 1 = 0 (left: 0 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 1 11 12)",
                "11 + 1 = 12 (left: 1 11 12)",
                "1 - 1 = 0 (left: 0 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || Input: 3 5 10",
                "11 + 1 = 12 (left: 1 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11)",
                "11 - 1 = 10 (left: 1 10 11)",
                "11 + 1 = 12 (left: 1 11 12) || Input: 5 5 10"
            ],
            "Evaluation": [
                0.002,
                1.002,
                1.002,
                20.002,
                2.001,
                0.003,
                20.002,
                40.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- INIT",
                "2 <- 1.7",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 0.9",
                "6 <- INIT",
                "7 <- 1.6",
                "8 <- 1.3",
                "9 <- 1.6"
            ]
        },
        "Step 2": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 - 1 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 11 10)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 9 * 3 = 27 (left: 27 27)",
                "11 + 1 = 12 (left: 1 11 12)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 11 12)",
                "11 - 1 = 10 (left: 1 10 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 * 1 = 11 (left: 11 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                21.001,
                20.002,
                0.003,
                0.003,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 2.4",
                "2 <- 1.7",
                "3 <- 1.6",
                "4 <- INIT",
                "5 <- 2.3",
                "6 <- 1.7",
                "7 <- 0.0",
                "8 <- 0.9",
                "9 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 10 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 - 1 = 10 (left: 1 11 10)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 11 = 1 (left:",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11)"
            ],
            "Evaluation": [
                3.0,
                1.002,
                0.003,
                0.002,
                1.002,
                20.0,
                0.002,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.4",
                "2 <- 2.4",
                "3 <- INIT",
                "4 <- 1.7",
                "5 <- 2.4",
                "6 <- 2.3",
                "7 <- 1.7",
                "8 <- 1.3",
                "9 <- 0.9"
            ]
        },
        "Step 4": {
            "steps": [
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 10 11)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 10 11 11)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10)",
                "11 + 1 = 12 (left: 1 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left:",
                "11 + 1 = 12 (left: 1 11 12) || 12 / 1 = 12 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || Input: 2 5 10"
            ],
            "Evaluation": [
                0.002,
                0.003,
                60.0,
                21.001,
                0.002,
                40.001,
                0.002,
                0.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 4.5",
                "2 <- 4.2",
                "3 <- 1.6",
                "4 <- 4.2",
                "5 <- 0.0",
                "6 <- 4.5",
                "7 <- 4.5",
                "8 <- 4.2",
                "9 <- 1.7"
            ]
        },
        "Step 5": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 11)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 + 1 = 12 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 - 1 = 10 (left: 10)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 1 11)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                0.001,
                0.003,
                60.0,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 4.3",
                "2 <- 0.9",
                "3 <- 4.2",
                "4 <- 4.3",
                "5 <- 5.7",
                "6 <- 4.2",
                "7 <- 0.9",
                "8 <- 4.3",
                "9 <- 4.5"
            ]
        },
        "Step 6": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "11 + 1 = 12 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 1 12)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 1 12)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: || 5 + 7 = 12 (left: 3 12 11)"
            ],
            "Evaluation": [
                1.0,
                1.002,
                1.002,
                0.003,
                1.001,
                0.003,
                0.001,
                0.003,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 5.7",
                "1 <- 6.2",
                "2 <- 6.2",
                "3 <- 1.7",
                "4 <- 5.7",
                "5 <- INIT",
                "6 <- 1.3",
                "7 <- 5.7",
                "8 <- 0.9",
                "9 <- 5.7"
            ]
        },
        "Step 7": {
            "steps": [
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 1 12) || 1 * 12 = 12 (left: 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 1 12) || 12 / 1 = 12 (left: 1 12)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.001,
                0.002,
                0.003,
                41.0,
                2.0,
                0.002,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 5.7",
                "1 <- 5.7",
                "2 <- 3.5",
                "3 <- 4.5",
                "4 <- 5.7",
                "5 <- 4.2",
                "6 <- 4.2",
                "7 <- 5.7",
                "8 <- 3.5",
                "9 <- 5.7"
            ]
        },
        "Step 8": {
            "steps": [
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 11 = 1 (left: || 9 / 3 = 3 (left: 3 7)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 11)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 11 = 1 (left: || 12 - 11 = 1 (left: 1)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.0,
                0.003,
                0.002,
                0.003,
                0.003,
                0.002,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 5.7",
                "2 <- 4.2",
                "3 <- 4.2",
                "4 <- 4.5",
                "5 <- 7.5",
                "6 <- 7.5",
                "7 <- 4.2",
                "8 <- 4.5",
                "9 <- 5.7"
            ]
        },
        "Step 9": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 / 1 = 11 (left: 10)",
                "11 + 1 = 12 (left: 1 11 12) || 12 / 1 = 12 (left:",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 + 10 = 11",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: || Possible next steps:",
                "11 * 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)"
            ]
        },
        "Input": "1 1 11 11",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            }
        ]
    },
    "2": {
        "puzzle": "1 1 3 8",
        "Step 0": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8)",
                "1 * 1 = 1 (left: 1 3 8)",
                "8 - 3 = 5 (left: 1 3 5)",
                "3 + 1 = 4 (left: 1 4 8)",
                "8 - 3 = 5 (left: 1 1 5)",
                "8 - 1 = 7 (left: 1 3 7)",
                "8 - 3 = 5 (left: 1 1 5)",
                "8 - 3 = 5 (left: 1 5 8)",
                "8 - 1 = 7 (left: 1 3 ",
                "3 * 1 = 3 (left: 1 3 8)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                1.002,
                0.003,
                2.001,
                2.001,
                3.0,
                1.002,
                0.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.0",
                "2 <- 0.9",
                "3 <- INIT",
                "4 <- 0.9",
                "5 <- INIT",
                "6 <- 0.1",
                "7 <- 0.0",
                "8 <- 0.9",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 1 3 8) || 3 - 1 = 2 (left: 2 8)",
                "3 * 1 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "8 - 1 = 7 (left: 1 3 7)",
                "3 * 1 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 3 1 8)",
                "1 * 1 = 1 (left: 1 3 8) || 8 / 3 = 2.67 (left: 1 2.67)",
                "3 * 1 = 3 (left: 1 3 8) || 3 - 1 = 2 (left: 2 8)",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 3 = 2.66667 (left: 1 2.66667)",
                "3 - 1 = 2 (left: 1 2 8)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                60.0,
                3.0,
                60.0,
                60.0,
                0.003,
                0.002,
                3.0,
                22.0
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 1.0",
                "2 <- 0.1",
                "3 <- 1.9",
                "4 <- 0.1",
                "5 <- 1.0",
                "6 <- 1.5",
                "7 <- 1.0",
                "8 <- 1.5",
                "9 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 8) || 1 * 3 = 3 (left: 3 8)",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "3 - 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "1 * 1 = 1 (left: 1 3 8) || 3 - 1 = 2 (left: 2 8)",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 1 = 3 (left: 3 1 8) || 1 + 8 = 9 (left: 3 9)",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || Input: 4 10",
                "3 * 1 = 3 (left: 3 1 8) || 8 - 1 = 7 (left: 3 7)",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 4 + 5 = 9 (left: 9 10)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                0.001,
                0.002,
                0.003,
                0.003,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 0.9",
                "2 <- 2.3",
                "3 <- 1.2",
                "4 <- 1.5",
                "5 <- 0.5",
                "6 <- 1.4",
                "7 <- 2.0",
                "8 <- 0.1",
                "9 <- 1.2"
            ]
        },
        "Step 3": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 * 1 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "3 - 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "3 * 1 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 * 1 = 3 (left: 3 1 8) || 8 / 3 = 2 (left: 2 8)",
                "8 - 1 = 7 (left: 1 3 7) || 3 / 1 = 3 (left: 3 7)",
                "3 * 1 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 1 = 3 (left: 3 1 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 3 8) || 8 / 3 = 2.67 (left: 1 2.67)",
                "3 * 1 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2.66666666667 (left: 2.66666666667)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.002,
                60.0,
                0.003,
                1.001,
                0.001,
                60.0,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 3.7",
                "1 <- 2.1",
                "2 <- 3.0",
                "3 <- 2.3",
                "4 <- 3.7",
                "5 <- 1.5",
                "6 <- 3.0",
                "7 <- 2.1",
                "8 <- 3.0",
                "9 <- 1.0"
            ]
        },
        "Step 4": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * (1 * 3)) * 8 = 24",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 1 * (1 * 3) * 8 = 24",
                "3 * 1 = 3 (left: 3 1 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: ((1 * 3) * 1) * 8 = 24",
                "3 - 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "3 * 1 = 3 (left: 3 1 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 3) * (8 / 3) = 24",
                "3 * 1 = 3 (left: 3 1 8) || 8 / 1 = 8 (left: 3 8)",
                "3 * 1 = 3 (left: 3 1 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 3 1 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)"
            ]
        },
        "Input": "1 1 3 8",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 1
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "3": {
        "puzzle": "1 1 1 8",
        "Step 0": {
            "steps": [
                "8 - 1 = 7 (left: 1 1 7)",
                "1 * 1 = 1 (left: 1 1 8)",
                "1 * 1 = 1 (left: 1 1 8)",
                "1 * 1 = 1 (left: 1 1 8)",
                "8 - 1 = 7 (left: 1 1 7)",
                "8 / 1 = 8 (left: 1 1 8)",
                "8 / 1 = 8 (left: 1 1 8)",
                "8 - 1 = 7 (left: 1 1 7)",
                "1 / 1 = 1 (left: 1 1 ",
                "1 / 1 = 1 (left: 1 1 8)"
            ],
            "Evaluation": [
                2.001,
                1.001,
                1.002,
                1.001,
                2.001,
                22.0,
                1.002,
                3.0,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.9",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 0.5",
                "7 <- 0.4",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 8)",
                "1 + 1 = 2 (left: 2 1 8)",
                "1 / 1 = 1 (left: 1 1 8) || Possible",
                "8 - 1 = 7 (left: 1 1 7)",
                "1 + 1 = 2 (left: 2 1 8)",
                "8 - 1 = 7 (left: 1 1 7)",
                "8 / 1 = 8 (left: 1 1 8) || 1 / 1 = 1 (left: 1 8)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6)",
                "8 - 1 = 7 (left: 1 1 7)",
                "1 * 1 = 1 (left: 1 1 8)"
            ],
            "Evaluation": [
                2.0,
                41.0,
                0.003,
                1.002,
                60.0,
                1.002,
                40.0,
                40.0,
                1.001,
                0.002
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 1.1",
                "2 <- 1.4",
                "3 <- INIT",
                "4 <- 1.5",
                "5 <- 0.5",
                "6 <- 1.4",
                "7 <- 1.7",
                "8 <- 1.1",
                "9 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 + 1 = 2 (left: 2 1 8) || 8 / 2 = 4 (left: 4 8)",
                "1 + 1 = 2 (left: 2 1 8) || 8 - 1 = 7 (left: 2 7)",
                "8 - 1 = 7 (left: 1 1 7)",
                "8 - 1 = 7 (left: 1 1 7) || 1 + 7 = 8 (left: 1 8)",
                "8 / 1 = 8 (left: 1 1 8) || Input: 3 3 8",
                "1 + 1 = 2 (left: 2 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 + 1 = 2 (left: 2 1 8) || 1 * 8 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.001,
                2.001,
                21.001,
                0.003,
                0.002,
                0.002,
                0.003,
                40.0
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 2.4",
                "2 <- 1.7",
                "3 <- 1.7",
                "4 <- 1.6",
                "5 <- INIT",
                "6 <- 1.6",
                "7 <- 0.7",
                "8 <- 2.9",
                "9 <- 1.1"
            ]
        },
        "Step 3": {
            "steps": [
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 1 + 7 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 1 - 6 = -5 (left: -5)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "8 / 1 = 8 (left: 1 1 8) || 1 / 1 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 - 1 = 7 (left: 1 1 7)",
                "8 / 1 = 8 (left: 1 1 8) || 1 / 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8) || Input: 3 6 9"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.0,
                0.002,
                0.001,
                2.001,
                0.002,
                60.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.1",
                "2 <- 1.7",
                "3 <- 1.4",
                "4 <- 1.1",
                "5 <- 2.4",
                "6 <- 3.7",
                "7 <- 2.4",
                "8 <- 2.4",
                "9 <- 3.7"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 8)",
                "1 + 1 = 2 (left: 2 1 8) || Possible",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 + 1 = 2 (left: 2 1 8) || 2 / 1 = 2 (left: 2 8)",
                "1 + 1 = 2 (left: 2 1 8) || 1 + 8 = 9 (left: 2 9)",
                "8 - 1 = 7 (left: 1 1 7) || 1 + 7 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 1 = 7 (left: 1 1 7) || 1 + 7 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 1 = 7 (left: 1 1 7) || 1 + 7 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                0.002,
                0.001,
                0.002,
                0.002,
                0.001,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 3.7",
                "2 <- 3.7",
                "3 <- 1.4",
                "4 <- 2.9",
                "5 <- 3.7",
                "6 <- 2.9",
                "7 <- 1.7",
                "8 <- 1.6",
                "9 <- 2.9"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 8) || 1 * 1 = 1 (left: 1 8)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 + 1 = 2 (left: 2 1 8) || 2 / 1 = 2 (left: 2 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 * 1 = 6 (left: 6)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "8 / 1 = 8 (left: 1 1 8) || 1 / 1 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.003,
                0.002,
                0.0,
                0.001,
                0.003,
                0.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 1.4",
                "2 <- 5.0",
                "3 <- 2.9",
                "4 <- 3.7",
                "5 <- 0.2",
                "6 <- 5.0",
                "7 <- 1.1",
                "8 <- 2.9",
                "9 <- 1.3"
            ]
        },
        "Step 6": {
            "steps": [
                "8 - 1 = 7 (left: 1 1 7) || 1 + 7 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "1 + 1 = 2 (left: 2 1 8) || 8 / 2 = 4 (left: 4 8)",
                "1 * 1 = 1 (left: 1 1 8) || 1 * 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8)",
                "1 * 1 = 1 (left: 1 1 8) || 1 * 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8) || 8 - 1 = 7 (left: 2 7)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.002,
                0.002,
                0.003,
                40.0,
                0.002,
                0.002,
                0.002,
                20.0
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.6",
                "2 <- 1.6",
                "3 <- 1.4",
                "4 <- 1.4",
                "5 <- 1.4",
                "6 <- 3.7",
                "7 <- 1.4",
                "8 <- 1.4",
                "9 <- 2.4"
            ]
        },
        "Step 7": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 8) || 2 * 1 = 2 (left: 2 8)",
                "8 / 1 = 8 (left: 1 1 8) || 1 / 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8) || 1 / 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 / 1 = 2 (left: 2 8)",
                "1 + 1 = 2 (left: 2 1 8) || 1 + 8 = 9 (left: 2 9)",
                "1 + 1 = 2 (left: 2 1 8) || 1 + 8 = 9 (left:",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 + 1 = 2 (left: 2 1 8) || 1 * 8 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8) || 8 - 1 = 7 (left: 2 7)",
                "8 - 1 = 7 (left: 1 1 7) || 1 + 7 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.002,
                0.001,
                0.0,
                2.0,
                0.003,
                0.001,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 5.0",
                "2 <- 6.9",
                "3 <- 5.0",
                "4 <- 5.0",
                "5 <- 2.9",
                "6 <- 2.9",
                "7 <- 6.5",
                "8 <- 2.9",
                "9 <- 2.9"
            ]
        },
        "Step 8": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 8) || 1 * 1 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "1 * 1 = 1 (left: 1 1 8) || 1 * 1 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "1 * 1 = 1 (left: 1 1 8) || 1 * 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "1 * 1 = 1 (left: 1 1 8) || 1 * 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 8 / 1 = 8 (left: 1 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "1 * 1 = 1 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.001,
                0.003,
                0.001,
                21.001,
                0.002,
                0.0,
                0.0,
                0.002
            ],
            "Resampling": [
                "0 <- 2.9",
                "1 <- 2.4",
                "2 <- 6.5",
                "3 <- 8.5",
                "4 <- 0.5",
                "5 <- 5.0",
                "6 <- 8.5",
                "7 <- 6.9",
                "8 <- 5.0",
                "9 <- 1.6"
            ]
        },
        "Step 9": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 1 1 7) || 1 + 7 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 * 1 = 1 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 8 / 1 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9)",
                "1 * 1 = 1 (left: 1 1 8) || 1 * 1 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 8 / 1 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7) || 7 * 1 = 7 (left: 7)",
                "1 * 1 = 1 (left: 1 1 8) || 1 * 1 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8) || 1 / 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)"
            ]
        },
        "Input": "1 1 1 8",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "4": {
        "puzzle": "6 6 6 6",
        "Step 0": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36)",
                "6 / 6 = 1 (left: 6 1 6 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 / 6 = 1 (left: 1 6 6)",
                "6 * 6 = 36 (left: 6 6 36)"
            ],
            "Evaluation": [
                41.0,
                21.0,
                20.002,
                41.0,
                60.0,
                40.001,
                0.003,
                21.001,
                41.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- INIT",
                "2 <- 0.9",
                "3 <- 0.1",
                "4 <- 0.4",
                "5 <- 0.3",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- 0.4",
                "9 <- 0.7"
            ]
        },
        "Step 1": {
            "steps": [
                "6 / 6 = 1 (left: 6 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 - 6 = 0 (left: 6 6 0)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6)",
                "6 / 6 = 1 (left: 6 1 6 6) || 6 + 1 = 7 (left: 6 6 7)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 6 36)",
                "6 - 6 = 0 (left: 0 6 6) || 3 + 3 = 6 (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 - 6 = 0 (left: 6 6 0)",
                "6 * 6 = 36 (left: 6 6 36) || 6 + 6 = 12 (left: 12 36)",
                "6 - 6 = 0 (left: 0 6 6) || Input: 2 3 6"
            ],
            "Evaluation": [
                3.0,
                3.0,
                20.002,
                1.002,
                0.003,
                0.003,
                60.0,
                1.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 0.8",
                "2 <- 1.0",
                "3 <- 0.9",
                "4 <- 0.9",
                "5 <- 1.2",
                "6 <- 0.4",
                "7 <- 0.3",
                "8 <- 0.9",
                "9 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "6 - 6 = 0 (left: 0 6 6) || 6 - 6 = 0 (left: 0)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 / 6 = 1 (left: 6 1 6 6) || 6 / 1 = 6 (left: 6 6 6) || 6 - 6 = 0 (left: 0)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "6 * 6 = 36 (left: 6 6 36) || 6 + 6 = 12 (left: 12 36)",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 6 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6)",
                "6 - 6 = 0 (left: 6 6 0) || 6 / 6 = 1 (left: 1 0)"
            ],
            "Evaluation": [
                0.003,
                1.001,
                0.002,
                40.001,
                60.0,
                0.003,
                20.002,
                60.0,
                21.001,
                20.002
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 0.9",
                "2 <- 2.9",
                "3 <- 0.3",
                "4 <- 0.7",
                "5 <- 2.7",
                "6 <- 0.8",
                "7 <- 2.9",
                "8 <- 0.4",
                "9 <- 0.8"
            ]
        },
        "Step 3": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 + 6 = 12 (left: 12 36) || 12 * 3 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 36)",
                "6 - 6 = 0 (left: 6 6 0) || 6 / 6 = 1 (left: 1 0) || 5 - 3 = 2 (left: 3)",
                "6 - 6 = 0 (left: 0 6 6) || Input: 3 4 5",
                "6 - 6 = 0 (left: 0 6 6) || 4 + 4 = 8 (left: 8 8)",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "6 / 6 = 1 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6)",
                "6 - 6 = 0 (left: 6 6 0) || 6 / 6 = 1 (left: 1 0) || 1 / 0 = undefined",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)"
            ],
            "Evaluation": [
                20.0,
                60.0,
                0.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                60.0,
                1.002
            ],
            "Resampling": [
                "0 <- 2.7",
                "1 <- 2.6",
                "2 <- 3.0",
                "3 <- 0.1",
                "4 <- 3.8",
                "5 <- 3.0",
                "6 <- 0.7",
                "7 <- 1.6",
                "8 <- 3.8",
                "9 <- 0.8"
            ]
        },
        "Step 4": {
            "steps": [
                "6 - 6 = 0 (left: 0 6 6) || 6 * 6 = 36 (left: 36) || None - 36 is the final result.",
                "6 * 6 = 36 (left: 6 6 36) || 6 + 6 = 12 (left: 12 36) || 36 - 12 = 24 (left: 24)",
                "6 * 6 = 36 (left: 6 6 36) || 6 + 6 = 12 (left: 12 36) || 12 * 3 = 36 (left: 36) || There are no possible next steps as there is only one number provided.",
                "6 / 6 = 1 (left: 6 1 6 6) || 6 + 1 = 7 (left: 6 6 7)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 + 6 = 12 (left: 12 36) || 12 * 3 = 36 (left: 36) || There are no possible operations to perform on the number 36.",
                "6 - 6 = 0 (left: 0 6 6) || Input: 3 5 7 9",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || Input: 3 9 5",
                "6 / 6 = 1 (left: 1 6 6) || 1 * 6 = 6 (left: 6 6)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.003,
                1.002,
                20.0,
                0.003,
                0.003,
                40.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- INIT",
                "2 <- 2.3",
                "3 <- 1.6",
                "4 <- 2.7",
                "5 <- 2.3",
                "6 <- 3.1",
                "7 <- 2.7",
                "8 <- 0.0",
                "9 <- 3.1"
            ]
        },
        "Step 5": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 + 6 = 12 (left: 12 36)",
                "6 / 6 = 1 (left: 1 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 - 0 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36)",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 - 36 = 0 (left: 0)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 6 = 36 (left: 36) || 36 + 2 = 38",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18"
            ],
            "Evaluation": [
                0.003,
                21.0,
                60.0,
                20.001,
                0.003,
                0.003,
                0.003,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 5.8",
                "2 <- 5.2",
                "3 <- INIT",
                "4 <- 3.1",
                "5 <- 3.1",
                "6 <- 5.1",
                "7 <- 1.6",
                "8 <- 2.3",
                "9 <- 1.2"
            ]
        },
        "Step 6": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 - 0 = 36 (left: 36) || There are no possible next steps with the input of 36 as it is already a single number.",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 - 0 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 36) || 36 * 2 = 72 (left: 72)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "6 / 6 = 1 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6)",
                "6 * 6 = 36 (left: 6 6 36) || 36 - 6 = 30 (left: 6 30)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 0 - 36 = -36 (left: -36)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 3.1",
                "2 <- 3.8",
                "3 <- 5.2",
                "4 <- 5.3",
                "5 <- 2.6",
                "6 <- 2.7",
                "7 <- 4.1",
                "8 <- 5.1",
                "9 <- 5.8"
            ]
        },
        "Step 7": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 + 6 = 12 (left: 12 36) || 36 - 12 = 24 (left: 24) || Answer: (6 * 6) - (6 + 6) = 24",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 - 0 = 36 (left: 36) || There are no possible next steps with the input 36.",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || Possible next steps:",
                "6 * 6 = 36 (left: 6 6 36) || 6 + 6 = 12 (left: 12 36) || 36 / 12 = 3 (left: 3 36)",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 6 = 36 (left: 36) || 36 / 4 = 9 (left: 9)",
                "6 * 6 = 36 (left: 6 6 36) || 6 + 6 = 12 (left: 12 36) || 36 - 12 = 24 (left: 24) || Answer: (6 * 6) - (6 + 6) = 24",
                "6 / 6 = 1 (left: 1 6 6) || 6 + 1 = 7 (left: 6 7)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 - 1 = 35"
            ]
        },
        "Input": "6 6 6 6",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "5": {
        "puzzle": "1 1 2 12",
        "Step 0": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 12)",
                "1 * 1 = 1 (left: 1 2 12)",
                "12 / 2 = 6 (left: 1 2 6)",
                "12 / 2 = 6 (left: 1 2 6)",
                "12 - 2 = 10 (left: 1 1 10)",
                "12 - 2 = 10 (left: 1 1 10)",
                "12 - 2 = 10 (left: 1 2 10)",
                "2 * 1 = 2 (left: 1 2 12)",
                "2 * 1 = 2 (left: 2 2 12)",
                "2 * 1 = 2 (left: 1 2 12)"
            ],
            "Evaluation": [
                2.001,
                60.0,
                1.002,
                1.002,
                0.003,
                1.002,
                1.002,
                60.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.7",
                "2 <- 0.1",
                "3 <- 0.1",
                "4 <- 0.9",
                "5 <- INIT",
                "6 <- 0.1",
                "7 <- 0.9",
                "8 <- 0.9",
                "9 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "1 * 1 = 1 (left: 1 2 12) || 10 - 3 = 7 (left: 7",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)",
                "12 - 1 = 11 (left: 1 2 11)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 1 = 11 (left: 2 11)",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)"
            ],
            "Evaluation": [
                60.0,
                40.0,
                0.001,
                60.0,
                60.0,
                0.002,
                41.0,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 0.9",
                "2 <- 1.8",
                "3 <- 1.3",
                "4 <- 1.3",
                "5 <- 0.9",
                "6 <- 1.8",
                "7 <- 1.0",
                "8 <- 0.7",
                "9 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 1 = 12 (left:",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || Input: 5 10",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.003,
                0.002,
                0.002,
                0.001,
                0.002,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 0.7",
                "3 <- 1.0",
                "4 <- 2.9",
                "5 <- 0.1",
                "6 <- 2.8",
                "7 <- INIT",
                "8 <- 0.1",
                "9 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24 24)",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 2) * (2 * 12) = 24",
                "1 * 1 = 1 (left: 1 2 12) || Input: 3 6 7 2",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 1 = 11 (left: 1 2 ",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                60.0,
                60.0,
                20.002,
                0.003,
                0.0,
                0.002,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 0.1",
                "2 <- 3.4",
                "3 <- 1.9",
                "4 <- 0.9",
                "5 <- 0.7",
                "6 <- 2.1",
                "7 <- 1.9",
                "8 <- 1.0",
                "9 <- 3.2"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 2) * (2 * 12) = 24 || Input: 3 3 4 8\nSteps:\n3 + 4 = 7 (left: 3 7 8)\n7 + 8 = 15 (left: 3 15)\n3 * 15 = 45 (left: 45)\n45 - 21 = 24 (left: 24)\nAnswer: ((3 + 4) + 8) - (3 * 15) = 24",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "2 * 1 = 2 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12)",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 1 = 11 (left:",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.0,
                60.0,
                60.0,
                0.002,
                60.0,
                0.001,
                0.002,
                0.001,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 2.9",
                "2 <- 1.8",
                "3 <- 2.8",
                "4 <- 4.4",
                "5 <- 4.4",
                "6 <- 1.1",
                "7 <- 3.8",
                "8 <- 4.4",
                "9 <- 4.2"
            ]
        },
        "Step 5": {
            "steps": [
                "2 * 1 = 2 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (2 * 1) * (1 * 2) * 12 = 24",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || Input: 3 9 27 81",
                "2 * 1 = 2 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "2 * 1 = 2 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "2 * 1 = 2 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 2) * (2 * 12) = 24 || Input: 3 3 4 8\nSteps:\n3 + 4 = 7 (left: 3 7 8)\n7 + 8 = 15 (left: 3 15)\n3 * 15 = 45 (left: 45)\n45 - 21 = 24 (left: 24)\nAnswer: ((3 + 4) + 8) - (3 * 15) = 24 || Input: 2 3 4 5\nSteps:\n2 * 4 = 8 (left: 3 5 8)\n5 - 3 = 2 (left: 2 8)\n2 * 8 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((2 * 4) + 5) + 8 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.0,
                0.003,
                0.002,
                0.002,
                0.003,
                0.003,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 3.4",
                "2 <- 2.1",
                "3 <- 3.3",
                "4 <- 5.9",
                "5 <- 1.9",
                "6 <- 3.2",
                "7 <- 1.6",
                "8 <- 5.9",
                "9 <- 1.8"
            ]
        },
        "Step 6": {
            "steps": [
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 2) * (2 * 12) = 24 || Input: 3 3 4 8\nSteps:\n3 + 4 = 7 (left: 3 7 8)\n7 + 8 = 15 (left: 3 15)\n3 * 15 = 45 (left: 45)\n45 - 21 = 24 (left: 24)\nAnswer: ((3 + 4) + 8) - (3 * 15) = 24 || Input: 2 3 3 9\nSteps:\n3 * 3 = 9 (left: 2 9 9)\n9 - 9 = 0 (left: 2 0)\n2 * 0 = 0 (left: 0)\n9 + 3 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((3 * 3) - 9) * (2 +",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 2) * (2 * 12) = 24 || Input: 3 3 8 9\nSteps:\n3 + 9 = 12 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)\n12 * 5 = 60 (left: 60)\n60 / 3 = 20 (left: 20)\n20 - 8 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: (((",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24 24) || 24 + 24 = 48",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 2) * (2 * 12) = 24 || Input: 3 3 4 8\nSteps:\n3 + 4 = 7 (left: 3 7 8)\n7 + 8 = 15 (left: 3 15)\n3 * 15 = 45 (left: 45)\n45 - 21 = 24 (left: 24)\nAnswer: ((3 + 4) + 8) - (3 * 15) = 24 || Input: 2 3 4 5\nSteps:\n2 * 4 = 8 (left: 3 5 8)\n5 - 3 = 2 (left: 2 8)\n2 * 8 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((2 * 4) + 5) + 8 = 24 || Input: 6 6 7 8\nSteps:\n6 * 7 = 42 (left: 6 8 42)\n42 - 6 = 36 (left: 8 36)\n8 - 36 = -28 (left: -28)\n-28 + 24 = 24 (left: 24)\nAnswer: ((6 * 7) - 6) + 8 = 24",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 2) * (2 * 12) = 24 || Input: 3 3 4 8\nSteps:\n3 + 4 = 7 (left: 3 7 8)\n7 + 8 = 15 (left: 3 15)\n3 * 15 = 45 (left: 45)\n45 - 21 = 24 (left: 24)\nAnswer: ((3 + 4) + 8) - (3 * 15) = 24 || Input: 2 3 4 5\nSteps:\n2 * 4 = 8 (left: 3 5 8)\n5 - 3 = 2 (left: 2 8)\n2 * 8 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((2 * 4) + 5) + 8 = 24 || Input: 6 7 8 9\nSteps:\n6 * 7 = 42 (left: 8 9 42)\n9 - 8 = 1 (left: 1 42)\n1 * 42 = 42 (left: 42)\n42 / 2 = 24 (left: 24)\nAnswer: ((6 * 7) - (9 - 8)) / 2 = 24",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.002,
                0.003,
                60.0,
                0.003,
                0.003,
                0.003,
                60.0,
                0.0
            ],
            "Resampling": [
                "0 <- 6.8",
                "1 <- 1.3",
                "2 <- 3.2",
                "3 <- 6.1",
                "4 <- 2.8",
                "5 <- 6.0",
                "6 <- 4.1",
                "7 <- 4.4",
                "8 <- 5.9",
                "9 <- 1.8"
            ]
        },
        "Step 7": {
            "steps": [
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 2) * (2 * 12) = 24 || Input: 3 3 4 8\nSteps:\n3 + 4 = 7 (left: 3 7 8)\n7 + 8 = 15 (left: 3 15)\n3 * 15 = 45 (left: 45)\n45 - 21 = 24 (left: 24)\nAnswer: ((3 + 4) + 8) - (3 * 15) = 24 || Input: 2 3 4 5\nSteps:\n2 * 4 = 8 (left: 3 5 8)\n5 - 3 = 2 (left: 2 8)\n2 * 8 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((2 * 4) + 5) + 8 = 24 || Input: 6 7 8 9\nSteps:\n6 * 7 = 42 (left: 8 9 42)\n9 - 8 = 1 (left: 1 42)\n1 * 42 = 42 (left: 42)\n42 / 2 = 24 (left: 24)\nAnswer: ((6 * 7) - (9 - 8)) / 2 = 24 || Input: 2 3 5 5\nSteps:\n5 + 5 = 10 (left: 2 3 10)\n3 * 10 = 30 (left: 2 30)\n30 / 2 = 15 (left: 15)\n15 + 15 = 24 (left: 24)\nAnswer: ((5 + 5) * 3) + 2 = 24",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 2) * (2 * 12) = 24 || Input: 3 3 8 9\nSteps:\n3 + 9 = 12 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)\n12 * 5 = 60 (left: 60)\n60 / 3 = 20 (left: 20)\n20 - 8 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((( || 3 + 9) - 8) * 5) * 2 = 24",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 2) * (2 * 12) = 24 || Input: 3 3 4 8\nSteps:\n3 + 4 = 7 (left: 3 7 8)\n7 + 8 = 15 (left: 3 15)\n3 * 15 = 45 (left: 45)\n45 - 21 = 24 (left: 24)\nAnswer: ((3 + 4) + 8) - (3 * 15) = 24 || Input: 2 3 3 9\nSteps:\n3 * 3 = 9 (left: 2 9 9)\n9 - 9 = 0 (left: 2 0)\n2 * 0 = 0 (left: 0)\n9 + 3 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((3 * 3) - 9) * (2 + || 0) = 24",
                "1 * 1 = 1 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "2 * 1 = 2 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 2) * (2 * 12) = 24 || Input: 3 3 4 8\nSteps:\n3 + 4 = 7 (left: 3 7 8)\n7 + 8 = 15 (left: 3 15)\n3 * 15 = 45 (left: 45)\n45 - 21 = 24 (left: 24)\nAnswer: ((3 + 4) + 8) - (3 * 15) = 24 || Input: 2 3 4 5\nSteps:\n2 * 4 = 8 (left: 3 5 8)\n5 - 3 = 2 (left: 2 8)\n2 * 8 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((2 * 4) + 5) + 8 = 24 || Input: 6 6 7 8\nSteps:\n6 + 7 = 13 (left: 6 8 13)\n6 + 8 = 14 (left: 13 14)\n13 * 14 = 182 (left: 182)\n182 / 8 = 22.75 (left: 22.75)\n22.75 + 6 = 28.75 (left: 28.75)\n28.75 - 6",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                40.0,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.001,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 5.9",
                "1 <- 2.9",
                "2 <- 2.9",
                "3 <- 7.8",
                "4 <- 7.8",
                "5 <- 6.8",
                "6 <- 5.9",
                "7 <- 3.3",
                "8 <- 1.4",
                "9 <- 2.8"
            ]
        },
        "Step 8": {
            "steps": [
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 2) * (2 * 12) = 24 || Input: 3 3 4 8\nSteps:\n3 + 4 = 7 (left: 3 7 8)\n7 + 8 = 15 (left: 3 15)\n3 * 15 = 45 (left: 45)\n45 - 21 = 24 (left: 24)\nAnswer: ((3 + 4) + 8) - (3 * 15) = 24 || Input: 2 3 4 5\nSteps:\n2 * 4 = 8 (left: 3 5 8)\n5 - 3 = 2 (left: 2 8)\n2 * 8 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((2 * 4) + 5) + 8 = 24 || Input: 6 6 6 6\nSteps:\n6 * 6 = 36 (left: 6 6 36)\n6 - 6 = 0 (left: 0 36)\n0 + 36 = 36 (left: 36)\n36 - 12 = 24 (left: 24)\nAnswer: ((6 * 6) - 6) + 6 = 24",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (2 * 1) * (1 * 12) = 24",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (2 * 1) * (2 * 12) = 24",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 2) * (2 * 12) = 24 || Input: 3 3 4 8\nSteps:\n3 + 4 = 7 (left: 3 7 8)\n7 + 8 = 15 (left: 3 15)\n3 * 15 = 45 (left: 45)\n45 - 21 = 24 (left: 24)\nAnswer: ((3 + 4) + 8) - (3 * 15) = 24 || Input: 2 3 4 5\nSteps:\n2 * 4 = 8 (left: 3 5 8)\n5 - 3 = 2 (left: 2 8)\n2 * 8 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((2 * 4) + 5) + 8 = 24 || Input: 6 6 7 8\nSteps:\n6 + 7 = 13 (left: 6 8 13)\n6 + 8 = 14 (left: 13 14)\n13 * 14 = 182 (left: 182)\n182 / 8 = 22.75 (left: 22.75)\n22.75 + 6 = 28.75 (left: 28.75)\n28.75 - 6 || = 24 (left: 24)\nAnswer: ((6 + 7) * (6 + 8) / 8) - 6 = 24",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 2) * (2 * 12) = 24 || Input: 3 3 4 8\nSteps:\n3 + 4 = 7 (left: 3 7 8)\n7 + 8 = 15 (left: 3 15)\n3 * 15 = 45 (left: 45)\n45 - 21 = 24 (left: 24)\nAnswer: ((3 + 4) + 8) - (3 * 15) = 24 || Input: 2 3 4 5\nSteps:\n2 * 4 = 8 (left: 3 5 8)\n5 - 3 = 2 (left: 2 8)\n2 * 8 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((2 * 4) + 5) + 8 = 24 || Input: 6 6 7 8\nSteps:\n6 + 7 = 13 (left: 6 8 13)\n6 + 8 = 14 (left: 13 14)\n13 * 14 = 182 (left: 182)\n182 / 8 = 22.75 (left: 22.75)\n22.75 + 6 = 28.75 (left: 28.75)\n28.75 - 6 || = 24\nAnswer: ((6 + 7) * (6 + 8)) / (8 + 6) = 24",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 2) * (2 * 12) = 24 || Input: 3 3 4 8\nSteps:\n3 + 4 = 7 (left: 3 7 8)\n7 + 8 = 15 (left: 3 15)\n3 * 15 = 45 (left: 45)\n45 - 21 = 24 (left: 24)\nAnswer: ((3 + 4) + 8) - (3 * 15) = 24 || Input: 2 3 4 5\nSteps:\n2 * 4 = 8 (left: 3 5 8)\n5 - 3 = 2 (left: 2 8)\n2 * 8 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((2 * 4) + 5) + 8 = 24 || Input: 6 7 8 9\nSteps:\n6 * 7 = 42 (left: 8 9 42)\n9 - 8 = 1 (left: 1 42)\n1 * 42 = 42 (left: 42)\n42 / 2 = 24 (left: 24)\nAnswer: ((6 * 7) - (9 - 8)) / 2 = 24 || Input: 2 4 6 9\nSteps:\n2 * 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 12)\n5 * 12 = 60 (left: 60)\n60 / 2.5 = 24 (left: 24)\nAnswer: ((2 * 6) + (9 - 4)) / (5 * 12) = 24",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 2) * (2 * 12) = 24 || Input: 3 3 4 8\nSteps:\n3 + 4 = 7 (left: 3 7 8)\n7 + 8 = 15 (left: 3 15)\n3 * 15 = 45 (left: 45)\n45 - 21 = 24 (left: 24)\nAnswer: ((3 + 4) + 8) - (3 * 15) = 24 || Input: 2 3 4 5\nSteps:\n2 * 4 = 8 (left: 3 5 8)\n5 - 3 = 2 (left: 2 8)\n2 * 8 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((2 * 4) + 5) + 8 = 24 || Input: 6 6 6 6\nSteps:\n6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 6 36)\n36 - 12 = 24 (left: 24)\nAnswer: (6 + 6) * (6 - 6) = 24",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24 24) || 24 + 24 = 48",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ]
        },
        "Input": "1 1 2 12",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": 1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "6": {
        "puzzle": "1 2 2 6",
        "Step 0": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6)",
                "2 * 2 = 4 (left: 4 6)",
                "6 / 2 = 3 (left: 3 2 6)",
                "2 * 2 = 4 (left: 4 2 6)",
                "6 - 2 = 4 (left: 1 4 6)",
                "6 / 2 = 3 (left: 1 2 3)",
                "2 + 2 = 4 (left: 4 6 6)",
                "6 - 2 = 4 (left: 1 2 4)",
                "6 - 2 = 4 (left: 1 4 ",
                "6 - 2 = 4 (left: 1 4 6)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                41.0,
                1.002,
                60.0,
                1.0,
                22.0,
                2.001,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.1",
                "2 <- 0.4",
                "3 <- 0.0",
                "4 <- 0.0",
                "5 <- 0.6",
                "6 <- 0.2",
                "7 <- 0.9",
                "8 <- 0.0",
                "9 <- 0.9"
            ]
        },
        "Step 1": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "2 * 2 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "6 - 2 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 / 1 = 2 (left: 2 2 6) || Input: 3 3 5",
                "2 + 2 = 4 (left: 4 6 6) || 4 * 6 = 24 (left: 6 24)",
                "6 / 2 = 3 (left: 3 2 6) || 3 - 2 = 1 (left: 1 6)",
                "6 - 2 = 4 (left: 1 4 6) || 4 / 6 = 0.6666666666666666 (left: 1 0",
                "2 / 1 = 2 (left: 2 2 6) || Input: 2 4 4 6",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                41.0,
                0.002,
                0.003,
                1.002,
                60.0,
                20.002,
                0.003,
                40.0
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- INIT",
                "2 <- 1.6",
                "3 <- 1.6",
                "4 <- INIT",
                "5 <- 0.4",
                "6 <- 1.0",
                "7 <- 1.6",
                "8 <- 1.2",
                "9 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "6 / 2 = 3 (left: 3 2 6) || 3 - 2 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "6 / 2 = 3 (left: 1 2 3)",
                "6 / 2 = 3 (left: 3 2 6) || 3 - 2 = 1 (left: 1 6) || 1 + 6 = 7",
                "6 / 2 = 3 (left: 3 2 6) || 3 - 2 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "2 + 2 = 4 (left: 4 4 6)",
                "6 - 2 = 4 (left: 1 4 6) || 3 * 9 = 27 (left: 9 27)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "6 / 2 = 3 (left: 3 2 6) || 3 - 2 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "6 - 2 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "6 - 2 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 10 + 20 = 30 (left: 30)"
            ],
            "Evaluation": [
                0.001,
                1.002,
                0.003,
                0.002,
                22.0,
                1.002,
                0.003,
                0.001,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.6",
                "2 <- 1.7",
                "3 <- 1.6",
                "4 <- 0.2",
                "5 <- 0.4",
                "6 <- 0.4",
                "7 <- 0.1",
                "8 <- 0.9",
                "9 <- 1.0"
            ]
        },
        "Step 3": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "6 / 2 = 3 (left: 3 2 6) || 3 - 2 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "6 - 2 = 4 (left: 1 4 6) || 4 / 6 = 0.6666666666666666 (left: 1 0 || 5 - 3 = 2 (left: 2)",
                "6 / 2 = 3 (left: 3 2 6) || 3 - 2 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "6 / 2 = 3 (left: 3 2 6) || Input: 5 7 9",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 4 = 1.5 (",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "2 * 2 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                0.001,
                0.003,
                0.003,
                0.002,
                0.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 0.9",
                "2 <- 0.1",
                "3 <- 0.1",
                "4 <- 1.0",
                "5 <- 3.0",
                "6 <- 1.6",
                "7 <- 0.6",
                "8 <- 3.0",
                "9 <- 1.2"
            ]
        },
        "Step 4": {
            "steps": [
                "6 / 2 = 3 (left: 3 2 6) || 3 - 2 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)",
                "2 * 2 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "2 * 2 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 + 1 = 25 (left: 25)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24",
                "6 / 2 = 3 (left: 3 2 6) || 3 - 2 = 1 (left: 1 6) || 1 + 6 = 7",
                "2 + 2 = 4 (left: 4 6 6) || 6 / 4 = 1.5 (left: 1.5 6)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (4 * 1) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 3 + 5 = 8 (left: 7 8)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.002,
                0.001,
                20.001,
                60.0,
                0.003,
                1.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 4.8",
                "1 <- 0.2",
                "2 <- 0.2",
                "3 <- 2.4",
                "4 <- 4.1",
                "5 <- 4.1",
                "6 <- 3.0",
                "7 <- 4.8",
                "8 <- 0.9",
                "9 <- 0.6"
            ]
        },
        "Step 5": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (4 * 1) = 24 || Input: 3 3 8 9\nSteps:\n3 + 9 = 12 (left: 3 8 12)\n12 - 8 = 4 (left: 3 4)\n3 * 4 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: (3 + 9) - (8 - 4) * 2 = 24",
                "6 / 2 = 3 (left: 3 2 6) || 5 * 6 = 30 (",
                "6 / 2 = 3 (left: 3 2 6) || 2 * 6 = 12 (left: 3 12)",
                "2 + 2 = 4 (left: 4 4 6) || 4 / 4 = 1 (left: 1 6)",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (4 * 1) = 24 || Input: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n8 - 4 = 4 (left: 3 4)\n4 * 3 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((3 + 5) - 4) * (3 * 2) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "2 + 2 = 4 (left: 4 6 6) || 4 * 6 = 24 (left: 6 6 24)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                20.002,
                60.0,
                0.002,
                0.003,
                60.0,
                60.0,
                20.002,
                0.002
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 4.5",
                "2 <- 5.2",
                "3 <- 5.7",
                "4 <- 0.1",
                "5 <- 1.7",
                "6 <- 4.5",
                "7 <- 1.7",
                "8 <- 5.6",
                "9 <- 5.7"
            ]
        },
        "Step 6": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24 || ",
                "6 / 2 = 3 (left: 3 2 6) || 2 * 6 = 12 (left: 3 12) || 4 + 7 = 11 (left: 11 10)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (4 * 1) = 24 || Input: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n8 - 4 = 4 (left: 3 4)\n4 * 3 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((3 + 5) - 4) * (3 * 2) = 24 || Input: 2 3 5 9\nSteps:\n3 * 9 = 27 (left: 2 5 27)\n2 + 5 = 7 (left: 7 27)\n27 / 7 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 - 27 = 0 (left: 0)\n0",
                "2 * 2 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "6 - 2 = 4 (left: 1 4 6) || 4 / 6 = 0.6666666666666666 (left: 1 0 || 1 + 0 = 1",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24 || Input: 3 3 4 7\nSteps:\n3 + 7 = 10 (left: 3 4 10)\n10 - 4 = 6 (left: 3 6)\n6 * 3 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((3 + 7) - 4) * 3 + 6 = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 / 6 = 0.6666666666666666 (left: 1 0 || 1 + 0 = 1",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24 || Input: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n4 * 3 = 12 (left: 8 12)\n12 - 8 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\n48 / 2 = 24 (left: 24)\nAnswer: ((3 + 5) * 4) - ",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (4 * 1) = 24 || Input: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n8 - 4 = 4 (left: 3 4)\n4 * 3 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((3 + 5) - 4) * (3 * 2) = 24 || Input: 7 3 4 8\nSteps:\n7 - 3 = 4 (left: 4 4 8)\n4 + 8 = 12 (left: 4 12)\n4 * 12 = 48 (left: 48)\n48 / 2 = 24 (left: 24)\nAnswer: ((7 - 3) + 4) * (4 + 8) / 2 = 24"
            ],
            "Evaluation": [
                0.001,
                40.001,
                0.003,
                60.0,
                0.002,
                0.003,
                60.0,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.6",
                "1 <- 2.4",
                "2 <- 6.8",
                "3 <- 5.8",
                "4 <- 1.6",
                "5 <- 5.3",
                "6 <- 0.0",
                "7 <- 6.6",
                "8 <- 5.3",
                "9 <- 5.0"
            ]
        },
        "Step 7": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24 || Input: 3 3 6 8\nSteps:\n3 * 3 = 9 (left: 6 8 9)\n9 - 6 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (3 * 3) * (9 - 6) = 24",
                "2 + 2 = 4 (left: 4 4 6) || 1 + 3 = ",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24 || Input: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n4 * 3 = 12 (left: 8 12)\n12 - 8 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\n48 / 2 = 24 (left: 24)\nAnswer: ((3 + 5) * 4) -  || (3 * 4) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2) || 1 * 2 = 2 (left: 2)",
                "6 / 2 = 3 (left: 3 2 6) || 3 - 2 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "2 + 2 = 4 (left: 4 4 6) || 4 / 4 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24 || Input: 3 3 4 7\nSteps:\n3 + 7 = 10 (left: 3 4 10)\n10 - 4 = 6 (left: 3 6)\n6 * 3 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((3 + 7) - 4) * 3 + 6 = 24 || Input: 2 3 5 8\nSteps:\n2 * 8 = 16 (left: 3 5 16)\n5 - 3 = 2 (left: 2 16)\n2 * 16 = 32 (left: 32)\n32 - 8 = 24 (left: 24)\nAnswer: ((2 * 8) - (5 - 3)) - 8 = 24",
                "2 + 2 = 4 (left: 4 4 6) || 4 / 4 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (4 * 1) = 24 || Input: 3 3 8 9\nSteps:\n3 + 9 = 12 (left: 3 8 12)\n12 - 8 = 4 (left: 3 4)\n3 * 4 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: (3 + 9) - (8 - 4) * 2 = 24 || Input: 2 3 5 7\nSteps:\n5 * 3 = 15 (left: 2 7 15)\n15 - 7 = 8 (left: 2 8)\n8 * 2 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((5 * 3) - 7) * 2 + 8 = 24"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                0.002,
                0.002,
                0.001,
                60.0,
                60.0,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 7.0",
                "1 <- 7.7",
                "2 <- 5.6",
                "3 <- 6.6",
                "4 <- 5.6",
                "5 <- 6.3",
                "6 <- 6.6",
                "7 <- 7.9",
                "8 <- 7.6",
                "9 <- 5.6"
            ]
        },
        "Step 8": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24 || Input: 3 3 6 8\nSteps:\n3 * 3 = 9 (left: 6 8 9)\n9 - 6 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (3 * 3) * (9 - 6) = 24 || Input: 2 3 4 6\nSteps:\n4 * 6 = 24 (left: 2 3 24)\n3 * 2 = 6 (left: 6 24)\n6 * 24 = 24 (left: 24)\nAnswer: (4 * 6) / (3 * 2) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24 || Input: 3 3 4 7\nSteps:\n3 + 7 = 10 (left: 3 4 10)\n10 - 4 = 6 (left: 3 6)\n6 * 3 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((3 + 7) - 4) * 3 + 6 = 24 || Input: 2 3 5 8\nSteps:\n2 * 8 = 16 (left: 3 5 16)\n5 - 3 = 2 (left: 2 16)\n2 * 16 = 32 (left: 32)\n32 - 8 = 24 (left: 24)\nAnswer: ((2 * 8) - (5 - 3)) - 8 = 24 || Input: 2 4 6 7\nSteps:\n4 * 6 = 24 (left: 2 7 24)\n7 - 2 = 5 (left: 5 24)\n5 * 24 = 120 (left: 120)\n120 / 5 = 24 (left: 24)\nAnswer: ((4 * 6) - (7 - 2)) / 5 = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24 || Input: 3 3 5 5\nSteps:\n5 - 3 = 2 (left: 2 3 5)\n5 + 3 = 8 (left: 2 8)\n8 * 3 = 24 (left: 24)\nAnswer: (5 + 3) * (5 - 3) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24 || Input: 3 3 4 7\nSteps:\n3 + 7 = 10 (left: 3 4 10)\n10 - 4 = 6 (left: 3 6)\n6 * 3 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((3 + 7) - 4) * 3 + 6 = 24 || Input: 2 3 5 6\nSteps:\n5 + 6 = 11 (left: 2 3 11)\n11 - 3 = 8 (left: 2 8)\n8 * 2 = 16 (left: 16)\n16 * 3 = 48 (left: 48)\n48 / 2 = 24 (left: 24)\nAnswer: ((5 + 6) - 3) * 2 *",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24 || Input: 3 3 4 9\nSteps:\n3 * 9 = 27 (left: 3 4 27)\n3 + 4 = 7 (left: 7 27)\n27 / 7 = 3.857 (left: 3.857)\nAnswer: (3 * 9) / (4 - 3) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (4 * 1) = 24 || Input: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n8 - 4 = 4 (left: 3 4)\n4 * 3 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((3 + 5) - 4) * (3 * 2) = 24 || Input: 2 3 5 9\nSteps:\n3 * 9 = 27 (left: 2 5 27)\n2 + 5 = 7 (left: 7 27)\n27 / 7 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 - 27 = 0 (left: 0)\n0 || Answer: ((3 * 9) - 27) * (2 + 5) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24 || Input: 3 3 4 7\nSteps:\n3 + 7 = 10 (left: 3 4 10)\n10 - 4 = 6 (left: 3 6)\n6 * 3 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((3 + 7) - 4) * 3 + 6 = 24 || Input: 2 3 5 7\nSteps:\n5 * 7 = 35 (left: 2 3 35)\n3 + 35 = 38 (left: 2 38)\n38 - 2 = 36 (left: 36)\n36 / 3 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: (((5 * 7) + 3) - 2)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (4 * 1) = 24 || Input: 3 3 8 9\nSteps:\n3 + 9 = 12 (left: 3 8 12)\n12 - 8 = 4 (left: 3 4)\n3 * 4 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: (3 + 9) - (8 - 4) * 2 = 24 || Input: 2 3 5 7\nSteps:\n5 * 3 = 15 (left: 2 7 15)\n15 - 7 = 8 (left: 2 8)\n8 * 2 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((5 * 3) - 7) * 2 + 8 = 24 || Input: 2 4 6 7\nSteps:\n6 + 7 = 13 (left: 2 4 13)\n4 * 2 = 8 (left: 8 13)\n13 - 8 = 5 (left: 5 13)\n5 * 4 = 20 (left: 20 13)\n20 - 13 = 7 (left: 7)\n7 * 4 = 28 (left: 28",
                "2 / 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24 || Input: 3 3 6 6\nSteps:\n3 * 6 = 18 (left: 3 6 18)\n3 * 6 = 18 (left: 18 18)\n18 - 18 = 0 (left: 0)\n0 + 24 = 24 (left: 24)\nAnswer: ((3 * 6) - (3 * 6)) + 24 = 24"
            ],
            "Evaluation": [
                60.0,
                40.0,
                40.0,
                60.0,
                60.0,
                0.003,
                60.0,
                40.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 7.9",
                "1 <- 5.6",
                "2 <- 8.0",
                "3 <- 7.0",
                "4 <- 4.1",
                "5 <- 1.2",
                "6 <- 6.8",
                "7 <- 8.2",
                "8 <- 8.4",
                "9 <- 6.1"
            ]
        },
        "Step 9": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (4 * 1) = 24 || Input: 3 3 8 9\nSteps:\n3 + 9 = 12 (left: 3 8 12)\n12 - 8 = 4 (left: 3 4)\n3 * 4 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: (3 + 9) - (8 - 4) * 2 = 24 || Input: 2 3 5 7\nSteps:\n5 * 3 = 15 (left: 2 7 15)\n15 - 7 = 8 (left: 2 8)\n8 * 2 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((5 * 3) - 7) * 2 + 8 = 24 || Input: 1 2 3 6\nSteps:\n3 * 6 = 18 (left: 1 2 18)\n18 - 2 = 16 (left: 1 16)\n16 + 1 = 17 (left: 17)\n17 + 2 = 19 (left: 19)\n19 + 6 = 25 (left: 25)\n25 - 6 = 19 (left: 19)\n19 - ",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24 || Input: 3 3 6 8\nSteps:\n3 * 3 = 9 (left: 6 8 9)\n9 - 6 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (3 * 3) * (9 - 6) = 24 || Input: 2 3 4 6\nSteps:\n4 * 6 = 24 (left: 2 3 24)\n3 * 2 = 6 (left: 6 24)\n6 * 24 = 24 (left: 24)\nAnswer: (4 * 6) / (3 * 2) = 24 || Input: 5 5 6 7\nSteps:\n5 * 6 = 30 (left: 5 7 30)\n5 - 7 = -2 (left: -2 30)\n-2 * 30 = -60 (left: -60)\nAnswer: (5 * 6) - (5 + 7) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24 || Input: 3 3 6 8\nSteps:\n3 * 3 = 9 (left: 6 8 9)\n9 - 6 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (3 * 3) * (9 - 6) = 24 || Input: 2 3 6 8\nSteps:\n6 / 3 = 2 (left: 2 8 2)\n2 * 8 = 16 (left: 16 2)\n16 - 2 = 14 (left: 14)\n14 + 8 = 22 (left: 22)\n22 + 2 = 24 (left: 24)\nAnswer: (((2 / 3) * 8) - 2)",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "6 - 2 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 3 + 9 = 12 (left: 12)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24 || Input: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n4 * 3 = 12 (left: 8 12)\n12 - 8 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\n48 / 2 = 24 (left: 24)\nAnswer: ((3 + 5) * 4) -  || (4 * 12) / 2 = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24 || Input: 3 3 5 5\nSteps:\n5 - 3 = 2 (left: 2 3 5)\n5 + 3 = 8 (left: 2 8)\n8 * 3 = 24 (left: 24)\nAnswer: (5 + 3) * (5 - 3) = 24 || Input: 2 3 6 8\nSteps:\n6 + 8 = 14 (left: 2 3 14)\n3 * 2 = 6 (left: 6 14)\n6 * 14 = 84 (left: 84)\nAnswer: 2 * ((6 + 8) / (3 * 2)) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24 || Input: 3 3 4 9\nSteps:\n3 * 9 = 27 (left: 3 4 27)\n3 + 4 = 7 (left: 7 27)\n27 / 7 = 3.857 (left: 3.857)\nAnswer: (3 * 9) / (4 - 3) = 24 || Input: 2 3 4 6\nSteps:\n4 * 6 = 24 (left: 2 3 24)\n3 - 2 = 1 (left: 1 24)\n1 * 24 = 24 (left: 24)\nAnswer: (3 * 4) * (6 - 2) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24 ||  || Input: 3 3 8 8\nSteps:\n3 * 8 = 24 (left: 3 8 24)\n3 * 8 = 24 (left: 24)\nAnswer: (3 * 8) * (3 + 8) = 24"
            ]
        },
        "Input": "1 2 2 6",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "7": {
        "puzzle": "1 1 10 12",
        "Step 0": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 10 12)",
                "1 + 10 = 11 (left: 11 1 12)",
                "1 * 10 = 10 (left: 10 1 12)",
                "10 + 1 = 11 (left: 1 11 12)",
                "1 + 10 = 11 (left: 11 11 12)",
                "1 + 10 = 11 (left: 11 10 12)",
                "10 + 1 = 11 (left: 1 11 12)",
                "12 - 1 = 11 (left: 1 10 ",
                "12 - 10 = 2 (left: 1 2 12)"
            ],
            "Evaluation": [
                41.0,
                1.002,
                41.0,
                1.001,
                21.001,
                0.003,
                3.0,
                21.001,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 0.2",
                "2 <- 0.4",
                "3 <- 0.0",
                "4 <- 0.8",
                "5 <- INIT",
                "6 <- 0.8",
                "7 <- 0.9",
                "8 <- 0.9",
                "9 <- 0.9"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 1 = 11 (left: 1 10  || 10 / 1 = 10 (left: 10)",
                "1 + 10 = 11 (left: 11 1 12) || 11 / 1 = 11 (left: 11 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "10 + 1 = 11 (left: 1 11 12) || 12 / 1 = 12 (left: 11 12)",
                "12 - 1 = 11 (left: 1 10  || 1 * 10 = 10 (left: 10)",
                "1 / 1 = 1 (left: 1 10 12)",
                "12 - 1 = 11 (left: 1 10  || 10 - 10 = 0 (left: 0)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 1 = 11 (left: 2 11)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.0,
                0.003,
                0.002,
                1.001,
                20.002,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 1.8",
                "2 <- INIT",
                "3 <- 0.9",
                "4 <- 0.8",
                "5 <- 0.4",
                "6 <- 1.8",
                "7 <- 0.0",
                "8 <- 0.4",
                "9 <- 1.8"
            ]
        },
        "Step 2": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 5 / 3 = 1.66667 (left: 1.66667 9",
                "1 - 1 = 0 (left: 0 10 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "12 - 1 = 11 (left: 1 10  || 5 + 5 = 10 (left: 10)",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "10 + 1 = 11 (left: 1 11 12) || 12 / 1 = 12 (left: 1 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.002,
                2.0,
                1.002,
                40.001,
                0.003,
                0.003,
                0.002,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 0.2",
                "2 <- 2.3",
                "3 <- 2.2",
                "4 <- 2.3",
                "5 <- 0.8",
                "6 <- 1.8",
                "7 <- 1.8",
                "8 <- 2.3",
                "9 <- 1.8"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "1 + 10 = 11 (left: 11 1 12) || 11 - 1 = 10 (left: 10 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 * 1 = 6 (left: 6)",
                "1 - 1 = 0 (left: 0 10 12) || 0 * 10 = 0 (left: 0 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 1 = 11 (left: 1 10  || 10 / 1 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 / 10 = 0.1 (left: 0.1)"
            ],
            "Evaluation": [
                0.0,
                1.002,
                0.003,
                20.0,
                0.003,
                0.003,
                0.002,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 3.3",
                "2 <- 1.8",
                "3 <- 2.3",
                "4 <- 0.4",
                "5 <- 0.8",
                "6 <- 1.9",
                "7 <- INIT",
                "8 <- 1.8",
                "9 <- 2.3"
            ]
        },
        "Step 4": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "1 - 1 = 0 (left: 0 10 12) || 0 * 10 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "10 + 1 = 11 (left: 1 11 12) || 11 * 1 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 10  || 1 * 10 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "12 / 10 = 1 (left: 1 1 ",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.001,
                0.002,
                0.003,
                0.001,
                0.002,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 0.0",
                "2 <- 1.8",
                "3 <- 0.9",
                "4 <- 0.8",
                "5 <- 0.9",
                "6 <- 0.8",
                "7 <- 0.8",
                "8 <- 0.9",
                "9 <- 0.0"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "10 + 1 = 11 (left: 1 11 12) || 12 - 1 = 11 (left: 11 11)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "12 - 1 = 11 (left: 1 10  || 10 * 1 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "12 - 1 = 11 (left: 1 10  || 10 - 1 = 9 (left: 9)",
                "12 - 1 = 11 (left: 1 10  || 10 - 1 = 9 (left: 9)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                60.0,
                0.002,
                41.0,
                0.001,
                0.001,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 0.9",
                "2 <- 0.7",
                "3 <- 5.8",
                "4 <- 0.8",
                "5 <- 0.0",
                "6 <- 0.9",
                "7 <- 5.3",
                "8 <- 0.0",
                "9 <- 0.9"
            ]
        },
        "Step 6": {
            "steps": [
                "1 - 1 = 0 (left: 0 10 12) || 0 * 10 = 0 (left: 0 12) || 12 / 0 = undefined (cannot divide by 0)",
                "12 - 10 = 2 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 1 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 1 = 11 (left: 1 10  || 5 + 5 = 10 (left: 10)",
                "10 + 1 = 11 (left: 1 11 12) || 12 / 1 = 12 (left:",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.001,
                0.002,
                0.003,
                21.0,
                60.0,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 5.5",
                "2 <- 5.3",
                "3 <- 5.5",
                "4 <- 5.8",
                "5 <- 6.1",
                "6 <- 6.6",
                "7 <- 1.6",
                "8 <- 1.9",
                "9 <- 6.6"
            ]
        },
        "Step 7": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || Input: 3 6 9",
                "12 - 1 = 11 (left: 1 10  || 10 - 10 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 5.3",
                "2 <- 0.2",
                "3 <- 5.3",
                "4 <- 3.3",
                "5 <- 6.9",
                "6 <- 6.1",
                "7 <- 1.9",
                "8 <- 5.8",
                "9 <- 5.3"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 + 10 = 11 (left: 11 1 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 - 1 = 0 (left: 0 10 12) || 0 * 10 = 0 (left: 0 12) || 12 / 0 = Undefined (left: 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "12 - 10 = 2 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.003,
                0.001,
                0.003,
                0.003,
                20.001,
                0.002,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 6.6",
                "1 <- 6.5",
                "2 <- 6.1",
                "3 <- 0.8",
                "4 <- 8.6",
                "5 <- 2.3",
                "6 <- 6.9",
                "7 <- 6.6",
                "8 <- 0.2",
                "9 <- 6.6"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "10 + 1 = 11 (left: 1 11 12) || 12 / 1 = 12 (left: || 12 / 12 = 1 (left: 1)",
                "12 - 10 = 2 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 - 1 = 11 (left: 1 10  || 10 / 1 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10) || 10 - 8 = 2 (left: 2)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 + 1 = 11 (left: 11)",
                "1 + 10 = 11 (left: 11 1 12) || 11 - 1 = 10 (left: 10 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ]
        },
        "Input": "1 1 10 12",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            }
        ]
    },
    "8": {
        "puzzle": "2 2 10 10",
        "Step 0": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10)",
                "2 * 2 = 4 (left: 4 10 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 - 2 = 8 (left: 2 10 8)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 10 8)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                2.001,
                1.002,
                1.002,
                0.003,
                1.002,
                1.002,
                1.002,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.9",
                "2 <- 0.9",
                "3 <- 0.1",
                "4 <- 0.2",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 0.9",
                "8 <- INIT",
                "9 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10)",
                "10 - 2 = 8 (left: 2 8 10) || 10 - 2 = 8 (left: 8 10)",
                "10 - 2 = 8 (left: 2 8 10) || 10 - 2 = 8 (left: 8 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5)",
                "10 - 2 = 8 (left: 2 10 8)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 - 2 = 8 (left: 2 8 10) || 10 / 2 = 5 (left: 5 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 / 2 = 5 (left: 5 10)"
            ],
            "Evaluation": [
                20.002,
                1.001,
                20.0,
                2.001,
                60.0,
                1.002,
                21.001,
                0.001,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 1.4",
                "2 <- 0.2",
                "3 <- 1.6",
                "4 <- 1.4",
                "5 <- INIT",
                "6 <- 1.6",
                "7 <- 0.1",
                "8 <- 1.2",
                "9 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "10 - 2 = 8 (left: 2 8 10) || 8 / 2 = 4 (left: 4 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)",
                "10 / 2 = 5 (left: 2 5 10) || Input",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 2 8 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 8 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 =",
                "10 - 2 = 8 (left: 2 8 10) || 10 - 2 = 8 (left: 8 10) || 8 * 10 = 80 (left: 80)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)"
            ],
            "Evaluation": [
                40.0,
                0.002,
                0.003,
                1.002,
                0.001,
                2.001,
                21.001,
                0.003,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- INIT",
                "2 <- 1.4",
                "3 <- 1.0",
                "4 <- 1.2",
                "5 <- 1.4",
                "6 <- 2.0",
                "7 <- 1.4",
                "8 <- 2.6",
                "9 <- 1.6"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 - 2 = 3 (left: 3)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 - 2 = 8 (left: 2 8 10) || 10 - 2 = 8 (left: 8 10) || 18 + 2 = 20 (left: 20)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)",
                "10 - 2 = 8 (left: 2 8 10) || 8 / 2 = 4 (left: 4 10) || 10 - 4 = 6 (left: 6 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 2 * 5 = 10 (left: 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 8 10) || 10 - 8 = 2 (left: 2)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5)"
            ],
            "Evaluation": [
                2.001,
                0.003,
                0.0,
                3.0,
                0.003,
                0.001,
                0.003,
                0.003,
                0.001,
                40.0
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 1.6",
                "2 <- 2.0",
                "3 <- 1.4",
                "4 <- 1.0",
                "5 <- 3.9",
                "6 <- 1.0",
                "7 <- 3.9",
                "8 <- 1.0",
                "9 <- 3.9"
            ]
        },
        "Step 4": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10) || 2 * 5 = 10 (left: 10 10)",
                "10 / 2 = 5 (left: 2 5 10) || 5 + 10 = 15 (left: 2 15)",
                "10 - 2 = 8 (left: 2 8 10) || 8 / 2 = 4 (left: 4 10) || 3 + 9 = 12 (left:",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 2 * 5 = 10 (left: 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 2 * 5 = 10 (left: 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                1.001,
                0.003,
                0.002,
                0.0,
                1.001,
                0.003,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 3.9",
                "1 <- 2.0",
                "2 <- 4.0",
                "3 <- 3.9",
                "4 <- 4.0",
                "5 <- 1.0",
                "6 <- 3.9",
                "7 <- 2.6",
                "8 <- 2.0",
                "9 <- 4.0"
            ]
        },
        "Step 5": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)",
                "10 - 2 = 8 (left: 2 8 10) || 8 / 2 = 4 (left: 4 10) || 10 - 4 = 6 (left: 6)",
                "10 / 2 = 5 (left: 2 5 10) || 2 * 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 2 * 5 = 10 (left: 10)",
                "10 / 2 = 5 (left: 2 5 10) || 2 * 5 = 10 (left: 10 10) || 10 + 10 = 20",
                "2 * 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 10 40)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || Input: 3 9",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 8 10) || 8 * 10 = 80 (left: 80)",
                "10 - 2 = 8 (left: 2 8 10) || 8 / 2 = 4 (left: 4 10) || Input: 3 9 27",
                "10 / 2 = 5 (left: 2 5 10) || 2 * 5 = 10 (left: 10 10) || 10 / 10 = 1 (left: 1)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 3.9",
                "1 <- 1.6",
                "2 <- 1.4",
                "3 <- 2.6",
                "4 <- 4.0",
                "5 <- 3.9",
                "6 <- 1.6",
                "7 <- 1.4",
                "8 <- 1.2",
                "9 <- 3.9"
            ]
        },
        "Step 6": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)",
                "10 / 2 = 5 (left: 2 5 10) || 5 + 10 = 15 (left: 2 15)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 8 10) || 8 * 10 = 80 (left: 80)",
                "10 / 2 = 5 (left: 2 5 10) || 2 * 5 = 10 (left: 10 10) || 10 + 10 = 20",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 3 + 9 = 12 (left: 12)",
                "10 / 2 = 5 (left: 2 5 10) || 10 / 2 = 5 (left: 5 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 2 * 5 = 10 (left: 10)",
                "10 - 2 = 8 (left: 2 8 10) || 10 - 2 = 8 (left: 8 10) || 10 - 8 = 2 (left: 2)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.001,
                0.003,
                0.003,
                0.002,
                0.002,
                0.002,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 3.9",
                "2 <- 2.0",
                "3 <- 2.0",
                "4 <- 1.4",
                "5 <- 4.0",
                "6 <- 0.6",
                "7 <- 3.9",
                "8 <- 3.0",
                "9 <- 2.6"
            ]
        },
        "Step 7": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10) || 2 * 5 = 10 (left: 10 10) || 10 * 10 = 100 (left: 100) ",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)",
                "10 - 2 = 8 (left: 2 8 10) || 8 / 2 = 4 (left: 4 10) || 5 - 3 = 2 (left: 2)",
                "10 - 2 = 8 (left: 2 8 10) || 8 / 2 = 4 (left: 4 10) || Input: 3 9 27",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 - 2 = 3 (left: 3)",
                "10 / 2 = 5 (left: 2 5 10) || 2 * 5 = 10 (left: 10 10) || 10 / 10 = 1 (left: 1)",
                "10 - 2 = 8 (left: 2 10 8) || 2 * 10 = 20 (left: 8 20)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || Input: 3 9",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 10 - 2.5 = 7.5 (left: 7.5 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 8 10) || 4 + 8 = 12 (left: 12 14)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.002,
                0.003,
                0.001,
                0.003,
                1.002,
                0.003,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 1.4",
                "2 <- 3.9",
                "3 <- 1.0",
                "4 <- 3.9",
                "5 <- 1.4",
                "6 <- 3.9",
                "7 <- 1.6",
                "8 <- 1.4",
                "9 <- 3.9"
            ]
        },
        "Step 8": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10) || 2 * 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 2 + 5 = 7",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 6 / 3 = 2 (left: 2 9)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 3 + 9 = 12 (left: 12)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || Input: 3 9",
                "10 / 2 = 5 (left: 2 5 10) || Possible next steps:",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 2 * 5 = 10 (left: 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 7 + 9 = 16 (left: 16)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                1.002,
                0.002,
                0.002,
                0.003,
                0.003,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 3.9",
                "1 <- 2.0",
                "2 <- 2.6",
                "3 <- 3.9",
                "4 <- 4.0",
                "5 <- 1.6",
                "6 <- 2.6",
                "7 <- 2.0",
                "8 <- 1.0",
                "9 <- 2.6"
            ]
        },
        "Step 9": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)",
                "10 - 2 = 8 (left: 2 8 10) || 8 / 2 = 4 (left: 4 10) || 10 / 4 = 2.5 (left: 2.5 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 8 10) || 8 / 10 = 0.8 (left: 0.8)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 2 * 5 = 10 (left: 10)",
                "10 / 2 = 5 (left: 2 5 10) || 2 * 5 = 10 (left: 10 10) || 10 / 10 = 1 (left: 1)",
                "10 / 2 = 5 (left: 2 5 10) || Input: 3 9 12",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 8 10) || 8 * 10 = 80 (left: 80)",
                "10 - 2 = 8 (left: 2 8 10) || 8 / 2 = 4 (left: 4 10) || Input: 3 9 27",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 8 10) || 4 + 8 = 12 (left: 12 16)"
            ]
        },
        "Input": "2 2 10 10",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "9": {
        "puzzle": "1 1 1 12",
        "Step 0": {
            "steps": [
                "12 - 1 = 11 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1 12)",
                "1 * 1 = 1 (left: 1 1 12)",
                "12 - 1 = 11 (left: 1 1 11)",
                "1 * 12 = 12 (left: 1 1 12)",
                "1 / 1 = 1 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "12 - 1 = 11 (left: 1 1 11)",
                "12 - 1 = 11 (left: 1 1 11)",
                "12 - 1 = 11 (left: 1 1 11)"
            ],
            "Evaluation": [
                1.002,
                60.0,
                41.0,
                1.002,
                41.0,
                21.001,
                21.001,
                1.002,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- INIT",
                "2 <- 0.2",
                "3 <- 0.5",
                "4 <- 0.5",
                "5 <- INIT",
                "6 <- 0.2",
                "7 <- 0.1",
                "8 <- INIT",
                "9 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 / 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "1 / 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "12 - 1 = 11 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.003,
                60.0,
                0.002,
                60.0,
                60.0,
                40.0,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 1.5",
                "2 <- 1.6",
                "3 <- 0.4",
                "4 <- 1.6",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- 0.4",
                "9 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 12 = 12 (left: 1 1 12) || 1 / 1 = 1 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12)",
                "12 - 1 = 11 (left: 1 1 11)",
                "1 * 12 = 12 (left: 1 1 ",
                "1 * 12 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12) || 3 + 3 = 6 (left: 6 6)"
            ],
            "Evaluation": [
                0.001,
                1.002,
                0.003,
                2.0,
                0.003,
                21.001,
                0.003,
                0.003,
                40.001,
                20.002
            ],
            "Resampling": [
                "0 <- 2.8",
                "1 <- 1.1",
                "2 <- 1.1",
                "3 <- 1.3",
                "4 <- 2.8",
                "5 <- 0.6",
                "6 <- 1.3",
                "7 <- 1.1",
                "8 <- 2.9",
                "9 <- 0.4"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 12 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 + 11 = 12",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "1 / 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 12 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left:",
                "1 / 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 3 + 3 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "1 * 12 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)"
            ],
            "Evaluation": [
                0.003,
                20.0,
                21.0,
                0.001,
                0.002,
                40.001,
                0.001,
                0.003,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 0.4",
                "2 <- 0.4",
                "3 <- 1.5",
                "4 <- 2.9",
                "5 <- 3.2",
                "6 <- 1.5",
                "7 <- 0.3",
                "8 <- 0.2",
                "9 <- 1.1"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 * 12 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "1 * 12 = 12 (left: 1 1 12) || 12 + 1 = 13 (left: 1 13)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 3 + 3 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "12 / 1 = 12 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12) || 1 * 12 = 12 (left: 12)",
                "12 / 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12)",
                "12 - 1 = 11 (left: 1 1 11) || 1 - 1 = 0 (left: 0 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)"
            ],
            "Evaluation": [
                0.002,
                20.0,
                1.001,
                21.0,
                0.002,
                0.003,
                40.0,
                0.001,
                40.0,
                0.002
            ],
            "Resampling": [
                "0 <- 2.8",
                "1 <- 4.8",
                "2 <- 4.6",
                "3 <- 4.1",
                "4 <- 1.3",
                "5 <- 1.7",
                "6 <- 3.1",
                "7 <- 4.8",
                "8 <- 1.3",
                "9 <- 4.6"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 12 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 0 + 12 = 12",
                "1 * 12 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 / 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 / 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                0.001,
                0.003,
                0.002,
                0.003,
                0.001,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 1.5",
                "2 <- 3.2",
                "3 <- 4.1",
                "4 <- 0.2",
                "5 <- 4.6",
                "6 <- 4.8",
                "7 <- 4.6",
                "8 <- 1.6",
                "9 <- 0.6"
            ]
        },
        "Step 6": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12) || 12 - 1 = 11 (left: 11)",
                "1 * 12 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 * 0 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 / 0 = undefined (left: 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 1 / 1 = 1 (left: 1 12)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                0.003,
                1.002,
                0.003,
                0.001,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 4.6",
                "2 <- 0.2",
                "3 <- 0.4",
                "4 <- 4.1",
                "5 <- 1.7",
                "6 <- 3.2",
                "7 <- 4.8",
                "8 <- 4.3",
                "9 <- 2.8"
            ]
        },
        "Step 7": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 + 11 = 12",
                "12 / 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 * 12 = 12 (left: 1 1 12) || 1 / 1 = 1 (left: 1 12)",
                "1 * 12 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12) || 1 * 12 = 12 (left: 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12) || 12 / 1 = 12 (left: 12)",
                "1 * 12 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                1.002,
                21.001,
                0.003,
                0.001,
                0.002,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.4",
                "2 <- 0.1",
                "3 <- 2.5",
                "4 <- 1.5",
                "5 <- 4.1",
                "6 <- 1.5",
                "7 <- 4.8",
                "8 <- 3.5",
                "9 <- 1.7"
            ]
        },
        "Step 8": {
            "steps": [
                "1 * 12 = 12 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "1 * 12 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 * 12 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 3 + 5 = 8 (left: 7 8)",
                "12 / 1 = 12 (left: 1 1 12) || 1 / 1 = 1 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 + 11 = 12",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: || 12 * 1 = 12 (left: 1 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                1.0,
                0.002,
                0.001,
                60.0,
                0.002,
                21.001,
                1.002,
                0.003,
                21.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 8.3",
                "2 <- INIT",
                "3 <- 8.3",
                "4 <- 3.5",
                "5 <- 4.6",
                "6 <- 0.1",
                "7 <- 8.3",
                "8 <- 4.8",
                "9 <- 4.6"
            ]
        },
        "Step 9": {
            "steps": [
                "1 / 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: || 12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 * 0 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 + 11 = 12",
                "12 / 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)"
            ]
        },
        "Input": "1 1 1 12",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            }
        ]
    }
}