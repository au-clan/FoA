{
    "input": "1 1 2 8",
    "step_1": {
        "steps": [
            "2 * 8 = 16 (left: 1 1 16)",
            "1 * 2 = 2 (left: 2 8 1)",
            "2 * 8 = 16 (left: 1 1 16)",
            "2 * 8 = 16 (left: 1 1 16)",
            "2 * 8 = 16 (left: 1 1 16)"
        ],
        "values": [
            22.0,
            1.002,
            20.002,
            2.001,
            2.001
        ],
        "resampled": [
            "0 <- 2",
            "1 <- 0",
            "2 <- 2",
            "3 <- 0",
            "4 <- 0"
        ],
        "resampled_steps": [
            "2 * 8 = 16 (left: 1 1 16)",
            "2 * 8 = 16 (left: 1 1 16)",
            "2 * 8 = 16 (left: 1 1 16)",
            "2 * 8 = 16 (left: 1 1 16)",
            "2 * 8 = 16 (left: 1 1 16)"
        ]
    },
    "step_2": {
        "steps": [
            "2 * 8 = 16 (left: 1 1 16)\n1 * 16 = 16 (left: 1 16)",
            "2 * 8 = 16 (left: 1 1 16)\n1 * 16 = 16 (left: 1 16)",
            "2 * 8 = 16 (left: 1 1 16)\n1 * 16 = 16 (left: 1 16)",
            "2 * 8 = 16 (left: 1 1 16)\n1 * 16 = 16 (left: 1 16)",
            "2 * 8 = 16 (left: 1 1 16)\n1 * 16 = 16 (left: 1 16)"
        ],
        "values": [
            1.002,
            1.002,
            0.003,
            0.003,
            0.002
        ],
        "resampled": [
            "0 <- 0",
            "1 <- 1",
            "2 <- 1",
            "3 <- 0",
            "4 <- 1"
        ],
        "resampled_steps": [
            "2 * 8 = 16 (left: 1 1 16)\n1 * 16 = 16 (left: 1 16)",
            "2 * 8 = 16 (left: 1 1 16)\n1 * 16 = 16 (left: 1 16)",
            "2 * 8 = 16 (left: 1 1 16)\n1 * 16 = 16 (left: 1 16)",
            "2 * 8 = 16 (left: 1 1 16)\n1 * 16 = 16 (left: 1 16)",
            "2 * 8 = 16 (left: 1 1 16)\n1 * 16 = 16 (left: 1 16)"
        ]
    },
    "step_3": {
        "steps": [
            "2 * 8 = 16 (left: 1 1 16)\n1 * 16 = 16 (left: 1 16)\n16 + 1 = 17 (left: 17)",
            "2 * 8 = 16 (left: 1 1 16)\n1 * 16 = 16 (left: 1 16)\n1 * 16 = 16 (left: 16)",
            "2 * 8 = 16 (left: 1 1 16)\n1 * 16 = 16 (left: 1 16)\n16 + 1 = 17 (left: 17)",
            "2 * 8 = 16 (left: 1 1 16)\n1 * 16 = 16 (left: 1 16)\n1 * 16 = 16 (left: 1 16)",
            "2 * 8 = 16 (left: 1 1 16)\n1 * 16 = 16 (left: 1 16)\n1 * 16 = 16 (left: 1 16)"
        ],
        "values": [
            0.003,
            0.002,
            0.003,
            0.003,
            1.001
        ],
        "resampled": [
            "0 <- 4",
            "1 <- 4",
            "2 <- 4",
            "3 <- 4",
            "4 <- 4"
        ],
        "resampled_steps": [
            "2 * 8 = 16 (left: 1 1 16)\n1 * 16 = 16 (left: 1 16)\n1 * 16 = 16 (left: 1 16)",
            "2 * 8 = 16 (left: 1 1 16)\n1 * 16 = 16 (left: 1 16)\n1 * 16 = 16 (left: 1 16)",
            "2 * 8 = 16 (left: 1 1 16)\n1 * 16 = 16 (left: 1 16)\n1 * 16 = 16 (left: 1 16)",
            "2 * 8 = 16 (left: 1 1 16)\n1 * 16 = 16 (left: 1 16)\n1 * 16 = 16 (left: 1 16)",
            "2 * 8 = 16 (left: 1 1 16)\n1 * 16 = 16 (left: 1 16)\n1 * 16 = 16 (left: 1 16)"
        ]
    },
    "step_4": {
        "steps": [
            "2 * 8 = 16 (left: 1 1 16)\n1 * 16 = 16 (left: 1 16)\n1 * 16 = 16 (left: 1 16)\n16 + 1 = 17 (left: 17)",
            "2 * 8 = 16 (left: 1 1 16)\n1 * 16 = 16 (left: 1 16)\n1 * 16 = 16 (left: 1 16)\n16 + 1 = 17 (left: 17)",
            "2 * 8 = 16 (left: 1 1 16)\n1 * 16 = 16 (left: 1 16)\n1 * 16 = 16 (left: 1 16)\n16 + 1 = 17 (left: 17)",
            "2 * 8 = 16 (left: 1 1 16)\n1 * 16 = 16 (left: 1 16)\n1 * 16 = 16 (left: 1 16)\n16 + 1 = 17 (left: 17)",
            "2 * 8 = 16 (left: 1 1 16)\n1 * 16 = 16 (left: 1 16)\n1 * 16 = 16 (left: 1 16)\n16 + 1 = 17 (left: 17)"
        ],
        "values": [
            0.002,
            0.003,
            0.003,
            0.002,
            0.003
        ]
    },
    "best_agent": {
        "idx": 1,
        "steps": "2 * 8 = 16 (left: 1 1 16)\n1 * 16 = 16 (left: 1 16)\n1 * 16 = 16 (left: 1 16)\n16 + 1 = 17 (left: 17)"
    }
}