{
    "0": {
        "puzzle": "1 1 4 6",
        "Step 0": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6)",
                "4 + 1 = 5 (left: 1 5 6)",
                "6 - 4 = 2 (left: 1 2 6)",
                "6 - 4 = 2 (left: 1 2 6)",
                "4 - 1 = 3 (left: 1 3 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.0,
                60.0,
                0.003,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.1",
                "2 <- 0.1",
                "3 <- 0.0",
                "4 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "4 + 1 = 5 (left: 1 5 6) || 1 * 5 = 5 (left: 5 6)",
                "4 + 1 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                20.002,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.3",
                "2 <- 1.4",
                "3 <- 1.4",
                "4 <- 0.0"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 - 6 = -2 (left: -2)",
                "1 * 1 = 1 (left: 1 4 6) || 4 - 1 = 3 (left: 3 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                60.0,
                0.001,
                0.002,
                1.001
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 0.1",
                "3 <- 1.4",
                "4 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * 1) * (4 * 6) = 24",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 1 * (1 * 4 * 6) = 24",
                "4 + 1 = 5 (left: 1 5 6) || 1 + 5 = 6 (left: 6 6)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5 6)"
            ]
        },
        "Input": "1 1 4 6",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1": {
        "puzzle": "1 1 11 11",
        "Step 0": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11)",
                "1 * 1 = 1 (left: 1 11 11)",
                "11 - 1 = 10 (left: 1 10 11)",
                "11 / 1 = 11 (left: 1 11 ",
                "1 - 1 = 0 (left: 0 11 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                1.002,
                1.002,
                40.0,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.3",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11)",
                "11 / 1 = 11 (left: 1 11  || 1 + 11 = 12 (left: 12)",
                "11 - 1 = 10 (left: 1 10 11)",
                "1 + 1 = 2 (left: 2 11 11)",
                "11 - 1 = 10 (left: 1 10 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                1.002,
                20.002,
                1.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- INIT",
                "2 <- 0.3",
                "3 <- 1.2",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "11 / 1 = 11 (left: 1 11  || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 11 11)",
                "11 / 1 = 11 (left: 1 11  || 9 - 3 = 6 (left: 3)",
                "11 - 1 = 10 (left: 1 10 11) || 1 * 10 = 10 (left: 10 11)",
                "1 + 1 = 2 (left: 2 11 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.003,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.3",
                "2 <- 0.3",
                "3 <- 1.3",
                "4 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "11 / 1 = 11 (left: 1 11 ",
                "1 + 1 = 2 (left: 2 11 11) || 11 - 2 = 9 (left: 9 11)",
                "11 / 1 = 11 (left: 1 11  || 11 - 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 11 11) || Input: 5 5 10",
                "1 + 1 = 2 (left: 2 11 11) || 11 / 2 = 5.5 (left: 5.5 11 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                2.001,
                0.003,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 0.3",
                "2 <- 3.4",
                "3 <- 1.3",
                "4 <- 1.3"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 11) || 11 / 2 = 5.5 (left: 5.5 11 11) || 11 / 5.5 = 2 (left: 2 11)",
                "11 / 1 = 11 (left: 1 11  || 1 * 11 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 11 11) || 11 / 2 = 5.5 (left: 5.5 11 11) || Possible next steps:",
                "1 + 1 = 2 (left: 2 11 11) || 11 - 2 = 9 (left: 9 11 11)",
                "1 + 1 = 2 (left: 2 11 11) || 11 - 2 = 9 (left: 9 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                2.001,
                1.001
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 1.3",
                "2 <- 0.3",
                "3 <- 3.4",
                "4 <- INIT"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 11) || 11 - 2 = 9 (left: 9 11 11) || 11 - 11 = 0 (left: 9 0 11)",
                "1 + 1 = 2 (left: 2 11 11) || 11 - 2 = 9 (left: 9 11 11)",
                "11 / 1 = 11 (left: 1 11  || 11 - 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 11 11) || 11 / 2 = 5.5 (left: 5.5 11 11) || 5.5 + 11 = 16.5 (left: 11 16.5)",
                "1 + 1 = 2 (left: 2 11 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                1.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 0.3",
                "2 <- 0.2",
                "3 <- 0.3",
                "4 <- INIT"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 11) || 11 - 2 = 9 (left: 9 11 11) || Input: 4 6 9",
                "11 / 1 = 11 (left: 1 11  || 1 + 11 = 12 (left: 12)",
                "11 - 1 = 10 (left: 1 10 11) || 10 - 1 = 9 (left: 9 11)",
                "11 / 1 = 11 (left: 1 11  || 11 / 1 = 11 (left: 11)",
                "11 - 1 = 10 (left: 1 11 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.0,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 3.1",
                "2 <- 5.0",
                "3 <- 1.3",
                "4 <- 6.4"
            ]
        },
        "Step 7": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 11) || 11 - 2 = 9 (left: 9 11 11) || 9 + 11 = 20 (left: 11 11 20)",
                "1 + 1 = 2 (left: 2 11 11) || 11 - 2 = 9 (left: 9 11) || 9 - 11 = -2 (left: -2 11)",
                "1 + 1 = 2 (left: 2 11 11) || 11 - 2 = 9 (left: 9 11 11) || 11 - 11 = 0 (left: 9 0 11) || 9 + 0 = 9 (left: 9 11)",
                "1 + 1 = 2 (left: 2 11 11) || 11 / 2 = 5.5 (left: 5.5 11)",
                "11 - 1 = 10 (left: 1 11 10) || 11 - 10 = 1 (left: 1 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.0,
                0.002,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 7.4",
                "1 <- 7.4",
                "2 <- 7.4",
                "3 <- 7.4",
                "4 <- 7.4"
            ]
        },
        "Step 8": {
            "steps": [
                "11 - 1 = 10 (left: 1 11 10) || 11 - 10 = 1 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 11 10) || 11 - 10 = 1 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 11 10) || 11 - 10 = 1 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 11 10) || 11 - 10 = 1 (left: 1 10) || 1 + 10 = 11 (left: 10)",
                "11 - 1 = 10 (left: 1 11 10) || 11 - 10 = 1 (left: 1 10) || 1 * 10 = 10 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 5.0",
                "2 <- 5.0",
                "3 <- 5.0",
                "4 <- 5.0"
            ]
        },
        "Step 9": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 11) || 11 - 2 = 9 (left: 9 11 11) || 11 - 11 = 0 (left: 9 0 11) || 9 - 0 = 9 (left: 9 11)",
                "1 + 1 = 2 (left: 2 11 11) || 11 - 2 = 9 (left: 9 11 11) || 11 - 11 = 0 (left: 9 0 11) || 11 / 9 = 1.2222 (left: 1.2222 11)",
                "1 + 1 = 2 (left: 2 11 11) || 11 - 2 = 9 (left: 9 11 11) || 11 - 11 = 0 (left: 9 0 11) || 9 + 0 = 9 (left: 9 11)",
                "1 + 1 = 2 (left: 2 11 11) || 11 - 2 = 9 (left: 9 11 11) || 11 - 11 = 0 (left: 9 0 11) || 9 + 0 = 9 (left: 9 11)",
                "1 + 1 = 2 (left: 2 11 11) || 11 - 2 = 9 (left: 9 11 11) || 11 - 11 = 0 (left: 9 0 11) || 9 - 0 = 9 (left: 9 11)"
            ],
            "Pruning": []
        },
        "Input": "1 1 11 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "2": {
        "puzzle": "1 1 3 8",
        "Step 0": {
            "steps": [
                "1 + 1 = 2 (left: 2 3 8)",
                "3 + 1 = 4 (left: 1 4 8)",
                "3 * 1 = 3 (left: 3 1 8)",
                "1 + 1 = 2 (left: 2 3 8)",
                "3 + 1 = 4 (left: 4 3 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                20.002,
                60.0,
                1.002,
                3.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- INIT",
                "2 <- 0.2",
                "3 <- 0.1",
                "4 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 8) || 8 / 4 = 2 (left: 1 2)",
                "3 * 1 = 3 (left: 3 3 ",
                "3 * 1 = 3 (left: 3 1 8) || 8 - 1 = 7 (left: 3 7)",
                "3 + 1 = 4 (left: 1 4 8) || 4 * 1 = 4 (left: 4 8)",
                "3 + 1 = 4 (left: 1 4 8) || 8 - 4 = 4 (left: 1 4)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                20.0,
                0.0,
                0.002,
                20.001
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 1.0",
                "2 <- 1.0",
                "3 <- INIT",
                "4 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 8) || 8 - 3 = 5 (left: 3 5)",
                "3 + 1 = 4 (left: 1 4 8) || 8 / 4 = 2 (left: 1 2) || 2 / 1 = 2 (left: 2)",
                "3 + 1 = 4 (left: 1 4 8) || 8 / 4 = 2 (left: 1 2) || 1 * 2 = 2 (left: 2)",
                "3 * 1 = 3 (left: 3 1 8)",
                "3 + 1 = 4 (left: 1 4 8) || 8 / 4 = 2 (left: 1 2) || 1 + 2 = 3 (left: 3)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.001,
                0.002,
                41.0,
                0.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 2.3",
                "2 <- 1.4",
                "3 <- 2.3",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 8) || 8 - 4 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "3 * 1 = 3 (left: 3 1 8) || 8 / 1 = 8 (left: 3 8)",
                "3 + 1 = 4 (left: 1 4 8) || 8 - 4 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "3 * 1 = 3 (left: 3 1 8) || 3 + 1 = 4 (left: 4 8)",
                "1 * 1 = 1 (left: 1 3 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 3.4",
                "2 <- 3.1",
                "3 <- 1.0",
                "4 <- 2.3"
            ]
        },
        "Step 4": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 8) || 3 + 1 = 4 (left: 4 8)",
                "1 * 1 = 1 (left: 1 3 8) || 1 + 3 = 4 (left: 4 8)",
                "3 * 1 = 3 (left: 3 1 8) || 8 / 1 = 8 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "3 + 1 = 4 (left: 1 4 8) || 8 / 4 = 2 (left: 1 2) || 2 - 1 = 1 (left: 1)",
                "3 * 1 = 3 (left: 3 1 8) || 8 - 1 = 7 (left: 3 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.001,
                0.003,
                1.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 3.4",
                "2 <- 3.4",
                "3 <- 3.4",
                "4 <- 3.4"
            ]
        },
        "Step 5": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 8) || 8 / 4 = 2 (left: 1 2) || 2 - 1 = 1 (left: 1)",
                "1 * 1 = 1 (left: 1 3 8) || 1 + 3 = 4 (left: 4 8)",
                "1 * 1 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5)",
                "1 * 1 = 1 (left: 1 3 8) || 8 * 1 = 8 (left: 3 8)",
                "1 * 1 = 1 (left: 1 3 8) || 3 + 8 = 11 (left: 1 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                40.001,
                60.0,
                41.0
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 5.3",
                "2 <- 5.2",
                "3 <- 5.4",
                "4 <- 3.1"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8) || 3 + 8 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 3 8) || 8 * 1 = 8 (left: 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.67)",
                "1 * 1 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 5 - 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 8) || 3 + 8 = 11 (left: 1 11) || 1 + 11 = 12 (left: 12)",
                "3 * 1 = 3 (left: 3 1 8) || 8 / 1 = 8 (left: 3 8) || 3 + 8 = 11 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 3.4",
                "2 <- 3.1",
                "3 <- 3.4",
                "4 <- 2.3"
            ]
        },
        "Step 7": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8) || 8 * 1 = 8 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "1 * 1 = 1 (left: 1 3 8) || 1 + 3 = 4 (left: 4 8)",
                "3 * 1 = 3 (left: 3 1 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 8 24)",
                "1 * 1 = 1 (left: 1 3 8) || 3 / 1 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 3 1 8) || 1 + 8 = 9 (left: 3 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                0.003,
                0.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 7.3",
                "1 <- 5.4",
                "2 <- 7.3",
                "3 <- 5.4",
                "4 <- 7.3"
            ]
        },
        "Step 8": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8) || 3 / 1 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 3 8) || 3 + 8 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 3 8) || 3 / 1 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 3 8) || 3 + 8 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 3 8) || 3 / 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 8.4",
                "1 <- 8.4",
                "2 <- 8.4",
                "3 <- 8.4",
                "4 <- 8.4"
            ]
        },
        "Step 9": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8) || 3 / 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 1) * (3 * 8) = 24",
                "1 * 1 = 1 (left: 1 3 8) || 3 / 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 1) * (3 * 8) = 24",
                "1 * 1 = 1 (left: 1 3 8) || 3 / 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: ((1 * 1) + 3) * 8 = 24",
                "1 * 1 = 1 (left: 1 3 8) || 3 / 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 1) * (3 * 8) = 24",
                "1 * 1 = 1 (left: 1 3 8) || 3 / 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 1) * (3 * 8) = 24"
            ]
        },
        "Input": "1 1 3 8",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": -1
            },
            {
                "r": 1
            },
            {
                "r": 1
            }
        ]
    },
    "3": {
        "puzzle": "1 1 1 8",
        "Step 0": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8)",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 + 1 = 2 (left: 2 1 8)",
                "1 + 1 = 2 (left: 2 1 8)",
                "1 + 1 = 2 (left: 2 1 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                41.0,
                60.0,
                60.0,
                41.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.3",
                "2 <- 0.0",
                "3 <- 0.2",
                "4 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 8) || 1 / 8 = 0.125 (left:",
                "1 + 1 = 2 (left: 2 1 8) || 2 + 1 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 + 1 = 3 (left: 3 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                1.001,
                40.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.0",
                "2 <- 1.1",
                "3 <- 1.1",
                "4 <- 0.4"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 1 + 8 = 9 (left: 8 9)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 + 1 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11) ",
                "1 + 1 = 2 (left: 2 1 8) || 2 + 1 = 3 (left: 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "1 + 1 = 2 (left: 2 1 8) || 1 + 8 = 9 (left: 2 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                60.0,
                0.003,
                0.0,
                0.0
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 1.1",
                "2 <- 0.2",
                "3 <- 2.1",
                "4 <- 1.4"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || Input: 5 9",
                "1 + 1 = 2 (left: 2 1 8) || 2 + 1 = 3 (left: 3 8) || 5 + 5 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 1 8) || 1 * 8 = 8 (left: 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 1 8) || 2 + 1 = 3 (left: 3 8) || 4 + 7 = 11 (left: 7 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                0.001,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 1.3",
                "2 <- 2.1",
                "3 <- 0.1",
                "4 <- 1.1"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || Possible next steps:",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5 8)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 2 1 8) || 2 + 1 = 3 (left: 3 8) || 3 + 8 = 11 (left: 8 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                2.001,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.3",
                "2 <- 0.4",
                "3 <- 0.0",
                "4 <- 2.1"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6)",
                "1 + 1 = 2 (left: 2 1 8) || 2 + 1 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 2 1 8) || 8 / 2 = 4 (left: 4 2)",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                60.0,
                0.002,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 4.3",
                "2 <- 2.1",
                "3 <- 4.3",
                "4 <- 1.3"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 8) || 2 + 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 1 8) || 2 - 1 = 1 (left: 1 8) || 1 + 8 = 9 (left: 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.002,
                0.001,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 5.3",
                "2 <- 6.0",
                "3 <- 5.1",
                "4 <- 6.3"
            ]
        },
        "Step 7": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 8) || 2 + 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: ((1 + 1) + 1) * 8 = 24",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 + 1 = 2 (left: 2 1 8) || 2 + 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: ((1 + 1) + 1) * 8 = 24",
                "1 + 1 = 2 (left: 2 1 8) || 2 + 1 = 3 (left: 3 8) || Input: 10 5 ",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: ((1 + 1) + 2) * 8 = 24"
            ]
        },
        "Input": "1 1 1 8",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": -1
            }
        ]
    },
    "4": {
        "puzzle": "6 6 6 6",
        "Step 0": {
            "steps": [
                "6 + 6 = 12 (left: 6 6 12)",
                "6 / 6 = 1 (left: 6 6 1 6)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 + 6 = 12 (left: 6 6 12)",
                "6 - 6 = 0 (left: 0 6 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                41.0,
                2.001,
                60.0,
                60.0,
                21.001
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.2",
                "2 <- 0.4",
                "3 <- 0.3",
                "4 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "6 - 6 = 0 (left: 0 6 6) || Possible next steps:",
                "6 * 6 = 36 (left: 6 6 36) || Input: 2 3 5 8",
                "6 - 6 = 0 (left: 0 6 6) || 4 + 5 = 9 (left:",
                "6 + 6 = 12 (left: 6 6 12) || 6 * 6 = 36 (left: 12 36)",
                "6 + 6 = 12 (left: 6 6 12) || 12 - 6 = 6 (left: 6 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.001,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.2",
                "2 <- 0.2",
                "3 <- 0.4",
                "4 <- 0.0"
            ]
        },
        "Step 2": {
            "steps": [
                "6 + 6 = 12 (left: 6 6 12) || 6 * 6 = 36 (left: 12 36) || 36 / 12 = 3 (left: 3)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left:",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36)",
                "6 - 6 = 0 (left: 0 6 6) || 6 - 0 = 6 (left: 6 6)",
                "6 + 6 = 12 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                60.0,
                0.003,
                40.001
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 0.3",
                "2 <- 0.2",
                "3 <- 0.3",
                "4 <- 0.0"
            ]
        },
        "Step 3": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "6 + 6 = 12 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12)",
                "6 * 6 = 36 (left: 6 6 36) || 6 + 6 = 12 (left: 12 36)",
                "6 + 6 = 12 (left: 6 6 12) || 12 - 6 = 6 (left: 6 12)",
                "6 + 6 = 12 (left: 6 6 12) || 12 - 6 = 6 (left: 6 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.0,
                40.001,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.2",
                "2 <- 3.0",
                "3 <- 2.2",
                "4 <- 3.1"
            ]
        },
        "Step 4": {
            "steps": [
                "6 + 6 = 12 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || There are no possible next steps with just the number 36.",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || Input: 3 9 27",
                "6 + 6 = 12 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 2.4",
                "2 <- 3.1",
                "3 <- 2.4",
                "4 <- 2.4"
            ]
        },
        "Step 5": {
            "steps": [
                "6 + 6 = 12 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((6 + 6) + (6 + 6)) = 24",
                "6 + 6 = 12 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "6 + 6 = 12 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "6 + 6 = 12 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 + 12 = 24",
                "6 + 6 = 12 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)"
            ]
        },
        "Input": "6 6 6 6",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "5": {
        "puzzle": "1 1 2 12",
        "Step 0": {
            "steps": [
                "12 / 2 = 6 (left: 1 2 6)",
                "1 + 1 = 2 (left: 2 2 12)",
                "1 + 1 = 2 (left: 2 2 12)",
                "12 - 2 = 10 (left: 1 2 10)",
                "1 + 1 = 2 (left: 2 2 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                40.001,
                21.001,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.2",
                "2 <- INIT",
                "3 <- 0.2",
                "4 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 2 = 10 (left: 1 2 ",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12)",
                "1 * 1 = 1 (left: 1 2 12)",
                "1 + 1 = 2 (left: 2 2 12) || 12 / 2 = 6 (left: 2 6)",
                "1 + 1 = 2 (left: 2 2 12) || 2 + 2 = 4 (left: 4 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                40.001,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- 0.1",
                "3 <- 1.1",
                "4 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 12 - 1 = 11 (left:",
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "1 + 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left:",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "1 + 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.0,
                0.003,
                1.001,
                60.0,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.2",
                "2 <- 2.3",
                "3 <- 0.2",
                "4 <- 2.3"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 12)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 + 1 = 2 (left: 2 2 12) || 12 + 2 = 14 (left: 2 14)",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ],
            "Pruning": [
                "2<-2.3",
                "4<-2.3"
            ],
            "Evaluation": [
                0.002,
                41.0,
                41.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 3.1",
                "2 <- 3.4",
                "3 <- 1.2",
                "4 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 1 = 11 (left:",
                "2 * 1 = 2 (left: 2 2 12)"
            ],
            "Pruning": [
                "0<-3.1",
                "2<-3.2"
            ],
            "Evaluation": [
                60.0,
                0.002,
                60.0,
                0.001,
                2.001
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 4.2",
                "2 <- 1.2",
                "3 <- 2.3",
                "4 <- 0.2"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7) ",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 1 = 11 (left: 2 11)",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "1 + 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10 12)"
            ],
            "Pruning": [
                "0<-1.1",
                "1<-3.2",
                "3<-4.2"
            ],
            "Evaluation": [
                60.0,
                41.0,
                1.001,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 2.3",
                "2 <- 3.2",
                "3 <- 5.1",
                "4 <- INIT"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 + 1 = 2 (left: 2 2 12)"
            ],
            "Pruning": [
                "0<-5.1",
                "1<-3.4",
                "2<-3.1",
                "3<-5.1"
            ],
            "Evaluation": [
                40.0,
                60.0,
                60.0,
                60.0,
                20.002
            ],
            "Resampling": [
                "0 <- 6.1",
                "1 <- 4.2",
                "2 <- 6.3",
                "3 <- 6.3",
                "4 <- 6.2"
            ]
        },
        "Step 7": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)"
            ],
            "Pruning": [
                "0<-6.2",
                "1<-5.1",
                "2<-6.1",
                "3<-3.4"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 7.2",
                "2 <- 4.2",
                "3 <- 5.1",
                "4 <- 7.2"
            ]
        },
        "Step 8": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ],
            "Pruning": [
                "0<-7.2",
                "1<-6.0",
                "2<-5.3",
                "3<-7.1",
                "4<-6.1"
            ],
            "Evaluation": [
                41.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 8.2",
                "1 <- 6.0",
                "2 <- 7.1",
                "3 <- 6.0",
                "4 <- 7.3"
            ]
        },
        "Step 9": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)"
            ],
            "Pruning": []
        },
        "Input": "1 1 2 12",
        "Verifications": [
            {
                "r": -1
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "6": {
        "puzzle": "1 2 2 6",
        "Step 0": {
            "steps": [
                "2 * 2 = 4 (left: 1 4 ",
                "6 / 2 = 3 (left: 1 2 3)",
                "2 * 2 = 4 (left: 1 4 6)",
                "6 - 1 = 5 (left: 2 5 ",
                "2 * 2 = 4 (left: 4 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.003,
                60.0,
                21.0,
                40.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.2",
                "2 <- 0.4",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 2 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "2 * 2 = 4 (left: 1 4 6) || 4 - 1 = 3 (left: 3 6)",
                "2 * 2 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "6 - 2 = 4 (left: 2 4 6)",
                "6 / 2 = 3 (left: 2 3 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                3.0,
                0.003,
                1.002,
                60.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.4",
                "2 <- 0.2",
                "3 <- 0.4",
                "4 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "6 / 2 = 3 (left: 2 3 6) || 2 + 3 = 5 (left: 5 6)",
                "6 / 2 = 3 (left: 2 3 6) || 3 + 2 = 5 (left: 5)",
                "2 * 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "2 * 2 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "6 / 2 = 3 (left: 2 3 6) || 3 / 2 = 1.5 (left: 1"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                0.001,
                0.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 2.2",
                "2 <- INIT",
                "3 <- 1.4",
                "4 <- 1.4"
            ]
        },
        "Step 3": {
            "steps": [
                "6 / 2 = 3 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6)",
                "2 * 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "2 * 2 = 4 (left: 4 2 6)",
                "6 / 2 = 3 (left: 2 3 6) || 1 + 2 = 3 (left: 3 3 4)",
                "6 / 2 = 3 (left: 2 3 6) || Input: 1 3 5"
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                60.0,
                0.003,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 3.1",
                "2 <- 3.0",
                "3 <- 0.2",
                "4 <- 0.2"
            ]
        },
        "Step 4": {
            "steps": [
                "2 * 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: ((1 * 2) * 2) * 6 = 24",
                "2 * 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: ((1 * 2) * 2) * 6 = 24",
                "6 / 2 = 3 (left: 2 3 6) || 3 * 2 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "2 * 2 = 4 (left: 1 4 6) || Input: 3 9 2 5",
                "2 * 2 = 4 (left: 1 4 6) || Input: 3 9 12 15"
            ]
        },
        "Input": "1 2 2 6",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "7": {
        "puzzle": "1 1 10 12",
        "Step 0": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 10 12)",
                "1 + 1 = 2 (left: 2 10 12)",
                "12 - 10 = 2 (left: 1 1 2)",
                "1 + 1 = 2 (left: 2 10 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                21.001,
                0.003,
                20.002,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.2",
                "2 <- INIT",
                "3 <- 0.0",
                "4 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 10 12)",
                "1 + 1 = 2 (left: 2 10 12) || 10 / 2 = 5 (left: 5 10 12)",
                "12 - 10 = 2 (left: 1 2 12)",
                "10 + 1 = 11 (left: 1 11 12) || 1 + 11 = 12 (left: 12)",
                "1 + 1 = 2 (left: 2 10 12) || 2 + 10 = 12 (left: 12 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.0,
                1.001,
                60.0,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 0.0",
                "2 <- 1.2",
                "3 <- 1.2",
                "4 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 12 - 1 = 11 (left: 2 11)",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 1 = 11 (left: 2 11)",
                "1 + 1 = 2 (left: 2 10 12) || 2 + 10 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                60.0,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 1.4",
                "2 <- 0.2",
                "3 <- 0.2",
                "4 <- 2.2"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "1 + 1 = 2 (left: 2 10 12) || 2 + 10 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 10 12) || 10 * 2 = 20 (left: 2 20 12)",
                "1 + 1 = 2 (left: 2 10 12) || 12 - 2 = 10 (left: 10 12)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                1.002,
                1.001,
                40.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.4",
                "2 <- 3.4",
                "3 <- 3.1",
                "4 <- 3.4"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 1 = 2 (left: 2 10 12) || 2 + 10 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "1 + 1 = 2 (left: 2 10 12) || 2 + 10 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 10) + (12 - 2) = 24",
                "1 + 1 = 2 (left: 2 10 12) || 2 + 10 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((1 + 1) + 10) + 12 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 10) + (12 - 2) = 24"
            ]
        },
        "Input": "1 1 10 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 1
            },
            {
                "r": -1
            }
        ]
    },
    "8": {
        "puzzle": "2 2 10 10",
        "Step 0": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 10 ",
                "10 - 2 = 8 (left: 2 8 10)",
                "2 + 2 = 4 (left: 4 10 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                2.0,
                2.001,
                20.002
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.4",
                "2 <- 0.4",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14)",
                "2 + 2 = 4 (left: 4 10 10)",
                "10 / 2 = 5 (left: 2 5 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.0,
                1.001,
                0.003,
                40.001,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.4",
                "2 <- 1.3",
                "3 <- INIT",
                "4 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                0.002,
                1.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- 1.3",
                "4 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.003,
                1.002,
                0.0,
                1.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- 0.4",
                "4 <- 0.4"
            ]
        },
        "Step 4": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 6 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                2.001,
                20.002,
                1.002,
                41.0
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- INIT",
                "2 <- 4.4",
                "3 <- 4.0",
                "4 <- 4.2"
            ]
        },
        "Step 5": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14) || 14 / 10 = 1.4 (",
                "10 / 2 = 5 (left: 2 5 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14) || 14 - 10 = 4 (left: 10 4)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                2.001,
                60.0,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 5.2",
                "2 <- 5.2",
                "3 <- 5.2",
                "4 <- 4.4"
            ]
        },
        "Step 6": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10) || 9 / 3 =",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 6 10) || 6 + 6 = 12 (left: 10 12)"
            ],
            "Pruning": [
                "0<-4.4",
                "1<-5.2",
                "3<-5.2"
            ],
            "Evaluation": [
                41.0,
                41.0,
                0.002,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 6.0",
                "2 <- 4.2",
                "3 <- 6.1",
                "4 <- 6.0"
            ]
        },
        "Step 7": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 6 10) || 6 * 6 = 36 (left: 10 36)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 6 10) || 10 - 6 = 4 (left: 4 6)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14) || 14 / 10 = 1.4 (",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 6 10) || 6 - 6 = "
            ],
            "Pruning": [
                "3<-5.2"
            ],
            "Evaluation": [
                1.002,
                60.0,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 7.3",
                "2 <- 5.2",
                "3 <- 7.3",
                "4 <- 7.1"
            ]
        },
        "Step 8": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 6 10) || 10 - 6 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)"
            ],
            "Pruning": [
                "0<-7.3",
                "1<-7.1",
                "2<-6.3",
                "3<-7.3",
                "4<-7.3"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 8.1",
                "1 <- 8.2",
                "2 <- 8.0",
                "3 <- 8.1",
                "4 <- 8.4"
            ]
        },
        "Step 9": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 6 10) || 10 - 6 = 4 (left: 4 6) || 10 + 15 = 25 (left: 25)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 6 10) || 10 - 6 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10) || 1 + 10 = 11 (left: 11)"
            ],
            "Pruning": [
                "0<-6.2",
                "1<-6.2",
                "2<-6.2",
                "3<-6.2",
                "4<-6.2"
            ]
        },
        "Input": "2 2 10 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "9": {
        "puzzle": "1 1 1 12",
        "Step 0": {
            "steps": [
                "12 - 1 = 11 (left: 1 1 11)",
                "1 + 1 = 2 (left: 1 2 12)",
                "1 * 1 = 1 (left: 1 1 12)",
                "1 + 1 = 2 (left: 1 2 12)",
                "1 + 1 = 2 (left: 1 2 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                60.0,
                20.002,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.3",
                "2 <- 0.3",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12)",
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 1 2 12) || 2 + 1 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 1 12)",
                "1 + 1 = 2 (left: 2 1 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                60.0,
                20.002,
                41.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.1",
                "2 <- 1.1",
                "3 <- 1.3",
                "4 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 12) || 2 + 1 = 3 (left: 3 12)",
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 12) || 12 * 1 = 12 (left: 1 12)",
                "1 + 1 = 2 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                21.001,
                0.003,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 1.2",
                "2 <- 1.0",
                "3 <- 1.4",
                "4 <- 1.1"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 12) || 2 + 1 = 3 (left: 3 12) || 12 / 3 = 4 (left: 4)",
                "1 + 1 = 2 (left: 1 2 12) || 2 + 1 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9)",
                "1 + 1 = 2 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "1 + 1 = 2 (left: 2 1 12) || 1 + 12 = 13 (left: 2 13)",
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                20.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.3",
                "2 <- 1.0",
                "3 <- 1.0",
                "4 <- 0.1"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 12 - 1 = 11 (left: 2 11)",
                "1 + 1 = 2 (left: 1 2 12) || 2 + 12 = 14 (left: 1 14)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                2.001,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 1.1",
                "2 <- 1.4",
                "3 <- 4.2",
                "4 <- 4.4"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 24 = 0 (left: 0)",
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 + 1 = 11 (left: 10)",
                "1 + 1 = 2 (left: 2 1 12) || 12 / 2 = 6 (left: 2 6)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 4.2",
                "2 <- 4.3",
                "3 <- 1.1",
                "4 <- 4.3"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 / 10 = 0.1 (left: 0.1)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 24 25)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.0,
                0.003,
                60.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 5.4",
                "2 <- 6.2",
                "3 <- 5.4",
                "4 <- 5.4"
            ]
        },
        "Step 7": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25) || There are no possible next steps with just the input of 25.",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (1 + 1) * 12 / 1 = 24",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25) || 25 / 8 = 3.125 (left: 8)",
                "1 + 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25) || 25 / 2 = 12.5 (left: 12.5)"
            ]
        },
        "Input": "1 1 1 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": -1
            },
            {
                "r": -1
            }
        ]
    },
    "Cost": {
        "input_tokens": 134705,
        "output_tokens": 46083.0,
        "total_cost": 0.13647700000000001
    }
}