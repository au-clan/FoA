{
    "900": {
        "input": "4 5 6 10",
        "step_1": {
            "steps": [
                "6 / 5 = 1.2 (left: 4 1.2 10)",
                "5 + 6 = 11 (left: 4 11 10)",
                "6 * 10 = 60 (left: 4 5 60)",
                "6 / 4 = 1.5 (left: 1.5 4 10)",
                "6 * 4 = 24 (left: 5 10 24)",
                "6 / 4 = 1.5 (left: 1.5 4 10)",
                "10 - 4 = 6 (left: 6 5 10)",
                "10 / 5 = 2 (left: 4 6 10)",
                "4 + 5 = 9 (left: 6 9 10)",
                "10 - 6 = 4 (left: 4 5 10)"
            ],
            "values": [
                3.0,
                0.003,
                2.001,
                3.0,
                2.001,
                3.0,
                22.0,
                60.0,
                21.0,
                2.001
            ],
            "resampled": [
                "0 <- 7",
                "1 <- 0",
                "2 <- 7",
                "3 <- 7",
                "4 <- 6",
                "5 <- 8",
                "6 <- 7",
                "7 <- 0",
                "8 <- 6",
                "9 <- 6"
            ],
            "resampled_steps": [
                "10 / 5 = 2 (left: 4 6 10)",
                "6 / 5 = 1.2 (left: 4 1.2 10)",
                "10 / 5 = 2 (left: 4 6 10)",
                "10 / 5 = 2 (left: 4 6 10)",
                "10 - 4 = 6 (left: 6 5 10)",
                "4 + 5 = 9 (left: 6 9 10)",
                "10 / 5 = 2 (left: 4 6 10)",
                "6 / 5 = 1.2 (left: 4 1.2 10)",
                "10 - 4 = 6 (left: 6 5 10)",
                "10 - 4 = 6 (left: 6 5 10)"
            ]
        },
        "step_2": {
            "steps": [
                "10 / 5 = 2 (left: 4 6 10)\n5 * 7 = 35 (left: 3 35 11)",
                "6 / 5 = 1.2 (left: 4 1.2 10)\n4 / 1.2 = 3.33333 (left: 3.33333 10)",
                "10 / 5 = 2 (left: 4 6 10)\n10 / 6 = 1.6667 (left: 1.6667 10)",
                "10 / 5 = 2 (left: 4 6 10)\n10 / 4 = 2.5 (left: 6 2.5)",
                "10 - 4 = 6 (left: 6 5 10)\nInput: 3 9 12 5",
                "4 + 5 = 9 (left: 6 9 10)\n10 * 6 = 60 (left: 9 60)",
                "10 / 5 = 2 (left: 4 6 10)\n10 - 4 = 6 (left: 6 10)",
                "6 / 5 = 1.2 (left: 4 1.2 10)\n1.2 / 4 = 0.3 (left: 0.3 10)",
                "10 - 4 = 6 (left: 6 5 10)\n5 * 10 = 50 (left: 6 50)",
                "10 - 4 = 6 (left: 6 5 10)\n6 + 5 = 11 (left: 10 11)"
            ],
            "values": [
                21.0,
                1.0,
                0.002,
                0.002,
                0.003,
                1.002,
                0.003,
                0.003,
                60.0,
                1.002
            ],
            "resampled": [
                "0 <- 8",
                "1 <- 0",
                "2 <- 8",
                "3 <- 8",
                "4 <- 0",
                "5 <- 0",
                "6 <- 0",
                "7 <- 8",
                "8 <- 8",
                "9 <- 8"
            ],
            "resampled_steps": [
                "10 - 4 = 6 (left: 6 5 10)\n5 * 10 = 50 (left: 6 50)",
                "10 / 5 = 2 (left: 4 6 10)\n5 * 7 = 35 (left: 3 35 11)",
                "10 - 4 = 6 (left: 6 5 10)\n5 * 10 = 50 (left: 6 50)",
                "10 - 4 = 6 (left: 6 5 10)\n5 * 10 = 50 (left: 6 50)",
                "10 / 5 = 2 (left: 4 6 10)\n5 * 7 = 35 (left: 3 35 11)",
                "10 / 5 = 2 (left: 4 6 10)\n5 * 7 = 35 (left: 3 35 11)",
                "10 / 5 = 2 (left: 4 6 10)\n5 * 7 = 35 (left: 3 35 11)",
                "10 - 4 = 6 (left: 6 5 10)\n5 * 10 = 50 (left: 6 50)",
                "10 - 4 = 6 (left: 6 5 10)\n5 * 10 = 50 (left: 6 50)",
                "10 - 4 = 6 (left: 6 5 10)\n5 * 10 = 50 (left: 6 50)"
            ]
        },
        "step_3": {
            "steps": [
                "10 - 4 = 6 (left: 6 5 10)\n5 * 10 = 50 (left: 6 50)\n6 * 50 = 300 (left: 300)",
                "10 / 5 = 2 (left: 4 6 10)\n5 * 7 = 35 (left: 3 35 11)\n40 - 20 = 20 (left: 6 12 20)",
                "10 - 4 = 6 (left: 6 5 10)\n5 * 10 = 50 (left: 6 50)\n50 - 6 = 44 (left: 6 44)",
                "10 - 4 = 6 (left: 6 5 10)\n5 * 10 = 50 (left: 6 50)\nPossible next steps:",
                "10 / 5 = 2 (left: 4 6 10)\n5 * 7 = 35 (left: 3 35 11)\n35 / 3 = 11.67 (left: 11.67 11)",
                "10 / 5 = 2 (left: 4 6 10)\n5 * 7 = 35 (left: 3 35 11)\n35 / 11 = 3.18181818182 (left: 3.18181818182 11)",
                "10 / 5 = 2 (left: 4 6 10)\n5 * 7 = 35 (left: 3 35 11)\n11 - 3 = 8 (left: 8 11)",
                "10 - 4 = 6 (left: 6 5 10)\n5 * 10 = 50 (left: 6 50)\n6 * 50 = 300 (left: 300)",
                "10 - 4 = 6 (left: 6 5 10)\n5 * 10 = 50 (left: 6 50)\n6 + 50 = 56 (left: 56)",
                "10 - 4 = 6 (left: 6 5 10)\n5 * 10 = 50 (left: 6 50)\n6 + 50 = 56 (left: 56)"
            ],
            "values": [
                0.003,
                3.0,
                1.0,
                0.003,
                1.002,
                1.002,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 5",
                "1 <- 4",
                "2 <- 1",
                "3 <- 5",
                "4 <- 4",
                "5 <- 1",
                "6 <- 5",
                "7 <- 1",
                "8 <- 1",
                "9 <- 4"
            ],
            "resampled_steps": [
                "10 / 5 = 2 (left: 4 6 10)\n5 * 7 = 35 (left: 3 35 11)\n35 / 11 = 3.18181818182 (left: 3.18181818182 11)",
                "10 / 5 = 2 (left: 4 6 10)\n5 * 7 = 35 (left: 3 35 11)\n35 / 3 = 11.67 (left: 11.67 11)",
                "10 / 5 = 2 (left: 4 6 10)\n5 * 7 = 35 (left: 3 35 11)\n40 - 20 = 20 (left: 6 12 20)",
                "10 / 5 = 2 (left: 4 6 10)\n5 * 7 = 35 (left: 3 35 11)\n35 / 11 = 3.18181818182 (left: 3.18181818182 11)",
                "10 / 5 = 2 (left: 4 6 10)\n5 * 7 = 35 (left: 3 35 11)\n35 / 3 = 11.67 (left: 11.67 11)",
                "10 / 5 = 2 (left: 4 6 10)\n5 * 7 = 35 (left: 3 35 11)\n40 - 20 = 20 (left: 6 12 20)",
                "10 / 5 = 2 (left: 4 6 10)\n5 * 7 = 35 (left: 3 35 11)\n35 / 11 = 3.18181818182 (left: 3.18181818182 11)",
                "10 / 5 = 2 (left: 4 6 10)\n5 * 7 = 35 (left: 3 35 11)\n40 - 20 = 20 (left: 6 12 20)",
                "10 / 5 = 2 (left: 4 6 10)\n5 * 7 = 35 (left: 3 35 11)\n40 - 20 = 20 (left: 6 12 20)",
                "10 / 5 = 2 (left: 4 6 10)\n5 * 7 = 35 (left: 3 35 11)\n35 / 3 = 11.67 (left: 11.67 11)"
            ]
        },
        "step_4": {
            "steps": [
                "10 / 5 = 2 (left: 4 6 10)\n5 * 7 = 35 (left: 3 35 11)\n35 / 11 = 3.18181818182 (left: 3.18181818182 11)\n3.18181818182 * 11 = 35 (left: 35)",
                "10 / 5 = 2 (left: 4 6 10)\n5 * 7 = 35 (left: 3 35 11)\n35 / 3 = 11.67 (left: 11.67 11)\n3.5 + 2 = 5.5 (left: 2 5.5)",
                "10 / 5 = 2 (left: 4 6 10)\n5 * 7 = 35 (left: 3 35 11)\n40 - 20 = 20 (left: 6 12 20)\n6 + 12 = 18 (left: 18 20)",
                "10 / 5 = 2 (left: 4 6 10)\n5 * 7 = 35 (left: 3 35 11)\n35 / 11 = 3.18181818182 (left: 3.18181818182 11)\n3.18181818182 * 11 = 35 (left: 11)",
                "10 / 5 = 2 (left: 4 6 10)\n5 * 7 = 35 (left: 3 35 11)\n35 / 3 = 11.67 (left: 11.67 11)\n11.67 - 11 = 0.67 (left: 0.67)",
                "10 / 5 = 2 (left: 4 6 10)\n5 * 7 = 35 (left: 3 35 11)\n40 - 20 = 20 (left: 6 12 20)\n12 + 8 = 20 (left: 6 20)",
                "10 / 5 = 2 (left: 4 6 10)\n5 * 7 = 35 (left: 3 35 11)\n35 / 11 = 3.18181818182 (left: 3.18181818182 11)\n3.18181818182 + 11 = 14.18181818182 (left: 11)",
                "10 / 5 = 2 (left: 4 6 10)\n5 * 7 = 35 (left: 3 35 11)\n40 - 20 = 20 (left: 6 12 20)\n12 * 6 = 72 (left: 72 20)",
                "10 / 5 = 2 (left: 4 6 10)\n5 * 7 = 35 (left: 3 35 11)\n40 - 20 = 20 (left: 6 12 20)\n20 - 12 = 8 (left: 6 8)",
                "10 / 5 = 2 (left: 4 6 10)\n5 * 7 = 35 (left: 3 35 11)\n35 / 3 = 11.67 (left: 11.67 11)\n7 * 3 = 21 (left: 5 21)"
            ],
            "values": [
                0.002,
                1.002,
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                1.001,
                0.003,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.024900000000000002
    },
    "901": {
        "input": "1 2 4 7",
        "step_1": {
            "steps": [
                "4 * 2 = 8 (left: 1 8 7)",
                "4 + 2 = 6 (left: 1 6 7)",
                "7 - 1 = 6 (left: 2 4 6)",
                "4 - 2 = 2 (left: 1 2 7)",
                "7 - 1 = 6 (left: 2 4 6)",
                "7 - 2 = 5 (left: 1 4 5)",
                "1 * 2 = 2 (left: 2 4 7)",
                "4 - 2 = 2 (left: 1 2 7)",
                "2 + 4 = 6 (left: 1 6 7)",
                "2 * 4 = 8 (left: 1 8 7)"
            ],
            "values": [
                1.002,
                0.003,
                1.002,
                2.001,
                0.003,
                3.0,
                2.001,
                2.001,
                1.002,
                2.001
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 6",
                "2 <- 8",
                "3 <- 6",
                "4 <- 7",
                "5 <- 9",
                "6 <- 7",
                "7 <- 9",
                "8 <- 3",
                "9 <- 8"
            ],
            "resampled_steps": [
                "4 * 2 = 8 (left: 1 8 7)",
                "1 * 2 = 2 (left: 2 4 7)",
                "2 + 4 = 6 (left: 1 6 7)",
                "1 * 2 = 2 (left: 2 4 7)",
                "4 - 2 = 2 (left: 1 2 7)",
                "2 * 4 = 8 (left: 1 8 7)",
                "4 - 2 = 2 (left: 1 2 7)",
                "2 * 4 = 8 (left: 1 8 7)",
                "4 - 2 = 2 (left: 1 2 7)",
                "2 + 4 = 6 (left: 1 6 7)"
            ]
        },
        "step_2": {
            "steps": [
                "4 * 2 = 8 (left: 1 8 7)\n1 * 8 = 8 (left: 8 7)",
                "1 * 2 = 2 (left: 2 4 7)\n6 + 9 = 15 (left: 15 3)",
                "2 + 4 = 6 (left: 1 6 7)\n6 - 1 = 5 (left: 5 7)",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)",
                "4 - 2 = 2 (left: 1 2 7)\n3 + 5 = 8 (left: 8 9 1)",
                "2 * 4 = 8 (left: 1 8 7)\n8 - 1 = 7 (left: 7 7)",
                "4 - 2 = 2 (left: 1 2 7)\n5 - 3 = 2 (left: 2 7)",
                "2 * 4 = 8 (left: 1 8 7)\n8 - 7 = 1 (left: 1)",
                "4 - 2 = 2 (left: 1 2 7)\n2 * 7 = 14 (left: 1 14)",
                "2 + 4 = 6 (left: 1 6 7)\n6 / 1 = 6 (left: 6 7)"
            ],
            "values": [
                0.003,
                0.001,
                0.002,
                60.0,
                2.001,
                1.001,
                0.0,
                0.002,
                2.0,
                0.002
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 4",
                "3 <- 3",
                "4 <- 3",
                "5 <- 3",
                "6 <- 3",
                "7 <- 3",
                "8 <- 3",
                "9 <- 3"
            ],
            "resampled_steps": [
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)",
                "4 - 2 = 2 (left: 1 2 7)\n3 + 5 = 8 (left: 8 9 1)",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)"
            ]
        },
        "step_3": {
            "steps": [
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)\n4 / 3.5 = 1.1428571428571428 (left: 1.1428571428571428)",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)\n4 / 3.5 = 1.142857142857 (left: 1.142857142857)",
                "4 - 2 = 2 (left: 1 2 7)\n3 + 5 = 8 (left: 8 9 1)\nPossible next steps:",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)\n4 / 3.5 = 1.1428571428571428 (left: 1.1428571428571428)",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)\n4 - 3.5 = 0.5 (left: 0.5)",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)\n4 + 3.5 = 7.5 (left: 7.5)",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)\n4 * 3.5 = 14 (left: 14)",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)\n4 + 3.5 = 7.5 (left: 7.5)",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)\n4 / 3.5 = 1.14285714286 (left: 1.14285714286)",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)\n4 + 3.5 = 7.5 (left: 7.5)"
            ],
            "values": [
                0.002,
                0.001,
                0.003,
                0.002,
                0.0,
                0.002,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 5",
                "2 <- 2",
                "3 <- 9",
                "4 <- 9",
                "5 <- 3",
                "6 <- 6",
                "7 <- 5",
                "8 <- 7",
                "9 <- 9"
            ],
            "resampled_steps": [
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)\n4 / 3.5 = 1.1428571428571428 (left: 1.1428571428571428)",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)\n4 + 3.5 = 7.5 (left: 7.5)",
                "4 - 2 = 2 (left: 1 2 7)\n3 + 5 = 8 (left: 8 9 1)\nPossible next steps:",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)\n4 + 3.5 = 7.5 (left: 7.5)",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)\n4 + 3.5 = 7.5 (left: 7.5)",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)\n4 / 3.5 = 1.1428571428571428 (left: 1.1428571428571428)",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)\n4 * 3.5 = 14 (left: 14)",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)\n4 + 3.5 = 7.5 (left: 7.5)",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)\n4 + 3.5 = 7.5 (left: 7.5)",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)\n4 + 3.5 = 7.5 (left: 7.5)"
            ]
        },
        "step_4": {
            "steps": [
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)\n4 / 3.5 = 1.1428571428571428 (left: 1.1428571428571428)\n1.1428571428571428 * 2 = 2.2857142857142856 (left: 2.2857142857142856)",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)\n4 + 3.5 = 7.5 (left: 7.5)\n7.5 + 8 = 15.5 (left: 15.5)",
                "4 - 2 = 2 (left: 1 2 7)\n3 + 5 = 8 (left: 8 9 1)\nPossible next steps:\nThere are no more possible next steps with the given numbers.",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)\n4 + 3.5 = 7.5 (left: 7.5)\n7.5 + 8 = 15.5 (left: 15.5)",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)\n4 + 3.5 = 7.5 (left: 7.5)\nNone - 7.5 is the final result.",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)\n4 / 3.5 = 1.1428571428571428 (left: 1.1428571428571428)\n1.1428571428571428 * 2 = 2.2857142857142856",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)\n4 * 3.5 = 14 (left: 14)\nNone, only one number left.",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)\n4 + 3.5 = 7.5 (left: 7.5)\nThere are no possible next steps for the input 7.5.",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)\n4 + 3.5 = 7.5 (left: 7.5)\n7.5 + 8 = 15.5 (left: 15.5)",
                "1 * 2 = 2 (left: 2 4 7)\n7 / 2 = 3.5 (left: 4 3.5)\n4 + 3.5 = 7.5 (left: 7.5)\n7.5 - 2 = 5.5 (left: 5.5)"
            ],
            "values": [
                0.001,
                0.002,
                0.003,
                0.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.0449035
    },
    "902": {
        "input": "2 5 8 11",
        "step_1": {
            "steps": [
                "12 - 7 = 5 (left: 3 5 9)",
                "11 - 5 = 6 (left: 2 6 8)",
                "2 + 8 = 10 (left: 10 5 11)",
                "2 + 5 = 7 (left: 7 8 11)",
                "11 - 2 = 9 (left: 9 8 11)",
                "5 - 2 = 3 (left: 2 3 11)",
                "9 * 12 = 108 (left: 3 6 108)",
                "11 - 5 = 6 (left: 2 6 8)",
                "5 + 2 = 7 (left: 7 8 11)",
                "11 - 2 = 9 (left: 2 8 9)"
            ],
            "values": [
                21.001,
                2.001,
                1.002,
                3.0,
                3.0,
                2.001,
                22.0,
                2.001,
                3.0,
                1.002
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 7",
                "2 <- 3",
                "3 <- 0",
                "4 <- 0",
                "5 <- 0",
                "6 <- 6",
                "7 <- 3",
                "8 <- 0",
                "9 <- 0"
            ],
            "resampled_steps": [
                "9 * 12 = 108 (left: 3 6 108)",
                "11 - 5 = 6 (left: 2 6 8)",
                "2 + 5 = 7 (left: 7 8 11)",
                "12 - 7 = 5 (left: 3 5 9)",
                "12 - 7 = 5 (left: 3 5 9)",
                "12 - 7 = 5 (left: 3 5 9)",
                "9 * 12 = 108 (left: 3 6 108)",
                "2 + 5 = 7 (left: 7 8 11)",
                "12 - 7 = 5 (left: 3 5 9)",
                "12 - 7 = 5 (left: 3 5 9)"
            ]
        },
        "step_2": {
            "steps": [
                "9 * 12 = 108 (left: 3 6 108)\n3 / 6 = 0.5 (left: 0.5 108)",
                "11 - 5 = 6 (left: 2 6 8)\nInput: 2 14",
                "2 + 5 = 7 (left: 7 8 11)\n4 / 1.14 = 3.51 (left: 3.51 11)",
                "12 - 7 = 5 (left: 3 5 9)\n4 + 6 = 10 (left: 10)",
                "12 - 7 = 5 (left: 3 5 9)\n3 + 5 = 8 (left: 8 9)",
                "12 - 7 = 5 (left: 3 5 9)\nInput: 4 6 10 12",
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)",
                "2 + 5 = 7 (left: 7 8 11)\n8 / 7 = 1.14 (left: 1.14 11)",
                "12 - 7 = 5 (left: 3 5 9)\n4 / 6 = 0.6666666666666666 (left: 0.6666666666666666 10 12)",
                "12 - 7 = 5 (left: 3 5 9)\n10 / 4 = 2 (left: 2 6 12)"
            ],
            "values": [
                1.0,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                40.001,
                1.0,
                2.001,
                1.002
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 6",
                "2 <- 8",
                "3 <- 6",
                "4 <- 6",
                "5 <- 6",
                "6 <- 6",
                "7 <- 8",
                "8 <- 0",
                "9 <- 6"
            ],
            "resampled_steps": [
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)",
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)",
                "12 - 7 = 5 (left: 3 5 9)\n4 / 6 = 0.6666666666666666 (left: 0.6666666666666666 10 12)",
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)",
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)",
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)",
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)",
                "12 - 7 = 5 (left: 3 5 9)\n4 / 6 = 0.6666666666666666 (left: 0.6666666666666666 10 12)",
                "9 * 12 = 108 (left: 3 6 108)\n3 / 6 = 0.5 (left: 0.5 108)",
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)"
            ]
        },
        "step_3": {
            "steps": [
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)\n3 * 648 = 1944 (left: 1944)",
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)\n648 - 3 = 645 (left: 645)",
                "12 - 7 = 5 (left: 3 5 9)\n4 / 6 = 0.6666666666666666 (left: 0.6666666666666666 10 12)\n10 / 0.6666666666666666 = 15 (left: 15 12)",
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)\n648 / 3 = 216 (left: 216)",
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)\n648 / 3 = 216 (left: 216 648)",
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)\n648 + 3 = 651 (left: 3 648 651)",
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)\n648 / 3 = 216 (left: 216 648)",
                "12 - 7 = 5 (left: 3 5 9)\n4 / 6 = 0.6666666666666666 (left: 0.6666666666666666 10 12)\n6 + 9 = 15 (left: 3 15)",
                "9 * 12 = 108 (left: 3 6 108)\n3 / 6 = 0.5 (left: 0.5 108)\n0.5 * 108 = 54 (left: 54)",
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)\n3 * 648 = 1944 (left: 1944)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                22.0,
                20.001,
                0.002,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 5",
                "1 <- 5",
                "2 <- 6",
                "3 <- 5",
                "4 <- 5",
                "5 <- 6",
                "6 <- 5",
                "7 <- 6",
                "8 <- 6",
                "9 <- 6"
            ],
            "resampled_steps": [
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)\n648 + 3 = 651 (left: 3 648 651)",
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)\n648 + 3 = 651 (left: 3 648 651)",
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)\n648 / 3 = 216 (left: 216 648)",
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)\n648 + 3 = 651 (left: 3 648 651)",
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)\n648 + 3 = 651 (left: 3 648 651)",
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)\n648 / 3 = 216 (left: 216 648)",
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)\n648 + 3 = 651 (left: 3 648 651)",
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)\n648 / 3 = 216 (left: 216 648)",
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)\n648 / 3 = 216 (left: 216 648)",
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)\n648 / 3 = 216 (left: 216 648)"
            ]
        },
        "step_4": {
            "steps": [
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)\n648 + 3 = 651 (left: 3 648 651)\n648 / 3 = 216 (left: 216 651)",
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)\n648 + 3 = 651 (left: 3 648 651)\n651 - 3 = 648 (left: 648 651)",
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)\n648 / 3 = 216 (left: 216 648)\n648 - 216 = 432 (left: 432)",
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)\n648 + 3 = 651 (left: 3 648 651)\n648 / 3 = 216 (left: 3 216 651)",
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)\n648 + 3 = 651 (left: 3 648 651)\n3 * 648 = 1944 (left: 1944 651)",
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)\n648 / 3 = 216 (left: 216 648)\n216 / 648 = 0.3333333333333333 (left: 0.3333333333333333)",
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)\n648 + 3 = 651 (left: 3 648 651)\n648 / 3 = 216 (left: 216 651)",
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)\n648 / 3 = 216 (left: 216 648)\n216 * 648 = 139968 (left: 139968)",
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)\n648 / 3 = 216 (left: 216 648)\n216 + 648 = 864 (left: 864)",
                "9 * 12 = 108 (left: 3 6 108)\n6 * 108 = 648 (left: 3 648)\n648 / 3 = 216 (left: 216 648)\nInput: 100 50 25"
            ],
            "values": [
                0.003,
                0.002,
                0.003,
                60.0,
                20.002,
                0.002,
                0.001,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.0694585
    },
    "903": {
        "input": "3 4 4 13",
        "step_1": {
            "steps": [
                "3 + 4 = 7 (left: 4 7 13)",
                "13 - 4 = 9 (left: 3 9 4)",
                "13 / 3 = 4.3333 (left: 4.3333 4 13)",
                "3 + 4 = 7 (left: 4 7 13)",
                "4 / 3 = 1.33 (left: 1.33 4 13)",
                "13 - 4 = 9 (left: 3 4 9)",
                "4 / 3 = 1.33 (left: 1.33 4 13)",
                "13 / 3 = 4.33 (left: 4.33 4 13)",
                "4 + 4 = 8 (left: 3 8 13)",
                "13 + 3 = 16 (left: 4 4 16)"
            ],
            "values": [
                41.0,
                41.0,
                1.002,
                21.001,
                2.0,
                20.002,
                2.001,
                3.0,
                60.0,
                21.001
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 0",
                "2 <- 0",
                "3 <- 3",
                "4 <- 0",
                "5 <- 0",
                "6 <- 0",
                "7 <- 0",
                "8 <- 8",
                "9 <- 8"
            ],
            "resampled_steps": [
                "3 + 4 = 7 (left: 4 7 13)",
                "3 + 4 = 7 (left: 4 7 13)",
                "3 + 4 = 7 (left: 4 7 13)",
                "3 + 4 = 7 (left: 4 7 13)",
                "3 + 4 = 7 (left: 4 7 13)",
                "3 + 4 = 7 (left: 4 7 13)",
                "3 + 4 = 7 (left: 4 7 13)",
                "3 + 4 = 7 (left: 4 7 13)",
                "4 + 4 = 8 (left: 3 8 13)",
                "4 + 4 = 8 (left: 3 8 13)"
            ]
        },
        "step_2": {
            "steps": [
                "3 + 4 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)",
                "3 + 4 = 7 (left: 4 7 13)\nPossible next steps:",
                "3 + 4 = 7 (left: 4 7 13)\n13 / 7 = 1.8571 (left: 1.8571 13)",
                "3 + 4 = 7 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)",
                "3 + 4 = 7 (left: 4 7 13)\n13 / 7 = 1.85714285714 (left: 1.85714285714)",
                "3 + 4 = 7 (left: 4 7 13)\n9 - 2 = 7 (left: 3 7)",
                "3 + 4 = 7 (left: 4 7 13)\nInput: 3 5 9 17",
                "3 + 4 = 7 (left: 4 7 13)\n13 - 4 = 9 (left: 9 7)",
                "4 + 4 = 8 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)",
                "4 + 4 = 8 (left: 3 8 13)\n3 + 8 = 11 (left: 8 11 13)"
            ],
            "values": [
                60.0,
                0.003,
                60.0,
                60.0,
                0.002,
                0.0,
                0.003,
                1.001,
                60.0,
                3.0
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 3",
                "2 <- 0",
                "3 <- 2",
                "4 <- 2",
                "5 <- 3",
                "6 <- 0",
                "7 <- 8",
                "8 <- 3",
                "9 <- 0"
            ],
            "resampled_steps": [
                "3 + 4 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)",
                "3 + 4 = 7 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)",
                "3 + 4 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)",
                "3 + 4 = 7 (left: 4 7 13)\n13 / 7 = 1.8571 (left: 1.8571 13)",
                "3 + 4 = 7 (left: 4 7 13)\n13 / 7 = 1.8571 (left: 1.8571 13)",
                "3 + 4 = 7 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)",
                "3 + 4 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)",
                "4 + 4 = 8 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)",
                "3 + 4 = 7 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)",
                "3 + 4 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)"
            ]
        },
        "step_3": {
            "steps": [
                "3 + 4 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "3 + 4 = 7 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n13 - 11 = 2 (left: 2)",
                "3 + 4 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "3 + 4 = 7 (left: 4 7 13)\n13 / 7 = 1.8571 (left: 1.8571 13)\n13 / 1.8571 = 7 (left: 7)",
                "3 + 4 = 7 (left: 4 7 13)\n13 / 7 = 1.8571 (left: 1.8571 13)\n1.8571 + 13 = 14.8571 (left: 14.8571)",
                "3 + 4 = 7 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n11 / 13 = 0.846 (left: 0.846)",
                "3 + 4 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "4 + 4 = 8 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "3 + 4 = 7 (left: 4 7 13)\n4 + 7 = 11 (left: 11 13)\n11 - 13 = -2 (left: -2)",
                "3 + 4 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)"
            ],
            "values": [
                60.0,
                0.001,
                60.0,
                0.001,
                0.003,
                0.003,
                40.0,
                60.0,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 6",
                "2 <- 2",
                "3 <- 7",
                "4 <- 0",
                "5 <- 9",
                "6 <- 9",
                "7 <- 9",
                "8 <- 0",
                "9 <- 6"
            ],
            "resampled_steps": [
                "3 + 4 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "3 + 4 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "3 + 4 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "4 + 4 = 8 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "3 + 4 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "3 + 4 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "3 + 4 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "3 + 4 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "3 + 4 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "3 + 4 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)"
            ]
        },
        "step_4": {
            "steps": [
                "3 + 4 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (3 + 4) * (4 * 13) = 24",
                "3 + 4 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * (3 + (4 * 4)) = 24",
                "3 + 4 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * (3 + 4) * (13 - 4) = 24",
                "4 + 4 = 8 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((3 + 4) + 4) + 13 = 24",
                "3 + 4 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * (3 + 4) * (13 - 6) = 24",
                "3 + 4 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (3 + 4) * (4 * 13) = 24",
                "3 + 4 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (3 + 4) * (4 * 13) = 24",
                "3 + 4 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (3 + 4) * (4 * 13) = 24",
                "3 + 4 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * (3 + 4) * 13 = 24",
                "3 + 4 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * (3 + 4) * 13 = 24"
            ],
            "values": [
                40.001,
                60.0,
                40.001,
                60.0,
                0.003,
                0.003,
                20.002,
                20.002,
                60.0,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.09079400000000001
    },
    "904": {
        "input": "6 7 8 9",
        "step_1": {
            "steps": [
                "6 * 7 = 42 (left: 8 9 42)",
                "8 * 9 = 72 (left: 6 7 72)",
                "9 - 7 = 2 (left: 6 2 8)",
                "9 - 8 = 1 (left: 1 7 9)",
                "9 - 6 = 3 (left: 3 7 8)",
                "8 + 9 = 17 (left: 6 17)",
                "7 - 6 = 1 (left: 1 8 9)",
                "7 * 8 = 56 (left: 6 9 56)",
                "6 + 7 = 13 (left: 8 9 13)",
                "8 + 9 = 17 (left: 6 7 17)"
            ],
            "values": [
                1.002,
                1.002,
                1.002,
                1.002,
                0.003,
                0.001,
                0.003,
                2.001,
                2.001,
                1.002
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 9",
                "2 <- 7",
                "3 <- 7",
                "4 <- 7",
                "5 <- 8",
                "6 <- 0",
                "7 <- 2",
                "8 <- 3",
                "9 <- 8"
            ],
            "resampled_steps": [
                "9 - 7 = 2 (left: 6 2 8)",
                "8 + 9 = 17 (left: 6 7 17)",
                "7 * 8 = 56 (left: 6 9 56)",
                "7 * 8 = 56 (left: 6 9 56)",
                "7 * 8 = 56 (left: 6 9 56)",
                "6 + 7 = 13 (left: 8 9 13)",
                "6 * 7 = 42 (left: 8 9 42)",
                "9 - 7 = 2 (left: 6 2 8)",
                "9 - 8 = 1 (left: 1 7 9)",
                "6 + 7 = 13 (left: 8 9 13)"
            ]
        },
        "step_2": {
            "steps": [
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)",
                "8 + 9 = 17 (left: 6 7 17)\n6 - 7 = -1 (left: -1 17)",
                "7 * 8 = 56 (left: 6 9 56)\n9 - 6 = 3 (left: 3 9 56)",
                "7 * 8 = 56 (left: 6 9 56)\n6 * 9 = 54 (left: 54 56)",
                "7 * 8 = 56 (left: 6 9 56)\n10 - 5 = 5 (left: 3 5)",
                "6 + 7 = 13 (left: 8 9 13)\n13 - 8 = 5 (left: 8 5)",
                "6 * 7 = 42 (left: 8 9 42)\n8 * 9 = 72 (left: 72 42)",
                "9 - 7 = 2 (left: 6 2 8)\n3 / 6 = 0.5 (left: 0.5 8)",
                "9 - 8 = 1 (left: 1 7 9)\n9 - 1 = 8 (left: 7 8)",
                "6 + 7 = 13 (left: 8 9 13)\nPossible next steps:"
            ],
            "values": [
                60.0,
                0.001,
                1.002,
                0.001,
                0.001,
                0.002,
                0.003,
                2.001,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 0",
                "3 <- 0",
                "4 <- 0",
                "5 <- 0",
                "6 <- 0",
                "7 <- 0",
                "8 <- 0",
                "9 <- 0"
            ],
            "resampled_steps": [
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)"
            ]
        },
        "step_3": {
            "steps": [
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)\n5 * 10 = 50 (left: 10 50)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)\n8 / 3 = 2.67 (left: 2.67)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)\nPossible next steps:",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)\n5 * 10 = 50 (left: 10 50)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)\n8 / 3 = 2.67 (left: 2.67 8)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)\n8 / 3 = 2.67 (left: 2.67)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)\n8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)"
            ],
            "values": [
                20.001,
                20.002,
                0.002,
                0.001,
                0.003,
                20.0,
                3.0,
                0.002,
                0.002,
                0.0
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 1",
                "3 <- 5",
                "4 <- 0",
                "5 <- 0",
                "6 <- 5",
                "7 <- 5",
                "8 <- 1",
                "9 <- 6"
            ],
            "resampled_steps": [
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)\n5 * 10 = 50 (left: 10 50)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)\n5 * 10 = 50 (left: 10 50)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)\n5 * 10 = 50 (left: 10 50)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)\n5 * 10 = 50 (left: 10 50)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)\n5 * 10 = 50 (left: 10 50)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)\n5 * 10 = 50 (left: 10 50)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)\n5 * 10 = 50 (left: 10 50)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)\n8 / 3 = 2.67 (left: 2.67 8)"
            ]
        },
        "step_4": {
            "steps": [
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)\n5 * 10 = 50 (left: 10 50)\n3 * 9 = 27 (left: 27 27)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)\n5 * 10 = 50 (left: 10 50)\n50 - 10 = 40 (left: 40)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)\n5 * 10 = 50 (left: 10 50)\n10 * 2 = 20 (left: 20 50)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)\n5 * 10 = 50 (left: 10 50)\n50 * 10 = 500 (left: 500)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n8 + 5 = 13 (left: 13)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n5 + 8 = 13 (left: 13) ",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)\n5 * 10 = 50 (left: 10 50)\n10 + 50 = 60 (left: 60)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)\n5 * 10 = 50 (left: 10 50)\n10 + 50 = 60 (left: 60)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)\n5 * 10 = 50 (left: 10 50)\n50 - 10 = 40 (left: 40)",
                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)\n8 / 3 = 2.67 (left: 2.67 8)\nInput: 5 3"
            ],
            "values": [
                0.003,
                0.002,
                1.0,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.1130015
    },
    "905": {
        "input": "1 11 11 13",
        "step_1": {
            "steps": [
                "1 + 11 = 12 (left: 11 12 13)",
                "13 - 1 = 12 (left: 11 11 12)",
                "1 * 11 = 11 (left: 11 11 13)",
                "13 - 11 = 2 (left: 11 11 2)",
                "11 - 1 = 10 (left: 10 11 13)",
                "11 / 1 = 11 (left: 11 11 13)",
                "1 + 11 = 12 (left: 11 12 13)",
                "13 - 1 = 12 (left: 11 12)",
                "13 - 11 = 2 (left: 1 11 2)",
                "13 - 1 = 12 (left: 11 11 12)"
            ],
            "values": [
                60.0,
                0.003,
                2.001,
                60.0,
                1.002,
                0.003,
                22.0,
                0.003,
                0.001,
                0.003
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 3",
                "3 <- 0",
                "4 <- 0",
                "5 <- 6",
                "6 <- 3",
                "7 <- 3",
                "8 <- 3",
                "9 <- 0"
            ],
            "resampled_steps": [
                "13 - 11 = 2 (left: 11 11 2)",
                "13 - 11 = 2 (left: 11 11 2)",
                "13 - 11 = 2 (left: 11 11 2)",
                "1 + 11 = 12 (left: 11 12 13)",
                "1 + 11 = 12 (left: 11 12 13)",
                "1 + 11 = 12 (left: 11 12 13)",
                "13 - 11 = 2 (left: 11 11 2)",
                "13 - 11 = 2 (left: 11 11 2)",
                "13 - 11 = 2 (left: 11 11 2)",
                "1 + 11 = 12 (left: 11 12 13)"
            ]
        },
        "step_2": {
            "steps": [
                "13 - 11 = 2 (left: 11 11 2)\nPossible next steps:",
                "13 - 11 = 2 (left: 11 11 2)\n3 + 3 = 6 (left: 3 6 3)",
                "13 - 11 = 2 (left: 11 11 2)\n11 / 2 = 5.5 (left: 5.5 11)",
                "1 + 11 = 12 (left: 11 12 13)\n30 * 20 = 600 (left: 25 600)",
                "1 + 11 = 12 (left: 11 12 13)\n11 * 12 = 132 (left: 13)",
                "1 + 11 = 12 (left: 11 12 13)\n11 * 12 = 132 (left: 13 132)",
                "13 - 11 = 2 (left: 11 11 2)\n11 * 2 = 22 (left: 11 22)",
                "13 - 11 = 2 (left: 11 11 2)\n5 / 1 = 5 (left: 12 4 5)",
                "13 - 11 = 2 (left: 11 11 2)\n4 * 4 = 16 (left: 4 16 4)",
                "1 + 11 = 12 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)"
            ],
            "values": [
                0.003,
                2.0,
                1.001,
                60.0,
                0.003,
                0.002,
                0.003,
                1.002,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 8",
                "1 <- 3",
                "2 <- 9",
                "3 <- 3",
                "4 <- 9",
                "5 <- 9",
                "6 <- 9",
                "7 <- 9",
                "8 <- 3",
                "9 <- 8"
            ],
            "resampled_steps": [
                "13 - 11 = 2 (left: 11 11 2)\n4 * 4 = 16 (left: 4 16 4)",
                "1 + 11 = 12 (left: 11 12 13)\n30 * 20 = 600 (left: 25 600)",
                "1 + 11 = 12 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)",
                "1 + 11 = 12 (left: 11 12 13)\n30 * 20 = 600 (left: 25 600)",
                "1 + 11 = 12 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)",
                "1 + 11 = 12 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)",
                "1 + 11 = 12 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)",
                "1 + 11 = 12 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)",
                "1 + 11 = 12 (left: 11 12 13)\n30 * 20 = 600 (left: 25 600)",
                "13 - 11 = 2 (left: 11 11 2)\n4 * 4 = 16 (left: 4 16 4)"
            ]
        },
        "step_3": {
            "steps": [
                "13 - 11 = 2 (left: 11 11 2)\n4 * 4 = 16 (left: 4 16 4)\nInput: 3 9 1",
                "1 + 11 = 12 (left: 11 12 13)\n30 * 20 = 600 (left: 25 600)\n25 / 600 = 0.0416667 (left: 0.0416667)",
                "1 + 11 = 12 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "1 + 11 = 12 (left: 11 12 13)\n30 * 20 = 600 (left: 25 600)\n25 + 600 = 625 (left: 625)",
                "1 + 11 = 12 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "1 + 11 = 12 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "1 + 11 = 12 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "1 + 11 = 12 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "1 + 11 = 12 (left: 11 12 13)\n30 * 20 = 600 (left: 25 600)\n25 + 600 = 625 (left: 625)",
                "13 - 11 = 2 (left: 11 11 2)\n4 * 4 = 16 (left: 4 16 4)\n4 * 16 = 64 (left: 4 64 4)"
            ],
            "values": [
                0.003,
                0.003,
                0.002,
                0.001,
                0.001,
                0.002,
                0.002,
                0.003,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 9",
                "2 <- 9",
                "3 <- 9",
                "4 <- 9",
                "5 <- 9",
                "6 <- 9",
                "7 <- 9",
                "8 <- 9",
                "9 <- 9"
            ],
            "resampled_steps": [
                "13 - 11 = 2 (left: 11 11 2)\n4 * 4 = 16 (left: 4 16 4)\n4 * 16 = 64 (left: 4 64 4)",
                "13 - 11 = 2 (left: 11 11 2)\n4 * 4 = 16 (left: 4 16 4)\n4 * 16 = 64 (left: 4 64 4)",
                "13 - 11 = 2 (left: 11 11 2)\n4 * 4 = 16 (left: 4 16 4)\n4 * 16 = 64 (left: 4 64 4)",
                "13 - 11 = 2 (left: 11 11 2)\n4 * 4 = 16 (left: 4 16 4)\n4 * 16 = 64 (left: 4 64 4)",
                "13 - 11 = 2 (left: 11 11 2)\n4 * 4 = 16 (left: 4 16 4)\n4 * 16 = 64 (left: 4 64 4)",
                "13 - 11 = 2 (left: 11 11 2)\n4 * 4 = 16 (left: 4 16 4)\n4 * 16 = 64 (left: 4 64 4)",
                "13 - 11 = 2 (left: 11 11 2)\n4 * 4 = 16 (left: 4 16 4)\n4 * 16 = 64 (left: 4 64 4)",
                "13 - 11 = 2 (left: 11 11 2)\n4 * 4 = 16 (left: 4 16 4)\n4 * 16 = 64 (left: 4 64 4)",
                "13 - 11 = 2 (left: 11 11 2)\n4 * 4 = 16 (left: 4 16 4)\n4 * 16 = 64 (left: 4 64 4)",
                "13 - 11 = 2 (left: 11 11 2)\n4 * 4 = 16 (left: 4 16 4)\n4 * 16 = 64 (left: 4 64 4)"
            ]
        },
        "step_4": {
            "steps": [
                "13 - 11 = 2 (left: 11 11 2)\n4 * 4 = 16 (left: 4 16 4)\n4 * 16 = 64 (left: 4 64 4)\n4 * 4 = 16 (left: 16 64)",
                "13 - 11 = 2 (left: 11 11 2)\n4 * 4 = 16 (left: 4 16 4)\n4 * 16 = 64 (left: 4 64 4)\n64 / 4 = 16 (left: 16 16)",
                "13 - 11 = 2 (left: 11 11 2)\n4 * 4 = 16 (left: 4 16 4)\n4 * 16 = 64 (left: 4 64 4)\n64 / 4 = 16 (left: 16 16)",
                "13 - 11 = 2 (left: 11 11 2)\n4 * 4 = 16 (left: 4 16 4)\n4 * 16 = 64 (left: 4 64 4)\n64 - 4 = 60 (left: 4 60)",
                "13 - 11 = 2 (left: 11 11 2)\n4 * 4 = 16 (left: 4 16 4)\n4 * 16 = 64 (left: 4 64 4)\n4 + 64 = 68 (left: 68 4)",
                "13 - 11 = 2 (left: 11 11 2)\n4 * 4 = 16 (left: 4 16 4)\n4 * 16 = 64 (left: 4 64 4)\n64 - 4 = 60 (left: 60 4)",
                "13 - 11 = 2 (left: 11 11 2)\n4 * 4 = 16 (left: 4 16 4)\n4 * 16 = 64 (left: 4 64 4)\n9 * 3 = 27 (left: 27)",
                "13 - 11 = 2 (left: 11 11 2)\n4 * 4 = 16 (left: 4 16 4)\n4 * 16 = 64 (left: 4 64 4)\n64 / 4 = 16 (left: 16 4)",
                "13 - 11 = 2 (left: 11 11 2)\n4 * 4 = 16 (left: 4 16 4)\n4 * 16 = 64 (left: 4 64 4)\n4 + 4 = 8 (left: 8 64)",
                "13 - 11 = 2 (left: 11 11 2)\n4 * 4 = 16 (left: 4 16 4)\n4 * 16 = 64 (left: 4 64 4)\n4 + 4 = 8 (left: 8 64)"
            ],
            "values": [
                40.001,
                0.003,
                0.003,
                60.0,
                60.0,
                60.0,
                0.003,
                0.0,
                0.002,
                1.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.137498
    },
    "906": {
        "input": "1 8 10 11",
        "step_1": {
            "steps": [
                "1 * 8 = 8 (left: 8 10 11)",
                "11 - 1 = 10 (left: 8 10 10)",
                "10 + 1 = 11 (left: 8 11)",
                "12 - 3 = 9 (left: 9 9 12)",
                "1 + 8 = 9 (left: 9 10 11)",
                "10 + 1 = 11 (left: 8 11)",
                "10 - 1 = 9 (left: 8 9 11)",
                "5 - 3 = 2 (left: 2 7 8)",
                "10 - 1 = 9 (left: 9 11)",
                "5 * 3 = 15 (left: 8 15 13)"
            ],
            "values": [
                0.001,
                1.002,
                0.003,
                2.001,
                1.002,
                0.001,
                3.0,
                2.001,
                0.001,
                1.001
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 9",
                "2 <- 7",
                "3 <- 6",
                "4 <- 4",
                "5 <- 6",
                "6 <- 6",
                "7 <- 6",
                "8 <- 9",
                "9 <- 9"
            ],
            "resampled_steps": [
                "10 - 1 = 9 (left: 8 9 11)",
                "5 * 3 = 15 (left: 8 15 13)",
                "5 - 3 = 2 (left: 2 7 8)",
                "10 - 1 = 9 (left: 8 9 11)",
                "1 + 8 = 9 (left: 9 10 11)",
                "10 - 1 = 9 (left: 8 9 11)",
                "10 - 1 = 9 (left: 8 9 11)",
                "10 - 1 = 9 (left: 8 9 11)",
                "5 * 3 = 15 (left: 8 15 13)",
                "5 * 3 = 15 (left: 8 15 13)"
            ]
        },
        "step_2": {
            "steps": [
                "10 - 1 = 9 (left: 8 9 11)\n2 * 5 = 10 (left: 1 3 10)",
                "5 * 3 = 15 (left: 8 15 13)\n8 + 15 = 23 (left: 13 23)",
                "5 - 3 = 2 (left: 2 7 8)\n7 - 2 = 5 (left: 5 8)",
                "10 - 1 = 9 (left: 8 9 11)\n10 - 6 = 4 (left: 4 5 10)",
                "1 + 8 = 9 (left: 9 10 11)\n11 - 10 = 1 (left: 9 1)",
                "10 - 1 = 9 (left: 8 9 11)\n8 + 9 = 17 (left: 11 17)",
                "10 - 1 = 9 (left: 8 9 11)\n3 * 5 = 15 (left: 7 13 15)",
                "10 - 1 = 9 (left: 8 9 11)\n8 * 9 = 72 (left: 11 72)",
                "5 * 3 = 15 (left: 8 15 13)\nPossible next steps:",
                "5 * 3 = 15 (left: 8 15 13)\n8 + 15 = 23 (left: 13 23)"
            ],
            "values": [
                3.0,
                0.003,
                0.002,
                2.001,
                1.0,
                0.002,
                1.002,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 3",
                "3 <- 3",
                "4 <- 6",
                "5 <- 0",
                "6 <- 6",
                "7 <- 0",
                "8 <- 6",
                "9 <- 6"
            ],
            "resampled_steps": [
                "10 - 1 = 9 (left: 8 9 11)\n10 - 6 = 4 (left: 4 5 10)",
                "10 - 1 = 9 (left: 8 9 11)\n10 - 6 = 4 (left: 4 5 10)",
                "10 - 1 = 9 (left: 8 9 11)\n10 - 6 = 4 (left: 4 5 10)",
                "10 - 1 = 9 (left: 8 9 11)\n10 - 6 = 4 (left: 4 5 10)",
                "10 - 1 = 9 (left: 8 9 11)\n3 * 5 = 15 (left: 7 13 15)",
                "10 - 1 = 9 (left: 8 9 11)\n2 * 5 = 10 (left: 1 3 10)",
                "10 - 1 = 9 (left: 8 9 11)\n3 * 5 = 15 (left: 7 13 15)",
                "10 - 1 = 9 (left: 8 9 11)\n2 * 5 = 10 (left: 1 3 10)",
                "10 - 1 = 9 (left: 8 9 11)\n3 * 5 = 15 (left: 7 13 15)",
                "10 - 1 = 9 (left: 8 9 11)\n3 * 5 = 15 (left: 7 13 15)"
            ]
        },
        "step_3": {
            "steps": [
                "10 - 1 = 9 (left: 8 9 11)\n10 - 6 = 4 (left: 4 5 10)\n5 * 10 = 50 (left: 4 50)",
                "10 - 1 = 9 (left: 8 9 11)\n10 - 6 = 4 (left: 4 5 10)\n10 - 4 = 6 (left: 6 5)",
                "10 - 1 = 9 (left: 8 9 11)\n10 - 6 = 4 (left: 4 5 10)\n4 + 5 = 9 (left: 9 10)",
                "10 - 1 = 9 (left: 8 9 11)\n10 - 6 = 4 (left: 4 5 10)\n6 * 3 = 18 (left: 18 12)",
                "10 - 1 = 9 (left: 8 9 11)\n3 * 5 = 15 (left: 7 13 15)\n13 / 7 = 1 (left: 1 15)",
                "10 - 1 = 9 (left: 8 9 11)\n2 * 5 = 10 (left: 1 3 10)\n10 / 1 = 10 (left: 3 10)",
                "10 - 1 = 9 (left: 8 9 11)\n3 * 5 = 15 (left: 7 13 15)\n7 * 13 = 91 (left: 91 15)",
                "10 - 1 = 9 (left: 8 9 11)\n2 * 5 = 10 (left: 1 3 10)\n25 / 5 = 5 (left: 5 25)",
                "10 - 1 = 9 (left: 8 9 11)\n3 * 5 = 15 (left: 7 13 15)\n7 + 13 = 20 (left: 15 20)",
                "10 - 1 = 9 (left: 8 9 11)\n3 * 5 = 15 (left: 7 13 15)\n4 / 4 = 1 (left: 1 4 16)"
            ],
            "values": [
                40.001,
                0.002,
                0.002,
                0.003,
                0.001,
                0.002,
                0.0,
                0.002,
                1.002,
                21.001
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 9",
                "3 <- 0",
                "4 <- 9",
                "5 <- 0",
                "6 <- 0",
                "7 <- 0",
                "8 <- 9",
                "9 <- 0"
            ],
            "resampled_steps": [
                "10 - 1 = 9 (left: 8 9 11)\n10 - 6 = 4 (left: 4 5 10)\n5 * 10 = 50 (left: 4 50)",
                "10 - 1 = 9 (left: 8 9 11)\n10 - 6 = 4 (left: 4 5 10)\n5 * 10 = 50 (left: 4 50)",
                "10 - 1 = 9 (left: 8 9 11)\n3 * 5 = 15 (left: 7 13 15)\n4 / 4 = 1 (left: 1 4 16)",
                "10 - 1 = 9 (left: 8 9 11)\n10 - 6 = 4 (left: 4 5 10)\n5 * 10 = 50 (left: 4 50)",
                "10 - 1 = 9 (left: 8 9 11)\n3 * 5 = 15 (left: 7 13 15)\n4 / 4 = 1 (left: 1 4 16)",
                "10 - 1 = 9 (left: 8 9 11)\n10 - 6 = 4 (left: 4 5 10)\n5 * 10 = 50 (left: 4 50)",
                "10 - 1 = 9 (left: 8 9 11)\n10 - 6 = 4 (left: 4 5 10)\n5 * 10 = 50 (left: 4 50)",
                "10 - 1 = 9 (left: 8 9 11)\n10 - 6 = 4 (left: 4 5 10)\n5 * 10 = 50 (left: 4 50)",
                "10 - 1 = 9 (left: 8 9 11)\n3 * 5 = 15 (left: 7 13 15)\n4 / 4 = 1 (left: 1 4 16)",
                "10 - 1 = 9 (left: 8 9 11)\n10 - 6 = 4 (left: 4 5 10)\n5 * 10 = 50 (left: 4 50)"
            ]
        },
        "step_4": {
            "steps": [
                "10 - 1 = 9 (left: 8 9 11)\n10 - 6 = 4 (left: 4 5 10)\n5 * 10 = 50 (left: 4 50)\n4 + 50 = 54 (left: 54)",
                "10 - 1 = 9 (left: 8 9 11)\n10 - 6 = 4 (left: 4 5 10)\n5 * 10 = 50 (left: 4 50)\n2 * 6 = 12 (left: 12 2)",
                "10 - 1 = 9 (left: 8 9 11)\n3 * 5 = 15 (left: 7 13 15)\n4 / 4 = 1 (left: 1 4 16)\n1 + 4 = 5 (left: 5 16)",
                "10 - 1 = 9 (left: 8 9 11)\n10 - 6 = 4 (left: 4 5 10)\n5 * 10 = 50 (left: 4 50)\n10 / 5 = 2 (left: 2)",
                "10 - 1 = 9 (left: 8 9 11)\n3 * 5 = 15 (left: 7 13 15)\n4 / 4 = 1 (left: 1 4 16)\n1 + 4 = 5 (left: 5 16)",
                "10 - 1 = 9 (left: 8 9 11)\n10 - 6 = 4 (left: 4 5 10)\n5 * 10 = 50 (left: 4 50)\n50 - 4 = 46 (left: 46)",
                "10 - 1 = 9 (left: 8 9 11)\n10 - 6 = 4 (left: 4 5 10)\n5 * 10 = 50 (left: 4 50)\nPossible next steps:",
                "10 - 1 = 9 (left: 8 9 11)\n10 - 6 = 4 (left: 4 5 10)\n5 * 10 = 50 (left: 4 50)\n4 * 50 = 200 (left: 200)",
                "10 - 1 = 9 (left: 8 9 11)\n3 * 5 = 15 (left: 7 13 15)\n4 / 4 = 1 (left: 1 4 16)\n1 * 4 = 4 (left: 4)",
                "10 - 1 = 9 (left: 8 9 11)\n10 - 6 = 4 (left: 4 5 10)\n5 * 10 = 50 (left: 4 50)\n4 * 50 = 200 (left: 200)"
            ],
            "values": [
                0.002,
                60.0,
                0.001,
                0.003,
                1.001,
                0.003,
                0.003,
                0.003,
                0.001,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.1655035
    },
    "907": {
        "input": "2 3 6 9",
        "step_1": {
            "steps": [
                "9 - 3 = 6 (left: 2 3 6)",
                "3 + 6 = 9 (left: 2 9 9)",
                "6 + 3 = 9 (left: 2 9 9)",
                "9 - 3 = 6 (left: 2 6 6)",
                "2 + 3 = 5 (left: 5 6 9)",
                "9 / 3 = 3 (left: 2 9 6)",
                "9 / 2 = 4.5 (left: 3 6 9)",
                "2 + 3 = 5 (left: 5 6 9)",
                "3 + 6 = 9 (left: 2 9 9)",
                "6 - 3 = 3 (left: 2 3 9)"
            ],
            "values": [
                22.0,
                20.002,
                0.003,
                40.001,
                3.0,
                3.0,
                1.001,
                3.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 3",
                "3 <- 3",
                "4 <- 0",
                "5 <- 1",
                "6 <- 3",
                "7 <- 0",
                "8 <- 7",
                "9 <- 1"
            ],
            "resampled_steps": [
                "3 + 6 = 9 (left: 2 9 9)",
                "3 + 6 = 9 (left: 2 9 9)",
                "9 - 3 = 6 (left: 2 6 6)",
                "9 - 3 = 6 (left: 2 6 6)",
                "9 - 3 = 6 (left: 2 3 6)",
                "3 + 6 = 9 (left: 2 9 9)",
                "9 - 3 = 6 (left: 2 6 6)",
                "9 - 3 = 6 (left: 2 3 6)",
                "2 + 3 = 5 (left: 5 6 9)",
                "3 + 6 = 9 (left: 2 9 9)"
            ]
        },
        "step_2": {
            "steps": [
                "3 + 6 = 9 (left: 2 9 9)\n9 / 2 = 4.5 (left: 4.5 9)",
                "3 + 6 = 9 (left: 2 9 9)\n2 + 9 = 11 (left: 9 11)",
                "9 - 3 = 6 (left: 2 6 6)\n2 * 6 = 12 (left: 6 12)",
                "9 - 3 = 6 (left: 2 6 6)\n3 + 6 = 9 (left: 6)",
                "9 - 3 = 6 (left: 2 3 6)\n6 / 3 = 2 (left: 2 6)",
                "3 + 6 = 9 (left: 2 9 9)\n9 / 2 = 4.5 (left: 4.5 9)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)",
                "9 - 3 = 6 (left: 2 3 6)\n2 + 3 = 5 (left: 5 6)",
                "2 + 3 = 5 (left: 5 6 9)\n6 - 5 = 1 (left: 1 9)",
                "3 + 6 = 9 (left: 2 9 9)\n9 / 2 = 4.5 (left: 4.5 9)"
            ],
            "values": [
                1.002,
                0.001,
                0.002,
                0.002,
                21.001,
                1.002,
                60.0,
                1.002,
                20.0,
                1.002
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 4",
                "2 <- 6",
                "3 <- 9",
                "4 <- 6",
                "5 <- 8",
                "6 <- 6",
                "7 <- 4",
                "8 <- 6",
                "9 <- 6"
            ],
            "resampled_steps": [
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)",
                "9 - 3 = 6 (left: 2 3 6)\n6 / 3 = 2 (left: 2 6)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)",
                "3 + 6 = 9 (left: 2 9 9)\n9 / 2 = 4.5 (left: 4.5 9)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)",
                "2 + 3 = 5 (left: 5 6 9)\n6 - 5 = 1 (left: 1 9)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)",
                "9 - 3 = 6 (left: 2 3 6)\n6 / 3 = 2 (left: 2 6)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)"
            ]
        },
        "step_3": {
            "steps": [
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n3 / 9 = 0.3333333333333333 (left: 0.3333333333333333)",
                "9 - 3 = 6 (left: 2 3 6)\n6 / 3 = 2 (left: 2 6)\n6 / 2 = 3 (left: 3)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "3 + 6 = 9 (left: 2 9 9)\n9 / 2 = 4.5 (left: 4.5 9)\n12 / 3 = 4 (left: 4 12)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n6 / 4 = 1.5 (left: 1.5)",
                "2 + 3 = 5 (left: 5 6 9)\n6 - 5 = 1 (left: 1 9)\n9 - 1 = 8 (left: 8)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)",
                "9 - 3 = 6 (left: 2 3 6)\n6 / 3 = 2 (left: 2 6)\n2 + 6 = 8 (left: 8)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)"
            ],
            "values": [
                0.003,
                0.003,
                60.0,
                0.003,
                0.001,
                0.002,
                0.003,
                0.002,
                40.0,
                0.002
            ],
            "resampled": [
                "0 <- 8",
                "1 <- 2",
                "2 <- 2",
                "3 <- 2",
                "4 <- 8",
                "5 <- 8",
                "6 <- 2",
                "7 <- 2",
                "8 <- 8",
                "9 <- 2"
            ],
            "resampled_steps": [
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)"
            ]
        },
        "step_4": {
            "steps": [
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (9 - 3) * (6 - 2) = 24",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (9 - 3) * (6 - 2) = 24",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (2 * (9 - 3)) * 6 = 24",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (9 - 3) * (6 - 2) = 24",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (9 - 3) * (6 - 2) = 24",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (9 - 3) * (6 - 2) = 24",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (9 - 3) * (6 - 2) = 24",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (9 - 3) * (6 - 2) = 24",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (9 - 3) * (6 - 2) = 24",
                "9 - 3 = 6 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (9 - 3) * (6 - 2) = 24"
            ],
            "values": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ]
        },
        "results": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            }
        ],
        "cost": 0.18548199999999998
    },
    "908": {
        "input": "1 3 5 9",
        "step_1": {
            "steps": [
                "1 - 3 = -2 (left: -2 5 9)",
                "1 + 3 = 4 (left: 4 5 9)",
                "1 * 9 = 9 (left: 3 5 9)",
                "9 - 1 = 8 (left: 3 5 8)",
                "1 * 5 = 5 (left: 5 3 9)",
                "1 * 3 = 3 (left: 3 5 9)",
                "1 - 3 = -2 (left: -2 5 9)",
                "9 / 3 = 3 (left: 1 3 5)",
                "4 * 6 = 24 (left: 24 10 15)",
                "1 + 5 = 6 (left: 6 3 9)"
            ],
            "values": [
                40.001,
                2.0,
                40.001,
                3.0,
                60.0,
                60.0,
                21.001,
                2.001,
                1.002,
                1.002
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 4",
                "2 <- 5",
                "3 <- 0",
                "4 <- 0",
                "5 <- 7",
                "6 <- 2",
                "7 <- 3",
                "8 <- 0",
                "9 <- 2"
            ],
            "resampled_steps": [
                "1 - 3 = -2 (left: -2 5 9)",
                "1 * 5 = 5 (left: 5 3 9)",
                "1 * 3 = 3 (left: 3 5 9)",
                "1 - 3 = -2 (left: -2 5 9)",
                "1 - 3 = -2 (left: -2 5 9)",
                "9 / 3 = 3 (left: 1 3 5)",
                "1 * 9 = 9 (left: 3 5 9)",
                "9 - 1 = 8 (left: 3 5 8)",
                "1 - 3 = -2 (left: -2 5 9)",
                "1 * 9 = 9 (left: 3 5 9)"
            ]
        },
        "step_2": {
            "steps": [
                "1 - 3 = -2 (left: -2 5 9)\n-2 * 5 = -10 (left: -10 9)",
                "1 * 5 = 5 (left: 5 3 9)\n8 - 2 = 6 (left: 4 6 8)",
                "1 * 3 = 3 (left: 3 5 9)\n9 - 5 = 4 (left: 3 4)",
                "1 - 3 = -2 (left: -2 5 9)\n9 / -2 = -4.5 (left: -4.5)",
                "1 - 3 = -2 (left: -2 5 9)\n9 / -2 = -4.5 (left: -4.5)",
                "9 / 3 = 3 (left: 1 3 5)\n1 + 3 = 4 (left: 4 5)",
                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 9 15)",
                "9 - 1 = 8 (left: 3 5 8)\n3 * 8 = 24 (left: 5 24)",
                "1 - 3 = -2 (left: -2 5 9)\n9 - 5 = 4 (left: -2 4)",
                "1 * 9 = 9 (left: 3 5 9)\n5 / 3 = 1.6666666666666667 (left: 1.6666666666666667 9)"
            ],
            "values": [
                0.003,
                60.0,
                21.0,
                0.001,
                0.002,
                3.0,
                41.0,
                0.003,
                0.003,
                1.001
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 1",
                "2 <- 2",
                "3 <- 6",
                "4 <- 1",
                "5 <- 2",
                "6 <- 6",
                "7 <- 1",
                "8 <- 6",
                "9 <- 2"
            ],
            "resampled_steps": [
                "1 * 3 = 3 (left: 3 5 9)\n9 - 5 = 4 (left: 3 4)",
                "1 * 5 = 5 (left: 5 3 9)\n8 - 2 = 6 (left: 4 6 8)",
                "1 * 3 = 3 (left: 3 5 9)\n9 - 5 = 4 (left: 3 4)",
                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 9 15)",
                "1 * 5 = 5 (left: 5 3 9)\n8 - 2 = 6 (left: 4 6 8)",
                "1 * 3 = 3 (left: 3 5 9)\n9 - 5 = 4 (left: 3 4)",
                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 9 15)",
                "1 * 5 = 5 (left: 5 3 9)\n8 - 2 = 6 (left: 4 6 8)",
                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 9 15)",
                "1 * 3 = 3 (left: 3 5 9)\n9 - 5 = 4 (left: 3 4)"
            ]
        },
        "step_3": {
            "steps": [
                "1 * 3 = 3 (left: 3 5 9)\n9 - 5 = 4 (left: 3 4)\n5 - 5 = 0 (left: 0)",
                "1 * 5 = 5 (left: 5 3 9)\n8 - 2 = 6 (left: 4 6 8)\n3 * 7 = 21 (left: 9 21)",
                "1 * 3 = 3 (left: 3 5 9)\n9 - 5 = 4 (left: 3 4)\n4 / 3 = 1.33 (left: 1.33)",
                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 9 15)\n9 - 15 = -6 (left: -6)",
                "1 * 5 = 5 (left: 5 3 9)\n8 - 2 = 6 (left: 4 6 8)\n8 / 4 = 2 (left: 2 6)",
                "1 * 3 = 3 (left: 3 5 9)\n9 - 5 = 4 (left: 3 4)\n3 / 4 = 0.75 (left: 0.75)",
                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 9 15)\n9 * 15 = 135 (left: 135)",
                "1 * 5 = 5 (left: 5 3 9)\n8 - 2 = 6 (left: 4 6 8)\n8 / 4 = 2 (left: 2 6)",
                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 9 15)\n15 / 9 = 1.67 (left: 1.67)",
                "1 * 3 = 3 (left: 3 5 9)\n9 - 5 = 4 (left: 3 4)\n4 - 3 = 1 (left: 1)"
            ],
            "values": [
                0.0,
                0.003,
                0.001,
                0.002,
                0.003,
                0.001,
                0.002,
                0.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 4",
                "2 <- 4",
                "3 <- 4",
                "4 <- 1",
                "5 <- 9",
                "6 <- 1",
                "7 <- 3",
                "8 <- 1",
                "9 <- 1"
            ],
            "resampled_steps": [
                "1 * 3 = 3 (left: 3 5 9)\n9 - 5 = 4 (left: 3 4)\n4 - 3 = 1 (left: 1)",
                "1 * 5 = 5 (left: 5 3 9)\n8 - 2 = 6 (left: 4 6 8)\n8 / 4 = 2 (left: 2 6)",
                "1 * 5 = 5 (left: 5 3 9)\n8 - 2 = 6 (left: 4 6 8)\n8 / 4 = 2 (left: 2 6)",
                "1 * 5 = 5 (left: 5 3 9)\n8 - 2 = 6 (left: 4 6 8)\n8 / 4 = 2 (left: 2 6)",
                "1 * 5 = 5 (left: 5 3 9)\n8 - 2 = 6 (left: 4 6 8)\n3 * 7 = 21 (left: 9 21)",
                "1 * 3 = 3 (left: 3 5 9)\n9 - 5 = 4 (left: 3 4)\n4 - 3 = 1 (left: 1)",
                "1 * 5 = 5 (left: 5 3 9)\n8 - 2 = 6 (left: 4 6 8)\n3 * 7 = 21 (left: 9 21)",
                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 9 15)\n9 - 15 = -6 (left: -6)",
                "1 * 5 = 5 (left: 5 3 9)\n8 - 2 = 6 (left: 4 6 8)\n3 * 7 = 21 (left: 9 21)",
                "1 * 5 = 5 (left: 5 3 9)\n8 - 2 = 6 (left: 4 6 8)\n3 * 7 = 21 (left: 9 21)"
            ]
        },
        "step_4": {
            "steps": [
                "1 * 3 = 3 (left: 3 5 9)\n9 - 5 = 4 (left: 3 4)\n4 - 3 = 1 (left: 1)\n1 + 1 = 2",
                "1 * 5 = 5 (left: 5 3 9)\n8 - 2 = 6 (left: 4 6 8)\n8 / 4 = 2 (left: 2 6)\n6 / 2 = 3 (left: 3)",
                "1 * 5 = 5 (left: 5 3 9)\n8 - 2 = 6 (left: 4 6 8)\n8 / 4 = 2 (left: 2 6)\n6 - 2 = 4 (left: 4)",
                "1 * 5 = 5 (left: 5 3 9)\n8 - 2 = 6 (left: 4 6 8)\n8 / 4 = 2 (left: 2 6)\n2 + 6 = 8 (left: 8)",
                "1 * 5 = 5 (left: 5 3 9)\n8 - 2 = 6 (left: 4 6 8)\n3 * 7 = 21 (left: 9 21)\n9 * 21 = 189 (left: 189)",
                "1 * 3 = 3 (left: 3 5 9)\n9 - 5 = 4 (left: 3 4)\n4 - 3 = 1 (left: 1)\nThere are no possible next steps with the input of 1.",
                "1 * 5 = 5 (left: 5 3 9)\n8 - 2 = 6 (left: 4 6 8)\n3 * 7 = 21 (left: 9 21)\n10 - 5 = 5 (left: 5 15)",
                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 9 15)\n9 - 15 = -6 (left: -6)\nThere are no possible next steps as the target number (-6) cannot be reached with the available numbers (2, 8, 8, 14) using basic arithmetic operations.",
                "1 * 5 = 5 (left: 5 3 9)\n8 - 2 = 6 (left: 4 6 8)\n3 * 7 = 21 (left: 9 21)\nInput: 5 10 15",
                "1 * 5 = 5 (left: 5 3 9)\n8 - 2 = 6 (left: 4 6 8)\n3 * 7 = 21 (left: 9 21)\n5 / 5 = 1 (left: 1)"
            ],
            "values": [
                0.003,
                0.003,
                0.0,
                0.001,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.207983
    },
    "909": {
        "input": "3 3 7 12",
        "step_1": {
            "steps": [
                "12 - 7 = 5 (left: 3 5 12)",
                "7 - 3 = 4 (left: 3 4 12)",
                "12 / 3 = 4 (left: 3 4 12)",
                "7 * 3 = 21 (left: 21 3 12)",
                "7 - 3 = 4 (left: 4 3 12)",
                "3 + 7 = 10 (left: 10 3 12)",
                "3 * 3 = 9 (left: 9 7 12)",
                "12 - 7 = 5 (left: 3 5 12)",
                "12 / 3 = 4 (left: 3 7 4)",
                "12 - 7 = 5 (left: 3 5 12)"
            ],
            "values": [
                2.001,
                2.001,
                60.0,
                60.0,
                41.0,
                1.002,
                2.001,
                21.001,
                3.0,
                2.001
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 3",
                "2 <- 4",
                "3 <- 5",
                "4 <- 4",
                "5 <- 4",
                "6 <- 4",
                "7 <- 2",
                "8 <- 7",
                "9 <- 3"
            ],
            "resampled_steps": [
                "12 / 3 = 4 (left: 3 4 12)",
                "7 * 3 = 21 (left: 21 3 12)",
                "7 - 3 = 4 (left: 4 3 12)",
                "3 + 7 = 10 (left: 10 3 12)",
                "7 - 3 = 4 (left: 4 3 12)",
                "7 - 3 = 4 (left: 4 3 12)",
                "7 - 3 = 4 (left: 4 3 12)",
                "12 / 3 = 4 (left: 3 4 12)",
                "12 - 7 = 5 (left: 3 5 12)",
                "7 * 3 = 21 (left: 21 3 12)"
            ]
        },
        "step_2": {
            "steps": [
                "12 / 3 = 4 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)",
                "7 * 3 = 21 (left: 21 3 12)\n21 * 3 = 63 (left: 63 12)",
                "7 - 3 = 4 (left: 4 3 12)\nPossible next steps:",
                "3 + 7 = 10 (left: 10 3 12)\n10 - 3 = 7 (left: 7 3 12)",
                "7 - 3 = 4 (left: 4 3 12)\n12 - 4 = 8 (left: 8 12)",
                "7 - 3 = 4 (left: 4 3 12)\n11 + 7 = 18 (left: 5 18 2)",
                "7 - 3 = 4 (left: 4 3 12)\nInput: 5 5 20",
                "12 / 3 = 4 (left: 3 4 12)\n3 * 4 = 12 (left: 12 12)",
                "12 - 7 = 5 (left: 3 5 12)\nPossible next steps:",
                "7 * 3 = 21 (left: 21 3 12)\n21 + 3 = 24 (left: 12 24)"
            ],
            "values": [
                60.0,
                0.001,
                0.003,
                1.002,
                0.002,
                2.0,
                0.003,
                60.0,
                0.003,
                21.001
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 0",
                "2 <- 0",
                "3 <- 0",
                "4 <- 7",
                "5 <- 0",
                "6 <- 0",
                "7 <- 0",
                "8 <- 7",
                "9 <- 0"
            ],
            "resampled_steps": [
                "7 * 3 = 21 (left: 21 3 12)\n21 + 3 = 24 (left: 12 24)",
                "12 / 3 = 4 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)",
                "12 / 3 = 4 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)",
                "12 / 3 = 4 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)",
                "12 / 3 = 4 (left: 3 4 12)\n3 * 4 = 12 (left: 12 12)",
                "12 / 3 = 4 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)",
                "12 / 3 = 4 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)",
                "12 / 3 = 4 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)",
                "12 / 3 = 4 (left: 3 4 12)\n3 * 4 = 12 (left: 12 12)",
                "12 / 3 = 4 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)"
            ]
        },
        "step_3": {
            "steps": [
                "7 * 3 = 21 (left: 21 3 12)\n21 + 3 = 24 (left: 12 24)\n12 + 24 = 36 (left: 36)",
                "12 / 3 = 4 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n3 + 8 = 11 (left: 11) ",
                "12 / 3 = 4 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n3 + 8 = 11 (left: 11)",
                "12 / 3 = 4 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5)",
                "12 / 3 = 4 (left: 3 4 12)\n3 * 4 = 12 (left: 12 12)\n12 + 12 = 24",
                "12 / 3 = 4 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5)",
                "12 / 3 = 4 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "12 / 3 = 4 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 8 24)",
                "12 / 3 = 4 (left: 3 4 12)\n3 * 4 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "12 / 3 = 4 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n8 / 3 = 2.67 (left: 2.67)"
            ],
            "values": [
                20.001,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                60.0,
                1.001,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 6",
                "2 <- 6",
                "3 <- 6",
                "4 <- 6",
                "5 <- 6",
                "6 <- 6",
                "7 <- 0",
                "8 <- 0",
                "9 <- 6"
            ],
            "resampled_steps": [
                "12 / 3 = 4 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "12 / 3 = 4 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "12 / 3 = 4 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "12 / 3 = 4 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "12 / 3 = 4 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "12 / 3 = 4 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "12 / 3 = 4 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "7 * 3 = 21 (left: 21 3 12)\n21 + 3 = 24 (left: 12 24)\n12 + 24 = 36 (left: 36)",
                "7 * 3 = 21 (left: 21 3 12)\n21 + 3 = 24 (left: 12 24)\n12 + 24 = 36 (left: 36)",
                "12 / 3 = 4 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)"
            ]
        },
        "step_4": {
            "steps": [
                "12 / 3 = 4 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: 3 * (12 / 3) * 8 = 24",
                "12 / 3 = 4 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: 3 * (12 - (12 / 3)) = 24",
                "12 / 3 = 4 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (3 * (12 / 3)) - 8 = 24",
                "12 / 3 = 4 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (12 / 3) * (12 - 4) = 24",
                "12 / 3 = 4 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: 3 * (12 / 3) * 8 = 24",
                "12 / 3 = 4 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: 3 * (12 / 3) * 8 = 24",
                "12 / 3 = 4 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (12 / 3) * (12 - 4) = 24",
                "7 * 3 = 21 (left: 21 3 12)\n21 + 3 = 24 (left: 12 24)\n12 + 24 = 36 (left: 36)\n36 / 18 = 2 (left: 2)",
                "7 * 3 = 21 (left: 21 3 12)\n21 + 3 = 24 (left: 12 24)\n12 + 24 = 36 (left: 36)\n36 + 2 = 38",
                "12 / 3 = 4 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (12 / 3) * (12 - 4) = 24"
            ],
            "values": [
                0.003,
                60.0,
                60.0,
                20.002,
                0.003,
                0.003,
                20.002,
                0.002,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.22841100000000003
    },
    "910": {
        "input": "4 5 7 9",
        "step_1": {
            "steps": [
                "9 - 7 = 2 (left: 4 5 2)",
                "Possible next steps:",
                "5 + 7 = 12 (left: 4 9)",
                "5 + 7 = 12 (left: 4 9)",
                "5 - 4 = 1 (left: 1 7 9)",
                "5 + 7 = 12 (left: 4 12 9)",
                "4 + 5 = 9 (left: 7 9)",
                "5 + 7 = 12 (left: 1 3 12)",
                "7 * 9 = 63 (left: 4 5 63)",
                "7 - 9 = -2 (left: 4 5 -2)"
            ],
            "values": [
                3.0,
                0.003,
                41.0,
                0.002,
                1.001,
                0.003,
                2.001,
                60.0,
                0.003,
                41.0
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 2",
                "2 <- 0",
                "3 <- 0",
                "4 <- 2",
                "5 <- 2",
                "6 <- 6",
                "7 <- 2",
                "8 <- 7",
                "9 <- 2"
            ],
            "resampled_steps": [
                "9 - 7 = 2 (left: 4 5 2)",
                "5 + 7 = 12 (left: 4 9)",
                "9 - 7 = 2 (left: 4 5 2)",
                "9 - 7 = 2 (left: 4 5 2)",
                "5 + 7 = 12 (left: 4 9)",
                "5 + 7 = 12 (left: 4 9)",
                "4 + 5 = 9 (left: 7 9)",
                "5 + 7 = 12 (left: 4 9)",
                "5 + 7 = 12 (left: 1 3 12)",
                "5 + 7 = 12 (left: 4 9)"
            ]
        },
        "step_2": {
            "steps": [
                "9 - 7 = 2 (left: 4 5 2)\n2 - 4 = -2 (left: -2 5)",
                "5 + 7 = 12 (left: 4 9)\n7 - 5 = 2 (left: 2 7)",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)",
                "9 - 7 = 2 (left: 4 5 2)\n3 * 7 = 21 (left: 10 21)",
                "5 + 7 = 12 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)",
                "5 + 7 = 12 (left: 4 9)\n4 + 9 = 13 (left: 9 13)",
                "4 + 5 = 9 (left: 7 9)\n7 * 9 = 63 (left: 63)",
                "5 + 7 = 12 (left: 4 9)\n9 - 4 = 5 (left: 5)",
                "5 + 7 = 12 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)",
                "5 + 7 = 12 (left: 4 9)\n4 + 9 = 13 (left: 13)"
            ],
            "values": [
                1.001,
                0.002,
                60.0,
                0.003,
                3.0,
                0.002,
                0.003,
                0.003,
                40.0,
                0.003
            ],
            "resampled": [
                "0 <- 8",
                "1 <- 2",
                "2 <- 2",
                "3 <- 2",
                "4 <- 2",
                "5 <- 2",
                "6 <- 2",
                "7 <- 2",
                "8 <- 2",
                "9 <- 8"
            ],
            "resampled_steps": [
                "5 + 7 = 12 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)",
                "5 + 7 = 12 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)"
            ]
        },
        "step_3": {
            "steps": [
                "5 + 7 = 12 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)\n4 / 1 = 4 (left: 4)",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)\n1 + 2 = 3 (left: 3)",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)\n1 * 2 = 2 (left: 2)",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)\n2 / 1 = 2 (left: 2)",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)\n2 / 1 = 2 (left: 2)",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)\n2 - 1 = 1 (left: 1)",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)\n1 * 2 = 2 (left: 2) ",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)\n2 / 1 = 2 (left: 2)",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)\n1 * 2 = 2 (left: 2)",
                "5 + 7 = 12 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)\n1 * 4 = 4 (left: 4)"
            ],
            "values": [
                0.002,
                0.002,
                0.002,
                0.002,
                0.003,
                0.003,
                0.001,
                0.003,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 8",
                "1 <- 2",
                "2 <- 3",
                "3 <- 1",
                "4 <- 8",
                "5 <- 3",
                "6 <- 2",
                "7 <- 3",
                "8 <- 8",
                "9 <- 1"
            ],
            "resampled_steps": [
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)\n1 * 2 = 2 (left: 2)",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)\n1 * 2 = 2 (left: 2)",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)\n2 / 1 = 2 (left: 2)",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)\n1 + 2 = 3 (left: 3)",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)\n1 * 2 = 2 (left: 2)",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)\n2 / 1 = 2 (left: 2)",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)\n1 * 2 = 2 (left: 2)",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)\n2 / 1 = 2 (left: 2)",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)\n1 * 2 = 2 (left: 2)",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)\n1 + 2 = 3 (left: 3)"
            ]
        },
        "step_4": {
            "steps": [
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)\n1 * 2 = 2 (left: 2)\n2 - 2 = 0 (left: 0)",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)\n1 * 2 = 2 (left: 2)\nThere are no possible next steps with only one number provided.",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)\n2 / 1 = 2 (left: 2)\nThere are no possible next steps as there are not enough numbers provided to perform any operations.",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)\n1 + 2 = 3 (left: 3)\n3 * 8 = 24 (left: 8 24)",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)\n1 * 2 = 2 (left: 2)\nNo possible next steps with only one number provided.",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)\n2 / 1 = 2 (left: 2)\n2 + 2 = 4",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)\n1 * 2 = 2 (left: 2)\n2 / 2 = 1 (left: 1 2)",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)\n2 / 1 = 2 (left: 2)\n2 + 2 = 4",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)\n1 * 2 = 2 (left: 2)\nThere is only one number provided, so there are no possible next steps.",
                "9 - 7 = 2 (left: 4 5 2)\n5 - 4 = 1 (left: 1 2)\n1 + 2 = 3 (left: 3)\nThere are no possible next steps with the input 3."
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                20.002,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.249206
    },
    "911": {
        "input": "1 2 8 13",
        "step_1": {
            "steps": [
                "8 + 1 = 9 (left: 2 9 13)",
                "13 - 2 = 11 (left: 1 8 11)",
                "2 * 8 = 16 (left: 1 16 13)",
                "13 - 1 = 12 (left: 2 8 12)",
                "13 - 1 = 12 (left: 2 8 12)",
                "1 * 2 = 2 (left: 2 8 13)",
                "1 + 2 = 3 (left: 3 8 13)",
                "13 - 8 = 5 (left: 1 2 5)",
                "13 - 8 = 5 (left: 1 2 5)",
                "5 * 7 = 35 (left: 4 35 12)"
            ],
            "values": [
                1.002,
                1.002,
                2.001,
                0.003,
                3.0,
                1.002,
                60.0,
                2.001,
                0.003,
                3.0
            ],
            "resampled": [
                "0 <- 5",
                "1 <- 6",
                "2 <- 6",
                "3 <- 6",
                "4 <- 6",
                "5 <- 6",
                "6 <- 6",
                "7 <- 9",
                "8 <- 6",
                "9 <- 6"
            ],
            "resampled_steps": [
                "1 * 2 = 2 (left: 2 8 13)",
                "1 + 2 = 3 (left: 3 8 13)",
                "1 + 2 = 3 (left: 3 8 13)",
                "1 + 2 = 3 (left: 3 8 13)",
                "1 + 2 = 3 (left: 3 8 13)",
                "1 + 2 = 3 (left: 3 8 13)",
                "1 + 2 = 3 (left: 3 8 13)",
                "5 * 7 = 35 (left: 4 35 12)",
                "1 + 2 = 3 (left: 3 8 13)",
                "1 + 2 = 3 (left: 3 8 13)"
            ]
        },
        "step_2": {
            "steps": [
                "1 * 2 = 2 (left: 2 8 13)\nPossible next steps:",
                "1 + 2 = 3 (left: 3 8 13)\n8 - 3 = 5 (left: 5 13)",
                "1 + 2 = 3 (left: 3 8 13)\n13 / 3 = 4.33 (approximately) (left: 4.33 8)",
                "1 + 2 = 3 (left: 3 8 13)\n9 / 4 = 2.25 (left: 2.25 5)",
                "1 + 2 = 3 (left: 3 8 13)\nInput: 12 4 2",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)",
                "1 + 2 = 3 (left: 3 8 13)\n8 - 3 = 5 (left: 5 13)",
                "5 * 7 = 35 (left: 4 35 12)\n4 * 35 = 140 (left: 12 140)",
                "1 + 2 = 3 (left: 3 8 13)\n3 * 8 = 24 (left: 24 13)",
                "1 + 2 = 3 (left: 3 8 13)\n8 / 3 = 2.67 (left: 2.67 13)"
            ],
            "values": [
                0.003,
                0.002,
                1.002,
                2.001,
                0.003,
                60.0,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 5",
                "2 <- 5",
                "3 <- 5",
                "4 <- 2",
                "5 <- 5",
                "6 <- 5",
                "7 <- 5",
                "8 <- 5",
                "9 <- 5"
            ],
            "resampled_steps": [
                "1 + 2 = 3 (left: 3 8 13)\n9 / 4 = 2.25 (left: 2.25 5)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)",
                "1 + 2 = 3 (left: 3 8 13)\n13 / 3 = 4.33 (approximately) (left: 4.33 8)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)"
            ]
        },
        "step_3": {
            "steps": [
                "1 + 2 = 3 (left: 3 8 13)\n9 / 4 = 2.25 (left: 2.25 5)\n9 / 3 = 3 (left: 3 9 27)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n13 - 11 = 2 (left: 2)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 * 13 = 143 (left: 143)",
                "1 + 2 = 3 (left: 3 8 13)\n13 / 3 = 4.33 (approximately) (left: 4.33 8)\n8 / 4.33 = 1.8472 (left: 1.8472 8)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n13 - 11 = 2 (left: 2)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 * 13 = 143 (left: 143)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 / 13 = 0.846 (left: 0.846)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)"
            ],
            "values": [
                60.0,
                60.0,
                0.003,
                0.003,
                3.0,
                40.0,
                0.0,
                0.003,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 1",
                "2 <- 9",
                "3 <- 9",
                "4 <- 1",
                "5 <- 1",
                "6 <- 5",
                "7 <- 9",
                "8 <- 9",
                "9 <- 5"
            ],
            "resampled_steps": [
                "1 + 2 = 3 (left: 3 8 13)\n9 / 4 = 2.25 (left: 2.25 5)\n9 / 3 = 3 (left: 3 9 27)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)"
            ]
        },
        "step_4": {
            "steps": [
                "1 + 2 = 3 (left: 3 8 13)\n9 / 4 = 2.25 (left: 2.25 5)\n9 / 3 = 3 (left: 3 9 27)\n3 + 9 = 12 (left: 12 27)",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 2) + 8) + 13 = 24",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 2) + 8) + 13 = 24",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 2) + 8) + 13 = 24",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 2) + 8) + 13 = 24",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 2) + 8) + 13 = 24",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 2) + 8) + 13 = 24",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 2) + 8) + 13 = 24",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 2) + 8) + 13 = 24",
                "1 + 2 = 3 (left: 3 8 13)\n3 + 8 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 2) + 8) + 13 = 24"
            ],
            "values": [
                0.003,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            }
        ],
        "cost": 0.27101549999999996
    },
    "912": {
        "input": "4 6 6 9",
        "step_1": {
            "steps": [
                "9 - 6 = 3 (left: 3 6 6)",
                "9 / 4 = 2.25 (left: 2.25 6 6)",
                "9 - 6 = 3 (left: 4 6 3)",
                "9 - 6 = 3 (left: 4 6 3)",
                "6 / 4 = 1.5 (left: 1.5 6 9)",
                "9 / 3 = 3 (left: 4 6 3)",
                "6 - 4 = 2 (left: 2 6 9)",
                "9 - 6 = 3 (left: 3 6 6)",
                "9 - 6 = 3 (left: 4 6 3)",
                "6 * 4 = 24 (left: 24 6 9)"
            ],
            "values": [
                2.001,
                2.0,
                41.0,
                41.0,
                2.001,
                41.0,
                1.002,
                22.0,
                22.0,
                22.0
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 9",
                "2 <- 2",
                "3 <- 2",
                "4 <- 2",
                "5 <- 2",
                "6 <- 9",
                "7 <- 5",
                "8 <- 7",
                "9 <- 5"
            ],
            "resampled_steps": [
                "9 / 4 = 2.25 (left: 2.25 6 6)",
                "6 * 4 = 24 (left: 24 6 9)",
                "9 - 6 = 3 (left: 4 6 3)",
                "9 - 6 = 3 (left: 4 6 3)",
                "9 - 6 = 3 (left: 4 6 3)",
                "9 - 6 = 3 (left: 4 6 3)",
                "6 * 4 = 24 (left: 24 6 9)",
                "9 / 3 = 3 (left: 4 6 3)",
                "9 - 6 = 3 (left: 3 6 6)",
                "9 / 3 = 3 (left: 4 6 3)"
            ]
        },
        "step_2": {
            "steps": [
                "9 / 4 = 2.25 (left: 2.25 6 6)\n5 + 10 = 15 (left: 15 15)",
                "6 * 4 = 24 (left: 24 6 9)\n24 / 9 = 2 (left: 2 9)",
                "9 - 6 = 3 (left: 4 6 3)\n4 + 6 = 10 (left: 10 3)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)",
                "9 - 6 = 3 (left: 4 6 3)\n3 - 4 = -1 (left: -1 3)",
                "9 - 6 = 3 (left: 4 6 3)\n5 * 7 = 35 (left: 35)",
                "6 * 4 = 24 (left: 24 6 9)\n9 / 6 = 1.5 (left: 1.5 24)",
                "9 / 3 = 3 (left: 4 6 3)\n6 / 3 = 2 (left: 2 2)",
                "9 - 6 = 3 (left: 3 6 6)\n6 / 3 = 2 (left: 2 6)",
                "9 / 3 = 3 (left: 4 6 3)\n2 + 3 = 5 (left: 5 9)"
            ],
            "values": [
                0.003,
                0.001,
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                2.001,
                0.002,
                1.002
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 3",
                "3 <- 3",
                "4 <- 3",
                "5 <- 3",
                "6 <- 9",
                "7 <- 3",
                "8 <- 3",
                "9 <- 3"
            ],
            "resampled_steps": [
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)",
                "9 / 3 = 3 (left: 4 6 3)\n2 + 3 = 5 (left: 5 9)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)"
            ]
        },
        "step_3": {
            "steps": [
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)\n4 * 9 = 36 (left: 9)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)\n4 + 9 = 13 (left: 9 13)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)\n4 / 9 = 0.444 (left: 0.444)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)\nPossible next steps:",
                "9 / 3 = 3 (left: 4 6 3)\n2 + 3 = 5 (left: 5 9)\n5 + 9 = 14 (left: 14)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)\n9 - 4 = 5 (left: 5 9)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)\n9 - 4 = 5 (left: 5)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)\n4 * 9 = 36 (left: 9 36)"
            ],
            "values": [
                0.002,
                0.001,
                0.001,
                2.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                20.002
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 9",
                "2 <- 9",
                "3 <- 9",
                "4 <- 9",
                "5 <- 9",
                "6 <- 9",
                "7 <- 9",
                "8 <- 9",
                "9 <- 9"
            ],
            "resampled_steps": [
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)\n4 * 9 = 36 (left: 9 36)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)\n4 * 9 = 36 (left: 9 36)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)\n4 * 9 = 36 (left: 9 36)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)\n4 * 9 = 36 (left: 9 36)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)\n4 * 9 = 36 (left: 9 36)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)\n4 * 9 = 36 (left: 9 36)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)\n4 * 9 = 36 (left: 9 36)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)\n4 * 9 = 36 (left: 9 36)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)\n4 * 9 = 36 (left: 9 36)"
            ]
        },
        "step_4": {
            "steps": [
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)\n3 + 3 = 6 (left: 2 6 3)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)\n4 * 9 = 36 (left: 9 36)\n9 * 4 = 36 (left: 36)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)\n4 * 9 = 36 (left: 9 36)\n36 / 9 = 4 (left: 4)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)\n4 * 9 = 36 (left: 9 36)\n36 - 9 = 27 (left: 27)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)\n4 * 9 = 36 (left: 9 36)\n36 / 9 = 4 (left: 4)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)\n4 * 9 = 36 (left: 9 36)\n9 + 36 = 45 (left: 45)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)\n4 * 9 = 36 (left: 9 36)\n9 * 4 = 36 (left: 36)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)\n4 * 9 = 36 (left: 9 36)\n9 + 36 = 45 (left: 45)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)\n4 * 9 = 36 (left: 9 36)\n5 + 25 = 30 (left: 30)",
                "9 - 6 = 3 (left: 4 6 3)\n6 + 3 = 9 (left: 4 9)\n4 * 9 = 36 (left: 9 36)\n36 - 9 = 27 (left: 27)"
            ],
            "values": [
                3.0,
                40.0,
                0.002,
                0.002,
                0.001,
                0.002,
                0.003,
                0.003,
                20.002,
                0.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.29310499999999995
    },
    "913": {
        "input": "1 4 4 8",
        "step_1": {
            "steps": [
                "8 - 4 = 4 (left: 1 4 4)",
                "8 - 4 = 4 (left: 1 4 4)",
                "1 + 4 = 5 (left: 4 5 8)",
                "8 - 4 = 4 (left: 1 4 8)",
                "4 + 4 = 8 (left: 4 8 8)",
                "4 * 1 = 4 (left: 4 4 8)",
                "4 / 1 = 4 (left: 4 4 8)",
                "8 - 4 = 4 (left: 1 4 4)",
                "4 * 1 = 4 (left: 4 4 8)",
                "4 / 1 = 4 (left: 4 4 8)"
            ],
            "values": [
                21.001,
                2.0,
                3.0,
                1.002,
                60.0,
                60.0,
                41.0,
                21.001,
                41.0,
                20.002
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 5",
                "2 <- 4",
                "3 <- 4",
                "4 <- 9",
                "5 <- 6",
                "6 <- 5",
                "7 <- 8",
                "8 <- 5",
                "9 <- 4"
            ],
            "resampled_steps": [
                "4 + 4 = 8 (left: 4 8 8)",
                "4 * 1 = 4 (left: 4 4 8)",
                "4 + 4 = 8 (left: 4 8 8)",
                "4 + 4 = 8 (left: 4 8 8)",
                "4 / 1 = 4 (left: 4 4 8)",
                "4 / 1 = 4 (left: 4 4 8)",
                "4 * 1 = 4 (left: 4 4 8)",
                "4 * 1 = 4 (left: 4 4 8)",
                "4 * 1 = 4 (left: 4 4 8)",
                "4 + 4 = 8 (left: 4 8 8)"
            ]
        },
        "step_2": {
            "steps": [
                "4 + 4 = 8 (left: 4 8 8)\n8 / 4 = 2 (left: 2 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)",
                "4 + 4 = 8 (left: 4 8 8)\n6 - 3 = 3 (left: 2 3)",
                "4 + 4 = 8 (left: 4 8 8)\n8 / 4 = 2 (left: 2 8)",
                "4 / 1 = 4 (left: 4 4 8)\n8 / 4 = 2 (left: 2 8)",
                "4 / 1 = 4 (left: 4 4 8)\n4 - 4 = 0 (left: 0 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)",
                "4 * 1 = 4 (left: 4 4 8)\n5 - 2 = 3 (left: 3 7)",
                "4 * 1 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)",
                "4 + 4 = 8 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8)"
            ],
            "values": [
                0.0,
                20.002,
                0.001,
                0.003,
                0.002,
                0.0,
                40.001,
                3.0,
                21.001,
                1.002
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 6",
                "2 <- 8",
                "3 <- 6",
                "4 <- 8",
                "5 <- 9",
                "6 <- 6",
                "7 <- 6",
                "8 <- 8",
                "9 <- 6"
            ],
            "resampled_steps": [
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)",
                "4 + 4 = 8 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)"
            ]
        },
        "step_3": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 * 8 = 128 (left: 128)",
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n8 * 16 = 128 (left: 128)",
                "4 * 1 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)\n8 - 1 = 7 (left: 7)",
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 - 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)\n1 + 8 = 9 (left: 8)",
                "4 + 4 = 8 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8)\n7 - 5 = 2 (left: 2 7)",
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 - 8 = 8 (left: 8 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 - 8 = 8 (left: 8 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)\n8 / 1 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 - 8 = 8 (left: 8)"
            ],
            "values": [
                0.003,
                0.002,
                0.002,
                0.003,
                0.002,
                0.001,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 4",
                "2 <- 2",
                "3 <- 8",
                "4 <- 6",
                "5 <- 4",
                "6 <- 6",
                "7 <- 4",
                "8 <- 0",
                "9 <- 7"
            ],
            "resampled_steps": [
                "4 * 1 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)\n8 - 1 = 7 (left: 7)",
                "4 * 1 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)\n1 + 8 = 9 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)\n8 - 1 = 7 (left: 7)",
                "4 * 1 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)\n8 / 1 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 - 8 = 8 (left: 8 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)\n1 + 8 = 9 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 - 8 = 8 (left: 8 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)\n1 + 8 = 9 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 * 8 = 128 (left: 128)",
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 - 8 = 8 (left: 8 8)"
            ]
        },
        "step_4": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)\n8 - 1 = 7 (left: 7)\n7 * 8 = 56 (left: 56)",
                "4 * 1 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)\n1 + 8 = 9 (left: 8)\nInvalid input. Please provide at least two numbers to perform operations on.",
                "4 * 1 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)\n8 - 1 = 7 (left: 7)\n7 / 8 = 0.875 (left: 0.875)",
                "4 * 1 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)\n8 / 1 = 8 (left: 8)\n8 - 8 = 0 (left: 0)",
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 - 8 = 8 (left: 8 8)\n8 - 8 = 0 (left: 0)",
                "4 * 1 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)\n1 + 8 = 9 (left: 8)\nNo possible next steps with just one number.",
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 - 8 = 8 (left: 8 8)\n8 / 8 = 1 (left: 1)",
                "4 * 1 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)\n1 + 8 = 9 (left: 8)\n8 - 2 = 6 (left: 6)",
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 * 8 = 128 (left: 128)\n128 - 2 = 126 (left: 126)",
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 - 8 = 8 (left: 8 8)\n8 / 8 = 1 (left: 1)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.0,
                0.003,
                0.001,
                0.002,
                0.003,
                0.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.3120185
    },
    "914": {
        "input": "1 5 10 11",
        "step_1": {
            "steps": [
                "10 + 1 = 11 (left: 5 10 11)",
                "11 - 1 = 10 (left: 5 10 10)",
                "11 - 5 = 6 (left: 1 6 10)",
                "1 * 5 = 5 (left: 5 10 11)",
                "10 + 1 = 11 (left: 5 11 11)",
                "10 - 1 = 9 (left: 1 5 11)",
                "5 * 10 = 50 (left: 1 50 11)",
                "1 * 5 = 5 (left: 5 10 11)",
                "5 * 10 = 50 (left: 1 50 11)",
                "10 * 1 = 10 (left: 5 11 10)"
            ],
            "values": [
                3.0,
                2.001,
                1.001,
                3.0,
                1.002,
                1.001,
                2.0,
                3.0,
                20.0,
                3.0
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 0",
                "2 <- 8",
                "3 <- 9",
                "4 <- 9",
                "5 <- 8",
                "6 <- 5",
                "7 <- 6",
                "8 <- 8",
                "9 <- 8"
            ],
            "resampled_steps": [
                "11 - 5 = 6 (left: 1 6 10)",
                "10 + 1 = 11 (left: 5 10 11)",
                "5 * 10 = 50 (left: 1 50 11)",
                "10 * 1 = 10 (left: 5 11 10)",
                "10 * 1 = 10 (left: 5 11 10)",
                "5 * 10 = 50 (left: 1 50 11)",
                "10 - 1 = 9 (left: 1 5 11)",
                "5 * 10 = 50 (left: 1 50 11)",
                "5 * 10 = 50 (left: 1 50 11)",
                "5 * 10 = 50 (left: 1 50 11)"
            ]
        },
        "step_2": {
            "steps": [
                "11 - 5 = 6 (left: 1 6 10)\n6 * 1 = 6 (left: 6 10)",
                "10 + 1 = 11 (left: 5 10 11)\n9 / 3 = 3 (left: 3 9 12)",
                "5 * 10 = 50 (left: 1 50 11)\n50 / 1 = 50 (left: 11 50)",
                "10 * 1 = 10 (left: 5 11 10)\n11 - 5 = 6 (left: 6 10)",
                "10 * 1 = 10 (left: 5 11 10)\n11 / 5 = 2.2 (left: 2.2 10)",
                "5 * 10 = 50 (left: 1 50 11)\n11 - 1 = 10 (left: 10 11)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)",
                "5 * 10 = 50 (left: 1 50 11)\n50 - 1 = 49 (left: 11 49)",
                "5 * 10 = 50 (left: 1 50 11)\n2 * 3 = 6 (left: 6 7 8)",
                "5 * 10 = 50 (left: 1 50 11)\n11 / 1 = 11 (left: 11 11)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.001,
                0.001,
                21.001,
                0.002,
                2.001,
                1.002
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 6",
                "2 <- 6",
                "3 <- 6",
                "4 <- 6",
                "5 <- 6",
                "6 <- 6",
                "7 <- 6",
                "8 <- 6",
                "9 <- 6"
            ],
            "resampled_steps": [
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)"
            ]
        },
        "step_3": {
            "steps": [
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)\n9 - 4 = 5 (left: 5 9)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)\n9 - 4 = 5 (left: 5 9)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)\n4 + 9 = 13 (left: 9 13)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)\n9 + 4 = 13 (left: 4 13)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)\n4 * 9 = 36 (left: 9 36)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)\n9 - 4 = 5 (left: 5)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)\nPossible next steps:",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)\n4 * 9 = 36 (left: 9)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)\n6 - 3 = 3 (left: 3 3)"
            ],
            "values": [
                2.001,
                0.003,
                0.003,
                0.002,
                1.001,
                0.002,
                0.002,
                0.003,
                0.002,
                0.001
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 0",
                "2 <- 0",
                "3 <- 4",
                "4 <- 0",
                "5 <- 0",
                "6 <- 0",
                "7 <- 4",
                "8 <- 0",
                "9 <- 0"
            ],
            "resampled_steps": [
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)\n9 + 4 = 13 (left: 4 13)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)\n9 + 4 = 13 (left: 4 13)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)\n9 + 4 = 13 (left: 4 13)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)"
            ]
        },
        "step_4": {
            "steps": [
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)\n9 + 4 = 13 (left: 4 13)\n4 + 13 = 17 (left: 17)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)\n5 - 3 = 2 (left: 2)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)\n2.25 - 9 = -6.75 (left: -6.75 9)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)\n9 + 4 = 13 (left: 4 13)\n4 + 13 = 17 (left: 13 17)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)\n2.25 + 9 = 11.25 (left: 11.25)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)\n9 - 2.25 = 6.75 (left: 6.75)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)\nInput: 3 6",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)\n9 + 4 = 13 (left: 4 13)\n4 * 13 = 52 (left: 52)",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)\nInput: 3 5 1",
                "10 - 1 = 9 (left: 1 5 11)\n12 / 3 = 4 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)\n9 - 2.25 = 6.75 (left: 6.75)"
            ],
            "values": [
                0.003,
                0.001,
                1.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.002,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.334326
    },
    "915": {
        "input": "3 4 6 11",
        "step_1": {
            "steps": [
                "11 - 6 = 5 (left: 3 4 5)",
                "6 + 4 = 10 (left: 3 10 11)",
                "4 - 3 = 1 (left: 1 6 11)",
                "11 - 3 = 8 (left: 4 6 8)",
                "6 + 11 = 17 (left: 3 4 17)",
                "4 + 6 = 10 (left: 3 10 11)",
                "3 + 4 = 7 (left: 6 7 11)",
                "4 + 6 = 10 (left: 3 10 11)",
                "3 + 4 = 7 (left: 6 7 11)",
                "2 + 3 = 5 (left: 1 4 5)"
            ],
            "values": [
                2.001,
                1.002,
                0.003,
                60.0,
                0.002,
                0.003,
                1.002,
                0.003,
                22.0,
                2.0
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 3",
                "3 <- 9",
                "4 <- 3",
                "5 <- 3",
                "6 <- 0",
                "7 <- 8",
                "8 <- 3",
                "9 <- 3"
            ],
            "resampled_steps": [
                "11 - 3 = 8 (left: 4 6 8)",
                "11 - 3 = 8 (left: 4 6 8)",
                "11 - 3 = 8 (left: 4 6 8)",
                "2 + 3 = 5 (left: 1 4 5)",
                "11 - 3 = 8 (left: 4 6 8)",
                "11 - 3 = 8 (left: 4 6 8)",
                "11 - 6 = 5 (left: 3 4 5)",
                "3 + 4 = 7 (left: 6 7 11)",
                "11 - 3 = 8 (left: 4 6 8)",
                "11 - 3 = 8 (left: 4 6 8)"
            ]
        },
        "step_2": {
            "steps": [
                "11 - 3 = 8 (left: 4 6 8)\n4 * 6 = 24 (left: 8 24)",
                "11 - 3 = 8 (left: 4 6 8)\n5 * 7 = 35 (left: 3 35 9)",
                "11 - 3 = 8 (left: 4 6 8)\n6 * 4 = 24 (left: 8 24)",
                "2 + 3 = 5 (left: 1 4 5)\n4 * 1 = 4 (left: 4 5)",
                "11 - 3 = 8 (left: 4 6 8)\n8 / 4 = 2 (left: 2 6)",
                "11 - 3 = 8 (left: 4 6 8)\n6 + 4 = 10 (left: 8 10)",
                "11 - 6 = 5 (left: 3 4 5)\n5 * 3 = 15 (left: 4 15)",
                "3 + 4 = 7 (left: 6 7 11)\n11 / 7 = 1.5714285714285714 (left: 1.5714285714285714)",
                "11 - 3 = 8 (left: 4 6 8)\n9 - 7 = 2 (left: 2 2 9)",
                "11 - 3 = 8 (left: 4 6 8)\n3 + 5 = 8 (left: 7 8 9)"
            ],
            "values": [
                21.001,
                2.001,
                0.003,
                41.0,
                2.001,
                41.0,
                1.002,
                0.003,
                22.0,
                22.0
            ],
            "resampled": [
                "0 <- 5",
                "1 <- 0",
                "2 <- 8",
                "3 <- 9",
                "4 <- 0",
                "5 <- 3",
                "6 <- 0",
                "7 <- 5",
                "8 <- 0",
                "9 <- 3"
            ],
            "resampled_steps": [
                "11 - 3 = 8 (left: 4 6 8)\n6 + 4 = 10 (left: 8 10)",
                "11 - 3 = 8 (left: 4 6 8)\n4 * 6 = 24 (left: 8 24)",
                "11 - 3 = 8 (left: 4 6 8)\n9 - 7 = 2 (left: 2 2 9)",
                "11 - 3 = 8 (left: 4 6 8)\n3 + 5 = 8 (left: 7 8 9)",
                "11 - 3 = 8 (left: 4 6 8)\n4 * 6 = 24 (left: 8 24)",
                "2 + 3 = 5 (left: 1 4 5)\n4 * 1 = 4 (left: 4 5)",
                "11 - 3 = 8 (left: 4 6 8)\n4 * 6 = 24 (left: 8 24)",
                "11 - 3 = 8 (left: 4 6 8)\n6 + 4 = 10 (left: 8 10)",
                "11 - 3 = 8 (left: 4 6 8)\n4 * 6 = 24 (left: 8 24)",
                "2 + 3 = 5 (left: 1 4 5)\n4 * 1 = 4 (left: 4 5)"
            ]
        },
        "step_3": {
            "steps": [
                "11 - 3 = 8 (left: 4 6 8)\n6 + 4 = 10 (left: 8 10)\n14 / 8 = 1.75 (left: 1.75)",
                "11 - 3 = 8 (left: 4 6 8)\n4 * 6 = 24 (left: 8 24)\n24 - 8 = 16 (left: 16)",
                "11 - 3 = 8 (left: 4 6 8)\n9 - 7 = 2 (left: 2 2 9)\nPossible next steps:",
                "11 - 3 = 8 (left: 4 6 8)\n3 + 5 = 8 (left: 7 8 9)\n8 / 9 = 0.888 (left: 7 0.888)",
                "11 - 3 = 8 (left: 4 6 8)\n4 * 6 = 24 (left: 8 24)\n8 + 24 = 32 (left: 24 32)",
                "2 + 3 = 5 (left: 1 4 5)\n4 * 1 = 4 (left: 4 5)\n5 - 4 = 1 (left: 1 5)",
                "11 - 3 = 8 (left: 4 6 8)\n4 * 6 = 24 (left: 8 24)\n8 + 24 = 32 (left: 32)",
                "11 - 3 = 8 (left: 4 6 8)\n6 + 4 = 10 (left: 8 10)\n8 + 10 = 18 (left: 18)",
                "11 - 3 = 8 (left: 4 6 8)\n4 * 6 = 24 (left: 8 24)\n8 + 24 = 32 (left: 32)",
                "2 + 3 = 5 (left: 1 4 5)\n4 * 1 = 4 (left: 4 5)\n5 - 4 = 1 (left: 1)"
            ],
            "values": [
                0.003,
                0.001,
                0.003,
                2.0,
                0.003,
                0.001,
                0.003,
                0.001,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 3",
                "3 <- 3",
                "4 <- 3",
                "5 <- 3",
                "6 <- 3",
                "7 <- 3",
                "8 <- 3",
                "9 <- 3"
            ],
            "resampled_steps": [
                "11 - 3 = 8 (left: 4 6 8)\n3 + 5 = 8 (left: 7 8 9)\n8 / 9 = 0.888 (left: 7 0.888)",
                "11 - 3 = 8 (left: 4 6 8)\n3 + 5 = 8 (left: 7 8 9)\n8 / 9 = 0.888 (left: 7 0.888)",
                "11 - 3 = 8 (left: 4 6 8)\n3 + 5 = 8 (left: 7 8 9)\n8 / 9 = 0.888 (left: 7 0.888)",
                "11 - 3 = 8 (left: 4 6 8)\n3 + 5 = 8 (left: 7 8 9)\n8 / 9 = 0.888 (left: 7 0.888)",
                "11 - 3 = 8 (left: 4 6 8)\n3 + 5 = 8 (left: 7 8 9)\n8 / 9 = 0.888 (left: 7 0.888)",
                "11 - 3 = 8 (left: 4 6 8)\n3 + 5 = 8 (left: 7 8 9)\n8 / 9 = 0.888 (left: 7 0.888)",
                "11 - 3 = 8 (left: 4 6 8)\n3 + 5 = 8 (left: 7 8 9)\n8 / 9 = 0.888 (left: 7 0.888)",
                "11 - 3 = 8 (left: 4 6 8)\n3 + 5 = 8 (left: 7 8 9)\n8 / 9 = 0.888 (left: 7 0.888)",
                "11 - 3 = 8 (left: 4 6 8)\n3 + 5 = 8 (left: 7 8 9)\n8 / 9 = 0.888 (left: 7 0.888)",
                "11 - 3 = 8 (left: 4 6 8)\n3 + 5 = 8 (left: 7 8 9)\n8 / 9 = 0.888 (left: 7 0.888)"
            ]
        },
        "step_4": {
            "steps": [
                "11 - 3 = 8 (left: 4 6 8)\n3 + 5 = 8 (left: 7 8 9)\n8 / 9 = 0.888 (left: 7 0.888)\n7 - 0.888 = 6.112 (left: 0.888)",
                "11 - 3 = 8 (left: 4 6 8)\n3 + 5 = 8 (left: 7 8 9)\n8 / 9 = 0.888 (left: 7 0.888)\n7 + 0.888 = 7.888 (left: 0.888 7.888)",
                "11 - 3 = 8 (left: 4 6 8)\n3 + 5 = 8 (left: 7 8 9)\n8 / 9 = 0.888 (left: 7 0.888)\n7 * 0.888 = 6.216 (left: 0.888 6.216)",
                "11 - 3 = 8 (left: 4 6 8)\n3 + 5 = 8 (left: 7 8 9)\n8 / 9 = 0.888 (left: 7 0.888)\n7 + 0.888 = 7.888 (left: 7.888)",
                "11 - 3 = 8 (left: 4 6 8)\n3 + 5 = 8 (left: 7 8 9)\n8 / 9 = 0.888 (left: 7 0.888)\n7 / 0.888 = 7.883 (left: 7.883 0.888)",
                "11 - 3 = 8 (left: 4 6 8)\n3 + 5 = 8 (left: 7 8 9)\n8 / 9 = 0.888 (left: 7 0.888)\n7 * 0.888 = 6.216 (left: 6.216)",
                "11 - 3 = 8 (left: 4 6 8)\n3 + 5 = 8 (left: 7 8 9)\n8 / 9 = 0.888 (left: 7 0.888)\n7 + 0.888 = 7.888 (left: 0.888 7.888)",
                "11 - 3 = 8 (left: 4 6 8)\n3 + 5 = 8 (left: 7 8 9)\n8 / 9 = 0.888 (left: 7 0.888)\n7 - 0.888 = 6.112 (left: 0.888 6.112)",
                "11 - 3 = 8 (left: 4 6 8)\n3 + 5 = 8 (left: 7 8 9)\n8 / 9 = 0.888 (left: 7 0.888)\n7 / 0.888 = 7.883 (left: 0.888 7.883)",
                "11 - 3 = 8 (left: 4 6 8)\n3 + 5 = 8 (left: 7 8 9)\n8 / 9 = 0.888 (left: 7 0.888)\n7 + 0.888 = 7.888 (left: 0.888 7.888)"
            ],
            "values": [
                0.003,
                0.002,
                3.0,
                0.001,
                2.0,
                0.003,
                3.0,
                3.0,
                3.0,
                1.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.358919
    },
    "916": {
        "input": "2 4 8 9",
        "step_1": {
            "steps": [
                "9 - 8 = 1 (left: 2 4 1)",
                "8 - 4 = 4 (left: 2 4 9)",
                "9 - 2 = 7 (left: 2 4 7)",
                "4 * 2 = 8 (left: 8 8 9)",
                "4 * 2 = 8 (left: 8 8 9)",
                "8 + 2 = 10 (left: 4 10 9)",
                "4 + 2 = 6 (left: 6 8 9)",
                "9 - 4 = 5 (left: 2 5 8)",
                "2 + 4 = 6 (left: 6 8 9)",
                "9 / 4 = 2.25 (left: 2.25 8 9)"
            ],
            "values": [
                0.003,
                0.003,
                2.001,
                0.003,
                0.003,
                21.001,
                2.001,
                2.001,
                3.0,
                2.001
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 5",
                "2 <- 5",
                "3 <- 5",
                "4 <- 5",
                "5 <- 5",
                "6 <- 5",
                "7 <- 5",
                "8 <- 2",
                "9 <- 5"
            ],
            "resampled_steps": [
                "9 - 2 = 7 (left: 2 4 7)",
                "8 + 2 = 10 (left: 4 10 9)",
                "8 + 2 = 10 (left: 4 10 9)",
                "8 + 2 = 10 (left: 4 10 9)",
                "8 + 2 = 10 (left: 4 10 9)",
                "8 + 2 = 10 (left: 4 10 9)",
                "8 + 2 = 10 (left: 4 10 9)",
                "8 + 2 = 10 (left: 4 10 9)",
                "9 - 2 = 7 (left: 2 4 7)",
                "8 + 2 = 10 (left: 4 10 9)"
            ]
        },
        "step_2": {
            "steps": [
                "9 - 2 = 7 (left: 2 4 7)\n7 - 4 = 3 (left: 2 3)",
                "8 + 2 = 10 (left: 4 10 9)\n12 / 15 = 0.8 (left: 0.8 15)",
                "8 + 2 = 10 (left: 4 10 9)\n9 - 4 = 5 (left: 5 10)",
                "8 + 2 = 10 (left: 4 10 9)\n10 - 4 = 6 (left: 6 9)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)",
                "8 + 2 = 10 (left: 4 10 9)\n9 / 4 = 2.25 (left: 2.25)",
                "8 + 2 = 10 (left: 4 10 9)\n9 + 4 = 13 (left: 10 13)",
                "8 + 2 = 10 (left: 4 10 9)\n7 / 2 = 3.5 (left: 3.5 5)",
                "9 - 2 = 7 (left: 2 4 7)\n7 - 4 = 3 (left: 2 3)",
                "8 + 2 = 10 (left: 4 10 9)\n10 / 4 = 2.5 (left: 2.5 9)"
            ],
            "values": [
                1.002,
                0.0,
                1.002,
                0.003,
                60.0,
                0.003,
                0.003,
                1.002,
                1.001,
                1.002
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 4",
                "2 <- 4",
                "3 <- 4",
                "4 <- 4",
                "5 <- 4",
                "6 <- 4",
                "7 <- 4",
                "8 <- 4",
                "9 <- 4"
            ],
            "resampled_steps": [
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)"
            ]
        },
        "step_3": {
            "steps": [
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)\n5 + 1 = 6 (left: 6 5)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)\n5 / 1 = 5 (left: 5 5)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)\n5 / 1 = 5 (left: 5 5)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)\n5 / 1 = 5 (left: 5 5)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)\n5 - 1 = 4 (left: 4 5)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)\n5 - 1 = 4 (left: 4 5)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)\n16 - 4 = 12 (left: 2 8 12)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)\n5 / 1 = 5 (left: 5 5)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)\n5 + 1 = 6 (left: 5 6)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)\n5 / 1 = 5 (left: 5 5)"
            ],
            "values": [
                0.003,
                1.002,
                0.003,
                0.002,
                3.0,
                60.0,
                1.002,
                0.002,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 5",
                "1 <- 5",
                "2 <- 5",
                "3 <- 5",
                "4 <- 5",
                "5 <- 5",
                "6 <- 5",
                "7 <- 5",
                "8 <- 5",
                "9 <- 5"
            ],
            "resampled_steps": [
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)\n5 - 1 = 4 (left: 4 5)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)\n5 - 1 = 4 (left: 4 5)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)\n5 - 1 = 4 (left: 4 5)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)\n5 - 1 = 4 (left: 4 5)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)\n5 - 1 = 4 (left: 4 5)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)\n5 - 1 = 4 (left: 4 5)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)\n5 - 1 = 4 (left: 4 5)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)\n5 - 1 = 4 (left: 4 5)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)\n5 - 1 = 4 (left: 4 5)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)\n5 - 1 = 4 (left: 4 5)"
            ]
        },
        "step_4": {
            "steps": [
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)\n5 - 1 = 4 (left: 4 5)\n5 / 4 = 1.25 (left: 1.25)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)\n5 - 1 = 4 (left: 4 5)\n4 * 5 = 20 (left: 20)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)\n5 - 1 = 4 (left: 4 5)\n5 - 4 = 1 (left: 1 5)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)\n5 - 1 = 4 (left: 4 5)\n4 * 5 = 20 (left: 20)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)\n5 - 1 = 4 (left: 4 5)\n10 - 3 = 7 (left: 7 3)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)\n5 - 1 = 4 (left: 4 5)\n4 + 5 = 9 (left: 9)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)\n5 - 1 = 4 (left: 4 5)\n4 / 5 = 0.8 (left: 0.8 5)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)\n5 - 1 = 4 (left: 4 5)\n10 + 2 = 12 (left: 12)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)\n5 - 1 = 4 (left: 4 5)\n4 * 5 = 20 (left: 20)",
                "8 + 2 = 10 (left: 4 10 9)\n5 / 5 = 1 (left: 5 1 5)\n5 - 1 = 4 (left: 4 5)\n5 / 4 = 1.25 (left: 1.25)"
            ],
            "values": [
                0.003,
                0.003,
                60.0,
                0.001,
                1.0,
                0.0,
                0.002,
                0.003,
                0.002,
                0.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.382145
    },
    "917": {
        "input": "1 4 5 13",
        "step_1": {
            "steps": [
                "13 / 1 = 13 (left: 4 5 13)",
                "Input: 3 6 9 12",
                "1 + 4 = 5 (left: 5 5 13)",
                "1 + 4 = 5 (left: 5 5 13)",
                "1 * 4 = 4 (left: 4 5 13)",
                "13 - 4 = 9 (left: 1 5 9)",
                "13 - 1 = 12 (left: 4 5 12)",
                "13 - 5 = 8 (left: 1 4 8)",
                "1 + 4 = 5 (left: 5 5 13)",
                "5 * 4 = 20 (left: 1 13 20)"
            ],
            "values": [
                1.002,
                0.003,
                60.0,
                1.002,
                1.002,
                1.001,
                2.001,
                20.002,
                22.0,
                1.002
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 2",
                "2 <- 8",
                "3 <- 2",
                "4 <- 7",
                "5 <- 2",
                "6 <- 2",
                "7 <- 2",
                "8 <- 3",
                "9 <- 7"
            ],
            "resampled_steps": [
                "1 * 4 = 4 (left: 4 5 13)",
                "1 + 4 = 5 (left: 5 5 13)",
                "1 + 4 = 5 (left: 5 5 13)",
                "1 + 4 = 5 (left: 5 5 13)",
                "13 - 5 = 8 (left: 1 4 8)",
                "1 + 4 = 5 (left: 5 5 13)",
                "1 + 4 = 5 (left: 5 5 13)",
                "1 + 4 = 5 (left: 5 5 13)",
                "1 + 4 = 5 (left: 5 5 13)",
                "13 - 5 = 8 (left: 1 4 8)"
            ]
        },
        "step_2": {
            "steps": [
                "1 * 4 = 4 (left: 4 5 13)\n12 / 7 = 1.714 (left: 1.714 3)",
                "1 + 4 = 5 (left: 5 5 13)\n5 + 5 = 10 (left: 10 13)",
                "1 + 4 = 5 (left: 5 5 13)\n5 / 5 = 1 (left: 1 13)",
                "1 + 4 = 5 (left: 5 5 13)\n13 - 5 = 8 (left: 5 8)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)",
                "1 + 4 = 5 (left: 5 5 13)\nPossible next steps:",
                "1 + 4 = 5 (left: 5 5 13)\n5 + 13 = 18 (left: 5 18)",
                "1 + 4 = 5 (left: 5 5 13)\n6 / 3 = 2 (left: 2 9 12)",
                "1 + 4 = 5 (left: 5 5 13)\n5 / 5 = 1 (left: 1 13)",
                "13 - 5 = 8 (left: 1 4 8)\n4 + 8 = 12 (left: 1 12)"
            ],
            "values": [
                0.0,
                0.003,
                0.001,
                0.002,
                2.001,
                0.003,
                0.002,
                1.002,
                0.001,
                1.001
            ],
            "resampled": [
                "0 <- 7",
                "1 <- 7",
                "2 <- 4",
                "3 <- 9",
                "4 <- 4",
                "5 <- 4",
                "6 <- 4",
                "7 <- 4",
                "8 <- 4",
                "9 <- 4"
            ],
            "resampled_steps": [
                "1 + 4 = 5 (left: 5 5 13)\n6 / 3 = 2 (left: 2 9 12)",
                "1 + 4 = 5 (left: 5 5 13)\n6 / 3 = 2 (left: 2 9 12)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)",
                "13 - 5 = 8 (left: 1 4 8)\n4 + 8 = 12 (left: 1 12)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)"
            ]
        },
        "step_3": {
            "steps": [
                "1 + 4 = 5 (left: 5 5 13)\n6 / 3 = 2 (left: 2 9 12)\n2 + 9 = 11 (left: 11 12)",
                "1 + 4 = 5 (left: 5 5 13)\n6 / 3 = 2 (left: 2 9 12)\n2 + 9 = 11 (left: 11 12)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)\n12 * 6 = 72 (left: 72)",
                "13 - 5 = 8 (left: 1 4 8)\n4 + 8 = 12 (left: 1 12)\n12 / 1 = 12 (left: 12)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)\nInput: 9 4 6 3 12",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)\n27 / 6 = 4.5 (left: 4.5 12)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)\n27 / 6 = 4.5 (left: 4.5 12)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)\n6 * 27 = 162 (left: 12 162)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)\n27 / 12 = 2.25 (left: 2.25)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)\n27 - 6 = 21 (left: 21 12)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.001,
                60.0,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 7",
                "1 <- 7",
                "2 <- 7",
                "3 <- 7",
                "4 <- 7",
                "5 <- 7",
                "6 <- 7",
                "7 <- 7",
                "8 <- 7",
                "9 <- 7"
            ],
            "resampled_steps": [
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)\n6 * 27 = 162 (left: 12 162)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)\n6 * 27 = 162 (left: 12 162)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)\n6 * 27 = 162 (left: 12 162)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)\n6 * 27 = 162 (left: 12 162)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)\n6 * 27 = 162 (left: 12 162)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)\n6 * 27 = 162 (left: 12 162)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)\n6 * 27 = 162 (left: 12 162)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)\n6 * 27 = 162 (left: 12 162)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)\n6 * 27 = 162 (left: 12 162)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)\n6 * 27 = 162 (left: 12 162)"
            ]
        },
        "step_4": {
            "steps": [
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)\n6 * 27 = 162 (left: 12 162)\n162 / 12 = 13.5 (left: 12 13.5)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)\n6 * 27 = 162 (left: 12 162)\n12 * 2 = 24 (left: 24 162)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)\n6 * 27 = 162 (left: 12 162)\n162 / 12 = 13.5 (left: 13.5)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)\n6 * 27 = 162 (left: 12 162)\n162 - 12 = 150 (left: 150)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)\n6 * 27 = 162 (left: 12 162)\n12 * 162 = 1944 (left: 1944)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)\n6 * 27 = 162 (left: 12 162)\n12 * 162 = 1944 (left: 1944)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)\n6 * 27 = 162 (left: 12 162)\n12 - 2 = 10 (left: 10 162)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)\n6 * 27 = 162 (left: 12 162)\n12 + 162 = 174 (left: 174)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)\n6 * 27 = 162 (left: 12 162)\n12 * 162 = 1944 (left: 1944)",
                "13 - 5 = 8 (left: 1 4 8)\n3 * 9 = 27 (left: 6 27 12)\n6 * 27 = 162 (left: 12 162)\n12 * 2 = 24 (left: 24 162)"
            ],
            "values": [
                0.003,
                60.0,
                0.003,
                0.002,
                0.003,
                0.003,
                1.002,
                0.003,
                0.002,
                21.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.4063775
    },
    "918": {
        "input": "2 2 7 12",
        "step_1": {
            "steps": [
                "12 - 7 = 5 (left: 2 5 5)",
                "2 + 2 = 4 (left: 4 7 12)",
                "2 * 7 = 14 (left: 14 12)",
                "Possible next steps:",
                "7 - 2 = 5 (left: 2 5 12)",
                "7 - 2 = 5 (left: 2 5 12)",
                "12 - 7 = 5 (left: 2 5 5)",
                "12 / 2 = 6 (left: 2 6 12)",
                "7 - 2 = 5 (left: 5 7 12)",
                "2 * 7 = 14 (left: 14 12)"
            ],
            "values": [
                2.001,
                3.0,
                1.002,
                0.003,
                1.002,
                1.002,
                1.002,
                1.002,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 7",
                "2 <- 8",
                "3 <- 0",
                "4 <- 6",
                "5 <- 1",
                "6 <- 2",
                "7 <- 6",
                "8 <- 7",
                "9 <- 7"
            ],
            "resampled_steps": [
                "12 - 7 = 5 (left: 2 5 5)",
                "12 / 2 = 6 (left: 2 6 12)",
                "7 - 2 = 5 (left: 5 7 12)",
                "12 - 7 = 5 (left: 2 5 5)",
                "12 - 7 = 5 (left: 2 5 5)",
                "2 + 2 = 4 (left: 4 7 12)",
                "2 * 7 = 14 (left: 14 12)",
                "12 - 7 = 5 (left: 2 5 5)",
                "12 / 2 = 6 (left: 2 6 12)",
                "12 / 2 = 6 (left: 2 6 12)"
            ]
        },
        "step_2": {
            "steps": [
                "12 - 7 = 5 (left: 2 5 5)\n2 + 5 = 7 (left: 5 7)",
                "12 / 2 = 6 (left: 2 6 12)\n12 / 2 = 6 (left: 6 12)",
                "7 - 2 = 5 (left: 5 7 12)\n7 / 5 = 1.4 (left: 1.4 12)",
                "12 - 7 = 5 (left: 2 5 5)\n5 - 2 = 3 (left: 3 5)",
                "12 - 7 = 5 (left: 2 5 5)\n5 - 2 = 3 (left: 3 5)",
                "2 + 2 = 4 (left: 4 7 12)\n12 / 4 = 3 (left: 3 3)",
                "2 * 7 = 14 (left: 14 12)\n14 + 12 = 26",
                "12 - 7 = 5 (left: 2 5 5)\n2 + 5 = 7 (left: 5 7)",
                "12 / 2 = 6 (left: 2 6 12)\n6 * 2 = 12 (left: 12 6)",
                "12 / 2 = 6 (left: 2 6 12)\n6 * 2 = 12 (left: 12 12)"
            ],
            "values": [
                0.0,
                1.002,
                0.003,
                1.002,
                0.002,
                1.001,
                0.003,
                0.0,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 9",
                "2 <- 9",
                "3 <- 9",
                "4 <- 9",
                "5 <- 9",
                "6 <- 9",
                "7 <- 9",
                "8 <- 9",
                "9 <- 9"
            ],
            "resampled_steps": [
                "12 / 2 = 6 (left: 2 6 12)\n12 / 2 = 6 (left: 6 12)",
                "12 / 2 = 6 (left: 2 6 12)\n6 * 2 = 12 (left: 12 12)",
                "12 / 2 = 6 (left: 2 6 12)\n6 * 2 = 12 (left: 12 12)",
                "12 / 2 = 6 (left: 2 6 12)\n6 * 2 = 12 (left: 12 12)",
                "12 / 2 = 6 (left: 2 6 12)\n6 * 2 = 12 (left: 12 12)",
                "12 / 2 = 6 (left: 2 6 12)\n6 * 2 = 12 (left: 12 12)",
                "12 / 2 = 6 (left: 2 6 12)\n6 * 2 = 12 (left: 12 12)",
                "12 / 2 = 6 (left: 2 6 12)\n6 * 2 = 12 (left: 12 12)",
                "12 / 2 = 6 (left: 2 6 12)\n6 * 2 = 12 (left: 12 12)",
                "12 / 2 = 6 (left: 2 6 12)\n6 * 2 = 12 (left: 12 12)"
            ]
        },
        "step_3": {
            "steps": [
                "12 / 2 = 6 (left: 2 6 12)\n12 / 2 = 6 (left: 6 12)\n12 / 6 = 2 (left: 2 12)",
                "12 / 2 = 6 (left: 2 6 12)\n6 * 2 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)",
                "12 / 2 = 6 (left: 2 6 12)\n6 * 2 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "12 / 2 = 6 (left: 2 6 12)\n6 * 2 = 12 (left: 12 12)\n12 + 12 = 24",
                "12 / 2 = 6 (left: 2 6 12)\n6 * 2 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "12 / 2 = 6 (left: 2 6 12)\n6 * 2 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "12 / 2 = 6 (left: 2 6 12)\n6 * 2 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "12 / 2 = 6 (left: 2 6 12)\n6 * 2 = 12 (left: 12 12)\n12 + 12 = 24",
                "12 / 2 = 6 (left: 2 6 12)\n6 * 2 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)",
                "12 / 2 = 6 (left: 2 6 12)\n6 * 2 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)"
            ],
            "values": [
                60.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 0",
                "3 <- 0",
                "4 <- 0",
                "5 <- 0",
                "6 <- 0",
                "7 <- 0",
                "8 <- 0",
                "9 <- 0"
            ],
            "resampled_steps": [
                "12 / 2 = 6 (left: 2 6 12)\n12 / 2 = 6 (left: 6 12)\n12 / 6 = 2 (left: 2 12)",
                "12 / 2 = 6 (left: 2 6 12)\n12 / 2 = 6 (left: 6 12)\n12 / 6 = 2 (left: 2 12)",
                "12 / 2 = 6 (left: 2 6 12)\n12 / 2 = 6 (left: 6 12)\n12 / 6 = 2 (left: 2 12)",
                "12 / 2 = 6 (left: 2 6 12)\n12 / 2 = 6 (left: 6 12)\n12 / 6 = 2 (left: 2 12)",
                "12 / 2 = 6 (left: 2 6 12)\n12 / 2 = 6 (left: 6 12)\n12 / 6 = 2 (left: 2 12)",
                "12 / 2 = 6 (left: 2 6 12)\n12 / 2 = 6 (left: 6 12)\n12 / 6 = 2 (left: 2 12)",
                "12 / 2 = 6 (left: 2 6 12)\n12 / 2 = 6 (left: 6 12)\n12 / 6 = 2 (left: 2 12)",
                "12 / 2 = 6 (left: 2 6 12)\n12 / 2 = 6 (left: 6 12)\n12 / 6 = 2 (left: 2 12)",
                "12 / 2 = 6 (left: 2 6 12)\n12 / 2 = 6 (left: 6 12)\n12 / 6 = 2 (left: 2 12)",
                "12 / 2 = 6 (left: 2 6 12)\n12 / 2 = 6 (left: 6 12)\n12 / 6 = 2 (left: 2 12)"
            ]
        },
        "step_4": {
            "steps": [
                "12 / 2 = 6 (left: 2 6 12)\n12 / 2 = 6 (left: 6 12)\n12 / 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "12 / 2 = 6 (left: 2 6 12)\n12 / 2 = 6 (left: 6 12)\n12 / 6 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "12 / 2 = 6 (left: 2 6 12)\n12 / 2 = 6 (left: 6 12)\n12 / 6 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "12 / 2 = 6 (left: 2 6 12)\n12 / 2 = 6 (left: 6 12)\n12 / 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "12 / 2 = 6 (left: 2 6 12)\n12 / 2 = 6 (left: 6 12)\n12 / 6 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "12 / 2 = 6 (left: 2 6 12)\n12 / 2 = 6 (left: 6 12)\n12 / 6 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "12 / 2 = 6 (left: 2 6 12)\n12 / 2 = 6 (left: 6 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "12 / 2 = 6 (left: 2 6 12)\n12 / 2 = 6 (left: 6 12)\n12 / 6 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "12 / 2 = 6 (left: 2 6 12)\n12 / 2 = 6 (left: 6 12)\n12 / 6 = 2 (left: 2 12)\n24 * 6 = 144 (left: 144)",
                "12 / 2 = 6 (left: 2 6 12)\n12 / 2 = 6 (left: 6 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)"
            ],
            "values": [
                0.003,
                0.001,
                0.002,
                0.003,
                0.001,
                0.002,
                60.0,
                0.003,
                0.003,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.42548100000000005
    },
    "919": {
        "input": "3 3 6 7",
        "step_1": {
            "steps": [
                "3 + 3 = 6 (left: 6 6 7)",
                "6 - 3 = 3 (left: 3 3 7)",
                "8 + 5 = 13 (left: 4 13 9)",
                "3 * 3 = 9 (left: 6 9 7)",
                "3 * 3 = 9 (left: 6 9 7)",
                "7 - 3 = 4 (left: 3 6 4)",
                "3 * 3 = 9 (left: 6 9 7)",
                "7 - 3 = 4 (left: 4 3 7)",
                "3 + 6 = 9 (left: 9 3 7)",
                "6 - 3 = 3 (left: 3 3 7)"
            ],
            "values": [
                3.0,
                3.0,
                3.0,
                3.0,
                2.001,
                2.001,
                3.0,
                3.0,
                3.0,
                3.0
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 7",
                "2 <- 7",
                "3 <- 5",
                "4 <- 6",
                "5 <- 8",
                "6 <- 9",
                "7 <- 4",
                "8 <- 3",
                "9 <- 6"
            ],
            "resampled_steps": [
                "8 + 5 = 13 (left: 4 13 9)",
                "7 - 3 = 4 (left: 4 3 7)",
                "7 - 3 = 4 (left: 4 3 7)",
                "7 - 3 = 4 (left: 3 6 4)",
                "3 * 3 = 9 (left: 6 9 7)",
                "3 + 6 = 9 (left: 9 3 7)",
                "6 - 3 = 3 (left: 3 3 7)",
                "3 * 3 = 9 (left: 6 9 7)",
                "3 * 3 = 9 (left: 6 9 7)",
                "3 * 3 = 9 (left: 6 9 7)"
            ]
        },
        "step_2": {
            "steps": [
                "8 + 5 = 13 (left: 4 13 9)\n10 + 5 = 15 (left: 5 15)",
                "7 - 3 = 4 (left: 4 3 7)\n4 / 7 = 0.57 (left: 0.57)",
                "7 - 3 = 4 (left: 4 3 7)\n4 + 3 = 7 (left: 7 7)",
                "7 - 3 = 4 (left: 3 6 4)\n6 - 3 = 3 (left: 3 4)",
                "3 * 3 = 9 (left: 6 9 7)\n2 * 5 = 10 (left: 10 5)",
                "3 + 6 = 9 (left: 9 3 7)\n7 / 3 = 2.33333333333 (left: 2.33 7)",
                "6 - 3 = 3 (left: 3 3 7)\n7 - 3 = 4 (left: 3 4)",
                "3 * 3 = 9 (left: 6 9 7)\n9 / 6 = 1.5 (left: 1.5 7)",
                "3 * 3 = 9 (left: 6 9 7)\n5 / 3 = 1.66666666667 (left: 1.66666666667 2 8)",
                "3 * 3 = 9 (left: 6 9 7)\n6 * 9 = 54 (left: 54 7)"
            ],
            "values": [
                0.003,
                0.002,
                1.001,
                21.001,
                0.003,
                2.0,
                40.0,
                1.001,
                1.002,
                0.002
            ],
            "resampled": [
                "0 <- 5",
                "1 <- 3",
                "2 <- 3",
                "3 <- 3",
                "4 <- 6",
                "5 <- 3",
                "6 <- 6",
                "7 <- 6",
                "8 <- 3",
                "9 <- 3"
            ],
            "resampled_steps": [
                "3 + 6 = 9 (left: 9 3 7)\n7 / 3 = 2.33333333333 (left: 2.33 7)",
                "7 - 3 = 4 (left: 3 6 4)\n6 - 3 = 3 (left: 3 4)",
                "7 - 3 = 4 (left: 3 6 4)\n6 - 3 = 3 (left: 3 4)",
                "7 - 3 = 4 (left: 3 6 4)\n6 - 3 = 3 (left: 3 4)",
                "6 - 3 = 3 (left: 3 3 7)\n7 - 3 = 4 (left: 3 4)",
                "7 - 3 = 4 (left: 3 6 4)\n6 - 3 = 3 (left: 3 4)",
                "6 - 3 = 3 (left: 3 3 7)\n7 - 3 = 4 (left: 3 4)",
                "6 - 3 = 3 (left: 3 3 7)\n7 - 3 = 4 (left: 3 4)",
                "7 - 3 = 4 (left: 3 6 4)\n6 - 3 = 3 (left: 3 4)",
                "7 - 3 = 4 (left: 3 6 4)\n6 - 3 = 3 (left: 3 4)"
            ]
        },
        "step_3": {
            "steps": [
                "3 + 6 = 9 (left: 9 3 7)\n7 / 3 = 2.33333333333 (left: 2.33 7)\n7 - 2.33 = 4.67 (left: 4.67)",
                "7 - 3 = 4 (left: 3 6 4)\n6 - 3 = 3 (left: 3 4)\n4 - 3 = 1 (left: 1)",
                "7 - 3 = 4 (left: 3 6 4)\n6 - 3 = 3 (left: 3 4)\n3 + 4 = 7 (left: 7)",
                "7 - 3 = 4 (left: 3 6 4)\n6 - 3 = 3 (left: 3 4)\n3 + 4 = 7 (left: 7)",
                "6 - 3 = 3 (left: 3 3 7)\n7 - 3 = 4 (left: 3 4)\n4 - 3 = 1 (left: 1)",
                "7 - 3 = 4 (left: 3 6 4)\n6 - 3 = 3 (left: 3 4)\n4 - 3 = 1 (left: 1)",
                "6 - 3 = 3 (left: 3 3 7)\n7 - 3 = 4 (left: 3 4)\n4 - 3 = 1 (left: 1)",
                "6 - 3 = 3 (left: 3 3 7)\n7 - 3 = 4 (left: 3 4)\n3 * 4 = 12 (left: 12)",
                "7 - 3 = 4 (left: 3 6 4)\n6 - 3 = 3 (left: 3 4)\n3 + 4 = 7 (left: 7)",
                "7 - 3 = 4 (left: 3 6 4)\n6 - 3 = 3 (left: 3 4)\n4 * 3 = 12 (left: 12)"
            ],
            "values": [
                0.003,
                0.003,
                0.0,
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.001,
                0.003
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 9",
                "2 <- 7",
                "3 <- 7",
                "4 <- 7",
                "5 <- 7",
                "6 <- 1",
                "7 <- 0",
                "8 <- 3",
                "9 <- 3"
            ],
            "resampled_steps": [
                "3 + 6 = 9 (left: 9 3 7)\n7 / 3 = 2.33333333333 (left: 2.33 7)\n7 - 2.33 = 4.67 (left: 4.67)",
                "7 - 3 = 4 (left: 3 6 4)\n6 - 3 = 3 (left: 3 4)\n4 * 3 = 12 (left: 12)",
                "6 - 3 = 3 (left: 3 3 7)\n7 - 3 = 4 (left: 3 4)\n3 * 4 = 12 (left: 12)",
                "6 - 3 = 3 (left: 3 3 7)\n7 - 3 = 4 (left: 3 4)\n3 * 4 = 12 (left: 12)",
                "6 - 3 = 3 (left: 3 3 7)\n7 - 3 = 4 (left: 3 4)\n3 * 4 = 12 (left: 12)",
                "6 - 3 = 3 (left: 3 3 7)\n7 - 3 = 4 (left: 3 4)\n3 * 4 = 12 (left: 12)",
                "7 - 3 = 4 (left: 3 6 4)\n6 - 3 = 3 (left: 3 4)\n4 - 3 = 1 (left: 1)",
                "3 + 6 = 9 (left: 9 3 7)\n7 / 3 = 2.33333333333 (left: 2.33 7)\n7 - 2.33 = 4.67 (left: 4.67)",
                "7 - 3 = 4 (left: 3 6 4)\n6 - 3 = 3 (left: 3 4)\n3 + 4 = 7 (left: 7)",
                "7 - 3 = 4 (left: 3 6 4)\n6 - 3 = 3 (left: 3 4)\n3 + 4 = 7 (left: 7)"
            ]
        },
        "step_4": {
            "steps": [
                "3 + 6 = 9 (left: 9 3 7)\n7 / 3 = 2.33333333333 (left: 2.33 7)\n7 - 2.33 = 4.67 (left: 4.67)\nThere are no possible next steps for the input 4.67 as it is a single number.",
                "7 - 3 = 4 (left: 3 6 4)\n6 - 3 = 3 (left: 3 4)\n4 * 3 = 12 (left: 12)\n12 / 2 = 6",
                "6 - 3 = 3 (left: 3 3 7)\n7 - 3 = 4 (left: 3 4)\n3 * 4 = 12 (left: 12)\n12 + 8 = 20",
                "6 - 3 = 3 (left: 3 3 7)\n7 - 3 = 4 (left: 3 4)\n3 * 4 = 12 (left: 12)\n12 + 8 = 20 (left: 8 20)",
                "6 - 3 = 3 (left: 3 3 7)\n7 - 3 = 4 (left: 3 4)\n3 * 4 = 12 (left: 12)\n12 - 8 = 4 (left: 4 8)",
                "6 - 3 = 3 (left: 3 3 7)\n7 - 3 = 4 (left: 3 4)\n3 * 4 = 12 (left: 12)\n12 * 8 = 96 (left: 8 96)",
                "7 - 3 = 4 (left: 3 6 4)\n6 - 3 = 3 (left: 3 4)\n4 - 3 = 1 (left: 1)\nThere are no possible next steps with just one number input.",
                "3 + 6 = 9 (left: 9 3 7)\n7 / 3 = 2.33333333333 (left: 2.33 7)\n7 - 2.33 = 4.67 (left: 4.67)\n4.67 - 8 = -3.33 (left: -3.33)",
                "7 - 3 = 4 (left: 3 6 4)\n6 - 3 = 3 (left: 3 4)\n3 + 4 = 7 (left: 7)\n7 - 2 = 5 (left: 5 8)",
                "7 - 3 = 4 (left: 3 6 4)\n6 - 3 = 3 (left: 3 4)\n3 + 4 = 7 (left: 7)\nNo further calculations can be done with only one number."
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                20.002,
                0.001,
                0.003,
                0.001,
                1.001,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.446328
    },
    "920": {
        "input": "1 5 9 13",
        "step_1": {
            "steps": [
                "13 - 5 = 8 (left: 1 8 13)",
                "13 - 9 = 4 (left: 1 4 13)",
                "5 * 9 = 45 (left: 1 45 13)",
                "13 - 9 = 4 (left: 1 5 4)",
                "13 / 1 = 13 (left: 5 9 13)",
                "13 - 9 = 4 (left: 1 5 4)",
                "13 - 5 = 8 (left: 1 8 13)",
                "1 * 5 = 5 (left: 5 9 13)",
                "5 - 1 = 4 (left: 4 9 13)",
                "9 - 5 = 4 (left: 1 4 13)"
            ],
            "values": [
                1.002,
                1.002,
                22.0,
                22.0,
                3.0,
                21.0,
                2.001,
                2.001,
                3.0,
                1.002
            ],
            "resampled": [
                "0 <- 8",
                "1 <- 5",
                "2 <- 3",
                "3 <- 2",
                "4 <- 5",
                "5 <- 2",
                "6 <- 5",
                "7 <- 3",
                "8 <- 2",
                "9 <- 2"
            ],
            "resampled_steps": [
                "5 - 1 = 4 (left: 4 9 13)",
                "13 - 9 = 4 (left: 1 5 4)",
                "13 - 9 = 4 (left: 1 5 4)",
                "5 * 9 = 45 (left: 1 45 13)",
                "13 - 9 = 4 (left: 1 5 4)",
                "5 * 9 = 45 (left: 1 45 13)",
                "13 - 9 = 4 (left: 1 5 4)",
                "13 - 9 = 4 (left: 1 5 4)",
                "5 * 9 = 45 (left: 1 45 13)",
                "5 * 9 = 45 (left: 1 45 13)"
            ]
        },
        "step_2": {
            "steps": [
                "5 - 1 = 4 (left: 4 9 13)\n9 / 4 = 2.25 (left: 2.25 13)",
                "13 - 9 = 4 (left: 1 5 4)\n1 * 4 = 4 (left: 4)",
                "13 - 9 = 4 (left: 1 5 4)\n1 * 5 = 5 (left: 5 4)",
                "5 * 9 = 45 (left: 1 45 13)\n1 + 45 = 46 (left: 13 46)",
                "13 - 9 = 4 (left: 1 5 4)\n5 - 4 = 1 (left: 1)",
                "5 * 9 = 45 (left: 1 45 13)\n45 / 1 = 45 (left: 45 13)",
                "13 - 9 = 4 (left: 1 5 4)\n5 / 1 = 5 (left: 5 4)",
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)",
                "5 * 9 = 45 (left: 1 45 13)\n9 / 3 = 3 (left: 3 27)",
                "5 * 9 = 45 (left: 1 45 13)\n13 * 1 = 13 (left: 13 13)"
            ],
            "values": [
                0.003,
                0.003,
                3.0,
                0.003,
                0.003,
                0.003,
                40.001,
                60.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 6",
                "2 <- 7",
                "3 <- 7",
                "4 <- 7",
                "5 <- 7",
                "6 <- 7",
                "7 <- 6",
                "8 <- 7",
                "9 <- 6"
            ],
            "resampled_steps": [
                "13 - 9 = 4 (left: 1 5 4)\n1 * 5 = 5 (left: 5 4)",
                "13 - 9 = 4 (left: 1 5 4)\n5 / 1 = 5 (left: 5 4)",
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)",
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)",
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)",
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)",
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)",
                "13 - 9 = 4 (left: 1 5 4)\n5 / 1 = 5 (left: 5 4)",
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)",
                "13 - 9 = 4 (left: 1 5 4)\n5 / 1 = 5 (left: 5 4)"
            ]
        },
        "step_3": {
            "steps": [
                "13 - 9 = 4 (left: 1 5 4)\n1 * 5 = 5 (left: 5 4)\n5 * 4 = 20 (left: 20)",
                "13 - 9 = 4 (left: 1 5 4)\n5 / 1 = 5 (left: 5 4)\n9 / 3 = 3 (left: 3 2)",
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)\n4 + 6 = 10 (left: 10)",
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)\nInput: 3 9 5",
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)\n6 / 4 = 1.5 (left: 1.5)",
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)\n6 / 4 = 1.5 (left: 1.5)",
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)\n6 / 4 = 1.5 (left: 1.5)",
                "13 - 9 = 4 (left: 1 5 4)\n5 / 1 = 5 (left: 5 4)\n5 - 4 = 1 (left: 1)",
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "13 - 9 = 4 (left: 1 5 4)\n5 / 1 = 5 (left: 5 4)\n5 / 4 = 1.25 (left: 1.25 4)"
            ],
            "values": [
                0.003,
                0.001,
                0.003,
                0.003,
                0.001,
                0.0,
                0.001,
                0.002,
                40.0,
                0.003
            ],
            "resampled": [
                "0 <- 8",
                "1 <- 8",
                "2 <- 8",
                "3 <- 8",
                "4 <- 8",
                "5 <- 8",
                "6 <- 8",
                "7 <- 8",
                "8 <- 8",
                "9 <- 8"
            ],
            "resampled_steps": [
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)"
            ]
        },
        "step_4": {
            "steps": [
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 + 5) * (9 - 13) = 24",
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * (1 + 5) * 6 = 24",
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 + 5) * (9 - 13 + 6) = 24",
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 + 5) * (9 - 13 + 4) = 24",
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 + 5) * (9 - 13) = 24",
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 + 5) * (9 - 13 + 6) = 24",
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 + 5) * (9 - 13) = 24",
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 + 5) * (9 - 13) = 24",
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 + 5) * (9 - 13) = 24",
                "13 - 9 = 4 (left: 1 5 4)\n1 + 5 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 + 5) * (9 - 13) = 24"
            ],
            "values": [
                60.0,
                0.003,
                20.002,
                60.0,
                60.0,
                0.003,
                60.0,
                60.0,
                40.001,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.466626
    },
    "921": {
        "input": "5 6 7 13",
        "step_1": {
            "steps": [
                "5 + 6 = 11 (left: 7 11 13)",
                "6 * 7 = 42 (left: 5 42 13)",
                "13 - 6 = 7 (left: 5 7 13)",
                "9 - 3 = 6 (left: 3 6 6)",
                "6 + 7 = 13 (left: 5 13 13)",
                "13 - 5 = 8 (left: 6 7 8)",
                "5 + 7 = 12 (left: 6 12 13)",
                "5 / 3 = 1.67 (left: 1.67 3 15)",
                "13 - 7 = 6 (left: 5 6 6)",
                "7 + 5 = 12 (left: 6 12 13)"
            ],
            "values": [
                2.0,
                2.001,
                3.0,
                21.001,
                0.003,
                3.0,
                0.003,
                21.001,
                22.0,
                3.0
            ],
            "resampled": [
                "0 <- 8",
                "1 <- 3",
                "2 <- 3",
                "3 <- 8",
                "4 <- 3",
                "5 <- 8",
                "6 <- 9",
                "7 <- 1",
                "8 <- 9",
                "9 <- 3"
            ],
            "resampled_steps": [
                "13 - 7 = 6 (left: 5 6 6)",
                "9 - 3 = 6 (left: 3 6 6)",
                "9 - 3 = 6 (left: 3 6 6)",
                "13 - 7 = 6 (left: 5 6 6)",
                "9 - 3 = 6 (left: 3 6 6)",
                "13 - 7 = 6 (left: 5 6 6)",
                "7 + 5 = 12 (left: 6 12 13)",
                "6 * 7 = 42 (left: 5 42 13)",
                "7 + 5 = 12 (left: 6 12 13)",
                "9 - 3 = 6 (left: 3 6 6)"
            ]
        },
        "step_2": {
            "steps": [
                "13 - 7 = 6 (left: 5 6 6)\n9 / 3 = 3 (left: 3 9 27)",
                "9 - 3 = 6 (left: 3 6 6)\n6 / 3 = 2 (left: 2 6)",
                "9 - 3 = 6 (left: 3 6 6)\n6 - 6 = 0 (left: 3 0)",
                "13 - 7 = 6 (left: 5 6 6)\n6 - 5 = 1 (left: 1 6)",
                "9 - 3 = 6 (left: 3 6 6)\nInput: 4 5 9",
                "13 - 7 = 6 (left: 5 6 6)\n6 - 5 = 1 (left: 1 6)",
                "7 + 5 = 12 (left: 6 12 13)\n13 - 6 = 7 (left: 6 7)",
                "6 * 7 = 42 (left: 5 42 13)\n42 / 5 = 8.4 (left: 8.4 13)",
                "7 + 5 = 12 (left: 6 12 13)\n12 / 6 = 2 (left: 2 13)",
                "9 - 3 = 6 (left: 3 6 6)\n5 - 4 = 1 (left: 1 5 10)"
            ],
            "values": [
                60.0,
                1.0,
                0.003,
                60.0,
                0.003,
                60.0,
                0.003,
                1.002,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 0",
                "3 <- 5",
                "4 <- 3",
                "5 <- 0",
                "6 <- 0",
                "7 <- 5",
                "8 <- 0",
                "9 <- 0"
            ],
            "resampled_steps": [
                "13 - 7 = 6 (left: 5 6 6)\n6 - 5 = 1 (left: 1 6)",
                "13 - 7 = 6 (left: 5 6 6)\n6 - 5 = 1 (left: 1 6)",
                "13 - 7 = 6 (left: 5 6 6)\n9 / 3 = 3 (left: 3 9 27)",
                "13 - 7 = 6 (left: 5 6 6)\n6 - 5 = 1 (left: 1 6)",
                "13 - 7 = 6 (left: 5 6 6)\n6 - 5 = 1 (left: 1 6)",
                "13 - 7 = 6 (left: 5 6 6)\n9 / 3 = 3 (left: 3 9 27)",
                "13 - 7 = 6 (left: 5 6 6)\n9 / 3 = 3 (left: 3 9 27)",
                "13 - 7 = 6 (left: 5 6 6)\n6 - 5 = 1 (left: 1 6)",
                "13 - 7 = 6 (left: 5 6 6)\n9 / 3 = 3 (left: 3 9 27)",
                "13 - 7 = 6 (left: 5 6 6)\n9 / 3 = 3 (left: 3 9 27)"
            ]
        },
        "step_3": {
            "steps": [
                "13 - 7 = 6 (left: 5 6 6)\n6 - 5 = 1 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "13 - 7 = 6 (left: 5 6 6)\n6 - 5 = 1 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "13 - 7 = 6 (left: 5 6 6)\n9 / 3 = 3 (left: 3 9 27)\n27 / 3 = 9 (left: 9 27)",
                "13 - 7 = 6 (left: 5 6 6)\n6 - 5 = 1 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "13 - 7 = 6 (left: 5 6 6)\n6 - 5 = 1 (left: 1 6)\n6 - 1 = 5 (left: 5)",
                "13 - 7 = 6 (left: 5 6 6)\n9 / 3 = 3 (left: 3 9 27)\n9 - 3 = 6 (left: 6 27)",
                "13 - 7 = 6 (left: 5 6 6)\n9 / 3 = 3 (left: 3 9 27)\n15 + 5 = 20 (left: 20 25)",
                "13 - 7 = 6 (left: 5 6 6)\n6 - 5 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "13 - 7 = 6 (left: 5 6 6)\n9 / 3 = 3 (left: 3 9 27)\n3 * 9 = 27 (left: 27 27)",
                "13 - 7 = 6 (left: 5 6 6)\n9 / 3 = 3 (left: 3 9 27)\n27 - 9 = 18 (left: 3 18)"
            ],
            "values": [
                0.002,
                0.003,
                40.001,
                0.003,
                0.002,
                0.003,
                20.002,
                0.002,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 6",
                "2 <- 6",
                "3 <- 2",
                "4 <- 2",
                "5 <- 2",
                "6 <- 2",
                "7 <- 2",
                "8 <- 2",
                "9 <- 2"
            ],
            "resampled_steps": [
                "13 - 7 = 6 (left: 5 6 6)\n9 / 3 = 3 (left: 3 9 27)\n27 / 3 = 9 (left: 9 27)",
                "13 - 7 = 6 (left: 5 6 6)\n9 / 3 = 3 (left: 3 9 27)\n15 + 5 = 20 (left: 20 25)",
                "13 - 7 = 6 (left: 5 6 6)\n9 / 3 = 3 (left: 3 9 27)\n15 + 5 = 20 (left: 20 25)",
                "13 - 7 = 6 (left: 5 6 6)\n9 / 3 = 3 (left: 3 9 27)\n27 / 3 = 9 (left: 9 27)",
                "13 - 7 = 6 (left: 5 6 6)\n9 / 3 = 3 (left: 3 9 27)\n27 / 3 = 9 (left: 9 27)",
                "13 - 7 = 6 (left: 5 6 6)\n9 / 3 = 3 (left: 3 9 27)\n27 / 3 = 9 (left: 9 27)",
                "13 - 7 = 6 (left: 5 6 6)\n9 / 3 = 3 (left: 3 9 27)\n27 / 3 = 9 (left: 9 27)",
                "13 - 7 = 6 (left: 5 6 6)\n9 / 3 = 3 (left: 3 9 27)\n27 / 3 = 9 (left: 9 27)",
                "13 - 7 = 6 (left: 5 6 6)\n9 / 3 = 3 (left: 3 9 27)\n27 / 3 = 9 (left: 9 27)",
                "13 - 7 = 6 (left: 5 6 6)\n9 / 3 = 3 (left: 3 9 27)\n27 / 3 = 9 (left: 9 27)"
            ]
        },
        "step_4": {
            "steps": [
                "13 - 7 = 6 (left: 5 6 6)\n9 / 3 = 3 (left: 3 9 27)\n27 / 3 = 9 (left: 9 27)\n27 + 9 = 36 (left: 36)",
                "13 - 7 = 6 (left: 5 6 6)\n9 / 3 = 3 (left: 3 9 27)\n15 + 5 = 20 (left: 20 25)\n20 + 25 = 45 (left: 45)",
                "13 - 7 = 6 (left: 5 6 6)\n9 / 3 = 3 (left: 3 9 27)\n15 + 5 = 20 (left: 20 25)\n20 / 25 = 0.8 (left: 0.8)",
                "13 - 7 = 6 (left: 5 6 6)\n9 / 3 = 3 (left: 3 9 27)\n27 / 3 = 9 (left: 9 27)\n10 - 5 = 5 (left: 5)",
                "13 - 7 = 6 (left: 5 6 6)\n9 / 3 = 3 (left: 3 9 27)\n27 / 3 = 9 (left: 9 27)\n4 + 16 = 20 (left: 20)",
                "13 - 7 = 6 (left: 5 6 6)\n9 / 3 = 3 (left: 3 9 27)\n27 / 3 = 9 (left: 9 27)\n15 / 5 = 3 (left: 3 10)",
                "13 - 7 = 6 (left: 5 6 6)\n9 / 3 = 3 (left: 3 9 27)\n27 / 3 = 9 (left: 9 27)\n2 * 3 = 6 (left: 6)",
                "13 - 7 = 6 (left: 5 6 6)\n9 / 3 = 3 (left: 3 9 27)\n27 / 3 = 9 (left: 9 27)\n9 * 27 = 243 (left: 243)",
                "13 - 7 = 6 (left: 5 6 6)\n9 / 3 = 3 (left: 3 9 27)\n27 / 3 = 9 (left: 9 27)\n9 + 27 = 36 (left: 36)",
                "13 - 7 = 6 (left: 5 6 6)\n9 / 3 = 3 (left: 3 9 27)\n27 / 3 = 9 (left: 9 27)\n27 - 9 = 18 (left: 18)"
            ],
            "values": [
                40.0,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.002,
                20.002,
                20.0,
                40.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.49005750000000003
    },
    "922": {
        "input": "5 5 8 10",
        "step_1": {
            "steps": [
                "6 + 9 = 15 (left: 3 15)",
                "3 + 3 = 6 (left: 6 9)",
                "10 - 5 = 5 (left: 5 8 5)",
                "5 + 5 = 10 (left: 8 10 10)",
                "5 * 5 = 25 (left: 8 10 25)",
                "8 - 5 = 3 (left: 3 5 10)",
                "5 + 5 = 10 (left: 8 10)",
                "Possible next steps:",
                "5 + 5 = 10 (left: 8 10 10)",
                "10 - 8 = 2 (left: 5 2 10)"
            ],
            "values": [
                0.003,
                0.003,
                3.0,
                2.001,
                1.001,
                2.0,
                21.001,
                0.003,
                1.002,
                3.0
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 6",
                "2 <- 4",
                "3 <- 6",
                "4 <- 6",
                "5 <- 2",
                "6 <- 4",
                "7 <- 6",
                "8 <- 6",
                "9 <- 6"
            ],
            "resampled_steps": [
                "5 + 5 = 10 (left: 8 10)",
                "5 + 5 = 10 (left: 8 10)",
                "5 * 5 = 25 (left: 8 10 25)",
                "5 + 5 = 10 (left: 8 10)",
                "5 + 5 = 10 (left: 8 10)",
                "10 - 5 = 5 (left: 5 8 5)",
                "5 * 5 = 25 (left: 8 10 25)",
                "5 + 5 = 10 (left: 8 10)",
                "5 + 5 = 10 (left: 8 10)",
                "5 + 5 = 10 (left: 8 10)"
            ]
        },
        "step_2": {
            "steps": [
                "5 + 5 = 10 (left: 8 10)\n8 / 2 = 4 (left: 4 4)",
                "5 + 5 = 10 (left: 8 10)\n8 - 10 = -2 (left: -2)",
                "5 * 5 = 25 (left: 8 10 25)\n8 + 10 = 18 (left: 18 25)",
                "5 + 5 = 10 (left: 8 10)\n8 + 10 = 18 (left: 18)",
                "5 + 5 = 10 (left: 8 10)\n8 * 10 = 80 (left: 80)",
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)",
                "5 * 5 = 25 (left: 8 10 25)\n10 / 25 = 0.4 (left: 8 0.4)",
                "5 + 5 = 10 (left: 8 10)\n8 + 10 = 18 (left: 18)",
                "5 + 5 = 10 (left: 8 10)\n4 * 8 = 32 (left: 32)",
                "5 + 5 = 10 (left: 8 10)\nInput: 18 2"
            ],
            "values": [
                1.002,
                0.001,
                0.003,
                20.0,
                0.003,
                20.001,
                0.003,
                0.002,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 5",
                "1 <- 5",
                "2 <- 5",
                "3 <- 3",
                "4 <- 5",
                "5 <- 3",
                "6 <- 3",
                "7 <- 5",
                "8 <- 5",
                "9 <- 3"
            ],
            "resampled_steps": [
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)",
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)",
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)",
                "5 + 5 = 10 (left: 8 10)\n8 + 10 = 18 (left: 18)",
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)",
                "5 + 5 = 10 (left: 8 10)\n8 + 10 = 18 (left: 18)",
                "5 + 5 = 10 (left: 8 10)\n8 + 10 = 18 (left: 18)",
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)",
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)",
                "5 + 5 = 10 (left: 8 10)\n8 + 10 = 18 (left: 18)"
            ]
        },
        "step_3": {
            "steps": [
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)\n40 / 5 = 8 (left: 5)",
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)\n40 * 5 = 200 (left: 5 200)",
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)\n40 - 5 = 35 (left: 5)",
                "5 + 5 = 10 (left: 8 10)\n8 + 10 = 18 (left: 18)\nNo possible next steps as there are no other numbers provided to perform operations with 18.",
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)\n40 / 5 = 8 (left: 8)",
                "5 + 5 = 10 (left: 8 10)\n8 + 10 = 18 (left: 18)\n18 / 2 = 9",
                "5 + 5 = 10 (left: 8 10)\n8 + 10 = 18 (left: 18)\nThere are no possible next steps with the input 18.",
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)\n40 * 5 = 200 (left: 5 200)",
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)\n40 - 5 = 35 (left: 35)",
                "5 + 5 = 10 (left: 8 10)\n8 + 10 = 18 (left: 18)\nThere are no possible next steps with the input of 18."
            ],
            "values": [
                0.003,
                2.0,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 1",
                "3 <- 1",
                "4 <- 1",
                "5 <- 1",
                "6 <- 1",
                "7 <- 1",
                "8 <- 1",
                "9 <- 1"
            ],
            "resampled_steps": [
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)\n40 * 5 = 200 (left: 5 200)",
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)\n40 * 5 = 200 (left: 5 200)",
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)\n40 * 5 = 200 (left: 5 200)",
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)\n40 * 5 = 200 (left: 5 200)",
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)\n40 * 5 = 200 (left: 5 200)",
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)\n40 * 5 = 200 (left: 5 200)",
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)\n40 * 5 = 200 (left: 5 200)",
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)\n40 * 5 = 200 (left: 5 200)",
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)\n40 * 5 = 200 (left: 5 200)",
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)\n40 * 5 = 200 (left: 5 200)"
            ]
        },
        "step_4": {
            "steps": [
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)\n40 * 5 = 200 (left: 5 200)\n200 - 5 = 195 (left: 5)",
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)\n40 * 5 = 200 (left: 5 200)\n5 * 200 = 1000 (left: 1000)",
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)\n40 * 5 = 200 (left: 5 200)\n5 + 200 = 205 (left: 205)",
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)\n40 * 5 = 200 (left: 5 200)\n200 / 5 = 40 (left: 40)",
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)\n40 * 5 = 200 (left: 5 200)\n30 / 3 = 10 (left: 10)",
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)\n40 * 5 = 200 (left: 5 200)\n200 + 5 = 205 (left: 5 205)",
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)\n40 * 5 = 200 (left: 5 200)\n200 / 5 = 40 (left: 40)",
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)\n40 * 5 = 200 (left: 5 200)\n4 / 12 = 0.3333 (left: 0.3333)",
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)\n40 * 5 = 200 (left: 5 200)\n2 + 4 = 6 (left: 6 16)",
                "10 - 5 = 5 (left: 5 8 5)\n5 * 8 = 40 (left: 40 5)\n40 * 5 = 200 (left: 5 200)\n200 / 5 = 40 (left: 40)"
            ],
            "values": [
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.001,
                0.003,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.5109465
    },
    "923": {
        "input": "2 4 6 12",
        "step_1": {
            "steps": [
                "12 / 2 = 6 (left: 2 6 12)",
                "2 + 4 = 6 (left: 6 6 12)",
                "4 * 6 = 24 (left: 2 24 12)",
                "12 / 4 = 3 (left: 2 3 12)",
                "6 * 2 = 12 (left: 4 12 12)",
                "12 - 2 = 10 (left: 2 10 12)",
                "6 * 2 = 12 (left: 4 12 12)",
                "6 * 2 = 12 (left: 4 6 12)",
                "4 + 6 = 10 (left: 2 10 12)",
                "2 + 4 = 6 (left: 6 6 12)"
            ],
            "values": [
                0.003,
                60.0,
                3.0,
                1.002,
                1.002,
                0.003,
                21.001,
                60.0,
                0.003,
                41.0
            ],
            "resampled": [
                "0 <- 7",
                "1 <- 1",
                "2 <- 1",
                "3 <- 9",
                "4 <- 7",
                "5 <- 6",
                "6 <- 1",
                "7 <- 1",
                "8 <- 1",
                "9 <- 6"
            ],
            "resampled_steps": [
                "6 * 2 = 12 (left: 4 6 12)",
                "2 + 4 = 6 (left: 6 6 12)",
                "2 + 4 = 6 (left: 6 6 12)",
                "2 + 4 = 6 (left: 6 6 12)",
                "6 * 2 = 12 (left: 4 6 12)",
                "6 * 2 = 12 (left: 4 12 12)",
                "2 + 4 = 6 (left: 6 6 12)",
                "2 + 4 = 6 (left: 6 6 12)",
                "2 + 4 = 6 (left: 6 6 12)",
                "6 * 2 = 12 (left: 4 12 12)"
            ]
        },
        "step_2": {
            "steps": [
                "6 * 2 = 12 (left: 4 6 12)\n4 * 6 = 24 (left: 24 12)",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "2 + 4 = 6 (left: 6 6 12)\n12 - 6 = 6 (left: 6 6)",
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)",
                "6 * 2 = 12 (left: 4 6 12)\n12 - 6 = 6 (left: 4 6)",
                "6 * 2 = 12 (left: 4 12 12)\n12 / 4 = 3 (left: 3 12)",
                "2 + 4 = 6 (left: 6 6 12)\n12 + 6 = 18 (left: 6 18)",
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 6 2)",
                "2 + 4 = 6 (left: 6 6 12)\n12 - 6 = 6 (left: 6 6)",
                "6 * 2 = 12 (left: 4 12 12)\n12 - 4 = 8 (left: 8 12)"
            ],
            "values": [
                0.003,
                60.0,
                0.003,
                60.0,
                60.0,
                0.003,
                20.002,
                1.0,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 6",
                "3 <- 4",
                "4 <- 1",
                "5 <- 3",
                "6 <- 1",
                "7 <- 1",
                "8 <- 4",
                "9 <- 3"
            ],
            "resampled_steps": [
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "2 + 4 = 6 (left: 6 6 12)\n12 + 6 = 18 (left: 6 18)",
                "6 * 2 = 12 (left: 4 6 12)\n12 - 6 = 6 (left: 4 6)",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "6 * 2 = 12 (left: 4 6 12)\n12 - 6 = 6 (left: 4 6)",
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)"
            ]
        },
        "step_3": {
            "steps": [
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24",
                "2 + 4 = 6 (left: 6 6 12)\n12 + 6 = 18 (left: 6 18)\n6 * 18 = 108 (left: 108)",
                "6 * 2 = 12 (left: 4 6 12)\n12 - 6 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)",
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "6 * 2 = 12 (left: 4 6 12)\n12 - 6 = 6 (left: 4 6)\n9 / 3 = 3 (left: 3 12)",
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                60.0,
                0.003,
                60.0,
                60.0,
                60.0,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 6",
                "2 <- 5",
                "3 <- 3",
                "4 <- 7",
                "5 <- 3",
                "6 <- 5",
                "7 <- 5",
                "8 <- 5",
                "9 <- 5"
            ],
            "resampled_steps": [
                "6 * 2 = 12 (left: 4 6 12)\n12 - 6 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "6 * 2 = 12 (left: 4 6 12)\n12 - 6 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "6 * 2 = 12 (left: 4 6 12)\n12 - 6 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)"
            ]
        },
        "step_4": {
            "steps": [
                "6 * 2 = 12 (left: 4 6 12)\n12 - 6 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * (6 + (12 - 6)) = 24",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((2 + 4) + 6) + 12 = 24",
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (2 + 4) * (6 / 12) = 24",
                "6 * 2 = 12 (left: 4 6 12)\n12 - 6 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 * 2) * (12 - 6) = 24",
                "2 + 4 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((2 + 4) + 6) + 12 = 24",
                "6 * 2 = 12 (left: 4 6 12)\n12 - 6 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * (6 + (12 - 6)) = 24",
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (2 + 4) * (6 / 12) = 24",
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (2 + 4) * (6 / 12) = 24",
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: ((2 + 4) * 6) * 12 = 24",
                "2 + 4 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (2 + 4) * (6 + 12) = 24"
            ],
            "values": [
                60.0,
                60.0,
                60.0,
                60.0,
                40.001,
                60.0,
                60.0,
                40.001,
                60.0,
                20.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.529952
    },
    "924": {
        "input": "6 7 8 11",
        "step_1": {
            "steps": [
                "11 + 6 = 17 (left: 7 8 17)",
                "6 * 7 = 42 (left: 8 11 42)",
                "6 + 7 = 13 (left: 8 11 13)",
                "8 - 6 = 2 (left: 2 7 11)",
                "11 / 7 = 1.57 (left: 1.57 6 8)",
                "Input: 1 3 5 7",
                "11 - 7 = 4 (left: 6 8 4)",
                "6 * 7 = 42 (left: 8 11 42)",
                "11 - 7 = 4 (left: 6 8 4)",
                "11 - 7 = 4 (left: 4 7 8)"
            ],
            "values": [
                1.002,
                1.001,
                2.001,
                3.0,
                3.0,
                0.003,
                41.0,
                1.002,
                22.0,
                21.001
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 8",
                "2 <- 9",
                "3 <- 6",
                "4 <- 6",
                "5 <- 8",
                "6 <- 6",
                "7 <- 6",
                "8 <- 6",
                "9 <- 6"
            ],
            "resampled_steps": [
                "11 - 7 = 4 (left: 6 8 4)",
                "11 - 7 = 4 (left: 6 8 4)",
                "11 - 7 = 4 (left: 4 7 8)",
                "11 - 7 = 4 (left: 6 8 4)",
                "11 - 7 = 4 (left: 6 8 4)",
                "11 - 7 = 4 (left: 6 8 4)",
                "11 - 7 = 4 (left: 6 8 4)",
                "11 - 7 = 4 (left: 6 8 4)",
                "11 - 7 = 4 (left: 6 8 4)",
                "11 - 7 = 4 (left: 6 8 4)"
            ]
        },
        "step_2": {
            "steps": [
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)",
                "11 - 7 = 4 (left: 6 8 4)\n4 + 6 = 10 (left: 10)",
                "11 - 7 = 4 (left: 4 7 8)\n8 - 4 = 4 (left: 4 8)",
                "11 - 7 = 4 (left: 6 8 4)\n6 * 8 = 48 (left: 4 48)",
                "11 - 7 = 4 (left: 6 8 4)\nInput: 2 2",
                "11 - 7 = 4 (left: 6 8 4)\n6 + 8 = 14 (left: 4 14)",
                "11 - 7 = 4 (left: 6 8 4)\n8 - 6 = 2 (left: 2 4)",
                "11 - 7 = 4 (left: 6 8 4)\n6 * 4 = 24 (left: 8 24)",
                "11 - 7 = 4 (left: 6 8 4)\n4 * 8 = 32 (left: 32)",
                "11 - 7 = 4 (left: 6 8 4)\n6 + 8 = 14 (left: 4 14)"
            ],
            "values": [
                2.0,
                0.001,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.001,
                0.003,
                1.001
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 9",
                "2 <- 0",
                "3 <- 0",
                "4 <- 9",
                "5 <- 0",
                "6 <- 0",
                "7 <- 0",
                "8 <- 0",
                "9 <- 0"
            ],
            "resampled_steps": [
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)",
                "11 - 7 = 4 (left: 6 8 4)\n6 + 8 = 14 (left: 4 14)",
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)",
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)",
                "11 - 7 = 4 (left: 6 8 4)\n6 + 8 = 14 (left: 4 14)",
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)",
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)",
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)",
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)",
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)"
            ]
        },
        "step_3": {
            "steps": [
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)\n9 - 3 = 6 (left: 6 5 2)",
                "11 - 7 = 4 (left: 6 8 4)\n6 + 8 = 14 (left: 4 14)\n14 - 4 = 10 (left: 4 10)",
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)\n27 + 5 = 32 (left: 6 32)",
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)\n6 - 5 = 1 (left: 1 27)",
                "11 - 7 = 4 (left: 6 8 4)\n6 + 8 = 14 (left: 4 14)\n14 - 4 = 10 (left: 10)",
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)\n27 - 5 = 22 (left: 6 22)",
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)\n27 * 5 = 135 (left: 6 135)",
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)\n27 * 5 = 135 (left: 6 135)",
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)\n27 * 5 = 135 (left: 6 135)",
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)\n27 + 6 = 33 (left: 5 33)"
            ],
            "values": [
                3.0,
                21.0,
                0.003,
                60.0,
                0.002,
                0.003,
                60.0,
                60.0,
                60.0,
                2.001
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 8",
                "3 <- 7",
                "4 <- 3",
                "5 <- 8",
                "6 <- 8",
                "7 <- 7",
                "8 <- 6",
                "9 <- 1"
            ],
            "resampled_steps": [
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)\n6 - 5 = 1 (left: 1 27)",
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)\n6 - 5 = 1 (left: 1 27)",
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)\n27 * 5 = 135 (left: 6 135)",
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)\n27 * 5 = 135 (left: 6 135)",
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)\n6 - 5 = 1 (left: 1 27)",
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)\n27 * 5 = 135 (left: 6 135)",
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)\n27 * 5 = 135 (left: 6 135)",
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)\n27 * 5 = 135 (left: 6 135)",
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)\n27 * 5 = 135 (left: 6 135)",
                "11 - 7 = 4 (left: 6 8 4)\n6 + 8 = 14 (left: 4 14)\n14 - 4 = 10 (left: 4 10)"
            ]
        },
        "step_4": {
            "steps": [
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)\n6 - 5 = 1 (left: 1 27)\n27 - 1 = 26 (left: 1 26)",
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)\n6 - 5 = 1 (left: 1 27)\n1 + 27 = 28 (left: 28)",
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)\n27 * 5 = 135 (left: 6 135)\n135 * 6 = 810 (left: 810)",
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)\n27 * 5 = 135 (left: 6 135)\n135 - 6 = 129 (left: 129)",
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)\n6 - 5 = 1 (left: 1 27)\n27 - 1 = 26 (left: 26)",
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)\n27 * 5 = 135 (left: 6 135)\n135 / 6 = 22.5 (left: 22.5)",
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)\n27 * 5 = 135 (left: 6 135)\n9 / 3 = 3 (left: 4 3)",
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)\n27 * 5 = 135 (left: 6 135)\n135 / 6 = 22.5 (left: 22.5)",
                "11 - 7 = 4 (left: 6 8 4)\n3 * 9 = 27 (left: 27 5 6)\n27 * 5 = 135 (left: 6 135)\n135 - 6 = 129 (left: 129)",
                "11 - 7 = 4 (left: 6 8 4)\n6 + 8 = 14 (left: 4 14)\n14 - 4 = 10 (left: 4 10)\n9 - 3 = 6 (left: 6 9 27)"
            ],
            "values": [
                41.0,
                0.003,
                0.003,
                0.003,
                0.003,
                20.002,
                21.0,
                0.003,
                0.003,
                22.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.5531185
    },
    "925": {
        "input": "7 9 9 13",
        "step_1": {
            "steps": [
                "9 / 7 = 1.28571428571 (left: 1.28571428571 9 13)",
                "13 / 9 = 1 (left: 7 1 9)",
                "13 - 7 = 6 (left: 7 9 6)",
                "9 - 7 = 2 (left: 2 9 13)",
                "9 / 3 = 3 (left: 7 9 13)",
                "15 - 6 = 9 (left: 5 8 9)",
                "5 * 3 = 15 (left: 11 15)",
                "13 - 7 = 6 (left: 7 9 6)",
                "9 / 7 = 1 (left: 1 9 13)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)"
            ],
            "values": [
                1.002,
                3.0,
                3.0,
                0.003,
                1.002,
                3.0,
                0.003,
                1.001,
                1.002,
                60.0
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 5",
                "2 <- 9",
                "3 <- 9",
                "4 <- 9",
                "5 <- 9",
                "6 <- 9",
                "7 <- 9",
                "8 <- 9",
                "9 <- 9"
            ],
            "resampled_steps": [
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)",
                "15 - 6 = 9 (left: 5 8 9)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)"
            ]
        },
        "step_2": {
            "steps": [
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n13 / 1.85714285714 = 7 (left: 7 13)",
                "15 - 6 = 9 (left: 5 8 9)\n9 - 5 = 4 (left: 4 8)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n9 / 1.85714285714 = 4.85714285714 (left: 4.85714285714 13)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n1.85714285714 * 9 = 16.71428571426 (left: 16.71428571426 13)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n4 / 3.5 = 1.14285714286 (left: 1.14285714286 10 4)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\nPossible next steps:",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n9 - 1.85714285714 = 7.14285714286 (left: 7.14285714286 13)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n1.85714285714 + 9 = 10.85714285714 (left: 10.85714285714 13)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n10 - 5 = 5 (left: 5 15 20)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n1.85714285714 * 9 = 16.71428571426 (left: 16.71428571426 13)"
            ],
            "values": [
                1.001,
                0.003,
                2.001,
                0.003,
                3.0,
                0.003,
                2.001,
                1.001,
                3.0,
                1.001
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 6",
                "2 <- 4",
                "3 <- 4",
                "4 <- 4",
                "5 <- 8",
                "6 <- 6",
                "7 <- 7",
                "8 <- 8",
                "9 <- 4"
            ],
            "resampled_steps": [
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n9 / 1.85714285714 = 4.85714285714 (left: 4.85714285714 13)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n9 - 1.85714285714 = 7.14285714286 (left: 7.14285714286 13)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n4 / 3.5 = 1.14285714286 (left: 1.14285714286 10 4)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n4 / 3.5 = 1.14285714286 (left: 1.14285714286 10 4)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n4 / 3.5 = 1.14285714286 (left: 1.14285714286 10 4)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n10 - 5 = 5 (left: 5 15 20)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n9 - 1.85714285714 = 7.14285714286 (left: 7.14285714286 13)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n1.85714285714 + 9 = 10.85714285714 (left: 10.85714285714 13)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n10 - 5 = 5 (left: 5 15 20)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n4 / 3.5 = 1.14285714286 (left: 1.14285714286 10 4)"
            ]
        },
        "step_3": {
            "steps": [
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n9 / 1.85714285714 = 4.85714285714 (left: 4.85714285714 13)\n5 * 5 = 25 (left: 5 25 5)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n9 - 1.85714285714 = 7.14285714286 (left: 7.14285714286 13)\n7.14285714286 * 13 = 92.85714285718 (left: 13 92.85714285718)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n4 / 3.5 = 1.14285714286 (left: 1.14285714286 10 4)\n3 / 0.5 = 6 (left: 6 5)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n4 / 3.5 = 1.14285714286 (left: 1.14285714286 10 4)\n10 / 1.14285714286 = 8.75 (left: 8.75 4)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n4 / 3.5 = 1.14285714286 (left: 1.14285714286 10 4)\n1.14285714286 * 10 = 11.4285714286 (left: 11.4285714286 4)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n10 - 5 = 5 (left: 5 15 20)\n12 + 3 = 15 (left: 9 15 18)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n9 - 1.85714285714 = 7.14285714286 (left: 7.14285714286 13)\n13 - 7.14285714286 = 5.85714285714 (left: 5.85714285714 13)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n1.85714285714 + 9 = 10.85714285714 (left: 10.85714285714 13)\nInput: 4.5 2.5",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n10 - 5 = 5 (left: 5 15 20)\n20 / 5 = 4 (left: 4 15)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n4 / 3.5 = 1.14285714286 (left: 1.14285714286 10 4)\n10 / 1.14285714286 = 8.75 (left: 8.75 4)"
            ],
            "values": [
                60.0,
                22.0,
                0.003,
                1.001,
                1.002,
                40.001,
                2.001,
                0.003,
                0.003,
                21.001
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 1",
                "2 <- 0",
                "3 <- 0",
                "4 <- 5",
                "5 <- 5",
                "6 <- 0",
                "7 <- 0",
                "8 <- 9",
                "9 <- 0"
            ],
            "resampled_steps": [
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n9 / 1.85714285714 = 4.85714285714 (left: 4.85714285714 13)\n5 * 5 = 25 (left: 5 25 5)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n9 - 1.85714285714 = 7.14285714286 (left: 7.14285714286 13)\n7.14285714286 * 13 = 92.85714285718 (left: 13 92.85714285718)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n9 / 1.85714285714 = 4.85714285714 (left: 4.85714285714 13)\n5 * 5 = 25 (left: 5 25 5)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n9 / 1.85714285714 = 4.85714285714 (left: 4.85714285714 13)\n5 * 5 = 25 (left: 5 25 5)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n10 - 5 = 5 (left: 5 15 20)\n12 + 3 = 15 (left: 9 15 18)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n10 - 5 = 5 (left: 5 15 20)\n12 + 3 = 15 (left: 9 15 18)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n9 / 1.85714285714 = 4.85714285714 (left: 4.85714285714 13)\n5 * 5 = 25 (left: 5 25 5)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n9 / 1.85714285714 = 4.85714285714 (left: 4.85714285714 13)\n5 * 5 = 25 (left: 5 25 5)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n4 / 3.5 = 1.14285714286 (left: 1.14285714286 10 4)\n10 / 1.14285714286 = 8.75 (left: 8.75 4)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n9 / 1.85714285714 = 4.85714285714 (left: 4.85714285714 13)\n5 * 5 = 25 (left: 5 25 5)"
            ]
        },
        "step_4": {
            "steps": [
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n9 / 1.85714285714 = 4.85714285714 (left: 4.85714285714 13)\n5 * 5 = 25 (left: 5 25 5)\n5 + 25 = 30 (left: 5 30)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n9 - 1.85714285714 = 7.14285714286 (left: 7.14285714286 13)\n7.14285714286 * 13 = 92.85714285718 (left: 13 92.85714285718)\n13 + 92.85714285718 = 105.85714285718 (left: 92.85714285718 105.85714285718)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n9 / 1.85714285714 = 4.85714285714 (left: 4.85714285714 13)\n5 * 5 = 25 (left: 5 25 5)\n25 / 5 = 5 (left: 5 5)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n9 / 1.85714285714 = 4.85714285714 (left: 4.85714285714 13)\n5 * 5 = 25 (left: 5 25 5)\n25 / 5 = 5 (left: 5 5)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n10 - 5 = 5 (left: 5 15 20)\n12 + 3 = 15 (left: 9 15 18)\n18 - 9 = 9 (left: 9 18)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n10 - 5 = 5 (left: 5 15 20)\n12 + 3 = 15 (left: 9 15 18)\n18 / 9 = 2 (left: 2 18)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n9 / 1.85714285714 = 4.85714285714 (left: 4.85714285714 13)\n5 * 5 = 25 (left: 5 25 5)\n5 / 5 = 1 (left: 1 5)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n9 / 1.85714285714 = 4.85714285714 (left: 4.85714285714 13)\n5 * 5 = 25 (left: 5 25 5)\n5 * 5 = 25 (left: 25 5)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n4 / 3.5 = 1.14285714286 (left: 1.14285714286 10 4)\n10 / 1.14285714286 = 8.75 (left: 8.75 4)\n8.75 - 4 = 4.75 (left: 4.75 4)",
                "13 / 7 = 1.85714285714 (left: 1.85714285714 9 13)\n9 / 1.85714285714 = 4.85714285714 (left: 4.85714285714 13)\n5 * 5 = 25 (left: 5 25 5)\n5 / 5 = 1 (left: 1 5)"
            ],
            "values": [
                0.002,
                2.001,
                0.001,
                1.002,
                0.003,
                0.003,
                0.001,
                0.002,
                2.001,
                21.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.582049
    },
    "926": {
        "input": "3 6 9 12",
        "step_1": {
            "steps": [
                "12 - 9 = 3 (left: 3 6 12)",
                "12 + 3 = 15 (left: 6 9 15)",
                "6 / 3 = 2 (left: 2 9 12)",
                "6 - 3 = 3 (left: 3 6 12)",
                "3 + 6 = 9 (left: 9 9 12)",
                "6 / 3 = 2 (left: 2 9 12)",
                "12 - 3 = 9 (left: 6 9 9)",
                "3 + 6 = 9 (left: 9 9 12)",
                "12 - 6 = 6 (left: 3 6 12)",
                "9 - 3 = 6 (left: 6 9 12)"
            ],
            "values": [
                1.002,
                1.002,
                1.002,
                0.003,
                0.003,
                0.003,
                2.001,
                2.001,
                3.0,
                41.0
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 9",
                "2 <- 9",
                "3 <- 9",
                "4 <- 9",
                "5 <- 9",
                "6 <- 9",
                "7 <- 9",
                "8 <- 9",
                "9 <- 9"
            ],
            "resampled_steps": [
                "9 - 3 = 6 (left: 6 9 12)",
                "9 - 3 = 6 (left: 6 9 12)",
                "9 - 3 = 6 (left: 6 9 12)",
                "9 - 3 = 6 (left: 6 9 12)",
                "9 - 3 = 6 (left: 6 9 12)",
                "9 - 3 = 6 (left: 6 9 12)",
                "9 - 3 = 6 (left: 6 9 12)",
                "9 - 3 = 6 (left: 6 9 12)",
                "9 - 3 = 6 (left: 6 9 12)",
                "9 - 3 = 6 (left: 6 9 12)"
            ]
        },
        "step_2": {
            "steps": [
                "9 - 3 = 6 (left: 6 9 12)\n6 + 9 = 15 (left: 15 12)",
                "9 - 3 = 6 (left: 6 9 12)\n12 - 6 = 6 (left: 6)",
                "9 - 3 = 6 (left: 6 9 12)\n6 + 9 = 15 (left: 15 12)",
                "9 - 3 = 6 (left: 6 9 12)\n9 + 12 = 21 (left: 6 21)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)",
                "9 - 3 = 6 (left: 6 9 12)\n9 * 6 = 54 (left: 12 54)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 6 = 3 (left: 3 12)",
                "9 - 3 = 6 (left: 6 9 12)\n12 - 6 = 6 (left: 6 6)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 6 = 3 (left: 3 12)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 6 = 3 (left: 3 12)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.001,
                60.0,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 4",
                "2 <- 4",
                "3 <- 4",
                "4 <- 4",
                "5 <- 4",
                "6 <- 4",
                "7 <- 4",
                "8 <- 4",
                "9 <- 4"
            ],
            "resampled_steps": [
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)"
            ]
        },
        "step_3": {
            "steps": [
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)\n12 - 6 = 6 (left: 6 6)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)\n6 * 12 = 72 (left: 72)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 6 12 36)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)\n12 - 6 = 6 (left: 6 6)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)\nInput: 1 12",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)\n12 * 6 = 72 (left: 72)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)"
            ],
            "values": [
                1.002,
                0.003,
                21.001,
                0.003,
                21.001,
                60.0,
                0.003,
                2.001,
                0.003,
                40.001
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 4",
                "2 <- 5",
                "3 <- 5",
                "4 <- 2",
                "5 <- 5",
                "6 <- 5",
                "7 <- 5",
                "8 <- 7",
                "9 <- 9"
            ],
            "resampled_steps": [
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 6 12 36)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)"
            ]
        },
        "step_4": {
            "steps": [
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 / 12 = 3 (left: 3)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 6 12 36)\n36 / 6 = 6 (left: 6 12)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 + 12 = 48 (left: 48)",
                "9 - 3 = 6 (left: 6 9 12)\n9 - 3 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24"
            ],
            "values": [
                0.003,
                0.002,
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                60.0,
                0.0,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.6022435
    },
    "927": {
        "input": "6 9 12 13",
        "step_1": {
            "steps": [
                "9 + 3 = 12 (left: 6 12 13)",
                "12 + 1 = 13 (left: 6 13 13)",
                "13 - 9 = 4 (left: 6 12 4)",
                "6 * 9 = 54 (left: 12 13 54)",
                "3 + 5 = 8 (left: 7 8 8)",
                "13 - 6 = 7 (left: 6 9 7)",
                "6 + 9 = 15 (left: 12 13 15)",
                "Input: 3 6 9 12",
                "6 * 9 = 54 (left: 12 13 54)",
                "6 * 4 = 24 (left: 8 10 24)"
            ],
            "values": [
                2.001,
                0.003,
                41.0,
                1.001,
                3.0,
                2.001,
                2.001,
                0.003,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 2",
                "2 <- 2",
                "3 <- 2",
                "4 <- 2",
                "5 <- 2",
                "6 <- 2",
                "7 <- 6",
                "8 <- 4",
                "9 <- 6"
            ],
            "resampled_steps": [
                "13 - 9 = 4 (left: 6 12 4)",
                "13 - 9 = 4 (left: 6 12 4)",
                "13 - 9 = 4 (left: 6 12 4)",
                "13 - 9 = 4 (left: 6 12 4)",
                "13 - 9 = 4 (left: 6 12 4)",
                "13 - 9 = 4 (left: 6 12 4)",
                "13 - 9 = 4 (left: 6 12 4)",
                "6 + 9 = 15 (left: 12 13 15)",
                "3 + 5 = 8 (left: 7 8 8)",
                "6 + 9 = 15 (left: 12 13 15)"
            ]
        },
        "step_2": {
            "steps": [
                "13 - 9 = 4 (left: 6 12 4)\nInput: 7 5 2 14",
                "13 - 9 = 4 (left: 6 12 4)\n6 / 4 = 1.5 (left: 1.5)",
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)",
                "13 - 9 = 4 (left: 6 12 4)\n12 * 6 = 72 (left: 72)",
                "13 - 9 = 4 (left: 6 12 4)\n12 / 6 = 2 (left: 2 4)",
                "13 - 9 = 4 (left: 6 12 4)\n6 * 4 = 24 (left: 12 24)",
                "13 - 9 = 4 (left: 6 12 4)\n12 / 4 = 3 (left: 6 3)",
                "6 + 9 = 15 (left: 12 13 15)\nInput: 3 4 8 9",
                "3 + 5 = 8 (left: 7 8 8)\n8 * 7 = 56 (left: 56)",
                "6 + 9 = 15 (left: 12 13 15)\n13 * 15 = 195 (left: 12 195)"
            ],
            "values": [
                0.003,
                0.002,
                1.001,
                0.003,
                1.0,
                0.003,
                0.001,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 2",
                "2 <- 2",
                "3 <- 4",
                "4 <- 2",
                "5 <- 4",
                "6 <- 4",
                "7 <- 2",
                "8 <- 2",
                "9 <- 4"
            ],
            "resampled_steps": [
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)",
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)",
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)",
                "13 - 9 = 4 (left: 6 12 4)\n12 / 6 = 2 (left: 2 4)",
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)",
                "13 - 9 = 4 (left: 6 12 4)\n12 / 6 = 2 (left: 2 4)",
                "13 - 9 = 4 (left: 6 12 4)\n12 / 6 = 2 (left: 2 4)",
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)",
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)",
                "13 - 9 = 4 (left: 6 12 4)\n12 / 6 = 2 (left: 2 4)"
            ]
        },
        "step_3": {
            "steps": [
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)\n18 + 4 = 22 (left: 22)",
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)\n18 / 4 = 4.5 (left: 4.5)",
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)\n18 / 4 = 4.5 (left: 4.5)",
                "13 - 9 = 4 (left: 6 12 4)\n12 / 6 = 2 (left: 2 4)\n4 / 2 = 2 (left: 2)",
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)\n18 + 4 = 22 (left: 22)",
                "13 - 9 = 4 (left: 6 12 4)\n12 / 6 = 2 (left: 2 4)\nInput: 3 9 5",
                "13 - 9 = 4 (left: 6 12 4)\n12 / 6 = 2 (left: 2 4)\n2 + 4 = 6 (left: 6)",
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)\n18 - 4 = 14 (left: 14)",
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)\n4 + 18 = 22 (left: 18 22)",
                "13 - 9 = 4 (left: 6 12 4)\n12 / 6 = 2 (left: 2 4)\n4 / 2 = 2 (left: 2)"
            ],
            "values": [
                0.001,
                0.001,
                0.002,
                0.001,
                60.0,
                0.003,
                0.003,
                0.002,
                0.002,
                0.001
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 4",
                "2 <- 4",
                "3 <- 4",
                "4 <- 4",
                "5 <- 4",
                "6 <- 4",
                "7 <- 4",
                "8 <- 4",
                "9 <- 4"
            ],
            "resampled_steps": [
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)\n18 + 4 = 22 (left: 22)",
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)\n18 + 4 = 22 (left: 22)",
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)\n18 + 4 = 22 (left: 22)",
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)\n18 + 4 = 22 (left: 22)",
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)\n18 + 4 = 22 (left: 22)",
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)\n18 + 4 = 22 (left: 22)",
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)\n18 + 4 = 22 (left: 22)",
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)\n18 + 4 = 22 (left: 22)",
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)\n18 + 4 = 22 (left: 22)",
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)\n18 + 4 = 22 (left: 22)"
            ]
        },
        "step_4": {
            "steps": [
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)\n18 + 4 = 22 (left: 22)\n22 / 2 = 11 (left: 11)",
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)\n18 + 4 = 22 (left: 22)\n22 / 2 = 11 (left: 11)",
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)\n18 + 4 = 22 (left: 22)\nThere are no possible next steps with the input 22 as it is a single number.",
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)\n18 + 4 = 22 (left: 22)\nNone. The input is only one number and there are no other numbers to perform operations with.",
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)\n18 + 4 = 22 (left: 22)\n22 - 8 = 14 (left: 14)",
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)\n18 + 4 = 22 (left: 22)\n22 / 2 = 11",
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)\n18 + 4 = 22 (left: 22)\nNone, as there is only one number provided.",
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)\n18 + 4 = 22 (left: 22)\n22 / 2 = 11",
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)\n18 + 4 = 22 (left: 22)\n22 / 2 = 11",
                "13 - 9 = 4 (left: 6 12 4)\n6 + 12 = 18 (left: 18 4)\n18 + 4 = 22 (left: 22)\nNone, since there is only one number given."
            ],
            "values": [
                0.001,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.6222350000000001
    },
    "928": {
        "input": "4 7 9 13",
        "step_1": {
            "steps": [
                "9 + 4 = 13 (left: 7 13 13)",
                "13 - 9 = 4 (left: 4 7 13)",
                "13 / 4 = 3.25 (left: 3.25 7 9)",
                "13 - 9 = 4 (left: 4 7 13)",
                "4 + 7 = 11 (left: 9 11 13)",
                "4 * 7 = 28 (left: 9 13 28)",
                "7 - 4 = 3 (left: 3 9 13)",
                "13 - 4 = 9 (left: 7 9 9)",
                "4 * 7 = 28 (left: 9 13 28)",
                "4 * 7 = 28 (left: 9 13 28)"
            ],
            "values": [
                21.001,
                20.002,
                1.002,
                41.0,
                0.003,
                22.0,
                1.002,
                3.0,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 1",
                "2 <- 1",
                "3 <- 0",
                "4 <- 0",
                "5 <- 3",
                "6 <- 3",
                "7 <- 3",
                "8 <- 5",
                "9 <- 3"
            ],
            "resampled_steps": [
                "4 * 7 = 28 (left: 9 13 28)",
                "13 - 9 = 4 (left: 4 7 13)",
                "13 - 9 = 4 (left: 4 7 13)",
                "9 + 4 = 13 (left: 7 13 13)",
                "9 + 4 = 13 (left: 7 13 13)",
                "13 - 9 = 4 (left: 4 7 13)",
                "13 - 9 = 4 (left: 4 7 13)",
                "13 - 9 = 4 (left: 4 7 13)",
                "4 * 7 = 28 (left: 9 13 28)",
                "13 - 9 = 4 (left: 4 7 13)"
            ]
        },
        "step_2": {
            "steps": [
                "4 * 7 = 28 (left: 9 13 28)\n9 + 13 = 22 (left: 22 28)",
                "13 - 9 = 4 (left: 4 7 13)\n4 * 7 = 28 (left: 28 13)",
                "13 - 9 = 4 (left: 4 7 13)\n4 * 7 = 28 (left: 28 13)",
                "9 + 4 = 13 (left: 7 13 13)\n13 / 7 = 1.857 (left: 1.857 13)",
                "9 + 4 = 13 (left: 7 13 13)\n13 / 7 = 1 (left: 1 13)",
                "13 - 9 = 4 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)",
                "13 - 9 = 4 (left: 4 7 13)\n13 - 4 = 9 (left: 4 9)",
                "13 - 9 = 4 (left: 4 7 13)\n7 / 4 = 1.75 (left: 1.75 13)",
                "4 * 7 = 28 (left: 9 13 28)\n28 - 13 = 15 (left: 9 15 28)",
                "13 - 9 = 4 (left: 4 7 13)\nInput: 1 3 5 7"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                21.0,
                1.002,
                40.0,
                20.002,
                1.0,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 5",
                "2 <- 5",
                "3 <- 5",
                "4 <- 3",
                "5 <- 5",
                "6 <- 5",
                "7 <- 5",
                "8 <- 3",
                "9 <- 3"
            ],
            "resampled_steps": [
                "9 + 4 = 13 (left: 7 13 13)\n13 / 7 = 1.857 (left: 1.857 13)",
                "13 - 9 = 4 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)",
                "13 - 9 = 4 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)",
                "13 - 9 = 4 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)",
                "9 + 4 = 13 (left: 7 13 13)\n13 / 7 = 1.857 (left: 1.857 13)",
                "13 - 9 = 4 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)",
                "13 - 9 = 4 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)",
                "13 - 9 = 4 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)",
                "9 + 4 = 13 (left: 7 13 13)\n13 / 7 = 1.857 (left: 1.857 13)",
                "9 + 4 = 13 (left: 7 13 13)\n13 / 7 = 1.857 (left: 1.857 13)"
            ]
        },
        "step_3": {
            "steps": [
                "9 + 4 = 13 (left: 7 13 13)\n13 / 7 = 1.857 (left: 1.857 13)\n1.857 - 13 = -11.143 (left: -11.143)",
                "13 - 9 = 4 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n10 + 2 = 12 (left: 5 12)",
                "13 - 9 = 4 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n9 - 3 = 6 (left: 6 5)",
                "13 - 9 = 4 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "9 + 4 = 13 (left: 7 13 13)\n13 / 7 = 1.857 (left: 1.857 13)\n13 / 1.857 = 7 (left: 7)",
                "13 - 9 = 4 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n6 / 4 = 1.5 (left: 1.5)",
                "13 - 9 = 4 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "13 - 9 = 4 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 + 6 = 10 (left: 10)",
                "9 + 4 = 13 (left: 7 13 13)\n13 / 7 = 1.857 (left: 1.857 13)\n4 * 2 = 8 (left: 8 5)",
                "9 + 4 = 13 (left: 7 13 13)\n13 / 7 = 1.857 (left: 1.857 13)\n1.857 - 13 = -11.143 (left: -11.143)"
            ],
            "values": [
                0.003,
                1.001,
                0.003,
                60.0,
                0.002,
                0.001,
                60.0,
                0.002,
                40.001,
                0.001
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 3",
                "2 <- 3",
                "3 <- 8",
                "4 <- 6",
                "5 <- 6",
                "6 <- 3",
                "7 <- 8",
                "8 <- 3",
                "9 <- 3"
            ],
            "resampled_steps": [
                "13 - 9 = 4 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "13 - 9 = 4 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "13 - 9 = 4 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "9 + 4 = 13 (left: 7 13 13)\n13 / 7 = 1.857 (left: 1.857 13)\n4 * 2 = 8 (left: 8 5)",
                "13 - 9 = 4 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "13 - 9 = 4 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "13 - 9 = 4 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "9 + 4 = 13 (left: 7 13 13)\n13 / 7 = 1.857 (left: 1.857 13)\n4 * 2 = 8 (left: 8 5)",
                "13 - 9 = 4 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "13 - 9 = 4 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)"
            ]
        },
        "step_4": {
            "steps": [
                "13 - 9 = 4 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * (13 - 9) * 6 = 24",
                "13 - 9 = 4 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * (13 - 9) * 7 = 24",
                "13 - 9 = 4 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * (13 - 9) * 7 = 24",
                "9 + 4 = 13 (left: 7 13 13)\n13 / 7 = 1.857 (left: 1.857 13)\n4 * 2 = 8 (left: 8 5)\n8 - 5 = 3 (left: 3)",
                "13 - 9 = 4 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (13 - 9) * (13 - 7) = 24",
                "13 - 9 = 4 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * (13 - 9) * 6 = 24",
                "13 - 9 = 4 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * (13 - 9) * 6 = 24",
                "9 + 4 = 13 (left: 7 13 13)\n13 / 7 = 1.857 (left: 1.857 13)\n4 * 2 = 8 (left: 8 5)\n8 * 5 = 40 (left: 40)",
                "13 - 9 = 4 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (13 - 9) * (13 - 7) = 24",
                "13 - 9 = 4 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * (7 + (13 - 9)) = 24"
            ],
            "values": [
                0.003,
                60.0,
                60.0,
                0.003,
                60.0,
                0.003,
                0.003,
                0.003,
                60.0,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.644315
    },
    "929": {
        "input": "5 6 8 12",
        "step_1": {
            "steps": [
                "12 + 5 = 17 (left: 6 8 17)",
                "6 / 5 = 1.2 (left: 1.2 8 12)",
                "8 - 6 = 2 (left: 5 2 12)",
                "Possible next steps:",
                "12 / 6 = 2 (left: 5 2 8)",
                "12 / 6 = 2 (left: 5 8 2)",
                "8 + 5 = 13 (left: 6 13 12)",
                "5 * 6 = 30 (left: 8 30 12)",
                "12 - 8 = 4 (left: 4 8 12)",
                "5 * 6 = 30 (left: 8 12 30)"
            ],
            "values": [
                2.001,
                2.001,
                3.0,
                0.003,
                3.0,
                3.0,
                3.0,
                3.0,
                20.002,
                3.0
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 8",
                "2 <- 8",
                "3 <- 9",
                "4 <- 5",
                "5 <- 4",
                "6 <- 9",
                "7 <- 4",
                "8 <- 8",
                "9 <- 2"
            ],
            "resampled_steps": [
                "5 * 6 = 30 (left: 8 12 30)",
                "12 - 8 = 4 (left: 4 8 12)",
                "12 - 8 = 4 (left: 4 8 12)",
                "5 * 6 = 30 (left: 8 12 30)",
                "12 / 6 = 2 (left: 5 8 2)",
                "12 / 6 = 2 (left: 5 2 8)",
                "5 * 6 = 30 (left: 8 12 30)",
                "12 / 6 = 2 (left: 5 2 8)",
                "12 - 8 = 4 (left: 4 8 12)",
                "8 - 6 = 2 (left: 5 2 12)"
            ]
        },
        "step_2": {
            "steps": [
                "5 * 6 = 30 (left: 8 12 30)\n8 * 12 = 96 (left: 30 96)",
                "12 - 8 = 4 (left: 4 8 12)\n8 * 4 = 32 (left: 8 32)",
                "12 - 8 = 4 (left: 4 8 12)\n4 * 8 = 32 (left: 32)",
                "5 * 6 = 30 (left: 8 12 30)\n30 / 12 = 2.5 (left: 8 2.5)",
                "12 / 6 = 2 (left: 5 8 2)\n8 - 5 = 3 (left: 3 2)",
                "12 / 6 = 2 (left: 5 2 8)\n5 * 2 = 10 (left: 10 8)",
                "5 * 6 = 30 (left: 8 12 30)\n8 * 3 = 24 (left: 24 30)",
                "12 / 6 = 2 (left: 5 2 8)\n5 * 2 = 10 (left: 10 8)",
                "12 - 8 = 4 (left: 4 8 12)\n12 - 8 = 4 (left: 4 4)",
                "8 - 6 = 2 (left: 5 2 12)\n5 - 2 = 3 (left: 3 12)"
            ],
            "values": [
                0.003,
                20.002,
                0.003,
                1.001,
                0.0,
                1.002,
                0.003,
                2.001,
                1.002,
                1.002
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 5",
                "2 <- 8",
                "3 <- 7",
                "4 <- 1",
                "5 <- 1",
                "6 <- 1",
                "7 <- 9",
                "8 <- 1",
                "9 <- 1"
            ],
            "resampled_steps": [
                "12 - 8 = 4 (left: 4 8 12)\n8 * 4 = 32 (left: 8 32)",
                "12 / 6 = 2 (left: 5 2 8)\n5 * 2 = 10 (left: 10 8)",
                "12 - 8 = 4 (left: 4 8 12)\n12 - 8 = 4 (left: 4 4)",
                "12 / 6 = 2 (left: 5 2 8)\n5 * 2 = 10 (left: 10 8)",
                "12 - 8 = 4 (left: 4 8 12)\n8 * 4 = 32 (left: 8 32)",
                "12 - 8 = 4 (left: 4 8 12)\n8 * 4 = 32 (left: 8 32)",
                "12 - 8 = 4 (left: 4 8 12)\n8 * 4 = 32 (left: 8 32)",
                "8 - 6 = 2 (left: 5 2 12)\n5 - 2 = 3 (left: 3 12)",
                "12 - 8 = 4 (left: 4 8 12)\n8 * 4 = 32 (left: 8 32)",
                "12 - 8 = 4 (left: 4 8 12)\n8 * 4 = 32 (left: 8 32)"
            ]
        },
        "step_3": {
            "steps": [
                "12 - 8 = 4 (left: 4 8 12)\n8 * 4 = 32 (left: 8 32)\n32 - 8 = 24 (left: 24)",
                "12 / 6 = 2 (left: 5 2 8)\n5 * 2 = 10 (left: 10 8)\n10 - 8 = 2 (left: 2 8)",
                "12 - 8 = 4 (left: 4 8 12)\n12 - 8 = 4 (left: 4 4)\n4 * 4 = 16 (left: 16)",
                "12 / 6 = 2 (left: 5 2 8)\n5 * 2 = 10 (left: 10 8)\n8 - 10 = -2 (left: -2)",
                "12 - 8 = 4 (left: 4 8 12)\n8 * 4 = 32 (left: 8 32)\n8 * 4 = 32 (left: 32)",
                "12 - 8 = 4 (left: 4 8 12)\n8 * 4 = 32 (left: 8 32)\n32 - 8 = 24 (left: 24)",
                "12 - 8 = 4 (left: 4 8 12)\n8 * 4 = 32 (left: 8 32)\n32 - 8 = 24 (left: 24 8)",
                "8 - 6 = 2 (left: 5 2 12)\n5 - 2 = 3 (left: 3 12)\n12 - 3 = 9 (left: 9)",
                "12 - 8 = 4 (left: 4 8 12)\n8 * 4 = 32 (left: 8 32)\n32 - 8 = 24 (left: 8 24)",
                "12 - 8 = 4 (left: 4 8 12)\n8 * 4 = 32 (left: 8 32)\n8 * 4 = 32 (left: 32)"
            ],
            "values": [
                60.0,
                0.003,
                20.002,
                0.003,
                0.003,
                60.0,
                1.002,
                0.001,
                1.001,
                0.003
            ],
            "resampled": [
                "0 <- 5",
                "1 <- 0",
                "2 <- 2",
                "3 <- 8",
                "4 <- 5",
                "5 <- 0",
                "6 <- 2",
                "7 <- 0",
                "8 <- 0",
                "9 <- 0"
            ],
            "resampled_steps": [
                "12 - 8 = 4 (left: 4 8 12)\n8 * 4 = 32 (left: 8 32)\n32 - 8 = 24 (left: 24)",
                "12 - 8 = 4 (left: 4 8 12)\n8 * 4 = 32 (left: 8 32)\n32 - 8 = 24 (left: 24)",
                "12 - 8 = 4 (left: 4 8 12)\n12 - 8 = 4 (left: 4 4)\n4 * 4 = 16 (left: 16)",
                "12 - 8 = 4 (left: 4 8 12)\n8 * 4 = 32 (left: 8 32)\n32 - 8 = 24 (left: 8 24)",
                "12 - 8 = 4 (left: 4 8 12)\n8 * 4 = 32 (left: 8 32)\n32 - 8 = 24 (left: 24)",
                "12 - 8 = 4 (left: 4 8 12)\n8 * 4 = 32 (left: 8 32)\n32 - 8 = 24 (left: 24)",
                "12 - 8 = 4 (left: 4 8 12)\n12 - 8 = 4 (left: 4 4)\n4 * 4 = 16 (left: 16)",
                "12 - 8 = 4 (left: 4 8 12)\n8 * 4 = 32 (left: 8 32)\n32 - 8 = 24 (left: 24)",
                "12 - 8 = 4 (left: 4 8 12)\n8 * 4 = 32 (left: 8 32)\n32 - 8 = 24 (left: 24)",
                "12 - 8 = 4 (left: 4 8 12)\n8 * 4 = 32 (left: 8 32)\n32 - 8 = 24 (left: 24)"
            ]
        },
        "step_4": {
            "steps": [
                "12 - 8 = 4 (left: 4 8 12)\n8 * 4 = 32 (left: 8 32)\n32 - 8 = 24 (left: 24)\nAnswer: ((5 + 6) * (8 - 12)) - 8 = 24",
                "12 - 8 = 4 (left: 4 8 12)\n8 * 4 = 32 (left: 8 32)\n32 - 8 = 24 (left: 24)\nAnswer: (12 - 8) * (8 * 4) = 24",
                "12 - 8 = 4 (left: 4 8 12)\n12 - 8 = 4 (left: 4 4)\n4 * 4 = 16 (left: 16)\nThere are no possible next steps as there are no other numbers to perform operations with. The final result is 16.",
                "12 - 8 = 4 (left: 4 8 12)\n8 * 4 = 32 (left: 8 32)\n32 - 8 = 24 (left: 8 24)\n3 + 5 = 8 (left: 7 8)",
                "12 - 8 = 4 (left: 4 8 12)\n8 * 4 = 32 (left: 8 32)\n32 - 8 = 24 (left: 24)\nAnswer: ((5 * 6) - (12 - 8)) = 24",
                "12 - 8 = 4 (left: 4 8 12)\n8 * 4 = 32 (left: 8 32)\n32 - 8 = 24 (left: 24)\nAnswer: ((12 - 8) * 8) - 4 = 24",
                "12 - 8 = 4 (left: 4 8 12)\n12 - 8 = 4 (left: 4 4)\n4 * 4 = 16 (left: 16)\n16 / 2 = 8",
                "12 - 8 = 4 (left: 4 8 12)\n8 * 4 = 32 (left: 8 32)\n32 - 8 = 24 (left: 24)\nAnswer: (12 - 8) * (8 * 4) = 24",
                "12 - 8 = 4 (left: 4 8 12)\n8 * 4 = 32 (left: 8 32)\n32 - 8 = 24 (left: 24)\nAnswer: (12 - 8) * (8 + 4) = 24",
                "12 - 8 = 4 (left: 4 8 12)\n8 * 4 = 32 (left: 8 32)\n32 - 8 = 24 (left: 24)\nAnswer: ((12 - 8) * 8) - 4 = 24"
            ],
            "values": [
                40.001,
                40.001,
                0.003,
                0.003,
                60.0,
                60.0,
                0.003,
                0.003,
                0.003,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.6643159999999999
    },
    "930": {
        "input": "2 4 6 7",
        "step_1": {
            "steps": [
                "2 + 4 = 6 (left: 6 6 7)",
                "4 + 6 = 10 (left: 2 10 7)",
                "6 + 7 = 13 (left: 2 4 13)",
                "6 * 7 = 42 (left: 2 4 42)",
                "Input: 8 2 4 5",
                "4 + 6 = 10 (left: 2 10 7)",
                "6 * 7 = 42 (left: 2 4 42)",
                "4 / 6 = 0.6666666666666666 (left: 2 0.6666666666666666 7)",
                "2 + 6 = 8 (left: 8 4 7)",
                "6 - 2 = 4 (left: 4 6 7)"
            ],
            "values": [
                1.002,
                1.002,
                0.003,
                2.001,
                0.003,
                1.002,
                0.003,
                3.0,
                2.001,
                22.0
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 9",
                "2 <- 0",
                "3 <- 3",
                "4 <- 9",
                "5 <- 0",
                "6 <- 9",
                "7 <- 8",
                "8 <- 9",
                "9 <- 8"
            ],
            "resampled_steps": [
                "6 * 7 = 42 (left: 2 4 42)",
                "6 - 2 = 4 (left: 4 6 7)",
                "2 + 4 = 6 (left: 6 6 7)",
                "6 * 7 = 42 (left: 2 4 42)",
                "6 - 2 = 4 (left: 4 6 7)",
                "2 + 4 = 6 (left: 6 6 7)",
                "6 - 2 = 4 (left: 4 6 7)",
                "2 + 6 = 8 (left: 8 4 7)",
                "6 - 2 = 4 (left: 4 6 7)",
                "2 + 6 = 8 (left: 8 4 7)"
            ]
        },
        "step_2": {
            "steps": [
                "6 * 7 = 42 (left: 2 4 42)\n9 / 3 = 3 (left: 3 27)",
                "6 - 2 = 4 (left: 4 6 7)\n4 + 6 = 10 (left: 7 10)",
                "2 + 4 = 6 (left: 6 6 7)\n6 + 6 = 12 (left: 12 7)",
                "6 * 7 = 42 (left: 2 4 42)\n2 * 4 = 8 (left: 8 42)",
                "6 - 2 = 4 (left: 4 6 7)\n4 * 6 = 24 (left: 7 24)",
                "2 + 4 = 6 (left: 6 6 7)\n6 / 6 = 1 (left: 1 7)",
                "6 - 2 = 4 (left: 4 6 7)\n7 - 4 = 3 (left: 3 7)",
                "2 + 6 = 8 (left: 8 4 7)\n7 / 4 = 1.75 (left: 8 1.75)",
                "6 - 2 = 4 (left: 4 6 7)\nInput: 5 15 18",
                "2 + 6 = 8 (left: 8 4 7)\n4 + 7 = 11 (left: 8 11)"
            ],
            "values": [
                20.002,
                0.0,
                0.003,
                0.002,
                0.002,
                20.0,
                0.002,
                2.0,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 5",
                "2 <- 5",
                "3 <- 0",
                "4 <- 5",
                "5 <- 5",
                "6 <- 7",
                "7 <- 0",
                "8 <- 0",
                "9 <- 5"
            ],
            "resampled_steps": [
                "6 * 7 = 42 (left: 2 4 42)\n9 / 3 = 3 (left: 3 27)",
                "2 + 4 = 6 (left: 6 6 7)\n6 / 6 = 1 (left: 1 7)",
                "2 + 4 = 6 (left: 6 6 7)\n6 / 6 = 1 (left: 1 7)",
                "6 * 7 = 42 (left: 2 4 42)\n9 / 3 = 3 (left: 3 27)",
                "2 + 4 = 6 (left: 6 6 7)\n6 / 6 = 1 (left: 1 7)",
                "2 + 4 = 6 (left: 6 6 7)\n6 / 6 = 1 (left: 1 7)",
                "2 + 6 = 8 (left: 8 4 7)\n7 / 4 = 1.75 (left: 8 1.75)",
                "6 * 7 = 42 (left: 2 4 42)\n9 / 3 = 3 (left: 3 27)",
                "6 * 7 = 42 (left: 2 4 42)\n9 / 3 = 3 (left: 3 27)",
                "2 + 4 = 6 (left: 6 6 7)\n6 / 6 = 1 (left: 1 7)"
            ]
        },
        "step_3": {
            "steps": [
                "6 * 7 = 42 (left: 2 4 42)\n9 / 3 = 3 (left: 3 27)\n27 / 3 = 9 (left: 9)",
                "2 + 4 = 6 (left: 6 6 7)\n6 / 6 = 1 (left: 1 7)\n7 / 1 = 7 (left: 7)",
                "2 + 4 = 6 (left: 6 6 7)\n6 / 6 = 1 (left: 1 7)\n7 / 1 = 7 (left: 7)",
                "6 * 7 = 42 (left: 2 4 42)\n9 / 3 = 3 (left: 3 27)\n3 * 27 = 81 (left: 81)",
                "2 + 4 = 6 (left: 6 6 7)\n6 / 6 = 1 (left: 1 7)\n1 + 7 = 8 (left: 8)",
                "2 + 4 = 6 (left: 6 6 7)\n6 / 6 = 1 (left: 1 7)\n7 - 7 = 0 (left: 0)",
                "2 + 6 = 8 (left: 8 4 7)\n7 / 4 = 1.75 (left: 8 1.75)\n8 - 1.75 = 6.25 (left: 6.25)",
                "6 * 7 = 42 (left: 2 4 42)\n9 / 3 = 3 (left: 3 27)\n3 * 27 = 81 (left: 81)",
                "6 * 7 = 42 (left: 2 4 42)\n9 / 3 = 3 (left: 3 27)\n3 + 27 = 30 (left: 30)",
                "2 + 4 = 6 (left: 6 6 7)\n6 / 6 = 1 (left: 1 7)\n1 * 7 = 7 (left: 7)"
            ],
            "values": [
                0.003,
                0.0,
                0.003,
                0.003,
                0.003,
                20.002,
                0.003,
                0.003,
                20.002,
                0.001
            ],
            "resampled": [
                "0 <- 8",
                "1 <- 5",
                "2 <- 8",
                "3 <- 8",
                "4 <- 5",
                "5 <- 8",
                "6 <- 8",
                "7 <- 8",
                "8 <- 8",
                "9 <- 8"
            ],
            "resampled_steps": [
                "6 * 7 = 42 (left: 2 4 42)\n9 / 3 = 3 (left: 3 27)\n3 + 27 = 30 (left: 30)",
                "2 + 4 = 6 (left: 6 6 7)\n6 / 6 = 1 (left: 1 7)\n7 - 7 = 0 (left: 0)",
                "6 * 7 = 42 (left: 2 4 42)\n9 / 3 = 3 (left: 3 27)\n3 + 27 = 30 (left: 30)",
                "6 * 7 = 42 (left: 2 4 42)\n9 / 3 = 3 (left: 3 27)\n3 + 27 = 30 (left: 30)",
                "2 + 4 = 6 (left: 6 6 7)\n6 / 6 = 1 (left: 1 7)\n7 - 7 = 0 (left: 0)",
                "6 * 7 = 42 (left: 2 4 42)\n9 / 3 = 3 (left: 3 27)\n3 + 27 = 30 (left: 30)",
                "6 * 7 = 42 (left: 2 4 42)\n9 / 3 = 3 (left: 3 27)\n3 + 27 = 30 (left: 30)",
                "6 * 7 = 42 (left: 2 4 42)\n9 / 3 = 3 (left: 3 27)\n3 + 27 = 30 (left: 30)",
                "6 * 7 = 42 (left: 2 4 42)\n9 / 3 = 3 (left: 3 27)\n3 + 27 = 30 (left: 30)",
                "6 * 7 = 42 (left: 2 4 42)\n9 / 3 = 3 (left: 3 27)\n3 + 27 = 30 (left: 30)"
            ]
        },
        "step_4": {
            "steps": [
                "6 * 7 = 42 (left: 2 4 42)\n9 / 3 = 3 (left: 3 27)\n3 + 27 = 30 (left: 30)\n30 + 2 = 32",
                "2 + 4 = 6 (left: 6 6 7)\n6 / 6 = 1 (left: 1 7)\n7 - 7 = 0 (left: 0)\nNo possible next steps as there are no numbers provided.",
                "6 * 7 = 42 (left: 2 4 42)\n9 / 3 = 3 (left: 3 27)\n3 + 27 = 30 (left: 30)\nThere is only one possible next step: 30 divided by 2 = 15",
                "6 * 7 = 42 (left: 2 4 42)\n9 / 3 = 3 (left: 3 27)\n3 + 27 = 30 (left: 30)\n30 + 2 = 32",
                "2 + 4 = 6 (left: 6 6 7)\n6 / 6 = 1 (left: 1 7)\n7 - 7 = 0 (left: 0)\nThere are no possible next steps with the input of 0.",
                "6 * 7 = 42 (left: 2 4 42)\n9 / 3 = 3 (left: 3 27)\n3 + 27 = 30 (left: 30)\nThere are no possible next steps for the number 30 since it is the final result.",
                "6 * 7 = 42 (left: 2 4 42)\n9 / 3 = 3 (left: 3 27)\n3 + 27 = 30 (left: 30)\n30 + 2 = 32",
                "6 * 7 = 42 (left: 2 4 42)\n9 / 3 = 3 (left: 3 27)\n3 + 27 = 30 (left: 30)\nThere are no possible next steps with the input of 30.",
                "6 * 7 = 42 (left: 2 4 42)\n9 / 3 = 3 (left: 3 27)\n3 + 27 = 30 (left: 30)\nThere are no possible next steps for the input 30.",
                "6 * 7 = 42 (left: 2 4 42)\n9 / 3 = 3 (left: 3 27)\n3 + 27 = 30 (left: 30)\nThere are no possible next steps for the number 30."
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.68353
    },
    "931": {
        "input": "2 5 10 10",
        "step_1": {
            "steps": [
                "5 * 2 = 10 (left: 10 10 10)",
                "10 / 2 = 5 (left: 5 10 10)",
                "10 / 2 = 5 (left: 5 10 10)",
                "5 * 2 = 10 (left: 10 10 10)",
                "5 * 2 = 10 (left: 10 10 10)",
                "5 * 2 = 10 (left: 10 10 10)",
                "5 * 2 = 10 (left: 10 10 10)",
                "10 / 2 = 5 (left: 5 10 10)",
                "9 + 3 = 12 (left: 6 9 12)",
                "10 / 2 = 5 (left: 5 10 10)"
            ],
            "values": [
                0.002,
                20.002,
                1.002,
                20.002,
                20.002,
                21.001,
                0.003,
                1.002,
                21.001,
                1.002
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 4",
                "2 <- 1",
                "3 <- 3",
                "4 <- 5",
                "5 <- 3",
                "6 <- 1",
                "7 <- 3",
                "8 <- 4",
                "9 <- 3"
            ],
            "resampled_steps": [
                "5 * 2 = 10 (left: 10 10 10)",
                "5 * 2 = 10 (left: 10 10 10)",
                "10 / 2 = 5 (left: 5 10 10)",
                "5 * 2 = 10 (left: 10 10 10)",
                "5 * 2 = 10 (left: 10 10 10)",
                "5 * 2 = 10 (left: 10 10 10)",
                "10 / 2 = 5 (left: 5 10 10)",
                "5 * 2 = 10 (left: 10 10 10)",
                "5 * 2 = 10 (left: 10 10 10)",
                "5 * 2 = 10 (left: 10 10 10)"
            ]
        },
        "step_2": {
            "steps": [
                "5 * 2 = 10 (left: 10 10 10)\n10 * 10 = 100 (left: 10 100)",
                "5 * 2 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)",
                "10 / 2 = 5 (left: 5 10 10)\n3 * 3 = 9 (left: 6 9 9)",
                "5 * 2 = 10 (left: 10 10 10)\nPossible next steps:",
                "5 * 2 = 10 (left: 10 10 10)\n10 - 10 = 0 (left: 0 10)",
                "5 * 2 = 10 (left: 10 10 10)\n10 + 10 = 20 (left: 10 20)",
                "10 / 2 = 5 (left: 5 10 10)\n7 - 3 = 4 (left: 4 7)",
                "5 * 2 = 10 (left: 10 10 10)\n10 * 10 = 100 (left: 10 100)",
                "5 * 2 = 10 (left: 10 10 10)\n7 - 3 = 4 (left: 1 4 7)",
                "5 * 2 = 10 (left: 10 10 10)\n7 / 3 = 2 (left: 3 2)"
            ],
            "values": [
                20.0,
                60.0,
                1.002,
                0.003,
                1.0,
                0.002,
                0.003,
                60.0,
                2.001,
                1.002
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 1",
                "3 <- 7",
                "4 <- 1",
                "5 <- 1",
                "6 <- 7",
                "7 <- 7",
                "8 <- 1",
                "9 <- 0"
            ],
            "resampled_steps": [
                "5 * 2 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)",
                "5 * 2 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)",
                "5 * 2 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)",
                "5 * 2 = 10 (left: 10 10 10)\n10 * 10 = 100 (left: 10 100)",
                "5 * 2 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)",
                "5 * 2 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)",
                "5 * 2 = 10 (left: 10 10 10)\n10 * 10 = 100 (left: 10 100)",
                "5 * 2 = 10 (left: 10 10 10)\n10 * 10 = 100 (left: 10 100)",
                "5 * 2 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)",
                "5 * 2 = 10 (left: 10 10 10)\n10 * 10 = 100 (left: 10 100)"
            ]
        },
        "step_3": {
            "steps": [
                "5 * 2 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)\n1 + 10 = 11 (left: 11)",
                "5 * 2 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "5 * 2 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "5 * 2 = 10 (left: 10 10 10)\n10 * 10 = 100 (left: 10 100)\n10 * 10 = 100 (left: 100)",
                "5 * 2 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)\n1 + 10 = 11 (left: 10)",
                "5 * 2 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "5 * 2 = 10 (left: 10 10 10)\n10 * 10 = 100 (left: 10 100)\n100 / 10 = 10 (left: 10 10)",
                "5 * 2 = 10 (left: 10 10 10)\n10 * 10 = 100 (left: 10 100)\n10 / 100 = 0.1 (left: 0.1)",
                "5 * 2 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "5 * 2 = 10 (left: 10 10 10)\n10 * 10 = 100 (left: 10 100)\n100 / 10 = 10 (left: 10)"
            ],
            "values": [
                0.001,
                0.003,
                0.001,
                0.003,
                0.003,
                0.003,
                0.002,
                0.001,
                0.001,
                0.003
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 4",
                "2 <- 4",
                "3 <- 9",
                "4 <- 3",
                "5 <- 5",
                "6 <- 3",
                "7 <- 3",
                "8 <- 7",
                "9 <- 5"
            ],
            "resampled_steps": [
                "5 * 2 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "5 * 2 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)\n1 + 10 = 11 (left: 10)",
                "5 * 2 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)\n1 + 10 = 11 (left: 10)",
                "5 * 2 = 10 (left: 10 10 10)\n10 * 10 = 100 (left: 10 100)\n100 / 10 = 10 (left: 10)",
                "5 * 2 = 10 (left: 10 10 10)\n10 * 10 = 100 (left: 10 100)\n10 * 10 = 100 (left: 100)",
                "5 * 2 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "5 * 2 = 10 (left: 10 10 10)\n10 * 10 = 100 (left: 10 100)\n10 * 10 = 100 (left: 100)",
                "5 * 2 = 10 (left: 10 10 10)\n10 * 10 = 100 (left: 10 100)\n10 * 10 = 100 (left: 100)",
                "5 * 2 = 10 (left: 10 10 10)\n10 * 10 = 100 (left: 10 100)\n10 / 100 = 0.1 (left: 0.1)",
                "5 * 2 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)\n10 / 1 = 10 (left: 10)"
            ]
        },
        "step_4": {
            "steps": [
                "5 * 2 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10)\n10 + 10 = 20",
                "5 * 2 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)\n1 + 10 = 11 (left: 10)\n10 / 10 = 1 (left: 1)",
                "5 * 2 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)\n1 + 10 = 11 (left: 10)\n10 + 10 = 20",
                "5 * 2 = 10 (left: 10 10 10)\n10 * 10 = 100 (left: 10 100)\n100 / 10 = 10 (left: 10)\n10 - 2 = 8 (left: 8)",
                "5 * 2 = 10 (left: 10 10 10)\n10 * 10 = 100 (left: 10 100)\n10 * 10 = 100 (left: 100)\nThere is only one number given, so there are no possible next steps.",
                "5 * 2 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)\n10 / 1 = 10 (left: 10)\n10 / 2 = 5 (left: 5 10)",
                "5 * 2 = 10 (left: 10 10 10)\n10 * 10 = 100 (left: 10 100)\n10 * 10 = 100 (left: 100)\n100 + 2 = 102",
                "5 * 2 = 10 (left: 10 10 10)\n10 * 10 = 100 (left: 10 100)\n10 * 10 = 100 (left: 100)\n100 / 2 = 50 (left: 50)",
                "5 * 2 = 10 (left: 10 10 10)\n10 * 10 = 100 (left: 10 100)\n10 / 100 = 0.1 (left: 0.1)\n0.1 * 0.1 = 0.01 (left: 0.01)",
                "5 * 2 = 10 (left: 10 10 10)\n10 / 10 = 1 (left: 1 10)\n10 / 1 = 10 (left: 10)\n10 + 2 = 12"
            ],
            "values": [
                0.003,
                0.001,
                0.003,
                0.001,
                0.003,
                1.002,
                0.003,
                0.002,
                0.001,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.703407
    },
    "932": {
        "input": "6 6 7 12",
        "step_1": {
            "steps": [
                "6 - 6 = 0 (left: 0 7 12)",
                "12 - 7 = 5 (left: 6 5 12)",
                "6 + 6 = 12 (left: 12 7 12)",
                "7 - 6 = 1 (left: 6 1 12)",
                "6 * 7 = 42 (left: 42 12)",
                "12 / 6 = 2 (left: 6 7 2)",
                "6 * 7 = 42 (left: 6 12 42)",
                "12 / 6 = 2 (left: 2 8 12)",
                "12 - 1 = 11 (left: 1 7 11)",
                "7 * 6 = 42 (left: 6 42)"
            ],
            "values": [
                2.001,
                3.0,
                0.003,
                1.002,
                0.003,
                2.001,
                2.001,
                1.002,
                2.001,
                1.002
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 0",
                "2 <- 9",
                "3 <- 1",
                "4 <- 6",
                "5 <- 1",
                "6 <- 0",
                "7 <- 6",
                "8 <- 1",
                "9 <- 8"
            ],
            "resampled_steps": [
                "6 * 7 = 42 (left: 6 12 42)",
                "6 - 6 = 0 (left: 0 7 12)",
                "7 * 6 = 42 (left: 6 42)",
                "12 - 7 = 5 (left: 6 5 12)",
                "6 * 7 = 42 (left: 6 12 42)",
                "12 - 7 = 5 (left: 6 5 12)",
                "6 - 6 = 0 (left: 0 7 12)",
                "6 * 7 = 42 (left: 6 12 42)",
                "12 - 7 = 5 (left: 6 5 12)",
                "12 - 1 = 11 (left: 1 7 11)"
            ]
        },
        "step_2": {
            "steps": [
                "6 * 7 = 42 (left: 6 12 42)\n6 * 2 = 12 (left: 12 12)",
                "6 - 6 = 0 (left: 0 7 12)\n12 - 7 = 5 (left: 0 5)",
                "7 * 6 = 42 (left: 6 42)\n42 / 6 = 7 (left: 7)",
                "12 - 7 = 5 (left: 6 5 12)\n12 - 5 = 7 (left: 6 7)",
                "6 * 7 = 42 (left: 6 12 42)\n42 - 6 = 36 (left: 12 36)",
                "12 - 7 = 5 (left: 6 5 12)\n6 + 5 = 11 (left: 11 12)",
                "6 - 6 = 0 (left: 0 7 12)\n0 + 7 = 7 (left: 7 12)",
                "6 * 7 = 42 (left: 6 12 42)\n12 * 3 = 36 (left: 36)",
                "12 - 7 = 5 (left: 6 5 12)\n6 - 5 = 1 (left: 1 12)",
                "12 - 1 = 11 (left: 1 7 11)\n7 / 1 = 7 (left: 7 11)"
            ],
            "values": [
                40.001,
                0.0,
                0.001,
                0.002,
                0.003,
                0.002,
                0.002,
                60.0,
                1.001,
                0.001
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 7",
                "3 <- 7",
                "4 <- 0",
                "5 <- 7",
                "6 <- 7",
                "7 <- 7",
                "8 <- 0",
                "9 <- 0"
            ],
            "resampled_steps": [
                "6 * 7 = 42 (left: 6 12 42)\n6 * 2 = 12 (left: 12 12)",
                "6 * 7 = 42 (left: 6 12 42)\n6 * 2 = 12 (left: 12 12)",
                "6 * 7 = 42 (left: 6 12 42)\n12 * 3 = 36 (left: 36)",
                "6 * 7 = 42 (left: 6 12 42)\n12 * 3 = 36 (left: 36)",
                "6 * 7 = 42 (left: 6 12 42)\n6 * 2 = 12 (left: 12 12)",
                "6 * 7 = 42 (left: 6 12 42)\n12 * 3 = 36 (left: 36)",
                "6 * 7 = 42 (left: 6 12 42)\n12 * 3 = 36 (left: 36)",
                "6 * 7 = 42 (left: 6 12 42)\n12 * 3 = 36 (left: 36)",
                "6 * 7 = 42 (left: 6 12 42)\n6 * 2 = 12 (left: 12 12)",
                "6 * 7 = 42 (left: 6 12 42)\n6 * 2 = 12 (left: 12 12)"
            ]
        },
        "step_3": {
            "steps": [
                "6 * 7 = 42 (left: 6 12 42)\n6 * 2 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "6 * 7 = 42 (left: 6 12 42)\n6 * 2 = 12 (left: 12 12)\n12 + 12 = 24",
                "6 * 7 = 42 (left: 6 12 42)\n12 * 3 = 36 (left: 36)\n36 / 2 = 18",
                "6 * 7 = 42 (left: 6 12 42)\n12 * 3 = 36 (left: 36)\n36 + 2 = 38",
                "6 * 7 = 42 (left: 6 12 42)\n6 * 2 = 12 (left: 12 12)\n12 + 12 = 24",
                "6 * 7 = 42 (left: 6 12 42)\n12 * 3 = 36 (left: 36)\n36 / 2 = 18",
                "6 * 7 = 42 (left: 6 12 42)\n12 * 3 = 36 (left: 36)\n36 + 2 = 38",
                "6 * 7 = 42 (left: 6 12 42)\n12 * 3 = 36 (left: 36)\n36 / 2 = 18",
                "6 * 7 = 42 (left: 6 12 42)\n6 * 2 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "6 * 7 = 42 (left: 6 12 42)\n6 * 2 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 8",
                "1 <- 6",
                "2 <- 0",
                "3 <- 5",
                "4 <- 8",
                "5 <- 3",
                "6 <- 1",
                "7 <- 0",
                "8 <- 7",
                "9 <- 8"
            ],
            "resampled_steps": [
                "6 * 7 = 42 (left: 6 12 42)\n6 * 2 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "6 * 7 = 42 (left: 6 12 42)\n12 * 3 = 36 (left: 36)\n36 + 2 = 38",
                "6 * 7 = 42 (left: 6 12 42)\n6 * 2 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "6 * 7 = 42 (left: 6 12 42)\n12 * 3 = 36 (left: 36)\n36 / 2 = 18",
                "6 * 7 = 42 (left: 6 12 42)\n6 * 2 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "6 * 7 = 42 (left: 6 12 42)\n12 * 3 = 36 (left: 36)\n36 + 2 = 38",
                "6 * 7 = 42 (left: 6 12 42)\n6 * 2 = 12 (left: 12 12)\n12 + 12 = 24",
                "6 * 7 = 42 (left: 6 12 42)\n6 * 2 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "6 * 7 = 42 (left: 6 12 42)\n12 * 3 = 36 (left: 36)\n36 / 2 = 18",
                "6 * 7 = 42 (left: 6 12 42)\n6 * 2 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)"
            ]
        },
        "step_4": {
            "steps": [
                "6 * 7 = 42 (left: 6 12 42)\n6 * 2 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)\n144 / 2 = 72",
                "6 * 7 = 42 (left: 6 12 42)\n12 * 3 = 36 (left: 36)\n36 + 2 = 38\n38 / 2 = 19 (left: 19)",
                "6 * 7 = 42 (left: 6 12 42)\n6 * 2 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)\nThere is only 1 number, so there are no possible next steps.",
                "6 * 7 = 42 (left: 6 12 42)\n12 * 3 = 36 (left: 36)\n36 / 2 = 18\n36 + 2 = 38 (left: 38)",
                "6 * 7 = 42 (left: 6 12 42)\n6 * 2 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)\nThere are no possible next steps for the number 144 since it is only one number and cannot be combined with any other numbers.",
                "6 * 7 = 42 (left: 6 12 42)\n12 * 3 = 36 (left: 36)\n36 + 2 = 38\n36 - 2 = 34 (left: 34)",
                "6 * 7 = 42 (left: 6 12 42)\n6 * 2 = 12 (left: 12 12)\n12 + 12 = 24\n12 * 12 = 144 (left: 144)",
                "6 * 7 = 42 (left: 6 12 42)\n6 * 2 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)\nThere are no possible next steps as the input is already a single number (144).",
                "6 * 7 = 42 (left: 6 12 42)\n12 * 3 = 36 (left: 36)\n36 / 2 = 18\n18 * 2 = 36",
                "6 * 7 = 42 (left: 6 12 42)\n6 * 2 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)\nThere is only one number, so there are no possible next steps."
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.721438
    },
    "933": {
        "input": "6 9 9 11",
        "step_1": {
            "steps": [
                "9 / 3 = 3 (left: 6 9 11)",
                "6 * 9 = 54 (left: 9 11 54)",
                "9 - 6 = 3 (left: 3 9 11)",
                "11 - 6 = 5 (left: 5 9 11)",
                "6 + 9 = 15 (left: 9 11 15)",
                "9 - 6 = 3 (left: 3 9 11)",
                "9 - 6 = 3 (left: 3 9 11)",
                "5 / 3 = 1.6666666666666667 (left: 1.6666666666666667 5 10)",
                "9 - 6 = 3 (left: 3 9 11)",
                "11 - 6 = 5 (left: 6 9 5)"
            ],
            "values": [
                3.0,
                2.001,
                1.002,
                3.0,
                3.0,
                0.003,
                0.003,
                2.001,
                0.003,
                3.0
            ],
            "resampled": [
                "0 <- 7",
                "1 <- 9",
                "2 <- 9",
                "3 <- 2",
                "4 <- 4",
                "5 <- 9",
                "6 <- 4",
                "7 <- 7",
                "8 <- 1",
                "9 <- 1"
            ],
            "resampled_steps": [
                "5 / 3 = 1.6666666666666667 (left: 1.6666666666666667 5 10)",
                "11 - 6 = 5 (left: 6 9 5)",
                "11 - 6 = 5 (left: 6 9 5)",
                "9 - 6 = 3 (left: 3 9 11)",
                "6 + 9 = 15 (left: 9 11 15)",
                "11 - 6 = 5 (left: 6 9 5)",
                "6 + 9 = 15 (left: 9 11 15)",
                "5 / 3 = 1.6666666666666667 (left: 1.6666666666666667 5 10)",
                "6 * 9 = 54 (left: 9 11 54)",
                "6 * 9 = 54 (left: 9 11 54)"
            ]
        },
        "step_2": {
            "steps": [
                "5 / 3 = 1.6666666666666667 (left: 1.6666666666666667 5 10)\n3 * 2 = 6 (left: 6 6 12)",
                "11 - 6 = 5 (left: 6 9 5)\n6 + 9 = 15 (left: 5 15)",
                "11 - 6 = 5 (left: 6 9 5)\n4 * 6 = 24 (left: 2 10 24)",
                "9 - 6 = 3 (left: 3 9 11)\n3 * 9 = 27 (left: 11 27)",
                "6 + 9 = 15 (left: 9 11 15)\n7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 5 9)",
                "11 - 6 = 5 (left: 6 9 5)\n2 * 4 = 8 (left: 8 6 12)",
                "6 + 9 = 15 (left: 9 11 15)\n6 / 3 = 2 (left: 2 9 12)",
                "5 / 3 = 1.6666666666666667 (left: 1.6666666666666667 5 10)\n3 * 3 = 9 (left: 9 3 7)",
                "6 * 9 = 54 (left: 9 11 54)\n4 + 6 = 10 (left: 8 10 3)",
                "6 * 9 = 54 (left: 9 11 54)\n9 * 11 = 99 (left: 54 99)"
            ],
            "values": [
                60.0,
                1.002,
                1.001,
                0.003,
                3.0,
                60.0,
                0.003,
                3.0,
                2.0,
                0.003
            ],
            "resampled": [
                "0 <- 5",
                "1 <- 0",
                "2 <- 5",
                "3 <- 0",
                "4 <- 5",
                "5 <- 8",
                "6 <- 0",
                "7 <- 7",
                "8 <- 5",
                "9 <- 5"
            ],
            "resampled_steps": [
                "11 - 6 = 5 (left: 6 9 5)\n2 * 4 = 8 (left: 8 6 12)",
                "5 / 3 = 1.6666666666666667 (left: 1.6666666666666667 5 10)\n3 * 2 = 6 (left: 6 6 12)",
                "11 - 6 = 5 (left: 6 9 5)\n2 * 4 = 8 (left: 8 6 12)",
                "5 / 3 = 1.6666666666666667 (left: 1.6666666666666667 5 10)\n3 * 2 = 6 (left: 6 6 12)",
                "11 - 6 = 5 (left: 6 9 5)\n2 * 4 = 8 (left: 8 6 12)",
                "6 * 9 = 54 (left: 9 11 54)\n4 + 6 = 10 (left: 8 10 3)",
                "5 / 3 = 1.6666666666666667 (left: 1.6666666666666667 5 10)\n3 * 2 = 6 (left: 6 6 12)",
                "5 / 3 = 1.6666666666666667 (left: 1.6666666666666667 5 10)\n3 * 3 = 9 (left: 9 3 7)",
                "11 - 6 = 5 (left: 6 9 5)\n2 * 4 = 8 (left: 8 6 12)",
                "11 - 6 = 5 (left: 6 9 5)\n2 * 4 = 8 (left: 8 6 12)"
            ]
        },
        "step_3": {
            "steps": [
                "11 - 6 = 5 (left: 6 9 5)\n2 * 4 = 8 (left: 8 6 12)\n8 - 6 = 2 (left: 2 12)",
                "5 / 3 = 1.6666666666666667 (left: 1.6666666666666667 5 10)\n3 * 2 = 6 (left: 6 6 12)\n12 - 6 = 6 (left: 6 12)",
                "11 - 6 = 5 (left: 6 9 5)\n2 * 4 = 8 (left: 8 6 12)\n6 - 4 = 2 (left: 1.33 2)",
                "5 / 3 = 1.6666666666666667 (left: 1.6666666666666667 5 10)\n3 * 2 = 6 (left: 6 6 12)\n12 + 6 = 18 (left: 6 18)",
                "11 - 6 = 5 (left: 6 9 5)\n2 * 4 = 8 (left: 8 6 12)\n8 - 6 = 2 (left: 2 12)",
                "6 * 9 = 54 (left: 9 11 54)\n4 + 6 = 10 (left: 8 10 3)\n3 + 8 = 11 (left: 11 3)",
                "5 / 3 = 1.6666666666666667 (left: 1.6666666666666667 5 10)\n3 * 2 = 6 (left: 6 6 12)\n13 * 12 = 156 (left: 156 18)",
                "5 / 3 = 1.6666666666666667 (left: 1.6666666666666667 5 10)\n3 * 3 = 9 (left: 9 3 7)\n7 - 3 = 4 (left: 4 7)",
                "11 - 6 = 5 (left: 6 9 5)\n2 * 4 = 8 (left: 8 6 12)\n6 * 12 = 72 (left: 8 72)",
                "11 - 6 = 5 (left: 6 9 5)\n2 * 4 = 8 (left: 8 6 12)\n8 * 6 = 48 (left: 48 12)"
            ],
            "values": [
                60.0,
                0.002,
                1.002,
                20.002,
                60.0,
                40.0,
                21.001,
                0.003,
                2.001,
                2.001
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 3",
                "2 <- 0",
                "3 <- 3",
                "4 <- 4",
                "5 <- 0",
                "6 <- 0",
                "7 <- 0",
                "8 <- 5",
                "9 <- 4"
            ],
            "resampled_steps": [
                "11 - 6 = 5 (left: 6 9 5)\n2 * 4 = 8 (left: 8 6 12)\n8 - 6 = 2 (left: 2 12)",
                "5 / 3 = 1.6666666666666667 (left: 1.6666666666666667 5 10)\n3 * 2 = 6 (left: 6 6 12)\n12 + 6 = 18 (left: 6 18)",
                "11 - 6 = 5 (left: 6 9 5)\n2 * 4 = 8 (left: 8 6 12)\n8 - 6 = 2 (left: 2 12)",
                "5 / 3 = 1.6666666666666667 (left: 1.6666666666666667 5 10)\n3 * 2 = 6 (left: 6 6 12)\n12 + 6 = 18 (left: 6 18)",
                "11 - 6 = 5 (left: 6 9 5)\n2 * 4 = 8 (left: 8 6 12)\n8 - 6 = 2 (left: 2 12)",
                "11 - 6 = 5 (left: 6 9 5)\n2 * 4 = 8 (left: 8 6 12)\n8 - 6 = 2 (left: 2 12)",
                "11 - 6 = 5 (left: 6 9 5)\n2 * 4 = 8 (left: 8 6 12)\n8 - 6 = 2 (left: 2 12)",
                "11 - 6 = 5 (left: 6 9 5)\n2 * 4 = 8 (left: 8 6 12)\n8 - 6 = 2 (left: 2 12)",
                "6 * 9 = 54 (left: 9 11 54)\n4 + 6 = 10 (left: 8 10 3)\n3 + 8 = 11 (left: 11 3)",
                "11 - 6 = 5 (left: 6 9 5)\n2 * 4 = 8 (left: 8 6 12)\n8 - 6 = 2 (left: 2 12)"
            ]
        },
        "step_4": {
            "steps": [
                "11 - 6 = 5 (left: 6 9 5)\n2 * 4 = 8 (left: 8 6 12)\n8 - 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "5 / 3 = 1.6666666666666667 (left: 1.6666666666666667 5 10)\n3 * 2 = 6 (left: 6 6 12)\n12 + 6 = 18 (left: 6 18)\n6 * 3 = 18 (left: 18)",
                "11 - 6 = 5 (left: 6 9 5)\n2 * 4 = 8 (left: 8 6 12)\n8 - 6 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "5 / 3 = 1.6666666666666667 (left: 1.6666666666666667 5 10)\n3 * 2 = 6 (left: 6 6 12)\n12 + 6 = 18 (left: 6 18)\n18 - 6 = 12 (left: 6 12)",
                "11 - 6 = 5 (left: 6 9 5)\n2 * 4 = 8 (left: 8 6 12)\n8 - 6 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "11 - 6 = 5 (left: 6 9 5)\n2 * 4 = 8 (left: 8 6 12)\n8 - 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "11 - 6 = 5 (left: 6 9 5)\n2 * 4 = 8 (left: 8 6 12)\n8 - 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "11 - 6 = 5 (left: 6 9 5)\n2 * 4 = 8 (left: 8 6 12)\n8 - 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "6 * 9 = 54 (left: 9 11 54)\n4 + 6 = 10 (left: 8 10 3)\n3 + 8 = 11 (left: 11 3)\n11 / 3 = 3.6666666666666665 (left: 3.6666666666666665)",
                "11 - 6 = 5 (left: 6 9 5)\n2 * 4 = 8 (left: 8 6 12)\n8 - 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)"
            ],
            "values": [
                0.003,
                60.0,
                0.002,
                0.003,
                0.003,
                60.0,
                60.0,
                60.0,
                1.0,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.747401
    },
    "934": {
        "input": "5 8 11 12",
        "step_1": {
            "steps": [
                "12 - 8 = 4 (left: 4 11 12)",
                "12 - 8 = 4 (left: 5 4 12)",
                "5 + 8 = 13 (left: 11 13 12)",
                "11 + 5 = 16 (left: 8 12 16)",
                "8 - 11 = -3 (left: 5 -3 12)",
                "12 - 8 = 4 (left: 5 11 4)",
                "5 * 8 = 40 (left: 11 40 12)",
                "11 + 5 = 16 (left: 8 12 16)",
                "11 + 5 = 16 (left: 8 12 16)",
                "9 + 3 = 12 (left: 6 12 12)"
            ],
            "values": [
                0.003,
                0.002,
                60.0,
                3.0,
                2.001,
                22.0,
                2.001,
                3.0,
                3.0,
                41.0
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 9",
                "2 <- 6",
                "3 <- 2",
                "4 <- 9",
                "5 <- 2",
                "6 <- 5",
                "7 <- 2",
                "8 <- 2",
                "9 <- 9"
            ],
            "resampled_steps": [
                "5 + 8 = 13 (left: 11 13 12)",
                "9 + 3 = 12 (left: 6 12 12)",
                "5 * 8 = 40 (left: 11 40 12)",
                "5 + 8 = 13 (left: 11 13 12)",
                "9 + 3 = 12 (left: 6 12 12)",
                "5 + 8 = 13 (left: 11 13 12)",
                "12 - 8 = 4 (left: 5 11 4)",
                "5 + 8 = 13 (left: 11 13 12)",
                "5 + 8 = 13 (left: 11 13 12)",
                "9 + 3 = 12 (left: 6 12 12)"
            ]
        },
        "step_2": {
            "steps": [
                "5 + 8 = 13 (left: 11 13 12)\n12 + 11 = 23 (left: 13 23)",
                "9 + 3 = 12 (left: 6 12 12)\n6 * 2 = 12 (left: 12 6)",
                "5 * 8 = 40 (left: 11 40 12)\n12 + 11 = 23 (left: 23)",
                "5 + 8 = 13 (left: 11 13 12)\nInput: 5 7 9 3",
                "9 + 3 = 12 (left: 6 12 12)\n12 - 6 = 6 (left: 6 12)",
                "5 + 8 = 13 (left: 11 13 12)\n12 / 11 = 1.0909090909090908 (left: 1.0909090909090908 12)",
                "12 - 8 = 4 (left: 5 11 4)\n11 - 4 = 7 (left: 5 7)",
                "5 + 8 = 13 (left: 11 13 12)\n10 / 5 = 2 (left: 2 15)",
                "5 + 8 = 13 (left: 11 13 12)\n12 - 11 = 1 (left: 1)",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)"
            ],
            "values": [
                0.003,
                0.003,
                0.002,
                0.003,
                0.002,
                0.0,
                0.002,
                0.003,
                0.002,
                60.0
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 9",
                "2 <- 9",
                "3 <- 9",
                "4 <- 9",
                "5 <- 9",
                "6 <- 9",
                "7 <- 9",
                "8 <- 9",
                "9 <- 9"
            ],
            "resampled_steps": [
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)"
            ]
        },
        "step_3": {
            "steps": [
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)"
            ],
            "values": [
                0.001,
                0.002,
                0.001,
                0.003,
                0.003,
                0.003,
                60.0,
                0.002,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 8",
                "1 <- 9",
                "2 <- 8",
                "3 <- 6",
                "4 <- 8",
                "5 <- 6",
                "6 <- 8",
                "7 <- 8",
                "8 <- 8",
                "9 <- 8"
            ],
            "resampled_steps": [
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)"
            ]
        },
        "step_4": {
            "steps": [
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: ((8 + 5) - 11) * 12 = 24",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 + 3) * (8 - 11) = 24",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 + 3) * (8 - 11) = 24",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 + 3) * (8 - 5) = 24",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: 9 + (11 - 8) * 12 = 24",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 + 3) * (8 + 11) = 24",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 + 3) / (5 - 8) * 12 = 24",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 + 3) * (8 - 11) = 24",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 + 3) * (8 - 11) = 24",
                "9 + 3 = 12 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 + 3) * (8 / 11) = 24"
            ],
            "values": [
                60.0,
                0.003,
                0.003,
                0.003,
                60.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.768678
    },
    "935": {
        "input": "5 6 8 10",
        "step_1": {
            "steps": [
                "5 + 6 = 11 (left: 8 10 11)",
                "10 - 6 = 4 (left: 5 4 10)",
                "4 * 7 = 28 (left: 9 13 28)",
                "8 / 5 = 1.6 (left: 1.6 6 10)",
                "6 + 8 = 14 (left: 5 10 14)",
                "10 - 6 = 4 (left: 4 6 8)",
                "5 * 6 = 30 (left: 8 10 30)",
                "8 - 5 = 3 (left: 3 6 10)",
                "8 + 10 = 18 (left: 5 6 18)",
                "8 / 5 = 1.6 (left: 1.6 6 10)"
            ],
            "values": [
                2.001,
                3.0,
                3.0,
                3.0,
                1.002,
                60.0,
                0.003,
                3.0,
                3.0,
                3.0
            ],
            "resampled": [
                "0 <- 5",
                "1 <- 5",
                "2 <- 5",
                "3 <- 5",
                "4 <- 5",
                "5 <- 5",
                "6 <- 5",
                "7 <- 5",
                "8 <- 5",
                "9 <- 5"
            ],
            "resampled_steps": [
                "10 - 6 = 4 (left: 4 6 8)",
                "10 - 6 = 4 (left: 4 6 8)",
                "10 - 6 = 4 (left: 4 6 8)",
                "10 - 6 = 4 (left: 4 6 8)",
                "10 - 6 = 4 (left: 4 6 8)",
                "10 - 6 = 4 (left: 4 6 8)",
                "10 - 6 = 4 (left: 4 6 8)",
                "10 - 6 = 4 (left: 4 6 8)",
                "10 - 6 = 4 (left: 4 6 8)",
                "10 - 6 = 4 (left: 4 6 8)"
            ]
        },
        "step_2": {
            "steps": [
                "10 - 6 = 4 (left: 4 6 8)\n6 - 2 = 4 (left: 4 6)",
                "10 - 6 = 4 (left: 4 6 8)\n4 * 6 = 24 (left: 8 24)",
                "10 - 6 = 4 (left: 4 6 8)\n8 / 4 = 2 (left: 2 6)",
                "10 - 6 = 4 (left: 4 6 8)\n7 - 3 = 4 (left: 4 5 9)",
                "10 - 6 = 4 (left: 4 6 8)\nPossible next steps:",
                "10 - 6 = 4 (left: 4 6 8)\n5 - 3 = 2 (left: 2 7 9)",
                "10 - 6 = 4 (left: 4 6 8)\n1 * 3 = 3 (left: 3 5 7 9)",
                "10 - 6 = 4 (left: 4 6 8)\nInput: 5 10 15",
                "10 - 6 = 4 (left: 4 6 8)\n8 / 4 = 2 (left: 2 6)",
                "10 - 6 = 4 (left: 4 6 8)\n4 * 6 = 24 (left: 8 24)"
            ],
            "values": [
                60.0,
                20.002,
                0.001,
                3.0,
                0.003,
                0.003,
                3.0,
                0.003,
                0.001,
                20.0
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 1",
                "2 <- 1",
                "3 <- 0",
                "4 <- 0",
                "5 <- 0",
                "6 <- 0",
                "7 <- 9",
                "8 <- 1",
                "9 <- 0"
            ],
            "resampled_steps": [
                "10 - 6 = 4 (left: 4 6 8)\n6 - 2 = 4 (left: 4 6)",
                "10 - 6 = 4 (left: 4 6 8)\n4 * 6 = 24 (left: 8 24)",
                "10 - 6 = 4 (left: 4 6 8)\n4 * 6 = 24 (left: 8 24)",
                "10 - 6 = 4 (left: 4 6 8)\n6 - 2 = 4 (left: 4 6)",
                "10 - 6 = 4 (left: 4 6 8)\n6 - 2 = 4 (left: 4 6)",
                "10 - 6 = 4 (left: 4 6 8)\n6 - 2 = 4 (left: 4 6)",
                "10 - 6 = 4 (left: 4 6 8)\n6 - 2 = 4 (left: 4 6)",
                "10 - 6 = 4 (left: 4 6 8)\n4 * 6 = 24 (left: 8 24)",
                "10 - 6 = 4 (left: 4 6 8)\n4 * 6 = 24 (left: 8 24)",
                "10 - 6 = 4 (left: 4 6 8)\n6 - 2 = 4 (left: 4 6)"
            ]
        },
        "step_3": {
            "steps": [
                "10 - 6 = 4 (left: 4 6 8)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "10 - 6 = 4 (left: 4 6 8)\n4 * 6 = 24 (left: 8 24)\n8 * 3 = 24 (left: 24)",
                "10 - 6 = 4 (left: 4 6 8)\n4 * 6 = 24 (left: 8 24)\n24 - 16 = 8 (left: 8)",
                "10 - 6 = 4 (left: 4 6 8)\n6 - 2 = 4 (left: 4 6)\n6 / 4 = 1.5 (left: 1.5)",
                "10 - 6 = 4 (left: 4 6 8)\n6 - 2 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)",
                "10 - 6 = 4 (left: 4 6 8)\n6 - 2 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)",
                "10 - 6 = 4 (left: 4 6 8)\n6 - 2 = 4 (left: 4 6)\nInput: 3 9",
                "10 - 6 = 4 (left: 4 6 8)\n4 * 6 = 24 (left: 8 24)\n8 * 3 = 24 (left: 24)",
                "10 - 6 = 4 (left: 4 6 8)\n4 * 6 = 24 (left: 8 24)\n8 * 24 = 192 (left: 192)",
                "10 - 6 = 4 (left: 4 6 8)\n6 - 2 = 4 (left: 4 6)\nInput: 3 9 27"
            ],
            "values": [
                60.0,
                60.0,
                0.002,
                0.002,
                0.001,
                0.003,
                0.003,
                60.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 0",
                "3 <- 0",
                "4 <- 0",
                "5 <- 0",
                "6 <- 1",
                "7 <- 1",
                "8 <- 7",
                "9 <- 7"
            ],
            "resampled_steps": [
                "10 - 6 = 4 (left: 4 6 8)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "10 - 6 = 4 (left: 4 6 8)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "10 - 6 = 4 (left: 4 6 8)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "10 - 6 = 4 (left: 4 6 8)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "10 - 6 = 4 (left: 4 6 8)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "10 - 6 = 4 (left: 4 6 8)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "10 - 6 = 4 (left: 4 6 8)\n4 * 6 = 24 (left: 8 24)\n8 * 3 = 24 (left: 24)",
                "10 - 6 = 4 (left: 4 6 8)\n4 * 6 = 24 (left: 8 24)\n8 * 3 = 24 (left: 24)",
                "10 - 6 = 4 (left: 4 6 8)\n4 * 6 = 24 (left: 8 24)\n8 * 3 = 24 (left: 24)",
                "10 - 6 = 4 (left: 4 6 8)\n4 * 6 = 24 (left: 8 24)\n8 * 3 = 24 (left: 24)"
            ]
        },
        "step_4": {
            "steps": [
                "10 - 6 = 4 (left: 4 6 8)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (10 - 6) * (8 / 4) = 24",
                "10 - 6 = 4 (left: 4 6 8)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * (6 + (10 - 8)) = 24",
                "10 - 6 = 4 (left: 4 6 8)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (10 - 6) * (8 / 4) = 24",
                "10 - 6 = 4 (left: 4 6 8)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (10 - 6) * (8 - 2) = 24",
                "10 - 6 = 4 (left: 4 6 8)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (10 - 6) * (8 - 4) = 24",
                "10 - 6 = 4 (left: 4 6 8)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * (10 - (6 - 8)) = 24",
                "10 - 6 = 4 (left: 4 6 8)\n4 * 6 = 24 (left: 8 24)\n8 * 3 = 24 (left: 24)\nAnswer: (10 - 6) * 6 = 24 or 8 * 3 = 24",
                "10 - 6 = 4 (left: 4 6 8)\n4 * 6 = 24 (left: 8 24)\n8 * 3 = 24 (left: 24)\nAnswer: (10 - 6) * 6 = 24",
                "10 - 6 = 4 (left: 4 6 8)\n4 * 6 = 24 (left: 8 24)\n8 * 3 = 24 (left: 24)\nAnswer: (10 - 6) * 6 = 24",
                "10 - 6 = 4 (left: 4 6 8)\n4 * 6 = 24 (left: 8 24)\n8 * 3 = 24 (left: 24)\nAnswer: (10 - 6) * 6 = 24"
            ],
            "values": [
                60.0,
                0.003,
                60.0,
                0.003,
                0.003,
                0.003,
                60.0,
                60.0,
                60.0,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.7926930000000001
    },
    "936": {
        "input": "6 11 12 13",
        "step_1": {
            "steps": [
                "13 - 11 = 2 (left: 6 12 2)",
                "7 * 8 = 56 (left: 3 9 56)",
                "9 - 3 = 6 (left: 5 6 7)",
                "12 * 13 = 156 (left: 6 11 156)",
                "5 + 9 = 14 (left: 3 14 15)",
                "13 - 11 = 2 (left: 2 12 13)",
                "4 - 3 = 1 (left: 1 5 6)",
                "6 * 11 = 66 (left: 12 13 66)",
                "11 + 12 = 23 (left: 6 13 23)",
                "11 / 12 = 0.916667 (left: 6 13 0.916667)"
            ],
            "values": [
                2.001,
                1.002,
                3.0,
                1.002,
                0.003,
                21.001,
                22.0,
                1.001,
                1.002,
                2.001
            ],
            "resampled": [
                "0 <- 5",
                "1 <- 5",
                "2 <- 1",
                "3 <- 5",
                "4 <- 5",
                "5 <- 6",
                "6 <- 5",
                "7 <- 6",
                "8 <- 6",
                "9 <- 5"
            ],
            "resampled_steps": [
                "13 - 11 = 2 (left: 2 12 13)",
                "13 - 11 = 2 (left: 2 12 13)",
                "7 * 8 = 56 (left: 3 9 56)",
                "13 - 11 = 2 (left: 2 12 13)",
                "13 - 11 = 2 (left: 2 12 13)",
                "4 - 3 = 1 (left: 1 5 6)",
                "13 - 11 = 2 (left: 2 12 13)",
                "4 - 3 = 1 (left: 1 5 6)",
                "4 - 3 = 1 (left: 1 5 6)",
                "13 - 11 = 2 (left: 2 12 13)"
            ]
        },
        "step_2": {
            "steps": [
                "13 - 11 = 2 (left: 2 12 13)\n13 - 2 = 11 (left: 2 12 11)",
                "13 - 11 = 2 (left: 2 12 13)\n12 - 2 = 10 (left: 10 13)",
                "7 * 8 = 56 (left: 3 9 56)\n56 - 3 = 53 (left: 3 53)",
                "13 - 11 = 2 (left: 2 12 13)\n12 - 2 = 10 (left: 10 13)",
                "13 - 11 = 2 (left: 2 12 13)\n2 + 12 = 14 (left: 13 14)",
                "4 - 3 = 1 (left: 1 5 6)\n4 * 3 = 12 (left: 12 7)",
                "13 - 11 = 2 (left: 2 12 13)\n12 - 2 = 10 (left: 10 13)",
                "4 - 3 = 1 (left: 1 5 6)\n9 / 3 = 3 (left: 3 12 15)",
                "4 - 3 = 1 (left: 1 5 6)\n4 + 2 = 6 (left: 6 8)",
                "13 - 11 = 2 (left: 2 12 13)\n2 * 12 = 24 (left: 24 13)"
            ],
            "values": [
                60.0,
                0.002,
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                21.001,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- 7",
                "1 <- 0",
                "2 <- 0",
                "3 <- 0",
                "4 <- 0",
                "5 <- 0",
                "6 <- 0",
                "7 <- 0",
                "8 <- 7",
                "9 <- 7"
            ],
            "resampled_steps": [
                "4 - 3 = 1 (left: 1 5 6)\n9 / 3 = 3 (left: 3 12 15)",
                "13 - 11 = 2 (left: 2 12 13)\n13 - 2 = 11 (left: 2 12 11)",
                "13 - 11 = 2 (left: 2 12 13)\n13 - 2 = 11 (left: 2 12 11)",
                "13 - 11 = 2 (left: 2 12 13)\n13 - 2 = 11 (left: 2 12 11)",
                "13 - 11 = 2 (left: 2 12 13)\n13 - 2 = 11 (left: 2 12 11)",
                "13 - 11 = 2 (left: 2 12 13)\n13 - 2 = 11 (left: 2 12 11)",
                "13 - 11 = 2 (left: 2 12 13)\n13 - 2 = 11 (left: 2 12 11)",
                "13 - 11 = 2 (left: 2 12 13)\n13 - 2 = 11 (left: 2 12 11)",
                "4 - 3 = 1 (left: 1 5 6)\n9 / 3 = 3 (left: 3 12 15)",
                "4 - 3 = 1 (left: 1 5 6)\n9 / 3 = 3 (left: 3 12 15)"
            ]
        },
        "step_3": {
            "steps": [
                "4 - 3 = 1 (left: 1 5 6)\n9 / 3 = 3 (left: 3 12 15)\n4 / 4 = 1 (left: 1 5 7 8)",
                "13 - 11 = 2 (left: 2 12 13)\n13 - 2 = 11 (left: 2 12 11)\n12 / 2 = 6 (left: 6 11)",
                "13 - 11 = 2 (left: 2 12 13)\n13 - 2 = 11 (left: 2 12 11)\n11 - 2 = 9 (left: 9 11)",
                "13 - 11 = 2 (left: 2 12 13)\n13 - 2 = 11 (left: 2 12 11)\n12 / 2 = 6 (left: 6 11)",
                "13 - 11 = 2 (left: 2 12 13)\n13 - 2 = 11 (left: 2 12 11)\n2 + 12 = 14 (left: 11 14)",
                "13 - 11 = 2 (left: 2 12 13)\n13 - 2 = 11 (left: 2 12 11)\n12 / 2 = 6 (left: 6 11)",
                "13 - 11 = 2 (left: 2 12 13)\n13 - 2 = 11 (left: 2 12 11)\n11 + 2 = 13 (left: 12 13)",
                "13 - 11 = 2 (left: 2 12 13)\n13 - 2 = 11 (left: 2 12 11)\n12 / 2 = 6 (left: 6 11)",
                "4 - 3 = 1 (left: 1 5 6)\n9 / 3 = 3 (left: 3 12 15)\n12 - 3 = 9 (left: 9 15)",
                "4 - 3 = 1 (left: 1 5 6)\n9 / 3 = 3 (left: 3 12 15)\n3 * 12 = 36 (left: 15 36)"
            ],
            "values": [
                2.0,
                0.003,
                2.0,
                2.001,
                0.003,
                21.001,
                0.003,
                0.003,
                41.0,
                0.003
            ],
            "resampled": [
                "0 <- 8",
                "1 <- 5",
                "2 <- 5",
                "3 <- 5",
                "4 <- 8",
                "5 <- 0",
                "6 <- 8",
                "7 <- 8",
                "8 <- 8",
                "9 <- 8"
            ],
            "resampled_steps": [
                "4 - 3 = 1 (left: 1 5 6)\n9 / 3 = 3 (left: 3 12 15)\n12 - 3 = 9 (left: 9 15)",
                "13 - 11 = 2 (left: 2 12 13)\n13 - 2 = 11 (left: 2 12 11)\n12 / 2 = 6 (left: 6 11)",
                "13 - 11 = 2 (left: 2 12 13)\n13 - 2 = 11 (left: 2 12 11)\n12 / 2 = 6 (left: 6 11)",
                "13 - 11 = 2 (left: 2 12 13)\n13 - 2 = 11 (left: 2 12 11)\n12 / 2 = 6 (left: 6 11)",
                "4 - 3 = 1 (left: 1 5 6)\n9 / 3 = 3 (left: 3 12 15)\n12 - 3 = 9 (left: 9 15)",
                "4 - 3 = 1 (left: 1 5 6)\n9 / 3 = 3 (left: 3 12 15)\n4 / 4 = 1 (left: 1 5 7 8)",
                "4 - 3 = 1 (left: 1 5 6)\n9 / 3 = 3 (left: 3 12 15)\n12 - 3 = 9 (left: 9 15)",
                "4 - 3 = 1 (left: 1 5 6)\n9 / 3 = 3 (left: 3 12 15)\n12 - 3 = 9 (left: 9 15)",
                "4 - 3 = 1 (left: 1 5 6)\n9 / 3 = 3 (left: 3 12 15)\n12 - 3 = 9 (left: 9 15)",
                "4 - 3 = 1 (left: 1 5 6)\n9 / 3 = 3 (left: 3 12 15)\n12 - 3 = 9 (left: 9 15)"
            ]
        },
        "step_4": {
            "steps": [
                "4 - 3 = 1 (left: 1 5 6)\n9 / 3 = 3 (left: 3 12 15)\n12 - 3 = 9 (left: 9 15)\n9 * 15 = 135 (left: 135)",
                "13 - 11 = 2 (left: 2 12 13)\n13 - 2 = 11 (left: 2 12 11)\n12 / 2 = 6 (left: 6 11)\n6 * 11 = 66 (left: 66)",
                "13 - 11 = 2 (left: 2 12 13)\n13 - 2 = 11 (left: 2 12 11)\n12 / 2 = 6 (left: 6 11)\n11 / 6 = 1.8333333333333333 (left: 1.8333333333333333)",
                "13 - 11 = 2 (left: 2 12 13)\n13 - 2 = 11 (left: 2 12 11)\n12 / 2 = 6 (left: 6 11)\n6 * 11 = 66 (left: 66)",
                "4 - 3 = 1 (left: 1 5 6)\n9 / 3 = 3 (left: 3 12 15)\n12 - 3 = 9 (left: 9 15)\n15 - 9 = 6 (left: 6)",
                "4 - 3 = 1 (left: 1 5 6)\n9 / 3 = 3 (left: 3 12 15)\n4 / 4 = 1 (left: 1 5 7 8)\n3 + 9 = 12 (left: 12 12 15)",
                "4 - 3 = 1 (left: 1 5 6)\n9 / 3 = 3 (left: 3 12 15)\n12 - 3 = 9 (left: 9 15)\n15 + 9 = 24 (left: 24)",
                "4 - 3 = 1 (left: 1 5 6)\n9 / 3 = 3 (left: 3 12 15)\n12 - 3 = 9 (left: 9 15)\n9 + 15 = 24 (left: 24)",
                "4 - 3 = 1 (left: 1 5 6)\n9 / 3 = 3 (left: 3 12 15)\n12 - 3 = 9 (left: 9 15)\n15 / 9 = 1.6666666666666667 (left: 1.6666666666666667)",
                "4 - 3 = 1 (left: 1 5 6)\n9 / 3 = 3 (left: 3 12 15)\n12 - 3 = 9 (left: 9 15)\n9 * 15 = 135 (left: 135)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                21.001,
                60.0,
                60.0,
                1.001,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.8178270000000001
    },
    "937": {
        "input": "2 2 8 8",
        "step_1": {
            "steps": [
                "2 + 2 = 4 (left: 4 8 8)",
                "2 * 2 = 4 (left: 4 8 8)",
                "2 * 2 = 4 (left: 4 8 8)",
                "8 - 2 = 6 (left: 2 4 8)",
                "2 * 2 = 4 (left: 4 8 8)",
                "8 - 2 = 6 (left: 2 8 8)",
                "2 + 2 = 4 (left: 4 8 8)",
                "8 * 2 = 16 (left: 2 8 16)",
                "8 / 2 = 4 (left: 2 4 8)",
                "2 + 2 = 4 (left: 4 8 8)"
            ],
            "values": [
                22.0,
                40.001,
                41.0,
                0.003,
                41.0,
                21.001,
                60.0,
                0.003,
                20.002,
                22.0
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 6",
                "2 <- 5",
                "3 <- 8",
                "4 <- 0",
                "5 <- 6",
                "6 <- 6",
                "7 <- 9",
                "8 <- 6",
                "9 <- 1"
            ],
            "resampled_steps": [
                "2 * 2 = 4 (left: 4 8 8)",
                "2 + 2 = 4 (left: 4 8 8)",
                "8 - 2 = 6 (left: 2 8 8)",
                "8 / 2 = 4 (left: 2 4 8)",
                "2 + 2 = 4 (left: 4 8 8)",
                "2 + 2 = 4 (left: 4 8 8)",
                "2 + 2 = 4 (left: 4 8 8)",
                "2 + 2 = 4 (left: 4 8 8)",
                "2 + 2 = 4 (left: 4 8 8)",
                "2 * 2 = 4 (left: 4 8 8)"
            ]
        },
        "step_2": {
            "steps": [
                "2 * 2 = 4 (left: 4 8 8)\n4 + 8 = 12 (left: 8 12)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8)",
                "8 - 2 = 6 (left: 2 8 8)\n2 + 8 = 10 (left: 8 10)",
                "8 / 2 = 4 (left: 2 4 8)\n12 - 10 = 2 (left: 2 2)",
                "2 + 2 = 4 (left: 4 8 8)\n8 * 4 = 32 (left: 8 32)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 / 4 = 2 (left: 2 8 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 / 4 = 2 (left: 2 8 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 / 4 = 2 (left: 2 8)",
                "2 * 2 = 4 (left: 4 8 8)\n4 + 8 = 12 (left: 8 12)"
            ],
            "values": [
                0.003,
                0.003,
                0.001,
                2.001,
                20.002,
                22.0,
                1.002,
                2.001,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 5",
                "2 <- 5",
                "3 <- 5",
                "4 <- 4",
                "5 <- 5",
                "6 <- 5",
                "7 <- 5",
                "8 <- 4",
                "9 <- 4"
            ],
            "resampled_steps": [
                "2 + 2 = 4 (left: 4 8 8)\n8 * 4 = 32 (left: 8 32)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 * 4 = 32 (left: 8 32)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 * 4 = 32 (left: 8 32)",
                "2 + 2 = 4 (left: 4 8 8)\n8 * 4 = 32 (left: 8 32)"
            ]
        },
        "step_3": {
            "steps": [
                "2 + 2 = 4 (left: 4 8 8)\n8 * 4 = 32 (left: 8 32)\n32 / 8 = 4 (left: 4 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 * 4 = 32 (left: 8 32)\n8 * 4 = 32 (left: 32)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n4 + 8 = 12 (left: 8 12)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 * 4 = 32 (left: 8 32)\n32 / 8 = 4 (left: 4)",
                "2 + 2 = 4 (left: 4 8 8)\n8 * 4 = 32 (left: 8 32)\n8 - 32 = -24 (left: -24)"
            ],
            "values": [
                0.003,
                0.003,
                22.0,
                1.002,
                0.003,
                21.0,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 5",
                "1 <- 2",
                "2 <- 2",
                "3 <- 2",
                "4 <- 5",
                "5 <- 5",
                "6 <- 2",
                "7 <- 5",
                "8 <- 5",
                "9 <- 5"
            ],
            "resampled_steps": [
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)"
            ]
        },
        "step_4": {
            "steps": [
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n4 + 8 = 12 (left: 8 12)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n3 + 2 = 5 (left: 2 5)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 / 4 = 2 (left: 2 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 / 4 = 2 (left: 2 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 / 4 = 2 (left: 2 8)",
                "2 + 2 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n8 - 4 = 4 (left: 4 8 8)\n4 * 8 = 32 (left: 8 32)"
            ],
            "values": [
                0.002,
                1.0,
                22.0,
                0.003,
                0.002,
                40.001,
                0.003,
                1.001,
                1.002,
                20.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.8379460000000001
    },
    "938": {
        "input": "2 7 12 13",
        "step_1": {
            "steps": [
                "12 - 2 = 10 (left: 7 10 13)",
                "7 * 2 = 14 (left: 14 12 13)",
                "2 * 7 = 14 (left: 12 13 14)",
                "2 * 12 = 24 (left: 7 24 13)",
                "2 * 7 = 14 (left: 14 12 13)",
                "2 + 7 = 9 (left: 9 12 13)",
                "12 + 1 = 13 (left: 2 7 13)",
                "2 * 12 = 24 (left: 13 24 7)",
                "13 - 7 = 6 (left: 2 6 12)",
                "12 - 2 = 10 (left: 10 12 13)"
            ],
            "values": [
                2.001,
                2.001,
                2.001,
                2.0,
                3.0,
                1.002,
                0.003,
                2.001,
                0.003,
                3.0
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 2",
                "2 <- 0",
                "3 <- 7",
                "4 <- 0",
                "5 <- 1",
                "6 <- 3",
                "7 <- 5",
                "8 <- 2",
                "9 <- 0"
            ],
            "resampled_steps": [
                "12 - 2 = 10 (left: 10 12 13)",
                "2 * 7 = 14 (left: 12 13 14)",
                "12 - 2 = 10 (left: 7 10 13)",
                "2 * 12 = 24 (left: 13 24 7)",
                "12 - 2 = 10 (left: 7 10 13)",
                "7 * 2 = 14 (left: 14 12 13)",
                "2 * 12 = 24 (left: 7 24 13)",
                "2 + 7 = 9 (left: 9 12 13)",
                "2 * 7 = 14 (left: 12 13 14)",
                "12 - 2 = 10 (left: 7 10 13)"
            ]
        },
        "step_2": {
            "steps": [
                "12 - 2 = 10 (left: 10 12 13)\n5 / 5 = 1 (left: 22 3 1)",
                "2 * 7 = 14 (left: 12 13 14)\n14 / 12 = 1.1666666666666667 (left: 13 1.1666666666666667)",
                "12 - 2 = 10 (left: 7 10 13)\n13 - 7 = 6 (left: 7 6)",
                "2 * 12 = 24 (left: 13 24 7)\n24 / 13 = 1.846 (left: 1.846 7)",
                "12 - 2 = 10 (left: 7 10 13)\n7 + 10 = 17 (left: 13 17)",
                "7 * 2 = 14 (left: 14 12 13)\n14 + 12 = 26 (left: 26 13)",
                "2 * 12 = 24 (left: 7 24 13)\n7 + 24 = 31 (left: 13 31)",
                "2 + 7 = 9 (left: 9 12 13)\n13 / 9 = 1.44 (left: 1.44 13)",
                "2 * 7 = 14 (left: 12 13 14)\n13 / 12 = 1.0833 (left: 14 1.0833)",
                "12 - 2 = 10 (left: 7 10 13)\n10 - 7 = 3 (left: 3 13)"
            ],
            "values": [
                2.0,
                3.0,
                0.002,
                1.0,
                0.003,
                1.002,
                0.003,
                1.002,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 8",
                "2 <- 3",
                "3 <- 7",
                "4 <- 1",
                "5 <- 5",
                "6 <- 5",
                "7 <- 8",
                "8 <- 7",
                "9 <- 5"
            ],
            "resampled_steps": [
                "2 * 7 = 14 (left: 12 13 14)\n14 / 12 = 1.1666666666666667 (left: 13 1.1666666666666667)",
                "2 * 7 = 14 (left: 12 13 14)\n13 / 12 = 1.0833 (left: 14 1.0833)",
                "2 * 12 = 24 (left: 13 24 7)\n24 / 13 = 1.846 (left: 1.846 7)",
                "2 + 7 = 9 (left: 9 12 13)\n13 / 9 = 1.44 (left: 1.44 13)",
                "2 * 7 = 14 (left: 12 13 14)\n14 / 12 = 1.1666666666666667 (left: 13 1.1666666666666667)",
                "7 * 2 = 14 (left: 14 12 13)\n14 + 12 = 26 (left: 26 13)",
                "7 * 2 = 14 (left: 14 12 13)\n14 + 12 = 26 (left: 26 13)",
                "2 * 7 = 14 (left: 12 13 14)\n13 / 12 = 1.0833 (left: 14 1.0833)",
                "2 + 7 = 9 (left: 9 12 13)\n13 / 9 = 1.44 (left: 1.44 13)",
                "7 * 2 = 14 (left: 14 12 13)\n14 + 12 = 26 (left: 26 13)"
            ]
        },
        "step_3": {
            "steps": [
                "2 * 7 = 14 (left: 12 13 14)\n14 / 12 = 1.1666666666666667 (left: 13 1.1666666666666667)\n13 * 1 = 13.0 (left: 1.1666666666666667 13.0)",
                "2 * 7 = 14 (left: 12 13 14)\n13 / 12 = 1.0833 (left: 14 1.0833)\n14 - 1.0833 = 12.9167 (left: 12.9167)",
                "2 * 12 = 24 (left: 13 24 7)\n24 / 13 = 1.846 (left: 1.846 7)\n7 - 1.846 = 5.154 (left: 5.154)",
                "2 + 7 = 9 (left: 9 12 13)\n13 / 9 = 1.44 (left: 1.44 13)\n13 / 1.44 = 9.0277777777778 (left: 9.0277777777778)",
                "2 * 7 = 14 (left: 12 13 14)\n14 / 12 = 1.1666666666666667 (left: 13 1.1666666666666667)\n13 + 1.1666666666666667 = 14.166666666666668 (left: 14.166666666666668)",
                "7 * 2 = 14 (left: 14 12 13)\n14 + 12 = 26 (left: 26 13)\n13 * 26 = 338 (left: 338)",
                "7 * 2 = 14 (left: 14 12 13)\n14 + 12 = 26 (left: 26 13)\n5 - 5 = 0 (left: 0 5)",
                "2 * 7 = 14 (left: 12 13 14)\n13 / 12 = 1.0833 (left: 14 1.0833)\n14 / 1.0833 = 12.92",
                "2 + 7 = 9 (left: 9 12 13)\n13 / 9 = 1.44 (left: 1.44 13)\n1.44 * 13 = 18.72 (left: 18.72)",
                "7 * 2 = 14 (left: 14 12 13)\n14 + 12 = 26 (left: 26 13)\n26 + 13 = 39 (left: 39)"
            ],
            "values": [
                1.002,
                0.002,
                0.003,
                0.002,
                0.002,
                0.003,
                40.0,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 6",
                "2 <- 6",
                "3 <- 6",
                "4 <- 0",
                "5 <- 6",
                "6 <- 6",
                "7 <- 6",
                "8 <- 6",
                "9 <- 6"
            ],
            "resampled_steps": [
                "7 * 2 = 14 (left: 14 12 13)\n14 + 12 = 26 (left: 26 13)\n5 - 5 = 0 (left: 0 5)",
                "7 * 2 = 14 (left: 14 12 13)\n14 + 12 = 26 (left: 26 13)\n5 - 5 = 0 (left: 0 5)",
                "7 * 2 = 14 (left: 14 12 13)\n14 + 12 = 26 (left: 26 13)\n5 - 5 = 0 (left: 0 5)",
                "7 * 2 = 14 (left: 14 12 13)\n14 + 12 = 26 (left: 26 13)\n5 - 5 = 0 (left: 0 5)",
                "2 * 7 = 14 (left: 12 13 14)\n14 / 12 = 1.1666666666666667 (left: 13 1.1666666666666667)\n13 * 1 = 13.0 (left: 1.1666666666666667 13.0)",
                "7 * 2 = 14 (left: 14 12 13)\n14 + 12 = 26 (left: 26 13)\n5 - 5 = 0 (left: 0 5)",
                "7 * 2 = 14 (left: 14 12 13)\n14 + 12 = 26 (left: 26 13)\n5 - 5 = 0 (left: 0 5)",
                "7 * 2 = 14 (left: 14 12 13)\n14 + 12 = 26 (left: 26 13)\n5 - 5 = 0 (left: 0 5)",
                "7 * 2 = 14 (left: 14 12 13)\n14 + 12 = 26 (left: 26 13)\n5 - 5 = 0 (left: 0 5)",
                "7 * 2 = 14 (left: 14 12 13)\n14 + 12 = 26 (left: 26 13)\n5 - 5 = 0 (left: 0 5)"
            ]
        },
        "step_4": {
            "steps": [
                "7 * 2 = 14 (left: 14 12 13)\n14 + 12 = 26 (left: 26 13)\n5 - 5 = 0 (left: 0 5)\n0 + 5 = 5 (left: 5)",
                "7 * 2 = 14 (left: 14 12 13)\n14 + 12 = 26 (left: 26 13)\n5 - 5 = 0 (left: 0 5)\nPossible next steps:",
                "7 * 2 = 14 (left: 14 12 13)\n14 + 12 = 26 (left: 26 13)\n5 - 5 = 0 (left: 0 5)\n0 + 5 = 5 (left: 5)",
                "7 * 2 = 14 (left: 14 12 13)\n14 + 12 = 26 (left: 26 13)\n5 - 5 = 0 (left: 0 5)\n5 - 0 = 5 (left: 5)",
                "2 * 7 = 14 (left: 12 13 14)\n14 / 12 = 1.1666666666666667 (left: 13 1.1666666666666667)\n13 * 1 = 13.0 (left: 1.1666666666666667 13.0)\n5 + 6 = 11 (left: 4 11)",
                "7 * 2 = 14 (left: 14 12 13)\n14 + 12 = 26 (left: 26 13)\n5 - 5 = 0 (left: 0 5)\n27 - 9 = 18 (left: 3 18)",
                "7 * 2 = 14 (left: 14 12 13)\n14 + 12 = 26 (left: 26 13)\n5 - 5 = 0 (left: 0 5)\n5 - 0 = 5 (left: 5)",
                "7 * 2 = 14 (left: 14 12 13)\n14 + 12 = 26 (left: 26 13)\n5 - 5 = 0 (left: 0 5)\n5 - 0 = 5 (left: 5)",
                "7 * 2 = 14 (left: 14 12 13)\n14 + 12 = 26 (left: 26 13)\n5 - 5 = 0 (left: 0 5)\n0 + 5 = 5 (left: 5)",
                "7 * 2 = 14 (left: 14 12 13)\n14 + 12 = 26 (left: 26 13)\n5 - 5 = 0 (left: 0 5)\n5 / 0 = Undefined"
            ],
            "values": [
                0.001,
                0.003,
                0.003,
                0.001,
                0.001,
                0.003,
                0.003,
                0.003,
                0.001,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.860493
    },
    "939": {
        "input": "2 6 8 12",
        "step_1": {
            "steps": [
                "12 - 2 = 10 (left: 8 10 12)",
                "12 / 6 = 2 (left: 2 8 12)",
                "8 * 2 = 16 (left: 16 8 12)",
                "6 * 2 = 12 (left: 12 8 12)",
                "12 - 6 = 6 (left: 2 6 12)",
                "6 * 2 = 12 (left: 12 8 12)",
                "12 - 6 = 6 (left: 2 6 12)",
                "8 - 2 = 6 (left: 6 6 12)",
                "6 / 2 = 3 (left: 3 8 12)",
                "8 - 2 = 6 (left: 6 8 12)"
            ],
            "values": [
                3.0,
                0.003,
                3.0,
                1.002,
                0.003,
                1.002,
                0.003,
                60.0,
                41.0,
                22.0
            ],
            "resampled": [
                "0 <- 7",
                "1 <- 7",
                "2 <- 7",
                "3 <- 7",
                "4 <- 8",
                "5 <- 7",
                "6 <- 8",
                "7 <- 8",
                "8 <- 7",
                "9 <- 8"
            ],
            "resampled_steps": [
                "8 - 2 = 6 (left: 6 6 12)",
                "8 - 2 = 6 (left: 6 6 12)",
                "8 - 2 = 6 (left: 6 6 12)",
                "8 - 2 = 6 (left: 6 6 12)",
                "6 / 2 = 3 (left: 3 8 12)",
                "8 - 2 = 6 (left: 6 6 12)",
                "6 / 2 = 3 (left: 3 8 12)",
                "6 / 2 = 3 (left: 3 8 12)",
                "8 - 2 = 6 (left: 6 6 12)",
                "6 / 2 = 3 (left: 3 8 12)"
            ]
        },
        "step_2": {
            "steps": [
                "8 - 2 = 6 (left: 6 6 12)\n6 / 6 = 1 (left: 1 12)",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)",
                "8 - 2 = 6 (left: 6 6 12)\nInput: 1 12 6 2 6",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)",
                "6 / 2 = 3 (left: 3 8 12)\n3 + 8 = 11 (left: 11 12)",
                "8 - 2 = 6 (left: 6 6 12)\n6 - 6 = 0 (left: 0 12)",
                "6 / 2 = 3 (left: 3 8 12)\n12 - 8 = 4 (left: 3 4 12)",
                "6 / 2 = 3 (left: 3 8 12)\n12 - 3 = 9 (left: 8 9)",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 12 36)",
                "6 / 2 = 3 (left: 3 8 12)\n4 - 8 = -4 (left: 7 -4)"
            ],
            "values": [
                20.002,
                21.001,
                0.003,
                40.0,
                1.002,
                20.002,
                41.0,
                0.003,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 6",
                "1 <- 3",
                "2 <- 5",
                "3 <- 6",
                "4 <- 3",
                "5 <- 3",
                "6 <- 3",
                "7 <- 1",
                "8 <- 1",
                "9 <- 1"
            ],
            "resampled_steps": [
                "6 / 2 = 3 (left: 3 8 12)\n12 - 8 = 4 (left: 3 4 12)",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)",
                "8 - 2 = 6 (left: 6 6 12)\n6 - 6 = 0 (left: 0 12)",
                "6 / 2 = 3 (left: 3 8 12)\n12 - 8 = 4 (left: 3 4 12)",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)"
            ]
        },
        "step_3": {
            "steps": [
                "6 / 2 = 3 (left: 3 8 12)\n12 - 8 = 4 (left: 3 4 12)\n3 + 4 = 7 (left: 7 12)",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 + 12 = 48 (left: 48)",
                "8 - 2 = 6 (left: 6 6 12)\n6 - 6 = 0 (left: 0 12)\n12 - 0 = 12 (left: 12)",
                "6 / 2 = 3 (left: 3 8 12)\n12 - 8 = 4 (left: 3 4 12)\n4 + 3 = 7 (left: 7 12)",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 * 12 = 432 (left: 432)",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 + 12 = 48 (left: 48)",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 * 12 = 432 (left: 432)",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 - 12 = 24 (left: 24)",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 - 12 = 24 (left: 24)",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 / 12 = 3 (left: 3)"
            ],
            "values": [
                0.001,
                0.002,
                0.001,
                0.003,
                0.003,
                20.001,
                0.003,
                60.0,
                40.0,
                0.002
            ],
            "resampled": [
                "0 <- 7",
                "1 <- 7",
                "2 <- 7",
                "3 <- 7",
                "4 <- 8",
                "5 <- 5",
                "6 <- 8",
                "7 <- 8",
                "8 <- 8",
                "9 <- 7"
            ],
            "resampled_steps": [
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 - 12 = 24 (left: 24)",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 - 12 = 24 (left: 24)",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 - 12 = 24 (left: 24)",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 - 12 = 24 (left: 24)",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 - 12 = 24 (left: 24)",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 + 12 = 48 (left: 48)",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 - 12 = 24 (left: 24)",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 - 12 = 24 (left: 24)",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 - 12 = 24 (left: 24)",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 - 12 = 24 (left: 24)"
            ]
        },
        "step_4": {
            "steps": [
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 - 12 = 24 (left: 24)\nAnswer: ((8 - 2) * 6) - 12 = 24",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 - 12 = 24 (left: 24)\nAnswer: ((8 - 2) * 6) - 12 = 24",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 - 12 = 24 (left: 24)\nAnswer: ((8 - 2) * 6) - 12 = 24",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 - 12 = 24 (left: 24)\nAnswer: ((8 - 2) * 6) - 12 = 24",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 - 12 = 24 (left: 24)\nAnswer: ((8 - 2) * 6) - 12 = 24",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 + 12 = 48 (left: 48)\n48 / 6 = 8 (left: 8)",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 - 12 = 24 (left: 24)\nAnswer: ((8 - 2) * 6) - 12 = 24",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 - 12 = 24 (left: 24)\nAnswer: (8 - 2) * (6 * 6) = 24",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 - 12 = 24 (left: 24)\nAnswer: ((8 - 2) * 6) - 12 = 24",
                "8 - 2 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 - 12 = 24 (left: 24)\nAnswer: ((8 - 2) * 6) - 12 = 24"
            ],
            "values": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                0.002,
                60.0,
                0.003,
                60.0,
                60.0
            ]
        },
        "results": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            }
        ],
        "cost": 0.8808320000000001
    },
    "940": {
        "input": "3 4 9 13",
        "step_1": {
            "steps": [
                "10 - 2 = 8 (left: 5 7 8)",
                "4 + 9 = 13 (left: 3 13 13)",
                "9 + 4 = 13 (left: 3 13 13)",
                "13 - 3 = 10 (left: 4 9 10)",
                "13 - 9 = 4 (left: 3 4 13)",
                "13 - 3 = 10 (left: 4 9 10)",
                "13 - 3 = 10 (left: 4 9 10)",
                "4 + 9 = 13 (left: 3 13 13)",
                "6 * 7 = 42 (left: 5 8 42)",
                "9 + 4 = 13 (left: 3 13 13)"
            ],
            "values": [
                3.0,
                22.0,
                20.001,
                2.001,
                2.001,
                2.001,
                1.001,
                2.001,
                1.002,
                21.0
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 9",
                "2 <- 1",
                "3 <- 2",
                "4 <- 9",
                "5 <- 2",
                "6 <- 9",
                "7 <- 5",
                "8 <- 9",
                "9 <- 2"
            ],
            "resampled_steps": [
                "4 + 9 = 13 (left: 3 13 13)",
                "9 + 4 = 13 (left: 3 13 13)",
                "4 + 9 = 13 (left: 3 13 13)",
                "9 + 4 = 13 (left: 3 13 13)",
                "9 + 4 = 13 (left: 3 13 13)",
                "9 + 4 = 13 (left: 3 13 13)",
                "9 + 4 = 13 (left: 3 13 13)",
                "13 - 3 = 10 (left: 4 9 10)",
                "9 + 4 = 13 (left: 3 13 13)",
                "9 + 4 = 13 (left: 3 13 13)"
            ]
        },
        "step_2": {
            "steps": [
                "4 + 9 = 13 (left: 3 13 13)\n13 - 3 = 10 (left: 10 13)",
                "9 + 4 = 13 (left: 3 13 13)\n13 - 3 = 10 (left: 10 13)",
                "4 + 9 = 13 (left: 3 13 13)\n13 - 13 = 0 (left: 3)",
                "9 + 4 = 13 (left: 3 13 13)\n13 - 3 = 10 (left: 10 13)",
                "9 + 4 = 13 (left: 3 13 13)\n13 - 3 = 10 (left: 10 13)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)",
                "9 + 4 = 13 (left: 3 13 13)\n13 - 3 = 10 (left: 10 13)",
                "13 - 3 = 10 (left: 4 9 10)\n9 - 4 = 5 (left: 5 10)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4 (left: 4 13)",
                "9 + 4 = 13 (left: 3 13 13)\n13 - 3 = 10 (left: 10 13)"
            ],
            "values": [
                0.002,
                0.002,
                0.003,
                0.002,
                0.003,
                2.0,
                0.002,
                0.003,
                0.003,
                1.001
            ],
            "resampled": [
                "0 <- 5",
                "1 <- 5",
                "2 <- 5",
                "3 <- 5",
                "4 <- 5",
                "5 <- 5",
                "6 <- 5",
                "7 <- 5",
                "8 <- 5",
                "9 <- 5"
            ],
            "resampled_steps": [
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)"
            ]
        },
        "step_3": {
            "steps": [
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)\n5 * 5 = 25 (left: 25)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)\n4.33333 + 13 = 17.33333 (left: 17.33333)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)\n2 + 3 = 5 (left: 1 5 4 5)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)\n4.33333 * 13 = 56.33329 (left: 56.33329)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)\n13 / 4.33333 = 2.999999995 (left: 2.999999995)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)\n13 / 4.33333 = 2.99997 (left: 2.99997)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)\n13 - 4.33333 = 8.66667 (left: 4.33333 8.66667)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)\nInput: 5 10 15",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)\n13 / 4.33333 = 2.99999 (left: 2.99999)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)\n13 - 4.33333 = 8.66667 (left: 8.66667)"
            ],
            "values": [
                60.0,
                0.003,
                21.0,
                0.003,
                0.003,
                0.002,
                1.002,
                0.003,
                0.003,
                0.001
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 0",
                "3 <- 2",
                "4 <- 0",
                "5 <- 0",
                "6 <- 0",
                "7 <- 0",
                "8 <- 0",
                "9 <- 2"
            ],
            "resampled_steps": [
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)\n5 * 5 = 25 (left: 25)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)\n5 * 5 = 25 (left: 25)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)\n5 * 5 = 25 (left: 25)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)\n2 + 3 = 5 (left: 1 5 4 5)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)\n5 * 5 = 25 (left: 25)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)\n5 * 5 = 25 (left: 25)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)\n5 * 5 = 25 (left: 25)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)\n5 * 5 = 25 (left: 25)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)\n5 * 5 = 25 (left: 25)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)\n2 + 3 = 5 (left: 1 5 4 5)"
            ]
        },
        "step_4": {
            "steps": [
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)\n5 * 5 = 25 (left: 25)\nThere are no possible next steps with just the number 25.",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)\n5 * 5 = 25 (left: 25)\n25 + 2 = 27",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)\n5 * 5 = 25 (left: 25)\n25 + 2 = 27",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)\n2 + 3 = 5 (left: 1 5 4 5)\n1 + 5 = 6 (left: 4 5 6)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)\n5 * 5 = 25 (left: 25)\n25 - 2 = 23 (left: 2)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)\n5 * 5 = 25 (left: 25)\n25 - 8 = 17 (left: 8)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)\n5 * 5 = 25 (left: 25)\nThere is only one possible next step:",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)\n5 * 5 = 25 (left: 25)\n25 is a prime number, so there are no possible next steps for this input.",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)\n5 * 5 = 25 (left: 25)\n25 * 2 = 50 (left: 50)",
                "9 + 4 = 13 (left: 3 13 13)\n13 / 3 = 4.33333 (left: 4.33333 13)\n2 + 3 = 5 (left: 1 5 4 5)\n5 * 4 = 20 (left: 1 5 20)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                2.001,
                0.002,
                0.003,
                0.003,
                0.003,
                0.002,
                1.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.904697
    },
    "941": {
        "input": "4 5 10 12",
        "step_1": {
            "steps": [
                "5 * 4 = 20 (left: 10 20 12)",
                "12 / 4 = 3 (left: 5 10 3)",
                "10 + 12 = 22 (left: 4 5 22)",
                "12 - 4 = 8 (left: 8 5 10)",
                "12 / 4 = 3 (left: 5 10 3)",
                "10 / 5 = 2 (left: 4 2 12)",
                "4 * 2 = 8 (left: 8 5 12)",
                "12 - 4 = 8 (left: 8 10 12)",
                "10 - 4 = 6 (left: 6 10 12)",
                "4 + 5 = 9 (left: 9 10 12)"
            ],
            "values": [
                2.001,
                3.0,
                1.002,
                22.0,
                22.0,
                0.003,
                3.0,
                3.0,
                2.001,
                3.0
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 2",
                "3 <- 4",
                "4 <- 4",
                "5 <- 3",
                "6 <- 6",
                "7 <- 4",
                "8 <- 4",
                "9 <- 3"
            ],
            "resampled_steps": [
                "12 - 4 = 8 (left: 8 5 10)",
                "12 - 4 = 8 (left: 8 5 10)",
                "10 + 12 = 22 (left: 4 5 22)",
                "12 / 4 = 3 (left: 5 10 3)",
                "12 / 4 = 3 (left: 5 10 3)",
                "12 - 4 = 8 (left: 8 5 10)",
                "4 * 2 = 8 (left: 8 5 12)",
                "12 / 4 = 3 (left: 5 10 3)",
                "12 / 4 = 3 (left: 5 10 3)",
                "12 - 4 = 8 (left: 8 5 10)"
            ]
        },
        "step_2": {
            "steps": [
                "12 - 4 = 8 (left: 8 5 10)\n10 - 5 = 5 (left: 8 5)",
                "12 - 4 = 8 (left: 8 5 10)\n8 / 5 = 1.6 (left: 1.6 10)",
                "10 + 12 = 22 (left: 4 5 22)\n22 - 5 = 17 (left: 4 17)",
                "12 / 4 = 3 (left: 5 10 3)\n3 * 5 = 15 (left: 10 15)",
                "12 / 4 = 3 (left: 5 10 3)\n12 - 4 = 8 (left: 6 8 2)",
                "12 - 4 = 8 (left: 8 5 10)\n8 - 5 = 3 (left: 3 10)",
                "4 * 2 = 8 (left: 8 5 12)\n8 - 5 = 3 (left: 3 12)",
                "12 / 4 = 3 (left: 5 10 3)\n10 / 5 = 2 (left: 2 3)",
                "12 / 4 = 3 (left: 5 10 3)\n4 + 6 = 10 (left: 2 8 10)",
                "12 - 4 = 8 (left: 8 5 10)\n8 + 5 = 13 (left: 10 13)"
            ],
            "values": [
                20.002,
                0.001,
                1.001,
                0.003,
                22.0,
                21.001,
                40.001,
                0.001,
                3.0,
                0.003
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 6",
                "2 <- 6",
                "3 <- 4",
                "4 <- 4",
                "5 <- 6",
                "6 <- 5",
                "7 <- 0",
                "8 <- 5",
                "9 <- 8"
            ],
            "resampled_steps": [
                "12 / 4 = 3 (left: 5 10 3)\n12 - 4 = 8 (left: 6 8 2)",
                "4 * 2 = 8 (left: 8 5 12)\n8 - 5 = 3 (left: 3 12)",
                "4 * 2 = 8 (left: 8 5 12)\n8 - 5 = 3 (left: 3 12)",
                "12 / 4 = 3 (left: 5 10 3)\n12 - 4 = 8 (left: 6 8 2)",
                "12 / 4 = 3 (left: 5 10 3)\n12 - 4 = 8 (left: 6 8 2)",
                "4 * 2 = 8 (left: 8 5 12)\n8 - 5 = 3 (left: 3 12)",
                "12 - 4 = 8 (left: 8 5 10)\n8 - 5 = 3 (left: 3 10)",
                "12 - 4 = 8 (left: 8 5 10)\n10 - 5 = 5 (left: 8 5)",
                "12 - 4 = 8 (left: 8 5 10)\n8 - 5 = 3 (left: 3 10)",
                "12 / 4 = 3 (left: 5 10 3)\n4 + 6 = 10 (left: 2 8 10)"
            ]
        },
        "step_3": {
            "steps": [
                "12 / 4 = 3 (left: 5 10 3)\n12 - 4 = 8 (left: 6 8 2)\n6 * 8 = 48 (left: 48)",
                "4 * 2 = 8 (left: 8 5 12)\n8 - 5 = 3 (left: 3 12)\n3 + 12 = 15 (left: 15)",
                "4 * 2 = 8 (left: 8 5 12)\n8 - 5 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)",
                "12 / 4 = 3 (left: 5 10 3)\n12 - 4 = 8 (left: 6 8 2)\n4 / 4 = 1 (left: 1 2)",
                "12 / 4 = 3 (left: 5 10 3)\n12 - 4 = 8 (left: 6 8 2)\n6 + 8 = 14 (left: 2 14)",
                "4 * 2 = 8 (left: 8 5 12)\n8 - 5 = 3 (left: 3 12)\n12 / 3 = 4 (left: 4 12)",
                "12 - 4 = 8 (left: 8 5 10)\n8 - 5 = 3 (left: 3 10)\n3 * 10 = 30 (left: 30)",
                "12 - 4 = 8 (left: 8 5 10)\n10 - 5 = 5 (left: 8 5)\n8 * 5 = 40 (left: 40)",
                "12 - 4 = 8 (left: 8 5 10)\n8 - 5 = 3 (left: 3 10)\n3 * 10 = 30 (left: 30)",
                "12 / 4 = 3 (left: 5 10 3)\n4 + 6 = 10 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)"
            ],
            "values": [
                0.002,
                0.001,
                20.0,
                20.002,
                0.003,
                0.002,
                20.002,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 2",
                "2 <- 2",
                "3 <- 2",
                "4 <- 6",
                "5 <- 3",
                "6 <- 3",
                "7 <- 3",
                "8 <- 3",
                "9 <- 2"
            ],
            "resampled_steps": [
                "4 * 2 = 8 (left: 8 5 12)\n8 - 5 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)",
                "4 * 2 = 8 (left: 8 5 12)\n8 - 5 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)",
                "4 * 2 = 8 (left: 8 5 12)\n8 - 5 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)",
                "4 * 2 = 8 (left: 8 5 12)\n8 - 5 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)",
                "12 - 4 = 8 (left: 8 5 10)\n8 - 5 = 3 (left: 3 10)\n3 * 10 = 30 (left: 30)",
                "12 / 4 = 3 (left: 5 10 3)\n12 - 4 = 8 (left: 6 8 2)\n4 / 4 = 1 (left: 1 2)",
                "12 / 4 = 3 (left: 5 10 3)\n12 - 4 = 8 (left: 6 8 2)\n4 / 4 = 1 (left: 1 2)",
                "12 / 4 = 3 (left: 5 10 3)\n12 - 4 = 8 (left: 6 8 2)\n4 / 4 = 1 (left: 1 2)",
                "12 / 4 = 3 (left: 5 10 3)\n12 - 4 = 8 (left: 6 8 2)\n4 / 4 = 1 (left: 1 2)",
                "4 * 2 = 8 (left: 8 5 12)\n8 - 5 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)"
            ]
        },
        "step_4": {
            "steps": [
                "4 * 2 = 8 (left: 8 5 12)\n8 - 5 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nNo possible next steps as there is only one number.",
                "4 * 2 = 8 (left: 8 5 12)\n8 - 5 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nNone, as there is only one number and no operations to perform.",
                "4 * 2 = 8 (left: 8 5 12)\n8 - 5 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nThere is only one number, so no possible next steps.",
                "4 * 2 = 8 (left: 8 5 12)\n8 - 5 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\n36 / 2 = 18",
                "12 - 4 = 8 (left: 8 5 10)\n8 - 5 = 3 (left: 3 10)\n3 * 10 = 30 (left: 30)\nThere are no possible next steps for the input 30.",
                "12 / 4 = 3 (left: 5 10 3)\n12 - 4 = 8 (left: 6 8 2)\n4 / 4 = 1 (left: 1 2)\n1 * 2 = 2 (left: 2)",
                "12 / 4 = 3 (left: 5 10 3)\n12 - 4 = 8 (left: 6 8 2)\n4 / 4 = 1 (left: 1 2)\n2 - 1 = 1 (left: 1) ",
                "12 / 4 = 3 (left: 5 10 3)\n12 - 4 = 8 (left: 6 8 2)\n4 / 4 = 1 (left: 1 2)\n1 + 2 = 3 (left: 3)",
                "12 / 4 = 3 (left: 5 10 3)\n12 - 4 = 8 (left: 6 8 2)\n4 / 4 = 1 (left: 1 2)\n1 + 2 = 3 (left: 3)",
                "4 * 2 = 8 (left: 8 5 12)\n8 - 5 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nThere are no possible next steps for the number 36 as it is already a single number."
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.001,
                0.0,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.9259740000000001
    },
    "942": {
        "input": "1 2 7 11",
        "step_1": {
            "steps": [
                "11 + 1 = 12 (left: 2 7 12)",
                "2 * 7 = 14 (left: 1 14 11)",
                "11 - 2 = 9 (left: 1 7 9)",
                "7 - 1 = 6 (left: 6 2 11)",
                "1 + 2 = 3 (left: 3 7 11)",
                "1 + 2 = 3 (left: 3 7 11)",
                "11 - 2 = 9 (left: 1 7 9)",
                "7 + 11 = 18 (left: 1 2 18)",
                "11 - 1 = 10 (left: 2 7 10)",
                "11 - 7 = 4 (left: 1 2 4)"
            ],
            "values": [
                1.002,
                0.003,
                1.002,
                3.0,
                1.002,
                1.002,
                2.0,
                21.001,
                22.0,
                2.001
            ],
            "resampled": [
                "0 <- 8",
                "1 <- 7",
                "2 <- 7",
                "3 <- 8",
                "4 <- 8",
                "5 <- 6",
                "6 <- 7",
                "7 <- 3",
                "8 <- 7",
                "9 <- 8"
            ],
            "resampled_steps": [
                "11 - 1 = 10 (left: 2 7 10)",
                "7 + 11 = 18 (left: 1 2 18)",
                "7 + 11 = 18 (left: 1 2 18)",
                "11 - 1 = 10 (left: 2 7 10)",
                "11 - 1 = 10 (left: 2 7 10)",
                "11 - 2 = 9 (left: 1 7 9)",
                "7 + 11 = 18 (left: 1 2 18)",
                "7 - 1 = 6 (left: 6 2 11)",
                "7 + 11 = 18 (left: 1 2 18)",
                "11 - 1 = 10 (left: 2 7 10)"
            ]
        },
        "step_2": {
            "steps": [
                "11 - 1 = 10 (left: 2 7 10)\n2 / 7 = 0.2857142857 (left: 0.2857142857 10)",
                "7 + 11 = 18 (left: 1 2 18)\n3 / 5 = 0.6 (left: 0.6 7)",
                "7 + 11 = 18 (left: 1 2 18)\n18 / 1 = 18 (left: 2 18)",
                "11 - 1 = 10 (left: 2 7 10)\n2 + 7 = 9 (left: 9 10)",
                "11 - 1 = 10 (left: 2 7 10)\n10 / 2 = 5 (left: 7 5)",
                "11 - 2 = 9 (left: 1 7 9)\n1 + 7 = 8 (left: 8 9)",
                "7 + 11 = 18 (left: 1 2 18)\n10 / 5 = 2 (left: 2 10)",
                "7 - 1 = 6 (left: 6 2 11)\n6 + 2 = 8 (left: 8 11)",
                "7 + 11 = 18 (left: 1 2 18)\n18 - 2 = 16 (left: 1 16)",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)"
            ],
            "values": [
                3.0,
                0.002,
                0.003,
                0.002,
                1.001,
                0.003,
                2.0,
                1.002,
                0.002,
                41.0
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 9",
                "2 <- 6",
                "3 <- 9",
                "4 <- 9",
                "5 <- 9",
                "6 <- 0",
                "7 <- 9",
                "8 <- 9",
                "9 <- 9"
            ],
            "resampled_steps": [
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)",
                "7 + 11 = 18 (left: 1 2 18)\n10 / 5 = 2 (left: 2 10)",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)",
                "11 - 1 = 10 (left: 2 7 10)\n2 / 7 = 0.2857142857 (left: 0.2857142857 10)",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)"
            ]
        },
        "step_3": {
            "steps": [
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)\n14 - 10 = 4 (left: 4)",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)\n14 + 10 = 24 (left: 24)",
                "7 + 11 = 18 (left: 1 2 18)\n10 / 5 = 2 (left: 2 10)\n10 / 2 = 5 (left: 5)",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)\n14 + 10 = 24 (left: 24)",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)\n14 + 10 = 24 (left: 24)",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)\n14 - 10 = 4 (left: 4)",
                "11 - 1 = 10 (left: 2 7 10)\n2 / 7 = 0.2857142857 (left: 0.2857142857 10)\n10 - 0.2857142857 = 9.7142857143 (left: 9.7142857143)",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)\n14 + 10 = 24 (left: 24)",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)\n14 - 10 = 4 (left: 4)",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)\n14 - 10 = 4 (left: 4)"
            ],
            "values": [
                0.0,
                60.0,
                0.002,
                60.0,
                60.0,
                0.001,
                0.001,
                60.0,
                0.001,
                0.0
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 4",
                "2 <- 1",
                "3 <- 4",
                "4 <- 1",
                "5 <- 1",
                "6 <- 7",
                "7 <- 1",
                "8 <- 7",
                "9 <- 4"
            ],
            "resampled_steps": [
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)\n14 + 10 = 24 (left: 24)",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)\n14 + 10 = 24 (left: 24)",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)\n14 + 10 = 24 (left: 24)",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)\n14 + 10 = 24 (left: 24)",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)\n14 + 10 = 24 (left: 24)",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)\n14 + 10 = 24 (left: 24)",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)\n14 + 10 = 24 (left: 24)",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)\n14 + 10 = 24 (left: 24)",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)\n14 + 10 = 24 (left: 24)",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)\n14 + 10 = 24 (left: 24)"
            ]
        },
        "step_4": {
            "steps": [
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)\n14 + 10 = 24 (left: 24)\nAnswer: (11 - 1) * (7 * 2) = 24",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)\n14 + 10 = 24 (left: 24)\nAnswer: (11 - 1) + (7 * 2) = 24",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)\n14 + 10 = 24 (left: 24)\nAnswer: (11 - 1) + (7 * 2) = 24",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)\n14 + 10 = 24 (left: 24)\nAnswer: (11 - 1) + (7 * 2) = 24",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)\n14 + 10 = 24 (left: 24)\nAnswer: (11 - 1) + (7 * 2) = 24",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)\n14 + 10 = 24 (left: 24)\nAnswer: (11 - 1) + (7 * 2) = 24",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)\n14 + 10 = 24 (left: 24)\nAnswer: (11 - 1) + (7 * 2) = 24",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)\n14 + 10 = 24 (left: 24)\nAnswer: (11 - 1) + (7 * 2) = 24",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)\n14 + 10 = 24 (left: 24)\nAnswer: (11 - 1) * (7 * 2) = 24",
                "11 - 1 = 10 (left: 2 7 10)\n7 * 2 = 14 (left: 14 10)\n14 + 10 = 24 (left: 24)\nAnswer: (11 - 1) + (7 * 2) = 24"
            ],
            "values": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ],
        "cost": 0.9465755
    },
    "943": {
        "input": "4 5 6 8",
        "step_1": {
            "steps": [
                "4 - 5 = -1 (left: -1 6 8)",
                "6 * 8 = 48 (left: 4 5 48)",
                "6 - 4 = 2 (left: 2 5 8)",
                "6 - 8 = -2 (left: 4 5 -2)",
                "6 + 8 = 14 (left: 4 5 14)",
                "6 * 8 = 48 (left: 4 5 48)",
                "4 * 5 = 20 (left: 6 8 20)",
                "5 + 6 = 11 (left: 4 8 11)",
                "Possible next steps:",
                "4 - 5 = -1 (left: -1 6 8)"
            ],
            "values": [
                1.002,
                21.0,
                3.0,
                22.0,
                0.003,
                3.0,
                3.0,
                2.001,
                0.003,
                2.001
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 6",
                "2 <- 3",
                "3 <- 1",
                "4 <- 1",
                "5 <- 1",
                "6 <- 3",
                "7 <- 1",
                "8 <- 7",
                "9 <- 1"
            ],
            "resampled_steps": [
                "6 * 8 = 48 (left: 4 5 48)",
                "4 * 5 = 20 (left: 6 8 20)",
                "6 - 8 = -2 (left: 4 5 -2)",
                "6 * 8 = 48 (left: 4 5 48)",
                "6 * 8 = 48 (left: 4 5 48)",
                "6 * 8 = 48 (left: 4 5 48)",
                "6 - 8 = -2 (left: 4 5 -2)",
                "6 * 8 = 48 (left: 4 5 48)",
                "5 + 6 = 11 (left: 4 8 11)",
                "6 * 8 = 48 (left: 4 5 48)"
            ]
        },
        "step_2": {
            "steps": [
                "6 * 8 = 48 (left: 4 5 48)\n48 / 4 = 12 (left: 5 12)",
                "4 * 5 = 20 (left: 6 8 20)\n8 / 6 = 1.33 (left: 1.33 20)",
                "6 - 8 = -2 (left: 4 5 -2)\n-2 / 4 = -0.5 (left: -0.5)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9.6 (left: 4 9.6)",
                "6 * 8 = 48 (left: 4 5 48)\n48 - 5 = 43 (left: 4 43)",
                "6 - 8 = -2 (left: 4 5 -2)\n3 * 7 = 21 (left: 10 21)",
                "6 * 8 = 48 (left: 4 5 48)\n5 * 4 = 20 (left: 20 48)",
                "5 + 6 = 11 (left: 4 8 11)\n11 - 4 = 7 (left: 4 7 12)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9.6 (left: 4 9.6)"
            ],
            "values": [
                0.002,
                0.002,
                0.001,
                60.0,
                0.003,
                21.0,
                0.003,
                1.0,
                22.0,
                0.002
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 3",
                "3 <- 3",
                "4 <- 3",
                "5 <- 8",
                "6 <- 3",
                "7 <- 3",
                "8 <- 3",
                "9 <- 5"
            ],
            "resampled_steps": [
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)",
                "5 + 6 = 11 (left: 4 8 11)\n11 - 4 = 7 (left: 4 7 12)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)",
                "6 * 8 = 48 (left: 4 5 48)\n48 - 5 = 43 (left: 4 43)"
            ]
        },
        "step_3": {
            "steps": [
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)\n15 - 5 = 10 (left: 10 10)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)\n4 + 9 = 13 (left: 9 13)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)\n3 * 5 = 15 (left: 5 15)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)\n9 - 4 = 5 (left: 5 9)",
                "5 + 6 = 11 (left: 4 8 11)\n11 - 4 = 7 (left: 4 7 12)\n12 / 7 = 1.71 (left: 4 1.71)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)\n4 * 9 = 36 (left: 9 36)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)\n9 - 4 = 5 (left: 5)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)\n7 * 10 = 70 (left: 10)",
                "6 * 8 = 48 (left: 4 5 48)\n48 - 5 = 43 (left: 4 43)\n4 * 43 = 172 (left: 172)"
            ],
            "values": [
                1.0,
                3.0,
                0.003,
                0.003,
                0.002,
                2.0,
                0.003,
                0.002,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 2",
                "1 <- 1",
                "2 <- 0",
                "3 <- 1",
                "4 <- 1",
                "5 <- 1",
                "6 <- 5",
                "7 <- 1",
                "8 <- 1",
                "9 <- 1"
            ],
            "resampled_steps": [
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)\n4 + 9 = 13 (left: 9 13)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)\n15 - 5 = 10 (left: 10 10)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)",
                "5 + 6 = 11 (left: 4 8 11)\n11 - 4 = 7 (left: 4 7 12)\n12 / 7 = 1.71 (left: 4 1.71)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)"
            ]
        },
        "step_4": {
            "steps": [
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)\n4 + 9 = 13 (left: 9 13)\n9 / 13 = 0.6923076923076923 (left: 0.6923076923076923)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)\n9 / 2.25 = 4 (left: 4)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)\n15 - 5 = 10 (left: 10 10)\n10 + 10 = 20",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)\n9 / 2.25 = 4 (left: 4 9)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)\n9 - 2.25 = 6.75 (left: 6.75)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)\n9 / 2.25 = 4 (left: 4)",
                "5 + 6 = 11 (left: 4 8 11)\n11 - 4 = 7 (left: 4 7 12)\n12 / 7 = 1.71 (left: 4 1.71)\n4 * 1.71 = 6.84 (left: 6.84)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)\n2.25 * 9 = 20.25 (left: 20.25)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)\n5 / 3 = 1.67 (left: 1.67)",
                "6 * 8 = 48 (left: 4 5 48)\n48 / 5 = 9 (left: 4 9)\n9 / 4 = 2.25 (left: 2.25 9)\nInput: 3 5 7"
            ],
            "values": [
                0.002,
                0.002,
                0.003,
                41.0,
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.968987
    },
    "944": {
        "input": "6 10 12 13",
        "step_1": {
            "steps": [
                "12 - 6 = 6 (left: 6 10 12)",
                "12 + 13 = 25 (left: 6 10 25)",
                "Input: 3 5 7 9",
                "12 + 6 = 18 (left: 10 13 18)",
                "13 + 1 = 14 (left: 6 10 14)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)",
                "6 + 10 = 16 (left: 12 16 13)",
                "6 + 10 = 16 (left: 12 16 13)",
                "6 * 10 = 60 (left: 12 60 13)",
                "8 - 7 = 1 (left: 1 9 10)"
            ],
            "values": [
                3.0,
                2.001,
                0.003,
                0.003,
                2.001,
                2.001,
                2.001,
                1.002,
                3.0,
                2.001
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 6",
                "3 <- 5",
                "4 <- 5",
                "5 <- 8",
                "6 <- 0",
                "7 <- 0",
                "8 <- 1",
                "9 <- 0"
            ],
            "resampled_steps": [
                "12 - 6 = 6 (left: 6 10 12)",
                "12 - 6 = 6 (left: 6 10 12)",
                "6 + 10 = 16 (left: 12 16 13)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)",
                "6 * 10 = 60 (left: 12 60 13)",
                "12 - 6 = 6 (left: 6 10 12)",
                "12 - 6 = 6 (left: 6 10 12)",
                "12 + 13 = 25 (left: 6 10 25)",
                "12 - 6 = 6 (left: 6 10 12)"
            ]
        },
        "step_2": {
            "steps": [
                "12 - 6 = 6 (left: 6 10 12)\n10 - 6 = 4 (left: 4 12)",
                "12 - 6 = 6 (left: 6 10 12)\n6 + 10 = 16 (left: 16 12)",
                "6 + 10 = 16 (left: 12 16 13)\n12 + 16 = 28 (left: 13 28)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n3 * 5 = 15 (left: 15 7 8)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n15 - 2.3333333333333335 = 12.666666666666666 (left: 9 12.666666666666666)",
                "6 * 10 = 60 (left: 12 60 13)\n13 + 12 = 25 (left: 60 25)",
                "12 - 6 = 6 (left: 6 10 12)\n10 / 2 = 5 (left: 5 12)",
                "12 - 6 = 6 (left: 6 10 12)\n12 * 6 = 72 (left: 10 72)",
                "12 + 13 = 25 (left: 6 10 25)\n10 + 25 = 35 (left: 6 35)",
                "12 - 6 = 6 (left: 6 10 12)\n6 + 10 = 16 (left: 16 12)"
            ],
            "values": [
                0.002,
                0.003,
                0.003,
                2.001,
                2.001,
                0.001,
                1.0,
                1.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 3",
                "2 <- 6",
                "3 <- 4",
                "4 <- 4",
                "5 <- 6",
                "6 <- 4",
                "7 <- 7",
                "8 <- 4",
                "9 <- 3"
            ],
            "resampled_steps": [
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n15 - 2.3333333333333335 = 12.666666666666666 (left: 9 12.666666666666666)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n3 * 5 = 15 (left: 15 7 8)",
                "12 - 6 = 6 (left: 6 10 12)\n10 / 2 = 5 (left: 5 12)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n15 - 2.3333333333333335 = 12.666666666666666 (left: 9 12.666666666666666)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n15 - 2.3333333333333335 = 12.666666666666666 (left: 9 12.666666666666666)",
                "12 - 6 = 6 (left: 6 10 12)\n10 / 2 = 5 (left: 5 12)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n15 - 2.3333333333333335 = 12.666666666666666 (left: 9 12.666666666666666)",
                "12 - 6 = 6 (left: 6 10 12)\n12 * 6 = 72 (left: 10 72)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n15 - 2.3333333333333335 = 12.666666666666666 (left: 9 12.666666666666666)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n3 * 5 = 15 (left: 15 7 8)"
            ]
        },
        "step_3": {
            "steps": [
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n15 - 2.3333333333333335 = 12.666666666666666 (left: 9 12.666666666666666)\n9 * 12.666666666666666 \u2248 114 (left: 114)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n3 * 5 = 15 (left: 15 7 8)\n15 / 7 = 2.14 (left: 2.14 8)",
                "12 - 6 = 6 (left: 6 10 12)\n10 / 2 = 5 (left: 5 12)\n5 - 12 = -7 (left: -7)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n15 - 2.3333333333333335 = 12.666666666666666 (left: 9 12.666666666666666)\n12.666666666666666 / 9 = 1.4074074074074074 (left: 1.4074074074074074 12.666666666666666)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n15 - 2.3333333333333335 = 12.666666666666666 (left: 9 12.666666666666666)\n9 * 12.666666666666666 = 114 (left: 12.666666666666666 114)",
                "12 - 6 = 6 (left: 6 10 12)\n10 / 2 = 5 (left: 5 12)\n5 * 12 = 60 (left: 60)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n15 - 2.3333333333333335 = 12.666666666666666 (left: 9 12.666666666666666)\n9 + 12.666666666666666 = 21.666666666666668 (left: 21.666666666666668) ",
                "12 - 6 = 6 (left: 6 10 12)\n12 * 6 = 72 (left: 10 72)\n10 + 7 = 17 (left: 17 72)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n15 - 2.3333333333333335 = 12.666666666666666 (left: 9 12.666666666666666)\n3.14159265359 - 2.71828182846 \u2248 0.42331082513 (left: 0.42331082513)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n3 * 5 = 15 (left: 15 7 8)\n15 * 7 = 105 (left: 8 105)"
            ],
            "values": [
                0.002,
                2.001,
                0.001,
                2.0,
                1.001,
                0.003,
                0.001,
                0.003,
                0.003,
                20.0
            ],
            "resampled": [
                "0 <- 9",
                "1 <- 3",
                "2 <- 1",
                "3 <- 9",
                "4 <- 3",
                "5 <- 9",
                "6 <- 9",
                "7 <- 9",
                "8 <- 1",
                "9 <- 9"
            ],
            "resampled_steps": [
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n3 * 5 = 15 (left: 15 7 8)\n15 * 7 = 105 (left: 8 105)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n15 - 2.3333333333333335 = 12.666666666666666 (left: 9 12.666666666666666)\n12.666666666666666 / 9 = 1.4074074074074074 (left: 1.4074074074074074 12.666666666666666)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n3 * 5 = 15 (left: 15 7 8)\n15 / 7 = 2.14 (left: 2.14 8)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n3 * 5 = 15 (left: 15 7 8)\n15 * 7 = 105 (left: 8 105)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n15 - 2.3333333333333335 = 12.666666666666666 (left: 9 12.666666666666666)\n12.666666666666666 / 9 = 1.4074074074074074 (left: 1.4074074074074074 12.666666666666666)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n3 * 5 = 15 (left: 15 7 8)\n15 * 7 = 105 (left: 8 105)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n3 * 5 = 15 (left: 15 7 8)\n15 * 7 = 105 (left: 8 105)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n3 * 5 = 15 (left: 15 7 8)\n15 * 7 = 105 (left: 8 105)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n3 * 5 = 15 (left: 15 7 8)\n15 / 7 = 2.14 (left: 2.14 8)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n3 * 5 = 15 (left: 15 7 8)\n15 * 7 = 105 (left: 8 105)"
            ]
        },
        "step_4": {
            "steps": [
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n3 * 5 = 15 (left: 15 7 8)\n15 * 7 = 105 (left: 8 105)\n8 / 105 = 0.0761905 (left: 0.0761905)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n15 - 2.3333333333333335 = 12.666666666666666 (left: 9 12.666666666666666)\n12.666666666666666 / 9 = 1.4074074074074074 (left: 1.4074074074074074 12.666666666666666)\n1.4074074074074074 + 11.25925925925926 = 12.666666666666666 (left: 11.25925925925926 12.666666666666666)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n3 * 5 = 15 (left: 15 7 8)\n15 / 7 = 2.14 (left: 2.14 8)\n5 / 5 = 1 (left: 1 5)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n3 * 5 = 15 (left: 15 7 8)\n15 * 7 = 105 (left: 8 105)\n105 - 8 = 97 (left: 97)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n15 - 2.3333333333333335 = 12.666666666666666 (left: 9 12.666666666666666)\n12.666666666666666 / 9 = 1.4074074074074074 (left: 1.4074074074074074 12.666666666666666)\n1.4074074074074074 / 12.666666666666666 = 0.11111111111111112 (left: 0.11111111111111112)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n3 * 5 = 15 (left: 15 7 8)\n15 * 7 = 105 (left: 8 105)\n105 - 8 = 97 (left: 97)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n3 * 5 = 15 (left: 15 7 8)\n15 * 7 = 105 (left: 8 105)\n105 - 8 = 97 (left: 97)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n3 * 5 = 15 (left: 15 7 8)\n15 * 7 = 105 (left: 8 105)\n8 / 105 = 0.07619 (left: 0.07619)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n3 * 5 = 15 (left: 15 7 8)\n15 / 7 = 2.14 (left: 2.14 8)\n8 / 2.14 = 3.7383 (left: 3.7383)",
                "7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 9 15)\n3 * 5 = 15 (left: 15 7 8)\n15 * 7 = 105 (left: 8 105)\n8 * 105 = 840 (left: 840)"
            ],
            "values": [
                0.003,
                0.0,
                60.0,
                0.003,
                0.003,
                0.002,
                0.002,
                0.001,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.99363
    },
    "945": {
        "input": "1 3 9 9",
        "step_1": {
            "steps": [
                "1 * 3 = 3 (left: 3 9 9)",
                "9 + 1 = 10 (left: 3 9 10)",
                "9 - 3 = 6 (left: 1 6 9)",
                "1 + 3 = 4 (left: 4 9 9)",
                "9 / 3 = 3 (left: 1 3 9)",
                "9 / 3 = 3 (left: 1 3 9)",
                "6 - 4 = 2 (left: 2 5 7)",
                "1 + 3 = 4 (left: 4 9 9)",
                "9 / 3 = 3 (left: 1 3 9)",
                "9 - 3 = 6 (left: 1 6 9)"
            ],
            "values": [
                40.001,
                0.003,
                1.002,
                3.0,
                0.003,
                0.003,
                1.002,
                0.002,
                2.001,
                1.002
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 0",
                "2 <- 0",
                "3 <- 0",
                "4 <- 0",
                "5 <- 0",
                "6 <- 0",
                "7 <- 0",
                "8 <- 0",
                "9 <- 8"
            ],
            "resampled_steps": [
                "1 * 3 = 3 (left: 3 9 9)",
                "1 * 3 = 3 (left: 3 9 9)",
                "1 * 3 = 3 (left: 3 9 9)",
                "1 * 3 = 3 (left: 3 9 9)",
                "1 * 3 = 3 (left: 3 9 9)",
                "1 * 3 = 3 (left: 3 9 9)",
                "1 * 3 = 3 (left: 3 9 9)",
                "1 * 3 = 3 (left: 3 9 9)",
                "1 * 3 = 3 (left: 3 9 9)",
                "9 / 3 = 3 (left: 1 3 9)"
            ]
        },
        "step_2": {
            "steps": [
                "1 * 3 = 3 (left: 3 9 9)\n3 + 9 = 12 (left: 9 12)",
                "1 * 3 = 3 (left: 3 9 9)\nPossible next steps:",
                "1 * 3 = 3 (left: 3 9 9)\n9 - 3 = 6 (left: 6 9)",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)",
                "1 * 3 = 3 (left: 3 9 9)\nPossible next steps:",
                "1 * 3 = 3 (left: 3 9 9)\n10 / 5 = 2 (left: 5 2)",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 9 27)",
                "1 * 3 = 3 (left: 3 9 9)\n3 + 9 = 12 (left: 9 12)",
                "1 * 3 = 3 (left: 3 9 9)\n9 / 3 = 3 (left: 3 9)",
                "9 / 3 = 3 (left: 1 3 9)\n9 / 3 = 3 (left: 1 3)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                40.001,
                0.003,
                60.0,
                2.001,
                0.002,
                0.002,
                20.0
            ],
            "resampled": [
                "0 <- 5",
                "1 <- 5",
                "2 <- 9",
                "3 <- 3",
                "4 <- 3",
                "5 <- 3",
                "6 <- 5",
                "7 <- 5",
                "8 <- 5",
                "9 <- 5"
            ],
            "resampled_steps": [
                "1 * 3 = 3 (left: 3 9 9)\n10 / 5 = 2 (left: 5 2)",
                "1 * 3 = 3 (left: 3 9 9)\n10 / 5 = 2 (left: 5 2)",
                "9 / 3 = 3 (left: 1 3 9)\n9 / 3 = 3 (left: 1 3)",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)",
                "1 * 3 = 3 (left: 3 9 9)\n10 / 5 = 2 (left: 5 2)",
                "1 * 3 = 3 (left: 3 9 9)\n10 / 5 = 2 (left: 5 2)",
                "1 * 3 = 3 (left: 3 9 9)\n10 / 5 = 2 (left: 5 2)",
                "1 * 3 = 3 (left: 3 9 9)\n10 / 5 = 2 (left: 5 2)"
            ]
        },
        "step_3": {
            "steps": [
                "1 * 3 = 3 (left: 3 9 9)\n10 / 5 = 2 (left: 5 2)\n5 * 2 = 10 (left: 10) ",
                "1 * 3 = 3 (left: 3 9 9)\n10 / 5 = 2 (left: 5 2)\n5 + 2 = 7 (left: 7)",
                "9 / 3 = 3 (left: 1 3 9)\n9 / 3 = 3 (left: 1 3)\n3 / 1 = 3 (left: 3)",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)\n9 * 27 = 243 (left: 243)",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)\n27 - 9 = 18 (left: 9 18)",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)\n27 + 9 = 36 (left: 36)",
                "1 * 3 = 3 (left: 3 9 9)\n10 / 5 = 2 (left: 5 2)\n5 - 2 = 3 (left: 3)",
                "1 * 3 = 3 (left: 3 9 9)\n10 / 5 = 2 (left: 5 2)\n5 + 2 = 7 (left: 7)",
                "1 * 3 = 3 (left: 3 9 9)\n10 / 5 = 2 (left: 5 2)\n5 / 2 = 2.5 (left: 2.5)",
                "1 * 3 = 3 (left: 3 9 9)\n10 / 5 = 2 (left: 5 2)\n5 - 2 = 3 (left: 3)"
            ],
            "values": [
                0.003,
                0.001,
                0.002,
                0.003,
                0.003,
                60.0,
                0.001,
                0.002,
                0.001,
                0.002
            ],
            "resampled": [
                "0 <- 5",
                "1 <- 5",
                "2 <- 5",
                "3 <- 5",
                "4 <- 5",
                "5 <- 5",
                "6 <- 5",
                "7 <- 5",
                "8 <- 5",
                "9 <- 5"
            ],
            "resampled_steps": [
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)\n27 + 9 = 36 (left: 36)",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)\n27 + 9 = 36 (left: 36)",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)\n27 + 9 = 36 (left: 36)",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)\n27 + 9 = 36 (left: 36)",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)\n27 + 9 = 36 (left: 36)",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)\n27 + 9 = 36 (left: 36)",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)\n27 + 9 = 36 (left: 36)",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)\n27 + 9 = 36 (left: 36)",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)\n27 + 9 = 36 (left: 36)",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)\n27 + 9 = 36 (left: 36)"
            ]
        },
        "step_4": {
            "steps": [
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)\n27 + 9 = 36 (left: 36)\n36 + 2 = 38 ",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)\n27 + 9 = 36 (left: 36)\nThere is only one number, so there are no possible next steps.",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)\n27 + 9 = 36 (left: 36)\nThere is only one number, so no possible next steps.",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)\n27 + 9 = 36 (left: 36)\nNone, as there is only one number given.",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)\n27 + 9 = 36 (left: 36)\n36 / 3 = 12 (left: 12)",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)\n27 + 9 = 36 (left: 36)\nNo possible next steps with just one number.",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)\n27 + 9 = 36 (left: 36)\nNo possible next steps with the input 36.",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)\n27 + 9 = 36 (left: 36)\nNo possible next steps as there is only one number provided.",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)\n27 + 9 = 36 (left: 36)\n36 is already a single number, so there are no possible next steps.",
                "1 * 3 = 3 (left: 3 9 9)\n3 * 9 = 27 (left: 9 27)\n27 + 9 = 36 (left: 36)\n36 + 2 = 38"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.012489
    },
    "946": {
        "input": "1 4 4 11",
        "step_1": {
            "steps": [
                "11 / 1 = 11 (left: 4 4 11)",
                "11 - 4 = 7 (left: 1 7 4)",
                "4 + 1 = 5 (left: 5 4 11)",
                "4 - 1 = 3 (left: 3 4 11)",
                "4 - 1 = 3 (left: 3 4 11)",
                "1 + 4 = 5 (left: 4 5 11)",
                "4 - 1 = 3 (left: 3 4 11)",
                "11 / 4 = 2.75 (left: 1 4 2.75)",
                "4 * 1 = 4 (left: 4 4 11)",
                "1 * 4 = 4 (left: 4 4 11)"
            ],
            "values": [
                22.0,
                41.0,
                1.001,
                2.001,
                22.0,
                1.002,
                22.0,
                3.0,
                22.0,
                1.002
            ],
            "resampled": [
                "0 <- 0",
                "1 <- 6",
                "2 <- 0",
                "3 <- 0",
                "4 <- 1",
                "5 <- 6",
                "6 <- 6",
                "7 <- 6",
                "8 <- 4",
                "9 <- 1"
            ],
            "resampled_steps": [
                "11 / 1 = 11 (left: 4 4 11)",
                "4 - 1 = 3 (left: 3 4 11)",
                "11 / 1 = 11 (left: 4 4 11)",
                "11 / 1 = 11 (left: 4 4 11)",
                "11 - 4 = 7 (left: 1 7 4)",
                "4 - 1 = 3 (left: 3 4 11)",
                "4 - 1 = 3 (left: 3 4 11)",
                "4 - 1 = 3 (left: 3 4 11)",
                "4 - 1 = 3 (left: 3 4 11)",
                "11 - 4 = 7 (left: 1 7 4)"
            ]
        },
        "step_2": {
            "steps": [
                "11 / 1 = 11 (left: 4 4 11)\n11 - 4 = 7 (left: 4 7)",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)",
                "11 / 1 = 11 (left: 4 4 11)\nInput: 3 6 9 12",
                "11 / 1 = 11 (left: 4 4 11)\n3 / 7 = 0.428571 (left: 0.428571 9)",
                "11 - 4 = 7 (left: 1 7 4)\n1 * 7 = 7 (left: 4 7)",
                "4 - 1 = 3 (left: 3 4 11)\n3 + 4 = 7 (left: 7 11)",
                "4 - 1 = 3 (left: 3 4 11)\n11 / 3 = 3.67 (left: 3.67 4)",
                "4 - 1 = 3 (left: 3 4 11)\n11 - 4 = 7 (left: 3 7)",
                "4 - 1 = 3 (left: 3 4 11)\n4 * 3 = 12 (left: 12 11)",
                "11 - 4 = 7 (left: 1 7 4)\nPossible next steps:"
            ],
            "values": [
                0.002,
                40.0,
                0.003,
                0.003,
                0.003,
                0.0,
                1.001,
                0.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 1",
                "3 <- 1",
                "4 <- 1",
                "5 <- 1",
                "6 <- 1",
                "7 <- 1",
                "8 <- 1",
                "9 <- 6"
            ],
            "resampled_steps": [
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)",
                "4 - 1 = 3 (left: 3 4 11)\n11 / 3 = 3.67 (left: 3.67 4)"
            ]
        },
        "step_3": {
            "steps": [
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)\n11 - 1 = 10 (left: 10)",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)\nPossible next steps:",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)\n11 + 1 = 12 (left: 11)",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)\n1 * 11 = 11 (left: 11)",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)\n11 - 1 = 10 (left: 10)",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)\n11 - 1 = 10 (left: 10)",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)\n1 * 11 = 11 (left: 11)",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)\n11 / 1 = 11 (left: 11)",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)\n1 * 11 = 11 (left: 11)",
                "4 - 1 = 3 (left: 3 4 11)\n11 / 3 = 3.67 (left: 3.67 4)\n3.67 * 4 = 14.68 (left: 14.68)"
            ],
            "values": [
                0.002,
                0.003,
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.001,
                0.003
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 1",
                "2 <- 1",
                "3 <- 7",
                "4 <- 4",
                "5 <- 9",
                "6 <- 4",
                "7 <- 0",
                "8 <- 7",
                "9 <- 7"
            ],
            "resampled_steps": [
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)\n11 - 1 = 10 (left: 10)",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)\nPossible next steps:",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)\nPossible next steps:",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)\n11 / 1 = 11 (left: 11)",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)\n11 - 1 = 10 (left: 10)",
                "4 - 1 = 3 (left: 3 4 11)\n11 / 3 = 3.67 (left: 3.67 4)\n3.67 * 4 = 14.68 (left: 14.68)",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)\n11 - 1 = 10 (left: 10)",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)\n11 - 1 = 10 (left: 10)",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)\n11 / 1 = 11 (left: 11)",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)\n11 / 1 = 11 (left: 11)"
            ]
        },
        "step_4": {
            "steps": [
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)\n11 - 1 = 10 (left: 10)\n10 + 8 = 18 (left: 8)",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)\nPossible next steps:\nThere seems to be a mistake in the input provided. Can you please provide the correct input for me to generate possible next steps?",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)\nPossible next steps:\nIt appears that the input was not provided. Please enter the numbers to continue finding possible next steps.",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)\n11 / 1 = 11 (left: 11)\nThere is only one possible next step: 11.",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)\n11 - 1 = 10 (left: 10)\n10 + 2 = 12 (left: 12)",
                "4 - 1 = 3 (left: 3 4 11)\n11 / 3 = 3.67 (left: 3.67 4)\n3.67 * 4 = 14.68 (left: 14.68)\nThere are no possible next steps for the input 14.68 as it is already a single number.",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)\n11 - 1 = 10 (left: 10)\n10 + 10 = 20",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)\n11 - 1 = 10 (left: 10)\n10 / 8 = 1.25 (left: 8)",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)\n11 / 1 = 11 (left: 11)\nThere are no possible next steps with the input of 11.",
                "4 - 1 = 3 (left: 3 4 11)\n4 - 3 = 1 (left: 1 11)\n11 / 1 = 11 (left: 11)\nThere are no possible next steps with the input 11."
            ],
            "values": [
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.0320995000000002
    },
    "947": {
        "input": "2 3 9 10",
        "step_1": {
            "steps": [
                "9 / 3 = 3 (left: 2 3 10)",
                "10 - 2 = 8 (left: 3 8 9)",
                "2 + 3 = 5 (left: 5 9 10)",
                "10 - 2 = 8 (left: 3 8 9)",
                "3 * 2 = 6 (left: 6 9 10)",
                "9 / 3 = 3 (left: 2 3 10)",
                "2 + 3 = 5 (left: 5 9 10)",
                "9 + 2 = 11 (left: 3 11 10)",
                "2 * 3 = 6 (left: 6 9 10)",
                "9 / 3 = 3 (left: 2 3 10)"
            ],
            "values": [
                21.0,
                60.0,
                22.0,
                60.0,
                3.0,
                60.0,
                2.001,
                3.0,
                3.0,
                22.0
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 0",
                "3 <- 3",
                "4 <- 3",
                "5 <- 5",
                "6 <- 1",
                "7 <- 3",
                "8 <- 3",
                "9 <- 5"
            ],
            "resampled_steps": [
                "10 - 2 = 8 (left: 3 8 9)",
                "10 - 2 = 8 (left: 3 8 9)",
                "9 / 3 = 3 (left: 2 3 10)",
                "10 - 2 = 8 (left: 3 8 9)",
                "10 - 2 = 8 (left: 3 8 9)",
                "9 / 3 = 3 (left: 2 3 10)",
                "10 - 2 = 8 (left: 3 8 9)",
                "10 - 2 = 8 (left: 3 8 9)",
                "10 - 2 = 8 (left: 3 8 9)",
                "9 / 3 = 3 (left: 2 3 10)"
            ]
        },
        "step_2": {
            "steps": [
                "10 - 2 = 8 (left: 3 8 9)\nPossible next steps:",
                "10 - 2 = 8 (left: 3 8 9)\n3 + 8 = 11 (left: 8 9 11)",
                "9 / 3 = 3 (left: 2 3 10)\n3 + 2 = 5 (left: 5 10)",
                "10 - 2 = 8 (left: 3 8 9)\n8 / 3 = 2.67 (left: 2.67 9)",
                "10 - 2 = 8 (left: 3 8 9)\n3 + 8 = 11 (left: 8 9 11)",
                "9 / 3 = 3 (left: 2 3 10)\n10 - 3 = 7 (left: 2 7)",
                "10 - 2 = 8 (left: 3 8 9)\n3 * 8 = 24 (left: 8 9 24)",
                "10 - 2 = 8 (left: 3 8 9)\n9 + 3 = 12 (left: 8 12)",
                "10 - 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8 9)",
                "9 / 3 = 3 (left: 2 3 10)\n10 - 3 = 7 (left: 2 7)"
            ],
            "values": [
                0.003,
                2.001,
                0.001,
                60.0,
                3.0,
                0.003,
                2.0,
                0.003,
                60.0,
                0.001
            ],
            "resampled": [
                "0 <- 3",
                "1 <- 3",
                "2 <- 3",
                "3 <- 3",
                "4 <- 3",
                "5 <- 8",
                "6 <- 3",
                "7 <- 8",
                "8 <- 8",
                "9 <- 1"
            ],
            "resampled_steps": [
                "10 - 2 = 8 (left: 3 8 9)\n8 / 3 = 2.67 (left: 2.67 9)",
                "10 - 2 = 8 (left: 3 8 9)\n8 / 3 = 2.67 (left: 2.67 9)",
                "10 - 2 = 8 (left: 3 8 9)\n8 / 3 = 2.67 (left: 2.67 9)",
                "10 - 2 = 8 (left: 3 8 9)\n8 / 3 = 2.67 (left: 2.67 9)",
                "10 - 2 = 8 (left: 3 8 9)\n8 / 3 = 2.67 (left: 2.67 9)",
                "10 - 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8 9)",
                "10 - 2 = 8 (left: 3 8 9)\n8 / 3 = 2.67 (left: 2.67 9)",
                "10 - 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8 9)",
                "10 - 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8 9)",
                "10 - 2 = 8 (left: 3 8 9)\n3 + 8 = 11 (left: 8 9 11)"
            ]
        },
        "step_3": {
            "steps": [
                "10 - 2 = 8 (left: 3 8 9)\n8 / 3 = 2.67 (left: 2.67 9)\n9 / 2.67 = 3.37 (left: 3.37)",
                "10 - 2 = 8 (left: 3 8 9)\n8 / 3 = 2.67 (left: 2.67 9)\nPossible next steps:",
                "10 - 2 = 8 (left: 3 8 9)\n8 / 3 = 2.67 (left: 2.67 9)\nPossible next steps:",
                "10 - 2 = 8 (left: 3 8 9)\n8 / 3 = 2.67 (left: 2.67 9)\nPossible next steps:",
                "10 - 2 = 8 (left: 3 8 9)\n8 / 3 = 2.67 (left: 2.67 9)\n2.67 + 9 = 11.67 (left: 9 11.67)",
                "10 - 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8 9)\n8 - 3 = 5 (left: 5 8 9)",
                "10 - 2 = 8 (left: 3 8 9)\n8 / 3 = 2.67 (left: 2.67 9)\n9 / 2.67 = 3.37 (left: 3.37)",
                "10 - 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8 9)",
                "10 - 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8 9)\n3 * 8 = 24 (left: 8 9 24)",
                "10 - 2 = 8 (left: 3 8 9)\n3 + 8 = 11 (left: 8 9 11)\n8 / 9 = 0.8888888888888888 (left: 0.8888888888888888 11)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.001,
                3.0,
                0.002,
                3.0,
                1.002,
                2.001
            ],
            "resampled": [
                "0 <- 7",
                "1 <- 8",
                "2 <- 9",
                "3 <- 7",
                "4 <- 7",
                "5 <- 7",
                "6 <- 7",
                "7 <- 5",
                "8 <- 7",
                "9 <- 9"
            ],
            "resampled_steps": [
                "10 - 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8 9)",
                "10 - 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8 9)\n3 * 8 = 24 (left: 8 9 24)",
                "10 - 2 = 8 (left: 3 8 9)\n3 + 8 = 11 (left: 8 9 11)\n8 / 9 = 0.8888888888888888 (left: 0.8888888888888888 11)",
                "10 - 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8 9)",
                "10 - 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8 9)",
                "10 - 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8 9)",
                "10 - 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8 9)",
                "10 - 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8 9)\n8 - 3 = 5 (left: 5 8 9)",
                "10 - 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8 9)",
                "10 - 2 = 8 (left: 3 8 9)\n3 + 8 = 11 (left: 8 9 11)\n8 / 9 = 0.8888888888888888 (left: 0.8888888888888888 11)"
            ]
        },
        "step_4": {
            "steps": [
                "10 - 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8 9)\n8 - 6 = 2 (left: 2 9)",
                "10 - 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8 9)\n3 * 8 = 24 (left: 8 9 24)\n24 / 9 \u2248 2.67 (left: 2.67 24)",
                "10 - 2 = 8 (left: 3 8 9)\n3 + 8 = 11 (left: 8 9 11)\n8 / 9 = 0.8888888888888888 (left: 0.8888888888888888 11)\n0.8888888888888888 + 11 = 11.888888888888888 (left: 11.888888888888888)",
                "10 - 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8 9)\n6 + 8 = 14 (left: 9 14)",
                "10 - 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8 9)\n5 / 3 = 1.67 (left: 3 7 2)",
                "10 - 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8 9)\n9 / 6 = 1.5 (left: 1.5 8)",
                "10 - 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8 9)\n6 * 8 = 48 (left: 9 48)",
                "10 - 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8 9)\n8 - 3 = 5 (left: 5 8 9)\nInput: 3 6 10 12",
                "10 - 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8 9)\n6 * 8 = 48 (left: 9 48)",
                "10 - 2 = 8 (left: 3 8 9)\n3 + 8 = 11 (left: 8 9 11)\n8 / 9 = 0.8888888888888888 (left: 0.8888888888888888 11)\n11 - 0.8888888888888888 = 10.111111111111112 (left: 10.111111111111112)"
            ],
            "values": [
                1.0,
                20.001,
                0.002,
                0.003,
                3.0,
                0.002,
                20.002,
                0.003,
                0.001,
                0.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.054637
    },
    "948": {
        "input": "1 2 3 13",
        "step_1": {
            "steps": [
                "3 * 2 = 6 (left: 1 6 13)",
                "13 - 1 = 12 (left: 2 3 12)",
                "13 - 3 = 10 (left: 1 2 10)",
                "13 - 3 = 10 (left: 1 2 10)",
                "1 + 2 = 3 (left: 3 3 13)",
                "3 * 13 = 39 (left: 1 2 39)",
                "Possible next steps:",
                "3 * 2 = 6 (left: 1 6 13)",
                "13 - 1 = 12 (left: 2 3 12)",
                "13 - 1 = 12 (left: 2 3 12)"
            ],
            "values": [
                1.002,
                2.001,
                3.0,
                2.001,
                1.001,
                0.003,
                0.003,
                1.002,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- 8",
                "1 <- 3",
                "2 <- 3",
                "3 <- 1",
                "4 <- 0",
                "5 <- 8",
                "6 <- 7",
                "7 <- 2",
                "8 <- 1",
                "9 <- 2"
            ],
            "resampled_steps": [
                "13 - 1 = 12 (left: 2 3 12)",
                "13 - 3 = 10 (left: 1 2 10)",
                "13 - 3 = 10 (left: 1 2 10)",
                "13 - 1 = 12 (left: 2 3 12)",
                "3 * 2 = 6 (left: 1 6 13)",
                "13 - 1 = 12 (left: 2 3 12)",
                "3 * 2 = 6 (left: 1 6 13)",
                "13 - 3 = 10 (left: 1 2 10)",
                "13 - 1 = 12 (left: 2 3 12)",
                "13 - 3 = 10 (left: 1 2 10)"
            ]
        },
        "step_2": {
            "steps": [
                "13 - 1 = 12 (left: 2 3 12)\n12 - 2 = 10 (left: 3 10)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)",
                "13 - 3 = 10 (left: 1 2 10)\n2 * 1 = 2 (left: 2 10)",
                "13 - 1 = 12 (left: 2 3 12)\n12 / 2 = 6 (left: 6 6)",
                "3 * 2 = 6 (left: 1 6 13)\n4 + 9 = 13 (left: 13 2 5)",
                "13 - 1 = 12 (left: 2 3 12)\n3 + 2 = 5 (left: 5 12)",
                "3 * 2 = 6 (left: 1 6 13)\n6 + 1 = 7 (left: 7 13)",
                "13 - 3 = 10 (left: 1 2 10)\n10 - 1 = 9 (left: 2 9)",
                "13 - 1 = 12 (left: 2 3 12)\n2 * 3 = 6 (left: 6 12)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)"
            ],
            "values": [
                0.003,
                22.0,
                3.0,
                0.003,
                1.002,
                0.002,
                0.001,
                0.0,
                0.003,
                0.0
            ],
            "resampled": [
                "0 <- 1",
                "1 <- 1",
                "2 <- 1",
                "3 <- 1",
                "4 <- 1",
                "5 <- 1",
                "6 <- 1",
                "7 <- 1",
                "8 <- 1",
                "9 <- 1"
            ],
            "resampled_steps": [
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)"
            ]
        },
        "step_3": {
            "steps": [
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n2 + 10 = 12 (left: 12)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n10 / 2 = 5 (left: 5)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n2 + 10 = 12",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n2 + 10 = 12 (left: 12)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n10 - 2 = 8 (left: 8 10)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n2 * 10 = 20 (left: 20)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n2 + 10 = 12 (left: 12) ",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n10 - 2 = 8 (left: 8)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n2 + 10 = 12 (left: 12)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n2 * 10 = 20 (left: 20)"
            ],
            "values": [
                0.002,
                0.003,
                0.003,
                0.003,
                20.0,
                0.003,
                0.002,
                0.002,
                0.003,
                0.001
            ],
            "resampled": [
                "0 <- 4",
                "1 <- 4",
                "2 <- 4",
                "3 <- 4",
                "4 <- 4",
                "5 <- 4",
                "6 <- 4",
                "7 <- 4",
                "8 <- 4",
                "9 <- 4"
            ],
            "resampled_steps": [
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n10 - 2 = 8 (left: 8 10)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n10 - 2 = 8 (left: 8 10)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n10 - 2 = 8 (left: 8 10)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n10 - 2 = 8 (left: 8 10)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n10 - 2 = 8 (left: 8 10)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n10 - 2 = 8 (left: 8 10)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n10 - 2 = 8 (left: 8 10)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n10 - 2 = 8 (left: 8 10)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n10 - 2 = 8 (left: 8 10)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n10 - 2 = 8 (left: 8 10)"
            ]
        },
        "step_4": {
            "steps": [
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n10 - 2 = 8 (left: 8 10)\n8 / 10 = 0.8 (left: 0.8)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n10 - 2 = 8 (left: 8 10)\nInput: 4 8 14",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n10 - 2 = 8 (left: 8 10)\n8 * 10 = 80 (left: 80)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n10 - 2 = 8 (left: 8 10)\n8 / 10 = 0.8 (left: 0.8)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n10 - 2 = 8 (left: 8 10)\n8 + 10 = 18 (left: 18)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n10 - 2 = 8 (left: 8 10)\n10 - 8 = 2 (left: 2)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n10 - 2 = 8 (left: 8 10)\n14 / 6 = 2.33 (left: 2.33 8)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n10 - 2 = 8 (left: 8 10)\n10 - 8 = 2 (left: 2)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n10 - 2 = 8 (left: 8 10)\n10 - 8 = 2 (left: 2)",
                "13 - 3 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n10 - 2 = 8 (left: 8 10)\n8 + 10 = 18 (left: 18)"
            ],
            "values": [
                0.001,
                0.003,
                0.002,
                0.0,
                40.0,
                0.001,
                1.001,
                0.002,
                0.002,
                40.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.0747815
    },
    "949": {
        "input": "1 6 6 6",
        "step_1": {
            "steps": [
                "1 + 6 = 7 (left: 6 6 7)",
                "6 / 1 = 6 (left: 6 6 6)",
                "6 - 1 = 5 (left: 6 5 6)",
                "6 - 1 = 5 (left: 5 6 6)",
                "6 * 1 = 6 (left: 6 6 6)",
                "1 + 6 = 7 (left: 6 6 7)",
                "6 / 1 = 6 (left: 6 6 6)",
                "6 - 1 = 5 (left: 1 5 6)",
                "6 - 1 = 5 (left: 5 6 6)",
                "6 + 6 = 12 (left: 6 12 6)"
            ],
            "values": [
                3.0,
                21.001,
                40.001,
                1.0,
                2.001,
                2.001,
                1.0,
                22.0,
                22.0,
                41.0
            ],
            "resampled": [
                "0 <- 5",
                "1 <- 8",
                "2 <- 7",
                "3 <- 8",
                "4 <- 9",
                "5 <- 1",
                "6 <- 7",
                "7 <- 1",
                "8 <- 8",
                "9 <- 9"
            ],
            "resampled_steps": [
                "1 + 6 = 7 (left: 6 6 7)",
                "6 - 1 = 5 (left: 5 6 6)",
                "6 - 1 = 5 (left: 1 5 6)",
                "6 - 1 = 5 (left: 5 6 6)",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 / 1 = 6 (left: 6 6 6)",
                "6 - 1 = 5 (left: 1 5 6)",
                "6 / 1 = 6 (left: 6 6 6)",
                "6 - 1 = 5 (left: 5 6 6)",
                "6 + 6 = 12 (left: 6 12 6)"
            ]
        },
        "step_2": {
            "steps": [
                "1 + 6 = 7 (left: 6 6 7)\n6 + 6 = 12 (left: 7 12)",
                "6 - 1 = 5 (left: 5 6 6)\n5 + 6 = 11 (left: 6 11)",
                "6 - 1 = 5 (left: 1 5 6)\n1 / 5 = 0.2 (left: 0.2 6)",
                "6 - 1 = 5 (left: 5 6 6)\n7 - 3 = 4 (left: 4)",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 12 = 72 (left: 72 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 + 6 = 12 (left: 6 12)",
                "6 - 1 = 5 (left: 1 5 6)\n27 - 9 = 18 (left: 3 18)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)",
                "6 - 1 = 5 (left: 5 6 6)\n6 / 5 = 1.2 (left: 1.2 6)",
                "6 + 6 = 12 (left: 6 12 6)\n12 - 6 = 6 (left: 6 6)"
            ],
            "values": [
                0.003,
                0.001,
                0.003,
                0.002,
                22.0,
                0.002,
                0.003,
                60.0,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 7",
                "1 <- 7",
                "2 <- 7",
                "3 <- 7",
                "4 <- 7",
                "5 <- 7",
                "6 <- 7",
                "7 <- 7",
                "8 <- 7",
                "9 <- 7"
            ],
            "resampled_steps": [
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)"
            ]
        },
        "step_3": {
            "steps": [
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n0 + 6 = 6 (left: 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n6 / 0 = undefined (left: 0 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n0 + 6 = 6 (left: 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n4 * 3 = 12 (left: 3 9)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n0 + 6 = 6 (left: 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n0 * 6 = 0 (left: 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\nPossible next steps:",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n6 / 0 = undefined (left: 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n5 - 5 = 0 (left: 0 5 5)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n0 * 6 = 0 (left: 6)"
            ],
            "values": [
                0.002,
                40.001,
                0.002,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                41.0,
                0.002
            ],
            "resampled": [
                "0 <- 8",
                "1 <- 8",
                "2 <- 8",
                "3 <- 8",
                "4 <- 1",
                "5 <- 1",
                "6 <- 1",
                "7 <- 8",
                "8 <- 8",
                "9 <- 8"
            ],
            "resampled_steps": [
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n5 - 5 = 0 (left: 0 5 5)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n5 - 5 = 0 (left: 0 5 5)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n5 - 5 = 0 (left: 0 5 5)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n5 - 5 = 0 (left: 0 5 5)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n6 / 0 = undefined (left: 0 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n6 / 0 = undefined (left: 0 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n6 / 0 = undefined (left: 0 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n5 - 5 = 0 (left: 0 5 5)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n5 - 5 = 0 (left: 0 5 5)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n5 - 5 = 0 (left: 0 5 5)"
            ]
        },
        "step_4": {
            "steps": [
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n5 - 5 = 0 (left: 0 5 5)\nInput: 4 2 8",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n5 - 5 = 0 (left: 0 5 5)\nInput: 3 3 3 3",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n5 - 5 = 0 (left: 0 5 5)\n5 / 5 = 1 (left: 0 5)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n5 - 5 = 0 (left: 0 5 5)\n2 + 0 = 2 (left: 0 3)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n6 / 0 = undefined (left: 0 6)\n6 - 0 = 6 (left: 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n6 / 0 = undefined (left: 0 6)\n0 + 6 = 6 (left: 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n6 / 0 = undefined (left: 0 6)\n6 / 0 = undefined (left: 6)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n5 - 5 = 0 (left: 0 5 5)\n7 * 3 = 21 (left: 7 21)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n5 - 5 = 0 (left: 0 5 5)\n5 - 0 = 5 (left: 5 5)",
                "6 / 1 = 6 (left: 6 6 6)\n6 - 6 = 0 (left: 0 6)\n5 - 5 = 0 (left: 0 5 5)\n5 - 0 = 5 (left: 5 5)"
            ],
            "values": [
                0.003,
                0.003,
                20.0,
                21.0,
                0.002,
                0.002,
                0.001,
                20.002,
                0.002,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.0959495000000001
    }
}