{
    "0": {
        "puzzle": "1 1 4 6",
        "Step 0": {
            "steps": [
                "6 - 4 = 2 (left: 1 2 6)",
                "1 * 1 = 1 (left: 1 4 6)",
                "4 + 1 = 5 (left: 1 5 6)",
                "4 + 1 = 5 (left: 1 5 6)",
                "6 - 4 = 2 (left: 1 2 6)",
                "6 - 1 = 5 (left: 1 4 5)",
                "4 + 1 = 5 (left: 1 5 6)",
                "6 - 4 = 2 (left: 1 2 6)",
                "4 + 1 = 5 (left: 5 4 ",
                "6 - 4 = 2 (left: 1 2 6)"
            ],
            "Evaluation": [
                1.002,
                41.0,
                0.002,
                41.0,
                0.003,
                21.0,
                22.0,
                1.002,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.8",
                "2 <- 0.3",
                "3 <- INIT",
                "4 <- 0.6",
                "5 <- 0.6",
                "6 <- 0.3",
                "7 <- 0.8",
                "8 <- 0.5",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 4 = 4 (left: 4 4 6)",
                "4 + 1 = 5 (left: 5 4  || 4 / 5 =",
                "4 + 1 = 5 (left: 1 5 6) || 5 * 1 = 5 (left: 5 6)",
                "6 - 4 = 2 (left: 1 2 6)",
                "4 + 1 = 5 (left: 1 5 6) || 5 * 1 = 5 (left: 5 6)",
                "4 + 1 = 5 (left: 1 5 6) || Input: 3 9 27",
                "4 + 1 = 5 (left: 1 5 6) || 1 * 5 = 5 (left: 5 6)",
                "4 + 1 = 5 (left: 5 4  || 4 + 5 = 9 (left: 9)",
                "6 - 1 = 5 (left: 1 4 5) || 5 - 1 = 4 (left: 4 4)",
                "4 + 1 = 5 (left: 1 5 6) || 5 * 1 = 5 (left: 5 6)"
            ],
            "Evaluation": [
                3.0,
                0.003,
                0.003,
                1.002,
                1.001,
                0.003,
                1.002,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.3",
                "2 <- 0.3",
                "3 <- 0.3",
                "4 <- 0.1",
                "5 <- INIT",
                "6 <- 0.6",
                "7 <- 0.5",
                "8 <- 0.3",
                "9 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6)",
                "4 + 1 = 5 (left: 1 5 6) || 5 * 1 = 5 (left: 5 6)",
                "4 + 1 = 5 (left: 1 5 6) || 3 + 9 = 12 (left: 12",
                "4 + 1 = 5 (left: 1 5 6) || 1 * 5 = 5 (left: 5 6)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "6 - 1 = 5 (left: 1 4 5)",
                "4 + 1 = 5 (left: 1 5 6) || 1 * 5 = 5 (left: 5 6)",
                "6 - 1 = 5 (left: 1 4 5) || 5 * 1 = 5 (left: 4 5)",
                "4 + 1 = 5 (left: 1 5 6) || 1 * 5 = 5 (left: 5 6)",
                "4 + 1 = 5 (left: 1 5 6) || 5 * 1 = 5 (left: 5 6)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                0.002,
                2.0,
                2.001,
                0.002,
                3.0,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.8",
                "2 <- 0.3",
                "3 <- 0.3",
                "4 <- 0.5",
                "5 <- 0.1",
                "6 <- 0.3",
                "7 <- INIT",
                "8 <- 0.8",
                "9 <- 0.8"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6)",
                "4 + 1 = 5 (left: 5 4  || 4 / 5 =",
                "4 + 1 = 5 (left: 1 5 6) || 5 * 1 = 5 (left: 5 6)",
                "4 + 1 = 5 (left: 1 5 6) || 6 / 1 = 6 (left: 6 6)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 4 5)",
                "1 * 1 = 1 (left: 1 4 6) || 6 * 4 = ",
                "4 + 1 = 5 (left: 1 5 6) || 1 * 5 = 5 (left: 5 6)",
                "6 / 1 = 6 (left: ",
                "4 + 1 = 5 (left: 5 4  || 5 * 4 = 20 (left: 20)",
                "4 + 1 = 5 (left: 5 4  || 10 + 3 = 13 (left: 13)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.0,
                40.001,
                2.001,
                40.001,
                0.001,
                0.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 3.5",
                "2 <- 3.4",
                "3 <- 2.7",
                "4 <- 3.3",
                "5 <- INIT",
                "6 <- 3.4",
                "7 <- INIT",
                "8 <- 0.3",
                "9 <- 3.3"
            ]
        },
        "Step 4": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 6) || 6 / 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)",
                "1 * 1 = 1 (left: 1 4 6) || 6 * 4 =  || 6 * 4 = 24",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 4 5) || 5 / 4 = 1.25 (left: 1.25)",
                "6 - 1 = 5 (left: 1 4 5) || 5 * 1 = 5 (left: 4 5) || 4 * 5 = 20 (left: 20)",
                "4 + 1 = 5 (left: 1 5 6) || 6 / 1 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "4 + 1 = 5 (left: 1 4 6)",
                "6 - 1 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 4 5) || Input: 3 9 27",
                "6 - 1 = 5 (left: 1 4 ",
                "4 + 1 = 5 (left: 1 5 6) || 6 - 1 = 5 (left: 5 6)",
                "4 + 1 = 5 (left: 1 5 6) || 6 / 1 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)"
            ],
            "Evaluation": [
                40.0,
                60.0,
                0.002,
                0.002,
                0.003,
                60.0,
                0.003,
                1.001,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 3.3",
                "2 <- 3.0",
                "3 <- 0.6",
                "4 <- 3.3",
                "5 <- 4.5",
                "6 <- 4.5",
                "7 <- 0.1",
                "8 <- 4.1",
                "9 <- 0.1"
            ]
        },
        "Step 5": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 6) || 6 / 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "4 + 1 = 5 (left: 1 5 6) || 6 / 1 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 9 / 3 = 3 (left: 3 5)",
                "4 + 1 = 5 (left: 1 5 6) || 6 / 1 = 6 (left: 6 6)",
                "4 + 1 = 5 (left: 1 5 6) || 6 / 1 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "4 + 1 = 5 (left: 1 4 6) || 6 - 1 = ",
                "4 + 1 = 5 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6)",
                "1 * 1 = 1 (left: 1 4 6) || 6 * 4 =  || 6 * 4 = 24 || 6 - 4 = 2 (left: 2 = 24)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                1.001,
                0.003,
                0.003,
                0.003,
                60.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 5.9",
                "1 <- 5.9",
                "2 <- 3.5",
                "3 <- 3.5",
                "4 <- 3.0",
                "5 <- 0.3",
                "6 <- 3.3",
                "7 <- 5.9",
                "8 <- 4.1",
                "9 <- 3.3"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "1 * 1 = 1 (left: 1 4 6) || 6 * 4 =  || 6 * 4 = 24",
                "1 * 1 = 1 (left: 1 4 6) || 6 * 4 =  || 6 * 4 = 24",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "4 + 1 = 5 (left: 1 5 6) || 5 / 1 = 5 (left:",
                "4 + 1 = 5 (left: 1 5 6) || 6 / 1 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 4 6) || 6 * 4 =  || 6 * 4 = 24 || 6 - 4 = 2 (left: 2 24)",
                "4 + 1 = 5 (left: 1 5 6) || 6 / 1 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                60.0,
                60.0,
                0.002,
                0.0,
                0.003,
                60.0,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 6.3",
                "2 <- 4.0",
                "3 <- 3.5",
                "4 <- 5.7",
                "5 <- INIT",
                "6 <- 4.5",
                "7 <- 6.7",
                "8 <- 6.3",
                "9 <- 0.8"
            ]
        },
        "Step 7": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 6) || 6 / 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)",
                "1 * 1 = 1 (left: 1 4 6) || 6 * 4 =  || 6 * 4 = 24 || 6 * 4 = 24 (left: 24 = 24)",
                "4 + 1 = 5 (left: 1 5 6) || 6 / 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || None, since there is only one number given.",
                "1 * 1 = 1 (left: 1 4 6) || 6 * 4 =  || 6 * 4 = 24",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 4 - 6 = -2 (left: -2)",
                "6 - 1 = 5 (left: 1 4 5)",
                "4 + 1 = 5 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 1 * (1 * 4 * 6) = 24",
                "1 * 1 = 1 (left: 1 4 6) || 6 * 4 =  || 6 * 4 = 24 || 6 - 4 = 2 (left: 2 = 24)",
                "4 + 1 = 5 (left: 5 4  || 4 * 5 = 20 (left: 20)"
            ]
        },
        "Input": "1 1 4 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "1": {
        "puzzle": "1 1 11 11",
        "Step 0": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 11 11)",
                "1 - 1 = 0 (left: 0 11 11)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 - 1 = 10 (left: 1 10 11)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 - 1 = 10 (left: 1 10 11)",
                "11 / 1 = 11 (left: 1 11 ",
                "11 + 1 = 12 (left: 1 11 12)"
            ],
            "Evaluation": [
                20.002,
                1.002,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.001,
                21.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.0",
                "2 <- 0.9",
                "3 <- 0.9",
                "4 <- INIT",
                "5 <- 0.0",
                "6 <- 0.0",
                "7 <- INIT",
                "8 <- 0.0",
                "9 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 1 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || Input: 3 7 11",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 11 = 1 (left: 1 1)",
                "11 / 1 = 11 (left: 1 11 ",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 11 = 1 (left: 1 12)"
            ],
            "Evaluation": [
                20.002,
                20.002,
                1.002,
                0.002,
                0.002,
                0.003,
                0.003,
                1.0,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.0",
                "2 <- 1.1",
                "3 <- 1.7",
                "4 <- 0.9",
                "5 <- 1.0",
                "6 <- INIT",
                "7 <- 1.1",
                "8 <- 0.9",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 12 - 1 = 11 (left: 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 1 = 11 (left: 1 11  || 11 / 1 = 11 (left: 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 * 1 = 11 (left: 11 12)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 10 11 11)",
                "11 - 1 = 10 (left: 1 10 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "11 + 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 - 1 = 10 (left: 1 11 10)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                1.002,
                1.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 1.0",
                "2 <- 0.0",
                "3 <- 1.1",
                "4 <- 2.6",
                "5 <- 1.7",
                "6 <- 1.0",
                "7 <- INIT",
                "8 <- 0.9",
                "9 <- 1.0"
            ]
        },
        "Step 3": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10)",
                "11 + 1 = 12 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "11 - 1 = 10 (left: 1 10 11) || 1 * 10 = 10 (left: 10 11)",
                "11 / 1 = 11 (left: 1 11  || 11 * 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 10 11 11)",
                "11 / 1 = 11 (left: 1 11 ",
                "11 + 1 = 12 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.002,
                0.003,
                0.002,
                0.001,
                0.003,
                0.002,
                0.003,
                40.0
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 3.1",
                "2 <- 1.0",
                "3 <- 1.1",
                "4 <- 3.1",
                "5 <- 3.9",
                "6 <- 3.1",
                "7 <- 3.1",
                "8 <- 3.9",
                "9 <- 2.6"
            ]
        },
        "Step 4": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 11 11) || 11 * 1 = 11 (left: 11 11)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 10 11) || 1 * 10 = 10 (left: 10 11)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                1.002,
                20.002,
                0.002,
                0.001,
                0.002,
                0.002,
                0.002,
                2.001
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 3.9",
                "2 <- 4.3",
                "3 <- 1.1",
                "4 <- 3.9",
                "5 <- 3.9",
                "6 <- 3.9",
                "7 <- 3.1",
                "8 <- 3.1",
                "9 <- 2.5"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11) || 11 / 1 = 11 (left: 11 11)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2 24)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 3 + 6 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 10 11 11) || 11 * 10 = 110 (left: 11 11 110)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                40.001,
                0.001,
                0.002,
                0.002,
                0.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 3.9",
                "2 <- 3.9",
                "3 <- 0.9",
                "4 <- 5.3",
                "5 <- 0.9",
                "6 <- 0.9",
                "7 <- 5.3",
                "8 <- 3.1",
                "9 <- 3.9"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 - 10 =",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 + 1 = 12 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 - 12 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || Input: 3 7 10",
                "11 + 1 = 12 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || Input: 3 5 7",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 1 / 10 = 0.1 (left: 0.1)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.002,
                60.0,
                0.003,
                0.002,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 6.7",
                "1 <- 1.1",
                "2 <- 5.3",
                "3 <- 5.3",
                "4 <- 6.7",
                "5 <- 5.3",
                "6 <- 3.1",
                "7 <- 5.3",
                "8 <- 6.7",
                "9 <- 6.7"
            ]
        },
        "Step 7": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 24 / 0 = undefined (left: 0 24)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 - 12 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 - 12 = 12 (left: 12)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || Input: 3 9 27",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 + 12 = 36 (left: 24 36)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 24 / 0 = undefined (left: 0 24)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 0 - 24 = -24 (left: -24)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                60.0,
                0.002,
                60.0,
                60.0,
                0.003,
                1.002,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 6.7",
                "1 <- 7.8",
                "2 <- 3.1",
                "3 <- 7.5",
                "4 <- 6.7",
                "5 <- 7.0",
                "6 <- 7.5",
                "7 <- 7.0",
                "8 <- 7.2",
                "9 <- 7.0"
            ]
        },
        "Step 8": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 0 * 24 = 0 (left: 0 24)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 24 / 0 = undefined (left: 0 24) || 0 * 24 = 0 (left: 0 24)",
                "1 * 1 = 1 (left: 1 11 11) || 11 - 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || Input: 5 5 5 5",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 24 / 0 = undefined (left: 0 24) || 24 * 0 = 0 (left: 0)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 24 / 0 = undefined (cannot divide by zero)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 24 / 0 = undefined (left: 0 24) || 24 / 0 = undefined (cannot divide by zero)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 - 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 24 / 0 = undefined (left: 0 24) || 24 * 0 = 0 (left: 0)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.003,
                0.003,
                60.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 8.1",
                "1 <- 7.0",
                "2 <- 8.0",
                "3 <- 7.8",
                "4 <- 7.8",
                "5 <- 6.7",
                "6 <- 7.8",
                "7 <- 8.0",
                "8 <- 5.3",
                "9 <- 7.8"
            ]
        },
        "Step 9": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 24 / 0 = undefined (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 24 / 0 = undefined",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 24 / 0 = undefined (left: 0 24) || 24 - 0 = 24 (left: 24)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 24 / 0 is undefined.",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 24 / 0 = undefined (left: 0 24) || 24 / 0 is undefined",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 24 / 0 = undefined (left: 0 24) || 5 + 7 = 12 (left: 12 2)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 24 / 0 = undefined (left: 0 24) || Input: 3 9",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || Input: 5 3",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2 24)",
                "11 + 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 24 / 0 = undefined (left: 0 24) || 24 - 24 = 0 (left: 0)"
            ]
        },
        "Input": "1 1 11 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "2": {
        "puzzle": "1 1 3 8",
        "Step 0": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8)",
                "1 * 1 = 1 (left: 1 3 8)",
                "8 - 3 = 5 (left: 1 3 5)",
                "3 + 1 = 4 (left: 1 4 8)",
                "8 - 3 = 5 (left: 1 1 5)",
                "8 - 1 = 7 (left: 1 3 7)",
                "8 - 3 = 5 (left: 1 1 5)",
                "8 - 3 = 5 (left: 1 5 8)",
                "8 - 1 = 7 (left: 1 3 ",
                "3 * 1 = 3 (left: 1 3 8)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                1.002,
                0.003,
                2.001,
                2.001,
                3.0,
                1.002,
                0.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 0.9",
                "2 <- 0.0",
                "3 <- 0.1",
                "4 <- 0.0",
                "5 <- 0.9",
                "6 <- 0.1",
                "7 <- 0.1",
                "8 <- INIT",
                "9 <- 0.9"
            ]
        },
        "Step 1": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 1 3 8) || 3 - 1 = 2 (left: 2 8)",
                "3 * 1 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "1 * 1 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5)",
                "3 * 1 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 1 3 8) || 3 / 1 = 3 (left:",
                "1 * 1 = 1 (left: 1 3 8) || 8 / 3 = 2.66667 (left: 1 2.66667)",
                "1 * 1 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5)",
                "8 - 1 = 7 (left: 1 3 7)",
                "3 * 1 = 3 (left: 1 3 8) || 3 - 1 = 2 (left: 2 8)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                60.0,
                40.0,
                60.0,
                0.0,
                2.001,
                0.002,
                2.0,
                0.002
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 0.9",
                "2 <- INIT",
                "3 <- 1.4",
                "4 <- 0.1",
                "5 <- 0.0",
                "6 <- 1.0",
                "7 <- 1.4",
                "8 <- 1.4",
                "9 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24)",
                "3 * 1 = 3 (left: 1 3 8) || 3 - 1 = 2 (left: 2 8)",
                "3 * 1 = 3 (left: 3 1 8)",
                "3 * 1 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 * 1 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || Input: 4 10",
                "3 * 1 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || Input: 4 5 10",
                "3 * 1 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)"
            ],
            "Evaluation": [
                40.0,
                1.0,
                60.0,
                0.0,
                60.0,
                60.0,
                60.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 1.2",
                "2 <- 2.2",
                "3 <- 0.1",
                "4 <- 1.3",
                "5 <- 2.5",
                "6 <- 1.4",
                "7 <- 2.2",
                "8 <- 1.2",
                "9 <- 0.1"
            ]
        },
        "Step 3": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24)",
                "3 * 1 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 1 = 3 (left: 3 1 8) || 8 / 3 = 2 (left: 2 3)",
                "1 * 1 = 1 (left: 1 3 8) || 8 - 1 = 7 (left: 1 7)",
                "1 * 1 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 5 - 1 = 4 (left: 4)",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 / 8 = 0.375 (left: 0.375)",
                "3 * 1 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 * 1 = 3 (left: 3 1 8) || 8 - 1 = 7 (left: 3 7)",
                "3 * 1 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "1 * 1 = 1 (left: 1 3 8) || 3 + 1 = 4 (left: 4 8)"
            ],
            "Evaluation": [
                60.0,
                0.001,
                0.003,
                0.001,
                0.002,
                0.003,
                60.0,
                0.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 0.9",
                "2 <- 2.0",
                "3 <- 2.5",
                "4 <- 2.0",
                "5 <- 1.2",
                "6 <- 3.6",
                "7 <- 2.2",
                "8 <- 2.5",
                "9 <- 1.2"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 1 = 3 (left: 1 3 8) || 1 * 8 = 8 (left: 8 3)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "3 * 1 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 + 1 = 25 (left: 25)",
                "3 * 1 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 5 + 7 = 12 (left: 12)",
                "3 * 1 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 1) * (3 * 8) = 24",
                "3 * 1 = 3 (left: 3 1 8) || 1 * 8 = 8 (left: 3 8)",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 * 1 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 4 + 6 = 10 (left: 10 7)"
            ],
            "Evaluation": [
                0.001,
                60.0,
                60.0,
                0.0,
                40.0,
                0.003,
                0.003,
                60.0,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- INIT",
                "2 <- 0.9",
                "3 <- 2.4",
                "4 <- 2.4",
                "5 <- 4.7",
                "6 <- 1.3",
                "7 <- 4.7",
                "8 <- 1.2",
                "9 <- 2.5"
            ]
        },
        "Step 5": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (3 * 1) * (8 * 1) = 24",
                "3 - 1 = 2 (left: 1 2 8)",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8)",
                "1 * 1 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || Input: 5 10",
                "3 * 1 = 3 (left: 3 1 8) || 1 * 8 = 8 (left: 3 8) || 5 + 9 = 14 (left: 14 3)",
                "1 * 1 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "3 * 1 = 3 (left: 3 1 8) || 1 * 8 = 8 (left: 3 8) || Input: 4 7",
                "3 * 1 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 * 1 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)"
            ]
        },
        "Input": "1 1 3 8",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "3": {
        "puzzle": "1 1 1 8",
        "Step 0": {
            "steps": [
                "8 - 1 = 7 (left: 1 1 7)",
                "1 * 1 = 1 (left: 1 1 8)",
                "1 * 1 = 1 (left: 1 1 8)",
                "1 * 1 = 1 (left: 1 1 8)",
                "8 - 1 = 7 (left: 1 1 7)",
                "8 / 1 = 8 (left: 1 1 8)",
                "8 / 1 = 8 (left: 1 1 8)",
                "8 - 1 = 7 (left: 1 1 7)",
                "1 / 1 = 1 (left: 1 1 ",
                "1 / 1 = 1 (left: 1 1 8)"
            ],
            "Evaluation": [
                2.001,
                1.001,
                1.002,
                1.001,
                2.001,
                22.0,
                1.002,
                3.0,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.9",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.5",
                "5 <- 0.5",
                "6 <- 0.5",
                "7 <- 0.5",
                "8 <- 0.7",
                "9 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9)",
                "1 / 1 = 1 (left: 1 1 8) || 1 - 1 = 0 (left: 0 8)",
                "1 * 1 = 1 (left: 1 1 8)",
                "1 / 1 = 1 (left: 1 1 8)",
                "8 / 1 = 8 (left: 1 1 8) || Input: 3 3 8",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7)",
                "8 / 1 = 8 (left: 1 1 8) || 1 / 8 = 0.125 (left: 0.125)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                2.0,
                0.002,
                0.003,
                20.0,
                21.0,
                0.002,
                40.0,
                60.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.6",
                "2 <- 1.9",
                "3 <- 1.9",
                "4 <- 1.9",
                "5 <- 1.9",
                "6 <- 1.9",
                "7 <- 1.6",
                "8 <- 1.0",
                "9 <- 1.9"
            ]
        },
        "Step 2": {
            "steps": [
                "1 / 1 = 1 (left: 1 1 8)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9 9)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 7 * 1 = 7 (left: 7)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                1.002,
                0.0,
                0.002,
                0.002,
                0.001,
                0.001,
                0.002,
                0.001,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 1.0",
                "2 <- 1.8",
                "3 <- 1.0",
                "4 <- 0.3",
                "5 <- 1.9",
                "6 <- 1.0",
                "7 <- 1.5",
                "8 <- 1.9",
                "9 <- 1.5"
            ]
        },
        "Step 3": {
            "steps": [
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 1 * 7 = 7 (left: 7)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 1 8) || 1 - 1 = 0 (left: 0 8)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.003,
                0.001,
                41.0,
                0.002,
                0.002,
                0.0,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 1.9",
                "2 <- 1.5",
                "3 <- 1.0",
                "4 <- 1.0",
                "5 <- 0.4",
                "6 <- 0.5",
                "7 <- 2.0",
                "8 <- 3.4",
                "9 <- 1.0"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 8) || 1 - 1 = 0 (left: 0 8) || 0 * 8 = 0 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 1 + 9 = 10 (left: 10)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7)",
                "1 / 1 = 1 (left: 1 1 8) || 1 * 8 = 8 (left: 8 8)",
                "1 * 1 = 1 (left: 1 1 8) || 1 - 1 = 0 (left: 0 8) || 8 - 0 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 * 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.001,
                0.002,
                0.002,
                0.003,
                40.0,
                1.002,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 0.5",
                "2 <- 1.5",
                "3 <- 1.8",
                "4 <- 1.5",
                "5 <- 3.4",
                "6 <- 1.8",
                "7 <- 1.0",
                "8 <- 4.6",
                "9 <- 4.6"
            ]
        },
        "Step 5": {
            "steps": [
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "8 / 1 = 8 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "1 * 1 = 1 (left: 1 1 8) || 1 - 1 = 0 (left: 0 8) || 5 + 3 = 8 (left: 8)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 1 * 7 = 7 (left: 7)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 7 * 1 = 7 (left: 7)"
            ],
            "Evaluation": [
                0.002,
                21.001,
                0.001,
                0.003,
                0.001,
                0.003,
                0.001,
                0.003,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 1.0",
                "2 <- 0.5",
                "3 <- 1.9",
                "4 <- 1.9",
                "5 <- 1.5",
                "6 <- INIT",
                "7 <- 4.6",
                "8 <- 1.9",
                "9 <- 1.0"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 8) || 1 - 1 = 0 (left: 0 8) || 8 - 0 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 3 + 5 = 8 (left: 8 11)",
                "1 / 1 = 1 (left: 1 1 8)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 1 * 7 = 7 (left: 7)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                60.0,
                0.002,
                0.002,
                2.001,
                1.002,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 6.2",
                "2 <- 4.6",
                "3 <- 1.5",
                "4 <- 1.5",
                "5 <- 6.2",
                "6 <- 4.6",
                "7 <- 3.4",
                "8 <- 1.0",
                "9 <- 1.0"
            ]
        },
        "Step 7": {
            "steps": [
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 1 * 7 = 7 (left: 7)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "1 * 1 = 1 (left: 1 1 8) || 1 - 1 = 0 (left: 0 8) || 8 / 0 = undefined (left: 8)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 4 + 6 = 10 (left: 10 2)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                0.001,
                0.001,
                0.001,
                0.001,
                0.003,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 6.2",
                "2 <- 5.1",
                "3 <- 6.2",
                "4 <- 0.5",
                "5 <- 1.8",
                "6 <- 4.6",
                "7 <- 1.8",
                "8 <- 1.6",
                "9 <- 4.6"
            ]
        },
        "Step 8": {
            "steps": [
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8) || 8 / 1 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8) || 1 - 1 = 0 (left: 0 8)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 1 * 7 = 7 (left: 7)",
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 7 - 7 = 0 (left: 0)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.002,
                0.003,
                1.0,
                0.003,
                0.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 4.6",
                "2 <- 6.2",
                "3 <- 6.2",
                "4 <- 6.2",
                "5 <- 1.9",
                "6 <- 4.6",
                "7 <- 3.4",
                "8 <- 1.0",
                "9 <- 6.2"
            ]
        },
        "Step 9": {
            "steps": [
                "8 - 1 = 7 (left: 1 1 7) || 7 - 1 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "8 / 1 = 8 (left: 1 1 8) || 8 - 1 = 7 (left: 1 7) || 1 + 7 = 8",
                "1 * 1 = 1 (left: 1 1 8) || 1 - 1 = 0 (left: 0 8) || 8 - 0 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "8 / 1 = 8 (left: 1 1 8) || 1 + 8 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)"
            ]
        },
        "Input": "1 1 1 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "4": {
        "puzzle": "6 6 6 6",
        "Step 0": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36)",
                "6 / 6 = 1 (left: 6 1 6 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 / 6 = 1 (left: 1 6 6)",
                "6 * 6 = 36 (left: 6 6 36)"
            ],
            "Evaluation": [
                41.0,
                21.0,
                20.002,
                41.0,
                60.0,
                40.001,
                20.002,
                41.0,
                41.0,
                60.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.8",
                "2 <- 0.0",
                "3 <- 0.9",
                "4 <- 0.1",
                "5 <- 0.4",
                "6 <- 0.5",
                "7 <- INIT",
                "8 <- 0.4",
                "9 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "6 / 6 = 1 (left: 6 6 1)",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 36)",
                "6 / 6 = 1 (left: 6 1 6 6) || 6 - 1 = 5 (left: 5 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 36 - 6 = 30 (left:",
                "6 - 6 = 0 (left: 0 6 6) || Input: 3 3 6",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36)",
                "6 - 6 = 0 (left: 0 6 6) || Input: 2 3 6"
            ],
            "Evaluation": [
                2.001,
                1.001,
                20.002,
                40.0,
                21.0,
                0.0,
                0.003,
                60.0,
                40.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 0.7",
                "2 <- 1.3",
                "3 <- 0.0",
                "4 <- 1.7",
                "5 <- 0.9",
                "6 <- 0.7",
                "7 <- 1.7",
                "8 <- 0.3",
                "9 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "6 / 6 = 1 (left: 6 1 6 6) || 6 - 1 = 5 (left: 5 6 6) || 6 / 6 = 1 (left: 1)",
                "6 - 6 = 0 (left: 0 6 6) || 5 + 7 = 12 (left: 1 12",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 + 6 = 12 (left: 12 36)",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 6 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 36)",
                "6 - 6 = 0 (left: 0 6 6) || Input: 3 4 5",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 36) || 36 + 2 = 38"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                60.0,
                40.0,
                0.003,
                60.0,
                20.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.9",
                "2 <- 0.7",
                "3 <- 2.6",
                "4 <- 2.4",
                "5 <- 2.3",
                "6 <- 1.2",
                "7 <- 0.6",
                "8 <- 1.8",
                "9 <- 0.3"
            ]
        },
        "Step 3": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6)",
                "6 * 6 = 36 (left: 6 6 36) || Possible",
                "6 - 6 = 0 (left: 0 6 6) || 4 * 4 = 16 (left: 8 16)",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 6 = 36 (left: 36) || None - 36 is the final result.",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 - 0 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 3 * 9 = 27 (left: 27 5)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) ",
                "6 - 6 = 0 (left: 0 6 6) || Input: 3 5 7 9",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 + 0 = 36 (left: 36)",
                "6 - 6 = 0 (left: 0 6 6) || 6 - 0 = 6 (left: 6 6)"
            ],
            "Evaluation": [
                41.0,
                20.001,
                60.0,
                0.003,
                60.0,
                0.002,
                40.0,
                0.003,
                60.0,
                20.002
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 0.9",
                "2 <- 3.4",
                "3 <- 3.6",
                "4 <- 3.4",
                "5 <- 0.1",
                "6 <- 3.0",
                "7 <- 0.3",
                "8 <- 3.2",
                "9 <- 3.4"
            ]
        },
        "Step 4": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 0 * 36 = 0 (left: 0 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 + 6 = 12 (left: 12 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 - 0 = 36 (left: 36) || There are no possible next steps as there is only one number provided.",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)  || There are no possible operations to perform on the number 36.",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 - 0 = 36 (left: 36) || 36 / 6 = 6 (left: 6)",
                "6 / 6 = 1 (left: 6 1 6 6) || 1 * 6 = 6 (left: 6 6 6)",
                "6 + 6 = 12 (left: 6 12 6) || 6 * 12 = 72 (left: 72 6)",
                "6 - 6 = 0 (left: 0 6 6) || 6 + 6 = 12 (left: 0 12)",
                "6 - 6 = 0 (left: 0 6 6) || 4 * 4 = 16 (left: 8 16) || 16 - 8 = 8 (left: 8)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 - 0 = 36 (left: 36) || 36 / 2 = 18"
            ],
            "Evaluation": [
                20.001,
                20.001,
                0.003,
                0.003,
                0.003,
                0.002,
                60.0,
                40.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 2.6",
                "2 <- 4.7",
                "3 <- 3.2",
                "4 <- 0.7",
                "5 <- 1.3",
                "6 <- INIT",
                "7 <- 3.4",
                "8 <- 0.8",
                "9 <- 3.2"
            ]
        },
        "Step 5": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 + 6 = 12 (left: 12 36) || 12 * 36 = 432 (left: 432)",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "6 - 6 = 0 (left: 0 6 6) || 6 + 6 = 12 (left: 0 12) || 12 * 0 = 0 (left: 0)",
                "6 - 6 = 0 (left: 0 6 6) || 4 * 4 = 16 (left: 8 16) || 8 * 16 = 128 (left: 128)",
                "6 - 6 = 0 (left: 0 6 6) || 3 + 5 = 8 (left: 8 7)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 36) || There are no possible next steps with the input 36.",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 - 0 = 36 (left: 36) || 36 / 2 = 18",
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6)",
                "6 - 6 = 0 (left: 0 6 6) || 4 * 4 = 16 (left: 8 16) || 16 - 8 = 8 (left: 8)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                0.003,
                1.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 5.4",
                "2 <- 2.3",
                "3 <- 1.4",
                "4 <- 3.2",
                "5 <- 4.6",
                "6 <- 3.8",
                "7 <- 3.2",
                "8 <- 1.7",
                "9 <- 3.1"
            ]
        },
        "Step 6": {
            "steps": [
                "6 - 6 = 0 (left: 0 6 6) || 6 * 0 = 0 (left: 6 6)",
                "6 - 6 = 0 (left: 0 6 6) || 3 + 5 = 8 (left: 8 7) || 8 / 7 = 1.14285714286 (left: 1.14285714286)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "6 / 6 = 1 (left: 6 1 6 6) || 6 - 1 = 5 (left: 5 6 6) || 6 / 5 = 1.2 (left: 1.2 6)",
                "6 - 6 = 0 (left: 0 6 6) || 4 * 4 = 16 (left: 8 16) || 24 + 8 = 32 (left: 32)",
                "6 + 6 = 12 (left: 6 12 6) || 6 * 12 = 72 (left: 72 6) || 72 + 6 = 78 (left: 78)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 + 0 = 36 (left: 36) || 36 / 4 = 9 (left: 9)",
                "6 - 6 = 0 (left: 0 6 6) || 4 * 4 = 16 (left: 8 16) || 8 * 16 = 128 (left: 128)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36)",
                "6 * 6 = 36 (left: 6 6 36) || Possible || It seems like the input was cut off. Can you provide the full input so I can generate the possible next steps for you?"
            ],
            "Evaluation": [
                0.003,
                0.0,
                0.003,
                0.002,
                0.003,
                0.003,
                0.001,
                0.003,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 2.6",
                "2 <- 1.7",
                "3 <- 3.9",
                "4 <- 4.6",
                "5 <- 2.7",
                "6 <- 0.5",
                "7 <- 6.8",
                "8 <- 0.3",
                "9 <- 6.8"
            ]
        },
        "Step 7": {
            "steps": [
                "6 / 6 = 1 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36) || Possible",
                "6 - 6 = 0 (left: 0 6 6) || 6 - 0 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "6 + 6 = 12 (left: 6 12 6) || 6 * 12 = 72 (left: 72 6) || 72 / 6 = 12 (left: 12)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "6 - 6 = 0 (left: 0 6 6) || 6 * 0 = 0 (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "6 - 6 = 0 (left: 0 6 6) || 6 - 0 = 6 (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 - 36 = -35 (left: -35)"
            ],
            "Evaluation": [
                2.0,
                0.003,
                20.002,
                0.002,
                0.003,
                0.003,
                0.003,
                40.0,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 4.6",
                "2 <- 2.3",
                "3 <- 4.7",
                "4 <- 1.2",
                "5 <- 2.3",
                "6 <- 3.0",
                "7 <- 0.9",
                "8 <- 1.2",
                "9 <- 4.7"
            ]
        },
        "Step 8": {
            "steps": [
                "6 - 6 = 0 (left: 0 6 6) || 6 * 0 = 0 (left: 0 6)",
                "6 + 6 = 12 (left: 6 12 6) || 6 * 12 = 72 (left: 72 6) || 72 * 6 = 432 (left: 432)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "6 - 6 = 0 (left: 0 6 6) || 6 + 6 = 12 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "6 + 6 = 12 (left: 6 12 6) || 6 * 12 = 72 (left: 72 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 + 36 = 42 (left: 6 42)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "6 - 6 = 0 (left: 0 6 6) || 6 + 6 = 12 (left: 0 12) || 5 + 7 = 12 (left: 12 3)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.003,
                0.002,
                60.0,
                20.0,
                21.001,
                0.003,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- 3.6",
                "1 <- 3.0",
                "2 <- 7.7",
                "3 <- 4.6",
                "4 <- 2.4",
                "5 <- 3.6",
                "6 <- 6.8",
                "7 <- 3.8",
                "8 <- 1.8",
                "9 <- 1.4"
            ]
        },
        "Step 9": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)  || 36 + 8 = 44",
                "6 + 6 = 12 (left: 6 12 6) || 12 - 6 = 6 (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 8 = 4.5 (left: 8)",
                "6 + 6 = 12 (left: 6 12 6) || 6 * 12 = 72 (left: 72 6) || 72 / 6 = 12 (left: 12)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || Possible next steps:",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)  || 36 / 18 = 2 (left: 2)",
                "6 * 6 = 36 (left: 6 6 36) || 6 / 6 = 1 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || 36 + 0 = 36 (left: 36) || 36 * 1 = 36 (left: 1)",
                "6 * 6 = 36 (left: 6 6 36) || 6 - 6 = 0 (left: 0 36) || Input: 5 3 7",
                "6 / 6 = 1 (left: 6 1 6 6) || 6 - 1 = 5 (left: 5 6 6) || Possible next steps:"
            ]
        },
        "Input": "6 6 6 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "5": {
        "puzzle": "1 1 2 12",
        "Step 0": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 12)",
                "1 * 1 = 1 (left: 1 2 12)",
                "12 / 2 = 6 (left: 1 2 6)",
                "12 / 2 = 6 (left: 1 2 6)",
                "12 - 2 = 10 (left: 1 1 10)",
                "12 - 2 = 10 (left: 1 1 10)",
                "12 - 2 = 10 (left: 1 2 10)",
                "2 * 1 = 2 (left: 1 2 12)",
                "2 * 1 = 2 (left: 2 2 12)",
                "2 * 1 = 2 (left: 1 2 12)"
            ],
            "Evaluation": [
                2.001,
                60.0,
                1.002,
                1.002,
                0.003,
                1.002,
                1.002,
                60.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 0.7",
                "2 <- 0.7",
                "3 <- 0.7",
                "4 <- 0.7",
                "5 <- INIT",
                "6 <- 0.1",
                "7 <- 0.9",
                "8 <- 0.1",
                "9 <- 0.9"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "12 - 1 = 11 (left: 1 2 11)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "2 * 1 = 2 (left: 1 2 12) || 2 + 12 = 14 (left: 1 14)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)"
            ],
            "Evaluation": [
                40.0,
                41.0,
                60.0,
                40.0,
                60.0,
                0.002,
                60.0,
                20.001,
                60.0,
                41.0
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 1.6",
                "2 <- INIT",
                "3 <- 0.7",
                "4 <- 0.9",
                "5 <- 1.6",
                "6 <- 1.9",
                "7 <- 0.7",
                "8 <- 1.9",
                "9 <- 1.8"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "2 * 1 = 2 (left: 2 2 12)",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "2 * 1 = 2 (left: 1 2 12) || 2 + 12 = 14 (left: 1 14)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 3 + 5 = 8 (left: 8 9)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                1.002,
                20.0,
                60.0,
                0.003,
                0.003,
                2.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 1.3",
                "2 <- 1.6",
                "3 <- 1.3",
                "4 <- 0.1",
                "5 <- 1.2",
                "6 <- 0.7",
                "7 <- 2.4",
                "8 <- 2.2",
                "9 <- 1.2"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "2 * 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 12)",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.002,
                0.003,
                60.0,
                0.001,
                60.0,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 2.4",
                "2 <- 2.0",
                "3 <- 0.7",
                "4 <- 1.9",
                "5 <- 1.2",
                "6 <- 1.8",
                "7 <- 1.8",
                "8 <- 1.4",
                "9 <- 0.7"
            ]
        },
        "Step 4": {
            "steps": [
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6 6)",
                "2 * 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "2 * 1 = 2 (left: 1 2 12) || 3 + 5 = 8 (left: 7 8 9)"
            ],
            "Evaluation": [
                0.0,
                21.001,
                60.0,
                60.0,
                0.003,
                0.002,
                0.001,
                0.003,
                0.003,
                41.0
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 0.1",
                "2 <- 2.0",
                "3 <- 3.4",
                "4 <- 1.6",
                "5 <- 1.1",
                "6 <- 1.9",
                "7 <- 1.8",
                "8 <- 0.9",
                "9 <- INIT"
            ]
        },
        "Step 5": {
            "steps": [
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "2 * 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24 24)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "12 - 2 = 10 (left: 1 2 10)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                0.003,
                0.002,
                0.002,
                0.003,
                0.0,
                40.0,
                2.001
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 5.8",
                "2 <- 5.2",
                "3 <- 4.9",
                "4 <- 4.9",
                "5 <- 5.8",
                "6 <- 2.4",
                "7 <- 1.3",
                "8 <- 3.4",
                "9 <- 1.4"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "2 * 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24 24) || 24 + 24 = 48",
                "2 * 1 = 2 (left: 1 2 12) || 3 + 5 = 8 (left: 7 8 9) || 7 * 8 = 56 (left: 9 56)",
                "2 * 1 = 2 (left: 1 2 12) || 3 + 5 = 8 (left: 7 8 9) || 8 / 7 = 1.14285714286 (left: 1.14285714286 9)",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 + 10 = 11"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.003,
                0.003,
                1.002,
                0.001,
                0.001,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.6",
                "1 <- 2.0",
                "2 <- 0.9",
                "3 <- 2.0",
                "4 <- 4.2",
                "5 <- 3.4",
                "6 <- 1.2",
                "7 <- 3.6",
                "8 <- 3.4",
                "9 <- 5.8"
            ]
        },
        "Step 7": {
            "steps": [
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "2 * 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)",
                "2 * 1 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "2 * 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24 24)",
                "2 * 1 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (2 * 1) * (12 / 1) = 24",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "2 * 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || Input: 3 9 27 81",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "2 * 1 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ]
        },
        "Input": "1 1 2 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "6": {
        "puzzle": "1 2 2 6",
        "Step 0": {
            "steps": [
                "2 / 1 = 2 (left: 2 2 6)",
                "2 * 2 = 4 (left: 4 6)",
                "6 / 2 = 3 (left: 3 2 6)",
                "2 * 2 = 4 (left: 4 2 6)",
                "6 - 2 = 4 (left: 1 4 6)",
                "6 / 2 = 3 (left: 1 2 3)",
                "2 + 2 = 4 (left: 4 6 6)",
                "6 - 2 = 4 (left: 1 2 4)",
                "6 - 2 = 4 (left: 1 4 ",
                "6 - 2 = 4 (left: 1 4 6)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                41.0,
                1.002,
                60.0,
                1.0,
                22.0,
                2.001,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.6",
                "2 <- 0.9",
                "3 <- 0.0",
                "4 <- 0.1",
                "5 <- 0.1",
                "6 <- 0.7",
                "7 <- 0.6",
                "8 <- 0.4",
                "9 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 2 = 4 (left: 1 4 6)",
                "2 + 2 = 4 (left: 4 6 6) || 4 * 6 = 24 (left: 6 24)",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "2 / 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "2 * 2 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 * 2 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "6 - 2 = 4 (left: 1 2 4) || 4 / 2 = 2 (left: 1 2)",
                "2 + 2 = 4 (left: 4 6 6) || 6 / 4 = 1.5 (left: 1.5 6)",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "2 * 2 = 4 (left: 4 6) || 10 + 20 = 30 (left: 30)"
            ],
            "Evaluation": [
                60.0,
                1.002,
                0.002,
                0.002,
                0.002,
                0.001,
                1.002,
                1.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 0.1",
                "2 <- 0.1",
                "3 <- 0.4",
                "4 <- 0.4",
                "5 <- INIT",
                "6 <- 1.0",
                "7 <- 0.0",
                "8 <- 0.6",
                "9 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "2 * 2 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 * 2 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "",
                "2 * 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "2 / 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)",
                "2 + 2 = 4 (left: 4 6 6) || 6 + 4 = 10 (left: 4 6 10)",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)"
            ],
            "Evaluation": [
                60.0,
                0.001,
                0.001,
                60.0,
                0.003,
                40.001,
                0.002,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 0.9",
                "2 <- 2.3",
                "3 <- 0.4",
                "4 <- 0.6",
                "5 <- 0.2",
                "6 <- 1.0",
                "7 <- 1.0",
                "8 <- 0.4",
                "9 <- 2.3"
            ]
        },
        "Step 3": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6)",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5)",
                "2 + 2 = 4 (left: 4 6 6) || 6 / 4 = 1.5 (left: 1.5 6)",
                "6 / 2 = 3 (left: 3 2 6) || 6 / 2 = 3 (left:",
                "2 * 2 = 4 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5)",
                "2 * 2 = 4 (left: 1 4 6) || Possible next steps:",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 3 + 9 = 12 (left: 12)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.002,
                40.001,
                0.001,
                20.001,
                2.001,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 2.8",
                "2 <- 2.0",
                "3 <- 3.8",
                "4 <- 1.0",
                "5 <- 3.1",
                "6 <- 3.8",
                "7 <- 1.0",
                "8 <- 0.6",
                "9 <- 3.8"
            ]
        },
        "Step 4": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 + 6 = 10 (left: 1 10)",
                "2 + 2 = 4 (left: 4 6 6) || 6 + 4 = 10 (left: 4 6 10) || 10 - 4 = 6 (left: 6 6)",
                "2 * 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 * 2 = 4 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6)",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 4 / 6 = 0.6666666666666666 (left: 0.6666666666666666)",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "2 * 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "2 + 2 = 4 (left: 4 6 6) || 6 / 4 = 1.5 (left: 1.5 6)",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)"
            ],
            "Evaluation": [
                60.0,
                40.001,
                60.0,
                0.002,
                60.0,
                1.001,
                60.0,
                40.001,
                1.001,
                60.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 3.1",
                "2 <- 4.2",
                "3 <- 2.9",
                "4 <- 0.0",
                "5 <- 4.2",
                "6 <- 4.1",
                "7 <- 3.8",
                "8 <- 4.9",
                "9 <- 4.2"
            ]
        },
        "Step 5": {
            "steps": [
                "6 / 2 = 3 (left: 3 2 6) || 2 + 6 = 8 (left: 3 8)",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "2 * 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: ((1 * 2) * 2) * 6 = 24",
                "2 * 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 2) * (2 * 6) = 24",
                "2 / 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)",
                "2 * 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (1 * 2 * 2) * 6 = 24",
                "2 + 2 = 4 (left: 4 6 6) || 6 + 4 = 10 (left: 4 6 10) || 10 - 4 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * (6 - 2)) * 4 = 24",
                "2 * 2 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (2 * 2) * (6 * 1) = 24"
            ]
        },
        "Input": "1 2 2 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "7": {
        "puzzle": "1 1 10 12",
        "Step 0": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 10 12)",
                "1 + 10 = 11 (left: 11 1 12)",
                "1 * 10 = 10 (left: 10 1 12)",
                "10 + 1 = 11 (left: 1 11 12)",
                "1 + 10 = 11 (left: 11 11 12)",
                "1 + 10 = 11 (left: 11 10 12)",
                "10 + 1 = 11 (left: 1 11 12)",
                "12 - 1 = 11 (left: 1 10 ",
                "12 - 10 = 2 (left: 1 2 12)"
            ],
            "Evaluation": [
                41.0,
                1.002,
                41.0,
                1.001,
                21.001,
                0.003,
                3.0,
                21.001,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 0.0",
                "2 <- 0.9",
                "3 <- 0.8",
                "4 <- 0.7",
                "5 <- 0.4",
                "6 <- 0.0",
                "7 <- 0.2",
                "8 <- 0.9",
                "9 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 1 = 11 (left: 1 10  || 10 / 1 = 10 (left: 10)",
                "10 + 1 = 11 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12)",
                "12 - 1 = 11 (left: 1 10  || 10 - 1 = 9 (left: 9)",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 1 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "1 + 10 = 11 (left: 11 1 12) || 1 - 12 = -11 (left: -11 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "1 + 10 = 11 (left: 11 1 12) || 11 - 1 = 10 (left: 10 12)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                60.0,
                0.003,
                0.002,
                0.001,
                0.003,
                0.003,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 1.2",
                "2 <- 0.2",
                "3 <- 1.2",
                "4 <- 1.2",
                "5 <- 0.8",
                "6 <- 1.2",
                "7 <- 1.8",
                "8 <- 0.8",
                "9 <- 1.8"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 1 = 11 (left: 1 10  || 1 * 10 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24)",
                "1 + 10 = 11 (left: 11 1 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 - 1 = 11 (left: 1 10  || 10 / 1 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 1 = 11 (left: 1 10  || 1 * 10 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.003,
                0.003,
                0.002,
                0.003,
                0.002,
                0.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 0.9",
                "2 <- 0.0",
                "3 <- 0.2",
                "4 <- 1.8",
                "5 <- 1.2",
                "6 <- 0.2",
                "7 <- 0.7",
                "8 <- 1.2",
                "9 <- 0.2"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (1 * 1) * (10 + 12) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "1 + 10 = 11 (left: 11 1 12) || 11 - 1 = 10 (left: 10 12)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "1 + 10 = 11 (left: 11 1 12) || 11 * 1 = 11 (left: 11 12)",
                "10 + 1 = 11 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "1 + 10 = 11 (left: 11 1 12) || 11 / 1 = 11 (left: 11 12)"
            ],
            "Evaluation": [
                20.002,
                60.0,
                0.003,
                1.002,
                0.003,
                60.0,
                0.003,
                0.003,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 2.1",
                "2 <- 0.8",
                "3 <- 1.2",
                "4 <- 3.1",
                "5 <- 3.5",
                "6 <- 3.1",
                "7 <- 0.0",
                "8 <- INIT",
                "9 <- 2.1"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (12 - 10) * (1 * 1) = 24",
                "12 - 1 = 11 (left: 1 10  || 5 / 5 = 1 (left: 1)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * (1 + 10)) * 12 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "10 + 1 = 11 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "10 + 1 = 11 (left: 1 11 12)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (12 - 10) * (1 * 1) = 24"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.003,
                0.003,
                0.003,
                60.0,
                0.003,
                0.002,
                21.001,
                60.0
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 4.0",
                "2 <- 0.2",
                "3 <- 4.9",
                "4 <- 4.5",
                "5 <- 4.0",
                "6 <- 1.2",
                "7 <- 3.5",
                "8 <- 3.1",
                "9 <- 4.9"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: 2 * (1 + (10 - 12)) = 24",
                "1 + 10 = 11 (left: 11 1 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (12 - 10) * (1 * 1) = 24 || Input: 3 3 5 6\nSteps:\n5 + 3 = 8 (left: 3 6 8)\n8 - 6 = 2 (left: 2 3)\n3 * 2 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((5 + 3) - 6) * 4 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * (1 + 10)) * 12 = 24 || Input: 3 3 4 7\nSteps:\n3 + 7 = 10 (left: 3 4 10)\n10 - 4 = 6 (left: 3 6)\n6 * 3 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((3 + 7) - 4) * 6 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * (1 + 10)) * 12 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10 12)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 10) * (12 - 2) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (12 - 10) * (1 * 1) = 24 || Input: 3 3 6 8\nSteps:\n6 - 3 = 3 (left: 3 3 8)\n3 * 3 = 9 (left: 9 8)\n9 * 8 = 72 (left: 72)\nAnswer: (3 * 3) * (6 + 8) = 24"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.003,
                60.0,
                40.0,
                60.0,
                1.001,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 4.5",
                "1 <- 5.9",
                "2 <- 0.8",
                "3 <- 5.4",
                "4 <- 5.3",
                "5 <- 1.8",
                "6 <- 0.9",
                "7 <- 5.9",
                "8 <- 3.0",
                "9 <- 0.8"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * (1 + 10)) * 12 = 24 || Input: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n1 * 9 = 9 (left: 9)\n9 * 9 = 81 (left: 81)\nAnswer: (3 * 3) + (8 + 9) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (12 - 10) * (1 * 1) = 24 || Input: 3 3 6 8\nSteps:\n6 - 3 = 3 (left: 3 3 8)\n3 * 3 = 9 (left: 9 8)\n9 * 8 = 72 (left: 72)\nAnswer: (3 * 3) * (6 + 8) = 24 || Input: 2 3 5 8\nSteps:\n3 * 5 = 15 (left: 2 8 15)\n15 - 8 = 7 (left: 2 7)\n7 * 2 = 14 (left: 14)\n14 + 2 = 16 (left: 16)\n16 - 8 = 8 (left: 8)\n8 * 3 = 24 (left: 24)\nAnswer: ((",
                "12 - 1 = 11 (left: 1 10  || 1 * 10 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * (1 + 10)) * 12 = 24 || Input: 3 3 4 7\nSteps:\n3 + 7 = 10 (left: 3 4 10)\n10 - 4 = 6 (left: 3 6)\n6 * 3 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((3 + 7) - 4) * 6 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n2 * 6 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)\n144 / 6 = 24 (left: 24)\nAnswer: ((2 * 3) * 4) * (6 / 6) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (12 - 10) * (1 * 1) = 24 || Input: 3 3 5 6\nSteps:\n5 + 3 = 8 (left: 3 6 8)\n8 - 6 = 2 (left: 2 3)\n3 * 2 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((5 + 3) - 6) * 4 = 24 || Input: 2 3 4 12\nSteps:\n4 * 3 = 12 (left: 2 12 12)\n12 - 2 = 10 (left: 10 12)\n10 + 12 = 22 (left: 22)\n22 + 2 = 24 (left: 24)\nAnswer: ((4 * 3) - 2) + 12 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (12 - 10) * (1 * 1) = 24 || Input: 3 3 6 8\nSteps:\n6 - 3 = 3 (left: 3 3 8)\n3 * 3 = 9 (left: 9 8)\n9 * 8 = 72 (left: 72)\nAnswer: (3 * 3) * (6 + 8) = 24 || Input: 2 3 5 7\nSteps:\n2 * 7 = 14 (left: 3 5 14)\n14 - 5 = 9 (left: 3 9)\n3 * 9 = 27 (left: 27)\nAnswer: (2 * 7) - (5 - 3) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (1 * 1) * (10 + 12) = 24 || Input: 3 3 5 5\nSteps:\n3 + 5 = 8 (left: 3 8 5)\n8 - 5 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 5 = 45 (left: 45)\nAnswer: ((3 + 5) - 3) * 5 = 24",
                "12 - 1 = 11 (left: 1 10  || 5 + 5 = 10 (left: 10)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.002,
                60.0,
                60.0,
                0.003,
                60.0,
                60.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 5.5",
                "1 <- 5.5",
                "2 <- 5.9",
                "3 <- 5.5",
                "4 <- 5.1",
                "5 <- 6.4",
                "6 <- 6.3",
                "7 <- 2.1",
                "8 <- 6.8",
                "9 <- 6.3"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * (1 + 10)) * 12 = 24 || Input: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n4 * 3 = 12 (left: 8 12)\n12 * 2 = 24 (left: 24)\nAnswer: (3 + 5) * 3 * 4 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * (1 + 10)) * 12 = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n3 * 6 = 18 (left: 18)\n18 + 3 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: (3 * 8) - (6 + 3) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (12 - 10) * (1 * 1) = 24 || Input: 3 3 6 8\nSteps:\n6 - 3 = 3 (left: 3 3 8)\n3 * 3 = 9 (left: 9 8)\n9 * 8 = 72 (left: 72)\nAnswer: (3 * 3) * (6 + 8) = 24 || Input: 2 3 4 6\nSteps:\n3 + 6 = 9 (left: 2 4 9)\n4 - 2 = 2 (left: 2 9)\n2 * 9 = 18 (left: 18)\n18 + 4 = 22 (left: 22)\n22 + 2 = 24 (left: 24)\nAnswer: ((2 * 9) + 4) + 2 =",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * (1 + 10)) * 12 = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n5 - 3 = 2 (left: 2 21)\n2 * 21 = 42 (left: 42)\n42 / 2 = 21 (left: 21)\n21 - 21 = 0 (left: 0)\n0 + 24 = 24 (left: 24)\nAnswer: (((",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: 2 * (1 + (10 - 12)) = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n5 - 3 = 2 (left: 2 21)\n2 * 21 = 42 (left: 42)\n42 / 7 = 6 (left: 6)\n6 - 3 = 3 (left: 3)\n3 * 24 = 24 (left: 24)\nAnswer: ((",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (12 - 10) * (1 * 1) = 24 || Input: 3 3 5 6\nSteps:\n5 + 3 = 8 (left: 3 6 8)\n8 - 6 = 2 (left: 2 3)\n3 * 2 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((5 + 3) - 6) * 4 = 24 || Input: 2 3 4 12\nSteps:\n4 * 3 = 12 (left: 2 12 12)\n12 - 2 = 10 (left: 10 12)\n10 + 12 = 22 (left: 22)\n22 + 2 = 24 (left: 24)\nAnswer: ((4 * 3) - 2) + 12 = 24 || Input: 2 4 5 6\nSteps:\n5 * 4 = 20 (left: 2 6 20)\n6 - 2 = 4 (left: 4 20)\n4 * 20 = 80 (left: 80)\n80 / 4 = 20 (left: 20)\nAnswer: ((5 * 4) - 2) * 6 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * (1 + 10)) * 12 = 24 || Input: 3 3 4 7\nSteps:\n3 + 7 = 10 (left: 3 4 10)\n10 - 4 = 6 (left: 3 6)\n6 * 3 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((3 + 7) - 4) * 6 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n2 * 6 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)\n144 / 6 = 24 (left: 24)\nAnswer: ((2 * 3) * 4) * (6 / 6) = 24 || Input: 2 2 6 9\nSteps:\n2 * 6 = 12 (left: 2 9 12)\n12 - 9 = 3 (left: 2 3)\n3 * 2 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: (2 * 6) * (9 - 2) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (12 - 10) * (1 * 1) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (1 * 1) * (10 + 12) = 24 || Input: 3 3 5 5\nSteps:\n3 + 5 = 8 (left: 3 8 5)\n8 - 5 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 5 = 45 (left: 45)\nAnswer: ((3 + 5) - 3) * 5 = 24 || Input: 2 3 7 8\nSteps:\n3 + 7 = 10 (left: 2 10 8)\n10 - 8 = 2 (left: 2 2)\n2 * 2 = 4 (left: 4)\n4 * 8 = 32 (left: 32)\nAnswer: ((2 + 3) * (7 - 8)) * 8 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * (1 + 10)) * 12 = 24 || Input: 3 3 4 7\nSteps:\n3 + 7 = 10 (left: 3 4 10)\n10 - 4 = 6 (left: 3 6)\n6 * 3 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((3 + 7) - 4) * 6 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n2 * 6 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)\n144 / 6 = 24 (left: 24)\nAnswer: ((2 * 3) * 4) * (6 / 6) = 24 || Input: 2 4 5 8\nSteps:\n4 * 5 = 20 (left: 2 8 20)\n2 * 8 = 16 (left: 16 20)\n16 + 20 = 36 (left: 36)\n36 - 12 = 24 (left: 24)\nAnswer: ((2 * 4) * 5) + (8 - 12) = 24"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 7.4",
                "1 <- 2.1",
                "2 <- 5.1",
                "3 <- 6.8",
                "4 <- 7.3",
                "5 <- 6.6",
                "6 <- 6.1",
                "7 <- 7.7",
                "8 <- 3.5",
                "9 <- 5.1"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: 2 * (1 + (10 - 12)) = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n5 - 3 = 2 (left: 2 21)\n2 * 21 = 42 (left: 42)\n42 / 7 = 6 (left: 6)\n6 - 3 = 3 (left: 3)\n3 * 24 = 24 (left: 24)\nAnswer: (( || 3 * (5 - 3)) * 7 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (12 - 10) * (1 * 1) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: 2 * (1 + (10 - 12)) = 24 || The possible solution for 1 1 10 12 is: 2 * (1 + (10 - 12)) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (1 * 1) * (10 + 12) = 24 || Input: 3 3 5 5\nSteps:\n3 + 5 = 8 (left: 3 8 5)\n8 - 5 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 5 = 45 (left: 45)\nAnswer: ((3 + 5) - 3) * 5 = 24 || Input: 2 3 3 8\nSteps:\n3 + 3 = 6 (left: 2 6 8)\n6 * 2 = 12 (left: 12 8)\n12 + 8 = 20 (left: 20)\n20 + 2 = 22 (left: 22)\n22 + 2 = 24 (left: 24)\nAnswer: (((2 + (3 + 3)) * 2) +",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * (1 + 10)) * 12 = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n5 - 3 = 2 (left: 2 21)\n2 * 21 = 42 (left: 42)\n42 / 2 = 21 (left: 21)\n21 - 21 = 0 (left: 0)\n0 + 24 = 24 (left: 24)\nAnswer: ((( || (3 * 7) - (5 - 3)) * 21) / 2 + 24 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (12 - 10) * (1 * 1) = 24 || Input: 3 3 6 8\nSteps:\n6 - 3 = 3 (left: 3 3 8)\n3 * 3 = 9 (left: 9 8)\n9 * 8 = 72 (left: 72)\nAnswer: (3 * 3) * (6 + 8) = 24 || Input: 2 3 5 8\nSteps:\n3 * 5 = 15 (left: 2 8 15)\n15 - 8 = 7 (left: 2 7)\n7 * 2 = 14 (left: 14)\n14 + 2 = 16 (left: 16)\n16 - 8 = 8 (left: 8)\n8 * 3 = 24 (left: 24)\nAnswer: (( || 2 * 3) + 5) * 8 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (12 - 10) * (1 * 1) = 24 || Input: 3 3 5 8\nSteps:\n3 + 5 = 8 (left: 3 8 8)\n8 - 3 = 5 (left: 5 8)\n5 * 8 = 40 (left: 40)\nAnswer: (3 + 5) * (8 - 3) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (12 - 10) * (1 * 1) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: 2 * (1 + (10 - 12)) = 24 || Input: 3 3 6 6\nSteps:\n3 * 6 = 18 (left: 3 6 18)\n6 - 3 = 3 (left: 3 18)\n3 * 6 = 24 (left: 24)\nAnswer: (3 * 6) - (6 - 3) = 24"
            ],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                60.0,
                0.003,
                0.001,
                0.003,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.5",
                "1 <- 8.3",
                "2 <- 7.6",
                "3 <- 6.3",
                "4 <- 8.1",
                "5 <- 5.9",
                "6 <- 4.0",
                "7 <- 7.8",
                "8 <- 8.7",
                "9 <- 6.3"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * (1 + 10)) * 12 = 24 || Input: 3 3 4 6\nSteps:\n3 + 6 = 9 (left: 3 4 9)\n4 - 3 = 1 (left: 1 9)\n1 * 9 = 9 (left: 9)\n9 * 3 = 24 (left: 24)\nAnswer: ((3 + 6) * (4 - 3)) * 3 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (1 * 1) * (10 + 12) = 24 || Input: 3 3 5 5\nSteps:\n3 + 5 = 8 (left: 3 8 5)\n8 - 5 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 5 = 45 (left: 45)\nAnswer: ((3 + 5) - 3) * 5 = 24 || Input: 2 3 3 8\nSteps:\n3 + 3 = 6 (left: 2 6 8)\n6 * 2 = 12 (left: 12 8)\n12 + 8 = 20 (left: 20)\n20 + 2 = 22 (left: 22)\n22 + 2 = 24 (left: 24)\nAnswer: (((2 + (3 + 3)) * 2) + || 2) + 2 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * (1 + 10)) * 12 = 24 || Input: 3 3 4 7\nSteps:\n3 + 7 = 10 (left: 3 4 10)\n10 - 4 = 6 (left: 3 6)\n6 * 3 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((3 + 7) - 4) * 6 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n2 * 6 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)\n144 / 6 = 24 (left: 24)\nAnswer: ((2 * 3) * 4) * (6 / 6) = 24 || Input: 2 2 6 9\nSteps:\n2 * 6 = 12 (left: 2 9 12)\n12 - 9 = 3 (left: 2 3)\n3 * 2 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: (2 * 6) * (9 - 2) = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 * 3 = 18 (left: 12 18)\n18 - 12 = 6 (left: 6 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((5 + 7) * 3) - 6 * 4 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * (1 + 10)) * 12 = 24 || Input: 3 3 4 7\nSteps:\n3 + 7 = 10 (left: 3 4 10)\n10 - 4 = 6 (left: 3 6)\n6 * 3 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((3 + 7) - 4) * 6 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n2 * 6 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)\n144 / 6 = 24 (left: 24)\nAnswer: ((2 * 3) * 4) * (6 / 6) = 24 || Input: 2 5 6 6\nSteps:\n2 * 6 = 12 (left: 5 6 12)\n5 + 6 = 11 (left: 11 12)\n11 + 12 = 23 (left: 23)\n23 + 1 = 24 (left: 24)\nAnswer: ((2 * 6) + 5) + 6 = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (12 - 10) * (1 * 1) = 24 || Input: 3 3 4 7\nSteps:\n3 + 4 = 7 (left: 3 7 7)\n7 - 3 = 4 (left: 4 7)\n4 * 7 = 28 (left: 28)\nAnswer: (3 + 4) * (7 - 3) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (12 - 10) * (1 * 1) = 24 || Input: 3 3 6 8\nSteps:\n6 - 3 = 3 (left: 3 3 8)\n3 * 3 = 9 (left: 9 8)\n9 * 8 = 72 (left: 72)\nAnswer: (3 * 3) * (6 + 8) = 24 || Input: 2 3 4 6\nSteps:\n3 + 6 = 9 (left: 2 4 9)\n9 - 4 = 5 (left: 2 5)\n5 * 2 = 10 (left: 10)\n10 + 4 = 14 (left: 14)\n14 * 2 = 28 (left: 28)\n28 - 4 = 24 (left: 24)\nAnswer: ((",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 2) * (10 + 12) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (1 * 1) * (10 + 12) = 24 || Input: 3 3 5 5\nSteps:\n3 + 5 = 8 (left: 3 8 5)\n8 - 5 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 5 = 45 (left: 45)\nAnswer: ((3 + 5) - 3) * 5 = 24 || Input: 2 3 7 8\nSteps:\n3 + 7 = 10 (left: 2 10 8)\n10 - 8 = 2 (left: 2 2)\n2 * 2 = 4 (left: 4)\n4 * 8 = 32 (left: 32)\nAnswer: ((2 + 3) * (7 - 8)) * 8 = 24 || Input: 2 4 5 6\nSteps:\n4 * 6 = 24 (left: 2 5 24)\n5 - 2 = 3 (left: 3 24)\n3 * 24 = 72 (left: 72)\nAnswer: (4 * 6) - (5 - 2) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 * 2 = 24 (left: 24) || Answer: (12 - 10) * (1 * 1) = 24 || Input: 3 3 5 8\nSteps:\n3 + 5 = 8 (left: 3 8 8)\n8 - 3 = 5 (left: 5 8)\n5 * 8 = 40 (left: 40)\nAnswer: (3 + 5) * (8 - 3) = 24 || Input: 2 3 4 6\nSteps:\n2 * 4 = 8 (left: 3 6 8)\n6 - 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (2 * 4) * (6 - 3) = 24",
                "12 - 10 = 2 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * (1 + 10)) * 12 = 24 || Input: 3 3 4 7\nSteps:\n3 + 7 = 10 (left: 3 4 10)\n10 - 4 = 6 (left: 3 6)\n6 * 3 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((3 + 7) - 4) * 6 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n2 * 6 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)\n144 / 6 = 24 (left: 24)\nAnswer: ((2 * 3) * 4) * (6 / 6) = 24 || Input: 2 2 6 8\nSteps:\n2 * 2 = 4 (left: 4 6 8)\n6 + 8 = 14 (left: 4 14)\n4 * 14 = 56 (left: 56)\n56 / 2 = 28 (left: 28)\n28 - 4 = 24 (left: 24)\nAnswer: (((2 * 2) + (6 + 8)) *"
            ]
        },
        "Input": "1 1 10 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "8": {
        "puzzle": "2 2 10 10",
        "Step 0": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10)",
                "2 * 2 = 4 (left: 4 10 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 - 2 = 8 (left: 2 10 8)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 10 8)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                2.001,
                1.002,
                1.002,
                0.003,
                1.002,
                1.002,
                1.002,
                2.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 0.1",
                "8 <- 0.1",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "2 * 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 10 40)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 - 2 = 8 (left: 2 8 10)"
            ],
            "Evaluation": [
                2.001,
                21.001,
                0.003,
                1.002,
                1.002,
                2.001,
                2.001,
                0.003,
                2.001,
                1.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.1",
                "2 <- 1.1",
                "3 <- INIT",
                "4 <- 0.1",
                "5 <- INIT",
                "6 <- 1.1",
                "7 <- INIT",
                "8 <- 0.9",
                "9 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "10 - 2 = 8 (left: 2 8 10) || 8 - 2 = 6 (left: 6 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5)",
                "10 / 2 = 5 (left: 2 5 10) || 10 / 2 = 5 (left: 5 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 / 2 = 5 (left: 2 5 10) || 5 + 2 = 7 (left: 7)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10) || 10 / 2 = 5 (left: 5 6)",
                "10 / 2 = 5 (left: 2 5 10) || 10 / 2 = 5 (left: 2 5 10)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.001,
                1.002,
                0.003,
                20.002,
                0.0,
                1.002,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 1.1",
                "4 <- 1.1",
                "5 <- 2.1",
                "6 <- 1.9",
                "7 <- 2.1",
                "8 <- 2.1",
                "9 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 2 * 5 = 10 (left: 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 8 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)",
                "10 - 2 = 8 (left: 2 8 10) || 10 - 2 = 8 (left: 8 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 2 * 5 = 10 (left: 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 2 * 5 = 10 (left: 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                2.001,
                1.001,
                40.0,
                0.002,
                21.0,
                0.002,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 2.5",
                "1 <- 2.1",
                "2 <- 2.1",
                "3 <- 1.6",
                "4 <- INIT",
                "5 <- 2.1",
                "6 <- 2.1",
                "7 <- 3.4",
                "8 <- 1.1",
                "9 <- 3.4"
            ]
        },
        "Step 4": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10) || 2 * 5 = 10 (left: 10 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 - 2 = 3 (left: 3)",
                "10 - 2 = 8 (left: 2 8 10) || 10 - 8 = 2 (left: 2 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 2 * 5 = 10 (left: 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 2 * 5 = 10 (left: 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 / 2 = 5 (left: 5 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 - 2 = 3 (left: 3)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.001,
                1.0,
                2.001,
                0.0,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 1.1",
                "2 <- INIT",
                "3 <- 1.1",
                "4 <- 3.4",
                "5 <- INIT",
                "6 <- 2.1",
                "7 <- 3.4",
                "8 <- 3.4",
                "9 <- 0.1"
            ]
        },
        "Step 5": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)",
                "10 / 2 = 5 (left: 2 5 10) || 5 + 10 = 15 (left: 2 15)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 / 2 = 5 (left: 5 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 3 + 9 = 12 (left: 12)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || Input: 3 9",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 2 * 5 = 10 (left: 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || Input: 3 9",
                "2 * 2 = 4 (left: 4 10 10) || 3 + 9 = 12 (left: 9 12)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                40.001,
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 3.4",
                "2 <- 0.7",
                "3 <- 5.5",
                "4 <- 2.1",
                "5 <- 0.1",
                "6 <- 5.5",
                "7 <- 2.1",
                "8 <- 3.2",
                "9 <- 2.1"
            ]
        },
        "Step 6": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 - 2 = 3 (left: 3)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)",
                "10 - 2 = 8 (left: 2 8 10) || 8 / 2 = 4 (left: 4 10)",
                "10 / 2 = 5 (left: 2 5 10) || Possible next steps:",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 2 = 5 (left: 4 5 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 / 2 = 5 (left: 5 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 2 * 5 = 10 (left: 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 8 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 3 + 9 = 12 (left: 12)"
            ],
            "Evaluation": [
                0.003,
                0.0,
                40.0,
                0.003,
                0.0,
                2.0,
                20.001,
                0.003,
                21.0,
                0.003
            ],
            "Resampling": [
                "0 <- 6.6",
                "1 <- 6.2",
                "2 <- 2.1",
                "3 <- 3.6",
                "4 <- 3.4",
                "5 <- 6.2",
                "6 <- 6.2",
                "7 <- 4.4",
                "8 <- 0.3",
                "9 <- 5.5"
            ]
        },
        "Step 7": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10) || 10 / 2 = 5 (left: 5 10) || 5 * 10 = 50 (left: 10 50)",
                "10 - 2 = 8 (left: 2 8 10) || 8 / 2 = 4 (left: 4 10) || 4 * 10 = 40 (left: 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 6 / 3 = 2 (left: 2 9)",
                "10 - 2 = 8 (left: 2 8 10) || 10 - 2 = 8 (left: 8 10) || 8 * 10 = 80 (left: 80)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 3 + 9 = 12 (left: 12)",
                "10 - 2 = 8 (left: 2 8 10) || 8 / 2 = 4 (left: 4 10) || Possible next steps:",
                "10 - 2 = 8 (left: 2 8 10) || 8 / 2 = 4 (left: 4 10) || 4 * 10 = 40 (left: 40)",
                "10 / 2 = 5 (left: 2 5 10) || 5 + 10 = 15 (left: 2 15)",
                "10 - 2 = 8 (left: 2 10 8) || 2 * 10 = 20 (left: 8 20)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5)"
            ],
            "Evaluation": [
                21.001,
                0.002,
                0.001,
                0.002,
                0.002,
                0.003,
                0.002,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 6.8",
                "2 <- 7.9",
                "3 <- 7.9",
                "4 <- 7.0",
                "5 <- INIT",
                "6 <- 2.1",
                "7 <- 5.3",
                "8 <- 6.6",
                "9 <- 6.6"
            ]
        },
        "Step 8": {
            "steps": [
                "10 - 2 = 8 (left: 2 8 10) || 8 / 2 = 4 (left: 4 10) || 10 / 4 = 2.5 (left: 2.5)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 8 10) || 18 - 2 = 16 (left: 16)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 5 / 2 = 2.5 (left: 2.5)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || Input: 3 9",
                "10 / 2 = 5 (left: 2 5 10) || 10 / 2 = 5 (left: 5 10) || 5 * 10 = 50 (left: 10 50) || 3 * 9 = 27 (left: 27 27)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 2 * 5 = 10 (left: 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 / 2 = 5 (left: 5 10) || 10 / 5 = 2 (left: 2)",
                "10 / 2 = 5 (left: 2 5 10) || 10 / 2 = 5 (left: 5 10) || 10 / 5 = 2 (left: 2)",
                "10 / 2 = 5 (left: 2 5 10) || 10 / 2 = 5 (left: 5 10) || 10 - 5 = 5 (left: 5 10)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.001,
                0.003,
                0.003,
                1.002,
                0.001,
                0.001,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 6.6",
                "2 <- 2.1",
                "3 <- 6.8",
                "4 <- 5.3",
                "5 <- 7.9",
                "6 <- 7.0",
                "7 <- 6.6",
                "8 <- 5.3",
                "9 <- 6.6"
            ]
        },
        "Step 9": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 / 2 = 5 (left: 2 5 10) || 10 / 2 = 5 (left: 5 10) || 10 / 5 = 2 (left: 2)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 9 - 7 = 2 (left: 2)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 2 = 8 (left: 8 10) || 10 - 8 = 2 (left: 2)",
                "10 / 2 = 5 (left: 2 5 10) || 10 / 2 = 5 (left: 5 10) || 10 / 5 = 2 (left: 2)",
                "10 / 2 = 5 (left: 2 5 10) || 10 - 5 = 5 (left: 2 5) || 3 + 6 = 9 (left: 9)",
                "10 / 2 = 5 (left: 2 5 10) || 10 / 2 = 5 (left: 5 10) || 5 * 10 = 50 (left: 10 50) || 50 / 10 = 5 (left: 5)",
                "10 / 2 = 5 (left: 2 5 10) || 10 / 2 = 5 (left: 5 10) || 10 + 5 = 15 (left: 15)",
                "10 / 2 = 5 (left: 2 5 10) || 10 / 2 = 5 (left: 5 10) || 10 / 5 = 2 (left: 2)",
                "10 / 2 = 5 (left: 2 5 10) || 10 / 2 = 5 (left: 5 10) || 5 * 10 = 50 (left: 50)"
            ]
        },
        "Input": "2 2 10 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "9": {
        "puzzle": "1 1 1 12",
        "Step 0": {
            "steps": [
                "12 - 1 = 11 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1 12)",
                "1 * 1 = 1 (left: 1 1 12)",
                "12 - 1 = 11 (left: 1 1 11)",
                "1 * 12 = 12 (left: 1 1 12)",
                "1 / 1 = 1 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "12 - 1 = 11 (left: 1 1 11)",
                "12 - 1 = 11 (left: 1 1 11)",
                "12 - 1 = 11 (left: 1 1 11)"
            ],
            "Evaluation": [
                1.002,
                60.0,
                41.0,
                1.002,
                41.0,
                21.001,
                21.001,
                1.002,
                1.002,
                0.002
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.4",
                "2 <- 0.5",
                "3 <- 0.2",
                "4 <- 0.6",
                "5 <- 0.5",
                "6 <- 0.1",
                "7 <- 0.1",
                "8 <- 0.4",
                "9 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "1 * 12 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 / 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 / 1 = 1 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "1 * 12 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12)",
                "1 * 1 = 1 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                40.0,
                0.002,
                0.001,
                60.0,
                60.0,
                20.0,
                40.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 1.6",
                "4 <- 0.7",
                "5 <- 0.6",
                "6 <- 1.7",
                "7 <- 0.1",
                "8 <- 1.9",
                "9 <- 0.6"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 - 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left:",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)"
            ],
            "Evaluation": [
                1.001,
                60.0,
                41.0,
                0.002,
                40.0,
                0.001,
                0.001,
                0.003,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- 1.9",
                "4 <- 1.8",
                "5 <- 0.2",
                "6 <- 1.6",
                "7 <- 2.4",
                "8 <- 1.3",
                "9 <- 0.5"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "1 / 1 = 1 (left: 1 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 * 0 = 0 (left: 0)",
                "1 * 12 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 0 * 12 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "12 - 1 = 11 (left: 1 1 11) || 11 - 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 / 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)"
            ],
            "Evaluation": [
                1.002,
                40.001,
                0.002,
                0.003,
                0.003,
                0.001,
                0.003,
                0.002,
                0.001,
                2.001
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 1.9",
                "2 <- 1.7",
                "3 <- 1.3",
                "4 <- 0.5",
                "5 <- 1.6",
                "6 <- 0.2",
                "7 <- 0.4",
                "8 <- 2.2",
                "9 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 + 11 = 12",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 / 1 = 1 (left: 1 1 12) || 1 / 1 = 1 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "1 * 12 = 12 (left: 1 1 12) || 1 / 12 = 0.08333333333333333 (left: 0.08333333333333333 ",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "1 * 1 = 1 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12) || 12 / 1 = 12 (left: 1 12)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.002,
                1.001,
                0.002,
                21.0,
                0.001,
                60.0,
                1.002
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 0.1",
                "2 <- 4.8",
                "3 <- 4.8",
                "4 <- 1.6",
                "5 <- 2.1",
                "6 <- 3.1",
                "7 <- 1.3",
                "8 <- 1.8",
                "9 <- 2.1"
            ]
        },
        "Step 5": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 3 + 5 = 8 (left: 7 8)",
                "12 / 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 / 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 + 11 = 12",
                "1 * 12 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 * 0 = 0 (left: 0)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)"
            ],
            "Evaluation": [
                1.002,
                2.0,
                0.003,
                0.003,
                0.003,
                1.002,
                40.0,
                0.003,
                0.003,
                21.0
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 5.9",
                "2 <- 1.8",
                "3 <- 1.8",
                "4 <- 0.1",
                "5 <- 4.8",
                "6 <- 1.9",
                "7 <- 5.1",
                "8 <- 5.6",
                "9 <- 3.1"
            ]
        },
        "Step 6": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 12 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "1 * 12 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "1 * 1 = 1 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 0 + 12 = 12",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12) || 1 * 12 = 12 (left: 12)",
                "1 / 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 / 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)"
            ],
            "Evaluation": [
                1.001,
                0.002,
                0.002,
                0.002,
                60.0,
                0.002,
                0.003,
                0.003,
                0.001,
                41.0
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 6.4",
                "2 <- 2.2",
                "3 <- 1.3",
                "4 <- 1.3",
                "5 <- 5.9",
                "6 <- 6.9",
                "7 <- 4.6",
                "8 <- 1.8",
                "9 <- 6.4"
            ]
        },
        "Step 7": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "1 * 1 = 1 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "12 / 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 / 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 12 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 - 12 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)"
            ],
            "Evaluation": [
                21.0,
                0.002,
                60.0,
                0.0,
                0.001,
                0.002,
                0.002,
                0.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 6.9",
                "1 <- 6.4",
                "2 <- 5.9",
                "3 <- 4.6",
                "4 <- 6.4",
                "5 <- 0.1",
                "6 <- 6.9",
                "7 <- 7.2",
                "8 <- 1.9",
                "9 <- 0.2"
            ]
        },
        "Step 8": {
            "steps": [
                "1 / 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || Possible next steps:",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 + 11 = 12",
                "1 * 1 = 1 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 * 0 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 / 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 0 + 12 = 12",
                "1 * 1 = 1 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 * 0 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 7.2",
                "2 <- 2.1",
                "3 <- 7.2",
                "4 <- 8.9",
                "5 <- 4.8",
                "6 <- 6.4",
                "7 <- 6.4",
                "8 <- 2.2",
                "9 <- 5.6"
            ]
        },
        "Step 9": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "1 * 1 = 1 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 0 - 12 = -12 (left: -12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || Input: 5 5",
                "1 * 1 = 1 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "1 / 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 * 1 = 11 (left: 11)"
            ]
        },
        "Input": "1 1 1 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "10": {
        "puzzle": "1 1 2 8",
        "Step 0": {
            "steps": [
                "1 + 2 = 3 (left: 1 3 8)",
                "1 * 1 = 1 (left: 1 2 8)",
                "8 / 2 = 4 (left: 1 4 8)",
                "8 - 2 = 6 (left: 1 1 6)",
                "2 * 1 = 2 (left: 2 2 8)",
                "1 * 2 = 2 (left: 2 2 8)",
                "8 - 2 = 6 (left: 1 2 6)",
                "2 + 1 = 3 (left: 1 3 8)",
                "2 + 1 = 3 (left: 1 3 ",
                "2 + 1 = 3 (left: 1 3 8)"
            ],
            "Evaluation": [
                60.0,
                41.0,
                0.001,
                1.002,
                1.002,
                1.002,
                0.003,
                60.0,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.9",
                "2 <- 0.7",
                "3 <- 0.7",
                "4 <- 0.7",
                "5 <- INIT",
                "6 <- 0.0",
                "7 <- INIT",
                "8 <- 0.9",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 2 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24)",
                "2 + 1 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8)",
                "2 + 1 = 3 (left: 1 3 8) || 8 / 3 = 2.67 (left: 1 2.67)",
                "2 + 1 = 3 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5)",
                "2 + 1 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8)",
                "8 - 1 = 7 (left: 1 2 7)",
                "1 + 2 = 3 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5)",
                "2 * 1 = 2 (left: 2 2 ",
                "2 + 1 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "8 - 2 = 6 (left: 1 1 6)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                2.0,
                0.001,
                60.0,
                2.001,
                20.002,
                1.001,
                0.0,
                1.002
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 1.0",
                "2 <- INIT",
                "3 <- 0.9",
                "4 <- 1.7",
                "5 <- 0.1",
                "6 <- 0.0",
                "7 <- 1.1",
                "8 <- 0.0",
                "9 <- 0.9"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 10 / 5 = 2 (left: 2)",
                "8 / 2 = 4 (left: 1 4 8)",
                "2 + 1 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 3 7)",
                "2 * 1 = 2 (left: 2 2  || 2 - 2 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 2 8) || 8 - 1 = 7 (left:",
                "1 + 2 = 3 (left: 1 3 8) || 8 / 3 = 2.67 (left: 1 2.67)",
                "2 + 1 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || Input: 5 10",
                "1 + 2 = 3 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5)",
                "2 + 1 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                1.002,
                1.001,
                0.002,
                1.0,
                0.001,
                0.002,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 2.8",
                "2 <- 1.1",
                "3 <- 2.8",
                "4 <- 1.6",
                "5 <- 1.4",
                "6 <- 0.7",
                "7 <- 0.7",
                "8 <- 0.1",
                "9 <- 2.8"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 2 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "1 + 2 = 3 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "2 + 1 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "1 + 2 = 3 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "1 + 2 = 3 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "2 + 1 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "2 + 1 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 3 7)",
                "2 + 1 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 3 7)",
                "1 * 1 = 1 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "1 + 2 = 3 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.002,
                0.002,
                0.003,
                0.003,
                2.0,
                20.0,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 2.8",
                "1 <- 0.0",
                "2 <- 3.8",
                "3 <- 1.6",
                "4 <- 2.9",
                "5 <- 1.1",
                "6 <- 1.5",
                "7 <- 1.6",
                "8 <- 2.8",
                "9 <- 3.7"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 2 = 3 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 1 + 5 = 6",
                "1 + 2 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "1 * 1 = 1 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 - 4 =",
                "1 + 2 = 3 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "2 + 1 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "2 + 1 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 5 + 10 = 15 (left: 15)",
                "8 - 1 = 7 (left: 1 2 7) || 7 - 2 = 5 (left: 1 5)",
                "1 + 2 = 3 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 5 - 1 = 4 (left: 4)",
                "1 + 2 = 3 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "2 + 1 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 3 7) || 5 + 9 = 14 (left: 14)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.003,
                0.003,
                0.002,
                0.003,
                1.001,
                0.002,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 3.7",
                "1 <- 4.1",
                "2 <- 1.1",
                "3 <- 1.0",
                "4 <- 0.0",
                "5 <- 1.1",
                "6 <- 4.1",
                "7 <- 1.1",
                "8 <- 2.9",
                "9 <- 1.4"
            ]
        },
        "Step 5": {
            "steps": [
                "2 + 1 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 3 7) || 7 - 3 = 4 (left: 4)",
                "1 + 2 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2.66666666667 (left: 2.66666666667)",
                "2 + 1 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 + 2 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "1 + 2 = 3 (left: 1 3 8) || 3 - 1 = 2 (left: 2 8)",
                "2 + 1 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 + 2 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || Input: 4 10 5",
                "2 + 1 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "2 + 1 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "2 + 1 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)"
            ],
            "Evaluation": [
                0.002,
                0.0,
                0.001,
                0.001,
                0.003,
                0.002,
                0.003,
                60.0,
                20.0,
                0.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 1.4",
                "2 <- 3.7",
                "3 <- 0.0",
                "4 <- 0.7",
                "5 <- 4.1",
                "6 <- 1.1",
                "7 <- 0.7",
                "8 <- 4.1",
                "9 <- 5.7"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 2 = 3 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24)",
                "2 + 1 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 4 * 6 = 24 (left: 24 8)",
                "2 + 1 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 3 7) || 9 / 5 = 1.8 (left: 1.8)",
                "1 + 2 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 8)",
                "2 + 1 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "1 + 2 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "2 + 1 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "2 + 1 = 3 (left: 1 3 8) || 3 - 1 = 2 (left: ",
                "1 + 2 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "2 + 1 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (2 + 1) * (8 / 1) = 24"
            ]
        },
        "Input": "1 1 2 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "11": {
        "puzzle": "1 1 4 8",
        "Step 0": {
            "steps": [
                "8 - 4 = 4 (left: 1 4 4)",
                "1 * 1 = 1 (left: 1 4 8)",
                "4 + 1 = 5 (left: 4 5 8)",
                "4 * 1 = 4 (left: 4 4 8)",
                "8 - 4 = 4 (left: 1 4 4)",
                "8 / 4 = 2 (left: 1 2 8)",
                "1 * 4 = 4 (left: 4 4 8)",
                "8 - 4 = 4 (left: 1 4 4)",
                "8 - 4 = 4 (left: 1 4 ",
                "4 + 1 = 5 (left: 1 5 8)"
            ],
            "Evaluation": [
                2.001,
                1.002,
                3.0,
                22.0,
                21.001,
                22.0,
                3.0,
                0.003,
                20.002,
                22.0
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 0.5",
                "2 <- 0.9",
                "3 <- 0.4",
                "4 <- 0.9",
                "5 <- 0.8",
                "6 <- 0.9",
                "7 <- 0.4",
                "8 <- 0.8",
                "9 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 8) || 5 * 8 = 40 (left: 1 40)",
                "8 / 4 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10)",
                "4 + 1 = 5 (left: 1 5 8) || 5 / 1 = 5 (left: 5 8)",
                "8 - 4 = 4 (left: 1 4 4) || 4 * 1 = 4 (left: 4 4)",
                "4 + 1 = 5 (left: 1 5 8) || 1 * 5 = 5 (left: 5 8)",
                "8 - 4 = 4 (left: 1 4  || 4 / 1 = 4 (left: 4)",
                "4 + 1 = 5 (left: 1 5 8) || 1 * 5 = 5 (left: 5 8)",
                "8 - 4 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4)",
                "8 - 4 = 4 (left: 1 4  || 1 * 4 = 4 (left: 4)",
                "4 + 1 = 5 (left: 4 5 8) || 5 / 4 = 1.25 (left: 1.25 8)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.003,
                0.002,
                1.002,
                0.002,
                0.002,
                21.0,
                0.002,
                2.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.9",
                "2 <- 1.0",
                "3 <- 1.7",
                "4 <- 1.1",
                "5 <- 1.1",
                "6 <- 1.0",
                "7 <- 0.9",
                "8 <- 1.0",
                "9 <- 1.7"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 4 = 4 (left: 4 4 8)",
                "4 + 1 = 5 (left: 1 5 8) || 5 - 1 = 4 (left: 4 8)",
                "4 + 1 = 5 (left: 1 5 8) || 5 * 8 = 40 (left: 1 40) || 40 - 1 = 39 (left: 1 40)",
                "8 - 4 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 3 * 4 = 12 (left: 12)",
                "8 / 4 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "8 / 4 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "4 + 1 = 5 (left: 1 5 8) || 5 * 8 = 40 (left: 1 40) || Input: 5 9 3",
                "4 + 1 = 5 (left: 1 5 8) || 8 / 5 = 1.6 (left: 1 1.6)",
                "4 + 1 = 5 (left: 1 5 8) || 5 * 8 = 40 (left: 1 40) || 40 + 1 = 41 (left: 41)",
                "8 - 4 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 5 + 5 = 10 (left: 5 10 5)"
            ],
            "Evaluation": [
                41.0,
                0.003,
                60.0,
                0.002,
                0.002,
                0.001,
                0.003,
                0.003,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 1.1",
                "2 <- 2.2",
                "3 <- 0.5",
                "4 <- 0.3",
                "5 <- 1.7",
                "6 <- 0.8",
                "7 <- INIT",
                "8 <- 2.2",
                "9 <- 2.2"
            ]
        },
        "Step 3": {
            "steps": [
                "8 - 4 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 3 * 4 = 12 (left: 12)",
                "8 / 4 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "4 + 1 = 5 (left: 1 5 8) || 5 * 8 = 40 (left: 1 40) || 40 - 1 = 39 (left: 1 40) || 1 - 40 =",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6)",
                "4 * 1 = 4 (left: 4 4 8) || 8 - 4 = 4 (left: 4 8)",
                "8 - 4 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 5 + 10 = 15 (left: 15)",
                "8 - 4 = 4 (left: 1 4  || 4 - 1 = 3 (left: 3)",
                "4 * 1 = 4 (left: 4 4 ",
                "4 + 1 = 5 (left: 1 5 8) || 5 * 8 = 40 (left: 1 40) || 40 - 1 = 39 (left: 1 40) || 1 * 40 = 40 (left: 40)",
                "4 + 1 = 5 (left: 1 5 8) || 5 * 8 = 40 (left: 1 40) || 40 - 1 = 39 (left: 1 40) || 1 * 40 = 40 (left: 40)"
            ],
            "Evaluation": [
                0.001,
                0.001,
                0.003,
                60.0,
                0.003,
                0.002,
                0.001,
                1.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 1.0",
                "2 <- 0.5",
                "3 <- 3.3",
                "4 <- 0.5",
                "5 <- 3.3",
                "6 <- 3.3",
                "7 <- 1.0",
                "8 <- 2.0",
                "9 <- 2.0"
            ]
        },
        "Step 4": {
            "steps": [
                "8 - 4 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 4 / 3 = 1.33 (left: 1.33)",
                "4 + 1 = 5 (left: 1 5 8) || 5 * 8 = 40 (left: 1 40) || 40 - 1 = 39 (left: 1 39)",
                "8 / 4 = 2 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 / 4 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "4 + 1 = 5 (left: 1 5 8) || 5 * 8 = 40 (left: 1 40) || 40 - 1 = 39 (left: 39)",
                "1 * 4 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8)",
                "1 * 4 = 4 (left: 4 4 8) || Input: 3 9 3"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.003,
                40.0,
                0.003,
                0.003,
                0.003,
                40.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 2.2",
                "2 <- 4.4",
                "3 <- 4.8",
                "4 <- 1.1",
                "5 <- 4.4",
                "6 <- 2.2",
                "7 <- 1.0",
                "8 <- 1.0",
                "9 <- 0.3"
            ]
        },
        "Step 5": {
            "steps": [
                "8 / 4 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "4 + 1 = 5 (left: 1 5 8) || 5 * 8 = 40 (left: 1 40) || 40 - 1 = 39 (left: 1 40) || 1 * 40 = 40 (left: 40 40)",
                "8 / 4 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "1 * 4 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 / 4 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "8 / 4 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "4 + 1 = 5 (left: 1 5 8) || 5 * 8 = 40 (left: 1 40) || 40 - 1 = 39 (left: 1 40) || 40 + 1 = 41 (left: 1)",
                "4 + 1 = 5 (left: 1 5 8) || 5 * 8 = 40 (left: 1 40) || 40 - 1 = 39 (left: 39)",
                "4 + 1 = 5 (left: 1 5 8) || 5 * 8 = 40 (left: 1 40) || 40 - 1 = 39 (left: 1 39)",
                "4 * 1 = 4 (left: 4 4 8) || 8 - 4 = 4 (left: 4 8)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.003,
                0.002,
                0.001,
                0.002,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 4.8",
                "2 <- 0.4",
                "3 <- 3.3",
                "4 <- 1.1",
                "5 <- 2.2",
                "6 <- 1.7",
                "7 <- 2.0",
                "8 <- 3.3",
                "9 <- 0.8"
            ]
        },
        "Step 6": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8)",
                "1 * 4 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 4 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4)",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 / 4 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "4 + 1 = 5 (left: 1 5 8) || 5 * 8 = 40 (left: 1 40) || 40 - 1 = 39 (left: 1 40) || 1 * 40 = 40 (left: 40)",
                "8 - 4 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 4 / 3 = 1.33 (left: 1.33)",
                "1 * 4 = 4 (left: 4 4 8) || 8 / 4 = 2 (left: 4 2)",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 4 = 4 (left: 1 4  || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                40.001,
                0.002,
                40.0,
                0.001,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 6.2",
                "2 <- 4.8",
                "3 <- 6.2",
                "4 <- 2.2",
                "5 <- 3.3",
                "6 <- 1.0",
                "7 <- 0.4",
                "8 <- 6.0",
                "9 <- 6.0"
            ]
        },
        "Step 7": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 8)",
                "8 - 4 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 4 - 3 = 1 (left: 1)",
                "1 * 4 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 4 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 4 - 3 = 1 (left: 1)",
                "4 + 1 = 5 (left: 1 5 8) || 5 * 8 = 40 (left: 1 40) || 40 - 1 = 39 (left: 1 40) || 40 - 1 = 39 (left: 39)",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 / 6 = 0.1667 (left: 0.1667)",
                "4 + 1 = 5 (left: 1 5 8) || 5 * 8 = 40 (left: 1 40) || 40 / 1 = 40 (left: 40)",
                "8 - 4 = 4 (left: 1 4 4) || 4 * 1 = 4 (left: 4 4)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 * 8 = 128 (left: 128)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 * 8 = 128 (left: 128)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 1.0",
                "2 <- 6.0",
                "3 <- 1.0",
                "4 <- 4.8",
                "5 <- 2.2",
                "6 <- 4.8",
                "7 <- 1.1",
                "8 <- 7.0",
                "9 <- 1.1"
            ]
        },
        "Step 8": {
            "steps": [
                "8 - 4 = 4 (left: 1 4 4) || 4 / 1 = 4 (left: 4 4)",
                "4 + 1 = 5 (left: 1 5 8) || 5 * 8 = 40 (left: 1 40) || 1 * 40 = 40 (left: 40)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 * 8 = 128 (left: 8 128)",
                "4 + 1 = 5 (left: 1 5 8) || 5 * 8 = 40 (left: 1 40) || Input: 5 10",
                "1 * 4 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "4 + 1 = 5 (left: 1 5 8) || 5 * 8 = 40 (left: 1 40) || 40 - 1 = 39 (left: 1 40) || 40 - 1 = 39 (left: 1)",
                "1 * 4 = 4 (left: 4 4 8) || 4 / 4 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 / 4 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 4 8) || 1 * 4 = 4 (left: 4)",
                "8 / 4 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.0,
                0.003,
                0.003,
                0.003,
                0.001,
                0.002,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 6.2",
                "2 <- 0.3",
                "3 <- 1.0",
                "4 <- 6.0",
                "5 <- 8.2",
                "6 <- 3.3",
                "7 <- 8.2",
                "8 <- 6.0",
                "9 <- 1.1"
            ]
        },
        "Step 9": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 8) || 5 * 8 = 40 (left: 1 40) || 40 - 1 = 39 (left: 1 40) || 40 / 1 = 40 (left: 40)",
                "8 - 4 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 4 / 3 = 1.33333333333 (left: 1.33333333333)",
                "4 * 1 = 4 (left: 4 4 8) || Possible",
                "4 + 1 = 5 (left: 1 5 8) || 5 * 8 = 40 (left: 1 40) || 40 - 1 = 39 (left: 39)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 8 / 16 = 0.5 (left: 0.5)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 * 8 = 128 (left: 8 128) || 128 - 8 = 120 (left: 8 120)",
                "8 / 4 = 2 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 * 8 = 128 (left: 8 128) || 8 + 120 = 128 (left: 120)",
                "4 * 1 = 4 (left: 4 4 8) || 4 * 4 = 16 (left: 16 8) || 16 / 8 = 2 (left: 2 8)",
                "8 / 4 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ]
        },
        "Input": "1 1 4 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "12": {
        "puzzle": "1 1 5 8",
        "Step 0": {
            "steps": [
                "5 - 1 = 4 (left: 1 4 8)",
                "1 * 1 = 1 (left: 1 5 8)",
                "8 - 5 = 3 (left: 1 3 8)",
                "8 - 5 = 3 (left: 1 3 8)",
                "5 + 1 = 6 (left: 1 6 8)",
                "5 - 1 = 4 (left: 1 4 8)",
                "5 + 1 = 6 (left: 1 6 8)",
                "5 + 1 = 6 (left: 1 6 8)",
                "5 + 1 = 6 (left: 6 5 ",
                "8 - 5 = 3 (left: 1 3 8)"
            ],
            "Evaluation": [
                1.002,
                1.001,
                60.0,
                60.0,
                0.003,
                1.002,
                0.003,
                0.003,
                20.001,
                21.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.2",
                "2 <- 0.3",
                "3 <- 0.3",
                "4 <- 0.2",
                "5 <- 0.2",
                "6 <- 0.3",
                "7 <- INIT",
                "8 <- 0.3",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 8)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 3 = 2.67 (left: 1 2.67)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 8)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8)",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 1 = ",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5)",
                "5 * 1 = 5 (left: ",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 8)",
                "8 - 5 = 3 (left: 1 3 8) || Input: 5 6 9"
            ],
            "Evaluation": [
                2.0,
                2.001,
                60.0,
                21.001,
                60.0,
                0.003,
                1.001,
                0.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 0.9",
                "2 <- 0.5",
                "3 <- 1.4",
                "4 <- INIT",
                "5 <- 0.3",
                "6 <- INIT",
                "7 <- 0.2",
                "8 <- 0.8",
                "9 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "8 - 5 = 3 (left: 1 3 8) || 3 - 1 = 2 (left: 2 8)",
                "5 - 1 = 4 (left: 1 4 8) || 4 * 1 = 4 (left: 4 8)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 - 1 = 7 (left: 1 5 7)",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 1 = ",
                "8 - 5 = 3 (left: 1 3 8)",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5)",
                "5 + 1 = 6 (left: 6 5  || 5 + 6 = 11 (left: 11)",
                "8 - 5 = 3 (left: 1 3 8) || 3 - 1 = 2 (left: 2 8)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.003,
                60.0,
                1.002,
                0.003,
                60.0,
                40.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.2",
                "2 <- 2.6",
                "3 <- 0.3",
                "4 <- 2.7",
                "5 <- 1.4",
                "6 <- 0.3",
                "7 <- INIT",
                "8 <- 1.2",
                "9 <- 2.3"
            ]
        },
        "Step 3": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 8 8)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 3 7)",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 5 + 10 = 15 (left: 15)",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "1 * 8 = 8 (left: 5 8)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2.66666666667 (left: 2.66666666667)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 - 5) * (1 * 8) = 24"
            ],
            "Evaluation": [
                60.0,
                1.002,
                60.0,
                1.0,
                0.0,
                0.002,
                1.0,
                1.002,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 2.3",
                "2 <- 2.6",
                "3 <- 2.3",
                "4 <- 1.4",
                "5 <- 0.8",
                "6 <- 1.2",
                "7 <- 2.7",
                "8 <- 1.2",
                "9 <- 1.2"
            ]
        },
        "Step 4": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * 3 = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 8 8)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 5 + 5 = 10 (left: 10)",
                "5 + 1 = 6 (left: 6 5  || 6 - 5 = 1 (left: 1)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                60.0,
                0.003,
                0.003,
                60.0,
                0.001,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 4.8",
                "1 <- 1.4",
                "2 <- 1.4",
                "3 <- 2.3",
                "4 <- 0.2",
                "5 <- 4.8",
                "6 <- 3.9",
                "7 <- 4.3",
                "8 <- 3.9",
                "9 <- 2.7"
            ]
        },
        "Step 5": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * (1 + 5)) * 8 = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 8 / 3 = 2.66667 (left: 2.66667)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * (8 - 5) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 + 8 = 11 (left: 1 11)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * (1 + 5)) * 8 = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 - 5) * (1 * 8) = 24 || Input: 3 3 4 7\nSteps:\n3 * 7 = 21 (left: 3 4 21)\n4 + 3 = 7 (left: 7 21)\n7 * 3 = 21 (left: 21)\nAnswer: (3 * 7) - (4 + 3) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * (8 - 5) = 24 || Input: 3 3 5 7\nSteps:\n3 + 7 = 10 (left: 3 5 10)\n5 + 3 = 8 (left: 8 10)\n8 * 3 = 24 (left: 24)\nAnswer: 3 * (5 + (7 - 3)) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 - 5) * (1 * 8) = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n12 - 6 = 6 (left: 3 6)\n6 * 3 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((5 + 7) - 6) * 3 = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.001,
                60.0,
                20.0,
                60.0,
                60.0,
                60.0,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 4.8",
                "2 <- 4.8",
                "3 <- 3.0",
                "4 <- 0.8",
                "5 <- 3.0",
                "6 <- 5.3",
                "7 <- 1.3",
                "8 <- 0.3",
                "9 <- 0.8"
            ]
        },
        "Step 6": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * (1 + 5)) * 8 = 24",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 1 * (1 + 5) * 8 = 24",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || Input: 4 5",
                "5 + 1 = 6 (left: 6 5  || 5 * 6 = 30 (left: 30)",
                "8 - 5 = 3 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * (8 - 5) = 24 || Input: 3 3 3 9\nSteps:\n3 + 3 = 6 (left: 3 6 9)\n6 * 3 = 18 (left: 9 18)\n18 / 9 = 2 (left: 2 18)\n2 * 3 = 6 (left: 6 18)\n6 * 4 = 24 (left: 24)\nAnswer: (((3 + 3) * 3)",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 8) || 7 * 8 = 56 (left: 56)",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 3)",
                "5 + 1 = 6 (left: 6 5  || 5 * 6 = 30 (left: 30)"
            ],
            "Evaluation": [
                0.001,
                60.0,
                60.0,
                0.003,
                0.003,
                0.001,
                60.0,
                0.002,
                0.0,
                0.002
            ],
            "Resampling": [
                "0 <- 4.6",
                "1 <- 6.1",
                "2 <- 5.3",
                "3 <- 5.5",
                "4 <- 6.6",
                "5 <- 6.1",
                "6 <- 5.3",
                "7 <- 5.3",
                "8 <- 6.6",
                "9 <- 5.6"
            ]
        },
        "Step 7": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * (1 + 5)) * 8 = 24",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * (1 + 5)) * 8 = 24 || Input: 3 3 4 8\nSteps:\n3 + 3 = 6 (left: 4 6 8)\n6 * 4 = 24 (left: 8 24)\n8 * 3 = 24 (left: 24)\nAnswer: (3 + 3) * 4 = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * (8 - 5) = 24 || Input: 3 3 6 7\nSteps:\n3 + 7 = 10 (left: 3 6 10)\n3 * 10 = 30 (left: 6 30)\n30 - 6 = 24 (left: 24)\nAnswer: (3 * (3 + 7)) - 6 = 24",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * (1 + 5)) * 8 = 24 || Input: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 9 3 8)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3 + 3) * 8 = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * (8 - 5) = 24 || Input: 3 3 3 9\nSteps:\n3 + 3 = 6 (left: 3 6 9)\n6 * 3 = 18 (left: 9 18)\n18 / 9 = 2 (left: 2 18)\n2 * 3 = 6 (left: 6 18)\n6 * 4 = 24 (left: 24)\nAnswer: (((3 + 3) * 3) || + 9) * 4 = 24",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * (1 + 5)) * 8 = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n5 - 3 = 2 (left: 2 21)\n2 * 21 = 42 (left: 42)\n42 / 2 = 21 (left: 21)\n21 - 21 = 0 (left: 0)\n0 + 24 = 24 (left: 24)\nAnswer: (((",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * (8 - 5) = 24 || Input: 3 3 3 3\nSteps:\n3 + 3 = 6 (left: 3 3 6)\n6 * 3 = 18 (left: 3 18)\n18 / 3 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36)\nAnswer: ((3 + 3) * 3) - 3 = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * (8 - 5) = 24 || Input: 3 3 3 9\nSteps:\n3 * 3 = 9 (left: 3 9 9)\n9 - 3 = 6 (left: 6 9)\n6 * 9 = 54 (left: 54)\nAnswer: (3 * 3) * (9 - 3) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * (8 - 5) = 24 || Input: 3 3 3 9\nSteps:\n3 + 3 = 6 (left: 3 6 9)\n6 * 3 = 18 (left: 9 18)\n18 / 9 = 2 (left: 2 18)\n2 * 3 = 6 (left: 6 18)\n6 * 4 = 24 (left: 24)\nAnswer: (((3 + 3) * 3) || * 2) * 4 = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 - 5) * (1 * 8) = 24 || Input: 3 3 4 7\nSteps:\n3 * 7 = 21 (left: 3 4 21)\n4 + 3 = 7 (left: 7 21)\n7 * 3 = 21 (left: 21)\nAnswer: (3 * 7) - (4 + 3) = 24 || Input: 2 3 6 9\nSteps:\n3 * 9 = 27 (left: 2 6 27)\n2 + 6 = 8 (left: 8 27)\n27 - 8 = 19 (left: 19)\nAnswer: (2 + 6) * (3 * 9) = 24"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                0.003,
                60.0,
                60.0,
                60.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 7.7",
                "2 <- 1.3",
                "3 <- 5.7",
                "4 <- 2.7",
                "5 <- 2.6",
                "6 <- 7.7",
                "7 <- 7.7",
                "8 <- 5.8",
                "9 <- 6.2"
            ]
        },
        "Step 8": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * (8 - 5) = 24 || Input: 3 3 4 5\n\n3 * 4 = 12 (left: 3 5 12)\n12 - 5 = 7 (left: 3 7)\n3 * 7 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: ((3 * 4) - 5) + 3 = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * (8 - 5) = 24 || Input: 3 3 3 9\nSteps:\n3 * 3 = 9 (left: 3 9 9)\n9 - 3 = 6 (left: 6 9)\n6 * 9 = 54 (left: 54)\nAnswer: (3 * 3) * (9 - 3) = 24 || Input: 2 3 4 4\nSteps:\n3 + 4 = 7 (left: 2 4 7)\n4 - 2 = 2 (left: 2 7)\n2 * 7 = 14 (left: 14)\n4 * 14 = 56 (left: 56)\n56 / 2 = 28 (left: 28)\n28 - 4 = 24 (left: 24)\nAnswer: ((",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 8) || 7 / 8 = 0.875 (left: 0.875)",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * (8 - 5) = 24 || Input: 3 3 5 7\nSteps:\n3 + 7 = 10 (left: 3 5 10)\n5 + 3 = 8 (left: 8 10)\n8 * 3 = 24 (left: 24)\nAnswer: 3 * (5 + (7 - 3)) = 24 || Input: 2 3 4 6\nSteps:\n3 + 6 = 9 (left: 2 4 9)\n4 * 2 = 8 (left: 8 9)\n9 - 8 = 1 (left: 1 9)\n1 * 24 = 24 (left: 24)\nAnswer: (2 * 4) * ((3 + 6) - 8) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "8 - 5 = 3 (left: 1 3 8) || 8 - 1 = ",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * (8 - 5) = 24 || Input: 3 3 3 9\nSteps:\n3 * 3 = 9 (left: 3 9 9)\n9 - 3 = 6 (left: 6 9)\n6 * 9 = 54 (left: 54)\nAnswer: (3 * 3) * (9 - 3) = 24 || Input: 2 3 4 6\nSteps:\n4 + 6 = 10 (left: 2 3 10)\n3 * 10 = 30 (left: 2 30)\n30 / 2 = 15 (left: 15)\n15 - 3 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((4 + 6) * 3) - 3 *",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * (8 - 5) = 24 || Input: 3 3 3 9\nSteps:\n3 * 3 = 9 (left: 3 9 9)\n9 - 3 = 6 (left: 6 9)\n6 * 9 = 54 (left: 54)\nAnswer: (3 * 3) * (9 - 3) = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n4 - 3 = 1 (left: 1 12)\n1 * 12 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: (2 * 6) * ((4 - 3) * 12) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 - 5) * (1 * 8) = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n12 - 6 = 6 (left: 3 6)\n6 * 3 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((5 + 7) - 6) * 3 = 24 || Input: 2 3 6 9\nSteps:\n2 * 9 = 18 (left: 3 6 18)\n6 - 3 = 3 (left: 3 18)\n3 * 18 = 54 (left: 54)\n54 / 2 = 27 (left: 27)\n27 - 3 = 24 (left: 24)\nAnswer: ((2 * 9) / 3) * (18 -",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 1 * (1 + 5) * 8 = 24 || Input: 3 3 4 7\n\n3 * 4 = 12 (left: 3 7 12)\n7 - 3 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (3 * 4) * (7 - 3) = 24"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.003,
                60.0,
                0.003,
                0.003,
                60.0,
                60.0,
                40.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.7",
                "1 <- 7.7",
                "2 <- 7.0",
                "3 <- 4.8",
                "4 <- 5.0",
                "5 <- 4.3",
                "6 <- 8.3",
                "7 <- 5.6",
                "8 <- 5.6",
                "9 <- 7.5"
            ]
        },
        "Step 9": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * (8 - 5) = 24 || Input: 3 3 5 7\nSteps:\n3 + 7 = 10 (left: 3 5 10)\n5 + 3 = 8 (left: 8 10)\n8 * 3 = 24 (left: 24)\nAnswer: 3 * (5 + (7 - 3)) = 24 || Input: 2 3 4 6\nSteps:\n3 + 6 = 9 (left: 2 4 9)\n4 * 2 = 8 (left: 8 9)\n8 * 9 = 72 (left: 72)\nAnswer: (2 * 4) * (3 + 6) = 72",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * (8 - 5) = 24 || Input: 3 3 3 9\nSteps:\n3 * 3 = 9 (left: 3 9 9)\n9 - 3 = 6 (left: 6 9)\n6 * 9 = 54 (left: 54)\nAnswer: (3 * 3) * (9 - 3) = 24 || Input: 2 3 5 6\nSteps:\n2 * 3 = 6 (left: 5 6 6)\n5 + 6 = 11 (left: 11 6)\n11 - 6 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\nAnswer: ((2 * 3) + (5 + 6)) - 6 = 24",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * (1 + 5)) * 8 = 24 || Input: 3 3 3 8\nSteps:\n3 + 3 = 6 (left: 3 6 8)\n6 * 3 = 18 (left: 8 18)\n18 - 8 = 10 (left: 10)\n10 + 10 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((3 + 3) * 3) + 8 +",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * (1 + 5)) * 8 = 24",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * (1 + 5)) * 8 = 24 || Input: 3 3 4 8\nSteps:\n3 * 8 = 24 (left: 3 4)\n3 * 4 = 12 (left: 12)\nAnswer: 3 * (3 * 8) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * (8 - 5) = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 - 3 = 13 (left: 13)\nAnswer: (3 * 7) - (5 - 3) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 / 1) * (8 - 5) = 24 || Input: 3 3 5 7\nSteps:\n3 + 7 = 10 (left: 3 5 10)\n5 + 3 = 8 (left: 8 10)\n8 * 3 = 24 (left: 24)\nAnswer: 3 * (5 + (7 - 3)) = 24 || Input: 2 3 4 6\nSteps:\n3 + 6 = 9 (left: 2 4 9)\n4 * 2 = 8 (left: 8 9)\n9 - 8 = 1 (left: 1 9)\n1 * 24 = 24 (left: 24)\nAnswer: (2 * 4) * ((3 + 6) - 8) = 24 || Input: 1 2 3 4\nSteps:\n3 + 4 = 7 (left: 1 2 7)\n2 * 7 = 14 (left: 1 14)\n14 - 1 = 13 (left: 13)\n13 * 2 = 26 (left: 26)\n26 - 2 = 24 (left: 24)\nAnswer: ((1 + (2 * (3 + 4))) * ",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 - 5) * (1 * 8) = 24 || Input: 3 3 4 7\nSteps:\n3 * 7 = 21 (left: 3 4 21)\n4 + 3 = 7 (left: 7 21)\n7 * 3 = 21 (left: 21)\nAnswer: (3 * 7) - (4 + 3) = 24 || Input: 2 3 6 8\nSteps:\n3 * 8 = 24 (left: 2 6 24)\n6 - 2 = 4 (left: 4 24)\n4 * 24 = 24 (left: 24)\nAnswer: (6 - 2) * (3 * 8) = 24",
                "8 - 5 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 - 5) * (1 * 8) = 24 || Input: 3 3 4 7\nSteps:\n3 * 7 = 21 (left: 3 4 21)\n4 + 3 = 7 (left: 7 21)\n7 * 3 = 21 (left: 21)\nAnswer: (3 * 7) - (4 + 3) = 24 || Input: 2 3 6 9\nSteps:\n3 * 9 = 27 (left: 2 6 27)\n6 - 2 = 4 (left: 4 27)\n4 + 27 = 31 (left: 31)\n31 - 7 = 24 (left: 24)\nAnswer: ((3 * 9) - (6 - 2)) + 27 = 24",
                "8 - 5 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * (1 + 5)) * 8 = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n5 - 3 = 2 (left: 2 21)\n2 * 21 = 42 (left: 42)\n42 / 2 = 21 (left: 21)\n21 - 21 = 0 (left: 0)\n0 + 24 = 24 (left: 24)\nAnswer: ((( || 3 * 7) - (5 - 3)) * 21) / 2) + 24 = 24"
            ]
        },
        "Input": "1 1 5 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "13": {
        "puzzle": "4 6 11 11",
        "Step 0": {
            "steps": [
                "11 + 4 = 15 (left: 6 11 15)",
                "6 - 4 = 2 (left: 2 11 11)",
                "4 * 6 = 24 (left: 11 11 24)",
                "11 - 6 = 5 (left: 4 5 11)",
                "11 - 4 = 7 (left: 7 11 11)",
                "4 * 6 = 24 (left: 11 11 24)",
                "4 * 6 = 24 (left: 11 11 24)",
                "11 + 4 = 15 (left: 6 11 15)",
                "6 - 4 = 2 (left: 2 11 ",
                "11 + 4 = 15 (left: 6 11 15)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                1.002,
                2.001,
                0.003,
                0.003,
                0.003,
                1.002,
                0.001,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.9",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "6 / 4 = 1.5 (left: 1.5 11 11)",
                "11 - 6 = 5 (left: 4 5 11)",
                "11 - 4 = 7 (left: 6 7 11)",
                "11 + 4 = 15 (left: 6 11 15)",
                "11 + 4 = 15 (left: 6 11 15) || 6 * 11 = 66 (left: 66 15)",
                "4 * 6 = 24 (left: 11 11 24)",
                "11 + 4 = 15 (left: 6 11 15)",
                "11",
                "11 - 4 = 7 (left: 4 7 11)",
                "11 - 6 = 5 (left: 4 5 11)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                22.0,
                1.002,
                1.002,
                0.003,
                1.002,
                0.003,
                2.001,
                1.002
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 1.2",
                "6 <- INIT",
                "7 <- 1.2",
                "8 <- 1.2",
                "9 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "11 - 4 = 7 (left: 6 7 11) || 11 - 6 = 5 (left: 5)",
                "11 - 6 = 5 (left: 4 5 11)",
                "4 * 6 = 24 (left: 11 11 24)",
                "11 + 4 = 15 (left: 6 11 15)",
                "4 * 6 = 24 (left: 11 11 24)",
                "11 - 4 = 7 (left: 6 7 11) || 6 / 7 = 0.857 (",
                "11 / 4 = 2.75 (left: 2.75 6 11)",
                "11 - 4 = 7 (left: 6 7 11) || 11 / 6 = 1.83 (left: 1.83 11)",
                "11 - 4 = 7 (left: 6 7 11) || 6 * 7 = 42 (left: 11 42)",
                "11 - 4 = 7 (left: 6 7 11) || 7 * 6 = 42 (left: 11 42)"
            ],
            "Evaluation": [
                0.002,
                3.0,
                0.003,
                1.002,
                0.003,
                0.003,
                3.0,
                2.0,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- INIT",
                "2 <- 2.6",
                "3 <- 1.2",
                "4 <- INIT",
                "5 <- 1.2",
                "6 <- 1.2",
                "7 <- 2.1",
                "8 <- 2.6",
                "9 <- 2.7"
            ]
        },
        "Step 3": {
            "steps": [
                "11 / 4 = 2.75 (left: 2.75 6 11) || 6 * 11 = 66 (left: 2.75 66)",
                "4 * 6 = 24 (left: 11 11 24)",
                "11 / 4 = 2.75 (left: 2.75 6 11) || 2.75 * 6 = 16.5 (left: 16.5 11)",
                "11 - 4 = 7 (left: 6 7 11) || 7 - 6 = 1 (left: 1 11)",
                "4 * 6 = 24 (left: 11 11 24)",
                "11 - 4 = 7 (left: 6 7 11) || ",
                "11 - 4 = 7 (left: 6 7 11) || 6 * 7 = 42 (left: 11 42)",
                "11 - 6 = 5 (left: 4 5 11) || 11 - 5 = 6 (left: 4 6)",
                "11 / 4 = 2.75 (left: 2.75 6 11) || 11 - 2.75 = 8.25 (left: 2.75 8.25)",
                "11 - 4 = 7 (left: 6 7 11) || 11 / 6 = 1.83 (left: 1.83 11) || 11 / 1.83 = 6.01 (left: 6.01)"
            ],
            "Evaluation": [
                2.0,
                0.003,
                1.002,
                40.0,
                1.002,
                0.003,
                0.002,
                60.0,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 1.3",
                "2 <- 3.7",
                "3 <- 3.3",
                "4 <- 3.7",
                "5 <- 3.7",
                "6 <- 3.7",
                "7 <- 3.3",
                "8 <- 3.7",
                "9 <- 3.3"
            ]
        },
        "Step 4": {
            "steps": [
                "4 * 6 = 24 (left: 11 11 24) || 11 * 11 = 121 (left: 121 24)",
                "11 + 4 = 15 (left: 6 11 15) || 6 * 11 = 66 (left: 15)",
                "11 - 6 = 5 (left: 4 5 11) || 11 - 5 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "11 - 4 = 7 (left: 6 7 11) || 7 - 6 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "11 - 6 = 5 (left: 4 5 11) || 11 - 5 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "11 - 6 = 5 (left: 4 5 11) || 11 - 5 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "11 - 6 = 5 (left: 4 5 11) || 11 - 5 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "11 - 4 = 7 (left: 6 7 11) || 7 - 6 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "11 - 6 = 5 (left: 4 5 11) || 11 - 5 = 6 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "11 - 4 = 7 (left: 6 7 11) || 7 - 6 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.001,
                0.003,
                0.0,
                60.0,
                60.0,
                0.001,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 4.6",
                "1 <- 3.7",
                "2 <- 3.3",
                "3 <- 1.3",
                "4 <- 3.7",
                "5 <- 3.3",
                "6 <- 1.2",
                "7 <- 4.5",
                "8 <- 1.2",
                "9 <- 4.6"
            ]
        },
        "Step 5": {
            "steps": [
                "11 - 6 = 5 (left: 4 5 11) || 11 - 5 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (11 - (11 - 6)) = 24",
                "11 - 6 = 5 (left: 4 5 11) || 11 - 5 = 6 (left: 4 6) || 4 - 6 = -2 (left: -2)",
                "11 - 4 = 7 (left: 6 7 11) || 7 - 6 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "11 + 4 = 15 (left: 6 11 15) || 6 * 11 = 66 (left: 15 66)",
                "11 - 6 = 5 (left: 4 5 11) || 11 - 5 = 6 (left: 4 6) || 3 + 9 = 12 (left: 12 27)",
                "11 - 4 = 7 (left: 6 7 11) || 7 - 6 = 1 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "11 - 4 = 7 (left: 6 7 11) || 11 + 6 = 17 (left: 7 17)",
                "11 - 6 = 5 (left: 4 5 11) || 11 - 5 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (11 - (11 - 6)) = 24",
                "11 - 4 = 7 (left: 6 7 11) || 6 * 7 = 42 (left: 11 42)",
                "11 - 6 = 5 (left: 4 5 11) || 11 - 5 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (11 - (11 - 6)) = 24"
            ]
        },
        "Input": "4 6 11 11",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "14": {
        "puzzle": "1 1 3 12",
        "Step 0": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 12)",
                "1 * 1 = 1 (left: 1 3 12)",
                "12 / 1 = 12 (left: 1 3 12)",
                "1 * 3 = 3 (left: 3 1 12)",
                "3 + 1 = 4 (left: 1 4 12)",
                "3 * 1 = 3 (left: 3 3 12)",
                "12 - 3 = 9 (left: 1 3 9)",
                "3 + 1 = 4 (left: 1 4 12)",
                "12 - 3 = 9 (left: 1 9 12)",
                "3 + 1 = 4 (left: 1 4 12)"
            ],
            "Evaluation": [
                2.001,
                41.0,
                22.0,
                3.0,
                2.001,
                0.003,
                0.003,
                1.002,
                2.001,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.1",
                "2 <- 0.1",
                "3 <- 0.2",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 0.1",
                "7 <- INIT",
                "8 <- 0.2",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12)",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12)",
                "12 / 1 = 12 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9)",
                "12 / 3 = 4 (left: 1 4 4)",
                "3 * 1 = 3 (left: 3 1 12)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9)",
                "12 / 3 = 4 (left: 1 4 ",
                "12 / 1 = 12 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9)",
                "3 * 1 = 3 (left: 1 3 12)"
            ],
            "Evaluation": [
                41.0,
                20.002,
                60.0,
                60.0,
                21.001,
                21.001,
                60.0,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.0",
                "2 <- 1.2",
                "3 <- 1.0",
                "4 <- 1.6",
                "5 <- 1.2",
                "6 <- 1.6",
                "7 <- 1.2",
                "8 <- 1.8",
                "9 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 3 * 1 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 1 = 11 (left: 3 11)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9 9)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "12 / 1 = 12 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 + 12 = 14"
            ],
            "Evaluation": [
                1.002,
                40.0,
                60.0,
                1.002,
                0.001,
                0.001,
                1.002,
                60.0,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.7",
                "1 <- 1.0",
                "2 <- 2.7",
                "3 <- 2.2",
                "4 <- 1.1",
                "5 <- 2.7",
                "6 <- 1.2",
                "7 <- 2.7",
                "8 <- 2.2",
                "9 <- 0.2"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 - 2) * 12 = 24",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 - 2) * 12 = 24",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 - 2) * 12 = 24",
                "1 * 1 = 1 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 - 2) * 12 = 24",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 - 12) = 24",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 + 12) = 24",
                "12 / 1 = 12 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)"
            ],
            "Evaluation": [
                0.003,
                41.0,
                0.003,
                0.003,
                0.003,
                0.003,
                60.0,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.2",
                "2 <- 1.3",
                "3 <- 2.1",
                "4 <- 3.1",
                "5 <- 1.0",
                "6 <- 3.1",
                "7 <- 2.2",
                "8 <- 3.8",
                "9 <- 2.1"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 - 2) * 12 = 24",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 - 2) * 12 = 24",
                "12 / 1 = 12 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 1 = 11 (left:",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 - 2) * 12 = 24",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 + 12) = 24 || Input: 3 6 7 8\nSteps:\n7 + 8 = 15 (left: 3 6 15)\n6 - 3 = 3 (left: 3 15)\n3 * 15 = 45 (left: 45)\n45 - 21 = 24 (left: 24)\nAnswer: ((7 + 8) - (6 - 3)) * 15 = 24",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.002,
                0.001,
                0.002,
                0.002,
                0.003,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 1.9",
                "2 <- 1.3",
                "3 <- 3.8",
                "4 <- 1.9",
                "5 <- 0.0",
                "6 <- 1.0",
                "7 <- 3.8",
                "8 <- 3.9",
                "9 <- 1.9"
            ]
        },
        "Step 5": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36)",
                "3 * 1 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)",
                "12 / 1 = 12 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 + 12) = 24 || Input: 3 3 4 6\nSteps:\n3 + 4 = 7 (left: 3 6 7)\n7 - 3 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (3 + 4) * 6 = 24",
                "3 * 1 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 4 4)",
                "3 + 1 = 4 (left: 1 4 12) || 12 - 4 = 8 (",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 1 = 11 (left: 3 11)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 + 12) = 24 || Input: 2 3 4 6\nSteps:\n2 * 4 = 8 (left: 3 6 8)\n6 - 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (2 * 4) * (6 - 3) = 24",
                "12 / 1 = 12 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 + 4 = 5",
                "3 * 1 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)"
            ],
            "Evaluation": [
                60.0,
                21.0,
                0.003,
                60.0,
                1.002,
                0.003,
                20.002,
                40.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 1.5",
                "2 <- 1.6",
                "3 <- 4.8",
                "4 <- 5.9",
                "5 <- 3.6",
                "6 <- 5.0",
                "7 <- 5.0",
                "8 <- 1.6",
                "9 <- 0.1"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 + 12) = 24 || Overall, there are multiple ways to obtain 24 using the given numbers and basic arithmetic operations.",
                "3 * 1 = 3 (left: 3 1 12) || 12 / 3 = 4 (left: 4 12)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 + 12) = 24 || Input: 3 6 7 8\nSteps:\n7 + 8 = 15 (left: 3 6 15)\n6 - 3 = 3 (left: 3 15)\n3 * 15 = 45 (left: 45)\n45 - 21 = 24 (left: 24)\nAnswer: ((7 + 8) - (6 - 3)) * 15 = 24 || Input: 2 3 5 9\nSteps:\n5 * 3 = 15 (left: 2 9 15)\n15 - 9 = 6 (left: 2 6)\n2 * 6 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((5 * 3) - 9) * (2 * 6) = 24",
                "3 * 1 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12) || 3 + 12 = 15 (left: 15)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 - 2) * 12 = 24",
                "3 * 1 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 / 1 = 36 ",
                "3 * 1 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                60.0,
                0.003,
                0.003,
                0.003,
                60.0,
                0.002,
                40.0
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 1.2",
                "2 <- 6.7",
                "3 <- 5.1",
                "4 <- 6.0",
                "5 <- 6.0",
                "6 <- 6.7",
                "7 <- 1.8",
                "8 <- 5.0",
                "9 <- 3.1"
            ]
        },
        "Step 7": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "3 * 1 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 / 2 = 18",
                "3 * 1 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 + 12) = 24 || Overall, there are multiple ways to obtain 24 using the given numbers and basic arithmetic operations. || (1 * 1) * (3 + 12) = 24",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 + 12) = 24 || Overall, there are multiple ways to obtain 24 using the given numbers and basic arithmetic operations. || (1 * 1) * (3 + 12) = 24",
                "3 * 1 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || 36 + 2 = 38",
                "12 / 1 = 12 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "3 * 1 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || Input: 5 5 25",
                "1 * 1 = 1 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                0.0,
                60.0,
                60.0,
                0.003,
                0.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 7.4",
                "2 <- 7.5",
                "3 <- 5.1",
                "4 <- 5.3",
                "5 <- 1.3",
                "6 <- 7.4",
                "7 <- 3.9",
                "8 <- 7.5",
                "9 <- 3.9"
            ]
        },
        "Step 8": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 + 12) = 24 || Input: 3 6 5 7\nSteps:\n6 * 5 = 30 (left: 3 7 30)\n30 - 7 = 23 (left: 3 23)\n23 - 3 = 20 (left: 20)\nAnswer: (6 * 5) - (7 + 3) = 24",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 + 12) = 24 || Overall, there are multiple ways to obtain 24 using the given numbers and basic arithmetic operations. || (1 * 1) * (3 + 12) = 24 || (2 * 12) = 24\n((5 + 5) + 5) + 9 = 24\n((1 + 8 / 4) * 8) = 24\n(4 * (9 - (13 - 10))) = 24\n((12 * 2) * (10 - 9)) = 24\n((6 - 4) * (4 + 8)) = 24",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 + 12) = 24 || Overall, there are multiple ways to obtain 24 using the given numbers and basic arithmetic operations. || (1 * 1) * (3 + 12) = 24 || (1 + 3) * (12 - 1) = 24\n(3 * 12) - (1 + 1) = 24\n(12 / 3) * (1 + 1) = 24",
                "3 * 1 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 + 12) = 24 || Input: 3 3 4 6\nSteps:\n3 + 4 = 7 (left: 3 6 7)\n7 - 3 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (3 + 4) * 6 = 24 || Input: 2 3 4 6\nSteps:\n3 + 4 = 7 (left: 2 6 7)\n7 - 2 = 5 (left: 5 6)\n5 * 6 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((3 + 4) - 2) * 6 = 24",
                "12 / 1 = 12 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 + 12) = 24 || Overall, there are multiple ways to obtain 24 using the given numbers and basic arithmetic operations. || (1 * 1) * (3 + 12) = 24 || (1 + 1 + 3) * 12 = 24\n(1 + 3) * (1 + 12) = 24\n(3 * 1) * (12 - 1) = 24",
                "12 / 1 = 12 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 + 12) = 24 || Overall, there are multiple ways to obtain 24 using the given numbers and basic arithmetic operations. || (1 * 1) * (3 + 12) = 24 || (3 * 1) * (12 - 9) = 24\n(5 + 5) + 5 + 9 = 24\n(1 + 8 / 4) * 8 = 24",
                "12 / 1 = 12 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)"
            ],
            "Evaluation": [
                40.0,
                20.002,
                60.0,
                0.0,
                60.0,
                0.0,
                60.0,
                0.001,
                60.0,
                0.001
            ],
            "Resampling": [
                "0 <- 8.0",
                "1 <- 7.5",
                "2 <- 3.8",
                "3 <- 8.0",
                "4 <- 1.6",
                "5 <- 3.8",
                "6 <- 5.0",
                "7 <- 5.7",
                "8 <- 6.0",
                "9 <- 7.4"
            ]
        },
        "Step 9": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 + 12) = 24 || Input: 3 6 5 7\nSteps:\n6 * 5 = 30 (left: 3 7 30)\n30 - 7 = 23 (left: 3 23)\n23 - 3 = 20 (left: 20)\nAnswer: (6 * 5) - (7 + 3) = 24 || Input: 2 3 4 9\nSteps:\n3 * 9 = 27 (left: 2 4 27)\n4 * 2 = 8 (left: 8 27)\n27 - 8 = 19 (left: 19)\nAnswer: (3 * 9) - (4 * 2) = 24",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 + 12) = 24 || Overall, there are multiple ways to obtain 24 using the given numbers and basic arithmetic operations. || (1 * 1) * (3 + 12) = 24 || (1 + 1) * (3 * 12) = 24\n(1 + 3) * (12 - 1) = 24\n(3 - 1) * (12 * 1) = 24\n(3 * 12) / (1 + 1) = 24",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 + 12) = 24 || Input: 3 3 4 6\nSteps:\n3 + 3 = 6 (left: 4 6 6)\n6 * 4 = 24 (left: 24 6)\nAnswer: (3 + 3) * 4 + 6 = 24",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 + 12) = 24 || Input: 3 6 5 7\nSteps:\n6 * 5 = 30 (left: 3 7 30)\n30 - 7 = 23 (left: 3 23)\n23 - 3 = 20 (left: 20)\nAnswer: (6 * 5) - (7 + 3) = 24 || Input: 2 3 4 6\nSteps:\n2 * 3 = 6 (left: 4 6 6)\n6 + 4 = 10 (left: 10 6)\n10 + 6 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((2 * 3) + 4) + 6 = 24",
                "1 * 1 = 1 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 * 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 + 12) = 24 || Input: 2 3 4 6\nSteps:\n2 * 3 = 6 (left: 4 6 6)\n6 + 4 = 10 (left: 10 6)\n10 + 6 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((2 * 3) + 4) + 6 = 24",
                "3 * 1 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 + 12) = 24 || Input: 2 3 4 6\nSteps:\n2 * 4 = 8 (left: 3 6 8)\n6 - 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (2 * 4) * (6 - 3) = 24 || Input: 7 7 3 2\nSteps:\n7 - 3 = 4 (left: 4 7 2)\n4 + 2 = 6 (left: 6 7)\n6 * 7 = 42 (left: 42)\nAnswer: (7 - 3) * (4 + 2) = 24",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 + 12) = 24 || Overall, there are multiple ways to obtain 24 using the given numbers and basic arithmetic operations. || Here are a few examples:\n1. (1 * 1) * (3 + 12) = 24\n2. (3 + 1) * 12 = 24\n3. (12 * 2) / 1 = 24\n4. (12 / 3) * 8 = 24\n5. (3 * 8) - 4 = 24\n6. (12 - 3) * 2 = 24\n",
                "1 * 1 = 1 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (3 + 12) = 24 || Overall, there are multiple ways to obtain 24 using the given numbers and basic arithmetic operations. || (1 * 1) * (3 + 12) = 24 || (1 + 1) * (3 * 12) = 24"
            ]
        },
        "Input": "1 1 3 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "15": {
        "puzzle": "2 2 2 12",
        "Step 0": {
            "steps": [
                "2 * 2 = 4 (left: 2 4 12)",
                "2 * 2 = 4 (left: 4 2 12)",
                "12 - 2 = 10 (left: 2 2 10)",
                "2 / 2 = 1 (left: 1 2 12)",
                "2 / 2 = 1 (left: 1 2 12)",
                "12 - 2 = 10 (left: 2 2 10)",
                "2 * 2 = 4 (left: 4 2 12)",
                "2 * 2 = 4 (left: 2 4 12)",
                "2 * 12 = 24 (left: 2 2 ",
                "2 - 2 = 0 (left: 0 2 12)"
            ],
            "Evaluation": [
                2.0,
                2.001,
                41.0,
                60.0,
                60.0,
                2.001,
                2.001,
                0.003,
                1.0,
                21.001
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.9",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.1",
                "5 <- 0.3",
                "6 <- 0.2",
                "7 <- 0.4",
                "8 <- INIT",
                "9 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "2 / 2 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "2 - 2 = 0 (left: 0 2 12) || 12 - 2 = 10 (left: 2 10)",
                "2 * 2 = 4 (left: 4 2 12)",
                "2 / 2 = 1 (left: 1 2 12)",
                "2 * 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6)",
                "2 / 2 = 1 (left: 1 2 12) || 12 - 1 = 11 (left:",
                "12 - 2 = 10 (left: 2 2 10) || 10 - 2 = 8 (left: 2 8)",
                "2 / 2 = 1 (left: 1 2 12) || 12 * 2 = 24 (left: 1 24)",
                "2 * 2 = 4 (left: 2 4 12)",
                "2 / 2 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)"
            ],
            "Evaluation": [
                60.0,
                3.0,
                2.001,
                60.0,
                41.0,
                40.001,
                0.003,
                60.0,
                1.002,
                60.0
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 1.3",
                "2 <- 1.0",
                "3 <- 0.4",
                "4 <- 1.9",
                "5 <- 1.0",
                "6 <- 1.3",
                "7 <- 0.3",
                "8 <- INIT",
                "9 <- 1.7"
            ]
        },
        "Step 2": {
            "steps": [
                "2 / 2 = 1 (left: 1 2 12) || 12 - 1 = 11 (left: || 12 / 1 = 12 (left: 1 11)",
                "2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "2 / 2 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24 24)",
                "2 / 2 = 1 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12)",
                "2 / 2 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "2 / 2 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "2 / 2 = 1 (left: 1 2 12) || Input: 5 5 25",
                "2 / 2 = 1 (left: 1 2 12) || 12 - 1 = 11 (left: 2 11)",
                "2 * 2 = 4 (left: 4 4 12)",
                "2 / 2 = 1 (left: 1 2 12) || 12 * 2 = 24 (left: 1 24) || 24 + 1 = 25 (left: 25)"
            ],
            "Evaluation": [
                20.001,
                60.0,
                60.0,
                60.0,
                0.001,
                60.0,
                0.003,
                0.003,
                21.001,
                20.001
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- INIT",
                "2 <- 0.2",
                "3 <- 0.4",
                "4 <- 1.4",
                "5 <- 1.9",
                "6 <- 0.2",
                "7 <- 2.3",
                "8 <- 2.3",
                "9 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "12 - 2 = 10 (left: 2 2 10)",
                "12 - 2 = 10 (left: 2 2 10) || 10 / 2 = 5 (left: 2 5)",
                "2 / 2 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "2 * 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 / 2 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "12 - 2 = 10 (left: 2 2 10) || 2 / 2 = 1 (left: 1 10)",
                "2 / 2 = 1 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "2 / 2 = 1 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "2 / 2 = 1 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12)"
            ],
            "Evaluation": [
                0.001,
                3.0,
                22.0,
                60.0,
                0.003,
                0.002,
                20.001,
                0.002,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 3.3",
                "2 <- 1.3",
                "3 <- 0.2",
                "4 <- 2.0",
                "5 <- 2.2",
                "6 <- 2.5",
                "7 <- 2.2",
                "8 <- 3.3",
                "9 <- 1.9"
            ]
        },
        "Step 4": {
            "steps": [
                "2 / 2 = 1 (left: 1 2 12) || 12 * 2 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "2 / 2 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "12 - 2 = 10 (left: 2 2 10) || Input: 4 6 8",
                "2 / 2 = 1 (left: 1 2 12) || 12 - 1 = 11 (left: || 12 / 1 = 12 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "2 / 2 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24 24) || 24 + 24 = 48",
                "2 / 2 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (2 / 2) * 12 = 24",
                "2 / 2 = 1 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24 24) || 24 + 24 = 48",
                "2 / 2 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "2 / 2 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                60.0,
                0.001,
                40.0,
                0.003,
                0.001,
                0.003,
                60.0,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.3",
                "2 <- 4.2",
                "3 <- 3.6",
                "4 <- 1.9",
                "5 <- 0.3",
                "6 <- 1.4",
                "7 <- 1.4",
                "8 <- 0.3",
                "9 <- 1.3"
            ]
        },
        "Step 5": {
            "steps": [
                "2 / 2 = 1 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "2 / 2 = 1 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "12 - 2 = 10 (left: 2 2 10) || 2 / 2 = 1 (left: 1 10) || 1 / 10 = 0.1 (left: 10)",
                "2 / 2 = 1 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || Input: 4 5 2",
                "2 / 2 = 1 (left: 1 2 12) || 12 / 1 = 12 (left:",
                "2 * 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || Input: 10 5 2",
                "2 * 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.002,
                0.001,
                0.003,
                60.0,
                0.003,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 5.8",
                "2 <- 4.0",
                "3 <- 3.2",
                "4 <- 4.2",
                "5 <- 5.5",
                "6 <- 5.1",
                "7 <- 5.8",
                "8 <- 5.7",
                "9 <- 3.9"
            ]
        },
        "Step 6": {
            "steps": [
                "2 * 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "2 / 2 = 1 (left: 1 2 12) || 12 * 2 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (2 / 2) * (12 * 2) = 24",
                "12 - 2 = 10 (left: 2 2 10) || 10 / 2 = 5 (left: 2 5) || 2 + 5 = 7",
                "2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "2 / 2 = 1 (left: 1 2 12) || 12 / 1 = 12 (left: || 12 / 1 = 12 (left: 1 12)",
                "2 / 2 = 1 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (2 / (2 / 1)) * 12 = 24",
                "2 / 2 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "2 * 2 = 4 (left: 4 2 12) || 12 / 2 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 2) * (12 / 2) = 24",
                "2 / 2 = 1 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)"
            ]
        },
        "Input": "2 2 2 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "16": {
        "puzzle": "1 1 4 12",
        "Step 0": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 12)",
                "1 * 1 = 1 (left: 1 4 12)",
                "4 * 1 = 4 (left: 4 4 12)",
                "1 + 4 = 5 (left: 5 4 12)",
                "12 - 4 = 8 (left: 1 8 12)",
                "4 * 1 = 4 (left: 4 1 12)",
                "4 * 1 = 4 (left: 1 4 12)",
                "4 + 1 = 5 (left: 1 5 12)",
                "4 / 1 = 4 (left: 1 4 12)",
                "4 * 1 = 4 (left: 1 4 12)"
            ],
            "Evaluation": [
                22.0,
                1.001,
                41.0,
                1.002,
                1.002,
                1.002,
                0.003,
                1.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.0",
                "2 <- 0.0",
                "3 <- 0.2",
                "4 <- 0.2",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 12)",
                "4 + 1 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "4 + 1 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "4 * 1 = 4 (left: 4 4 12) || 12 - 4 = 8 (left: 4 8)",
                "4 * 1 = 4 (left: 4 4 12) || 12 - 4 = 8 (left: 4 8)",
                "4 * 1 = 4 (left: 4 4 12)",
                "4 + 1 = 5 (left: 1 5 12)",
                "12 / 4 = 3 (left: 1 3 ",
                "4 + 1 = 5 (left: 1 5 12)",
                "4 * 1 = 4 (left: 4 4 12) || 12 / 4 = 3 (left: 3 4)"
            ],
            "Evaluation": [
                1.002,
                1.001,
                1.002,
                0.003,
                0.003,
                1.002,
                3.0,
                0.001,
                1.001,
                20.002
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- INIT",
                "2 <- 0.0",
                "3 <- 1.9",
                "4 <- 0.2",
                "5 <- 1.9",
                "6 <- 0.0",
                "7 <- INIT",
                "8 <- 0.0",
                "9 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 12) || 4 * 4 = 16 (left: 16 12)",
                "4 * 1 = 4 (left: 4 4 12)",
                "4 + 1 = 5 (left: 1 5 12) || 12 / 5 = 2.4 (left: 1 2.4)",
                "4 * 1 = 4 (left: 4 4 12) || 12 / 4 = 3 (left: 3 4) || 3 * 4 = 12 (left: 12)",
                "4 * 1 = 4 (left: 4 4 12) || 12 - 4 = 8 (left: 4 8)",
                "4 * 1 = 4 (left: 4 4 12) || 12 / 4 = 3 (left: 3 4) || 4 / 3 = 1.33 (left: 1.33)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7)",
                "12 / 4 = 3 (left: 1 3 ",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 1 = 11 (left: 5 11)",
                "4 * 1 = 4 (left: 4 4 12) || 12 - 4 = 8 (left: 4 8)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                60.0,
                0.001,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 2.6",
                "2 <- 1.9",
                "3 <- 0.2",
                "4 <- 0.0",
                "5 <- 2.6",
                "6 <- 2.6",
                "7 <- 0.2",
                "8 <- 2.6",
                "9 <- 2.6"
            ]
        },
        "Step 3": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "4 * 1 = 4 (left: 4 4 12) || 12 / 4 = 3 (left: 3 4) || 3 - 4 = -1 (left: -1)",
                "4 * 1 = 4 (left: 4 4 12) || 4 / 4 = 1 (left: 1 12)",
                "4 + 1 = 5 (left: 1 5 12) || 12 / 5 = 2.4 (left: 1 2.4)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 * 1 = 7 (left: 7)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "4 * 1 = 4 (left: 4 4 12) || 4 * 12 = 48 (left: 48)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 - 1 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.0,
                1.0,
                0.003,
                0.001,
                0.0,
                0.003,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 2.6",
                "2 <- 2.6",
                "3 <- 1.9",
                "4 <- 0.3",
                "5 <- 0.0",
                "6 <- 0.0",
                "7 <- 2.6",
                "8 <- 2.6",
                "9 <- 0.2"
            ]
        },
        "Step 4": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "4 * 1 = 4 (left: 4 4 12) || 12 / 4 = 3 (left: 3 4) || 3 - 4 = -1 (left: -1)",
                "1 + 4 = 5 (left: 5 4 12) || 4 + 12 = 16 (left: 5 16)",
                "4 + 1 = 5 (left: 1 5 12) || 12 / 5 = 2.4 (",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 1 = 11 (left: 5 11)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 1 * 7 = 7 (left: 7)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 1 * 7 = 7 (left: 7)",
                "4 * 1 = 4 (left: 4 4 12) || 4 / 4 = 1 (left: 1 12)"
            ],
            "Evaluation": [
                41.0,
                0.001,
                0.001,
                0.0,
                0.001,
                0.003,
                0.002,
                0.0,
                0.0,
                20.001
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 1.9",
                "2 <- 4.0",
                "3 <- 2.6",
                "4 <- 4.9",
                "5 <- 4.9",
                "6 <- 4.0",
                "7 <- 2.6",
                "8 <- 2.6",
                "9 <- 2.6"
            ]
        },
        "Step 5": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60)",
                "4 * 1 = 4 (left: 4 4 12) || 12 / 4 = 3 (left: 3 4) || 4 - 3 = 1 (left: 1)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 1 * 7 = 7 (left: 7)",
                "4 * 1 = 4 (left: 4 4 12) || 4 / 4 = 1 (left: 1 12) || 1 * 12 = 12 (left: 12)",
                "4 * 1 = 4 (left: 4 4 12) || 4 / 4 = 1 (left: 1 12) || 12 * 1 = 12 (left: 12)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 60)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 1 * 7 = 7 (left: 7)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                0.003,
                0.001,
                0.002,
                0.002,
                0.003,
                0.001,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 4.9",
                "2 <- 0.0",
                "3 <- 1.0",
                "4 <- 5.0",
                "5 <- 0.2",
                "6 <- 1.9",
                "7 <- 1.9",
                "8 <- 2.6",
                "9 <- 5.0"
            ]
        },
        "Step 6": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 12) || 12 / 4 = 3 (left: 3 4) || 3 * 4 = 12 (left: 12)",
                "4 * 1 = 4 (left: 4 4 12) || 4 / 4 = 1 (left: 1 12) || 1 * 12 = 12 (left: 12)",
                "4 + 1 = 5 (left: 1 5 12) || 5 - 1 = 4 (left: 4 12)",
                "1 * 1 = 1 (left: 1 4 12) || 12 - 4 = 8 (left: 1 8)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 / 1 = 60 (left: 60)",
                "4 * 1 = 4 (left: 4 4 12) || Input: 1 8",
                "4 * 1 = 4 (left: 4 4 12) || 12 / 4 = 3 (left: 3 4) || Input: 6 2",
                "4 * 1 = 4 (left: 4 4 12) || 12 / 4 = 3 (left: 3 4) || 4 / 3 = 1.33 (left: 1.33)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 1 * 7 = 7 (left: 7)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 1 * 60 = 60 (left: 60)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                41.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.0,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 6.3",
                "2 <- INIT",
                "3 <- 2.6",
                "4 <- 4.0",
                "5 <- 6.3",
                "6 <- 5.0",
                "7 <- 2.6",
                "8 <- 0.2",
                "9 <- 6.3"
            ]
        },
        "Step 7": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 12)",
                "1 * 1 = 1 (left: 1 4 12) || 12 - 4 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "1 * 4 = 4 (left: 4 1 12)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 1 * 60 = 60 (left: 60)",
                "1 * 1 = 1 (left: 1 4 12) || 12 - 4 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)",
                "4 + 1 = 5 (left: 1 5 12) || 12 - 5 = 7 (left: 1 7) || 1 * 7 = 7 (left: 7)",
                "4 * 1 = 4 (left: 4 4 12) || 4 / 4 = 1 (left: 1 12)",
                "1 * 1 = 1 (left: 1 4 12) || 12 - 4 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                1.001,
                0.002,
                0.003,
                0.002,
                0.003,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 5.0",
                "2 <- 6.3",
                "3 <- 4.0",
                "4 <- 5.0",
                "5 <- 1.9",
                "6 <- 6.3",
                "7 <- 0.7",
                "8 <- 5.0",
                "9 <- 4.0"
            ]
        },
        "Step 8": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 12) || 4 / 4 = 1 (left: 1 12)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 60)",
                "1 * 1 = 1 (left: 1 4 12) || 12 - 4 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 1 * 60 = 60 (left: 60)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)",
                "4 * 1 = 4 (left: 4 4 12) || 12 / 4 = 3 (left: 3 4) || 4 / 3 = 1.33 (left: 1.33)",
                "1 * 1 = 1 (left: 1 4 12) || 12 - 4 = 8 (left: 1 8) || 1 * 8 = 8 (left: 8 8)",
                "4 + 1 = 5 (left: 1 5 12) || 1 * 5 = 5 (left: 5 12)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 1 * 60 = 60 (left: 60)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 1 + 60 = 61"
            ],
            "Evaluation": [
                2.001,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.002,
                20.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.9",
                "1 <- 4.9",
                "2 <- 8.7",
                "3 <- 5.0",
                "4 <- 6.3",
                "5 <- 0.2",
                "6 <- 8.7",
                "7 <- 6.3",
                "8 <- 4.0",
                "9 <- 4.0"
            ]
        },
        "Step 9": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 12) || 4 / 4 = 1 (left: 1 12) || 12 / 1 = 12 (left: 12)",
                "4 * 1 = 4 (left: 4 4 12) || 4 / 4 = 1 (left: 1 12) || 1 * 12 = 12 (left: 12)",
                "4 + 1 = 5 (left: 1 5 12) || 1 * 5 = 5 (left: 5 12) || 12 - 5 = 7 (left: 7)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 / 1 = 60 (left: 60)",
                "1 * 1 = 1 (left: 1 4 12) || 12 - 4 = 8 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 12) || 12 / 4 = 3 (left:",
                "4 + 1 = 5 (left: 1 5 12) || 1 * 5 = 5 (left: 5 12) || 12 / 5 = 2.4 (left: 2.4)",
                "1 * 1 = 1 (left: 1 4 12) || 12 - 4 = 8 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 1 * 60 = 60 (left: 60)",
                "4 + 1 = 5 (left: 1 5 12) || 5 * 12 = 60 (left: 1 60) || 60 - 1 = 59 (left: 59)"
            ]
        },
        "Input": "1 1 4 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "17": {
        "puzzle": "1 1 12 12",
        "Step 0": {
            "steps": [
                "12 / 1 = 12 (left: 1 12 12)",
                "1 * 1 = 1 (left: 1 12 12)",
                "12 - 1 = 11 (left: 1 11 12)",
                "12 - 1 = 11 (left: 1 11 12)",
                "12 + 1 = 13 (left: 1 12 13)",
                "12 - 1 = 11 (left: 1 11 12)",
                "12 - 1 = 11 (left: 1 11 12)",
                "12 + 1 = 13 (left: 1 12 13)",
                "12 / 1 = 12 (left: 1 12 ",
                "12 / 1 = 12 (left: 1 12 12)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                20.002,
                20.002,
                0.003,
                40.001,
                21.001,
                1.002,
                1.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.5",
                "2 <- 0.6",
                "3 <- INIT",
                "4 <- 0.2",
                "5 <- 0.2",
                "6 <- INIT",
                "7 <- 0.3",
                "8 <- 0.5",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 12 12) || 1 + 12 = 13 (left: 12 13)",
                "12 - 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 1 12)",
                "12 / 1 = 12 (left: 1 12 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 1 12)",
                "12 - 1 = 11 (left: 1 11 12) || 12 * 1 = 12 (left:",
                "12 + 1 = 13 (left: 1 12 13)",
                "12 - 1 = 11 (left: 1 11 12) || 11 - 11 = 0 (left: 0)",
                "12 - 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 11 12)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                1.002,
                1.002,
                2.0,
                0.002,
                0.003,
                20.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.1",
                "2 <- 0.6",
                "3 <- 0.5",
                "4 <- 0.5",
                "5 <- 1.7",
                "6 <- 0.3",
                "7 <- 0.3",
                "8 <- INIT",
                "9 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 1 = 11 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "1 * 1 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 * 1 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 - 11 = 0 (left: 0) || There are no possible next steps as there are no numbers given in the input.",
                "12 - 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 12 / 1 = 12 (left: 11 12)",
                "12 / 1 = 12 (left: 1 12 12)",
                "12 - 1 = 11 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)"
            ],
            "Evaluation": [
                0.003,
                40.001,
                0.002,
                0.001,
                0.002,
                0.003,
                0.001,
                0.003,
                41.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.1",
                "2 <- 1.7",
                "3 <- 2.1",
                "4 <- 0.5",
                "5 <- INIT",
                "6 <- 1.7",
                "7 <- 0.1",
                "8 <- 2.1",
                "9 <- 2.8"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 1 = 11 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "1 * 1 = 1 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 - 11 = 0 (left: 0) || No possible next steps as there is no input given.",
                "1 * 1 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 - 1 = 11 (left: 1 11 12) || Possible next steps:",
                "1 * 12 = 12 (left: 12 12 12)",
                "12 - 1 = 11 (left: 1 11 12) || 11 - 11 = 0 (left: 0) || There are no possible next steps with the input 0.",
                "1 * 1 = 1 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "1 * 1 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 / 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                1.002,
                60.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 3.1",
                "2 <- 2.8",
                "3 <- 3.1",
                "4 <- 2.8",
                "5 <- 2.1",
                "6 <- 3.9",
                "7 <- 3.9",
                "8 <- 2.8",
                "9 <- 0.3"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "1 * 1 = 1 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 / 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "1 * 1 = 1 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 / 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "1 * 1 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 / 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 / 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "12 - 1 = 11 (left: 1 11 12) || 12 / 1 = 12 (left: 11 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                0.002,
                60.0,
                0.002,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 2.1",
                "2 <- 3.1",
                "3 <- 4.4",
                "4 <- 2.1",
                "5 <- 3.1",
                "6 <- 3.1",
                "7 <- 0.3",
                "8 <- 3.1",
                "9 <- 3.9"
            ]
        },
        "Step 5": {
            "steps": [
                "12 / 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 * 1 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 * 1 = 1 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 / 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "1 * 1 = 1 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "1 * 1 = 1 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 - 1 = 11 (left: 1 11 12) || 12 / 1 = 12 (left: 11 12)",
                "1 * 1 = 1 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.002,
                0.002,
                20.002,
                0.002
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 0.1",
                "2 <- 2.1",
                "3 <- 2.8",
                "4 <- 2.8",
                "5 <- 4.4",
                "6 <- 4.2",
                "7 <- INIT",
                "8 <- 3.1",
                "9 <- 3.9"
            ]
        },
        "Step 6": {
            "steps": [
                "12 / 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1) ",
                "1 * 1 = 1 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "1 * 1 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "12 / 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "12 / 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 / 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 / 1 = 12 (left: 1 12 ",
                "1 * 1 = 1 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                0.002,
                20.002,
                0.003,
                0.003,
                1.001,
                20.002,
                0.001
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 6.4",
                "2 <- 6.8",
                "3 <- 3.1",
                "4 <- 0.1",
                "5 <- 4.4",
                "6 <- 4.4",
                "7 <- 2.8",
                "8 <- 6.8",
                "9 <- 4.4"
            ]
        },
        "Step 7": {
            "steps": [
                "12 / 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 24 1)",
                "12 / 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 - 12 = 12 (left: 12 12)",
                "1 * 1 = 1 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "1 * 1 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "12 / 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 / 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 / 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "1 * 1 = 1 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24)",
                "12 / 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                20.002,
                0.003,
                20.002,
                0.003,
                0.002,
                0.003,
                40.001,
                0.002
            ],
            "Resampling": [
                "0 <- 6.8",
                "1 <- 6.8",
                "2 <- 6.4",
                "3 <- 7.8",
                "4 <- 1.4",
                "5 <- 4.4",
                "6 <- 3.1",
                "7 <- 2.1",
                "8 <- 5.8",
                "9 <- 7.4"
            ]
        },
        "Step 8": {
            "steps": [
                "1 * 1 = 1 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 12 = 144 (left: 144)",
                "1 * 1 = 1 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 12 = 144",
                "12 / 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "1 * 1 = 1 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "12 - 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 1 12) || 12 / 1 = 12 (left: 12)",
                "12 / 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "1 * 1 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 * 1 = 1 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 24 0)",
                "1 * 1 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.002,
                0.003,
                0.002,
                0.003,
                40.001,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.8",
                "1 <- 7.0",
                "2 <- 8.8",
                "3 <- 7.8",
                "4 <- 8.8",
                "5 <- 8.7",
                "6 <- 3.9",
                "7 <- 3.9",
                "8 <- 7.0",
                "9 <- 0.5"
            ]
        },
        "Step 9": {
            "steps": [
                "12 / 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "12 / 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 24 1) || 24 * 1 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 24 0) || 24 + 0 = 24",
                "1 * 1 = 1 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24) || 24 - 24 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 24 0) || 24 - 0 = 24 (left: 0 24)",
                "1 * 1 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 + 12 = 24 (left: 24 24)",
                "12 / 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 / 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 / 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 24 1) || 24 / 1 = 24 (left: 1 24)",
                "12 - 1 = 11 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)"
            ]
        },
        "Input": "1 1 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "18": {
        "puzzle": "3 3 3 8",
        "Step 0": {
            "steps": [
                "3 - 3 = 0 (left: 0 3 8)",
                "3 * 3 = 9 (left: 9 3 8)",
                "8 - 3 = 5 (left: 3 3 5)",
                "8 / 3 = 2 (left: 2 3 8)",
                "8 - 3 = 5 (left: 3 3 5)",
                "3 / 3 = 1 (left: 1 3 8)",
                "8 / 3 = 2 (left: 2 3 8)",
                "8 - 3 = 5 (left: 3 3 5)",
                "3 - 3 = 0 (left: 0 3 ",
                "8 - 3 = 5 (left: 3 3 5)"
            ],
            "Evaluation": [
                1.002,
                2.0,
                3.0,
                2.001,
                2.001,
                40.001,
                3.0,
                2.001,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- 0.6",
                "5 <- INIT",
                "6 <- 0.5",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "3 / 3 = 1 (left: 1 3 8)",
                "3 * 3 = 9 (left: 3 9 8)",
                "3 / 3 = 1 (left: 1 3 8)",
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8)",
                "8 / 3 = 2 (left: 2 3 8) || 8 / 2 = 4 (left: 4 8)",
                "3 * 3 = 9 (left: 3 8 9)",
                "3 / 3 = 1 (left: 1 3 8) || 8 / 3 = 2.67 (left: 1 2.67)",
                "8 - 3 = 5 (left: 3 3 ",
                "3 + 3 = 6 (left: 6 3 8)",
                "3 * 8 = 24 (left: 3 3 24)"
            ],
            "Evaluation": [
                41.0,
                3.0,
                40.001,
                60.0,
                0.003,
                60.0,
                0.001,
                0.003,
                1.002,
                21.001
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.2",
                "2 <- 0.5",
                "3 <- 0.8",
                "4 <- 1.0",
                "5 <- 1.0",
                "6 <- INIT",
                "7 <- 1.1",
                "8 <- 1.3",
                "9 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "3 / 3 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "3 / 3 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "3 - 3 = 0 (left: 0 3  || 3 * 0 = 0 (left: 0)",
                "3 / 3 = 1 (left: 1 3 8) || Input: 2 6 9",
                "3 / 3 = 1 (left: 1 3 8) || 1 / 3 = ",
                "3 + 3 = 6 (left: 6 3 8)",
                "3 * 3 = 9 (left: 3 9 8) || 9 - 8 = 1 (left: 1)",
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)"
            ],
            "Evaluation": [
                0.0,
                60.0,
                60.0,
                0.003,
                0.003,
                0.003,
                3.0,
                0.003,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.3",
                "2 <- 2.2",
                "3 <- INIT",
                "4 <- 2.1",
                "5 <- 1.5",
                "6 <- 0.8",
                "7 <- 1.0",
                "8 <- 1.3",
                "9 <- 2.8"
            ]
        },
        "Step 3": {
            "steps": [
                "3 / 3 = 1 (left: 1 3 8) || 3 - 1 = 2 (left: 2 8)",
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8) || 6 / 4 = 1.5 (",
                "3 / 3 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "3 / 3 = 1 (left: 1 3 8)",
                "3 / 3 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "3 * 3 = 9 (left: 3 8 9) || 3 * 8 = 24 (left: 8 9 24)",
                "3 - 3 = 0 (left: 0 3  || Input: 5 10",
                "3 / 3 = 1 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8)",
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5) ",
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * (3 * 3)) * 8 = 24"
            ],
            "Evaluation": [
                1.001,
                0.003,
                0.003,
                40.001,
                0.001,
                2.0,
                0.003,
                60.0,
                0.001,
                40.001
            ],
            "Resampling": [
                "0 <- 3.7",
                "1 <- 3.7",
                "2 <- INIT",
                "3 <- 2.1",
                "4 <- 0.5",
                "5 <- 1.2",
                "6 <- 1.2",
                "7 <- 2.1",
                "8 <- 2.1",
                "9 <- 3.9"
            ]
        },
        "Step 4": {
            "steps": [
                "3 / 3 = 1 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "3 / 3 = 1 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 + 3 = 6 (left: 6 3 8)",
                "3 / 3 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 + 3 = 11 (left: 11)",
                "3 / 3 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "3 / 3 = 1 (left: 1 3 8) || 8 - 1 = ",
                "3 / 3 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5)",
                "3 / 3 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || Input: 5 9",
                "3 / 3 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * (3 * 3)) * 8 = 24 || Input: 6 6 6 2\nSteps:\n6 * 6 = 36 (left: 6 2 36)\n6 / 2 = 3 (left: 3 36)\n3 * 36 = 108 (left: 108)\nAnswer: (6 * 6) - (6 / 2) = 24"
            ],
            "Evaluation": [
                0.001,
                0.003,
                3.0,
                0.001,
                60.0,
                0.003,
                20.001,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 4.9",
                "1 <- 2.8",
                "2 <- 2.2",
                "3 <- 4.6",
                "4 <- 1.3",
                "5 <- 4.4",
                "6 <- 3.9",
                "7 <- 4.6",
                "8 <- 1.5",
                "9 <- 0.5"
            ]
        },
        "Step 5": {
            "steps": [
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * (3 * 3)) * 8 = 24 || Input: 6 6 6 2\nSteps:\n6 * 6 = 36 (left: 6 2 36)\n6 / 2 = 3 (left: 3 36)\n3 * 36 = 108 (left: 108)\nAnswer: (6 * 6) - (6 / 2) = 24 || Input: 7 7 3 2\nSteps:\n7 + 7 = 14 (left: 3 2 14)\n14 * 3 = 42 (left: 2 42)\n42 - 2 = 40 (left: 40)\nAnswer: ((7 + 7) * 3) - 2 = 24",
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * 3) * (8 / 3) = 24",
                "3 / 3 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2.66667 (left: 2.66667)",
                "3 / 3 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "3 / 3 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2.6667 (left: 2.6667)",
                "3 * 3 = 9 (left: 9 3 8) || 9 / 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * (3 * 3)) * 8 = 24 || Input: 1 2 3 4\nSteps:\n2 * 4 = 8 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (1 * 3) * (2 * 4) = 24",
                "3 / 3 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "3 * 3 = 9 (left: 3 8 9) || 9 - 3 = 6 (left: 6 8)",
                "3 / 3 = 1 (left: 1 3 8) || 3 + 8 = 11 (left: 1 11)"
            ]
        },
        "Input": "3 3 3 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "19": {
        "puzzle": "1 1 2 6",
        "Step 0": {
            "steps": [
                "6 - 2 = 4 (left: 1 2 4)",
                "1 * 1 = 1 (left: 1 2 6)",
                "6 / 2 = 3 (left: 1 3 6)",
                "6 / 2 = 3 (left: 1 2 3)",
                "6 - 2 = 4 (left: 1 4 6)",
                "2 * 1 = 2 (left: 2 2 6)",
                "6 -",
                "2 * 1 = 2 (left: 1 2 6)",
                "6 - 2 = 4 (left: 1 2 4)",
                "2 + 1 = 3 (left: 1 3 6)"
            ],
            "Evaluation": [
                0.003,
                1.001,
                22.0,
                1.002,
                60.0,
                60.0,
                0.003,
                1.001,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.5",
                "2 <- 0.5",
                "3 <- 0.5",
                "4 <- 0.9",
                "5 <- 0.4",
                "6 <- INIT",
                "7 <- 0.2",
                "8 <- 0.4",
                "9 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6)",
                "2 * 1 = 2 (left: 2 2 6) || Possible",
                "2 * 1 = 2 (left: 2 2 6) || 4 / 2 = 2 (",
                "2 * 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6)",
                "2 + 1 = 3 (left: 1 3 6) || 1 * 3 = 3 (left: 3)",
                "6 - 2 = 4 (left: 1 4 6) || Input: 3 5",
                "6 - 2 = 4 (left: 1 2 4)",
                "6 / 2 = 3 (left: 1 3 6) || 6 / 3 = 2 (left: 1 2)",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "6 / 2 = 3 (left: 1 3 6) || 1 * 3 = 3 (left: 3)"
            ],
            "Evaluation": [
                40.0,
                0.003,
                0.003,
                60.0,
                0.0,
                0.003,
                2.001,
                0.002,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 0.5",
                "2 <- 1.3",
                "3 <- 0.4",
                "4 <- 0.5",
                "5 <- 0.4",
                "6 <- 0.4",
                "7 <- 1.0",
                "8 <- 0.5",
                "9 <- 0.5"
            ]
        },
        "Step 2": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "2 * 1 = 2 (left: 2 2 6) || 4 * 4 = 16 (left: 4",
                "2 * 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "2 * 1 = 2 (left: 2 2 6) || Possible next steps:",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 1 = ",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "2 * 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6)",
                "2 * 1 = 2 (left: 2 2 6) || Possible next steps:"
            ],
            "Evaluation": [
                0.001,
                0.001,
                0.003,
                2.001,
                0.003,
                0.003,
                0.002,
                0.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- INIT",
                "2 <- 1.3",
                "3 <- 2.8",
                "4 <- 2.8",
                "5 <- 1.0",
                "6 <- 0.5",
                "7 <- 1.0",
                "8 <- 0.4",
                "9 <- 0.5"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)",
                "2 * 1 = 2 (left: 2 2 6)",
                "2 * 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "2 * 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "2 * 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 * 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2 6)",
                "2 * 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.003,
                0.003,
                0.002,
                0.001,
                20.002,
                0.001,
                2.001,
                0.001
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 2.8",
                "2 <- 3.1",
                "3 <- 2.8",
                "4 <- 3.1",
                "5 <- 0.4",
                "6 <- 1.0",
                "7 <- 0.4",
                "8 <- 3.8",
                "9 <- 0.5"
            ]
        },
        "Step 4": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 3 2)",
                "2 * 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "2 * 1 = 2 (left: 2 2 6) || 4 + 4 = 8 (left:",
                "2 * 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "2 * 1 = 2 (left: 2 2 6) || Input: 4 5 10",
                "6 - 2 = 4 (left: 1 4 6) || Input: 2 5",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4)",
                "2 * 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.0,
                0.003,
                0.003,
                0.003,
                60.0,
                60.0,
                60.0,
                1.001
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 4.7",
                "2 <- 4.6",
                "3 <- 4.8",
                "4 <- 0.5",
                "5 <- 1.0",
                "6 <- 3.1",
                "7 <- 2.8",
                "8 <- 4.6",
                "9 <- 4.7"
            ]
        },
        "Step 5": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 7 / 5 = 1.4 (left: 1.4)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 1) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "2 * 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 * 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)",
                "2 * 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 1) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 3 + 9 = 12 (left: 12 27)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                60.0,
                0.0,
                0.001,
                0.0,
                0.002,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 4.6",
                "1 <- 1.3",
                "2 <- 5.2",
                "3 <- 0.5",
                "4 <- 4.7",
                "5 <- 5.2",
                "6 <- 3.1",
                "7 <- 0.5",
                "8 <- 5.8",
                "9 <- 5.8"
            ]
        },
        "Step 6": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 1) = 24",
                "2 * 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 1) = 24 || Input: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n1 * 9 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 - 9 = 18 (left: 18)\n18 / 9 = 2 (left: 2 18)\n2",
                "2 * 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6)",
                "6 - 2 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 1) = 24 || Input: 3 3 4 6\nSteps:\n3 + 4 = 7 (left: 3 6 7)\n7 * 3 = 21 (left: 6 21)\n21 + 6 = 27 (left: 27)\n27 - 3 = 24 (left: 24)\nAnswer: ((3 + 4) * 3) - 3 = 24",
                "2 * 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)",
                "2 * 1 = 2 (left: 2 2 6) || 6 - 2 = 4 (left: 2 4)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 1) = 24 || Input: 3 3 7 7\nSteps:\n3 + 7 = 10 (left: 3 10 7)\n3 * 7 = 21 (left: 21 10)\n21 - 10 = 11 (left: 11)\n11 * 2 = 22 (left: 22)\n22 + 2 = 24 (left: 24)\nAnswer: ((3 + 7) * (3 * 7)) +",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 1) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24"
            ],
            "Evaluation": [
                60.0,
                0.003,
                60.0,
                60.0,
                0.001,
                60.0,
                20.0,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 3.6",
                "2 <- 6.5",
                "3 <- 0.5",
                "4 <- 4.6",
                "5 <- 5.2",
                "6 <- 6.3",
                "7 <- 6.3",
                "8 <- 6.2",
                "9 <- 6.2"
            ]
        },
        "Step 7": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 1) = 24 || Input: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n1 * 9 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 - 9 = 18 (left: 18)\n18 / 9 = 2 (left: 2 18)\n2 || * 24 = 24 (left: 24)\nAnswer: ((3 * 3) - 8) * 9 = 24",
                "2 * 1 = 2 (left: 2 2 6) || 6 / 2 = 3 (left: 2 3) || 10 - 5 = 5 (left: 5)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 1) = 24 || Input: 3 3 4 6\nSteps:\n3 + 4 = 7 (left: 3 6 7)\n7 * 3 = 21 (left: 6 21)\n21 + 6 = 27 (left: 27)\n27 - 3 = 24 (left: 24)\nAnswer: ((3 + 4) * 3) - 3 = 24 || Input: 2 3 4 7\nSteps:\n2 * 3 = 6 (left: 4 6 7)\n6 + 7 = 13 (left: 13)\n13 + 4 = 17 (left: 17)\n17 + 17 = 24 (left: 24)\nAnswer: ((2 * 3) + 7) + 4 = 24",
                "2 * 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 1) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 1) = 24 || Input: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n3 * 4 = 12 (left: 8 12)\n12 * 2 = 24 (left: 24)\nAnswer: (3 + 5) * (3 * 4) = 24",
                "2 * 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "2 * 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 1) = 24 || Input: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n1 * 9 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 - 9 = 18 (left: 18)\n18 / 9 = 2 (left: 2 18)\n2 || * 24 = 24\nAnswer: ((3 * 3) - 8) * 9 = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 1) = 24 || Input: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n1 * 9 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 - 9 = 18 (left: 18)\n18 / 9 = 2 (left: 2 18)\n2 || * 24 = 24 (left: 24)\nAnswer: ((3 * 3) * (9 - 8)) * ((27 - 9) / 9) = 24"
            ],
            "Evaluation": [
                60.0,
                0.003,
                60.0,
                60.0,
                40.001,
                60.0,
                0.003,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 7.4",
                "2 <- 2.8",
                "3 <- 7.4",
                "4 <- 6.5",
                "5 <- 6.9",
                "6 <- 7.9",
                "7 <- 4.6",
                "8 <- 5.2",
                "9 <- 7.5"
            ]
        },
        "Step 8": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 1) = 24 || Input: 3 3 4 5\nSteps:\n3 * 5 = 15 (left: 3 4 15)\n15 - 4 = 11 (left: 3 11)\n3 * 11 = 33 (left: 33)\n33 - 9 = 24 (left: 24)\nAnswer: ((3 * 5) - 4) - 9 = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 1) = 24 || Input: 3 3 3 3\nSteps:\n3 + 3 = 6 (left: 3 3 6)\n3 * 6 = 18 (left: 3 18)\n18 + 3 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: ((3 + 3) * 6) + (3 + 3) = 24",
                "2 * 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 1) = 24 || Input: 3 3 8 8\nSteps:\n3 * 8 = 24 (left: 3 8 24)\n8 - 3 = 5 (left: 5 24)\n5 * 24 = 120 (left: 120)\nAnswer: (3 * 8) - (8 - 3) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 1) = 24 || Input: 3 3 4 6\nSteps:\n3 + 4 = 7 (left: 3 6 7)\n7 * 3 = 21 (left: 6 21)\n21 + 6 = 27 (left: 27)\n27 - 3 = 24 (left: 24)\nAnswer: ((3 + 4) * 3) - 3 = 24 || Input: 2 2 3 9\nSteps:\n2 * 3 = 6 (left: 2 6 9)\n2 + 6 = 8 (left: 8 9)\n9 - 8 = 1 (left: 1)\n1 * 24 = 24\nAnswer: ((2 * 3) + 2) * (9 - 8) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 1) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24 || Input: 2 3 6 8\nSteps:\n3 * 8 = 24 (left: 2 6 24)\n2 * 6 = 12 (left: 12 24)\n12 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (2 * 6) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 1) = 24 || Input: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n1 * 9 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 - 9 = 18 (left: 18)\n18 / 9 = 2 (left: 2 18)\n2 || * 24 = 24 (left: 24)\nAnswer: ((3 * 3) * (9 - 8)) * ((27 - 9) / 9) = 24 || Input: 2 3 4 6\nSteps:\n2 * 3 = 6 (left: 4 6 6)\n6 - 4 = 2 (left: 2 6)\n2 * 6 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((2 * 3) * (6 - 4)) * 2 = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 1) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 1) = 24 || Input: 2 3 6 8\nSteps:\n6 - 2 = 4 (left: 3 4 8)\n4 * 8 = 32 (left: 3 32)\n32 - 3 = 29 (left: 29)\nAnswer: ((6 - 2) * 8) - 3 = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 1) = 24 || Input: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n3 * 4 = 12 (left: 8 12)\n12 * 2 = 24 (left: 24)\nAnswer: (3 + 5) * (3 * 4) = 24 || Input: 2 3 6 7\nSteps:\n2 * 6 = 12 (left: 3 7 12)\n7 - 3 = 4 (left: 4 12)\n12 / 4 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 - 3 = 24 (left: 24)\nAnswer"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.003,
                60.0,
                40.0,
                40.0,
                60.0,
                60.0,
                20.0,
                40.0
            ],
            "Resampling": [
                "0 <- 6.5",
                "1 <- 2.8",
                "2 <- 6.3",
                "3 <- 7.4",
                "4 <- 7.5",
                "5 <- 6.9",
                "6 <- 8.8",
                "7 <- 7.5",
                "8 <- 4.8",
                "9 <- 4.6"
            ]
        },
        "Step 9": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 1) = 24 || Input: 3 3 4 6\nSteps:\n3 + 4 = 7 (left: 3 6 7)\n7 * 3 = 21 (left: 6 21)\n21 + 6 = 27 (left: 27)\n27 - 3 = 24 (left: 24)\nAnswer: ((3 + 4) * 3) - 3 = 24 || Input: 2 2 3 4\nSteps:\n2 * 3 = 6 (left: 2 4 6)\n2 + 4 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36)\n36 / 4 = 9 (left: 9)\n9 - 6 = 3 (left: 3)\n3 * 9 = 27 (left: 27)\n27 - ",
                "2 * 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "2 * 1 = 2 (left: 2 2 6) || 2 / 2 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 1) = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n3 * 16 = 48 (left: 48)\n48 / 2 = 24 (left: 24)\nAnswer: ((3 * 7) - 5) * 2 = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 1) = 24 || Input: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n3 * 4 = 12 (left: 8 12)\n12 * 2 = 24 (left: 24)\nAnswer: (3 + 5) * (3 * 4) = 24 || Input: 2 3 5 6\nSteps:\n5 + 3 = 8 (left: 2 6 8)\n8 * 2 = 16 (left: 6 16)\n16 - 6 = 10 (left: 10)\n10 * 2 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((5 + 3) * 2) + 4 =",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 1) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24 || Input: 2 3 5 7\nSteps:\n3 + 5 = 8 (left: 2 7 8)\n2 * 8 = 16 (left: 7 16)\n7 + 16 = 23 (left: 23)\n23 + 1 = 24 (left: 24)\nAnswer: ((2 * (3 + 5)) + 7) + 1 = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 1) = 24 || Input: 2 3 6 8\nSteps:\n6 - 2 = 4 (left: 3 4 8)\n4 * 8 = 32 (left: 3 32)\n32 - 3 = 29 (left: 29)\nAnswer: ((6 - 2) * 8) - 3 = 24 || Input: 3 3 4 8\nSteps:\n4 + 8 = 12 (left: 3 3 12)\n3 * 3 = 9 (left: 9 12)\n9 * 12 = 108 (left: 108)\nAnswer: (3 * 3) * (4 + 8) = 108",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 1) = 24 || Input: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n3 * 4 = 12 (left: 8 12)\n12 * 2 = 24 (left: 24)\nAnswer: (3 + 5) * (3 * 4) = 24 || Input: 2 3 4 6\n\n2 * 4 = 8 (left: 3 6 8)\n8 - 6 = 2 (left: 2 3)\n2 * 3 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\n\nAnswer: ((2 * 4) - 6) * 3 = 24",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2 6) || 6 - 2 = 4 (left: 1 4) || Input: 3 6",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 1) = 24"
            ]
        },
        "Input": "1 1 2 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "20": {
        "puzzle": "1 1 2 11",
        "Step 0": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10)",
                "1 + 1 = 2 (left: 2 2 11)",
                "11 - 1 = 10 (left: 1 2 10)",
                "2 * 1 = 2 (left: 2 2 11)",
                "11 - 1 = 10 (left: 1 2 10)",
                "2 * 1 = 2 (left: 2 2 11)",
                "11 - 1 = 10 (left: 1 2 10)",
                "11 - 2 = 9 (left: 1 2 9)",
                "2 * 1 = 2 (left: 2 2 ",
                "2 + 1 = 3 (left: 1 3 11)"
            ],
            "Evaluation": [
                2.001,
                41.0,
                2.001,
                0.003,
                1.002,
                21.001,
                2.001,
                1.001,
                20.002,
                1.002
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.1",
                "2 <- 0.2",
                "3 <- 0.1",
                "4 <- INIT",
                "5 <- 0.9",
                "6 <- 0.8",
                "7 <- 0.5",
                "8 <- 0.1",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 11) || 2 * 2 = 4 (left: 4 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11)",
                "11 - 1 = 10 (left: 1 2 10) || 1 * 2 = 2 (left: 2 10)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11)",
                "11 - 1 = 10 (left: 1 2 10)",
                "2 + 1 = 3 (left: 1 3 11) || 11 / 1 = 11 (left:",
                "2 * 1 = 2 (left: 2 2  || 2 / 2 = 1 (left: 1)",
                "2 * 1 = 2 (left: 2 2 11) || 11 / 2 = 5.5 (left: 2 5.5)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11)",
                "11 - 2 = 9 (left: 1 2 9)"
            ],
            "Evaluation": [
                0.003,
                40.0,
                2.0,
                40.001,
                2.001,
                20.001,
                0.002,
                1.001,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.1",
                "2 <- 0.4",
                "3 <- 0.5",
                "4 <- 1.8",
                "5 <- 1.5",
                "6 <- 1.8",
                "7 <- 1.3",
                "8 <- INIT",
                "9 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 - 2 = 0 (left: 0 11)",
                "11 - 1 = 10 (left: 1 2 10) || 2 / 1 = 2 (left: 2 10)",
                "2 * 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 1 + 11 = 12",
                "2 + 1 = 3 (left: 1 3 11) || 11 / 1 = 11 (left: || 3 / 3 = 1 (left: 1 5 2)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "2 + 1 = 3 (left: 1 3 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11)"
            ],
            "Evaluation": [
                0.001,
                0.0,
                1.0,
                20.0,
                0.003,
                2.001,
                0.0,
                0.001,
                3.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- INIT",
                "2 <- 1.8",
                "3 <- 0.1",
                "4 <- 1.1",
                "5 <- 1.3",
                "6 <- 0.5",
                "7 <- 1.5",
                "8 <- 2.9",
                "9 <- 1.8"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 1 = 2 (left: 2 2  || 2 * 2 = 4 (left: 4)",
                "2 * 1 = 2 (left: 2 2 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 1 / 11 = 0.0909090909 (left: 0.0909090909",
                "2 * 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11)",
                "2 + 1 = 3 (left: 1 3 11) || 11 / 1 = 11 (left: || 1 / 11 = 0.09090909090909091 (left: 0.09090909090909091)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                40.0,
                0.002,
                0.003,
                41.0,
                0.001,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 3.6",
                "2 <- 3.6",
                "3 <- 1.8",
                "4 <- 0.5",
                "5 <- 2.3",
                "6 <- 1.3",
                "7 <- 1.3",
                "8 <- 3.6",
                "9 <- 3.6"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "2 * 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 5 - 3 = 2 (left: 2 7)",
                "2 * 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || Input: 3 9 27",
                "2 * 1 = 2 (left: 2 2 11) || 2 - 2 = 0 (left: 0 11)",
                "2 * 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "2 * 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "2 * 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.003,
                0.0,
                0.001,
                0.001,
                0.002,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 1.3",
                "2 <- 0.5",
                "3 <- 3.6",
                "4 <- 0.8",
                "5 <- 2.3",
                "6 <- 2.9",
                "7 <- 1.1",
                "8 <- 3.6",
                "9 <- 3.3"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "2 * 1 = 2 (left: 2 2 11) || 2 + 11 = 13 (left: 2 13)",
                "2 * 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "2 * 1 = 2 (left: 2 2  || 2 - 2 = 0 (left: 0)",
                "2 * 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "2 * 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.001,
                0.003,
                0.001,
                0.002,
                0.001,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 3.3",
                "2 <- 0.8",
                "3 <- 1.3",
                "4 <- 3.3",
                "5 <- 1.3",
                "6 <- 3.3",
                "7 <- 3.3",
                "8 <- 0.1",
                "9 <- 0.8"
            ]
        },
        "Step 6": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10) || 2 * 10 = 20 (left: 1 20)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "2 * 1 = 2 (left: 2 2  || 2 / 2 = 1 (left: 1)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 2 11) || 11 / 2 = 5.5 (left: 2 5.5)",
                "2 * 1 = 2 (left: 2 2  || 2 - 2 = 0 (left: 0)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.002,
                0.002,
                0.002,
                0.002,
                0.003,
                0.002,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 3.3",
                "2 <- 3.3",
                "3 <- 1.8",
                "4 <- 3.3",
                "5 <- 1.5",
                "6 <- 6.0",
                "7 <- 0.2",
                "8 <- 2.8",
                "9 <- 6.0"
            ]
        },
        "Step 7": {
            "steps": [
                "11 - 2 = 9 (left: 1 2 9) || 9 / 2 = 4.5 (left: 1 4.5)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "2 + 1 = 3 (left: 1 3 11) || 11 / 1 = 11 (left: || 3 + 5 = 8 (left: 7 8 9)",
                "11 - 1 = 10 (left: 1 2 10) || 2 * 10 = 20 (left: 1 20) || 20 / 1 = 20 (left: 1 20)",
                "11 - 1 = 10 (left: 1 2 10) || 1 * 10 = 10 (left: 10)",
                "2 + 1 = 3 (left: 1 3 11) || 11 - 3 = 8 (left: 1 8)",
                "11 - 1 = 10 (left: 1 2 10) || 2 * 10 = 20 (left: 1 20) || 1 * 20 = 20 (left: 20)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.001,
                0.002,
                0.003,
                40.001,
                60.0,
                0.002,
                40.001,
                0.002
            ],
            "Resampling": [
                "0 <- 3.6",
                "1 <- 7.5",
                "2 <- 6.0",
                "3 <- 7.6",
                "4 <- 6.0",
                "5 <- 6.0",
                "6 <- 7.6",
                "7 <- 7.5",
                "8 <- 3.6",
                "9 <- 3.6"
            ]
        },
        "Step 8": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "2 + 1 = 3 (left: 1 3 11) || 11 / 1 = 11 (left: || 3 + 5 = 8 (left: 7 8 9) || 8 - 7 = 1 (left: 1 9)",
                "11 - 1 = 10 (left: 1 2 10) || 2 * 10 = 20 (left: 1 20) || 1 * 20 = 20 (left: 20)",
                "11 - 1 = 10 (left: 1 2 10) || 2 * 10 = 20 (left: 1 20) || 20 / 1 = 20 (left: 1 20) || 1 * 20 = 20 (left: 20)",
                "11 - 1 = 10 (left: 1 2 10) || 2 * 10 = 20 (left: 1 20) || 20 * 1 = 20 (left: 20)",
                "11 - 1 = 10 (left: 1 2 10) || 2 * 10 = 20 (left: 1 20) || 20 * 1 = 20 (left: 20)",
                "11 - 1 = 10 (left: 1 2 10) || 2 * 10 = 20 (left: 1 20) || 20 / 1 = 20 (left: 1 20) || 20 / 1 = 20 (left: 20)",
                "2 + 1 = 3 (left: 1 3 11) || 11 / 1 = 11 (left: || 3 + 5 = 8 (left: 7 8 9) || 8 / 7 = 1.1428571428571428 (left: 1.142857142857142",
                "2 * 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "2 * 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.0,
                0.003,
                0.002,
                0.002,
                0.002,
                0.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 2.3",
                "2 <- 8.1",
                "3 <- 7.5",
                "4 <- 0.1",
                "5 <- 0.8",
                "6 <- 8.1",
                "7 <- 6.0",
                "8 <- 2.9",
                "9 <- 8.1"
            ]
        },
        "Step 9": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10) || 2 * 10 = 20 (left: 1 20) || 20 / 1 = 20 (left: 20)",
                "2 * 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "2 + 1 = 3 (left: 1 3 11) || 11 / 1 = 11 (left: || 3 + 5 = 8 (left: 7 8 9) || 8 - 7 = 1 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "2 + 1 = 3 (left: 1 3 11) || 11 / 1 = 11 (left: || 3 + 5 = 8 (left: 7 8 9) || 7 * 8 = 56 (left: 9 56)",
                "1 + 1 = 2 (left: 2 2 11) || 11 - 2 = 9 (left: 2 9)",
                "2 * 1 = 2 (left: 2 2  || 2 + 2 = 4",
                "2 + 1 = 3 (left: 1 3 11) || 11 / 1 = 11 (left: || 3 + 5 = 8 (left: 7 8 9) || 8 - 7 = 1 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 2 10) || 2 * 10 = 20 (left: 1 20) || 20 / 1 = 20 (left: 20)",
                "1 + 1 = 2 (left: 2 2 11) || 2 / 2 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "2 + 1 = 3 (left: 1 3 11) || 11 / 1 = 11 (left: || 3 + 5 = 8 (left: 7 8 9) || 8 - 7 = 1 (left: 1 9) || 1 * 9 = 9 (left: 9)"
            ]
        },
        "Input": "1 1 2 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "21": {
        "puzzle": "1 2 3 4",
        "Step 0": {
            "steps": [
                "3 + 4 = 7 (left: 1 2 7)",
                "2 + 3 = 5 (left: 1 5 4)",
                "3 + 4 = 7 (left: 1 2 7)",
                "4 - 3 = 1 (left: 1 2 1)",
                "3 + 4 = 7 (left: 1 2 7)",
                "4 - 2 = 2 (left: 1 3 4)",
                "3 + 4 = 7 (left: 1 2 7)",
                "4 - 3 = 1 (left: 1 2 4)",
                "4 / 2 = 2 (left: 1 3 ",
                "4 / 2 = 2 (left: 1 3 2)"
            ],
            "Evaluation": [
                1.002,
                3.0,
                0.003,
                0.003,
                1.002,
                41.0,
                1.002,
                0.003,
                0.002,
                2.001
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.5",
                "2 <- 0.5",
                "3 <- 0.9",
                "4 <- 0.5",
                "5 <- INIT",
                "6 <- 0.5",
                "7 <- 0.1",
                "8 <- 0.0",
                "9 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "4 - 2 = 2 (left: 1 3 4) || 3 + 1 = 4 (left: 4 4)",
                "4 - 2 = 2 (left: 1 3 4) || 3 * 1 = 3 (left: 3 4)",
                "4 - 2 = 2 (left: 1 3 4) || 3 * 1 = 3 (left: 3 4)",
                "4 / 2 = 2 (left: 1 3 2) || 1 * 3 = 3 (left: 3 2)",
                "4 - 2 = 2 (left: 1 3 4) || 3 * 1 = 3 (left: 3 4)",
                "3 + 4 = 7 (left: 1 2 7)",
                "4 - 2 = 2 (left: 1 3 4) || 1 * 3 = 3 (left: 3 4)",
                "2 + 3 = 5 (left: 1 5 4) || 5 + 4 = 9 (left: 9)",
                "3 + 4 = 7 (left: 1 2 7) || 7 - 2 = 5 (left: 1 5)",
                "4 - 2 = 2 (left: 1 3 4) || 3 * 1 = 3 (left: 3 4)"
            ],
            "Evaluation": [
                0.003,
                2.0,
                22.0,
                1.001,
                41.0,
                2.001,
                40.001,
                0.002,
                0.0,
                0.001
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 1.4",
                "2 <- 1.4",
                "3 <- INIT",
                "4 <- 1.1",
                "5 <- 1.5",
                "6 <- 1.1",
                "7 <- 1.6",
                "8 <- 1.4",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "4 - 2 = 2 (left: 1 3 4) || 3 + 1 = 4 (left: 4 4)",
                "4 - 2 = 2 (left: 1 3 4) || 3 * 1 = 3 (left: 3 4) || 3 - 4 = -1 (left: -1)",
                "4 - 2 = 2 (left: 1 3 4) || 3 * 1 = 3 (left: 3 4) || 5 * 2 = 10 (left: 10 3)",
                "3 + 4 = 7 (left: 1 2 7)",
                "4 - 2 = 2 (left: 1 3 4) || 3 * 1 = 3 (left: 3 4) || 4 - 3 = 1 (left: 1)",
                "3 + 4 = 7 (left: 1 2 7) || 2 - 1 = 1 (left: 1 7)",
                "4 - 2 = 2 (left: 1 3 4) || 3 * 1 = 3 (left: 3 4) || 3 * 4 = 12 (left: 12)",
                "4 - 2 = 2 (left: 1 3 4) || 1 * 3 = 3 (left: 3 4) || 4 - 3 = 1 (left: 1)",
                "4 - 2 = 2 (left: 1 3 4) || 3 * 1 = 3 (left: 3 4) || Input: 5 5",
                "4 - 1 = 3 (left: 2 3 4)"
            ],
            "Evaluation": [
                0.003,
                0.0,
                2.001,
                1.002,
                0.003,
                20.0,
                0.002,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.4",
                "2 <- 1.4",
                "3 <- 1.4",
                "4 <- 2.9",
                "5 <- 1.6",
                "6 <- 2.9",
                "7 <- 2.9",
                "8 <- 2.9",
                "9 <- 1.1"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 3 = 6 (left: 1 6 4)",
                "4 - 2 = 2 (left: 1 3 4) || 3 * 1 = 3 (left: 3 4) || 4 - 3 = 1 (left: 1)",
                "4 - 2 = 2 (left: 1 3 4) || 3 * 1 = 3 (left: 3 4) || 5 * 7 = 35 (left: 35)",
                "4 - 2 = 2 (left: 1 3 4) || 3 * 1 = 3 (left: 3 4) || 4 - 3 = 1 (left: 1)",
                "4 - 1 = 3 (left: 2 3 4) || Input: 5 6 7",
                "4 - 2 = 2 (left: 1 3 4) || 1 * 3 = 3 (left: 3 4) || 4 / 3 = 1.33 (left: 1.33)",
                "4 - 1 = 3 (left: 2 3 4) || 4 - 2 = 2 (left: 2 3)",
                "4 - 1 = 3 (left: 2 3 4) || 4 / 2 = 2 (left: 2 2)",
                "4 - 1 = 3 (left: 2 3 4) || 4 + 2 = 6 (left: 3 6)",
                "4 - 2 = 2 (left: 1 3 4) || 3 * 1 = 3 (left: 3 4) || 4 - 3 = 1 (left: 1)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.002,
                21.0,
                2.0,
                0.002
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 0.5",
                "2 <- 1.6",
                "3 <- 2.2",
                "4 <- 3.7",
                "5 <- 3.0",
                "6 <- 3.0",
                "7 <- 3.0",
                "8 <- 1.4",
                "9 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "2 * 3 = 6 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4)",
                "4 - 2 = 2 (left: 1 3 4) || 4 / 1 = 4 (left: 4 4)",
                "4 - 2 = 2 (left: 1 3 4) || 1 * 3 = 3 (left: 3 4) || 5 * 10 = 50 (left: 50)",
                "4 - 2 = 2 (left: 1 3 4) || 3 * 1 = 3 (left: 3 4) || 5 * 2 = 10 (left: 10 3) || 10 / 3 = 3.33 (left: 3.33)",
                "4 - 1 = 3 (left: 2 3 4) || 4 / 2 = 2 (left: 2 2) || 2 + 2 = 4",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 4 = 1.5 (",
                "2 * 3 = 6 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4)",
                "2 * 3 = 6 (left: 1 6 4) || 4 - 1 = 3 (left: 3 4)",
                "4 - 2 = 2 (left: 1 3 4) || 3 * 1 = 3 (left: 3 4) || 3 * 4 = 12 (left: 12)",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                60.0,
                3.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 3.7",
                "1 <- 4.9",
                "2 <- 3.0",
                "3 <- 4.0",
                "4 <- 1.4",
                "5 <- 2.5",
                "6 <- 1.4",
                "7 <- 4.0",
                "8 <- 3.0",
                "9 <- 4.0"
            ]
        },
        "Step 5": {
            "steps": [
                "4 - 1 = 3 (left: 2 3 4) || 4 / 2 = 2 (left: 2 2) || 2 + 2 = 4",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4) || 10 - 3 = 7 (left: 7)",
                "2 * 3 = 6 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4)",
                "2 * 3 = 6 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24)",
                "4 - 2 = 2 (left: 1 3 4) || 3 * 1 = 3 (left: 3 4) || 4 - 3 = 1 (left: 1)",
                "3 + 4 = 7 (left: 1 2 7) || 2 - 1 = 1 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "4 - 2 = 2 (left: 1 3 4) || 3 * 1 = 3 (left: 3 4) || Input: 5 5",
                "2 * 3 = 6 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24)",
                "2 * 3 = 6 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4)",
                "2 * 3 = 6 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4) || 6 / 4 = 1.5 (left: 1.5)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                40.0,
                60.0,
                0.002,
                0.0,
                0.003,
                60.0,
                60.0,
                0.001
            ],
            "Resampling": [
                "0 <- 5.8",
                "1 <- 4.9",
                "2 <- 4.6",
                "3 <- 5.7",
                "4 <- 5.2",
                "5 <- 3.0",
                "6 <- 5.8",
                "7 <- 5.7",
                "8 <- 5.8",
                "9 <- 5.8"
            ]
        },
        "Step 6": {
            "steps": [
                "2 * 3 = 6 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24)",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24)",
                "2 * 3 = 6 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24)",
                "2 * 3 = 6 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24) || Answer: (1 * 6) * 4 = 24",
                "2 * 3 = 6 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4) || 6 - 4 = 2 (left: 2)",
                "2 * 3 = 6 (left: 1 6 4) || 6 / 1 = 6 (left: 6 4)",
                "2 * 3 = 6 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24)",
                "2 * 3 = 6 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24) || Answer: (1 * 2 * 3) * 4 = 24",
                "2 * 3 = 6 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4) || 6 * 4 = 24 (left: 24)",
                "2 * 3 = 6 (left: 1 6 4) || 1 * 6 = 6 (left: 6 4) || 6 - 4 = 2 (left: 2)"
            ]
        },
        "Input": "1 2 3 4",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "22": {
        "puzzle": "11 11 12 12",
        "Step 0": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12)",
                "11 / 11 = 1 (left: 1 12 12)",
                "11 * 11 = 121 (left: 12 12 121)",
                "11 * 11 = 121 (left: 12 12 121)",
                "12 + 11 = 23 (left: 11 12 23)",
                "12 - 11 = 1 (left: 12 1 1)",
                "11 * 11 = 121 (left: 12 12 121)",
                "12 - 11 = 1 (left: 1 12 12)",
                "12 / 11 = 1 (left: 11 12 ",
                "12 + 11 = 23 (left: 11 12 23)"
            ],
            "Evaluation": [
                21.001,
                0.003,
                0.003,
                0.003,
                3.0,
                21.001,
                0.003,
                1.002,
                0.001,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.0",
                "2 <- 0.5",
                "3 <- 0.5",
                "4 <- INIT",
                "5 <- 0.5",
                "6 <- INIT",
                "7 <- 0.0",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "11 / 11 = 1 (left: 1 12 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 * 1 = 11 (left: 11 12)",
                "12 - 11 = 1 (left: 12 1 1) || Possible next steps:",
                "12 - 11 = 1 (left: 12 1 1) || 12 / 1 = 12 (left: 1 12)",
                "11 * 11 = 121 (left: 12 12 121)",
                "12 - 11 = 1 (left: 12 1 1) || 1 - 1 = 0 (left:",
                "11 / 11 = 1 (left: 1 12 12)",
                "12 - 11 = 1 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "12 + 11 = 23 (left: 11 12 23)",
                "12 / 12 = 1 (left: 11 1 12)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                21.0,
                20.002,
                0.0,
                2.0,
                0.003,
                2.0,
                41.0
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 1.3",
                "2 <- 1.4",
                "3 <- 0.5",
                "4 <- 0.0",
                "5 <- 0.5",
                "6 <- 0.5",
                "7 <- 1.9",
                "8 <- 0.0",
                "9 <- 1.8"
            ]
        },
        "Step 2": {
            "steps": [
                "12 / 12 = 1 (left: 11 1 12) || 11 - 1 = 10 (left: 10 12)",
                "12 - 11 = 1 (left: 12 1 1) || 12 / 1 = 12 (left: 1 12) || 1 * 12 = 12 (left: 12)",
                "11 * 11 = 121 (left: 12 12 121) || 12 - 12 = 0 (left: 0 12 121)",
                "12 - 11 = 1 (left: 12 1 1) || 12 - 1 = 11 (left: 1 11)",
                "12 - 11 = 1 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "12 - 11 = 1 (left: 12 1 1) || 1 - 1 = 0 (left: 0)",
                "12 - 11 = 1 (left: 12 1 1) || 1 + 1 = 2 (left: 2)",
                "12 / 12 = 1 (left: 11 1 12) || 1 - 12 = -11 (left: -11 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "12 + 11 = 23 (left: 11 12 23) || 12 / 11 = 1.09 (left: 1.09 23)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                41.0,
                0.003,
                0.002,
                0.001,
                0.002,
                3.0,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.3",
                "2 <- 1.4",
                "3 <- 1.8",
                "4 <- 2.3",
                "5 <- 0.0",
                "6 <- 2.3",
                "7 <- 1.9",
                "8 <- 2.2",
                "9 <- 1.9"
            ]
        },
        "Step 3": {
            "steps": [
                "11 / 11 = 1 (left: 1 12 12)",
                "12 - 11 = 1 (left: 12 1 1) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "11 * 11 = 121 (left: 12 12 121) || 12 - 12 = 0 (left: 0 12 121)",
                "12 + 11 = 23 (left: 11 12 23) || 23 - 11 = 12 (left: 12 23)",
                "12 - 11 = 1 (left: 12 1 1) || 12 - 1 = 11 (left: 1 11) || 1 + 11 = 12",
                "12 - 11 = 1 (left: 1 11 12) || 11 * 1 = 11 (left: 11 12)",
                "12 - 11 = 1 (left: 12 1 1) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 12 = 1 (left: 11 1 12) || 1 - 11 = -10 (left: -10 12)",
                "11 * 11 = 121 (left: 12 12 121) || 12 - 12 = 0 (left: 0 12 121) || 121 - 12 = 109 (left: 0 12 109)",
                "12 / 12 = 1 (left: 11 1 12) || 11 / 1 = 11 (left: 11 12)"
            ],
            "Evaluation": [
                2.001,
                0.002,
                20.002,
                0.003,
                0.003,
                0.003,
                0.001,
                1.001,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 1.3",
                "2 <- 2.2",
                "3 <- 1.9",
                "4 <- 1.9",
                "5 <- 1.3",
                "6 <- 1.9",
                "7 <- 0.7",
                "8 <- 2.3",
                "9 <- 2.3"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "12 - 11 = 1 (left: 12 1 1) || 12 / 1 = 12 (left: 1 12) || 12 - 1 = 11 (left: 11)",
                "11 * 11 = 121 (left: 12 12 121) || 12 - 12 = 0 (left: 0 12 121) || 121 / 12 = 10.083333333333334 (left: 0 10.083333333333334)",
                "12 / 12 = 1 (left: 11 1 12) || 11 * 1 = 11 (left: 11 12)",
                "12 / 12 = 1 (left: 11 1 12) || 11 / 1 = 11 (left: 1 12)",
                "12 - 11 = 1 (left: 12 1 1) || 12 / 1 = 12 (left: 1 12) || 1 + 12 = 13",
                "12 / 12 = 1 (left: 11 1 12) || 11 - 1 = 10 (left: 10 12)",
                "12 - 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12)",
                "12 - 11 = 1 (left: 12 1 1) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 - 11 = 1 (left: 12 1 1) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                21.0,
                0.003,
                20.001,
                0.003,
                1.002,
                0.002,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 4.2",
                "2 <- 1.6",
                "3 <- 2.3",
                "4 <- 1.9",
                "5 <- 4.2",
                "6 <- 2.2",
                "7 <- 4.7",
                "8 <- 4.2",
                "9 <- 3.0"
            ]
        },
        "Step 5": {
            "steps": [
                "11 * 11 = 121 (left: 12 12 121) || 12 - 12 = 0 (left: 0 12 121) || 12 + 0 = 12 (left: 12 12 121)",
                "11 * 11 = 121 (left: 12 12 121) || 12 - 12 = 0 (left: 0 12 121) || 121 / 12 = 10.083333333333334 (left: 0 10.083333333333334) || 10.083333333333334 - 0 = 10.083333",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 12 1 1) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 / 12 = 1 (left: 11 1 12) || 11 / 1 = 11 (left: 11 12)",
                "11 * 11 = 121 (left: 12 12 121) || 12 - 12 = 0 (left: 0 12 121) || 121 / 12 = 10.083333333333334 (left: 0 10.083333333333334) || 10.083333333333334 - 0 = 10.083333",
                "11 * 11 = 121 (left: 12 12 121) || 12 - 12 = 0 (left: 0 12 121) || 121 - 12 = 109 (left: 0 12 109)",
                "12 - 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12) || 12 + 2 = 14 (left: 14)",
                "11 * 11 = 121 (left: 12 12 121) || 12 - 12 = 0 (left: 0 12 121) || 121 / 12 = 10.083333333333334 (left: 0 10.083333333333334) || 10.083333333333334 * 0 = 0 (left: 0 10.083333333333334)",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                40.001,
                0.002,
                0.002,
                0.003,
                0.002,
                0.001,
                1.002,
                60.0
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 5.9",
                "2 <- 0.0",
                "3 <- 5.9",
                "4 <- 5.2",
                "5 <- 5.9",
                "6 <- 5.2",
                "7 <- 5.9",
                "8 <- 1.3",
                "9 <- 5.9"
            ]
        },
        "Step 6": {
            "steps": [
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 1 12)",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 - 11 = 1 (left: 12 1 1) || 12 / 1 = 12 (left: 1 12) || 12 - 1 = 11 (left: 11)",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                1.0,
                0.002,
                0.003,
                20.002,
                0.002,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 1.3",
                "2 <- 2.2",
                "3 <- 2.3",
                "4 <- 4.6",
                "5 <- 5.9",
                "6 <- 2.3",
                "7 <- 5.2",
                "8 <- 5.8",
                "9 <- 4.4"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 11 = 1 (left: 12 1 1) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "12 - 11 = 1 (left: 12 1 1) || 12 / 1 = 12 (left: 1 12) || 12 - 1 = 11 (left: 11)",
                "11 * 11 = 121 (left: 12 12 121) || 12 - 12 = 0 (left: 0 12 121) || 12 / 0 is undefined",
                "12 - 11 = 1 (left: 12 1 1) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "12 / 12 = 1 (left: 11 1 12) || 11 - 1 = 10 (left: 10 12) || 10 / 12 = 0.8333 (left: 0.8333)",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 - 11 = 1 (left: 12 1 1) || 12 - 1 = 11 (left: 1 11) || Input: 5 7",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 * 11 = 121 (left: 12 12 121) || 12 - 12 = 0 (left: 0 12 121) || 121 / 12 = 10.083333333333334 (left: 0 10.083333333333334) || 10.083333333333334 * 0 = 0 (left: 0 10.083333333333334) || 10.083333333333334 - 0 = 10.083333333333334 (left: 10.083333333333334)",
                "12 / 12 = 1 (left: 11 1 12) || 11 / 1 = 11 (left: 1 12) || 12 / 1 = 12 (left: 12)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.001,
                0.003,
                0.003,
                0.003,
                40.001,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 5.9",
                "2 <- 4.2",
                "3 <- 7.7",
                "4 <- 1.9",
                "5 <- 4.4",
                "6 <- 5.2",
                "7 <- 1.3",
                "8 <- 5.9",
                "9 <- 5.8"
            ]
        },
        "Step 8": {
            "steps": [
                "12 + 11 = 23 (left: 11 12 23) || 11 * 12 = 132 (left: 23 132)",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 * 11 = 121 (left: 12 12 121) || 12 - 12 = 0 (left: 0 12 121) || 121 / 12 = 10.083333333333334 (left: 0 10.083333333333334) || 0 - 10.083333333333334 = -10.083333333",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 24 - 12 = 12 (left: 12 12)",
                "12 / 12 = 1 (left: 11 1 12) || 11 / 1 = 11 (left: 11 12)",
                "12 / 12 = 1 (left: 11 1 12) || 11 / 1 = 11 (left: 1 12) || 12 - 1 = 11 (left: 11)",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 - 11 = 1 (left: 12 1 1) || 12 / 1 = 12 (left: 1 12) || 12 - 1 = 11 (left: 11)",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 * 11 = 121 (left: 12 12 121) || 12 - 12 = 0 (left: 0 12 121) || 121 / 12 = 10.083333333333334 (left: 0 10.083333333333334) || 10.083333333333334 * 0 = 0 (left: 0 10.083333333333334) || 0 / 10.083333333333334 = 0"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.003,
                20.002,
                0.003,
                0.002,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 8.3",
                "1 <- 4.2",
                "2 <- 5.2",
                "3 <- 6.0",
                "4 <- 2.3",
                "5 <- 5.9",
                "6 <- 5.9",
                "7 <- 4.4",
                "8 <- 5.9",
                "9 <- 8.3"
            ]
        },
        "Step 9": {
            "steps": [
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 24 - 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "11 * 11 = 121 (left: 12 12 121) || 12 - 12 = 0 (left: 0 12 121) || 121 / 12 = 10.083333333333334 (left: 0 10.083333333333334) || 10.083333333333334 - 0 = 10.083333",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 24 0)",
                "12 - 11 = 1 (left: 12 1 1) || 12 - 1 = 11 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 / 12 = 1 (left: 11 1 12) || 11 / 1 = 11 (left: 1 12) || 12 - 1 = 11 (left: 11)",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 / 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 24 - 12 = 12 (left: 12 12) || 12 + 12 = 24"
            ]
        },
        "Input": "11 11 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "23": {
        "puzzle": "3 7 7 8",
        "Step 0": {
            "steps": [
                "8 - 7 = 1 (left: 3 7 1)",
                "7 / 3 = 2 (left: 2 7 8)",
                "7 - 3 = 4 (left: 4 7 8)",
                "3 * 7 = 21 (left: 7 8 21)",
                "8 + 3 = 11 (left: 7 7 11)",
                "7 - 7 = 0 (left: 3 0 8)",
                "3 * 7 = 21 (left: 7 8 21)",
                "7 / 3 = 2 (left: 2 7 8)",
                "3 * 7 = 21 (left: 7 8 ",
                "8 - 7 = 1 (left: 3 7 1)"
            ],
            "Evaluation": [
                3.0,
                1.002,
                22.0,
                2.0,
                2.001,
                41.0,
                3.0,
                3.0,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.5",
                "4 <- 0.5",
                "5 <- 0.2",
                "6 <- 0.2",
                "7 <- 0.2",
                "8 <- 0.5",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "7 / 3 = 2 (left: 2 7 8)",
                "7 + 3 = 10 (left: 7 8 10)",
                "8 - 7 = 1 (left: 3 7 1)",
                "7 - 7 = 0 (left: 3 0 8) || 8 * 3 = 24 (left: 24)",
                "7 - 7 = 0 (left: 3 0 8) || 5 + 5 = 10 (left: 10 3)",
                "7 - 3 = 4 (left: 4 7 8) || Input: 2 3 8",
                "7 - 3 = 4 (left: 4 7 8) || 8 - 7 = 1 (left: 1 8)",
                "7 - 3 = 4 (left: 4 7 8) || 8 / 4 = 2 (left: 2 8)",
                "7 - 7 = 0 (left: 3 0 8) || 8 - 3 = 5 (left: 3 5)",
                "7 - 3 = 4 (left: 4 7 8)"
            ],
            "Evaluation": [
                2.001,
                21.001,
                3.0,
                60.0,
                0.003,
                0.003,
                40.0,
                0.003,
                1.001,
                2.001
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.5",
                "2 <- 1.2",
                "3 <- INIT",
                "4 <- 0.7",
                "5 <- 0.5",
                "6 <- 0.6",
                "7 <- 1.6",
                "8 <- 0.0",
                "9 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "7 - 7 = 0 (left: 3 0 8) || 3 * 0 = 0 (left: 0 8)",
                "7 - 7 = 0 (left: 3 0 8) || 8 / 3 = 2.6666666666666665 (left: 3 2.6666666666666665)",
                "8 - 7 = 1 (left: 3 7 1) || 3 * 7 = 21 (left: 21 1)",
                "7 + 3 = 10 (left: 7 8 10)",
                "7 / 3 = 2 (left: 2 7 8) || 7 / 2 = 3.5 (left: 3.5 8)",
                "7 - 7 = 0 (left: 3 0 8) || 8 / 3 = 2.67 (left: 3 2.67)",
                "3 * 7 = 21 (left: 7 8 21) || 21 + 7 = 28 (left: 8 28)",
                "7 - 3 = 4 (left: 4 7 8) || 8 - 7 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 - 7 = 1 (left: 3 7 1) || 7 / 3 = 2 (left: 2 1)",
                "7 - 7 = 0 (left: 3 0 8) || 8 * 3 = 24 (left: 24) || Answer: 8 * (7 - 7) * 3 = 24"
            ],
            "Evaluation": [
                21.0,
                3.0,
                0.0,
                60.0,
                0.003,
                1.002,
                1.002,
                0.002,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.1",
                "2 <- 1.6",
                "3 <- 2.5",
                "4 <- 2.9",
                "5 <- 0.7",
                "6 <- 0.2",
                "7 <- 0.0",
                "8 <- 0.5",
                "9 <- 2.3"
            ]
        },
        "Step 3": {
            "steps": [
                "7 - 7 = 0 (left: 3 0 8) || 8 * 3 = 24 (left: 24) || Answer: 8 * (7 - 7) * 3 = 24",
                "7 + 3 = 10 (left: 7 8 10) || 7 * 8 = 56 (left: 10 56)",
                "7 - 3 = 4 (left: 4 7 8) || 8 - 7 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "7 - 7 = 0 (left: 3 0 8) || 8 / 3 = 2.67 (left: 3 2.67) || 3 * 2.67 = 8.01 (left: 8.01)",
                "7 - 7 = 0 (left: 3 0 8) || 8 * 3 = 24 (left: 24) || Answer: 8 * (7 - 7) * 3 = 24 || Input: 2 3 5 5\nSteps:\n2 * 5 = 10 (left: 3 5 10)\n3 + 5 = 8 (left: 8 10)\n8 * 10 = 80 (left: 80)\n80 / 3 = 24 (left: 24)\nAnswer: ((2 * 5) + (3 + 5)) * (10 / 3) = 24",
                "7 / 3 = 2 (left: 2 7 8) || 2 * 7 = 14 (left: 8 14)",
                "7 - 3 = 4 (left: 4 7 8) || 4 * 7 = 28 (left: 8 28)",
                "8 - 7 = 1 (left: 3 7 1) || 1 * 3 = 3 (left: 7 3)",
                "7 - 7 = 0 (left: 3 0 8) || 3 / 0 = undefined (left: 3 8) - division by zero is undefined",
                "7 + 3 = 10 (left: 7 8 10) || 8 - 7 = 1 (left: 1 10)"
            ],
            "Evaluation": [
                60.0,
                1.001,
                0.003,
                0.002,
                60.0,
                1.002,
                1.002,
                1.001,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 2.0",
                "2 <- 0.5",
                "3 <- 2.0",
                "4 <- 1.6",
                "5 <- 1.1",
                "6 <- 0.0",
                "7 <- 2.3",
                "8 <- 2.3",
                "9 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "7 - 7 = 0 (left: 3 0 8) || 8 * 3 = 24 (left: 24) || Answer: 8 * (7 - 7) * 3 = 24 || Input: 2 3 5 5\nSteps:\n2 * 5 = 10 (left: 3 5 10)\n3 + 5 = 8 (left: 8 10)\n8 * 10 = 80 (left: 80)\n80 / 3 = 24 (left: 24)\nAnswer: ((2 * 5) + (3 + 5)) * (10 / 3) = 24 || Input: 1 3 4 8\nSteps:\n3 * 8 = 24 (left: 1 4 24)\n1 + 4 = 5 (left: 5 24)\n5 * 24 = 120 (left: 120)\n120 / 5 = 24 (left: 24)\nAnswer: ((1 + 4) * (3 * 8)) / 5 = 24",
                "7 - 7 = 0 (left: 3 0 8) || 3 * 0 = 0 (left: 0 8) || 8 / 0 = undefined (division by zero is undefined)",
                "7 - 7 = 0 (left: 3 0 8) || 8 / 3 = 2 (left: 2 8)",
                "7 - 7 = 0 (left: 3 0 8) || 3 * 0 = 0 (left: 0 8) || 0 * 8 = 0 (left: 8)",
                "7 - 3 = 4 (left: 4 7 8) || 8 - 7 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "7 + 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8)",
                "8 - 7 = 1 (left: 3 7 1) || 3 * 7 = 21 (left: 21 1)",
                "7 + 3 = 10 (left: 7 8 10) || 7 - 8 = -1 (left: -1 10)",
                "7 + 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8)",
                "7 - 7 = 0 (left: 3 0 8) || 8 * 3 = 24 (left: 24) || Answer: 8 * (7 - 7) * 3 = 24 || Input: 2 3 6 8\nSteps:\n3 * 8 = 24 (left: 2 6 24)\n2 * 6 = 12 (left: 12 24)\n12 * 24 = 24 (left: 24)\nAnswer: (2 * 6) * (3 * 8) = 24"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                0.003,
                0.001,
                60.0,
                0.0,
                0.001,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 3.0",
                "2 <- 0.5",
                "3 <- 4.5",
                "4 <- 3.9",
                "5 <- 4.8",
                "6 <- 0.4",
                "7 <- 0.5",
                "8 <- 4.8",
                "9 <- 1.3"
            ]
        },
        "Step 5": {
            "steps": [
                "7 - 7 = 0 (left: 3 0 8) || 3 * 0 = 0 (left: 0 8) || 8 - 0 = 8 (left: 8)",
                "7 - 7 = 0 (left: 3 0 8) || 8 * 3 = 24 (left: 24) || Answer: 8 * (7 - 7) * 3 = 24 || Input: 2 3 6 8\nSteps:\n2 * 3 = 6 (left: 6 8 6)\n6 + 8 = 14 (left: 14 6)\n14 - 6 = 8 (left: 8)\n8 * 3 = 24 (left: 24)\nAnswer: ((2 * 3) + 6) * 8 = 24",
                "7 - 7 = 0 (left: 3 0 8) || 3 - 0 = 3 (left: 3 8)",
                "7 + 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "7 + 3 = 10 (left: 7 8 10) || 8 - 7 = 1 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "7 + 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 + 3 = 11 (left: 7 7 11) || 11 * 7 = 77 (left: 7 77)",
                "7 - 7 = 0 (left: 3 0 8) || 8 / 3 = 2.6666666666666665 (left: 0 2.6666666666666665)",
                "7 + 3 = 10 (left: 7 8 10) || 10 - 7 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "7 - 7 = 0 (left: 3 0 8) || 8 * 3 = 24 (left: 24) || Answer: 8 * (3 + (7 - 7)) = 24"
            ]
        },
        "Input": "3 7 7 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "24": {
        "puzzle": "1 1 13 13",
        "Step 0": {
            "steps": [
                "13 + 1 = 14 (left: 1 13 14)",
                "1 * 1 = 1 (left: 1 13 13)",
                "13 * 1 = 13 (left: 13 13 13)",
                "1 - 1 = 0 (left: 0 13 13)",
                "13 - 1 = 12 (left: 1 12 13)",
                "13 * 1 = 13 (left: 13 13 13)",
                "13 - 1 = 12 (left: 1 13 12)",
                "13 + 1 = 14 (left: 1 13 14)",
                "13 - 1 = 12 (left: 1 12 ",
                "13 - 1 = 12 (left: 1 12 13)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                20.002,
                0.003,
                0.003,
                21.001,
                1.002,
                2.0,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.3",
                "2 <- 0.6",
                "3 <- 0.0",
                "4 <- 0.3",
                "5 <- 0.3",
                "6 <- 0.8",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 13 13)",
                "1 - 1 = 0 (left: 0 13 13) || 13 - 13 = 0 (left: 0 13)",
                "13 - 1 = 12 (left: 1 13 12) || 13 / 1 = 13 (left: 13 12)",
                "13 + 1 = 14 (left: 1 13 14) || 13 * 1 = 13 (left: 13 14)",
                "1 - 1 = 0 (left: 0 13 13) || 13 * 13 = 169 (left: 0 169)",
                "1 - 1 = 0 (left: 0 13 13) || 13 * 0 = 0 (left: 13 13)",
                "13 - 1 = 12 (left: 1 12  || Input: 13 11",
                "13 / 1 = 13 (left: 1 13 ",
                "13 + 1 = 14 (left: 1 13 14)",
                "1 / 1 = 1 (left: 1 13 13)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- INIT",
                "2 <- 0.6",
                "3 <- 0.6",
                "4 <- 0.6",
                "5 <- 0.3",
                "6 <- 1.4",
                "7 <- 0.3",
                "8 <- INIT",
                "9 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "1 - 1 = 0 (left: 0 13 13) || 13 * 0 = 0 (left: 13 13)",
                "13 * 1 = 13 (left: 1 13 13)",
                "13 - 1 = 12 (left: 1 13 12) || 13 / 1 = 13 (left: 13 12)",
                "13 - 1 = 12 (left: 1 13 12) || 13 / 1 = 13 (left: 13 12)",
                "13 - 1 = 12 (left: 1 13 12) || 13 / 1 = 13 (left: 12 13)",
                "1 - 1 = 0 (left: 0 13 13) || Input: 3 5 5 9",
                "1 - 1 = 0 (left: 0 13 13) || 13 * 13 = 169 (left: 0 169) || Input: 5 7 3",
                "1 - 1 = 0 (left: 0 13 13) || 13 + 13 = 26 (left: 0 26)",
                "13 + 1 = 14 (left: 1 13 14)",
                "1 - 1 = 0 (left: 0 13 13) || 13 + 13 = 26 (left: 0 26)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.0,
                0.003,
                20.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.4",
                "2 <- INIT",
                "3 <- 0.3",
                "4 <- 0.6",
                "5 <- 0.3",
                "6 <- 1.4",
                "7 <- 0.3",
                "8 <- INIT",
                "9 <- 0.3"
            ]
        },
        "Step 3": {
            "steps": [
                "1 - 1 = 0 (left: 0 13 13) || 13 * 13 = 169 (left: 0 169) || 169 - 0 = 169 (left: 169)",
                "1 - 1 = 0 (left: 0 13 13) || 13 * 13 = 169 (left: 0 169) || 0 / 169 = 0 (left: 169)",
                "13 * 1 = 13 (left: 13 13 13)",
                "1 - 1 = 0 (left: 0 13 13) || 13 - 0 = 13 (left: 13 13)",
                "13 - 1 = 12 (left: 1 13 12) || 13 / 1 = 13 (left: 13 12)",
                "1 - 1 = 0 (left: 0 13 13) || 13 / 13 = 1 (left: 0 1)",
                "1 - 1 = 0 (left: 0 13 13) || 13 * 13 = 169 (left: 0 169) || 0 / 169 = 0 (left: 169)",
                "1 - 1 = 0 (left: 0 13 13) || 13 - 13 = 0 (left: 0 13)",
                "13 + 1 = 14 (left: 1 13 14)",
                "1 - 1 = 0 (left: 0 13 13) || 5 + 5 = 10 (left: 10 10)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                60.0,
                0.002,
                0.0,
                21.001,
                20.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 1.8",
                "2 <- 3.5",
                "3 <- 2.9",
                "4 <- 3.5",
                "5 <- 0.7",
                "6 <- 0.3",
                "7 <- INIT",
                "8 <- 2.9",
                "9 <- 0.3"
            ]
        },
        "Step 4": {
            "steps": [
                "1 - 1 = 0 (left: 0 13 13) || 13 * 0 = 0 (left: 0 13)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)",
                "1 - 1 = 0 (left: 0 13 13) || 13 / 13 = 1 (left: 0 1) || 0 - 1 = -1 (left: -1)",
                "1 - 1 = 0 (left: 0 13 13) || 13 + 13 = 26 (left: 0 26) || 26 - 26 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 13 13) || 13 / 13 = 1 (left: 0 1) || 1 / 0 = undefined",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)",
                "1 - 1 = 0 (left: 0 13 13) || 13 + 13 = 26 (left: 0 26)",
                "13 - 1 = 12 (left: 1 12 ",
                "1 - 1 = 0 (left: 0 13 13) || 13 + 13 = 26 (left: 0 26) || 0 * 26 = 0 (left: 26)",
                "1 - 1 = 0 (left: 0 13 13) || Input: 3 5 7"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.0,
                0.003,
                0.003,
                0.003,
                0.001,
                1.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 3.8",
                "2 <- 0.3",
                "3 <- 1.4",
                "4 <- 3.5",
                "5 <- 3.5",
                "6 <- 1.8",
                "7 <- 0.6",
                "8 <- 2.9",
                "9 <- 0.6"
            ]
        },
        "Step 5": {
            "steps": [
                "13 - 1 = 12 (left: 1 13 12) || 13 - 1 = 12 (left: 1 12)",
                "13 + 1 = 14 (left: 1 13 14) || 13 / 1 = 13 (left: 13 14)",
                "1 - 1 = 0 (left: 0 13 13) || 3 + 5 = 8 (left: 7 8",
                "1 - 1 = 0 (left: 0 13 13) || 13 * 13 = 169 (left: 0 169) || 0 - 169 = -169 (left: -169)",
                "1 - 1 = 0 (left: 0 13 13) || 13 / 13 = 1 (left: 0 1) || 1 / 0 = undefined (left: 0)",
                "1 - 1 = 0 (left: 0 13 13) || 13 / 13 = 1 (left: 0 1) || 5 + 5 = 10 (left: 10)",
                "13 + 1 = 14 (left: 1 13 14) || 13 - 1 = 12 (left: 12 14)",
                "13 - 1 = 12 (left: 1 13 12) || 12 - 1 = 11 (left: 1 11)",
                "1 - 1 = 0 (left: 0 13 13) || 13 + 13 = 26 (left: 0 26) || Input: 5 5 5",
                "13 - 1 = 12 (left: 1 13 12) || 1 * 13 = 13 (left: 13 12)"
            ],
            "Evaluation": [
                1.0,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                21.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.5",
                "1 <- INIT",
                "2 <- 5.7",
                "3 <- 0.8",
                "4 <- 3.9",
                "5 <- 2.9",
                "6 <- 3.9",
                "7 <- 5.7",
                "8 <- 3.9",
                "9 <- 3.5"
            ]
        },
        "Step 6": {
            "steps": [
                "1 - 1 = 0 (left: 0 13 13) || 13 / 13 = 1 (left: 0 1) || 1 * 0 = 0 (left: 0)",
                "13 * 1 = 13 (left: 13 13 13)",
                "13 - 1 = 12 (left: 1 13 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "13 - 1 = 12 (left: 1 12  || 12 - 1 = 11 (left: 11)",
                "1 - 1 = 0 (left: 0 13 13) || 5 + 5 = 10 (left: 10 10) || 10 - 10 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 13 13) || 13 + 13 = 26 (left: 0 26) || 26 - 0 = 26 (left: 26)",
                "1 - 1 = 0 (left: 0 13 13) || 5 + 5 = 10 (left: 10 10) || 10 + 10 = 20",
                "13 - 1 = 12 (left: 1 13 12) || 12 - 1 = 11 (left: 1 11) || Input: 3 5 7",
                "1 - 1 = 0 (left: 0 13 13) || 5 + 5 = 10 (left: 10 10) || 10 * 10 = 100 (left: 100)",
                "1 - 1 = 0 (left: 0 13 13) || 13 / 13 = 1 (left: 0 1) || 1 / 0 = undefined"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.001,
                0.002,
                0.002,
                0.002,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.5",
                "1 <- 3.5",
                "2 <- 1.4",
                "3 <- 2.9",
                "4 <- 3.5",
                "5 <- 0.3",
                "6 <- 3.9",
                "7 <- 3.5",
                "8 <- 3.9",
                "9 <- 5.7"
            ]
        },
        "Step 7": {
            "steps": [
                "1 - 1 = 0 (left: 0 13 13) || 13 / 13 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 13 13) || 13 / 13 = 1 (left: 0 1) || 5 + 7 = 12 (left: 3 12)",
                "1 - 1 = 0 (left: 0 13 13) || 13 * 13 = 169 (left: 0 169) || 0 / 169 = 0 (left: 169)",
                "1 - 1 = 0 (left: 0 13 13) || 13 + 13 = 26 (left: 0 26) || 26 / 0 = undefined (left: 0 26)",
                "1 - 1 = 0 (left: 0 13 13) || 13 / 13 = 1 (left: 0 1) || 1 * 0 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 13 13) || 13 / 13 = 1 (left: 0 1)",
                "1 - 1 = 0 (left: 0 13 13) || 5 + 5 = 10 (left: 10 10) || 10 + 10 = 20",
                "1 - 1 = 0 (left: 0 13 13) || 13 / 13 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 13 13) || 5 + 5 = 10 (left: 10 10) || 10 / 10 = 1 (left: 1) ",
                "13 - 1 = 12 (left: 1 13 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.001,
                0.003,
                60.0,
                0.003,
                0.002,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 5.7",
                "2 <- 7.5",
                "3 <- 5.0",
                "4 <- 3.5",
                "5 <- 7.5",
                "6 <- 0.6",
                "7 <- 5.7",
                "8 <- 7.5",
                "9 <- 3.5"
            ]
        },
        "Step 8": {
            "steps": [
                "13 + 1 = 14 (left: 1 13 14) || 13 + 1 = 14 (left: 14 14)",
                "13 - 1 = 12 (left: 1 13 12) || 12 - 1 = 11 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "1 - 1 = 0 (left: 0 13 13) || 13 / 13 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "13 - 1 = 12 (left: 1 13 12) || 13 - 1 = 12 (left: 1 12) || 1 * 12 = 12 (left: 12)",
                "1 - 1 = 0 (left: 0 13 13) || 13 / 13 = 1 (left: 0 1) || 1 / 0 = undefined (left: 0 1)",
                "1 - 1 = 0 (left: 0 13 13) || 13 / 13 = 1 (left: 0 1) || 1 / 0 = undefined",
                "13 - 1 = 12 (left: 1 13 12) || 1 * 13 = 13 (left: 12 13)",
                "13 - 1 = 12 (left: 1 13 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 - 1 = 0 (left: 0 13 13) || 13 / 13 = 1 (left: 0 1) || Input: 3 5",
                "1 - 1 = 0 (left: 0 13 13) || 13 / 13 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.002,
                60.0,
                0.003,
                0.003,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 8.4",
                "1 <- 0.7",
                "2 <- 7.5",
                "3 <- 7.5",
                "4 <- 7.5",
                "5 <- 8.4",
                "6 <- 0.6",
                "7 <- 7.5",
                "8 <- 5.7",
                "9 <- 8.4"
            ]
        },
        "Step 9": {
            "steps": [
                "1 - 1 = 0 (left: 0 13 13) || 13 / 13 = 1 (left: 0 1) || 1 / 0 = undefined (left: 0 1) || 0 * 1 = 0 (left: 0)",
                "13 + 1 = 14 (left: 1 13 14) || 1 * 13 = 13 (left: 13 14)",
                "1 - 1 = 0 (left: 0 13 13) || 13 / 13 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 13 13) || 13 / 13 = 1 (left: 0 1) || 1 - 0 = 1 (left: 1)",
                "1 - 1 = 0 (left: 0 13 13) || 13 / 13 = 1 (left: 0 1) || 1 / 0 = undefined",
                "1 - 1 = 0 (left: 0 13 13) || 13 / 13 = 1 (left: 0 1) || 1 / 0 = undefined (left: 0 1) || 1 * 0 = 0 (left: 0)",
                "13 - 1 = 12 (left: 1 13 12) || 1 * 13 = 13 (left: 13 12)",
                "1 - 1 = 0 (left: 0 13 13) || 13 / 13 = 1 (left: 0 1) || 1 / 0 = undefined",
                "13 - 1 = 12 (left: 1 13 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 - 1 = 0 (left: 0 13 13) || 13 / 13 = 1 (left: 0 1) || 1 / 0 = undefined (left: 0 1) || 0 / 1 = 0 (left: 0)"
            ]
        },
        "Input": "1 1 13 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "25": {
        "puzzle": "1 2 4 12",
        "Step 0": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8)",
                "2 * 4 = 8 (left: 1 8 12)",
                "4 * 3 = 12 (left: 1 12 12)",
                "4 * 3 = 12 (left: 1 12 12)",
                "12 - 4 = 8 (left: 1 2 8)",
                "4 * 3 = 12 (left: 1 12 12)",
                "4 * 3 = 12 (left: 1 12 12)",
                "12 - 4 = 8 (left: 1 2 8)",
                "4 + 1 = 5 (left: 2 5 ",
                "12 - 4 = 8 (left: 1 2 8)"
            ],
            "Evaluation": [
                60.0,
                2.001,
                41.0,
                20.002,
                40.001,
                40.001,
                0.003,
                60.0,
                0.001,
                22.0
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 0.5",
                "2 <- 0.9",
                "3 <- 0.9",
                "4 <- 0.2",
                "5 <- 0.7",
                "6 <- 0.4",
                "7 <- 0.3",
                "8 <- 0.2",
                "9 <- 0.7"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "4 * 3 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 1 11)",
                "12 - 4 = 8 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6)",
                "4 * 3 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "12 - 4 = 8 (left: 1 2 8) || Possible next steps:",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6)",
                "4 * 3 = 12 (left: 1 12 12) || 12 / 12 = 1 (left: 1 1)",
                "4 * 3 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "12 - 4 = 8 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)"
            ],
            "Evaluation": [
                0.002,
                40.0,
                0.003,
                60.0,
                60.0,
                0.003,
                60.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 0.9",
                "2 <- 1.6",
                "3 <- 0.0",
                "4 <- 0.4",
                "5 <- 1.4",
                "6 <- 0.3",
                "7 <- 0.9",
                "8 <- 1.3",
                "9 <- 0.0"
            ]
        },
        "Step 2": {
            "steps": [
                "4 * 3 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "12 - 4 = 8 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "4 * 3 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "4 * 3 = 12 (left: 1 12 12) || 12 - 12 = 0 (left: 1 0)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "12 - 4 = 8 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                0.002,
                60.0,
                60.0,
                0.003,
                20.002,
                40.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.6",
                "2 <- 2.3",
                "3 <- 2.7",
                "4 <- 0.4",
                "5 <- 0.5",
                "6 <- 0.2",
                "7 <- 0.7",
                "8 <- 1.6",
                "9 <- 1.6"
            ]
        },
        "Step 3": {
            "steps": [
                "4 * 3 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 + 6 = 7",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 4 = 8 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)",
                "4 * 3 = 12 (left: 1 12 12) || 12 / 1 = 12 (left:",
                "4 * 3 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "12 - 4 = 8 (left: 1 2 8) || 2 / 8 = 0.25 (left: 1 0.25)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.002,
                1.002,
                41.0,
                0.003,
                22.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 0.3",
                "2 <- 1.6",
                "3 <- 0.3",
                "4 <- 0.9",
                "5 <- 2.3",
                "6 <- 1.6",
                "7 <- 1.3",
                "8 <- 0.0",
                "9 <- 2.4"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "4 * 3 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "4 * 3 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "12 - 4 = 8 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.002,
                20.002,
                0.003,
                20.001,
                0.001,
                0.002,
                0.0,
                0.003,
                60.0,
                0.001
            ],
            "Resampling": [
                "0 <- 4.8",
                "1 <- 0.0",
                "2 <- 1.3",
                "3 <- 2.6",
                "4 <- 0.0",
                "5 <- 2.3",
                "6 <- 0.7",
                "7 <- 0.7",
                "8 <- 2.6",
                "9 <- 1.1"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "4 * 3 = 12 (left: 1 12 12) || 12 - 12 = 0 (left: 1 0) || 1 / 0 = undefined",
                "12 - 4 = 8 (left: 1 2 8) || Input: 3 5 7",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "4 * 3 = 12 (left: 1 12 12) || 12 - 12 = 0 (left: 1 0) || 1 + 0 = 1",
                "4 * 3 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.003,
                21.0,
                0.003,
                0.003,
                0.003,
                0.002,
                2.0,
                40.0,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 1.6",
                "2 <- 3.5",
                "3 <- 4.1",
                "4 <- 0.0",
                "5 <- 1.6",
                "6 <- 2.7",
                "7 <- 4.8",
                "8 <- 1.1",
                "9 <- 0.7"
            ]
        },
        "Step 6": {
            "steps": [
                "4 * 3 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "4 * 3 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: || 12 / 1 = 12 (left: )",
                "4 * 3 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 1 + 6 = 7",
                "4 * 3 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 1 11) || Input: 5 3 7 9",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.0,
                0.002,
                60.0,
                0.003,
                0.003,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 4.1",
                "2 <- 6.9",
                "3 <- 6.4",
                "4 <- 6.9",
                "5 <- 4.1",
                "6 <- 0.4",
                "7 <- 6.9",
                "8 <- 2.4",
                "9 <- 6.9"
            ]
        },
        "Step 7": {
            "steps": [
                "4 * 3 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "4 * 3 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "4 * 3 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || Input: 5 9",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                40.001,
                0.001,
                0.003,
                0.003,
                0.002,
                0.002,
                40.001,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 3.5",
                "2 <- 5.7",
                "3 <- 7.6",
                "4 <- 0.0",
                "5 <- 7.6",
                "6 <- 7.6",
                "7 <- 4.1",
                "8 <- 0.7",
                "9 <- 0.3"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "4 * 3 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: || There are no possible next steps as the equation is already solved.",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 1 * 2 = 2 (left: 2 8)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "4 * 3 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "4 * 3 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 1 11 12)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.002,
                0.002,
                0.001,
                0.002,
                0.003,
                0.003,
                60.0,
                22.0
            ],
            "Resampling": [
                "0 <- 5.7",
                "1 <- 8.8",
                "2 <- 6.9",
                "3 <- 7.6",
                "4 <- 2.6",
                "5 <- 7.0",
                "6 <- 1.6",
                "7 <- 0.2",
                "8 <- 3.5",
                "9 <- 1.4"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 4 = 8 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "12 - 4 = 8 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "4 * 3 = 12 (left: 1 12 12) || 12 - 12 = 0 (left: 1 0) || 1 + 0 = 1",
                "4 * 3 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 4 = 8 (left: 1 2 8) || 8 - 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "4 * 3 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "4 * 3 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: || There are no possible next steps as the equation 12 / 1 = 12 is already solved.",
                "4 * 3 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)"
            ]
        },
        "Input": "1 2 4 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "26": {
        "puzzle": "1 1 3 6",
        "Step 0": {
            "steps": [
                "1 / 1 = 1 (left: 1 3 6)",
                "1 * 1 = 1 (left: 1 3 6)",
                "6 - 3 = 3 (left: 1 3 3)",
                "3 * 1 = 3 (left: 3 3 6)",
                "6 - 3 = 3 (left: 1 3 3)",
                "1 * 3 = 3 (left: 3 1 6)",
                "3 * 1 = 3 (left: 3 3 6)",
                "3 + 1 = 4 (left: 1 4 6)",
                "6 / 3 = 2 (left: 1 1 ",
                "3 - 1 = 2 (left: 1 2 6)"
            ],
            "Evaluation": [
                22.0,
                21.001,
                1.002,
                3.0,
                0.001,
                21.0,
                2.001,
                60.0,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.5",
                "3 <- 0.7",
                "4 <- INIT",
                "5 <- 0.5",
                "6 <- 0.1",
                "7 <- 0.7",
                "8 <- 0.7",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 6)",
                "6 * 1 = 6 (left: 1 3 6)",
                "1 * 3 = 3 (left: 3 1 6) || 6 / 3 = 2 (left: 2 3)",
                "3 + 1 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "3 * 1 = 3 (left: 3 3 6)",
                "1 * 3 = 3 (left: 3 1 6) || 6 - 1 = 5 (left: 5",
                "1 * 1 = 1 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3)",
                "3 + 1 = 4 (left: 1 4 6) || Input: 3 9 27",
                "3 + 1 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "6 - 3 = 3 (left: 1 3 3)"
            ],
            "Evaluation": [
                20.001,
                41.0,
                0.003,
                0.003,
                3.0,
                0.002,
                21.0,
                0.003,
                0.001,
                1.002
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.6",
                "2 <- 1.6",
                "3 <- 1.0",
                "4 <- 1.0",
                "5 <- 1.1",
                "6 <- 1.1",
                "7 <- INIT",
                "8 <- 0.5",
                "9 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "6 * 1 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 3 6) || 6 / 3 = 2 (left: 2)",
                "1 * 1 = 1 (left: 1 3 6) || 6 / 3 = 2 (left: 2 3)",
                "6 * 1 = 6 (left: 1 3 6) || 6 / 3 = 2 (left: 1 2)",
                "6 * 1 = 6 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3)",
                "6 - 1 = 5 (left: 1 3 ",
                "1 * 3 = 3 (left: 3 1 6) || 6 - 3 = 3 (left: 3 3)",
                "1 * 1 = 1 (left: 1 3 6) || Input: 4 5 9"
            ],
            "Evaluation": [
                0.001,
                0.0,
                0.003,
                0.001,
                60.0,
                1.002,
                20.001,
                0.001,
                20.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 1.1",
                "2 <- 2.6",
                "3 <- 2.4",
                "4 <- 0.7",
                "5 <- 2.8",
                "6 <- 1.0",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 2.6"
            ]
        },
        "Step 3": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6)",
                "6 * 1 = 6 (left: 1 3 6) || Possible next steps:",
                "6 * 1 = 6 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 3 6) || 6 / 3 = 2 (left: 2 3) || 2 * 3 = 6 (left: 6)",
                "3 + 1 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 2 6)",
                "1 * 3 = 3 (left: 3 1 6) || 6 - 3 = 3 (left: 3 3) || 4 + 6 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 3 6) || 6 / 3 = 2 (left: 1 2)",
                "6 * 1 = 6 (left: 1 3 ",
                "3 + 1 = 4 (left: 1 4 6)",
                "6 * 1 = 6 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.001,
                0.002,
                1.002,
                0.002,
                0.003,
                0.0,
                60.0,
                0.001
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 0.7",
                "2 <- 0.5",
                "3 <- 3.0",
                "4 <- 3.8",
                "5 <- 0.7",
                "6 <- 2.4",
                "7 <- 3.8",
                "8 <- 3.0",
                "9 <- 3.8"
            ]
        },
        "Step 4": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "3 + 1 = 4 (left: 1 4 6) || 1 * 4 = 4 (left: 4)",
                "1 * 3 = 3 (left: 3 1 6) || 3 * 1 = 3 (left: 3 3)",
                "3 + 1 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || Input: 1 5 9",
                "3 + 1 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "3 + 1 = 4 (left: 1 4 6) || 6 / 1 = ",
                "1 * 1 = 1 (left: 1 3 6) || 6 / 3 = 2 (left: 2 3) || Input: 5 10 15",
                "3 + 1 = 4 (left: 1 4 6) || 4 - 1 = 3 (left: 3 6)",
                "3 + 1 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "3 + 1 = 4 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)"
            ],
            "Evaluation": [
                60.0,
                0.001,
                40.0,
                0.003,
                0.003,
                0.003,
                0.003,
                21.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 3.8",
                "2 <- 3.0",
                "3 <- 4.7",
                "4 <- 4.2",
                "5 <- 4.0",
                "6 <- 0.7",
                "7 <- 2.4",
                "8 <- 4.0",
                "9 <- 4.8"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 3 = 3 (left: 3 1 6) || 3 * 1 = 3 (left: 3 3) || 3 * 3 = 9 (left: 9)",
                "3 + 1 = 4 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "3 + 1 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 - 6 = -2 (left: -2)",
                "3 + 1 = 4 (left: 1 4 6) || 4 - 1 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18)",
                "1 * 3 = 3 (left: 3 1 6) || 3 * 1 = 3 (left: 3 3) || 3 / 3 = 1 (left: 1)",
                "3 + 1 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "3 + 1 = 4 (left: 1 4 6) || Input: 3 5 7",
                "1 * 1 = 1 (left: 1 3 6) || 6 / 3 = 2 (left: 2 3) || Input: 5 9",
                "3 + 1 = 4 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "3 + 1 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (3 + 1) * (1 * 6) = 24"
            ]
        },
        "Input": "1 1 3 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "27": {
        "puzzle": "1 1 3 9",
        "Step 0": {
            "steps": [
                "3 - 1 = 2 (left: 1 2 9)",
                "1 * 1 = 1 (left: 1 3 9)",
                "3 * 1 = 3 (left: 3 3 9)",
                "9 - 3 = 6 (left: 1 3 6)",
                "3 + 1 = 4 (left: 1 4 9)",
                "9 + 1 = 10 (left: 1 3 10)",
                "9 - 3 = 6 (left: 1 3 6)",
                "3 + 1 = 4 (left: 1 4 9)",
                "3 * 1 = 3 (left: 1 3 ",
                "9 - 3 = 6 (left: 1 6 9)"
            ],
            "Evaluation": [
                0.003,
                21.001,
                1.001,
                41.0,
                20.001,
                22.0,
                21.001,
                2.001,
                0.002,
                2.001
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 0.6",
                "2 <- 0.4",
                "3 <- 0.5",
                "4 <- 0.6",
                "5 <- 0.4",
                "6 <- 0.4",
                "7 <- 0.5",
                "8 <- INIT",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "9 - 3 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3 6)",
                "9 - 3 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3 6)",
                "3 + 1 = 4 (left: 1 4 9) || 9 / 4 = 2.25 (left: 1 2.25)",
                "9 + 1 = 10 (left: 1 3 10) || 10 - 1 = 9 (left: 3 9)",
                "9 - 3 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3)",
                "3 + 1 = 4 (left: 1 4 9) || 9 - 1 = ",
                "3 + 1 = 4 (left: 1 4 9) || 9 - 4 = 5 (left: 1 5)",
                "9 + 1 = 10 (left: 1 3 10) || 1 * 3 = 3 (left: 3 10)",
                "3 + 1 = 4 (left: 1 4 9)",
                "9 - 3 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3)"
            ],
            "Evaluation": [
                3.0,
                1.0,
                1.002,
                0.003,
                0.001,
                0.003,
                20.001,
                0.001,
                22.0,
                0.001
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 0.6",
                "2 <- 0.3",
                "3 <- 1.8",
                "4 <- 1.8",
                "5 <- 0.3",
                "6 <- 0.3",
                "7 <- INIT",
                "8 <- 1.8",
                "9 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "9 - 3 = 6 (left: 1 3 6) || 3 * 6 = 18 (left: 1 18)",
                "9 - 3 = 6 (left: 1 3 6) || Possible",
                "9 - 3 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3 6)",
                "3 + 1 = 4 (left: 1 4 9) || 1 * 4 = 4 (left: 4 9)",
                "3 + 1 = 4 (left: 1 4 9) || 9 - 4 = 5 (left: 1 5)",
                "9 - 3 = 6 (left: 1 3 6) || 1 * 6 = 6 (left: 6",
                "9 - 3 = 6 (left: 1 3 6) || 6 / 3 = 2 (left: 2 6)",
                "1 + 3 = 4 (left: 4 1 ",
                "3 + 1 = 4 (left: 1 4 9) || 9 - 4 = 5 (left: 1 5)",
                "9 - 3 = 6 (left: 1 3 6) || Possible next steps:"
            ],
            "Evaluation": [
                0.003,
                0.003,
                41.0,
                1.002,
                0.001,
                0.003,
                1.001,
                0.003,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.8",
                "1 <- 2.3",
                "2 <- 0.6",
                "3 <- 0.6",
                "4 <- 0.3",
                "5 <- 2.2",
                "6 <- 2.8",
                "7 <- 0.6",
                "8 <- 2.2",
                "9 <- 0.5"
            ]
        },
        "Step 3": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 9) || 9 - 4 = 5 (left: 1 5) || 5 - 1 = 4 (left: 4)",
                "3 + 1 = 4 (left: 1 4 9) || 1 * 4 = 4 (left: 4 9) || 9 / 4 = 2.25 (left: 2.25)",
                "9 - 3 = 6 (left: 1 3 6) || 1 * 6 = 6 (left: 3 6)",
                "9 - 3 = 6 (left: 1 3 6) || 6 - 3 = 3 (left: 1 3)",
                "9 - 3 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3)",
                "9 - 3 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3 6) || 6 - 3 = 3 (left: 3)",
                "3 + 1 = 4 (left: 1 4 9) || 9 - 4 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "9 - 3 = 6 (left: 1 3 6) || 1 * 6 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18)",
                "9 + 1 = 10 (left: 1 3 10) || 10 / 3 = 3.33 (left: 1 3.33)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.0,
                0.001,
                0.0,
                0.002,
                0.001,
                0.002,
                60.0,
                1.0
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 0.7",
                "2 <- 3.8",
                "3 <- 0.6",
                "4 <- 0.6",
                "5 <- 0.4",
                "6 <- 1.8",
                "7 <- 2.8",
                "8 <- 2.8",
                "9 <- 3.8"
            ]
        },
        "Step 4": {
            "steps": [
                "9 - 3 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "3 + 1 = 4 (left: 1 4 9) || 9 / 4 = 2.25 (left: 1 2.25)",
                "9 - 3 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "9 - 3 = 6 (left: 1 3 6) || 3 + 6 = 9 (left: 1 9)",
                "9 - 3 = 6 (left: 1 3 6) || Input: 4 2 9",
                "3 + 1 = 4 (left: 1 4 9) || 1 * 4 = 4 (left:",
                "3 + 1 = 4 (left: 1 4 9) || Input: 3 6 2",
                "3 + 1 = 4 (left: 1 4 9) || 9 - 4 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "3 + 1 = 4 (left: 1 4 9) || 9 - 4 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "9 - 3 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18) || There are no possible next steps as there are no other numbers provided to perform operations with."
            ],
            "Evaluation": [
                0.003,
                1.001,
                0.003,
                41.0,
                0.003,
                1.0,
                0.003,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.8",
                "1 <- 2.2",
                "2 <- 1.8",
                "3 <- 3.8",
                "4 <- 2.2",
                "5 <- 2.8",
                "6 <- 2.8",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 0.1"
            ]
        },
        "Step 5": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 9) || 9 - 4 = 5 (left: 1 5) || 5 - 1 = 4 (left: 4)",
                "9 - 3 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3 6) || 6 / 3 = 2 (left: 2)",
                "3 + 1 = 4 (left: 1 4 9) || 9 - 4 = 5 (left: 1 5)",
                "9 - 3 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18) || There are no possible next steps with just the number 18.",
                "9 - 3 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3 6) || 6 - 3 = 3 (left: 3)",
                "3 + 1 = 4 (left: 1 4 9) || 9 - 4 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "3 + 1 = 4 (left: 1 4 9) || 9 - 4 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "9 - 3 = 6 (left: 1 6 ",
                "3 + 1 = 4 (left: 1 4 9)",
                "1 * 1 = 1 (left: 1 3 9) || 1 * 3 = 3 (left: 3 9)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.002,
                0.003,
                0.003,
                0.002,
                0.002,
                60.0,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 4.3",
                "2 <- 2.2",
                "3 <- 4.3",
                "4 <- 0.6",
                "5 <- 5.7",
                "6 <- 2.2",
                "7 <- 2.8",
                "8 <- 1.6",
                "9 <- 2.2"
            ]
        },
        "Step 6": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 9) || 4 * 1 = 4 (left: 4 9)",
                "9 - 3 = 6 (left: 1 3 6) || 3 + 6 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "9 - 3 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3 6) || 6 - 3 = 3 (left: 3)",
                "9 - 3 = 6 (left: 1 3 6) || 3 + 6 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "9 - 3 = 6 (left: 1 3 6) || 6 / 3 = 2 (left: 1 2)",
                "9 - 3 = 6 (left: 1 6  || 1 * 6 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3 6) || 6 / 3 = 2 (left: 2)",
                "3 + 1 = 4 (left: 1 4 9) || 9 - 4 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5) ",
                "3 + 1 = 4 (left: 1 4 9) || 9 - 4 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "9 - 3 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18)"
            ],
            "Evaluation": [
                1.002,
                0.001,
                0.002,
                0.002,
                0.002,
                0.003,
                0.003,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.8",
                "1 <- 0.4",
                "2 <- 4.3",
                "3 <- 4.3",
                "4 <- 2.2",
                "5 <- 3.8",
                "6 <- 5.7",
                "7 <- 5.7",
                "8 <- 0.3",
                "9 <- 0.5"
            ]
        },
        "Step 7": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 9) || 9 - 4 = 5 (left: 1 5) || 5 - 1 = 4 (left: 4)",
                "3 + 1 = 4 (left: 1 4 9) || 9 / 4 = 2.25 (left: 1 2.25)",
                "9 - 3 = 6 (left: 1 3 6) || 3 + 6 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "9 - 3 = 6 (left: 1 3 6) || 3 + 6 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "9 - 3 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3 6) || 6 - 3 = 3 (left: 3)",
                "9 - 3 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18) || 18 / 3 = 6 (left: 6 18)",
                "9 - 3 = 6 (left: 1 6  || 6 - 1 = 5 (left: 5)",
                "9 - 3 = 6 (left: 1 6  || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 3 6) || 6 - 1 = 5 (left: 5 6)",
                "9 + 1 = 10 (left: 1 3 10) || 10 - 3 = 7 (left: 1 7)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.001,
                0.002,
                0.002,
                1.002,
                0.001,
                0.003,
                0.003,
                40.0
            ],
            "Resampling": [
                "0 <- 7.9",
                "1 <- 0.3",
                "2 <- 3.8",
                "3 <- 3.8",
                "4 <- 4.3",
                "5 <- 3.8",
                "6 <- 2.2",
                "7 <- 3.8",
                "8 <- 7.9",
                "9 <- 4.3"
            ]
        },
        "Step 8": {
            "steps": [
                "9 + 1 = 10 (left: 1 3 10) || 10 - 3 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "9 - 3 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3)",
                "9 - 3 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18) || 18 + 2 = 20 (left: 20)",
                "9 - 3 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18) || No possible next steps with the input 18.",
                "9 - 3 = 6 (left: 1 3 6) || 3 + 6 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "9 - 3 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18) || There are no possible next steps with the input of 18.",
                "9 - 3 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3 6) || 6 - 3 = 3 (left: 3)",
                "9 - 3 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18) || 18 - 8 = 10 (left: 8)",
                "9 + 1 = 10 (left: 1 3 10) || 10 - 3 = 7 (left: 1 7) || 7 / 1 = 7 (left: 7)",
                "9 - 3 = 6 (left: 1 3 6) || 3 + 6 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.002,
                0.003,
                0.001,
                0.003,
                0.002,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 5.7",
                "1 <- 4.3",
                "2 <- 2.8",
                "3 <- 3.8",
                "4 <- 0.3",
                "5 <- 2.8",
                "6 <- 2.2",
                "7 <- 4.3",
                "8 <- 0.5",
                "9 <- 3.8"
            ]
        },
        "Step 9": {
            "steps": [
                "9 - 3 = 6 (left: 1 6  || 6 / 1 = 6 (left: 6)",
                "9 - 3 = 6 (left: 1 3 6) || 3 + 6 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "3 + 1 = 4 (left: 1 4 9) || 9 - 4 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "9 - 3 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18) || 18 / 2 = 9",
                "9 - 3 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3)",
                "3 + 1 = 4 (left: 1 4 9) || 9 - 4 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "9 - 3 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18)",
                "9 - 3 = 6 (left: 1 3 6) || 3 + 6 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "9 + 1 = 10 (left: 1 3 10) || 10 - 3 = 7 (left: 1 7)",
                "9 - 3 = 6 (left: 1 3 6) || 1 * 3 = 3 (left: 3 6) || 3 * 6 = 18 (left: 18) || 18 * 8 = 144 (left: 144)"
            ]
        },
        "Input": "1 1 3 9",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "28": {
        "puzzle": "7 7 12 12",
        "Step 0": {
            "steps": [
                "12 + 7 = 19 (left: 7 12 19)",
                "7 / 7 = 1 (left: 1 12 12)",
                "7 * 12 = 84 (left: 12 19 84)",
                "12 * 7 = 84 (left: 12 12 84)",
                "12 + 7 = 19 (left: 7 12 19)",
                "7 * 7 = 49 (left: 12 12 49)",
                "7 - 7 = 0 (left: 0 12 12)",
                "12 + 7 = 19 (left: 7 12 19)",
                "12 - 7 = 5 (left: 7 5 ",
                "12 + 7 = 19 (left: 7 12 19)"
            ],
            "Evaluation": [
                3.0,
                21.001,
                0.003,
                2.001,
                2.001,
                2.001,
                60.0,
                2.001,
                0.001,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.6",
                "2 <- 0.1",
                "3 <- 0.9",
                "4 <- 0.3",
                "5 <- 0.6",
                "6 <- 0.6",
                "7 <- INIT",
                "8 <- 0.6",
                "9 <- 0.6"
            ]
        },
        "Step 1": {
            "steps": [
                "7 / 7 = 1 (left: 1 12 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5 12 19)",
                "12 * 7 = 84 (left: 12 12 84) || 84 - 12 = 72 (left: 12 72)",
                "7 - 7 = 0 (left: 0 12 12) || Input: 8 15 23",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 12 = 0 (left: 0 12)",
                "12 / 7 = 1 (left: 7 12 ",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 1 12)"
            ],
            "Evaluation": [
                1.002,
                60.0,
                60.0,
                3.0,
                0.003,
                0.002,
                40.0,
                1.002,
                40.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 1.2",
                "2 <- 1.8",
                "3 <- 0.9",
                "4 <- 1.6",
                "5 <- 1.1",
                "6 <- 0.6",
                "7 <- 1.6",
                "8 <- 1.2",
                "9 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "12 + 7 = 19 (left: 7 12 19) || 12 + 7 = 19 (left: 7 19 19)",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 + 7 = 19 (left: 7 12 19) || 12 - 7 = 5 (left: 5)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 12 = 0 (left: 0 12) || 12 - 12 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 12 = 0 (left: 0 12) || 0 + 12 = 12",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                1.002,
                0.003,
                20.002,
                0.001,
                0.002,
                0.003,
                40.001,
                0.003,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 0.6",
                "2 <- 2.2",
                "3 <- 2.6",
                "4 <- 1.1",
                "5 <- 1.2",
                "6 <- 0.6",
                "7 <- 0.1",
                "8 <- 0.1",
                "9 <- 1.6"
            ]
        },
        "Step 3": {
            "steps": [
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 24 = 288 (left: 288)",
                "7 - 7 = 0 (left: 0 12 12) || Input: ",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24 || 24 + 12 = 36 (left: 12 36)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 - 12 = 0",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12)",
                "7 / 7 = 1 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "7 / 7 = 1 (left: 1 12 12) || 12 + 1 = 13 (left: 12 13)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 12 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                20.002,
                0.003,
                0.003,
                0.003,
                60.0,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 2.2",
                "2 <- 1.2",
                "3 <- 3.6",
                "4 <- 1.8",
                "5 <- 0.6",
                "6 <- 2.6",
                "7 <- 1.8",
                "8 <- 1.1",
                "9 <- 3.2"
            ]
        },
        "Step 4": {
            "steps": [
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 12 2)",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 0 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24 || 24 + 12 = 36 (left: 12 36) || 12 * 3 = 36 (left: 36)"
            ],
            "Evaluation": [
                0.003,
                41.0,
                0.003,
                20.002,
                0.001,
                40.001,
                0.002,
                0.003,
                0.003,
                20.0
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 4.1",
                "2 <- 4.1",
                "3 <- 4.3",
                "4 <- 0.6",
                "5 <- 1.1",
                "6 <- 3.2",
                "7 <- 1.1",
                "8 <- 1.6",
                "9 <- 0.1"
            ]
        },
        "Step 5": {
            "steps": [
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 12 2) || 12 * 2 = 24 (left: 24)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 12 2) || 12 - 2 = 10 (left: 10)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24 || 12 + 24 = 36 (left: 36)",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 0 is undefined (left: 0 12 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24 || 24 + 12 = 36 (left: 12 36) || 36 / 12 = 3 (left: 3 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 12 = 0 (left: 0 12) || 12 - 0 = 12 (left: 0)",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.001,
                40.0,
                60.0,
                40.001,
                21.001,
                0.003,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 1.6",
                "2 <- 0.1",
                "3 <- 5.5",
                "4 <- 0.6",
                "5 <- 5.4",
                "6 <- 4.1",
                "7 <- 5.4",
                "8 <- 5.3",
                "9 <- 1.2"
            ]
        },
        "Step 6": {
            "steps": [
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24 || 12 + 24 = 36 (left: 36) || 36 / 2 = 18",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 12 = 0 (left: 0 12) || 0 + 12 = 12",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 - 12 = 12 (left: 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 0 = undefined (left: 0 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 0 is undefined (left: 0 12 12) || 12 * 12 = 144 (left: 12 144)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 12 2) || 12 / 2 = 6 (left: 6)",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 0 is undefined (left: 0 12 12) || 12 - 12 = 0 (left: 0 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24 || 12 + 24 = 36 (left: 36) || 36 / 2 = 18",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                0.003,
                60.0,
                0.003,
                0.003,
                40.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 6.7",
                "1 <- 6.9",
                "2 <- 1.2",
                "3 <- 6.7",
                "4 <- 0.6",
                "5 <- 5.3",
                "6 <- 5.5",
                "7 <- 5.1",
                "8 <- 5.3",
                "9 <- 5.4"
            ]
        },
        "Step 7": {
            "steps": [
                "7 - 7 = 0 (left: 0 12 12) || 12 / 0 is undefined (left: 0 12 12) || 12 - 12 = 0 (left: 0 12) || 0 * 12 = 0 (left: 0)",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 24 = 288 (left: 288)",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 0 is undefined (left: 0 12 12) || 12 - 12 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 12 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24 || 12 + 24 = 36 (left: 36) || 36 / 18 = 2 (left: 2)",
                "7 - 7 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 12 * 12 = 144 (left: 24 144)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: ((7 - 7) + 12) * 12 = 24 or (12 + 12) / (24 / 12) = 24",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24 || 12 + 24 = 36 (left: 36) || There is only one possible next step: 36 - 2 = 34",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 0 is undefined (left: 0 12 12) || 12 / 0 is undefined"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.003,
                40.001,
                0.002,
                60.0,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 6.9",
                "2 <- 5.1",
                "3 <- 6.2",
                "4 <- 6.4",
                "5 <- 6.7",
                "6 <- 6.9",
                "7 <- 4.9",
                "8 <- 6.2",
                "9 <- 2.2"
            ]
        },
        "Step 8": {
            "steps": [
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24 || 24 + 12 = 36 (left: 12 36) || 12 * 3 = 36",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 24 + 12 = 36 (left: 24 36)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 12 2) || 12 * 2 = 24 (left: 24) || Answer: (7 - 7) + (12 + 12) = 24",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 0 = undefined (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "7 - 7 = 0 (left: 0 12 12) || 12 / 0 is undefined (left: 0 12 12) || 12 - 12 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24 || 24 + 12 = 36 (left: 12 36) || 12 * 3 = 36 (left: 36) || 36 / 2 = 18",
                "7 / 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "7 - 7 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24 || 24 + 12 = 36 (left: 36)"
            ]
        },
        "Input": "7 7 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "29": {
        "puzzle": "4 6 7 7",
        "Step 0": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7)",
                "6 + 7 = 13 (left: 4 7 13)",
                "7 - 6 = 1 (left: 4 1 7)",
                "7 - 6 = 1 (left: 1 7 7)",
                "7 - 4 = 3 (left: 3 7 7)",
                "7 - 6 = 1 (left: 4 1 7)",
                "4 * 6 = 24 (left: 7 7 24)",
                "7 + 4 = 11 (left: 6 7 11)",
                "7 - 4 = 3 (left: ",
                "7 - 4 = 3 (left: 3 7 7)"
            ],
            "Evaluation": [
                60.0,
                20.002,
                21.001,
                2.001,
                22.0,
                3.0,
                1.002,
                2.001,
                0.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.4",
                "2 <- 0.9",
                "3 <- 0.0",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 0.5",
                "7 <- INIT",
                "8 <- 0.0",
                "9 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2 (left: 2 7)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "7 - 4 = 3 (left: 3 7 7) || 7 - 7 = 0 (left: 3 0 7)",
                "7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2 (left: 2 7)",
                "4 * 6 = 24 (left: 7 7 24)",
                "7 - 6 = 1 (left: 4 1 7)",
                "7 - 6 = 1 (left: 4 1 7) || 7 - 4 = 3 (left: 4 3)",
                "7 - 4 = 3 (left: ",
                "7 - 4 = 3 (left: 3 7 7) || 7 + 3 = 10 (left: 7 10)",
                "7 - 6 = 1 (left: 4 1 7) || 7 / 1 = 7 (left: 4 7)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                2.001,
                0.001,
                2.0,
                21.001,
                2.0,
                0.0,
                1.002,
                1.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.2",
                "3 <- 0.0",
                "4 <- 0.0",
                "5 <- 0.9",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- 0.9",
                "9 <- 0.7"
            ]
        },
        "Step 2": {
            "steps": [
                "6 + 7 = 13 (left: 4 7 13)",
                "7 - 6 = 1 (left: 1 7 7)",
                "7 - 6 = 1 (left: 4 1 7) || 7 / 1 = 7 (left: 4 7)",
                "7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2 (left: 2 7)",
                "7 - 4 = 3 (left: 3 7 7) || Input: 4 6",
                "7 - 4 = 3 (left: 3 7 7) || Input: 4 9 9 5",
                "7 + 4 = 11 (left: 6 7 11)",
                "7 - 4 = 3 (left: ",
                "7 - 4 = 3 (left: 3 7 7) || 7 - 3 = 4 (left: 4 7)",
                "7 + 4 = 11 (left: 6 7 11) || 11 - 7 = 4 (left: 6)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.002,
                0.001,
                0.003,
                0.003,
                22.0,
                0.0,
                1.002,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.6",
                "2 <- 0.1",
                "3 <- 2.6",
                "4 <- 0.9",
                "5 <- 0.1",
                "6 <- INIT",
                "7 <- 0.1",
                "8 <- 0.0",
                "9 <- 1.9"
            ]
        },
        "Step 3": {
            "steps": [
                "6 / 4 = 1.5 (left: 1.5 7 7)",
                "7 + 4 = 11 (left: 6 7 11) || 7 - 6 = 1 (left: 1 11)",
                "6 + 7 = 13 (left: 4 7 13) || 4 * 7 = 28 (left: 28 13)",
                "7 + 4 = 11 (left: 6 7 11) || 6 * 7 = 42 (left: 11 42)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "6 + 7 = 13 (left: 4 7 13) || 13 / 4 = ",
                "7 - 4 = 3 (left: 3 7 7)",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6)",
                "7 - 4 = 3 (left: 3 7 7) || 7 + 3 = 10 (left: 7 10)",
                "7 - 6 = 1 (left: 4 1 7) || 7 / 1 = 7 (left: 4 7) || 7 - 4 = 3 (left: 3)"
            ],
            "Evaluation": [
                3.0,
                41.0,
                0.003,
                0.002,
                20.002,
                0.003,
                60.0,
                60.0,
                1.001,
                20.002
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 0.3",
                "2 <- 0.9",
                "3 <- 3.6",
                "4 <- 2.6",
                "5 <- 3.4",
                "6 <- 3.6",
                "7 <- 3.1",
                "8 <- 3.4",
                "9 <- 3.1"
            ]
        },
        "Step 4": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 7 * 3 = 21 (left: 21)",
                "7 - 6 = 1 (left: 1 7 7) || 7 / 1 = 7 (left: 7 7 7)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2.33 (left: 2.33 7)",
                "7 + 4 = 11 (left: 6 7 11) || 7 - 6 = 1 (left: 1 11)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 / 3 = 7 (left: 7)",
                "7 - 4 = 3 (left: 3 7 7) || 7 + 3 = 10 (left: 3 10)",
                "7 + 4 = 11 (left: 6 7 11) || 7 - 6 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21) || 21 * 1 = 21 (left: 21)",
                "7 + 4 = 11 (left: 6 7 11) || 7 - 6 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                20.0,
                3.0,
                0.003,
                2.001,
                40.001,
                0.001,
                0.003,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 4.4",
                "2 <- 0.9",
                "3 <- 0.9",
                "4 <- 3.9",
                "5 <- 4.3",
                "6 <- 0.1",
                "7 <- 0.2",
                "8 <- 3.7",
                "9 <- 4.4"
            ]
        },
        "Step 5": {
            "steps": [
                "7 + 4 = 11 (left: 6 7 11) || 7 + 11 = 18 (left: 6 18)",
                "7 + 4 = 11 (left: 6 7 11) || 7 - 6 = 1 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)",
                "7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2.33 (left: 2.33 7)",
                "7 - 6 = 1 (left: 4 1 7) || 7 / 1 = 7 (left: 4 7) || 7 - 4 = 3 (left: 3) || 3 - 2 = 1 (left: 8 14 1)",
                "7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2.33 (left: 2.33 7) || 7 / 2.33 = 3 (left: 3)",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9)",
                "7 - 6 = 1 (left: 4 1 7) || 7 - 1 = 6 (left: 4 6)",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || Input: 1 5 9",
                "7 + 4 = 11 (left: 6 7 11) || 7 - 6 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                20.002,
                0.002,
                0.003,
                2.001,
                2.001,
                0.002,
                40.001,
                40.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.6",
                "1 <- 3.6",
                "2 <- 2.6",
                "3 <- 5.0",
                "4 <- 1.4",
                "5 <- 0.0",
                "6 <- 3.7",
                "7 <- 5.0",
                "8 <- 5.0",
                "9 <- 0.0"
            ]
        },
        "Step 6": {
            "steps": [
                "6 + 7 = 13 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 9 / 4 = 2.25 (left: 2.25)",
                "7 - 4 = 3 (left: 3 7 7) || 7 * 3 = 21 (left: 7 21)",
                "7 + 4 = 11 (left: 6 7 11) || 11 - 6 = 5 (left: 5 7)",
                "7 + 4 = 11 (left: 6 7 11) || 7 + 11 = 18 (left: 6 18) || 18 - 6 = 12 (left: 6 12)",
                "4 * 6 = 24 (left: 7 7 24) || 7 * 7 = 49 (left: 49 24)",
                "7 - 4 = 3 (left: 3 7 7) || 7 - 3 = 4 (left:",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "7 + 4 = 11 (left: 6 7 11) || 7 + 11 = 18 (left: 6 18) || 18 / 6 = 3 (left: 3)",
                "7 + 4 = 11 (left: 6 7 11) || 7 + 11 = 18 (left: 6 18) || 6 * 18 = 108 (left: 108)",
                "7 - 4 = 3 (left: 3 7 7) || 3 * 7 = 21 (left: 7 21)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                1.0,
                60.0,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.6",
                "1 <- 3.1",
                "2 <- 6.6",
                "3 <- 5.7",
                "4 <- 3.7",
                "5 <- 3.6",
                "6 <- 5.7",
                "7 <- 3.7",
                "8 <- 3.7",
                "9 <- 3.6"
            ]
        },
        "Step 7": {
            "steps": [
                "6 + 7 = 13 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 9 - 4 = 5 (left: 5)",
                "7 + 4 = 11 (left: 6 7 11) || 7 - 6 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (6 + (7 - 7)) = 24",
                "7 - 6 = 1 (left: 4 1 7) || 7 - 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "7 - 4 = 3 (left: 3 7 7) || 7 / 3 = 2 (left: 2 7)",
                "7 - 6 = 1 (left: 4 1 7) || 7 - 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "6 + 7 = 13 (left: 4 7 13) || 13 - 7 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "7 - 4 = 3 (left: 3 7 7) || Input: 5 10"
            ]
        },
        "Input": "4 6 7 7",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "30": {
        "puzzle": "1 1 2 13",
        "Step 0": {
            "steps": [
                "13 - 2 = 11 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 2 13)",
                "13 - 1 = 12 (left: 1 2 12)",
                "13 - 2 = 11 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 2 13)",
                "13 - 1 = 12 (left: 1 2 12)",
                "13 - 2 = 11 (left: 1 1 11)",
                "2 + 1 = 3 (left: 1 3 13)",
                "13 - 1 = 12 (left: 1 2 ",
                "13 - 1 = 12 (left: 1 2 12)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                60.0,
                1.002,
                40.001,
                60.0,
                1.002,
                22.0,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.5",
                "2 <- 0.5",
                "3 <- INIT",
                "4 <- 0.2",
                "5 <- INIT",
                "6 <- 0.5",
                "7 <- 0.9",
                "8 <- 0.5",
                "9 <- 0.7"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 13) || 2 * 13 = 26 (left: 1 26)",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "13 - 2 = 11 (left: 1 1 11)",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "13 - 2 = 11 (left: 1 1 11)",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "13 - 1 = 12 (left: 1 2 12) || Input: 3 4 5 6",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "2 + 1 = 3 (left: 1 3 13) || Input: 5 5 25"
            ],
            "Evaluation": [
                1.002,
                60.0,
                60.0,
                0.003,
                60.0,
                0.003,
                60.0,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 1.8",
                "2 <- 0.5",
                "3 <- 1.1",
                "4 <- 0.4",
                "5 <- 1.6",
                "6 <- 0.2",
                "7 <- INIT",
                "8 <- 1.2",
                "9 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "2 + 1 = 3 (left: 1 3 13) || 3 + 1 = 4 (left: 4 13)",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 - 10 =",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 13) || 13 / 2 = 6.5 (left: 1 6.5)",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "13 / 1 = 13 (left: 1 2 ",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "13 - 1 = 12 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                60.0,
                0.001,
                0.003,
                0.002,
                60.0,
                0.002,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 0.9",
                "2 <- 0.2",
                "3 <- 0.9",
                "4 <- INIT",
                "5 <- 2.9",
                "6 <- 2.2",
                "7 <- 0.9",
                "8 <- 1.6",
                "9 <- 2.9"
            ]
        },
        "Step 3": {
            "steps": [
                "13 - 1 = 12 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "13 - 1 = 12 (left: 1 2 12) || 2 + 12 = 14 (left: 1 14)",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "13 - 1 = 12 (left: 1 2 12)",
                "13 - 1 = 12 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 1 = 11 (left: 2 11)",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "13 - 1 = 12 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                21.0,
                60.0,
                60.0,
                0.002,
                0.003,
                1.002,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 0.7",
                "2 <- 1.2",
                "3 <- 2.6",
                "4 <- 3.9",
                "5 <- 0.5",
                "6 <- 0.4",
                "7 <- 0.9",
                "8 <- 3.4",
                "9 <- 1.1"
            ]
        },
        "Step 4": {
            "steps": [
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "2 + 1 = 3 (left: 1 3 13) || 1 * 3 = 3 (left: 3 13)",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "13 - 1 = 12 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (13 - 1) * (2 / 1) = 24",
                "13 - 1 = 12 (left: 1 2 12) || 1 * 2 = 2 (left:",
                "1 * 1 = 1 (left: 1 2 13) || 13 - 2 = 11 (left: 1 11)",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "13 - 1 = 12 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "13 - 1 = 12 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)"
            ]
        },
        "Input": "1 1 2 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "31": {
        "puzzle": "1 1 5 6",
        "Step 0": {
            "steps": [
                "6 - 1 = 5 (left: 1 5 5)",
                "1 * 1 = 1 (left: 1 5 6)",
                "1 + 5 = 6 (left: 6 1 6)",
                "1 * 5 = 5 (left: 1 5 6)",
                "5 + 1 = 6 (left: 1 6 6)",
                "1 + 5 = 6 (left: 6 6 6)",
                "1 + 5 = 6 (left: 6 5 6)",
                "5 + 1 = 6 (left: 1 6 6)",
                "6 / 1 = 6 (left: 1 5 ",
                "5 + 1 = 6 (left: 1 6 6)"
            ],
            "Evaluation": [
                41.0,
                3.0,
                40.001,
                22.0,
                41.0,
                3.0,
                60.0,
                21.001,
                0.002,
                22.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.6",
                "2 <- 0.0",
                "3 <- 0.6",
                "4 <- 0.2",
                "5 <- 0.0",
                "6 <- 0.2",
                "7 <- 0.7",
                "8 <- 0.0",
                "9 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 6)",
                "1 + 5 = 6 (left: 6 5 6) || 4 * 2 = 8 (left:",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)",
                "1 + 5 = 6 (left: 6 5 6) || 6 * 5 = 30 (left: 30)",
                "1 + 5 = 6 (left: 6 1 6) || 6 / 1 = 6 (left: 6 6)",
                "6 - 1 = 5 (left: 1 5 5) || 9 - 3 = 6 (left: 3 6)",
                "1 + 5 = 6 (left: 6 1 6) || 6 - 1 = 5 (left: 5 6)",
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6)",
                "6 - 1 = 5 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5)",
                "5 + 1 = 6 (left: 1 6 6) || 1 * 6 = 6 (left: 6 6)"
            ],
            "Evaluation": [
                60.0,
                20.001,
                3.0,
                0.003,
                20.002,
                3.0,
                0.003,
                20.001,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 1.9",
                "2 <- 0.2",
                "3 <- 0.2",
                "4 <- 1.2",
                "5 <- 1.9",
                "6 <- 0.0",
                "7 <- 1.7",
                "8 <- 0.2",
                "9 <- 0.0"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 5 = 6 (left: 6 5 6) || 6 - 5 = 1 (left: 1 6)",
                "5 + 1 = 6 (left: 1 6 6) || 1 * 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "1 + 5 = 6 (left: 6 1 6) || 6 - 1 = 5 (left: 5 6)",
                "1 + 5 = 6 (left: 6 1 6) || 6 - 1 = 5 (left: 5 6)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 1 * 4 = 4 (left: 4 5)",
                "5 + 1 = 6 (left: 1 6 6) || 1 * 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5)",
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6) || 6 + 5 = 11 (left: 11)",
                "1 + 5 = 6 (left: 6 1 6) || 6 - 1 = 5 (left: 5 6)",
                "6 - 1 = 5 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.002,
                0.002,
                3.0,
                0.003,
                1.001,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 0.3",
                "2 <- 1.0",
                "3 <- 0.3",
                "4 <- 0.6",
                "5 <- INIT",
                "6 <- 0.7",
                "7 <- 2.0",
                "8 <- 1.0",
                "9 <- 0.6"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 5 = 6 (left: 6 5 6) || 6 - 5 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 * 5 = 5 (left: 1 5 6) || 5 / 1 = 5 (left: 5 6)",
                "1 * 1 = 1 (left: 1 5 6) || 5 / 1 = 5 (left: 5 6)",
                "1 * 5 = 5 (left: 1 5 6) || 1 * 5 = 5 (left: 5 6)",
                "1 + 5 = 6 (left: 6 5 6) || 5 * 6 = 30 (left: 6 30)",
                "1 - 1 = 0 (left: 0 5 6)",
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6)",
                "1 + 5 = 6 (left: 6 5 6) || 6 - 5 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 5 6) || 5 * 1 = 5 (left: 5 6)",
                "1 + 5 = 6 (left: 6 5 6) || Input: 3 9 3"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.002,
                0.002,
                0.003,
                2.001,
                1.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.0",
                "2 <- 0.2",
                "3 <- 0.9",
                "4 <- INIT",
                "5 <- 2.0",
                "6 <- 0.4",
                "7 <- 1.0",
                "8 <- 2.0",
                "9 <- 1.0"
            ]
        },
        "Step 4": {
            "steps": [
                "5 + 1 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 - 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5)",
                "1 + 5 = 6 (left: 6 1 6) || Possible",
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6)",
                "1 + 5 = 6 (left: 6 6 6)",
                "1 + 5 = 6 (left: 6 5 6) || 6 - 5 = 1 (left: 1 6) || 1 + 6 = 7",
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6)",
                "1 * 1 = 1 (left: 1 5 6) || 1 / 5 = 0.2 (left: 0.2 6)",
                "1 + 5 = 6 (left: 6 5 6) || 6 - 5 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 5 6) || 5 * 1 = 5 (left: 5 6)"
            ],
            "Evaluation": [
                2.001,
                1.002,
                0.003,
                0.001,
                1.002,
                0.003,
                0.003,
                0.001,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 1.1",
                "2 <- 0.0",
                "3 <- 1.4",
                "4 <- 1.7",
                "5 <- 4.0",
                "6 <- 1.4",
                "7 <- 0.2",
                "8 <- 0.6",
                "9 <- 2.0"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 5 = 6 (left: 6 5 6) || 6 - 5 = 1 (left: 1 6) || 1 + 6 = 7",
                "1 + 5 = 6 (left: 6 5 6) || 4 * 2 = 8 (left: || 6 / 7 = 0.857 (left: 0.857",
                "6 - 1 = 5 (left: 1 5 5) || Possible",
                "1 + 5 = 6 (left: 6 1 6) || 6 / 1 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6) || 6 - 5 = 1 (left: 1)",
                "5 + 1 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6) || 6 - 6 = 0 (left: 0)",
                "1 + 5 = 6 (left: 6 1 6) || 6 / 1 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)  ",
                "1 + 5 = 6 (left: 6 1 6) || 6 - 1 = 5 (left: 5 6)",
                "1 + 5 = 6 (left: 6 5 6) || 6 * 5 = 30 (left: 30)",
                "1 + 5 = 6 (left: 6 5 6) || 6 - 5 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 1.0",
                "2 <- 0.9",
                "3 <- 1.0",
                "4 <- 4.0",
                "5 <- 2.0",
                "6 <- 0.3",
                "7 <- 2.0",
                "8 <- 0.4",
                "9 <- 3.5"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 5 = 6 (left: 6 5 6) || 6 / 5 = 1.2 (left: 1.2 6)",
                "1 * 1 = 1 (left: 1 5 6) || 6 - 5 = 1 (left: 1 6)",
                "5 + 1 = 6 (left: 1 6 6) || 1 * 6 = 6 (left: 6 6 6)",
                "1 * 1 = 1 (left: 1 5 6) || 6 - 1 = 5 (left: 5 5)",
                "5 + 1 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6) || 6 - 6 = 0 (left: 0 6)",
                "1 + 5 = 6 (left: 6 5 6) || 6 - 5 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 * 5 = 5 (left: 1 5 6) || 5 * 1 = 5 (left: 5 6)",
                "1 + 5 = 6 (left: 6 5 6) || 6 - 5 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "5 + 1 = 6 (left: 1 6 6) || 6 * 1 = 6 (left: 6 6 6)",
                "1 - 1 = 0 (left: 0 5 6) || 5 - 0 = 5 (left: 5 6)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                2.001,
                0.002,
                40.0,
                0.002,
                1.001,
                0.002,
                3.0,
                0.001
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 6.1",
                "2 <- 0.7",
                "3 <- 2.0",
                "4 <- 0.0",
                "5 <- 0.6",
                "6 <- 0.0",
                "7 <- 1.7",
                "8 <- 6.1",
                "9 <- 6.1"
            ]
        },
        "Step 7": {
            "steps": [
                "5 + 1 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6)",
                "1 * 1 = 1 (left: 1 5 6) || 6 - 5 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 1 5 6)",
                "1 + 5 = 6 (left: 6 5 6) || 6 - 5 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "6 - 1 = 5 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5)",
                "1 + 5 = 6 (left: 6 5 6) || 3 + 1 = 4 (left: 2 4)",
                "6 - 1 = 5 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5)",
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6) || Input: 10 2",
                "1 * 1 = 1 (left: 1 5 6) || 6 - 5 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 5 6) || 6 - 5 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)"
            ],
            "Evaluation": [
                40.001,
                0.0,
                41.0,
                0.003,
                0.003,
                1.0,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 7.2",
                "1 <- 1.4",
                "2 <- 6.1",
                "3 <- 6.1",
                "4 <- 6.1",
                "5 <- 6.1",
                "6 <- 1.0",
                "7 <- 7.2",
                "8 <- 2.0",
                "9 <- 1.7"
            ]
        },
        "Step 8": {
            "steps": [
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6)",
                "1 + 5 = 6 (left: 6 1 6) || 6 / 1 = 6 (left: 6 6) || 6 + 6 = 12",
                "1 * 1 = 1 (left: 1 5 6) || 6 - 5 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 5 6) || 6 - 5 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 5 6) || 6 - 5 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 5 6) || 6 - 5 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 5 6) || 5 * 1 = 5 (left: 5 6)",
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 1 5 6) || 1 - 5 = -4 (left: -4 6)",
                "1 + 5 = 6 (left: 6 5 6) || 6 - 5 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6) || 5 / 6 = 0.8333 (left: 0.8333)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                0.001,
                0.001,
                0.003,
                0.003,
                1.002,
                2.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 7.2",
                "1 <- 7.2",
                "2 <- 7.0",
                "3 <- 7.0",
                "4 <- 6.1",
                "5 <- 0.2",
                "6 <- 3.5",
                "7 <- 1.1",
                "8 <- 0.6",
                "9 <- 7.0"
            ]
        },
        "Step 9": {
            "steps": [
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6)",
                "5 + 1 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 1 5 6) || 6 - 5 = 1 (left: 1 6)",
                "5 + 1 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "5 + 1 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 5 6) || 6 - 5 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "1 + 5 = 6 (left: 6 1 6) || 6 / 1 = 6 (left: 6 6)",
                "1 - 1 = 0 (left: 0 5 6) || 0 * 5 = 0 (left: 0 5 6)",
                "1 + 5 = 6 (left: 6 5 6) || 4 * 2 = 8 (left: || 4 / 2 = 2 (left: 2)",
                "1 + 5 = 6 (left: 6 5 6) || Input: 7 3 9",
                "5 + 1 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)"
            ]
        },
        "Input": "1 1 5 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "32": {
        "puzzle": "1 1 11 13",
        "Step 0": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 13)",
                "1 * 1 = 1 (left: 1 11 13)",
                "1 + 11 = 12 (left: 12 1 13)",
                "1 - 1 = 0 (left: 0 11 13)",
                "11 + 1 = 12 (left: 1 12 13)",
                "1 - 1 = 0 (left: 0 11 13)",
                "1 + 1 = 2 (left: 2 11 13)",
                "1 * 11 = 11 (left: 11 1 13)",
                "13 - 1 = 12 (left: 1 11 ",
                "11 + 1 = 12 (left: 1 12 13)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                0.003,
                21.0,
                0.003,
                60.0,
                0.003,
                0.003,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.8",
                "2 <- INIT",
                "3 <- 0.5",
                "4 <- INIT",
                "5 <- 0.3",
                "6 <- INIT",
                "7 <- 0.5",
                "8 <- INIT",
                "9 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24)",
                "13 - 1 = 12 (left: 1 11  || 1 * 11 = 11 (left: 11)",
                "13 - 1 = 12 (left: 1 11 12)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13)",
                "13 - 1 = 12 (left: 1 11 12)",
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2)",
                "1 + 1 = 2 (left: 2 11 13)",
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2)",
                "11 + 1 = 12 (left: 1 12 13)",
                "1 - 1 = 0 (left: 0 11 13) || 11 * 13 = 143 (left: 0 143)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                1.002,
                60.0,
                41.0,
                20.002,
                0.003,
                1.002,
                20.001,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.0",
                "2 <- 1.4",
                "3 <- 1.3",
                "4 <- 1.0",
                "5 <- 1.3",
                "6 <- 1.0",
                "7 <- 1.8",
                "8 <- 0.5",
                "9 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 13)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 5 * 3 = 15 (left: 15)",
                "13 - 1 = 12 (left: 1 11 12) || 11 + 1 = 12 (left: 1 12)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 0 / 24 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 * 0 = 0 (left: 0 24)",
                "11 + 1 = 12 (left: 1 12 13) || 13 - 1 = 12 (left: 12 13)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 13 = -2 (left: -2 11 13)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.846 (left: 0.846)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                1.002,
                0.003,
                0.002,
                0.002,
                60.0,
                0.003,
                21.001,
                0.001
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 0.5",
                "2 <- 0.5",
                "3 <- 1.0",
                "4 <- 2.6",
                "5 <- 1.3",
                "6 <- 1.0",
                "7 <- 1.4",
                "8 <- 1.4",
                "9 <- 1.4"
            ]
        },
        "Step 3": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 * 0 = 0 (left: 0 24) || 24 / 0 = undefined",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 13 = -2 (left: -2 11 13)",
                "1 - 1 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2 13)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || Input: 3 12",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 * 0 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 13 / 11 = 1.1818181818181819 (left: 1.1818181818181819)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 0 * 24 = 0 (left: 0 24)",
                "13 - 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "13 - 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "13 - 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)"
            ],
            "Evaluation": [
                0.003,
                22.0,
                0.003,
                0.003,
                60.0,
                0.003,
                60.0,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 2.6",
                "2 <- 2.6",
                "3 <- 3.4",
                "4 <- 1.3",
                "5 <- 0.8",
                "6 <- 3.6",
                "7 <- 1.0",
                "8 <- 0.5",
                "9 <- 1.3"
            ]
        },
        "Step 4": {
            "steps": [
                "13 - 1 = 12 (left: 1 11  || 11 / 1 = 11 (left: 11)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 * 0 = 0 (left: 0 24) || 24 * 0 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 * 0 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 * 0 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: ((1 - 1) + (11 + 13)) * (24 - 0) = 24",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "13 - 1 = 12 (left: 1 11  || 1 * 11 = 11 (left: 11)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 0 * 24 = 0 (left: 0 24)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 / 0 = undefined (left: 0 24)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 13 = -2 (left: -2 13)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 \u2248 0.846 (left: 0.846)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                60.0,
                40.001,
                0.002,
                0.002,
                60.0,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.6",
                "1 <- 4.7",
                "2 <- 4.6",
                "3 <- 4.6",
                "4 <- 2.8",
                "5 <- 3.6",
                "6 <- INIT",
                "7 <- 1.3",
                "8 <- 4.2",
                "9 <- 4.7"
            ]
        },
        "Step 5": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 0 * 24 = 0 (left: 0 24)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 / 0 = undefined (left: 0 24) || 9 / 3 = 3 (left: 3 27)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 0 * 24 = 0 (left: 0 24)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 0 / 24 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 13 = -2 (left: -2 11 13) || -2 * 11 = -22 (left: -22 13)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 24 * 0 = 0 (left: 0)",
                "11 + 1 = 12 (left: 1 12 13)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 * 0 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: ((1 - 1) + (11 + 13)) * 24 = 24",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 / 0 = undefined (left: 0 24) || 24 * 0 = 0 (left: 0)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                0.002,
                0.002,
                0.003,
                2.001,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 5.2",
                "2 <- 5.2",
                "3 <- 3.4",
                "4 <- 1.3",
                "5 <- 3.4",
                "6 <- 4.2",
                "7 <- 1.3",
                "8 <- 1.0",
                "9 <- 5.0"
            ]
        },
        "Step 6": {
            "steps": [
                "13 - 1 = 12 (left: 1 11  || 11 - 1 = 10 (left: 10)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 0 * 24 = 0 (left: 0 24)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 0 * 24 = 0 (left: 24)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 * 0 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: (1 - 1) * (11 + 13) = 24",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.846153846 (left: 0.846153846)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 * 0 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: ((1 - 1) + (11 + 13)) * (24 - 0) = 24",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 * 0 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: ((1 - 1) + (11 + 13)) * (24 - 0) = 24",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 * 0 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                40.0,
                60.0,
                0.001,
                40.001,
                20.002,
                0.002,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 6.6",
                "1 <- 4.3",
                "2 <- 3.4",
                "3 <- 2.6",
                "4 <- 3.6",
                "5 <- 3.6",
                "6 <- 3.1",
                "7 <- 6.1",
                "8 <- 6.1",
                "9 <- 1.4"
            ]
        },
        "Step 7": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 * 0 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: ((1 - 1) + (11 + 13)) * (24 - 0) = 24 || Input: 3 3 7 8\nSteps:\n3 * 8 = 24 (left: 3 7 24)\n7 - 3 = 4 (left: 4 24)\n4 * 24 = 96 (left: 96)\nAnswer: (3 * 8) * (7 - 3) = 24",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 * 0 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: ((1 - 1) + (11 + 13)) * (24 - 0) = 24 || Input: 3 3 5 9\nSteps:\n3 + 5 = 8 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)\n5 * 9 = 45 (left: 45)\n45 - 3 = 42 (left: 42)\n42 / 2 = 21 (left: 21)\n21 - 9 = 12 (left: 12)\n12 + ",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 * 0 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: ((1 - 1) + (11 + 13)) * (24 - 0) = 24",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 * 0 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 3 + 9 = 12 (left: 12 3)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 0 - 24 = -24 (left: -24)",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 13 = -2 (left: -2 11 13) || -2 * 11 = -22 (left: -22 13)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 24 * 0 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24)",
                "13 - 1 = 12 (left: 1 11 12) || 11 / 1 = 11 (left: 1 12)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                0.003,
                0.003,
                0.002,
                0.003,
                60.0,
                2.001
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 7.1",
                "2 <- 4.7",
                "3 <- 5.1",
                "4 <- 2.6",
                "5 <- 6.9",
                "6 <- 6.5",
                "7 <- 5.0",
                "8 <- 4.3",
                "9 <- 6.3"
            ]
        },
        "Step 8": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 0 * 24 = 0 (left: 0 24)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 * 0 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: ((1 - 1) + (11 + 13)) * (24 - 0) = 24 || Input: 3 3 5 9\nSteps:\n3 + 5 = 8 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)\n5 * 9 = 45 (left: 45)\n45 - 3 = 42 (left: 42)\n42 / 2 = 21 (left: 21)\n21 - 9 = 12 (left: 12)\n12 +  || 9 = 21 (left: 21)\n21 - 3 = 18 (left: 18)\n18 / 2 = 9 (left: 9)\n9 * 4 = 36 (left: 36)\n36 / 4 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 - 3 = 24 (left: 24)\nAnswer: (((((3 + 5) - 3",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 / 0 = undefined (left: 0 24) || 0 - 24 = -24 (left: -24)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 / 0 = undefined (left: 0 24) || 9 / 3 = 3 (left: 3 27) || 3 + 27 = 30 (left: 30)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 * 0 = 0 (left: 0 24) || 0 * 24 = 0 (left: 0 24)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: (1 - 1) * (11 + 13) = 24",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 * 0 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: ((1 - 1) + (11 + 13)) * (24 - 0) = 24 || Input: 3 3 8 9\nSteps:\n3 + 9 = 12 (left: 3 8 12)\n12 - 8 = 4 (left: 3 4)\n3 * 4 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: (3 + 9) - (8 - (3 * 4)) = 24",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 0 * 24 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 * 0 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: ((1 - 1) + (11 + 13)) * (24 - 0) = 24 || Input: 3 3 4 8\nSteps:\n3 * 4 = 12 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)\n5 * 12 = 60 (left: 60)\n60 / 5 = 12 (left: 12)\nAnswer: ((3 * 4) + (8 - 3)) / (60 / 5) = 24",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 * 0 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: (1 - 1) * (11 + 13) = 24 || Input: 2 2 3 6\nSteps:\n2 * 3 = 6 (left: 2 6 6)\n6 + 6 = 12 (left: 12 6)\n12 + 6 = 18 (left: 18)\n18 * 2 = 36 (left: 36)\n36 / 6 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((("
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.003,
                0.003,
                60.0,
                20.002,
                60.0,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 3.6",
                "1 <- 7.1",
                "2 <- 7.3",
                "3 <- 1.3",
                "4 <- 6.3",
                "5 <- 7.3",
                "6 <- 3.1",
                "7 <- 8.8",
                "8 <- 7.0",
                "9 <- 6.3"
            ]
        },
        "Step 9": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 0 + 24 = 24 (left: 24)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 * 0 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: ((1 - 1) + (11 + 13)) * (24 - 0) = 24 || Input: 3 3 5 9\nSteps:\n3 + 5 = 8 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)\n5 * 9 = 45 (left: 45)\n45 - 3 = 42 (left: 42)\n42 / 2 = 21 (left: 21)\n21 - 9 = 12 (left: 12)\n12 +  || 9 = 21 (left: 21)\n21 - 3 = 18 (left: 18)\n18 / 2 = 9 (left: 9)\n9 + 9 = 18 (left: 18)\n18 / 3 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((3 + 5) * 9) - 3 = 24",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 * 0 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: ((1 - 1) + (11 + 13)) * 24 = 24",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 13 - 11 = 2 (left: 2)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 * 0 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: (1 - 1) * (11 + 13) = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n5 + 3 = 8 (left: 8 21)\n8 * 21 = 168 (left: 168)\n168 / 7 = 24 (left: 24)\nAnswer: ((3 * 7) + 3) / 5 = 24",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 * 0 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: (1 - 1) + (11 + 13) = 24",
                "1 - 1 = 0 (left: 0 11 13) || 11 - 13 = -2 (left: -2 11 13) || 13 - 11 = 2 (left: -2 2)",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 * 0 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: ((1 - 1) + (11 + 13)) * (24 - 0) = 24 || Input: 3 3 4 8\nSteps:\n3 * 4 = 12 (left: 3 8 12)\n8 - 3 = 5 (left: 5 12)\n5 * 12 = 60 (left: 60)\n60 / 5 = 12 (left: 12)\nAnswer: ((3 * 4) + (8 - 3)) / (60 / 5) = 24 || Input: 2 3 6 9\nSteps:\n2 * 9 = 18 (left: 3 6 18)\n6 - 3 = 3 (left: 3 18)\n3 * 18 = 54 (left: 54)\n54 / 2 = 27 (left: 27)\n27 - 3 = 24 (left: 24)\nAnswer: ((2 * 9) + (6 - 3)) /",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 * 0 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: ((1 - 1) + (11 + 13)) * (24 - 0) = 24 || Input: 3 3 7 8\nSteps:\n3 * 8 = 24 (left: 3 7 24)\n7 - 3 = 4 (left: 4 24)\n4 * 24 = 96 (left: 96)\nAnswer: (3 * 8) * (7 - 3) = 24 || Input: 2 3 6 9\nSteps:\n3 * 9 = 27 (left: 2 6 27)\n2 + 6 = 8 (left: 8 27)\n8 - 27 = 19 (left: 19)\nAnswer: (2 + 6) * (3 * 9) = 24",
                "1 - 1 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 * 0 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: (1 - 1) * (11 + 13) = 24 || There is an error in the steps provided. Here is the correct solution:\n\n1 + 11 = 12 (left: 0 12 13)\n12 + 13 = 25 (left: 0 25)\n25 - 0 = 25 (left: 25)\nAnswer: (1 + 11) * (12 + 13) = 24"
            ]
        },
        "Input": "1 1 11 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "33": {
        "puzzle": "1 6 6 12",
        "Step 0": {
            "steps": [
                "12 - 6 = 6 (left: 1 6 6)",
                "6 / 1 = 6 (left: 6 6 12)",
                "6 * 1 = 6 (left: 6 6 12)",
                "6 * 1 = 6 (left: 6 6 12)",
                "12 + 1 = 13 (left: 6 6 13)",
                "6 + 1 = 7 (left: 6 6 12)",
                "6 * 1 = 6 (left: 6 6 12)",
                "12 + 1 = 13 (left: 6 6 13)",
                "12 / 6 = 2 (left: 1 2 ",
                "12 - 6 = 6 (left: 1 6 6)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                41.0,
                60.0,
                1.002,
                60.0,
                60.0,
                1.002,
                0.002,
                21.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.6",
                "2 <- 0.6",
                "3 <- 0.6",
                "4 <- 0.1",
                "5 <- 0.5",
                "6 <- 0.5",
                "7 <- INIT",
                "8 <- 0.0",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6)",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18)",
                "6 * 1 = 6 (left: 6 6 12) || 12 - 6 = 6 (left: 6 12)",
                "6 * 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "6 / 1 = 6 (left: 6 6 12) || 12 - 6 = 6 (left: 6 12)",
                "6 + 1 = 7 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12)",
                "6 + 1 = 7 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "12 / 6 = 2 (left: 1 6 ",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6 6)",
                "6 * 1 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12)"
            ],
            "Evaluation": [
                40.001,
                40.001,
                1.002,
                1.002,
                0.003,
                20.002,
                21.0,
                60.0,
                1.001,
                60.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- 0.9",
                "4 <- 0.6",
                "5 <- 0.1",
                "6 <- 0.1",
                "7 <- 0.6",
                "8 <- 0.5",
                "9 <- 1.6"
            ]
        },
        "Step 2": {
            "steps": [
                "6 / 1 = 6 (left: 6 6 12)",
                "6 * 1 = 6 (left: 6 6 12)",
                "6 / 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 12 36)",
                "12 - 6 = 6 (left: 1 6 6) || 6 + 1 = 7 (left: 6 7)",
                "6 * 1 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12)",
                "6 / 1 = 6 (left: 6 6 12) || 6 * 12 = 72 (left:",
                "6 / 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "6 * 1 = 6 (left: 6 6 12) || Input: 36 12 1 2 6 6",
                "6 + 1 = 7 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "6 + 1 = 7 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12) || 12 - 1 = 11 (left: 11)"
            ],
            "Evaluation": [
                60.0,
                41.0,
                20.002,
                0.002,
                0.001,
                0.002,
                1.002,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 2.1",
                "2 <- 1.1",
                "3 <- 1.0",
                "4 <- 0.1",
                "5 <- 1.9",
                "6 <- INIT",
                "7 <- 0.5",
                "8 <- 1.9",
                "9 <- 1.5"
            ]
        },
        "Step 3": {
            "steps": [
                "6 * 1 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12) || 0 + 12 = 12",
                "6 * 1 = 6 (left: 6 6 12) || Possible",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || Input: 9 3 9 ",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "6 / 1 = 6 (left: 6 6 12) || 12 - 6 = 6 (left: 6 6)",
                "6 * 1 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12) || 0 + 12 = 12",
                "6 / 1 = 6 (left: 6 6 12)",
                "6 + 1 = 7 (left: 6 6 12) || 12 - 6 = 6 (left: 6 12)",
                "6 * 1 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12) || 12 * 0 = 0 (left: 0)",
                "6 + 1 = 7 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12) || 0 + 12 = 12"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                40.001,
                0.003,
                41.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 0.2",
                "2 <- 0.3",
                "3 <- 2.2",
                "4 <- 2.0",
                "5 <- 0.1",
                "6 <- 3.6",
                "7 <- 1.7",
                "8 <- 0.0",
                "9 <- 3.4"
            ]
        },
        "Step 4": {
            "steps": [
                "6 * 1 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12) || 0 * 12 = 0 (left: 0)",
                "6 * 1 = 6 (left: 6 6 12) || 12 - 6 = 6 (left: 6 12)",
                "6 * 1 = 6 (left: 6 6 12) || 12 - 6 = 6 (left: 6 12)",
                "6 / 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 12 36) || 36 / 12 = 3 (left: 3 36)",
                "6 / 1 = 6 (left: 6 6 12) || Input: 1 2 12",
                "6 / 1 = 6 (left: 6 6 12) || 12 * 6 = 72 (left:",
                "6 / 1 = 6 (left: 6 6 12) || 12 - 6 = 6 (left: 6 12)",
                "12 / 6 = 2 (left: 1 6  || 6 / 1 = 6 (left: 6)",
                "12 - 6 = 6 (left: 1 6 6) || 6 + 1 = 7 (left: 6 7)",
                "6 / 1 = 6 (left: 6 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                20.002,
                0.003,
                0.001,
                0.003,
                0.002,
                0.003,
                20.0
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 0.5",
                "2 <- 1.7",
                "3 <- 0.1",
                "4 <- 3.4",
                "5 <- 0.1",
                "6 <- 2.0",
                "7 <- 0.3",
                "8 <- 0.6",
                "9 <- 1.6"
            ]
        },
        "Step 5": {
            "steps": [
                "6 * 1 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12) || 12 / 0 = undefined",
                "6 + 1 = 7 (left: 6 6 12) || Possible",
                "12 / 6 = 2 (left: 1 6  || 1 * 6 = 6 (left: 6)",
                "6 / 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "6 / 1 = 6 (left: 6 6 12) || 12 - 6 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "6 / 1 = 6 (left: 6 6 12) || 12 - 6 = 6 (left: 6",
                "6 / 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "6 * 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "6 * 1 = 6 (left: 6 6 12) || 12 - 6 = 6 (left: 6 12)",
                "6 + 1 = 7 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12) || 12 - 1 = 11"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.1",
                "2 <- 4.3",
                "3 <- 3.6",
                "4 <- 4.3",
                "5 <- 0.3",
                "6 <- 0.3",
                "7 <- 0.2",
                "8 <- 0.6",
                "9 <- 1.6"
            ]
        },
        "Step 6": {
            "steps": [
                "6 + 1 = 7 (left: 6 6 12) || 6 + 6 = 12 (left: 12 12)",
                "6 / 1 = 6 (left: 6 6 12) || 1 + 2 = 3 (left: 3",
                "6 / 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 12 36) || 36 / 12 = 3 (left: 3 36) || 36 - 3 = 33 (left: 33)",
                "6 / 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "6 / 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 12 36) || 36 / 12 = 3 (left: 3 36) || 3 * 36 = 108 (left: 108)",
                "6 * 1 = 6 (left: 6 6 12) || Input: 1 12 18",
                "6 * 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "6 * 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "6 * 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "6 + 1 = 7 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12) || 1 * 12 = 12 (left: 12)"
            ],
            "Evaluation": [
                0.003,
                0.0,
                0.003,
                1.002,
                0.002,
                0.003,
                0.002,
                0.002,
                21.0,
                0.001
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 1.1",
                "2 <- 3.6",
                "3 <- 4.3",
                "4 <- 1.9",
                "5 <- 0.1",
                "6 <- 1.9",
                "7 <- 0.9",
                "8 <- 3.6",
                "9 <- 1.0"
            ]
        },
        "Step 7": {
            "steps": [
                "6 * 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12)",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 18 - 6 = 12 (left: 12 18)",
                "6 / 1 = 6 (left: 6 6 12) || 12 - 6 = 6 (left: 6 12)",
                "6 / 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 12 36) || 36 / 12 = 3 (left: 3 36) || 36 - 3 = 33 (left: 33)",
                "6 * 1 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12) || 0 * 12 = 0 (left: 0)",
                "6 / 1 = 6 (left: 6 6 12) || 12 - 6 = 6 (left:",
                "6 * 1 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12) || 12 * 0 = 0 (left: 0)",
                "12 - 6 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6)",
                "6 / 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                20.002,
                0.003,
                0.003,
                0.001,
                0.003,
                41.0,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 7.7",
                "1 <- 7.7",
                "2 <- 2.0",
                "3 <- 3.4",
                "4 <- 0.0",
                "5 <- 1.7",
                "6 <- 2.1",
                "7 <- 0.1",
                "8 <- 3.4",
                "9 <- 2.0"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 6 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6) || 6 / 5 = 1.2 (left: 1.2 6)",
                "12 - 6 = 6 (left: 1 6 6) || 6 - 1 = 5 (left: 5 6 6) || 3 + 9 = 12 (left: 12",
                "6 / 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12)",
                "6 / 1 = 6 (left: 6 6 12) || 12 - 6 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "12 - 6 = 6 (left: 1 6 6) || 6 / 1 = 6 (left: 6 6)",
                "12 / 6 = 2 (left: 1 6  || 6 * 1 = 6 (left: 6)",
                "6 * 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "6 / 1 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12)",
                "6 / 1 = 6 (left: 6 6 12) || 12 - 6 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "6 / 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 6 12)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                60.0,
                0.002,
                0.003,
                0.003,
                0.003,
                60.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 1.1",
                "2 <- 2.1",
                "3 <- 0.5",
                "4 <- 1.7",
                "5 <- 1.1",
                "6 <- 6.8",
                "7 <- 6.8",
                "8 <- 1.7",
                "9 <- 8.2"
            ]
        },
        "Step 9": {
            "steps": [
                "6 * 1 = 6 (left: 6 6 12) || 12 - 6 = 6 (left: 6 12)",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 18 / 2 = 9 (left: 9)",
                "6 * 1 = 6 (left: 6 6 12) || 12 - 6 = 6 (left: 6 6 12)",
                "6 + 1 = 7 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "12 / 6 = 2 (left: 1 6  || 1 * 6 = 6 (left: 6)",
                "6 * 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 18 / 6 = 3 (left: 3)",
                "6 * 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12) || 1 + 12 = 13",
                "6 * 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12) || 12 - 1 = 11 (left: 11)",
                "12 / 6 = 2 (left: 1 6  || 1 * 6 = 6 (left: 6)",
                "6 / 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)"
            ]
        },
        "Input": "1 6 6 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "34": {
        "puzzle": "4 5 12 12",
        "Step 0": {
            "steps": [
                "4 * 5 = 20 (left: 20 12 12)",
                "5 * 4 = 20 (left: 20 12 12)",
                "12 / 4 = 3 (left: 3 12 12)",
                "12 - 5 = 7 (left: 4 7 12)",
                "12 / 4 = 3 (left: 3 12 12)",
                "12 / 4 = 3 (left: 5 3 12)",
                "12 - 5 = 7 (left: 4 7 12)",
                "12 / 4 = 3 (left: 3 12 12)",
                "12 * 5 = 60 (left: ",
                "12 / 4 = 3 (left: 3 12 12)"
            ],
            "Evaluation": [
                1.002,
                21.001,
                60.0,
                2.0,
                60.0,
                3.0,
                3.0,
                60.0,
                0.0,
                60.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.9",
                "2 <- INIT",
                "3 <- 0.4",
                "4 <- INIT",
                "5 <- 0.2",
                "6 <- 0.2",
                "7 <- 0.1",
                "8 <- 0.9",
                "9 <- 0.6"
            ]
        },
        "Step 1": {
            "steps": [
                "5 * 4 = 20 (left: 20 12 12) || 20 / 12 = 1.6666666666666667 (left: 1.6666666666666667 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)",
                "12 - 5 = 7 (left: 4 7 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 + 3 = 15 (left: 12 15)",
                "12 - 4 = 8 (left: 8 12 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12)",
                "5 * 4 = 20 (left: 20 12 12) || 20 - 12 = 8 (left: 8 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12 12)",
                "12 - 5 = 7 (left: 4 7 12) || 7 - 4 = 3 (left: 3 12)"
            ],
            "Evaluation": [
                2.0,
                0.003,
                2.001,
                0.003,
                1.002,
                20.002,
                2.001,
                0.002,
                2.001,
                0.002
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 0.2",
                "2 <- 0.7",
                "3 <- 0.1",
                "4 <- 0.2",
                "5 <- INIT",
                "6 <- 0.9",
                "7 <- INIT",
                "8 <- 0.4",
                "9 <- 0.7"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 5 = 7 (left: 4 7 12) || 7 * 4 = 28 (left: 28 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)",
                "5 * 4 = 20 (left: 20 12 12) || 20 / 12 = 1.66666666667 (left: 1.66666666667 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)",
                "12 / 4 = 3 (left: 3 5 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 5 = 2.4 (left: 4 ",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 12 = 1 (left: 3 1 12)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                1.002,
                0.003,
                2.001,
                1.002,
                0.001,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.4",
                "2 <- 0.9",
                "3 <- 0.1",
                "4 <- 0.7",
                "5 <- INIT",
                "6 <- 0.9",
                "7 <- 0.2",
                "8 <- 0.7",
                "9 <- 0.9"
            ]
        },
        "Step 3": {
            "steps": [
                "5 * 4 = 20 (left: 20 12 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)",
                "5 * 4 = 20 (left: 20 12 12) || 20 * 12 = 240 (left: 240 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)",
                "12 - 4 = 8 (left: 8 5 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)"
            ],
            "Evaluation": [
                1.001,
                0.003,
                0.002,
                40.0,
                0.003,
                22.0,
                0.003,
                21.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.7",
                "2 <- 0.4",
                "3 <- 0.9",
                "4 <- 0.1",
                "5 <- 0.7",
                "6 <- 2.5",
                "7 <- 1.5",
                "8 <- 3.5",
                "9 <- 3.3"
            ]
        },
        "Step 4": {
            "steps": [
                "5 * 4 = 20 (left: 20 12 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "5 * 4 = 20 (left: 20 12 12) || 12 - 20 = -8 (left: -8 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12 12)",
                "12 / 4 = 3 (left: 3 5 12) || 5 * 3 = 15 (left: 15 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36) || 36 - 12 = 24 (left: 24)",
                "12 - 4 = 8 (left: 8 5 12) || 12 + 8 = 20 (left: 5 20)",
                "5 * 4 = 20 (left: 20 12 12) || 20 * 12 = 240 (left: 240 12) || 240 * 12 = 2880 (left: 2880)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                40.001,
                0.003,
                2.0,
                1.002,
                0.003,
                60.0,
                41.0,
                0.003
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 4.7",
                "2 <- 3.5",
                "3 <- 0.7",
                "4 <- 3.3",
                "5 <- 3.3",
                "6 <- 0.4",
                "7 <- 4.7",
                "8 <- 4.8",
                "9 <- 0.2"
            ]
        },
        "Step 5": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 * 12 = 144 (left: 36 144)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36) || 36 - 12 = 24 (left: 24) || Answer: (12 / 4) * (12 - 12) = 24",
                "12 - 4 = 8 (left: 8 5 12) || 8 / 5 = 1.6 (left: 1.6 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "5 * 4 = 20 (left: 20 12 12) || 20 * 12 = 240 (left: 240 12) || 240 * 12 = 2880 (left: 2880)",
                "5 * 4 = 20 (left: 20 12 12) || 20 * 12 = 240 (left: 240 12) || 240 * 12 = 2880 (left: 2880)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36) || 36 - 12 = 24 (left: 24) || Answer: (12 * (12 / 4)) - 24 = 24",
                "12 - 4 = 8 (left: 8 5 12) || 12 + 8 = 20 (left: 5 20) || Input: 3 9 27",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)"
            ],
            "Evaluation": [
                21.001,
                0.003,
                1.001,
                0.003,
                0.001,
                0.002,
                2.001,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 4.7",
                "2 <- 0.7",
                "3 <- 4.2",
                "4 <- 4.8",
                "5 <- 3.3",
                "6 <- 1.5",
                "7 <- 0.5",
                "8 <- 0.4",
                "9 <- 3.7"
            ]
        },
        "Step 6": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 * 12 = 144 (left: 36 144) || 144 - 36 = 108 (left: 108)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36) || 36 - 12 = 24 (left: 24) || Answer: (12 / 4) * (12 - 12) = 24",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36)",
                "12 - 4 = 8 (left: 8 5 12) || 12 + 8 = 20 (left: 5 20) || Possible next steps:",
                "5 * 4 = 20 (left: 20 12 12) || 20 * 12 = 240 (left: 240 12) || 240 * 12 = 2880 (left: 2880)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36) || 36 / 12 = 3 (left: 3 36)",
                "12 / 4 = 3 (left: 5 3 12) || 3 + 12 = 15 (left: 5 15)",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12) || 12 / 3 = 4 (left: 4 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                60.0,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 6.3",
                "1 <- 5.7",
                "2 <- 4.8",
                "3 <- 6.3",
                "4 <- 6.3",
                "5 <- 6.3",
                "6 <- 4.7",
                "7 <- 3.5",
                "8 <- 5.7",
                "9 <- 0.7"
            ]
        },
        "Step 7": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 36 / 1 = 36 (left: 36)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36) || 36 - 12 = 24 (left: 24) || Answer: (12 * (12 / 4)) - 24 = 24 || Input: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n1 * 9 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 - 9 = 18 (left: 18)\n18 / 9 = 2 (left: 2 18)\n2",
                "12 - 4 = 8 (left: 8 5 12) || 12 + 8 = 20 (left: 5 20) || 20 / 5 = 4 (left: 4 20)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 36 - 1 = 35 (left: 36)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 / 12 = 1 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36) || 36 - 12 = 24 (left: 24) || Answer: ((4 * 5) - 12) * 12 = 24",
                "12 - 4 = 8 (left: 8 5 12) || 8 * 5 = 40 (left: 40 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36) || 36 - 12 = 24 (left: 24) || Answer: (12 * (12 / 4)) - 24 = 24 || Input: 3 4 5 6\nSteps:\n4 + 6 = 10 (left: 3 5 10)\n5 * 3 = 15 (left: 15 10)\n15 - 10 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: (((3 * 5) + (4 + 6)) *",
                "12 / 4 = 3 (left: 3 12 12) || 12 / 3 = 4 (left: 4 12 12)"
            ],
            "Evaluation": [
                20.0,
                60.0,
                60.0,
                20.0,
                0.003,
                0.003,
                60.0,
                0.003,
                60.0,
                2.001
            ],
            "Resampling": [
                "0 <- 5.7",
                "1 <- 7.8",
                "2 <- 7.1",
                "3 <- 0.2",
                "4 <- 7.6",
                "5 <- 7.6",
                "6 <- 7.8",
                "7 <- 4.2",
                "8 <- 5.0",
                "9 <- 7.2"
            ]
        },
        "Step 8": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36) || 36 - 12 = 24 (left: 24) || Answer: (12 * (12 / 4)) - 24 = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36) || 36 - 12 = 24 (left: 24) || Answer: (12 * (12 / 4)) - 24 = 24 || Input: 3 4 5 6\nSteps:\n4 + 6 = 10 (left: 3 5 10)\n5 * 3 = 15 (left: 15 10)\n15 - 10 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: (((3 * 5) + (4 + 6)) * || (5 - 1)) = 24",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36) || 36 - 12 = 24 (left: 24) || Answer: (12 * (12 / 4)) - 24 = 24 || Input: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n1 * 9 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 - 9 = 18 (left: 18)\n18 / 9 = 2 (left: 2 18)\n2 ||  * 8 = 16 (left: 16 18)\n16 + 18 = 34 (left: 34)\n34 - 10 = 24 (left: 24)\nAnswer: ((3 * 3) + 8) * ((9 - 1) + 10) = 24",
                "12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36) || 36 - 12 = 24 (left: 24) || Answer: ((4 * 5) - 12) * 12 = 24 || Input: 3 3 6 8\nSteps:\n3 + 8 = 11 (left: 3 6 11)\n6 - 3 = 3 (left: 3 11)\n3 * 11 = 33 (left: 33)\n33 - 9 = 24 (left: 24)\nAnswer: (3 + 8) * (6 - 3) - 9 = 24",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36) || 36 - 12 = 24 (left: 24) || Answer: ((4 * 5) - 12) * 12 = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 * 3 = 18 (left: 18 12)\n18 - 12 = 6 (left: 6)\nAnswer: (3 * 6) + (5 + 7) = 24",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36) || 36 - 12 = 24 (left: 24) || Answer: (12 * (12 / 4)) - 24 = 24 || Input: 3 4 5 6\nSteps:\n4 + 6 = 10 (left: 3 5 10)\n5 * 3 = 15 (left: 15 10)\n15 - 10 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: (((3 * 5) + (4 + 6)) * || (5 - 1)) = 24",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 - 12 = 0 (left: 0 36)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 * 12 = 144 (left: 36 144) || 144 / 36 = 4 (left: 4 144)",
                "12 - 4 = 8 (left: 8 5 12) || 12 + 8 = 20 (left: 5 20) || 20 / 5 = 4 (left: 4 20) || 20 - 4 = 16 (left: 16 20)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                60.0,
                0.003,
                60.0,
                60.0,
                0.003,
                20.002,
                40.001,
                0.003
            ],
            "Resampling": [
                "0 <- 8.5",
                "1 <- 8.7",
                "2 <- 8.0",
                "3 <- 7.1",
                "4 <- 4.8",
                "5 <- 8.5",
                "6 <- 7.1",
                "7 <- 3.5",
                "8 <- 7.6",
                "9 <- 5.7"
            ]
        },
        "Step 9": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36) || 36 - 12 = 24 (left: 24) || Answer: ((4 * 5) - 12) * 12 = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 * 3 = 18 (left: 18 12)\n18 - 12 = 6 (left: 6)\nAnswer: (3 * 6) + (5 + 7) = 24 || Input: 2 3 4 8\nSteps:\n2 * 4 = 8 (left: 3 8 8)\n8 - 3 = 5 (left: 5 8)\n5 * 8 = 40 (left: 40)\n40 - 8 = 32 (left: 32)\n32 / 4 = 8 (left: 8)\n8 * 3 = 24 (left: 24)\nAnswer: ((",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 12 36) || 12 - 12 = 0 (left: 0 36) || 5 + 10 = 15 (left: 15 15)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36) || 36 - 12 = 24 (left: 24) || Answer: (12 * (12 / 4)) - 24 = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24 || Input: 2 3 5 8\nSteps:\n3 + 5 = 8 (left: 2 8 8)\n8 * 2 = 16 (left: 16 8)\n16 - 8 = 8 (left: 8)\n8 * 3 = 24 (left: 24)\nAnswer: ((3 + 5) * 2) * 8 = 24",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36) || 36 - 12 = 24 (left: 24) || Answer: (12 * (12 / 4)) - 24 = 24 || Input: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n1 * 9 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 - 9 = 18 (left: 18)\n18 / 9 = 2 (left: 2 18)\n2 || * 24 = 48 (left: 48)\nAnswer: ((3 * 3) * 9) - 24 = 24",
                "12 - 4 = 8 (left: 8 5 12) || 12 + 8 = 20 (left: 5 20) || 20 / 5 = 4 (left: 4)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36) || 36 - 12 = 24 (left: 24) || Answer: ((4 * 5) - 12) * 12 = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 * 3 = 18 (left: 18 12)\n18 - 12 = 6 (left: 6)\nAnswer: (3 * 6) + (5 + 7) = 24 || Input: 2 3 4 6\nSteps:\n3 + 6 = 9 (left: 2 4 9)\n4 * 2 = 8 (left: 8 9)\n9 - 8 = 1 (left: 1)\n1 * 24 = 24 (left: 24)\nAnswer: ((2 * 4) - (3 + 6)) * 24 = 24",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36) || 36 - 12 = 24 (left: 24) || Answer: (12 * (12 / 4)) - 24 = 24 || Input: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n1 * 9 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 - 9 = 18 (left: 18)\n18 / 9 = 2 (left: 2 18)\n2 || * 27 = 24 (left: 24)\nAnswer: ((3 * 3) + 8) - 9 = 24",
                "12 - 4 = 8 (left: 8 5 12) || 12 / 8 = 1.5 (left: 1.5 12)",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36) || 36 - 12 = 24 (left: 24) || Answer: ((4 * 5) - 12) * 12 = 24 || Input: 3 3 8 9\nSteps:\n3 * 8 = 24 (left: 3 9 24)\n9 - 3 = 6 (left: 6 24)\n6 * 4 = 24 (left: 24)\nAnswer: (3 * 8) * (9 - 3) = 24",
                "12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36) || 36 - 12 = 24 (left: 24) || Answer: (12 * (12 / 4)) - 24 = 24 || Input: 3 3 7 9\nSteps:\n7 + 3 = 10 (left: 3 9 10)\n10 - 3 = 7 (left: 7 9)\n7 * 9 = 63 (left: 63)\n63 / 3 = 21 (left: 21)\n21 - 9 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: (("
            ]
        },
        "Input": "4 5 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "35": {
        "puzzle": "4 6 13 13",
        "Step 0": {
            "steps": [
                "13 - 4 = 9 (left: 6 9 13)",
                "6 + 13 = 19 (left: 4 19 13)",
                "13 - 6 = 7 (left: 4 7 13)",
                "4 * 6 = 24 (left: 13 13 24)",
                "13 - 4 = 9 (left: 6 9 13)",
                "4 * 6 = 24 (left: 13 13 24)",
                "13 / 6 = 2.16666666667 (left: 4 13 13)",
                "13 - 4 = 9 (left: 9 6 13)",
                "13 - 4 = 9 (left: 9 6 13)",
                "13 + 4 = 17 (left: 6 13 17)"
            ],
            "Evaluation": [
                21.001,
                41.0,
                22.0,
                2.001,
                1.002,
                2.001,
                0.003,
                60.0,
                41.0,
                2.001
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- INIT",
                "2 <- 0.8",
                "3 <- 0.7",
                "4 <- INIT",
                "5 <- 0.8",
                "6 <- 0.2",
                "7 <- 0.8",
                "8 <- 0.7",
                "9 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "13 - 4 = 9 (left: 9 6 13) || 6 + 13 = 19 (left: 9 19)",
                "4 * 6 = 24 (left: 13 13 24)",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 6 = 7 (left: 9 7)",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 4 13)",
                "4 * 6 = 24 (left: 13 13 24)",
                "13 - 4 = 9 (left: 9 6 13) || 9 * 6 = 54 (left:",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9)",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 4 13)",
                "13 - 4 = 9 (left: 9 6 13) || 6 + 13 = 19 (left: 9 19)",
                "6 + 13 = 19 (left: 4 19 13) || 19 / 4 = 4.75 (left: 4.75 13)"
            ],
            "Evaluation": [
                0.002,
                2.001,
                0.001,
                1.002,
                2.001,
                0.003,
                40.0,
                0.003,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 1.6",
                "2 <- 0.0",
                "3 <- INIT",
                "4 <- 1.6",
                "5 <- 1.6",
                "6 <- 0.7",
                "7 <- 1.6",
                "8 <- 1.6",
                "9 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "13 - 4 = 9 (left: 9 6 13) || 9 - 6 = 3 (left: 3 13)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 5 * 7 = 35 (left: 12)",
                "13 - 4 = 9 (left: 6 9 13) || 6 * 9 = 54 (left: 13 54)",
                "13 - 4 = 9 (left: 9 6 13)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 5 + 5 = 10 (left: 10)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 9 / 4 = 2.25 (left: 2.25)",
                "13 - 4 = 9 (left: 9 6 13) || 13 + 9 = 22 (left: 6 22)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || Input: 3 6 10",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || Input: 10 5 3",
                "6 + 13 = 19 (left: 4 19 13) || 19 / 4 = 4.75 (left: 4.75 13)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                2.001,
                40.001,
                0.003,
                0.002,
                0.002,
                0.003,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 2.3",
                "2 <- 0.1",
                "3 <- 2.3",
                "4 <- 0.8",
                "5 <- 0.3",
                "6 <- 2.3",
                "7 <- 0.0",
                "8 <- 1.6",
                "9 <- 0.7"
            ]
        },
        "Step 3": {
            "steps": [
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 9 / 4 = 2.25 (left: 2.25 9)",
                "13 - 4 = 9 (left: 9 6 13) || 9 - 6 = 3 (left: 3 13)",
                "6 + 13 = 19 (left: 4 19 13) || 19 / 4 = 4.75 (left: 4.75 13)",
                "13 - 4 = 9 (left: 9 6 13) || 9 * 6 = 54 (left: 13 54)",
                "13 - 4 = 9 (left: 9 6 13) || 6 / 9 = 0.67 (left: 0.67 13)",
                "4 * 6 = 24 (left: 13 13 24) || 24 / 13 = 1 (left:",
                "13 - 4 = 9 (left: 9 6 13) || 9 - 6 = 3 (left: 3 13)",
                "13 - 4 = 9 (left: 6 9 13) || 13 + 6 = 19 (left: 9 19)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 4 * 9 = 36 (left: 9 36)",
                "13 - 4 = 9 (left: 9 6 13) || 6 - 9 = -3 (left: -3 13)"
            ],
            "Evaluation": [
                1.001,
                0.003,
                0.003,
                0.003,
                1.001,
                0.002,
                0.003,
                0.002,
                20.002,
                0.001
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 0.8",
                "2 <- 2.3",
                "3 <- 2.3",
                "4 <- 3.8",
                "5 <- 2.3",
                "6 <- 0.0",
                "7 <- 0.7",
                "8 <- 1.6",
                "9 <- 0.1"
            ]
        },
        "Step 4": {
            "steps": [
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 9 - 4 = 5 (left: 5)",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 6 = 7 (left: 7 9)",
                "13 - 4 = 9 (left: 9 6 13) || 9 * 6 = 54 (left: 54 13)",
                "13 - 4 = 9 (left: 9 6 13) || 9 * 6 = 54 (left: 13 54)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 4 * 9 = 36 (left: 9 36) || 36 / 9 = 4 (left: 4)",
                "13 - 4 = 9 (left: 9 6 13) || ",
                "13 - 4 = 9 (left: 6 9 13) || 13 - 6 = 7 (left: 6 7 13)",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 4 13)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || Input: 3 7",
                "6 + 13 = 19 (left: 4 19 13) || 4 * 19 = 76 (left: 13 76)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                2.001,
                0.003,
                0.003,
                0.003,
                2.001,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 3.8",
                "2 <- 2.3",
                "3 <- 0.8",
                "4 <- 4.2",
                "5 <- 0.2",
                "6 <- 1.6",
                "7 <- 3.8",
                "8 <- 2.9",
                "9 <- 0.7"
            ]
        },
        "Step 5": {
            "steps": [
                "6 + 13 = 19 (left: 4 19 13) || 19 - 4 = 15 (left: 15 13)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 4 * 9 = 36 (left: 9 36) || 36 - 9 = 27 (left: 27)",
                "13 - 4 = 9 (left: 9 6 13) || 9 + 6 = 15 (left: 15 13)",
                "13 - 4 = 9 (left: 9 6 13) || 9 / 6 = 1.5 (left: 1.5 13)",
                "13 - 4 = 9 (left: 9 6 13) || 9 * 6 = 54 (left: 54 13) || 54 / 13 = 4.15 (left: 4.15)",
                "13 - 6 = 7 (left: 4 7 13) || 13 / 4 = ",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || Input: 3 11",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 4 * 9 = 36 (left: 9 36) || 9 + 36 = 45 (left: 45)",
                "6 + 13 = 19 (left: 4 19 13) || 19 / 4 = 4.75 (left: 4.75 13) || 4.75 * 13 = 61.75 (left: 61.75)",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 9 4)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                1.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                40.001
            ],
            "Resampling": [
                "0 <- 5.9",
                "1 <- 0.1",
                "2 <- 0.8",
                "3 <- 0.2",
                "4 <- 1.6",
                "5 <- 2.3",
                "6 <- 5.9",
                "7 <- 1.6",
                "8 <- 0.8",
                "9 <- 0.7"
            ]
        },
        "Step 6": {
            "steps": [
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 9 4) || 9 - 4 = 5 (left: 5)",
                "6 + 13 = 19 (left: 4 19 13) || 19 / 4 = 4.75 (left: 4.75 13)",
                "13 - 4 = 9 (left: 9 6 13) || 6 + 13 = 19 (left: 9 19)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 3 + 7 = 10 (left: 10 1)",
                "13 - 4 = 9 (left: 9 6 13) || Input: 3 5 7",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 9 4) || 9 * 4 = 36 (left: 36)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || Input: 3 7 10",
                "13 - 4 = 9 (left: 9 6 13) || 6 + 13 = 19 (left: 9 19)",
                "13 - 4 = 9 (left: 9 6 13) || 9 - 6 = 3 (left: 3 13)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.003,
                0.001,
                60.0,
                0.003,
                40.0,
                0.003,
                0.001,
                1.002
            ],
            "Resampling": [
                "0 <- 6.6",
                "1 <- 6.6",
                "2 <- 6.4",
                "3 <- 6.4",
                "4 <- 5.9",
                "5 <- 4.2",
                "6 <- 6.4",
                "7 <- 0.7",
                "8 <- 2.3",
                "9 <- 0.7"
            ]
        },
        "Step 7": {
            "steps": [
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 9 4) || 9 * 4 = 36 (left: 36) || 36 / 2 = 18 (left: 18)",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 9 4) || 9 * 4 = 36 (left: 36) || No possible next steps as there are no other numbers provided.",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 3 + 7 = 10 (left: 10 1) || 10 / 1 = 10 (left: 10)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 3 + 7 = 10 (left: 10 1) || 10 * 1 = 10 (left: 1 10)",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 9 4) || 9 / 4 = 2.25 (left: 2.25)",
                "13 - 4 = 9 (left: 9 6 13) || 9 * 6 = 54 (left: 54 13) || 54 / 13 = 4.153846153846154 (left: 4.153846153846154)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 3 + 7 = 10 (left: 10 1) || 10 / 1 = 10 (left: 10)",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 6 = 7 (left: 9 7)",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 4 6)",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 6 = 7 (left: 9 7)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.003,
                60.0,
                0.002,
                0.0,
                0.003,
                0.003,
                60.0,
                1.002
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 5.9",
                "2 <- 0.8",
                "3 <- 7.3",
                "4 <- 6.4",
                "5 <- 3.8",
                "6 <- 7.3",
                "7 <- 6.4",
                "8 <- 7.3",
                "9 <- 7.3"
            ]
        },
        "Step 8": {
            "steps": [
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 3 + 7 = 10 (left: 10 1) || 10 - 1 = 9 (left: 9)",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 9 4) || 9 - 4 = 5 (left: 5)",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 9 4)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 3 + 7 = 10 (left: 10 1) || 10 * 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 3 + 7 = 10 (left: 10 1) || 10 * 1 = 10 (left: 1)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 4 * 9 = 36 (left: 9 36) || 36 - 9 = 27 (left: 27)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 3 + 7 = 10 (left: 10 1) || 10 * 1 = 10 (left: 1 10) || 10 - 10 = 0 (left: 0)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 3 + 7 = 10 (left: 10 1) || 10 * 1 = 10 (left: 1)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 3 + 7 = 10 (left: 10 1) || 10 * 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 3 + 7 = 10 (left: 10 1) || 10 * 1 = 10 (left: 1 10) || 10 * 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.002,
                0.0,
                40.001,
                0.003,
                0.003,
                0.0,
                20.002,
                0.003,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 7.8",
                "2 <- 1.6",
                "3 <- 7.8",
                "4 <- 7.3",
                "5 <- 7.3",
                "6 <- 7.8",
                "7 <- 0.1",
                "8 <- 0.1",
                "9 <- 5.9"
            ]
        },
        "Step 9": {
            "steps": [
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 4 * 9 = 36 (left: 9 36) || 36 / 9 = 4 (left: 4 36)",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 4 6) || 9 - 3 = 6 (left: 6 5)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 9 / 4 = 2.25 (left: 2.25)",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 3 + 7 = 10 (left: 10 1) || 10 * 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "13 - 6 = 7 (left: 4 7 13) || 13 - 4 = 9 (left: 4 9) || 3 + 7 = 10 (left: 10 1) || 10 * 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 4 6) || Input: 10 15",
                "6 + 13 = 19 (left: 4 19 13) || 13 + 4 = 17 (left: 17 13)",
                "6 + 13 = 19 (left: 4 19 13) || 19 / 4 = 4.75 (left: 4.75 13)",
                "13 - 4 = 9 (left: 9 6 13) || 13 - 9 = 4 (left: 9 4) || 9 / 4 = 2.25 (left: 2.25)"
            ]
        },
        "Input": "4 6 13 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "36": {
        "puzzle": "12 12 12 12",
        "Step 0": {
            "steps": [
                "Input: 0 0 0 0",
                "12 + 12 = 24 (left: 12 24 12)",
                "12 - 12 = 0 (left: 0 12 12)",
                "12 - 12 = 0 (left: 0 12 12)",
                "12 * 12 = 144 (left: 12 12 144)",
                "12 * 12 = 144 (left: 12 12 144)",
                "12 - 12 = 0 (left: 0 12 12)",
                "12 - 12 = 0 (left: 0 12 12)",
                "12 * 12 = 144 (left: 12 12 144)",
                "12 * 12 = 144 (left: 12 12 144)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                60.0,
                60.0,
                40.001,
                60.0,
                60.0,
                60.0,
                1.002
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 0.6",
                "2 <- 0.2",
                "3 <- 0.4",
                "4 <- 0.6",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 0.1",
                "8 <- 0.4",
                "9 <- 0.8"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 0 12)",
                "12 - 12 = 0 (left: 0 12 12) || 0 * 12 = 0 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || Input: 3 3 ",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12)",
                "12 * 12 = 144 (left: 12 12 144)",
                "12 + 12 = 24 (left: 12 24 12) || 12 / 24 = 0.5 (left: 0.5 12)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12 12)"
            ],
            "Evaluation": [
                60.0,
                20.002,
                0.003,
                40.001,
                20.002,
                40.001,
                22.0,
                0.0,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 1.6",
                "2 <- 0.5",
                "3 <- 0.7",
                "4 <- 1.5",
                "5 <- 0.7",
                "6 <- 1.6",
                "7 <- INIT",
                "8 <- 0.5",
                "9 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12) || 12 / 0 is undefined",
                "12 * 12 = 144 (left: 12 12 144) || 12 * 12 = 144 (left: 12 144)",
                "12 * 12 = 144 (left: 12 12 144) || 12 - 12 = 0 (left: 0 144)",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 0 * 12 = 0 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 3 + 9 = 12 (left: 9 12)",
                "12 * 12 = 144 (left: 12 12 144) || 12 / 12 = 1 (left: 1 144)",
                "Input: 0 12 12 12",
                "12 * 12 = 144 (left: 12 12 144) || 12 / 12 = 1 (left: 1 12 144)",
                "12 - 12 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                1.001,
                40.001,
                60.0,
                1.002,
                0.003,
                0.003,
                20.002,
                60.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.8",
                "2 <- 0.7",
                "3 <- 0.7",
                "4 <- 1.1",
                "5 <- 1.0",
                "6 <- 0.1",
                "7 <- 1.4",
                "8 <- 0.4",
                "9 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 0 12) || 12 / 0 = undefined (left: 0 12)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 / 24 = 6 (left",
                "12 - 12 = 0 (left: 0 12 12) || Input",
                "12 - 12 = 0 (left: 0 12 12) || 0 / 12 = 0 (left: 0 12)",
                "12 - 12 = 0 (left: 0 12 12) || 0 * 12 = 0 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 0 12) || Input: 1 2 3 4 5",
                "12 + 12 = 24 (left: 12 24 12) || 12 * 12 = 144 (left: 144)",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 * 12 = 144 (left: 12 12 144) || 12 / 12 = 1 (left: 1 144)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)"
            ],
            "Evaluation": [
                20.001,
                60.0,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                40.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 2.4",
                "2 <- 1.0",
                "3 <- 2.4",
                "4 <- 2.9",
                "5 <- 0.1",
                "6 <- 0.8",
                "7 <- 0.2",
                "8 <- 0.1",
                "9 <- 2.4"
            ]
        },
        "Step 4": {
            "steps": [
                "12 * 12 = 144 (left: 12 12 144) || 12 / 12 = 1 (left: 1 144)",
                "12 - 12 = 0 (left: 0 12 12) || 0 * 12 = 0 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 0 12) || Input:",
                "12 - 12 = 0 (left: 0 12 12) || 0 * 12 = 0 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 - 12 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 12) || 0 + 12 = 12",
                "12 + 12 = 24 (left: 12 24 12) || 12 - 24 = -",
                "12 * 12 = 144 (left: 12 12 144) || 12 / 12 = 1 (left: 1 12 144)",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12)",
                "12 + 12 = 24 (left: 12 24 12) || Input: 3 5 7 9",
                "12 - 12 = 0 (left: 0 12 12) || 0 * 12 = 0 (left: 12 12) || 12 - 12 = 0 (left: 0)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                20.002,
                0.002,
                0.003,
                0.003,
                1.002,
                20.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 0.6",
                "2 <- 0.4",
                "3 <- 0.4",
                "4 <- 0.1",
                "5 <- 1.3",
                "6 <- 1.5",
                "7 <- 0.1",
                "8 <- 1.8",
                "9 <- 0.8"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12) || 0 * 12 = 0 (left: 12 12)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12)",
                "12 * 12 = 144 (left: 12 12 144) || 12 - 12 = 0 (left: 0 144)",
                "12 + 12 = 24 (left: 12 24 12) || 24 - 12 = 12 (left: 12 12)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12)",
                "12 + 12 = 24 (left: 12 24 12) || 12 + 24 = 36 (left: 12 36)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 24 + 144 = 168 (left: 168)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                60.0,
                40.001,
                20.002,
                0.003,
                40.001,
                0.002,
                20.002,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 0.7",
                "2 <- 1.8",
                "3 <- 5.6",
                "4 <- 2.4",
                "5 <- 0.1",
                "6 <- 3.1",
                "7 <- 5.4",
                "8 <- 5.9",
                "9 <- 5.1"
            ]
        },
        "Step 6": {
            "steps": [
                "12 + 12 = 24 (left: 12 24 12) || 24 - 12 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "12 - 12 = 0 (left: 0 12 12) || 0 * 12 = 0 (left: 12 12)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 - 24 = 120 (left: 120)",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 0 * 12 = 0 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 + 12 = 24 (left: 12 24 12) || 24 - 12 = 12 (left: 12 12",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 / 24 = 6 (left || 24 - 144 = -120 (left: -120)",
                "12 + 12 = 24 (left: 12 24 12) || 24 - 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 0 * 12 = 0 (left: 12 12) || 12 - 12 = 0 (left: 0)"
            ],
            "Evaluation": [
                60.0,
                22.0,
                0.003,
                0.003,
                0.002,
                60.0,
                0.002,
                20.002,
                20.002,
                20.002
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 6.0",
                "2 <- 0.2",
                "3 <- 6.0",
                "4 <- 6.1",
                "5 <- 5.0",
                "6 <- 6.1",
                "7 <- 6.0",
                "8 <- 0.4",
                "9 <- 6.0"
            ]
        },
        "Step 7": {
            "steps": [
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 / 24 = 6 (left || 144 - 24 = 120 (left: 120)",
                "12 + 12 = 24 (left: 12 24 12) || 24 - 12 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (12 + 12) + (12 + 12) = 24",
                "12 - 12 = 0 (left: 0 12 12) || Possible next steps:",
                "12 + 12 = 24 (left: 12 24 12) || 24 - 12 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((12 + 12) - 12) + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 0 * 12 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 - 12 = 0 (left: 0 12 12) || 0 * 12 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 + 12 = 24 (left: 12 24 12) || 24 - 12 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (12 + 12) + (12 + 12) = 24",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144)",
                "12 + 12 = 24 (left: 12 24 12) || 24 - 12 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (12 + 12) + (12 + 12) = 24"
            ]
        },
        "Input": "12 12 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "37": {
        "puzzle": "2 11 11 12",
        "Step 0": {
            "steps": [
                "12 - 11 = 1 (left: 2 11 1)",
                "11 - 2 = 9 (left: 9 11 12)",
                "11 - 2 = 9 (left: 9 11 12)",
                "11 * 2 = 22 (left: 11 12 22)",
                "12 - 11 = 1 (left: 1 11 12)",
                "12 - 11 = 1 (left: 2 1 11)",
                "11 * 2 = 22 (left: 11 12 22)",
                "12 - 2 = 10 (left: 11 11 10)",
                "11 / 2 = 5.5 (left: 5.5 11 12)",
                "12 - 11 = 1 (left: 1 11 12)"
            ],
            "Evaluation": [
                1.0,
                1.002,
                2.001,
                0.003,
                21.001,
                0.003,
                2.001,
                0.003,
                3.0,
                21.001
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- INIT",
                "2 <- 0.9",
                "3 <- 0.9",
                "4 <- 0.4",
                "5 <- 0.4",
                "6 <- INIT",
                "7 <- 0.9",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "11 - 2 = 9 (left: 9 11 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 11 = 1 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11)",
                "12 - 11 = 1 (left: 1 11 12) || 12 - 11 = 1 (left:",
                "12 - 2 = 10 (left: 10 11 12)",
                "12 - 11 = 1 (left: 1 11 12) || 12 - 1 = 11 (left: 11 11)",
                "11 / 2 = 5.5 (left: 5.5 11 12)",
                "11 - 2 = 9 (left: 9 11 12)"
            ],
            "Evaluation": [
                0.0,
                1.002,
                60.0,
                0.003,
                40.0,
                20.0,
                1.002,
                0.003,
                2.001,
                21.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.2",
                "2 <- 1.9",
                "3 <- INIT",
                "4 <- 1.9",
                "5 <- 1.4",
                "6 <- 1.2",
                "7 <- 1.4",
                "8 <- 1.2",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "11 / 2 = 5.5 (left: 5.5 11 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 - 2 = 9 (left: 9 11 12) || 11 / 9 = 1.2222222222222223 (left: 1.2222222222222223 12)",
                "12 - 11 = 1 (left: 2 11 1)",
                "11 - 2 = 9 (left: 9 11 12) || 11 / 9 = 1.2222 (left: 1.2222 12)",
                "12 - 11 = 1 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 - 11 = 1 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || Input: 6 3",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 - 2 = 9 (left: 9 11 12)"
            ],
            "Evaluation": [
                3.0,
                0.003,
                0.001,
                3.0,
                1.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 1.4",
                "2 <- 1.2",
                "3 <- 1.9",
                "4 <- INIT",
                "5 <- 1.2",
                "6 <- 1.6",
                "7 <- 0.9",
                "8 <- 0.4",
                "9 <- 1.2"
            ]
        },
        "Step 3": {
            "steps": [
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12)",
                "12 - 11 = 1 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 - 2 = 9 (left: 9 11 12) || 9 * 11 = 99 (left: 12 99)",
                "12 - 11 = 1 (left: 2 11 1)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 - 2 = 10 (left: 10 11 12) || 12 - 10 = 2 (left: 11)",
                "12 - 11 = 1 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11)",
                "12 - 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.001,
                0.002,
                3.0,
                0.003,
                0.001,
                1.0,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 3.0",
                "2 <- 1.5",
                "3 <- 1.4",
                "4 <- 3.0",
                "5 <- INIT",
                "6 <- 1.2",
                "7 <- 1.2",
                "8 <- 0.4",
                "9 <- 2.3"
            ]
        },
        "Step 4": {
            "steps": [
                "11 - 2 = 9 (left: 9 11 12) || 11 + 12 = 23 (left: 9 23)",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6 6)",
                "12 - 11 = 1 (left: 1 11 12) || 12 - 11 = 1 (left: || 9 / 3 = 3 (left: 3 7)",
                "12 - 11 = 1 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "12 - 11 = 1 (left: 1 11 12)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 - 11 = 1 (left: 1 11 12) || 12 - 1 = 11 (left: 11 12)",
                "12 - 11 = 1 (left: 2 11 1) || 11 / 2 = 5.5 (left: 5.5 1)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                40.001,
                0.002,
                60.0,
                3.0,
                0.002,
                0.001,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 3.0",
                "2 <- INIT",
                "3 <- 3.0",
                "4 <- 3.0",
                "5 <- 4.2",
                "6 <- 4.2",
                "7 <- 1.6",
                "8 <- 4.4",
                "9 <- 1.4"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "11 - 2 = 9 (left: 9 11 12)",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "12 - 11 = 1 (left: 1 11 12) || 12 - 11 = 1 (left: || 9 / 3 = 3 (left: 3 7) || 4 + 6 = 10 (left: 10 2)",
                "12 - 11 = 1 (left: 1 11 12) || 12 - 11 = 1 (left: || 9 / 3 = 3 (left: 3 7) || 3 / 7 = 0.428 (left: 0.428 7)",
                "12 - 2 = 10 (left: 10 11 12) || 12 / 10 = 1.2 (left: 11 1.2)",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (11 - 2) * (11 - 9) = 24",
                "12 - 11 = 1 (left: 1 11 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.0,
                60.0,
                1.002,
                0.003,
                0.001,
                0.001,
                0.0,
                0.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 4.4",
                "2 <- 0.9",
                "3 <- 1.9",
                "4 <- 4.2",
                "5 <- 3.0",
                "6 <- 4.4",
                "7 <- 5.1",
                "8 <- 4.2",
                "9 <- 3.0"
            ]
        },
        "Step 6": {
            "steps": [
                "11 - 2 = 9 (left: 9 11 12)",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (11 - 2) * (11 - 9) * 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 1 12)",
                "11 - 2 = 9 (left: 9 11 12) || 9 * 11 = 99 (left: 12 99)",
                "12 - 11 = 1 (left: 1 11 12) || 12 - 11 = 1 (left: || 9 / 3 = 3 (left: 3 7) || 5 + 9 = 14 (left: 14)",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (11 - 2) * (11 - 9) * 12 = 24",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (11 - 2) * (11 - 9) * 12 = 24",
                "12 - 11 = 1 (left: 1 11 12) || 12 - 11 = 1 (left: || 9 / 3 = 3 (left: 3 7) || Input: 5 9",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)"
            ],
            "Evaluation": [
                40.001,
                20.002,
                1.002,
                0.003,
                0.001,
                0.002,
                40.001,
                40.001,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 1.5",
                "2 <- 4.2",
                "3 <- 6.9",
                "4 <- 6.6",
                "5 <- 6.6",
                "6 <- 6.6",
                "7 <- 6.0",
                "8 <- INIT",
                "9 <- 5.1"
            ]
        },
        "Step 7": {
            "steps": [
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: 2 * (11 - (11 - 12)) = 24",
                "12 - 11 = 1 (left: 1 11 12) || 12 - 11 = 1 (left: || 12 - 11 = 1 (left: 1)",
                "12 - 11 = 1 (left: 1 11 12) || 12 - 11 = 1 (left: || 9 / 3 = 3 (left: 3 7) || 7 - 3 = 4 (left: 4)",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (11 - 2) * (11 - 9) * 12 = 24",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (11 - 2) * (11 - 9) * 12 = 24 || Input: 3 3 8 8\nSteps:\n3 + 3 = 6 (left: 6 8 8)\n6 * 8 = 48 (left: 8 48)\n8 - 8 = 0 (left: 0 48)\n48 + 0 = 48 (left: 48)\nAnswer: (3 + 3) * (8 + 8) = 48",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (11 - 2) * (11 - 9) * 12 = 24 || Input: 2 3 4 6\nSteps:\n3 + 6 = 9 (left: 2 4 9)\n9 - 4 = 5 (left: 2 5)\n5 * 2 = 10 (left: 10)\n10 + 4 = 14 (left: 14)\n14 * 2 = 28 (left: 28)\n28 - 4 = 24 (left: 24)\nAnswer: (((",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (11 - 2) * (11 - 9) * 12 = 24 || Input: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9 9)\n1 * 9 = 9 (left: 9 9)\n9 - 9 = 0 (left: 0 9)\n9 * 0 = 0 (left: 0)\n8 + 3 = 11 (left:",
                "11 - 2 = 9 (left: 9 11 12) || 12 / 9 = 1.33 (left: 1.33 12)",
                "11 / 2 = 5.5 (left: 5.5 11 12)",
                "11 - 2 = 9 (left: 9 11 12) || 11 - 9 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (11 - 2) * (11 - 9) = 24"
            ]
        },
        "Input": "2 11 11 12",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "38": {
        "puzzle": "4 4 4 6",
        "Step 0": {
            "steps": [
                "6 - 4 = 2 (left: 4 4 2)",
                "4 + 4 = 8 (left: 8 4 6)",
                "4 - 4 = 0 (left: 0 4 6)",
                "4 * 4 = 16 (left: 16 4 6)",
                "6 - 4 = 2 (left: 4 4 2)",
                "4 * 4 = 16 (left: 4 6 16)",
                "4 * 4 = 16 (left: 6 4 16)",
                "6 - 4 = 2 (left: 4 4 2)",
                "6 - 4 = 2 (left: 4 4 ",
                "4 / 4 = 1 (left: 1 4 6)"
            ],
            "Evaluation": [
                2.001,
                60.0,
                1.002,
                60.0,
                22.0,
                60.0,
                60.0,
                2.001,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 0.1",
                "2 <- 0.6",
                "3 <- 0.5",
                "4 <- 0.6",
                "5 <- 0.3",
                "6 <- 0.9",
                "7 <- 0.9",
                "8 <- INIT",
                "9 <- 0.9"
            ]
        },
        "Step 1": {
            "steps": [
                "4 / 4 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "4 + 4 = 8 (left: 8 4 6) || 8 / 4 = 2 (left: 2 6)",
                "4 * 4 = 16 (left: 6 4 16) || 6 - 4 = 2 (left: 2 16)",
                "4 * 4 = 16 (left: 4 6 16) || 16 - 4 = 12 (left: 4 12)",
                "4 * 4 = 16 (left: 6 4 16) || 4 * 16 = 64 (left: 6 64)",
                "4 * 4 = 16 (left: 16 4 6) || 6 + 4 = ",
                "4 / 4 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)",
                "4 / 4 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "6 + 4 = 10 (left: 4 4 10)",
                "4 / 4 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                60.0,
                1.001,
                0.003,
                0.003,
                1.001,
                0.003,
                40.0,
                0.003,
                40.0,
                0.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 1.0",
                "2 <- 1.0",
                "3 <- 1.6",
                "4 <- 0.3",
                "5 <- 0.4",
                "6 <- 1.6",
                "7 <- 1.0",
                "8 <- 1.0",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "4 * 4 = 16 (left: 16 4 6) || 16 - 4 = 12 (left: 12 6)",
                "4 / 4 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "4 / 4 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "4 / 4 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "4 * 4 = 16 (left: 16 4 6) || 4 * 6 = 24 (left: 16 24)",
                "6 - 4 = 2 (left: 4 4 2) || Input: 3 5 7",
                "4 / 4 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "4 / 4 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "4 / 4 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "4 * 4 = 16 (left: 16 4 6)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                60.0,
                0.003,
                0.003,
                60.0,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.6",
                "2 <- 1.0",
                "3 <- 2.3",
                "4 <- 0.9",
                "5 <- 0.3",
                "6 <- 0.1",
                "7 <- 0.4",
                "8 <- 0.3",
                "9 <- 0.6"
            ]
        },
        "Step 3": {
            "steps": [
                "4 / 4 = 1 (left: 4 4 6)",
                "4 * 4 = 16 (left: 6 4 16) || 16 / 4 = 4 (left: 6 4)",
                "4 / 4 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "4 / 4 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * 4) * 6 = 24",
                "4 / 4 = 1 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "4 * 4 = 16 (left: 16 4 6) || 6 - 4 = ",
                "4 + 4 = 8 (left: 8 4 6) || 6 + 4 = 10 (left: 10)",
                "6 - 4 = 2 (left: 4 4 2) || 4 / 2 = 2 (left: 2 2)",
                "4 * 4 = 16 (left: 16 4 6) || 16 + 4 = 20 (left: 20 6)",
                "4 * 4 = 16 (left: 6 4 16) || 4 + 16 = 20 (left: 6 20)"
            ],
            "Evaluation": [
                3.0,
                60.0,
                0.003,
                60.0,
                0.001,
                0.003,
                0.002,
                2.0,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.2",
                "2 <- 3.7",
                "3 <- 3.3",
                "4 <- 1.6",
                "5 <- 2.8",
                "6 <- 2.2",
                "7 <- 0.9",
                "8 <- 0.6",
                "9 <- 2.3"
            ]
        },
        "Step 4": {
            "steps": [
                "4 / 4 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (4 / 4) * (4 * 6) = 24",
                "4 / 4 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (4 / 4) * (4 * 6) = 24",
                "6 - 4 = 2 (left: 4 4 2) || 4 / 2 = 2 (left: 2 2) || 2 + 2 = 4",
                "4 / 4 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * 4) * 6 = 24 || Input: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n3 * 4 = 12 (left: 8 12)\n12 - 8 = 4 (left: 4 24)\n4 * 24 = 24\nAnswer: ((3 + 5) * (3 * 4)) - 8 = 24",
                "4 / 4 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "4 / 4 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24) || Answer: (4 / 4) * (4 * 6) = 24",
                "4 / 4 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (4 / 4) * (4 * 6) = 24",
                "4 / 4 = 1 (left: 1 4 6) || Input: 3 5 7 9",
                "4 * 4 = 16 (left: 6 4 16) || 16 - 6 = 10 (left: 4 10)",
                "4 / 4 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (4 * 4) * 6 = 24"
            ]
        },
        "Input": "4 4 4 6",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "39": {
        "puzzle": "1 1 1 11",
        "Step 0": {
            "steps": [
                "11 - 1 = 10 (left: 1 1 10)",
                "1 / 1 = 1 (left: 1 1 11)",
                "11 - 1 = 10 (left: 1 1 10)",
                "11 / 1 = 11 (left: 1 1 11)",
                "11 - 1 = 10 (left: 1 1 10)",
                "1 * 1 = 1 (left: 1 1 11)",
                "11 - 1 = 10 (left: 1 1 10)",
                "11 - 1 = 10 (left: 1 1 10)",
                "1 * 1 = 1 (left: 1 1 ",
                "11 - 1 = 10 (left: 1 1 10)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                1.002,
                1.002,
                2.001,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 11)",
                "1 + 1 = 2 (left: 1 2 11)",
                "1 * 1 = 1 (left: 1 1 11)",
                "11 - 1 = 10 (left: 1 1 10)",
                "11 / 1 = 11 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1 11)",
                "11 - 1 = 10 (left: 1 1 10)",
                "1 * 11 = 11 (left: 1 1 ",
                "11 - 1 = 10 (left: 1 1 10)",
                "1 * 1 = 1 (left: 1 1 11)"
            ],
            "Evaluation": [
                0.003,
                2.001,
                2.001,
                1.002,
                1.002,
                0.003,
                1.002,
                0.003,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.8",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- 0.8",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "11 - 1 = 10 (left: 1 1 10) || 1 * 1 = 1 (left: 1 10)",
                "11 / 1 = 11 (left: 1 1 11)",
                "11 / 1 = 11 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1  || 1 * 1 = 1 (left: 1)",
                "11 / 1 = 11 (left: 1 1 11)",
                "11 / 1 = 11 (left: 1 1 11)",
                "11 - 1 = 10 (left: 1 1 10)",
                "1 * 1 = 1 (left: 1 1 ",
                "1 * 1 = 1 (left: 1 1  || 1 * 1 = 1 (left: 1) ",
                "11 / 1 = 11 (left: 1 1 11)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                1.002,
                0.003,
                0.003,
                0.003,
                0.003,
                2.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.7",
                "2 <- INIT",
                "3 <- 2.0",
                "4 <- 2.0",
                "5 <- 1.4",
                "6 <- 2.0",
                "7 <- 2.0",
                "8 <- 1.1",
                "9 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "11 - 1 = 10 (left: 1 1 10) || 1 * 1 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 1  || 1 - 1 = 0 (left: 0)",
                "11 / 1 = 11 (left: 1 1 11)",
                "11 - 1 = 10 (left: 1 1 10) || 1 * 1 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10) || 1 * 1 = 1 (left: 1 10) || Input: 3 9 27",
                "11 / 1 = 11 (left: 1 1 11) || 11 / 1 = 11 (left: 1 11)",
                "11 - 1 = 10 (left: 1 1 10) || 1 * 1 = 1 (left: 1 10) || 10 - 10 = 0 (left: 0)",
                "11 - 1 = 10 (left: 1 1 10) || 1 * 1 = 1 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9)",
                "11 - 1 = 10 (left: 1 1 10)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                20.0,
                0.003,
                0.002,
                60.0,
                21.001
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 2.2",
                "2 <- 3.9",
                "3 <- 3.8",
                "4 <- 3.8",
                "5 <- 1.1",
                "6 <- 2.0",
                "7 <- 3.9",
                "8 <- 3.5",
                "9 <- 2.0"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "11 / 1 = 11 (left: 1 1 11) || 11 / 1 = 11 (left: 1 11)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "1 + 1 = 2 (left: 1 2 11) || 1 * 11 = 11 (left:",
                "11 - 1 = 10 (left: 1 1 10) || 1 * 1 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10) || 10 - 1 = 9 (left: 1 9)",
                "11 / 1 = 11 (left: 1 1 11) || 11 / 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "11 - 1 = 10 (left: 1 1 10) || 1 * 1 = 1 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                60.0,
                0.001,
                0.001,
                1.0,
                0.002,
                40.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 3.8",
                "2 <- 1.4",
                "3 <- 2.0",
                "4 <- 4.2",
                "5 <- 4.7",
                "6 <- 2.0",
                "7 <- 3.8",
                "8 <- 3.8",
                "9 <- 2.0"
            ]
        },
        "Step 5": {
            "steps": [
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "11 / 1 = 11 (left: 1 1 11) || 11 / 1 = 11 (left: 1 11)",
                "11 - 1 = 10 (left: 1 1 10) || 1 * 1 = 1 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10) || 10 - 1 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10) || 1 * 1 = 1 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10) || 1 * 1 = 1 (left: 1 10) || 3 + 5 = 8 (left: 7 8)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.001,
                0.0,
                0.002,
                0.002,
                0.003,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 3.5",
                "2 <- 3.8",
                "3 <- 2.0",
                "4 <- 3.8",
                "5 <- 2.0",
                "6 <- 4.2",
                "7 <- 3.9",
                "8 <- 3.8",
                "9 <- 4.2"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "11 / 1 = 11 (left: 1 1 11) || 11 / 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 1 10) || 1 * 1 = 1 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10) || 1 * 1 = 1 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10) || 10 - 1 = 9 (left: 1 9)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.002,
                0.001,
                0.002,
                0.002,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 4.2",
                "2 <- 3.8",
                "3 <- 6.7",
                "4 <- 6.7",
                "5 <- 3.9",
                "6 <- 6.7",
                "7 <- 3.8",
                "8 <- 3.8",
                "9 <- 2.0"
            ]
        },
        "Step 7": {
            "steps": [
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10) || 10 - 1 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10) || 10 - 1 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10) || 5 + 5 = 10 (left: 5 10)",
                "11 - 1 = 10 (left: 1 1 10) || 10 - 1 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || Input: 3 5 7",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10) || 1 * 1 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.001,
                0.001,
                0.003,
                0.0,
                0.002,
                0.003,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 6.7",
                "1 <- 4.7",
                "2 <- 6.7",
                "3 <- 4.7",
                "4 <- 4.2",
                "5 <- 3.8",
                "6 <- 4.2",
                "7 <- 4.7",
                "8 <- 4.2",
                "9 <- 2.0"
            ]
        },
        "Step 8": {
            "steps": [
                "11 - 1 = 10 (left: 1 1 10) || 10 - 1 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 1 10) || 10 - 1 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10) || 10 - 1 = 9 (left: 1 9) || 6 * 3 = 18 (left: 9 18)",
                "11 - 1 = 10 (left: 1 1 10) || 10 - 1 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10) || 10 - 1 = 9 (left: 1 9) || 9 - 9 = 0 (left: 0)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10) || 1 * 1 = 1 (left: 1 10) || 1 * 10 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.001,
                0.002,
                0.002,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.7",
                "1 <- 1.2",
                "2 <- 6.7",
                "3 <- 3.8",
                "4 <- 2.0",
                "5 <- 6.7",
                "6 <- 6.7",
                "7 <- 2.0",
                "8 <- 4.2",
                "9 <- 4.2"
            ]
        },
        "Step 9": {
            "steps": [
                "11 - 1 = 10 (left: 1 1 10) || 10 - 1 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "1 * 1 = 1 (left: 1 1 11) || 3 + 5 = 8 (left: 7",
                "11 - 1 = 10 (left: 1 1 10) || 10 - 1 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "1 + 1 = 2 (left: 1 2 11) || 11 - 2 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10) || 1 * 1 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10) || 10 - 1 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10) || 10 - 1 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 1 10) || 1 * 1 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || Input: 3 5 7",
                "11 - 1 = 10 (left: 1 1 10) || 10 / 1 = 10 (left: 1 10) || 5 + 5 = 10 (left: 10)"
            ]
        },
        "Input": "1 1 1 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "40": {
        "puzzle": "1 1 11 12",
        "Step 0": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 12)",
                "1 * 1 = 1 (left: 1 11 12)",
                "11 - 1 = 10 (left: 1 10 12)",
                "1 + 1 = 2 (left: 2 11 12)",
                "11 + 1 = 12 (left: 1 12 12)",
                "1 - 1 = 0 (left: 0 11 12)",
                "1 - 1 = 0 (left: 0 11 12)",
                "11 + 1 = 12 (left: 1 12 12)",
                "1 * 11 = 11 (left: 11 11 ",
                "11 + 1 = 12 (left: 1 12 12)"
            ],
            "Evaluation": [
                20.002,
                2.001,
                1.001,
                0.003,
                40.001,
                3.0,
                1.001,
                2.001,
                0.003,
                20.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.9",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 0.4",
                "6 <- 0.9",
                "7 <- 0.4",
                "8 <- INIT",
                "9 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 12)",
                "11 + 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "1 / 1 = 1 (left: 1 11 12)",
                "11 + 1 = 12 (left: 1 12 12)",
                "1 - 1 = 0 (left: 0 11 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 12 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                20.002,
                40.001,
                20.002,
                20.002,
                0.002,
                40.001,
                60.0,
                60.0,
                1.001,
                60.0
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 1.9",
                "2 <- 1.7",
                "3 <- 0.4",
                "4 <- 1.6",
                "5 <- 1.9",
                "6 <- INIT",
                "7 <- 1.7",
                "8 <- INIT",
                "9 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 + 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 + 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 12 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "11 + 1 = 12 (left: 1 12 12)",
                "1 / 1 = 1 (left: 1 11 12) || 12 - 11 = 1 (left: 1 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                1.001
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 1.2",
                "2 <- INIT",
                "3 <- 1.9",
                "4 <- 1.6",
                "5 <- 1.9",
                "6 <- 1.7",
                "7 <- 0.4",
                "8 <- 1.6",
                "9 <- 0.9"
            ]
        },
        "Step 3": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "1 / 1 = 1 (left: 1 11 12) || 12 - 1 = 11 (left: 11 11)",
                "1 - 1 = 0 (left: 0 11 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 + 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 12 = 1 (left: 1 1)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 + 1 = 12 (left: 1 12 12) || 12 - 12 = 0 (left: 1 0)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                1.002,
                0.003,
                0.002,
                20.002,
                0.002,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 1.0",
                "2 <- 1.0",
                "3 <- 0.0",
                "4 <- INIT",
                "5 <- 1.7",
                "6 <- 0.4",
                "7 <- 1.2",
                "8 <- 1.6",
                "9 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12)",
                "1 * 1 = 1 (left: 1 11 12) || 12 - 1 = 11 (left: 11 11)",
                "11 + 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "1 * 11 = 11 (left: 11 1 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "1 / 1 = 1 (left: 1 11 12) || 12 / 1 = 12 (left: 11 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "1 + 1 = 2 (left: 2 11 12)"
            ],
            "Evaluation": [
                0.003,
                40.001,
                1.002,
                0.003,
                40.001,
                0.003,
                40.001,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.6",
                "1 <- 1.9",
                "2 <- 1.0",
                "3 <- 1.7",
                "4 <- 4.4",
                "5 <- 1.9",
                "6 <- 4.6",
                "7 <- 1.7",
                "8 <- 1.6",
                "9 <- 1.0"
            ]
        },
        "Step 5": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "11 + 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "1 * 1 = 1 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "1 * 11 = 11 (left: 11 1 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "1 * 1 = 1 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 1.1",
                "2 <- 4.1",
                "3 <- 4.1",
                "4 <- 4.1",
                "5 <- 1.7",
                "6 <- 4.4",
                "7 <- 4.6",
                "8 <- 4.4",
                "9 <- 1.6"
            ]
        },
        "Step 6": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "1 * 11 = 11 (left: 11 1 12) || 11 - 1 = 10 (left: 10 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "1 * 11 = 11 (left: 11 1 12) || 11 * 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 1.9",
                "2 <- 1.9",
                "3 <- 4.6",
                "4 <- 4.6",
                "5 <- 4.6",
                "6 <- 1.9",
                "7 <- 1.0",
                "8 <- 1.1",
                "9 <- 4.6"
            ]
        },
        "Step 7": {
            "steps": [
                "1 * 11 = 11 (left: 11 1 12) || 11 - 1 = 10 (left: 10 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "11 + 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "11 + 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 * 1 = 1 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)"
            ],
            "Evaluation": [
                1.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 4.6",
                "1 <- 1.2",
                "2 <- 4.4",
                "3 <- 3.5",
                "4 <- 1.3",
                "5 <- 1.6",
                "6 <- 4.1",
                "7 <- 1.3",
                "8 <- 4.1",
                "9 <- 1.2"
            ]
        },
        "Step 8": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "1 / 1 = 1 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "1 * 11 = 11 (left: 11 1 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0) || No possible next steps.",
                "11 + 1 = 12 (left: 1 12 12) || Input: 5 5 5",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 12 12) || 12 - 12 = 0 (left: 1 0)",
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "1 / 1 = 1 (left: 1 11 12) || Input: 3 9 12"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 1.6",
                "2 <- 1.9",
                "3 <- 1.9",
                "4 <- 0.4",
                "5 <- 1.9",
                "6 <- 1.7",
                "7 <- 4.1",
                "8 <- 1.6",
                "9 <- 4.4"
            ]
        },
        "Step 9": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 + 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 * 1 = 1 (left: 1 11 12) || 11 + 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "11 + 1 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "1 * 11 = 11 (left: 11 1 12) || 11 / 1 = 11 (left: 11 12)"
            ]
        },
        "Input": "1 1 11 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "41": {
        "puzzle": "2 7 7 12",
        "Step 0": {
            "steps": [
                "12 + 2 = 14 (left: 7 7 14)",
                "7 / 2 = 3.5 (left: 3.5 7 12)",
                "7 - 2 = 5 (left: 5 7 12)",
                "2 * 7 = 14 (left: 7 14 12)",
                "12 - 2 = 10 (left: 7 10 12)",
                "7 - 2 = 5 (left: 5 5 12)",
                "2 * 7 = 14 (left: 7 14 12)",
                "12 - 7 = 5 (left: 2 5 7)",
                "12 / 2 = 6 (left: ",
                "12 + 2 = 14 (left: 7 7 14)"
            ],
            "Evaluation": [
                0.003,
                40.001,
                21.001,
                2.001,
                2.001,
                2.001,
                2.001,
                3.0,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.1",
                "2 <- 0.1",
                "3 <- 0.1",
                "4 <- 0.1",
                "5 <- 0.2",
                "6 <- 0.1",
                "7 <- 0.2",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 3.5 * 7 = 24.5 (left: 12 24.5)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 - 3.5 = 8.5 (left: 8.5 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 3.5 * 7 = 24.5 (left: 12 24.5)",
                "7 - 2 = 5 (left: 5 7 12) || 7 / 5 = 1.4 (left: 1.4 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 + 3.5 = 15.5 (left: 3.5 15.5)",
                "7 - 2 = 5 (left: 5 7 12) || 12 / 5 = 2.4 (left: 2.4)",
                "12 - 2 = 10 (left: 7 10 12)",
                "2 * 7 = 14 (left: 7 14 12)"
            ],
            "Evaluation": [
                3.0,
                60.0,
                0.003,
                2.001,
                0.003,
                0.002,
                1.002,
                0.003,
                1.002,
                2.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- INIT",
                "2 <- 0.2",
                "3 <- 0.1",
                "4 <- 0.2",
                "5 <- 1.1",
                "6 <- 1.1",
                "7 <- 1.1",
                "8 <- 0.1",
                "9 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12) || 7 * 12 = 84 (left: 3.5 84)",
                "2 * 7 = 14 (left: 7 14 12)",
                "7 - 2 = 5 (left: 5 7 12) || 7 / 5 = 1.4 (left: 1.4 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 - 3.5 = 8.5 (left: 8.5 7)",
                "7 - 2 = 5 (left: 5 7 12) || 5 * 7 = 35 (left: 35 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 * 7 = 24.01 (left: 24.01)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || Possible next steps:",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 - 3.5 = 8.5 (left: 8.5 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 7 - 3.5 = 3.5 (left: 3.5 12)"
            ],
            "Evaluation": [
                0.002,
                3.0,
                0.002,
                2.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- 1.1",
                "4 <- 1.1",
                "5 <- 1.1",
                "6 <- 0.2",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 0.1"
            ]
        },
        "Step 3": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12) || 7 * 3.5 = 24.5 (left: 24.5 12)",
                "2 * 7 = 14 (left: 7 14 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 / 7 = 0.49 (left: 0.49)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 / 3.43 = 2.04 (left: 2.04 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 10 + 5 = 15 (left: 15)",
                "7 - 2 = 5 (left: 5 7 12) || 5 * 7 = 35 (left: 35 12)",
                "12 - 7 = 5 (left: ",
                "12 - 2 = 10 (left: 7 10 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 3.5 * 7 = 24.5 (left: 12 24.5)"
            ],
            "Evaluation": [
                0.003,
                2.001,
                41.0,
                0.003,
                0.001,
                0.002,
                0.003,
                0.0,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.2",
                "2 <- 3.8",
                "3 <- 0.2",
                "4 <- 0.1",
                "5 <- 1.1",
                "6 <- 1.1",
                "7 <- 3.2",
                "8 <- 0.2",
                "9 <- 3.2"
            ]
        },
        "Step 4": {
            "steps": [
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12)",
                "7 - 2 = 5 (left: 5 7 12) || 7 / 5 = 1.4 (left: 1.4 12)",
                "12 - 2 = 10 (left: 7 10 12) || 7 * 10 = 70 (left: 12 70)",
                "7 - 2 = 5 (left: 5 7 12) || 5 * 7 = 35 (left: 35 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857 (left: 3.42857 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 / 3.43 = 2.04 (left: 2.04 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 - 3.43 = 3.57 (left: 3.57 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || Input: 5 3",
                "7 - 2 = 5 (left: 5 7 12) || 5 * 7 = 35 (left: 35 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 / 7 = 0.49 (left: 0.49)"
            ],
            "Evaluation": [
                60.0,
                0.0,
                0.002,
                0.001,
                41.0,
                0.001,
                21.001,
                0.003,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.1",
                "2 <- 3.2",
                "3 <- 1.1",
                "4 <- 0.1",
                "5 <- 1.1",
                "6 <- 1.1",
                "7 <- 4.6",
                "8 <- 3.2",
                "9 <- 4.0"
            ]
        },
        "Step 5": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 - 3.5 = 8.5 (left: 8.5 7) || 8.5 - 7 = 1.5 (left: 1.5)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 3.5 * 7 = 24.5 (left: 12 24.5)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 / 7 = 0.49 (left: 0.49)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 - 3.43 = 3.57 (left: 3.57 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 7 + 3.5 = 10.5 (left: 10.5 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 - 7 = -3.57 (left: -3.57)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || Input: 5 5",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 - 3.43 = 3.57 (left: 3.57 7) || 7 - 3.57 = 3.43 (left: 3.43)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 / 7 = 0.49 (left: 0.49)",
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.003,
                0.001,
                0.003,
                0.001,
                0.003,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 3.2",
                "2 <- 3.2",
                "3 <- 4.0",
                "4 <- 4.4",
                "5 <- 4.0",
                "6 <- 0.2",
                "7 <- 3.2",
                "8 <- 4.0",
                "9 <- 2.3"
            ]
        },
        "Step 6": {
            "steps": [
                "2 * 7 = 14 (left: 7 14 12) || 14 - 7 = 7 (left: 7 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || ",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 - 3.43 = 3.57 (left: 3.57)",
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857 (left: 3.42857 7) || 7 / 3.42857 = 2.04348 (left: 2.04348)",
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "7 - 2 = 5 (left: 5 7 12) || 5 * 7 = 35 (left: 12 35)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 - 3.43 = 3.57 (left: 3.57)",
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 - 3.5 = 8.5 (left: 8.5 7) || 8.5 / 7 = 1.2142857142857142 (left: 1.2142857142857142)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.001,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 4.0",
                "2 <- 3.2",
                "3 <- 0.3",
                "4 <- 4.0",
                "5 <- 4.4",
                "6 <- 4.4",
                "7 <- 4.0",
                "8 <- 3.2",
                "9 <- 4.4"
            ]
        },
        "Step 7": {
            "steps": [
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 - 3.43 = 3.57 (left: 3.57 7)",
                "2 * 7 = 14 (left: 7 14 12) || 12 + 7 = 19 (left: 19)",
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857 (left: 3.42857 7) || 7 / 3.42857 = 2.04419 (left: 2.04419)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857 (left: 3.42857 7) || 7 / 3.42857 = 2.04348 (left: 2.04348)",
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 - 3.43 = 3.57 (left: 3.57)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857 (left: 3.42857 7) || 7 / 3.42857 = 2.04348 (left: 2.04348)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                40.001,
                0.003,
                60.0,
                0.003,
                0.003,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 7.4",
                "1 <- 7.4",
                "2 <- 4.0",
                "3 <- 7.2",
                "4 <- 7.2",
                "5 <- 4.4",
                "6 <- 7.4",
                "7 <- 1.1",
                "8 <- 7.2",
                "9 <- 7.4"
            ]
        },
        "Step 8": {
            "steps": [
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 2) * (7 - 5) * 12 = 24",
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 2) * (7 - 5) * 12 = 24",
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 - 3.43 = 3.57 (left: 3.57 7) || 3.57 / 7 = 0.51 (left: 0.51)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 - 3.43 = 3.57 (left: 3.57 7) || 7 / 3.57 = 1.9607843137254901 (left: 1.9607843137254901)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857 (left: 3.42857 7) || 7 / 3.42857 = 2.04225 (left: 2.04225)",
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 2) * (7 - 5) * 12 = 24",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 - 3.43 = 3.57 (left: 3.57)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 - 3.43 = 3.57 (left: 3.57 7) || Input: 5 10",
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 2) * (7 - 5) * 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.002,
                20.002,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 7.4",
                "2 <- 7.4",
                "3 <- 0.1",
                "4 <- 0.1",
                "5 <- 1.1",
                "6 <- 7.4",
                "7 <- 7.2",
                "8 <- 7.2",
                "9 <- 1.1"
            ]
        },
        "Step 9": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12) || 7 * 12 = 84 (left: 3.5 84)",
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 2) * (7 - 5) * 12 = 24",
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 2) * (7 - 5) * 12 = 24",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 - 7 = 5 (left: 3.5 5)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.42857142857 (left: 3.42857142857 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 / 7 = 0.49 (left: 0.49)",
                "7 - 2 = 5 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 2) * (7 - 5) * 12 = 24",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 - 3.43 = 3.57 (left: 3.57 7) || Possible next steps:",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 7 - 3.43 = 3.57 (left: 3.57 7) || 7 - 3.57 = 3.43 (left: 3.43)",
                "7 / 2 = 3.5 (left: 3.5 7 12) || 12 / 3.5 = 3.43 (left: 3.43 7) || 3.43 / 7 = 0.49 (left: 0.49)"
            ]
        },
        "Input": "2 7 7 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "42": {
        "puzzle": "1 5 7 12",
        "Step 0": {
            "steps": [
                "7 - 1 = 6 (left: 6 5 12)",
                "5 * 7 = 35 (left: 1 35 12)",
                "7 - 5 = 2 (left: 1 2 12)",
                "12 - 7 = 5 (left: 1 5 12)",
                "7 - 1 = 6 (left: 5 6 12)",
                "12 - 7 = 5 (left: 1 5 12)",
                "12 - 7 = 5 (left: 1 5 12)",
                "7 - 1 = 6 (left: 5 6 12)",
                "7 - 5 = 2 (left: 1 2 ",
                "7 - 1 = 6 (left: 5 6 12)"
            ],
            "Evaluation": [
                3.0,
                2.0,
                60.0,
                1.0,
                3.0,
                1.001,
                2.0,
                2.0,
                1.002,
                3.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.2",
                "2 <- 0.6",
                "3 <- 0.2",
                "4 <- 0.2",
                "5 <- 0.2",
                "6 <- 0.2",
                "7 <- INIT",
                "8 <- 0.2",
                "9 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "7 - 5 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "12 - 7 = 5 (left: 1 5 12) || 5 / 1 = 5 (left: 5 12)",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 1 = 12 (left:",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "7 - 5 = 2 (left: 1 2 ",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.003,
                60.0,
                40.0,
                0.001,
                60.0,
                0.003,
                60.0,
                40.001
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 1.8",
                "2 <- 1.8",
                "3 <- 1.6",
                "4 <- 0.2",
                "5 <- 1.1",
                "6 <- 1.3",
                "7 <- 1.1",
                "8 <- 1.9",
                "9 <- 1.8"
            ]
        },
        "Step 2": {
            "steps": [
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                0.002,
                60.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 1.1",
                "2 <- 1.3",
                "3 <- 1.3",
                "4 <- 1.4",
                "5 <- 1.3",
                "6 <- 1.9",
                "7 <- 1.1",
                "8 <- 2.4",
                "9 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 10 = 0 (left: 1)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 / 6 = 0.16666666666666666 (left: 0.16666666666666666)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.0,
                0.003,
                0.001,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 1.1",
                "2 <- 1.6",
                "3 <- 2.4",
                "4 <- 1.6",
                "5 <- 1.0",
                "6 <- 1.0",
                "7 <- 2.4",
                "8 <- 1.3",
                "9 <- 1.4"
            ]
        },
        "Step 4": {
            "steps": [
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "7 - 5 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "7 - 5 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                0.003,
                0.002,
                60.0,
                0.003,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 4.5",
                "2 <- 1.8",
                "3 <- 1.1",
                "4 <- 1.3",
                "5 <- 4.5",
                "6 <- 1.8",
                "7 <- 1.3",
                "8 <- 4.5",
                "9 <- 1.8"
            ]
        },
        "Step 5": {
            "steps": [
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "7 - 5 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 * (7 - 5)) * 12 = 24",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "7 - 5 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "7 - 5 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 * (7 - 5)) * 12 = 24",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 10 = 0 (left: 0)",
                "7 - 5 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 * (7 - 5)) * 12 = 24",
                "7 - 5 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)"
            ]
        },
        "Input": "1 5 7 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "43": {
        "puzzle": "10 10 12 12",
        "Step 0": {
            "steps": [
                "12 + 10 = 22 (left: 10 12 22)",
                "10 * 10 = 100 (left: 12 12 100)",
                "10 * 10 = 100 (left: 12 12 100)",
                "10 * 10 = 100 (left: 12 12 100)",
                "12 + 10 = 22 (left: 10 12 22)",
                "10 * 10 = 100 (left: 12 12 100)",
                "10 * 10 = 100 (left: 12 12 100)",
                "12 + 10 = 22 (left: 10 12 22)",
                "12 / 10 = 1.2 (left: 1.",
                "12 + 10 = 22 (left: 10 12 22)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                2.001,
                20.002,
                2.001,
                0.003,
                1.002,
                2.001,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.7",
                "2 <- 0.7",
                "3 <- 0.3",
                "4 <- INIT",
                "5 <- 0.3",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- 0.3",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12)",
                "12 + 10 = 22 (left: 10 12 22) || 22 - 10 = 12 (left: 12 22)",
                "12 + 10 = 22 (left: 10 12 22) || 12 / 10 = 1.2 (left: 1.2)",
                "10 * 10 = 100 (left: 12 12 100) || 12 / 12 = 1 (left: 1 12 100)",
                "10 * 10 = 100 (left: 12 12 100)",
                "10 * 10 = 100 (left: 12 12 100) || 100 / 12",
                "12 + 10 = 22 (left: 10 12 22)",
                "12 - 10 = 2 (left: 10 2 ",
                "10 * 10 = 100 (left: 12 12 100) || 12 / 12 = 1 (left: 1 12 100)",
                "10 * 10 = 100 (left: 12 12 100) || 100 / 12 = 8.33 (left: 12 8.33)"
            ],
            "Evaluation": [
                21.001,
                0.003,
                0.0,
                1.002,
                0.003,
                0.003,
                3.0,
                0.002,
                1.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.0",
                "2 <- INIT",
                "3 <- 0.3",
                "4 <- 1.0",
                "5 <- INIT",
                "6 <- 1.0",
                "7 <- 1.6",
                "8 <- INIT",
                "9 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "10 / 10 = 1 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "10 * 10 = 100 (left: 12 12 100)",
                "10 * 10 = 100 (left: 12 12 100) || 12 / 12 = 1 (left: 1 12 100)",
                "10 / 10 = 1 (left: 1 12 12) || Input: 3 5",
                "10 * 10 = 100 (left: 12 12 100)",
                "10 / 10 = 1 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "12 + 10 = 22 (left: 10 12 22) || 12 + 22 = 34 (left: 10 34)",
                "12 + 10 = 22 (left: 10 12 22)",
                "10 / 10 = 1 (left: 1 12 12) || 12 + 1 = 13 (left: 12 13)"
            ],
            "Evaluation": [
                40.001,
                0.002,
                2.001,
                0.003,
                0.003,
                2.001,
                0.003,
                0.002,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 2.0",
                "2 <- 2.0",
                "3 <- 0.3",
                "4 <- 2.0",
                "5 <- 2.0",
                "6 <- 0.3",
                "7 <- 2.0",
                "8 <- 0.0",
                "9 <- 2.0"
            ]
        },
        "Step 3": {
            "steps": [
                "12 + 10 = 22 (left: 10 12 22) || 10 * 12 = 120 (left: 120)",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 * 10 = 100 (left: 12 12 100) || 12 * 12 = 144 (left: 144 100)",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 * 10 = 100 (left: 12 12 100) || 12 / 12 = 1 (left: 1 12 100)",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 + 10 = 22 (left: 10 12 22) || 12 - 10 = 2 (left: 2 22)",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.002,
                0.003,
                40.001,
                2.001,
                40.001,
                20.002,
                1.002,
                60.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 3.9",
                "1 <- 3.4",
                "2 <- 1.0",
                "3 <- 3.9",
                "4 <- 3.9",
                "5 <- 3.7",
                "6 <- 3.9",
                "7 <- 3.9",
                "8 <- 3.4",
                "9 <- 3.2"
            ]
        },
        "Step 4": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 2 = 12 (left: 12 24)",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 12 = 144 (left: 24 144)",
                "10 / 10 = 1 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12)",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24)",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 12 2)",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left:",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24)",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 - 12 = 12 (left: 12 24)",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24)",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2 24)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                40.001,
                60.0,
                60.0,
                0.002,
                60.0,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 4.6",
                "2 <- 3.9",
                "3 <- 4.6",
                "4 <- 1.0",
                "5 <- 0.3",
                "6 <- 4.3",
                "7 <- 3.2",
                "8 <- 4.3",
                "9 <- 4.3"
            ]
        },
        "Step 5": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 + 12 = 24 (left: 24)",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24) || Input: 3 9 27",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 12 = 1 (left: 1 12)",
                "10 * 10 = 100 (left: 12 12 100) || 12 - 12",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 + 12 = 36 (left: 12 36)",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24) || 24 + 1 = 25 (left: 25)",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24) || 3 + 9 = 12 (left: 12 27)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 3.7",
                "1 <- 5.2",
                "2 <- 4.4",
                "3 <- 5.2",
                "4 <- 5.0",
                "5 <- 4.3",
                "6 <- 4.2",
                "7 <- 3.9",
                "8 <- 2.0",
                "9 <- 4.6"
            ]
        },
        "Step 6": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1)",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 + 12 = 24 (left: 24) || Answer: (10 / 10) * (12 + 12) = 24",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 12 2) || 12 / 2 = 6 (left: 6) ",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 + 12 = 24 (left: 24) || Answer: (10 / 10) * (12 + 12) = 24",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: ((10 / 10) + 12) * 12 = 24",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "10 / 10 = 1 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0)",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "10 / 10 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24) || 24 - 1 = 23 (left: 23)"
            ]
        },
        "Input": "10 10 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "44": {
        "puzzle": "1 8 8 8",
        "Step 0": {
            "steps": [
                "8 * 1 = 8 (left: 8 8 8)",
                "1 + 8 = 9 (left: 8 8 9)",
                "8 - 1 = 7 (left: 7 8 8)",
                "8 * 1 = 8 (left: 8 8 8)",
                "8 / 1 = 8 (left: 8 8 8)",
                "8 - 8 = 0 (left: 1 0 8)",
                "8 * 1 = 8 (left: 8 8 8)",
                "8 - 1 = 7 (left: 7 8 8)",
                "8 - 1 = 7 (left: 7 8 8)",
                "8 - 1 = 7 (left: 7 8 8)"
            ],
            "Evaluation": [
                1.002,
                2.001,
                3.0,
                1.002,
                0.003,
                1.001,
                20.002,
                3.0,
                3.0,
                3.0
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- INIT",
                "2 <- 0.6",
                "3 <- 0.8",
                "4 <- 0.6",
                "5 <- INIT",
                "6 <- 0.6",
                "7 <- 0.2",
                "8 <- 0.6",
                "9 <- 0.9"
            ]
        },
        "Step 1": {
            "steps": [
                "8 * 1 = 8 (left: 8 8 8) || Input: 8 8",
                "8 - 1 = 7 (left: 1 7 8)",
                "8 * 1 = 8 (left: 8 8 8) || 8 - 8 = 0 (left: 0)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8)",
                "8 * 1 = 8 (left: 8 8 8) || 8 - 8 = 0 (left: 0 8)",
                "1 * 8 = 8 (left: 8 8 8)",
                "8 * 1 = 8 (left: 8 8 8) || Input: 8 8",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8 8)",
                "8 * 1 = 8 (left: 8 8 8) || 8 * 8 = 64 (left: 8 64)",
                "8 - 1 = 7 (left: 7 8 8) || 8 * 7 = 56 (left: 8 56)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                0.003,
                21.001,
                20.0,
                20.002,
                0.003,
                0.003,
                0.001,
                41.0
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- 0.2",
                "4 <- INIT",
                "5 <- 1.3",
                "6 <- 1.9",
                "7 <- INIT",
                "8 <- 1.9",
                "9 <- 1.9"
            ]
        },
        "Step 2": {
            "steps": [
                "8 - 1 = 7 (left: 7 8 8) || 8 * 7 = 56 (left: 8 56) || 56 / 8 = 7 (left: 7)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 - 1 = 7 (left: 7 8 8) || 8 / 7 = 1.14 (left: 1 1.14)",
                "8 - 1 = 7 (left: 7 8 8)",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 - 1 = 7 (left: 7 8 8) || 8 * 7 = 56 (left: 8 56) || 56 / 8 = 7 (left: 7)",
                "8 / 1 = 8 (left: 8 8 ",
                "8 - 1 = 7 (left: 7 8 8) || 8 * 7 = 56 (left: 8 56) || 8 * 7 = 56 (left: 56)",
                "8 - 1 = 7 (left: 7 8 8) || 8 * 7 = 56 (left: 8 56) || 56 - 8 = 48 (left: 48)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.001,
                1.002,
                3.0,
                0.003,
                0.0,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.6",
                "2 <- 0.6",
                "3 <- 1.1",
                "4 <- 1.9",
                "5 <- 1.9",
                "6 <- 1.9",
                "7 <- 1.4",
                "8 <- 1.4",
                "9 <- 1.9"
            ]
        },
        "Step 3": {
            "steps": [
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 * 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8)",
                "8 * 1 = 8 (left: 8 8 8) || 8 - 8 = 0 (left: 0)",
                "8 - 1 = 7 (left: 1 7 8) || 1 * 7 = 7 (left: 7 8)",
                "8 - 1 = 7 (left: 7 8 8) || 8 * 7 = 56 (left: 8 56) || 8 * 7 = 56 (left: 56)",
                "8 - 1 = 7 (left: 7 8 8) || 8 * 7 = 56 (left: 8 56) || 56 - 8 = 48 (left: 48)",
                "8 - 1 = 7 (left: 7 8 8) || 8 * 7 = 56 (left: 8 56) || 56 / 8 = 7 (left: 7)",
                "8 * 1 = 8 (left: 8 8 8) || 8 - 8 = 0 (left: 0 8) || 8 / 0 = undefined",
                "8 * 1 = 8 (left: 8 8 8) || 8 - 8 = 0 (left: 0 8) || 8 * 0 = 0 (left: 0)",
                "8 - 1 = 7 (left: 7 8 8) || 8 * 7 = 56 (left: 8 56) || 56 / 8 = 7 (left: 7)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.002,
                0.003,
                0.002,
                0.003,
                0.0,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 3.1",
                "2 <- 0.6",
                "3 <- 3.1",
                "4 <- 1.5",
                "5 <- 3.1",
                "6 <- 3.1",
                "7 <- 3.1",
                "8 <- 1.9",
                "9 <- 3.1"
            ]
        },
        "Step 4": {
            "steps": [
                "8 - 1 = 7 (left: 7 8 8) || 8 * 7 = 56 (left: 8 56) || 8 * 7 = 56 (left: 56)",
                "8 * 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 * 1 = 8 (left: 8 8 8) || 16 - 8 = 8 (left: 8 8)",
                "8 * 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8 8)",
                "1 * 8 = 8 (left: 8 8 8) || 8 + 16 = 24 (left: 24)",
                "8 * 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 * 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 * 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 1 = 7 (left: 7 8 8) || 8 * 7 = 56 (left: 8 56) || 8 + 56 = 64 (left: 64)",
                "8 * 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 1 + 8 = 9"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                1.002,
                60.0,
                0.002,
                0.002,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 3.1",
                "2 <- 3.1",
                "3 <- 3.1",
                "4 <- 1.4",
                "5 <- 0.5",
                "6 <- 0.6",
                "7 <- INIT",
                "8 <- 3.1",
                "9 <- 1.9"
            ]
        },
        "Step 5": {
            "steps": [
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 * 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 * 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 * 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 * 1 = 8 (left: 8 8 8) || 8 - 8 = 0 (left: 0 8) || 8 - 0 = 8 (left: 8)",
                "8 - 8 = 0 (left: 1 0 8) || 8 / 1 = 8 (left: 8 8)",
                "8 * 1 = 8 (left: 8 8 8) || 8 - 8 = 0 (left: 0)",
                "8 - 1 = 7 (left: 1 7 ",
                "8 * 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 - 1 = 7 (left: 7 8 8) || 8 * 7 = 56 (left: 8 56) || 3 + 9 = 12 (left: 12 27)"
            ],
            "Evaluation": [
                0.0,
                0.001,
                0.003,
                0.0,
                0.002,
                0.003,
                0.003,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 3.1",
                "2 <- 4.4",
                "3 <- 3.1",
                "4 <- 3.1",
                "5 <- 4.4",
                "6 <- 4.4",
                "7 <- 1.3",
                "8 <- 4.4",
                "9 <- 3.1"
            ]
        },
        "Step 6": {
            "steps": [
                "8 - 1 = 7 (left: 7 8 8) || 8 / 7 = 1.14 (left: 1.14 8)",
                "8 * 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "1 * 8 = 8 (left: 8 8 8) || 8 + 16 = 24 (left: 24) || Answer: 1 * 8 + 8 = 24",
                "8 * 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 * 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "1 * 8 = 8 (left: 8 8 8) || 8 + 16 = 24 (left: 24) || Answer: 1 * 8 + (8 + 8) = 24",
                "1 * 8 = 8 (left: 8 8 8) || 8 + 16 = 24 (left: 24) || Answer: 1 * 8 + 8 = 24",
                "8 - 1 = 7 (left: 7 8 8) || 8 - 7 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "1 * 8 = 8 (left: 8 8 8) || 8 + 16 = 24 (left: 24) || Answer: 1 * 8 + 8 = 24",
                "8 * 1 = 8 (left: 8 8 8) || 8 / 8 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)"
            ]
        },
        "Input": "1 8 8 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "45": {
        "puzzle": "2 2 3 8",
        "Step 0": {
            "steps": [
                "2 + 3 = 5 (left: 2 5 8)",
                "2 * 2 = 4 (left: 4 3 8)",
                "8 / 2 = 4 (left: 2 4 3)",
                "2 + 3 = 5 (left: 2 5 8)",
                "2 / 2 = 1 (left: 1 3 8)",
                "3 + 2 = 5 (left: 2 5 8)",
                "8 - 2 = 6 (left: 2 3 6)",
                "2 * 3 = 6 (left: 2 6 8)",
                "3 + 2 = 5 (left: 2 5 8)",
                "3 + 2 = 5 (left: 2 5 8)"
            ],
            "Evaluation": [
                0.003,
                2.0,
                60.0,
                1.002,
                60.0,
                1.002,
                22.0,
                1.002,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.2",
                "2 <- 0.2",
                "3 <- 0.6",
                "4 <- 0.2",
                "5 <- 0.4",
                "6 <- 0.4",
                "7 <- 0.4",
                "8 <- 0.1",
                "9 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "8 / 2 = 4 (left: 2 4 3) || 4 / 2 = 2 (left: 2 3)",
                "8 / 2 = 4 (left: 2 4 3) || Possible next steps:",
                "8 / 2 = 4 (left: 2 4 3) || Possible next steps:",
                "8 - 2 = 6 (left: 2 3 6) || 6 - 2 = 4 (left: 2 4 6)",
                "8 / 2 = 4 (left: 2 4 3) || Input: 1 5 7",
                "2 / 2 = 1 (left: 1 3 8) || 8 / 1 = ",
                "2 / 2 = 1 (left: 1 3 8) || 8 - 1 = 7 (left: 3 7)",
                "2 / 2 = 1 (left: 1 3 8) || 3 + 8 = 11 (left: 1 11)",
                "2 * 2 = 4 (left: 4 3 8) || 8 - 4 = 4 (left: 4 3 8)",
                "2 / 2 = 1 (left: 1 3 8) || 3 - 1 = 2 (left: 2 8)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.0,
                40.0,
                3.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 0.4",
                "2 <- INIT",
                "3 <- 0.2",
                "4 <- 1.7",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 0.6",
                "8 <- 1.7",
                "9 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "2 / 2 = 1 (left: 1 3 8) || 3 + 8 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "2 / 2 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8)",
                "2 / 2 = 1 (left: 1 3 8)",
                "8 / 2 = 4 (left: 2 4 3) || 2 * 4 = 8 (left: 3 8)",
                "2 / 2 = 1 (left: 1 3 8) || 3 + 8 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "3 * 2 = 6 (left: 2 6 8)",
                "2 + 3 = 5 (left: 5 2 8)",
                "8 - 2 = 6 (left: 2 3 6) || 2 * 3 = 6 (left: 6 6)",
                "2 / 2 = 1 (left: 1 3 8) || 3 + 8 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "8 / 2 = 4 (left: 2 4 3) || 4 + 3 = 7 (left: 2 7)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                60.0,
                60.0,
                0.002,
                2.001,
                3.0,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.6",
                "2 <- 0.4",
                "3 <- 0.4",
                "4 <- 1.7",
                "5 <- 2.1",
                "6 <- 0.4",
                "7 <- 0.9",
                "8 <- 2.1",
                "9 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 2 = 4 (left: 4 3 8)",
                "2 + 3 = 5 (left: 5 2 8) || 8 / 2 = 4 (left: 5 4)",
                "2 / 2 = 1 (left: 1 3 8) || 8 / 3 = 2 (left: 1 2)",
                "2 / 2 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5)",
                "2 / 2 = 1 (left: 1 3 8) || 3 + 8 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "2 / 2 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 5 + 10 = 15 (left: 15 15 20)",
                "2 / 2 = 1 (left: 1 3 8) || 8 - 1 = 7 (left: 3 7)",
                "3 + 2 = 5 (left: 2 5 8) || 8 / 2 = 4 (left: 4 5)",
                "2 / 2 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || Input: 4 7",
                "2 / 2 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)"
            ],
            "Evaluation": [
                2.0,
                1.001,
                0.003,
                0.002,
                0.002,
                1.002,
                20.002,
                3.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.6",
                "1 <- 0.2",
                "2 <- 2.2",
                "3 <- 0.2",
                "4 <- 0.2",
                "5 <- 2.3",
                "6 <- 3.6",
                "7 <- 3.6",
                "8 <- 2.3",
                "9 <- 2.2"
            ]
        },
        "Step 4": {
            "steps": [
                "2 / 2 = 1 (left: 1 3 8) || 8 - 1 = 7 (left: 3 7) || 7 / 3 = 2 (left: 2)",
                "8 / 2 = 4 (left: 2 4 3) || Possible next steps:",
                "2 / 2 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "8 / 2 = 4 (left: 2 4 3) || 2 * 3 = 6 (left: 4)",
                "8 / 2 = 4 (left: 2 4 3) || Input: 5 10 15",
                "8 / 2 = 4 (left: 2 4 3) || 2 * 4 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "2 / 2 = 1 (left: 1 3 8) || 8 - 1 = 7 (left: 3 7) || 3 * 7 = 21 (left: 21)",
                "2 / 2 = 1 (left: 1 3 8) || 8 - 1 = 7 (left: 3 7) || Input: 5 9",
                "8 / 2 = 4 (left: 2 4 3) || 2 * 4 = 8 (left: 3 8) || Input: 4 7",
                "2 / 2 = 1 (left: 1 3 8) || 3 + 8 = 11 (left: 1 11)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                60.0,
                0.001,
                0.003,
                0.002,
                0.001,
                0.003,
                0.003,
                20.001
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 0.2",
                "2 <- 3.6",
                "3 <- INIT",
                "4 <- 4.2",
                "5 <- 1.7",
                "6 <- 4.9",
                "7 <- 2.2",
                "8 <- 0.6",
                "9 <- 4.2"
            ]
        },
        "Step 5": {
            "steps": [
                "8 - 2 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6)",
                "8 / 2 = 4 (left: 2 4 3) || 4 / 2 = 2 (left: 2 3)",
                "2 / 2 = 1 (left: 1 3 8) || 8 - 1 = 7 (left: 3 7) || 9 / 5 = 1.8 (left: 1.8)",
                "3 + 2 = 5 (left: 5 2 8)",
                "2 / 2 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "2 / 2 = 1 (left: 1 3 8) || 3 + 8 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "2 / 2 = 1 (left: 1 3 8) || 3 + 8 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "2 / 2 = 1 (left: 1 3 8) || 3 - 1 = 2 (left: 2 8)",
                "8 - 2 = 6 (left: 2 3 6) || 6 / 2 = 3 (left: 3 6)",
                "2 / 2 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)"
            ],
            "Evaluation": [
                21.0,
                0.002,
                0.001,
                3.0,
                0.0,
                0.002,
                0.001,
                0.002,
                3.0,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 3.7",
                "2 <- 2.1",
                "3 <- 2.1",
                "4 <- 2.1",
                "5 <- 2.2",
                "6 <- 4.2",
                "7 <- 2.1",
                "8 <- 0.9",
                "9 <- 2.1"
            ]
        },
        "Step 6": {
            "steps": [
                "2 * 2 = 4 (left: 4 3 8)",
                "3 + 2 = 5 (left: 2 5 8) || 8 / 2 = 4 (left: 4 5) || 5 / 4 = 1.25 (left: 1.25)",
                "2 / 2 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "2 / 2 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "2 / 2 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "2 / 2 = 1 (left: 1 3 8) || 8 / 3 = 2 (left:",
                "2 / 2 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "2 / 2 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "3 + 2 = 5 (left: 2 5 8) || 8 - 2 = 6 (left: 5 6)",
                "2 / 2 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || Input: 5 10"
            ],
            "Evaluation": [
                2.001,
                0.003,
                0.001,
                0.002,
                0.002,
                0.001,
                60.0,
                0.002,
                1.001,
                0.003
            ],
            "Resampling": [
                "0 <- 6.6",
                "1 <- 6.6",
                "2 <- 0.7",
                "3 <- 2.2",
                "4 <- 4.2",
                "5 <- 2.1",
                "6 <- 5.3",
                "7 <- 4.9",
                "8 <- 1.8",
                "9 <- 4.2"
            ]
        },
        "Step 7": {
            "steps": [
                "2 / 2 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (2 / 2) * (3 * 8) = 24",
                "2 / 2 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (2 / 2) * (3 * 8) = 24",
                "2 * 3 = 6 (left: 2 6 8) || 6 / 2 = 3 (left: 3 8)",
                "2 / 2 = 1 (left: 1 3 8) || Input: 5 10 15",
                "2 / 2 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "2 / 2 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 5 + 10 = 15 (left: 15)",
                "3 + 2 = 5 (left: 5 2 8) || 5 - 2 = 3 (left: 3 8)",
                "2 / 2 = 1 (left: 1 3 8) || 3 + 8 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "2 * 2 = 4 (left: 4 3 8) || 8 - 4 = 4 (left: 4 3 8) || 4 / 3 = 1 (left: 1 8)",
                "2 / 2 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)"
            ]
        },
        "Input": "2 2 3 8",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "46": {
        "puzzle": "2 9 9 12",
        "Step 0": {
            "steps": [
                "12 - 2 = 10 (left: 9 10 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12)",
                "2 * 9 = 18 (left: 9 12 18)",
                "9 - 2 = 7 (left: 7 9 12)",
                "12 - 9 = 3 (left: 2 3 9)",
                "9 - 2 = 7 (left: 7 9 12)",
                "9 - 2 = 7 (left: 7 9 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12)",
                "12 - 2 = 10 (left: 9 10 12)",
                "12 - 2 = 10 (left: 9 10 12)"
            ],
            "Evaluation": [
                3.0,
                3.0,
                3.0,
                2.001,
                0.003,
                2.001,
                2.001,
                3.0,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.0",
                "3 <- 0.2",
                "4 <- INIT",
                "5 <- 0.0",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "9 - 2 = 7 (left: 7 9 12)",
                "12 - 2 = 10 (left: 9 10 12)",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90)",
                "2 * 9 = 18 (left: 9 12 18) || 18 - 9 = 9 (left: 9 18)",
                "9 - 2 = 7 (left: 7 9 12)",
                "12 - 2 = 10 (left: 9 10 12) || Input:",
                "12 - 2 = 10 (left: 9 9 10)",
                "12 - 9 = 3 (left: ",
                "12 - 2 = 10 (left: 9 10 12)",
                "12 - 9 = 3 (left: 2 3 12)"
            ],
            "Evaluation": [
                1.002,
                3.0,
                0.003,
                0.003,
                2.001,
                0.003,
                0.003,
                0.0,
                3.0,
                2.001
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 1.4",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 0.5",
                "8 <- INIT",
                "9 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 9 = 18 (left: 9 12 18) || 12 - 9 = 3 (left: 3 18)",
                "9 - 2 = 7 (left: 7 9 12) || 12 - 7 = 5 (left: 7 5)",
                "9 - 2 = 7 (left: 7 9 12)",
                "12 - 2 = 10 (left: 9 10 12)",
                "2 * 9 = 18 (left: 9 12 18)",
                "9 - 2 = 7 (left: 7 9 12)",
                "12 - 9 = 3 (left: 2 9 3)",
                "9 - 2 = 7 (left: 7 9 12) || 12 / 9 = 1.33 (left: 7 1.33)",
                "12 - 2 = 10 (left: 9 10 12)",
                "2 * 9 = 18 (left: 9 12 18) || 9 * 12 = 108 (left: 18 108)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                3.0,
                2.001,
                1.002,
                22.0,
                1.001,
                0.002,
                3.0,
                20.001
            ],
            "Resampling": [
                "0 <- 2.5",
                "1 <- 1.1",
                "2 <- 2.9",
                "3 <- 2.9",
                "4 <- 2.5",
                "5 <- INIT",
                "6 <- 2.5",
                "7 <- 2.5",
                "8 <- 2.5",
                "9 <- 2.9"
            ]
        },
        "Step 3": {
            "steps": [
                "9 - 2 = 7 (left: 7 9 12) || 9 + 12 = 21 (left: 7 21)",
                "12 - 2 = 10 (left: 9 10 12) || 9 * 10 = 90 (left: 12 90)",
                "2 * 9 = 18 (left: 9 12 18) || 9 * 12 = 108 (left: 18 108) || 18 - 6 = 12 (left",
                "2 * 9 = 18 (left: 9 12 18) || 9 * 12 = 108 (left: 18 108) || 108 / 18 = 6 (left: 6)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12)",
                "9 - 2 = 7 (left: 7 9 12)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12)",
                "9 - 2 = 7 (left: 7 9 12) || 12 / 9 = 1.333333333",
                "9 - 2 = 7 (left: 7 9 12) || 7 * 9 = 63 (left: 63 12)",
                "2 * 9 = 18 (left: 9 12 18) || 9 * 12 = 108 (left: 18 108) || Input: 3 9 27"
            ],
            "Evaluation": [
                0.001,
                0.003,
                2.0,
                0.002,
                60.0,
                21.001,
                60.0,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 2.9",
                "1 <- 2.4",
                "2 <- 3.4",
                "3 <- 3.4",
                "4 <- 3.4",
                "5 <- 3.5",
                "6 <- 2.2",
                "7 <- 3.6",
                "8 <- 2.3",
                "9 <- 3.5"
            ]
        },
        "Step 4": {
            "steps": [
                "2 * 9 = 18 (left: 9 12 18) || 9 * 12 = 108 (left: 18 108) || 18 * 108 = 1944 (left: 1944)",
                "2 * 9 = 18 (left: 9 12 18) || 9 * 2 = 18 (left: 18 18)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 + 12 = 14",
                "9 - 2 = 7 (left: 7 9 12) || 7 - 9 = -",
                "9 - 2 = 7 (left: 7 9 12) || 12 - 7 = 5 (left: 7 5)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "12 - 2 = 10 (left: 9 10 12) || 12 + 9 = 21 (left: 10 21)",
                "9 - 2 = 7 (left: 7 9 12) || 7 * 9 = 63 (left: 63 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                40.0,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- 3.6",
                "1 <- 2.9",
                "2 <- 3.5",
                "3 <- 1.1",
                "4 <- 4.7",
                "5 <- 3.5",
                "6 <- 3.6",
                "7 <- 2.5",
                "8 <- 3.4",
                "9 <- 4.7"
            ]
        },
        "Step 5": {
            "steps": [
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 + 12 = 14",
                "2 * 9 = 18 (left: 9 12 18) || 9 * 12 = 108 (left: 18 108) || 108 / 18 = 6 (left: 6)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12)",
                "12 - 2 = 10 (left: 9 10 12) || 12 - 9 = 3 (left: 3 10)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - 2) * (9 - 7) * 12 = 24",
                "9 - 2 = 7 (left: 7 9 12) || 12 - 7 = 5 (left: 7 5)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "9 - 2 = 7 (left: 7 9 12) || 12 / 9 = 1.33 (left: 7 1.33)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "9 - 2 = 7 (left: 7 9 12) || 9 - 7 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (9 - (9 - 2)) * 12 = 24"
            ]
        },
        "Input": "2 9 9 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "47": {
        "puzzle": "11 11 11 12",
        "Step 0": {
            "steps": [
                "12 - 11 = 1 (left: 11 11 1)",
                "11 / 11 = 1 (left: 1 11 12)",
                "11 + 11 = 22 (left: 11 22 12)",
                "11 * 11 = 121 (left: 121 11 12)",
                "12 - 11 = 1 (left: 11 11 1)",
                "11 * 11 = 121 (left: 121 11 12)",
                "11 + 11 = 22 (left: 11 12 22)",
                "12 - 11 = 1 (left: 11 11 1)",
                "12 - 11 = 1 (left: 11 11 ",
                "12 - 11 = 1 (left: 11 11 1)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                1.002,
                1.001,
                1.0,
                2.001,
                20.002,
                1.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 0.6",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 0.1",
                "8 <- INIT",
                "9 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "11 + 11 = 22 (left: 11 12 22) || 12 - 11 = 1 (left: 1 12 22)",
                "11 + 11 = 22 (left: 11 12 22) || 11 - 12 = -1 (left: -1 12 22)",
                "11 / 11 = 1 (left: 1 11 12)",
                "12 - 11 = 1 (left: 11 11 1)",
                "12 - 11 = 1 (left: 11 1 1)",
                "12 - 11 = 1 (left: 11 1 1)",
                "12 - 11 = 1 (left: 11 11 1)",
                "11 / 11 = 1 (left: 1 11 12) || 12 / 1 = 12 (left: 1 12)",
                "12 - 11 = 1 (left: 11 11 1)",
                "11 / 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                2.001,
                0.003,
                1.001,
                2.001,
                0.003,
                0.002,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.6",
                "4 <- INIT",
                "5 <- 0.6",
                "6 <- INIT",
                "7 <- 0.6",
                "8 <- 0.6",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "11 / 11 = 1 (left: 1 11 12)",
                "11 * 11 = 121 (left: 121 11 12)",
                "11 + 11 = 22 (left: 22 11 1)",
                "11 + 11 = 22 (left: 11 12 22) || 11 * 12 = 132 (left: 22)",
                "11 * 11 = 121 (left: 121 11 12)",
                "11 + 11 = 22 (left: 11 12 22) || 22 - 12 = 10 (left: 10 22)",
                "12 - 11 = 1 (left: 11 11 1)",
                "11 + 11 = 22 (left: 11 12 22) || 22 - 11 = 11 (left: 11 12)",
                "11 + 11 = 22 (left: 11 12 22) || 11 * 12 = 132 (left: 132 22)",
                "11 - 11 = 0 (left: 0 11 12)"
            ],
            "Evaluation": [
                40.001,
                1.001,
                1.001,
                20.001,
                1.001,
                0.003,
                2.001,
                0.003,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 2.0",
                "3 <- 2.3",
                "4 <- 2.0",
                "5 <- 2.0",
                "6 <- INIT",
                "7 <- 2.6",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "11 / 11 = 1 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "11 / 11 = 1 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "11 / 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 11 = 22 (left: 11 12 22) || 11 * 12 = 132 (left: 22) || 22 * 2 = 44 (left: 44)",
                "11 / 11 = 1 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "11 / 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 11 = 1 (left: 11 11 1)",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1)",
                "12 - 11 = 1 (left: 11 11 1)",
                "11 * 11 = 121 (left: 11 121 12)"
            ],
            "Evaluation": [
                1.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.002,
                40.0,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 3.7",
                "2 <- 3.7",
                "3 <- 3.7",
                "4 <- 2.0",
                "5 <- 3.7",
                "6 <- 2.3",
                "7 <- 2.3",
                "8 <- 2.3",
                "9 <- 3.7"
            ]
        },
        "Step 4": {
            "steps": [
                "11 + 11 = 22 (left: 11 12 22) || 11 * 12 = 132 (left: 22) || There are no possible next steps with the number 22 as there are no other numbers provided for arithmetic operations.",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 / 1 = 10 (left: 10)",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 / 1 = 10 (left: 1)",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 / 1 = 10 (left: 1)",
                "11 / 11 = 1 (left: 1 11 12) || 12 - 1 = 11 (left: 11 11)",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 * 1 = 10 (left: 1 10)",
                "11 + 11 = 22 (left: 11 12 22) || 11 * 12 = 132 (left: 22) || 22 / 2 = 11",
                "11 + 11 = 22 (left: 11 12 22) || 11 * 12 = 132 (left: 22) || Input: 5 9 3",
                "11 + 11 = 22 (left: 11 12 22) || 11 * 12 = 132 (left: 22) || None, since there is only one number.",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 / 1 = 10 (left: 1)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                60.0,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- INIT",
                "2 <- 4.5",
                "3 <- 2.0",
                "4 <- 4.5",
                "5 <- 2.0",
                "6 <- 3.7",
                "7 <- 3.7",
                "8 <- 2.0",
                "9 <- 2.3"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 11 = 1 (left: 11 11 1) || 11 / 1 = 11 (left: 11 11)",
                "11 * 11 = 121 (left: 121 11 12)",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 * 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 / 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 * 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 / 11 = 1 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || Input: 5 3 2",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || Input: 5 7 9",
                "11 / 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "11 + 11 = 22 (left: 11 12 22) || 11 * 12 = 132 (left: 22) || 22 * 8 = 176 (left: 8)"
            ],
            "Evaluation": [
                0.003,
                1.001,
                0.002,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.5",
                "1 <- 2.0",
                "2 <- 4.5",
                "3 <- INIT",
                "4 <- 2.3",
                "5 <- 4.5",
                "6 <- 3.7",
                "7 <- 2.0",
                "8 <- 3.0",
                "9 <- 0.6"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 * 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 / 11 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 * 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 11 = 1 (left: 11 11 1)",
                "11 + 11 = 22 (left: 11 12 22) || 11 * 12 = 132 (left: 22) || No possible next steps as there is only one number in the input.",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 * 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 + 1 = 11",
                "11 / 11 = 1 (left: 1 11 12) || 12 / 1 = 12 (left: 11 12)",
                "11 / 11 = 1 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12) || 10 * 12 = 120 (left: 120)",
                "11 + 11 = 22 (left: 11 12 22) || 12 + 11 = 23 (left: 22)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.001,
                1.002,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 4.5",
                "2 <- INIT",
                "3 <- 3.7",
                "4 <- 4.5",
                "5 <- 2.2",
                "6 <- 4.5",
                "7 <- 4.5",
                "8 <- 5.1",
                "9 <- 4.5"
            ]
        },
        "Step 7": {
            "steps": [
                "11 / 11 = 1 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 * 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "12 - 11 = 1 (left: 11 11 1)",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 / 1 = 10 (left: 1 10)",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 * 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "11 + 11 = 22 (left: 22 11 1) || 11 + 1 = 12 (left: 22 12)",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 * 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 * 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 * 11 = 121 (left: 121 11 12) || 121 + 11 = 132 (left: 11 12)",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 * 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                1.002,
                60.0,
                0.002,
                0.003,
                0.001,
                0.003,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 7.3",
                "1 <- 4.5",
                "2 <- 4.5",
                "3 <- 7.3",
                "4 <- 4.5",
                "5 <- 7.3",
                "6 <- 7.3",
                "7 <- 4.5",
                "8 <- 7.3",
                "9 <- 4.5"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 / 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 * 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 * 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 / 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 * 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 / 1 = 10 (left: 1 10) || 1 + 10 = 11",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 / 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 * 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 / 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 * 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.002,
                0.002,
                0.002,
                0.003,
                0.003,
                0.001,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 7.3",
                "1 <- 3.0",
                "2 <- 7.3",
                "3 <- 3.7",
                "4 <- 2.0",
                "5 <- 4.5",
                "6 <- 7.3",
                "7 <- 2.3",
                "8 <- 7.3",
                "9 <- 7.3"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 / 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "11 / 11 = 1 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12) || 12 / 10 = 1.2 (left: 1.2)",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 / 1 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 * 1 = 10 (left: 1 10)",
                "11 / 11 = 1 (left: 1 11 12) || 12 - 1 = 11 (left: 11 11)",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 * 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 / 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "11 + 11 = 22 (left: 11 12 22) || 11 * 12 = 132 (left: 22) || 22 + 2 = 24",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 / 1 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10) ",
                "12 - 11 = 1 (left: 11 11 1) || 11 - 1 = 10 (left: 10 1) || 10 / 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ]
        },
        "Input": "11 11 11 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "48": {
        "puzzle": "3 8 13 13",
        "Step 0": {
            "steps": [
                "13 + 3 = 16 (left: 8 13 16)",
                "8 / 3 = 2.6666666666666665 (left: 2.6666666666666665 8 13)",
                "3 * 8 = 24 (left: 13 13 24)",
                "3 * 8 = 24 (left: 13 13 24)",
                "13 + 3 = 16 (left: 8 13 16)",
                "3 * 8 = 24 (left: 24 13 13)",
                "3 * 8 = 24 (left: 13 13 24)",
                "13 - 3 = 10 (left: 8 10 13)",
                "13",
                "13 + 3 = 16 (left: 8 13 16)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                2.001,
                22.0,
                20.002,
                20.002,
                2.001,
                1.002,
                0.003,
                22.0
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.5",
                "2 <- INIT",
                "3 <- 0.4",
                "4 <- 0.5",
                "5 <- 0.3",
                "6 <- 0.3",
                "7 <- 0.9",
                "8 <- 0.5",
                "9 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "3 * 8 = 24 (left: 24 13 13) || 13 * 13 = 169 (left: 24 169)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13)",
                "3 * 8 = 24 (left: 13 13 24)",
                "13 + 3 = 16 (left: 8 13 16) || 8 / 13 = 0.6153846153846154 (left: 0.6153846153846154 16)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13)",
                "3 * 8 = 24 (left: 13 13 24) || 24 - 13 = 11 (left: 11 13)",
                "3 * 8 = 24 (left: 13 13 24) || 13 - 13 = 0 (left: 0 24)",
                "13 + 3 = 16 (left: 8 13 16) || 16 - 8 = 8 (left: 8 8)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1 (left: 1 13)",
                "3 * 8 = 24 (left: 13 13 24) || 13 - 13 = 0 (left: 0 24)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.003,
                0.001,
                60.0,
                60.0,
                60.0,
                0.003,
                1.001,
                60.0
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 1.6",
                "2 <- 1.6",
                "3 <- 1.5",
                "4 <- 1.1",
                "5 <- 1.4",
                "6 <- 1.9",
                "7 <- 1.1",
                "8 <- 0.4",
                "9 <- 0.5"
            ]
        },
        "Step 2": {
            "steps": [
                "3 * 8 = 24 (left: 13 13 24) || 24 - 13 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "3 * 8 = 24 (left: 13 13 24) || 13 - 13 = 0 (left: 0 24) || 5 * 3 = 15 (left: 15)",
                "3 * 8 = 24 (left: 13 13 24) || 13 - 13 = 0 (left: 0 24) || 0 * 24 = 0 (left: 0)",
                "3 * 8 = 24 (left: 13 13 24) || 24 - 13 = 11 (left: 11 13) || Input: 5 9 7",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 13 / 11 = 1.1818181818181819 (left: 1.1818181818181819)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 \u2248 0.846 (left: 0.846)",
                "3 * 8 = 24 (left: 13 13 24) || 13 - 13 = 0 (left: 0 24) || 24 * 0 = 0 (left: 0)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 13 - 11 = 2 (left: 2)",
                "13 + 3 = 16 (left: 8 13 16) || 16 + 8 = 24 (left: 13 24)",
                "3 * 8 = 24 (left: 24 13 13) || 13 / 24 = 0.542 (left: 0.542 13)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.001,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 1.6",
                "2 <- 1.5",
                "3 <- 1.1",
                "4 <- 1.9",
                "5 <- 1.4",
                "6 <- 1.5",
                "7 <- 1.8",
                "8 <- 1.4",
                "9 <- 1.4"
            ]
        },
        "Step 3": {
            "steps": [
                "3 * 8 = 24 (left: 13 13 24) || 13 - 13 = 0 (left: 0 24) || 24 / 0 = Undefined (left: 0 24)",
                "3 * 8 = 24 (left: 13 13 24) || 13 - 13 = 0 (left: 0 24) || Possible next steps:",
                "3 * 8 = 24 (left: 13 13 24) || 24 - 13 = 11 (left: 11 13) || 13 / 11 = 1.18 (left: 1.18)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 13 - 11 = 2 (left: 2)",
                "3 * 8 = 24 (left: 13 13 24) || 13 - 13 = 0 (left: 0 24) || 24 * 0 = 0 (left: 0)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.8461538461538461 (left: 0.8461538461538461)",
                "3 * 8 = 24 (left: 13 13 24) || 24 - 13 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "3 * 8 = 24 (left: 24 13 13) || 24 / 13 = 1 (left: 1 13) || Input: 5 3 7",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 13 / 11 = 1.1818181818181819 (left: 1.1818181818181819)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                0.002,
                0.003,
                0.001,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 1.9",
                "2 <- INIT",
                "3 <- 0.3",
                "4 <- 1.4",
                "5 <- 0.5",
                "6 <- 1.9",
                "7 <- 3.0",
                "8 <- 1.9",
                "9 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "3 * 8 = 24 (left: 13 13 24) || 13 - 13 = 0 (left: 0 24) || 24 / 0 = Undefined (left: 0 24) || 24 / 0 = undefined",
                "3 * 8 = 24 (left: 13 13 24) || 13 - 13 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24)",
                "3 * 8 = 24 (left: 24 13 13)",
                "3 * 8 = 24 (left: 13 13 24) || 13 / 13 = 1 (left: 1 13 24)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 / 13 \u2248 0.846 (left: 0.846)",
                "3 * 8 = 24 (left: 24 13 13) || 13 - 24 = -11 (left: -11 13)",
                "3 * 8 = 24 (left: 13 13 24) || 13 - 13 = 0 (left: 0 24) || 24 * 0 = 0 (left: 0)",
                "3 * 8 = 24 (left: 13 13 24) || 13 - 13 = 0 (left: 0 24) || 24 / 0 = Undefined (left: 0 24) || 24 - 0 = 24 (left: 24)",
                "3 * 8 = 24 (left: 13 13 24) || 13 - 13 = 0 (left: 0 24) || Input: 6 3",
                "3 * 8 = 24 (left: 13 13 24) || 13 - 13 = 0 (left: 0 24) || 24 / 0 = Undefined (left: 0 24) || 0 * 24 = 0 (left: 0 24)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.003,
                2.001,
                0.002,
                0.001,
                20.002,
                60.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 4.9",
                "1 <- 0.4",
                "2 <- 1.9",
                "3 <- 1.4",
                "4 <- 4.1",
                "5 <- 1.5",
                "6 <- 4.1",
                "7 <- 4.7",
                "8 <- 4.1",
                "9 <- 4.6"
            ]
        },
        "Step 5": {
            "steps": [
                "3 * 8 = 24 (left: 13 13 24) || 13 - 13 = 0 (left: 0 24) || 24 / 0 = Undefined (left: 0 24) || 0 * 24 = 0 (left: 0 24) || 24 / 0 = undefined",
                "13 + 3 = 16 (left: 8 13 16) || 16 + 8 = 24 (left: 13 24)",
                "3 * 8 = 24 (left: 13 13 24) || 13 - 13 = 0 (left: 0 24) || 24 * 0 = 0 (left: 0)",
                "3 * 8 = 24 (left: 24 13 13) || 24 - 13 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "3 * 8 = 24 (left: 13 13 24) || 13 - 13 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: (3 * 8) - (13 - 13) = 24",
                "3 * 8 = 24 (left: 13 13 24) || 24 - 13 = 11 (left: 11 13) || 11 / 13 = 0.846 (left: 0.846)",
                "3 * 8 = 24 (left: 13 13 24) || 13 - 13 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: (3 * 8) - (13 - 13) = 24",
                "3 * 8 = 24 (left: 13 13 24) || 13 - 13 = 0 (left: 0 24) || 24 / 0 = Undefined (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: (3 * 8) - (13 - 13) = 24",
                "3 * 8 = 24 (left: 13 13 24) || 13 - 13 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: (3 * 8) - (13 - 13) = 24",
                "3 * 8 = 24 (left: 13 13 24) || 13 - 13 = 0 (left: 0 24) || 24 * 0 = 0 (left: 0) || There are no possible next steps since there is no input provided."
            ]
        },
        "Input": "3 8 13 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "49": {
        "puzzle": "9 9 12 12",
        "Step 0": {
            "steps": [
                "12 + 9 = 21 (left: 9 12 21)",
                "9 / 9 = 1 (left: 1 12 12)",
                "9 * 9 = 81 (left: 12 12 81)",
                "9 * 9 = 81 (left: 12 12 81)",
                "12 + 9 = 21 (left: 9 12 21)",
                "9 * 9 = 81 (left: 12 12 81)",
                "9 * 9 = 81 (left: 12 12 81)",
                "12 - 9 = 3 (left: 3 9 12)",
                "12 / 9 = 1.3333333333333333 (",
                "12 + 9 = 21 (left: 9 12 21)"
            ],
            "Evaluation": [
                1.002,
                20.001,
                1.002,
                21.001,
                2.0,
                1.001,
                1.002,
                2.001,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.1",
                "2 <- 0.1",
                "3 <- 0.1",
                "4 <- 0.3",
                "5 <- INIT",
                "6 <- 0.1",
                "7 <- 0.7",
                "8 <- 0.3",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "9 / 9 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "9 / 9 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "9 / 9 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "9 / 9 = 1 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "9 * 9 = 81 (left: 12 12 81) || 81 / 12 = 6.75 (left: 6.75 12)",
                "9 - 9 = 0 (left: 0 12 12)",
                "9 / 9 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "12 - 9 = 3 (left: 3 9 12) || 3 * 9 = 27 (left: 27)",
                "9 * 9 = 81 (left: 12 12 81) || 12 / 12 = 1 (left: 1 12 81)",
                "9 * 9 = 81 (left: 12 12 81) || 81 / 12 = 6.75 (left: 12 6.75)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                0.002,
                3.0,
                60.0,
                60.0,
                0.003,
                40.001,
                1.002
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 1.2",
                "2 <- 1.0",
                "3 <- 1.1",
                "4 <- 1.5",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 1.8",
                "8 <- 1.2",
                "9 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "9 / 9 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "9 / 9 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "9 / 9 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "9 / 9 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "9 - 9 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12)",
                "9 * 9 = 81 (left: 12 12 81)",
                "12 + 9 = 21 (left: 9 12 21)",
                "9 * 9 = 81 (left: 12 12 81) || 12 / 12 = 1 (left: 1 12 81) || 12 - 1 = 11 (left: 11 81)",
                "9 / 9 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "9 * 9 = 81 (left: 12 12 81) || 12 - 12 = 0 (left: 0 81)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.002,
                0.003,
                60.0,
                1.002,
                2.0,
                0.001,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 0.5",
                "2 <- 1.2",
                "3 <- 1.2",
                "4 <- 2.9",
                "5 <- 2.9",
                "6 <- 1.1",
                "7 <- 2.4",
                "8 <- 2.4",
                "9 <- 2.4"
            ]
        },
        "Step 3": {
            "steps": [
                "9 - 9 = 0 (left: 0 12 12) || 12 / 0 = undefined",
                "9 * 9 = 81 (left: 12 12 81) || 81 - 12 = 69 (left: 12 69)",
                "9 / 9 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "9 / 9 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "9 * 9 = 81 (left: 12 12 81) || 12 - 12 = 0 (left: 0 81) || 81 * 0 = 0 (left: 0)",
                "9 * 9 = 81 (left: 12 12 81) || 12 - 12 = 0 (left: 0 81) || Input: 3 9 27",
                "9 / 9 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "9 - 9 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "9 - 9 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "9 - 9 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                40.001
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- INIT",
                "2 <- 3.9",
                "3 <- 1.2",
                "4 <- 1.5",
                "5 <- 1.5",
                "6 <- 2.0",
                "7 <- 1.5",
                "8 <- 1.1",
                "9 <- 2.9"
            ]
        },
        "Step 4": {
            "steps": [
                "9 / 9 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "9 - 9 = 0 (left: 0 12 12)",
                "9 - 9 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24 || 24 + 12 = 36 (left: 12 36)",
                "9 / 9 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "9 - 9 = 0 (left: 0 12 12) || 12 - 12 = 0 (left: 0 12)",
                "9 - 9 = 0 (left: 0 12 12) || Input: 0 0 12",
                "9 / 9 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "9 - 9 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12)",
                "9 / 9 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "9 * 9 = 81 (left: 12 12 81) || 12 - 12 = 0 (left: 0 81) || 3 + 9 = 12 (left: 12)"
            ],
            "Evaluation": [
                40.001,
                60.0,
                0.003,
                0.003,
                0.002,
                0.003,
                0.002,
                40.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.0",
                "2 <- 1.0",
                "3 <- 2.0",
                "4 <- 1.8",
                "5 <- 0.3",
                "6 <- 1.0",
                "7 <- 2.4",
                "8 <- 1.0",
                "9 <- 1.0"
            ]
        },
        "Step 5": {
            "steps": [
                "9 - 9 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "9 / 9 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "9 / 9 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "9 / 9 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "9 * 9 = 81 (left: 12 12 81) || 12 / 12 = 1 (left: 1 12 81) || 81 - 12 = 69 (left: 1 69)",
                "9 * 9 = 81 (left: 12 12 81) || 81 / 12 = 6.75 (left: 12 6.75)",
                "9 / 9 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "9 - 9 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "9 / 9 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "9 / 9 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)"
            ],
            "Evaluation": [
                60.0,
                0.0,
                0.003,
                20.002,
                0.002,
                0.003,
                60.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.9",
                "1 <- 4.0",
                "2 <- 1.0",
                "3 <- 5.0",
                "4 <- 1.5",
                "5 <- 1.1",
                "6 <- 5.0",
                "7 <- 1.2",
                "8 <- 4.7",
                "9 <- 4.0"
            ]
        },
        "Step 6": {
            "steps": [
                "9 * 9 = 81 (left: 12 12 81) || 12 - 12 = 0 (left: 0 81) || 0 * 81 = 0 (left: 81)",
                "9 / 9 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2 12)",
                "9 / 9 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "9 - 9 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24)",
                "9 - 9 = 0 (left: 0 12 12) || 12 / 0 = undefined - division by zero not allowed",
                "9 / 9 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "9 - 9 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24 || 12 + 12 = 24 (left: 24)",
                "9 / 9 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "9 - 9 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24",
                "9 / 9 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 + 24 = 36 (left: 36)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.002,
                60.0,
                0.003,
                20.002,
                60.0,
                60.0,
                40.001,
                40.0
            ],
            "Resampling": [
                "0 <- 6.6",
                "1 <- 6.5",
                "2 <- 5.6",
                "3 <- 4.0",
                "4 <- 2.9",
                "5 <- 6.7",
                "6 <- 6.6",
                "7 <- 5.6",
                "8 <- 6.9",
                "9 <- 6.3"
            ]
        },
        "Step 7": {
            "steps": [
                "9 - 9 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24 || 12 + 12 = 24 (left: 24) || Answer: (9 - 9) * (12 + 12) = 24",
                "9 / 9 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2 12)",
                "9 / 9 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24)",
                "9 / 9 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 12 24)",
                "9 * 9 = 81 (left: 12 12 81) || 12 - 12 = 0 (left: 0 81) || 81 - 0 = 81 (left: 81)",
                "9 / 9 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2 12)",
                "9 - 9 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24 || 12 + 12 = 24 (left: 24) || Answer: (9 - 9) + (12 + 12) = 24",
                "9 / 9 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 24 = 288 (left: 288)",
                "9 / 9 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 + 24 = 36 (left: 36) || 36 / 2 = 18",
                "9 - 9 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 24 / 24 = 1 (left: 1 24)"
            ]
        },
        "Input": "9 9 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "50": {
        "puzzle": "1 1 5 5",
        "Step 0": {
            "steps": [
                "5 + 1 = 6 (left: 1 5 6)",
                "1 / 1 = 1 (left: 1 5 5)",
                "5 * 1 = 5 (left: 5 5 5)",
                "1 + 5 = 6 (left: 6 5 5)",
                "5 - 1 = 4 (left: 1 5 4)",
                "1 / 1 = 1 (left: 1 5 5)",
                "5 - 1 = 4 (left: 1 5 4)",
                "5 + 1 = 6 (left: 1 5 6)",
                "5 / 1 = 5 (left: 1 5 ",
                "5 + 1 = 6 (left: 1 5 6)"
            ],
            "Evaluation": [
                2.0,
                60.0,
                2.001,
                3.0,
                22.0,
                60.0,
                22.0,
                21.001,
                0.002,
                22.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.7",
                "2 <- 0.6",
                "3 <- 0.1",
                "4 <- 0.5",
                "5 <- 0.1",
                "6 <- 0.1",
                "7 <- INIT",
                "8 <- 0.5",
                "9 <- 0.6"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 5)",
                "5 + 1 = 6 (left: 1 5 6) || 5 * 1 = 5 (left: 5 6)",
                "5 - 1 = 4 (left: 1 5 4) || 5 / 1 = 5 (left: 5 4)",
                "1 / 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5)",
                "1 / 1 = 1 (left: 1 5 5) || 1 * 5 = 5 (left: 5 5)",
                "1 / 1 = 1 (left: 1 5 5) || 1 * 5 = 5 (left: 5 5)",
                "1 / 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5)",
                "5 / 1 = 5 (left: 1 5 ",
                "1 / 1 = 1 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5 5)",
                "5 - 1 = 4 (left: 1 5 4) || 5 / 1 = 5 (left: 5 4)"
            ],
            "Evaluation": [
                60.0,
                0.0,
                3.0,
                3.0,
                0.002,
                0.003,
                3.0,
                0.001,
                1.002,
                1.001
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 0.7",
                "2 <- 1.0",
                "3 <- 0.7",
                "4 <- 0.3",
                "5 <- 0.3",
                "6 <- INIT",
                "7 <- 0.5",
                "8 <- 0.7",
                "9 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 5) || 1 * 5 = 5 (left: 5 5)",
                "5 + 1 = 6 (left: 1 5 6) || 5 * 1 = 5 (left: 5 6)",
                "1 * 1 = 1 (left: 1 5 5) || 1 * 5 = 5 (left: 5 5)",
                "5 + 1 = 6 (left: 1 5 6) || 6 / 1 = 6 (left: 6 6)",
                "1 + 5 = 6 (left: 6 5 5) || 5 / 5 = 1 (left: 6 1)",
                "1 + 5 = 6 (left: 6 5 5) || Input: 3 9",
                "5 + 1 = 6 (left: 1 5 6)",
                "1 / 1 = 1 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5)",
                "5 + 1 = 6 (left: 1 5 6) || 5 / 1 = 5 (left: 5 6)",
                "5 - 1 = 4 (left: 1 5 4) || 5 / 1 = 5 (left: 5 4) || 4 * 5 = 20 (left: 20)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.003,
                20.001,
                0.003,
                41.0,
                1.001,
                1.001,
                0.002
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 1.0",
                "2 <- 1.0",
                "3 <- 0.7",
                "4 <- 2.4",
                "5 <- 1.0",
                "6 <- 0.3",
                "7 <- 2.6",
                "8 <- 0.5",
                "9 <- 0.9"
            ]
        },
        "Step 3": {
            "steps": [
                "1 / 1 = 1 (left: 1 5 5) || 5 * 5 = 25 (left: 25)",
                "1 * 1 = 1 (left: 1 5 5) || 1 * 5 = 5 (left: 5 5)",
                "1 * 1 = 1 (left: 1 5 5) || 1 * 5 = 5 (left: 5 5)",
                "5 + 1 = 6 (left: 1 5 6) || 1 * 5 = 5 (left: 5 6)",
                "1 + 5 = 6 (left: 6 5 5) || 5 / 5 = 1 (left: 6 1) || 6 / 1 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 5 5) || 1 * 5 = 5 (left: 5 5)",
                "1 + 5 = 6 (left: 6 5 5) || 6 - 5 = 1 (left: 1 5)",
                "5 + 1 = 6 (left: 1 5 6) || 6 - 1 = 5 (left: 5 6)",
                "1 / 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5)",
                "5 + 1 = 6 (left: 1 5 6) || Input: 3 9 27"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                20.001,
                0.003,
                21.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.1",
                "2 <- 3.6",
                "3 <- 1.6",
                "4 <- 0.1",
                "5 <- 0.3",
                "6 <- 2.4",
                "7 <- 3.8",
                "8 <- 3.8",
                "9 <- 3.8"
            ]
        },
        "Step 4": {
            "steps": [
                "5 - 1 = 4 (left: 1 5 4) || 5 / 1 = 5 (left: 5 4)",
                "1 / 1 = 1 (left: 1 5 5) || 1 * 5 = 5 (left: 5 5 5)",
                "1 + 5 = 6 (left: 6 5 5) || 6 - 5 = 1 (left: 1 5) || 1 + 5 = 6",
                "1 / 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5 5) || 5 / 4 = 1.25 (left: 1.25 5)",
                "1 / 1 = 1 (left: 1 5 5) || 1 * 5 = 5 (left: 5 5)",
                "1 + 5 = 6 (left: 6 5 5) || 3 + 3 = 6 (left: 3 6 3)",
                "1 + 5 = 6 (left: 6 5 5) || 5 / 5 = 1 (left: 6 1) || 6 * 1 = 6 (left: 6)",
                "1 / 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5) || 5 - 4 = 1 (left: 1)",
                "1 / 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5) || 4 * 5 = 20 (left: 5)",
                "1 / 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5) || 4 / 5 = 0.8 (left: 0.8)"
            ],
            "Evaluation": [
                3.0,
                1.002,
                0.003,
                0.002,
                0.003,
                2.0,
                0.003,
                0.003,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 3.6",
                "1 <- 4.5",
                "2 <- 1.0",
                "3 <- 2.6",
                "4 <- 0.1",
                "5 <- 0.9",
                "6 <- 2.6",
                "7 <- 0.1",
                "8 <- 0.1",
                "9 <- INIT"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 5 = 6 (left: 6 5 5) || 6 - 5 = 1 (left: 1 5) || 5 - 1 = 4 (left: 4)",
                "1 + 5 = 6 (left: 6 5 5) || 3 + 3 = 6 (left: 3 6 3) || 3 * 6 = 18 (left: 3 18 3)",
                "1 * 1 = 1 (left: 1 5 5) || 1 * 5 = 5 (left: 5 5)",
                "5 + 1 = 6 (left: 1 5 6) || 6 - 1 = 5 (left: 5 6)",
                "1 / 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)",
                "5 + 1 = 6 (left: 1 5 6) || 6 / 1 = 6 (left:",
                "5 + 1 = 6 (left: 1 5 6) || 1 * 5 = 5 (left: 5 6)",
                "1 / 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5)",
                "1 / 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5)",
                "1 + 5 = 6 (left: 6 5 5)"
            ],
            "Evaluation": [
                0.002,
                2.001,
                0.003,
                21.001,
                2.001,
                21.0,
                0.001,
                22.0,
                3.0,
                3.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 2.6",
                "2 <- 1.0",
                "3 <- 5.5",
                "4 <- 3.8",
                "5 <- 0.1",
                "6 <- 1.0",
                "7 <- 0.5",
                "8 <- 5.5",
                "9 <- 5.5"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 5) || 1 * 5 = 5 (left: 5 5)",
                "5 + 1 = 6 (left: 1 5 6) || 5 / 1 = 5 (left: 5 6)",
                "1 * 1 = 1 (left: 1 5 5) || 1 * 5 = 5 (left: 5 5)",
                "5 + 1 = 6 (left: 1 5 6) || 6 / 1 = 6 (left: || 6 - 1 = 5 (left: 5)",
                "1 / 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5) || 5 / 4 = 1.25 (left: 1.25)",
                "1 / 1 = 1 (left: 1 5 5) || 1 * 5 = 5 (left: 5 5)",
                "1 * 1 = 1 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5)",
                "1 / 1 = 1 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5)",
                "5 + 1 = 6 (left: 1 5 6) || 6 / 1 = 6 (left: || 1 + 6 = 7 (left: 7)",
                "5 + 1 = 6 (left: 1 5 6) || 6 / 1 = 6 (left: || 6 / 6 = 1 (left: 1)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.001,
                0.0,
                0.002
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 1.0",
                "2 <- 5.8",
                "3 <- 5.5",
                "4 <- 0.5",
                "5 <- 5.3",
                "6 <- 5.5",
                "7 <- 5.7",
                "8 <- 2.4",
                "9 <- 5.3"
            ]
        },
        "Step 7": {
            "steps": [
                "5 - 1 = 4 (left: 1 5 4) || 5 - 1 = 4 (left: 4 4)",
                "1 * 1 = 1 (left: 1 5 5) || 1 * 5 = 5 (left: 5 5)",
                "1 / 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5) || 10 * 3 = 30 (left: 3",
                "5 + 1 = 6 (left: 1 5 6) || 6 / 1 = 6 (left: || 1 + 6 = 7 (left: 7)",
                "1 / 1 = 1 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5)",
                "5 + 1 = 6 (left: 1 5 6) || 6 - 1 = 5 (left: 5 6) || 5 / 6 = 0.83 (left: 0.83)",
                "5 + 1 = 6 (left: 1 5 6) || 6 / 1 = 6 (left: || 1 * 6 = 6 (left: 6)",
                "1 / 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5) || 5 - 4 = 1 (left: 1)",
                "1 + 5 = 6 (left: 6 5 5) || 5 / 5 = 1 (left: 6 1) || 6 * 1 = 6 (left: 6)",
                "5 + 1 = 6 (left: 1 5 6) || 6 - 1 = 5 (left: 5 6) || 6 / 5 = 1.2 (left: 1.2)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                0.003,
                40.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 5.7",
                "1 <- 7.4",
                "2 <- 7.4",
                "3 <- 7.2",
                "4 <- 5.3",
                "5 <- 7.4",
                "6 <- 0.5",
                "7 <- 0.4",
                "8 <- 5.3",
                "9 <- 7.4"
            ]
        },
        "Step 8": {
            "steps": [
                "1 / 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5) || 4 / 5 = 0.8 (left: 0.8)",
                "1 / 1 = 1 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5) || 5 - 5 = 0 (left: 0)",
                "1 / 1 = 1 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5) || 5 - 5 = 0 (left: 0)",
                "1 / 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5) || 10 * 3 = 30 (left: 3 || Input: 4",
                "5 + 1 = 6 (left: 1 5 6) || 6 - 1 = 5 (left: 5 6) || 10 + 2 = 12 (left: 12 3)",
                "1 / 1 = 1 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5) || 5 / 5 = 1 (left: 1)",
                "1 / 1 = 1 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5)",
                "5 - 1 = 4 (left: 1 5 4) || 4 - 1 = 3 (left: 3 4)",
                "5 + 1 = 6 (left: 1 5 6) || 6 - 1 = 5 (left: 5 6) || 5 * 6 = 30 (left: 30)",
                "1 / 1 = 1 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5) || 5 / 5 = 1 (left: 1)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.003,
                20.002,
                0.003,
                1.002,
                41.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 7.4",
                "2 <- 5.3",
                "3 <- 8.7",
                "4 <- 7.2",
                "5 <- 0.5",
                "6 <- 7.2",
                "7 <- 8.7",
                "8 <- 8.7",
                "9 <- 7.2"
            ]
        },
        "Step 9": {
            "steps": [
                "5 + 1 = 6 (left: 1 5 6) || 5 + 1 = 6 (left: 6 6)",
                "1 / 1 = 1 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5) || 5 - 5 = 0 (left: 0)",
                "5 + 1 = 6 (left: 1 5 6) || 6 - 1 = 5 (left: 5 6) || 5 - 6 = -1 (left: -1)",
                "5 - 1 = 4 (left: 1 5 4) || 4 - 1 = 3 (left: 3 4) || 3 * 4 = 12 (left: 12)",
                "1 / 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5) || 10 * 3 = 30 (left: 3 || 3 / 8 = 0.375 (left: 0.375)",
                "1 / 1 = 1 (left: 1 5 5) || 1 * 5 = 5 (left: 5 5)",
                "1 / 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5) || 10 * 3 = 30 (left: 3 || There are no possible next steps with the input of 3.",
                "5 - 1 = 4 (left: 1 5 4) || 4 - 1 = 3 (left: 3 4) || 3 * 4 = 12 (left: 12)",
                "5 - 1 = 4 (left: 1 5 4) || 4 - 1 = 3 (left: 3 4) || 3 - 4 = -1 (left: -1)",
                "1 / 1 = 1 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5) || 10 * 3 = 30 (left: 3 || 8 / 3 = 2.67 (left: 2.67)"
            ]
        },
        "Input": "1 1 5 5",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "51": {
        "puzzle": "3 3 12 12",
        "Step 0": {
            "steps": [
                "12 / 3 = 4 (left: 4 12 12)",
                "3 * 3 = 9 (left: 9 12 12)",
                "12 / 3 = 4 (left: 4 12 12)",
                "12 - 3 = 9 (left: 3 9 12)",
                "12 / 3 = 4 (left: 4 12 12)",
                "12 / 3 = 4 (left: 4 12 12)",
                "12 - 3 = 9 (left: 3 9 12)",
                "12 / 3 = 4 (left: 4 12 12)",
                "12 - 3 = 9 (left: 3 9 ",
                "12 / 3 = 4 (left: 4 12 12)"
            ],
            "Evaluation": [
                21.001,
                21.001,
                3.0,
                1.002,
                21.001,
                22.0,
                21.001,
                21.001,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- INIT",
                "2 <- 0.7",
                "3 <- INIT",
                "4 <- 0.5",
                "5 <- INIT",
                "6 <- 0.6",
                "7 <- 0.4",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12)",
                "12 - 3 = 9 (left: 9 12 12)",
                "12 / 3 = 4 (left: 4 12 12) || 12 /  4 = 3 (left: 3 12 12)",
                "12 / 3 = 4 (left: 3 4 12)",
                "12 / 3 = 4 (left: 4 12 12) || 4 * 12 = 48 (left: 12 48)",
                "12 - 3 = 9 (left: 3 9 12)",
                "12 - 3 = 9 (left: 3 9 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12)",
                "12 / 3 = 4 (left: 3 4 12)",
                "12 - 3 = 9 (left: 3 9 12)"
            ],
            "Evaluation": [
                20.001,
                1.002,
                41.0,
                22.0,
                0.002,
                3.0,
                0.003,
                20.002,
                41.0,
                2.001
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 1.7",
                "2 <- 0.4",
                "3 <- 1.2",
                "4 <- 1.0",
                "5 <- 0.5",
                "6 <- 0.6",
                "7 <- 1.0",
                "8 <- 0.6",
                "9 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12 12)",
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12) || 4 + 7 = 11 (left: 11 10)",
                "12 / 3 = 4 (left: 4 12 12) || 12 / 3 = 4 (left: 4 12 12)",
                "12 / 3 = 4 (left: 4 12 12) || 12 /  4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9)",
                "12 / 3 = 4 (left: 4 12 12) || 4 * 12 = 48 (left:",
                "12 - 3 = 9 (left: 3 9 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9)",
                "12 - 3 = 9 (left: 3 9 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                0.003,
                0.002,
                0.002,
                0.003,
                0.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.1",
                "2 <- 1.0",
                "3 <- 0.0",
                "4 <- 2.9",
                "5 <- 0.1",
                "6 <- 2.0",
                "7 <- 2.0",
                "8 <- 2.0",
                "9 <- 0.4"
            ]
        },
        "Step 3": {
            "steps": [
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12)",
                "3 * 3 = 9 (left: 9 12 12) || 12 + 9 = 21 (left: 9 12 21)",
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36)",
                "12 / 3 = 4 (left: 4 12 12) || 12 - 4 = 8 (left: 8 12)",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "3 * 3 = 9 (left: 9 12 12) || Input: 3 5 5",
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12 12)",
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 3 = 4 (left: 4 12 12) || 12 - 4 = 8 (left: 8 12 12)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                60.0,
                1.002,
                0.002,
                0.002,
                0.003,
                1.002,
                0.002,
                2.001
            ],
            "Resampling": [
                "0 <- 2.9",
                "1 <- 1.8",
                "2 <- 1.7",
                "3 <- 0.6",
                "4 <- 1.3",
                "5 <- 3.2",
                "6 <- 2.9",
                "7 <- 3.2",
                "8 <- 0.6",
                "9 <- 3.2"
            ]
        },
        "Step 4": {
            "steps": [
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "12 / 3 = 4 (left: 3 4 12) || 12 / 4 = 3 (left: 3 12)",
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9 12)",
                "12 - 3 = 9 (left: 3 9 12) || 3 * 9 = 27 (left: 27 12)",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8)",
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 + 2 = 38",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 / 2 = 18",
                "12 - 3 = 9 (left: 3 9 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || There are no possible next steps with the input of 36 as it is already a single number."
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                0.003,
                60.0,
                0.003,
                60.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 2.0",
                "2 <- 2.0",
                "3 <- 4.6",
                "4 <- 0.5",
                "5 <- 0.5",
                "6 <- 2.0",
                "7 <- 4.6",
                "8 <- 4.4",
                "9 <- 3.1"
            ]
        },
        "Step 5": {
            "steps": [
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)",
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12 12) || 12",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * (12 / 3)) * 8 = 24",
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12)",
                "12 / 3 = 4 (left: 4 12 12) || 12 - 4 = 8 (left:",
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (12 / (12 - 3)) = 24",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 8 / 3 = 2.66666666667 (left: 2.66666666667)",
                "3 * 3 = 9 (left: 9 12 12) || 12 + 9 = 21 (left: 9 12 21) || 9 * 21 = 189 (left: 12 189)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                60.0,
                1.002,
                0.001,
                0.003,
                60.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 5.7",
                "1 <- 2.0",
                "2 <- 5.3",
                "3 <- 3.2",
                "4 <- 5.7",
                "5 <- 5.3",
                "6 <- 4.4",
                "7 <- 5.7",
                "8 <- 3.2",
                "9 <- 5.7"
            ]
        },
        "Step 6": {
            "steps": [
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (12 / (12 - 3)) = 24 || Input: 2 3 4 6\nSteps:\n2 * 3 = 6 (left: 4 6 6)\n6 - 4 = 2 (left: 2 6)\n2 * 6 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((2 * 3) * (6 - 4)) * 2 = 24",
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12 12) || 3 * 12 = 36 (left: 12 36)",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * (12 / 3)) * 8 = 24 || Input: 2 3 5 8\nSteps:\n3 + 5 = 8 (left: 2 8 8)\n8 - 2 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (2 + 3 + 5) * 8 = 48",
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || No possible next steps for the number 36.",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (12 / (12 - 3)) = 24 || Input: 2 3 6 7\nSteps:\n6 * 3 = 18 (left: 2 7 18)\n18 - 7 = 11 (left: 2 11)\n2 * 11 = 22 (left: 22)\n22 + 2 = 24 (left: 24)\nAnswer: ((2 * 3) - 7) * (6 + 2) = 24",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * (12 / 3)) * 8 = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n8 * 3 = 24 (left: 24)\nAnswer: (2 * 6) - 4 * 3 = 24",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (12 / (12 - 3)) = 24 || Input: 2 3 5 7\nSteps:\n3 + 7 = 10 (left: 2 5 10)\n5 * 2 = 10 (left: 10 10)\n10 + 10 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((2 * 5) + (3 + 7)) + 4 = 24",
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 + 2 = 38",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (12 / (12 - 3)) = 24 || Input: 2 3 6 9\n\n6 * 3 = 18 (left: 2 9 18)\n18 - 9 = 9 (left: 2 9)\n9 * 2 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\n\nAnswer: ((6 * 3) - 9) + 6 = 24"
            ],
            "Evaluation": [
                60.0,
                0.003,
                60.0,
                0.003,
                60.0,
                60.0,
                0.001,
                60.0,
                0.003,
                40.0
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 6.2",
                "2 <- 6.0",
                "3 <- 3.2",
                "4 <- 6.2",
                "5 <- 5.3",
                "6 <- 6.5",
                "7 <- 6.7",
                "8 <- 6.0",
                "9 <- 1.8"
            ]
        },
        "Step 7": {
            "steps": [
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * (12 / 3)) * 8 = 24 || Input: 2 3 5 8\nSteps:\n3 + 5 = 8 (left: 2 8 8)\n8 - 2 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (2 + 3 + 5) * 8 = 48 || Unable to obtain 24 using the given numbers 2, 3, 5, 8.",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * (12 / 3)) * 8 = 24 || Input: 2 3 5 8\nSteps:\n3 + 5 = 8 (left: 2 8 8)\n8 - 2 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (2 + 3 + 5) * 8 = 48 || There is no way to obtain 24 using the given numbers 2, 3, 5, and 8.",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (12 / (12 - 3)) = 24 || Input: 2 3 4 6\nSteps:\n2 * 3 = 6 (left: 4 6 6)\n6 - 4 = 2 (left: 2 6)\n2 * 6 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((2 * 3) * (6 - 4)) * 2 = 24 || Input: 1 2 3 8\nSteps:\n2 * 3 = 6 (left: 1 6 8)\n6 + 8 = 14 (left: 1 14)\n14 - 1 = 13 (left: 13)\n13 + 1 = 14 (left: 14)\n14 - 8 = 6 (left: 6)\n6 * 2 = 12 (left: 12)\n12 * ",
                "12 / 3 = 4 (left: 4 12 12) || 12 / 4 = 3 (left: 3 12) || 3 * 12 = 36 (left: 36) || 36 / 2 = 18",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * (12 / 3)) * 8 = 24 || Input: 2 3 5 8\nSteps:\n3 + 5 = 8 (left: 2 8 8)\n8 - 2 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (2 + 3 + 5) * 8 = 48 || No solution.",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * (12 / 3)) * 8 = 24 || Input: 2 3 5 8\nSteps:\n3 + 5 = 8 (left: 2 8 8)\n8 - 2 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (2 + (3 + 5)) * 8 = 48",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * (12 / 3)) * 8 = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n8 * 3 = 24 (left: 24)\nAnswer: (2 * 6) - 4 * 3 = 24 || Input: 7 8 9 3\nSteps:\n7 + 8 = 15 (left: 9 15 3)\n15 - 9 = 6 (left: 6 3)\n6 * 3 = 18 (left: 18)\n18 + 9 = 27 (left: 27)\n27 - 3 = 24 (left: 24)\nAnswer: ((7 + 8) - 9) * (3 *",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (12 / (12 - 3)) = 24 || Input: 2 3 5 7\nSteps:\n3 + 7 = 10 (left: 2 5 10)\n5 * 2 = 10 (left: 10 10)\n10 + 10 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((2 * 5) + (3 + 7)) + 4 = 24 || Input: 6 6 7 8\nSteps:\n6 + 8 = 14 (left: 6 7 14)\n6 + 7 = 13 (left: 13 14)\n13 * 2 = 26 (left: 26)\n26 - 2 = 24 (left: 24)\nAnswer: ((6 + 8) + (6 + 7)) - 2 = 24",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (12 / (12 - 3)) = 24 || Input: 2 3 4 6\nSteps:\n2 * 3 = 6 (left: 4 6 6)\n6 - 4 = 2 (left: 2 6)\n2 * 6 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((2 * 3) * (6 - 4)) * 2 = 24 || Input: 1 2 3 6\nSteps:\n2 * 3 = 6 (left: 1 6 6)\n6 - 1 = 5 (left: 5 6)\n5 + 6 = 11 (left: 11)\n11 * 2 = 22 (left: 22)\n22 + 2 = 24 (left: 24)\nAnswer: ((2 * 3) + (6 - 1)) *",
                "12 / 3 = 4 (left: 3 4 12) || 12 / 4 = 3 (left: 3 12)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                40.0,
                0.003,
                0.003,
                60.0,
                60.0,
                60.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 6.7",
                "1 <- 7.7",
                "2 <- 7.5",
                "3 <- 0.6",
                "4 <- 7.8",
                "5 <- 6.5",
                "6 <- 6.5",
                "7 <- 4.4",
                "8 <- 6.9",
                "9 <- 7.2"
            ]
        },
        "Step 8": {
            "steps": [
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (12 / (12 - 3)) = 24 || Input: 2 3 5 7\nSteps:\n3 + 7 = 10 (left: 2 5 10)\n5 * 2 = 10 (left: 10 10)\n10 + 10 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((2 * 5) + (3 + 7)) + 4 = 24 || Input: 1 2 3 6\nSteps:\n2 * 6 = 12 (left: 1 3 12)\n12 - 3 = 9 (left: 1 9)\n9 * 1 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 - 3 = 24 (left: 24)\nAnswer: (1 * 3) * ((2 * 6) -",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (12 / (12 - 3)) = 24 || Input: 2 3 5 7\nSteps:\n3 + 7 = 10 (left: 2 5 10)\n5 * 2 = 10 (left: 10 10)\n10 + 10 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((2 * 5) + (3 + 7)) + 4 = 24 || Input: 6 6 7 8\nSteps:\n6 + 8 = 14 (left: 6 7 14)\n6 + 7 = 13 (left: 13 14)\n13 * 2 = 26 (left: 26)\n26 - 2 = 24 (left: 24)\nAnswer: ((6 + 8) + (6 + 7)) - 2 = 24 || Input: 3 4 5 6\nSteps:\n3 * 5 = 15 (left: 4 6 15)\n15 - 6 = 9 (left: 4 9)\n4 * 9 = 36 (left: 36)\n36 / 4 = 9 (left: 9)\n9 - 5 = 4 (left: 4)\n9 * 4 = 36 (left: 36)\nAnswer: (((",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * (12 / 3)) * 8 = 24 || Input: 2 3 5 8\nSteps:\n3 + 5 = 8 (left: 2 8 8)\n8 - 2 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (2 + (3 + 5)) * 8 = 48 || There is no way to obtain 24 using the numbers 2, 3, 5, and 8 with the given arithmetic operations.",
                "12 - 3 = 9 (left: 3 9 12) || 12 - 3 = 9 (left: 9 12)",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (12 / (12 - 3)) = 24 || Input: 2 3 4 6\nSteps:\n2 * 3 = 6 (left: 4 6 6)\n6 - 4 = 2 (left: 2 6)\n2 * 6 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((2 * 3) * (6 - 4)) * 2 = 24 || Input: 1 2 3 6\nSteps:\n2 * 3 = 6 (left: 1 6 6)\n6 - 1 = 5 (left: 5 6)\n5 + 6 = 11 (left: 11)\n11 * 2 = 22 (left: 22)\n22 + 2 = 24 (left: 24)\nAnswer: ((2 * 3) + (6 - 1)) * || 2 = 24",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * (12 / 3)) * 8 = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n8 * 3 = 24 (left: 24)\nAnswer: (2 * 6) - 4 * 3 = 24 || Input: 5 6 7 8\nSteps:\n5 * 8 = 40 (left: 6 7 40)\n7 - 6 = 1 (left: 1 40)\n1 * 40 = 40 (left: 40)\nAnswer: (5 * 8) - (7 - 6) = 24",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * (12 / 3)) * 8 = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n8 * 3 = 24 (left: 24)\nAnswer: (2 * 6) - 4 * 3 = 24 || Input: 1 2 3 8\nSteps:\n3 * 8 = 24 (left: 1 2 24)\n2 + 1 = 3 (left: 3 24)\n3 * 24 = 72 (left: 72)\nAnswer: (3 * 8) * (2 + 1) = 24",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (12 / (12 - 3)) = 24 || Input: 2 3 6 9\n\n6 * 3 = 18 (left: 2 9 18)\n18 - 9 = 9 (left: 2 9)\n9 * 2 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\n\nAnswer: ((6 * 3) - 9) + 6 = 24 || Input: 1 2 3 4\nSteps:\n3 * 4 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 * 1 = 10 (left: 10)\n10 + 10 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((1 * 2) * (3 - 4)) +",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (12 / (12 - 3)) = 24 || Input: 2 3 4 6\nSteps:\n2 * 3 = 6 (left: 4 6 6)\n6 - 4 = 2 (left: 2 6)\n2 * 6 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((2 * 3) * (6 - 4)) * 2 = 24 || Input: 1 2 3 8\nSteps:\n2 * 3 = 6 (left: 1 6 8)\n6 + 8 = 14 (left: 1 14)\n14 - 1 = 13 (left: 13)\n13 + 1 = 14 (left: 14)\n14 - 8 = 6 (left: 6)\n6 * 2 = 12 (left: 12)\n12 *  || 2 = 24 (left: 24)\nAnswer: (((1 * 2) + 3) + 8) * 2 = 24"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.003,
                0.003,
                0.003,
                60.0,
                40.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 6.4",
                "1 <- 8.8",
                "2 <- 8.1",
                "3 <- 6.4",
                "4 <- 8.6",
                "5 <- 8.5",
                "6 <- 7.5",
                "7 <- 6.2",
                "8 <- 8.8",
                "9 <- 8.7"
            ]
        },
        "Step 9": {
            "steps": [
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (12 / (12 - 3)) = 24 || Input: 2 3 6 7\nSteps:\n6 * 3 = 18 (left: 2 7 18)\n18 - 7 = 11 (left: 2 11)\n2 * 11 = 22 (left: 22)\n22 + 2 = 24 (left: 24)\nAnswer: ((2 * 3) - 7) * (6 + 2) = 24 || Input: 1 3 4 6\nSteps:\n4 * 6 = 24 (left: 1 3 24)\n3 + 1 = 4 (left: 4 24)\n4 * 24 = 96 (left: 96)\nAnswer: 4 * (3 + 1) * 6 = 24",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (12 / (12 - 3)) = 24 || Input: 2 3 6 9\n\n6 * 3 = 18 (left: 2 9 18)\n18 - 9 = 9 (left: 2 9)\n9 * 2 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\n\nAnswer: ((6 * 3) - 9) + 6 = 24 || Input: 1 2 3 4\nSteps:\n3 * 4 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 * 1 = 10 (left: 10)\n10 + 10 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((1 * 2) * (3 - 4)) + || (10 + 10) + 4 = 24",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (12 / (12 - 3)) = 24 || Input: 2 3 5 7\nSteps:\n3 + 7 = 10 (left: 2 5 10)\n5 * 2 = 10 (left: 10 10)\n10 + 10 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((2 * 5) + (3 + 7)) + 4 = 24 || Input: 6 6 7 8\nSteps:\n6 + 8 = 14 (left: 6 7 14)\n6 + 7 = 13 (left: 13 14)\n13 * 2 = 26 (left: 26)\n26 - 2 = 24 (left: 24)\nAnswer: ((6 + 8) + (6 + 7)) - 2 = 24 || Input: 3 4 5 6\nSteps:\n3 * 5 = 15 (left: 4 6 15)\n15 - 6 = 9 (left: 4 9)\n4 * 9 = 36 (left: 36)\n36 / 4 = 9 (left: 9)\n9 - 5 = 4 (left: 4)\n9 * 4 = 36 (left: 36)\nAnswer: ((( || 3 * 5) - 6) * 9) / 4 = 24",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (12 / (12 - 3)) = 24 || Input: 2 3 6 7\nSteps:\n6 * 3 = 18 (left: 2 7 18)\n18 - 7 = 11 (left: 2 11)\n2 * 11 = 22 (left: 22)\n22 + 2 = 24 (left: 24)\nAnswer: ((2 * 3) - 7) * (6 + 2) = 24 || Input: 1 2 3 4\nSteps:\n3 * 4 = 12 (left: 1 2 12)\n2 * 1 = 2 (left: 2 12)\n12 * 2 = 24 (left: 24)\nAnswer: (3 * 4) * (1 * 2) = 24",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * (12 / 3)) * 8 = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n8 * 3 = 24 (left: 24)\nAnswer: (2 * 6) - 4 * 3 = 24 || Input: 1 2 3 8\nSteps:\n3 * 8 = 24 (left: 1 2 24)\n2 + 1 = 3 (left: 3 24)\n3 * 24 = 72 (left: 72)\nAnswer: (3 * 8) * (2 + 1) = 24 || Input: 2 4 5 6\nSteps:\n4 * 6 = 24 (left: 2 5 24)\n5 - 2 = 3 (left: 3 24)\n3 * 24 = 72 (left: 72)\nAnswer: (4 * 6) * (5 - 2) = 24",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * (12 / 3)) * 8 = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n8 * 3 = 24 (left: 24)\nAnswer: (2 * 6) - 4 * 3 = 24 || Input: 5 6 7 8\nSteps:\n5 * 8 = 40 (left: 6 7 40)\n7 - 6 = 1 (left: 1 40)\n1 * 40 = 40 (left: 40)\nAnswer: (5 * 8) - (7 - 6) = 24 || Input: 1 2 3 6\nSteps:\n3 * 6 = 18 (left: 1 2 18)\n18 - 2 = 16 (left: 1 16)\n16 + 1 = 17 (left: 17)\n17 + 17 = 34 (left: 34)\n34 - 10 = 24 (left: 24)\nAnswer: ((3 * 6) - 2 + 1) +",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * (12 / 3)) * 8 = 24 || Input: 2 3 5 8\nSteps:\n3 + 5 = 8 (left: 2 8 8)\n8 - 2 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (2 + (3 + 5)) * 8 = 48 || There is no way to obtain 24 using the numbers 2, 3, 5, and 8.",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * (12 / 3)) * 8 = 24 || Input: 2 3 5 8\nSteps:\n3 + 5 = 8 (left: 2 8 8)\n8 - 2 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (2 + 3 + 5) * 8 = 48 || There doesn't seem to be a way to obtain 24 using the input numbers 2, 3, 5, and 8.",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 3 * (12 / (12 - 3)) = 24 || Input: 2 3 6 9\n\n6 * 3 = 18 (left: 2 9 18)\n18 - 9 = 9 (left: 2 9)\n9 * 2 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\n\nAnswer: ((6 * 3) - 9) + 6 = 24 || Input: 1 2 3 4\nSteps:\n3 * 4 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 * 1 = 10 (left: 10)\n10 + 10 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((1 * 2) * (3 - 4)) + || (10 + 10) + 4 = 24",
                "12 / 3 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (3 * (12 / 3)) * 8 = 24"
            ]
        },
        "Input": "3 3 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "52": {
        "puzzle": "1 1 4 5",
        "Step 0": {
            "steps": [
                "5 - 4 = 1 (left: 1 1 1)",
                "1 * 1 = 1 (left: 1 4 5)",
                "1 + 4 = 5 (left: 5 4 5)",
                "4 + 1 = 5 (left: 1 4 5)",
                "5 - 1 = 4 (left: 1 4 4)",
                "1 + 4 = 5 (left: 5 4 5)",
                "1 + 4 = 5 (left: 1 5 5)",
                "5 - 4 = 1 (left: 1 1 5)",
                "5 - 4 = 1 (left: 1 1 ",
                "5 - 1 = 4 (left: 1 4 4)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                1.002,
                1.002,
                22.0,
                22.0,
                60.0,
                2.001,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.6",
                "2 <- 0.4",
                "3 <- 0.6",
                "4 <- 0.6",
                "5 <- 0.6",
                "6 <- 0.6",
                "7 <- 0.4",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 5)",
                "1 + 4 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5)",
                "5 - 1 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4)",
                "1 + 4 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5)",
                "1 + 4 = 5 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5 5)",
                "1 + 4 = 5 (left: 1 5 5) || Input: 6 3 9 2",
                "1 + 4 = 5 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5)",
                "5 - 1 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4 4)",
                "5 - 1 = 4 (left: 1 4 4)",
                "5 - 1 = 4 (left: 1 4 5)"
            ],
            "Evaluation": [
                1.002,
                3.0,
                20.0,
                2.001,
                0.003,
                0.003,
                0.003,
                22.0,
                2.001,
                2.001
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- INIT",
                "2 <- 1.1",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 0.5",
                "6 <- INIT",
                "7 <- 0.5",
                "8 <- INIT",
                "9 <- 0.5"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 4 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5)",
                "5 - 4 = 1 (left: 1 1 4)",
                "1 + 4 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 4 / 1 = 4 (left: 4 5)",
                "5 - 4 = 1 (left: 1 1 1)",
                "4 + 1 = 5 (left: 1 4 5)",
                "1 + 4 = 5 (left: 5 4 5) || 4 - 5 = -",
                "4 + 1 = 5 (left: 1 5 5)",
                "1 + 4 = 5 (left: 5 4 5) || 4 * 5 = 20 (left: 20)",
                "5 - 4 = 1 (left: 1 1 1)",
                "1 + 4 = 5 (left: 5 4 5) || 5 / 4 = 1.25 (left: 1.25 5)"
            ],
            "Evaluation": [
                2.001,
                2.001,
                41.0,
                0.003,
                2.001,
                0.003,
                40.001,
                0.003,
                1.002,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.2",
                "2 <- INIT",
                "3 <- 0.6",
                "4 <- 2.4",
                "5 <- 2.6",
                "6 <- 1.7",
                "7 <- 0.6",
                "8 <- INIT",
                "9 <- 2.6"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 5)",
                "1 + 4 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 4 / 1 = 4 (left: 4 5) || 5 / 4 = 1.25 (left: 1.25)",
                "4 - 1 = 3 (left: 1 3 5)",
                "1 + 4 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5)",
                "4 + 1 = 5 (left: 1 4 5) || Possible next steps:",
                "4 + 1 = 5 (left: 1 5 5) || 1 * 5 = 5 (left: 5 5)",
                "5 - 1 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4 4) || 4 / 3 = 1.33 (left: 1.33 4)",
                "1 + 4 = 5 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5)",
                "1 * 1 = 1 (left: 1 4 5)",
                "4 + 1 = 5 (left: 1 5 5) || 1 * 5 = 5 (left: 5 5)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                1.001,
                41.0,
                0.003,
                0.002,
                0.001,
                0.003,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 0.6",
                "2 <- 1.7",
                "3 <- 3.3",
                "4 <- 0.4",
                "5 <- 2.6",
                "6 <- 2.6",
                "7 <- 3.3",
                "8 <- 1.1",
                "9 <- 2.6"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 4 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 4 / 1 = 4 (left: 4 5) || 4 / 5 = 0.8 (left: 0.8)",
                "1 + 4 = 5 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5)",
                "5 - 1 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4 4) || 3 * 4 = 12 (left: 4 12)",
                "1 + 4 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5) || 5 - 4 = 1 (left: 1)",
                "5 - 1 = 4 (left: 1 4 4) || 4 / 1 = 4 (left: 4 4)",
                "4 + 1 = 5 (left: 1 5 5) || Input: 3 7 7 21",
                "4 + 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5)",
                "1 + 4 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5) || 4 * 5 = 20 (left: 20)",
                "1 + 4 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 4 = 1 (left: 1 5)",
                "4 + 1 = 5 (left: 1 5 5) || 1 * 5 = 5 (left: 5 5)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                1.002,
                0.003,
                0.003,
                0.003,
                1.001,
                0.002,
                20.001,
                0.003
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 4.8",
                "2 <- 0.6",
                "3 <- 2.2",
                "4 <- 0.6",
                "5 <- 2.2",
                "6 <- 4.8",
                "7 <- 2.2",
                "8 <- 0.5",
                "9 <- INIT"
            ]
        },
        "Step 5": {
            "steps": [
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4)",
                "1 + 4 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 4 = 1 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "1 + 4 = 5 (left: 1 5 5) || Possible",
                "1 + 4 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 4 / 1 = 4 (left: 4 5) || Input: 10 3",
                "1 + 4 = 5 (left: 1 5 5) || 1 * 5 = 5 (left: 5 5)",
                "1 + 4 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 4 / 1 = 4 (left: 4 5) || 10 + 2 = 12 (left: 12)",
                "1 + 4 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 4 = 1 (left: 1 5) || 5 - 1 = 4 (left: 4)",
                "1 + 4 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 4 / 1 = 4 (left: 4 5) || Input: 10 3",
                "1 + 4 = 5 (left: 5 4 5) || 5 - 4 = 1 (left: 1 5)",
                "Possible next steps:"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                40.0,
                0.003
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 0.5",
                "2 <- 2.6",
                "3 <- 1.9",
                "4 <- 5.0",
                "5 <- 0.6",
                "6 <- 2.6",
                "7 <- 5.0",
                "8 <- 5.0",
                "9 <- 2.2"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 4 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5) || 5 / 4 = 1.25 (left: 1.25)",
                "1 + 4 = 5 (left: 5 4 5) || 5 / 4 = 1.25 (left: 1.25 5)",
                "4 + 1 = 5 (left: 1 5 5) || 1 * 5 = 5 (left: 5 5)",
                "5 - 1 = 4 (left: 1 4 5) || 4 / 1 = 4 (left: 5 4)",
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "1 + 4 = 5 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5)",
                "4 + 1 = 5 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5)",
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4) ",
                "1 + 4 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 4 / 1 = 4 (left: 4 5) || 5 / 4 = 1.25 (left: 1.25)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                1.0,
                0.002,
                0.003,
                0.003,
                0.001,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 4.8",
                "1 <- 0.2",
                "2 <- 2.8",
                "3 <- 5.0",
                "4 <- 0.4",
                "5 <- 4.2",
                "6 <- 2.2",
                "7 <- 0.5",
                "8 <- 2.6",
                "9 <- 0.6"
            ]
        },
        "Step 7": {
            "steps": [
                "1 + 4 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 4 = 1 (left: 1 5) || 5 - 1 = 4 (left: 4)",
                "1 + 4 = 5 (left: 5 4 5) || 10 + 15 = 25 (left:",
                "5 - 4 = 1 (left: 1 1 1) || 9 - 3 = 6 (left: 5 6",
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "5 - 1 = 4 (left: 1 4 4) || Input: 3 5 5",
                "5 - 1 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4 4) || 3 * 4 = 12 (left: 4 12) || 4 + 12 = 16 (left: 16)",
                "1 + 4 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 4 / 1 = 4 (left: 4 5) || 4 * 5 = 20 (left: 20)",
                "1 + 4 = 5 (left: 5 4 5) || 4 * 5 = 20 (left: 5 20)",
                "4 + 1 = 5 (left: 1 5 5) || 5 / 1 = 5 (left: 5 5)",
                "1 + 4 = 5 (left: 1 5 5) || 1 * 5 = 5 (left: 5 5)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.002,
                0.001,
                0.003,
                0.002,
                0.003,
                20.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.8",
                "1 <- 5.8",
                "2 <- 3.2",
                "3 <- 5.8",
                "4 <- 5.8",
                "5 <- 7.7",
                "6 <- 5.8",
                "7 <- 4.8",
                "8 <- 0.6",
                "9 <- 4.6"
            ]
        },
        "Step 8": {
            "steps": [
                "1 + 4 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 4 = 1 (left: 1 5) || 1 + 5 = 6",
                "1 + 4 = 5 (left: 5 4 5) || 5 - 4 = 1 (left: 1 5) || 1 + 5 = 6",
                "4 - 1 = 3 (left: 1 3 5) || Possible",
                "1 + 4 = 5 (left: 5 4 5) || 5 - 4 = 1 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "1 + 4 = 5 (left: 5 4 5) || 5 - 4 = 1 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "1 + 4 = 5 (left: 5 4 5) || 4 * 5 = 20 (left: 5 20) || 5 + 20 = 25 (left: 20 25)",
                "1 + 4 = 5 (left: 5 4 5) || 5 - 4 = 1 (left: 1 5) || 1 + 5 = 6",
                "1 + 4 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 4 = 1 (left: 1 5) || 1 + 5 = 6",
                "1 + 4 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5)",
                "4 + 1 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5) || 5 / 4 = 1.25 (left: 1.25)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.0,
                0.002,
                0.003,
                0.003,
                0.003,
                40.001,
                0.003
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 5.8",
                "2 <- 4.8",
                "3 <- 3.3",
                "4 <- 5.0",
                "5 <- 0.6",
                "6 <- 8.8",
                "7 <- 4.8",
                "8 <- 5.8",
                "9 <- 4.8"
            ]
        },
        "Step 9": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 5) || 1 + 5 = 6 (left: 5 6)",
                "1 + 4 = 5 (left: 5 4 5) || 5 - 4 = 1 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "1 + 4 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 4 = 1 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "1 + 4 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5) || Input: 10 3 7",
                "5 - 4 = 1 (left: 1 1 4) || 4 / 1 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "1 + 4 = 5 (left: 1 5 5) || 1 * 5 = 5 (left: 5 5)",
                "1 + 4 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 4 5) || 5 - 4 = 1 (left: 1)",
                "1 + 4 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 4 = 1 (left: 1 5) || 1 + 5 = 6",
                "1 + 4 = 5 (left: 5 4 5) || 5 - 4 = 1 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "1 + 4 = 5 (left: 1 5 5) || 5 - 1 = 4 (left: 1 4 5) || 5 - 4 = 1 (left: 1 5) || 5 / 1 = 5 (left: 5)"
            ]
        },
        "Input": "1 1 4 5",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "53": {
        "puzzle": "1 6 8 12",
        "Step 0": {
            "steps": [
                "12 - 8 = 4 (left: 1 4 8)",
                "6 / 1 = 6 (left: 6 8 12)",
                "8 - 6 = 2 (left: 1 2 12)",
                "12 - 1 = 11 (left: 6 8 11)",
                "8 - 1 = 7 (left: 7 8 12)",
                "8 - 6 = 2 (left: 1 2 12)",
                "8 - 6 = 2 (left: 1 2 12)",
                "8 / 1 = 8 (left: 8 12 14)",
                "6 / 1 = 6 (left: 6 8 12)",
                "12 - 6 = 6 (left: 1 6 8)"
            ],
            "Evaluation": [
                0.003,
                1.001,
                60.0,
                3.0,
                3.0,
                60.0,
                60.0,
                2.001,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- INIT",
                "4 <- 0.6",
                "5 <- 0.2",
                "6 <- 0.2",
                "7 <- 0.2",
                "8 <- 0.7",
                "9 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "8 - 6 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "8 - 6 = 2 (left: 1 2 12)",
                "6 / 1 = 6 (left: 6 8 12) || 6 * 8 = 48 (left: 48 12)",
                "12 - 8 = 4 (left: 1 4 8)",
                "8 - 6 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 1 = 12 (left:",
                "8 - 6 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "8 - 6 = 2 (left: 1 2 12) || 2 / 12 = 0.16666666666666666 (left: 1 0.166666666",
                "8 / 1 = 8 (left: 8 12 14) || 12 + 14 = 26 (left: 8 26)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                41.0,
                0.002,
                60.0,
                20.001,
                60.0,
                1.002,
                1.002,
                60.0
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 1.0",
                "2 <- 1.6",
                "3 <- 1.4",
                "4 <- 1.6",
                "5 <- 1.1",
                "6 <- 1.2",
                "7 <- 1.4",
                "8 <- 1.4",
                "9 <- 1.9"
            ]
        },
        "Step 2": {
            "steps": [
                "8 - 6 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "8 - 6 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "8 - 6 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "8 - 6 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 1 = 12 (left:",
                "6 / 1 = 6 (left: 6 8 12) || 6 * 8 = 48 (left: 48 12) || 48 + 12 = 60 (left: 60)",
                "8 - 6 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 10 = 0 (left: 0)",
                "8 - 6 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.003,
                0.002,
                40.0,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.1",
                "2 <- 1.9",
                "3 <- 1.4",
                "4 <- 0.6",
                "5 <- 1.1",
                "6 <- 1.1",
                "7 <- 1.1",
                "8 <- 0.6",
                "9 <- 0.6"
            ]
        },
        "Step 3": {
            "steps": [
                "8 - 6 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "8 - 6 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "8 - 6 = 2 (left: 1 2 12) || 1 + 12 = 13 (left:",
                "8 - 6 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "8 - 6 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.003,
                0.003,
                60.0,
                0.002,
                60.0,
                40.001,
                60.0,
                41.0
            ],
            "Resampling": [
                "0 <- 3.6",
                "1 <- 3.4",
                "2 <- 1.0",
                "3 <- 1.9",
                "4 <- 0.5",
                "5 <- 0.6",
                "6 <- 3.0",
                "7 <- 0.2",
                "8 <- 3.7",
                "9 <- 2.5"
            ]
        },
        "Step 4": {
            "steps": [
                "8 - 6 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 + 10 = 11",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "8 - 6 = 2 (left: 1 2 12) || 1 * 12 = 12 (left:",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || Input: 50 10",
                "8 - 6 = 2 (left: 1 2 12) || 12 - 1 = 11 (left: 2 11)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 1 = 12 (left: || 12 / 6 = 2 (left: 2)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                40.0,
                0.003,
                60.0,
                21.0,
                0.002,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 4.4",
                "1 <- 0.2",
                "2 <- 1.2",
                "3 <- 0.5",
                "4 <- 0.2",
                "5 <- 0.5",
                "6 <- 3.7",
                "7 <- 1.6",
                "8 <- 3.1",
                "9 <- 3.4"
            ]
        },
        "Step 5": {
            "steps": [
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 6 = 2 (left: 1 2 12) || 5 * 10 = 50 (left: 5",
                "6 / 1 = 6 (left: 6 8 12) || 6 * 8 = 48 (left: 48 12) || 48 + 12 = 60 (left: 60)",
                "8 - 6 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 6 2)",
                "8 - 6 = 2 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 / 6 = 0.16666666666666666 (left: 0.16666666666666666)",
                "8 - 6 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                60.0,
                2.001,
                60.0,
                0.003,
                0.003,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 1.2",
                "2 <- 2.5",
                "3 <- 5.3",
                "4 <- 1.4",
                "5 <- 5.5",
                "6 <- 3.1",
                "7 <- 1.7",
                "8 <- 3.8",
                "9 <- 5.5"
            ]
        },
        "Step 6": {
            "steps": [
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "6 / 1 = 6 (left: 6 8 12) || 6 * 8 = 48 (left: 48 12) || 48 + 12 = 60 (left: 60)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 1 = 12 (left: || 12 / 1 = 12 (left: 12)",
                "8 - 6 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "8 - 6 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "8 - 6 = 2 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7",
                "8 - 6 = 2 (left: 1 2 12) || 2 / 12 = 0.16666666666666666 (left: 1 0.166666666 || 1 + 0.166666666 = 1.166666666 (left: 1.166666666)",
                "8 - 6 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "8 - 6 = 2 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.001,
                0.001,
                60.0,
                0.003,
                0.0,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 4.4",
                "2 <- 3.4",
                "3 <- 1.9",
                "4 <- 3.8",
                "5 <- 5.5",
                "6 <- 4.2",
                "7 <- 3.6",
                "8 <- 1.2",
                "9 <- 5.3"
            ]
        },
        "Step 7": {
            "steps": [
                "8 - 6 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "8 - 6 = 2 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 1 + 6 = 7",
                "8 - 6 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "8 - 6 = 2 (left: 1 2 12) || 2 / 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "8 - 6 = 2 (left: 1 2 12) || 2 * 12 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (8 - 6) * (1 * 12) = 24",
                "8 - 6 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 1 * 10 = 10 (left: 10) ",
                "6 / 1 = 6 (left: 6 8 12) || 6 * 8 = 48 (left: 48 12) || 48 * 12 = 576 (left: 576)",
                "8 - 6 = 2 (left: 1 2 12) || 12 - 2 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ]
        },
        "Input": "1 6 8 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "54": {
        "puzzle": "8 8 12 12",
        "Step 0": {
            "steps": [
                "12 + 8 = 20 (left: 8 12 20)",
                "8 / 8 = 1 (left: 1 12 12)",
                "8 - 8 = 0 (left: 0 12 12)",
                "8 * 8 = 64 (left: 12 12 64)",
                "12 - 8 = 4 (left: 8 12 4)",
                "8 * 8 = 64 (left: 12 12 64)",
                "8 - 8 = 0 (left: 0 12 12)",
                "12 + 8 = 20 (left: 8 12 20)",
                "12 / 8 = 1.5 (left: 8 ",
                "12 + 8 = 20 (left: 8 12 20)"
            ],
            "Evaluation": [
                21.0,
                0.003,
                60.0,
                2.001,
                21.001,
                1.002,
                60.0,
                2.0,
                0.002,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.6",
                "2 <- 0.6",
                "3 <- 0.2",
                "4 <- 0.4",
                "5 <- 0.2",
                "6 <- 0.4",
                "7 <- 0.6",
                "8 <- INIT",
                "9 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "8 * 8 = 64 (left: 64 12 12)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)",
                "8 - 8 = 0 (left: 0 12 12) || Input: ",
                "8 - 8 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12)",
                "12 - 8 = 4 (left: 8 12 4) || 12 / 3 = 4 (left: 4)",
                "8 - 8 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 1)",
                "12 - 8 = 4 (left: 8 12 4) || 8 * 4 = 32 (left: 32)",
                "8 - 8 = 0 (left: 0 12 12) || 12 - 12 = 0 (left: 0 12)",
                "12 + 8 = 20 (left: 8 12 20)",
                "12 + 8 = 20 (left: 8 12 20) || 20 - 12 = 8 (left: 8 8)"
            ],
            "Evaluation": [
                22.0,
                60.0,
                0.003,
                40.001,
                0.001,
                60.0,
                0.003,
                40.0,
                21.001,
                1.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.2",
                "2 <- 1.5",
                "3 <- 1.0",
                "4 <- 0.7",
                "5 <- 0.2",
                "6 <- 0.6",
                "7 <- 1.8",
                "8 <- 0.7",
                "9 <- 1.5"
            ]
        },
        "Step 2": {
            "steps": [
                "8 - 8 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "8 - 8 = 0 (left: 0 12 12) || Input: 5 ",
                "8 - 8 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "8 * 8 = 64 (left: 64 12 12) || 64 / 12 = 5.33 (left: 5.33 12)",
                "12 + 8 = 20 (left: 8 12 20) || 20 / 1 = 20 (left: 20)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 12 = 144 (left: 12 144)",
                "8 - 8 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12)",
                "12 + 8 = 20 (left: 8 12 20) || 20 / 2 = 10 (left: 10 12)",
                "12 + 8 = 20 (left: 8 12 20) || 20 - 8 = 12 (left: 12 20)",
                "8 - 8 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                1.002,
                0.002,
                0.003,
                20.002,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 1.1",
                "2 <- 0.2",
                "3 <- 1.5",
                "4 <- 1.1",
                "5 <- 0.6",
                "6 <- 0.6",
                "7 <- 1.7",
                "8 <- 1.5",
                "9 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 0 12)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 1 = 12 (left: 12 12)",
                "8 - 8 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 1) || 1 * 0 = 0 (left: 0)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "8 - 8 = 0 (left: 0 12 12) || 12 / 0 = undefined (left: 0 12)",
                "8 - 8 = 0 (left: 0 12 12) || 12 - 12 = 0 (left: 0 12)",
                "8 - 8 = 0 (left: 0 12 12) || 12 - 12 = 0 (left: 0 12) || 0 + 12 = 12",
                "8 - 8 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 1) || Input: 5 10",
                "8 - 8 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)"
            ],
            "Evaluation": [
                20.001,
                0.001,
                60.0,
                0.003,
                0.003,
                20.0,
                20.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 1.3",
                "2 <- 0.0",
                "3 <- 1.0",
                "4 <- 1.7",
                "5 <- 1.7",
                "6 <- 1.7",
                "7 <- 1.1",
                "8 <- 1.1",
                "9 <- 3.2"
            ]
        },
        "Step 4": {
            "steps": [
                "8 - 8 = 0 (left: 0 12 12) || 12 * 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "8 - 8 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 + 8 = 20 (left: 8 12 20) || 20 - 8 = 12 (left: 8 12 20)",
                "8 * 8 = 64 (left: 64 12 12) || 64 + 12 = 76 (left: 76 12 12)",
                "8 - 8 = 0 (left: 0 12 12) || 12 - 12 = 0 (left: 0 12) || 0 + 12 = 12",
                "8 - 8 = 0 (left: 0 12 12) || 12 - 12 = 0 (left: 0 12) || 0 + 12 = 12",
                "8 - 8 = 0 (left: 0 12 12) || 12 - 12 = 0 (left: 0 12) || 0 + 12 = 12",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)"
            ],
            "Evaluation": [
                20.001,
                0.003,
                2.0,
                2.001,
                0.003,
                0.003,
                0.003,
                20.002,
                40.001,
                0.002
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 3.2",
                "2 <- 0.5",
                "3 <- 1.1",
                "4 <- 1.8",
                "5 <- INIT",
                "6 <- 4.7",
                "7 <- 3.0",
                "8 <- 1.5",
                "9 <- 3.0"
            ]
        },
        "Step 5": {
            "steps": [
                "8 - 8 = 0 (left: 0 12 12) || 12 - 12 = 0 (left: 0 12) || 12 - 0 = 12 (left: 0 12)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "8 * 8 = 64 (left: 12 12 64) || 64 - 12 = 52 (left: 12 52)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 + 8 = 20 (left: 8 12 20) || 20 - 12 = 8 (left: 8 20)",
                "12 + 8 = 20 (left: 8 12 20)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 * 12 = 144 (left: 144) || 4 * 4 + 1 = 17 (left: 17)",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "8 - 8 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 0 1) || 1 - 0 = 1 (left: 1)",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 0 12) || 0 + 12 = 12"
            ],
            "Evaluation": [
                41.0,
                40.001,
                1.002,
                0.003,
                1.002,
                22.0,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 5.5",
                "2 <- 4.3",
                "3 <- 3.2",
                "4 <- 3.2",
                "5 <- 3.0",
                "6 <- 5.0",
                "7 <- 1.8",
                "8 <- 0.6",
                "9 <- 4.7"
            ]
        },
        "Step 6": {
            "steps": [
                "8 - 8 = 0 (left: 0 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "12 + 8 = 20 (left: 8 12 20) || 20 - 12 = 8 (left: 8 8)",
                "8 * 8 = 64 (left: 64 12 12) || 64 + 12 = 76 (left: 76 12 12) || 12 * 12 = 144 (left: 144)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "8 - 8 = 0 (left: 0 12 12) || 12 + 0 = 12 (left: 0 12) || 12 * 0 = 0 (left: 0)",
                "8 - 8 = 0 (left: 0 12 12) || 12 - 12 = 0 (left: 0 12) || 12 - 0 = 12 (left: 0 12) || 12 * 0 = 0 (left: 0)",
                "12 + 8 = 20 (left: 8 12 20) || 20 / 12 = 1.66666666667 (left: 8 1.66666666667)",
                "8 - 8 = 0 (left: 0 12 12) || 12 - 12 = 0 (left: 0 12)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 * 12 = 144 (left: 144) || 4 + 4 + 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                2.0,
                1.0,
                0.002
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 5.5",
                "2 <- 5.0",
                "3 <- 5.1",
                "4 <- 0.6",
                "5 <- 4.8",
                "6 <- 5.1",
                "7 <- 6.0",
                "8 <- 3.5",
                "9 <- 6.0"
            ]
        },
        "Step 7": {
            "steps": [
                "12 + 8 = 20 (left: 8 12 20) || 20 - 8 = 12 (left: 8 12 20) || 12 - 8 = 4 (left: 4 20)",
                "12 + 8 = 20 (left: 8 12 20) || 12 / 8 = 1.5 (left: 1.5 20)",
                "8 - 8 = 0 (left: 0 12 12) || 12 - 12 = 0 (left: 0 12) || 12 - 0 = 12 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24)",
                "8 - 8 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 0 12)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 12 + 12 = 24 (left: 24)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (8 - 8) * (12 * 1) = 24",
                "8 - 8 = 0 (left: 0 12 12) || 12 / 0 = undefined (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (8 - 8) * (12 + 12) = 24"
            ],
            "Evaluation": [
                21.0,
                0.003,
                0.002,
                60.0,
                20.0,
                60.0,
                60.0,
                40.001,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 7.5",
                "2 <- 7.5",
                "3 <- 5.0",
                "4 <- 6.0",
                "5 <- 3.2",
                "6 <- 7.9",
                "7 <- 7.3",
                "8 <- 7.5",
                "9 <- 3.2"
            ]
        },
        "Step 8": {
            "steps": [
                "8 - 8 = 0 (left: 0 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (8 - 8) * (12 + 12) = 24",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 12 + 12 = 24 (left: 24) || Answer: (8 - 8) * (12 + 12) = 24",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 12 + 12 = 24 (left: 24) || Answer: (8 - 8) * (12 + 12) = 24",
                "8 - 8 = 0 (left: 0 12 12) || 12 - 12 = 0 (left: 0 12) || 12 - 0 = 12 (left: 0 12) || 0 / 12 = 0 (left: 12)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((8 - 8) * 12) + 12 = 24",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (8 - 8) * (12 + 12) = 24 || Input: 3 4 5 6\nSteps:\n4 + 6 = 10 (left: 3 5 10)\n10 - 5 = 5 (left: 3 5)\n5 * 3 = 15 (left: 15)\n15 + 9 = 24 (left: 24)\nAnswer: ((4 + 6) - 5) * 3 = 24",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 12 + 12 = 24 (left: 24) || Answer: ((8 - 8) * 12) + 12 = 24",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)"
            ],
            "Evaluation": [
                60.0,
                40.001,
                40.001,
                0.003,
                60.0,
                0.003,
                60.0,
                0.003,
                60.0,
                0.001
            ],
            "Resampling": [
                "0 <- 8.0",
                "1 <- 7.6",
                "2 <- 8.8",
                "3 <- 8.6",
                "4 <- 8.0",
                "5 <- 5.1",
                "6 <- 8.6",
                "7 <- 6.0",
                "8 <- 7.6",
                "9 <- 8.4"
            ]
        },
        "Step 9": {
            "steps": [
                "8 - 8 = 0 (left: 0 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (8 - 8) * (12 + 12) = 24 || Input: 2 3 4 6\nSteps:\n4 * 6 = 24 (left: 2 3 24)\n3 + 2 = 5 (left: 5 24)\n5 * 24 = 120 (left: 120)\nAnswer: (2 * 3) * (4 + 6) = 24",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 12 + 12 = 24 (left: 24) || Answer: ((8 - 8) * 12) + 12 = 24 || Input: 3 6 7 9\nSteps:\n6 + 9 = 15 (left: 3 7 15)\n7 - 3 = 4 (left: 4 15)\n4 * 15 = 60 (left: 60)\nAnswer: 3 * (6 + (9 - 7)) = 24",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (8 - 8) * (12 + 12) = 24 || Input: 3 4 5 6\nSteps:\n4 + 6 = 10 (left: 3 5 10)\n10 - 5 = 5 (left: 3 5)\n5 * 3 = 15 (left: 15)\n15 + 9 = 24 (left: 24)\nAnswer: ((4 + 6) - 5) * 3 = 24 || Input: 2 3 4 5\nSteps:\n4 * 5 = 20 (left: 2 3 20)\n3 + 20 = 23 (left: 2 23)\n23 + 2 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: ((4 * 5) + 3) + 2 - 1 = 24",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (8 - 8) * (12 + 12) = 24 || \nInput: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6 24)\n6 - 3 = 3 (left: 3 24)\n3 * 24 = 72 (left: 72)\nAnswer: (3 * 8) * (6 - 3) = 24",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 * 12 = 288 (left: 24 288)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (8 - 8) * (12 + 12) = 24 || Input: 3 4 5 6\nSteps:\n4 + 6 = 10 (left: 3 5 10)\n10 - 5 = 5 (left: 3 5)\n5 * 3 = 15 (left: 15)\n15 + 9 = 24 (left: 24)\nAnswer: ((4 + 6) - 5) * 3 = 24 || Input: 7 7 8 9\nSteps:\n7 + 8 = 15 (left: 7 9 15)\n7 - 9 = -2 (left: -2 15)\n-2 * 15 = -30 (left: -30)\n-30 + 24 = 24 (left: 24)\nAnswer: ((7 + 8) - 9) + 24 = 24",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (8 - 8) * (12 + 12) = 24",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 0 / 24 = 0 (left: 0)",
                "8 - 8 = 0 (left: 0 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((8 - 8) * 12) + 12 = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6 24)\n6 - 3 = 3 (left: 3 24)\n3 * 24 = 72 (left: 72)\nAnswer: (3 * 8) - 6 = 24"
            ]
        },
        "Input": "8 8 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "55": {
        "puzzle": "3 8 11 11",
        "Step 0": {
            "steps": [
                "11 + 3 = 14 (left: 8 11 14)",
                "8 - 3 = 5 (left: 5 11 11)",
                "3 * 8 = 24 (left: 11 11 24)",
                "3 * 8 = 24 (left: 11 11 24)",
                "11 - 3 = 8 (left: 8 11 11)",
                "3 * 8 = 24 (left: 11 11 24)",
                "11 - 3 = 8 (left: 8 11 11)",
                "11 + 3 = 14 (left: 8 11 14)",
                "11 - 3 = 8 (left: 8 ",
                "11 - 8 = 3 (left: 3 11 11)"
            ],
            "Evaluation": [
                2.001,
                21.001,
                1.002,
                0.003,
                2.001,
                2.001,
                1.002,
                1.002,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.9",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- INIT",
                "5 <- 0.1",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "8 / 3 = 2.66667 (left: 2.66667 11 11)",
                "11 - 8 = 3 (left: 3 11 11) || 3 * 11 = 33 (left: 11 33)",
                "11 - 3 = 8 (left: 8 11 11)",
                "8 - 3 = 5 (left: 5 11 11) || 11 / 5 = 2.2 (left: 2.2 11)",
                "3 * 8 = 24 (left: 11 11 24)",
                "8 - 3 = 5 (left: 5 11 11) || 11 - 5 = 6 (left: 6 11)",
                "11 - 8 = 3 (left: 3 11 11)",
                "8 - 3 = 5 (left: 5 ",
                "11 - 3 = 8 (left: 8 11 11)",
                "11 - 8 = 3 (left: 3 11 11)"
            ],
            "Evaluation": [
                22.0,
                0.003,
                1.002,
                1.001,
                1.002,
                20.002,
                1.002,
                0.001,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.9",
                "2 <- 1.0",
                "3 <- 0.1",
                "4 <- 1.0",
                "5 <- 0.0",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- 0.1",
                "9 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "8 - 3 = 5 (left: 5 11 11)",
                "11 - 8 = 3 (left: 3 11 11) || 11 * 3 = 33 (left: 33 11)",
                "8 / 3 = 2.66667 (left: 2.66667 11 11) || 11 / 11 = 1 (left: 1)",
                "8 - 3 = 5 (left: 5 11 11) || Input: 3 7 7 13",
                "8 / 3 = 2.66667 (left: 2.66667 11 11) || 2.66667 * 11 = 29.33337 (left: 11 29.33337)",
                "11 + 3 = 14 (left: 8 11 14) || 11 / 8 = 1.375 (left: 1.375 14)",
                "11 - 3 = 8 (left: 8 11 11)",
                "11 / 3 = 3 (left: 3 11 11)",
                "8 - 3 = 5 (left: 5 11 11) || 11 / 5 = 2.2 (left: 2.2 11 11)",
                "8 - 3 = 5 (left: 5 11 11) || 3 + 9 = 12 (left: 9 12)"
            ],
            "Evaluation": [
                3.0,
                0.001,
                0.003,
                0.003,
                1.001,
                2.0,
                1.002,
                1.002,
                3.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- 0.1",
                "4 <- 2.0",
                "5 <- 0.5",
                "6 <- 2.5",
                "7 <- 1.5",
                "8 <- 0.9",
                "9 <- 0.1"
            ]
        },
        "Step 3": {
            "steps": [
                "8 / 3 = 2.66667 (left: 2.66667 11 11) || 11 - 2.66667 = 8.33333 (left: 8.33333 11 11)",
                "3 * 8 = 24 (left: 11 11 24)",
                "8 - 3 = 5 (left: 5 11 11) || 9 - 7 = 2 (",
                "8 - 3 = 5 (left: 5 11 11) || 11 - 5 = 6 (left: 6 11 11)",
                "8 - 3 = 5 (left: 5 11 11) || 3 + 9 = 12 (left: 9 12)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24)",
                "11 + 3 = 14 (left: 8 11 14) || 11 / 8 = 1.375 (left: 1.375 14) || 14 - 1.375 = 12.625 (left: 12.625)",
                "8 - 3 = 5 (left: 5 11 11) || 11 - 5 = 6 (left: 6 11) || 6 * 11 = 66 (left: 66)",
                "11 - 8 = 3 (left: 3 11 11) || 11 / 3 = 3.67 (left: 3.67 11)",
                "8 - 3 = 5 (left: 5 11 11) || 11 * 5 = 55 (left: 11 11 55)"
            ],
            "Evaluation": [
                3.0,
                0.003,
                0.003,
                22.0,
                0.003,
                20.002,
                0.003,
                0.003,
                0.002,
                41.0
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 1.5",
                "2 <- 3.5",
                "3 <- INIT",
                "4 <- 3.9",
                "5 <- INIT",
                "6 <- 3.5",
                "7 <- 0.1",
                "8 <- 3.9",
                "9 <- 2.6"
            ]
        },
        "Step 4": {
            "steps": [
                "8 - 3 = 5 (left: 5 11 11) || 11 - 5 = 6 (left: 6 11 11) || 11 - 6 = 5 (left: 5 11)",
                "8 - 3 = 5 (left: 5 11 11) || 11 - 5 = 6 (left: 6 11) || 11 / ",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "11 + 3 = 14 (left: 8 11 14)",
                "8 - 3 = 5 (left: 5 11 11) || 11 * 5 = 55 (left: 11 11 55) || Possible next steps:",
                "3 * 8 = 24 (left: 24 11 11)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 24 - 11 = 13 (left: 0 13)",
                "8 - 3 = 5 (left: 5 11 11) || 11 - 5 = 6 (left: 6 11)",
                "8 - 3 = 5 (left: 5 11 11) || 11 * 5 = 55 (left: 11 11 55) || 11 / 11 = 1 (left: 1 11 55)",
                "11 - 3 = 8 (left: 8 11 11) || 8 - 11 = -3 (left: -3 11)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                21.001,
                0.003,
                41.0,
                0.0,
                1.002,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 3.5",
                "2 <- 4.5",
                "3 <- 4.3",
                "4 <- INIT",
                "5 <- 4.5",
                "6 <- 4.3",
                "7 <- 3.9",
                "8 <- 4.3",
                "9 <- 4.5"
            ]
        },
        "Step 5": {
            "steps": [
                "11 - 3 = 8 (left: 8 11 11) || 11 / 8 = 1.375 (left: 1.375 11)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 - 0 = 11 (left: 11 24)",
                "3 * 8 = 24 (left: 24 11 11) || 24 - 11 = 13 (left: 13 11 11)",
                "11 + 3 = 14 (left: 8 11 14) || 11 / 8 = 1.375 (left: 1.375 14)",
                "3 * 8 = 24 (left: 11 11 24)",
                "3 * 8 = 24 (left: 24 11 11) || 11 - 11 = 0 (left: 24 0)",
                "11 + 3 = 14 (left: 8 11 14) || 11 - 8 = 3 (left: 3 14)",
                "8 - 3 = 5 (left: 5 11 11) || 11 * 5 = 55 (left: 11 11 55) || 11 / 11 = 1 (left: 1 11 55)",
                "11 + 3 = 14 (left: 8 11 14) || 14 - 8 = 6 (left: 6 14)",
                "3 * 8 = 24 (left: 24 11 11) || 24 - 11 = 13 (left: 13 11 11)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                60.0,
                1.001,
                0.003,
                60.0,
                0.003,
                2.001,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 1.0",
                "2 <- 5.2",
                "3 <- 5.5",
                "4 <- 4.5",
                "5 <- 5.5",
                "6 <- 5.9",
                "7 <- 5.2",
                "8 <- 3.5",
                "9 <- 5.5"
            ]
        },
        "Step 6": {
            "steps": [
                "3 * 8 = 24 (left: 24 11 11) || 24 - 11 = 13 (left: 13 11 11) || 13 * 11 = 143 (left: 11 11 143)",
                "8 / 3 = 2.66667 (left: 2.66667 11 11) || 2.66667 * 11 = 29.33337 (left: 11 29.33337)",
                "3 * 8 = 24 (left: 24 11 11) || 24 - 11 = 13 (left: 13 11 11) || 13 - 11 = 2 (left: 2 11)",
                "3 * 8 = 24 (left: 24 11 11) || 11 - 11 = 0 (left: 24 0) || 24 * 0 = 0 (left: 0)",
                "3 * 8 = 24 (left: 24 11 11) || 24 - 11 = 13 (left: 13 11)",
                "3 * 8 = 24 (left: 24 11 11) || 11 - 11 = 0 (left: 24 0) || 24 + 0 = 24",
                "3 * 8 = 24 (left: 24 11 11) || 24 - 11 = 13 (left: 13 11 11) || 13 / 11 = 1.18181818182 (left: 1.18181818182 11)",
                "3 * 8 = 24 (left: 24 11 11) || 24 - 11 = 13 (left: 13 11 11) || 11 - 11 = 0 (left: 13 0)",
                "3 * 8 = 24 (left: 11 11 24) || 11 - 11 = 0 (left: 0 11 24) || 11 + 24 = 35 (left: 0 11 35)",
                "3 * 8 = 24 (left: 24 11 11) || 11 - 11 = 0 (left: 24 0) || 24 + 0 = 24"
            ],
            "Evaluation": [
                20.001,
                1.001,
                1.002,
                0.003,
                60.0,
                20.002,
                2.0,
                0.003,
                0.003,
                20.002
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 5.2",
                "2 <- 5.2",
                "3 <- 3.9",
                "4 <- 5.5",
                "5 <- 6.4",
                "6 <- 5.9",
                "7 <- 6.4",
                "8 <- 4.3",
                "9 <- 3.3"
            ]
        },
        "Step 7": {
            "steps": [
                "3 * 8 = 24 (left: 24 11 11) || 24 - 11 = 13 (left: 13 11 11) || 13 * 11 = 143 (left: 11 11 143) || 11 * 11 = 121 (left: 121 143)",
                "3 * 8 = 24 (left: 24 11 11) || 24 - 11 = 13 (left: 13 11 11) || 13 / 11 = 1.1818181818181819 (left: 1.1818181818181819 11 11)",
                "3 * 8 = 24 (left: 24 11 11) || 24 - 11 = 13 (left: 13 11 11) || 13 * 11 = 143 (left: 11 11 143)",
                "8 - 3 = 5 (left: 5 11 11) || 11 * 5 = 55 (left: 11 11 55) || 55 / 11 = 5 (left: 5 11)",
                "3 * 8 = 24 (left: 24 11 11) || 11 - 11 = 0 (left: 24 0) || 24 / 0 is undefined as division by zero is not possible.",
                "3 * 8 = 24 (left: 24 11 11) || 24 - 11 = 13 (left: 13 11) || 13 / 11 = 1.1818181818181819 (left: 1.1818181818181819)",
                "3 * 8 = 24 (left: 24 11 11) || 24 - 11 = 13 (left: 13 11 11) || 13 * 11 = 143 (left: 11 11 143)",
                "3 * 8 = 24 (left: 24 11 11) || 24 - 11 = 13 (left: 13 11) || 13 * 11 = 143 (left: 143)",
                "11 + 3 = 14 (left: 8 11 14) || 11 / 8 = 1.375 (left: 1.375 14)",
                "8 - 3 = 5 (left: 5 11 11) || 11 - 5 = 6 (left: 6 11 11) || 11 * 6 = 66 (left: 11 11 66)"
            ],
            "Evaluation": [
                0.001,
                1.001,
                21.001,
                20.001,
                0.003,
                0.003,
                2.001,
                0.003,
                1.001,
                2.001
            ],
            "Resampling": [
                "0 <- 5.5",
                "1 <- 4.3",
                "2 <- 5.9",
                "3 <- 7.3",
                "4 <- 5.5",
                "5 <- 6.4",
                "6 <- 7.2",
                "7 <- 0.1",
                "8 <- 7.2",
                "9 <- 5.2"
            ]
        },
        "Step 8": {
            "steps": [
                "3 * 8 = 24 (left: 24 11 11) || 11 - 11 = 0 (left: 24 0) || 24 - 0 = 24 (left: 24) ",
                "11 + 3 = 14 (left: 8 11 14) || 8 * 11 = 88 (left: 14 88)",
                "3 * 8 = 24 (left: 24 11 11) || 24 - 11 = 13 (left: 13 11 11) || 13 / 11 = 1.1818181818181819 (left: 1.1818181818181819 11)",
                "8 - 3 = 5 (left: 5 11 11) || 11 * 5 = 55 (left: 11 11 55) || 55 / 11 = 5 (left: 5 11) || 5 * 11 = 55 (left: 55)",
                "3 * 8 = 24 (left: 24 11 11) || 11 - 11 = 0 (left: 24 0) || 24 * 0 = 0 (left: 0 0)",
                "3 * 8 = 24 (left: 24 11 11) || 24 - 11 = 13 (left: 13 11) || 13 / 11 = 1.1818181818181819 (left: 1.1818181818181819)",
                "3 * 8 = 24 (left: 24 11 11) || 24 - 11 = 13 (left: 13 11 11) || 13 * 11 = 143 (left: 11 11 143) || 11 * 11 = 121 (left: 121 143)",
                "8 - 3 = 5 (left: 5 11 11) || Input: 3 9 7",
                "3 * 8 = 24 (left: 24 11 11) || 24 - 11 = 13 (left: 13 11 11) || 13 * 11 = 143 (left: 11 11 143) || 11 / 11 = 1 (left: 1 11 143)",
                "3 * 8 = 24 (left: 24 11 11) || 24 - 11 = 13 (left: 13 11 11) || 11 + 11 = 22 (left: 11 22)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                1.0,
                0.002,
                40.001,
                0.003,
                20.001,
                0.003,
                20.001,
                0.003
            ],
            "Resampling": [
                "0 <- 8.4",
                "1 <- 8.6",
                "2 <- 4.5",
                "3 <- 6.4",
                "4 <- 6.4",
                "5 <- 8.0",
                "6 <- 8.0",
                "7 <- 8.4",
                "8 <- 6.9",
                "9 <- 5.9"
            ]
        },
        "Step 9": {
            "steps": [
                "3 * 8 = 24 (left: 24 11 11) || 11 - 11 = 0 (left: 24 0) || 24 * 0 = 0 (left: 0 0) || There are no possible next steps with input 0 0.",
                "3 * 8 = 24 (left: 24 11 11) || 24 - 11 = 13 (left: 13 11 11) || 13 * 11 = 143 (left: 11 11 143) || 11 * 11 = 121 (left: 121 143) || 121 / 143 = 0.846 (left: 0.846)",
                "3 * 8 = 24 (left: 24 11 11) || 24 * 11 = 264 (left: 264 11)",
                "3 * 8 = 24 (left: 24 11 11) || 24 - 11 = 13 (left: 13 11) || 11 + 13 = 24 (left: 24)",
                "3 * 8 = 24 (left: 24 11 11) || 24 - 11 = 13 (left: 13 11) || 13 / 11 = 1.1818181818181819 (left: 1.1818181818181819)",
                "3 * 8 = 24 (left: 24 11 11) || 11 - 11 = 0 (left: 24 0) || 24 - 0 = 24 (left: 24)  || Answer: (3 * 8) - (11 - 11) = 24",
                "3 * 8 = 24 (left: 24 11 11) || 11 - 11 = 0 (left: 24 0) || 24 - 0 = 24 (left: 24)  || Answer: (3 * 8) - (11 - 11) = 24",
                "3 * 8 = 24 (left: 24 11 11) || 11 - 11 = 0 (left: 24 0) || 24 * 0 = 0 (left: 0 0) || There are no possible next steps with an input of 0 0.",
                "3 * 8 = 24 (left: 24 11 11) || 11 - 11 = 0 (left: 24 0) || 24 + 0 = 24 || There are no possible next steps as the equation has been solved and the result is 24.",
                "3 * 8 = 24 (left: 24 11 11) || 24 - 11 = 13 (left: 13 11 11) || 13 / 11 = 1.1818181818181819 (left: 1 11 11)"
            ]
        },
        "Input": "3 8 11 11",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "56": {
        "puzzle": "5 6 12 12",
        "Step 0": {
            "steps": [
                "12 - 5 = 7 (left: 7 6 12)",
                "6 / 5 = 1.2 (left: 1.2 6 12)",
                "12 / 6 = 2 (left: 5 2 12)",
                "5 * 6 = 30 (left: 12 12 30)",
                "12 / 6 = 2 (left: 5 2 12)",
                "12 - 5 = 7 (left: 7 12 12)",
                "12 - 6 = 6 (left: 5 6 6)",
                "12 + 5 = 17 (left: 6 12 17)",
                "12 - 6 = 6 (left: ",
                "12 - 5 = 7 (left: 7 6 12)"
            ],
            "Evaluation": [
                2.001,
                3.0,
                3.0,
                1.002,
                3.0,
                1.002,
                22.0,
                2.001,
                0.0,
                2.0
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- INIT",
                "2 <- 0.3",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 0.7",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 6 = 6 (left: 5 6 6) || 6 * 5 = 30 (left: 30)",
                "12 / 5 = 2.4 (left: 2.4 6 12)",
                "5 * 6 = 30 (left: 12 12 30) || 30 - 12 = 18 (left: 12 18)",
                "12 - 5 = 7 (left: 7 6 12)",
                "12 - 5 = 7 (left: 7 6 12)",
                "12 - 5 = 7 (left: 7 6 12)",
                "12 + 5 = 17 (left: 6 12 17) || 6 * 2 = 12 (left: 12 17)",
                "12 - 6 = 6 (left: 5 6 ",
                "12 - 5 = 7 (left: 7 6 12)",
                "12 / 5 = 2.4 (left: 2 12 12)"
            ],
            "Evaluation": [
                0.002,
                1.001,
                0.003,
                22.0,
                2.001,
                2.001,
                0.003,
                0.0,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.6",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.6",
                "5 <- INIT",
                "6 <- 0.6",
                "7 <- INIT",
                "8 <- 1.3",
                "9 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "6 * 5 = 30 (left: 30 12 12)",
                "12 - 6 = 6 (left: 5 6 6) || 5 * 6 = 30 (left: 30)",
                "12 / 5 = 2.4 (left: 6 2.4 12)",
                "12 - 5 = 7 (left: 7 6 12)",
                "12 - 6 = 6 (left: 5 6 6) || 6 / 5 = 1.2 (left: 1.2 6)",
                "12 - 6 = 6 (left: 5 6 6)",
                "12 - 6 = 6 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6)",
                "12 - 5 = 7 (left: ",
                "12 - 5 = 7 (left: 7 6 12) || 12 - 6 = 6 (left: 7 6)",
                "12 - 5 = 7 (left: 7 6 12) || 7 * 6 = 42 (left: 42 12)"
            ],
            "Evaluation": [
                2.001,
                0.003,
                3.0,
                3.0,
                0.002,
                3.0,
                60.0,
                0.0,
                0.003,
                20.001
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 2.6",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 2.9",
                "5 <- INIT",
                "6 <- 0.5",
                "7 <- 0.6",
                "8 <- 2.9",
                "9 <- 0.6"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 6 = 6 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "12 - 6 = 6 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "12 / 6 = 2 (left: 5 2 12)",
                "12 - 5 = 7 (left: 7 6 12)",
                "12 - 5 = 7 (left: 7 6 12) || 7 * 6 = 42 (left: 42 12) || 42 * 12 = 504 (left: 504)",
                "12 - 6 = 6 (left: 5 6 12)",
                "12 - 5 = 7 (left: 7 12 12) || 12 - 7 = 5 (left: 5 12)",
                "12 - 6 = 6 (left: 5 6 6) || 6 / 6 = 1 (left: 1 1)",
                "12 - 5 = 7 (left: 7 6 12) || 7 * 6 = 42 (left: 42 12) || 42 / 12 = 3.5 (left: 3.5)",
                "12 - 6 = 6 (left: 5 6 6) || 6 + 5 = 11 (left: 5 11)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                3.0,
                1.002,
                0.003,
                22.0,
                1.002,
                0.003,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 3.5",
                "1 <- 2.6",
                "2 <- 3.5",
                "3 <- 2.6",
                "4 <- 3.5",
                "5 <- 3.5",
                "6 <- 2.6",
                "7 <- 2.6",
                "8 <- 2.9",
                "9 <- 2.9"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 6 = 6 (left: 5 6 12) || 6 * 5 = 30 (left: 30 12)",
                "12 - 6 = 6 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 9 / 3 = 3 (left: 3 27)",
                "12 - 6 = 6 (left: 5 6 12) || 6",
                "12 - 6 = 6 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "12 - 6 = 6 (left: 5 6 12) || 12 - 5 = 7 (left: 7 6)",
                "12 - 6 = 6 (left: 5 6 12) || 5 * 6 = 30 (left: 30 12)",
                "12 - 6 = 6 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "12 - 6 = 6 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "12 - 5 = 7 (left: 7 6 12) || 7 * 6 = 42 (left: 42 12) || 42 / 12 = 3.5 (left: 3.5)",
                "12 - 5 = 7 (left: 7 6 12) || 7 * 6 = 42 (left: 42 12) || 42 / 12 = 3.5 (left: 3.5)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                0.001,
                0.002,
                0.003,
                0.002,
                0.003,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 1.5",
                "2 <- 2.6",
                "3 <- 2.6",
                "4 <- 1.3",
                "5 <- 2.6",
                "6 <- 1.3",
                "7 <- 1.3",
                "8 <- 2.9",
                "9 <- 0.1"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 5 = 7 (left: 7 6 12) || 7 * 6 = 42 (left: 42 12)",
                "12 - 5 = 7 (left: 7 6 12) || 7 - 6 = 1 (left: 1 18)",
                "12 - 6 = 6 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 6 = 6 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "12 - 5 = 7 (left: 7 6 12) || 7 * 6 = 42 (left: 42 12)",
                "12 - 6 = 6 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 5 = 7 (left: 7 6 12) || 6 * 12 = 72 (left: 7 72)",
                "12 - 5 = 7 (left: 7 6 12) || 12 / 6 = 2 (left: 7 2)",
                "12 - 5 = 7 (left: 7 6 12) || 7 * 6 = 42 (left: 42 12) || 42 - 12 = 30 (left: 30)",
                "6 / 5 = 1.2 (left: 1.2 6 12) || 12 - 6 = 6 (left: 1.2 6 12)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                1.001,
                0.002,
                3.0
            ],
            "Resampling": [
                "0 <- 3.5",
                "1 <- 2.6",
                "2 <- 0.0",
                "3 <- 2.6",
                "4 <- 2.9",
                "5 <- 3.5",
                "6 <- 1.3",
                "7 <- INIT",
                "8 <- 3.5",
                "9 <- 2.9"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 6 = 6 (left: 5 6 12) || 6 * 5 = 30 (left: 30 12)",
                "12 - 6 = 6 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "12 - 5 = 7 (left: 7 6 12) || 7 * 6 = 42 (left: 42 12)",
                "12 - 6 = 6 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "12 - 5 = 7 (left: 7 6 12) || 7 * 6 = 42 (left: 42 12) || 42 * 12 = 504 (left: 504)",
                "12 - 6 = 6 (left: 5 6 12) || 6 * 5 = 30 (left: 30 12)",
                "12 - 5 = 7 (left: 7 6 12) || 7 / 6 = 1.1667 (left: 1.1667 12)",
                "12 - 6 = 6 (left: ",
                "12 - 6 = 6 (left: 5 6 12) || 6 - 5 = 1 (left: 1 12)",
                "12 - 5 = 7 (left: 7 6 12) || 7 * 6 = 42 (left: 42 12) || 42 / 12 = 3.5 (left: 3.5)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.002,
                0.003,
                0.003,
                1.001,
                0.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 1.5",
                "2 <- 2.6",
                "3 <- 3.5",
                "4 <- INIT",
                "5 <- 2.9",
                "6 <- 2.6",
                "7 <- 2.6",
                "8 <- 2.6",
                "9 <- 0.6"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 6 = 6 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 5 = 7 (left: 7 6 12) || 12 - 7 = 5 (left: 5 12)",
                "12 - 6 = 6 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 1 + 6 = 7",
                "12 - 6 = 6 (left: 5 6 12) || 5 * 6 = 30 (left: 30 12)",
                "12 - 6 = 6 (left: 5 6 6)",
                "12 - 5 = 7 (left: 7 6 12) || 7 * 6 = 42 (left: 42 12) || 42 / 12 = 3.5 (left: 3.5)",
                "12 - 6 = 6 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "12 - 6 = 6 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 6 = 6 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 6 = 6 (left: 5 6 6) || 5 * 6 = 30 (left: 30)"
            ],
            "Evaluation": [
                0.001,
                0.001,
                0.003,
                1.002,
                22.0,
                0.0,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 7.4",
                "1 <- 2.3",
                "2 <- 3.5",
                "3 <- 2.6",
                "4 <- 2.6",
                "5 <- 3.5",
                "6 <- 0.6",
                "7 <- 2.6",
                "8 <- 2.9",
                "9 <- 1.3"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 6 = 6 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6)",
                "12 - 5 = 7 (left: 7 6 12) || 6 + 12 = 18 (left: 7 18)",
                "12 - 6 = 6 (left: 5 6 12) || 6 * 5 = 30 (left: 30 12)",
                "12 - 6 = 6 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "12 - 6 = 6 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 6 = 6 (left: 5 6 12) || 12 - 6 = 6 (left:",
                "12 - 6 = 6 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6)",
                "12 - 6 = 6 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "12 - 5 = 7 (left: 7 6 12) || 7 * 6 = 42 (left: 42 12) || 42 * 12 = 504 (left: 504)",
                "12 - 5 = 7 (left: 7 6 12) || 7 * 12 = 84 (left: 84)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                0.003,
                0.003,
                1.0,
                60.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 8.6",
                "1 <- 8.6",
                "2 <- 8.0",
                "3 <- 8.6",
                "4 <- 2.6",
                "5 <- 1.5",
                "6 <- 8.6",
                "7 <- 8.0",
                "8 <- 8.6",
                "9 <- 8.0"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 6 = 6 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "12 - 6 = 6 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 6 = 6 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 1 + 6 = 7",
                "12 - 6 = 6 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "12 - 6 = 6 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "12 - 5 = 7 (left: 7 6 12) || 6 / 7 = 0.857142",
                "12 - 6 = 6 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "12 - 6 = 6 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 1 + 6 = 7",
                "12 - 6 = 6 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 6 - 1 = 5",
                "12 - 6 = 6 (left: 5 6 6) || 6 - 5 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ]
        },
        "Input": "5 6 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "57": {
        "puzzle": "11 12 12 12",
        "Step 0": {
            "steps": [
                "12 + 11 = 23 (left: 12 23 12)",
                "12 / 11 = 1.0909090909 (left: 1.0909090909 12 12)",
                "11 * 12 = 132 (left: 12 12 132)",
                "12 * 12 = 144 (left: 12 12 144)",
                "12 + 11 = 23 (left: 12 23 12)",
                "12 * 11 = 132 (left: 12 12 132)",
                "11 * 12 = 132 (left: 12 12 132)",
                "12 - 11 = 1 (left: 1 12 12)",
                "11 * 12 = 132 (left: 12 12 132)",
                "12 - 11 = 1 (left: 1 12 12)"
            ],
            "Evaluation": [
                2.001,
                0.003,
                0.002,
                60.0,
                1.001,
                0.003,
                0.003,
                22.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 0.7",
                "2 <- 0.3",
                "3 <- 0.3",
                "4 <- 0.3",
                "5 <- 0.3",
                "6 <- 0.7",
                "7 <- 0.3",
                "8 <- 0.3",
                "9 <- 0.7"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144)",
                "12 * 12 = 144 (left: 12 12 144) || 12 / 12 = 1 (left: 1 144)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 144 = 156 (left: 12 156)",
                "12 - 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "12 * 12 = 144 (left: 12 12 144) || 12 / 12 = 1 (left: 1 12 144)",
                "12 * 12 = 144 (left: 12 12 144) || 12 / 12 = 1 (left: 1 12 144)",
                "12 - 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                60.0,
                40.001,
                60.0,
                20.002,
                40.001,
                0.002,
                40.001,
                40.001,
                20.002,
                40.001
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.2",
                "2 <- 1.0",
                "3 <- 1.3",
                "4 <- 1.2",
                "5 <- 1.4",
                "6 <- 0.3",
                "7 <- 1.2",
                "8 <- 1.3",
                "9 <- 1.9"
            ]
        },
        "Step 2": {
            "steps": [
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 - 24 = 120 (left: 120)",
                "12 - 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 * 12 = 144 (left: 12 12 144) || 12 / 12 = 1 (left: 1 144) || 144 / 1 = 144 (left: 144)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 - 24 = 120 (left: 120)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 * 12 = 144 (left: 12 12 144) || 12 / 12 = 1 (left: 1 144)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 24 - 120 = -96 (left: -96 144)",
                "12 * 12 = 144 (left: 12 12 144) || 12 / 12 = 1 (left: 1 144) || 144 * 1 = 144 (left: 1 144)",
                "12 - 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.001,
                0.001,
                0.0,
                20.002,
                40.001,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 0.3",
                "2 <- 0.3",
                "3 <- 1.1",
                "4 <- INIT",
                "5 <- 1.2",
                "6 <- 1.2",
                "7 <- 0.3",
                "8 <- 0.4",
                "9 <- 0.7"
            ]
        },
        "Step 3": {
            "steps": [
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 24 * 144 = 3456 (left: 3456)",
                "12 * 12 = 144 (left: 12 12 144) || 12 - 12 = 0 (left: 0 12 144)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 - 12 = 0 (left: 11 0 12)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 24 / 144 = 0.16666666667 (left: 0.16666666667)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 / 24 = 6 (left: 6)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144)",
                "12 + 11 = 23 (left: 12 23 12) || 12 * 23 = 276 (left: 276 12)",
                "12 - 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.003,
                2.001,
                21.001,
                0.003,
                2.001,
                0.003,
                0.003,
                40.001,
                1.0,
                60.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 3.2",
                "2 <- 1.4",
                "3 <- 2.8",
                "4 <- 0.3",
                "5 <- 1.1",
                "6 <- 3.9",
                "7 <- 1.6",
                "8 <- INIT",
                "9 <- 3.9"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 11 = 1 (left: 1 12 12)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 * 12 = 144 (left: 12 12 144) || 12 / 12 = 1 (left: 1 144) || 144 * 1 = 144 (left: 1 144) || 144 / 1 = 144 (left: 144 144)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 - 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 - 11 = 1 (left: 1 12 12)",
                "12 - 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.002,
                20.002,
                0.003,
                0.003,
                0.003,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.2",
                "2 <- 4.4",
                "3 <- 2.8",
                "4 <- 1.1",
                "5 <- 1.2",
                "6 <- 2.8",
                "7 <- 1.0",
                "8 <- 2.8",
                "9 <- 1.3"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 - 24 = 120 (left: 120)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 * 12 = 144 (left: 12 12 144) || 12 / 12 = 1 (left: 1 144) || 144 * 1 = 144 (left: 1 144) || 144 / 1 = 144 (left: 144)",
                "12 - 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 24 / 24 = 1 (left: 1)",
                "12 * 12 = 144 (left: 12 12 144) || 12 / 12 = 1 (left: 1 144) || 144 * 1 = 144 (left: 1 144) || 144 - 1 = 143 (left: 1)",
                "12 - 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 * 12 = 144 (left: 12 12 144) || 12 / 12 = 1 (left: 1 144) || 144 * 1 = 144 (left: 1 144) || 144 - 1 = 143 (left: 144)",
                "12 * 12 = 144 (left: 12 12 144) || 12 / 12 = 1 (left: 1 144) || 144 - 1 = 143 (left: 143 144)"
            ],
            "Evaluation": [
                40.001,
                0.003,
                60.0,
                20.0,
                0.003,
                0.003,
                0.001,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 1.0",
                "2 <- 0.3",
                "3 <- 5.0",
                "4 <- 3.9",
                "5 <- 5.2",
                "6 <- 2.6",
                "7 <- 5.2",
                "8 <- 1.0",
                "9 <- 1.7"
            ]
        },
        "Step 6": {
            "steps": [
                "12 * 12 = 144 (left: 12 12 144) || 12 * 12 = 144 (left: 12 144)",
                "12 - 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 * 12 = 144 (left: 12 12 144) || 12 * 12 = 144 (left: 12 144)",
                "12 - 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1)",
                "12 - 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2 24)",
                "12 * 12 = 144 (left: 12 12 144) || 12 / 12 = 1 (left: 1 144) || 144 - 1 = 143 (left: 143)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24)",
                "12 - 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 * 12 = 144 (left: 12 12 144) || 12 / 12 = 1 (left: 1 12 144) || 144 / 12 = 12 (left: 1 12)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.002,
                0.002,
                40.001,
                0.003,
                60.0,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 1.1",
                "2 <- 1.2",
                "3 <- 6.7",
                "4 <- 1.0",
                "5 <- 5.0",
                "6 <- 1.8",
                "7 <- 6.5",
                "8 <- 6.5",
                "9 <- 5.0"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 - 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 24 + 144 = 168 (left: 168)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 24 / 0 = undefined (left: 0 24)",
                "12 - 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 - 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || Input: 12 * 12 = 144",
                "12 * 12 = 144 (left: 12 12 144) || 12 / 12 = 1 (left: 1 12 144) || 144 / 12 = 12 (left: 1 12 12)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2 24) || 24 - 2 = 22 (left: 22)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2 24) || 24 - 2 = 22 (left: 22)",
                "12 - 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                60.0,
                0.002,
                0.003,
                0.003,
                20.001,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 3.9",
                "1 <- 1.6",
                "2 <- 6.5",
                "3 <- 3.9",
                "4 <- 7.3",
                "5 <- 5.0",
                "6 <- 0.3",
                "7 <- 1.2",
                "8 <- 2.6",
                "9 <- 1.2"
            ]
        },
        "Step 8": {
            "steps": [
                "12 - 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 - 11 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2 24) || 2 + 24 = 26 (left: 26)",
                "12 - 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 24 / 0 = undefined (left: 0 24) || 24 - 0 = 24 (left: 24)",
                "12 - 11 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2 24)",
                "12 * 12 = 144 (left: 12 12 144) || 12 / 12 = 1 (left: 1 12 144)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 / 24 = 6 (left: 6)",
                "12 * 12 = 144 (left: 12 12 144) || 12 / 12 = 1 (left: 1 144) || 144 - 1 = 143 (left: 144)",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || 144 - 24 = 120 (left: 120)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.003,
                40.0,
                0.003,
                20.002,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 7.3",
                "1 <- 2.5",
                "2 <- 8.6",
                "3 <- 8.4",
                "4 <- 3.2",
                "5 <- 8.4",
                "6 <- 1.2",
                "7 <- 2.6",
                "8 <- 6.7",
                "9 <- 8.4"
            ]
        },
        "Step 9": {
            "steps": [
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 24 / 0 = undefined (left: 0 24) || 24 / 0 = undefined",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 12 = 144 (left: 24 144)",
                "12 * 12 = 144 (left: 12 12 144) || 12 / 12 = 1 (left: 1 12 144) || 144 / 12 = 12 (left: 1 12)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 24 / 0 = undefined (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: (11 * 12) - 12 + 12 = 24",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 24 / 0 = undefined (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: (11 + 12) * (12 - 12) = 24",
                "12 * 12 = 144 (left: 12 12 144) || 12 + 12 = 24 (left: 24 144) || Input: 5 7 35",
                "12 * 12 = 144 (left: 12 12 144) || 12 / 12 = 1 (left: 1 144) || 144 - 1 = 143 (left: 143)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 24 * 0 = 0 (left: 0)",
                "12 * 12 = 144 (left: 12 12 144) || 144 / 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0 24) || 24 / 0 = undefined (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: (11 * 12) - 12 = 24"
            ]
        },
        "Input": "11 12 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "58": {
        "puzzle": "12 12 13 13",
        "Step 0": {
            "steps": [
                "13 - 12 = 1 (left: 1 13 13)",
                "12 * 12 = 144 (left: 13 13 144)",
                "12 * 13 = 156 (left: 13 13 156)",
                "13 / 12 = 1 (left: 12 1 13)",
                "13 + 12 = 25 (left: 12 13 25)",
                "12 * 12 = 144 (left: 13 13 144)",
                "12 * 12 = 144 (left: 13 13 144)",
                "12 / 12 = 1 (left: 1 13 13)",
                "13 + 12 = 25 (left: 12 13 25)",
                "13 + 12 = 25 (left: 12 13 25)"
            ],
            "Evaluation": [
                20.002,
                1.002,
                1.002,
                1.002,
                21.001,
                22.0,
                1.002,
                0.002,
                21.001,
                41.0
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.5",
                "2 <- 0.9",
                "3 <- 0.5",
                "4 <- 0.4",
                "5 <- 0.4",
                "6 <- 0.5",
                "7 <- 0.4",
                "8 <- INIT",
                "9 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "13 + 12 = 25 (left: 12 13 25) || 13 - 12 = 1 (left: 1 25)",
                "12 * 12 = 144 (left: 13 13 144) || 13 - 13 = 0 (left: 0 13 144)",
                "13 + 12 = 25 (left: 12 13 25) || 25 - 12 = 13 (left: 13 13)",
                "12 * 12 = 144 (left: 13 13 144) || 13 / 13 = 1 (left: 1 13 144)",
                "13 + 12 = 25 (left: 12 13 25) || 25 - 12 = 13 (left: 12 13 13)",
                "13 + 12 = 25 (left: 12 13 25) || Input:",
                "12 * 12 = 144 (left: 13 13 144) || 13 / 13 = 1 (left: 1 13 144)",
                "13 + 12 = 25 (left: 12 13 25) || 25 / 12 = 2.08 (left: 2.08 25)",
                "13 + 12 = 25 (left: 12 13 25)",
                "12 * 12 = 144 (left: 13 13 144) || 13 - 13 = 0 (left: 0 13 144)"
            ],
            "Evaluation": [
                40.0,
                0.003,
                0.003,
                1.002,
                1.002,
                20.002,
                1.002,
                0.002,
                21.001,
                20.002
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 1.9",
                "2 <- 1.0",
                "3 <- 0.9",
                "4 <- 0.5",
                "5 <- 0.9",
                "6 <- 0.9",
                "7 <- 0.0",
                "8 <- 1.0",
                "9 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "13 + 12 = 25 (left: 12 13 25) || 13 - 12 = 1 (left: 1 25)",
                "12 * 12 = 144 (left: 13 13 144) || 13 - 13 = 0 (left: 0 13 144) || 13 - 0 = 13 (left: 13 13 144)",
                "13 + 12 = 25 (left: 12 13 25) || 13 - 12 = 1 (left: 1 25) || 9 * 3 = 27 (left: 27 27)",
                "13 + 12 = 25 (left: 12 13 25) || 12 * 13 = 156 (left: 156)",
                "12 * 12 = 144 (left: 13 13 144) || 13 - 13 = 0 (left: 0 13 144)",
                "13 + 12 = 25 (left: 12 13 25) || 25 / 12 = 2.08 (left: 2.08 25)",
                "13 + 12 = 25 (left: 12 13 25) || 12 * 13 = 156 (left: 156 25)",
                "13 - 12 = 1 (left: 1 13 13) || 13 - 1 = 12 (left: 13 12)",
                "13 + 12 = 25 (left: 12 13 25) || 13 - 12 = 1 (left: 1 25) || 25 - 1 = 24 (left: 24)",
                "13 + 12 = 25 (left: 12 13 25) || 13 - 12 = 1 (left: 1 25) || 25 / 1 = 25 (left: 25)"
            ],
            "Evaluation": [
                60.0,
                40.001,
                0.003,
                0.003,
                0.003,
                1.001,
                0.001,
                0.003,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 2.8",
                "1 <- 0.9",
                "2 <- 2.1",
                "3 <- 2.1",
                "4 <- 1.5",
                "5 <- 2.1",
                "6 <- 2.8",
                "7 <- INIT",
                "8 <- 2.8",
                "9 <- 0.0"
            ]
        },
        "Step 3": {
            "steps": [
                "13 + 12 = 25 (left: 12 13 25) || 13 - 12 = 1 (left: 1 25) || 25 - 1 = 24 (left: 24) || Answer: (13 + 12) - (13 - 12) = 24",
                "13 + 12 = 25 (left: 12 13 25) || 13 / 12 = 1.0833333333333333 (left: 1.0833333333333333)",
                "12 * 12 = 144 (left: 13 13 144) || 13 - 13 = 0 (left: 0 13 144) || 13 - 0 = 13 (left: 13 13 144) || 13 - 13 = 0 (left: 0 13 144)",
                "12 * 12 = 144 (left: 13 13 144) || 13 - 13 = 0 (left: 0 13 144) || 13 - 0 = 13 (left: 13 13 144) || 13 * 13 = 169 (left: 13 144 169)",
                "13 + 12 = 25 (left: 12 13 25) || Input: || It seems like there was a mistake in the input. Can you please provide the correct input for me to generate the possible next steps? Thank you.",
                "12 * 12 = 144 (left: 13 13 144) || 13 - 13 = 0 (left: 0 13 144) || 13 - 0 = 13 (left: 13 13 144) || 144 * 13 = 1872 (left",
                "13 + 12 = 25 (left: 12 13 25) || 13 - 12 = 1 (left: 1 25) || 25 - 1 = 24 (left: 24) || Answer: ((13 + 12) - (13 - 12)) = 24",
                "12 / 12 = 1 (left: 13 1 ",
                "13 + 12 = 25 (left: 12 13 25) || 13 - 12 = 1 (left: 1 25) || 25 - 1 = 24 (left: 24) || Answer: ((12 + 12) + (13 - 13)) - 1 = 24",
                "13 - 12 = 1 (left: 1 13 13) || 13 - 1 = 12 (left: 12 13)"
            ]
        },
        "Input": "12 12 13 13",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "59": {
        "puzzle": "1 1 12 13",
        "Step 0": {
            "steps": [
                "12 + 1 = 13 (left: 1 13 13)",
                "1 * 1 = 1 (left: 1 12 13)",
                "1 - 1 = 0 (left: 0 12 13)",
                "1 - 1 = 0 (left: 0 12 13)",
                "12 + 1 = 13 (left: 1 13 13)",
                "1 - 1 = 0 (left: 0 12 13)",
                "1 + 1 = 2 (left: 2 12 13)",
                "12 + 1 = 13 (left: 1 13 13)",
                "13 / 1 = 13 (left: 1 12 ",
                "12 + 1 = 13 (left: 1 13 13)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                41.0,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 0.6",
                "2 <- 0.6",
                "3 <- 0.6",
                "4 <- INIT",
                "5 <- 0.6",
                "6 <- 0.6",
                "7 <- 0.6",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 1 = 2 (left: 2 12 13) || 12 - 2 = 10 (left: 10 13)",
                "1 + 1 = 2 (left: 2 12 13) || 12 / 2 = 6 (left: 6 13)",
                "1 + 1 = 2 (left: 2 12 13) || 13 + 2 = 15 (left: 12 15)",
                "1 + 1 = 2 (left: 2 12 13) || 2 * 12 = 24 (left: 24 13)",
                "1 + 12 = 13 (left: 13 13)",
                "1 + 1 = 2 (left: 2 12 13) || 13 - 2 = 11 (left: 11 12)",
                "1 + 1 = 2 (left: 2 12 13) || 2 * 12 = 24 (left: 24 13)",
                "1 + 1 = 2 (left: 2 12 13) || 13 - 2 = 11 (left: 2 11)",
                "12 + 1 = 13 (left: 1 13 13)",
                "1 / 1 = 1 (left: 1 12 13)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.6",
                "3 <- 0.6",
                "4 <- INIT",
                "5 <- 0.6",
                "6 <- 0.6",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 12 13)",
                "13 - 1 = 12 (left: 1 12 13)",
                "1 + 1 = 2 (left: 2 12 13) || 12 - 2 = 10 (left: 10 13)",
                "1 + 1 = 2 (left: 2 12 13) || 13 + 2 = 15 (left: 12 15)",
                "1 - 1 = 0 (left: 0 12 13)",
                "1 + 1 = 2 (left: 2 12 13) || 13 / 2 = 6.5 (",
                "1 + 1 = 2 (left: 2 12 13) || 2 * 12 = 24 (left: 13 24)",
                "13 - 1 = 12 (left: 1 12 13)",
                "12 + 1 = 13 (left: 1 13 13)",
                "1 + 12 = 13 (left: 13 13)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.6",
                "2 <- 2.0",
                "3 <- 0.6",
                "4 <- 2.0",
                "5 <- 2.0",
                "6 <- 2.0",
                "7 <- 2.0",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 12 13)",
                "1 + 1 = 2 (left: 2 12 13) || 12 / 2 = 6 (left: 6 12 13)",
                "1 * 1 = 1 (left: 1 12 13) || 1 * 12 = 12 (left: 12 13)",
                "1 + 1 = 2 (left: 2 12 13) || 12 / 2 = 6 (left: 6 13)",
                "1 * 1 = 1 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13)",
                "1 * 1 = 1 (left: 1 12 13) || 12 / 1 = 12 (left: 12)",
                "1 * 1 = 1 (left: 1 12 13) || 13 - 1 = 12 (left: 12 13)",
                "1 * 1 = 1 (left: 1 12 13) || 12 + 1 = 13 (left: 13 13)",
                "12 + 1 = 13 (left: 1 13 13)",
                "1 + 12 = 13 (left: 1 13 13)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                0.003,
                0.002,
                60.0,
                0.002,
                0.003,
                0.003,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- INIT",
                "2 <- 0.6",
                "3 <- 3.1",
                "4 <- 2.0",
                "5 <- 3.4",
                "6 <- INIT",
                "7 <- 0.6",
                "8 <- 3.4",
                "9 <- 3.4"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "1 / 1 = 1 (left: 1 12 13)",
                "1 + 1 = 2 (left: 2 12 13) || 12 / 2 = 6 (left: 6 13)",
                "1 + 1 = 2 (left: 2 12 13) || 12 / 2 = 6 (left: 6 12 13) || 6 * 12 = 72 (left: 72 13)",
                "1 * 1 = 1 (left: 1 12 13) || 1 * 12 = 12 (left: 12 13)",
                "1 * 1 = 1 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 / 13 = 0.8461538461538461 (left: 0.8461538461538461)",
                "12 + 1 = 13 (left: 1 13 13)",
                "1 + 1 = 2 (left: 2 12 13) || 12 - 2 = 10 (left: 10 13)",
                "1 * 1 = 1 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 13 - 11 = 2 (left: 2)",
                "1 * 1 = 1 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 / 13 \u2248 0.846 (left: 0.846)"
            ],
            "Evaluation": [
                0.0,
                20.002,
                0.002,
                1.0,
                0.003,
                0.001,
                0.003,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 4.3",
                "2 <- 3.4",
                "3 <- 0.6",
                "4 <- 3.4",
                "5 <- 2.0",
                "6 <- 4.1",
                "7 <- 4.1",
                "8 <- 3.4",
                "9 <- 4.1"
            ]
        },
        "Step 5": {
            "steps": [
                "1 / 1 = 1 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13)",
                "1 + 1 = 2 (left: 2 12 13) || 12 / 2 = 6 (left: 6 12 13) || 6 * 12 = 72 (left: 72 13) || 72 / 13 = 5.538461538461538 (left: 5.538461538461538)",
                "1 * 1 = 1 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 / 13 \u2248 0.846 (left: 0.846)",
                "1 + 1 = 2 (left: 2 12 13) || 2 * 12 = 24 (left: 24 13)",
                "1 * 1 = 1 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 / 13 \u2248 0.846 (left: 0.846)",
                "1 * 1 = 1 (left: 1 12 13) || 13 - 1 = 12 (left: 1 12)",
                "1 / 1 = 1 (left: 1 12 13) || 12 / 1 = 12 (left: 12 13)",
                "1 / 1 = 1 (left: 1 12 13) || 13 + 1 = 14 (left: 12 14)",
                "1 * 1 = 1 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 / 1 = 1 (left: 1 12 13) || 13 - 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                60.0,
                0.0,
                0.003,
                20.002,
                0.003,
                1.002,
                0.003,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 5.9",
                "1 <- 5.9",
                "2 <- 5.0",
                "3 <- 3.4",
                "4 <- 3.4",
                "5 <- 5.3",
                "6 <- 5.9",
                "7 <- 0.6",
                "8 <- 0.6",
                "9 <- 5.0"
            ]
        },
        "Step 6": {
            "steps": [
                "1 / 1 = 1 (left: 1 12 13) || 13 - 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "1 / 1 = 1 (left: 1 12 13) || 13 - 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "1 / 1 = 1 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 / 13 = 0.8461538461538461 (left: 0.8461538461538461)",
                "1 * 1 = 1 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 * 1 = 1 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 / 13 = 0.8461538461538461 (left: 0.8461538461538461)",
                "1 + 1 = 2 (left: 2 12 13) || 2 * 12 = 24 (left: 24 13) || 13 * 24 = 312 (left: 312)",
                "1 / 1 = 1 (left: 1 12 13) || 13 - 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "1 + 1 = 2 (left: 2 12 13) || 13 + 2 = 15 (left: 12 15)",
                "1 + 1 = 2 (left: 2 12 13) || 2 * 12 = 24 (left: 24 13)",
                "1 / 1 = 1 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 / 13 = 0.846 (left: 0.846)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.001,
                0.003,
                0.002,
                0.001,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 2.0",
                "2 <- 0.6",
                "3 <- 5.3",
                "4 <- 3.4",
                "5 <- 5.3",
                "6 <- 5.0",
                "7 <- 0.6",
                "8 <- 3.4",
                "9 <- 3.9"
            ]
        },
        "Step 7": {
            "steps": [
                "1 + 1 = 2 (left: 2 12 13) || 2 * 12 = 24 (left: 24 13) || 24 - 13 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 12 13) || 13 - 1 = 12 (left: 1 12)",
                "1 + 1 = 2 (left: 2 12 13) || 2 * 12 = 24 (left: 13 24)",
                "1 + 1 = 2 (left: 2 12 13) || 2 * 12 = 24 (left: 24 13) || 24 * 13 = 312 (left: 312)",
                "1 * 1 = 1 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 / 13 \u2248 0.846 (left: 0.846)",
                "1 + 1 = 2 (left: 2 12 13) || 2 * 12 = 24 (left: 24 13) || 24 / 13 = 1.846 (left: 1.846)",
                "1 / 1 = 1 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 + 1 = 2 (left: 2 12 13) || 2 * 12 = 24 (left: 24 13)",
                "1 * 1 = 1 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 + 12 = 13 (left: 1 13 13) || 1 * 13 = 13 (left: 13 13 13)"
            ],
            "Evaluation": [
                0.003,
                2.001,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                20.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 5.9",
                "2 <- 5.0",
                "3 <- 5.9",
                "4 <- 7.7",
                "5 <- 3.4",
                "6 <- 4.1",
                "7 <- 7.7",
                "8 <- 5.0",
                "9 <- 5.9"
            ]
        },
        "Step 8": {
            "steps": [
                "1 * 1 = 1 (left: 1 12 13) || 12 + 1 = 13 (left: 1 13)",
                "1 / 1 = 1 (left: 1 12 13) || 13 - 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "1 / 1 = 1 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "1 / 1 = 1 (left: 1 12 13) || 13 - 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 + 1 = 2 (left: 2 12 13) || 2 * 12 = 24 (left: 24 13) || 24 / 13 = 1.846 (left: 1.846)",
                "1 * 1 = 1 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 / 1 = 1 (left: 1 12 13) || 12 / 1 = 12 (left: 12 13)",
                "1 + 1 = 2 (left: 2 12 13) || 2 * 12 = 24 (left: 24 13) || 24 * 13 = 312 (left: 312)",
                "1 / 1 = 1 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 / 1 = 1 (left: 1 12 13) || 13 - 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 3.4",
                "2 <- 5.9",
                "3 <- 5.0",
                "4 <- 5.9",
                "5 <- 3.4",
                "6 <- 3.4",
                "7 <- 5.0",
                "8 <- 3.4",
                "9 <- 3.4"
            ]
        },
        "Step 9": {
            "steps": [
                "1 + 1 = 2 (left: 2 12 13) || 12 - 2 = 10 (left: 10 13)",
                "1 * 1 = 1 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 5 * 5 = 25 (left:",
                "1 / 1 = 1 (left: 1 12 13) || 13 - 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 / 1 = 1 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 / 1 = 1 (left: 1 12 13) || 13 - 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 * 1 = 1 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 / 13 = 0.8461538461538461 (left: 0.8461538461538461)",
                "1 * 1 = 1 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 / 1 = 1 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 * 1 = 1 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 13 - 11 = 2 (left: 2)",
                "1 * 1 = 1 (left: 1 12 13) || 12 - 1 = 11 (left: 11 13) || 11 / 13 = 0.8461538461538461 (left: 0.8461538461538461)"
            ]
        },
        "Input": "1 1 12 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "60": {
        "puzzle": "1 3 5 12",
        "Step 0": {
            "steps": [
                "5 * 3 = 15 (left: 1 15 12)",
                "3 * 5 = 15 (left: 1 15 12)",
                "12 - 5 = 7 (left: 1 3 7)",
                "12 - 1 = 11 (left: 3 5 11)",
                "5 * 3 = 15 (left: 1 15 12)",
                "12 - 5 = 7 (left: 1 3 7)",
                "12 - 5 = 7 (left: 1 3 7)",
                "5 * 3 = 15 (left: 1 15 12)",
                "12 - 5 = 7 (left: 1 3 ",
                "5 * 3 = 15 (left: 1 15 12)"
            ],
            "Evaluation": [
                2.001,
                2.001,
                3.0,
                3.0,
                2.001,
                3.0,
                3.0,
                3.0,
                0.002,
                2.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.1",
                "2 <- 0.2",
                "3 <- 0.7",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 0.7"
            ]
        },
        "Step 1": {
            "steps": [
                "3 + 5 = 8 (left: 1 8 12)",
                "3 * 5 = 15 (left: 1 15 12) || 15 / 1 = 15 (left: 15 12)",
                "12 - 5 = 7 (left: 1 3 7) || 3 / 1 = 3 (left: 3 7)",
                "5 * 3 = 15 (left: 1 15 12) || 12 - 1 = 11 (left: 11 12)",
                "12 - 5 = 7 (left: 1 3 7)",
                "3 * 5 = 15 (left: 1 15 12)",
                "5 + 12 = 17 (left: 1 3 17)",
                "12 / 3 = 4 (left: 1 4 ",
                "5 * 3 = 15 (left: 1 15 12)",
                "5 * 3 = 15 (left: 1 15 12) || 1 * 15 = 15 (left: 15 12)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                21.001,
                0.002,
                3.0,
                1.002,
                22.0,
                0.002,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.6",
                "2 <- INIT",
                "3 <- 1.6",
                "4 <- 1.4",
                "5 <- 1.2",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 0.6"
            ]
        },
        "Step 2": {
            "steps": [
                "3 + 5 = 8 (left: 1 8 12)",
                "5 + 12 = 17 (left: 1 3 17) || 3 - 1 = 2 (left: 2 17)",
                "12 - 1 = 11 (left: 3 5 11)",
                "5 + 12 = 17 (left: 1 3 17) || 17 - 3 = 14 (left: 1 14)",
                "12 - 5 = 7 (left: 1 3 7) || 7 / 3 = 2.3333 (left: 1 2.3333)",
                "12 - 5 = 7 (left: 1 3 7) || 3 / 1 = 3 (left: 3 7) || 7 / 3 = 2.33 (left: 2.33)",
                "5 * 3 = 15 (left: 1 5 12)",
                "12 / 3 = 4 (left: 1 4 ",
                "5 * 3 = 15 (left: 1 5 12)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                1.001,
                20.002,
                1.001,
                0.003,
                2.001,
                20.0,
                3.0,
                41.0
            ],
            "Resampling": [
                "0 <- 2.9",
                "1 <- 0.2",
                "2 <- 1.2",
                "3 <- 1.2",
                "4 <- 1.6",
                "5 <- 1.6",
                "6 <- 2.9",
                "7 <- 1.6",
                "8 <- 2.3",
                "9 <- 2.9"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 - 5 = 7 (left: 1 3 7) || Possible",
                "12 - 5 = 7 (left: 1 3 7) || 3 / 1 = 3 (left: 3 7) || 9 - 5 = 4 (left: 4)",
                "12 - 5 = 7 (left: 1 3 7) || 3 / 1 = 3 (left: 3 7) || Input: 5 9",
                "5 + 12 = 17 (left: 1 3 17) || 3 - 1 = 2 (left: 2 17)",
                "5 + 12 = 17 (left: 1 3 17) || 17 / 3 = 5 (left:",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 / 4 = 0.25 (left: 0.25)",
                "5 + 12 = 17 (left: 1 3 17) || 17 - 1 = 16 (left: 3 16)",
                "5 + 12 = 17 (left: 1 3 17) || 17 - 3 = 14 (left: 1 14) || 1 * 14 = 14 (left: 14)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                0.003,
                0.003,
                0.0,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.9",
                "1 <- 2.3",
                "2 <- 2.9",
                "3 <- 1.6",
                "4 <- 1.4",
                "5 <- 1.6",
                "6 <- 2.9",
                "7 <- 1.2",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "5 + 12 = 17 (left: 1 3 17) || 17 - 3 = 14 (left: 1 14) || 14 / 1 = 14 (left: 14)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "5 + 12 = 17 (left: 1 3 17) || 17 - 3 = 14 (left: 1 14)",
                "12 - 5 = 7 (left: 1 3 7) || 1 * 7 = 7 (left: 3 7)",
                "5 + 12 = 17 (left: 1 3 17) || 3 - 1 = 2 (left:",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 - 5 = 7 (left: 1 3 7) || 3 / 1 = 3 (left: 3 7) || Input: 5 9",
                "5 * 3 = 15 (left: 1 15 12)",
                "12 - 1 = 11 (left: 3 5 11)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.001,
                20.0,
                21.0,
                20.001,
                0.002,
                0.003,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 4.5",
                "2 <- 4.5",
                "3 <- 2.3",
                "4 <- 2.9",
                "5 <- 1.2",
                "6 <- 1.6",
                "7 <- 2.3",
                "8 <- 2.7",
                "9 <- 1.6"
            ]
        },
        "Step 5": {
            "steps": [
                "5 + 12 = 17 (left: 1 3 17) || 3 * 17 = 51 (left: 1 51)",
                "5 + 12 = 17 (left: 1 3 17) || 3 - 1 = 2 (left: || 10 - 5 = 5 (left: 5 15 20",
                "5 + 12 = 17 (left: 1 3 17) || 3 - 1 = 2 (left: || 3 - 1 = 2 (left: 2)",
                "5 + 12 = 17 (left: 1 3 17) || 17 - 3 = 14 (left: 1 14) || 1 * 14 = 14 (left: 14)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 1 - 4 = -3 (left: -3)",
                "12 - 5 = 7 (left: 1 3 7) || 3 / 1 = 3 (left: 3 7) || 10 + 5 = 15 (left: 3 15)",
                "5 + 12 = 17 (left: 1 3 17) || 17 / 3 = 5 (left: 1 5)",
                "5 + 12 = 17 (left: 1 3 17) || 17 - 3 = 14 (left: 1 14) || 14 / 1 = 14 (left: 14)",
                "12 / 3 = 4 (left: 1 4  || 1 * 4 = 4 (left: 4)",
                "5 + 12 = 17 (left: 1 3 17) || 17 / 3 = 5 (left: 1 5)"
            ],
            "Evaluation": [
                0.002,
                3.0,
                0.001,
                0.002,
                0.001,
                0.003,
                0.002,
                0.001,
                0.002,
                20.001
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 5.9",
                "2 <- 4.3",
                "3 <- 4.4",
                "4 <- 2.3",
                "5 <- 2.9",
                "6 <- 4.8",
                "7 <- 2.3",
                "8 <- 4.3",
                "9 <- 2.9"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 5 = 7 (left: 1 3 7) || 3 / 1 = 3 (left: 3 7) || 7 / 3 = 2 (left: 2)",
                "5 + 12 = 17 (left: 1 3 17) || 17 / 3 = 5 (left: 1 5) || 5 * 1 = 5 (left: 5)",
                "5 + 12 = 17 (left: 1 3 17) || 17 - 3 = 14 (left: 1 14) || 14 / 1 = 14 (left: 14)",
                "12 - 5 = 7 (left: 1 3 7) || 1 * 7 = 7 (left: 3 7) || Input: 5 9",
                "5 + 12 = 17 (left: 1 3 17) || 17 - 3 = 14 (left: 1 14) || 14 - 1 = 13 (left: 1 13)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "5 * 3 = 15 (left: 1 15 12) || 1 * 15 = 15 (left: 15 12)",
                "5 + 12 = 17 (left: 1 3 17) || 17 - 3 = 14 (left: 1 14) || 1 * 14 = 14 (left: 14)",
                "5 + 12 = 17 (left: 1 3 17) || 17 - 3 = 14 (left: 1 14) || 14 / 1 = 14 (left: 14)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.001,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                0.0,
                0.002
            ],
            "Resampling": [
                "0 <- 5.9",
                "1 <- 2.3",
                "2 <- 1.2",
                "3 <- 5.9",
                "4 <- 4.4",
                "5 <- 4.3",
                "6 <- 4.3",
                "7 <- 4.4",
                "8 <- 1.4",
                "9 <- 4.5"
            ]
        },
        "Step 7": {
            "steps": [
                "5 + 12 = 17 (left: 1 3 17) || 17 / 3 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)",
                "5 + 12 = 17 (left: 1 3 17) || 17 - 3 = 14 (left: 1 14) || 14 * 1 = 14 (left",
                "12 - 5 = 7 (left: 1 3 7) || 3 / 1 = 3 (left: 3 7) || 7 - 3 = 4 (left: 4)",
                "5 + 12 = 17 (left: 1 3 17) || 17 / 3 = 5 (left: 1 5) || 1 + 5 = 6",
                "12 - 5 = 7 (left: 1 3 7) || 1 * 7 = 7 (left: 3 7) || 7 - 3 = 4 (left: 4)",
                "5 + 12 = 17 (left: 1 3 17) || 17 - 3 = 14 (left: 1 14) || 14 / 1 = 14 (left: 14)",
                "5 + 12 = 17 (left: 1 3 17) || 17 - 3 = 14 (left: 1 14) || 14 / 1 = 14 (left: 14)",
                "12 - 5 = 7 (left: 1 3 7) || 1 * 7 = 7 (left: 3 7) || 3 * 7 = 21 (left: 21)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4)",
                "5 + 12 = 17 (left: 1 3 17) || 3 - 1 = 2 (left: || 3 - 1 = 2 (left: 2)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.001,
                0.003,
                0.002,
                0.001,
                0.002,
                0.001,
                21.001,
                0.001
            ],
            "Resampling": [
                "0 <- 5.9",
                "1 <- 2.9",
                "2 <- 2.9",
                "3 <- INIT",
                "4 <- 4.3",
                "5 <- 2.7",
                "6 <- 2.3",
                "7 <- 4.3",
                "8 <- 0.3",
                "9 <- 2.3"
            ]
        },
        "Step 8": {
            "steps": [
                "5 + 12 = 17 (left: 1 3 17) || 17 / 3 = 5 (left: 1 5) || 1 + 5 = 6",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "5 + 12 = 17 (left: 1 3 17)",
                "5 + 12 = 17 (left: 1 3 17) || 17 - 3 = 14 (left: 1 14) || 1 * 14 = 14 (left: 14)",
                "12 / 3 = 4 (left: 1 4  || 1 * 4 = 4 (left: 4)",
                "5 + 12 = 17 (left: 1 3 17) || 17 - 3 = 14 (left: 1 14) || 1 * 14 = 14 (left: 14)",
                "5 + 12 = 17 (left: 1 3 17) || 17 - 3 = 14 (left: 1 14) || 1 * 14 = 14 (left: 14)",
                "12 - 1 = 11 (left: 3 5 11) || 3 * 5 = 15 (left: 15 11)",
                "5 + 12 = 17 (left: 1 3 17) || 17 - 3 = 14 (left: 1 14) || 14 / 1 = 14 (left: 14)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                21.001,
                0.001,
                0.002,
                0.003,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.9",
                "1 <- 1.6",
                "2 <- 7.8",
                "3 <- 8.3",
                "4 <- 4.5",
                "5 <- 8.3",
                "6 <- 4.4",
                "7 <- 1.2",
                "8 <- 4.4",
                "9 <- 8.3"
            ]
        },
        "Step 9": {
            "steps": [
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "5 + 12 = 17 (left: 1 3 17) || 3 / 1 = 3 (left: 3 17)",
                "12 - 5 = 7 (left: 1 3 7) || 7 - 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "5 + 12 = 17 (left: 1 3 17) || 17 - 3 = 14 (left: 1 14)",
                "5 + 12 = 17 (left: 1 3 17) || 3 - 1 = 2 (left: || 3 * 1 = 3 (left: 3)",
                "5 + 12 = 17 (left: 1 3 17) || Possible next steps:",
                "12 - 5 = 7 (left: 1 3 7) || 1 * 7 = 7 (left: 3 7) || 3 * 7 = 21 (left: 21)",
                "12 - 5 = 7 (left: 1 3 7) || 3 / 1 = 3 (left: 3 7) || Input: 5 6",
                "12 - 5 = 7 (left: 1 3 7) || 1 * 7 = 7 (left: 3 7) || 3 / 7 = 0.43 (left: 0.43)",
                "5 + 12 = 17 (left: 1 3 17) || 3 + 17 = 20 (left: 1 20)"
            ]
        },
        "Input": "1 3 5 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "61": {
        "puzzle": "5 5 12 12",
        "Step 0": {
            "steps": [
                "12 + 5 = 17 (left: 5 17 12)",
                "5 / 5 = 1 (left: 1 12 12)",
                "5 * 12 = 60 (left: 60 12)",
                "12 - 5 = 7 (left: 5 12 7)",
                "12 - 5 = 7 (left: 5 7 12)",
                "5 - 5 = 0 (left: 0 12 12)",
                "12 - 5 = 7 (left: 5 12 7)",
                "12 + 5 = 17 (left: 5 17 12)",
                "12 - 5 = 7 (left: ",
                "12 - 5 = 7 (left: 5 7 12)"
            ],
            "Evaluation": [
                2.001,
                21.001,
                2.001,
                22.0,
                3.0,
                60.0,
                3.0,
                2.001,
                0.0,
                21.001
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.3",
                "2 <- 0.5",
                "3 <- 0.3",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 0.9",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "5 - 5 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 0 12)",
                "12 - 5 = 7 (left: 5 12 7) || 12 / 5 = 2.4 (left: 2.4 7)",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12)",
                "12 - 5 = 7 (left: 5 12 7) || 7 - 5 = 2 (left: 2 12)",
                "12 - 5 = 7 (left: 5 12 7)",
                "5 / 5 = 1 (left: 1 5 12)",
                "12 - 5 = 7 (left: 5 7 12) || 5 * 7 = 35 (left: 35 12)",
                "12 + 5 = 17 (left: 5 17 12)",
                "12 + 5 = 17 (left: 5 12 17)",
                "5 / 5 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                40.0,
                1.002,
                40.001,
                60.0,
                3.0,
                1.001,
                0.001,
                3.0,
                2.001,
                40.001
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 1.9",
                "2 <- 1.0",
                "3 <- 0.2",
                "4 <- INIT",
                "5 <- 0.3",
                "6 <- 0.9",
                "7 <- 0.0",
                "8 <- 1.0",
                "9 <- 0.5"
            ]
        },
        "Step 2": {
            "steps": [
                "5 - 5 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 1 12)",
                "5 / 5 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "5 - 5 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "5 * 12 = 60 (left: 60 12) || 60 / 12 = 5 (left: 5)",
                "5 * 5 = 25 (left: 12 12 25)",
                "12 - 5 = 7 (left: 5 12 7) || 7 * 12 = ",
                "12 - 5 = 7 (left: 5 7 12) || 12 - 5 = 7 (left: 7 12)",
                "12 + 5 = 17 (left: 5 17 12) || 12 - 5 = 7 (left: 7 12)",
                "5 - 5 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 0 12) || 0 * 12 = 0 (left: 0)",
                "5 - 5 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 12)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                0.003,
                0.002,
                2.001,
                0.003,
                0.003,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 0.5",
                "2 <- 0.1",
                "3 <- 1.0",
                "4 <- 1.9",
                "5 <- 2.0",
                "6 <- 0.4",
                "7 <- 1.2",
                "8 <- 0.3",
                "9 <- 0.5"
            ]
        },
        "Step 3": {
            "steps": [
                "5 - 5 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 0 12) || 12 * 0 = 0 (left: 0)",
                "5 - 5 = 0 (left: 0 12 12) || 2 + 3 = 5 (left: 3 5",
                "5 / 5 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "5 - 5 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 0 12) || 12 * 0 = 0 (left: 0)",
                "5 / 5 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "5 - 5 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 1 12) || 12 / 1 = 12 (left: 12)",
                "12 - 5 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12)",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24",
                "12 - 5 = 7 (left: 5 12 7) || 12 - 5 = 7 (left: 7 7)",
                "5 - 5 = 0 (left: 0 12 12) || 12 - 12 = 0 (left: 0)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                40.001,
                0.003,
                0.003,
                0.003,
                60.0,
                20.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 3.2",
                "2 <- 3.6",
                "3 <- 1.7",
                "4 <- 0.9",
                "5 <- 1.9",
                "6 <- 0.7",
                "7 <- 0.3",
                "8 <- 3.6",
                "9 <- 3.6"
            ]
        },
        "Step 4": {
            "steps": [
                "5 / 5 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "5 / 5 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 - 5 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 + 12 = 14",
                "12 + 5 = 17 (left: 5 17 12) || 17 / 5 = 3.4 (left: 3.4 12)",
                "12 - 5 = 7 (left: 5 7 12) || 12 - 5 = 7 (left: 7 12)",
                "5 / 5 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 + 5 = 17 (left: 5 17 12) || 17 / 5 = 3.4 (left: 3.4 12)",
                "12 - 5 = 7 (left: 5 12 7) || 7 / 5 = 1.4 (left: 1.4 7)",
                "12 - 5 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 - 5 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                2.001,
                1.002,
                0.003,
                2.0,
                1.001,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 3.6",
                "2 <- 2.0",
                "3 <- 3.2",
                "4 <- 0.9",
                "5 <- 0.3",
                "6 <- 1.0",
                "7 <- 3.7",
                "8 <- 2.0",
                "9 <- 3.2"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 5 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12)",
                "12 - 5 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "5 - 5 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 1 12) || 12 / 1 = 12 (left: 12)",
                "5 / 5 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 - 5 = 7 (left: 5 7 12) || 12 - 5 = 7 (left: 7 12)",
                "12 - 5 = 7 (left: 5 12 7) || 7 * 12 = ",
                "5 - 5 = 0 (left: 0 12 12) || 12 - 0 = 12 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "5 - 5 = 0 (left: 0 12 12) || 12 * 0 = 0 (left: 12 12) || 12 + 12 = 24 || 24 - 12 = 12 (left: 12)",
                "5 - 5 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 1 12) || 1 * 12 = 12 (left: 12)",
                "5 / 5 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                60.0,
                20.0,
                0.003,
                20.002,
                0.002,
                0.003,
                0.003,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.3",
                "2 <- 1.9",
                "3 <- 5.3",
                "4 <- 3.6",
                "5 <- 2.0",
                "6 <- 5.1",
                "7 <- 5.3",
                "8 <- 5.0",
                "9 <- 5.0"
            ]
        },
        "Step 6": {
            "steps": [
                "5 / 5 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "12 - 5 = 7 (left: 5 12 7) || 12 / 5 = 2.4 (left: 2.4 7)",
                "5 / 5 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 / 5 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 12 = 144 (left: 144 24)",
                "12 - 5 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 + 2 = 14 (left: 14)",
                "5 - 5 = 0 (left: 0 12 12) || 12 / 12 = 1 (left: 1 12) || 4 + 9 = 13 (left: 9 13)",
                "12 - 5 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (12 - 5) * (5 - 2) = 24",
                "5 / 5 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 24 0)",
                "12 - 5 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 - 5 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)"
            ],
            "Evaluation": [
                60.0,
                2.001,
                20.002,
                60.0,
                0.0,
                0.002,
                0.003,
                60.0,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 6.2",
                "2 <- 0.1",
                "3 <- 3.6",
                "4 <- 5.0",
                "5 <- 6.3",
                "6 <- 1.3",
                "7 <- 6.7",
                "8 <- 6.3",
                "9 <- 6.0"
            ]
        },
        "Step 7": {
            "steps": [
                "12 - 5 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "5 / 5 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 12 = 144 (left: 24 144)",
                "5 / 5 = 1 (left: 1 12 12) || 12 / 12 = 1 (left: 1 12)",
                "12 - 5 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "12 - 5 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "5 / 5 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 12 = 144 (left: 144 24) || 144 * 24 = 3456 (left: 3456)",
                "12 - 5 = 7 (left: 5 12 7) || 7 - 5 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "5 / 5 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 24 0) || 24 + 0 = 24",
                "5 / 5 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 12 = 144 (left: 144 24) || 144 / 24 = 6 (left: 6)",
                "5 / 5 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.002,
                60.0,
                1.002,
                60.0,
                0.003,
                0.003,
                0.003,
                40.001,
                0.003,
                40.001
            ],
            "Resampling": [
                "0 <- 7.7",
                "1 <- 6.0",
                "2 <- 5.0",
                "3 <- 5.0",
                "4 <- 4.9",
                "5 <- 7.3",
                "6 <- 3.2",
                "7 <- 6.3",
                "8 <- 4.9",
                "9 <- 5.0"
            ]
        },
        "Step 8": {
            "steps": [
                "5 / 5 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 24 0) || 24 + 0 = 24 || None",
                "5 / 5 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 - 5 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "12 - 5 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 - 5 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (12 - 5) * (5 + 2) = 24",
                "12 - 5 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (5 + 5) * (12 - 12) = 24",
                "5 / 5 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "5 / 5 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 * 12 = 144 (left: 144 24) || 144 / 24 = 6 (left: 6)",
                "12 - 5 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (12 - 5 - 5) * 12 = 24",
                "12 - 5 = 7 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)"
            ]
        },
        "Input": "5 5 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "62": {
        "puzzle": "1 9 9 12",
        "Step 0": {
            "steps": [
                "12 - 1 = 11 (left: 9 9 11)",
                "9 / 1 = 9 (left: 9 9 12)",
                "1 * 9 = 9 (left: 9 9 12)",
                "1 * 9 = 9 (left: 9 9 12)",
                "12 - 9 = 3 (left: 1 9 3)",
                "9 - 1 = 8 (left: 8 9 12)",
                "9 - 1 = 8 (left: 8 9 12)",
                "12 - 9 = 3 (left: 1 9 3)",
                "12 - 9 = 3 (left: 1 9 ",
                "12 - 1 = 11 (left: 9 9 11)"
            ],
            "Evaluation": [
                2.001,
                2.001,
                3.0,
                2.001,
                60.0,
                3.0,
                2.001,
                60.0,
                41.0,
                1.002
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.4",
                "2 <- INIT",
                "3 <- 0.8",
                "4 <- 0.4",
                "5 <- 0.7",
                "6 <- 0.4",
                "7 <- 0.4",
                "8 <- 0.7",
                "9 <- 0.8"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 9 = 3 (left: 1 9 3) || 9 / 3 = 3 (left: 1 3)",
                "12 - 9 = 3 (left: 1 9 3) || 9 / ",
                "9 - 1 = 8 (left: 8 9 12)",
                "12 - 9 = 3 (left: 1 9  || 9 / 1 = 9 (left: 9)",
                "12 - 9 = 3 (left: 1 9 3) || 1 * 9 = 9 (left: 9 3)",
                "12 - 9 = 3 (left: 1 9 3) || Input: 5 6 2 4",
                "12 - 9 = 3 (left: 1 9 3) || 9 / 3 = 3 (left: 1 3)",
                "12 - 9 = 3 (left: 1 9 3) || 9 / 1 = 9 (left: 9 3)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 1 = 8 (left: 8)",
                "12 - 9 = 3 (left: 1 9  || 9 / 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                40.0,
                0.003,
                3.0,
                0.002,
                0.003,
                0.003,
                20.001,
                0.001,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 0.9",
                "2 <- 1.6",
                "3 <- 0.8",
                "4 <- 1.0",
                "5 <- 0.4",
                "6 <- 0.8",
                "7 <- 0.8",
                "8 <- 0.7",
                "9 <- 0.4"
            ]
        },
        "Step 2": {
            "steps": [
                "12 - 9 = 3 (left: 1 9 3) || 9 / 3 = 3 (left: 1 3)",
                "12 - 1 = 11 (left: 9 9 11) || 9 / 9 = 1 (left: 1 11)",
                "12 - 9 = 3 (left: 1 9 3) || 9 / 3 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "12 - 9 = 3 (left: 1 9  || 9 - 1 = 8 (left: 8)",
                "12 - 9 = 3 (left: 1 9 3) || 9 / 3 = 3 (left: 1 3) || 1 * 3 = 3 (left: 3)",
                "12 - 9 = 3 (left: 1 9 3) || 1 * 3 = 3 (left: 3)",
                "12 - 9 = 3 (left: 1 9  || Input: 3 5 7",
                "12 - 9 = 3 (left: 1 9  || 1 * 9 = 9 (left: 9)",
                "12 - 9 = 3 (left: 1 9 3) || 1 * 9 = 9 (left: 3 9)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 1 = 8 (left: 8 3)"
            ],
            "Evaluation": [
                0.0,
                0.001,
                0.001,
                0.001,
                0.001,
                0.0,
                0.003,
                0.001,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 0.4",
                "2 <- 2.9",
                "3 <- 1.0",
                "4 <- 0.7",
                "5 <- 2.9",
                "6 <- 0.4",
                "7 <- 1.0",
                "8 <- 2.9",
                "9 <- 0.8"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 9 = 3 (left: 1 9 3) || 9 / 3 = 3 (left: 1 3)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 1 = 8 (left: 8 3) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "12 - 9 = 3 (left: 1 9 3) || 9 / 3 = 3 (left: 1 3) || 1 * 3 = 3 (left: 3)",
                "12 - 9 = 3 (left: 1 9 3) || Input: 5 3 7 2",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 1 = 8 (left: 8 3) || 8 / 3 = 2.67 (left: 2.67)",
                "12 - 9 = 3 (left: 1 9 3) || 1 * 9 = 9 (left: 3 9)",
                "12 - 9 = 3 (left: 1 9 3) || 9 / 3 = 3 (left: 1 3) || 3 / 1 = 3 (left: 3)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 1 = 8 (left: 8 3) || 8 * 3 = 24 (left: 24)",
                "12 - 9 = 3 (left: 1 9  || 9 / 1 = 9 (left: 9)"
            ],
            "Evaluation": [
                0.001,
                60.0,
                0.0,
                0.002,
                0.003,
                0.001,
                0.003,
                1.002,
                60.0,
                0.001
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 3.1",
                "2 <- 0.2",
                "3 <- 3.1",
                "4 <- 0.8",
                "5 <- 0.7",
                "6 <- 0.7",
                "7 <- 2.9",
                "8 <- 3.1",
                "9 <- 3.8"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 9 = 3 (left: 1 9 3) || 9 / 3 = 3 (left: 1 3)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "1 * 9 = 9 (left: 9 9 12) || 9 * 9 = 81 (left: 12 81)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 9 = 3 (left: 1 9  || 9 * 1 = 9 (left: 9 9)",
                "12 - 9 = 3 (left: 1 9 3) || 3 * 9 = 27 (left:",
                "12 - 9 = 3 (left: 1 9 3) || 1 * 9 = 9 (left: 9 3)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 1 = 8 (left: 8 3) || 8 * 3 = 24 (left: 24)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 1 = 8 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (9 - (12 - 9)) = 24"
            ],
            "Evaluation": [
                20.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.001,
                60.0,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 0.8",
                "2 <- 4.7",
                "3 <- 2.9",
                "4 <- 0.7",
                "5 <- 4.7",
                "6 <- 3.1",
                "7 <- 2.9",
                "8 <- 2.9",
                "9 <- 3.8"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 9 = 3 (left: 1 9  || 1 * 9 = 9 (left: 9)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 1 = 8 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: (9 - 1) * (12 - 9) = 24",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 1 = 8 (left: 8 3) || 8 * 3 = 24 (left: 24)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 1 = 8 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: (12 - 9) * (9 - 1) = 24",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 3 = 6 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 1 = 8 (left: 8 3) || 8 * 3 = 24 (left: 24)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 1 = 8 (left: 8 3) || 8 * 3 = 24 (left: 24)",
                "12 - 9 = 3 (left: 1 9 3) || 9 - 1 = 8 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: (12 - 9) * (9 - 1) = 24"
            ]
        },
        "Input": "1 9 9 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "63": {
        "puzzle": "2 3 3 12",
        "Step 0": {
            "steps": [
                "12 - 2 = 10 (left: 3 10 12)",
                "3 * 3 = 9 (left: 2 12 9)",
                "3 * 3 = 9 (left: 2 9 12)",
                "3 * 3 = 9 (left: 2 9 12)",
                "12 - 2 = 10 (left: 3 3 10)",
                "3 * 4 = 12 (left: 2 12 12)",
                "3 + 3 = 6 (left: 2 6 12)",
                "12 - 2 = 10 (left: 3 3 10)",
                "12 - 2 = 10 (left: 3 3 10)",
                "12 - 2 = 10 (left: 3 3 10)"
            ],
            "Evaluation": [
                1.002,
                20.002,
                1.002,
                1.002,
                3.0,
                0.003,
                3.0,
                2.001,
                1.001,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.2",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 0.0",
                "7 <- 0.1",
                "8 <- 0.1",
                "9 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "3 * 3 = 9 (left: 2 9 12)",
                "3 * 3 = 9 (left: 2 9 12)",
                "3 * 3 = 9 (left: 2 9 12) || 9 / 2 = 4.5 (left: 4.5 12)",
                "12 - 2 = 10 (left: 3 3 10)",
                "12 - 3 = 9 (left: 2 3 9)",
                "3 * 3 = 9 (left: 9 3 12)",
                "12 - 2 = 10 (left: 3 10 12) || 12 - 10 = 2 (left: 3 2 12)",
                "3 * 3 = 9 (left: 2 12 9) || 9 - 2 = 7 (left: 7)",
                "3 * 3 = 9 (left: 2 12 9) || 2 * 12 = 24 (left: 9 24)",
                "3 * 3 = 9 (left: 2 12 9) || 12 / 2 = 6 (left: 6 9)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                0.003,
                2.001,
                1.002,
                3.0,
                2.001,
                0.001,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.1",
                "2 <- 1.3",
                "3 <- 0.1",
                "4 <- 0.1",
                "5 <- INIT",
                "6 <- 1.3",
                "7 <- 0.6",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "3 * 3 = 9 (left: 2 9 12)",
                "3 * 3 = 9 (left: 2 12 9) || 9 + 2 = 11 (left: 12 11)",
                "12 - 2 = 10 (left: 3 3 10) || 10 / 3 = 3.33 (left: 3 3.33)",
                "3 * 3 = 9 (left: 2 12 9) || 9 + 2 = 11 (left: 11)",
                "3 * 3 = 9 (left: 2 12 9) || 2 * 12 = 24 (left: 9 24)",
                "3 + 3 = 6 (left: 2 6 12)",
                "12 - 2 = 10 (left: 3 3 10) || 10 - 3 = 7 (left: 3 7)",
                "3 + 3 = 6 (left: 2 6 12) || 6 - 2 = 4 (left: 4 12)",
                "12 - 3 = 9 (left: 2 3 9)",
                "3 * 3 = 9 (left: 2 9 12)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                22.0,
                0.003,
                0.002,
                1.002,
                1.0,
                0.003,
                1.002,
                2.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 2.8",
                "2 <- 1.5",
                "3 <- INIT",
                "4 <- 2.8",
                "5 <- 0.7",
                "6 <- 2.2",
                "7 <- 1.3",
                "8 <- 0.4",
                "9 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "3 * 3 = 9 (left: 2 12 9) || 12 - 2 = 10 (left: 10 9)",
                "12 - 3 = 9 (left: 2 3 9) || Possible next steps",
                "3 * 3 = 9 (left: 9 3 12) || 12 - 9 = 3 (left: 3 12)",
                "12 - 2 = 10 (left: 3 10 12)",
                "12 - 3 = 9 (left: 2 3 9) || Input: 5 5 10",
                "12 - 2 = 10 (left: 3 3 10) || 10 - 3 = 7 (",
                "12 - 2 = 10 (left: 3 3 10) || 10 / 3 = 3.33 (left: 3 3.33) || 3 - 3.33 = -0.33 (left: -0.33)",
                "12 - 2 = 10 (left: 3 3 10) || 3 / 3 = 1 (left: 1 10)",
                "12 - 2 = 10 (left: 3 3 10) || 10 + 3 = 13 (left: 3 13)",
                "12 / 3 = 4 (left: 2 3 4)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                0.003,
                0.003,
                0.003,
                0.002,
                60.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 3.9",
                "1 <- 3.7",
                "2 <- INIT",
                "3 <- 3.7",
                "4 <- 2.2",
                "5 <- 0.4",
                "6 <- 2.2",
                "7 <- 3.7",
                "8 <- 3.9",
                "9 <- 3.7"
            ]
        },
        "Step 4": {
            "steps": [
                "12 / 3 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12)",
                "12 - 2 = 10 (left: 3 3 10) || 3 / 3 = 1 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "12 / 3 = 4 (left: 2 3 4)",
                "12 - 2 = 10 (left: 3 3 10) || 3 / 3 = 1 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 - 2 = 10 (left: 3 3 10) || 10 / 3 = 3.33 (left: 3 3.33) || 3 - 3.33 = -0.33 (left: -0.33)",
                "12 - 2 = 10 (left: 3 3 10) || 10 / 3 = 3.33 (left: 3.33 3)",
                "12 - 2 = 10 (left: 3 3 10) || 10 / 3 = 3.33 (left: 3 3.33) || 3 * 3.33 = 9.99 (left: 9.99)",
                "12 - 2 = 10 (left: 3 3 10) || 3 / 3 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "12 / 3 = 4 (left: 2 3 4) || 4 - 2 = 2 (left: 2 3)",
                "12 - 2 = 10 (left: 3 3 10) || 3 / 3 = 1 (left: 1 10) || 1 * 10 = 10 (left: 10)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                60.0,
                0.003,
                0.003,
                0.002,
                0.003,
                0.001,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 4.0",
                "2 <- 3.2",
                "3 <- 0.1",
                "4 <- 3.7",
                "5 <- 4.0",
                "6 <- 0.9",
                "7 <- 3.9",
                "8 <- 4.2",
                "9 <- 3.9"
            ]
        },
        "Step 5": {
            "steps": [
                "12 / 3 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12)",
                "12 / 3 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "3 * 3 = 9 (left: 9 3 12) || 12 - 9 = 3 (left: 3 12) || 12 - 3 = 9 (left: 9)",
                "3 * 3 = 9 (left: 2 12 9) || 12 / 2 = 6 (left: 6)",
                "12 - 2 = 10 (left: 3 3 10) || 3 / 3 = 1 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 / 3 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "12 - 2 = 10 (left: 3 3 10) || 10 - 3 = 7 (left: 3 7)",
                "12 / 3 = 4 (left: 2 3 4) || 4 - 2 = 2 (left: 2 3)",
                "12 / 3 = 4 (left: 2 3 4) || 4 - 2 = 2 (left: 2 3)",
                "12 / 3 = 4 (left: 2 3 4) || Input: 5 6 7"
            ],
            "Evaluation": [
                60.0,
                0.002,
                0.002,
                0.002,
                0.001,
                0.001,
                1.0,
                0.002,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 3.7",
                "1 <- 4.0",
                "2 <- 4.0",
                "3 <- 4.0",
                "4 <- 3.9",
                "5 <- 4.2",
                "6 <- INIT",
                "7 <- 3.9",
                "8 <- 3.7",
                "9 <- 3.9"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 2 = 10 (left: 3 3 10) || 3 / 3 = 1 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "12 / 3 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 / 2 = 6",
                "12 / 3 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 + 2 = 14 (left: 14)",
                "12 / 3 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "12 / 3 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12)",
                "12 / 3 = 4 (left: 2 3 4) || 4 - 2 = 2 (left: 2 3)",
                "12 - 2 = 10 (left: 3 3 10)",
                "12 / 3 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12)",
                "12 - 2 = 10 (left: 3 3 10) || 3 / 3 = 1 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "12 / 3 = 4 (left: 2 3 4) || Input: 5 10 15"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.001,
                0.001,
                60.0,
                20.001,
                2.0,
                60.0,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 3.7",
                "2 <- 6.7",
                "3 <- 6.7",
                "4 <- 6.7",
                "5 <- 6.7",
                "6 <- 6.4",
                "7 <- 5.0",
                "8 <- 6.7",
                "9 <- 4.0"
            ]
        },
        "Step 7": {
            "steps": [
                "3 * 3 = 9 (left: 2 12 9) || 12 - 2 = 10 (left: 10 9)",
                "12 - 2 = 10 (left: 3 3 10) || 3 / 3 = 1 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "12 / 3 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "12 / 3 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "12 / 3 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 / 3 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "12 / 3 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "12 / 3 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 / 3 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "12 / 3 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 - 2 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                60.0,
                0.003,
                0.003,
                0.003,
                0.002,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 7.8",
                "2 <- 6.7",
                "3 <- 7.3",
                "4 <- 6.5",
                "5 <- 2.2",
                "6 <- 5.0",
                "7 <- 6.7",
                "8 <- 4.0",
                "9 <- 7.8"
            ]
        },
        "Step 8": {
            "steps": [
                "12 / 3 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 / 2 = 6 (left: 6 12)",
                "12 / 3 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (2 * (3 * (12 / 3))) = 24",
                "12 / 3 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 + 2 = 14 (left: 14)",
                "12 / 3 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (2 * (3 * (12 / 3))) = 24",
                "12 / 3 = 4 (left: 2 3 4) || 4 - 2 = 2 (left: 2 3) || 3 - 2 = 1 (left: 1)",
                "12 - 2 = 10 (left: 3 3 10) || 10 / 3 = 3.33 (left: 3 3.33) || 3 / 3.33 = 0.9 (left: 0.9)",
                "12 / 3 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 / 3 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "12 / 3 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "12 / 3 = 4 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: 2 * (3 * (3 + 12)) = 24"
            ]
        },
        "Input": "2 3 3 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "64": {
        "puzzle": "3 4 4 8",
        "Step 0": {
            "steps": [
                "8 - 4 = 4 (left: 3 4 4)",
                "4 / 3 = 1.33 (left: 1.33 4 8)",
                "3 * 4 = 12 (left: 12 4 8)",
                "3 * 4 = 12 (left: 4 8 12)",
                "8 - 4 = 4 (left: 3 4 4)",
                "4 * 3 = 12 (left: 4 8 12)",
                "4 * 3 = 12 (left: 4 8 12)",
                "8 - 4 = 4 (left: 3 4 4)",
                "8 - 4 = 4 (left: ",
                "8 - 4 = 4 (left: 3 4 4)"
            ],
            "Evaluation": [
                20.001,
                3.0,
                60.0,
                2.001,
                1.002,
                40.001,
                2.001,
                1.002,
                0.0,
                20.002
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.2",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 0.5",
                "6 <- INIT",
                "7 <- 0.9",
                "8 <- 0.9",
                "9 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "4 * 3 = 12 (left: 4 8 12) || 8 / 4 = 2 (left: 2 12)",
                "3 * 4 = 12 (left: 12 4 8) || 4 * 8 = 32 (left: 12 32)",
                "4 * 3 = 12 (left: 4 8 12)",
                "8 - 4 = 4 (left: 3 4 4)",
                "3 * 4 = 12 (left: 4 8 12)",
                "4 * 3 = 12 (left: 4 8 12) || 12 - 8 = 4 (",
                "8 - 4 = 4 (left: 3 4 4)",
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4)",
                "8 - 4 = 4 (left: 3 4 4) || 4 * 3 = 12 (left: 12 4)",
                "8 - 4 = 4 (left: 3 4 4) || 3 * 4 = 12 (left: 4 12)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                3.0,
                0.003,
                22.0,
                0.003,
                1.002,
                60.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.9",
                "2 <- 0.0",
                "3 <- 0.5",
                "4 <- 0.2",
                "5 <- 0.2",
                "6 <- 0.2",
                "7 <- 0.2",
                "8 <- 0.5",
                "9 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "4 / 3 = 1.333 (left: 1.333 4 8)",
                "8 - 4 = 4 (left: 3 4 4) || 3 * 4 = 12 (left: 4 12)",
                "8 - 4 = 4 (left: 3 4 4) || Possible",
                "4 * 3 = 12 (left: 4 8 12) || 12 - 4 = 8 (left: 8 8)",
                "3 * 4 = 12 (left: 12 4 8) || 4 * 8 = 32 (left: 12 32)",
                "3 * 4 = 12 (left: 12 4 8) || 4 * 8 = 32 (left: 12 32)",
                "3 * 4 = 12 (left: 12 4 8) || 12 / 4 = 3 (left: 3 8)",
                "3 * 4 = 12 (left: 12 4 8) || 4 * 8 = 32 (left: 32)",
                "4 * 3 = 12 (left: 4 8 12) || 12 - 4 = 8 (left: 8 12)",
                "4 * 3 = 12 (left: 4 8 12) || 8 / 4 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)"
            ],
            "Evaluation": [
                2.001,
                0.003,
                0.003,
                0.003,
                0.001,
                1.002,
                60.0,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- INIT",
                "2 <- 0.2",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 0.9",
                "6 <- 0.2",
                "7 <- 1.7",
                "8 <- 0.0",
                "9 <- 1.7"
            ]
        },
        "Step 3": {
            "steps": [
                "4 * 3 = 12 (left: 4 8 12) || 8 / 4 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "4 + 3 = 7 (left: 4 7 8)",
                "3 * 4 = 12 (left: 12 4 8) || 12 - 4 = 8 (left: 8 8)",
                "8 - 4 = 4 (left: 3 4 4)",
                "3 * 4 = 12 (left: 4 8 12)",
                "8 - 4 = 4 (left: 3 4 4) || Input: 5 5 10",
                "3 * 4 = 12 (left: 12 4 8) || 12 * 4 = 48 (left: 8 48)",
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "8 - 4 = 4 (left: 3 4 4) || 4 + 3 = 7 (left: 3 7)",
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4) || 4 * 1 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.002,
                21.0,
                0.003,
                20.002,
                22.0,
                0.003,
                0.0,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 2.0",
                "1 <- 1.0",
                "2 <- 3.3",
                "3 <- 3.4",
                "4 <- 0.2",
                "5 <- INIT",
                "6 <- 2.6",
                "7 <- 0.0",
                "8 <- 1.4",
                "9 <- 1.7"
            ]
        },
        "Step 4": {
            "steps": [
                "4 / 3 = 1.333 (left: 1.333 4 8) || 4 * 8 = 32 (left: 1.333 32)",
                "4 * 3 = 12 (left: 4 8 12) || 8 / 4 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "8 - 4 = 4 (left: 3 4 4) || 3 * 4 = 12 (left: 4 12)",
                "3 * 4 = 12 (left: 4 8 12) || 12 / 4 = 3 (left: 3 12)",
                "3 * 4 = 12 (left: 12 4 8) || 4 * 8 = 32 (left: 12 32)",
                "4 * 3 = 12 (left: 4 8 12)",
                "3 * 4 = 12 (left: 12 4 8) || 12 / 4 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) ",
                "8 - 4 = 4 (left: 3 4 4) || 4 / 3 = 1.33 (left: 1.33 4)",
                "3 * 4 = 12 (left: 4 8 12) || 12 - 4 = 8 (left: 8 12)",
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4) || 1 * 4 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                21.001,
                60.0,
                0.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 4.6",
                "2 <- 4.6",
                "3 <- 2.6",
                "4 <- 0.2",
                "5 <- 4.5",
                "6 <- 4.6",
                "7 <- 4.6",
                "8 <- 1.0",
                "9 <- 0.5"
            ]
        },
        "Step 5": {
            "steps": [
                "8 - 4 = 4 (left: 3 4 4) || 4 - 3 = 1 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "3 * 4 = 12 (left: 12 4 8) || 12 / 4 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)  || Answer: ((3 * 4) / 4) * 8 = 24",
                "3 * 4 = 12 (left: 12 4 8) || 12 / 4 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)  || Answer: (3 * 4) * (8 / 4) = 24",
                "3 * 4 = 12 (left: 12 4 8) || 12 / 4 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "3 * 4 = 12 (left: 12 4 8) || 8 / 4 = 2 (left: 12 8)",
                "4 * 3 = 12 (left: 4 8 12) || 8 * 12 = 96 (left:",
                "3 * 4 = 12 (left: 12 4 8) || 12 / 4 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)  || Answer: (3 * (4 * 4)) = 24",
                "3 * 4 = 12 (left: 12 4 8) || 12 / 4 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)  || Answer: (3 * 4) * (4 + 8) = 24",
                "4 * 3 = 12 (left: 4 8 12) || 8 / 4 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "4 * 3 = 12 (left: 4 8 12) || 8 / 4 = 2 (left: 2 12 32)"
            ]
        },
        "Input": "3 4 4 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "65": {
        "puzzle": "3 8 10 10",
        "Step 0": {
            "steps": [
                "10 + 3 = 13 (left: 8 10 13)",
                "8 - 3 = 5 (left: 5 10 10)",
                "3 * 8 = 24 (left: 10 10 24)",
                "3 * 8 = 24 (left: 10 10 24)",
                "10 + 3 = 13 (left: 8 10 13)",
                "3 * 8 = 24 (left: 10 10 24)",
                "10 - 8 = 2 (left: 2 10 10)",
                "10 - 3 = 7 (left: 7 10 10)",
                "10 - 3 = 7 (left: ",
                "10 - 3 = 7 (left: 7 10 10)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                20.002,
                1.002,
                60.0,
                21.001,
                0.003,
                1.001,
                0.0,
                2.001
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- INIT",
                "2 <- 0.5",
                "3 <- INIT",
                "4 <- 0.4",
                "5 <- 0.5",
                "6 <- 0.5",
                "7 <- 0.2",
                "8 <- 0.4",
                "9 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "10 + 3 = 13 (left: 8 10 13) || 10 + 13 = 23 (left: 8 23)",
                "3 * 8 = 24 (left: 10 10 24)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24)",
                "10 / 3 = 3.333 (left: 3.333 8 10)",
                "10 + 3 = 13 (left: 8 10 13) || 8 * 10 = 80 (left: 80 13)",
                "3 * 8 = 24 (left: 10 10 24) || 24 - 10 = 14 (left: 10 14)",
                "3 * 8 = 24 (left: 10 10 24) || 10 / 10 = 1 (left: 1 10 24)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 24)",
                "10 + 3 = 13 (left: 8 10 13) || 13 - 10 = 3 (left: 3 10)",
                "3 * 8 = 24 (left: 10 10 24) || 24 - 10 = 14 (left: 10 14)"
            ],
            "Evaluation": [
                0.002,
                1.002,
                21.001,
                3.0,
                1.002,
                60.0,
                1.002,
                60.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.2",
                "2 <- 1.7",
                "3 <- 1.9",
                "4 <- 1.9",
                "5 <- 1.9",
                "6 <- 1.9",
                "7 <- 1.2",
                "8 <- 1.5",
                "9 <- 1.5"
            ]
        },
        "Step 2": {
            "steps": [
                "8 / 3 = 2.6667 (approximated) (left: 2.6667 10 10)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 24 / 10 = 2.4 (left: 0 2.4)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 24) || 5 * 3 = 15 (left: 15)",
                "3 * 8 = 24 (left: 10 10 24) || 24 - 10 = 14 (left: 10 14) || 10 * 14 = 140 (left: 14 140)",
                "3 * 8 = 24 (left: 10 10 24) || 24 - 10 = 14 (left: 10 14) || 14 / 10 = 1.4 (left: 1.4)",
                "3 * 8 = 24 (left: 10 10 24) || 24 - 10 = 14 (left: 10 14) || 10 / 14 = 0.7142857142857143 (left: 0.7142857142857143)",
                "3 * 8 = 24 (left: 10 10 24) || 24 - 10 = 14 (left: 10 14) || 10 / 14 = 0.7142857142857143 (left: 0.7142857142857143)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 24 - 10 = 14 (left: 0 14 24)",
                "3 * 8 = 24 (left: 10 10 24) || 24 - 10 = 14 (left: 10 14) || 10 / 14 = 0.7142857142857143 (left: 0.7142857142857143)",
                "3 * 8 = 24 (left: 10 10 24) || 24 - 10 = 14 (left: 10 14) || 10 - 14 = -4 (left: -4)"
            ],
            "Evaluation": [
                1.002,
                20.001,
                0.001,
                0.002,
                0.0,
                1.001,
                0.0,
                0.003,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 1.9",
                "2 <- 1.2",
                "3 <- 1.5",
                "4 <- 1.7",
                "5 <- 1.5",
                "6 <- 2.1",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 24 / 10 = 2.4 (left: 0 2.4) || 0 * 2.4 = 0 (left: 0)",
                "3 * 8 = 24 (left: 10 10 24) || 24 - 10 = 14 (left: 10 14) || 14 / 10 = 1.4 (left: 1.4)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 10 / 2 = 5 (left: 0 5 24)",
                "3 * 8 = 24 (left: 10 10 24) || 24 - 10 = 14 (left: 10 14) || 14 - 10 = 4 (left: 4)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24)",
                "3 * 8 = 24 (left: 10 10 24) || 24 - 10 = 14 (left: 10 14) || 10 * 14 = 140 (left: 140)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 24 / 10 = 2.4 (left: 0 2.4) || 0 * 2.4 = 0 (left: 0)",
                "10 - 3 = 7 (left: ",
                "10 + 3 = 13 (left: 8 10 13)",
                "3 * 8 = 24 (left: 10 10 24)"
            ],
            "Evaluation": [
                0.003,
                20.0,
                0.002,
                0.0,
                60.0,
                0.003,
                0.001,
                0.0,
                20.002,
                20.002
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- INIT",
                "2 <- 2.1",
                "3 <- 1.7",
                "4 <- 3.9",
                "5 <- 3.8",
                "6 <- 1.2",
                "7 <- 3.8",
                "8 <- 1.5",
                "9 <- 1.9"
            ]
        },
        "Step 4": {
            "steps": [
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 24 / 10 = 2.4 (left: 0 2.4) || 0 * 2.4 = 0 (left: 2.4)",
                "3 * 8 = 24 (left: 10 10 24)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 24 / 10 = 2.4 (left: 0 2.4) || 0 - 2.4 = -2.4 (left: -2.4)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 24) || 24 / 0 = undefined (left: 0 24)",
                "3 * 8 = 24 (left: 10 10 24) || 24 + 10 = 34 (left: 10 34)",
                "10 + 3 = 13 (left: 8 10 13) || 13 / 10 = ",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 24 - 10 = 14 (left: 0 14)",
                "10 + 3 = 13 (left: 8 10 13) || 13 - 8 = 5 (left: 8 5)",
                "3 * 8 = 24 (left: 10 10 24) || 24 - 10 = 14 (left: 10 14) || 10 * 14 = 140 (left: 140)",
                "3 * 8 = 24 (left: 10 10 24) || 24 - 10 = 14 (left: 10 14) || 10 / 14 = 0.7142857142857143 (left: 0.7142857142857143)"
            ],
            "Evaluation": [
                0.003,
                2.001,
                0.002,
                60.0,
                0.002,
                0.003,
                0.0,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 3.4",
                "2 <- 3.9",
                "3 <- 1.9",
                "4 <- 1.7",
                "5 <- 3.1",
                "6 <- 4.3",
                "7 <- 3.1",
                "8 <- 3.9",
                "9 <- 1.2"
            ]
        },
        "Step 5": {
            "steps": [
                "10 + 3 = 13 (left: 8 10 13) || 10 + 13 = 23 (left: 8 23)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: (3 * 8) - (10 - 10) = 24",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24)",
                "3 * 8 = 24 (left: 10 10 24) || 24 - 10 = 14 (left: 10 14) || 10 * 14 = 140 (left: 140)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 24) || 24 - 0 = 24 (left: 24)",
                "3 * 8 = 24 (left: 10 10 24) || 24 - 10 = 14 (left: 10 14) || 14 / 10 = 1.4 (left: 1.4) || 1.4 - 2 = -0.6 (left: -0.6)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 24) || 24 / 0 = undefined (left: 0 24) || 24 - 0 = 24 (left: 24)",
                "3 * 8 = 24 (left: 10 10 24) || 24 - 10 = 14 (left: 10 14) || 14 / 10 = 1.4 (left: 1.4) || 1.4 / 2 = 0.7 (left: 0.7)",
                "3 * 8 = 24 (left: 10 10 24) || 10 / 10 = 1 (left: 1 10 24)",
                "3 * 8 = 24 (left: 10 10 24) || 10 - 10 = 0 (left: 0 10 24) || 24 - 10 = 14 (left: 0 14)"
            ]
        },
        "Input": "3 8 10 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "66": {
        "puzzle": "3 8 9 9",
        "Step 0": {
            "steps": [
                "9 + 3 = 12 (left: 8 9 12)",
                "8 / 3 = 2.67 (left: 2.67 8 9)",
                "3 * 8 = 24 (left: 9 9 24)",
                "3 * 8 = 24 (left: 9 9 24)",
                "9 + 3 = 12 (left: 8 9 12)",
                "3 * 8 = 24 (left: 9 9 24)",
                "3 * 8 = 24 (left: 9 9 24)",
                "9 + 3 = 12 (left: 8 9 12)",
                "9 - 3 = 6 (left",
                "9 + 3 = 12 (left: 8 9 12)"
            ],
            "Evaluation": [
                3.0,
                1.002,
                0.003,
                0.003,
                3.0,
                1.002,
                2.001,
                3.0,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.0",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "8 / 3 = 2.66666666667 (left: 2.66666666667 9 9)",
                "3 * 8 = 24 (left: 9 9 24)",
                "3 * 8 = 24 (left: 9 9 24)",
                "9 + 3 = 12 (left: 8 9 12) || 9 - 8 = 1 (left: 1 12)",
                "3 * 8 = 24 (left: 9 9 24)",
                "3 * 8 = 24 (left: 9 9 24)",
                "9 + 3 = 12 (left: 8 9 12)",
                "9 - 3 = 6",
                "9 + 3 = 12 (left: 8 9 12)",
                "3 * 8 = 24 (left: 9 9 24)"
            ],
            "Evaluation": [
                41.0,
                1.001,
                0.002,
                0.003,
                0.003,
                0.001,
                1.002,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 0.5",
                "2 <- 1.0",
                "3 <- 1.0",
                "4 <- INIT",
                "5 <- 1.0",
                "6 <- 1.0",
                "7 <- 1.0",
                "8 <- INIT",
                "9 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "8 / 3 = 2.66666666667 (left: 2.66666666667 9 9) || 9 / 2.66666666667 = 3.375 (left: 3.375 9)",
                "3 * 8 = 24 (left: 9 9 24) || 9 / 9 = 1 (left: 1 24)",
                "8 / 3 = 2.66666666667 (left: 2.66666666667 9 9) || 9 * 2.66666666667 = 24 (left: ",
                "8 / 3 = 2.66666666667 (left: 2.66666666667 9 9) || 9 + 2.66666666667 = 11.66666666667 (left: 9 11.66666666667)",
                "3 * 8 = 24 (left: 9 9 24)",
                "8 / 3 = 2.66666666667 (left: 2.66666666667 9 9) || 9 * 2.66666666667 = 24 (left: ",
                "8 / 3 = 2.66666666667 (left: 2.66666666667 9 9) || 9 + 2.66666666667 = 11.66666666667 (left: 9 11.66666666667)",
                "8 / 3 = 2.66666666667 (left: 2.66666666667 9 9) || 9 * 2.66666666667 = 24 (left: 9 24)",
                "9 + 3 = 12 (left: 8 9 12)",
                "8 / 3 = 2.66666666667 (left: 2.66666666667 9 9) || 9 + 2.66666666667 = 11.666666"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.0,
                2.001,
                1.002,
                0.0,
                21.0,
                0.002,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 2.6",
                "2 <- 1.0",
                "3 <- 1.0",
                "4 <- INIT",
                "5 <- 2.6",
                "6 <- 2.1",
                "7 <- 2.6",
                "8 <- 2.6",
                "9 <- 2.6"
            ]
        },
        "Step 3": {
            "steps": [
                "8 / 3 = 2.66666666667 (left: 2.66666666667 9 9) || 9 / 2.66666666667 = 3.375 (left: 3.375 9)",
                "8 / 3 = 2.66666666667 (left: 2.66666666667 9 9) || 9 + 2.66666666667 = 11.66666666667 (left: 9 11.66666666667) || 9 / 11.66666666667 = 0.77142857143 (left: 0.771428571",
                "8 / 3 = 2.66666666667 (left: 2.66666666667 9 9) || 9 * 2.66666666667 = 24 (left: ",
                "8 / 3 = 2.66666666667 (left: 2.66666666667 9 9) || 9 + 2.66666666667 = 11.66666666667 (left: 9 11.66666666667)",
                "3 * 8 = 24 (left: 9 9 24)",
                "8 / 3 = 2.66666666667 (left: 2.66666666667 9 9) || 9 + 2.66666666667 = 11.66666666667 (left: 9 11.66666666667) || 11.66666666667 / 9 = 1.2962962963 (left: 1.296296296",
                "3 * 8 = 24 (left: 9 9 24) || 9 / 9 = 1 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "8 / 3 = 2.66666666667 (left: 2.66666666667 9 9) || 9 + 2.66666666667 = 11.66666666667 (left: 9 11.66666666667) || 11.66666666667 - 9 = 2.66666666667 (left: 2.66666666667)",
                "8 / 3 = 2.66666666667 (left: 2.66666666667 9 9) || 9 + 2.66666666667 = 11.66666666667 (left: 9 11.66666666667) || 9 * 11.66666666667 = 105 (left: 105)",
                "8 / 3 = 2.66666666667 (left: 2.66666666667 9 9) || 9 + 2.66666666667 = 11.66666666667 (left: 9 11.66666666667) || 9 / 11.66666666667 = 0.77142857143 (left: 0.771428571"
            ],
            "Evaluation": [
                1.002,
                0.002,
                0.0,
                21.001,
                1.002,
                0.002,
                0.002,
                0.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.1",
                "2 <- INIT",
                "3 <- 3.3",
                "4 <- 2.1",
                "5 <- 2.1",
                "6 <- 3.3",
                "7 <- 3.3",
                "8 <- 2.1",
                "9 <- 2.1"
            ]
        },
        "Step 4": {
            "steps": [
                "8 / 3 = 2.67 (left: 2.67 8 9)",
                "3 * 8 = 24 (left: 9 9 24) || 9 / 9 = 1 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "3 * 8 = 24 (left: 9 9 24)",
                "8 / 3 = 2.66666666667 (left: 2.66666666667 9 9) || 9 + 2.66666666667 = 11.66666666667 (left: 9 11.66666666667) || 9 * 11.66666666667 = 105 (left: 105)",
                "3 * 8 = 24 (left: 9 9 24) || 9 / 9 = 1 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "3 * 8 = 24 (left: 9 9 24) || 9 / 9 = 1 (left: 1 24) || 5 + 5 = 10 (left: 10 5)",
                "8 / 3 = 2.66666666667 (left: 2.66666666667 9 9) || 9 + 2.66666666667 = 11.66666666667 (left: 9 11.66666666667) || 9 * 11.66666666667 = 105 (left: 105)",
                "8 / 3 = 2.66666666667 (left: 2.66666666667 9 9) || 9 + 2.66666666667 = 11.66666666667 (left: 9 11.66666666667) || 11.66666666667 - 9 = 2.66666666667 (left: 2.66666666667)",
                "3 * 8 = 24 (left: 9 9 24) || 9 / 9 = 1 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "3 * 8 = 24 (left: 9 9 24) || 9 / 9 = 1 (left: 1 24) || 1 * 24 = 24 (left: 24)"
            ],
            "Evaluation": [
                3.0,
                40.0,
                0.003,
                0.003,
                60.0,
                0.002,
                0.002,
                0.0,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 4.4",
                "2 <- 2.1",
                "3 <- 4.9",
                "4 <- 4.9",
                "5 <- 2.1",
                "6 <- 4.9",
                "7 <- 4.4",
                "8 <- 4.4",
                "9 <- INIT"
            ]
        },
        "Step 5": {
            "steps": [
                "3 * 8 = 24 (left: 9 9 24) || 9 / 9 = 1 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (3 * 8) * (9 / 9) = 24",
                "3 * 8 = 24 (left: 9 9 24) || 9 / 9 = 1 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (3 * 8) * (9 / 9) = 24",
                "3 * 8 = 24 (left: 9 9 24) || 9 / 9 = 1 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "3 * 8 = 24 (left: 9 9 24) || 9 / 9 = 1 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (3 * 8) * (9 / 9) = 24",
                "3 * 8 = 24 (left: 9 9 24) || 9 / 9 = 1 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (3 * 8) * (9 / 9) = 24",
                "3 * 8 = 24 (left: 9 9 24) || 9 / 9 = 1 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "3 * 8 = 24 (left: 9 9 24) || 9 / 9 = 1 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (3 * 8) * (9 / 9) = 24",
                "3 * 8 = 24 (left: 9 9 24) || 9 / 9 = 1 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (3 * 8) * (9 / 9) = 24",
                "3 * 8 = 24 (left: 9 9 24) || 9 / 9 = 1 (left: 1 24) || 24 * 1 = 24 (left: 24) || Answer: (3 * 8) * (9 / 9) = 24",
                "3 * 8 = 24 (left: 9 9 24)"
            ]
        },
        "Input": "3 8 9 9",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "67": {
        "puzzle": "2 5 5 12",
        "Step 0": {
            "steps": [
                "12 + 2 = 14 (left: 5 5 14)",
                "5 / 2 = 2.5 (left: 2.5 5 12)",
                "5 * 2 = 10 (left: 5 10 12)",
                "5 / 2 = 2.5 (left: 2.5 5 12)",
                "12 + 2 = 14 (left: 5 5 14)",
                "5 * 2 = 10 (left: 10 5 12)",
                "2 * 5 = 10 (left: 5 10 12)",
                "12 - 5 = 7 (left: 2 7 12)",
                "12 - 5 = 7 (left: ",
                "12 - 2 = 10 (left: 5 10 10)"
            ],
            "Evaluation": [
                0.003,
                21.001,
                1.002,
                22.0,
                20.002,
                0.003,
                2.001,
                1.002,
                0.0,
                22.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.1",
                "3 <- 0.1",
                "4 <- 0.3",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 0.2",
                "8 <- INIT",
                "9 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "5 * 5 = 25 (left: 2 25 12)",
                "5 + 2 = 7 (left: 7 5 12)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 4.8 12)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 - 2.5 = 9.5 (left: 9.5 12)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 - 2.5 = 9.5 (left: 9.5 12)",
                "2 * 5 = 10 (left: 5 10 12)",
                "12 - 2 = 10 (left: 5 10 12)",
                "5 * 2 = 10 (left: 5 10 12) || 12 - 10 = 2 (left: 5 2)",
                "5 * 2 = 10 (left: 10 5 12)",
                "12 + 2 = 14 (left: 5 5 14) || 5 / 5 = 1 (left: 1 14)"
            ],
            "Evaluation": [
                3.0,
                22.0,
                1.002,
                0.002,
                0.003,
                0.003,
                0.003,
                21.001,
                2.001,
                20.001
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 0.9",
                "2 <- 1.9",
                "3 <- 1.9",
                "4 <- 0.1",
                "5 <- 1.7",
                "6 <- 1.1",
                "7 <- 0.3",
                "8 <- 0.9",
                "9 <- 0.9"
            ]
        },
        "Step 2": {
            "steps": [
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 4.8 12) || 12 / 4.8 = 2.5 (left: 2.5 12)",
                "12 - 2 = 10 (left: 5 10 10) || 10 / 5 = 2 (left: 2 10)",
                "12 + 2 = 14 (left: 5 5 14) || 5 / 5 = 1 (left: 1 14) || 14 / 1 = 14 (left: 14)",
                "12 + 2 = 14 (left: 5 5 14) || 5 / 5 = 1 (left: 1 14) || 14 - 1 = 13 (left: 13)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 - 2.5 = 9.5 (left: 5 9.5)",
                "5 * 2 = 10 (left: 5 10 12) || 12 - 10 = 2 (left: 5 2) || 2 * 5 = 10 (left: 10)",
                "5 + 2 = 7 (left: 7 5 12) || 5 + 12 = 17 (left: 7 17)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12",
                "12 - 2 = 10 (left: 5 10 10) || 10 - 5 = 5 (left: 5 10 10)",
                "12 - 2 = 10 (left: 5 10 10) || 10 / 5 = 2 (left: 2 10 10)"
            ],
            "Evaluation": [
                0.003,
                3.0,
                0.002,
                0.002,
                1.002,
                0.002,
                60.0,
                0.003,
                40.001,
                1.001
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- INIT",
                "2 <- 1.9",
                "3 <- 1.7",
                "4 <- 2.6",
                "5 <- 1.9",
                "6 <- 0.4",
                "7 <- 0.3",
                "8 <- 2.6",
                "9 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "5 + 2 = 7 (left: 7 5 12) || 5 * 12 = 60 (left: 7 60)",
                "2 * 5 = 10 (left: 5 10 12)",
                "12 + 2 = 14 (left: 5 5 14) || 5 / 5 = 1 (left: 1 14) || 1 * 14 = 14 (left: 14)",
                "5 * 2 = 10 (left: 5 10 12) || 12 - 10 = 2 (left: 5 2) || 5 * 2 = 10 (left: 10)",
                "5 + 2 = 7 (left: 7 5 12) || 5 + 12 = 17 (left: 7 17) || 17 / 7 = 2.42857142857 (left: 2.42857142857)",
                "12 + 2 = 14 (left: 5 5 14) || 5 / 5 = 1 (left: 1 14) || 1 * 14 = 14 (left: 14)",
                "12 + 2 = 14 (left: 5 5 14) || 5 + 14 = 19 (left: 5 19)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12.5 - 5 = 7.5 (left: 2.5 7.5)",
                "5 + 2 = 7 (left: 7 5 12) || 5 + 12 = 17 (left: 7 17) || 7 - 17 = -10 (left: -10)",
                "5 * 2 = 10 (left: 5 10 12)"
            ],
            "Evaluation": [
                0.002,
                2.001,
                0.001,
                0.002,
                0.002,
                0.001,
                60.0,
                3.0,
                0.001,
                1.002
            ],
            "Resampling": [
                "0 <- 3.6",
                "1 <- 1.1",
                "2 <- 2.6",
                "3 <- 0.9",
                "4 <- 3.6",
                "5 <- INIT",
                "6 <- 2.8",
                "7 <- 2.6",
                "8 <- 2.1",
                "9 <- 3.6"
            ]
        },
        "Step 4": {
            "steps": [
                "12 + 2 = 14 (left: 5 5 14) || 5 + 14 = 19 (left: 5 19) || 19 / 5 = 3.8 (left: 3.8)",
                "5 + 2 = 7 (left: 7 5 12) || 12 - 7 = 5 (left: 5 12)",
                "5 + 2 = 7 (left: 7 5 12) || 5 + 12 = 17 (left: 7 17) || 17 / 7 = 2.42857142857 (left: 2.42857142857)",
                "12 - 2 = 10 (left: 5 10 10) || 10 / 5 = 2 (left: 2 10)",
                "12 + 2 = 14 (left: 5 5 14) || 5 + 14 = 19 (left: 5 19) || 19 / 5 = 3.8 (left: 3.8)",
                "5 + 2 = 7 (left: 7 5 12)",
                "12 - 2 = 10 (left: 5 10 10) || 10 - 5 = 5 (left: 5 10 10) || Input: 3 9 9 27",
                "5 + 2 = 7 (left: 7 5 12) || 5 + 12 = 17 (left: 7 17) || 17 - 7 = 10 (left: 10)",
                "12 - 2 = 10 (left: 5 10 10) || 10 / 5 = 2 (left: 2 10) || 10 - 2 = 8 (left: 8)",
                "12 + 2 = 14 (left: 5 5 14) || 5 + 14 = 19 (left: 5 19) || 19 / 5 = 3.8 (left: 3.8)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.003,
                2.0,
                0.001,
                41.0,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 2.4",
                "2 <- 3.6",
                "3 <- 1.7",
                "4 <- 1.8",
                "5 <- 0.9",
                "6 <- 2.6",
                "7 <- 0.3",
                "8 <- 1.1",
                "9 <- 0.7"
            ]
        },
        "Step 5": {
            "steps": [
                "12 + 2 = 14 (left: 5 5 14) || 5 / 5 = 1 (left: 1 14) || 14 - 1 = 13 (left: 13)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 - 2.5 = 9.5 (left: 5 9.5) || 5 / 9.5 = 0.526 (left: 0.526)",
                "12 + 2 = 14 (left: 5 5 14) || 5 + 14 = 19 (left: 5 19) || Possible next steps:",
                "5 * 2 = 10 (left: 5 10 12) || 12 - 10 = 2 (left: 5 2) || 5 * 2 = 10 (left: 10)",
                "5 * 2 = 10 (left: 10 5 12) || 10 - 5 = 5 (left: 5 12)",
                "12 - 2 = 10 (left: 5 10 10) || Input: 3 6 6",
                "5 + 2 = 7 (left: 7 5 12) || 5 + 12 = 17 (left: 7 17) || 17 - 7 = 10 (left: 10)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 - 5 = 7 (left: 2.5 7)",
                "5 + 2 = 7 (left: 7 5 12) || 12 * 5 = 60 (left: 60)",
                "12 - 5 = 7 (left: 2 7 12) || 2 + 7 = 9 (left: 9 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.002,
                0.003,
                0.002,
                2.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 4.5",
                "2 <- 3.6",
                "3 <- 5.7",
                "4 <- 0.1",
                "5 <- 2.6",
                "6 <- 2.8",
                "7 <- 3.6",
                "8 <- 4.5",
                "9 <- 1.7"
            ]
        },
        "Step 6": {
            "steps": [
                "5 / 2 = 2.5 (left: 2.5 5 12) || 5 * 2.5 = 12.5 (left: 12.5 12)",
                "5 + 2 = 7 (left: 7 5 12) || 12 - 7 = 5 (left: 5 12)",
                "12 + 2 = 14 (left: 5 5 14) || 5 + 14 = 19 (left: 5 19) || 19 / 5 = 3.8 (left: 3.8)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 - 5 = 7 (left: 2.5 7) || 7 / 2.5 = 2.8 (left: 2.8)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 / 2.5 = 4.8 (left: 4.8 12)",
                "5 + 2 = 7 (left: 7 5 12) || 5 + 12 = 17 (left: 7 17) || 17 / 7 = 2.42857142857 (left: 2.42857142857)",
                "12 - 2 = 10 (left: 5 10 10) || 10 - 5 = 5 (left: 5 10 10) || 10 - 5 = 5 (left: 5 10 10)",
                "12 + 2 = 14 (left: 5 5 14) || 5 + 14 = 19 (left: 5 19) || Input: 3 9 3",
                "5 + 2 = 7 (left: 7 5 12) || 5 + 12 = 17 (left: 7 17)",
                "5 * 2 = 10 (left: 5 10 12) || 12 - 10 = 2 (left: 5 2) || 5 / 2 = 2.5 (left: 2.5)"
            ],
            "Evaluation": [
                1.0,
                20.002,
                0.0,
                0.0,
                1.002,
                0.003,
                20.001,
                0.003,
                40.0,
                0.001
            ],
            "Resampling": [
                "0 <- 3.6",
                "1 <- 1.0",
                "2 <- 6.8",
                "3 <- 6.8",
                "4 <- 4.5",
                "5 <- 6.8",
                "6 <- 2.6",
                "7 <- 2.8",
                "8 <- 6.8",
                "9 <- 2.6"
            ]
        },
        "Step 7": {
            "steps": [
                "12 + 2 = 14 (left: 5 5 14) || 5 + 14 = 19 (left: 5 19) || 19 - 5 = 14 (left: 14)",
                "5 * 5 = 25 (left: 2 25 12) || 25 * 2 = 50 (left: 12 50)",
                "5 + 2 = 7 (left: 7 5 12) || 5 + 12 = 17 (left: 7 17) || 7 * 17 = 119 (left: 119)",
                "5 + 2 = 7 (left: 7 5 12) || 5 + 12 = 17 (left: 7 17) || 17 - 7 = 10 (left: 10)",
                "5 + 2 = 7 (left: 7 5 12) || 7 / 5 = 1.4 (left: 1.4 12)",
                "5 + 2 = 7 (left: 7 5 12) || 5 + 12 = 17 (left: 7 17) || 17 / 7 = 2.43 (left: 2.43) ",
                "5 + 2 = 7 (left: 7 5 12) || 5 + 12 = 17 (left: 7 17) || 17 + 7 = 24 (left: 24)",
                "12 - 2 = 10 (left: 5 10 10) || 10 - 5 = 5 (left: 5 10 10) || 10 / 5 = 2 (left: 2 10 ",
                "5 + 2 = 7 (left: 7 5 12) || 5 + 12 = 17 (left: 7 17) || 7 * 17 = 119 (left: 119)",
                "5 + 2 = 7 (left: 7 5 12) || 5 + 12 = 17 (left: 7 17) || 17 / 7 = 2.43 (left: 2.43)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                0.001,
                1.001,
                0.003,
                60.0,
                60.0,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 7.6",
                "1 <- 7.7",
                "2 <- 7.6",
                "3 <- 1.1",
                "4 <- 6.6",
                "5 <- 6.8",
                "6 <- 6.8",
                "7 <- 0.3",
                "8 <- 7.7",
                "9 <- 7.7"
            ]
        },
        "Step 8": {
            "steps": [
                "5 + 2 = 7 (left: 7 5 12) || 5 + 12 = 17 (left: 7 17) || 17 + 7 = 24 (left: 24) || Answer: ((5 + 2) + 5) + 12 = 24",
                "12 - 2 = 10 (left: 5 10 10) || 10 - 5 = 5 (left: 5 10 10) || 10 / 5 = 2 (left: 2 10  || 10 * 2 = 20 (left: 20)",
                "5 + 2 = 7 (left: 7 5 12) || 5 + 12 = 17 (left: 7 17) || 17 + 7 = 24 (left: 24) || Answer: ((5 + 2) + 5) + 12 = 24",
                "5 + 2 = 7 (left: 7 5 12) || 7 - 5 = 2 (left: 2 12)",
                "12 - 2 = 10 (left: 5 10 10) || 10 - 5 = 5 (left: 5 10 10) || 10 - 5 = 5 (left: 5 10 10) || 5 * 10 = 50 (left: 10 50)",
                "5 + 2 = 7 (left: 7 5 12) || 5 + 12 = 17 (left: 7 17) || Input: 24 10 119 2.43 -10 24",
                "5 + 2 = 7 (left: 7 5 12) || 5 + 12 = 17 (left: 7 17) || 17 - 7 = 10 (left: 10)",
                "5 / 2 = 2.5 (left: 2.5 5 12) || 12 + 2.5 = 14.5 (left: 5 14.5)",
                "12 - 2 = 10 (left: 5 10 10) || 10 - 5 = 5 (left: 5 10 10) || 10 / 5 = 2 (left: 2 10  || 10 - 2 = 8 (left: 8) ",
                "12 - 2 = 10 (left: 5 10 10) || 10 - 5 = 5 (left: 5 10 10) || 10 / 5 = 2 (left: 2 10  || 10 * 2 = 20 (left: 20)"
            ]
        },
        "Input": "2 5 5 12",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "68": {
        "puzzle": "11 11 11 13",
        "Step 0": {
            "steps": [
                "13 - 11 = 2 (left: 11 11 2)",
                "11 / 11 = 1 (left: 1 11 13)",
                "11 + 11 = 22 (left: 22 11 13)",
                "11 + 13 = 24 (left: 11 24 11)",
                "13 - 11 = 2 (left: 11 11 2)",
                "11 * 11 = 121 (left: 11 13 121)",
                "11 + 13 = 24 (left: 11 11 24)",
                "11 / 11 = 1 (left: 1 11 13)",
                "13 - 11 = 2 (left: 11 11 2)",
                "11 / 11 = 1 (left: 1 11 13)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                1.002,
                0.002,
                41.0,
                3.0,
                1.002,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.0",
                "2 <- 0.8",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 0.4",
                "6 <- 0.4",
                "7 <- 0.8",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "11 / 11 = 1 (left: 1 11 13)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 2 = 22 (left: 11 22)",
                "13 - 11 = 2 (left: 11 11 2) || 6 / 3",
                "13 - 11 = 2 (left: 11 11 2)",
                "11 * 11 = 121 (left: 121 11 13)",
                "13 - 11 = 2 (left: 11 11 2) || 3 + 3 = 6 (left: 3 6 3)",
                "13 - 11 = 2 (left: 11 11 2) || Input: 3 3 3 3",
                "13 - 11 = 2 (left: 11 11 2) || Possible next steps:",
                "13 - 11 = 2 (left: 11 11 2)",
                "11 * 11 = 121 (left: 11 13 121)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                60.0,
                22.0,
                3.0,
                0.003,
                0.003,
                40.001,
                21.001
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- INIT",
                "2 <- 1.3",
                "3 <- 1.9",
                "4 <- 0.8",
                "5 <- INIT",
                "6 <- 1.8",
                "7 <- 0.0",
                "8 <- 1.9",
                "9 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "13 - 11 = 2 (left: 11 11 2) || Input: 5 5 10",
                "11 * 11 = 121 (left: 121 11 13)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121)",
                "11 * 11 = 121 (left: 11 13 121) || 13 - 11 = 2 (left: 2 121)",
                "13 - 11 = 2 (left: 11 11 2) || 11 - 11 = 0 (left: 0 2)",
                "11 * 11 = 121 (left: 121 11 13)",
                "13 - 11 = 2 (left: 11 11 2) || 11 / 2 = 5.5 (left: 5.5 11)",
                "13 - 11 = 2 (left: 11 11 2) || Input: 3 5 7 2",
                "11 * 11 = 121 (left: 11 13 121) || 13 * 11 = 143 (left: 121 143)",
                "11 / 11 = 1 (left: 1 11 13) || 13 - 1 = 12 (left: 11 12)"
            ],
            "Evaluation": [
                0.003,
                2.001,
                60.0,
                60.0,
                40.001,
                40.001,
                1.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.3",
                "2 <- 2.5",
                "3 <- 2.2",
                "4 <- 2.3",
                "5 <- 2.5",
                "6 <- 2.3",
                "7 <- 2.5",
                "8 <- 2.3",
                "9 <- 1.8"
            ]
        },
        "Step 3": {
            "steps": [
                "11 * 11 = 121 (left: 121 11 13) || 121 / 11 = 11 (left: 11 13)",
                "13 - 11 = 2 (left: 11 11 2) || 6 * 9 = 54 (",
                "11 * 11 = 121 (left: 121 11 13) || 11 * 13 = 143 (left: 121 143)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 - 2 = 119 (left: 2 119)",
                "11 * 11 = 121 (left: 11 13 121) || 13 - 11 = 2 (left: 2 121) || 121 - 2 = 119 (left: 2)",
                "11 * 11 = 121 (left: 121 11 13) || ",
                "11 * 11 = 121 (left: 11 13 121) || 13 - 11 = 2 (left: 2 121) || 121 / 2 = 60.5 (left: 121)",
                "11 * 11 = 121 (left: 121 11 13) || 121 - 13 = 108 (left: 11 108)",
                "11 * 11 = 121 (left: 11 13 121) || 13 - 11 = 2 (left: 2 121) || 121 / 2 = 60.5 (left: 2 60.5)",
                "13 - 11 = 2 (left: 11 11 2) || 3 * 4 = 12 (left: 7 12)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                0.002,
                0.001,
                0.003,
                0.003,
                0.002,
                2.0,
                0.002
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.3",
                "2 <- 2.3",
                "3 <- 2.5",
                "4 <- 2.2",
                "5 <- 2.4",
                "6 <- 1.3",
                "7 <- 1.4",
                "8 <- 0.0",
                "9 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "13 - 11 = 2 (left: 11 11 2) || 11 - 11 = 0 (left: 0 2) || 0 / 2 = 0 (left: 0)",
                "11 * 11 = 121 (left: 11 13 121) || 13 - 11 = 2 (left: 2 121) || 9 / 3 = 3 (left: 3",
                "11 * 11 = 121 (left: 11 13 121) || 13 - 11 = 2 (left: 2 121) || 121 - 2 = 119 (left: 2 119)",
                "11 * 11 = 121 (left: 121 11 13) || 121 / 11 = 11 (left: 11 13)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242)",
                "13 - 11 = 2 (left: 11 11 2) || 11 - 11 = 0 (left: 0 2) || 2 / 0 = undefined",
                "13 - 11 = 2 (left: 11 11 2) || 11 - 2 = 9 (left: 9 11)",
                "11 * 11 = 121 (left: 121 11 13) || 11 - 13 = -2 (left: 121 -2)",
                "13 - 11 = 2 (left: 11 11 2) || 11 - 11 = 0 (left: 0 2)",
                "11 * 11 = 121 (left: 121 11 13) || 121 / 11 = 11 (left: 11 13) || 13 / 11 = 1.18181818182 (left: 1.18181818182)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                1.0,
                60.0,
                60.0,
                0.003,
                2.0,
                0.003,
                20.001,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.3",
                "2 <- 4.4",
                "3 <- 3.0",
                "4 <- 4.3",
                "5 <- 2.2",
                "6 <- 3.0",
                "7 <- 1.9",
                "8 <- 0.4",
                "9 <- 1.8"
            ]
        },
        "Step 5": {
            "steps": [
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121)",
                "13 - 11 = 2 (left: 11 11 2) || 5 + 5 = 10 (left: 5",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || Possible next steps:",
                "11 * 11 = 121 (left: 121 11 13) || 121 / 11 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "11 * 11 = 121 (left: 121 11 13) || 121 / 11 = 11 (left: 11 13) || 4 + 6 = 10 (left: 10 8)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 5 + 25 = 30 (left: 25 30)",
                "11 * 11 = 121 (left: 121 11 13) || 121 / 11 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "11 * 11 = 121 (left: 11 13 121) || 13 * 11 = 143",
                "13 - 11 = 2 (left: 11 11 2) || Input: 3 5 7 9",
                "13 - 11 = 2 (left: 11 11 2) || 5 + 5 = 10 (left: 10 10 8)"
            ],
            "Evaluation": [
                40.001,
                0.002,
                0.003,
                0.003,
                0.003,
                1.002,
                0.003,
                0.003,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 4.4",
                "2 <- 0.8",
                "3 <- 2.2",
                "4 <- 5.0",
                "5 <- 0.5",
                "6 <- 2.5",
                "7 <- 1.8",
                "8 <- 2.5",
                "9 <- 4.3"
            ]
        },
        "Step 6": {
            "steps": [
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 - 2 = 119 (left: 2)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 16 / 4 = 4 (left: 4 64)",
                "13 - 11 = 2 (left: 11 11 2) || 11 - 11 = 0 (left: 0 11)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || Input: 5 25 10",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 2 * 121 = 242 (left: 242)",
                "11 * 11 = 121 (left: 11 13 121) || Input: 5 7",
                "11 * 11 = 121 (left: 121 11 13) || 121 + 11 = 132 (left: 11 13)",
                "13 - 11 = 2 (left: 11 11 2) || Input: 3 5 7 9",
                "11 * 11 = 121 (left: 121 11 13) || 121 + 11 = 132 (left: 132 13)",
                "11 * 11 = 121 (left: 121 11 13) || 121 / 11 = 11 (left: 11 13) || 11 / 13 = 0.8461538461538461 (left: 0.8461538461538461)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                40.0,
                0.003,
                0.003,
                0.003,
                60.0,
                0.003,
                1.001,
                0.0
            ],
            "Resampling": [
                "0 <- 6.6",
                "1 <- 0.0",
                "2 <- 6.2",
                "3 <- 1.4",
                "4 <- 4.3",
                "5 <- 0.8",
                "6 <- 6.1",
                "7 <- 1.8",
                "8 <- 6.2",
                "9 <- 4.3"
            ]
        },
        "Step 7": {
            "steps": [
                "11 * 11 = 121 (left: 121 11 13) || 121 + 11 = 132 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "13 - 11 = 2 (left: 11 11 2) || 4 / 4 = 1 (left: 1",
                "13 - 11 = 2 (left: 11 11 2) || 11 - 11 = 0 (left: 0 11) || 0 - 11 = -11 (left: -11)",
                "11 * 11 = 121 (left: 121 11 13) || 121 + 11 = 132 (left: 132 13)",
                "11 * 11 = 121 (left: 121 11 13) || 121 / 11 = 11 (left: 11 13) || 11 / 13 = 0.846 (left: 0.846)",
                "13 - 11 = 2 (left: 11 11 2) || 2 + 11 = ",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 16 / 4 = 4 (left: 4 64) || 64 - 4 = 60 (left: 60)",
                "13 - 11 = 2 (left: 11 11 2) || 2 * 11 = 22 (left: 11 22)",
                "13 - 11 = 2 (left: 11 11 2) || 11 - 11 = 0 (left: 0 11) || Input: 3 5",
                "11 * 11 = 121 (left: 121 11 13) || 121 / 11 = 11 (left: 11 13) || 11 / 13 \u2248 0.846 (left: 0.846)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.0,
                20.002,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 6.2",
                "2 <- 4.8",
                "3 <- 6.2",
                "4 <- 6.6",
                "5 <- 1.3",
                "6 <- 4.4",
                "7 <- 4.8",
                "8 <- 1.8",
                "9 <- 1.3"
            ]
        },
        "Step 8": {
            "steps": [
                "11 * 11 = 121 (left: 121 11 13) || 121 / 11 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "13 - 11 = 2 (left: 11 11 2) || 11 - 11 = 0 (left: 0 11) || 11 - 11 = 0 (left: 0)",
                "13 - 11 = 2 (left: 11 11 2) || 11 - 11 = 0 (left: 0 2) || 2 * 0 = 0 (left: 0)",
                "13 - 11 = 2 (left: 11 11 2) || 11 - 11 = 0 (left: 0 11) || Input: 4 6 2",
                "11 * 11 = 121 (left: 121 11 13) || 121 + 11 = 132 (left: 11 13) || 11 / 13 = 0.846 (left: 0.846)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 2 = 22 (left: 11 22)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 2 * 242 = 484 (left: 484)",
                "13 - 11 = 2 (left: 11 11 2) || 11 - 11 = 0 (left: 0 2) || 2 / 0 = undefined (left: 0 2)",
                "13 - 11 = 2 (left: 11 11 2) || Input: 3 5 7",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 2 = 22 (left: 11 22)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.003,
                0.003,
                0.003,
                1.002,
                0.003,
                40.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 4.4",
                "2 <- 6.6",
                "3 <- 6.1",
                "4 <- 4.4",
                "5 <- 6.2",
                "6 <- 2.1",
                "7 <- 8.7",
                "8 <- 6.2",
                "9 <- 6.2"
            ]
        },
        "Step 9": {
            "steps": [
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 242 - 242 = 0 (left: 0)",
                "11 * 11 = 121 (left: 121 11 13) || 121 + 11 = 132 (left: 11 13) || 11 / 13 = 0.846153846 (left: 0.846153846)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 16 / 4 = 4 (left: 4 64) || 64 / 4 = 16 (left: 16)",
                "13 - 11 = 2 (left: 11 11 2) || 11 * 11 = 121 (left: 2 121) || 121 * 2 = 242 (left: 2 242) || 242 - 2 = 240 (left: 240)",
                "13 - 11 = 2 (left: 11 11 2) || 11 - 11 = 0 (left: 0 11) || 3 + 3 = 6 (left: 3 6 7)",
                "11 * 11 = 121 (left: 121 11 13) || 121 + 13 = 134 (left: 11 134)",
                "13 - 11 = 2 (left: 11 11 2) || 11 - 11 = 0 (left: 0 2) || 2 / 0 = undefined (left: 0 2) || 2 * 0 = 0 (left: 0) ",
                "13 - 11 = 2 (left: 11 11 2) || 11 - 11 = 0 (left: 0 11) || 11 - 0 = 11 (left: 11)",
                "13 - 11 = 2 (left: 11 11 2) || 11 - 11 = 0 (left: 0 11) || 5 + 3 = 8 (left: 8)"
            ]
        },
        "Input": "11 11 11 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "69": {
        "puzzle": "2 12 13 13",
        "Step 0": {
            "steps": [
                "13 + 2 = 15 (left: 12 13 15)",
                "12 - 2 = 10 (left: 10 13 13)",
                "2 * 12 = 24 (left: 13 13 24)",
                "13 - 12 = 1 (left: 2 1 13)",
                "13 + 2 = 15 (left: 12 13 15)",
                "2 * 12 = 24 (left: 13 13 24)",
                "2 * 12 = 24 (left: 13 13 24)",
                "13 + 2 = 15 (left: 12 13 15)",
                "12 / 2 = 6 (left: 6 13 ",
                "13 + 2 = 15 (left: 12 13 15)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                3.0,
                20.002,
                2.001,
                3.0,
                3.0,
                1.001,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 0.3",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "13 - 12 = 1 (left: 2 1 13) || 2 * 1 = 2 (left: 2 13)",
                "2 * 12 = 24 (left: 13 13 24)",
                "2 * 12 = 24 (left: 13 13 24)",
                "13 + 2 = 15 (left: 12 13 15)",
                "12 - 2 = 10 (left: 10 13 13)",
                "2 * 12 = 24 (left: 13 13 24)",
                "13 - 12 = 1 (left: 2 1 13) || 2 - 1 = 1 (left: 1 13)",
                "13 / 2 = 6.5 (left: 6.",
                "13 - 2 = 11 (left: 12 11 13)",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26)"
            ],
            "Evaluation": [
                0.003,
                40.001,
                2.001,
                1.001,
                0.003,
                1.002,
                0.002,
                21.001,
                1.002,
                20.002
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 1.7",
                "2 <- 1.7",
                "3 <- 0.3",
                "4 <- 1.9",
                "5 <- 1.1",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- 1.9",
                "9 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25)",
                "13 / 2 = 6.5 (left: 6. || 6 * 8 = 48 (left: 8 48)",
                "13 / 2 = 6.5 (left: 6. || 14 - 2 = 12 (left: 12)",
                "13 - 12 = 1 (left: 2 1 13) || 2 - 1 = 1 (left: 1 13)",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25)",
                "2 * 12 = 24 (left: 13 13 24) || 13 - 13 = ",
                "13 - 2 = 11 (left: 11 13 13)",
                "13 - 2 = 11 (left: 12 13 ",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 1 + 26 = 27",
                "13 - 12 = 1 (left: 2 1 13) || 2 / 1 = 2 (left: 2 13)"
            ],
            "Evaluation": [
                0.002,
                41.0,
                0.003,
                0.003,
                60.0,
                20.002,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.4",
                "2 <- 1.9",
                "3 <- 2.1",
                "4 <- 2.4",
                "5 <- 0.5",
                "6 <- 2.4",
                "7 <- 2.4",
                "8 <- 0.3",
                "9 <- 0.5"
            ]
        },
        "Step 3": {
            "steps": [
                "12 / 2 = 6 (left: 6 13 13)",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 / 8 = 3.125 (left: 8)",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 / 1 = 26 (left: 26)",
                "13 / 2 = 6.5 (left: 6. || 6 * 8 = 48 (left: 8 48) || 8 + 40 = 48 (left: 40)",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 * 2 = 50 (left: 50)",
                "2 * 12 = 24 (left: 13 13 24) || Input: 20 5",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 - 8 = 17 (left: 8)",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 * 2 = 50 (left: 2)",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 1 = 2 (left: 2 13)",
                "2 * 12 = 24 (left: 13 13 24) || 13 / 13 = 1 (left: 1 13 24)"
            ],
            "Evaluation": [
                2.001,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.0,
                0.002,
                0.003,
                21.001
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.1",
                "2 <- 1.1",
                "3 <- 2.4",
                "4 <- 1.7",
                "5 <- 2.5",
                "6 <- INIT",
                "7 <- 1.7",
                "8 <- 2.4",
                "9 <- 2.1"
            ]
        },
        "Step 4": {
            "steps": [
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25)",
                "13 / 2 = 6.5 (left: 6. || 6 * 8 = 48 (left: 8 48) || 48 / 8 = 6 (left: 6)",
                "2 * 12 = 24 (left: 13 13 24) || 13 * 13 = 169 (left: 169 24)",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 * 2 = 50 (left: 50)",
                "13 / 2 = 6.5 (left: 6. || There are no possible next steps as there is only one number left.",
                "2 * 12 = 24 (left: 13 13 24) || 13 - 13 =  || 0",
                "13 + 2 = 15 (left: 12 13 15)",
                "13 / 2 = 6.5 (left: 6. || There are no possible next steps with the input of 6.",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 + 1 = 26",
                "13 / 2 = 6.5 (left: 6. || 6 * 8 = 48 (left: 8 48) || 48 / 8 = 6 (left: 6)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                1.001,
                0.002,
                0.002,
                0.003,
                1.002,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.9",
                "1 <- 2.5",
                "2 <- 2.1",
                "3 <- 4.0",
                "4 <- 0.3",
                "5 <- 2.4",
                "6 <- 4.0",
                "7 <- 0.3",
                "8 <- 2.4",
                "9 <- 4.6"
            ]
        },
        "Step 5": {
            "steps": [
                "2 * 12 = 24 (left: 13 13 24) || 13 / 13 = 1 (left: 1 13 24) || 13 * 1 = 13 (left: 13 24)",
                "2 * 12 = 24 (left: 13 13 24) || 13 - 13 =  || 0",
                "13 / 2 = 6.5 (left: 6. || 6 * 8 = 48 (left: 8 48) || 48 - 40 = 8 (left: 8)",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 25 - 1 = 24 (left: 24)",
                "13 - 12 = 1 (left: 2 1 13) || 2 / 1 = 2 (left: 2 13)",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 / 2 = 12.5",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 25 / 1 = 25 (left: 25)",
                "13 - 12 = 1 (left: 2 1 13) || 1 / 13 = 0.07692307692 (left: 0.07692307692)",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 + 25 = 50",
                "13 + 2 = 15 (left: 12 13 15) || 15 - 12 = 3 (left: 3 15)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.001,
                60.0,
                0.002,
                0.003,
                20.002,
                20.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.7",
                "1 <- 5.6",
                "2 <- 5.3",
                "3 <- 3.9",
                "4 <- 3.9",
                "5 <- 5.3",
                "6 <- 2.4",
                "7 <- 4.0",
                "8 <- 2.4",
                "9 <- 4.0"
            ]
        },
        "Step 6": {
            "steps": [
                "13 - 12 = 1 (left: 2 1 13) || 1 / 13 = 0.07692307692 (left: 0.07692307692) || 0.07692307692 / 2 = 0.03846153846",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 25 / 1 = 25 (left: 25) || 25 * 2 = 50 (left: 50)",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 25 - 1 = 24 (left: 24) || Answer: ((2 * 13) - (13 - 12)) - (25 / 25) = 24",
                "2 * 12 = 24 (left: 13 13 24) || 13 / 13 = 1 (left: 1 13 24) || 24 - 1 = 23 (left: 13 23)",
                "2 * 12 = 24 (left: 13 13 24) || 13 / 13 = 1 (left: 1 13 24) || 13 * 1 = 13 (left: 13 24)",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 25 - 1 = 24 (left: 24) || Answer: ((2 * 13) - (13 - 12)) - (25 / 25) = 24",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 * 2 = 50 (left: 50)",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 1 * 25 = 25 (left: 25)",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 + 2 = 27 (left: 27)",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 1 * 25 = 25 (left: 25)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                0.003,
                0.003,
                60.0,
                0.003,
                20.002,
                20.001,
                20.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 6.7",
                "2 <- 5.3",
                "3 <- 2.1",
                "4 <- 3.9",
                "5 <- 6.2",
                "6 <- 5.7",
                "7 <- 6.7",
                "8 <- 6.5",
                "9 <- 6.2"
            ]
        },
        "Step 7": {
            "steps": [
                "13 - 12 = 1 (left: 2 1 13) || 2 * 1 = 2 (left: 2 13)",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 1 * 25 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25)",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 25 - 1 = 24 (left: 24) || Answer: ((2 * 13) - (13 - 12)) - (25 / 25) = 24",
                "13 / 2 = 6.5 (left: 6. || 6 * 8 = 48 (left: 8 48) || Input: 6 9 3",
                "2 * 12 = 24 (left: 13 13 24) || 13 / 13 = 1 (left: 1 13 24) || 13 + 1 = 14 (left: 14 24)",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 25 - 1 = 24 (left: 24) || Answer: ((2 * 13) - (13 - 12)) - (25 / 25) = 24 || Input: 3 3 3 7\nSteps:\n3 + 3 = 6 (left: 3 7 6)\n6 + 7 = 13 (left: 13 3)\n3 * 13 = 39 (left: 39)\n39 - 15 = 24 (left: 24)\nAnswer: ((3 + 3) + 7) * (3 * 13) - 15 = 24",
                "13 - 12 = 1 (left: 2 1 13) || 1 / 13 = 0.07692307692 (left: 0.07692307692) || 0.07692307692 - 2 = -1.92307692308",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 1 * 25 = 25 (left: 25) || 25 + 25 = 50",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 25 - 1 = 24 (left: 24) || Answer: ((2 * 13) - (13 - 12)) - (25 / 25) = 24 || Input: 3 3 8 9\nSteps:\n3 * 8 = 24 (left: 3 9 24)\n9 - 3 = 6 (left: 6 24)\n6 * 4 = 24 (left: 24)\nAnswer: (3 * 8) * (9 - 3) = 24",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 25 - 1 = 24 (left: 24) || Answer: ((2 * 13) - (13 - 12)) - (25 / 25) = 24 || Input: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 8 9)\n9 - 8 = 1 (left: 1)\n1 * 3 = 3 (left: 3)\n3 * 3 * 3 = 27 (left: 27)\n27 - 3 = 24 (left: 24)\nAnswer: ((3 * 3) * 3) - 3 = "
            ],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                0.003,
                0.003,
                60.0,
                0.003,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 7.2",
                "1 <- 7.5",
                "2 <- 7.5",
                "3 <- 7.1",
                "4 <- 2.5",
                "5 <- 6.7",
                "6 <- 6.8",
                "7 <- 6.9",
                "8 <- 2.4",
                "9 <- 7.2"
            ]
        },
        "Step 8": {
            "steps": [
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 25 - 1 = 24 (left: 24) || Answer: ((2 * 13) - (13 - 12)) - (25 / 25) = 24 || Input: 3 3 5 7\n\n3 + 7 = 10 (left: 3 5 10)\n5 * 3 = 15 (left: 15 10)\n15 - 10 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: ((3 + 7) * 3) - 10 * (5",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 25 - 1 = 24 (left: 24) || Answer: ((2 * 13) - (13 - 12)) - (25 / 25) = 24 || Input: 3 3 3 7\nSteps:\n3 + 3 = 6 (left: 3 7 6)\n6 + 7 = 13 (left: 13 3)\n3 * 13 = 39 (left: 39)\n39 - 15 = 24 (left: 24)\nAnswer: ((3 + 3) + 7) * (3 * 13) - 15 = 24 || Input: 1 2 3 8\nSteps:\n3 + 8 = 11 (left: 1 2 11)\n2 * 11 = 22 (left: 1 22)\n22 + 1 = 23 (left: 23)\n23 + 1 = 24 (left: 24)\nAnswer: ((1 + 2) + 8) * (2 * 11) + 1 = 24",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 25 - 1 = 24 (left: 24) || Answer: ((2 * 13) - (13 - 12)) - (25 / 25) = 24 || Input: 3 3 3 7\nSteps:\n3 + 3 = 6 (left: 3 7 6)\n6 + 7 = 13 (left: 13 3)\n3 * 13 = 39 (left: 39)\n39 - 15 = 24 (left: 24)\nAnswer: ((3 + 3) + 7) * (3 * 13) - 15 = 24 || Input: 6 6 6 6\nSteps:\n6 * 6 = 36 (left: 6 6 36)\n6 - 6 = 0 (left: 0 36)\n36 + 0 = 36 (left: 36)\nAnswer: (6 * 6) - (6 - 6) + 0 = 24",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 1 * 25 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 25 / 1 = 25 (left: 25)",
                "2 * 12 = 24 (left: 13 13 24) || 13 - 13 =  || 0",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 1 * 25 = 25 (left: 25) || 25 * 2 = 50 (left: 2)",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 + 2 = 27 (left: 27) || 27 * 2 = 54 (left: 54)",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 1 * 25 = 25 (left: 25) || 25 * 2 = 50 (left: 2)",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 + 25 = 50",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 25 - 1 = 24 (left: 24) || Answer: ((2 * 13) - (13 - 12)) - (25 / 25) = 24 || Input: 3 3 5 7\nSteps:\n3 + 5 = 8 (left: 3 7 8)\n8 - 7 = 1 (left: 3 1)\n1 * 3 = 3 (left: 3)\n3 * 8 = 24 (left: 24)\nAnswer: (3 * (3 + 5)) * 7 = 24"
            ],
            "Evaluation": [
                40.0,
                60.0,
                60.0,
                20.002,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 8.2",
                "1 <- 8.3",
                "2 <- 5.3",
                "3 <- 7.5",
                "4 <- 2.1",
                "5 <- 7.2",
                "6 <- 8.3",
                "7 <- 7.5",
                "8 <- 2.4",
                "9 <- 7.1"
            ]
        },
        "Step 9": {
            "steps": [
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 25 - 1 = 24 (left: 24) || Answer: ((2 * 13) - (13 - 12)) - (25 / 25) = 24 || Input: 3 3 3 7\nSteps:\n3 + 3 = 6 (left: 3 7 6)\n6 + 7 = 13 (left: 13 3)\n3 * 13 = 39 (left: 39)\n39 - 15 = 24 (left: 24)\nAnswer: ((3 + 3) + 7) * (3 * 13) - 15 = 24 || Input: 6 6 6 6\nSteps:\n6 * 6 = 36 (left: 6 6 36)\n6 - 6 = 0 (left: 0 36)\n36 + 0 = 36 (left: 36)\nAnswer: (6 * 6) - (6 - 6) + 0 = 24 || Input: 1 3 5 7\nSteps:\n5 - 3 = 2 (left: 1 2 7)\n2 + 7 = 9 (left: 1 9)\n9 * 1 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 - 3 = 24 (left: 24)\nAnswer: ((5 - 3) + 7) * (1 *",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 1 * 25 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 25 / 1 = 25 (left: 25) || 25 - 25 =",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 25 - 1 = 24 (left: 24) || Answer: ((2 * 13) - (13 - 12)) - (25 / 25) = 24",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 25 - 1 = 24 (left: 24) || Answer: ((2 * 13) - (13 - 12)) - (25 / 25) = 24 || Input: 3 3 3 7\nSteps:\n3 + 3 = 6 (left: 3 7 6)\n6 + 7 = 13 (left: 13 3)\n3 * 13 = 39 (left: 39)\n39 - 15 = 24 (left: 24)\nAnswer: ((3 + 3) + 7) * (3 * 13) - 15 = 24 || Input: 1 2 3 6\nSteps:\n2 * 6 = 12 (left: 1 3 12)\n12 - 3 = 9 (left: 1 9)\n9 * 1 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 - 3 = 24 (left: 24)\nAnswer: (((1 * 2) * 6) - 3)",
                "13 / 2 = 6.5 (left: 6. || 6 * 8 = 48 (left: 8 48) || 8 * 6 = 48",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 25 - 1 = 24 (left: 24) || Answer: ((2 * 13) - (13 - 12)) - (25 / 25) = 24 || Input: 3 3 3 9\nSteps:\n3 + 3 = 6 (left: 3 6 9)\n6 * 3 = 18 (left: 9 18)\n9 + 18 = 27 (left: 27)\n27 - 3 = 24 (left: 24)\nAnswer: ((3 + 3) * 3) + (9 - 3) = 24",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 1 * 25 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 25 / 1 = 25 (left: 25) || 25 * 2 = 50",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 25 - 1 = 24 (left: 24) || Answer: ((2 * 13) - (13 - 12)) - (25 / 25) = 24 || Input: 3 3 3 7\nSteps:\n3 + 3 = 6 (left: 3 7 6)\n6 + 7 = 13 (left: 13 3)\n3 * 13 = 39 (left: 39)\n39 - 15 = 24 (left: 24)\nAnswer: ((3 + 3) + 7) * (3 * 13) - 15 = 24 || Input: 2 3 5 8\nSteps:\n3 * 8 = 24 (left: 2 5 24)\n5 - 2 = 3 (left: 3 24)\n3 * 24 = 72 (left: 72)\n72 / 3 = 24 (left: 24)\nAnswer: (3 * 8) * (5 - 2) = 24",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 * 2 = 50 (left: 2)",
                "13 - 12 = 1 (left: 2 1 13) || 2 * 13 = 26 (left: 1 26) || 26 - 1 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 1 * 25 = 25 (left: 25) || 25 / 25 = 1 (left: 1 25) || 25 * 1 = 25 (left: 25)"
            ]
        },
        "Input": "2 12 13 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "70": {
        "puzzle": "7 7 11 12",
        "Step 0": {
            "steps": [
                "11 + 1 = 12 (left: 7 12 12)",
                "7 * 7 = 49 (left: 11 12 49)",
                "7 * 7 = 49 (left: 11 12 49)",
                "7 - 7 = 0 (left: 11 12 0)",
                "11 + 7 = 18 (left: 7 12 18)",
                "7 * 7 = 49 (left: 11 12 49)",
                "",
                "11 + 7 = 18 (left: 7 12 18)",
                "12 - 7 = 5 (left: 7 11 ",
                "11 + 7 = 18 (left: 7 12 18)"
            ],
            "Evaluation": [
                0.003,
                3.0,
                3.0,
                0.002,
                3.0,
                3.0,
                0.003,
                2.001,
                0.001,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "7 / 7 = 1 (left: 1 11 12)",
                "12 - 7 = 5 (left: 7 5 11)",
                "7 * 7 = 49 (left: 11 12 49)",
                "11 + 7 = 18 (left: 7 12 18)",
                "7 * 7 = 49 (left: 11 12 49)",
                "7 - 7 = 0 (left: 0 11 12)",
                "11 + 7 = 18 (left: 7 18 12)",
                "11 - 7 = 4 (left: 7 4 ",
                "11 + 1 = 12 (left: 7 12 12)",
                "7 - 7 = 0 (left: 0 11 12)"
            ],
            "Evaluation": [
                3.0,
                22.0,
                1.002,
                1.002,
                3.0,
                0.003,
                3.0,
                0.002,
                0.003,
                20.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 1.1",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 1.9",
                "5 <- INIT",
                "6 <- 1.1",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "7 * 7 = 49 (left: 11 12 49) || 12 / 11 = 1.09090909091 (left: 1.09090909091 49)",
                "12 - 7 = 5 (left: 7 5 11) || 7 / 5 = 1.4 (left: 1.4 11)",
                "7 - 7 = 0 (left: 0 11 12)",
                "11 + 7 = 18 (left: 7 12 18)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1)",
                "7 - 7 = 0 (left: 0 11 12)",
                "12 - 7 = 5 (left: 7 5 11) || 7 * 5 = 35 (left: 35 11)",
                "12 + 7 = 19 (left: 7 11 ",
                "11 + 7 = 18 (left: 7 12 18)",
                "7 - 7 = 0 (left: 0 11 12)"
            ],
            "Evaluation": [
                1.001,
                0.002,
                1.001,
                2.001,
                60.0,
                1.002,
                21.001,
                1.0,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.4",
                "2 <- 2.6",
                "3 <- 1.0",
                "4 <- 2.4",
                "5 <- 2.4",
                "6 <- 0.1",
                "7 <- 1.1",
                "8 <- 2.4",
                "9 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "7 * 7 = 49 (left: 11 12 49) || 11 * 12 = 132 (left: 132 49)",
                "11 + 7 = 18 (left: 7 12 18) || 18 / 7 = 2.57 (left: 2.57 12)",
                "12 - 7 = 5 (left: 7 5 11) || 7 * 5 = 35 (left: 35 11) || 35 / 11 = 3.18181818182 (left: 3.18181818182)",
                "7 / 7 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1)",
                "7 * 7 = 49 (left: 11 12 49) || 12 - 11 = 1 (left: 1 12 49)",
                "12 - 7 = 5 (left: 7 5 11) || 5 - 11 = -6 (left: -6)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 - 0 = 1 (left: 1)",
                "7 / 11 = 0.6363636363636364 (left: 0.6363636363636364 7 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                60.0,
                1.001,
                0.0,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- INIT",
                "2 <- 1.9",
                "3 <- 2.4",
                "4 <- 3.5",
                "5 <- 0.2",
                "6 <- 2.6",
                "7 <- 3.5",
                "8 <- 2.6",
                "9 <- 3.5"
            ]
        },
        "Step 4": {
            "steps": [
                "7 - 7 = 0 (left: 0 11 12) || 11 + 12 = 23 (left: 0 23)",
                "7 - 7 = 0 (left: 11 12 0)",
                "7 - 7 = 0 (left: 0 11 12) || 12 / ",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 * 0 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 / 0 = undefined",
                "7 * 7 = 49 (left: 11 12 49) || 49 - 11 = 38 (left: 12 38)",
                "12 - 7 = 5 (left: 7 5 11) || 7 * 5 = 35 (left: 35 11) || 35 * 11 = 385 (left: 385)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 * 0 = 0 (left: 0)",
                "12 - 7 = 5 (left: 7 5 11) || 7 * 5 = 35 (left: 35 11) || 35 * 11 = 385 (left: 385)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 0 - 1 = -1 (left: -1)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                20.0,
                0.002,
                20.002,
                0.0
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 3.5",
                "2 <- 2.4",
                "3 <- 0.1",
                "4 <- 2.4",
                "5 <- 4.8",
                "6 <- 3.5",
                "7 <- 4.6",
                "8 <- 2.4",
                "9 <- 2.4"
            ]
        },
        "Step 5": {
            "steps": [
                "7 - 7 = 0 (left: 0 11 12) || 11 + 12 = 23 (left: 0 23)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 0 * 1 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 - 1 = -1 (left: -1)",
                "7 * 7 = 49 (left: 11 12 49) || 12 * 49 = 588 (left: 11 588)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 = Undefined",
                "12 - 7 = 5 (left: 7 5 11) || 7 * 5 = 35 (left: 35 11) || 35 * 11 = 385 (left: 385) || ",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 - 0 = 1 (left: 1)",
                "12 - 7 = 5 (left: 7 5 11) || 7 * 5 = 35 (left: 35 11) || 35 * 11 = 385 (left: 385) || 5 - 3 = 2 (left: 2)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 4.8",
                "1 <- 4.8",
                "2 <- 1.9",
                "3 <- 3.5",
                "4 <- 1.9",
                "5 <- 3.5",
                "6 <- 1.1",
                "7 <- 3.5",
                "8 <- 3.5",
                "9 <- 4.8"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 7 = 5 (left: 7 5 11) || 7 * 5 = 35 (left: 35 11) || 35 * 11 = 385 (left: 385) || 8 - 3 = 5 (left: 5 5)",
                "12 - 7 = 5 (left: 7 5 11) || 7 * 5 = 35 (left: 35 11) || 35 * 11 = 385 (left: 385) || 38 / ",
                "7 - 7 = 0 (left: 0 11 12) || 11 * 0 = 0 (left: 0 12)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 0 * 1 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 11 12) || 11 - 12 = -1 (left: 0 -1)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 - 0 = 1 (left: 1)",
                "12 - 7 = 5 (left: 7 5 11) || 7 - 5 = 2 (left: 2 11)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || Input: 5 10 15",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 / 0 = Undefined ",
                "12 - 7 = 5 (left: 7 5 11) || 7 * 5 = 35 (left: 35 11) || 35 * 11 = 385 (left: 385) || 38 / 5 = 7 (left: 7)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                40.001,
                0.003,
                0.002,
                0.003,
                1.001,
                0.003,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 2.4",
                "2 <- 1.9",
                "3 <- 6.2",
                "4 <- 2.6",
                "5 <- 2.4",
                "6 <- 2.4",
                "7 <- 6.2",
                "8 <- 3.5",
                "9 <- 3.5"
            ]
        },
        "Step 7": {
            "steps": [
                "7 - 7 = 0 (left: 0 11 12) || 11 * 0 = 0 (left: 0 12) || 0 + 12 = 12",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 5 + 3 = 8 (left: 8)",
                "7 - 7 = 0 (left: 0 11 12) || 11 / 12 = 0.9166666666666666 (left: 0.9166666666666666 12)",
                "7 - 7 = 0 (left: 0 11 12) || 11 * 0 = 0 (left: 0 12) || 0 + 12 = 12",
                "12 - 7 = 5 (left: 7 5 11) || 7 * 5 = 35 (left: 35 11) || 35 / 11 = 3.18181818182 (left: 3.18181818182)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 / 1 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 * 1 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 11 12) || 11 * 0 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 / 0 is undefined (left: 0 1)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 / 0 = undefined (left: 0)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                1.001,
                0.003,
                0.0,
                0.001,
                0.002,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 7.8",
                "1 <- 7.8",
                "2 <- 4.6",
                "3 <- 3.5",
                "4 <- 7.8",
                "5 <- 6.2",
                "6 <- 6.2",
                "7 <- 7.8",
                "8 <- 6.2",
                "9 <- 7.8"
            ]
        },
        "Step 8": {
            "steps": [
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 0 * 1 = 0 (left: 0)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 / 0 is undefined (left: none)",
                "12 - 7 = 5 (left: 7 5 11) || 7 * 5 = 35 (left: 35 11) || 35 * 11 = 385 (left: 385) || 5 * 8 = 40 (left: 40)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 - 0 = 1 (left: 1)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 / 0 is undefined (left: 0 1)",
                "7 - 7 = 0 (left: 0 11 12) || 11 * 0 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "7 - 7 = 0 (left: 0 11 12) || 11 * 0 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 / 0 is undefined (left: 0 1) || Input: 5 6",
                "7 - 7 = 0 (left: 0 11 12) || 11 * 0 = 0 (left: 0 12) || 0 / 12 = 0 (left: 12)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 5 + 5 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.003,
                60.0,
                0.003,
                0.002,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 8.4",
                "1 <- 1.9",
                "2 <- 6.2",
                "3 <- 7.8",
                "4 <- 8.4",
                "5 <- 8.4",
                "6 <- 4.8",
                "7 <- 7.8",
                "8 <- 8.4",
                "9 <- INIT"
            ]
        },
        "Step 9": {
            "steps": [
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 0 - 1 = -1 (left: -1)",
                "7 - 7 = 0 (left: 0 11 12) || 12 * 0 = 0 (left: ",
                "7 - 7 = 0 (left: 0 11 12) || 11 * 0 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 / 0 is undefined (left: 0 1) || Input: 3 5 7",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 / 0 = undefined",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 5 + 3 = 8 (left: 2 8)",
                "12 - 7 = 5 (left: 7 5 11) || 7 * 5 = 35 (left: 35 11) || 35 * 11 = 385 (left: 385) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665 5)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 - 0 = 1 (left: 1)",
                "7 - 7 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 1 / 0 is undefined (left: 0 1) || 0 - 1 = -1 (left: -1)",
                "7 * 1 = 7 (left: 7 11 12)"
            ]
        },
        "Input": "7 7 11 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "71": {
        "puzzle": "1 1 3 7",
        "Step 0": {
            "steps": [
                "1 + 3 = 4 (left: 1 4 7)",
                "1 * 1 = 1 (left: 1 3 7)",
                "7 - 3 = 4 (left: 1 1 4)",
                "7 - 1 = 6 (left: 1 3 6)",
                "7 - 3 = 4 (left: 1 4 7)",
                "1 * 3 = 3 (left: 3 1 7)",
                "7 - 3 = 4 (left: 1 4 4)",
                "3 + 1 = 4 (left: 1 4 7)",
                "3 * 1 = 3 (left: 1 3 ",
                "7 - 3 = 4 (left: 1 4 7)"
            ],
            "Evaluation": [
                1.002,
                3.0,
                1.002,
                1.001,
                1.002,
                22.0,
                40.0,
                2.001,
                0.002,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.6",
                "2 <- 0.1",
                "3 <- 0.6",
                "4 <- 0.7",
                "5 <- INIT",
                "6 <- 0.6",
                "7 <- 0.6",
                "8 <- 0.6",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 7)",
                "7 - 3 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4)",
                "1 * 1 = 1 (left: 1 3 7) || 7 / 3 = 2 (left: 1 2)",
                "7 - 3 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4)",
                "3 + 1 = 4 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6)",
                "7 - 3 = 4 (left: 1 4 7)",
                "7 - 3 = 4 (left: 1 4 4) || 4 + 1 = 5 (left: 1 5)",
                "7 - 3 = 4 (left: 1 4 4) || 1 - 4 = -3 (left: -3 4)",
                "7 - 3 = 4 (left: 1 4 4) || 4 + 1 = 5 (left: 4 5)",
                "1 - 1 = 0 (left: 0 3 7)"
            ],
            "Evaluation": [
                1.001,
                40.0,
                0.003,
                22.0,
                60.0,
                1.002,
                20.002,
                1.002,
                1.0,
                1.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.7",
                "2 <- 1.4",
                "3 <- 1.3",
                "4 <- 1.4",
                "5 <- 1.3",
                "6 <- 0.6",
                "7 <- 1.1",
                "8 <- 1.4",
                "9 <- 1.6"
            ]
        },
        "Step 2": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "7 - 3 = 4 (left: 1 4 4) || 1 - 4 = -3 (left: -3 4) || -3 - 4 = -7 (left: -7)",
                "3 + 1 = 4 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 - 6 = -2 (left: -2)",
                "7 - 3 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 3 * 4 = 12 (left: 12)",
                "3 + 1 = 4 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 - 6 = -2 (left: -2)",
                "7 - 3 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 4 / 3 = 1.33 (left: 1.33)",
                "7 - 3 = 4 (left: 1 4 4) || 4 / 1 = 4 (left: 4 4)",
                "7 - 3 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 4 - 3 = 1 (left: 1)",
                "3 + 1 = 4 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "7 - 3 = 4 (left: 1 4 4) || 4 + 1 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)"
            ],
            "Evaluation": [
                60.0,
                0.001,
                0.0,
                0.002,
                2.0,
                0.003,
                0.003,
                0.002,
                60.0,
                0.001
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 1.3",
                "2 <- 0.6",
                "3 <- 1.1",
                "4 <- 1.1",
                "5 <- 1.1",
                "6 <- 2.0",
                "7 <- 2.8",
                "8 <- 2.0",
                "9 <- 0.7"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 3 = 3 (left: 3 1 7) || 7 - 1 = 6 (left: 3 6)",
                "7 - 3 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 4 - 3 = 1 (left: 1)",
                "7 - 3 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4)",
                "7 - 3 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || Input: 5 10",
                "7 - 3 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 4 / 3 = 1.33 (left: 1.33)",
                "7 - 3 = 4 (left: 1 4 4) || 4 - 1 = 3 (left: 3 4) || 4 / 3 = 1.33 (left: 1.33)",
                "3 + 1 = 4 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (3 + 1) * (7 - 1) = 24",
                "3 + 1 = 4 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (3 + 1) * (7 - 1) = 24",
                "3 + 1 = 4 (left: 1 4 7) || 7 - 1 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 + 3) * (7 - 1) = 24",
                "3 + 1 = 4 (left: 1 4 7) || 7 - 4 = 3 (left: 1 3)"
            ]
        },
        "Input": "1 1 3 7",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "72": {
        "puzzle": "1 4 10 10",
        "Step 0": {
            "steps": [
                "10 - 1 = 9 (left: 4 9 10)",
                "4 + 10 = 14 (left: 1 14 10)",
                "1 * 4 = 4 (left: 4 10 10)",
                "1 * 4 = 4 (left: 4 10 10)",
                "10 - 1 = 9 (left: 4 9 10)",
                "10 - 4 = 6 (left: 1 6 10)",
                "1 * 4 = 4 (left: 4 10 10)",
                "10 - 1 = 9 (left: 4 9 10)",
                "10 / 1 = 10 (left: 4 10 ",
                "10 + 1 = 11 (left: 4 10 11)"
            ],
            "Evaluation": [
                1.001,
                0.003,
                20.002,
                0.003,
                2.0,
                2.001,
                0.003,
                2.001,
                40.0,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.7",
                "3 <- 0.8",
                "4 <- 0.8",
                "5 <- 0.2",
                "6 <- 0.7",
                "7 <- 0.8",
                "8 <- INIT",
                "9 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "4 * 1 = 4 (left: 4 10 10)",
                "10 / 1 = 10 (left: 4 10 10)",
                "10 - 1 = 9 (left: 4 9 10) || 9 - 4 = 5 (left: 5 10)",
                "10 / 1 = 10 (left: 4 10  || 10 + 4 = 14 (left: 4)",
                "10 / 1 = 10 (left: 4 10  || 10 * 4 = 40 (left: 40 10)",
                "1 * 4 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10)",
                "10 - 1 = 9 (left: 4 9 10) || 10 - 4 = 6 (left: 6 9)",
                "10 / 1 = 10 (left: 4 10  || 10 - 4 = 6 (left: 6 10)",
                "10 + 1 = 11 (left: 4 10 11)",
                "1 * 4 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)"
            ],
            "Evaluation": [
                1.002,
                20.002,
                0.003,
                0.002,
                21.0,
                0.002,
                0.003,
                0.002,
                0.003,
                2.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.8",
                "2 <- INIT",
                "3 <- 1.1",
                "4 <- 0.8",
                "5 <- 0.8",
                "6 <- 0.2",
                "7 <- 1.1",
                "8 <- 1.4",
                "9 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 4 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 / 1 = 10 (left: 4 10  || 4 * 10 = 40 (left: 10 40)",
                "10 - 1 = 9 (left: 4 9 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 / 1 = 10 (left: 4 10  || 4 * 10 = 40 (left: 10)",
                "10 / 1 = 10 (left: 4 10  || 10 / 4 = 2.5 (left: 2.5)",
                "1 * 4 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 / 4 = 2",
                "10 / 1 = 10 (left: 4 10  || 10 * 4 = 40 (left: 40 10) || 40 / 10 = 4 (left: 4)",
                "10 / 1 = 10 (left: 4 10  || 10 * 4 = 40 (left: 40 10) || 6 + 3 = 9 (left: 1 9)"
            ],
            "Evaluation": [
                3.0,
                0.001,
                1.001,
                3.0,
                0.003,
                0.001,
                1.001,
                0.003,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 2.9",
                "1 <- 0.2",
                "2 <- 0.9",
                "3 <- 2.9",
                "4 <- 0.8",
                "5 <- 2.9",
                "6 <- 2.9",
                "7 <- 1.4",
                "8 <- INIT",
                "9 <- 1.1"
            ]
        },
        "Step 3": {
            "steps": [
                "10 / 1 = 10 (left: 4 10  || 10 * 4 = 40 (left: 40 10) || 6 + 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "1 * 4 = 4 (left: 4 10 10) || 10 - 10 = 0 (left: 4 0)",
                "10 + 1 = 11 (left: 4 10 11) || 10 / 4 = 2.5 (left: 2.5 11)",
                "10 / 1 = 10 (left: 4 10  || 10 * 4 = 40 (left: 40 10) || 6 + 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "10 / 1 = 10 (left: 4 10  || 2 + 3 = 5 (left: 5 5)",
                "10 / 1 = 10 (left: 4 10  || 10 * 4 = 40 (left: 40 10) || 6 + 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "10 / 1 = 10 (left: 4 10  || 10 * 4 = 40 (left: 40 10) || 6 + 3 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "10 / 1 = 10 (left: 4 10  || 10 * 4 = 40 (left: 40 10) || Input: 5 3 1",
                "10 + 1 = 11 (left: 4 10 11)",
                "10 / 1 = 10 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10)"
            ],
            "Evaluation": [
                0.001,
                0.001,
                0.002,
                0.001,
                0.001,
                0.002,
                0.003,
                0.003,
                1.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.4",
                "2 <- 2.3",
                "3 <- 2.9",
                "4 <- 1.4",
                "5 <- 0.2",
                "6 <- 0.8",
                "7 <- 1.4",
                "8 <- 2.9",
                "9 <- 2.2"
            ]
        },
        "Step 4": {
            "steps": [
                "10 / 1 = 10 (left: 4 10  || 10 * 4 = 40 (left: 40 10) || 40 - 10 = 30 (left: 30 10)",
                "10 / 1 = 10 (left: 4 10  || 10 * 4 = 40 (left: 40 10) || 40 * 10 = 400 (left: 400)",
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60)",
                "10 / 1 = 10 (left: 4 10  || 10 * 4 = 40 (left: 40 10) || 6 + 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "10 / 1 = 10 (left: 4 10  || 10 * 4 = 40 (left: 40 10) || 40 / 10 = 4 (left: 4)",
                "1 * 4 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "10 / 1 = 10 (left: 4 10  || Input: 5 3 12",
                "10 / 1 = 10 (left: 4 10  || 10 * 4 = 40 (left: 40 10) || 40 * 10 = 400 (left: 400)",
                "10 / 1 = 10 (left: 4 10  || 10 * 4 = 40 (left: 40 10) || 6 + 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "10 - 1 = 9 (left: 4 9 10) || 9 * 10 = 90 (left: 4 90)"
            ],
            "Evaluation": [
                1.0,
                0.002,
                1.002,
                0.0,
                0.001,
                1.002,
                0.003,
                0.002,
                0.001,
                20.001
            ],
            "Resampling": [
                "0 <- 4.9",
                "1 <- 4.9",
                "2 <- 4.9",
                "3 <- 4.9",
                "4 <- INIT",
                "5 <- 2.9",
                "6 <- 0.4",
                "7 <- 0.2",
                "8 <- 0.8",
                "9 <- 1.1"
            ]
        },
        "Step 5": {
            "steps": [
                "10 - 1 = 9 (left: 4 9 10) || 9 * 10 = 90 (left: 4 90) || 4 * 90 = 360 (left: 360)",
                "10 - 1 = 9 (left: 4 9 10) || 9 * 10 = 90 (left: 4 90) || 90 + 4 = 94 (left: 94)",
                "10 - 1 = 9 (left: 4 9 10) || 9 * 10 = 90 (left: 4 90) || 90 - 4 = 86 (left: 86)",
                "10 - 1 = 9 (left: 4 9 10) || 9 * 10 = 90 (left: 4 90) || 4 + 90 = 94 (left: 94)",
                "1 * 4 = 4 (left: 4 10 10)",
                "10 / 1 = 10 (left: 4 10  || 10 * 4 = 40 (left: 40 10) || 6 + 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "10 - 1 = 9 (left: 4 9 10) || 4 * 9 = 36 (left: 10 36)",
                "1 * 4 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10)",
                "10 / 1 = 10 (left: 4 10  || 10 - 4 = 6 (left: 6 10)",
                "10 / 1 = 10 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                0.003,
                20.002,
                0.001,
                0.003,
                0.002,
                0.002,
                2.001
            ],
            "Resampling": [
                "0 <- 4.9",
                "1 <- 1.4",
                "2 <- 4.2",
                "3 <- 1.4",
                "4 <- 2.9",
                "5 <- 2.9",
                "6 <- 1.4",
                "7 <- 4.9",
                "8 <- 2.0",
                "9 <- 5.4"
            ]
        },
        "Step 6": {
            "steps": [
                "10 - 1 = 9 (left: 4 9 10) || 9 * 10 = 90 (left: 4 90) || 90 / 4 = 22.5 (left: 22.5)",
                "10 / 1 = 10 (left: 4 10  || 10 * 4 = 40 (left: 40 10) || 40 * 10 = 400 (left: 400)",
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60) || 10 + 10 = 20 (left: 20 60)",
                "10 / 1 = 10 (left: 4 10  || 10 * 4 = 40 (left: 40 10) || 40 / 10 = 4 (left: 4)",
                "10 / 1 = 10 (left: 4 10  || 10 * 4 = 40 (left: 40 10) || 6 + 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "10 / 1 = 10 (left: 4 10  || 10 * 4 = 40 (left: 40 10) || 6 + 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "10 / 1 = 10 (left: 4 10  || 10 * 4 = 40 (left: 40 10) || 40 * 10 = 400 (left: 400)",
                "10 - 1 = 9 (left: 4 9 10) || 9 * 10 = 90 (left: 4 90) || 90 / 4 = 22.5 (left: 22.5)",
                "1 * 4 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 10 - 2.5 = 7.5 (left: 7.5 10)",
                "1 * 4 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)"
            ],
            "Evaluation": [
                20.001,
                0.002,
                20.0,
                0.002,
                0.002,
                0.002,
                0.003,
                20.001,
                2.001,
                1.002
            ],
            "Resampling": [
                "0 <- 6.7",
                "1 <- 6.2",
                "2 <- 6.7",
                "3 <- 5.4",
                "4 <- 5.4",
                "5 <- 1.1",
                "6 <- 0.8",
                "7 <- 6.7",
                "8 <- 6.2",
                "9 <- 2.9"
            ]
        },
        "Step 7": {
            "steps": [
                "10 - 1 = 9 (left: 4 9 10) || 9 * 10 = 90 (left: 4 90) || 90 / 4 = 22.5 (left: 22.5) || 22.5 - 2 = 20.5",
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60) || 10 + 10 = 20 (left: 20 60) || 20 - 60 = -40 (left: -40)",
                "10 - 1 = 9 (left: 4 9 10) || 9 * 10 = 90 (left: 4 90) || 90 / 4 = 22.5 (left: 22.5) || There is only one number, so there are no possible next steps. The result is 22.5.",
                "1 * 4 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "1 * 4 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10)",
                "10 / 1 = 10 (left: 4 10 10) || 4 * 10 = 40 (left: 10 10 40)",
                "10 / 1 = 10 (left: 4 10  || 10 - 4 = 6 (left: 6 10)",
                "10 - 1 = 9 (left: 4 9 10) || 9 * 10 = 90 (left: 4 90) || 90 / 4 = 22.5 (left: 22.5) || There are no possible next steps for the input 22.5 as it is a single number and not an equation to operate on.",
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 6 * 10 = 60 (left: 10 10 60) || 10 + 10 = 20 (left: 20 60) || 60 / 20 = 3 (left: 3 60)",
                "10 / 1 = 10 (left: 4 10  || 10 * 4 = 40 (left: 40 10) || 6 + 3 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                3.0,
                0.0,
                0.003,
                0.002,
                0.003,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 4.9",
                "2 <- INIT",
                "3 <- 5.4",
                "4 <- 0.8",
                "5 <- 2.9",
                "6 <- 6.0",
                "7 <- 6.7",
                "8 <- 6.0",
                "9 <- 2.3"
            ]
        },
        "Step 8": {
            "steps": [
                "1 * 4 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 - 1 = 9 (left: 4 9 10) || 9 * 10 = 90 (left: 4 90) || 90 - 4 = 86 (left: 86)",
                "10 / 1 = 10 (left: 4 10 10)",
                "1 * 4 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 / 1 = 10 (left: 4 10  || 10 / 4 = 2.5 (left: 2.5)",
                "10 / 1 = 10 (left: 4 10  || 10 * 4 = 40 (left: 40 10) || 6 + 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "10 - 1 = 9 (left: 4 9 10) || 9 * 10 = 90 (left: 4 90) || 90 / 4 = 22.5 (left: 22.5) || There are no possible next steps as there is only one number provided.",
                "10 - 1 = 9 (left: 4 9 10) || 9 * 10 = 90 (left: 4 90) || 90 / 4 = 22.5 (left: 22.5) || There are no possible next steps for the input 22.5.",
                "10 - 1 = 9 (left: 4 9 10) || 9 * 10 = 90 (left: 4 90) || 90 / 4 = 22.5 (left: 22.5) || 22.5 * 8 = 180",
                "10 / 1 = 10 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10) || 10 * 6 = 60 (left: 10 10 60)"
            ],
            "Evaluation": [
                2.0,
                0.003,
                20.001,
                1.001,
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 0.8",
                "2 <- 2.9",
                "3 <- 2.9",
                "4 <- 8.2",
                "5 <- 0.2",
                "6 <- 5.4",
                "7 <- 6.7",
                "8 <- 0.8",
                "9 <- 6.7"
            ]
        },
        "Step 9": {
            "steps": [
                "10 - 1 = 9 (left: 4 9 10) || 9 * 10 = 90 (left: 4 90) || 90 / 4 = 22.5 (left: 22.5) || There are no possible next steps with the input 22.5.",
                "10 / 1 = 10 (left: 4 10  || 9 - 7 = 2 (left: 2)",
                "10 / 1 = 10 (left: 4 10  || 10 * 4 = 40 (left: 40 10) || 6 + 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "10 / 1 = 10 (left: 4 10  || 10 * 4 = 40 (left: 40 10) || 6 + 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "10 / 1 = 10 (left: 4 10 10) || 4 * 10 = 40 (left: 10 10 40)",
                "1 * 4 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 10 40)",
                "1 * 4 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "10 - 1 = 9 (left: 4 9 10) || 9 * 10 = 90 (left: 4 90) || 90 / 4 = 22.5 (left: 22.5) || There are no possible next steps as there is only one number given.",
                "10 / 1 = 10 (left: 4 10  || Input: 3 6 9",
                "10 - 1 = 9 (left: 4 9 10) || 9 * 10 = 90 (left: 4 90) || 90 / 4 = 22.5 (left: 22.5) || There are no possible next steps for the input 22.5 as it is a single number."
            ]
        },
        "Input": "1 4 10 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "73": {
        "puzzle": "4 4 12 12",
        "Step 0": {
            "steps": [
                "12 - 4 = 8 (left: 4 8 12)",
                "4 * 4 = 16 (left: 16 12 12)",
                "12 / 4 = 3 (left: 4 3 12)",
                "12 / 4 = 3 (left: 4 3 12)",
                "12 - 4 = 8 (left: 4 8 12)",
                "4 * 4 = 16 (left: 12 12 16)",
                "12 / 4 = 3 (left: 4 12 3)",
                "12 - 4 = 8 (left: 4 8 12)",
                "12 / 4 = 3 (left: 4 3 ",
                "12 - 4 = 8 (left: 4 8 12)"
            ],
            "Evaluation": [
                21.001,
                2.0,
                60.0,
                60.0,
                21.001,
                0.003,
                22.0,
                0.003,
                60.0,
                21.001
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 0.2",
                "2 <- 0.9",
                "3 <- 0.0",
                "4 <- 0.3",
                "5 <- 0.8",
                "6 <- INIT",
                "7 <- 0.8",
                "8 <- INIT",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "12 / 4 = 3 (left: 4 3  || 4 / 3 = 1.33 (left: 1.33)",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12)",
                "12 - 4 = 8 (left: 4 8 12) || 4 * 8 = 32 (left: 32 12)",
                "12 - 4 = 8 (left: 4 8 12) || 12 - 4 = 8 (left: 8 8)",
                "12 / 4 = 3 (left: 4 3 12) || 3 + 12 = 15 (left: 4 15)",
                "12 / 4 = 3 (left: 4 3  || 3 * 4 = 12 (left: 12)",
                "12 / 4 = 3 (left: 3 4 12)",
                "12 / 4 = 3 (left: 4 3  || 4 - 3 = 1 (left: 1)",
                "12 - 4 = 8 (left: 4 8 12)",
                "12 / 4 = 3 (left: 4 3 12) || 3 + 12 = 15 (left: 4 15)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.002,
                0.003,
                0.001,
                0.003,
                40.001,
                0.003,
                2.001,
                1.001
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 0.8",
                "2 <- 1.1",
                "3 <- 1.1",
                "4 <- 0.2",
                "5 <- INIT",
                "6 <- 0.3",
                "7 <- 1.6",
                "8 <- 0.8",
                "9 <- 0.9"
            ]
        },
        "Step 2": {
            "steps": [
                "12 / 4 = 3 (left: 3 4 12) || 4 * 3 = 12 (left: 12 12)",
                "12 / 4 = 3 (left: 4 3  || 4 / 3 = 1.33 (left: 1.33)",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 / 4 = 3 (left: 4 3 12) || 3 + 12 = 15 (left: 4 15)",
                "12 - 4 = 8 (left: 4 8 12)",
                "12 / 4 = 3 (left: 4 3 12) || 4 / 3 = 1.33 (left: 1.33 12)",
                "12 / 4 = 3 (left: 3 4 12) || 4 * 12 = 48 (left: 48)",
                "12 / 4 = 3 (left: 4 3  || 4 * 3 = 12 (left: 12)",
                "12 - 4 = 8 (left: 4 8 12) || 12 - 4 = 8 (left: 8 8)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.002,
                1.002,
                0.003,
                2.001,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 0.8",
                "2 <- 0.4",
                "3 <- 0.6",
                "4 <- 0.2",
                "5 <- 1.6",
                "6 <- 0.2",
                "7 <- 0.2",
                "8 <- 0.6",
                "9 <- 0.0"
            ]
        },
        "Step 3": {
            "steps": [
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 / 4 = 3 (left: 4 3  || 5 - 9 = -4 (left: -4)",
                "12 - 4 = 8 (left: 4 8 12) || 12 / 4 = 3 (left: 3 12)",
                "12 / 4 = 3 (left: 4 12 3) || 12 - 4 = 8 (left: 8 3)",
                "12 / 4 = 3 (left: 4 3 12) || 3 + 12 = 15 (left: 4 15)",
                "12 / 4 = 3 (left: 3 4 12) || 3 * 4 = ",
                "12 / 4 = 3 (left: 4 3 12) || 4 / 3 = 1.33 (left: 1.33 12)",
                "12 / 4 = 3 (left: 4 3 12) || 3 / 12 = 0.25 (left: 0.25 12)",
                "12 / 4 = 3 (left: 4 12 3) || 12 - 4 = 8 (left: 8 3)",
                "12 - 4 = 8 (left: 4 8 12) || 12 - 4 = 8 (left: 8 8 12)"
            ],
            "Evaluation": [
                0.001,
                0.0,
                0.003,
                60.0,
                0.003,
                0.003,
                0.003,
                1.0,
                40.0,
                2.001
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 1.6",
                "2 <- 3.3",
                "3 <- 0.0",
                "4 <- 3.3",
                "5 <- 0.4",
                "6 <- INIT",
                "7 <- 1.6",
                "8 <- 0.8",
                "9 <- 1.1"
            ]
        },
        "Step 4": {
            "steps": [
                "12 / 4 = 3 (left: 4 3  || 4 / 3 = 1.33333 (left: 1.33333)",
                "12 / 4 = 3 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8)",
                "12 / 4 = 3 (left: 4 12 3) || 12 - 4 = 8 (left: 8 3) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "12 - 4 = 8 (left: 4 8 12) || 12 / 4 = 3 (left: 3 8 12)",
                "12 / 4 = 3 (left: 4 12 3) || 12 - 4 = 8 (left: 8 3) || 8 / 3 = 2.67 (left: 2.67)",
                "12 - 4 = 8 (left: 4 8 12) || 8 + 4 = 12 (left: 12)",
                "12 - 4 = 8 (left: 4 8 12)",
                "12 / 4 = 3 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8)",
                "12 / 4 = 3 (left: 4 3  || 4 * 3 = 12 (left: 12)",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.0,
                40.0,
                0.001,
                0.003,
                40.001,
                60.0,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 4.3",
                "2 <- 0.4",
                "3 <- 4.7",
                "4 <- 4.1",
                "5 <- 1.1",
                "6 <- 3.3",
                "7 <- 0.8",
                "8 <- 3.3",
                "9 <- 4.7"
            ]
        },
        "Step 5": {
            "steps": [
                "12 / 4 = 3 (left: 4 12 3) || 12 / 4 = 3 (left: 3 3)",
                "12 - 4 = 8 (left: 4 8 12) || 12 / 4 = 3 (left: 3 8 12) || 3 * 8 = 24 (left: 24 12)",
                "12 - 4 = 8 (left: 4 8 12) || 4 * 8 = 32 (left: 32 12)",
                "12 / 4 = 3 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || Input: 9 3 7",
                "12 / 4 = 3 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 / 4 = 3 (left: 4 12 3) || 12 - 4 = 8 (left: 8 3) || 8 * 3 = 24 (left: 24)",
                "12 / 4 = 3 (left: 4 3  || 4 * 3 = 12 (left: 12)",
                "12 / 4 = 3 (left: 4 12 3) || 12 - 4 = 8 (left: 8 3) || 8 * 3 = 24 (left: 24)",
                "12 / 4 = 3 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 10 + 5 = 15 (left: 15)"
            ],
            "Evaluation": [
                21.0,
                40.001,
                20.001,
                0.003,
                0.003,
                0.003,
                40.0,
                0.001,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 5.8",
                "1 <- 0.2",
                "2 <- 5.6",
                "3 <- 0.3",
                "4 <- 5.8",
                "5 <- 3.3",
                "6 <- 4.1",
                "7 <- 5.8",
                "8 <- 0.2",
                "9 <- 1.1"
            ]
        },
        "Step 6": {
            "steps": [
                "12 / 4 = 3 (left: 4 12 3) || 12 - 4 = 8 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: (12 / 4) * (12 - 4) = 24",
                "12 / 4 = 3 (left: 4 3 12) || 4 * 12 = 48 (left: 3 48)",
                "12 / 4 = 3 (left: 4 12 3) || 12 - 4 = 8 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: ((4 / 4) + 12) * 12 = 24",
                "12 / 4 = 3 (left: 4 3 12) || 4 / 3 = 1.33 (left: 1.33 12)",
                "12 / 4 = 3 (left: 4 12 3) || 12 - 4 = 8 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: (12 / 4) * (12 - 4) = 24",
                "12 / 4 = 3 (left: 4 12 3) || 12 - 4 = 8 (left: 8 3) || 8 / 3 = 2.66667 (left: 2.66667)",
                "12 / 4 = 3 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "12 / 4 = 3 (left: 4 12 3) || 12 - 4 = 8 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: (12 / 4) * (12 - 4) = 24",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12)",
                "12 / 4 = 3 (left: 4 3 12) || 3 * 4 = 12 (left: 12 12) || 12 + 12 = 24"
            ]
        },
        "Input": "4 4 12 12",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "74": {
        "puzzle": "1 3 4 12",
        "Step 0": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12)",
                "3 + 1 = 4 (left: 4 4 12)",
                "4 * 3 = 12 (left: 1 12 12)",
                "12 - 3 = 9 (left: 1 3 9)",
                "4 * 3 = 12 (left: 1 12 12)",
                "12 / 4 = 3 (left: 1 3 12)",
                "4 + 12 = 16 (left: 1 3 16)",
                "12 / 3 = 4 (left: 1 4 12)",
                "12 - 3 = 9 (left: 1 4 ",
                "12 / 3 = 4 (left: 1 4 12)"
            ],
            "Evaluation": [
                41.0,
                21.001,
                20.002,
                2.001,
                21.001,
                41.0,
                0.002,
                1.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- INIT",
                "2 <- 0.5",
                "3 <- 0.4",
                "4 <- 0.2",
                "5 <- 0.0",
                "6 <- 0.1",
                "7 <- 0.0",
                "8 <- INIT",
                "9 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36)",
                "4 * 3 = 12 (left: 1 12 12)",
                "12 / 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9)",
                "4 * 3 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12)",
                "4 * 3 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "12 / 4 = 3 (left: 1 3 12) || 3 + 12 = 15 (left:",
                "3 + 1 = 4 (left: 4 4 12) || 12 - 4 = 8 (left: 4 8)",
                "12 / 4 = 3 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12)",
                "4 * 3 = 12 (left: 1 12 12)",
                "12 / 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9)"
            ],
            "Evaluation": [
                60.0,
                41.0,
                60.0,
                60.0,
                40.001,
                1.0,
                0.003,
                60.0,
                0.003,
                41.0
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.9",
                "2 <- INIT",
                "3 <- 1.0",
                "4 <- 1.9",
                "5 <- 0.2",
                "6 <- 1.7",
                "7 <- 0.1",
                "8 <- 1.1",
                "9 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "12 / 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "4 / 1 = 4 (left: 3 4 12)",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "12 / 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "4 * 3 = 12 (left: 1 12 12) || 12 - 12 = 0 (left:",
                "12 / 4 = 3 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6 12)",
                "3 + 1 = 4 (left: 4 4 12) || 12 - 4 = 8 (left: 4 8)",
                "4 * 3 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "4 * 3 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                21.001,
                0.003,
                0.003,
                0.001,
                0.003,
                0.003,
                60.0,
                20.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.2",
                "2 <- 1.1",
                "3 <- 0.0",
                "4 <- 0.0",
                "5 <- 1.2",
                "6 <- 1.2",
                "7 <- 2.2",
                "8 <- 2.2",
                "9 <- 2.2"
            ]
        },
        "Step 3": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 / 1 = 36 (left: 36)",
                "12 / 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "4 * 3 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)",
                "12 / 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "12 / 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9) ",
                "4 / 1 = 4 (left: 3 4 12) || 12 - 3 = 9 (left: 4 9 12)",
                "4 / 1 = 4 (left: 3 4 12) || 12 / 3 = 4 (left: 4 12)",
                "4 / 1 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8)"
            ],
            "Evaluation": [
                60.0,
                0.001,
                40.001,
                21.0,
                0.003,
                0.001,
                0.001,
                21.001,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.3",
                "2 <- 1.1",
                "3 <- 1.2",
                "4 <- 3.0",
                "5 <- 1.3",
                "6 <- 1.7",
                "7 <- 1.4",
                "8 <- 3.2",
                "9 <- 3.9"
            ]
        },
        "Step 4": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "4 * 3 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "4 * 3 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "12 / 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 / 1 = 36 (left: 36) || 36 + 2 = 38",
                "4 * 3 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 / 4 = 3 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "4 * 3 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0) ",
                "4 * 3 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "4 / 1 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                40.001,
                0.002,
                0.003,
                0.002,
                0.002,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 3.9",
                "1 <- 0.5",
                "2 <- 1.2",
                "3 <- 1.9",
                "4 <- 2.8",
                "5 <- 1.2",
                "6 <- 3.9",
                "7 <- 4.2",
                "8 <- 1.1",
                "9 <- 3.7"
            ]
        },
        "Step 5": {
            "steps": [
                "4 / 1 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "12 / 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "4 * 3 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 / 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "4 / 1 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || Input: 4 6 10 15",
                "4 * 3 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "4 * 3 = 12 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "4 / 1 = 4 (left: 3 4 12) || 12 - 3 = 9 (left: 4 9 12) || 12 - 4 = 8 (left: 9 8)"
            ],
            "Evaluation": [
                0.002,
                41.0,
                0.001,
                0.002,
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 3.0",
                "2 <- 0.5",
                "3 <- 4.2",
                "4 <- 3.9",
                "5 <- 3.0",
                "6 <- 3.9",
                "7 <- 1.3",
                "8 <- 0.0",
                "9 <- 3.2"
            ]
        },
        "Step 6": {
            "steps": [
                "4 * 3 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 / 1 = 36 (left: 36) || 36 / 2 = 18",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)",
                "4 * 3 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "4 / 1 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 8 / 3 = 2 (left: 2)",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 / 1 = 36 (left: 36) || 36 / 2 = 18",
                "4 / 1 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || Input: 4 6 12",
                "4 * 3 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 / 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9)",
                "4 * 3 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                40.0,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.8",
                "1 <- 4.2",
                "2 <- 3.2",
                "3 <- 3.2",
                "4 <- 6.2",
                "5 <- 6.2",
                "6 <- 1.7",
                "7 <- 1.0",
                "8 <- 0.4",
                "9 <- 5.1"
            ]
        },
        "Step 7": {
            "steps": [
                "4 * 3 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "4 * 3 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "4 * 3 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "4 * 3 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "12 / 4 = 3 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 + 12 = 14",
                "12 / 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "4 * 3 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)"
            ],
            "Evaluation": [
                20.002,
                0.003,
                0.003,
                0.003,
                0.002,
                0.001,
                0.003,
                0.003,
                40.001,
                0.001
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 1.3",
                "2 <- 3.2",
                "3 <- 1.3",
                "4 <- 0.0",
                "5 <- 7.8",
                "6 <- 5.1",
                "7 <- 7.0",
                "8 <- 5.1",
                "9 <- 2.2"
            ]
        },
        "Step 8": {
            "steps": [
                "4 * 3 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "4 * 3 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "4 * 3 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "4 * 3 = 12 (left: 1 12 12) || 12 * 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 / 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)",
                "4 * 3 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "4 * 3 = 12 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144) || 144 - 4 = 140 (left: 140)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 + 4 = 5",
                "4 / 1 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 1.1",
                "2 <- 3.2",
                "3 <- 8.9",
                "4 <- 8.9",
                "5 <- 8.0",
                "6 <- 8.0",
                "7 <- 6.8",
                "8 <- 6.2",
                "9 <- 5.1"
            ]
        },
        "Step 9": {
            "steps": [
                "4 * 3 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "4 * 3 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "4 * 3 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "4 / 1 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "4 / 1 = 4 (left: 3 4 12) || 12 - 4 = 8 (left: 3 8) || 10 + 5 = 15 (left: 15 7)",
                "4 * 3 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (1 * 4) * (3 + 12) = 24",
                "4 * 3 = 12 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: ((1 * 3) * 4) + 12 = 24",
                "12 / 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)"
            ]
        },
        "Input": "1 3 4 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "75": {
        "puzzle": "5 5 11 12",
        "Step 0": {
            "steps": [
                "5 + 11 = 16 (left: 16 12)",
                "5 / 5 = 1 (left: 1 11 12)",
                "5 - 5 = 0 (left: 0 11 12)",
                "5 - 5 = 0 (left: 0 11 12)",
                "11 + 5 = 16 (left: 5 16 12)",
                "5 - 5 = 0 (left: 0 11 12)",
                "5 * 5 = 25 (left: 11 25 12)",
                "11 + 5 = 16 (left: 5 16 12)",
                "11 - 5 = 6 (left: 5 6 ",
                "11 + 5 = 16 (left: 5 16 12)"
            ],
            "Evaluation": [
                1.002,
                21.001,
                2.001,
                3.0,
                3.0,
                0.002,
                0.003,
                2.001,
                0.001,
                3.0
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 0.1",
                "2 <- 0.3",
                "3 <- INIT",
                "4 <- 0.9",
                "5 <- 0.1",
                "6 <- 0.1",
                "7 <- 0.1",
                "8 <- 0.0",
                "9 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "11 + 5 = 16 (left: 5 16 12) || 16 - 5 = 11 (left: 11 12)",
                "5 / 5 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 1 11)",
                "5 - 5 = 0 (left: 0 11 12) || 11 - 12 = -1 (left: 0 -1)",
                "11 + 5 = 16 (left: 5 16 12)",
                "11 + 5 = 16 (left: 5 16 12) || 16 / 5 = 3.2 (left: 3.2 12)",
                "5 / 5 = 1 (left: 1 11 12) || 1 - 11 = -10 (left:",
                "5 / 5 = 1 (left: 1 11 12) || 12 - 11 = 1 (left: 1 11)",
                "5 / 5 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "5 + 11 = 16 (left: 16 12) || 16 + 12 = 28 (left: 28)",
                "11 + 5 = 16 (left: 5 16 12) || 16 / 5 = 3.2 (left: 3.2 12)"
            ],
            "Evaluation": [
                0.002,
                20.0,
                0.003,
                3.0,
                0.003,
                0.003,
                40.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 0.1",
                "2 <- INIT",
                "3 <- 0.9",
                "4 <- 1.6",
                "5 <- 1.6",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "11 + 5 = 16 (left: 5 16 12) || 16 - 5 = 11 (left: 11 12)",
                "5 / 5 = 1 (left: 1 11 12) || 12 - 1 = 11 (left: 11 11)",
                "5 * 11 = 55 (left: 12 55)",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80)",
                "5 / 5 = 1 (left: 1 11 12) || 12 - 11 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "5 / 5 = 1 (left: 1 11 12) || 12 - 11 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "11 + 5 = 16 (left: 5 16 12)",
                "11 - 5 = 6 (left: 5 6 ",
                "5 + 11 = 16 (left: 5 12 16)",
                "5 / 5 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                20.002,
                0.001,
                0.001,
                3.0,
                0.003,
                3.0,
                0.002
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- INIT",
                "2 <- 1.6",
                "3 <- 1.6",
                "4 <- 2.8",
                "5 <- 1.6",
                "6 <- 2.3",
                "7 <- 1.6",
                "8 <- 0.0",
                "9 <- 0.2"
            ]
        },
        "Step 3": {
            "steps": [
                "5 / 5 = 1 (left: 1 11 12) || 11 - 1 = 10 (left: 10 12)",
                "5 + 12 = 17 (left: 5 11 17)",
                "5 / 5 = 1 (left: 1 11 12) || 12 - 11 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "5 / 5 = 1 (left: 1 11 12) || 12 - 11 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "5 + 11 = 16 (left: 5 12 16) || 5 * 12 = 60 (left: 16)",
                "5 / 5 = 1 (left: 1 11 12) || 12 - 11 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960)",
                "5 / 5 = 1 (left: 1 11 12) || 12 - 11 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "5 + 11 = 16 (left: 16 12) || 16 + 12 = 28 (left: 28)",
                "5 - 5 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 1 12)"
            ],
            "Evaluation": [
                3.0,
                3.0,
                0.003,
                0.0,
                0.003,
                0.002,
                40.0,
                0.003,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 3.6",
                "2 <- 2.8",
                "3 <- 0.1",
                "4 <- 3.8",
                "5 <- 2.3",
                "6 <- 2.3",
                "7 <- INIT",
                "8 <- 3.6",
                "9 <- 3.8"
            ]
        },
        "Step 4": {
            "steps": [
                "5 / 5 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 960 - 80 = 880 (left: 880)",
                "5 + 11 = 16 (left: 5 12 16) || 5 * 12 = 60 (left: 60 16)",
                "5 / 5 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "5 + 11 = 16 (left: 16 12) || 16 + 12 = 28 (left: 28) || 28 - 2 = 26 (left: 26)",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || Possible next steps:",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 / 80 = 0.15 (left: 0.15)",
                "11 * 5 = 55 (left: 11 12 ",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 80 / 12 = 6.66666666667 (left: 6.66666666667 80)",
                "5 + 11 = 16 (left: 16 12) || 16 + 12 = 28 (left: 28) || 28 - 8 = 20 (left: 20)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                1.0,
                0.003,
                0.003,
                0.003,
                0.001,
                0.001,
                1.001,
                0.003
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 3.8",
                "2 <- 3.6",
                "3 <- 3.8",
                "4 <- 1.6",
                "5 <- 1.6",
                "6 <- 3.8",
                "7 <- 3.8",
                "8 <- 3.6",
                "9 <- 1.6"
            ]
        },
        "Step 5": {
            "steps": [
                "5 + 11 = 16 (left: 16 12) || 16 + 12 = 28 (left: 28) || 8 * 2 = 16 (left: 16)",
                "5 + 11 = 16 (left: 16 12) || 16 + 12 = 28 (left: 28) || None, as there is only one number given.",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 960 - 80 = 880 (left: 880)",
                "5 + 11 = 16 (left: 16 12) || 16 + 12 = 28 (left: 28) || None, as there is only one number in the input.",
                "5 / 5 = 1 (left: 1 11 12) || 12 - 11 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "5 / 5 = 1 (left: 1 11 12) || 12 - 11 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "5 + 11 = 16 (left: 16 12) || 16 + 12 = 28 (left: 28) || 8 / 2 = 4 (left: 4)",
                "5 + 11 = 16 (left: 16 12) || 16 + 12 = 28 (left: 28) || None, as there is only one number in the input.",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 80 * 2 = 160 (left: 160 960)",
                "5 / 5 = 1 (left: 1 11 12) || 12 - 11 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.003,
                0.003,
                0.001,
                0.002,
                0.002,
                0.003,
                21.001,
                0.001
            ],
            "Resampling": [
                "0 <- 5.8",
                "1 <- 3.6",
                "2 <- 3.6",
                "3 <- 2.3",
                "4 <- 5.8",
                "5 <- 3.8",
                "6 <- 3.8",
                "7 <- 1.1",
                "8 <- 1.6",
                "9 <- 1.6"
            ]
        },
        "Step 6": {
            "steps": [
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 80 * 2 = 160 (left: 160 960) || 160 * 960 = 153600 (left: 153600)",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 960 - 80 = 880 (left: 880)",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 80 + 960 = 1040 (left: 1040)",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 960)",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 80 * 2 = 160 (left: 160 960) || 960 / 160 = 6 (left: 6 960)",
                "5 + 11 = 16 (left: 16 12) || 16 + 12 = 28 (left: 28) || No possible next steps as the input is already a single number.",
                "5 + 11 = 16 (left: 16 12) || 16 + 12 = 28 (left: 28) || 8 / 2 = 4 (left: 4)",
                "5 / 5 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "5 / 5 = 1 (left: 1 11 12) || 12 - 11 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "5 / 5 = 1 (left: 1 11 12) || 12 - 11 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                41.0,
                0.003,
                0.001,
                0.002,
                0.0,
                0.001
            ],
            "Resampling": [
                "0 <- 3.8",
                "1 <- 5.8",
                "2 <- 1.6",
                "3 <- 3.6",
                "4 <- 0.3",
                "5 <- 5.8",
                "6 <- 0.2",
                "7 <- 6.4",
                "8 <- 1.1",
                "9 <- 5.8"
            ]
        },
        "Step 7": {
            "steps": [
                "5 + 11 = 16 (left: 16 12) || 16 + 12 = 28 (left: 28) || 8 * 2 = 16 (left: 16)",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 80 * 2 = 160 (left: 160 960) || 960 - 160 = 800 (left: 800)",
                "5 / 5 = 1 (left: 1 11 12) || 12 - 11 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 960 / 80 = 12 (left: 12 80)",
                "5 - 5 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1)",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 80 * 2 = 160 (left: 160 960) || 960 - 160 = 800 (left: 800)",
                "5 - 5 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132)",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 80 * 2 = 160 (left: 160 960) || 960 / 160 = 6 (left: 6 960) || 960 - 6 = 954 (left: 954)",
                "5 / 5 = 1 (left: 1 11 12) || 11 / 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 80 * 2 = 160 (left: 160 960) || 960 / 160 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                40.001,
                60.0,
                0.003,
                20.002,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 7.3",
                "1 <- 5.8",
                "2 <- 6.4",
                "3 <- 6.4",
                "4 <- 1.6",
                "5 <- 7.4",
                "6 <- 7.3",
                "7 <- 3.6",
                "8 <- 2.3",
                "9 <- 7.4"
            ]
        },
        "Step 8": {
            "steps": [
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 960 / 80 = 12 (left: 12 80) || 80 / 12 = 6.67 (left: 6.67)",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 80 * 2 = 160 (left: 160 960) || Possible next steps:",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 80 * 2 = 160 (left: 160 960) || 960 / 160 = 6 (left: 6 960) || 960 - 6 = 954 (left: 954)",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 80 * 2 = 160 (left: 160 960) || 960 / 160 = 6 (left: 6 960) || 960 - 6 = 954 (left: 954)",
                "5 / 5 = 1 (left: 1 11 12) || 12 - 11 = 1 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "5 - 5 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 5 + 3 = 8 (left: 8)",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 960 / 80 = 12 (left: 12 80) || 80 / 12 = 6.666666666666667 (left: 6.666666666666667)",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 960 / 12 = 80 (left: 80)",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 80 / 12 = 6.666666666666667 (left: 6.666666666666667)",
                "5 - 5 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 = undefined (left: 0)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                0.003,
                0.002,
                0.003,
                0.001,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 7.4",
                "1 <- 3.8",
                "2 <- 7.3",
                "3 <- 7.6",
                "4 <- 7.6",
                "5 <- 7.3",
                "6 <- 7.3",
                "7 <- 1.6",
                "8 <- 3.8",
                "9 <- 7.4"
            ]
        },
        "Step 9": {
            "steps": [
                "5 - 5 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 0 - 1 = -1 (left: -1)",
                "5 + 11 = 16 (left: 16 12) || 16 + 12 = 28 (left: 28) || There are no possible next steps since there is only one number in the input.",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 960 / 80 = 12 (left: 12 80) || 80 - 12 = 68 (left: 68)",
                "5 - 5 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 132 / 0 is undefined",
                "5 - 5 = 0 (left: 0 11 12) || 11 * 12 = 132 (left: 0 132) || 132 - 0 = 132 (left: 132)",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 960 / 80 = 12 (left: 12 80) || 80 - 12 = 68 (left: 68)",
                "11 + 5 = 16 (left: 5 16 12) || 5 * 16 = 80 (left: 12 80) || 12 * 80 = 960 (left: 80 960) || 960 / 80 = 12 (left: 12 80) || 80 - 12 = 68 (left: 68)",
                "5 / 5 = 1 (left: 1 11 12) || 12 - 11 = 1 (left: 1 11) || Input: 5 3 2 1",
                "5 + 11 = 16 (left: 16 12) || 16 + 12 = 28 (left: 28) || 28 - 2 = 26 (left: 26)",
                "5 - 5 = 0 (left: 0 11 12) || 12 - 11 = 1 (left: 0 1) || 1 / 0 = Undefined"
            ]
        },
        "Input": "5 5 11 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "76": {
        "puzzle": "1 2 5 8",
        "Step 0": {
            "steps": [
                "5 + 8 = 13 (left: 1 2 13)",
                "2 * 5 = 10 (left: 1 10 8)",
                "8 - 2 = 6 (left: 1 5 6)",
                "8 - 1 = 7 (left: 2 5 7)",
                "5 + 8 = 13 (left: 1 2 13)",
                "5 - 2 = 3 (left: 1 3 8)",
                "5 - 2 = 3 (left: 1 3 8)",
                "5 + 8 = 13 (left: 1 2 13)",
                "5 - 2 = 3 (left: 1 3 ",
                "5 + 8 = 13 (left: 1 2 13)"
            ],
            "Evaluation": [
                0.003,
                2.001,
                22.0,
                2.001,
                0.002,
                60.0,
                41.0,
                20.002,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.6",
                "2 <- 0.6",
                "3 <- 0.5",
                "4 <- 0.5",
                "5 <- 0.5",
                "6 <- 0.6",
                "7 <- 0.6",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 5 = 10 (left: 1 10 8)",
                "5 - 2 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "5 - 2 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "5 - 2 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 3 7)",
                "5 - 2 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8)",
                "5 - 2 = 3 (left: 1 3 8) || 1 * 8 = 8 (left:",
                "5 - 2 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 3 7)",
                "5 - 2 = 3 (left: 1 3 8) || 8 - 3 = 5 (left: 5 8)",
                "5 + 8 = 13 (left: 1 2 13)",
                "2 - 1 = 1 (left: 1 5 8)"
            ],
            "Evaluation": [
                3.0,
                60.0,
                60.0,
                0.001,
                60.0,
                1.0,
                1.0,
                0.002,
                2.001,
                3.0
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 0.5",
                "2 <- 0.6",
                "3 <- 0.6",
                "4 <- 1.4",
                "5 <- 1.2",
                "6 <- 1.1",
                "7 <- 1.1",
                "8 <- 1.2",
                "9 <- 0.5"
            ]
        },
        "Step 2": {
            "steps": [
                "5 - 2 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "5 - 2 = 3 (left: 1 3 8) || 8 / 3 = 2.67 (left: 1 2.67)",
                "5 - 2 = 3 (left: 1 3 8) || 8 / 3 = 2.67 (left: 1 2.67)",
                "5 - 2 = 3 (left: 1 3 8) || 8 - 1 = 7 (left: 7 8)",
                "5 - 2 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "5 - 2 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "5 - 2 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "5 - 2 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || Input: 5 10",
                "5 - 2 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || Input: 4 12",
                "5 - 2 = 3 (left: 1 3 8) || 3 - 1 = 2 (left: 2 8)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.001,
                0.003,
                0.003,
                0.003,
                60.0,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.5",
                "3 <- 1.1",
                "4 <- 1.2",
                "5 <- 1.4",
                "6 <- 1.4",
                "7 <- 0.5",
                "8 <- 1.4",
                "9 <- 1.1"
            ]
        },
        "Step 3": {
            "steps": [
                "2 * 5 = 10 (left: 1 10 8)",
                "8 - 1 = 7 (left: 2 5 7)",
                "5 - 2 = 3 (left: 1 3 8) || 8 / 3 = 2.67 (left: 1 2.67)",
                "5 - 2 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 8 24)",
                "5 - 2 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5 8)",
                "5 - 2 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 5 + 12 = 17 (left: 17 3)",
                "5 - 2 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "5 - 2 = 3 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5)",
                "5 - 2 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "5 - 2 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)"
            ],
            "Evaluation": [
                2.001,
                2.001,
                1.001,
                1.002,
                2.001,
                1.0,
                40.0,
                0.001,
                60.0,
                0.001
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 0.7",
                "2 <- 3.8",
                "3 <- 3.4",
                "4 <- 3.6",
                "5 <- 2.6",
                "6 <- 1.2",
                "7 <- 2.6",
                "8 <- 3.8",
                "9 <- 2.6"
            ]
        },
        "Step 4": {
            "steps": [
                "5 - 2 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * (5 - 2)) * 8 = 24",
                "5 + 8 = 13 (left: 1 2 13) || 13 / 2 = 6.5 (left: 1 6.5)",
                "5 - 2 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (5 - 2) * (8 / 1) = 24",
                "5 - 2 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5 8) || 8 - 5 = 3 (left: 3)",
                "5 - 2 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (5 - 2) * (8 / 1) = 24",
                "5 - 2 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * (5 - 2)) * 8 = 24",
                "5 - 2 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "5 - 2 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 1 * (5 - 2) * 8 = 24",
                "5 - 2 = 3 (left: 1 3 8) || 8 / 1 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (5 - 2) * (8 / 1) = 24",
                "5 - 2 = 3 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * (5 - 2)) * 8 = 24"
            ]
        },
        "Input": "1 2 5 8",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            }
        ]
    },
    "77": {
        "puzzle": "2 2 4 6",
        "Step 0": {
            "steps": [
                "4 + 2 = 6 (left: 2 4 6)",
                "2 * 2 = 4 (left: 4 4 6)",
                "2 * 4 = 8 (left: 8 4 6)",
                "4 + 2 = 6 (left: 2 4 6)",
                "4 + 2 = 6 (left: 2 4 6)",
                "4 + 2 = 6 (left: 2 4 6)",
                "2 * 4 = 8 (left: 8 2 6)",
                "4 + 2 = 6 (left: 2 4 6)",
                "6 - 2 = 4 (left: 2 4 ",
                "2 / 2 = 1 (left: 1 4 6)"
            ],
            "Evaluation": [
                0.003,
                22.0,
                41.0,
                0.003,
                1.002,
                0.003,
                3.0,
                0.003,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.9",
                "2 <- 0.2",
                "3 <- 0.2",
                "4 <- 0.6",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 0.9",
                "8 <- INIT",
                "9 <- 0.9"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 2 = 4 (left: 4 4 6)",
                "2 / 2 = 1 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "2 * 4 = 8 (left: 8 4 6) || 8 / 4 = 2 (left: 2 6)",
                "2 * 4 = 8 (left: 8 4 6) || 6 - 4 = 2 (left: 8 2)",
                "2 * 4 = 8 (left: 8 2 6) || 8 - 2 = 6 (left: 6 6)",
                "2 / 2 = 1 (left: 1 4 6)",
                "4 + 2 = 6 (left: 2 4 6)",
                "2 / 2 = 1 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6)",
                "4 + 2 = 6 (left: 2 4 6)",
                "2 / 2 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)"
            ],
            "Evaluation": [
                3.0,
                1.002,
                1.002,
                1.002,
                21.001,
                60.0,
                0.003,
                60.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.7",
                "2 <- 1.9",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 0.2",
                "6 <- INIT",
                "7 <- 1.4",
                "8 <- 1.7",
                "9 <- 1.7"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 2 = 4 (left: 4 4 6)",
                "2 / 2 = 1 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 / 2 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "4 + 2 = 6 (left: 2 4 6)",
                "6 / 2 = 3 (left: 2 4 3)",
                "2 * 4 = 8 (left: 8 4 6) || Input: 4 5",
                "2 / 2 = 1 (left: 1 4 6)",
                "2 * 4 = 8 (left: 8 2 6) || 8 - 2 = 6 (left: 6 6) || 6 - 6 = 0 (left: 0)",
                "2 / 2 = 1 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "2 / 2 = 1 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 3 + 9 = 12 (left: 12)"
            ],
            "Evaluation": [
                2.0,
                0.002,
                0.002,
                1.002,
                60.0,
                0.003,
                60.0,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 2.4",
                "2 <- 2.4",
                "3 <- 2.6",
                "4 <- 2.6",
                "5 <- 2.4",
                "6 <- 0.9",
                "7 <- 2.6",
                "8 <- 2.6",
                "9 <- 0.2"
            ]
        },
        "Step 3": {
            "steps": [
                "2 / 2 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "6 / 2 = 3 (left: 2 4 3) || 4 / 2 = 2 (left: 2 3)",
                "6 / 2 = 3 (left: 2 4 3) || Possible",
                "2 / 2 = 1 (left: 1 4 6) || 6 + 1 = 7 (left: 4 7)",
                "2 / 2 = 1 (left: 1 4 6) || Input: 3 9 5",
                "6 / 2 = 3 (left: 2 4 3) || 2 + 3 = 5 (left:",
                "2 / 2 = 1 (left: 1 4 6) || 6 + 1 = 7 (left: 4 7)",
                "2 / 2 = 1 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5)",
                "2 / 2 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "2 * 4 = 8 (left: 8 4 6) || 8 * 4 = 32 (left: 32 6)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.003,
                0.002,
                0.002,
                0.001,
                1.002,
                1.002,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 2.4",
                "2 <- 1.7",
                "3 <- 0.9",
                "4 <- 2.4",
                "5 <- 2.4",
                "6 <- 2.4",
                "7 <- 2.6",
                "8 <- 1.7",
                "9 <- 2.4"
            ]
        },
        "Step 4": {
            "steps": [
                "2 * 4 = 8 (left: 8 2 6) || 8 - 2 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36)",
                "6 / 2 = 3 (left: 2 4 3) || Possible next steps:",
                "2 / 2 = 1 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "2 / 2 = 1 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5)",
                "6 / 2 = 3 (left: 2 4 3) || 4 / 2 = 2 (left: 2 3)",
                "6 / 2 = 3 (left: 2 4 3) || 4 / 2 = 2 (left: 2 3)",
                "6 / 2 = 3 (left: 2 4 3) || 3 + 2 = 5 (left: 4 5)",
                "2 / 2 = 1 (left: 1 4 6) || 4 - 1 = 3 (left: 3 6)",
                "2 / 2 = 1 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "6 / 2 = 3 (left: 2 4 3) || 4 / 2 = 2 (left: 2 2)"
            ],
            "Evaluation": [
                20.0,
                0.003,
                0.003,
                1.002,
                0.003,
                0.002,
                21.0,
                0.0,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 1.5",
                "2 <- 1.7",
                "3 <- 0.9",
                "4 <- 4.0",
                "5 <- 2.4",
                "6 <- 4.0",
                "7 <- 4.0",
                "8 <- 1.4",
                "9 <- 0.2"
            ]
        },
        "Step 5": {
            "steps": [
                "6 / 2 = 3 (left: 2 4 3) || 3 - 2 = 1 (left: 1 4)",
                "2 / 2 = 1 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 / 2 = 1 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 3 - 9 = -6 (left:",
                "2 / 2 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2 6)",
                "2 * 4 = 8 (left: 8 2 6) || 8 - 2 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "6 / 2 = 3 (left: 2 4 3) || 3 * 2 = 6 (left: 4 6)",
                "2 * 4 = 8 (left: 8 2 6) || 8 - 2 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 + 2 = 38 (left: 38)",
                "2 * 4 = 8 (left: 8 2 6) || 8 - 2 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "2 * 4 = 8 (left: 8 2 6) || 8 - 2 = 6 (left: 6 6) || 6 + 6 = 12",
                "2 * 4 = 8 (left: 8 4 6) || 8 / 4 = 2 (left: 2 6)"
            ],
            "Evaluation": [
                60.0,
                0.0,
                0.0,
                0.002,
                0.003,
                20.0,
                0.003,
                0.003,
                0.003,
                20.001
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 1.4",
                "2 <- 4.0",
                "3 <- 5.5",
                "4 <- 1.5",
                "5 <- 2.6",
                "6 <- 1.5",
                "7 <- 1.9",
                "8 <- 1.4",
                "9 <- 2.6"
            ]
        },
        "Step 6": {
            "steps": [
                "2 / 2 = 1 (left: 1 4 6) || 1 + 4 = 5 (left: 5 6)",
                "2 * 4 = 8 (left: 8 2 6) || 8 - 2 = 6 (left: 6 6) || 6 + 6 = 12",
                "2 * 4 = 8 (left: 8 2 6) || 8 - 2 = 6 (left: 6 6) || 6 * 6 = 36 (left: 36) || 36 + 8 = 44",
                "6 / 2 = 3 (left: 2 4 3) || 3 * 2 = 6 (left: 4 6) || Input: 10 5 2",
                "2 / 2 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)",
                "2 / 2 = 1 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6)",
                "2 / 2 = 1 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5)",
                "2 / 2 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || Input: 3 9 5",
                "2 * 4 = 8 (left: 8 2 6) || 8 - 2 = 6 (left: 6 6) || 6 / 6 = 1 (left: 1)",
                "2 / 2 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 2 6)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                60.0,
                40.0,
                3.0,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 5.0",
                "2 <- 6.4",
                "3 <- 1.7",
                "4 <- 6.5",
                "5 <- 0.2",
                "6 <- 0.9",
                "7 <- 0.1",
                "8 <- 5.0",
                "9 <- 5.5"
            ]
        },
        "Step 7": {
            "steps": [
                "2 / 2 = 1 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "6 / 2 = 3 (left: 2 4 3) || 3 - 2 = 1 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "2 / 2 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 / 2 = 1 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "2 / 2 = 1 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "2 * 4 = 8 (left: 8 4 6) || 8 - 4 = 4 (left: 4 6)",
                "2 / 2 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "2 * 2 = 4 (left: 4 4 6) || 6 / 4 = 1.5 (left: 1.5 4)",
                "6 / 2 = 3 (left: 2 4 3) || 3 - 2 = 1 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "6 / 2 = 3 (left: 2 4 3) || 3 * 2 = 6 (left: 4 6) || 4 - 6 = -2 (left: -2)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.001,
                0.0,
                0.002,
                60.0,
                0.001,
                0.003,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 6.5",
                "1 <- 5.0",
                "2 <- 5.5",
                "3 <- 7.5",
                "4 <- 1.5",
                "5 <- 6.4",
                "6 <- 1.5",
                "7 <- 1.5",
                "8 <- 0.9",
                "9 <- 2.6"
            ]
        },
        "Step 8": {
            "steps": [
                "2 / 2 = 1 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "6 / 2 = 3 (left: 2 4 3) || 3 - 2 = 1 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "6 / 2 = 3 (left: 2 4 3) || 3 * 2 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 * 4 = 8 (left: 8 4 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "2 / 2 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)",
                "2 / 2 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 / 2 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "2 / 2 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "2 / 2 = 1 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "2 / 2 = 1 (left: 1 4 6) || Input: 3 9 12"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.0,
                60.0,
                60.0,
                0.0,
                0.003,
                0.001,
                1.001,
                0.003
            ],
            "Resampling": [
                "0 <- 8.3",
                "1 <- 7.5",
                "2 <- 8.3",
                "3 <- 6.4",
                "4 <- 6.4",
                "5 <- 8.3",
                "6 <- 8.4",
                "7 <- 6.4",
                "8 <- 8.3",
                "9 <- 8.4"
            ]
        },
        "Step 9": {
            "steps": [
                "2 * 4 = 8 (left: 8 4 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 4) * (6 - 4) = 24",
                "2 * 4 = 8 (left: 8 4 6) || 8 - 4 = 4 (left: 4 6) || 9 / 3 = 3 (left: 3)",
                "2 * 4 = 8 (left: 8 4 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 4) * (6 - 2) = 24",
                "2 / 2 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "2 / 2 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "2 * 4 = 8 (left: 8 4 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 4) * (6 - 4) = 24",
                "2 / 2 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "2 / 2 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "2 * 4 = 8 (left: 8 4 6) || 8 - 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (2 * 4) * (6 - 2) = 24",
                "2 / 2 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 - 6 = -2 (left: -2)"
            ]
        },
        "Input": "2 2 4 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "78": {
        "puzzle": "1 6 7 12",
        "Step 0": {
            "steps": [
                "7 * 1 = 7 (left: 7 12 7)",
                "6 - 1 = 5 (left: 5 7 12)",
                "12 - 6 = 6 (left: 1 6 12)",
                "12 - 1 = 11 (left: 11 7)",
                "7 * 1 = 7 (left: 7 7 12)",
                "12 - 6 = 6 (left: 1 6 7)",
                "7 - 1 = 6 (left: 6 6 12)",
                "7 - 1 = 6 (left: 6 7 12)",
                "6 * 7 = 42 (left: 1 42 ",
                "7 + 1 = 8 (left: 6 8 12)"
            ],
            "Evaluation": [
                3.0,
                3.0,
                0.003,
                0.002,
                3.0,
                1.002,
                60.0,
                22.0,
                20.002,
                22.0
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 0.7",
                "2 <- 0.6",
                "3 <- 0.9",
                "4 <- 0.7",
                "5 <- INIT",
                "6 <- 0.6",
                "7 <- 0.7",
                "8 <- INIT",
                "9 <- 0.9"
            ]
        },
        "Step 1": {
            "steps": [
                "7 - 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12)",
                "7 - 1 = 6 (left: 6 7 12) || 6 * 7 = 42 (left: 42 12)",
                "7 - 1 = 6 (left: 6 6 12) || 12 - 6 = 6 (left: 6 12)",
                "7 + 1 = 8 (left: 6 8 12) || 12 - 6 = 6 (left: 6 12)",
                "7 - 1 = 6 (left: 6 7 12) || 7 * 12 = 84 (left: 6 84)",
                "12 - 6 = 6 (left: 1 6 12)",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12)",
                "7 - 1 = 6 (left: 6 7 12) || 12 / 6 = 2 (left: 2 6)",
                "7 + 12 = 19 (left: 1, 6, 19)",
                "7 + 1 = 8 (left: 6 8 12) || 8 - 6 = 2 (left: 2 12)"
            ],
            "Evaluation": [
                40.0,
                1.002,
                1.002,
                0.003,
                41.0,
                0.003,
                60.0,
                2.001,
                1.002,
                60.0
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 0.7",
                "2 <- 0.9",
                "3 <- 0.9",
                "4 <- 1.4",
                "5 <- 0.7",
                "6 <- 1.6",
                "7 <- INIT",
                "8 <- 0.8",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "7 - 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12)",
                "7 - 1 = 6 (left: 6 7 12) || 7 - 6 = 1 (left: 1 12)",
                "7 + 1 = 8 (left: 6 8 12) || 8 / 6 = 1.33 (left: 6 1.33 8)",
                "7 + 1 = 8 (left: 6 8 12) || 8 - 6 = 2 (left: 2 12)",
                "7 - 1 = 6 (left: 6 7 12) || 7 * 12 = 84 (left: 6 84) || 6 / 2 = 3 (left: 3 84)",
                "7 - 1 = 6 (left: 6 7 12) || 12 / 6 = 2 (left:",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "12 - 6 = 6 (left: 1 6 ",
                "6 * 7 = 42 (left: 1 42  || Input: 5 10 20",
                "7 + 1 = 8 (left: 8 7 12)"
            ],
            "Evaluation": [
                20.002,
                20.002,
                3.0,
                60.0,
                0.002,
                1.0,
                0.002,
                40.0,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 0.8",
                "2 <- 1.6",
                "3 <- 2.1",
                "4 <- 0.9",
                "5 <- 2.7",
                "6 <- 2.3",
                "7 <- 0.9",
                "8 <- 1.9",
                "9 <- 2.3"
            ]
        },
        "Step 3": {
            "steps": [
                "6 - 1 = 5 (left: 5 7 12) || 7 * 5 = 35 (left: 35 12)",
                "6 * 7 = 42 (left: 1 42  || 42 - 1 = 41 (left: 1 41)",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "7 - 1 = 6 (left: 6 7 12) || 7 - 6 = 1 (left: 1 12) || 12 / 1 = 12 (left: 12)",
                "7 + 1 = 8 (left: 6 8 12) || 6 * 8 = 48 (left: 12 48)",
                "12 - 6 = 6 (left: 1 6  || 6 / 1 = 6 (left: 6)",
                "7 + 1 = 8 (left: 6 8 12) || 8 - 6 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "7 + 1 = 8 (left: 6 8 12) || 12 / 6 = 2 (left: 2 8)",
                "7 + 1 = 8 (left: 6 8 12) || 8 - 6 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "7 + 1 = 8 (left: 6 8 12) || 8 - 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                0.003,
                0.002,
                0.002,
                0.003,
                0.002,
                0.003,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 2.7",
                "1 <- 2.3",
                "2 <- 1.6",
                "3 <- 3.9",
                "4 <- 2.7",
                "5 <- 2.7",
                "6 <- 1.6",
                "7 <- 1.0",
                "8 <- 1.4",
                "9 <- 0.6"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 6 = 6 (left: 1 6  || 6 - 1 = 5 (left: 5)",
                "7 + 1 = 8 (left: 6 8 12) || 8 - 6 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "7 + 1 = 8 (left: 6 8 12) || 8 - 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 + 1) * (6 - 2) = 24",
                "12 - 6 = 6 (left: 1 6  || 6 - 1 = 5 (left: 5)",
                "12 - 6 = 6 (left: 1 6  || 1 * 6 = 6 (left: 6)",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "7 - 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12) || 36 * 12 = 432 (left: 432)",
                "7 - 1 = 6 (left: 6 7 12) || 7 * 12 = 84 (left: 6 84) || 6 * 14 = 84 (left: 14)",
                "7 - 1 = 6 (left: 6 6 12) || Input: 1 6 18"
            ],
            "Evaluation": [
                0.001,
                0.002,
                60.0,
                0.003,
                0.001,
                0.002,
                0.001,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.7",
                "1 <- 2.7",
                "2 <- 3.9",
                "3 <- 3.9",
                "4 <- 0.6",
                "5 <- 4.2",
                "6 <- 0.8",
                "7 <- 3.9",
                "8 <- 0.6",
                "9 <- 1.6"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 6 = 6 (left: 1 6  || 6 - 1 = 5 (left: 5)",
                "12 - 6 = 6 (left: 1 6  || 6 - 1 = 5 (left: 5)",
                "7 + 1 = 8 (left: 6 8 12) || 8 - 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 + 1) * (6 - 2) = 24",
                "7 + 1 = 8 (left: 6 8 12) || 8 - 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 + 1) * (6 - 2) = 24",
                "7 - 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18)",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 1) * (6 / 6 + 12) = 24",
                "6 * 7 = 42 (left: 1 42  || 1 * 42 = 42 (left: 42)",
                "7 + 1 = 8 (left: 6 8 12) || 8 - 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: 2 * (7 + (1 * 6)) = 24",
                "7 - 1 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.003,
                20.002,
                60.0,
                0.002,
                20.001,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 2.3",
                "2 <- 4.2",
                "3 <- 5.4",
                "4 <- 3.9",
                "5 <- 5.4",
                "6 <- 5.4",
                "7 <- 1.6",
                "8 <- 5.4",
                "9 <- INIT"
            ]
        },
        "Step 6": {
            "steps": [
                "7 - 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 6 * 3 = 18 (left: 18)",
                "7 + 1 = 8 (left: 6 8 12) || 8 - 6 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 1) * (6 / 6) * 12 = 24",
                "7 - 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 18 / 6 = 3 (left: 3 18)",
                "7 + 1 = 8 (left: 6 8 12) || 8 - 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 + 1) * (6 - 2) = 24",
                "7 - 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 6 / 18 = 0.3333333333333333 (left: 0.333333",
                "7 - 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 18 - 6 = 12 (left: 6 12)",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 + 12 = 14",
                "7 - 1 = 6 (left: 6 6 12) || 12 + 6 = 18 (left: 6 18) || 6 * 18 = 108 (left: 108)",
                "12 - 6 = 6 (left: 1 6 7)"
            ],
            "Evaluation": [
                0.0,
                0.003,
                60.0,
                0.003,
                0.003,
                1.001,
                0.003,
                0.003,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 1.0",
                "2 <- 6.2",
                "3 <- 1.9",
                "4 <- 6.2",
                "5 <- 6.2",
                "6 <- 6.2",
                "7 <- 4.2",
                "8 <- 2.0",
                "9 <- 6.2"
            ]
        },
        "Step 7": {
            "steps": [
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "7 - 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12) || 36 + 12 = 48 (left: 48)",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 1) * (6 / 6) * 12 = 24 || Input: 3 3 4 8\nSteps:\n3 + 3 = 6 (left: 4 6 8)\n6 * 4 = 24 (left: 24 8)\n24 / 8 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 24 = 216 (left: 216)\n216 / 8 = 27 (left: 27)\n27",
                "7 + 1 = 8 (left: 6 8 12) || 8 - 6 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 1) * (6 / 6) * 12 = 24 || Input: 3 3 4 8\n\n3 * 8 = 24 (left: 3 4 24)\n\n4 * 3 = 12 (left: 12 24)\n\n12 * 2 = 24 (left: 24)\n\nAnswer: (3 * 8) * (4 / 3) = 24",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 1) * (6 / 6) * 12 = 24 || Input: 3 3 4 9\n\n3 * 3 = 9 (left: 4 9 9)\n9 - 4 = 5 (left: 5 9)\n5 * 9 = 45 (left: 45)\nAnswer: (3 * 3) - 4 + 9 = 24",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 1) * (6 / 6) * 12 = 24 || Input: 3 3 5 6\nSteps:\n3 + 5 = 8 (left: 3 6 8)\n6 - 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (3 + 5) * (6 - 3) = 24",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 1) * (6 / 6) * 12 = 24",
                "7 - 1 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 36 12) || 12 / 36 = 0.3333 (left: 0.3333)",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 1) * (6 / 6) * 12 = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                0.003,
                60.0,
                40.0,
                60.0,
                40.001,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 7.9",
                "2 <- 7.6",
                "3 <- 1.6",
                "4 <- 7.2",
                "5 <- 7.2",
                "6 <- 6.2",
                "7 <- 7.4",
                "8 <- 7.9",
                "9 <- 7.7"
            ]
        },
        "Step 8": {
            "steps": [
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 1) * (6 / 6) * 12 = 24",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 1) * (6 / 6) * 12 = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24 || Input: 2 3 5 6\nSteps:\n3 * 5 = 15 (left: 2 6 15)\n6 - 2 = 4 (left: 4 15)\n4 * 15 = 60 (left: 60)\n60 / 2.5 = 24 (left: 24)\nAnswer: ((3 * 5) + (6 - 2)) * (15 / 2.5) = 24",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 1) * (6 / 6) * 12 = 24 || Input: 3 3 5 6\nSteps:\n3 + 5 = 8 (left: 3 6 8)\n6 - 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (3 + 5) * (6 - 3) = 24 || Input: 2 3 6 8\nSteps:\n3 * 8 = 24 (left: 2 6 24)\n6 / 2 = 3 (left: 3 24)\n3 * 24 = 72 (left: 72)\nAnswer: (3 * 8) * (6 / 2) = 24",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 1) * (6 / 6) * 12 = 24 || Input: 3 3 4 8\nSteps:\n3 + 3 = 6 (left: 4 6 8)\n6 * 4 = 24 (left: 24 8)\n24 / 8 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 24 = 216 (left: 216)\n216 / 8 = 27 (left: 27)\n27 || Answer: ((3 + 3) * 4) - 8 = 24",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 1) * (6 / 6) * 12 = 24 || Input: 3 3 4 8\nSteps:\n3 + 3 = 6 (left: 4 6 8)\n6 * 4 = 24 (left: 24 8)\n24 / 8 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 24 = 216 (left: 216)\n216 / 8 = 27 (left: 27)\n27 || Answer: ((3 + 3) * 4) + 8 = 24",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 1) * (6 / 6) * 12 = 24 || Input: 3 3 4 8\nSteps:\n3 * 3 = 9 (left: 4 8 9)\n9 - 4 = 5 (left: 5 8)\n5 * 8 = 40 (left: 40)\n40 / 2 = 24 (left: 24)\nAnswer: ((3 * 3) - 4) * 8 / 2 = 24",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 1) * (6 / 6) * 12 = 24 || Input: 3 3 4 8\n\n3 * 8 = 24 (left: 3 4 24)\n\n4 * 3 = 12 (left: 12 24)\n\n12 * 2 = 24 (left: 24)\n\nAnswer: (3 * 8) * (4 / 3) = 24 || Input: 2 3 5 6\n\n3 * 5 = 15 (left: 2 6 15)\n\n15 - 6 = 9 (left: 2 9)\n\n9 * 2 = 18 (left: 18)\n\n18 + 6 = 24 (left: 24)\n\nAnswer: ((3 * 5) - 6) * 2 + 6 = 24",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 1) * (6 / 6) * 12 = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24 || Input: 2 3 5 7\nSteps:\n3 + 5 = 8 (left: 2 7 8)\n2 * 8 = 16 (left: 7 16)\n7 + 16 = 23 (left: 23)\n23 + 1 = 24 (left: 24)\nAnswer: ((2 * (3 + 5)) + 7) + 1 = 24",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 1) * (6 / 6) * 12 = 24 || Input: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n4 * 3 = 12 (left: 8 12)\n12 - 8 = 4 (left: 4 24)\nAnswer: (3 + 5) * (4 * 3) = 24"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                20.002,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 7.2",
                "1 <- 8.0",
                "2 <- 8.1",
                "3 <- 8.7",
                "4 <- 8.2",
                "5 <- 7.6",
                "6 <- 7.4",
                "7 <- 6.2",
                "8 <- 8.3",
                "9 <- 6.2"
            ]
        },
        "Step 9": {
            "steps": [
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 1) * (6 / 6) * 12 = 24 || Input: 3 3 4 8\nSteps:\n3 + 3 = 6 (left: 4 6 8)\n6 * 4 = 24 (left: 24 8)\n24 / 8 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 24 = 216 (left: 216)\n216 / 8 = 27 (left: 27)\n27 || Answer: ((3 + 3) * 4) * 8 = 24",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 1) * (6 / 6) * 12 = 24 || Input: 3 3 5 7\nSteps:\n3 + 7 = 10 (left: 3 5 10)\n10 - 5 = 5 (left: 3 5)\n5 * 3 = 15 (left: 15)\n15 + 5 = 20 (left: 20)\n20 + 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - ",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 1) * (6 / 6) * 12 = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24 || Input: 2 3 5 6\nSteps:\n3 * 5 = 15 (left: 2 6 15)\n6 - 2 = 4 (left: 4 15)\n4 * 15 = 60 (left: 60)\n60 / 2.5 = 24 (left: 24)\nAnswer: ((3 * 5) + (6 - 2)) * (15 / 2.5) = 24 || Input: 2 3 6 8\nSteps:\n3 * 8 = 24 (left: 2 6 24)\n6 / 2 = 3 (left: 3 24)\n3 * 24 = 72 (left: 72)\n72 / 3 = 24 (left: 24)\nAnswer: (3 * 8) / (6 / 2) = 24",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 1) * (6 / 6) * 12 = 24 || Input: 3 3 4 8\n\n3 * 8 = 24 (left: 3 4 24)\n\n4 * 3 = 12 (left: 12 24)\n\n12 * 2 = 24 (left: 24)\n\nAnswer: (3 * 8) * (4 / 3) = 24 || Input: 2 3 5 6\n\n3 * 5 = 15 (left: 2 6 15)\n\n15 - 6 = 9 (left: 2 9)\n\n9 * 2 = 18 (left: 18)\n\n18 + 6 = 24 (left: 24)\n\nAnswer: ((3 * 5) - 6) * 2 + 6 = 24 || Input: 1 3 5 7\n\n5 - 3 = 2 (left: 1 2 7)\n\n7 * 2 = 14 (left: 1 14)\n\n14 * 1 = 14 (left: 14)\n\n14 * 1 = 24 (left: 24)\n\nAnswer: ((5 - 3) * 7) * 1 = 24",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 1) * (6 / 6) * 12 = 24 || Input: 3 3 5 6\nSteps:\n3 + 5 = 8 (left: 3 6 8)\n6 - 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (3 + 5) * (6 - 3) = 24 || Input: 2 3 6 8\nSteps:\n3 * 8 = 24 (left: 2 6 24)\n6 / 2 = 3 (left: 3 24)\n3 * 24 = 72 (left: 72)\nAnswer: (3 * 8) * (6 / 2) = 24 || Input: 2 4 8 9\nSteps:\n4 * 8 = 32 (left: 2 9 32)\n9 - 2 = 7 (left: 7 32)\n7 - 32 = 25 (left: 25)\nAnswer: (4 * 8) - (9 - 2) = 24",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 1) * (6 / 6) * 12 = 24 || Input: 3 3 5 6\nSteps:\n3 + 5 = 8 (left: 3 6 8)\n6 - 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (3 + 5) * (6 - 3) = 24 || Input: 2 3 4 6\nSteps:\n4 * 6 = 24 (left: 2 3 24)\n3 + 2 = 5 (left: 5 24)\n5 * 24 = 120 (left: 120)\nAnswer: (4 * 6) * (3 + 2) = 24",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 1) * (6 / 6) * 12 = 24 || Input: 3 3 4 8\n\n3 * 8 = 24 (left: 3 4 24)\n\n4 * 3 = 12 (left: 12 24)\n\n12 * 2 = 24 (left: 24)\n\nAnswer: (3 * 8) * (4 / 3) = 24 || Input: 2 3 5 5\n\n5 * 5 = 25 (left: 2 3 25)\n\n25 - 2 = 23 (left: 3 23)\n\n23 - 3 = 20 (left: 20)\n\n20 / 5 = 4 (left: 4)\n\n4 * 5 = 20 (left: 20)\n\n20 + 5 = 25 (left: 25)\n\n25 - 5 =",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 1) * (6 / 6) * 12 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n2 * 6 = 12 (left: 12 12)\n12 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (2 * 6) = 24",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 1) * (6 / 6) * 12 = 24",
                "7 - 1 = 6 (left: 6 6 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 - 1) * (6 / 6) * 12 = 24 || Input: 3 3 7 8\nSteps:\n3 + 7 = 10 (left: 3 8 10)\n10 - 8 = 2 (left: 2 3)\n2 * 3 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((3 + 7) - 8) * 3 * 4 = 24"
            ]
        },
        "Input": "1 6 7 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "79": {
        "puzzle": "1 8 9 12",
        "Step 0": {
            "steps": [
                "9 + 1 = 10 (left: 8 10 12)",
                "8 / 1 = 8 (left: 8 9 12)",
                "1 * 8 = 8 (left: 8 9 12)",
                "1 * 8 = 8 (left: 8 9 12)",
                "12 - 1 = 11 (left: 8 9 11)",
                "1 * 8 = 8 (left: 8 9 12)",
                "9 - 8 = 1 (left: 1 9 12)",
                "12 - 9 = 3 (left: 1 8 3)",
                "9 - 1 = 8 (left: 8 8 ",
                "9 + 1 = 10 (left: 8 10 12)"
            ],
            "Evaluation": [
                3.0,
                3.0,
                22.0,
                3.0,
                3.0,
                3.0,
                2.001,
                40.001,
                1.002,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.7",
                "2 <- 0.7",
                "3 <- 0.9",
                "4 <- 0.7",
                "5 <- 0.2",
                "6 <- INIT",
                "7 <- 0.2",
                "8 <- INIT",
                "9 <- 0.2"
            ]
        },
        "Step 1": {
            "steps": [
                "8 + 1 = 9 (left: 9 9 12)",
                "12 - 9 = 3 (left: 1 8 3) || 1 * 8 = 8 (left: 3 8)",
                "12 - 9 = 3 (left: 1 8 3) || 1 * 8 = 8 (left: 8 8)",
                "9 + 1 = 10 (left: 8 10 12) || 10 + 12 = 22 (left: 8 22)",
                "12 - 9 = 3 (left: 1 8 3) || 1 * 8 = 8 (left: 8 3)",
                "1 * 8 = 8 (left: 8 9 12) || 8 / 9 = 0.8888888888888888 (left: 8 0.8888888888888888)",
                "9 - 1 = 8 (left: 8 9 12)",
                "1 * 8 = 8 (left: 8 9 12) || 8 - 9 = -1 (left: -1 12)",
                "1 * 8 = 8 (left: 8 9 12)",
                "1 * 8 = 8 (left: 8 9 12) || 9 / 8 = 1.125 (left: 1.125 12)"
            ],
            "Evaluation": [
                1.002,
                60.0,
                0.002,
                1.002,
                40.0,
                41.0,
                2.0,
                0.002,
                2.001,
                2.0
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 0.2",
                "2 <- 1.9",
                "3 <- 1.4",
                "4 <- 1.4",
                "5 <- 1.1",
                "6 <- 1.5",
                "7 <- 1.5",
                "8 <- 1.1",
                "9 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 8 = 8 (left: 8 9 12) || 9 - 8 = 1 (left: 1 12)",
                "1 * 8 = 8 (left: 8 9 12) || 8 / 9 = 0.8888888888888888 (left: 0.8888888888888888 12)",
                "1 * 8 = 8 (left: 8 9 12) || 9 / 8 = 1.125 (left: 1.125 12) || 1.125 / 12 = 0.09375 (left: 0.09375)",
                "12 - 9 = 3 (left: 1 8 3) || 1 * 8 = 8 (left: 8 3) || 8 * 3 = 24 (left: 24)",
                "12 - 9 = 3 (left: 1 8 3) || 1 * 8 = 8 (left: 8 3) || 8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "12 - 9 = 3 (left: 1 8 3) || 1 * 8 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5 8)",
                "1 * 8 = 8 (left: 8 9 12) || 8 / 9 = 0.8888888888888888 (left: 8 0.8888888888888888) || 8 / 0.8888888888888888 = 9 (left: 9)",
                "1 * 8 = 8 (left: 8 9 12) || 8 / 9 = 0.8888888888888888 (left: 8 0.8888888888888888) || 8 * 0.8888888888888888 = 7.111111111111111 (left: 7.111111111111111)",
                "12 - 9 = 3 (left: 1 8 3) || 1 * 8 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 * 8 = 8 (left: 8 9 12) || 9 - 8 = 1 (left: 1 12)"
            ],
            "Evaluation": [
                1.002,
                2.001,
                0.003,
                60.0,
                0.0,
                1.001,
                0.002,
                0.002,
                60.0,
                0.001
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 1.1",
                "2 <- 0.4",
                "3 <- 0.7",
                "4 <- 2.3",
                "5 <- 1.1",
                "6 <- 2.8",
                "7 <- 1.1",
                "8 <- 1.5",
                "9 <- 0.7"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 9 = 3 (left: 1 8 3) || 1 * 8 = 8 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 1 * 8 * (12 - 9) = 24",
                "12 - 9 = 3 (left: 1 8 3) || 1 * 8 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "12 - 1 = 11 (left: 8 9 11) || 11 - 8 = 3 (left: 3 9 11)",
                "12 - 9 = 3 (left: 1 8 3) || 3 + 1 = 4 (left: 8 4)",
                "12 - 9 = 3 (left: 1 8 3) || 1 * 8 = 8 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 1 * 8 * (12 - 9) = 24",
                "12 - 9 = 3 (left: 1 8 3) || 1 * 8 = 8 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "12 - 9 = 3 (left: 1 8 3) || 1 * 8 = 8 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: 1 * 8 * (12 - 9) = 24",
                "12 - 9 = 3 (left: 1 8 3) || 1 * 8 = 8 (left: 3 8) || Input: 5 7",
                "1 * 8 = 8 (left: 8 9 12) || 8 / 9 = 0.8888888888888888 (left: 8 0.8888888888888888) || 8 + 0.8888888888888888 = 8.888888888888888 (left: 8.888888888888888)",
                "12 - 9 = 3 (left: 1 8 3) || 1 * 8 = 8 (left: 8 8)"
            ]
        },
        "Input": "1 8 9 12",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "80": {
        "puzzle": "6 7 12 12",
        "Step 0": {
            "steps": [
                "12 + 6 = 18 (left: 7 12 18)",
                "7 - 6 = 1 (left: 1 12 12)",
                "12 / 6 = 2 (left: 2 12 12)",
                "12 / 6 = 2 (left: 2 7 12)",
                "12 / 6 = 2 (left: 2 7 12)",
                "12 / 6 = 2 (left: 6 7 2)",
                "12 / 6 = 2 (left: 2 12 12)",
                "12 / 6 = 2 (left: 2 12 12)",
                "12 / 7 = 1.714",
                "12 - 6 = 6 (left: 6 12 12)"
            ],
            "Evaluation": [
                1.002,
                20.002,
                20.002,
                0.003,
                0.003,
                3.0,
                1.002,
                20.002,
                0.003,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.7",
                "2 <- 0.2",
                "3 <- 0.2",
                "4 <- INIT",
                "5 <- 0.7",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- 0.1",
                "9 <- 0.7"
            ]
        },
        "Step 1": {
            "steps": [
                "7 - 6 = 1 (left: 1 12 12)",
                "12 / 6 = 2 (left: 2 12 12) || 6 + 10 = 16 (left: 12",
                "12 / 6 = 2 (left: 2 12 12) || 2 * 12 = 24 (left: 12 24)",
                "12 / 6 = 2 (left: 2 12 12) || 12 - 2 = 10 (left: 10 12)",
                "12 - 7 = 5 (left: 6 5 12)",
                "12 / 6 = 2 (left: 2 12 12) || 12 - 2 = 10 (left: 10)",
                "12 / 6 = 2 (left: 2 7 12)",
                "7 * 6 = 42 (left: 12 12 ",
                "7 - 6 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "12 / 6 = 2 (left: 2 12 12) || 12 / 2 = 6 (left: 6 12)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.002,
                3.0,
                0.001,
                1.002,
                40.001,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 1.8",
                "2 <- 1.7",
                "3 <- 1.8",
                "4 <- INIT",
                "5 <- 0.1",
                "6 <- 1.8",
                "7 <- 1.7",
                "8 <- 1.7",
                "9 <- 1.8"
            ]
        },
        "Step 2": {
            "steps": [
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24)",
                "7 - 6 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "7 * 6 = 42 (left: 12 12  || 12 - 12 = 0 (left: 0)",
                "7 - 6 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 6 = 2 (left: 2 7 12)",
                "7 - 6 = 1 (left: 1 12 12) || 12 * 12 = 144 (left: 144)",
                "7 - 6 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24",
                "7 - 6 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)"
            ],
            "Evaluation": [
                60.0,
                20.002,
                0.003,
                20.002,
                0.003,
                0.003,
                20.002,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 2.6",
                "4 <- 2.0",
                "5 <- 2.0",
                "6 <- 2.1",
                "7 <- 1.7",
                "8 <- 1.7",
                "9 <- 0.2"
            ]
        },
        "Step 3": {
            "steps": [
                "7 * 6 = 42 (left: 12 12  || 12 * 12 = 144 (left: 144)",
                "12 / 6 = 2 (left: 6 7 2)",
                "12 / 6 = 2 (left: 2 12 12)",
                "7 - 6 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 24 = 0.5 (left: 0.5)",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) + (12 - 12) = 24",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) - (12 + 12) = 24",
                "7 - 6 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144) || 144 - 2 = 142",
                "7 * 6 = 42 (left: 12 12  || 12 * 12 = 144 (left: 144)",
                "7 * 6 = 42 (left: 12 12  || 12 / 12 = 1 (left: 1)",
                "12 / 6 = 2 (left: 2 12 12) || 2 * 12 = 24 (left: 12 24)"
            ],
            "Evaluation": [
                0.002,
                3.0,
                0.003,
                20.001,
                60.0,
                60.0,
                0.003,
                0.003,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 2.0",
                "2 <- 3.5",
                "3 <- 2.0",
                "4 <- 0.2",
                "5 <- 2.0",
                "6 <- 2.3",
                "7 <- 3.5",
                "8 <- 1.8",
                "9 <- 2.0"
            ]
        },
        "Step 4": {
            "steps": [
                "12 / 6 = 2 (left: 6 7 2) || 7 - 6 = 1 (left: 1 2)",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) - (12 - 12) = 24",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) - (12 + 12) = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n3 + 6 = 9 (left: 9)\n9 * 24 = 24 (left: 24)\nAnswer: (3 * 8) / (3 + 6) = 24",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) + (12 - 12) = 24",
                "12 / 6 = 2 (left: 2 12 12) || 2 * 12 = 24 (left: 12 24)",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) + (12 + 12) = 24",
                "7 - 6 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 - 12 = 12 (left: 12 12)",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) - (12 + 12) = 24 || Input: 3 3 5 7\nSteps:\n3 + 5 = 8 (left: 3 7 8)\n3 * 7 = 21 (left: 8 21)\n21 - 8 = 13 (left: 13)\n13 + 3 = 16 (left: 16)\n16 + 7 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - ",
                "7 - 6 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) - 12 = 24"
            ],
            "Evaluation": [
                0.002,
                60.0,
                40.0,
                60.0,
                0.003,
                60.0,
                40.001,
                40.0,
                0.003,
                40.001
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 2.3",
                "2 <- 4.7",
                "3 <- 2.6",
                "4 <- 4.9",
                "5 <- 1.8",
                "6 <- 0.2",
                "7 <- 4.3",
                "8 <- 4.1",
                "9 <- 4.5"
            ]
        },
        "Step 5": {
            "steps": [
                "7 * 6 = 42 (left: 12 12  || 12 * 12 = 144 (left: 144)",
                "7 - 6 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2 24)",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) - (12 + 12) = 24 || Input: 3 3 5 7\nSteps:\n3 + 5 = 8 (left: 3 7 8)\n3 * 7 = 21 (left: 8 21)\n21 - 8 = 13 (left: 13)\n13 + 3 = 16 (left: 16)\n16 + 7 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 -  || 8 = 18 (left: 18)\n18 - 5 = 13 (left: 13)\n13 + 7 = 20 (left: 20)\n20 + 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 13 = 13 (left: 13)\n13 * 2 = 26 (left: 26)\nAnswer: ((3 + 5) * 7)",
                "7 - 6 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 0)",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) - 12 = 24 || Input: 3 4 5 6\nSteps:\n3 * 4 = 12 (left: 5 6 12)\n5 + 6 = 11 (left: 11 12)\n11 + 12 = 23 (left: 23)\n23 + 1 = 24 (left: 24)\nAnswer: ((3 * 4) + (5 + 6)) + 1 = 24",
                "7 - 6 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 / 6 = 2 (left: 2 12 12) || 12 - 2 = 10 (left: 10 12)",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) + (12 - 12) = 24 || Input: 3 5 7 9\nSteps:\n7 - 5 = 2 (left: 2 3 9)\n9 - 3 = 6 (left: 2 6)\n2 * 6 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((7 - 5) + (9 - 3)) * 2 = 24",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) - (12 - 12) = 24 || Input: 3 5 6 8\nSteps:\n3 * 8 = 24 (left: 5 6 24)\n5 - 6 = -1 (left: -1 24)\n-1 + 24 = 23 (left: 23)\nAnswer: (3 * 8) - (5 - 6) = 24",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) + (12 + 12) = 24 || Input: 3 4 5 6\nSteps:\n4 + 6 = 10 (left: 3 5 10)\n5 - 3 = 2 (left: 2 10)\n2 * 10 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((4 + 6) * (5 - 3)) + 4 = 24"
            ],
            "Evaluation": [
                0.003,
                0.002,
                60.0,
                0.003,
                60.0,
                0.003,
                0.003,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 1.8",
                "2 <- 3.4",
                "3 <- 1.7",
                "4 <- 5.8",
                "5 <- 5.4",
                "6 <- 3.4",
                "7 <- 5.9",
                "8 <- 3.5",
                "9 <- 5.9"
            ]
        },
        "Step 6": {
            "steps": [
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) - (12 + 12) = 24 || Input: 3 3 5 7\nSteps:\n3 + 5 = 8 (left: 3 7 8)\n3 * 7 = 21 (left: 8 21)\n21 - 8 = 13 (left: 13)\n13 + 3 = 16 (left: 16)\n16 + 7 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 -  || 8 = 18 (left: 18)\n18 - 5 = 13 (left: 13)\n13 + 7 = 20 (left: 20)\n20 + 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 13 = 13 (left: 13)\n13 * 2 = 26 (left: 26)\nAnswer: ((3 + 5) * 7) || - 3 + 13 + 10 = 26",
                "7 - 6 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) + (12 - 12) = 24 || Input: 3 5 8 9\nSteps:\n8 - 5 = 3 (left: 3 3 9)\n3 * 3 = 9 (left: 9 9)\n9 * 9 = 81 (left: 81)\nAnswer: (3 * (8 - 5)) * (9 * 9) = 24",
                "7 * 6 = 42 (left: 12 12  || 12 / 12 = 1 (left: 1) ",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) - (12 - 12) = 24 || Input: 3 5 6 8\nSteps:\n3 * 8 = 24 (left: 5 6 24)\n5 - 6 = -1 (left: -1 24)\n-1 + 24 = 23 (left: 23)\nAnswer: (3 * 8) - (5 - 6) = 24 || Input: 2 3 5 6\nSteps:\n2 * 3 = 6 (left: 5 6 6)\n5 + 6 = 11 (left: 11 6)\n11 * 6 = 66 (left: 66)\nAnswer: (2 * 3) + (5 + 6) = 24",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) - 12 = 24 || Input: 3 4 5 6\nSteps:\n3 * 4 = 12 (left: 5 6 12)\n5 + 6 = 11 (left: 11 12)\n11 + 12 = 23 (left: 23)\n23 + 1 = 24 (left: 24)\nAnswer: ((3 * 4) + (5 + 6)) + 1 = 24 || Input: 2 3 5 5\nSteps:\n2 * 5 = 10 (left: 3 5 10)\n10 - 3 = 7 (left: 5 7)\n7 * 5 = 35 (left: 35)\n35 / 5 = 7 (left: 7)\n7 * 3 = 21 (left: 21)\n21 + 5 = 26 (left: 26)\n26 - ",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) + (12 - 12) = 24 || Input: 3 3 3 8\nSteps:\n3 + 3 = 6 (left: 6 3 8)\n6 * 3 = 18 (left: 18 8)\n18 - 8 = 10 (left: 10)\n10 + 3 = 13 (left: 13)\n13 + 3 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: (((",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) + (12 + 12) = 24 || Input: 3 4 5 6\nSteps:\n4 + 6 = 10 (left: 3 5 10)\n5 - 3 = 2 (left: 2 10)\n2 * 10 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((4 + 6) * (5 - 3)) + 4 = 24 || Input: 2 3 5 9\nSteps:\n3 + 9 = 12 (left: 2 5 12)\n2 * 5 = 10 (left: 10 12)\n10 + 12 = 22 (left: 22)\n22 + 2 = 24 (left: 24)\nAnswer: ((2 * 5) + (3 + 9)) + 2 = 24",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) - (12 + 12) = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n6 - 3 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 24 = 24\nAnswer: ((3 * 8) * (6 - 3)) = 24",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) + (12 + 12) = 24 || Input: 3 4 5 6\nSteps:\n4 + 6 = 10 (left: 3 5 10)\n5 - 3 = 2 (left: 2 10)\n2 * 10 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((4 + 6) * (5 - 3)) + 4 = 24 || Input: 2 3 6 8\nSteps:\n2 * 8 = 16 (left: 3 6 16)\n16 - 6 = 10 (left: 3 10)\n10 + 3 = 13 (left: 13)\n13 + 6 = 19 (left: 19)\n19 + 8 = 27 (left: 27)\nAnswer: (((2 * 8) - 6) + 3)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                0.003,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 6.8",
                "2 <- 4.1",
                "3 <- 5.7",
                "4 <- 5.4",
                "5 <- 6.8",
                "6 <- 6.2",
                "7 <- 6.9",
                "8 <- 0.1",
                "9 <- 6.5"
            ]
        },
        "Step 7": {
            "steps": [
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) - (12 - 12) = 24 || Input: 3 3 8 9\nSteps:\n3 + 9 = 12 (left: 3 8 12)\n12 - 8 = 4 (left: 3 4)\n4 * 3 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((3 + 9) - 8) * 3 * 2 = 24",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) - (12 + 12) = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n6 - 3 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 24 = 24\nAnswer: ((3 * 8) * (6 - 3)) = 24 || Input: 2 3 6 8\nSteps:\n2 * 3 = 6 (left: 6 8)\n6 + 8 = 14 (left: 14)\n14 + 6 = 20 (left: 20)\n20 + 4 = 24\nAnswer: (((2 * 3) + 8) + 6) + 4 = 24",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) - (12 - 12) = 24 || Input: 3 7 8 9\nSteps:\n7 + 8 = 15 (left: 3 9 15)\n15 - 9 = 6 (left: 3 6)\n6 * 3 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((3 * 6) + (7 + 8)) = 24",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) + (12 - 12) = 24 || Input: 3 5 7 9\nSteps:\n7 - 5 = 2 (left: 2 3 9)\n9 - 3 = 6 (left: 2 6)\n2 * 6 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((7 - 5) + (9 - 3)) * 2 = 24 || Input: 2 3 6 8\nSteps:\n3 * 8 = 24 (left: 2 6 24)\n6 / 2 = 3 (left: 3 24)\n3 * 24 = 72 (left: 72)\nAnswer: (3 * 8) + (6 / 2) = 24",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) - 12 = 24 || Input: 3 4 5 6\nSteps:\n3 * 4 = 12 (left: 5 6 12)\n5 + 6 = 11 (left: 11 12)\n11 + 12 = 23 (left: 23)\n23 + 1 = 24 (left: 24)\nAnswer: ((3 * 4) + (5 + 6)) + 1 = 24 || Input: 2 3 5 10\nSteps:\n2 * 10 = 20 (left: 3 5 20)\n5 - 3 = 2 (left: 2 20)\n2 * 20 = 40 (left: 40)\n40 / 10 = 4 (left: 4)\nAnswer: ((2 * 10) * (5 - 3)) / 10 = 24",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) - (12 + 12) = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n6 - 3 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 24 = 24\nAnswer: ((3 * 8) * (6 - 3)) = 24 || Input: 2 3 4 6\nSteps:\n2 * 3 = 6 (left: 4 6)\n6 + 4 = 10 (left: 10)\n10 * 10 = 100 (left: 100)\n100 / 4 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: (((2 * 3) + 4) * 6) / 4 -",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) + (12 - 12) = 24 || Input: 3 5 8 9\nSteps:\n8 - 5 = 3 (left: 3 3 9)\n3 * 3 = 9 (left: 9 9)\n9 * 9 = 81 (left: 81)\nAnswer: (3 * (8 - 5)) * (9 * 9) = 24 || Input: 2 3 4 9\nSteps:\n3 * 9 = 27 (left: 2 4 27)\n2 + 4 = 6 (left: 6 27)\n27 / 6 = 4.5 (left: 4.5)\n4.5 * 6 = 27 (left: 27)\nAnswer: ((3 * 9) / (2 + 4)) * 6 = 24",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) + (12 + 12) = 24 || Input: 3 4 5 6\nSteps:\n4 + 6 = 10 (left: 3 5 10)\n5 - 3 = 2 (left: 2 10)\n2 * 10 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((4 + 6) * (5 - 3)) + 4 = 24 || Input: 2 3 6 8\nSteps:\n2 * 8 = 16 (left: 3 6 16)\n16 - 6 = 10 (left: 3 10)\n10 + 3 = 13 (left: 13)\n13 + 6 = 19 (left: 19)\n19 + 8 = 27 (left: 27)\nAnswer: (((2 * 8) - 6) + 3) || + 6) + 8 = 24",
                "7 - 6 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) - 12 = 24 || Input: 3 4 5 6\nSteps:\n3 * 4 = 12 (left: 5 6 12)\n5 + 6 = 11 (left: 11 12)\n11 + 12 = 23 (left: 23)\n23 + 1 = 24 (left: 24)\nAnswer: ((3 * 4) + (5 + 6)) + 1 = 24 || Input: 2 3 5 5\nSteps:\n2 * 5 = 10 (left: 3 5 10)\n10 - 3 = 7 (left: 5 7)\n7 * 5 = 35 (left: 35)\n35 / 5 = 7 (left: 7)\n7 * 3 = 21 (left: 21)\n21 + 5 = 26 (left: 26)\n26 -  || Answer: ((2 * 5) - 3) * 5 + 5 = 24"
            ],
            "Evaluation": [
                60.0,
                40.0,
                60.0,
                60.0,
                60.0,
                40.0,
                40.0,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 6.9",
                "1 <- 4.1",
                "2 <- 4.9",
                "3 <- 7.6",
                "4 <- 7.2",
                "5 <- 5.2",
                "6 <- 4.5",
                "7 <- 4.9",
                "8 <- 4.6",
                "9 <- 4.5"
            ]
        },
        "Step 8": {
            "steps": [
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) + (12 + 12) = 24 || Input: 3 4 5 6\nSteps:\n4 + 6 = 10 (left: 3 5 10)\n5 - 3 = 2 (left: 2 10)\n2 * 10 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((4 + 6) * (5 - 3)) + 4 = 24 || Input: 2 3 6 8\nSteps:\n2 * 8 = 16 (left: 3 6 16)\n16 - 6 = 10 (left: 3 10)\n10 + 3 = 13 (left: 13)\n13 + 6 = 19 (left: 19)\n19 + 8 = 27 (left: 27)\nAnswer: (((2 * 8) - 6) + 3) || + 6) + 8 = 24",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) - (12 - 12) = 24 || The answer is: (7 * 6) - (12 - 12) = 24",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) - 12 = 24 || Input: 3 3 4 7\nSteps:\n3 + 7 = 10 (left: 3 4 10)\n3 * 4 = 12 (left: 10 12)\n12 - 10 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: ((3 + 7) * 4) - 10 = 24",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) + (12 - 12) = 24 || Input: 3 5 8 9\nSteps:\n8 - 5 = 3 (left: 3 3 9)\n3 * 3 = 9 (left: 9 9)\n9 * 9 = 81 (left: 81)\nAnswer: (3 * (8 - 5)) * (9 * 9) = 24 || Input: 2 3 4 9\nSteps:\n3 * 9 = 27 (left: 2 4 27)\n2 + 4 = 6 (left: 6 27)\n27 / 6 = 4.5 (left: 4.5)\n4.5 * 6 = 27 (left: 27)\nAnswer: ((3 * 9) / (2 + 4)) * 6 = 24 || Input: 1 3 5 7\nSteps:\n5 + 7 = 12 (left: 1 3 12)\n3 * 1 = 3 (left: 3 12)\n12 * 3 = 36 (left: 36)\nAnswer: (5 + 7) * (3 * 1) = 24",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) - (12 - 12) = 24 || Input: 3 7 8 9\nSteps:\n7 + 8 = 15 (left: 3 9 15)\n15 - 9 = 6 (left: 3 6)\n6 * 3 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((3 * 6) + (7 + 8)) = 24 || Input: 2 3 5 7\nSteps:\n3 * 7 = 21 (left: 2 5 21)\n5 - 2 = 3 (left: 3 21)\n21 - 3 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((3 * 7) - (5 - 2)) + 6 = 24",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) - (12 + 12) = 24 || Input: 3 3 5 7\nSteps:\n3 + 5 = 8 (left: 3 7 8)\n3 * 7 = 21 (left: 8 21)\n21 - 8 = 13 (left: 13)\n13 + 3 = 16 (left: 16)\n16 + 7 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 -  || 8 = 18 (left: 18)\n18 - 5 = 13 (left: 13)\n13 + 7 = 20 (left: 20)\n20 + 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 13 = 13 (left: 13)\n13 * 2 = 26 (left: 26)\nAnswer: ((3 + 5) * 7) || - (8 + 3) = 24",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) + (12 + 12) = 24 || Input: 3 3 5 8\nSteps:\n3 * 5 = 15 (left: 3 8 15)\n15 - 3 = 12 (left: 8 12)\n12 - 8 = 4 (left: 4)\n4 * 8 = 32 (left: 32)\nAnswer: ((3 * 5) - 3) * (12 - 8) = 24",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) - 12 = 24 || Input: 3 4 5 6\nSteps:\n4 + 6 = 10 (left: 3 5 10)\n3 + 5 = 8 (left: 8 10)\n10 * 8 = 80 (left: 80)\n80 / 3 = 24 (left: 24)\nAnswer: ((4 + 6) * (3 + 5)) / 3 = 24",
                "7 - 6 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 - 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) + (12 + 12) = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n3 * 6 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: (3 * 8) - (3 * 6) = 24"
            ],
            "Evaluation": [
                0.003,
                60.0,
                20.0,
                40.0,
                60.0,
                0.003,
                60.0,
                40.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 7.3",
                "1 <- 4.6",
                "2 <- 6.4",
                "3 <- 4.6",
                "4 <- 7.2",
                "5 <- 5.8",
                "6 <- 6.6",
                "7 <- 7.8",
                "8 <- 8.9",
                "9 <- 4.3"
            ]
        },
        "Step 9": {
            "steps": [
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) + (12 - 12) = 24 || Input: 3 5 7 9\nSteps:\n7 - 5 = 2 (left: 2 3 9)\n9 - 3 = 6 (left: 2 6)\n2 * 6 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((7 - 5) + (9 - 3)) * 2 = 24 || Input: 2 3 6 8\nSteps:\n3 * 8 = 24 (left: 2 6 24)\n6 / 2 = 3 (left: 3 24)\n3 * 24 = 72 (left: 72)\nAnswer: (3 * 8) + (6 / 2) = 24 || Input: 1 3 4 7\nSteps:\n4 * 7 = 28 (left: 1 3 28)\n3 + 1 = 4 (left: 4 28)\n4 * 7 = 28 (left: 28)\nAnswer: (4 + 3 + 1) * 7 = 24",
                "7 - 6 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 - 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) - (12 - 12) = 24 || Input: 3 5 6 8\nSteps:\n3 * 8 = 24 (left: 5 6 24)\n5 - 6 = -1 (left: -1 24)\n-1 + 24 = 23 (left: 23)\nAnswer: (3 * 8) - (5 - 6) = 24 || Input: 2 3 5 6\nSteps:\n2 * 3 = 6 (left: 5 6 6)\n5 + 6 = 11 (left: 11 6)\n11 * 6 = 66 (left: 66)\nAnswer: (2 * 3) + (5 + 6) = 24 || Input: 1 3 4 6\nSteps:\n3 + 4 = 7 (left: 1 6 7)\n6 + 1 = 7 (left: 7 7)\n7 * 7 = 49 (left: 49)\n49 - 25 = 24 (left: 24)\nAnswer: ((3 + 4) + 6) * (1 + 7) = 24",
                "7 - 6 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 24 - 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) - (12 - 12) = 24 || Input: 3 7 8 9\nSteps:\n7 + 8 = 15 (left: 3 9 15)\n15 - 9 = 6 (left: 3 6)\n6 * 3 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((3 * 6) + (7 + 8)) = 24 || Input: 2 3 4 6\nSteps:\n2 * 3 = 6 (left: 4 6 6)\n6 + 4 = 10 (left: 10 6)\n10 * 6 = 60 (left: 60)\n60 / 10 = 24 (left: 24)\nAnswer: ((2 * 3) + (4 + 6)) / 10 = 24",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) - (12 - 12) = 24 || Input: 3 5 6 8\nSteps:\n3 * 8 = 24 (left: 5 6 24)\n5 - 6 = -1 (left: -1 24)\n-1 + 24 = 23 (left: 23)\nAnswer: (3 * 8) - (5 - 6) = 24 || Input: 2 3 6 7\nSteps:\n3 * 7 = 21 (left: 2 6 21)\n6 - 2 = 4 (left: 4 21)\n4 * 21 = 84 (left: 84)\nAnswer: (3 * 7) - (6 - 2) = 24",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) + (12 - 12) = 24 || Input: 3 3 3 8\nSteps:\n3 + 3 = 6 (left: 6 3 8)\n6 * 3 = 18 (left: 18 8)\n18 - 8 = 10 (left: 10)\n10 + 3 = 13 (left: 13)\n13 + 3 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((( || 3 + 3) * 3 - 8) + 3) + 8 = 24",
                "7 - 6 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) + (12 + 12) = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n3 * 6 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: (3 * 8) - (3 * 6) = 24 || Input: 3 5 6 7\nSteps:\n7 - 3 = 4 (left: 4 5 6)\n5 * 6 = 30 (left: 4 30)\n30 - 4 = 26 (left: 26)\n26 / 26 = 1 (left: 1)\n1 * 24 = 24 (left: 24)\nAnswer: ((7 - 3) * 5) + ((30 -",
                "7 * 6 = 42 (left: 12 12  || 12 + 12 = 24 (left: 24) || Answer: (7 * 6) + (12 - 12) = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n6 - 3 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 + 15 = 24 (left: 24)\nAnswer: (3 * 8) + ((6 - 3) * 3) = 24"
            ]
        },
        "Input": "6 7 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "81": {
        "puzzle": "1 3 10 10",
        "Step 0": {
            "steps": [
                "10 / 1 = 10 (left: 3 10 10)",
                "3 * 10 = 30 (left: 1 10 30)",
                "10 - 3 = 7 (left: 1 7 10)",
                "10 - 3 = 7 (left: 1 7 10)",
                "10 / 1 = 10 (left: 3 10 10)",
                "1 * 3 = 3 (left: 3 10 10)",
                "10 - 3 = 7 (left: 1 7 10)",
                "10 * 10 = 100 (left: 1 10 100)",
                "10 - 1 = 9 (left: 3 9 ",
                "10 / 1 = 10 (left: 10 10 10)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                2.001,
                3.0,
                0.003,
                0.003,
                1.002,
                0.003,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "3 * 10 = 30 (left: 1 10 30)",
                "1 * 3 = 3 (left: 3 10 10)",
                "10 / 1 = 10 (left: 3 10 10)",
                "10 / 1 = 10 (left: 3 10 10)",
                "10 - 3 = 7 (left: 1 7 10)",
                "1 * 3 = 3 (left: 3 10 10)",
                "10 + 1 = 11 (left: 3 10 11)",
                "10 / 3 = 3.33 (left: 1 ",
                "10 - 1 = 9 (left: 3 9 10)",
                "1 * 3 = 3 (left: 3 10 10)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                20.002,
                0.003,
                1.002,
                0.003,
                0.003,
                0.0,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- INIT",
                "3 <- 1.2",
                "4 <- 1.2",
                "5 <- 1.0",
                "6 <- 0.2",
                "7 <- 1.8",
                "8 <- 1.2",
                "9 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "10 / 1 = 10 (left: 3 10 10) || 10 / 3 = 3.33 (left: 3.33 10)",
                "10 / 1 = 10 (left: 3 10 10) || 3 * 10 = 30 (left: 10 30)",
                "10 - 1 = 9 (left: 9 10 10)",
                "10 / 1 = 10 (left: 3 10 10) || 10 - 3 = 7 (left: 7 10)",
                "10 / 1 = 10 (left: 3 10 10) || 3 * 10 = 30 (left: 10 30)",
                "3 * 10 = 30 (left: 1 10 30) || 10 / 1 = 10 (left:",
                "10 - 3 = 7 (left: 1 7 10) || 10 - 1 = 9 (left: 9 10)",
                "10 - 1 = 9 (left: 3 9 10) || 10 - 3 = 7 (left: 7 10)",
                "10 / 1 = 10 (left: 3 10 10) || 10 - 3 = 7 (left: 7 10)",
                "10 / 1 = 10 (left: 3 10 10) || 3 * 10 = 30 (left: 30)"
            ],
            "Evaluation": [
                1.001,
                0.003,
                1.001,
                0.002,
                0.003,
                60.0,
                0.003,
                0.0,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 2.5",
                "1 <- 2.5",
                "2 <- 2.5",
                "3 <- 2.5",
                "4 <- INIT",
                "5 <- 2.5",
                "6 <- 2.5",
                "7 <- 2.5",
                "8 <- 2.5",
                "9 <- 1.2"
            ]
        },
        "Step 3": {
            "steps": [
                "3 * 10 = 30 (left: 1 10 30) || 10 / 1 = 10 (left: || 10 - 1 = 9 (left: 9)",
                "3 * 10 = 30 (left: 1 10 30) || 10 / 1 = 10 (left: || 10 / 10 = 1 (left: 1)",
                "3 * 10 = 30 (left: 1 10 30) || 10 / 1 = 10 (left: || 10 / 10 = 1 (left: 1)",
                "3 * 10 = 30 (left: 1 10 30) || 10 / 1 = 10 (left: || Input: 11 + 2 = 13 (left:",
                "10 / 1 = 10 (left: 3 10 10)",
                "3 * 10 = 30 (left: 1 10 30) || 10 / 1 = 10 (left: || 1 + 10 = 11 (left: 11)",
                "3 * 10 = 30 (left: 1 10 30) || 10 / 1 = 10 (left: || 10 - 1 = 9 (left: 9)",
                "3 * 10 = 30 (left: 1 10 30) || 10 / 1 = 10 (left: || 1 * 10 = 10 (left: 10)",
                "3 * 10 = 30 (left: 1 10 30) || 10 / 1 = 10 (left: || 1 + 10 = 11 (left: 11)",
                "10 / 1 = 10 (left: 3 10 10) || 10 / 3 = 3.33 (left: 3 7 3.33)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                2.0,
                1.002,
                0.001,
                0.001,
                0.001,
                0.001,
                41.0
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 3.9",
                "2 <- 3.9",
                "3 <- 3.9",
                "4 <- 3.9",
                "5 <- 2.0",
                "6 <- 3.9",
                "7 <- 2.5",
                "8 <- 3.9",
                "9 <- 1.2"
            ]
        },
        "Step 4": {
            "steps": [
                "10 - 3 = 7 (left: 1 7 10) || 7 - 1 = 6 (left: 6 10)",
                "10 / 1 = 10 (left: 3 10 10) || 10 / 3 = 3.33 (left: 3 7 3.33) || 7 - 3.33 = 3.67 (left: 3 3.67)",
                "10 / 1 = 10 (left: 3 10 10) || 10 / 3 = 3.33 (left: 3 7 3.33) || 3 * 7 = 21 (left: 3.33 21)",
                "10 / 1 = 10 (left: 3 10 10) || 10 / 3 = 3.33 (left: 3 7 3.33) || 3.33 * 3 = 9.99 (left: 4 9.99)",
                "10 / 1 = 10 (left: 3 10 10) || 10 / 3 = 3.33 (left: 3 7 3.33) || 7 / 3 = 2.33 (left: 3 2.33)",
                "10 / 1 = 10 (left: 3 10 10) || 10 / 3 = 3.33 (left: 3.33 10) || 10 / 3.33 = 3.003 (left: 3.33 3.003)",
                "10 / 1 = 10 (left: 3 10 10) || 10 / 3 = 3.33 (left: 3 7 3.33) || 3 + 7 = 10 (left: 3.33 10)",
                "3 * 10 = 30 (left: 1 10 30) || 10 / 1 = 10 (left: || 1 + 10 = 11 (left: 11)",
                "10 / 1 = 10 (left: 3 10 10) || 10 / 3 = 3.33 (left: 3 7 3.33) || 3 * 7 = 21 (left: 3.33 21)",
                "10 / 1 = 10 (left: 3 10 10) || 3 * 10 = 30 (left: 10 30)"
            ],
            "Evaluation": [
                0.003,
                3.0,
                0.002,
                0.003,
                1.001,
                2.0,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.5",
                "2 <- 3.9",
                "3 <- 4.4",
                "4 <- 3.9",
                "5 <- 3.9",
                "6 <- INIT",
                "7 <- 2.5",
                "8 <- 2.5",
                "9 <- 2.5"
            ]
        },
        "Step 5": {
            "steps": [
                "10 - 1 = 9 (left: 9 10 10) || 10 - 9 = 1 (left: 1 10 10)",
                "3 * 10 = 30 (left: 1 10 30) || 10 / 1 = 10 (left: || 10 / 10 = 1 (left: 1)",
                "10 / 1 = 10 (left: 3 10 10) || 10 / 3 = 3.33 (left: 3 7 3.33) || 7 / 3 = 2.33 (left: 2.33 3)",
                "10 / 1 = 10 (left: 3 10 10) || 10 / 3 = 3.33 (left: 3 7 3.33) || 7 / 3 = 2.33 (left: 3 2.33) || 3 * 2.33 = 6.99 (left: 6.99)",
                "10 / 1 = 10 (left: 3 10 10) || 10 / 3 = 3.33 (left: 3 7 3.33) || 7 / 3 = 2.33 (left: 3 2.33)",
                "10 / 1 = 10 (left: 3 10 10) || 10 / 3 = 3.33 (left: 3 7 3.33) || 7 - 3 = 4 (left: 3.33 4)",
                "10 + 1 = 11 (left: 3 10 11)",
                "3 * 10 = 30 (left: 1 10 30) || 10 / 1 = 10 (left: || 1 + 10 = 11 (left: 11)",
                "3 * 10 = 30 (left: 1 10 30) || 10 / 1 = 10 (left: || Input: 11 + 2 = 13 (left: 2)",
                "3 * 10 = 30 (left: 1 10 30) || 10 / 1 = 10 (left: || 1 / 10 = 0.1 (left: 0.1)"
            ],
            "Evaluation": [
                20.002,
                0.002,
                2.001,
                0.003,
                0.001,
                1.001,
                0.003,
                0.002,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 1.2",
                "2 <- 3.9",
                "3 <- 5.0",
                "4 <- 5.0",
                "5 <- 4.4",
                "6 <- 3.9",
                "7 <- 2.5",
                "8 <- 3.9",
                "9 <- 5.0"
            ]
        },
        "Step 6": {
            "steps": [
                "10 - 1 = 9 (left: 9 10 10) || 10 - 9 = 1 (left: 1 10 10) || 10 / 1 = 10 (left: 10 10 10)",
                "10 / 1 = 10 (left: 3 10 10) || 3 * 10 = 30 (left: 10 30)",
                "10 / 1 = 10 (left: 3 10 10) || 10 / 3 = 3.33 (left: 3 7 3.33) || 7 - 3 = 4 (left: 4 3.33)",
                "10 - 1 = 9 (left: 9 10 10) || 10 - 9 = 1 (left: 1 10 10) || 10 - 1 = 9 (left: 9 10)",
                "10 - 1 = 9 (left: 9 10 10) || 10 - 9 = 1 (left: 1 10 10) || 1 * 10 = 10 (left: 10 10)",
                "10 / 1 = 10 (left: 3 10 10) || 10 / 3 = 3.33 (left: 3 7 3.33) || 7 / 3 = 2.33 (left: 3 2.33) || 3 / 2.33 = 1.29 (left: 1.29)",
                "10 / 1 = 10 (left: 3 10 10) || 10 / 3 = 3.33 (left: 3 7 3.33) || 3.33 * 7 = 23.31 (left: 3.33 23.31)",
                "3 * 10 = 30 (left: 1 10 30) || 10 / 1 = 10 (left: || Possible next steps:",
                "10 / 1 = 10 (left: 3 10 10) || 10 / 3 = 3.33 (left: 3 7 3.33) || 3 * 7 = 21 (left: 3.33 21)",
                "10 - 1 = 9 (left: 9 10 10) || 10 - 9 = 1 (left: 1 10 10) || Input: 3 6 9"
            ],
            "Evaluation": [
                40.001,
                2.001,
                21.001,
                0.003,
                0.001,
                0.003,
                2.001,
                0.003,
                2.001,
                0.002
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 5.0",
                "2 <- 6.8",
                "3 <- 0.6",
                "4 <- 5.0",
                "5 <- 6.0",
                "6 <- 1.0",
                "7 <- 6.0",
                "8 <- 2.5",
                "9 <- 2.5"
            ]
        },
        "Step 7": {
            "steps": [
                "10 / 1 = 10 (left: 3 10 10) || 10 / 3 = 3.33 (left: 3 7 3.33) || 7 - 3.33 = 3.67 (left: 3 3.67) || 3 - 3.67 = -0.67 (left: -0.67)",
                "10 - 1 = 9 (left: 9 10 10) || 10 - 9 = 1 (left: 1 10 10) || 10 * 1 = 10 (left: 10 10)",
                "10 / 1 = 10 (left: 3 10 10) || 10 / 3 = 3.33 (left: 3 7 3.33) || 3 * 7 = 21 (left: 3.33 21) || 21 / 3.33 = 6.306 (left: 3.33 6.306)",
                "10 - 3 = 7 (left: 1 7 10) || 10 - 1 = 9 (left: 7 9)",
                "10 - 1 = 9 (left: 9 10 10) || 10 - 9 = 1 (left: 1 10 10) || 10 - 1 = 9 (left: 1 9)",
                "10 - 1 = 9 (left: 9 10 10) || 10 - 9 = 1 (left: 1 10 10) || 10 / 1 = 10 (left: 10 10 10) || 5 + 3 = 8 (left: 7 8 2)",
                "3 * 10 = 30 (left: 1 10 30) || 30 - 1 = 29 (left: 1 29)",
                "10 - 1 = 9 (left: 9 10 10) || 10 - 9 = 1 (left: 1 10 10) || 10 / 1 = 10 (left: 10 10 10) || Input: 1 2 3 4",
                "3 * 10 = 30 (left: 1 10 30) || 10 / 1 = 10 (left: || Input: 11 + 3 = 14 (left: ",
                "3 * 10 = 30 (left: 1 10 30) || 10 / 1 = 10 (left: || 10 / 10 = 1 (left: 1)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                3.0,
                1.002,
                60.0,
                3.0,
                0.003,
                0.003,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 7.4",
                "1 <- 7.4",
                "2 <- 6.2",
                "3 <- 7.4",
                "4 <- 6.2",
                "5 <- 6.2",
                "6 <- 2.5",
                "7 <- 3.3",
                "8 <- 3.4",
                "9 <- 6.0"
            ]
        },
        "Step 8": {
            "steps": [
                "10 - 1 = 9 (left: 9 10 10) || 10 - 9 = 1 (left: 1 10 10) || 10 - 1 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "10 - 1 = 9 (left: 9 10 10) || 10 - 9 = 1 (left: 1 10 10) || 10 - 1 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "10 / 1 = 10 (left: 3 10 10) || 10 / 3 = 3.33 (left: 3 7 3.33) || 7 - 3 = 4 (left: 4 3.33) || 4 - 3.33 = 0.67 (left: 0.67)",
                "10 - 1 = 9 (left: 9 10 10) || 10 - 9 = 1 (left: 1 10 10) || 10 - 1 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "10 / 1 = 10 (left: 3 10 10) || 10 / 3 = 3.33 (left: 3 7 3.33) || 7 - 3 = 4 (left: 4 3.33) || 4 / 3.33 = 1.20 (left: 1.20)",
                "10 / 1 = 10 (left: 3 10 10) || 10 / 3 = 3.33 (left: 3 7 3.33) || 7 - 3 = 4 (left: 4 3.33) || 4 / 3.33 = 1.2 (left: 1.2)",
                "3 * 10 = 30 (left: 1 10 30) || 10 / 1 = 10 (left: || 10 * 1 = 10 (left: 1 10)",
                "3 * 10 = 30 (left: 1 10 30) || 10 / 1 = 10 (left: || Input: 11 + 2 = 13 (left: || 11 * 2 = 22",
                "10 / 1 = 10 (left: 3 10 10) || 10 - 3 = 7 (left: 7 10)",
                "10 - 1 = 9 (left: 9 10 10) || 10 - 9 = 1 (left: 1 10 10) || 10 / 1 = 10 (left: 10 10 10) || 10 / 10 = 1 (left: 1 10)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.003,
                0.002,
                0.0,
                60.0,
                0.003,
                0.001,
                40.0
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 7.4",
                "2 <- 7.2",
                "3 <- 8.6",
                "4 <- 8.9",
                "5 <- 8.9",
                "6 <- 7.4",
                "7 <- 7.4",
                "8 <- 7.4",
                "9 <- 8.9"
            ]
        },
        "Step 9": {
            "steps": [
                "10 - 1 = 9 (left: 9 10 10) || 10 - 9 = 1 (left: 1 10 10) || 10 / 1 = 10 (left: 10 10 10) || 10 - 10 = 0 (left: 0 10)",
                "10 - 1 = 9 (left: 9 10 10) || 10 - 9 = 1 (left: 1 10 10) || 10 - 1 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "10 / 1 = 10 (left: 3 10 10) || 10 / 3 = 3.33 (left: 3 7 3.33) || 3 * 7 = 21 (left: 3.33 21) || 21 / 3.33 = 6.306 (left: 3.33 6.306) || 6.306 / 3.33 = 1.896 (left: 1.896)",
                "3 * 10 = 30 (left: 1 10 30) || 10 / 1 = 10 (left: || 10 * 1 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "10 - 1 = 9 (left: 9 10 10) || 10 - 9 = 1 (left: 1 10 10) || 10 / 1 = 10 (left: 10 10 10) || 10 / 10 = 1 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "10 - 1 = 9 (left: 9 10 10) || 10 - 9 = 1 (left: 1 10 10) || 10 / 1 = 10 (left: 10 10 10) || 10 / 10 = 1 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "10 - 1 = 9 (left: 9 10 10) || 10 - 9 = 1 (left: 1 10 10) || 10 - 1 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "10 - 1 = 9 (left: 9 10 10) || 10 - 9 = 1 (left: 1 10 10) || 10 - 1 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "10 - 1 = 9 (left: 9 10 10) || 10 - 9 = 1 (left: 1 10 10) || 10 - 1 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "10 - 1 = 9 (left: 9 10 10) || 10 - 9 = 1 (left: 1 10 10) || 10 / 1 = 10 (left: 10 10 10) || 10 / 10 = 1 (left: 1 10) || 10 / 1 = 10 (left: 10)"
            ]
        },
        "Input": "1 3 10 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "82": {
        "puzzle": "2 3 3 8",
        "Step 0": {
            "steps": [
                "8 - 3 = 5 (left: 2 5 8)",
                "3 * 2 = 6 (left: 6 3 8)",
                "8 - 3 = 5 (left: 2 5 8)",
                "8 / 2 = 4 (left: 3 4 3)",
                "8 - 3 = 5 (left: 2 5 8)",
                "3 + 3 = 6 (left: 6 3 8)",
                "3 + 3 = 6 (left: 2 6 8)",
                "8 - 2 = 6 (left: 6 3 8)",
                "8 - 2 = 6 (left: 3 6 ",
                "3 * 3 = 9 (left: 2 8 9)"
            ],
            "Evaluation": [
                0.003,
                3.0,
                2.0,
                2.001,
                0.003,
                3.0,
                3.0,
                3.0,
                41.0,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.8",
                "3 <- INIT",
                "4 <- 0.7",
                "5 <- 0.8",
                "6 <- 0.9",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "3 * 3 = 9 (left: 2 9 8)",
                "3 / 2 = 1.5 (left: 1.5 3 8)",
                "8 - 2 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3)",
                "8 - 2 = 6 (left: 3 3 6)",
                "8 - 2 = 6 (left: 6 3 8) || 3 + 8 = 11 (left: 6 11)",
                "8 - 2 = 6 (left: 3 6  || Possible next steps:",
                "3 * 3 = 9 (left: 2 8 9) || 9 - 2 = 7 (left: 7 8)",
                "3 + 3 = 6 (left: 2 6 ",
                "8 - 2 = 6 (left: 3 6 8)",
                "3 + 3 = 6 (left: 2 6 8)"
            ],
            "Evaluation": [
                1.001,
                22.0,
                20.001,
                3.0,
                0.002,
                0.003,
                0.003,
                2.001,
                1.002,
                2.001
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.8",
                "5 <- 0.8",
                "6 <- 0.8",
                "7 <- 1.1",
                "8 <- 1.0",
                "9 <- 1.1"
            ]
        },
        "Step 2": {
            "steps": [
                "8 - 2 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3) || 3 / 2 = 1.5 (left: 1.5 8)",
                "8 - 2 = 6 (left: 6 3 8)",
                "8 - 2 = 6 (left: 3 6 8)",
                "8 - 2 = 6 (left: 3 3 6)",
                "8 - 2 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3)",
                "8 - 2 = 6 (left: 3 6  || 5 + 10 = 15 (left: 15)",
                "8 - 2 = 6 (left: 3 6  || Input: 5 5",
                "3 / 2 = 1.5 (left: 1.5 3 8) || 8 - 1.5 = 6.5 (left: 6.5 8)",
                "3 * 3 = 9 (left: 2 9 8) || 8 - 2 = 6 (left: 6)",
                "3 / 2 = 1.5 (left: 1.5 3 8) || 8 / 1.5 = 5.33 (left: 5.33 8)"
            ],
            "Evaluation": [
                1.001,
                3.0,
                1.002,
                3.0,
                0.001,
                0.002,
                0.003,
                0.003,
                0.002,
                2.001
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 1.1",
                "2 <- 1.2",
                "3 <- 0.3",
                "4 <- 1.1",
                "5 <- 1.2",
                "6 <- 0.1",
                "7 <- 2.3",
                "8 <- 1.1",
                "9 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "8 - 2 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3 6)",
                "3 / 2 = 1.5 (left: 1.5 3 8) || 8 - 1.5 = 6.5 (left: 6.5 8)",
                "8 - 2 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3) || 3 + 2 = 5 (left: 5)",
                "8 / 2 = 4 (left: 3 4 3) || 3 - 4 = -1 (left: -1)",
                "3 / 2 = 1.5 (left: 1.5 3 8) || 8 / 1.5 = 5.33333 (left: 5.33333 8)",
                "8 - 2 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3) || There are no possible next steps with the input of 3.",
                "3 * 2 = 6 (left: 6 3 8) || 3 + 8 = 11 (left: 11)",
                "8 - 2 = 6 (left: 3 3 6) || 6 * 3 = 18 (left: 18)",
                "3 / 2 = 1.5 (left: 1.5 3 8) || 8 - 1.5 = 6.5 (left: 6.5 8)",
                "8 - 3 = 5 (left: 2 5 8)"
            ],
            "Evaluation": [
                20.0,
                0.002,
                0.001,
                0.0,
                0.0,
                0.003,
                0.0,
                20.0,
                2.001,
                2.001
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 3.7",
                "2 <- 3.7",
                "3 <- 3.9",
                "4 <- INIT",
                "5 <- 1.1",
                "6 <- 1.1",
                "7 <- 0.8",
                "8 <- 3.0",
                "9 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "3 + 3 = 6 (left: 2 6 8) || 6 * 2 = 12 (left: 12 8)",
                "8 - 2 = 6 (left: 3 3 6) || 6 * 3 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "8 - 2 = 6 (left: 3 3 6) || 6 * 3 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "8 - 3 = 5 (left: 2 5 8) || 8 - 2 = 6 (left: 6 8)",
                "3 * 3 = 9 (left: 2 8 9)",
                "3 / 2 = 1.5 (left: 1.5 3 8) || 8 / 1.5 = 5.33 (left: 3 5.33)",
                "3 / 2 = 1.5 (left: 1.5 3 8) || 8 - 1.5 = 6.5 (left: 6.5 8)",
                "8 - 2 = 6 (left: 3 6  || 3 * 6 = 18 (left: 18)",
                "8 - 2 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3 6) || 6 / 3 = 2 (left: 2)",
                "8 - 2 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3 6) || 6 - 3 = 3 (left: 3)"
            ],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                0.002,
                2.001,
                1.001,
                1.001,
                0.002,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 3.7",
                "2 <- 0.3",
                "3 <- 1.3",
                "4 <- 3.0",
                "5 <- 3.0",
                "6 <- 1.2",
                "7 <- 1.1",
                "8 <- INIT",
                "9 <- 4.0"
            ]
        },
        "Step 5": {
            "steps": [
                "8 - 2 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3)",
                "8 - 2 = 6 (left: 3 3 6) || 6 * 3 = 18 (left: 18) || There are no possible next steps with the given input of 18.",
                "8 / 2 = 4 (left: 3 4 3) || 4 / 3 = 1.33 (left: 1.33 3)",
                "8 - 2 = 6 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6)",
                "8 - 2 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3 6) || 6 - 3 = 3 (left: 3)",
                "8 - 2 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3 6) || 6 - 3 = 3 (left: 3)",
                "8 - 2 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3) || 3 + 8 = 11 (left: 11)",
                "3 / 2 = 1.5 (left: 1.5 3 8) || 8 / ",
                "3 + 2 = 5 (left: 5 3 8)",
                "3 + 3 = 6 (left: 2 6 8) || 6 * 2 = 12 (left: 12 8) || 12 - 8 = 4 (left: 4 8)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                1.0,
                60.0,
                0.002,
                1.0,
                0.001,
                0.003,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 4.4",
                "2 <- 5.3",
                "3 <- 2.9",
                "4 <- INIT",
                "5 <- 5.8",
                "6 <- 1.1",
                "7 <- 5.8",
                "8 <- 0.1",
                "9 <- 5.3"
            ]
        },
        "Step 6": {
            "steps": [
                "8 - 2 = 6 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "3 * 3 = 9 (left: 2 8 9) || 2 * 8 = 16 (left: 9 16)",
                "8 - 2 = 6 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "3 / 2 = 1.5 (left: 1.5 3 8) || 8 / 1.5 = 5.33 (left: 5.33 8) || 5.33 / 8 = 0.66625 (left: 0.66625)",
                "3 + 2 = 5 (left: 5 3 8)",
                "3 + 2 = 5 (left: 5 3 8) || ",
                "3 / 2 = 1.5 (left: 1.5 3 8) || 8 - 1.5 = 6.5 (left: 6.5 8)",
                "3 + 2 = 5 (left: 5 3 8) || 3 / 8 = 0.38 (left: 0.38 8)",
                "3 * 2 = 6 (left: 6 3 8) || 6 / 3 = 2 (left: 2 8)",
                "8 - 2 = 6 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                3.0,
                0.003,
                1.002,
                1.001,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 0.8",
                "2 <- 5.3",
                "3 <- 0.2",
                "4 <- 4.0",
                "5 <- 1.7",
                "6 <- 1.1",
                "7 <- 5.3",
                "8 <- 5.3",
                "9 <- 0.8"
            ]
        },
        "Step 7": {
            "steps": [
                "8 - 2 = 6 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "8 - 2 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3)",
                "8 - 2 = 6 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "8 - 3 = 5 (left: 2 5 8) || 8 - 2 = 6 (left: 6 8)",
                "3 + 3 = 6 (left: 2 6 8) || 6 * 2 = 12 (left: 12 8) || 12 * 8 = 96 (left: 8 96)",
                "3 + 3 = 6 (left: 2 6  || 6 * 2 = 12 (left: 12)",
                "3 / 2 = 1.5 (left: 1.5 3 8) || 8 - 1.5 = 6.5 (left: 6.5 8)",
                "8 - 2 = 6 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "8 - 2 = 6 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 2 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                1.002,
                22.0,
                0.001,
                1.002,
                0.002,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 1.3",
                "2 <- 5.3",
                "3 <- 6.4",
                "4 <- 7.4",
                "5 <- 3.0",
                "6 <- 5.3",
                "7 <- 5.8",
                "8 <- 1.1",
                "9 <- 1.2"
            ]
        },
        "Step 8": {
            "steps": [
                "8 - 2 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3 6) || 6 / 3 = 2 (left: 2)",
                "8 - 2 = 6 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6)",
                "8 - 2 = 6 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "3 + 2 = 5 (left: 5 3 8) || 5 / 3 = 1.67 (left: 1.67 8)",
                "3 + 3 = 6 (left: 2 6 8) || 6 * 2 = 12 (left: 12 8) || 12 * 8 = 96 (left: 8 96) || 2 + 5 = 7 (left: 7 10)",
                "8 - 2 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3 6) || 6 - 3 = 3 (left: 3)",
                "8 - 2 = 6 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "3 + 2 = 5 (left: 5 3 8) || 3 * 8 = 24 (left: 5 24)",
                "3 / 2 = 1.5 (left: 1.5 3 8) || 8 - 1.5 = 6.5 (left: 6.5 8)",
                "8 - 2 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3) || 8 / 3 = 2.67 (left: 2.67)"
            ],
            "Evaluation": [
                0.0,
                60.0,
                0.003,
                1.002,
                0.001,
                0.002,
                0.002,
                40.0,
                1.002,
                0.001
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 8.1",
                "2 <- 3.7",
                "3 <- 3.7",
                "4 <- 8.1",
                "5 <- 8.7",
                "6 <- 5.3",
                "7 <- 8.1",
                "8 <- 5.3",
                "9 <- 8.1"
            ]
        },
        "Step 9": {
            "steps": [
                "8 - 2 = 6 (left: 3 6  || 6 - 3 = 3 (left: 3 6)",
                "8 - 2 = 6 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "8 - 2 = 6 (left: 3 3 6) || 6 * 3 = 18 (left: 18) || There are no possible next steps for the input 18.",
                "8 - 2 = 6 (left: 3 3 6) || 6 * 3 = 18 (left: 18) || There are no possible next steps with the input 18.",
                "8 - 2 = 6 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 1 + 6 = 7",
                "3 + 2 = 5 (left: 5 3 8) || 3 * 8 = 24 (left: 5 24) || 24 - 5 = 19 (left: 19)",
                "8 - 2 = 6 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 2 = 6 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "8 - 2 = 6 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "8 - 2 = 6 (left: 3 3 6) || 3 / 3 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)"
            ]
        },
        "Input": "2 3 3 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "83": {
        "puzzle": "3 5 5 8",
        "Step 0": {
            "steps": [
                "8 + 3 = 11 (left: 5 5 11)",
                "5 - 3 = 2 (left: 2 5 8)",
                "5 * 5 = 25 (left: 3 8 25)",
                "5 * 3 = 15 (left: 5 8 15)",
                "5 / 3 = 1.66667 (left: 1.67 5 8)",
                "3 * 5 = 15 (left: 5 8 15)",
                "8 - 5 = ",
                "8 - 3 = 5 (left: 5 5 8)",
                "5 + 5 = 10 (left: 3 8 ",
                "8 - 3 = 5 (left: 5 5 8)"
            ],
            "Evaluation": [
                1.001,
                1.002,
                60.0,
                1.002,
                3.0,
                2.001,
                0.003,
                3.0,
                40.0,
                1.002
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.8",
                "2 <- 0.8",
                "3 <- 0.8",
                "4 <- 0.8",
                "5 <- 0.2",
                "6 <- 0.2",
                "7 <- 0.2",
                "8 <- 0.8",
                "9 <- 0.8"
            ]
        },
        "Step 1": {
            "steps": [
                "5 * 5 = 25 (left: 3 8 25) || 8 + 3 = 11 (left: 11 25)",
                "5 + 5 = 10 (left: 3 8  || 8 - 3 = 5 (left: 5)",
                "5 + 5 = 10 (left: 3 8  || 8 - 3 = 5 (left: 5)",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24)",
                "5 + 5 = 10 (left: 3 8  || 8 * 3 = 24 (left: 24)",
                "5 * 5 = 25 (left: 3 8 25) || 25 / 5 = 5 (left: 3 8 5)",
                "5 * 5 = 25 (left: 3 8 25) || 25 - 8 = 17 (left: 3 17)",
                "5 * 5 = 25 (left: 3 8 25) || 25 / 8 = 3.125 (left: 3.125 25)",
                "5 + 5 = 10 (left: 3 8  || Input: 5 5",
                "5 + 5 = 10 (left: 3 8  || 8 - 3 = 5 (left: 5)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.002,
                60.0,
                60.0,
                60.0,
                0.002,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 1.5",
                "2 <- 1.3",
                "3 <- 1.3",
                "4 <- 1.5",
                "5 <- 1.5",
                "6 <- 1.5",
                "7 <- 0.8",
                "8 <- 1.3",
                "9 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "5 * 5 = 25 (left: 3 8 25) || 25 / 5 = 5 (left: 3 8 5) || 8 - 3 = 5 (left: 5 5)",
                "5 * 5 = 25 (left: 3 8 25) || 25 / 5 = 5 (left: 3 8 5) || 8 / 3 = 2.67 (left: 2.67 5)",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) + 8 = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24",
                "5 * 5 = 25 (left: 3 8 25) || 25 / 5 = 5 (left: 3 8 5) || 8 / 3 = 2.67 (left: 2.67 5)",
                "5 * 5 = 25 (left: 3 8 25) || 25 / 5 = 5 (left: 3 8 5) || 3 / 8 = ",
                "5 * 5 = 25 (left: 3 8 25) || 25 / 5 = 5 (left: 3 8 5) || 3 * 8 = 24 (left: 24 5)",
                "5 + 5 = 10 (left: 3 8  || Input: 4 10",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24",
                "5 * 5 = 25 (left: 3 8 25) || 25 - 8 = 17 (left: 3 17)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                60.0,
                60.0,
                1.002,
                0.003,
                60.0,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.2",
                "2 <- 1.3",
                "3 <- 1.5",
                "4 <- 2.6",
                "5 <- 0.4",
                "6 <- 2.3",
                "7 <- 0.2",
                "8 <- 1.4",
                "9 <- 0.8"
            ]
        },
        "Step 3": {
            "steps": [
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) + 8 = 24 || Input: 1 3 4 6\nSteps:\n3 + 4 = 7 (left: 1 6 7)\n6 + 1 = 7 (left: 7 7)\n7 * 7 = 49 (left: 49)\n49 / 2 = 24 (left: 24)\nAnswer: ((3 + 4) + (6 + 1)) * (7 / 2) = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) + 8 = 24 || Input: 2 3 6 9\nSteps:\n2 * 9 = 18 (left: 3 6 18)\n6 - 3 = 3 (left: 3 18)\n3 * 6 = 18 (left: 18)\n18 - 18 = 0 (left: 0)\nAnswer: ((2 * 9) - (6 - 3)) * 6 = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24",
                "5 * 5 = 25 (left: 3 8 25) || 25 / 5 = 5 (left: 3 8 5) || 5 * 3 = 15 (left: 8 15)",
                "5 * 5 = 25 (left: 3 8 25) || 25 / 5 = 5 (left: 3 8 5) || 3 * 8 = 24 (left: 24 5) || 24 / 5 = 4.8 (left: 4.8 5)",
                "5 / 3 = 1.66667 (left: 1.67 5 8) || 5 / 1.67 = 2.994 (left: 2.994 8)",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 2 4 6 9\nSteps:\n2 * 6 = 12 (left: 4 9 12)\n4 + 9 = 13 (left: 13 12)\n13 - 12 = 1 (left: 1)\n1 * 24 = 24 (left: 24)\nAnswer: ((2 * 6) + (4 + 9)) - 12 = 24",
                "5 * 5 = 25 (left: 3 8 25) || 25 / 8 = 3.125 (left: 3.125 8 ",
                "5 + 5 = 10 (left: 3 8  || 8 * 3 = 24 (left: 24) || Answer: (5 + 5) * (3 * 8) = 24",
                "5 + 5 = 10 (left: 3 8  || 8 - 3 = 5 (left: 5)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                0.001,
                60.0,
                3.0,
                60.0,
                1.002,
                20.002,
                0.002
            ],
            "Resampling": [
                "0 <- 3.2",
                "1 <- 3.8",
                "2 <- 3.1",
                "3 <- 2.8",
                "4 <- 2.6",
                "5 <- 3.2",
                "6 <- 2.8",
                "7 <- 3.2",
                "8 <- 3.6",
                "9 <- 2.3"
            ]
        },
        "Step 4": {
            "steps": [
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 * 2 = 12 (left: 12 12)\n12 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (6 * 2) = 24",
                "5 + 5 = 10 (left: 3 8  || 8 * 3 = 24 (left: 24) || Answer: (5 + 5) * (3 * 8) = 24 || Input: 2 3 6 6\nSteps:\n3 * 6 = 18 (left: 2 6 18)\n6 - 2 = 4 (left: 4 18)\n4 * 6 = 24 (left: 24)\nAnswer: (3 * 6) - (6 - 2) = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) + 8 = 24 || Input: 2 3 6 9\nSteps:\n2 * 9 = 18 (left: 3 6 18)\n6 - 3 = 3 (left: 3 18)\n3 * 6 = 18 (left: 18)\n18 - 18 = 0 (left: 0)\nAnswer: ((2 * 9) - (6 - 3)) * 6 = 24 || Input: 1 3 5 6\nSteps:\n1 * 5 = 5 (left: 3 6 5)\n5 + 6 = 11 (left: 3 11)\n3 * 11 = 33 (left: 33)\n33 - 9 = 24 (left: 24)\nAnswer: ((1 * 5) + 6) * (3 * 11) - 9 = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 2 3 4 6\nSteps:\n3 + 6 = 9 (left: 2 4 9)\n2 * 4 = 8 (left: 8 9)\n8 + 9 = 17 (left: 17)\n17 + 4 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: (((2 * 4) + 9) + 3)",
                "5 * 5 = 25 (left: 3 8 25) || 25 / 5 = 5 (left: 3 8 5) || 3 * 8 = 24 (left: 24 5) || 24 * 5 = 120 (left: 5 120)",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n3 * 4 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (2 * 6) + (3 * 4) = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 2 3 6 9\nSteps:\n3 * 9 = 27 (left: 2 6 27)\n6 - 2 = 4 (left: 4 27)\n4 * 27 = 108 (left: 108)\nAnswer: (3 * 9) * (6 - 2) = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 3 6 8 9\nSteps:\n6 * 3 = 18 (left: 8 9 18)\n9 - 8 = 1 (left: 1 18)\n18 * 1 = 18 (left: 18)\nAnswer: (6 * 3) - (9 - 8) = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 2 4 6 9\nSteps:\n2 * 6 = 12 (left: 4 9 12)\n4 + 9 = 13 (left: 13 12)\n13 - 12 = 1 (left: 1)\n1 * 24 = 24 (left: 24)\nAnswer: ((2 * 6) + (4 + 9)) - 12 = 24 || Input: 3 3 7 8\nSteps:\n3 * 7 = 21 (left: 3 8 21)\n3 + 8 = 11 (left: 11 21)\n11 + 21 = 32 (left: 32)\n32 - 8 = 24 (left: 24)\nAnswer: ((3 * 7) + (3 + 8)) - 8 = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 2 3 6 8\nSteps:\n6 - 2 = 4 (left: 3 4 8)\n4 * 3 = 12 (left: 12 8)\n12 + 8 = 20 (left: 20)\n20 + 4 = 24\nAnswer: ((6 - 2) * 3) + 8 + 4 = 24"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 3.4",
                "1 <- 4.2",
                "2 <- 4.3",
                "3 <- 4.4",
                "4 <- 3.2",
                "5 <- 3.1",
                "6 <- 4.9",
                "7 <- 2.3",
                "8 <- 1.3",
                "9 <- 3.1"
            ]
        },
        "Step 5": {
            "steps": [
                "5 * 5 = 25 (left: 3 8 25) || 25 / 5 = 5 (left: 3 8 5) || 3 * 8 = 24 (left: 24 5) || 24 / 5 = 4.8 (left: 4.8 5) || 5 - 4.8 = 0.2 (left: 0.2)",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) + 8 = 24 || Input: 2 3 6 9\nSteps:\n2 * 9 = 18 (left: 3 6 18)\n6 - 3 = 3 (left: 3 18)\n3 * 6 = 18 (left: 18)\n18 - 18 = 0 (left: 0)\nAnswer: ((2 * 9) - (6 - 3)) * 6 = 24 || Input: 1 3 5 6\nSteps:\n1 * 5 = 5 (left: 3 6 5)\n5 + 6 = 11 (left: 3 11)\n3 * 11 = 33 (left: 33)\n33 - 9 = 24 (left: 24)\nAnswer: ((1 * 5) + 6) * (3 * 11) - 9 = 24 || Input: 2 4 5 6\nSteps:\n5 + 6 = 11 (left: 2 4 11)\n4 * 11 = 44 (left: 2 44)\n2 * 44 = 88 (left: 88)\n88 / 4 = 22 (left: 22)\n22 - 5 = 17 (left: 17)\n17 - 11 = 6 (left: 6)\n6 * ",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 2 3 4 6\nSteps:\n3 + 6 = 9 (left: 2 4 9)\n2 * 4 = 8 (left: 8 9)\n8 + 9 = 17 (left: 17)\n17 + 4 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: (((2 * 4) + 9) + 3) ||  * 6 = 24",
                "5 * 5 = 25 (left: 3 8 25) || 25 / 5 = 5 (left: 3 8 5) || 3 * 8 = 24 (left: 24 5) || 24 * 5 = 120 (left: 5 120) || 5 + 115 = 120 (left: 115)",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || \nGreat work! You were able to find multiple ways to obtain the number 24 using the given numbers and arithmetic operations. Keep practicing to sharpen your math skills!",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) + 8 = 24 || Input: 2 3 6 9\nSteps:\n2 * 9 = 18 (left: 3 6 18)\n6 - 3 = 3 (left: 3 18)\n3 * 6 = 18 (left: 18)\n18 - 18 = 0 (left: 0)\nAnswer: ((2 * 9) - (6 - 3)) * 6 = 24 || Input: 1 3 4 7\nSteps:\n3 + 7 = 10 (left: 1 4 10)\n10 - 4 = 6 (left: 1 6)\n6 * 4 = 24 (left: 24)\nAnswer: (1 + 3 + 7) * 4 = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 2 3 6 8\nSteps:\n6 - 2 = 4 (left: 3 4 8)\n4 * 3 = 12 (left: 12 8)\n12 + 8 = 20 (left: 20)\n20 + 4 = 24\nAnswer: ((6 - 2) * 3) + 8 + 4 = 24 || Input: 1 3 4 8\nSteps:\n4 + 8 = 12 (left: 1 3 12)\n3 * 12 = 36 (left: 1 36)\n36 / 1 = 36 (left: 36)\nAnswer: (1 + (3 * (4 + 8))) = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 6 6 6 2\nSteps:\n6 * 6 = 36 (left: 6 2 36)\n36 / 2 = 18 (left: 6 18)\n6 * 18 = 108 (left: 108)\nAnswer: (6 * 6) / 2 * 18 = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) + 8 = 24 || Input: 2 3 6 9\nSteps:\n2 * 9 = 18 (left: 3 6 18)\n6 - 3 = 3 (left: 3 18)\n3 * 6 = 18 (left: 18)\n18 - 18 = 0 (left: 0)\nAnswer: ((2 * 9) - (6 - 3)) * 6 = 24 || Input: 3 4 5 6\nSteps:\n4 + 6 = 10 (left: 3 5 10)\n5 * 3 = 15 (left: 10 15)\n15 - 10 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: ((4 + 6) * (5 * 3)) -"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.003,
                0.003,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 4.9",
                "1 <- 5.7",
                "2 <- 3.0",
                "3 <- 5.1",
                "4 <- 4.0",
                "5 <- 2.2",
                "6 <- INIT",
                "7 <- 3.4",
                "8 <- 1.4",
                "9 <- 4.9"
            ]
        },
        "Step 6": {
            "steps": [
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 2 3 6 8\nSteps:\n6 - 2 = 4 (left: 3 4 8)\n4 * 3 = 12 (left: 12 8)\n12 + 8 = 20 (left: 20)\n20 + 4 = 24\nAnswer: ((6 - 2) * 3) + 8 + 4 = 24 || Input: 1 3 5 8\nSteps:\n5 + 3 = 8 (left: 1 8 8)\n8 + 8 = 16 (left: 1 16)\n16 - 1 = 15 (left: 15)\n15 + 8 = 23\nAnswer: ((1 + 5) + 3) + 8 + 8 = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 6 6 6 2\nSteps:\n6 * 6 = 36 (left: 6 2 36)\n36 / 2 = 18 (left: 6 18)\n6 * 18 = 108 (left: 108)\nAnswer: (6 * 6) / 2 * 18 = 24 || Input: 1 2 3 4\nSteps:\n1 * 2 = 2 (left: 3 4 2)\n3 + 4 = 7 (left: 7 2)\n7 * 2 = 14 (left: 14)\n14 + 3 = 17 (left: 17)\n17 + 4 = 21 (left: 21)\n21 + 2 = 23 (left: 23)\n23 + ",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) + 8 = 24 || Input: 1 3 4 6\nSteps:\n3 + 4 = 7 (left: 1 6 7)\n6 + 1 = 7 (left: 7 7)\n7 * 7 = 49 (left: 49)\n49 / 2 = 24 (left: 24)\nAnswer: ((3 + 4) + (6 + 1)) * (7 / 2) = 24 || Input: 2 3 5 7\nSteps:\n2 * 7 = 14 (left: 3 5 14)\n3 + 5 = 8 (left: 8 14)\n8 * 14 = 112 (left: 112)\n112 / 7 = 16 (left: 16)\n16 - 14 = 2 (left: 2 16)\n2 * 8 = 16 (left: 16)\n16",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) + 8 = 24 || Input: 2 3 6 9\nSteps:\n2 * 9 = 18 (left: 3 6 18)\n6 - 3 = 3 (left: 3 18)\n3 * 6 = 18 (left: 18)\n18 - 18 = 0 (left: 0)\nAnswer: ((2 * 9) - (6 - 3)) * 6 = 24 || Input: 1 3 5 6\nSteps:\n1 * 5 = 5 (left: 3 6 5)\n5 + 6 = 11 (left: 3 11)\n3 * 11 = 33 (left: 33)\n33 - 9 = 24 (left: 24)\nAnswer: ((1 * 5) + 6) * (3 * 11) - 9 = 24 || Input: 2 4 5 6\nSteps:\n5 + 6 = 11 (left: 2 4 11)\n4 * 11 = 44 (left: 2 44)\n2 * 44 = 88 (left: 88)\n88 / 4 = 22 (left: 22)\n22 - 5 = 17 (left: 17)\n17 - 11 = 6 (left: 6)\n6 *  || (2 * (4 * ((5 + 6) - 11))) * (22 - 5 - 17) = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 * 2 = 12 (left: 12 12)\n12 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (6 * 2) = 24 || Input: 3 3 7 8\nSteps:\n3 * 7 = 21 (left: 3 8 21)\n3 + 8 = 11 (left: 11 21)\n11 * 21 = 231 (left: 24)\nAnswer: (3 * 7) + (3 + 8) = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) + 8 = 24 || Input: 6 6 6 6\nSteps:\n6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 / 12 = 3 (left: 3)\nAnswer: (6 + 6) * (6 / 6) = 24",
                "5 / 3 = 1.67 (left: 1.67 5 8)",
                "5 * 5 = 25 (left: 3 8 25) || 25 / 5 = 5 (left: 3 8 5) || 3 * 8 = 24 (left: 24 5) || 24 / 5 = 4.8 (left: 4.8 5) || 4.8 * 5 = 24 (left: 24)",
                "5 + 5 = 10 (left: 3 8  || 8 * 3 = 24 (left: 24) || Answer: (5 + 5) * 3 = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 2 3 6 8\nSteps:\n6 - 2 = 4 (left: 3 4 8)\n4 * 3 = 12 (left: 12 8)\n12 + 8 = 20 (left: 20)\n20 + 4 = 24\nAnswer: ((6 - 2) * 3) + 8 + 4 = 24 || Input: 1 2 3 4\nSteps:\n2 * 4 = 8 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)\n5 * 1 = 5 (left: 5)\n5 * 4 = 20 (left: 20)\n20 + 3 = 23\n23 + 1 = 24\nAnswer: (((1 * 5) * 4) +"
            ],
            "Evaluation": [
                40.0,
                60.0,
                60.0,
                0.003,
                60.0,
                40.0,
                3.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 6.9",
                "1 <- 4.0",
                "2 <- 5.6",
                "3 <- 4.5",
                "4 <- 4.6",
                "5 <- 6.7",
                "6 <- 1.4",
                "7 <- 5.7",
                "8 <- 6.8",
                "9 <- 3.2"
            ]
        },
        "Step 7": {
            "steps": [
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 2 3 6 8\nSteps:\n6 - 2 = 4 (left: 3 4 8)\n4 * 3 = 12 (left: 12 8)\n12 + 8 = 20 (left: 20)\n20 + 4 = 24\nAnswer: ((6 - 2) * 3) + 8 + 4 = 24 || Input: 1 2 3 4\nSteps:\n2 * 4 = 8 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)\n5 * 1 = 5 (left: 5)\n5 * 4 = 20 (left: 20)\n20 + 3 = 23\n23 + 1 = 24\nAnswer: (((1 * 5) * 4) + ||  3) + 1 = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 * 2 = 12 (left: 12 12)\n12 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (6 * 2) = 24 || Input: 1 3 6 8\nSteps:\n1 * 8 = 8 (left: 3 6 8)\n3 + 6 = 9 (left: 8 9)\n8 * 9 = 72 (left: 72)\nAnswer: 1 * (3 + 6) * 8 = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 2 3 6 8\nSteps:\n6 - 2 = 4 (left: 3 4 8)\n4 * 3 = 12 (left: 12 8)\n12 + 8 = 20 (left: 20)\n20 + 4 = 24\nAnswer: ((6 - 2) * 3) + 8 + 4 = 24 || Input: 1 3 4 8\nSteps:\n4 + 8 = 12 (left: 1 3 12)\n3 * 12 = 36 (left: 1 36)\n36 / 1 = 36 (left: 36)\nAnswer: (1 + (3 * (4 + 8))) = 24 || Input: 2 3 5 8\nSteps:\n3 + 5 = 8 (left: 2 8 8)\n8 - 2 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\n48 / 6 = 8 (left: 8)\nAnswer: (2 * (3 + 5)) + 8 = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n3 * 4 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (2 * 6) + (3 * 4) = 24 || Input: 7 7 3 4\nSteps:\n7 + 7 = 14 (left: 3 4 14)\n3 * 4 = 12 (left: 12 14)\n14 - 12 = 2 (left: 2)\n2 * 12 = 24 (left: 24)\nAnswer: ((7 + 7) - (3 * 4)) * 12 = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 2 3 6 9\nSteps:\n3 * 9 = 27 (left: 2 6 27)\n6 - 2 = 4 (left: 4 27)\n4 * 27 = 108 (left: 108)\nAnswer: (3 * 9) * (6 - 2) = 24 || Input: 2 4 5 6\nSteps:\n5 * 4 = 20 (left: 2 6 20)\n6 - 2 = 4 (left: 4 20)\n4 * 20 = 80 (left: 80)\nAnswer: (5 * 4) * (6 - 2) = 24",
                "5 * 5 = 25 (left: 3 8 25) || 25 / 5 = 5 (left: 3 8 5) || 3 * 8 = 24 (left: 24 5) || 24 / 5 = 4.8 (left: 4.8 5) || 4.8 * 5 = 24 (left: 24) || Answer: (3 * 8) / (5 * 5) = 24",
                "5 + 5 = 10 (left: 3 8  || 8 * 3 = 24 (left: 24) || Answer: (5 + 5) * (3 * 8) = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 6 6 6 2\nSteps:\n6 * 6 = 36 (left: 6 2 36)\n36 / 2 = 18 (left: 6 18)\n6 * 18 = 108 (left: 108)\nAnswer: (6 * 6) / 2 * 18 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n2 * 6 = 12 (left: 12 12)\n12 * 12 = 24 (left: 24)\nAnswer: (2 * 6) * (3 * 4) = 24",
                "5 + 5 = 10 (left: 3 8  || 8 * 3 = 24 (left: 24) || Answer: (5 + 5) * 3 = 24 || Input: 2 3 6 8\nSteps:\n6 * 3 = 18 (left: 2 8 18)\n18 - 8 = 10 (left: 2 10)\n2 * 10 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((6 * 3) - 8) * 2 + 4 = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 3 4 5 6\nSteps:\n3 * 6 = 18 (left: 4 5 18)\n4 + 5 = 9 (left: 9 18)\n9 * 2 = 24 (left: 24)\nAnswer: (3 * 6) * (4 + 5) = 24"
            ],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                20.002,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 6.9",
                "2 <- 6.2",
                "3 <- 4.9",
                "4 <- 4.3",
                "5 <- 0.8",
                "6 <- 6.8",
                "7 <- 2.3",
                "8 <- 7.4",
                "9 <- 7.7"
            ]
        },
        "Step 8": {
            "steps": [
                "5 + 5 = 10 (left: 3 8  || 8 * 3 = 24 (left: 24) || Answer: (5 + 5) * (3 * 8) = 24 || Input: 2 3 6 6\nSteps:\n3 * 6 = 18 (left: 2 6 18)\n6 - 2 = 4 (left: 4 18)\n4 * 6 = 24 (left: 24)\nAnswer: (3 * 6) - (6 - 2) = 24 || Input: 1 3 4 7\nSteps:\n3 * 7 = 21 (left: 1 4 21)\n4 + 1 = 5 (left: 5 21)\n5 * 21 = 105 (left: 105)\n105 / 4 = 26.25\nAnswer: ((3 * 7) + (4 + 1)) / 4 = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 2 3 6 8\nSteps:\n6 - 2 = 4 (left: 3 4 8)\n4 * 3 = 12 (left: 12 8)\n12 + 8 = 20 (left: 20)\n20 + 4 = 24\nAnswer: ((6 - 2) * 3) + 8 + 4 = 24 || Input: 1 2 3 4\nSteps:\n2 * 4 = 8 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)\n5 * 1 = 5 (left: 5)\n5 * 4 = 20 (left: 20)\n20 + 3 = 23\n23 + 1 = 24\nAnswer: (((1 * 5) * 4) + ||  3) + 1 = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) + 8 = 24 || Input: 1 3 4 6\nSteps:\n3 + 4 = 7 (left: 1 6 7)\n6 + 1 = 7 (left: 7 7)\n7 * 7 = 49 (left: 49)\n49 / 2 = 24 (left: 24)\nAnswer: ((3 + 4) + (6 + 1)) * (7 / 2) = 24 || Input: 2 3 5 7\nSteps:\n2 * 7 = 14 (left: 3 5 14)\n3 + 5 = 8 (left: 8 14)\n8 * 14 = 112 (left: 112)\n112 / 7 = 16 (left: 16)\n16 - 14 = 2 (left: 2 16)\n2 * 8 = 16 (left: 16)\n16 || Answer: ((2 * 7) * (3 + 5)) * ((14 / 7) - 2) = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 2 3 6 8\nSteps:\n6 - 2 = 4 (left: 3 4 8)\n4 * 3 = 12 (left: 12 8)\n12 + 8 = 20 (left: 20)\n20 + 4 = 24\nAnswer: ((6 - 2) * 3) + 8 + 4 = 24 || Input: 1 2 3 4\nSteps:\n2 * 4 = 8 (left: 1 3 8)\n1 + 3 = 4 (left: 4 8)\n4 * 8 = 32\nAnswer: (1 + 3) * (2 * 4) = 32",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 2 3 4 6\nSteps:\n3 + 6 = 9 (left: 2 4 9)\n2 * 4 = 8 (left: 8 9)\n8 + 9 = 17 (left: 17)\n17 + 4 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: (((2 * 4) + 9) + 3) || + 4) + 6 = 24",
                "5 + 5 = 10 (left: 3 8  || 8 / 3 = 2.67 (left: 2.67)",
                "5 + 5 = 10 (left: 3 8  || 8 * 3 = 24 (left: 24) || Answer: (5 + 5) * 3 = 24 || Input: 2 3 6 8\nSteps:\n6 * 3 = 18 (left: 2 8 18)\n18 - 8 = 10 (left: 2 10)\n2 * 10 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((6 * 3) - 8) + 4 = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 2 3 6 8\nSteps:\n6 * 2 = 12 (left: 3 8 12)\n12 - 8 = 4 (left: 3 4)\n4 * 3 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((6 * 2) - 8) * 3 = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 2 3 6 9\nSteps:\n3 * 9 = 27 (left: 2 6 27)\n6 - 2 = 4 (left: 4 27)\n4 * 27 = 108 (left: 108)\nAnswer: (3 * 9) * (6 - 2) = 24 || Input: 2 4 5 6\nSteps:\n5 * 4 = 20 (left: 2 6 20)\n6 - 2 = 4 (left: 4 20)\n4 * 20 = 80 (left: 80)\nAnswer: (5 * 4) * (6 - 2) = 24 || Input: 1 3 7 8\nSteps:\n7 - 1 = 6 (left: 3 6 8)\n6 + 3 = 9 (left: 9 8)\n9 * 8 = 72 (left: 72)\n72 / 3 = 24 (left: 24)\nAnswer: ((7 - 1) + 3) * 8 / 3 = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 6 6 6 2\nSteps:\n6 * 6 = 36 (left: 6 2 36)\n36 / 2 = 18 (left: 6 18)\n6 * 18 = 108 (left: 108)\nAnswer: (6 * 6) / 2 * 18 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n2 * 6 = 12 (left: 12 12)\n12 * 12 = 24 (left: 24)\nAnswer: (2 * 6) * (3 * 4) = 24 || Input: 2 3 5 7\nSteps:\n5 + 7 = 12 (left: 2 3 12)\n3 * 12 = 36 (left: 2 36)\n2 * 36 = 72 (left: 72)\nAnswer: 2 * (3 * (5 + 7)) = 24"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                60.0,
                0.003,
                0.002,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 7.7",
                "1 <- 3.2",
                "2 <- 6.4",
                "3 <- 3.6",
                "4 <- 5.8",
                "5 <- 6.9",
                "6 <- 6.8",
                "7 <- 4.2",
                "8 <- 7.5",
                "9 <- 7.2"
            ]
        },
        "Step 9": {
            "steps": [
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 6 6 6 2\nSteps:\n6 * 6 = 36 (left: 6 2 36)\n36 / 2 = 18 (left: 6 18)\n6 * 18 = 108 (left: 108)\nAnswer: (6 * 6) / 2 * 18 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n2 * 6 = 12 (left: 12 12)\n12 * 12 = 24 (left: 24)\nAnswer: (2 * 6) * (3 * 4) = 24 || Input: 1 3 7 8\nSteps:\n7 + 8 = 15 (left: 1 3 15)\n3 * 15 = 45 (left: 1 45)\n1 + 45 = 46 (left: 46)\n46 - 22 = 24 (left: 24)\nAnswer: ((1 + 3 * 7) - 8) * 22 = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 2 3 3 4\nSteps:\n3 + 3 = 6 (left: 2 4 6)\n6 * 4 = 24 (left: 24)\nAnswer: (2 + 3 + 3) * 4 = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 * 2 = 12 (left: 12 12)\n12 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (6 * 2) = 24 || Input: 3 3 7 8\nSteps:\n3 * 7 = 21 (left: 3 8 21)\n3 + 8 = 11 (left: 11 21)\n11 * 21 = 231 (left: 24)\nAnswer: (3 * 7) + (3 + 8) = 24 || Input: 2 3 3 4\nSteps:\n3 + 3 = 6 (left: 2 4 6)\n6 * 4 = 24 (left: 24)\nAnswer: (2 + 3) * (3 + 4) = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 2 4 6 9\nSteps:\n2 * 6 = 12 (left: 4 9 12)\n4 + 9 = 13 (left: 13 12)\n13 - 12 = 1 (left: 1)\n1 * 24 = 24 (left: 24)\nAnswer: ((2 * 6) + (4 + 9)) - 12 = 24 || Input: 3 3 7 9\nSteps:\n3 * 7 = 21 (left: 3 9 21)\n9 - 3 = 6 (left: 6 21)\n6 * 21 = 126 (left: 126)\n126 / 5 = 24 (left: 24)\nAnswer: ((3 * 7) * (9 - 3)) / 5 = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 2 3 4 6\nSteps:\n2 * 3 = 6 (left: 4 6)\n4 + 6 = 10 (left: 10)\n6 * 10 = 60 (left: 60)\n60 / 2 = 30 (left: 30)\n30 - 4 = 26 (left: 26)\n26 - 6 = 20 (left: 20)\n20 + 4 = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 2 3 6 8\nSteps:\n6 - 2 = 4 (left: 3 4 8)\n4 * 3 = 12 (left: 12 8)\n12 + 8 = 20 (left: 20)\n20 + 4 = 24\nAnswer: ((6 - 2) * 3) + 8 + 4 = 24 || Input: 1 2 3 4\nSteps:\n2 * 4 = 8 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)\n5 * 1 = 5 (left: 5)\n5 * 4 = 20 (left: 20)\n20 + 3 = 23\n23 + 1 = 24\nAnswer: (((1 * 5) * 4) + || 3) + 1 = 24",
                "5 + 5 = 10 (left: 3 8  || 8 * 3 = 24 (left: 24) || Answer: (5 + 5) * 3 = 24 || Correct! Well done on finding the solution.",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) + 8 = 24 || Input: 2 3 6 9\nSteps:\n2 * 9 = 18 (left: 3 6 18)\n6 - 3 = 3 (left: 3 18)\n3 * 6 = 18 (left: 18)\n18 - 18 = 0 (left: 0)\nAnswer: ((2 * 9) - (6 - 3)) * 6 = 24 || Input: 1 3 5 6\nSteps:\n1 * 5 = 5 (left: 3 6 5)\n5 + 6 = 11 (left: 3 11)\n3 * 11 = 33 (left: 33)\n33 - 9 = 24 (left: 24)\nAnswer: ((1 * 5) + 6) * (3 * 11) - 9 = 24 || Input: 2 4 7 9\nSteps:\n4 + 9 = 13 (left: 2 7 13)\n7 - 2 = 5 (left: 5 13)\n5 * 13 = 65 (left: 65)\n65 / 65 = 1 (left: 1)\nAnswer: ((2 + 9) * (7 - 2)) / 4 = 24",
                "5 * 5 = 25 (left: 3 8 25) || 25 / 5 = 5 (left: 3 8 5) || 3 * 8 = 24 (left: 24 5) || 24 / 5 = 4.8 (left: 4.8 5) || 4.8 * 5 = 24 (left: 24) || Answer: (3 * 8) / (5 * 5) = 24 || Input: 3 6 6 7\nSteps:\n6 + 6 = 12 (left: 3 7 12)\n7 - 3 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\n48 / 2 = 24 (left: 24)\nAnswer: ((6 + 6) - 3) * 2 = 24",
                "5 + 5 = 10 (left: 3 8  || 3 * 8 = 24 (left: 24) || Answer: 3 * (5 + 5) * 8 = 24 || Input: 2 3 6 8\nSteps:\n6 - 2 = 4 (left: 3 4 8)\n4 * 3 = 12 (left: 12 8)\n12 + 8 = 20 (left: 20)\n20 + 4 = 24\nAnswer: ((6 - 2) * 3) + 8 + 4 = 24 || Input: 1 3 4 8\nSteps:\n4 + 8 = 12 (left: 1 3 12)\n3 * 12 = 36 (left: 1 36)\n36 / 1 = 36 (left: 36)\nAnswer: (1 + (3 * (4 + 8))) = 24 || Input: 2 3 5 8\nSteps:\n3 + 5 = 8 (left: 2 8 8)\n8 - 2 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\n48 / 6 = 8 (left: 8)\nAnswer: (2 * (3 + 5)) + 8 = 24 || Input: 4 5 6 7\nSteps:\n5 + 7 = 12 (left: 4 6 12)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * (5 + 7) = 24"
            ]
        },
        "Input": "3 5 5 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "84": {
        "puzzle": "1 1 1 13",
        "Step 0": {
            "steps": [
                "13 + 1 = 14 (left: 1 1 14)",
                "1 + 1 = 2 (left: 2 1 13)",
                "1 * 1 = 1 (left: 1 1 13)",
                "13 - 1 = 12 (left: 1 1 12)",
                "1 / 1 = 1 (left: 1 1 13)",
                "1 + 1 = 2 (left: 2 1 13)",
                "1 * 1 = 1 (left: 1 1 13)",
                "13 + 1 = 14 (left: 1 1 14)",
                "13 - 1 = 12 (left: 1 1 ",
                "13 + 1 = 14 (left: 1 1 14)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                21.001,
                40.0,
                21.001,
                0.003,
                3.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.4",
                "2 <- 0.3",
                "3 <- 0.2",
                "4 <- 0.2",
                "5 <- INIT",
                "6 <- 0.3",
                "7 <- 0.2",
                "8 <- 0.2",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "1 / 1 = 1 (left: 1 1 13) || 1 * 1 = 1 (left: 1 13)",
                "1 / 1 = 1 (left: 1 1 13) || 5 / 3 = 1.67 (left:",
                "13 - 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 13) || 1 + 1 = 2 (left: 2 13)",
                "1 * 1 = 1 (left: 1 1 13) || 13 / 1 = 13 (left: 1 13)",
                "",
                "13 - 1 = 12 (left: 1 1 12) || Input: 3 3 6",
                "1 * 1 = 1 (left: 1 1 13) || 13 + 1 = 14 (left: 1 14)",
                "1 * 1 = 1 (left: 1 1 13) || 1 - 1 = 0 (left: 0 13)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)"
            ],
            "Evaluation": [
                0.002,
                1.001,
                0.002,
                0.003,
                1.002,
                0.003,
                0.003,
                0.001,
                0.002,
                20.0
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- 0.3",
                "2 <- 1.9",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 0.3",
                "6 <- 0.2",
                "7 <- 0.3",
                "8 <- 0.3",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 13) || 1 * 1 = 1 (left: 1 13)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "13 + 1 = 14 (left: 1 1 14)",
                "13 / 1 = 13 (left: 1 1 13)",
                "13 - 1 = 12 (left: 1 1 12) || Input: 7 3 1 2",
                "1 * 1 = 1 (left: 1 1 13) || 1 + 1 = 2 (left: 2 13)",
                "13 - 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12)",
                "1 / 1 = 1 (left: 1 1 13)"
            ],
            "Evaluation": [
                0.003,
                22.0,
                0.001,
                2.0,
                2.0,
                0.003,
                0.003,
                2.001,
                40.001,
                21.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.8",
                "2 <- 2.8",
                "3 <- 2.8",
                "4 <- 2.7",
                "5 <- 2.8",
                "6 <- 1.9",
                "7 <- 0.6",
                "8 <- 0.4",
                "9 <- 1.9"
            ]
        },
        "Step 3": {
            "steps": [
                "1 / 1 = 1 (left: 1 1 13)",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 0 + 12 = 12",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 0 * 12 = 0 (left: 0)",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12) ",
                "13 - 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12) || 1 * 12 = 12 (left: 12)",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 0 * 12 = 0 (left: 0)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 13) || Input: 3 9 9 27",
                "1 / 1 = 1 (left: 1 1 13) || 13 - 1 = 12 (left: 1 12)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.001,
                0.002,
                0.002,
                0.003,
                0.003,
                1.001,
                0.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.8",
                "2 <- INIT",
                "3 <- 0.3",
                "4 <- 2.8",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 2.9",
                "8 <- 0.3",
                "9 <- 1.9"
            ]
        },
        "Step 4": {
            "steps": [
                "1 / 1 = 1 (left: 1 1 13)",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "1 + 1 = 2 (left: 2 1 13)",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12)",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 / 0 = Undefined (left: 12)",
                "1 * 1 = 1 (left: 1 1 13)",
                "13 + 1 = 14 (left: 1 1 14)",
                "1 / 1 = 1 (left: 1 1 13) || 1 / 13 = 0.07692307692307693 (left: 0.07692307692307693)",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                21.001,
                60.0,
                0.003,
                21.0,
                0.002,
                0.002,
                60.0,
                0.0
            ],
            "Resampling": [
                "0 <- 2.9",
                "1 <- 4.3",
                "2 <- 4.8",
                "3 <- 1.9",
                "4 <- 4.3",
                "5 <- 0.3",
                "6 <- INIT",
                "7 <- 4.3",
                "8 <- 2.8",
                "9 <- 0.3"
            ]
        },
        "Step 5": {
            "steps": [
                "1 / 1 = 1 (left: 1 1 13) || 13 / 1 = 13 (left: 1 13)",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 0 * 12 = 0 (left: 0)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "13 - 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "13 - 1 = 12 (left: 1 1 12)",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 / 0 = undefined (left: 12)",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 * 0 = 0 (left: 0)",
                "13 - 1 = 12 (left: 1 1 12) || 1 + 12 = 13 (left: 1 13)"
            ],
            "Evaluation": [
                1.002,
                0.002,
                0.002,
                0.002,
                0.002,
                0.003,
                21.0,
                0.002,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.3",
                "2 <- 0.3",
                "3 <- 2.1",
                "4 <- 4.8",
                "5 <- 0.4",
                "6 <- 4.2",
                "7 <- 2.8",
                "8 <- 0.4",
                "9 <- 1.9"
            ]
        },
        "Step 6": {
            "steps": [
                "1 / 1 = 1 (left: 1 1 13) || 1 * 1 = 1 (left: 1 13)",
                "13 - 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "13 - 1 = 12 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 0 + 12 = 12",
                "1 / 1 = 1 (left: 1 1 13) || 1 / 13 = 0.07692307692",
                "1 + 1 = 2 (left: 2 1 13) || 2 - 1 = 1 (left: 1 13)",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 0 + 12 = 12 (left: 12)",
                "1 / 1 = 1 (left: 1 1 13) || 1 - 1 = 0 (left: 0 13)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.001,
                0.001,
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.0,
                0.002
            ],
            "Resampling": [
                "0 <- 4.8",
                "1 <- 4.3",
                "2 <- 4.5",
                "3 <- 2.8",
                "4 <- 2.1",
                "5 <- 4.8",
                "6 <- 5.6",
                "7 <- 4.8",
                "8 <- 5.9",
                "9 <- 4.8"
            ]
        },
        "Step 7": {
            "steps": [
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 / 0 = undefined",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 0 + 12 = 12",
                "1 * 1 = 1 (left: 1 1 13) || Possible",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 / 0 is undefined ",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 0 / 12 = 0 (left: 0)",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 0 + 12 = 12",
                "13 - 1 = 12 (left: 1 1 12) || 1 + 12 = 13 (left: 1 13) || 1 * 13 = 13 (left: 13)",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.001,
                0.002,
                20.001,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 7.6",
                "2 <- 5.6",
                "3 <- 4.2",
                "4 <- 4.8",
                "5 <- 4.3",
                "6 <- 4.8",
                "7 <- 7.6",
                "8 <- 4.3",
                "9 <- 4.8"
            ]
        },
        "Step 8": {
            "steps": [
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 / 0 = undefined",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "13 - 1 = 12 (left: 1 1 12) || 1 / 1 = 1 (left: 1 12)",
                "1 + 1 = 2 (left: 2 1 13) || 2 - 1 = 1 (left: 1 13)",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 * 0 = 0 (left: 0)",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 / 12 = 1 (left: 1)",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 / 0 = undefined",
                "13 - 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || Input: 3 9 27",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 * 0 = 0 (left: 0)",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 * 0 = 0 (left: 0)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 5.6",
                "1 <- 2.9",
                "2 <- 2.8",
                "3 <- 4.8",
                "4 <- 5.9",
                "5 <- 4.8",
                "6 <- 4.3",
                "7 <- 4.8",
                "8 <- 4.3",
                "9 <- 4.3"
            ]
        },
        "Step 9": {
            "steps": [
                "13 - 1 = 12 (left: 1 1 12) || 1 * 1 = 1 (left: 1 12)",
                "1 / 1 = 1 (left: 1 1 13) || 13 / 1 = 13 (left: 1 13)",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 * 0 = 0 (left: 0)",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 / 0 is undefined",
                "13 - 1 = 12 (left: 1 1 12) || 1 + 12 = 13 (left: 1 13) || 1 / 13 = 0.076923 (left: 0.076923)",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 0 - 12 = -12 (left: -12)",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 / 0 = undefined (left: 0 12)",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 0 + 12 = 12",
                "13 - 1 = 12 (left: 1 1 12) || 1 - 1 = 0 (left: 0 12) || 12 * 0 = 0 (left: 0)"
            ]
        },
        "Input": "1 1 1 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "85": {
        "puzzle": "2 3 12 12",
        "Step 0": {
            "steps": [
                "12 / 2 = 6 (left: 6 12 12)",
                "3 * 4 = 12 (left: 2 12 12)",
                "12 / 3 = 4 (left: 2 4 12)",
                "12 / 3 = 4 (left: 2 4 12)",
                "12 / 2 = 6 (left: 6 12 12)",
                "12 - 3 = 9 (left: 2 9 12)",
                "12 - 2 = 10 (left: 2 10 12)",
                "12 / 3 = 4 (left: 2 4 12)",
                "12 - 2 = 10 (left: 3 10 ",
                "12 / 2 = 6 (left: 6 12 12)"
            ],
            "Evaluation": [
                22.0,
                0.003,
                2.001,
                2.001,
                2.001,
                0.003,
                0.003,
                1.002,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.9",
                "5 <- INIT",
                "6 <- 0.0",
                "7 <- 0.3",
                "8 <- 0.9",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "3 * 12 = 36 (left: 2 36 12)",
                "12 / 2 = 6 (left: 6 12 12)",
                "12 / 2 = 6 (left: 3 6 12)",
                "12 / 2 = 6 (left: 6 6 12)",
                "12 / 2 = 6 (left: 6 12 12) || 12 * 6 = 72 (left: 12 72)",
                "12 / 2 = 6 (left: 3 6 12)",
                "12 / 2 = 6 (left: 6 12 12) || 12 - 6 = 6 (left: 6 12)",
                "12 / 3 = 4 (left: 2 4 12) || 4 * 12 = 48 (left: 48)",
                "12 / 2 = 6 (left: 6 12 12) || 12 - 6 = 6 (left: 6 12)",
                "12 - 2 = 10 (left: 2 10 12)"
            ],
            "Evaluation": [
                22.0,
                1.002,
                0.003,
                60.0,
                0.003,
                1.002,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- 1.3",
                "4 <- 1.0",
                "5 <- 0.0",
                "6 <- 1.3",
                "7 <- 0.0",
                "8 <- INIT",
                "9 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "12 / 3 = 4 (left: 2 4 12) || 2 + 4 = 6 (left: 6 12)",
                "12 / 2 = 6 (left: 6 6 12) || 12 - 6 = 6 (left: 6 12)",
                "12 / 2 = 6 (left: 6 6 12) || 12 - 6 = 6 (left: 6 12)",
                "12 / 2 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "3 * 12 = 36 (left: 2 36 12) || 36 / 12 = 3 (left: 2 3)",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12)",
                "12 / 2 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "12 / 2 = 6 (left: 6 12 12) || 12 - 6 = 6 (left: 6 12 12)",
                "12 / 3 = 4 (left: 2 4 12)",
                "3 * 12 = 36 (left: 2 36 12) || 2 * 36 = 72 (left: 12 72)"
            ],
            "Evaluation": [
                0.003,
                1.002,
                1.002,
                1.002,
                0.003,
                60.0,
                1.002,
                22.0,
                1.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.0",
                "2 <- 2.5",
                "3 <- 2.5",
                "4 <- 2.5",
                "5 <- 2.5",
                "6 <- 2.5",
                "7 <- 2.5",
                "8 <- 1.3",
                "9 <- 2.5"
            ]
        },
        "Step 3": {
            "steps": [
                "12 / 2 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 6 12 36)",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 6 2)",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 12 + 2 = 14 (left: 14)",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 / 2 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 12 36)",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)"
            ],
            "Evaluation": [
                21.001,
                0.003,
                0.002,
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 2.5",
                "1 <- 2.7",
                "2 <- 3.0",
                "3 <- 1.0",
                "4 <- 2.5",
                "5 <- 2.5",
                "6 <- INIT",
                "7 <- 2.2",
                "8 <- 1.3",
                "9 <- 0.7"
            ]
        },
        "Step 4": {
            "steps": [
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 / 2 = 6 (left: 6 12 12) || 12 - 6 = 6 (left: 6 12 12) || 6 * 12 = 72 (left: 12 72)",
                "12 / 2 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 6 12 36) || 12 + 24 = 36 (left: 6 36)",
                "3 * 12 = 36 (left: 2 36 12) || 12 * 2 = 24 (left: 24 12)",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "12 / 2 = 6 (left: 6 3 12)",
                "12 / 2 = 6 (left: 6 6 12) || 12 - 6 = 6 (left: 6 12) || 12 - 6 = 6 (left: 6 12) ",
                "12 / 2 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "12 / 3 = 4 (left: 2 4 12) || 12 / 4 = 3 (left: 3 12)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                20.002,
                0.001,
                40.0,
                1.002,
                20.002,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- 4.5",
                "1 <- 4.5",
                "2 <- 4.5",
                "3 <- 4.3",
                "4 <- 4.5",
                "5 <- 4.5",
                "6 <- 2.8",
                "7 <- 4.7",
                "8 <- 1.3",
                "9 <- 4.3"
            ]
        },
        "Step 5": {
            "steps": [
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (12 / (2 / 6)) * 12 = 24",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (12 / 2) * (12 / 6) = 24",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (12 / 2) * (12 / 6) = 24",
                "3 * 12 = 36 (left: 2 36 12) || 12 * 2 = 24 (left: 24 12) || 24 + 12 = 36 (left: 36)",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: 2 * (12 / (12 / 2)) = 24",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (12 / 2) * (12 / 6) = 24",
                "12 / 3 = 4 (left: 2 4 12) || 12 - 2 = 10 (left: 2 10)",
                "12 / 2 = 6 (left: 6 6 12) || 12 - 6 = 6 (left: 6 12) || 12 - 6 = 6 (left: 6 12)  || 6 * 12 = 72 (left: 72)",
                "12 / 2 = 6 (left: 6 6 12) || 12 - 6 = 6 (left: 6 12)",
                "3 * 12 = 36 (left: 2 36 12) || 12 * 2 = 24 (left: 24 12) || 24 * 12 = 288 (left: 288)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                60.0,
                60.0,
                0.003,
                1.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.5",
                "1 <- 1.3",
                "2 <- 5.3",
                "3 <- 3.0",
                "4 <- 5.4",
                "5 <- 5.3",
                "6 <- 5.4",
                "7 <- 4.3",
                "8 <- 4.5",
                "9 <- 1.3"
            ]
        },
        "Step 6": {
            "steps": [
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: ((12 / 2) / 12) * 12 = 24",
                "12 / 2 = 6 (left: 6 6 12) || 12 - 6 = 6 (left: 6 12)",
                "3 * 12 = 36 (left: 2 36 12) || 12 * 2 = 24 (left: 24 12) || 24 + 12 = 36 (left: 36) || 36 / 2 = 18",
                "12 / 2 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 6 12 36) || 6 * 6 = 36 (left: 12 36)",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: 2 * (12 / (12 / 2)) = 24 || Input: 3 4 5 5\nSteps:\n5 * 4 = 20 (left: 3 5 20)\n5 - 3 = 2 (left: 2 20)\n2 * 20 = 40 (left: 40)\nAnswer: (5 * 4) - (5 - 3) = 24",
                "3 * 12 = 36 (left: 2 36 12) || 12 * 2 = 24 (left: 24 12) || 24 + 12 = 36 (left: 36) || 36 / 2 = 18",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: 2 * (12 / (12 / 2)) = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6 24)\n6 - 3 = 3 (left: 3 24)\n3 * 24 = 72 (left: 72)\nAnswer: (3 * 8) * (6 - 3) = 24",
                "3 * 12 = 36 (left: 2 36 12) || 12 * 2 = 24 (left: 24 12) || 24 * 12 = 288 (left: 288)",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (12 / 2) * (12 / 6) = 24",
                "12 / 2 = 6 (left: 6 6 12) || 12 - 6 = 6 (left: 6 12)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                0.003,
                60.0,
                0.003,
                60.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 4.3",
                "2 <- 1.3",
                "3 <- 3.0",
                "4 <- 1.3",
                "5 <- 1.0",
                "6 <- 4.5",
                "7 <- 6.4",
                "8 <- 5.3",
                "9 <- 5.3"
            ]
        },
        "Step 7": {
            "steps": [
                "3 * 12 = 36 (left: 2 36 12) || 12 * 2 = 24 (left: 24 12) || 24 - 12 = 12 (left: 12)",
                "3 * 12 = 36 (left: 2 36 12) || 12 * 2 = 24 (left: 24 12) || 24 * 12 = 288 (left: 288)",
                "12 / 2 = 6 (left: 6 6 12) || 6 / 6 = 1 (left: 1 12)",
                "12 / 2 = 6 (left: 6 6 12) || 6 * 6 = 36 (left: 6 12 36) || 6 + 12 = 18 (left: 18 12 36)",
                "12 / 2 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12)",
                "3 * 12 = 36 (left: 2 36 12) || Input: 4 5 7 9",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (12 / 2) * (12 / 6) = 24",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: 2 * (12 / (12 / 2)) = 24 || Input: 3 4 5 5\nSteps:\n5 * 4 = 20 (left: 3 5 20)\n5 - 3 = 2 (left: 2 20)\n2 * 20 = 40 (left: 40)\nAnswer: (5 * 4) - (5 - 3) = 24 || Input: 2 3 7 12\nSteps:\n7 + 3 = 10 (left: 2 10 12)\n12 - 10 = 2 (left: 2 2)\n2 * 2 = 4 (left: 4)\n4 * 6 = 24 (left: 24)\nAnswer: ((7 + 3) - (12 - 10)) * 2 = 24",
                "3 * 12 = 36 (left: 2 36 12) || 12 * 2 = 24 (left: 24 12) || 24 + 12 = 36 (left: 36) || There are no possible next steps with the input 36.",
                "3 * 12 = 36 (left: 2 36 12) || 12 * 2 = 24 (left: 24 12) || 24 + 12 = 36 (left: 36) || 36 / 6 = 6 (left: 6)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.001,
                1.001,
                40.0,
                0.003,
                0.003,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 7.4",
                "1 <- 4.5",
                "2 <- 6.0",
                "3 <- 6.6",
                "4 <- 4.3",
                "5 <- 6.0",
                "6 <- 7.4",
                "7 <- 7.4",
                "8 <- 5.6",
                "9 <- 6.0"
            ]
        },
        "Step 8": {
            "steps": [
                "12 / 2 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12) || 12 / 0 = undefined",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (12 / 2) * (12 / 6) = 24",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: ((12 / 2) / 12) * 12 = 24 || Input: 3 3 6 8\nSteps:\n3 + 3 = 6 (left: 6 6 8)\n6 * 8 = 48 (left: 6 48)\n48 / 6 = 8 (left: 8 8)\n8 * 3 = 24 (left: 24)\nAnswer: ((3 + 3) * 8) * 3 = 24",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: 2 * (12 / (12 / 2)) = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6 24)\n6 - 3 = 3 (left: 3 24)\n3 * 24 = 72 (left: 72)\nAnswer: (3 * 8) * (6 - 3) = 24 || Input: 1 3 4 9\nSteps:\n4 * 9 = 36 (left: 1 3 36)\n3 + 1 = 4 (left: 4 36)\n4 * 9 = 36 (left: 36)\nAnswer: (4 * (9 * 4)) = 24",
                "3 * 12 = 36 (left: 2 36 12) || 12 * 2 = 24 (left: 24 12) || 24 * 12 = 288 (left: 288)",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: ((12 / 2) / 12) * 12 = 24 || Input: 3 3 4 7\nSteps:\n3 * 4 = 12 (left: 3 7 12)\n7 - 3 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (3 * 4) * (7 - 3) = 24",
                "12 / 2 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12) || 12 / 0 is undefined",
                "12 / 2 = 6 (left: 6 6 12) || 6 - 6 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)",
                "12 / 3 = 4 (left: 2 4 12) || 12 - 2 = 10 (left: 2 10) || 10 / 2 = 5 (left: 5)",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: ((12 / 2) / 12) * 12 = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 - 3 = 13 (left: 13)\n13 + 5 = 18 (left: 18)\n18 / 3 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: (("
            ],
            "Evaluation": [
                0.003,
                0.003,
                40.0,
                60.0,
                20.002,
                60.0,
                0.003,
                0.002,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 4.5",
                "1 <- 7.7",
                "2 <- 2.5",
                "3 <- 8.5",
                "4 <- 2.5",
                "5 <- 6.6",
                "6 <- 8.4",
                "7 <- 8.9",
                "8 <- 7.7",
                "9 <- 4.5"
            ]
        },
        "Step 9": {
            "steps": [
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (12 / 2) * (12 / 6) = 24",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: 2 * (12 / (12 / 2)) = 24 || Input: 3 4 5 5\nSteps:\n5 * 4 = 20 (left: 3 5 20)\n5 - 3 = 2 (left: 2 20)\n2 * 20 = 40 (left: 40)\nAnswer: (5 * 4) - (5 - 3) = 24 || Input: 2 3 7 12\nSteps:\n7 + 3 = 10 (left: 2 10 12)\n12 - 10 = 2 (left: 2 2)\n2 * 2 = 4 (left: 4)\n4 * 6 = 24 (left: 24)\nAnswer: ((7 + 3) - (12 - 10)) * 2 = 24 || Input: 2 4 6 8\nSteps:\n6 * 4 = 24 (left: 2 8 24)\n8 / 2 = 4 (left: 4 24)\n4 * 24 = 24 (left: 24)\nAnswer: (6 * 4) * (8 / 2) = 24",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: ((12 / 2) / 12) * 12 = 24 || Input: 3 3 4 7\nSteps:\n3 * 4 = 12 (left: 3 7 12)\n7 - 3 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (3 * 4) * (7 - 3) = 24 || Input: 1 3 4 8\nSteps:\n4 * 3 = 12 (left: 1 8 12)\n12 - 8 = 4 (left: 1 4)\n4 * 8 = 32 (left: 32)\nAnswer: (1 * (4 * 3)) * 8 = 24",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 2 + 12 = 14",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: 2 * (12 / (12 / 2)) = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6 24)\n6 - 3 = 3 (left: 3 24)\n3 * 24 = 72 (left: 72)\nAnswer: (3 * 8) * (6 - 3) = 24 || Input: 4 5 6 7\nSteps:\n4 + 6 = 10 (left: 5 7 10)\n5 * 7 = 35 (left: 10 35)\n10 - 35 = -25 (left: -25)\n-25 * -1 = 25 (left: 25)\nAnswer: (4 + 6) * (5 * 7) = 25",
                "3 * 12 = 36 (left: 2 36 12) || 12 * 2 = 24 (left: 24 12) || 24 * 12 = 288 (left: 288) || 2 + 8 = 10 (left: 10 64)",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: ((12 / 2) / 12) * 12 = 24 || Input: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 - 3 = 13 (left: 13)\n13 + 5 = 18 (left: 18)\n18 / 3 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: (( || (3 * 7) - 5) + 5 + 3) / 3 * 4 = 24",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: 2 * (12 / (12 / 2)) = 24 || Input: 3 4 5 5\nSteps:\n5 * 4 = 20 (left: 3 5 20)\n5 - 3 = 2 (left: 2 20)\n2 * 20 = 40 (left: 40)\nAnswer: (5 * 4) - (5 - 3) = 24 || Input: 2 3 7 12\nSteps:\n7 + 3 = 10 (left: 2 10 12)\n12 - 10 = 2 (left: 2 2)\n2 * 2 = 4 (left: 4)\n4 * 6 = 24 (left: 24)\nAnswer: ((7 + 3) - (12 - 10)) * 2 = 24 || Input: 1 3 4 8\nSteps:\n4 * 8 = 32 (left: 1 3 32)\n32 - 1 = 31 (left: 3 31)\n31 / 3 = 10.33 (left: 10.33)\n10.33 - 8 = 2.33 (left: 2.33)\n2.33 * 4 = 9.32 (left: 9.32)\n",
                "12 / 2 = 6 (left: 6 12 12) || 12 / 6 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (12 / 2) * 12 = 24"
            ]
        },
        "Input": "2 3 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "86": {
        "puzzle": "1 4 7 12",
        "Step 0": {
            "steps": [
                "7 - 1 = 6 (left: 4 6 12)",
                "4 + 7 = 11 (left: 1 11 12)",
                "12 - 7 = 5 (left: 1 4 5)",
                "12 - 7 = 5 (left: 1 4 5)",
                "7 - 4 = 3 (left: 1 3 12)",
                "12 - 7 = 5 (left: 1 4 5)",
                "7 - 4 = 3 (left: 1 3 12)",
                "7 - 4 = 3 (left: 1 3 12)",
                "7 + 4 = 11 (left: 1 11 ",
                "7 - 4 = 3 (left: 1 3 12)"
            ],
            "Evaluation": [
                60.0,
                21.001,
                3.0,
                2.001,
                60.0,
                2.001,
                40.001,
                60.0,
                0.003,
                41.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.9",
                "2 <- INIT",
                "3 <- 0.6",
                "4 <- 0.0",
                "5 <- 0.1",
                "6 <- 0.9",
                "7 <- INIT",
                "8 <- 0.7",
                "9 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "7 - 1 = 6 (left: 4 6 12) || 6 * 4 = 24 (left: 24 12)",
                "7 - 4 = 3 (left: 1 3 12) || 1 * 3 = 3 (left: 3 12)",
                "12 - 7 = 5 (left: 1 4 5)",
                "7 - 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)",
                "7 - 1 = 6 (left: 4 6 12) || 12 / 4 = 3 (left: 3 6)",
                "4 + 7 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 1 11)",
                "7 - 4 = 3 (left: 1 3 12) || 12 - 1 = 11 (left: 3 11)",
                "12 - 4 = 8 (left: 1 7 ",
                "7 - 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9)",
                "7 - 1 = 6 (left: 4 6 12) || 12 / 4 = 3 (left: 3 6)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                20.002,
                60.0,
                0.001,
                0.002,
                1.002,
                0.001,
                60.0,
                1.0
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.6",
                "2 <- 1.8",
                "3 <- 1.3",
                "4 <- 0.0",
                "5 <- INIT",
                "6 <- 0.6",
                "7 <- 1.2",
                "8 <- 1.3",
                "9 <- 0.4"
            ]
        },
        "Step 2": {
            "steps": [
                "7 - 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "7 - 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)",
                "7 - 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "7 - 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "7 - 1 = 6 (left: 4 6 12) || 6 / 4 = 1.5 (left: 1.5 12)",
                "12 - 7 = 5 (left: 1 5 12)",
                "7 - 4 = 3 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12)",
                "12 - 7 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 4 5)",
                "7 - 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "7 - 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)"
            ],
            "Evaluation": [
                0.001,
                1.002,
                0.0,
                0.002,
                0.001,
                3.0,
                60.0,
                21.001,
                0.002,
                40.0
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 0.9",
                "2 <- 2.9",
                "3 <- 1.3",
                "4 <- 0.1",
                "5 <- 0.0",
                "6 <- 0.6",
                "7 <- 0.4",
                "8 <- 1.8",
                "9 <- 2.9"
            ]
        },
        "Step 3": {
            "steps": [
                "7 - 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "7 - 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)",
                "7 - 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "7 - 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "4 + 7 = 11 (left: 1 11 12) || 12 - 1 = 11 (left: 11 11)",
                "7 - 1 = 6 (left: 4 6 12) || 12 / 4 = 3 (left:",
                "7 - 4 = 3 (left: 1 3 12) || 12 - 1 = 11 (left: 3 11)",
                "7 - 4 = 3 (left: 1 3 12) || 3 + 12 = 15 (left: 1 15)",
                "7 - 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "7 - 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)"
            ],
            "Evaluation": [
                0.001,
                60.0,
                0.002,
                0.0,
                0.003,
                20.002,
                0.002,
                0.002,
                0.001,
                0.002
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 0.0",
                "2 <- 0.0",
                "3 <- 1.8",
                "4 <- 2.9",
                "5 <- 3.5",
                "6 <- 0.4",
                "7 <- 2.6",
                "8 <- 2.7",
                "9 <- 0.4"
            ]
        },
        "Step 4": {
            "steps": [
                "7 - 4 = 3 (left: 1 3 12) || 3 * 1 = 3 (left: 3 12)",
                "7 - 1 = 6 (left: 4 6 12) || 6 + 12 = 18 (left: 4 18)",
                "7 - 1 = 6 (left: 4 6 12) || 4 * 6 = 24 (left: 24 12)",
                "7 - 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "7 - 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "7 - 1 = 6 (left: 4 6 12) || 12 / 4 = 3 (left: || 12 / 3 = 4 (left: 4)",
                "7 - 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)",
                "7 - 4 = 3 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 - 7 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 4 5) || 4 * 5 = 20 (left: 20)",
                "7 - 4 = 3 (left: 1 3 12) || 3 + 1 = 4 (left: 4 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.001,
                0.003,
                0.001,
                60.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 2.6",
                "2 <- 1.2",
                "3 <- INIT",
                "4 <- 4.6",
                "5 <- 2.9",
                "6 <- 0.7",
                "7 <- 2.6",
                "8 <- 0.7",
                "9 <- 2.7"
            ]
        },
        "Step 5": {
            "steps": [
                "7 - 4 = 3 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "7 - 4 = 3 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "12 - 7 = 5 (left: 1 4 5) || Possible",
                "7 - 4 = 3 (left: 1 3 12)",
                "7 - 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "7 - 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 + 4 = 5",
                "7 - 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9)",
                "7 - 4 = 3 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "7 - 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)",
                "12 - 7 = 5 (left: 1 4 5) || 5 / 1 = 5 (left: 4 5) || 5 / 4 = 1.25 (left: 1.25)"
            ],
            "Evaluation": [
                0.001,
                60.0,
                0.003,
                40.0,
                0.002,
                0.003,
                60.0,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 4.6",
                "2 <- 3.1",
                "3 <- 5.8",
                "4 <- 5.6",
                "5 <- 5.8",
                "6 <- 5.1",
                "7 <- 0.7",
                "8 <- 4.6",
                "9 <- 4.6"
            ]
        },
        "Step 6": {
            "steps": [
                "7 - 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36)",
                "7 - 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "7 - 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "7 - 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "7 - 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 / 1 = 9 (left: 9)",
                "7 - 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "7 - 4 = 3 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 + (7 - 4)) * 12 = 24",
                "7 - 4 = 3 (left: 1 3 12) || 12 - 1 = 11 (left: 3 11)",
                "7 - 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "7 - 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)"
            ],
            "Evaluation": [
                60.0,
                0.0,
                0.001,
                0.003,
                0.0,
                0.001,
                60.0,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 6.0",
                "1 <- 6.0",
                "2 <- 5.1",
                "3 <- 5.8",
                "4 <- 5.8",
                "5 <- 4.6",
                "6 <- 5.3",
                "7 <- 5.6",
                "8 <- 1.8",
                "9 <- 6.6"
            ]
        },
        "Step 7": {
            "steps": [
                "7 - 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 / 1 = 36 (left: 36)",
                "7 - 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "7 - 4 = 3 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 + (7 - 4)) * 12 = 24",
                "7 - 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "7 - 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "7 - 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "7 - 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4)",
                "7 - 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "7 - 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "7 - 4 = 3 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 + (7 - 4)) * 12 = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n3 * 6 = 18 (left: 18)\nAnswer: 3 * (3 * 8) = 24"
            ],
            "Evaluation": [
                60.0,
                0.003,
                60.0,
                20.001,
                0.002,
                0.002,
                21.0,
                0.0,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 7.0",
                "1 <- 0.0",
                "2 <- 0.6",
                "3 <- 7.0",
                "4 <- 6.0",
                "5 <- 6.0",
                "6 <- 0.1",
                "7 <- 7.0",
                "8 <- 2.6",
                "9 <- 6.0"
            ]
        },
        "Step 8": {
            "steps": [
                "7 - 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 / 1 = 36 (left: 36) || 36 cannot be broken down further as it is already a single number.",
                "7 - 1 = 6 (left: 4 6 12) || 6 + 4 = 10 (left: 10 12)",
                "7 - 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9)",
                "7 - 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 / 1 = 36 (left: 36) || 36 / 2 = 18",
                "7 - 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36)",
                "7 - 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 - 1 = 35 (left: 35)",
                "4 + 7 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "7 - 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 / 1 = 36 (left: 36) || There are no possible next steps with only one number provided.",
                "7 - 4 = 3 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "7 - 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 36 - 1 = 35 (left: 35)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                0.003,
                60.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 8.2",
                "1 <- 8.2",
                "2 <- 8.2",
                "3 <- 8.4",
                "4 <- 8.2",
                "5 <- 7.2",
                "6 <- 4.6",
                "7 <- 8.2",
                "8 <- 0.0",
                "9 <- 6.6"
            ]
        },
        "Step 9": {
            "steps": [
                "7 - 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "7 - 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 9 - 1 = 8 (left: 8)",
                "7 - 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "7 - 4 = 3 (left: 1 3 12) || 3 * 12 = 36 (left: 1 36) || 1 * 36 = 36 (left: 36) || No more possible next steps as there is only one number left.",
                "7 - 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "7 - 4 = 3 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 + (7 - 4)) * 12 = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n3 * 6 = 18 (left: 18)\nAnswer: 3 * (3 * 8) = 24",
                "7 - 4 = 3 (left: 1 3 12) || 12 / 3 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "7 - 4 = 3 (left: 1 3 12) || 12 - 3 = 9 (left: 1 9) || 1 * 9 = 9 (left: 9)",
                "7 - 1 = 6 (left: 4 6 12) || 6 / 4 = 1.5 (left: 1.5 12)",
                "7 - 4 = 3 (left: 1 3 12) || 3 - 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 + (7 - 4)) * 12 = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24"
            ]
        },
        "Input": "1 4 7 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "87": {
        "puzzle": "8 8 11 13",
        "Step 0": {
            "steps": [
                "13 - 11 = 2 (left: 8 2 13)",
                "8 * 8 = 64 (left: 11 13 64)",
                "8 * 8 = 64 (left: 64 11 13)",
                "8 * 8 = 64 (left: 11 13 64)",
                "8 - 8 = 0 (left: 11 13 0)",
                "8 - 8 = 0 (left: 0 11 13)",
                "8 * 8 = 64 (left: 64 11 13)",
                "8 / 8 = 1 (left: 11 13 1)",
                "13 - 11 = 2 (left: 8 2 ",
                "11 + 8 = 19 (left: 8 13 19)"
            ],
            "Evaluation": [
                1.002,
                3.0,
                1.002,
                2.001,
                60.0,
                40.0,
                1.001,
                3.0,
                0.002,
                1.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.5",
                "2 <- INIT",
                "3 <- 0.5",
                "4 <- 0.1",
                "5 <- 0.4",
                "6 <- 0.3",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 0.4"
            ]
        },
        "Step 1": {
            "steps": [
                "8 / 8 = 1 (left: 1 11 13)",
                "8 - 8 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2)",
                "8 * 8 = 64 (left: 11 13 64)",
                "8 - 8 = 0 (left: 0 11 13) || 13 / 11 = 1.18181818182 (left: 0 1.18181818182)",
                "8 * 8 = 64 (left: 11 13 64) || 64 / 11 = 5.818181818181818 (left: 5.818181818181818)",
                "8 - 8 = 0 (left: 11 13 0) || Possible next",
                "8 * 8 = 64 (left: 11 13 64) || 11 * 13 = 143 (left: 143 64)",
                "11 * 13 = 143 (left: 8 143)",
                "11 + 8 = 19 (left: 8 13 19)",
                "8 - 8 = 0 (left: 11 13 0) || 13 / 11 = 1.181818182 (left: 1.181818182 0)"
            ],
            "Evaluation": [
                0.003,
                20.002,
                2.001,
                2.001,
                0.003,
                0.003,
                1.002,
                0.002,
                1.001,
                1.002
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.4",
                "2 <- 0.5",
                "3 <- 1.1",
                "4 <- 0.4",
                "5 <- 0.7",
                "6 <- 0.4",
                "7 <- 0.4",
                "8 <- 0.5",
                "9 <- 0.5"
            ]
        },
        "Step 2": {
            "steps": [
                "13 - 11 = 2 (left: 8 2 13) || 8 * 2 = 16 (left: 16 13)",
                "8 - 8 = 0 (left: 11 13 0) || 11 - 13 = -2 (left: -2 0)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 13 = -2 (left: -2 11 13)",
                "8 - 8 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 2 / 0 is undefined",
                "8 - 8 = 0 (left: 11 13 0) || 11 - 13 = -2 (left: -2 0)",
                "8 / 8 = 1 (left: 11 13 1) || 13 - 1 = ",
                "8 - 8 = 0 (left: 11 13 0) || 11 * 13 = 143 (left: 0 143)",
                "8 - 8 = 0 (left: 11 13 0) || Input: 3 9 27 0",
                "8 - 8 = 0 (left: 0 11 13) || 0 * 11 = 0 (left: 0 13)",
                "8 - 8 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                21.001,
                0.003,
                20.002,
                0.003,
                0.001,
                0.003,
                0.002,
                40.001
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 0.4",
                "2 <- 1.3",
                "3 <- 2.4",
                "4 <- 0.4",
                "5 <- INIT",
                "6 <- 2.9",
                "7 <- 2.2",
                "8 <- INIT",
                "9 <- 0.5"
            ]
        },
        "Step 3": {
            "steps": [
                "8 - 8 = 0 (left: 11 13 0) || 11 - 13 = -2 (left: -2 0) || -2 - 0 = -2 (left: 0)",
                "8 - 8 = 0 (left: 11 13 0) || 3 +",
                "8 - 8 = 0 (left: 0 11 13) || 13 / 11 = 1.18181818182 (left: 0 1.18181818182) || 1.18181818182 / 0 = undefined",
                "8 - 8 = 0 (left: 11 13 0) || 11 - 13 = -2 (left: -2 0) || 0 / -2 = 0 (left: 0)",
                "8 - 8 = 0 (left: 11 13 0) || 13 / 11 = 1.18181818182 (left: 1 0)",
                "8 - 8 = 0 (left: 0 11 13)",
                "8 - 8 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 0 * 2 = 0 (left: 0)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 13 = -2 (left: -2 11 13) || 13 - 11 = 2 (left: -2 2)",
                "11 + 8 = 19 (left: 8 13 19)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 13 = -2 (left: -2 11)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                20.002,
                60.0,
                0.003,
                0.002,
                2.0,
                0.002
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 3.4",
                "2 <- 1.2",
                "3 <- 3.5",
                "4 <- 0.5",
                "5 <- 2.9",
                "6 <- 3.5",
                "7 <- 3.4",
                "8 <- 2.9",
                "9 <- 2.9"
            ]
        },
        "Step 4": {
            "steps": [
                "8 - 8 = 0 (left: 11 13 0) || 11 - 13 = -2 (left: -2 0) || -2 + 0 = -2 (left: 0)",
                "8 - 8 = 0 (left: 11 13 0) || 13 / 11 = 1.18181818182 (left: 1 0) || 5 - 3 = 2 (left: 2)",
                "8 * 8 = 64 (left: 11 13 64) || 13 + 64 = 77 (left: 11 77)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13)",
                "8 - 8 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2)",
                "8 - 8 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 2 * 0 = 0 (left: 0)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13)",
                "8 - 8 = 0 (left: 11 13 0) || 13 / 11 = 1.18181818182 (left: 1 0) || Input: 5 3",
                "8 - 8 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 2 - 0 = 2 (left: 2)",
                "8 - 8 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 0 + 2 = 2"
            ],
            "Evaluation": [
                20.0,
                0.001,
                0.002,
                60.0,
                20.002,
                0.003,
                60.0,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 0.5",
                "2 <- 2.4",
                "3 <- 4.3",
                "4 <- 3.5",
                "5 <- 4.3",
                "6 <- 3.5",
                "7 <- 3.5",
                "8 <- 0.4",
                "9 <- 4.6"
            ]
        },
        "Step 5": {
            "steps": [
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "8 - 8 = 0 (left: 0 11 13) || 11 * 13 = 143 (left: 0 143)",
                "8 - 8 = 0 (left: 11 13 0) || 11 - 13 = -2 (left: -2 0) || -2 / 0 = undefined (left: -2 0)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "8 - 8 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 \u2248 0.846 (left: 0.846)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13)",
                "8 - 8 = 0 (left: 0 11 13) || 11 / 0 = undefined",
                "8 - 8 = 0 (left: 11 13 0) || 11 * 13 = 143 (left: 0 143)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.846 (left: 0.846)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                40.001,
                0.003,
                41.0,
                0.002,
                60.0,
                0.003,
                1.001,
                0.003
            ],
            "Resampling": [
                "0 <- 5.2",
                "1 <- 4.3",
                "2 <- 5.6",
                "3 <- 4.3",
                "4 <- 3.5",
                "5 <- 0.4",
                "6 <- 4.6",
                "7 <- 5.6",
                "8 <- 3.5",
                "9 <- 4.6"
            ]
        },
        "Step 6": {
            "steps": [
                "8 - 8 = 0 (left: 11 13 0) || 11 - 13 = -2 (left: -2 0) || -2 / 0 = undefined (left: -2 0) || -2 - 0 = -2 (left: -2)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.846 (left: 0.846)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.8461538461538461 (left: 0.8461538461538461)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "8 - 8 = 0 (left: 0 11 13) || 11 * 13 = 143 (left: 0 143)",
                "8 - 8 = 0 (left: 11 13 0) || 11 / 13 = 0.84615384615385 (left: 0.84615384615385 0)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 13 - 11 = 2 (left: 2)",
                "8 - 8 = 0 (left: 0 11 13) || 0 * 11 = 0 (left: 0 13)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 + 13 = 24"
            ],
            "Evaluation": [
                0.0,
                0.003,
                0.001,
                0.002,
                0.001,
                2.0,
                0.003,
                0.002,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 3.5",
                "2 <- 5.4",
                "3 <- 5.6",
                "4 <- 4.3",
                "5 <- 4.4",
                "6 <- 5.6",
                "7 <- 4.4",
                "8 <- 4.4",
                "9 <- 3.5"
            ]
        },
        "Step 7": {
            "steps": [
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "8 - 8 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2)",
                "8 - 8 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 2 / 0 = undefined",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 13 - 11 = 2 (left: 2)",
                "8 - 8 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 0 / 2 = 0 (left: 0)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "8 - 8 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || There are no possible next steps with the input 0 2.",
                "8 - 8 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 0 + 2 = 2",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13)"
            ],
            "Evaluation": [
                0.003,
                60.0,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 5.6",
                "2 <- 7.9",
                "3 <- 5.4",
                "4 <- 0.5",
                "5 <- 7.9",
                "6 <- 7.1",
                "7 <- 7.9",
                "8 <- 7.9",
                "9 <- 6.5"
            ]
        },
        "Step 8": {
            "steps": [
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 5 /",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.8461538461538461 (left: 0.8461538461538461)",
                "8 - 8 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 0 + 2 = 2 (left: 2)",
                "8 - 8 = 0 (left: 0 11 13) || 11 * 13 = 143 (left: 0 143)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.846 (left: 0.846)",
                "8 - 8 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 2 / 0 = undefined (left: 2)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 13 - 11 = 2 (left: 2)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "8 - 8 = 0 (left: 11 13 0) || 11 / 13 = 0.84615384615385 (left: 0.84615384615385 0) || 0.84615384615385 / 0 = undefined (division by zero)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                0.001,
                0.002,
                1.0,
                0.003,
                0.001,
                0.001,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 7.1",
                "1 <- 7.9",
                "2 <- 7.1",
                "3 <- 7.9",
                "4 <- 7.9",
                "5 <- 5.4",
                "6 <- 5.6",
                "7 <- 7.9",
                "8 <- 7.1",
                "9 <- 2.2"
            ]
        },
        "Step 9": {
            "steps": [
                "8 - 8 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 0 - 2 = -2 (left: -2)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.846 (left: 0.846)",
                "8 - 8 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 0 + 2 = 2",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 13 / 11 = 1.18181818182 (left: 1.18181818182)",
                "8 - 8 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 2 / 0 = undefined (left: 0)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "8 - 8 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || Input: 5 5",
                "8 - 8 = 0 (left: 0 11 13) || 11 - 13 = -2 (left: -2 11 13) || 11 / -2 = -5.5 (left: -5.5 13)"
            ]
        },
        "Input": "8 8 11 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "88": {
        "puzzle": "1 3 3 4",
        "Step 0": {
            "steps": [
                "4 - 3 = 1 (left: 1 3 4)",
                "3 - 1 = 2 (left: 2 3 4)",
                "3 - 1 = 2 (left: 2 3 4)",
                "4 - 1 = 3 (left: 3 3 3)",
                "4 - 3 = 1 (left: 1 3 4)",
                "3 * 3 = 9 (left: 1 9 4)",
                "4 - 1",
                "3 / 1 = 3 (left: 3 3 4)",
                "4 / 1 = 4 (left: 3 3 ",
                "4 + 1 = 5 (left: 3 3 5)"
            ],
            "Evaluation": [
                1.001,
                60.0,
                60.0,
                0.003,
                2.001,
                40.001,
                0.003,
                0.003,
                0.001,
                3.0
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.1",
                "2 <- 0.2",
                "3 <- INIT",
                "4 <- 0.2",
                "5 <- INIT",
                "6 <- 0.2",
                "7 <- 0.1",
                "8 <- INIT",
                "9 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "3 - 1 = 2 (left: 2 3 4) || 3 + 4 = 7 (left: 2 7)",
                "3 - 1 = 2 (left: 2 3 4) || Possible",
                "3 - 1 = 2 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12)",
                "3 + 1 = 4 (left: 4 3 4)",
                "3 - 1 = 2 (left: 2 3 4) || Input: 5 6 7",
                "",
                "3 - 1 = 2 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6)",
                "3 - 1 = 2 (left: 2 3 4) || 4 - 3 = 1 (left: 2 1)",
                "3 / 3 = 1 (left: 1 1 4)",
                "3 * 3 = 9 (left: 1 9 4) || 1 * 9 = 9 (left: 9 4)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                60.0,
                0.003,
                0.003,
                40.001,
                60.0,
                0.002,
                1.002,
                40.001
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 1.9",
                "2 <- 0.1",
                "3 <- 1.6",
                "4 <- 0.1",
                "5 <- 1.6",
                "6 <- 0.2",
                "7 <- INIT",
                "8 <- 1.2",
                "9 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                " || There are no more possible next steps.",
                "3 * 3 = 9 (left: 1 9 4) || 1 * 9 = 9 (left: 9 4) || 9 / 4 = 2.25 (left: 2.25)",
                "3 - 1 = 2 (left: 2 3 4) || Possible",
                "3 - 1 = 2 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "3 - 1 = 2 (left: 2 3 4) || 4 / 2 = 2 (left: 2 3)",
                "3 - 1 = 2 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "3 - 1 = 2 (left: 2 3 4) || 4 - 2 = 2 (left: 2)",
                "4 / 1 = 4 (left: 3 4 4)",
                "3 - 1 = 2 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "3 - 1 = 2 (left: 2 3 4) || Input: 5 6 7"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                60.0,
                0.003,
                0.001,
                0.002,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.3",
                "1 <- 2.3",
                "2 <- 2.3",
                "3 <- 0.2",
                "4 <- 0.1",
                "5 <- 2.8",
                "6 <- 2.3",
                "7 <- 0.1",
                "8 <- 1.6",
                "9 <- 0.2"
            ]
        },
        "Step 3": {
            "steps": [
                "3 - 1 = 2 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (3 - 1) * 3 * 4 = 24",
                "3 - 1 = 2 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (3 - 1) * (3 * 4) = 24",
                "3 - 1 = 2 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (3 - 1) * (3 * 4) = 24",
                "3 - 1 = 2 (left: 2 3 4) || 4 / 2 = 2 (left: 2 2)",
                "3 - 1 = 2 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12)",
                "3 - 1 = 2 (left: 2 3 4) || 3 * 4 = 12 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (3 - 1) * (3 * 4) = 24",
                "3 - 1 = 2 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (3 * (3 - 1)) = 24",
                "3 - 1 = 2 (left: 2 3 4) || 4 / 2 = 2 (left: 2 2)",
                "3 - 1 = 2 (left: 2 3 4) || 2 * 3 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "3 - 1 = 2 (left: 2 3 4) || 4 / 2 = 2 (left: 2 2)"
            ]
        },
        "Input": "1 3 3 4",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "89": {
        "puzzle": "1 8 8 12",
        "Step 0": {
            "steps": [
                "12 - 8 = 4 (left: 4 8 8)",
                "8 / 1 = 8 (left: 8 8 12)",
                "1 * 8 = 8 (left: 8 8 12)",
                "8 - 1 = 7 (left: 7 8 12)",
                "12 - 1 = 11 (left: 8 8 11)",
                "1 * 8 = 8 (left: 8 8 12)",
                "1 * 8 = 8 (left: 8 8 12)",
                "12 - 8 = 4 (left: 1 8 4)",
                "12 - 8 = 4 (left: 4 8 ",
                "12 - 1 = 11 (left: 8 8 11)"
            ],
            "Evaluation": [
                22.0,
                1.002,
                1.002,
                2.001,
                21.001,
                1.002,
                21.001,
                2.001,
                0.002,
                22.0
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- INIT",
                "2 <- 0.4",
                "3 <- 0.9",
                "4 <- 0.0",
                "5 <- 0.4",
                "6 <- INIT",
                "7 <- 0.6",
                "8 <- INIT",
                "9 <- 0.9"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 8 = 8 (left: 8 8 12) || 8 * 8 = 64 (left: 64 12)",
                "1 * 8 = 8 (left: 8 8 12)",
                "12 - 1 = 11 (left: 8 8 11) || 8 / 8 = 1 (left: 1 11)",
                "12 - 1 = 11 (left: 8 8 11) || 8 - 8 = 0 (left: 0 11)",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32)",
                "12 - 1 = 11 (left: 8 8 11) || 11 / 8 = 1 (left: 1",
                "12 - 8 = 4 (left: 4 8 8)",
                "1 * 8 = 8 (left: 8 8 12) || 12 / 8 = 1.5 (left: 1.5 8)",
                "12 - 1 = 11 (left: 8 8 11)",
                "12 - 1 = 11 (left: 8 8 11) || 11 - 8 = 3 (left: 8 3)"
            ],
            "Evaluation": [
                1.002,
                3.0,
                20.0,
                0.001,
                60.0,
                0.003,
                22.0,
                0.001,
                60.0,
                40.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.8",
                "2 <- 1.8",
                "3 <- 0.6",
                "4 <- 1.6",
                "5 <- 0.9",
                "6 <- 1.9",
                "7 <- 1.8",
                "8 <- 1.9",
                "9 <- 0.9"
            ]
        },
        "Step 2": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 12)",
                "12 - 1 = 11 (left: 8 8 11) || 8 - 8 = 0 (left: 0 11)",
                "12 - 1 = 11 (left: 8 8 11) || 8 / 8 = 1 (left: 1 11)",
                "1 * 8 = 8 (left: 8 8 12) || 8 - 8 = 0 (left: 0 12)",
                "12 - 8 = 4 (left: 4 8 8) || 8 / 4 = 2 (left: 2 8 8)",
                "12 - 1 = 11 (left: 8 8 11) || 8 - 11 = -3 (left: -3",
                "12 - 1 = 11 (left: 8 8 11) || 11 - 8 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24)",
                "12 - 1 = 11 (left: 8 8 11) || 11 / 8 = 1.375 (left: 8 1.375)",
                "12 - 1 = 11 (left: 8 8 11) || 11 - 8 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24)",
                "12 - 1 = 11 (left: 8 8 11) || 8 - 8 = 0 (left: 0 11)"
            ],
            "Evaluation": [
                2.001,
                20.0,
                40.0,
                40.001,
                0.003,
                0.002,
                40.0,
                1.001,
                60.0,
                0.0
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 2.8",
                "2 <- 1.8",
                "3 <- 1.4",
                "4 <- 1.9",
                "5 <- 0.9",
                "6 <- 0.4",
                "7 <- 1.9",
                "8 <- 1.8",
                "9 <- 2.3"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 1 = 11 (left: 8 8 11) || 8 - 8 = 0 (left: 0 11)",
                "12 - 1 = 11 (left: 8 8 11) || 11 - 8 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (12 - (8 - 1)) = 24",
                "12 - 1 = 11 (left: 8 8 11) || 8 - 8 = 0 (left: 0 11)",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 8 + 32 = 40 (left: 40)",
                "12 - 1 = 11 (left: 8 8 11) || 11 - 8 = 3 (left: 8 3) || 8 / 3 = 2.67 (left: 2.67)",
                "12 - 1 = 11 (left: 8 8 11) || 11 * 8 = 88 (",
                "12 - 1 = 11 (left: 8 8 11) || 8 / 8 = 1 (left: 1 11)",
                "12 - 1 = 11 (left: 8 8 11) || 11 - 8 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24)",
                "12 - 1 = 11 (left: 8 8 11) || 8 - 8 = 0 (left: 0 11)",
                "1 * 8 = 8 (left: 8 8 12) || 8 - 8 = 0 (left: 0 12) || 12 - 0 = 12 (left: 12)"
            ],
            "Evaluation": [
                0.0,
                60.0,
                20.0,
                0.003,
                0.003,
                0.003,
                20.0,
                40.0,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 3.7",
                "1 <- 2.2",
                "2 <- 1.8",
                "3 <- 3.7",
                "4 <- 2.6",
                "5 <- 3.6",
                "6 <- 3.7",
                "7 <- 1.4",
                "8 <- 2.2",
                "9 <- 3.1"
            ]
        },
        "Step 4": {
            "steps": [
                "12 - 1 = 11 (left: 8 8 11) || 11 - 8 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (12 - (8 - 1)) = 24",
                "12 - 1 = 11 (left: 8 8 11) || 8 / 8 = 1 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "12 - 1 = 11 (left: 8 8 11) || 8 - 8 = 0 (left: 0 11)",
                "12 - 1 = 11 (left: 8 8 11) || 11 - 8 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: (12 - 1) * (8 - 8) = 24",
                "12 - 1 = 11 (left: 8 8 11) || 11 - 8 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (12 - 1) / 8 = 24",
                "12 - 1 = 11 (left: 8 8 11) || 8 / 8 = 1 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "12 - 1 = 11 (left: 8 8 11) || 11 - 8 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (12 - 1) / 8 = 24",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 8 + 32 = 40 (left: 40)",
                "12 - 1 = 11 (left: 8 8 11) || 8 / 8 = 1 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 - 1 = 11 (left: 8 8 11) || 11 - 8 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (12 - (8 - 1)) = 24 || Input: 3 3 4 7\nSteps:\n3 + 4 = 7 (left: 3 7 7)\n7 - 3 = 4 (left: 4 7)\n4 * 7 = 28 (left: 28)\nAnswer: (3 + 4) * (7 - 3) = 24"
            ],
            "Evaluation": [
                60.0,
                0.003,
                1.0,
                20.002,
                60.0,
                0.001,
                60.0,
                0.003,
                0.001,
                60.0
            ],
            "Resampling": [
                "0 <- 2.6",
                "1 <- 3.7",
                "2 <- 4.4",
                "3 <- 3.6",
                "4 <- 2.1",
                "5 <- 4.6",
                "6 <- 4.3",
                "7 <- 1.4",
                "8 <- 1.8",
                "9 <- 4.6"
            ]
        },
        "Step 5": {
            "steps": [
                "12 - 1 = 11 (left: 8 8 11) || 11 - 8 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: ((12 - 1) - 8) * 8 = 24",
                "12 - 1 = 11 (left: 8 8 11) || 11 - 8 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (12 - 1) / 8 = 24",
                "12 - 1 = 11 (left: 8 8 11) || 11 - 8 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (12 - 1) / 8 = 24 || Input: 3 5 6 9\nSteps:\n5 * 6 = 30 (left: 3 9 30)\n30 - 9 = 21 (left: 3 21)\n21 - 3 = 18 (left: 18)\nAnswer: ((5 * 6) - 9) - 3 = 24",
                "12 - 1 = 11 (left: 8 8 11) || 8 / 8 = 1 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "12 - 1 = 11 (left: 8 8 11) || 8 - 8 = 0 (left: 0 11) || 11 * 0 = 0 (left: 11)",
                "12 - 1 = 11 (left: 8 8 11) || 11 - 8 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (12 - 1) / 8 = 24 || Input: 3 3 6 7\nSteps:\n3 * 7 = 21 (left: 3 6 21)\n21 - 6 = 15 (left: 3 15)\n15 + 3 = 18 (left: 18)\n18 / 3 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((3 * 7) - 6) + 3 *",
                "12 - 1 = 11 (left: 8 8 11) || 11 - 8 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: (12 - 1) * (8 - 8) = 24 || Input: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n1 * 9 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 - 3 = 24 (left: 24)\nAnswer: ((3 * 3) - 8) * 9 -",
                "12 - 8 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || 8 + 32 = 40 (left: 8 40)",
                "12 - 1 = 11 (left: 8 8 11) || 8 / 8 = 1 (left: 1 8 11)",
                "12 - 1 = 11 (left: 8 8 11) || 11 - 8 = 3 (left: 8 3) || 8 * 3 = 24 (left: 24) || Answer: 8 * (12 - 1) / 8 = 24 || Input: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n6 - 3 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 24 = 24 (left: 24)\nAnswer: ((3 * 8) / 3) * 6 = 24"
            ]
        },
        "Input": "1 8 8 12",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "90": {
        "puzzle": "3 7 8 8",
        "Step 0": {
            "steps": [
                "8 / 3 = 2.6666666666666665 (left: 2.6666666666666665 7 8)",
                "7 - 3 = 4 (left: 4 8 8)",
                "3 * 7 = 21 (left: 8 8 21)",
                "3 * 7 = 21 (left: 8 8 21)",
                "8 / 3 \u2248 2.6667 (left: 2.6667 8 8)",
                "3 * 7 = 21 (left: 8 8 21)",
                "3 * 7 = 21 (left: 8 8 21)",
                "8 + 3 = 11 (left: 7 8 11)",
                "8 - 3 = 5 (left: 5 8 ",
                "8 + 3 = 11 (left: 7 8 11)"
            ],
            "Evaluation": [
                3.0,
                41.0,
                1.002,
                2.001,
                3.0,
                1.002,
                1.002,
                2.0,
                1.002,
                3.0
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 0.3",
                "6 <- 0.7",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "7 - 3 = 4 (left: 4 8 8)",
                "8 - 3 = 5 (left: 5 7 8)",
                "3 * 7 = 21 (left: 8 8 21)",
                "8 + 3 = 11 (left: 7 8 11)",
                "3 * 7 = 21 (left: 8 8 21)",
                "3 * 7 = 21 (left: 8 8 21) || Possible next steps:",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8)",
                "8 - 3 = 5 (left: ",
                "8 + 3 = 11 (left: 7 8 11)",
                "3 * 7 = 21 (left: 8 8 21)"
            ],
            "Evaluation": [
                21.0,
                3.0,
                1.002,
                2.001,
                1.002,
                0.003,
                60.0,
                0.0,
                3.0,
                1.002
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- INIT",
                "2 <- 1.3",
                "3 <- INIT",
                "4 <- 0.4",
                "5 <- 1.6",
                "6 <- 1.0",
                "7 <- 1.6",
                "8 <- INIT",
                "9 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "3 * 7 = 21 (left: 8 8 21)",
                "8 + 3 = 11 (left: 7 8 11) || 7 * 8 = 56 (left: 11 56)",
                "8 + 3 = 11 (left: 7 8 11)",
                "8 / 3 \u2248 2.6667 (left: 2.6667 8 8) || 2.6667 * 8 = 21.334 (left: 8 21.334)",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 8 / 3 = 2.6667 (left: 2.6667)",
                "7 - 3 = 4 (left: 4 8 8) || 8 / 4 = 2 (left: 2 8 8)",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 + 3 = 11 (left: 7 8 11)",
                "7 - 3 = 4 (left: 4 8 8) || 8 / 4 = 2 (left: 2 8 8)"
            ],
            "Evaluation": [
                0.003,
                2.001,
                0.003,
                1.002,
                3.0,
                0.003,
                1.001,
                60.0,
                3.0,
                3.0
            ],
            "Resampling": [
                "0 <- 1.6",
                "1 <- 1.8",
                "2 <- 1.6",
                "3 <- 2.7",
                "4 <- 1.6",
                "5 <- 2.7",
                "6 <- INIT",
                "7 <- 2.7",
                "8 <- INIT",
                "9 <- 1.0"
            ]
        },
        "Step 3": {
            "steps": [
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 + 3 = 11 (left: 7 8 11) || 7 * 8 = 56 (left: 56 11)",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 5 + 10 = 15 (left: 15)",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24",
                "8 + 3 = 11 (left: 7 8 11)",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24",
                "8 + 3 = 11 (left: 7 8 11)",
                "7 - 3 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                0.002,
                60.0,
                0.003,
                40.001,
                3.0,
                60.0,
                2.0,
                40.001
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 2.7",
                "2 <- 1.0",
                "3 <- 1.6",
                "4 <- 3.0",
                "5 <- 1.6",
                "6 <- 1.6",
                "7 <- 3.9",
                "8 <- 3.3",
                "9 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "7 - 3 = 4 (left: 4 8 8) || 8 * 4 = 32 (left: 8 8 32)",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24",
                "7 - 3 = 4 (left: 4 8 8) || 8 / 4 = 2 (left: 2 8)",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 4 + 6 = 10 (left: 10 9)",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "7 - 3 = 4 (left: 4 8 8) || 4 * 8 = 32 (left: 8 32) || Input: 5 25",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n4 * 3 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (2 * 6) + (4 * 3) = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24"
            ],
            "Evaluation": [
                2.0,
                60.0,
                0.002,
                60.0,
                60.0,
                0.003,
                60.0,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 4.1",
                "1 <- 3.3",
                "2 <- 4.8",
                "3 <- 3.5",
                "4 <- 4.4",
                "5 <- 4.4",
                "6 <- 4.6",
                "7 <- 4.8",
                "8 <- 4.3",
                "9 <- 3.3"
            ]
        },
        "Step 5": {
            "steps": [
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 4 6\nSteps:\n6 * 4 = 24 (left: 2 3 24)\n3 * 2 = 6 (left: 6 24)\n6 * 24 = 24\nAnswer: 6 * (4 * 2) = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 4 8\nSteps:\n2 * 4 = 8 (left: 3 8 8)\n8 - 3 = 5 (left: 5 8)\n5 * 8 = 40 (left: 40)\nAnswer: (2 * 4) * (8 - 3) = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n4 * 3 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (2 * 6) + (4 * 3) = 24 || Input: 1 2 3 4\nSteps:\n3 + 4 = 7 (left: 1 2 7)\n2 * 7 = 14 (left: 1 14)\n14 - 1 = 13 (left: 13)\n13 + 1 = 14 (left: 14)\n14 * 2 = 28 (left: 28)\n28 - 14 = 14 (left: 14)\n14 / ",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 5 6\nSteps:\n2 * 6 = 12 (left: 3 5 12)\n3 + 5 = 8 (left: 8 12)\n8 * 12 = 96 (left: 96)\nAnswer: (2 * 6) * (3 + 5) = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n4 - 3 = 1 (left: 1 12)\n1 * 12 = 12 (left: 12)\nAnswer: (2 * 6) + (4 - 3) = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 6 8\nSteps:\n6 * 3 = 18 (left: 2 8 18)\n18 - 8 = 10 (left: 2 10)\n2 * 10 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((6 * 3) - 8) + 4 = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n4 * 3 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (2 * 6) + (4 * 3) = 24 || Input: 2 2 6 8\nSteps:\n2 * 8 = 16 (left: 2 6 16)\n2 * 6 = 12 (left: 12 16)\n16 - 12 = 4 (left: 4 12)\n4 * 6 = 24 (left: 24)\nAnswer: (2 * 8) - (2 * 6) + (4 * 6) = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n8 * 3 = 24 (left: 24)\nAnswer: (2 * 6) * (12 - 4) = 24"
            ],
            "Evaluation": [
                60.0,
                40.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                40.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 3.5",
                "1 <- 4.6",
                "2 <- 3.3",
                "3 <- 5.0",
                "4 <- 4.1",
                "5 <- 4.1",
                "6 <- 5.5",
                "7 <- 5.1",
                "8 <- 4.8",
                "9 <- 5.0"
            ]
        },
        "Step 6": {
            "steps": [
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 6 6 6 6\nSteps:\n6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 / 12 = 3 (left: 3)\n3 * 6 = 18 (left: 18)\n18 / 6 = 3 (left: 3)\n3 * 6 = 18 (left: 18)\n18 / ",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 3 6 7 9\nSteps:\n6 + 9 = 15 (left: 3 7 15)\n15 - 7 = 8 (left: 3 8)\n8 * 3 = 24 (left: 24)\nAnswer: (6 + 9) * (7 - 3) = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 4 6\nSteps:\n6 * 4 = 24 (left: 2 3 24)\n3 * 2 = 6 (left: 6 24)\n6 * 24 = 24\nAnswer: 6 * (4 * 2) = 24 || Input: 1 3 5 7\nSteps:\n5 + 7 = 12 (left: 1 3 12)\n12 - 3 = 9 (left: 1 9)\n9 * 1 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 - 24 = 3\nAnswer: ((5 + 7) - 3) * 3 = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 6 = 24 (left: 24)\nAnswer: (3 * 4) * (6 - 2) = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 3 6 7 9\nSteps:\n3 * 7 = 21 (left: 6 9 21)\n6 + 9 = 15 (left: 15 21)\n15 + 21 = 36 (left: 36)\nAnswer: (3 * 7) + (6 + 9) = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 6 8\nSteps:\n6 * 3 = 18 (left: 2 8 18)\n18 - 8 = 10 (left: 2 10)\n2 * 10 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((6 * 3) - 8) + 4 = 24 || Input: 1 3 4 9\nSteps:\n1 * 9 = 9 (left: 3 4 9)\n4 - 3 = 1 (left: 1 9)\n1 * 9 = 9 (left: 9)\n9 * 4 = 36 (left: 36)\n36 / 4 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 - ",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 4 8\nSteps:\n2 * 4 = 8 (left: 3 8 8)\n8 - 3 = 5 (left: 5 8)\n5 * 8 = 40 (left: 40)\nAnswer: (2 * 4) * (8 - 3) = 24 || Input: 1 3 5 8\nSteps:\n1 * 5 = 5 (left: 3 8 5)\n5 - 3 = 2 (left: 2 8)\n2 * 8 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((1 * 5) - 3) * 8 = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n4 * 3 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (2 * 6) + (4 * 3) = 24 || Input: 2 4 5 6\nSteps:\n4 * 6 = 24 (left: 2 5 24)\n2 + 5 = 7 (left: 7 24)\n7 * 24 = 168 (left: 168)\nAnswer: (4 * 6) + (2 + 5) = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 4 6\nSteps:\n6 * 4 = 24 (left: 2 3 24)\n3 * 2 = 6 (left: 6 24)\n6 * 24 = 24\nAnswer: 6 * (4 * 2) = 24 || Input: 1 3 5 7\nSteps:\n7 - 5 = 2 (left: 1 2 3)\n2 * 3 = 6 (left: 1 6)\n6 * 1 = 6\nAnswer: ((7 - 5) * 3) * 1 = 24"
            ],
            "Evaluation": [
                40.0,
                60.0,
                40.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 6.5",
                "2 <- 6.7",
                "3 <- 6.7",
                "4 <- 6.4",
                "5 <- 5.9",
                "6 <- 6.2",
                "7 <- 6.4",
                "8 <- 5.9",
                "9 <- 4.6"
            ]
        },
        "Step 7": {
            "steps": [
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 3 6 7 9\nSteps:\n3 * 7 = 21 (left: 6 9 21)\n6 + 9 = 15 (left: 15 21)\n15 + 21 = 36 (left: 36)\nAnswer: (3 * 7) + (6 + 9) = 24 || Input: 2 3 6 8\nSteps:\n6 * 3 = 18 (left: 2 8 18)\n18 - 8 = 10 (left: 2 10)\n10 + 2 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((6 * 3) - 8) + 2 = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 4 8\nSteps:\n2 * 4 = 8 (left: 3 8 8)\n8 - 3 = 5 (left: 5 8)\n5 * 8 = 40 (left: 40)\nAnswer: (2 * 4) * (8 - 3) = 24 || Input: 1 3 5 8\nSteps:\n1 * 5 = 5 (left: 3 8 5)\n5 - 3 = 2 (left: 2 8)\n2 * 8 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((1 * 5) - 3) * 8 = 24 || Input: 2 4 6 9\nSteps:\n6 * 4 = 24 (left: 2 9 24)\n9 - 2 = 7 (left: 7 24)\n7 * 24 = 168 (left: 168)\nAnswer: (6 * 4) + (9 - 2) = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 4 8\nSteps:\n2 * 4 = 8 (left: 3 8 8)\n8 - 3 = 5 (left: 5 8)\n5 * 8 = 40 (left: 40)\nAnswer: (2 * 4) * (8 - 3) = 24 || Input: 1 3 5 8\nSteps:\n1 * 5 = 5 (left: 3 8 5)\n5 - 3 = 2 (left: 2 8)\n2 * 8 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((1 * 5) - 3) * 8 = 24 || Input: 2 4 6 9\nSteps:\n2 * 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 12)\n5 * 12 = 60 (left: 60)\nAnswer: (2 * 6) * (9 - 4) = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 6 = 24 (left: 24)\nAnswer: (3 * 4) * (6 - 2) = 24 || Input: 1 2 3 6\nSteps:\n1 * 3 = 3 (left: 2 6 3)\n6 - 2 = 4 (left: 4 3)\n4 * 3 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((1 * 3) * (6 - 2)) * 2 = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n8 * 3 = 24 (left: 24)\nAnswer: (2 * 6) * (12 - 4) = 24 || Input: 1 3 5 8\nSteps:\n5 - 3 = 2 (left: 1 2 8)\n2 * 8 = 16 (left: 1 16)\n16 - 1 = 15 (left: 15)\n15 + 1 = 16 (left: 16)\n16 + 16 = 32 (left: 32)\n32 / 2 = 16 (left: 16)\nAnswer: (((",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 3 6 7 9\nSteps:\n6 + 9 = 15 (left: 3 7 15)\n15 - 7 = 8 (left: 3 8)\n8 * 3 = 24 (left: 24)\nAnswer: (6 + 9) * (7 - 3) = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n4 - 3 = 1 (left: 1 12)\n1 * 12 = 24 (left: 24)\nAnswer: (2 * 6) * (4 - 3) = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 6 = 24 (left: 24)\nAnswer: (3 * 4) * (6 - 2) = 24 || Input: 1 2 3 4\nSteps:\n1 * 2 = 2 (left: 3 4 2)\n3 + 4 = 7 (left: 7 2)\n7 * 2 = 14 (left: 14)\n14 + 3 = 17 (left: 17)\n17 - 4 = 13 (left: 13)\n13 * 2 = 26 (left: 26)\n26 - ",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n8 * 3 = 24 (left: 24)\nAnswer: (2 * 6) * (12 - 4) = 24 || Input: 1 2 4 12\nSteps:\n12 / 4 = 3 (left: 1 2 3)\n3 * 2 = 6 (left: 1 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((12 / 4) * 2) * 6 = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24"
            ],
            "Evaluation": [
                40.001,
                60.0,
                40.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 7.5",
                "2 <- 6.3",
                "3 <- 5.4",
                "4 <- 7.1",
                "5 <- 6.6",
                "6 <- 5.3",
                "7 <- 4.9",
                "8 <- 7.3",
                "9 <- 7.3"
            ]
        },
        "Step 8": {
            "steps": [
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n4 - 3 = 1 (left: 1 12)\n1 * 12 = 12 (left: 12)\nAnswer: (2 * 6) + (4 - 3) = 24 || Input: 1 3 5 7\nSteps:\n7 - 3 = 4 (left: 1 4 5)\n5 - 1 = 4 (left: 4 4)\n4 * 4 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((7 - 3) * (5 - 1)) + 8 = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n8 * 3 = 24 (left: 24)\nAnswer: (2 * 6) * (12 - 4) = 24 || Input: 1 3 5 8\nSteps:\n5 - 3 = 2 (left: 1 2 8)\n2 * 8 = 16 (left: 1 16)\n16 - 1 = 15 (left: 15)\n15 + 1 = 16 (left: 16)\n16 + 16 = 32 (left: 32)\n32 / 2 = 16 (left: 16)\nAnswer: ((( || 5 - 3) * 8 - 1) + 1) * 16 / 2 = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 4 6\nSteps:\n6 * 4 = 24 (left: 2 3 24)\n3 * 2 = 6 (left: 6 24)\n6 * 24 = 24\nAnswer: 6 * (4 * 2) = 24 || Input: 1 3 5 7\nSteps:\n5 + 7 = 12 (left: 1 3 12)\n12 - 3 = 9 (left: 1 9)\n9 * 1 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 - 24 = 3\nAnswer: ((5 + 7) - 3) * 3 = 24 || Input: 3 6 6 8\nSteps:\n6 + 6 = 12 (left: 3 8 12)\n12 - 8 = 4 (left: 3 4)\n3 * 4 = 12 (left: 12)\n12 * 2 = 24\nAnswer: (3 * (6 + 6)) * 2 = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n4 - 3 = 1 (left: 1 12)\n1 * 12 = 12 (left: 12)\nAnswer: (2 * 6) + (4 - 3) = 24 || Input: 5 6 7 8\nSteps:\n5 * 7 = 35 (left: 6 8 35)\n8 - 6 = 2 (left: 2 35)\n2 * 35 = 70 (left: 70)\nAnswer: 5 * (6 + (7 * (8 - 6))) = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 3 6 7 9\nSteps:\n3 * 7 = 21 (left: 6 9 21)\n6 + 9 = 15 (left: 15 21)\n15 + 21 = 36 (left: 36)\nAnswer: (3 * 7) + (6 + 9) = 24 || Input: 2 3 6 8\nSteps:\n6 * 3 = 18 (left: 2 8 18)\n18 - 8 = 10 (left: 2 10)\n10 + 2 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((6 * 3) - 8) + 2 = 24 || Input: 1 3 4 7\nSteps:\n3 + 7 = 10 (left: 1 4 10)\n10 - 4 = 6 (left: 1 6)\n6 * 4 = 24 (left: 24)\nAnswer: (3 + 7) * (10 - 4) = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 6 8\nSteps:\n6 * 3 = 18 (left: 2 8 18)\n18 - 8 = 10 (left: 2 10)\n2 * 10 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((6 * 3) - 8) + 4 = 24 || Input: 1 3 4 9\nSteps:\n1 * 9 = 9 (left: 3 4 9)\n4 - 3 = 1 (left: 1 9)\n1 * 9 = 9 (left: 9)\n9 * 4 = 36 (left: 36)\n36 / 4 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 -  || 9 = 18 (left: 18)\n18 / 3 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((1 * 9) * 9) - (4 - 3) = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 5 6\nSteps:\n2 * 6 = 12 (left: 3 5 12)\n3 + 5 = 8 (left: 8 12)\n8 * 12 = 96 (left: 96)\nAnswer: (2 * 6) * (3 + 5) = 24 || Input: 2 3 8 9\nSteps:\n3 * 8 = 24 (left: 2 9 24)\n2 + 9 = 11 (left: 11 24)\n11 - 24 = -13 (left: -13)\n-13 + 24 = 11 (left: 11)\nAnswer: (2 + 9) * (3 * 8) = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 3 6 7 9\nSteps:\n6 * 3 = 18 (left: 7 9 18)\n9 - 7 = 2 (left: 2 18)\n18 / 2 = 9 (left: 9 9)\n9 * 9 = 81 (left: 81)\nAnswer: ((6 * 3) / (9 - 7)) * 9 = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 4 8\nSteps:\n2 * 4 = 8 (left: 3 8 8)\n8 - 3 = 5 (left: 5 8)\n5 * 8 = 40 (left: 40)\nAnswer: (2 * 4) * (8 - 3) = 24 || Input: 1 3 5 8\nSteps:\n1 * 5 = 5 (left: 3 8 5)\n5 - 3 = 2 (left: 2 8)\n2 * 8 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((1 * 5) - 3) * 8 = 24 || Input: 2 4 6 9\nSteps:\n2 * 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 12)\n5 * 12 = 60 (left: 60)\nAnswer: (2 * 6) * (9 - 4) = 24 || All possible combinations have been exhausted and unfortunately, it is not possible to obtain 24 using the numbers 2, 4, 6, and 9 with basic arithmetic operations.",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 4 8\nSteps:\n2 * 4 = 8 (left: 3 8 8)\n8 - 3 = 5 (left: 5 8)\n5 * 8 = 40 (left: 40)\nAnswer: (2 * 4) * (8 - 3) = 24 || Input: 1 3 5 8\nSteps:\n1 * 5 = 5 (left: 3 8 5)\n5 - 3 = 2 (left: 2 8)\n2 * 8 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((1 * 5) - 3) * 8 = 24 || Input: 2 4 6 9\nSteps:\n2 * 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 12)\n5 * 12 = 60 (left: 60)\nAnswer: (2 * 6) * (9 - 4) = 24 || Input: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n12 - 6 = 6 (left: 3 6)\n3 * 6 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((3 + 5) + 7) * 6 = 24"
            ],
            "Evaluation": [
                60.0,
                0.003,
                60.0,
                20.0,
                40.0,
                60.0,
                40.0,
                40.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 7.3",
                "1 <- 7.2",
                "2 <- 7.5",
                "3 <- 5.3",
                "4 <- 8.5",
                "5 <- 7.7",
                "6 <- 7.9",
                "7 <- 1.6",
                "8 <- 5.6",
                "9 <- 5.7"
            ]
        },
        "Step 9": {
            "steps": [
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 4 8\nSteps:\n2 * 4 = 8 (left: 3 8 8)\n8 - 3 = 5 (left: 5 8)\n5 * 8 = 40 (left: 40)\nAnswer: (2 * 4) * (8 - 3) = 24 || Input: 1 3 5 8\nSteps:\n1 * 5 = 5 (left: 3 8 5)\n5 - 3 = 2 (left: 2 8)\n2 * 8 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((1 * 5) - 3) * 8 = 24 || Input: 2 4 6 9\nSteps:\n2 * 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 12)\n5 * 12 = 60 (left: 60)\nAnswer: (2 * 6) * (9 - 4) = 24 || Input: 2 3 7 9\nSteps:\n2 * 7 = 14 (left: 3 9 14)\n9 - 3 = 6 (left: 6 14)\n6 * 14 = 84 (left: 84)\nAnswer: (2 * 7) * (9 - 3) = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 4 8\nSteps:\n2 * 4 = 8 (left: 3 8 8)\n8 - 3 = 5 (left: 5 8)\n5 * 8 = 40 (left: 40)\nAnswer: (2 * 4) * (8 - 3) = 24 || Input: 1 3 5 8\nSteps:\n1 * 5 = 5 (left: 3 8 5)\n5 - 3 = 2 (left: 2 8)\n2 * 8 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((1 * 5) - 3) * 8 = 24 || Input: 2 4 6 9\nSteps:\n6 * 4 = 24 (left: 2 9 24)\n9 - 2 = 7 (left: 7 24)\n7 * 24 = 168 (left: 168)\nAnswer: (6 * 4) + (9 - 2) = 24 || Input: 3 6 7 8\nSteps:\n3 * 8 = 24 (left: 6 7 24)\n7 - 6 = 1 (left: 1 24)\n1 * 24 = 24 (left: 24)\nAnswer: (3 * 8) - (7 - 6) = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n8 * 3 = 24 (left: 24)\nAnswer: (2 * 6) * (12 - 4) = 24 || Input: 1 3 5 8\nSteps:\n5 - 3 = 2 (left: 1 2 8)\n2 * 8 = 16 (left: 1 16)\n16 - 1 = 15 (left: 15)\n15 + 1 = 16 (left: 16)\n16 + 16 = 32 (left: 32)\n32 / 2 = 16 (left: 16)\nAnswer: ((( || 5 - 3) * 8 - 1) + 1) * 16 / 2 = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 5 6\nSteps:\n2 * 6 = 12 (left: 3 5 12)\n3 + 5 = 8 (left: 8 12)\n8 * 12 = 96 (left: 96)\nAnswer: (2 * 6) * (3 + 5) = 24 || Input: 2 4 6 8\nSteps:\n6 * 4 = 24 (left: 2 8 24)\n8 - 2 = 6 (left: 6 24)\n6 * 24 = 144 (left: 144)\nAnswer: (6 * 4) * (8 - 2) = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 6 8\nSteps:\n6 * 3 = 18 (left: 2 8 18)\n18 - 8 = 10 (left: 2 10)\n2 * 10 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((6 * 3) - 8) + 4 = 24 || Input: 1 3 4 9\nSteps:\n1 * 9 = 9 (left: 3 4 9)\n4 - 3 = 1 (left: 1 9)\n1 * 9 = 9 (left: 9)\n9 * 4 = 36 (left: 36)\n36 / 4 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 -  || 9 = 18 (left: 18)\n18 / 3 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((1 * 9) * 9) - (4 - 3) = 24 || Input: 2 4 6 8\nSteps:\n4 * 6 = 24 (left: 2 8 24)\n8 / 2 = 4 (left: 4 24)\n4 * 24 = 96 (left: 96)\n96 / 4 = 24 (left: 24)\nAnswer: ((4 * 6) / 2) * 8 = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 6 = 24 (left: 24)\nAnswer: (3 * 4) * (6 - 2) = 24 || Input: 1 2 3 4\nSteps:\n1 * 2 = 2 (left: 3 4 2)\n3 + 4 = 7 (left: 7 2)\n7 * 2 = 14 (left: 14)\n14 + 3 = 17 (left: 17)\n17 - 4 = 13 (left: 13)\n13 * 2 = 26 (left: 26)\n26 -  || 2 = 24 (left: 24)\nAnswer: (((1 * 2) + (3 + 4)) * 2) - 4 = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 5 6\nSteps:\n5 + 3 = 8 (left: 2 6 8)\n8 - 6 = 2 (left: 2 2)\n2 * 2 = 4 (left: 4)\n4 * 6 = 24 (left: 24)\nAnswer: ((5 + 3) - 2) * 6 = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || Input: 4 7 9",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n4 - 3 = 1 (left: 1 12)\n1 * 12 = 24 (left: 24)\nAnswer: (2 * 6) * (4 - 3) = 24",
                "8 + 3 = 11 (left: 7 8 11) || 11 - 8 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (8 + 3) * 8 = 24 || Input: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n4 * 3 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (2 * 6) + (4 * 3) = 24 || Input: 2 2 6 8\nSteps:\n2 * 8 = 16 (left: 2 6 16)\n2 * 6 = 12 (left: 12 16)\n16 - 12 = 4 (left: 4 12)\n4 * 6 = 24 (left: 24)\nAnswer: (2 * 8) - (2 * 6) + (4 * 6) = 24 || Input: 1 5 5 9\nSteps:\n5 * 5 = 25 (left: 1 9 25)\n9 - 1 = 8 (left: 8 25)\n8 - 25 = -17 (left: -17)\n-17 + 24 = 24 (left: 24)\nAnswer: ((5 * 5) - (9 - 1)) + 24 = 24"
            ]
        },
        "Input": "3 7 8 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "91": {
        "puzzle": "7 8 12 12",
        "Step 0": {
            "steps": [
                "12 - 7 = 5 (left: 5 12 12)",
                "8 - 7 = 1 (left: 1 12 12)",
                "7 * 8 = 56 (left: 12 12 56)",
                "7 * 8 = 56 (left: 12 12 56)",
                "12 / 8 = 1.5 (left: 7 12 1.5)",
                "12 / 7 = 1.71428571429 (left: 1.71428571429 12 12)",
                "12 / 7 = 1.71428571429 (left: 1.71428571429 12 12)",
                "12 + 7 = 19 (left: 8 12 19)",
                "12",
                "12 + 7 = 19 (left: 8 12 19)"
            ],
            "Evaluation": [
                0.003,
                21.001,
                2.001,
                1.002,
                3.0,
                21.001,
                0.001,
                1.002,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.5",
                "4 <- INIT",
                "5 <- 0.4",
                "6 <- 0.1",
                "7 <- INIT",
                "8 <- 0.2",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "8 / 7 = 1.14285714286 (left: 1.14285714286 12 12)",
                "12 / 7 = 1.71428571429 (left: 1.71428571429 12 12)",
                "7 * 8 = 56 (left: 12 12 56)",
                "12 / 7 = 1.71428571429 (left: 1.71428571429 12 12) || 12 - 1.71428571429 = 10.28571428571 (left: 10.28571428571 12)",
                "7 * 8 = 56 (left: 12 12 56)",
                "12 / 8 = 1.5 (left: 7 12 1.5) || 12 - 7 = 5 (left: 5 12)",
                "8 - 7 = 1 (left: 1 12 12) || 12 + 1 = 13 (left: 13 12)",
                "12 - 7 = 5 (left: 5 12 12)",
                "7 * 8 = 56 (left: 12 12 56) || 12 / 12 = 1 (left: 1 12 56)",
                "12 / 8 = 1.5 (left: 7 1.5 12)"
            ],
            "Evaluation": [
                1.002,
                2.0,
                3.0,
                2.0,
                2.001,
                1.001,
                0.003,
                3.0,
                0.003,
                2.0
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 1.7",
                "2 <- INIT",
                "3 <- 0.1",
                "4 <- INIT",
                "5 <- 0.1",
                "6 <- INIT",
                "7 <- 0.1",
                "8 <- 1.2",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "12 / 7 = 1.71428571429 (left: 1.71428571429 12 12) || 12 - 1.71428571429 = 10.28571428571 (left: 10.28571428571 12)",
                "12 - 7 = 5 (left: 5 12 12) || 12 / 5 = 2.4 (left: 2.4 12)",
                "7 * 8 = 56 (left: 12 12 56)",
                "8 - 7 = 1 (left: 1 12 12) || 12 - 1 = 11 (left: 11 12)",
                "12 - 7 = 5 (left: 5 12 12)",
                "8 - 7 = 1 (left: 1 12 12) || 12 / 1 = 12 (left:",
                "12 / 7 = 1.71 (left: 1 12 12)",
                "8 - 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12)",
                "7 * 8 = 56 (left: 12 12 56) || 12 / 12 = 1 (left: 1 12 56)",
                "7 * 8 = 56 (left: 12 12 56)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                2.001,
                0.003,
                2.001,
                21.0,
                21.001,
                0.002,
                22.0,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.6",
                "2 <- 2.5",
                "3 <- 2.2",
                "4 <- 2.8",
                "5 <- 2.4",
                "6 <- 2.6",
                "7 <- INIT",
                "8 <- 1.1",
                "9 <- 2.6"
            ]
        },
        "Step 3": {
            "steps": [
                "8 / 7 = 1.1428571428571428 (left: 1.1428571428571428 12 12)",
                "12 / 7 = 1.71 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "8 - 7 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: || 12 / 12 = 1 (left: 1)",
                "7 * 8 = 56 (left: 12 12 56) || 12 / 12 = 1 (left: 1 12 56)",
                "7 * 8 = 56 (left: 12 12 56) || 12 / 12 = 1 (left: 1 12 56) || 12 / 1 = 12 (left: 12 56)",
                "12 - 7 = 5 (left: 5 12 12) || 12 - 5 = 7 (left: 7 12)",
                "12 / 7 = 1.71 (left: 1 12 12) || 12 + 1 = 13 (left: 13 12)",
                "12",
                "12 / 7 = 1.71428571429 (left: 1.71428571429 12 12) || 12 - 1.71428571429 = 10.28571428571 (left: 10.28571428571 12)",
                "12 / 7 = 1.71 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)"
            ],
            "Evaluation": [
                1.002,
                60.0,
                0.003,
                1.002,
                0.003,
                0.002,
                0.003,
                0.003,
                1.0,
                40.001
            ],
            "Resampling": [
                "0 <- 3.9",
                "1 <- 3.9",
                "2 <- INIT",
                "3 <- 3.9",
                "4 <- 0.5",
                "5 <- 2.5",
                "6 <- 3.9",
                "7 <- 3.9",
                "8 <- 2.5",
                "9 <- 3.9"
            ]
        },
        "Step 4": {
            "steps": [
                "12 / 7 = 1.71 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "12 / 7 = 1.71 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "7 * 8 = 56 (left: 12 12 56)",
                "12 / 7 = 1.71 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 / 7 = 1.71428571429 (left: 1.71428571429 12 12) || 12 + 1.71428571429 =",
                "8 - 7 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: || 12 / 1 = 12 (left: 12 12)",
                "12 / 7 = 1.71 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 / 7 = 1.71 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "8 - 7 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: || 12 + 1 = 13",
                "12 / 7 = 1.71 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)"
            ],
            "Evaluation": [
                60.0,
                0.002,
                2.001,
                0.003,
                0.003,
                40.001,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.5",
                "1 <- 3.9",
                "2 <- 4.5",
                "3 <- 3.9",
                "4 <- 0.5",
                "5 <- 1.0",
                "6 <- 2.6",
                "7 <- 3.9",
                "8 <- 2.8",
                "9 <- 3.1"
            ]
        },
        "Step 5": {
            "steps": [
                "8 - 7 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: || 12 / 1 = 12 (left: 12)",
                "12 / 7 = 1.71 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "8 - 7 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "12 / 7 = 1.71 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 7 = 1.71428571429 (left: 1.71428571429 12 12) || 1.71428571429 * 12 = 20.57142857148 (left:",
                "8 / 7 = 1.14285714286 (left: 1.14285714286 12 12) || 12 / 1.14285714286 =",
                "12 / 7 = 1.71 (left: 1 12 12) || 12 + 1 = 13 (left: 1 13)",
                "12 / 7 = 1.71 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "7 * 8 = 56 (left: 12 12 56) || 12 / 12 = 1 (left: 1 12 56) || 56 - 12 = 44 (left: 1 44)",
                "12 / 7 = 1.71 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                0.003,
                0.001,
                0.003,
                0.003,
                0.002,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 4.5",
                "2 <- 3.1",
                "3 <- 4.5",
                "4 <- 0.9",
                "5 <- 0.1",
                "6 <- 4.0",
                "7 <- 4.0",
                "8 <- 2.8",
                "9 <- 3.9"
            ]
        },
        "Step 6": {
            "steps": [
                "12 / 7 = 1.71 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (12 / 7) * (12 + 12) = 24",
                "8 - 7 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 / 7 = 1.71 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "8 - 7 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 + 7 = 19 (left: 8 12 19) || 12 - 8 = 4 (left: 4 19)",
                "8 - 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12)",
                "12 / 7 = 1.71 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: 12 + (12 / (12 / 7)) = 24",
                "12 / 7 = 1.71 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (12 / 7) * (12 + 12) = 24",
                "7 * 8 = 56 (left: 12 12 56) || 12 / 12 = 1 (left: 1 12 56) || 56 - 1 = 55 (left: 12 55)",
                "12 / 7 = 1.71 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)"
            ],
            "Evaluation": [
                60.0,
                0.003,
                40.001,
                0.003,
                0.001,
                60.0,
                60.0,
                40.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 3.1",
                "2 <- 4.5",
                "3 <- 3.9",
                "4 <- 3.9",
                "5 <- 6.0",
                "6 <- 4.5",
                "7 <- 6.5",
                "8 <- 6.2",
                "9 <- 6.6"
            ]
        },
        "Step 7": {
            "steps": [
                "8 - 7 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12)",
                "12 / 7 = 1.71 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "8 - 7 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 / 7 = 1.71 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 / 7 = 1.71 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24)",
                "12 / 7 = 1.71 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (12 / 7) * (12 + 12) = 24 || Input: 3 4 5 6\nSteps:\n3 * 4 = 12 (left: 5 6 12)\n5 + 6 = 11 (left: 11 12)\n11 + 12 = 23 (left: 23)\n23 + 1 = 24 (left: 24)\nAnswer: ((3 * 4) + (5 + 6)) + 1 = 24",
                "8 - 7 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "8 - 7 = 1 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 7 = 1.71 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24)",
                "12 / 7 = 1.71 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: 12 + (12 / (12 / 7)) = 24 || Input: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n5 - 3 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 4) * (5 - 3) = 24"
            ],
            "Evaluation": [
                40.001,
                20.002,
                0.003,
                0.002,
                60.0,
                60.0,
                20.002,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 7.0",
                "1 <- 7.0",
                "2 <- 7.0",
                "3 <- 4.0",
                "4 <- 7.6",
                "5 <- 2.5",
                "6 <- 7.6",
                "7 <- 6.6",
                "8 <- 7.0",
                "9 <- 7.5"
            ]
        },
        "Step 8": {
            "steps": [
                "8 - 7 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "8 - 7 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "8 - 7 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "12 / 7 = 1.71 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (12 / 7) * (12 + 12) = 24",
                "8 - 7 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1",
                "8 - 7 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: || 12 / 1 = 12 (left: 12 12)",
                "8 - 7 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 || 12 - 12 = 0 (left: 24 0)",
                "12 / 7 = 1.71 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: 12 + (12 / (12 / 7)) = 24 || Input: 3 3 6 8\nSteps:\n6 * 3 = 18 (left: 3 8 18)\n18 - 8 = 10 (left: 3 10)\n10 + 3 = 13 (left: 13)\n13 * 2 = 26 (left: 26)\n26 - 13 = 13 (left: 13)\n13 + 13 = 26 (left: 26)\n26 - ",
                "8 - 7 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 7 = 1.71 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (12 / 7) * (12 + 12) = 24 || Input: 3 4 5 6\nSteps:\n3 * 4 = 12 (left: 5 6 12)\n5 + 6 = 11 (left: 11 12)\n11 + 12 = 23 (left: 23)\n23 + 1 = 24 (left: 24)\nAnswer: ((3 * 4) + (5 + 6)) + 1 = 24 || Input: 2 3 6 8\nSteps:\n2 * 3 = 6 (left: 6 8)\n6 + 8 = 14 (left: 14)\n14 + 6 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((2 * 3) + (6 + 8)) + 4 = 24"
            ],
            "Evaluation": [
                40.001,
                0.002,
                0.003,
                40.001,
                0.003,
                60.0,
                60.0,
                60.0,
                20.002,
                60.0
            ],
            "Resampling": [
                "0 <- 7.8",
                "1 <- 6.2",
                "2 <- 8.7",
                "3 <- 8.9",
                "4 <- 6.7",
                "5 <- 8.5",
                "6 <- 4.5",
                "7 <- 3.9",
                "8 <- 8.3",
                "9 <- 8.9"
            ]
        },
        "Step 9": {
            "steps": [
                "12 / 7 = 1.71 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 12 / 12 = 1 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "12 / 7 = 1.71 (left: 1 12 12) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24 || 24 / 12 = 2 (left: 2 12)",
                "12 / 7 = 1.71 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: 12 + (12 / (12 / 7)) = 24 || Input: 3 3 6 8\nSteps:\n6 * 3 = 18 (left: 3 8 18)\n18 - 8 = 10 (left: 3 10)\n10 + 3 = 13 (left: 13)\n13 * 2 = 26 (left: 26)\n26 - 13 = 13 (left: 13)\n13 + 13 = 26 (left: 26)\n26 -  || 13 = 24 (left: 24)\nAnswer: ((6 * 3) - 8) + 3 = 24",
                "12 / 7 = 1.71 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (12 / 7) * (12 + 12) = 24 || Input: 3 4 5 6\nSteps:\n3 * 4 = 12 (left: 5 6 12)\n5 + 6 = 11 (left: 11 12)\n11 + 12 = 23 (left: 23)\n23 + 1 = 24 (left: 24)\nAnswer: ((3 * 4) + (5 + 6)) + 1 = 24 || Input: 2 3 6 8\nSteps:\n2 * 3 = 6 (left: 6 8)\n6 + 8 = 14 (left: 14)\n14 + 6 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((2 * 3) + (6 + 8)) + 4 = 24 || Input: 1 2 3 6\nSteps:\n2 * 3 = 6 (left: 1 6 6)\n6 + 6 = 12 (left: 1 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((2 * 3) + (6 + 6)) * 2 = 24",
                "12 / 7 = 1.71 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (12 / 7) * (12 + 12) = 24 || Input: 3 3 4 5\nSteps:\n3 * 5 = 15 (left: 3 4 15)\n4 - 3 = 1 (left: 1 15)\n1 * 15 = 15 (left: 15)\n15 + 15 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((3 * 5) + (4 - 3)) -",
                "8 - 7 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "8 - 7 = 1 (left: 1 12 12) || 12 / 1 = 12 (left: || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "12 / 7 = 1.71 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "12 / 7 = 1.71 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (12 / 7) * (12 + 12) = 24 || Input: 3 4 6 9\nSteps:\n4 * 6 = 24 (left: 3 9 24)\n9 - 3 = 6 (left: 6 24)\n6 * 24 = 24 (left: 24)\nAnswer: (4 * 6) * (9 - 3) = 24",
                "12 / 7 = 1.71 (left: 1 12 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24 (left: 24) || Answer: (12 / 7) * (12 + 12) = 24 || Input: 3 4 5 6\nSteps:\n3 * 4 = 12 (left: 5 6 12)\n5 + 6 = 11 (left: 11 12)\n11 + 12 = 23 (left: 23)\n23 + 1 = 24 (left: 24)\nAnswer: ((3 * 4) + (5 + 6)) + 1 = 24 || Input: 2 3 6 8\nSteps:\n2 * 3 = 6 (left: 6 8)\n6 + 8 = 14 (left: 14)\n14 + 6 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((2 * 3) + (6 + 8)) + 4 = 24 || Input: 1 5 7 8\nSteps:\n7 - 5 = 2 (left: 1 2 8)\n2 * 8 = 16 (left: 1 16)\n16 + 1 = 17 (left: 17)\n17 + 7 = 24 (left: 24)\nAnswer: ((7 - 5) * 8) + (1 + 7) = 24"
            ]
        },
        "Input": "7 8 12 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "92": {
        "puzzle": "9 9 11 12",
        "Step 0": {
            "steps": [
                "11 + 9 = 20 (left: 9 12 20)",
                "9 / 9 = 1 (left: 11 12 1)",
                "9 + 11 = 20 (left: 9 20 12)",
                "9 * 11 = 99 (left: 12 99)",
                "11 + 9 = 20 (left: 9 12 20)",
                "9 * 9 = 81 (left: 11 12 81)",
                "",
                "11 + 9 = 20 (left: 9 12 20)",
                "11 * 9 = 99 (left: 12 9 ",
                "11 + 9 = 20 (left: 9 12 20)"
            ],
            "Evaluation": [
                2.001,
                41.0,
                3.0,
                0.003,
                1.001,
                2.001,
                0.003,
                2.001,
                20.002,
                1.002
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.8",
                "2 <- 0.1",
                "3 <- 0.1",
                "4 <- 0.1",
                "5 <- 0.1",
                "6 <- INIT",
                "7 <- 0.1",
                "8 <- 0.8",
                "9 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "9 + 11 = 20 (left: 9 20 12) || 20 - 9 = 11 (left: 11 12)",
                "11 * 9 = 99 (left: 12 9  || 12 / 9 = 1.33 (left: 1.33)",
                "9 / 9 = 1 (left: 11 12 1) || 12 / 11 = 1.0909090909090908 (left: 1 1.0909090909090908)",
                "9 / 9 = 1 (left: 11 12 1) || 12 / 11 = 1.0909 (left: 1 1.0909)",
                "9 / 9 = 1 (left: 11 12 1) || 12 / 11 = 1.0909090909090908 (left: 1 1.0909090909090908)",
                "9 / 9 = 1 (left: 11 12 1) || 11 - 1 = 10 (left:",
                "11 + 9 = 20 (left: 9 12 20)",
                "9 / 9 = 1 (left: 11 12 1) || 12 + 1 = 13 (left: ",
                "11 * 9 = 99 (left: 12 9  || 12 * 9 = 108 (left: 108)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                3.0,
                2.001,
                3.0,
                40.001,
                3.0,
                0.0,
                0.002,
                20.002
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 0.2",
                "2 <- 1.9",
                "3 <- 0.1",
                "4 <- 1.9",
                "5 <- 0.0",
                "6 <- INIT",
                "7 <- 0.8",
                "8 <- 1.9",
                "9 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "9 / 9 = 1 (left: 11 12 1) || 11 - 1 = 10 (left: || 11 / 1 = 11 (left: 11)",
                "9 + 11 = 20 (left: 9 20 12) || 20 / 9 = 2.222 (left: 2.222 12)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 1 * 132 = 132 (left: 132)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 132 / 1 = 132 (left: 132)",
                "11 + 9 = 20 (left: 9 12 20) || 20 / 9 = 2.22 (left: 2",
                "11 + 9 = 20 (left: 9 12 20)",
                "11 * 9 = 99 (left: 12 9  || 12 * 9 = 108 (left: 108)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 1 * 132 = 132 (left: 132)",
                "9 / 9 = 1 (left: 11 12 1) || 12 / 11 = 1.0909090909090908 (left: 1 1.0909090909090908) || 1 - 1 = 0 (left: 0.0909090909090908)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.003,
                0.003,
                0.0,
                0.002,
                0.003,
                0.003,
                0.0
            ],
            "Resampling": [
                "0 <- 0.1",
                "1 <- 1.5",
                "2 <- 0.1",
                "3 <- 1.5",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 0.8",
                "7 <- 1.2",
                "8 <- 0.1",
                "9 <- 0.1"
            ]
        },
        "Step 3": {
            "steps": [
                "9 / 9 = 1 (left: 11 12 1) || 12 - 11 = 1 (left: 1 1)",
                "9 / 9 = 1 (left: 11 12 1) || 11 - 1 = 10 (left: || 11 - 1 = 10 (left: 10)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132)",
                "9 / 9 = 1 (left: 11 12 1) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 1 11)",
                "9 - 9 = 0 (left: 0 11 12)",
                "9 * 9 = 81 (left: 11 12 81)",
                "11 * 9 = 99 (left: 12 9  || 12 / 9 = 1.33 (left: 1.33 9)",
                "9 / 9 = 1 (left: 11 12 1) || 12 / 11 = 1.0909090909090908 (left: 1 1.0909090909090908) || 1 * 1.0909090909090908 = 1.0909090909090908",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 132)",
                "9 / 9 = 1 (left: 11 12 1) || 11 - 1 = 10 (left: 10 12)"
            ],
            "Evaluation": [
                1.002,
                0.002,
                0.002,
                60.0,
                1.002,
                2.001,
                2.001,
                0.003,
                0.003,
                1.001
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 3.3",
                "2 <- 1.9",
                "3 <- 1.3",
                "4 <- 0.1",
                "5 <- 3.3",
                "6 <- 1.5",
                "7 <- 3.5",
                "8 <- 1.5",
                "9 <- 1.6"
            ]
        },
        "Step 4": {
            "steps": [
                "9 / 9 = 1 (left: 11 12 1) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "9 / 9 = 1 (left: 11 12 1) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 132 + 1 = 133 (left: 133)",
                "9 / 9 = 1 (left: 11 12 1) || 12 / 11 = 1.0909 (left: 1 1.0909) || 1 + 1.0909 = 2.0909 (left: 2.0909)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132)",
                "9 / 9 = 1 (left: 11 12 1) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "9 / 9 = 1 (left: 11 12 1) || 11 - 1 = 10 (left: || Possible next steps:",
                "9 * 9 = 81 (left: 11 12 81) || 81 - 11 = 70 (left: 12 70)",
                "9 / 9 = 1 (left: 11 12 1) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 11)",
                "11 + 9 = 20 (left: 9 12 20) || 9 * 12 = 108 (left: 20)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.001,
                0.003,
                0.002,
                0.003,
                0.003,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 3.3",
                "2 <- 1.9",
                "3 <- 3.3",
                "4 <- 3.3",
                "5 <- 1.9",
                "6 <- 1.5",
                "7 <- 3.3",
                "8 <- INIT",
                "9 <- 3.3"
            ]
        },
        "Step 5": {
            "steps": [
                "9 / 9 = 1 (left: 11 12 1)",
                "9 / 9 = 1 (left: 11 12 1) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 132 - 1 = 131 (left: 131)",
                "9 / 9 = 1 (left: 11 12 1) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "9 / 9 = 1 (left: 11 12 1) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 132 / 1 = 132 (left: 132)",
                "9 / 9 = 1 (left: 11 12 1) || 11 - 1 = 10 (left: || 1 * 1 = 1 (left: 11)",
                "9 / 9 = 1 (left: 11 12 1) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "11 + 9 = 20 (left: 9 12 20)",
                "9 / 9 = 1 (left: 11 12 1) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ],
            "Evaluation": [
                41.0,
                0.001,
                0.003,
                0.001,
                0.001,
                0.003,
                0.001,
                0.002,
                2.001,
                0.0
            ],
            "Resampling": [
                "0 <- 1.9",
                "1 <- 1.5",
                "2 <- 5.0",
                "3 <- 5.0",
                "4 <- 5.0",
                "5 <- 5.0",
                "6 <- 5.0",
                "7 <- 5.0",
                "8 <- 1.5",
                "9 <- 5.0"
            ]
        },
        "Step 6": {
            "steps": [
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 132 / 1 = 132 (left: 1 132)",
                "9 / 9 = 1 (left: 11 12 1) || 11 - 1 = 10 (left: || 7 * 3 = 21 (left: 21 5)",
                "9 / 9 = 1 (left: 11 12 1) || 12 / 1 = 12 (left: 11 12)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 132 1)",
                "9 / 9 = 1 (left: 11 12 1) || 12 / 11 = 1.09090909091 (left: 1 1.09090909091)",
                "9 / 9 = 1 (left: 11 12 1) || 12 / 11 = 1.0909090909090908 (left: 1 1.0909090909090908)",
                "9 / 9 = 1 (left: 11 12 1) || 12 - 11 = 1 (left: 1 1)",
                "9 / 9 = 1 (left: 11 12 1) || 1 * 12 = 12 (left: 12 12)",
                "9 / 9 = 1 (left: 11 12 1) || 11 - 1 = 10 (left: || 1 + 11 = 12 (left: 12)",
                "9 / 9 = 1 (left: 11 12 1) || 12 / 11 = 1.09090909091 (left: 1 1.09090909091)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.001,
                2.0,
                2.0,
                0.003,
                20.002,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- 6.7",
                "1 <- 5.0",
                "2 <- 5.0",
                "3 <- 0.1",
                "4 <- 5.0",
                "5 <- 3.3",
                "6 <- 5.0",
                "7 <- 5.0",
                "8 <- 5.0",
                "9 <- 3.3"
            ]
        },
        "Step 7": {
            "steps": [
                "9 / 9 = 1 (left: 11 12 1) || 1 * 12 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "9 / 9 = 1 (left: 11 12 1) || 12 / 11 = 1.09 (left: 1 1.09)",
                "9 / 9 = 1 (left: 11 12 1) || 12 / 11 = 1.09 (left: 1 1.09)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 132)",
                "9 / 9 = 1 (left: 11 12 1) || 3 + 5 = 8 (left: 7 8 9)",
                "9 / 9 = 1 (left: 11 12 1) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 1 11) || 11 * 1 = 11 (left: 11)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132)",
                "9 / 9 = 1 (left: 11 12 1) || 1 - 11 = -10 (left: 12 -10)",
                "9 / 9 = 1 (left: 11 12 1) || 12 / 11 = 1 (left: 1 1)",
                "9 / 9 = 1 (left: 11 12 1) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)"
            ],
            "Evaluation": [
                0.002,
                1.0,
                2.001,
                0.003,
                41.0,
                0.003,
                0.002,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 0.1",
                "2 <- 5.0",
                "3 <- 3.3",
                "4 <- 1.5",
                "5 <- 0.8",
                "6 <- 7.4",
                "7 <- 7.4",
                "8 <- 1.5",
                "9 <- 1.9"
            ]
        },
        "Step 8": {
            "steps": [
                "9 / 9 = 1 (left: 11 12 1) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "9 / 9 = 1 (left: 11 12 1) || 12 / 11 = 1.0909090909090908 (left: 1 1.0909090909090908)",
                "9 / 9 = 1 (left: 11 12 1) || 12 - 11 = 1 (left: 1 1)",
                "9 / 9 = 1 (left: 11 12 1) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "9 / 9 = 1 (left: 11 12 1) || 11 - 1 = 10 (left: || 11 * 10 = 110 (left: 10)",
                "11 * 9 = 99 (left: 12 9  || 9 * 12 = 108 (left: 108)",
                "9 / 9 = 1 (left: 11 12 1) || 3 + 5 = 8 (left: 7 8 9) || 7 * 8 = 56 (left: 9 56)",
                "9 / 9 = 1 (left: 11 12 1) || 3 + 5 = 8 (left: 7 8 9) || 8 / 7 = 1.1428571428571428 (left: 1",
                "9 / 9 = 1 (left: 11 12 1) || 11 - 1 = 10 (left: || Possible next steps:",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 132 - 1 = 131 (left: 1 131)"
            ],
            "Evaluation": [
                0.003,
                1.001,
                0.003,
                0.001,
                0.003,
                0.003,
                0.0,
                0.003,
                0.003,
                21.001
            ],
            "Resampling": [
                "0 <- 0.7",
                "1 <- 6.7",
                "2 <- 5.0",
                "3 <- 7.4",
                "4 <- 1.9",
                "5 <- 6.9",
                "6 <- 3.3",
                "7 <- 5.0",
                "8 <- 7.1",
                "9 <- 3.3"
            ]
        },
        "Step 9": {
            "steps": [
                "11 + 9 = 20 (left: 9 12 20) || 12 - 9 = 3 (left: 3 20)",
                "9 / 9 = 1 (left: 11 12 1) || 1 * 12 = 12 (left: 12 12) || 12 + 12 = 24",
                "9 / 9 = 1 (left: 11 12 1) || 12 / 11 = 1.09 (left: 1.09 1)",
                "9 / 9 = 1 (left: 11 12 1) || 3 + 5 = 8 (left: 7 8 9) || 7 * 8 = 56 (left: 9 56)",
                "9 / 9 = 1 (left: 11 12 1) || 11 * 12 = 132 (left: 1 132) || 132 - 1 = 131 (left: 131)",
                "9 / 9 = 1 (left: 11 12 1) || 12 / 11 = 1.09090909091 (left: 1 1.09090909091) || 1 * 1 = 1 (left: 1.09090909091)",
                "9 / 9 = 1 (left: 11 12 1) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 1 11) || 11 - 1 = 10 (left: 10)",
                "9 / 9 = 1 (left: 11 12 1) || 12 + 1 = 13 (left: 11 13)",
                "9 / 9 = 1 (left: 11 12 1) || 12 / 11 = 1.09 (left: 1 1.09) || 1 - 1.09 = -0.09 (left: -0.09)",
                "9 / 9 = 1 (left: 11 12 1) || 11 - 1 = 10 (left: || 11 * 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)"
            ]
        },
        "Input": "9 9 11 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "93": {
        "puzzle": "1 2 5 12",
        "Step 0": {
            "steps": [
                "5 + 12 = 17 (left: 1 2 17)",
                "2 * 5 = 10 (left: 1 10 12)",
                "1 * 2 = 2 (left: 2 5 12)",
                "12 - 5 = 7 (left: 1 2 7)",
                "5 + 12 = 17 (left: 1 2 17)",
                "12 - 5 = 7 (left: 1 2 7)",
                "12 - 1 = 11 (left: 2 5 11)",
                "5 + 12 = 17 (left: 1 2 17)",
                "5 * 12 = 60 (left: 1 2 ",
                "5 + 12 = 17 (left: 1 2 17)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                3.0,
                2.001,
                0.002,
                0.003,
                0.003,
                1.002,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 0.8",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 0.8",
                "7 <- 0.8",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 5 = 10 (left: 1 10 12)",
                "1 * 2 = 2 (left: 2 5 12)",
                "5 * 12 = 60 (left: 1 2  || 2 / 1 = 2 (left: 2)",
                "5 + 12 = 17 (left: 1 2 17)",
                "1 * 2 = 2 (left: 2 5 12)",
                "2 * 12 = 24 (left: 1 5 24)",
                "5 * 12 = 60 (left: 1 2  || 1 * 2 = 2 (left: 2)",
                "5 * 12 = 60 (left: 1 2  || 2 - 1 = 1 (left: 1)",
                "5 + 12 = 17 (left: 1 2 17)",
                "1 * 2 = 2 (left: 2 5 12)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                0.003,
                1.001,
                1.002,
                20.002,
                0.0,
                0.003,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- INIT",
                "2 <- 0.8",
                "3 <- 0.1",
                "4 <- 0.8",
                "5 <- 1.5",
                "6 <- INIT",
                "7 <- 1.5",
                "8 <- 0.8",
                "9 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "2 * 12 = 24 (left: 1 5 24) || 5 * 24 = 120 (left: 1 120)",
                "1 * 2 = 2 (left: 2 5 12)",
                "5 * 12 = 60 (left: 1 2  || Possible next steps:",
                "2 * 5 = 10 (left: 1 10 12) || 12 + 1 = 13 (left: 10 13)",
                "5 * 12 = 60 (left: 1 2  || 1 * 2 = 2 (left: 2)",
                "2 * 12 = 24 (left: 1 5 24) || 24 - 5 = 19 (left: 1 19)",
                "5 + 12 = 17 (left: 1 2 17)",
                "2 * 12 = 24 (left: 1 5 24) || 24 - 1 = 23 (left: 5 23)",
                "5 * 12 = 60 (left: 1 2  || 2 / 1 = 2 (left: 2)",
                "1 * 2 = 2 (left: 2 5 12) || 12 / 2 = 6 (left: 6 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.001,
                0.002,
                1.002,
                1.002,
                0.001,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 0.8",
                "1 <- 0.7",
                "2 <- INIT",
                "3 <- 1.5",
                "4 <- INIT",
                "5 <- INIT",
                "6 <- 1.5",
                "7 <- 0.8",
                "8 <- 1.5",
                "9 <- 0.8"
            ]
        },
        "Step 3": {
            "steps": [
                "5 * 12 = 60 (left: 1 2  || 1 * 2 = 2 (left: 2) ",
                "5 + 12 = 17 (left: 1 2 17) || 17 - 1 = 16 (left: 2 16)",
                "12 - 5 = 7 (left: 1 2 7)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24)",
                "1 * 2 = 2 (left: 2 5 12)",
                "12 - 5 = 7 (left: 1 2 7)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24)",
                "5 * 12 = 60 (left: 1 2  || 1 * 2 = 2 (left: 2)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24)",
                "5 * 12 = 60 (left: 1 2  || 1 * 2 = 2 (left: 2)"
            ],
            "Evaluation": [
                0.001,
                0.003,
                1.002,
                1.0,
                0.003,
                1.002,
                40.0,
                0.003,
                21.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 3.8",
                "2 <- 3.6",
                "3 <- INIT",
                "4 <- INIT",
                "5 <- 3.6",
                "6 <- 1.5",
                "7 <- 0.2",
                "8 <- 1.5",
                "9 <- 3.6"
            ]
        },
        "Step 4": {
            "steps": [
                "2 * 12 = 24 (left: 1 5 24) || 5 * 1 = 5 (left: 5 24)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 24 - 5 = 19 (left: 19)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 24 - 5 = 19 (left: 19)",
                "5 + 12 = 17 (left: 1 2 17)",
                "12 - 5 = 7 (left: 1 2 7)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 24 + 5 = 29 (left: 5 29)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24)",
                "1 * 2 = 2 (left: 2 5 12) || 12 - 5 = 7 (left: 2 7)",
                "2 * 12 = 24 (left: 1 5 24) || 24 - 1 = 23 (left: 5 23)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 24 - 5 = 19 (left: 19)"
            ],
            "Evaluation": [
                22.0,
                0.002,
                0.003,
                0.003,
                1.002,
                0.0,
                60.0,
                0.003,
                1.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 4.6",
                "2 <- 4.6",
                "3 <- 3.6",
                "4 <- 1.4",
                "5 <- 4.0",
                "6 <- 0.8",
                "7 <- 4.0",
                "8 <- 4.6",
                "9 <- 0.3"
            ]
        },
        "Step 5": {
            "steps": [
                "2 * 12 = 24 (left: 1 5 24) || 5 * 1 = 5 (left: 5 24)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 24 - 5 = 19 (left: 19)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 5 + 24 = 29 (left: 29)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 24 / 5 = 4.8 (left: 4.8)",
                "1 * 2 = 2 (left: 2 5 12) || 12 / 2 = 6 (left: 6 12)",
                "2 * 12 = 24 (left: 1 5 24) || 5 * 1 = 5 (left: 5 24) || 24 - 5 = 19 (left: 19)",
                "5 * 12 = 60 (left: 1 2  || 1 * 2 = 2 (left: 2)",
                "2 * 12 = 24 (left: 1 5 24) || 5 * 1 = 5 (left: 5 24) || 5 + 24 = 29 (left: 29)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 24 - 5 = 19 (left: 19 5)",
                "12 - 5 = 7 (left: 1 2 7) || 7 / 2 = 3.5 (left: 1 3.5)"
            ],
            "Evaluation": [
                20.0,
                0.003,
                0.001,
                0.001,
                20.002,
                0.003,
                0.002,
                0.003,
                60.0,
                0.001
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 5.4",
                "2 <- 4.6",
                "3 <- 1.5",
                "4 <- 4.6",
                "5 <- 5.0",
                "6 <- 5.8",
                "7 <- 5.4",
                "8 <- 4.6",
                "9 <- 5.0"
            ]
        },
        "Step 6": {
            "steps": [
                "12 - 5 = 7 (left: 1 2 7) || 2 * 7 = 14 (left: 1 14)",
                "1 * 2 = 2 (left: 2 5 12) || 12 / 2 = 6 (left: 6 12) || 12 / 6 = 2 (left: 2)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 9 / 3 = 3 (left: 3 27)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 24 / 5 = 4.8 (left: 4.8)",
                "2 * 12 = 24 (left: 1 5 24) || 5 * 1 = 5 (left: 5 24) || 24 - 5 = 19 (left: 19)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 24 - 5 = 19 (left: 19 5) || 19 * 5 = 95 (left: 95)",
                "1 * 2 = 2 (left: 2 5 12) || 12 / 2 = 6 (left: 6 12) || 12 - 6 = 6 (left: 6 12)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 24 + 5 = 29 (left: 29)",
                "2 * 12 = 24 (left: 1 5 24) || 5 * 1 = 5 (left: 5 24) || 24 - 5 = 19 (left: 19)"
            ],
            "Evaluation": [
                2.0,
                0.001,
                60.0,
                21.0,
                0.001,
                0.003,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 4.6",
                "2 <- 6.2",
                "3 <- 6.2",
                "4 <- 6.3",
                "5 <- 4.6",
                "6 <- 4.6",
                "7 <- 4.0",
                "8 <- 6.2",
                "9 <- 6.2"
            ]
        },
        "Step 7": {
            "steps": [
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 9 / 3 = 3 (left: 3 27) || 27 / 3 = 9 (left: 9)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 24 - 5 = 19 (left: 19)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 9 / 3 = 3 (left: 3 27) || 27 + 3 = 30 (left: 30)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 9 / 3 = 3 (left: 3 27) || 27 / 3 = 9 (left: 9)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 24 / 5 = 4.8 (left: 4.8)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 3 + 9 = 12 (left: 12 27)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 24 - 5 = 19 (left: 19 5)",
                "2 * 12 = 24 (left: 1 5 24) || 5 * 1 = 5 (left: 5 24) || 24 / 5 = 4.8 (left: 4.8)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 9 / 3 = 3 (left: 3 27) || Input: 4 16 8",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 9 / 3 = 3 (left: 3 27) || 3 + 27 = 30 (left: 30)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.003,
                0.001,
                0.002,
                0.002,
                60.0,
                0.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 6.2",
                "1 <- 7.6",
                "2 <- 4.6",
                "3 <- 5.8",
                "4 <- 4.0",
                "5 <- 7.6",
                "6 <- 6.2",
                "7 <- 6.2",
                "8 <- 5.8",
                "9 <- 3.8"
            ]
        },
        "Step 8": {
            "steps": [
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 9 / 3 = 3 (left: 3 27) || 3 * 27 = 81 (left: 81)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 24 - 5 = 19 (left: 19 5) || 19 / 5 = 3.8 (left: 3.8)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 5 - 24 = -19 (left: -19)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 24 - 5 = 19 (left: 19 5) || 19 * 5 = 95 (left: 95)",
                "2 * 12 = 24 (left: 1 5 24) || 5 * 1 = 5 (left: 5 24) || Input: 3 9 27",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 24 - 5 = 19 (left: 19 5) || 19 / 5 = 3.8 (left: 3.8)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 9 / 3 = 3 (left: 3 27) || 27 / 3 = 9 (left: 3 9)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 9 / 3 = 3 (left: 3 27) || 27 - 3 = 24 (left: 3 24)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 24 - 5 = 19 (left: 19 5) || 19 * 5 = 95 (left: 95)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 24 - 5 = 19 (left: 19)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                0.002,
                0.003,
                0.003,
                0.002,
                0.003,
                0.001,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 4.6",
                "1 <- 6.3",
                "2 <- 6.2",
                "3 <- 4.6",
                "4 <- 7.6",
                "5 <- 0.8",
                "6 <- 3.6",
                "7 <- 6.2",
                "8 <- 7.6",
                "9 <- 7.6"
            ]
        },
        "Step 9": {
            "steps": [
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 5 * 24 = 120 (left: 120)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 24 / 5 = 4.8 (left: 5 4.8)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 9 / 3 = 3 (left: 3 27) || 27 / 3 = 9 (left: 9 27)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 24 - 5 = 19 (left: 19)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 24 - 5 = 19 (left: 19 5) || 19 / 5 = 3.8 (left: 3.8)",
                "5 * 12 = 60 (left: 1 2  || 2 / 1 = 2 (left: 2)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 24 / 5 = 4.8 (left: 4.8)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 9 / 3 = 3 (left: 3 27) || 27 - 3 = 24 (left: 3 24)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 24 - 5 = 19 (left: 19 5) || 19 * 5 = 95 (left: 95)",
                "2 * 12 = 24 (left: 1 5 24) || 24 / 1 = 24 (left: 5 24) || 24 - 5 = 19 (left: 19 5) || 19 / 5 = 3.8 (left: 3.8)"
            ]
        },
        "Input": "1 2 5 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "94": {
        "puzzle": "2 7 7 8",
        "Step 0": {
            "steps": [
                "8 - 2 = 6 (left: 6 7 8)",
                "7 / 2 = 3.5 (left: 3.5 7 8)",
                "2 * 7 = 14 (left: 7 8 14)",
                "2 * 7 = 14 (left: 7 14 8)",
                "8 - 2 = 6 (left: 6 7 8)",
                "7 - 2 = 5 (left: 5 7 8)",
                "7 - 2 = 5 (left: 5 7 8)",
                "8 - 2 = 6 (left: 6 7 8)",
                "7 - 2 = 5",
                "8 + 2 = 10 (left: 7 7 10)"
            ],
            "Evaluation": [
                2.001,
                22.0,
                1.002,
                2.001,
                3.0,
                3.0,
                3.0,
                3.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 0.9",
                "1 <- 0.9",
                "2 <- 0.1",
                "3 <- 0.9",
                "4 <- 0.9",
                "5 <- 0.9",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- 0.1",
                "9 <- 0.9"
            ]
        },
        "Step 1": {
            "steps": [
                "8 + 2 = 10 (left: 7 7 10) || 7 * 7 = 49 (left: 10 49)",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17)",
                "7 / 2 = 3.5 (left: 3.5 7 8) || 7 + 8 = 15 (left: 15)",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17)",
                "8 + 2 = 10 (left: 7 7 10) || 7 * 7 = 49 (left: 10 49)",
                "8 + 2 = 10 (left: 7 7 10) || Input:",
                "8 - 2 = 6 (left: 6 7 8)",
                "7 + 7 = 14 (left: ",
                "7 / 2 = 3.5 (left: 3.5 7 8) || 8 - 3.5 = 4.5 (left: 4.5 8)",
                "8 + 2 = 10 (left: 7 7 10) || 7 * 7 = 49 (left: 10 49)"
            ],
            "Evaluation": [
                0.002,
                60.0,
                0.002,
                60.0,
                1.001,
                20.002,
                2.001,
                0.0,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.9",
                "2 <- 1.8",
                "3 <- INIT",
                "4 <- 1.6",
                "5 <- 1.3",
                "6 <- 1.8",
                "7 <- 0.9",
                "8 <- 1.3",
                "9 <- 1.8"
            ]
        },
        "Step 2": {
            "steps": [
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 17 - 7 = 10 (left: 10)",
                "8 + 2 = 10 (left: 7 7 10) || Possible",
                "7 / 2 = 3.5 (left: 3.5 7 8) || 8 - 3.5 = 4.5 (left: 4.5 8) || 8 - 4.5 = 3.5 (left: 3.5)",
                "8 - 2 = 6 (left: 6 7 8)",
                "8 - 2 = 6 (left: 6 7 8) || 7 - 6 = 1 (left: 1 8)",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 7 / 17 = 0.41176470588 (left: 0.41176470588)",
                "7 / 2 = 3.5 (left: 3.5 7 8) || 8 - 3.5 = 4.5 (left: 4.5 8) || 8 - 4.5 = 3.5 (left: 3.5)",
                "8 + 2 = 10 (left: 7 7 10) || 10 / 7 = 1.43 (left: 1.43 10)",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 7 * 17 = 119 (left: 119)",
                "7 / 2 = 3.5 (left: 3.5 7 8) || 8 - 3.5 = 4.5 (left: 4.5 8) || 8 / 4.5 = 1.7777777777777777 (left: 1.7777777777777777)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                2.001,
                40.0,
                0.003,
                0.003,
                0.0,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.9",
                "2 <- 1.1",
                "3 <- 0.6",
                "4 <- 0.9",
                "5 <- 1.8",
                "6 <- 2.4",
                "7 <- 0.9",
                "8 <- 0.1",
                "9 <- 1.8"
            ]
        },
        "Step 3": {
            "steps": [
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 17 - 7 = 10 (left: 10)",
                "8 + 2 = 10 (left: 7 7 10) || 7 * 7 = 49 (left: 10 49)",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 17 / 7 = 2.42 (left: 2.42)",
                "7 - 2 = 5 (left: 5 7 8) || 5 * 7 = 35 (left: 8 35)",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17)",
                "7 / 2 = 3.5 (left: 3.5 7 8) || 8 - 3.5 = 4.5 (left: 4.5 8) || 8 - 4.5 = 3.5 (left: 3.5 8)",
                "8 - 2 = 6 (left: 6 7 8) || 7 - 6 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 + 2 = 10 (left: 7 7 10) || 10 - 7 = 3 (left: 3 7)",
                "7 / 2 = 3.5 (left: 3.5 7 8) || 3.5 * 7 = 24.5 (left: 8 24.5)",
                "7 / 2 = 3.5 (left: 3.5 7 8) || 8 - 3.5 = 4.5 (left: 4.5 8) || 8 / 4.5 = 1.7777777777777777 (left: 8)"
            ],
            "Evaluation": [
                0.0,
                1.002,
                0.003,
                2.001,
                60.0,
                0.002,
                0.001,
                0.0,
                1.001,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.3",
                "2 <- INIT",
                "3 <- 2.4",
                "4 <- 1.8",
                "5 <- 1.1",
                "6 <- 3.4",
                "7 <- 3.4",
                "8 <- 2.4",
                "9 <- 1.1"
            ]
        },
        "Step 4": {
            "steps": [
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 7 * 17 = 119 (left: 119)",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 17 - 7 = 10 (left: 10)",
                "7 - 2 = 5 (left: 5 7 8)",
                "8 - 2 = 6 (left: 6 7 8) || 7 - 6 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "7 / 2 = 3.5 (left: 3.5 7 8) || 8 - 3.5 = 4.5 (left: 4.5 8) || 8 / 4.5 = 1.77777777778 (left: 1.77777777778 8)",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 17 / 7 = 2.42 (left: 2.42)",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 17 - 7 = 10 (left: 10)",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 7 / 17 \u2248 0.41 (left: 0.41)",
                "8 - 2 = 6 (left: 6 7 8) || 7 - 6 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 24 + 10 = 34 (left: 119 34 2.43)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                3.0,
                0.0,
                2.001,
                0.002,
                0.003,
                0.003,
                0.002,
                2.001
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 3.4",
                "2 <- INIT",
                "3 <- 3.4",
                "4 <- 0.9",
                "5 <- 3.4",
                "6 <- 1.1",
                "7 <- 1.8",
                "8 <- 3.1",
                "9 <- 1.8"
            ]
        },
        "Step 5": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 8) || 8 - 3.5 = 4.5 (left: 4.5 8) || 8 - 4.5 = 3.5 (left: 3.5)",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 17 / 7 = 2.43 (left: 2.43)",
                "7 - 2 = 5 (left: 5 7 8)",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 7 * 17 = 119 (left: 119)",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17)",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 17 / 7 = 2.42857142857 (left: 2.42857142857)",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 7 * 17 = 119 (left: 119)",
                "7 / 2 = 3.5 (left: 3.5 7 8) || 8 - 3.5 = 4.5 (left: 4.5 8) || 8 - 4.5 = 3.5 (left: 3.5 8)",
                "8 + 2 = 10 (left: 7 7 10) || 7 * 7 = 49 (left: 10 49) || 49 / 10 = 4.9 (left: 4.9)",
                "7 / 2 = 3.5 (left: 3.5 7 8) || 8 - 3.5 = 4.5 (left: 4.5 8) || 8 / 4.5 = 1.7777777777777777 (left: 1.7777777777777777)"
            ],
            "Evaluation": [
                0.002,
                0.001,
                2.0,
                0.003,
                60.0,
                0.002,
                0.002,
                0.002,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- INIT",
                "2 <- 1.1",
                "3 <- 5.4",
                "4 <- 2.4",
                "5 <- 0.9",
                "6 <- 5.4",
                "7 <- 5.4",
                "8 <- 3.4",
                "9 <- 1.5"
            ]
        },
        "Step 6": {
            "steps": [
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 7 * 17 = 119 (left: 119)",
                "8 - 7 = 1 (left: 2 7 1)",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 17 / 7 = 2.43 (left: 2.43)",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 7 + 17 = 24",
                "8 - 2 = 6 (left: 6 7 8) || 7 - 6 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 + 2 = 10 (left: 7 7 10) || Possible next steps:",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 17 - 7 = 10 (left: 10)",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 17 - 7 = 10 (left: 10)",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 7 * 17 = 119 (left: 119)",
                "8 + 2 = 10 (left: 7 7 10) || Input: || Please provide a list of numbers to determine the possible next steps."
            ],
            "Evaluation": [
                0.003,
                3.0,
                0.003,
                0.003,
                0.002,
                0.003,
                0.001,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 5.4",
                "2 <- 1.8",
                "3 <- 5.4",
                "4 <- 5.4",
                "5 <- 5.2",
                "6 <- INIT",
                "7 <- 4.2",
                "8 <- 0.9",
                "9 <- 3.4"
            ]
        },
        "Step 7": {
            "steps": [
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 7 * 17 = 119 (left: 119)",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 10 * 119 = 1190",
                "7 / 2 = 3.5 (left: 3.5 7 8) || 8 - 3.5 = 4.5 (left: 4.5 8) || 8 / 4.5 = 1.7777777777777777 (left: 1.7777777777777777 8)",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || Input: 24 3",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 17 / 7 = 2.43 (left: 2.43)",
                "7 - 2 = 5 (left: 5 7 8) || 5 / 7 = 0.714 (",
                "8 - 2 = 6 (left: 6 7 8)",
                "7 - 2 = 5 (left: 5 7 8) || 8 / 5 = 1.6 (left: 1.6 8)",
                "8 + 2 = 10 (left: 7 7 10) || 7 - 7 = 0 (left: 0 10)",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 17 / 7 = 2.42857142857 (left: 2.42857142857)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                2.001,
                1.001,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.4",
                "2 <- 3.4",
                "3 <- 3.4",
                "4 <- 2.4",
                "5 <- 2.4",
                "6 <- 3.4",
                "7 <- 1.3",
                "8 <- 0.9",
                "9 <- 2.4"
            ]
        },
        "Step 8": {
            "steps": [
                "8 - 2 = 6 (left: 6 7 8) || 7 - 6 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 - 2 = 6 (left: 6 7 8) || 7 - 6 = 1 (left: 1 8) || 1 * 8 = 8 (left: 8)",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 17 / 7 = 2.43 (left: 2.43)",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 7 * 17 = 119 (left: 119)",
                "8 - 2 = 6 (left: 6 7 8) || 7 - 6 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 - 2 = 6 (left: 6 7 8) || 7 - 6 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8)",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 17 - 7 = 10 (left: 10)",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || Input: 24 36",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17)",
                "8 - 2 = 6 (left: 6 7 8) || 7 - 6 = 1 (left: 1 8) || 8 / 1 = 8 (left: 8 8)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.003,
                0.0,
                0.001,
                0.003,
                0.003,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 5.4",
                "2 <- 0.0",
                "3 <- 5.4",
                "4 <- 0.4",
                "5 <- 5.4",
                "6 <- 1.8",
                "7 <- 2.4",
                "8 <- 1.5",
                "9 <- 5.4"
            ]
        },
        "Step 9": {
            "steps": [
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 7 * 17 = 119 (left: 119) ",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 17 - 7 = 10 (left: 10)",
                "8 - 2 = 6 (left: 6 7 8) || 7 - 6 = 1 (left: 1 8)",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || Input: 24 10 2.43 119",
                "8 - 2 = 6 (left: 6 7 8) || 7 / 6 = 1.1666666666666667 (left: 1.1666666666666667 8)",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 17 / 7 = 2.42857142857 (left: 2.42857142857)",
                "7 / 2 = 3.5 (left: 3.5 7 8) || 8 - 3.5 = 4.5 (left: 4.5 8) || 4.5 * 8 = 36 (left: 36)",
                "8 - 2 = 6 (left: 6 7 8) || 7 - 6 = 1 (left: 1 8) || 8 - 1 = 7 (left: 7)",
                "8 + 2 = 10 (left: 7 7 10) || Input: || It seems like the input is missing. Please provide the numbers to continue finding possible next steps.",
                "8 + 2 = 10 (left: 7 7 10) || 10 + 7 = 17 (left: 7 17) || 24 + 10 = 34 (left: 34 119 2.43)"
            ]
        },
        "Input": "2 7 7 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "95": {
        "puzzle": "4 4 11 13",
        "Step 0": {
            "steps": [
                "11 + 4 = 15 (left: 4 15 13)",
                "4 / 4 = 1 (left: 1 11 13)",
                "4 * 4 = 16 (left: 16 11 13)",
                "4 - 4 = 0 (left: 0 11 13)",
                "11 + 4 = 15 (left: 4 15 13)",
                "4 / 4 = 1 (left: 1 11 13)",
                "4 / 4 = 1 (left: 1 11 13)",
                "11 - 4 = 7 (left: 4 7 13)",
                "13 - 4 = 9 (left: 4 11 ",
                "11 + 4 = 15 (left: 4 15 13)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                3.0,
                40.0,
                3.0,
                0.003,
                0.003,
                3.0,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.3",
                "4 <- 0.3",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- INIT",
                "8 <- INIT",
                "9 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "4 - 4 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24)",
                "4 * 4 = 16 (left: 16 11 13)",
                "4 / 4 = 1 (left: 1 11 13)",
                "4 - 4 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13)",
                "4 - 4 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2)",
                "4 * 4 = 16 (left: 11 13 16)",
                "11 + 4 = 15 (left: 4 15 13)",
                "13 - 4 = 9 (left: 4 11 ",
                "11 + 4 = 15 (left: 4 15 13)",
                "4 - 4 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2 13)"
            ],
            "Evaluation": [
                60.0,
                3.0,
                0.003,
                60.0,
                40.001,
                40.001,
                2.001,
                1.0,
                1.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 0.3",
                "2 <- 0.4",
                "3 <- 1.0",
                "4 <- 1.4",
                "5 <- 1.3",
                "6 <- 1.3",
                "7 <- 1.4",
                "8 <- 1.4",
                "9 <- 0.7"
            ]
        },
        "Step 2": {
            "steps": [
                "4 * 4 = 16 (left: 11 13 16) || 11 * 13 = 143 (left: 16)",
                "4 - 4 = 0 (left: 0 11 13) || 5 + 5 = ",
                "11 + 4 = 15 (left: 4 15 13) || 15 / 4 = 3.75 (left: 3.75 13)",
                "4 - 4 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || Input: 3 9 27",
                "4 - 4 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 2 - 0 = 2 (left: 2)",
                "4 - 4 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.84615384615 (left: 0.84615384615)",
                "4 - 4 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 13 - 11 = 2 (left: 2)",
                "4 - 4 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 2 / 0 = undefined (cannot divide by zero)",
                "4 - 4 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 2 / 0 is undefined ",
                "11 - 4 = 7 (left: 4 7 13) || 4 * 7 = 28 (left: 28 13)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.002,
                0.001,
                0.001,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.3",
                "2 <- 1.5",
                "3 <- 1.0",
                "4 <- 1.0",
                "5 <- 0.3",
                "6 <- 1.3",
                "7 <- 1.5",
                "8 <- 1.5",
                "9 <- 1.5"
            ]
        },
        "Step 3": {
            "steps": [
                "4 - 4 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2) || 0 + 2 = 2",
                "4 - 4 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 13 / 11 = 1.18 (left: 1.18)",
                "4 * 4 = 16 (left: 11 13 16) || 13 / 11 = 1.18 (left: 1.18 16)",
                "4 - 4 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || Input: 3 12 3",
                "4 - 4 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 - 0 = 24 (left: 24)",
                "4 - 4 = 0 (left: 0 11 13) || 13 - 0",
                "4 - 4 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "4 * 4 = 16 (left: 11 13 16) || 16 / 13 = 1.23076923077 (left:",
                "4 * 4 = 16 (left: 11 13 16) || 16 - 13 = 3 (left: 11 3)",
                "4 * 4 = 16 (left: 11 13 16) || 11 * 13 = 143 (left: 143 16)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                2.001,
                0.003,
                60.0,
                0.003,
                0.003,
                0.001,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.0",
                "2 <- 3.4",
                "3 <- 1.3",
                "4 <- 0.3",
                "5 <- 1.3",
                "6 <- 1.3",
                "7 <- 0.3",
                "8 <- 1.5",
                "9 <- 1.0"
            ]
        },
        "Step 4": {
            "steps": [
                "4 - 4 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 / 0 = undefined (left: 0 24)",
                "4 - 4 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 5 * 7 = 35 (left: 3 35)",
                "4 - 4 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 24 - 0 = 24 (left: 24) || Answer: (4 - 4) + (11 + 13) = 24",
                "4 - 4 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "4 - 4 = 0 (left: 0 11 13) || 13 - 11 = 2 (left: 0 2)",
                "4 - 4 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 / 13 = 0.8461538461538461 (left: 0.8461538461538461)",
                "4 - 4 = 0 (left: 0 11 13) || 11 - 0 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "4 - 4 = 0 (left: 0 11 13) || 11 / 0 = undefined",
                "4 * 4 = 16 (left: 11 13 16) || 16 - 11 = 5 (left: 5 13)",
                "4 - 4 = 0 (left: 0 11 13) || 11 + 13 = 24 (left: 0 24) || 0 - 24 = -24 (left: -24)"
            ]
        },
        "Input": "4 4 11 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "96": {
        "puzzle": "1 1 4 7",
        "Step 0": {
            "steps": [
                "7 - 4 = 3 (left: 1 3 7)",
                "1 * 1 = 1 (left: 1 4 7)",
                "7 - 1 = 6 (left: 1 4 6)",
                "7 - 1 = 6 (left: 1 4 6)",
                "7 - 4 = 3 (left: 1 3 7)",
                "7 - 1 = 6 (left: 1 4 6)",
                "7 - 4 = 3 (left: 1 4 3)",
                "7 - 4 = 3 (left: 1 3 7)",
                "4 + 1 = 5 (left: 5 4 ",
                "4 + 1 = 5 (left: 1 5 7)"
            ],
            "Evaluation": [
                3.0,
                2.001,
                60.0,
                40.001,
                3.0,
                60.0,
                20.0,
                3.0,
                2.0,
                1.002
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.5",
                "2 <- INIT",
                "3 <- 0.2",
                "4 <- 0.5",
                "5 <- 0.2",
                "6 <- INIT",
                "7 <- 0.3",
                "8 <- 0.2",
                "9 <- 0.5"
            ]
        },
        "Step 1": {
            "steps": [
                "7 - 1 = 6 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "7 - 1 = 6 (left: 1 4 6) || 6 - 1 = 5 (left: 4 5)",
                "1 * 1 = 1 (left: 1 4 7)",
                "7 - 1 = 6 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "7 - 1 = 6 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "7 - 1 = 6 (left: 1 4 6) || 4 / 1 = 4 (",
                "7 - 1 = 6 (left: 1 4 6)",
                "7 - 1 = 6 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6)",
                "7 - 1 = 6 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "7 - 1 = 6 (left: 1 4 6) || 1 * 6 = 6 (left: 4 6)"
            ],
            "Evaluation": [
                60.0,
                22.0,
                21.001,
                0.002,
                1.002,
                0.003,
                60.0,
                60.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.2",
                "2 <- 0.5",
                "3 <- 0.5",
                "4 <- 1.0",
                "5 <- 0.3",
                "6 <- 1.9",
                "7 <- 0.3",
                "8 <- 1.9",
                "9 <- 0.3"
            ]
        },
        "Step 2": {
            "steps": [
                "7 - 1 = 6 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "7 - 1 = 6 (left: 1 4 6) || 4 + 6 = 10 (left: 1 10)",
                "7 - 1 = 6 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "7 - 1 = 6 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)",
                "7 - 1 = 6 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "7 - 1 = 6 (left: 1 4 6) || ",
                "7 - 1 = 6 (left: 1 4 6) || 1 * 6 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "7 - 1 = 6 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "7 - 1 = 6 (left: 1 4 6) || 1 * 6 = 6 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "7 - 1 = 6 (left: 1 4 6) || 3 * 9 = 27 (left: 27)"
            ],
            "Evaluation": [
                60.0,
                60.0,
                21.001,
                60.0,
                60.0,
                0.003,
                60.0,
                0.002,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.9",
                "2 <- 2.2",
                "3 <- 2.6",
                "4 <- 2.4",
                "5 <- 1.6",
                "6 <- 2.3",
                "7 <- 2.2",
                "8 <- 2.6",
                "9 <- 1.2"
            ]
        },
        "Step 3": {
            "steps": [
                "7 - 1 = 6 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 * 1 = 24 (left: 24)",
                "7 - 1 = 6 (left: 1 4 6) || 1 * 6 = 6 (left: 4 6) || 9 - 3 = 6 (left: 6 1)",
                "7 - 1 = 6 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5) || 1 / 1.5 = 0.6666666666666666 (left: 0.6666666666666666)",
                "7 - 1 = 6 (left: 1 4 6) || 1 * 6 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: 4 * (1 * (7 - 1)) = 24",
                "7 - 1 = 6 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: 1 * (4 * (7 - 1)) = 24",
                "7 - 1 = 6 (left: 1 4 6) || 4 / 1 = 4 (left:",
                "7 - 1 = 6 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "7 - 1 = 6 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5) || 1 / 1.5 = 0.6666666666666666 (left: 0.6666666666666666)",
                "7 - 1 = 6 (left: 1 4 6) || 1 * 6 = 6 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (1 * (7 - 1)) * 4 = 24",
                "1 * 1 = 1 (left: 1 4 7) || 4 - 1 = 3 (left: 3 7)"
            ]
        },
        "Input": "1 1 4 7",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "97": {
        "puzzle": "1 1 10 13",
        "Step 0": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 13)",
                "1 * 1 = 1 (left: 1 10 13)",
                "10 + 1 = 11 (left: 1 11 13)",
                "10 - 1 = 9 (left: 1 9 13)",
                "13 - 10 = 3 (left: 1 3 13)",
                "1 * 10 = 10 (left: 10 1 13)",
                "",
                "10 + 1 = 11 (left: 1 11 13)",
                "13 - 1 = 12 (left: 1 10 ",
                "10 + 1 = 11 (left: 1 11 13)"
            ],
            "Evaluation": [
                1.002,
                1.002,
                0.003,
                1.002,
                3.0,
                41.0,
                0.003,
                0.003,
                40.0,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.5",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 0.8",
                "5 <- INIT",
                "6 <- INIT",
                "7 <- 0.5",
                "8 <- INIT",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 10 13)",
                "1 * 10 = 10 (left: 10 1 13) || Possible",
                "1 + 10 = 11 (left: 11 11 13)",
                "10 + 1 = 11 (left: 1 11 13)",
                "13 - 1 = 12 (left: 1 10  || 1 - 10 = -9 (left: -9)",
                "1 * 10 = 10 (left: 10 1 13)",
                "10 + 1 = 11 (left: 1 11 13)",
                "1 * 10 = 10 (left: 10 1 13) || 13 - 1 = 12 (left: 10 12)",
                "10 + 1 = 11 (left: 1 11 13)",
                "1 + 10 = 11 (left: 11 10 13)"
            ],
            "Evaluation": [
                2.001,
                0.003,
                0.003,
                0.003,
                20.001,
                20.002,
                2.001,
                1.002,
                0.002,
                1.002
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.5",
                "2 <- 0.5",
                "3 <- INIT",
                "4 <- 1.9",
                "5 <- 1.4",
                "6 <- 0.5",
                "7 <- INIT",
                "8 <- 0.1",
                "9 <- 0.5"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 10 = 10 (left: 10 1 13) || 13 - 10 = 3 (left: 3 13)",
                "1 * 10 = 10 (left: 10 1 13) || 10 / 1 = 10 (left: 10 13)",
                "1 * 10 = 10 (left: 10 1 13) || 13 - 1 = 12 (left: 10 12)",
                "10 + 1 = 11 (left: 1 11 13)",
                "1 + 10 = 11 (left: 11 10 13) || 13 + 11 = 24 (left: 10 24)",
                "13 - 1 = 12 (left: 1 10  || 1 - 10 = -9 (left: -9) || There are no possible next steps with the given input.",
                "1 * 10 = 10 (left: 10 1 13) || 13 - 1 = 12 (left: 10 12)",
                "13 - 1 = 12 (left: 1 10 ",
                "1 * 1 = 1 (left: 1 10 13) || 13 - 1 = 12 (left: 10 12)",
                "1 * 10 = 10 (left: 10 1 13) || 10 * 1 = 10 (left: 10 13)"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.003,
                0.003,
                0.003,
                0.003,
                1.002,
                60.0,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 2.7",
                "1 <- 0.8",
                "2 <- 1.4",
                "3 <- 0.4",
                "4 <- 1.5",
                "5 <- 0.8",
                "6 <- 1.4",
                "7 <- 2.7",
                "8 <- 1.4",
                "9 <- 2.7"
            ]
        },
        "Step 3": {
            "steps": [
                "13 - 1 = 12 (left: 1 10  || 10 - 1 = 9 (left: 9)",
                "13 - 1 = 12 (left: 1 10  || 9 * 3 = 27 (left: 27 27)",
                "13 - 1 = 12 (left: 1 10  || 1 - 10 = -9 (left: -9) || There are no valid operations that can be performed with the given input to reach the target numbers.",
                "13 - 10 = 3 (left: 1 3 13) || 13 - 1 = 12 (left: 3 12)",
                "1 * 10 = 10 (left: 10 1 13) || 13 - 1 = 12 (left: 10 12)",
                "13 - 1 = 12 (left: 1 10  || 10 / 1 = 10 (left: 10)",
                "13 - 1 = 12 (left: 1 10  || 1 - 10 = -9 (left: -9) || There are no possible next steps for the input -9.",
                "13 - 1 = 12 (left: 1 10  || 1 * 10 = 10 (left: 10)",
                "13 - 1 = 12 (left: 1 10  || 1 - 10 = -9 (left: -9) || There are no possible next steps with the input of -9.",
                "13 - 1 = 12 (left: 1 10  || 1 * 10 = 10 (left: 10)"
            ],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                1.002,
                0.002,
                0.003,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 0.5",
                "2 <- 2.7",
                "3 <- 0.5",
                "4 <- 2.7",
                "5 <- 1.6",
                "6 <- 3.4",
                "7 <- 1.5",
                "8 <- 2.7",
                "9 <- 0.8"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 10 = 10 (left: 10 1 13) || 10 / 1 = 10 (left: 10 13)",
                "1 * 10 = 10 (left: 10 1 13) || 10 * 1 = 10 (left: 10 13)",
                "13 - 1 = 12 (left: 1 10  || 10 / 1 = 10 (left: 10)",
                "1 * 10 = 10 (left: 10 1 13) || 10 / 1 = 10 (left: 10 13)",
                "13 - 1 = 12 (left: 1 10  || 1 * 10 = 10 (left: 10)",
                "10 + 1 = 11 (left: 1 11 13) || 1 * 11 = 11 (left: 11 13)",
                "1 * 10 = 10 (left: 10 1 13) || 13 - 1 = 12 (left: 10 12) || 12 - 10 = 2 (left: 2)",
                "1 * 10 = 10 (left: 10 1 13) || 13 - 10 = 3 (left: 1 3)",
                "13 - 1 = 12 (left: 1 10  || 10 - 1 = 9 (left: 9)",
                "13 - 1 = 12 (left: 1 10  || 10 + 1 = 11 (left: 11)"
            ],
            "Evaluation": [
                1.001,
                0.003,
                0.001,
                1.0,
                0.002,
                60.0,
                0.002,
                1.001,
                0.001,
                0.001
            ],
            "Resampling": [
                "0 <- 2.7",
                "1 <- 2.7",
                "2 <- 2.7",
                "3 <- 4.5",
                "4 <- 0.8",
                "5 <- 4.5",
                "6 <- 2.7",
                "7 <- 4.5",
                "8 <- 4.5",
                "9 <- 1.5"
            ]
        },
        "Step 5": {
            "steps": [
                "13 - 1 = 12 (left: 1 10  || 10 - 1 = 9 (left: 9)",
                "13 - 1 = 12 (left: 1 10  || 10 / 1 = 10 (left: 10)",
                "13 - 1 = 12 (left: 1 10  || 10 * 1 = 10 (left: 10)",
                "10 + 1 = 11 (left: 1 11 13) || 1 * 11 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "13 - 1 = 12 (left: 1 10  || 1 / 10 = 0.1 (left: 0.1)",
                "10 + 1 = 11 (left: 1 11 13) || 1 * 11 = 11 (left: 11 13) || 11 / 13 = 0.846153846 (left: 0.846153846)",
                "13 - 1 = 12 (left: 1 10  || 10 * 1 = 10 (left: 10)",
                "10 + 1 = 11 (left: 1 11 13) || 1 * 11 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "10 + 1 = 11 (left: 1 11 13) || 1 * 11 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 * 10 = 10 (left: 10 1 13) || 13 - 1 = 12 (left: 10 12)"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                0.003,
                0.001,
                0.0,
                0.001,
                0.002,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 2.7",
                "1 <- 0.5",
                "2 <- 4.5",
                "3 <- 1.0",
                "4 <- 4.5",
                "5 <- 4.5",
                "6 <- 2.7",
                "7 <- 2.7",
                "8 <- 0.5",
                "9 <- 4.5"
            ]
        },
        "Step 6": {
            "steps": [
                "13 - 1 = 12 (left: 1 10  || 1 * 10 = 10 (left: 10)",
                "1 * 10 = 10 (left: 10 1 13) || 10 - 1 = 9 (left: 9 13)",
                "10 + 1 = 11 (left: 1 11 13) || 1 * 11 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 * 1 = 1 (left: 1 10 13) || 13 - 1 = 12 (left: 10 12)",
                "10 + 1 = 11 (left: 1 11 13) || 1 * 11 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "10 + 1 = 11 (left: 1 11 13) || 1 * 11 = 11 (left: 11 13) || 11 / 13 = 0.8461538461538461 (left: 0.8461538461538461)",
                "13 - 1 = 12 (left: 1 10  || 10 - 1 = 9 (left: 9)",
                "13 - 1 = 12 (left: 1 10  || 10 + 1 = 11 (left: 11)",
                "1 * 10 = 10 (left: 10 1 13) || 13 - 10 = 3 (left: 10 3)",
                "10 + 1 = 11 (left: 1 11 13) || 1 * 11 = 11 (left: 11 13) || 13 / 11 = 1.1818181818181819 (left: 1.1818181818181819)"
            ],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.001,
                0.0,
                0.0,
                0.002,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.7",
                "1 <- 2.7",
                "2 <- 4.5",
                "3 <- 2.7",
                "4 <- 2.7",
                "5 <- 4.5",
                "6 <- 3.4",
                "7 <- 0.5",
                "8 <- 4.0",
                "9 <- 4.5"
            ]
        },
        "Step 7": {
            "steps": [
                "1 * 10 = 10 (left: 10 1 13) || 13 - 1 = 12 (left: 10 12) || 10 * 12 = 120 (left: 120)",
                "13 - 1 = 12 (left: 1 10  || 10 / 1 = 10 (left: 10)",
                "10 + 1 = 11 (left: 1 11 13) || 1 * 11 = 11 (left: 11 13) || 11 / 13 = 0.846 (left: 0.846)",
                "13 - 1 = 12 (left: 1 10  || 10 + 1 = 11 (left: 11)",
                "13 - 1 = 12 (left: 1 10  || 10 / 1 = 10 (left: 10)",
                "10 + 1 = 11 (left: 1 11 13) || 1 * 11 = 11 (left: 11 13) || 11 / 13 = 0.846 (left: 0.846)",
                "1 * 10 = 10 (left: 10 1 13) || 13 - 1 = 12 (left: 10 12) || 10 * 12 = 120 (left: 120)",
                "1 * 10 = 10 (left: 10 1 13) || 13 / 10 = 1.3 (left: 1.3 13)",
                "1 * 10 = 10 (left: 10 1 13) || 10 / 1 = 10 (left: 10 13) || 10 * 13 = 130 (left: 130)",
                "10 + 1 = 11 (left: 1 11 13) || 1 * 11 = 11 (left: 11 13) || Possible next steps:"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                0.002,
                0.003,
                0.003,
                0.002,
                0.001,
                0.001,
                0.003
            ],
            "Resampling": [
                "0 <- 0.5",
                "1 <- 1.5",
                "2 <- 4.5",
                "3 <- 0.5",
                "4 <- 3.4",
                "5 <- 1.5",
                "6 <- 4.5",
                "7 <- 4.3",
                "8 <- 0.8",
                "9 <- 1.5"
            ]
        },
        "Step 8": {
            "steps": [
                "1 * 10 = 10 (left: 10 1 13) || 10 * 1 = 10 (left: 10 13)",
                "1 * 10 = 10 (left: 10 1 13) || 10 - 1 = 9 (left: 9 13)",
                "10 + 1 = 11 (left: 1 11 13) || 1 * 11 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2 13)",
                "1 * 10 = 10 (left: 10 1 13) || 10 - 1 = 9 (left: 9 13)",
                "1 * 10 = 10 (left: 10 1 13) || 13 - 1 = 12 (left: 10 12) || 10 / 12 = 0.8333 (left: 0.8333)",
                "1 * 10 = 10 (left: 10 1 13) || Input: 5 3 7 1",
                "10 + 1 = 11 (left: 1 11 13) || 1 * 11 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 * 10 = 10 (left: 10 1 13) || 10 / 1 = 10 (left: 10 13) || Input: 23 25 29",
                "13 - 1 = 12 (left: 1 10  || 1 * 10 = 10 (left: 10)",
                "1 * 10 = 10 (left: 10 1 13) || 10 * 1 = 10 (left: 10 13)"
            ],
            "Evaluation": [
                0.001,
                1.001,
                0.001,
                0.003,
                0.003,
                0.003,
                0.003,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 4.5",
                "1 <- 4.5",
                "2 <- 4.5",
                "3 <- 2.7",
                "4 <- 4.3",
                "5 <- 4.5",
                "6 <- 2.7",
                "7 <- 4.5",
                "8 <- 1.5",
                "9 <- 4.5"
            ]
        },
        "Step 9": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 13) || 1 * 11 = 11 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "10 + 1 = 11 (left: 1 11 13) || 1 * 11 = 11 (left: 11 13) || 13 / 11 = 1.18181818182 (left: 1.18181818182)",
                "10 + 1 = 11 (left: 1 11 13) || 1 * 11 = 11 (left: 11 13) || 5 / 5 = ",
                "13 - 1 = 12 (left: 1 10  || 1 * 10 = 10 (left: 10)",
                "1 * 10 = 10 (left: 10 1 13) || 10 / 1 = 10 (left: 10 13) || 10 / 13 \u2248 0.769231 (left: 0.769231)",
                "10 + 1 = 11 (left: 1 11 13) || 1 * 11 = 11 (left: 11 13) || 11 / 13 \u2248 0.846 (left: 0.846)",
                "13 - 1 = 12 (left: 1 10  || 10 - 10 = 0 (left: 0)",
                "10 + 1 = 11 (left: 1 11 13) || 1 * 11 = 11 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 * 10 = 10 (left: 10 1 13) || 13 + 1 = 14 (left: 10 14)",
                "10 + 1 = 11 (left: 1 11 13) || 1 * 11 = 11 (left: 11 13) || 11 / 13 = 0.8461538461538461 (left: 0.8461538461538461)"
            ]
        },
        "Input": "1 1 10 13",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "98": {
        "puzzle": "4 6 6 6",
        "Step 0": {
            "steps": [
                "6 * 4 = 24 (left: 6 6 24)",
                "6 / 4 = 1.5 (left: 1.5 6 6)",
                "4 * 6 = 24 (left: 6 6 24)",
                "4 * 6 = 24 (left: 6 6 24)",
                "6 + 4 = 10 (left: 6 6 10)",
                "4 * 6 = 24 (left: 6 6 24)",
                "6 - 4 = 2 (left: 2 6 6)",
                "6 + 4 = 10 (left: 6 6 10)",
                "6 - 4 = 2",
                "6 + 4 = 10 (left: 6 6 10)"
            ],
            "Evaluation": [
                0.002,
                3.0,
                1.002,
                0.003,
                40.001,
                1.001,
                60.0,
                60.0,
                0.003,
                21.001
            ],
            "Resampling": [
                "0 <- 0.6",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 0.6",
                "4 <- 0.6",
                "5 <- 0.4",
                "6 <- 0.7",
                "7 <- 0.7",
                "8 <- 0.7",
                "9 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "6 - 4 = 2 (left: 2 6 6) || 6 - 2 = 4 (left: 4 6)",
                "6 / 4 = 1.5 (left: 6 1.5 6)",
                "6 * 4 = 24 (left: 6 6 24)",
                "6 - 4 = 2 (left: 2 6 6) || 6 - 2 = 4 (left: 4 6)",
                "6 - 4 = 2 (left: 2 6 6) || 6 - 2 = 4 (left: 4 6)",
                "6 + 4 = 10 (left: 6 6 10) || Input: 1 2",
                "6 + 4 = 10 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10)",
                "6 + 4 = 10 (left: 6 6 10) || 10 * 6 = 60 (left: 6 60)",
                "6 + 4 = 10 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10)",
                "6 - 4 = 2 (left: 2 6 6)"
            ],
            "Evaluation": [
                60.0,
                41.0,
                2.001,
                60.0,
                60.0,
                0.002,
                40.001,
                0.003,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.6",
                "2 <- 1.0",
                "3 <- 1.6",
                "4 <- 1.6",
                "5 <- INIT",
                "6 <- 1.1",
                "7 <- 0.6",
                "8 <- 1.4",
                "9 <- 1.0"
            ]
        },
        "Step 2": {
            "steps": [
                "6 - 4 = 2 (left: 2 6 6) || 6 - 2 = 4 (left: 4 6) || 6 - 4 = 2 (left: 2)",
                "6 + 4 = 10 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "6 - 4 = 2 (left: 2 6 6) || 6 - 2 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "6 + 4 = 10 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10) || 1 * 10 = 10 (left: 10)",
                "6 + 4 = 10 (left: 6 6 10) || 6 / 6 = 1 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "6 * 4 = 24 (left: 6 6 24)",
                "6 / 4 = 1.5 (left: 6 1.5 6) || 6 + 1.5 = 7.5 (left: 7.5 6)",
                "6 - 4 = 2 (left: 2 6 6) || 6 * 2 = 12 (left: 6 12)",
                "6 - 4 = 2 (left: 2 6 6) || 6 - 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "6 - 4 = 2 (left: 2 6 6) || 6 - 2 = 4 (left: 4 6) || 3 + 9 = 12 (left: 12)"
            ],
            "Evaluation": [
                0.001,
                0.002,
                0.001,
                0.002,
                0.001,
                1.002,
                0.003,
                0.003,
                60.0,
                0.001
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.9",
                "2 <- 1.0",
                "3 <- 1.9",
                "4 <- 2.8",
                "5 <- 0.4",
                "6 <- 1.1",
                "7 <- INIT",
                "8 <- 1.1",
                "9 <- 1.0"
            ]
        },
        "Step 3": {
            "steps": [
                "6 - 4 = 2 (left: 2 6 6) || 6 - 2 = 4 (left: 4 6) || 6 * 4 = 24 (left: 24)",
                "6 - 4 = 2 (left: 2 6 6) || 6 - 2 = 4 (left: 4 6)",
                "6 - 4 = 2 (left: 2 6 6) || 6 - 2 = 4 (left: 4 6) || 9 / 3 = 3 (left: 3 27)",
                "6 - 4 = 2 (left: 2 6 6) || 6 * 2 = 12 (left: 6 12)",
                "6 - 4 = 2 (left: 2 6 6) || 6 - 2 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 4) * (6 + 6) = 24",
                "6 + 4 = 10 (left: 6 6 10) || 10 * 6 = 60 (left:",
                "6 / 4 = 1.5 (left: 6 1.5 6) || 6 * 1.5 = 9 (left: 6 9)",
                "6 / 4 = 1.5 (left",
                "6 / 4 = 1.5 (left: 6 1.5 6) || 6 + 1.5 = 7.5 (left: 6 7.5)",
                "6 - 4 = 2 (left: 2 6 6) || 6 - 2 = 4 (left: 4 6) || 3 + 9 = 12 (left: 12 27)"
            ]
        },
        "Input": "4 6 6 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "99": {
        "puzzle": "5 5 7 7",
        "Step 0": {
            "steps": [
                "7 + 5 = 12 (left: 5 7 12)",
                "5 / 5 = 1 (left: 1 7 7)",
                "7 - 5 = 2 (left: 2 7 7)",
                "7 / 5 = 1.4 (left: 1.4 5 7)",
                "7 - 5 = 2 (left: 2 5 7)",
                "5 - 5 = 0 (left: 0 7 7)",
                "7 / 5 = 1.4 (left: 1.4 7 7)",
                "7 + 5 = 12 (left: 5 7 12)",
                "7 / 5 = 1 (left: 5 7 ",
                "7 + 5 = 12 (left: 5 7 12)"
            ],
            "Evaluation": [
                41.0,
                2.001,
                3.0,
                3.0,
                3.0,
                3.0,
                3.0,
                3.0,
                0.0,
                21.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.0",
                "2 <- 0.0",
                "3 <- 0.9",
                "4 <- 0.9",
                "5 <- 0.2",
                "6 <- INIT",
                "7 <- 0.0",
                "8 <- 0.9",
                "9 <- 0.0"
            ]
        },
        "Step 1": {
            "steps": [
                "5 * 5 = 25 (left: 7 7 25)",
                "7 + 5 = 12 (left: 5 7 12) || 7 * 5 = 35 (left: 35 12)",
                "7 + 5 = 12 (left: 5 7 12) || 7 / 5 = 1.4 (left: 1.4 12)",
                "7 + 5 = 12 (left: 5 7 12) || 12 - 5 = 7 (left: 7 12)",
                "7 + 5 = 12 (left: 5 7 12) || 7 * 5 = 35 (left: 35 12)",
                "7 - 5 = 2 (left: 2 7 7) || Input:",
                "7 + 5 = 12 (left: 5 7 12)",
                "7 + 5 = 12 (left: 5 7 12) || 5 - 7 = -2 (left: -2 12)",
                "7 + 5 = 12 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12)",
                "7 + 5 = 12 (left: 5 7 12) || 12 - 5 = 7 (left: 7 12)"
            ],
            "Evaluation": [
                20.002,
                3.0,
                1.002,
                1.001,
                1.002,
                40.001,
                2.001,
                20.001,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 1.5",
                "2 <- 0.4",
                "3 <- 1.8",
                "4 <- 0.0",
                "5 <- 1.5",
                "6 <- 1.8",
                "7 <- INIT",
                "8 <- 1.5",
                "9 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "7 + 5 = 12 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "7 - 5 = 2 (left: 2 7 7) || Input: || Please provide a list of numbers to find possible next steps.",
                "7 - 5 = 2 (left: 2 5 7) || 7 - 5 = 2 (left: 2)",
                "7 + 5 = 12 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "7 + 5 = 12 (left: 5 7 12) || 7 * 5 = 35 (left: 35 12)",
                "7 - 5 = 2 (left: 2 7 7) || Input: || Please provide the numbers for the next step.",
                "7 + 5 = 12 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "7 / 5 = 1.4 (left: 5 ",
                "7 - 5 = 2 (left: 2 7 7) || Input: || There is no input provided. Can you please provide the input so that I can suggest possible next steps?",
                "7 / 5 = 1 (left: 1 5 7)"
            ],
            "Evaluation": [
                0.003,
                0.001,
                0.003,
                0.003,
                0.001,
                0.003,
                0.003,
                0.001,
                0.003,
                2.001
            ],
            "Resampling": [
                "0 <- 1.5",
                "1 <- 1.7",
                "2 <- 1.0",
                "3 <- 1.8",
                "4 <- 1.5",
                "5 <- 1.8",
                "6 <- INIT",
                "7 <- 0.0",
                "8 <- 1.7",
                "9 <- 1.8"
            ]
        },
        "Step 3": {
            "steps": [
                "7 - 5 = 2 (left: 2 7 7) || Input: || Please provide the input numbers for the possible next steps.",
                "7 + 5 = 12 (left: 5 7 12) || 5 - 7 = -2 (left: -2 12) || -2 - 12 = -14 (left: -14)",
                "5 * 5 = 25 (left: 7 7 25) || 25 - 7 = 18 (left: 7 18)",
                "7 + 5 = 12 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "7 - 5 = 2 (left: 2 7 7) || Input: || Please provide a set of numbers to generate possible next steps.",
                "7 + 5 = 12 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "7 + 5 = 12 (left: 7 12 7)",
                "7 + 5 = 12 (left: 5 7 12) || 12 / 5 = 2.4 (left: 2.4 7)",
                "7 + 5 = 12 (left: 5 7 12) || 5 - 7 = -2 (left: -2 12) || -2 / 12 = -0.16666666667 (left: -0.16666666667)",
                "7 + 5 = 12 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)"
            ],
            "Evaluation": [
                0.0,
                0.002,
                0.002,
                60.0,
                0.0,
                0.003,
                2.001,
                1.0,
                0.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.8",
                "1 <- 3.3",
                "2 <- 1.4",
                "3 <- INIT",
                "4 <- 3.9",
                "5 <- 3.3",
                "6 <- INIT",
                "7 <- 0.0",
                "8 <- 1.8",
                "9 <- 3.9"
            ]
        },
        "Step 4": {
            "steps": [
                "7 + 5 = 12 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 + 12 = 14",
                "7 + 5 = 12 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 + 5) * (7 - 5) = 24",
                "7 + 5 = 12 (left: 5 7 12) || 7 * 5 = 35 (left: 35 12) || 35 / 12 = 2.91666666667 (left: 2.91666666667)",
                "7 + 5 = 12 (left: 7 12 7)",
                "7 + 5 = 12 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 + 5) * (7 - 5) = 24",
                "7 + 5 = 12 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 + 5) * (7 - 5) = 24",
                "7 - 5 = 2 (left: 2 7 7)",
                "7 + 5 = 12 (left: 5 7 12) || 12 / 7 = 1.71428571429 (left: 1.714285714",
                "7 + 5 = 12 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "7 + 5 = 12 (left: 5 7 12) || 7 - 5 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (7 + 5) * (7 - 5) = 24"
            ]
        },
        "Input": "5 5 7 7",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    }
}