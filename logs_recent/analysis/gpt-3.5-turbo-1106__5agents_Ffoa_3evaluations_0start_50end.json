{
    "0": {
        "input": "1 1 4 6",
        "step_1": {
            "steps": [
                "4 / 1 = 4 (left: 1 4 6)",
                "6 - 1 = 5 (left: 1 4 5)",
                "6 - 4 = 2 (left: 1 2 6)",
                "1 * 4 = 4 (left: 1 4 6)",
                "4 + 1 = 5 (left: 1 5 6)"
            ],
            "values": [
                60.0,
                1.001,
                1.002,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- INIT",
                "2 <- 1.3",
                "3 <- 1.3",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "1 * 4 = 4 (left: 1 4 6)",
                "",
                "1 * 4 = 4 (left: 1 4 6)",
                "1 * 4 = 4 (left: 1 4 6)",
                "1 * 4 = 4 (left: 1 4 6)"
            ]
        },
        "step_2": {
            "steps": [
                "1 * 4 = 4 (left: 1 4 6)\n6 / 4 = 1.5 (left: 1.5 6)",
                "6 / 1 = 6 (left: 1 4 6)",
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "1 * 4 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)",
                "1 * 4 = 4 (left: 1 4 6)\n1 + 4 = 5 (left: 5 6)"
            ],
            "values": [
                2.001,
                60.0,
                60.0,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 1.4",
                "2 <- 1.3",
                "3 <- 2.1",
                "4 <- 1.4"
            ],
            "resampled_steps": [
                "6 / 1 = 6 (left: 1 4 6)",
                "4 + 1 = 5 (left: 1 5 6)",
                "1 * 4 = 4 (left: 1 4 6)",
                "6 / 1 = 6 (left: 1 4 6)",
                "4 + 1 = 5 (left: 1 5 6)"
            ]
        },
        "step_3": {
            "steps": [
                "6 / 1 = 6 (left: 1 4 6)\n1 - 4 = -3 (left: -3 6)",
                "4 + 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)",
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "6 / 1 = 6 (left: 1 4 6)\n4 - 1 = 3 (left: 3 6)",
                "4 + 1 = 5 (left: 1 5 6)\n5 + 1 = 6 (left: 6 6)"
            ],
            "values": [
                2.001,
                40.001,
                60.0,
                0.0,
                40.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 3.4",
                "2 <- 3.1",
                "3 <- 2.3",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "4 + 1 = 5 (left: 1 5 6)\n5 + 1 = 6 (left: 6 6)",
                "4 + 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)",
                "1 * 4 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)",
                ""
            ]
        },
        "step_4": {
            "steps": [
                "6 - 1 = 5 (left: 1 4 5)",
                "4 + 1 = 5 (left: 1 5 6)\n5 + 1 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36)",
                "4 + 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)\n6 * 6 = 36 (left: 6 36)",
                "1 * 4 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 - 6 = -2 (left: -2)",
                "1 + 1 = 2 (left: 2 4 6)"
            ],
            "values": [
                22.0,
                40.0,
                0.003,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 3.4",
                "2 <- 3.4",
                "3 <- 2.2",
                "4 <- 4.0"
            ],
            "resampled_steps": [
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "4 + 1 = 5 (left: 1 5 6)\n5 + 1 = 6 (left: 6 6)",
                "4 + 1 = 5 (left: 1 5 6)\n5 + 1 = 6 (left: 6 6)",
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "6 - 1 = 5 (left: 1 4 5)"
            ]
        },
        "step_5": {
            "steps": [
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 * 1 = 24 (left: 1 24)",
                "4 + 1 = 5 (left: 1 5 6)\n5 + 1 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36)",
                "4 + 1 = 5 (left: 1 5 6)\n5 + 1 = 6 (left: 6 6)\n6 + 6 = 12 (left: 12)",
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)",
                "6 - 1 = 5 (left: 1 4 5)\n1 * 4 = 4 (left: 4 5)"
            ],
            "values": [
                60.0,
                40.0,
                0.002,
                0.002,
                3.0
            ],
            "resampled": [
                "0 <- 2.3",
                "1 <- 5.0",
                "2 <- 1.4",
                "3 <- 4.0",
                "4 <- 3.4"
            ],
            "resampled_steps": [
                "1 * 4 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)",
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 * 1 = 24 (left: 1 24)",
                "4 + 1 = 5 (left: 1 5 6)",
                "6 - 1 = 5 (left: 1 4 5)",
                "4 + 1 = 5 (left: 1 5 6)\n5 + 1 = 6 (left: 6 6)"
            ]
        },
        "step_6": {
            "steps": [
                "1 * 4 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n12 + 3 = 15 (left: 3 15)",
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 * 1 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)",
                "4 + 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)",
                "6 - 1 = 5 (left: 1 4 5)\n4 * 1 = 4 (left: 4 5)",
                "4 + 1 = 5 (left: 1 5 6)\n5 + 1 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36)"
            ],
            "values": [
                0.003,
                60.0,
                20.002,
                1.0,
                20.001
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 6.1",
                "2 <- 6.1",
                "3 <- 2.1",
                "4 <- 6.1"
            ],
            "resampled_steps": [
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 * 1 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)",
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 * 1 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)",
                "6 / 1 = 6 (left: 1 4 6)",
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 * 1 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)"
            ]
        },
        "step_7": {
            "steps": [
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 * 1 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)\n24 - 1 = 23 (left: 1 23)",
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 * 1 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)",
                "6 / 1 = 6 (left: 1 4 6)\nPossible next steps:",
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 * 1 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)\n24 + 1 = 25 (left: 25)"
            ],
            "values": [
                20.0,
                40.001,
                0.001,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1.4",
                "1 <- 2.1",
                "2 <- 7.0",
                "3 <- 2.1",
                "4 <- 6.1"
            ],
            "resampled_steps": [
                "4 + 1 = 5 (left: 1 5 6)",
                "6 / 1 = 6 (left: 1 4 6)",
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "6 / 1 = 6 (left: 1 4 6)",
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 * 1 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)"
            ]
        },
        "step_8": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)",
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)",
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (1 * 4) * 6 = 24",
                "6 / 1 = 6 (left: 1 4 6)\n6 / 4 = 1.5 (left: 1.5 6)",
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 * 1 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)"
            ],
            "values": [
                20.001,
                20.0,
                60.0,
                2.0,
                0.001
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 8.2",
                "2 <- 5.1",
                "3 <- 8.2",
                "4 <- 8.3"
            ],
            "resampled_steps": [
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (1 * 4) * 6 = 24",
                "4 + 1 = 5 (left: 1 5 6)\n5 + 1 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36)",
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (1 * 4) * 6 = 24",
                "6 / 1 = 6 (left: 1 4 6)\n6 / 4 = 1.5 (left: 1.5 6)"
            ]
        },
        "step_9": {
            "steps": [
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)",
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (1 * 4) * 6 = 24\nInput: 3 3 6 6\nSteps:\n3 * 6 = 18 (left: 3 6 18)\n18 - 6 = 12 (left: 3 12)\n12 * 3 = 36 (left: 36)\nAnswer: (3 * 6) - (6 - 3) = 24",
                "4 + 1 = 5 (left: 1 5 6)\n5 + 1 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36)\n36 / 2 = 18",
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (1 * 4) * 6 = 24\nInput: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\n48 / 2 = 24 (left: 24)\nAnswer: ((3 * 3) - 3) * 8 / 2 = 24",
                "6 / 1 = 6 (left: 1 4 6)\n6 / 4 = 1.5 (left: 1.5 6)\n1.5 + 6 = 7.5 (left: 7.5)"
            ],
            "values": [
                0.003,
                60.0,
                0.003,
                60.0,
                0.001
            ],
            "resampled": [
                "0 <- 7.0",
                "1 <- 8.2",
                "2 <- 2.2",
                "3 <- 8.2",
                "4 <- 8.1"
            ],
            "resampled_steps": [
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (1 * 4) * 6 = 24",
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (1 * 4) * 6 = 24",
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)"
            ]
        },
        "step_10": {
            "steps": [
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (1 * 4) * 6 = 24",
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (1 * 4) * 6 = 24\n.",
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)",
                "1 * 4 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (1 * 4) * 6 = 24\nInput: 3 3 5 5\nSteps:\n3 * 5 = 15 (left: 3 5 15)\n15 - 5 = 10 (left: 3 10)\n10 * 3 = 30 (left: 30)\n30 - 5 = 25 (left: 25)\n25 / 5 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 5 = 20 (left: 20)\n20 + 5 = 25 (left: 25)\n25 - 25 = 0 (left: 0)\n0 + 3 = 3 (left: 3)\n3 * 8 = 24 (left: 24)\nAnswer: There are multiple ways to obtain 24 from the given numbers.",
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)\n10 / 1 = 10 (left: 10)"
            ],
            "values": [
                60.0,
                0.002,
                0.002,
                20.0,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.039081
    },
    "1": {
        "input": "1 1 11 11",
        "step_1": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11)",
                "1 * 11 = 11 (left: 1 11 11)",
                "11 / 1 = 11 (left: 1 11 11)",
                "11 - 1 = 10 (left: 1 10 11)",
                "1 * 1 = 1 (left: 1 11 11)"
            ],
            "values": [
                0.003,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                "",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "11 / 1 = 11 (left: 1 11 11)",
                "1 * 1 = 1 (left: 1 11 11)",
                "11 - 1 = 10 (left: 1 11 10)",
                "11 - 1 = 10 (left: 1 10 11)",
                "11 - 1 = 10 (left: 1 11 10)"
            ],
            "values": [
                2.001,
                1.002,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                "",
                "",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "11 / 1 = 11 (left: 1 11 11)",
                "11 - 1 = 10 (left: 1 10 11)",
                "1 + 1 = 2 (left: 2 11 11)",
                "1 * 1 = 1 (left: 1 11 11)",
                "1 * 11 = 11 (left: 11 11 11)"
            ],
            "values": [
                0.002,
                0.003,
                20.002,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- INIT",
                "2 <- 3.2",
                "3 <- 3.2",
                "4 <- 3.2"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 11 11)",
                "",
                "1 + 1 = 2 (left: 2 11 11)",
                "1 + 1 = 2 (left: 2 11 11)",
                "1 + 1 = 2 (left: 2 11 11)"
            ]
        },
        "step_4": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)",
                "1 + 1 = 2 (left: 2 11 11)",
                "1 + 1 = 2 (left: 2 11 11)\n11 / 2 = 5.5 (left: 5.5 11)",
                "1 + 1 = 2 (left: 2 11 11)\n11 / 2 = 5.5 (left: 5.5 11)",
                "1 + 1 = 2 (left: 2 11 11)\n11 - 2 = 9 (left: 9 11)"
            ],
            "values": [
                60.0,
                20.002,
                2.001,
                2.001,
                0.001
            ],
            "resampled": [
                "0 <- 4.0",
                "1 <- 4.0",
                "2 <- 4.0",
                "3 <- 4.0",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)",
                ""
            ]
        },
        "step_5": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n11 / 13 = 0.846 (left: 0.846)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n11 * 13 = 143 (left: 143)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "11 - 1 = 10 (left: 1 11 10)"
            ],
            "values": [
                0.003,
                40.0,
                0.003,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 5.1",
                "1 <- 5.3",
                "2 <- 4.0",
                "3 <- 5.1",
                "4 <- 5.3"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n11 + 13 = 24 (left: 24)"
            ]
        },
        "step_6": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 11) + 11 = 24",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 11) + 11 = 24",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n11 + 13 = 24 (left: 13 24)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 11) + 11 = 24",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: (1 + 1) + (11 + 11) = 24"
            ]
        },
        "results": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            }
        ],
        "cost": 0.065083
    },
    "2": {
        "input": "1 1 3 8",
        "step_1": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 8)",
                "8 - 1 = 7 (left: 1 3 7)",
                "8 - 1 = 7 (left: 1 3 7)",
                "8 - 3 = 5 (left: 1 1 5)",
                "1 * 1 = 1 (left: 1 3 8)"
            ],
            "values": [
                2.001,
                3.0,
                2.001,
                1.002,
                40.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.4",
                "2 <- INIT",
                "3 <- 1.4",
                "4 <- 1.4"
            ],
            "resampled_steps": [
                "",
                "1 * 1 = 1 (left: 1 3 8)",
                "",
                "1 * 1 = 1 (left: 1 3 8)",
                "1 * 1 = 1 (left: 1 3 8)"
            ]
        },
        "step_2": {
            "steps": [
                "3 * 8 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 3 8)\n1 + 3 = 4 (left: 4 8)",
                "1 + 1 = 2 (left: 2 3 8)",
                "1 * 1 = 1 (left: 1 3 8)\n3 / 1 = 3 (left: 3 8)",
                "1 * 1 = 1 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)"
            ],
            "values": [
                60.0,
                1.001,
                2.001,
                60.0,
                0.002
            ],
            "resampled": [
                "0 <- 2.3",
                "1 <- 2.3",
                "2 <- 1.4",
                "3 <- 2.1",
                "4 <- 2.3"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 3 8)\n3 / 1 = 3 (left: 3 8)",
                "1 * 1 = 1 (left: 1 3 8)\n3 / 1 = 3 (left: 3 8)",
                "1 * 1 = 1 (left: 1 3 8)",
                "1 * 1 = 1 (left: 1 3 8)\n1 + 3 = 4 (left: 4 8)",
                "1 * 1 = 1 (left: 1 3 8)\n3 / 1 = 3 (left: 3 8)"
            ]
        },
        "step_3": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8)\n3 / 1 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)",
                "1 * 1 = 1 (left: 1 3 8)\n3 / 1 = 3 (left: 3 8)\n8 / 3 = 2.66667 (left: 2.66667 8)",
                "1 * 1 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 3 8)\n1 + 3 = 4 (left: 4 8)\n4 * 8 = 32 (left: 8 32)",
                "1 * 1 = 1 (left: 1 3 8)\n3 / 1 = 3 (left: 3 8)\n8 / 3 = 2.67 (left: 2.67)"
            ],
            "values": [
                20.002,
                3.0,
                60.0,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 3.2",
                "2 <- INIT",
                "3 <- 3.2",
                "4 <- 3.2"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 3 8)\n3 / 1 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)",
                "1 * 1 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)",
                "",
                "1 * 1 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)"
            ]
        },
        "step_4": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8)\n3 / 1 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n5 + 8 = 13 (left: 8 13)",
                "1 * 1 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)",
                "1 * 3 = 3 (left: 1 3 8)",
                "1 * 1 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)"
            ],
            "values": [
                0.003,
                0.002,
                60.0,
                60.0,
                0.002
            ],
            "resampled": [
                "0 <- 4.3",
                "1 <- 4.3",
                "2 <- 4.3",
                "3 <- 4.3",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)",
                ""
            ]
        },
        "step_5": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)\n24 - 24 = 0 (left: 1 0)",
                "1 * 1 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)",
                "1 * 1 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "8 - 3 = 5 (left: 1 1 5)"
            ],
            "values": [
                0.002,
                0.002,
                40.0,
                20.0,
                1.002
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 5.2",
                "2 <- 4.2",
                "3 <- 3.0",
                "4 <- 4.2"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 3 8)\n3 / 1 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)",
                "1 * 1 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)",
                "1 * 3 = 3 (left: 1 3 8)",
                "1 * 1 = 1 (left: 1 3 8)\n3 / 1 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)",
                "1 * 3 = 3 (left: 1 3 8)"
            ]
        },
        "step_6": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8)\n3 / 1 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n5 - 8 = -3 (left: -3)",
                "1 * 1 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)\nAnswer: (1 * 1) * (3 * 8) = 24 or (24 / 1) * 1 = 24",
                "1 * 3 = 3 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 3 8)\n3 / 1 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n5 * 8 = 40 (left: 40)",
                "1 * 3 = 3 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)"
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.08763399999999999
    },
    "3": {
        "input": "1 1 1 8",
        "step_1": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 8)",
                "1 * 1 = 1 (left: 1 1 8)",
                "1 + 1 = 2 (left: 2 1 8)",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 * 8 = 8 (left: 1 1 8)"
            ],
            "values": [
                3.0,
                2.001,
                3.0,
                21.0,
                1.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.3",
                "3 <- INIT",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "",
                "",
                "1 + 1 = 2 (left: 1 2 8)",
                "",
                "1 + 1 = 2 (left: 1 2 8)"
            ]
        },
        "step_2": {
            "steps": [
                "1 + 8 = 9 (left: 1 1 9)",
                "1 * 1 = 1 (left: 1 1 8)",
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "8 - 1 = 7 (left: 1 1 7)",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)"
            ],
            "values": [
                1.001,
                1.002,
                60.0,
                0.003,
                40.001
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- 2.4",
                "2 <- 2.4",
                "3 <- 2.4",
                "4 <- 2.2"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)",
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)"
            ]
        },
        "step_3": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)\n1 * 4 = 4 (left: 4)",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)\n4 - 1 = 3 (left: 3) ",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)\n4 - 1 = 3 (left: 3)",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)\n1 - 4 = -3 (left: -3)",
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)"
            ],
            "values": [
                0.001,
                0.002,
                0.0,
                0.002,
                0.002
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- 2.2",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                ""
            ]
        },
        "step_4": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)",
                "1 + 1 = 2 (left: 1 2 8)\n2 * 8 = 16 (left: 1 16)",
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n8 / 3 = 2.67 (left: 2.67 8)",
                "1 + 1 = 2 (left: 1 2 8)"
            ],
            "values": [
                1.002,
                0.001,
                60.0,
                2.0,
                22.0
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 4.2",
                "2 <- 4.2",
                "3 <- 4.2",
                "4 <- 4.2"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)"
            ]
        },
        "step_5": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n8 / 3 = 2.67 (left: 2.67)",
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)",
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)"
            ],
            "values": [
                0.002,
                0.003,
                0.002,
                0.002,
                1.002
            ],
            "resampled": [
                "0 <- 4.4",
                "1 <- 2.4",
                "2 <- 2.4",
                "3 <- INIT",
                "4 <- 4.2"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 1 2 8)",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)",
                "",
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)"
            ]
        },
        "step_6": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)\n1 + 4 = 5 (left: 5)",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)\n1 + 4 = 5 (left: 5)",
                "8 - 1 = 7 (left: 1 7 8)",
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)"
            ],
            "values": [
                60.0,
                0.001,
                0.002,
                3.0,
                0.003
            ],
            "resampled": [
                "0 <- 6.0",
                "1 <- 2.4",
                "2 <- 4.2",
                "3 <- 6.0",
                "4 <- 6.0"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)",
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)"
            ]
        },
        "step_7": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)\n1 * 4 = 4 (left: 4)",
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)",
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n6 - 1 = 5 (left: 5 6)"
            ],
            "values": [
                0.001,
                0.002,
                0.001,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 6.0",
                "1 <- 4.2",
                "2 <- 2.4",
                "3 <- 6.0",
                "4 <- 6.0"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)",
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)"
            ]
        },
        "step_8": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)\n4 / 1 = 4 (left: 4)",
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n1 * 6 = 6 (left: 6)"
            ],
            "values": [
                0.001,
                3.0,
                0.001,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 6.0",
                "1 <- 6.0",
                "2 <- 6.0",
                "3 <- 2.2",
                "4 <- 2.2"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)"
            ]
        },
        "step_9": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 + 8 = 11 (left: 8 11)",
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n8 / 3 = 2.66666666667 (left: 2.66666666667 8)"
            ],
            "values": [
                0.002,
                0.001,
                0.003,
                0.003,
                3.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 2.2",
                "2 <- 6.0",
                "3 <- 2.2",
                "4 <- 2.4"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)"
            ]
        },
        "step_10": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n8 / 3 = 2.66666666667 (left: 2.66666666667 8)",
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "1 + 1 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 + 8 = 11 (left: 8 11)",
                "1 + 1 = 2 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)\n1 * 4 = 4 (left: 4)"
            ],
            "values": [
                3.0,
                20.0,
                0.002,
                1.002,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.125037
    },
    "4": {
        "input": "6 6 6 6",
        "step_1": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 / 6 = 1 (left: 1 6 6)",
                "6 / 6 = 1 (left: 1 6 6)",
                "6 + 6 = 12 (left: 6 12 6)"
            ],
            "values": [
                60.0,
                21.001,
                22.0,
                2.001,
                60.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.0",
                "2 <- INIT",
                "3 <- 1.0",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "",
                "6 + 6 = 12 (left: 6 12 6)",
                "",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 + 6 = 12 (left: 6 12 6)"
            ]
        },
        "step_2": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6)",
                "6 + 6 = 12 (left: 6 12 6)\n12 / 6 = 2 (left: 2 6)",
                "6 / 6 = 1 (left: 1 6 6)",
                "6 + 6 = 12 (left: 6 12 6)\n6 / 6 = 1 (left: 1 6)",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 12 = 72 (left: 72 6)"
            ],
            "values": [
                41.0,
                21.0,
                22.0,
                40.0,
                1.001
            ],
            "resampled": [
                "0 <- 1.4",
                "1 <- 1.4",
                "2 <- 1.0",
                "3 <- 1.0",
                "4 <- 2.3"
            ],
            "resampled_steps": [
                "6 + 6 = 12 (left: 6 12 6)",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 + 6 = 12 (left: 6 12 6)\n6 / 6 = 1 (left: 1 6)"
            ]
        },
        "step_3": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6)\n12 / 6 = 2 (left: 2 6)",
                "6 + 6 = 12 (left: 6 12 6)\n12 / 6 = 2 (left: 2 6)",
                "6 + 6 = 12 (left: 6 12 6)\n6 + 12 = 18 (left: 18 6)",
                "6 + 6 = 12 (left: 6 12 6)\n12 - 6 = 6 (left: 6 6)",
                "6 + 6 = 12 (left: 6 12 6)\n6 / 6 = 1 (left: 1 6)\n1 * 6 = 6 (left: 6)"
            ],
            "values": [
                21.0,
                40.001,
                20.001,
                20.002,
                20.001
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 1.1",
                "2 <- 3.1",
                "3 <- 1.1",
                "4 <- 3.0"
            ],
            "resampled_steps": [
                "6 - 6 = 0 (left: 0 6 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 + 6 = 12 (left: 6 12 6)\n12 / 6 = 2 (left: 2 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 + 6 = 12 (left: 6 12 6)\n12 / 6 = 2 (left: 2 6)"
            ]
        },
        "step_4": {
            "steps": [
                "6 - 6 = 0 (left: 0 6 6)\n6 / 6 = 1 (left: 0 1)",
                "6 - 6 = 0 (left: 0 6 6)\n6 - 0 = 6 (left: 6 6)",
                "6 + 6 = 12 (left: 6 12 6)\n12 / 6 = 2 (left: 2 6)\n2 + 6 = 8 (left: 8)",
                "6 - 6 = 0 (left: 0 6 6)\n6 / 6 = 1 (left: 1 6)",
                "6 + 6 = 12 (left: 6 12 6)\n12 / 6 = 2 (left: 2 6)\n2 + 6 = 8 (left: 8)"
            ],
            "values": [
                40.0,
                0.002,
                0.002,
                41.0,
                0.003
            ],
            "resampled": [
                "0 <- 4.0",
                "1 <- 3.2",
                "2 <- 3.4",
                "3 <- 1.4",
                "4 <- 2.3"
            ],
            "resampled_steps": [
                "6 - 6 = 0 (left: 0 6 6)\n6 / 6 = 1 (left: 0 1)",
                "6 + 6 = 12 (left: 6 12 6)\n6 + 12 = 18 (left: 18 6)",
                "6 + 6 = 12 (left: 6 12 6)\n6 / 6 = 1 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 + 6 = 12 (left: 6 12 6)\n6 / 6 = 1 (left: 1 6)"
            ]
        },
        "step_5": {
            "steps": [
                "6 - 6 = 0 (left: 0 6 6)\n6 / 6 = 1 (left: 0 1)\n0 + 1 = 1 (left: 1)",
                "6 + 6 = 12 (left: 6 12 6)\n6 + 12 = 18 (left: 18 6)\n6 - 18 = -12 (left: -12)",
                "6 + 6 = 12 (left: 6 12 6)\n6 / 6 = 1 (left: 1 6)\n1 * 6 = 6 (left: 6)\nThere are no possible next steps as there are no additional numbers provided for operations.",
                "6 + 6 = 12 (left: 6 12 6)\n12 - 6 = 6 (left: 6 6)",
                "6 + 6 = 12 (left: 6 12 6)\n6 / 6 = 1 (left: 1 6)\n6 - 1 = 5 (left: 5 6)"
            ],
            "values": [
                0.003,
                0.001,
                0.003,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 2.0",
                "2 <- 3.4",
                "3 <- 4.3",
                "4 <- 4.3"
            ],
            "resampled_steps": [
                "6 + 6 = 12 (left: 6 12 6)\n12 / 6 = 2 (left: 2 6)",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 + 6 = 12 (left: 6 12 6)\n6 / 6 = 1 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "6 - 6 = 0 (left: 0 6 6)\n6 / 6 = 1 (left: 1 6)",
                "6 - 6 = 0 (left: 0 6 6)\n6 / 6 = 1 (left: 1 6)"
            ]
        },
        "step_6": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6)\n12 / 6 = 2 (left: 2 6)\n2 + 6 = 8 (left: 8)",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 12 = 72 (left: 72 6)",
                "6 + 6 = 12 (left: 6 12 6)\n6 / 6 = 1 (left: 1 6)\n1 * 6 = 6 (left: 6)\nThere are no possible next steps as there are no other numbers to perform operations with.",
                "6 - 6 = 0 (left: 0 6 6)\n6 / 6 = 1 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "6 - 6 = 0 (left: 0 6 6)\n6 / 6 = 1 (left: 1 6)\n1 + 6 = 7 (left: 6 7)"
            ],
            "values": [
                0.002,
                21.001,
                20.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 6.2",
                "1 <- 6.2",
                "2 <- 4.3",
                "3 <- 3.3",
                "4 <- 4.0"
            ],
            "resampled_steps": [
                "6 + 6 = 12 (left: 6 12 6)\n6 / 6 = 1 (left: 1 6)\n1 * 6 = 6 (left: 6)\nThere are no possible next steps as there are no other numbers to perform operations with.",
                "6 + 6 = 12 (left: 6 12 6)\n6 / 6 = 1 (left: 1 6)\n1 * 6 = 6 (left: 6)\nThere are no possible next steps as there are no other numbers to perform operations with.",
                "6 - 6 = 0 (left: 0 6 6)\n6 / 6 = 1 (left: 1 6)",
                "6 + 6 = 12 (left: 6 12 6)\n12 - 6 = 6 (left: 6 6)",
                "6 - 6 = 0 (left: 0 6 6)\n6 / 6 = 1 (left: 0 1)"
            ]
        },
        "step_7": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6)\n6 / 6 = 1 (left: 1 6)\n1 * 6 = 6 (left: 6)\nThere are no possible next steps as there are no other numbers to perform operations with.\nThere are no possible next steps as there are no other numbers to perform operations with.",
                "6 + 6 = 12 (left: 6 12 6)\n6 / 6 = 1 (left: 1 6)\n1 * 6 = 6 (left: 6)\nThere are no possible next steps as there are no other numbers to perform operations with.\nThere are no possible next steps as there are no other numbers to perform operations with.",
                "6 - 6 = 0 (left: 0 6 6)\n6 / 6 = 1 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "6 + 6 = 12 (left: 6 12 6)\n12 - 6 = 6 (left: 6 6)\n6 * 6 = 36 (left: 6 36)",
                "6 - 6 = 0 (left: 0 6 6)\n6 / 6 = 1 (left: 0 1)\n0 + 1 = 1 (left: 1)"
            ],
            "values": [
                20.002,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 4.0",
                "2 <- 4.0",
                "3 <- 3.1",
                "4 <- 2.2"
            ],
            "resampled_steps": [
                "6 + 6 = 12 (left: 6 12 6)\n12 / 6 = 2 (left: 2 6)",
                "6 - 6 = 0 (left: 0 6 6)\n6 / 6 = 1 (left: 0 1)",
                "6 - 6 = 0 (left: 0 6 6)\n6 / 6 = 1 (left: 0 1)",
                "6 + 6 = 12 (left: 6 12 6)\n12 / 6 = 2 (left: 2 6)",
                "6 / 6 = 1 (left: 1 6 6)"
            ]
        },
        "step_8": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6)\n12 / 6 = 2 (left: 2 6)\n6 * 2 = 12 (left: 12)",
                "6 - 6 = 0 (left: 0 6 6)\n6 / 6 = 1 (left: 0 1)\n0 * 1 = 0 (left: 0)",
                "6 - 6 = 0 (left: 0 6 6)\n6 / 6 = 1 (left: 0 1)\n0 + 1 = 1 (left: 1)",
                "6 + 6 = 12 (left: 6 12 6)\n12 / 6 = 2 (left: 2 6)\n6 - 2 = 4 (left: 4)",
                "6 / 6 = 1 (left: 1 6 6)\n6 / 1 = 6 (left: 6 6)"
            ],
            "values": [
                0.0,
                0.003,
                0.003,
                0.002,
                2.0
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 4.3",
                "2 <- 1.4",
                "3 <- 2.3",
                "4 <- 3.4"
            ],
            "resampled_steps": [
                "6 + 6 = 12 (left: 6 12 6)\n12 / 6 = 2 (left: 2 6)",
                "6 - 6 = 0 (left: 0 6 6)\n6 / 6 = 1 (left: 1 6)",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 + 6 = 12 (left: 6 12 6)\n6 / 6 = 1 (left: 1 6)",
                "6 + 6 = 12 (left: 6 12 6)\n6 / 6 = 1 (left: 1 6)\n1 * 6 = 6 (left: 6)"
            ]
        },
        "step_9": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6)\n12 / 6 = 2 (left: 2 6)\n6 / 2 = 3 (left: 3)",
                "6 - 6 = 0 (left: 0 6 6)\n6 / 6 = 1 (left: 1 6)\n6 - 1 = 5 (left: 5)",
                "6 + 6 = 12 (left: 6 12 6)\n12 - 6 = 6 (left: 6 6)",
                "6 + 6 = 12 (left: 6 12 6)\n6 / 6 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7) ",
                "6 + 6 = 12 (left: 6 12 6)\n6 / 6 = 1 (left: 1 6)\n1 * 6 = 6 (left: 6)\nThere are no possible next steps as there are no other numbers to combine or operate with the number 6."
            ],
            "values": [
                0.0,
                0.001,
                2.001,
                0.002,
                20.002
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 1.4",
                "2 <- 3.0",
                "3 <- 4.0",
                "4 <- 3.3"
            ],
            "resampled_steps": [
                "6 + 6 = 12 (left: 6 12 6)\n12 / 6 = 2 (left: 2 6)",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 + 6 = 12 (left: 6 12 6)\n12 / 6 = 2 (left: 2 6)",
                "6 - 6 = 0 (left: 0 6 6)\n6 / 6 = 1 (left: 0 1)",
                "6 + 6 = 12 (left: 6 12 6)\n12 - 6 = 6 (left: 6 6)"
            ]
        },
        "step_10": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6)\n12 / 6 = 2 (left: 2 6)\n6 - 2 = 4 (left: 4)",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 12 = 72 (left: 72 6)",
                "6 + 6 = 12 (left: 6 12 6)\n12 / 6 = 2 (left: 2 6)\n6 / 2 = 3 (left: 3)",
                "6 - 6 = 0 (left: 0 6 6)\n6 / 6 = 1 (left: 0 1)\n1 - 0 = 1 (left: 1)",
                "6 + 6 = 12 (left: 6 12 6)\n12 - 6 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36)"
            ],
            "values": [
                0.002,
                0.001,
                0.002,
                0.002,
                40.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.16282000000000002
    },
    "5": {
        "input": "1 1 2 12",
        "step_1": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 12)",
                "12 / 2 = 6 (left: 1 2 6)",
                "1 * 1 = 1 (left: 1 2 12)",
                "2 * 1 = 2 (left: 2 2 12)",
                "12 / 2 = 6 (left: 1 6 12)"
            ],
            "values": [
                1.002,
                1.002,
                60.0,
                20.002,
                1.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.2",
                "2 <- 1.2",
                "3 <- 1.4",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "",
                "1 * 1 = 1 (left: 1 2 12)",
                "1 * 1 = 1 (left: 1 2 12)",
                "12 / 2 = 6 (left: 1 6 12)",
                "2 * 1 = 2 (left: 2 2 12)"
            ]
        },
        "step_2": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 12)",
                "1 * 1 = 1 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "12 / 2 = 6 (left: 1 6 12)\n6 * 2 = 12 (left: 12 12)",
                "2 * 1 = 2 (left: 2 2 12)\n12 / 2 = 6 (left: 2 6)"
            ],
            "values": [
                40.001,
                41.0,
                60.0,
                41.0,
                3.0
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 2.1",
                "2 <- 1.2",
                "3 <- 2.2",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "2 * 1 = 2 (left: 2 2 12)",
                "1 * 1 = 1 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 2 12)",
                "1 * 1 = 1 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "2 * 1 = 2 (left: 2 2 12)"
            ]
        },
        "step_3": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 12)\n2 / 2 = 1 (left: 1 12)",
                "1 * 1 = 1 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n12 - 3 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 12)\n2 - 1 = 1 (left: 1 12)",
                "1 * 1 = 1 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "2 * 1 = 2 (left: 2 2 12)\n12 / 2 = 6 (left: 2 6)"
            ],
            "values": [
                1.001,
                0.002,
                1.002,
                0.002,
                20.001
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 2.3",
                "2 <- 3.2",
                "3 <- INIT",
                "4 <- 2.0"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "12 / 2 = 6 (left: 1 6 12)\n6 * 2 = 12 (left: 12 12)",
                "1 * 1 = 1 (left: 1 2 12)\n2 - 1 = 1 (left: 1 12)",
                "",
                "2 * 1 = 2 (left: 2 2 12)"
            ]
        },
        "step_4": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "12 / 2 = 6 (left: 1 6 12)\n6 * 2 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 2 12)\n2 - 1 = 1 (left: 1 12)\n12 + 1 = 13 (left: 1 13)",
                "2 * 2 = 4 (left: 1 4 12)",
                "2 * 1 = 2 (left: 2 2 12)\n12 - 2 = 10 (left: 2 10)"
            ],
            "values": [
                0.003,
                20.0,
                0.001,
                0.003,
                1.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 4.4",
                "2 <- 1.3",
                "3 <- INIT",
                "4 <- 1.2"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "2 * 1 = 2 (left: 2 2 12)\n12 - 2 = 10 (left: 2 10)",
                "2 * 1 = 2 (left: 2 2 12)",
                "",
                "1 * 1 = 1 (left: 1 2 12)"
            ]
        },
        "step_5": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "2 * 1 = 2 (left: 2 2 12)\n12 - 2 = 10 (left: 2 10)\n2 + 10 = 12 (left: 10 12)",
                "2 * 1 = 2 (left: 2 2 12)\n12 / 2 = 6 (left: 2 6)",
                "2 * 1 = 2 (left: 1 2 12)",
                "1 * 1 = 1 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)"
            ],
            "values": [
                0.003,
                0.002,
                1.0,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 2.0",
                "2 <- 5.3",
                "3 <- 5.3",
                "4 <- 2.2"
            ],
            "resampled_steps": [
                "12 / 2 = 6 (left: 1 2 6)",
                "2 * 1 = 2 (left: 2 2 12)",
                "2 * 1 = 2 (left: 1 2 12)",
                "2 * 1 = 2 (left: 1 2 12)",
                "1 * 1 = 1 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)"
            ]
        },
        "step_6": {
            "steps": [
                "12 / 2 = 6 (left: 1 2 6)\n2 - 1 = 1 (left: 1 6)",
                "2 * 1 = 2 (left: 2 2 12)\n2 - 2 = 0 (left: 0 12)",
                "2 * 1 = 2 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)",
                "2 * 1 = 2 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n6 - 1 = 5 (left: 5)"
            ],
            "values": [
                40.0,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 2.1",
                "2 <- 2.2",
                "3 <- 5.4",
                "4 <- 6.0"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "1 * 1 = 1 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "1 * 1 = 1 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "12 / 2 = 6 (left: 1 2 6)\n2 - 1 = 1 (left: 1 6)"
            ]
        },
        "step_7": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n3 * 4 = 12 (left: 4)",
                "1 * 1 = 1 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "1 * 1 = 1 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "12 / 2 = 6 (left: 1 2 6)\n2 - 1 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7)"
            ],
            "values": [
                0.001,
                0.001,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 6.0",
                "2 <- 5.3",
                "3 <- 5.4",
                "4 <- 1.2"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "12 / 2 = 6 (left: 1 2 6)\n2 - 1 = 1 (left: 1 6)",
                "2 * 1 = 2 (left: 1 2 12)",
                "1 * 1 = 1 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "1 * 1 = 1 (left: 1 2 12)"
            ]
        },
        "step_8": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n1 + 6 = 7 (left: 7) ",
                "12 / 2 = 6 (left: 1 2 6)\n2 - 1 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "2 * 1 = 2 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10 10)",
                "1 * 1 = 1 (left: 1 2 12)\n12 - 1 = 11 (left: 2 11)"
            ],
            "values": [
                0.003,
                0.002,
                1.001,
                0.003,
                3.0
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 1.3",
                "2 <- 5.3",
                "3 <- 5.3",
                "4 <- 5.4"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 2 12)",
                "2 * 1 = 2 (left: 2 2 12)",
                "2 * 1 = 2 (left: 1 2 12)",
                "2 * 1 = 2 (left: 1 2 12)",
                "1 * 1 = 1 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)"
            ]
        },
        "step_9": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "2 * 1 = 2 (left: 2 2 12)\n2 * 2 = 4 (left: 4 12)",
                "2 * 1 = 2 (left: 1 2 12)\n12 - 1 = 11 (left: 2 11)",
                "2 * 1 = 2 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "1 * 1 = 1 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9)"
            ],
            "values": [
                60.0,
                1.002,
                1.001,
                40.0,
                0.001
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 5.3",
                "2 <- 9.0",
                "3 <- 5.3",
                "4 <- 1.2"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "2 * 1 = 2 (left: 1 2 12)",
                "1 * 1 = 1 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "2 * 1 = 2 (left: 1 2 12)",
                "1 * 1 = 1 (left: 1 2 12)"
            ]
        },
        "step_10": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "2 * 1 = 2 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "1 * 1 = 1 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)",
                "2 * 1 = 2 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)"
            ],
            "values": [
                0.002,
                1.001,
                0.001,
                20.002,
                20.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.20257599999999998
    },
    "6": {
        "input": "1 2 2 6",
        "step_1": {
            "steps": [
                "6 / 2 = 3 (left: 1 2 3)",
                "6 - 2 = 4 (left: 1 4 6)",
                "1 + 2 = 3 (left: 2 3 6)",
                "1 + 2 = 3 (left: 2 3 6)",
                "6 - 1 = 5 (left: 2 5 6)"
            ],
            "values": [
                0.002,
                60.0,
                40.0,
                3.0,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.1",
                "3 <- INIT",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "",
                "",
                "6 - 2 = 4 (left: 1 4 6)",
                "",
                "6 - 2 = 4 (left: 1 4 6)"
            ]
        },
        "step_2": {
            "steps": [
                "2 + 2 = 4 (left: 4 6 6)",
                "1 + 2 = 3 (left: 2 3 6)",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)",
                "6 / 2 = 3 (left: 1 2 3)",
                "6 - 2 = 4 (left: 1 4 6)\n6 / 1 = 6 (left: 4 6)"
            ],
            "values": [
                2.0,
                3.0,
                60.0,
                1.002,
                60.0
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- 2.4",
                "2 <- 2.2",
                "3 <- INIT",
                "4 <- 2.2"
            ],
            "resampled_steps": [
                "6 - 2 = 4 (left: 1 4 6)\n6 / 1 = 6 (left: 4 6)",
                "6 - 2 = 4 (left: 1 4 6)\n6 / 1 = 6 (left: 4 6)",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)",
                "",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)"
            ]
        },
        "step_3": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6)\n6 / 1 = 6 (left: 4 6)\n6 / 4 = 1.5 (left: 1.5)",
                "6 - 2 = 4 (left: 1 4 6)\n6 / 1 = 6 (left: 4 6)\n6 / 4 = 1.5 (left: 1.5)",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)",
                "2 * 2 = 4 (left: 4 2 6)",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n1 * 3 = 3 (left: 3)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                1.002,
                0.002
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- 1.1",
                "2 <- 2.2",
                "3 <- 2.2",
                "4 <- 2.2"
            ],
            "resampled_steps": [
                "6 - 2 = 4 (left: 1 4 6)\n6 / 1 = 6 (left: 4 6)",
                "6 - 2 = 4 (left: 1 4 6)",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)"
            ]
        },
        "step_4": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6)\n6 / 1 = 6 (left: 4 6)\n6 - 4 = 2 (left: 2 6)",
                "6 - 2 = 4 (left: 1 4 6)\n6 - 1 = 5 (left: 4 5)",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n6 / 4 = 1.5 (left: 1.5)"
            ],
            "values": [
                40.0,
                0.001,
                40.0,
                0.001,
                0.003
            ],
            "resampled": [
                "0 <- 4.0",
                "1 <- 4.2",
                "2 <- INIT",
                "3 <- 2.0",
                "4 <- 1.2"
            ],
            "resampled_steps": [
                "6 - 2 = 4 (left: 1 4 6)\n6 / 1 = 6 (left: 4 6)\n6 - 4 = 2 (left: 2 6)",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "",
                "2 + 2 = 4 (left: 4 6 6)",
                "1 + 2 = 3 (left: 2 3 6)"
            ]
        },
        "step_5": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6)\n6 / 1 = 6 (left: 4 6)\n6 - 4 = 2 (left: 2 6)\n6 - 2 = 4 (left: 4)",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 * (6 - 2)) * 6 = 24",
                "2 + 2 = 4 (left: 4 4 6)",
                "2 + 2 = 4 (left: 4 6 6)\n6 * 4 = 24 (left: 6 24)",
                "1 + 2 = 3 (left: 2 3 6)\n2 + 3 = 5 (left: 5 6)"
            ],
            "values": [
                0.001,
                60.0,
                2.0,
                0.002,
                2.001
            ],
            "resampled": [
                "0 <- 4.0",
                "1 <- 4.2",
                "2 <- 2.4",
                "3 <- 4.2",
                "4 <- 2.4"
            ],
            "resampled_steps": [
                "6 - 2 = 4 (left: 1 4 6)\n6 / 1 = 6 (left: 4 6)\n6 - 4 = 2 (left: 2 6)",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6)\n6 / 1 = 6 (left: 4 6)",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6)\n6 / 1 = 6 (left: 4 6)"
            ]
        },
        "step_6": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6)\n6 / 1 = 6 (left: 4 6)\n6 - 4 = 2 (left: 2 6)\n6 - 2 = 4 (left: 4)",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 * (6 - 2)) * 4 = 24",
                "6 - 2 = 4 (left: 1 4 6)\n6 / 1 = 6 (left: 4 6)\n6 / 4 = 1.5 (left: 1.5)",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 * (6 - 2)) * 6 = 24",
                "6 - 2 = 4 (left: 1 4 6)\n6 / 1 = 6 (left: 4 6)\n6 / 4 = 1.5 (left: 1.5)"
            ],
            "values": [
                0.002,
                60.0,
                0.003,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 5.1",
                "1 <- 1.2",
                "2 <- INIT",
                "3 <- 5.1",
                "4 <- 6.3"
            ],
            "resampled_steps": [
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 * (6 - 2)) * 6 = 24",
                "1 + 2 = 3 (left: 2 3 6)",
                "",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 * (6 - 2)) * 6 = 24",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 * (6 - 2)) * 6 = 24"
            ]
        },
        "step_7": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 * (6 - 2)) * 6 = 24\nInput: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3 - 3) * 8 = 24",
                "1 + 2 = 3 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)",
                "2 * 2 = 4 (left: 4 2 6)",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 * (6 - 2)) * 6 = 24\n\nGreat job finding all these solutions! Let me know if you need help with anything else.",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 * (6 - 2)) * 6 = 24\nInput: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) * (9 - 3) = 24"
            ],
            "values": [
                40.0,
                1.0,
                3.0,
                20.002,
                20.0
            ],
            "resampled": [
                "0 <- 6.1",
                "1 <- 7.3",
                "2 <- 1.1",
                "3 <- 4.2",
                "4 <- 7.4"
            ],
            "resampled_steps": [
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 * (6 - 2)) * 4 = 24",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 * (6 - 2)) * 6 = 24\n\nGreat job finding all these solutions! Let me know if you need help with anything else.",
                "6 - 2 = 4 (left: 1 4 6)",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 * (6 - 2)) * 6 = 24\nInput: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) * (9 - 3) = 24"
            ]
        },
        "step_8": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 * (6 - 2)) * 4 = 24\nInput: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n12 - 5 = 7 (left: 3 7)\n7 + 3 = 10 (left: 10)\n10 + 10 + 4 = 24 (left: 24)\nAnswer: ((3 * 4) - 5) + (3 + 4) + 10 = 24",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 * (6 - 2)) * 6 = 24\n\nGreat job finding all these solutions! Let me know if you need help with anything else.\nThank you! I'm glad I could help. If you need assistance with anything else, feel free to ask.",
                "6 - 2 = 4 (left: 1 4 6)\n6 - 4 = 2 (left: 1 2)",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 1 * (6 - 2) * 2 * 6 = 24",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 * (6 - 2)) * 6 = 24\nInput: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) * (9 - 3) = 24\nInput: 7 3 4 5\nSteps:\n4 * 5 = 20 (left: 7 3 20)\n7 - 3 = 4 (left: 4 20)\n4 * 20 = 80 (left: 80)\n80 / 4 = 20 (left: 20)\nAnswer: ((7 - 3) * 5) * 4 = 20"
            ],
            "values": [
                20.0,
                0.003,
                0.002,
                60.0,
                40.0
            ],
            "resampled": [
                "0 <- 5.1",
                "1 <- 1.1",
                "2 <- 6.3",
                "3 <- 8.3",
                "4 <- 4.0"
            ],
            "resampled_steps": [
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 * (6 - 2)) * 6 = 24",
                "6 - 2 = 4 (left: 1 4 6)",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 * (6 - 2)) * 6 = 24",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 1 * (6 - 2) * 2 * 6 = 24",
                "6 - 2 = 4 (left: 1 4 6)\n6 / 1 = 6 (left: 4 6)\n6 - 4 = 2 (left: 2 6)"
            ]
        },
        "step_9": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 * (6 - 2)) * 6 = 24\nInput: 3 3 8 8\nSteps:\n3 * 8 = 24 (left: 3 8 24)\n8 - 3 = 5 (left: 5 24)\n5 * 24 = 120 (left: 120)\nAnswer: (3 * 8) - (8 - 3) = 24",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 * (6 - 2)) * 6 = 24\nInput: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n3 * 4 = 12 (left: 8 12)\n12 - 8 = 4 (left: 4 12)\n4 * 6 = 24 (left: 24)\nAnswer: ((3 + 5) * 4) - 8 = 24",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 1 * (6 - 2) * 2 * 6 = 24\n\nInput: 3 3 4 5\nSteps:\n3 * 4 = 12 (left: 3 5 12)\n12 + 5 = 17 (left: 3 17)\n17 + 3 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((3 * 4) + 5) + 3 + 4 = 24",
                "6 - 2 = 4 (left: 1 4 6)\n6 / 1 = 6 (left: 4 6)\n6 - 4 = 2 (left: 2 6)\n6 / 2 = 3 (left: 3)"
            ],
            "values": [
                60.0,
                60.0,
                40.0,
                40.0,
                0.002
            ],
            "resampled": [
                "0 <- 8.4",
                "1 <- 6.3",
                "2 <- 4.2",
                "3 <- 9.1",
                "4 <- 5.1"
            ],
            "resampled_steps": [
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 * (6 - 2)) * 6 = 24\nInput: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) * (9 - 3) = 24\nInput: 7 3 4 5\nSteps:\n4 * 5 = 20 (left: 7 3 20)\n7 - 3 = 4 (left: 4 20)\n4 * 20 = 80 (left: 80)\n80 / 4 = 20 (left: 20)\nAnswer: ((7 - 3) * 5) * 4 = 20",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 * (6 - 2)) * 6 = 24",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 * (6 - 2)) * 6 = 24"
            ]
        },
        "step_10": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 * (6 - 2)) * 6 = 24\nInput: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) * (9 - 3) = 24\nInput: 7 3 4 5\nSteps:\n4 * 5 = 20 (left: 7 3 20)\n7 - 3 = 4 (left: 4 20)\n4 * 20 = 80 (left: 80)\n80 / 4 = 20 (left: 20)\nAnswer: ((7 - 3) * 5) * 4 = 20\nSorry, it is not possible to obtain 24 using the numbers 7, 3, 4, and 5.",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 * (6 - 2)) * 6 = 24\nInput: 3 3 8 8\nSteps:\n3 * 8 = 24 (left: 3 8 24)\n8 - 3 = 5 (left: 5 24)\n5 * 24 = 120 (left: 120)\nAnswer: (3 * 8) - (8 - 3) = 24",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 * (6 - 2)) * 6 = 24",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)",
                "6 - 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 * (6 - 2)) * 6 = 24\nInput: 3 3 4 4\nSteps:\n3 + 4 = 7 (left: 3 4 7)\n4 * 7 = 28 (left: 3 28)\n28 - 3 = 25 (left: 25)\nAnswer: (3 + 4) * (4 * 7) = 24"
            ],
            "values": [
                0.003,
                60.0,
                60.0,
                0.003,
                40.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.24703599999999998
    },
    "7": {
        "input": "1 1 10 12",
        "step_1": {
            "steps": [
                "10 - 1 = 9 (left: 1 9 12)",
                "10 + 1 = 11 (left: 1 11 12)",
                "1 + 1 = 2 (left: 2 10 12)",
                "1 + 1 = 2 (left: 2 10 12)",
                "12 - 1 = 11 (left: 1 10 11)"
            ],
            "values": [
                1.002,
                1.002,
                1.002,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                "",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "1 + 1 = 2 (left: 2 10 12)",
                "1 + 1 = 2 (left: 2 10 12)",
                "12 - 10 = 2 (left: 1 1 2)",
                "1 * 1 = 1 (left: 1 10 12)",
                "12 - 1 = 11 (left: 1 10 11)"
            ],
            "values": [
                0.003,
                1.002,
                1.002,
                1.002,
                0.002
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 2.3",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 10 12)",
                "1 * 1 = 1 (left: 1 10 12)",
                "",
                "",
                "1 + 1 = 2 (left: 2 10 12)"
            ]
        },
        "step_3": {
            "steps": [
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)",
                "1 * 1 = 1 (left: 1 10 12)\n12 / 1 = 12 (left: 12 12)",
                "10 / 1 = 10 (left: 1 10 12)",
                "12 / 1 = 12 (left: 1 10 12)",
                "1 + 1 = 2 (left: 2 10 12)\n12 / 2 = 6 (left: 6 12)"
            ],
            "values": [
                60.0,
                21.001,
                0.003,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 3.1",
                "2 <- 3.1",
                "3 <- 3.0",
                "4 <- 3.0"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)",
                "1 * 1 = 1 (left: 1 10 12)\n12 / 1 = 12 (left: 12 12)",
                "1 * 1 = 1 (left: 1 10 12)\n12 / 1 = 12 (left: 12 12)",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)"
            ]
        },
        "step_4": {
            "steps": [
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "1 * 1 = 1 (left: 1 10 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "1 * 1 = 1 (left: 1 10 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)"
            ],
            "values": [
                0.003,
                0.003,
                40.0,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 4.4",
                "1 <- 4.4",
                "2 <- 4.2",
                "3 <- 4.2",
                "4 <- 4.3"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 10 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 10 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)"
            ]
        },
        "step_5": {
            "steps": [
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24",
                "1 * 1 = 1 (left: 1 10 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 1) * (10 + 12) = 24",
                "1 * 1 = 1 (left: 1 10 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 1) + (10 * 12) = 24",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24"
            ],
            "values": [
                0.003,
                40.001,
                0.003,
                40.001,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 4.4",
                "2 <- 3.0",
                "3 <- 3.0",
                "4 <- 5.1"
            ],
            "resampled_steps": [
                "",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24"
            ]
        },
        "step_6": {
            "steps": [
                "10 * 1 = 10 (left: 10 10 12)",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24\nInput: 3 3 3 8\n3 * 3 = 9 (left: 9 3 8)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) - (8 - 6) = 24"
            ],
            "values": [
                0.002,
                0.003,
                0.001,
                0.001,
                40.0
            ],
            "resampled": [
                "0 <- 6.4",
                "1 <- 4.3",
                "2 <- 6.4",
                "3 <- 4.2",
                "4 <- 5.1"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24\nInput: 3 3 3 8\n3 * 3 = 9 (left: 9 3 8)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) - (8 - 6) = 24",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24\nInput: 3 3 3 8\n3 * 3 = 9 (left: 9 3 8)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) - (8 - 6) = 24",
                "1 * 1 = 1 (left: 1 10 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24"
            ]
        },
        "step_7": {
            "steps": [
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24\nInput: 3 3 3 8\n3 * 3 = 9 (left: 9 3 8)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) - (8 - 6) = 24\nInput: 7 3 4 2\nSteps:\n7 - 3 = 4 (left: 4 2 4)\n4 * 4 = 16 (left: 2 16)\n16 * 2 = 32 (left: 32)\nAnswer: ((7 - 3) * 4) * 2 = 24",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24\nInput: 3 3 3 8\n3 * 3 = 9 (left: 9 3 8)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) - (8 - 6) = 24\nInput: 7 3 4 5\nSteps:\n4 * 5 = 20 (left: 7 3 20)\n20 + 7 = 27 (left: 3 27)\n27 - 3 = 24 (left: 24)\nAnswer: (4 * 5) + (7 - 3) = 24",
                "1 * 1 = 1 (left: 1 10 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 1) + (10 * 12) = 24",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24\nInput: 3 3 8 5\nSteps:\n3 * 8 = 24 (left: 3 5 24)\n5 - 3 = 2 (left: 2 24)\n24 / 2 = 12 (left: 12)\nAnswer: (3 * 8) - (5 - 3) = 24"
            ],
            "values": [
                40.0,
                0.003,
                60.0,
                60.0,
                20.0
            ],
            "resampled": [
                "0 <- 7.2",
                "1 <- 7.2",
                "2 <- 5.1",
                "3 <- 5.1",
                "4 <- 3.0"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24\nInput: 3 3 3 8\n3 * 3 = 9 (left: 9 3 8)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) - (8 - 6) = 24\nInput: 7 3 4 5\nSteps:\n4 * 5 = 20 (left: 7 3 20)\n20 + 7 = 27 (left: 3 27)\n27 - 3 = 24 (left: 24)\nAnswer: (4 * 5) + (7 - 3) = 24",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24\nInput: 3 3 3 8\n3 * 3 = 9 (left: 9 3 8)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) - (8 - 6) = 24\nInput: 7 3 4 5\nSteps:\n4 * 5 = 20 (left: 7 3 20)\n20 + 7 = 27 (left: 3 27)\n27 - 3 = 24 (left: 24)\nAnswer: (4 * 5) + (7 - 3) = 24",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)"
            ]
        },
        "step_8": {
            "steps": [
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24\nInput: 3 3 3 8\n3 * 3 = 9 (left: 9 3 8)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) - (8 - 6) = 24\nInput: 7 3 4 5\nSteps:\n4 * 5 = 20 (left: 7 3 20)\n20 + 7 = 27 (left: 3 27)\n27 - 3 = 24 (left: 24)\nAnswer: (4 * 5) + (7 - 3) = 24\nInput: 2 3 3 4\nSteps:\n3 * 3 = 9 (left: 2 9 4)\n9 - 4 = 5 (left: 2 5)\n5 * 2 = 10 (left: 10)\n10 + 4 = 14 (left: 14)\n14 * 2 = 28 (left: 28)\n28 - 4 = 24 (left: 24)\nAnswer: (((2 * 3) - 4) * 5) + (4 * 3) = 24",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24\nInput: 3 3 3 8\n3 * 3 = 9 (left: 9 3 8)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) - (8 - 6) = 24\nInput: 7 3 4 5\nSteps:\n4 * 5 = 20 (left: 7 3 20)\n20 + 7 = 27 (left: 3 27)\n27 - 3 = 24 (left: 24)\nAnswer: (4 * 5) + (7 - 3) = 24\nInput: 2 2 3 9\nSteps:\n2 + 3 = 5 (left: 2 5 9)\n5 * 2 = 10 (left: 10 9)\n10 + 9 = 19 (left: 19)\nAnswer: (2 + 3) * (2 * 9) = 24",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24\nInput: 3 3 4 4\nSteps:\n3 + 4 = 7 (left: 3 4 7)\n4 * 7 = 28 (left: 3 28)\n28 - 3 = 25 (left: 25)\n25 + 4 = 29 (left: 29)\n29 - 4 = 25 (left: 25)\n25 + 3 = 28 (left: 28)\n28 - 4 = 24 (left: 24)\nAnswer: (((3 + 4) * 7) - 3) + 4 - 4 + 3 = 24",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24\nInput: 3 3 4 5\n3 * 4 = 12 (left: 3 5 12)\n12 + 5 = 17 (left: 3 17)\n17 + 3 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((3 * 4) + 5) + 3 + 4 = 24",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n12 / 2 = 6 (left: 6)"
            ],
            "values": [
                40.0,
                0.0,
                60.0,
                40.0,
                0.003
            ],
            "resampled": [
                "0 <- 8.0",
                "1 <- 8.0",
                "2 <- 8.0",
                "3 <- 5.1",
                "4 <- 5.3"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24\nInput: 3 3 3 8\n3 * 3 = 9 (left: 9 3 8)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) - (8 - 6) = 24\nInput: 7 3 4 5\nSteps:\n4 * 5 = 20 (left: 7 3 20)\n20 + 7 = 27 (left: 3 27)\n27 - 3 = 24 (left: 24)\nAnswer: (4 * 5) + (7 - 3) = 24\nInput: 2 3 3 4\nSteps:\n3 * 3 = 9 (left: 2 9 4)\n9 - 4 = 5 (left: 2 5)\n5 * 2 = 10 (left: 10)\n10 + 4 = 14 (left: 14)\n14 * 2 = 28 (left: 28)\n28 - 4 = 24 (left: 24)\nAnswer: (((2 * 3) - 4) * 5) + (4 * 3) = 24",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24\nInput: 3 3 3 8\n3 * 3 = 9 (left: 9 3 8)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) - (8 - 6) = 24\nInput: 7 3 4 5\nSteps:\n4 * 5 = 20 (left: 7 3 20)\n20 + 7 = 27 (left: 3 27)\n27 - 3 = 24 (left: 24)\nAnswer: (4 * 5) + (7 - 3) = 24\nInput: 2 3 3 4\nSteps:\n3 * 3 = 9 (left: 2 9 4)\n9 - 4 = 5 (left: 2 5)\n5 * 2 = 10 (left: 10)\n10 + 4 = 14 (left: 14)\n14 * 2 = 28 (left: 28)\n28 - 4 = 24 (left: 24)\nAnswer: (((2 * 3) - 4) * 5) + (4 * 3) = 24",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24\nInput: 3 3 3 8\n3 * 3 = 9 (left: 9 3 8)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) - (8 - 6) = 24\nInput: 7 3 4 5\nSteps:\n4 * 5 = 20 (left: 7 3 20)\n20 + 7 = 27 (left: 3 27)\n27 - 3 = 24 (left: 24)\nAnswer: (4 * 5) + (7 - 3) = 24\nInput: 2 3 3 4\nSteps:\n3 * 3 = 9 (left: 2 9 4)\n9 - 4 = 5 (left: 2 5)\n5 * 2 = 10 (left: 10)\n10 + 4 = 14 (left: 14)\n14 * 2 = 28 (left: 28)\n28 - 4 = 24 (left: 24)\nAnswer: (((2 * 3) - 4) * 5) + (4 * 3) = 24",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24",
                "1 * 1 = 1 (left: 1 10 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 1) + (10 * 12) = 24"
            ]
        },
        "step_9": {
            "steps": [
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24\nInput: 3 3 3 8\n3 * 3 = 9 (left: 9 3 8)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) - (8 - 6) = 24\nInput: 7 3 4 5\nSteps:\n4 * 5 = 20 (left: 7 3 20)\n20 + 7 = 27 (left: 3 27)\n27 - 3 = 24 (left: 24)\nAnswer: (4 * 5) + (7 - 3) = 24\nInput: 2 3 3 4\nSteps:\n3 * 3 = 9 (left: 2 9 4)\n9 - 4 = 5 (left: 2 5)\n5 * 2 = 10 (left: 10)\n10 + 4 = 14 (left: 14)\n14 * 2 = 28 (left: 28)\n28 - 4 = 24 (left: 24)\nAnswer: (((2 * 3) - 4) * 5) + (4 * 3) = 24\nInput: 1 3 5 8\nSteps:\n3 * 5 = 15 (left: 1 8 15)\n15 - 8 = 7 (left: 1 7)\n7 * 1 = 7 (left: 7)\n7 * 3 = 21 (left: 21)\n21 - 8 = 13 (left: 13)\n13 + 1 = 14 (left: 14)\n14 * 8 = 112 (left: 112)\n112 / 5 = 22.4 (left: 22.4)\n22.4 + 3 = 25.4 (left: 25.4)\n25.4 - 1 = 24.4 (left: 24.4)\n24.4 * 1 = 24.4 (left: 24.4)\nAnswer: ((((1 * 3) * 5) - 8) * 1) + 8 = 24.4",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24\nInput: 3 3 3 8\n3 * 3 = 9 (left: 9 3 8)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) - (8 - 6) = 24\nInput: 7 3 4 5\nSteps:\n4 * 5 = 20 (left: 7 3 20)\n20 + 7 = 27 (left: 3 27)\n27 - 3 = 24 (left: 24)\nAnswer: (4 * 5) + (7 - 3) = 24\nInput: 2 3 3 4\nSteps:\n3 * 3 = 9 (left: 2 9 4)\n9 - 4 = 5 (left: 2 5)\n5 * 2 = 10 (left: 10)\n10 + 4 = 14 (left: 14)\n14 * 2 = 28 (left: 28)\n28 - 4 = 24 (left: 24)\nAnswer: (((2 * 3) - 4) * 5) + (4 * 3) = 24\nInput: 6 3 5 2\nSteps:\n6 * 5 = 30 (left: 3 2 30)\n30 - 3 = 27 (left: 2 27)\n27 - 2 = 25 (left: 25)\nAnswer: ((6 * 5) - 3) - 2 = 24",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24\nInput: 3 3 3 8\n3 * 3 = 9 (left: 9 3 8)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) - (8 - 6) = 24\nInput: 7 3 4 5\nSteps:\n4 * 5 = 20 (left: 7 3 20)\n20 + 7 = 27 (left: 3 27)\n27 - 3 = 24 (left: 24)\nAnswer: (4 * 5) + (7 - 3) = 24\nInput: 2 3 3 4\nSteps:\n3 * 3 = 9 (left: 2 9 4)\n9 - 4 = 5 (left: 2 5)\n5 * 2 = 10 (left: 10)\n10 + 4 = 14 (left: 14)\n14 * 2 = 28 (left: 28)\n28 - 4 = 24 (left: 24)\nAnswer: (((2 * 3) - 4) * 5) + (4 * 3) = 24\nInput: 6 6 6 6\nSteps:\n6 + 6 = 12 (left: 6 6 12)\n12 * 6 = 72 (left: 6 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = 72 (left: 72)\n72 / 6 = 12 (left: 12)\n12 * 6 = ",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24\nInput: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 9 3 8)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3 - 3) * 8 = 48",
                "1 * 1 = 1 (left: 1 10 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 1) + (10 * 12) = 24\nInput: 3 3 4 6\nSteps:\n4 * 6 = 24 (left: 3 3 24)\n3 * 3 = 9 (left: 9 24)\n24 / 9 = 2.66666666667 (left: 2.66666666667)\nAnswer: (3 * 3) * (4 * 6) = 24"
            ],
            "values": [
                20.0,
                60.0,
                0.0,
                60.0,
                40.0
            ],
            "resampled": [
                "0 <- 9.4",
                "1 <- 4.3",
                "2 <- 9.4",
                "3 <- 8.2",
                "4 <- 3.0"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 10 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 1) + (10 * 12) = 24\nInput: 3 3 4 6\nSteps:\n4 * 6 = 24 (left: 3 3 24)\n3 * 3 = 9 (left: 9 24)\n24 / 9 = 2.66666666667 (left: 2.66666666667)\nAnswer: (3 * 3) * (4 * 6) = 24",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 10 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 1) + (10 * 12) = 24\nInput: 3 3 4 6\nSteps:\n4 * 6 = 24 (left: 3 3 24)\n3 * 3 = 9 (left: 9 24)\n24 / 9 = 2.66666666667 (left: 2.66666666667)\nAnswer: (3 * 3) * (4 * 6) = 24",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24\nInput: 3 3 4 4\nSteps:\n3 + 4 = 7 (left: 3 4 7)\n4 * 7 = 28 (left: 3 28)\n28 - 3 = 25 (left: 25)\n25 + 4 = 29 (left: 29)\n29 - 4 = 25 (left: 25)\n25 + 3 = 28 (left: 28)\n28 - 4 = 24 (left: 24)\nAnswer: (((3 + 4) * 7) - 3) + 4 - 4 + 3 = 24",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)"
            ]
        },
        "step_10": {
            "steps": [
                "1 * 1 = 1 (left: 1 10 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 1) + (10 * 12) = 24\nInput: 3 3 4 6\nSteps:\n4 * 6 = 24 (left: 3 3 24)\n3 * 3 = 9 (left: 9 24)\n24 / 9 = 2.66666666667 (left: 2.66666666667)\nAnswer: (3 * 3) * (4 * 6) = 24\n\nInput: 2 3 4 6\nSteps:\n3 + 6 = 9 (left: 2 4 9)\n4 * 2 = 8 (left: 8 9)\n9 - 8 = 1 (left: 1 9)\n1 * 9 = 9 (left: 9)\n9 * 2 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((2 * 4) - (9 - 8)) * (9 * 2) = 24",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24",
                "1 * 1 = 1 (left: 1 10 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 1) + (10 * 12) = 24\nInput: 3 3 4 6\nSteps:\n4 * 6 = 24 (left: 3 3 24)\n3 * 3 = 9 (left: 9 24)\n24 / 9 = 2.66666666667 (left: 2.66666666667)\nAnswer: (3 * 3) * (4 * 6) = 24\nThere is a mistake in your input. The number 2.66666666667 is not a whole number, and the rules state that you are only allowed to choose two of the remaining numbers to obtain a new number. Please try again with a different set of numbers.",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 + 1) * (10 + 12) = 24\nInput: 3 3 4 4\nSteps:\n3 + 4 = 7 (left: 3 4 7)\n4 * 7 = 28 (left: 3 28)\n28 - 3 = 25 (left: 25)\n25 + 4 = 29 (left: 29)\n29 - 4 = 25 (left: 25)\n25 + 3 = 28 (left: 28)\n28 - 4 = 24 (left: 24)\nAnswer: (((3 + 4) * 7) - 3) + 4 - 4 + 3 = 24\nInput: 3 5 6 7\n\nSteps:\n6 * 5 = 30 (left: 3 7 30)\n30 - 7 = 23 (left: 3 23)\n23 - 3 = 20 (left: 20)\n20 + 7 = 27 (left: 27)\n27 - 3 = 24 (left: 24)\n\nAnswer: ((((3 * 5) - 7) - 3) + 7) - 3 = 24",
                "1 + 1 = 2 (left: 2 10 12)\n10 + 2 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)"
            ],
            "values": [
                20.0,
                0.003,
                0.003,
                60.0,
                20.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.296501
    },
    "8": {
        "input": "2 2 10 10",
        "step_1": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)",
                "10 - 2 = 8 (left: 2 10 8)",
                "2 * 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)",
                "2 * 2 = 4 (left: 4 10 10)"
            ],
            "values": [
                22.0,
                0.003,
                2.001,
                20.002,
                0.003
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 1.3",
                "2 <- INIT",
                "3 <- 1.0",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "2 + 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)",
                "",
                "2 + 2 = 4 (left: 4 10 10)",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)\n4 * 10 = 40 (left: 10 40)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "2 + 2 = 4 (left: 4 10 10)\n4 * 10 = 40 (left: 40 10)",
                "10 / 2 = 5 (left: 2 5 10)"
            ],
            "values": [
                2.001,
                2.001,
                2.001,
                20.002,
                40.0
            ],
            "resampled": [
                "0 <- 2.3",
                "1 <- INIT",
                "2 <- 2.3",
                "3 <- 1.0",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "2 + 2 = 4 (left: 4 10 10)\n4 * 10 = 40 (left: 40 10)",
                "",
                "2 + 2 = 4 (left: 4 10 10)\n4 * 10 = 40 (left: 40 10)",
                "2 + 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10)"
            ]
        },
        "step_3": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)\n4 * 10 = 40 (left: 40 10)\n40 + 10 = 50 (left: 50)",
                "2 + 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)\n4 * 10 = 40 (left: 40 10)\n40 / 10 = 4 (left: 4 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 + 4 = 14 (left: 4 14)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10)\n6 + 10 = 16 (left: 10 16)"
            ],
            "values": [
                0.0,
                0.003,
                22.0,
                1.001,
                0.003
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- INIT",
                "2 <- 1.3",
                "3 <- 1.3",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "2 + 2 = 4 (left: 4 10 10)\n4 * 10 = 40 (left: 40 10)\n40 / 10 = 4 (left: 4 10)",
                "",
                "2 + 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)",
                ""
            ]
        },
        "step_4": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)\n4 * 10 = 40 (left: 40 10)\n40 / 10 = 4 (left: 4 10)\n4 * 10 = 40 (left: 10 40)",
                "2 * 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)\n4 * 10 = 40 (left: 10 40)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10)",
                "10 - 2 = 8 (left: 2 8 10)"
            ],
            "values": [
                1.002,
                0.002,
                0.003,
                2.0,
                2.001
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 4.0",
                "2 <- 2.3",
                "3 <- 2.3",
                "4 <- 2.3"
            ],
            "resampled_steps": [
                "2 + 2 = 4 (left: 4 10 10)\n4 * 10 = 40 (left: 40 10)\n40 / 10 = 4 (left: 4 10)",
                "2 + 2 = 4 (left: 4 10 10)\n4 * 10 = 40 (left: 40 10)\n40 / 10 = 4 (left: 4 10)\n4 * 10 = 40 (left: 10 40)",
                "2 + 2 = 4 (left: 4 10 10)\n4 * 10 = 40 (left: 40 10)",
                "2 + 2 = 4 (left: 4 10 10)\n4 * 10 = 40 (left: 40 10)",
                "2 + 2 = 4 (left: 4 10 10)\n4 * 10 = 40 (left: 40 10)"
            ]
        },
        "step_5": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)\n4 * 10 = 40 (left: 40 10)\n40 / 10 = 4 (left: 4 10)\n4 * 10 = 40 (left: 10 40)",
                "2 + 2 = 4 (left: 4 10 10)\n4 * 10 = 40 (left: 40 10)\n40 / 10 = 4 (left: 4 10)\n4 * 10 = 40 (left: 10 40)\n10 + 40 = 50 (left: 50)",
                "2 + 2 = 4 (left: 4 10 10)\n4 * 10 = 40 (left: 40 10)\n40 - 10 = 30 (left: 10 30)",
                "2 + 2 = 4 (left: 4 10 10)\n4 * 10 = 40 (left: 40 10)\n40 / 10 = 4 (left: 4 10)",
                "2 + 2 = 4 (left: 4 10 10)\n4 * 10 = 40 (left: 40 10)\n40 + 10 = 50 (left: 50)"
            ],
            "values": [
                1.002,
                0.002,
                0.003,
                40.0,
                0.002
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 2.4",
                "2 <- 2.4",
                "3 <- 1.3",
                "4 <- 3.2"
            ],
            "resampled_steps": [
                "2 + 2 = 4 (left: 4 10 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "2 + 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)\n4 * 10 = 40 (left: 40 10)\n40 / 10 = 4 (left: 4 10)"
            ]
        },
        "step_6": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)\n10 / 4 = 2.5 (left: 2.5 10)",
                "10 / 2 = 5 (left: 2 5 10)\n2 + 5 = 7 (left: 7 10)",
                "10 / 2 = 5 (left: 2 5 10)\n2 + 5 = 7 (left: 7 10)",
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 14)",
                "2 + 2 = 4 (left: 4 10 10)\n4 * 10 = 40 (left: 40 10)\n40 / 10 = 4 (left: 4 10)\n10 - 4 = 6 (left: 6)"
            ],
            "values": [
                1.002,
                0.003,
                1.002,
                60.0,
                0.001
            ],
            "resampled": [
                "0 <- 6.3",
                "1 <- 6.3",
                "2 <- 3.2",
                "3 <- 6.3",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 14)",
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 14)",
                "2 + 2 = 4 (left: 4 10 10)\n4 * 10 = 40 (left: 40 10)\n40 / 10 = 4 (left: 4 10)",
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 14)",
                "2 + 2 = 4 (left: 4 10 10)"
            ]
        },
        "step_7": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 14)\n10 / 14 = 0.714 (left: 0.714 14)",
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 14)\n10 / 14 = 0.7142857143",
                "2 + 2 = 4 (left: 4 10 10)\n4 * 10 = 40 (left: 40 10)\n40 / 10 = 4 (left: 4 10)\n10 - 4 = 6 (left: 6 10)",
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 14)\n14 / 10 = 1.4 (left: 1.4 14)",
                "2 + 2 = 4 (left: 4 10 10)\n10 / 4 = 2.5 (left: 2.5 10)"
            ],
            "values": [
                1.002,
                0.003,
                0.003,
                2.001,
                1.002
            ],
            "resampled": [
                "0 <- 6.3",
                "1 <- 3.2",
                "2 <- 6.3",
                "3 <- 1.0",
                "4 <- 6.3"
            ],
            "resampled_steps": [
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 14)",
                "2 + 2 = 4 (left: 4 10 10)\n4 * 10 = 40 (left: 40 10)\n40 / 10 = 4 (left: 4 10)",
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 14)",
                "2 + 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 14)"
            ]
        },
        "step_8": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 14)\n10 + 14 = 24 (left: 14 24)",
                "2 + 2 = 4 (left: 4 10 10)\n4 * 10 = 40 (left: 40 10)\n40 / 10 = 4 (left: 4 10)\n4 * 10 = 40 (left: 10 40)",
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 14)\n14 / 10 = 1.4 (left: 1.4 14)",
                "2 + 2 = 4 (left: 4 10 10)\n10 / 4 = 2.5 (left: 2.5 10)",
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 14)\n10 / 14 = 0.71 (left: 0.71)"
            ],
            "values": [
                1.002,
                0.002,
                3.0,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- 4.3",
                "1 <- 5.3",
                "2 <- 6.0",
                "3 <- 6.3",
                "4 <- 6.3"
            ],
            "resampled_steps": [
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10)",
                "2 + 2 = 4 (left: 4 10 10)\n4 * 10 = 40 (left: 40 10)\n40 / 10 = 4 (left: 4 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 / 4 = 2.5 (left: 2.5 10)",
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 14)",
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 14)"
            ]
        },
        "step_9": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10)\n6 * 10 = 60 (left: 60)",
                "2 + 2 = 4 (left: 4 10 10)\n4 * 10 = 40 (left: 40 10)\n40 / 10 = 4 (left: 4 10)\n10 / 4 = 2.5 (left: 2.5 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 / 4 = 2.5 (left: 2.5 10)\n2.5 * 10 = 25 (left: 25)",
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 14)\n14 / 10 = 1.4 (left: 1.4 14)",
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 14)\n10 + 14 = 24 (left: 14 24)"
            ],
            "values": [
                0.001,
                21.001,
                0.002,
                1.0,
                0.003
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- 9.1",
                "2 <- 2.4",
                "3 <- 6.3",
                "4 <- 6.3"
            ],
            "resampled_steps": [
                "10 / 2 = 5 (left: 2 5 10)",
                "2 + 2 = 4 (left: 4 10 10)\n4 * 10 = 40 (left: 40 10)\n40 / 10 = 4 (left: 4 10)\n10 / 4 = 2.5 (left: 2.5 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 14)",
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 14)"
            ]
        },
        "step_10": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10)\n5 * 2 = 10 (left: 10 10)",
                "2 + 2 = 4 (left: 4 10 10)\n4 * 10 = 40 (left: 40 10)\n40 / 10 = 4 (left: 4 10)\n10 / 4 = 2.5 (left: 2.5 10)\n2.5 * 10 = 25 (left: 10 25)",
                "10 / 2 = 5 (left: 2 5 10)\n5 + 5 = 10 (left: 10)",
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 14)\n10 + 14 = 24 (left: 24)",
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 14)\n10 - 14 = -4 (left: -4 14)"
            ],
            "values": [
                0.002,
                0.003,
                0.002,
                40.0,
                2.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.338945
    },
    "9": {
        "input": "1 1 1 12",
        "step_1": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12)",
                "1 + 1 = 2 (left: 1 2 12)",
                "1 * 1 = 1 (left: 1 1 12)"
            ],
            "values": [
                1.002,
                1.002,
                2.001,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 1.4",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- 1.3",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 1 12)",
                "1 + 1 = 2 (left: 1 2 12)",
                "1 + 1 = 2 (left: 1 2 12)",
                "1 + 1 = 2 (left: 1 2 12)",
                "1 + 1 = 2 (left: 1 2 12)"
            ]
        },
        "step_2": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 12)\n1 * 1 = 1 (left: 1 12)",
                "1 + 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "1 + 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "1 + 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)"
            ],
            "values": [
                1.002,
                60.0,
                40.001,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 2.2",
                "2 <- INIT",
                "3 <- 1.4",
                "4 <- 2.4"
            ],
            "resampled_steps": [
                "",
                "1 + 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "",
                "1 * 1 = 1 (left: 1 1 12)",
                "1 + 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)"
            ]
        },
        "step_3": {
            "steps": [
                "1 / 1 = 1 (left: 1 1 12)",
                "1 + 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "1 + 1 = 2 (left: 1 2 12)",
                "1 * 1 = 1 (left: 1 1 12)\n1 - 1 = 0 (left: 0 12)",
                "1 + 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)"
            ],
            "values": [
                20.0,
                0.003,
                60.0,
                0.002,
                60.0
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- 2.3",
                "2 <- 1.3",
                "3 <- INIT",
                "4 <- 3.4"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "1 + 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "1 + 1 = 2 (left: 1 2 12)",
                "",
                "1 + 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)"
            ]
        },
        "step_4": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)",
                "1 + 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 - 1 = 23 (left: 1 23)",
                "1 + 1 = 2 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "1 * 1 = 1 (left: 1 1 12)",
                "1 + 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)"
            ],
            "values": [
                0.0,
                22.0,
                1.002,
                1.0,
                60.0
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- 3.4",
                "2 <- 4.4",
                "3 <- 3.4",
                "4 <- 3.2"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "1 + 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)",
                "1 + 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)",
                "1 + 1 = 2 (left: 1 2 12)"
            ]
        },
        "step_5": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)",
                "1 + 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)",
                "1 + 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (1 + 1) * 12 = 24",
                "1 + 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)"
            ],
            "values": [
                0.003,
                60.0,
                60.0,
                40.0,
                60.0
            ],
            "resampled": [
                "0 <- 5.4",
                "1 <- 5.3",
                "2 <- 5.3",
                "3 <- 4.4",
                "4 <- 5.2"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (1 + 1) * 12 = 24"
            ]
        },
        "step_6": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n1 + 10 = 11 (left: 10 11)",
                "1 + 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: ((1 + 1) * 12) / 1 = 24",
                "1 + 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (1 + 1) * 12 = 24",
                "1 + 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (1 + 1) * 12 = 24",
                "1 + 1 = 2 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (1 + 1) * 12 = 24\n\nGreat job! All of your solutions are correct."
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.36462300000000003
    },
    "10": {
        "input": "1 1 2 8",
        "step_1": {
            "steps": [
                "2 + 8 = 10 (left: 1 10 8)",
                "1 + 1 = 2 (left: 2 2 8)",
                "1 + 1 = 2 (left: 2 2 8)",
                "8 - 2 = 6 (left: 1 2 6)",
                "1 + 1 = 2 (left: 2 2 8)"
            ],
            "values": [
                2.001,
                0.003,
                20.002,
                2.001,
                2.001
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 1.2",
                "2 <- INIT",
                "3 <- 1.2",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "2 + 8 = 10 (left: 1 10 8)",
                "1 + 1 = 2 (left: 2 2 8)",
                "",
                "1 + 1 = 2 (left: 2 2 8)",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "2 + 8 = 10 (left: 1 10 8)\n8 - 1 = 7 (left: 1 7 8)",
                "1 + 1 = 2 (left: 2 2 8)\n8 * 2 = 16 (left: 2 16)",
                "1 + 1 = 2 (left: 2 2 8)",
                "1 + 1 = 2 (left: 2 2 8)\n2 * 2 = 4 (left: 4 8)",
                "2 * 8 = 16 (left: 1 16 8)"
            ],
            "values": [
                2.001,
                1.002,
                0.003,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 1.2"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 2 8)",
                "",
                "",
                "",
                "1 + 1 = 2 (left: 2 2 8)"
            ]
        },
        "step_3": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 8)\n2 * 2 = 4 (left: 4 8)",
                "8 / 2 = 4 (left: 1 4 8)",
                "1 * 2 = 2 (left: 2 2 8)",
                "1 * 2 = 2 (left: 2 2 8)",
                "1 + 1 = 2 (left: 2 2 8)\n2 / 2 = 1 (left: 1 8)"
            ],
            "values": [
                41.0,
                22.0,
                1.001,
                2.001,
                41.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 3.4",
                "4 <- 1.2"
            ],
            "resampled_steps": [
                "",
                "",
                "",
                "1 + 1 = 2 (left: 2 2 8)\n2 / 2 = 1 (left: 1 8)",
                "1 + 1 = 2 (left: 2 2 8)"
            ]
        },
        "step_4": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 8)",
                "1 * 2 = 2 (left: 2 2 8)",
                "8 - 2 = 6 (left: 1 1 6)",
                "1 + 1 = 2 (left: 2 2 8)\n2 / 2 = 1 (left: 1 8)\n8 - 1 = 7 (left: 7)",
                "1 + 1 = 2 (left: 2 2 8)\n8 / 2 = 4 (left: 2 4)"
            ],
            "values": [
                0.003,
                1.002,
                1.002,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- INIT",
                "2 <- 3.4",
                "3 <- 3.4",
                "4 <- 3.4"
            ],
            "resampled_steps": [
                "8 / 2 = 4 (left: 1 4 8)",
                "",
                "1 + 1 = 2 (left: 2 2 8)\n2 / 2 = 1 (left: 1 8)",
                "1 + 1 = 2 (left: 2 2 8)\n2 / 2 = 1 (left: 1 8)",
                "1 + 1 = 2 (left: 2 2 8)\n2 / 2 = 1 (left: 1 8)"
            ]
        },
        "step_5": {
            "steps": [
                "8 / 2 = 4 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)",
                "1 * 2 = 2 (left: 2 2 8)",
                "1 + 1 = 2 (left: 2 2 8)\n2 / 2 = 1 (left: 1 8)\n1 * 8 = 8 (left: 8 8)",
                "1 + 1 = 2 (left: 2 2 8)\n2 / 2 = 1 (left: 1 8)\n1 * 8 = 8 (left: 8 8)",
                "1 + 1 = 2 (left: 2 2 8)\n2 / 2 = 1 (left: 1 8)\n1 * 8 = 8 (left: 8 8)"
            ],
            "values": [
                21.0,
                1.002,
                1.002,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 5.0",
                "1 <- 3.0",
                "2 <- 5.0",
                "3 <- 2.3",
                "4 <- 5.0"
            ],
            "resampled_steps": [
                "8 / 2 = 4 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)",
                "1 + 1 = 2 (left: 2 2 8)\n2 * 2 = 4 (left: 4 8)",
                "8 / 2 = 4 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)",
                "1 + 1 = 2 (left: 2 2 8)\n2 * 2 = 4 (left: 4 8)",
                "8 / 2 = 4 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)"
            ]
        },
        "step_6": {
            "steps": [
                "8 / 2 = 4 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)\n1 * 4 = 4 (left: 4 4)",
                "1 + 1 = 2 (left: 2 2 8)\n2 * 2 = 4 (left: 4 8)\n4 + 8 = 12 (left: 8 12)",
                "8 / 2 = 4 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)\n1 + 4 = 5 (left: 5)",
                "1 + 1 = 2 (left: 2 2 8)\n2 * 2 = 4 (left: 4 8)\n4 * 8 = 32 (left: 8 32)",
                "8 / 2 = 4 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)\n4 - 1 = 3 (left: 3)"
            ],
            "values": [
                2.001,
                1.001,
                0.001,
                1.002,
                0.002
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 3.0",
                "2 <- 6.0",
                "3 <- 5.0",
                "4 <- 5.0"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 2 8)\n2 * 2 = 4 (left: 4 8)",
                "1 + 1 = 2 (left: 2 2 8)\n2 * 2 = 4 (left: 4 8)",
                "8 / 2 = 4 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)\n1 * 4 = 4 (left: 4 4)",
                "8 / 2 = 4 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)",
                "8 / 2 = 4 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)"
            ]
        },
        "step_7": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 8)\n2 * 2 = 4 (left: 4 8)\n4 + 8 = 12 (left: 8 12)",
                "1 + 1 = 2 (left: 2 2 8)\n2 * 2 = 4 (left: 4 8)\n8 - 4 = 4 (left: 4 8)",
                "8 / 2 = 4 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)\n1 * 4 = 4 (left: 4 4)\n4 * 4 = 16 (left: 16)",
                "8 / 2 = 4 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)\n4 - 1 = 3 (left: 3)",
                "8 / 2 = 4 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)\n1 + 4 = 5 (left: 5)"
            ],
            "values": [
                2.0,
                0.002,
                0.003,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 5.0",
                "2 <- 3.0",
                "3 <- 1.2",
                "4 <- 5.0"
            ],
            "resampled_steps": [
                "8 / 2 = 4 (left: 1 4 8)",
                "8 / 2 = 4 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)",
                "1 + 1 = 2 (left: 2 2 8)\n2 * 2 = 4 (left: 4 8)",
                "1 + 1 = 2 (left: 2 2 8)",
                "8 / 2 = 4 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)"
            ]
        },
        "step_8": {
            "steps": [
                "8 / 2 = 4 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)",
                "8 / 2 = 4 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)\n1 * 4 = 4 (left: 4)",
                "1 + 1 = 2 (left: 2 2 8)\n2 * 2 = 4 (left: 4 8)\n4 * 8 = 32 (left: 8 32)",
                "1 + 1 = 2 (left: 2 2 8)\n8 / 2 = 4 (left: 4 2)",
                "8 / 2 = 4 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)\n4 - 1 = 3 (left: 3)"
            ],
            "values": [
                21.001,
                0.003,
                1.002,
                2.0,
                0.001
            ],
            "resampled": [
                "0 <- 8.0",
                "1 <- 3.1",
                "2 <- 3.0",
                "3 <- 7.0",
                "4 <- 3.0"
            ],
            "resampled_steps": [
                "8 / 2 = 4 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)",
                "8 / 2 = 4 (left: 1 4 8)",
                "1 + 1 = 2 (left: 2 2 8)\n2 * 2 = 4 (left: 4 8)",
                "1 + 1 = 2 (left: 2 2 8)\n2 * 2 = 4 (left: 4 8)\n4 + 8 = 12 (left: 8 12)",
                "1 + 1 = 2 (left: 2 2 8)\n2 * 2 = 4 (left: 4 8)"
            ]
        },
        "step_9": {
            "steps": [
                "8 / 2 = 4 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)\n4 - 1 = 3 (left: 3 4)",
                "8 / 2 = 4 (left: 1 4 8)\n8 / 4 = 2 (left: 1 2)",
                "1 + 1 = 2 (left: 2 2 8)\n2 * 2 = 4 (left: 4 8)\n8 - 4 = 4 (left: 4 8)",
                "1 + 1 = 2 (left: 2 2 8)\n2 * 2 = 4 (left: 4 8)\n4 + 8 = 12 (left: 8 12)\n8 + 12 = 20 (left: 20)",
                "1 + 1 = 2 (left: 2 2 8)\n2 * 2 = 4 (left: 4 8)\n4 * 8 = 32 (left: 8 32)"
            ],
            "values": [
                2.0,
                1.002,
                0.003,
                0.002,
                21.001
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 9.4",
                "2 <- 1.2",
                "3 <- 9.4",
                "4 <- 3.4"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 2 8)\n2 * 2 = 4 (left: 4 8)",
                "1 + 1 = 2 (left: 2 2 8)\n2 * 2 = 4 (left: 4 8)\n4 * 8 = 32 (left: 8 32)",
                "1 + 1 = 2 (left: 2 2 8)",
                "1 + 1 = 2 (left: 2 2 8)\n2 * 2 = 4 (left: 4 8)\n4 * 8 = 32 (left: 8 32)",
                "1 + 1 = 2 (left: 2 2 8)\n2 / 2 = 1 (left: 1 8)"
            ]
        },
        "step_10": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 8)\n2 * 2 = 4 (left: 4 8)\n8 / 4 = 2 (left: 2 8)",
                "1 + 1 = 2 (left: 2 2 8)\n2 * 2 = 4 (left: 4 8)\n4 * 8 = 32 (left: 8 32)\n8 + 32 = 40 (left: 40)",
                "1 + 1 = 2 (left: 2 2 8)\n2 - 2 = 0 (left: 0 8)",
                "1 + 1 = 2 (left: 2 2 8)\n2 * 2 = 4 (left: 4 8)\n4 * 8 = 32 (left: 8 32)\n8 + 32 = 40 (left: 40)",
                "1 + 1 = 2 (left: 2 2 8)\n2 / 2 = 1 (left: 1 8)\n8 - 1 = 7 (left: 7 8)"
            ],
            "values": [
                1.002,
                20.001,
                20.001,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.404444
    },
    "11": {
        "input": "1 1 4 8",
        "step_1": {
            "steps": [
                "1 * 4 = 4 (left: 1 4 8)",
                "8 - 1 = 7 (left: 1 4 7)",
                "1 * 4 = 4 (left: 1 4 8)",
                "8 / 4 = 2 (left: 1 2 8)",
                "4 * 1 = 4 (left: 4 4 8)"
            ],
            "values": [
                1.002,
                1.002,
                1.002,
                41.0,
                41.0
            ],
            "resampled": [
                "0 <- 1.4",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- INIT",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "4 * 1 = 4 (left: 4 4 8)",
                "8 / 4 = 2 (left: 1 2 8)",
                "8 / 4 = 2 (left: 1 2 8)",
                "",
                "8 / 4 = 2 (left: 1 2 8)"
            ]
        },
        "step_2": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8)\n4 - 4 = 0 (left: 0 8)",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 2 4 8)",
                "8 / 4 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)"
            ],
            "values": [
                21.001,
                60.0,
                60.0,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- 1.4",
                "2 <- 2.1",
                "3 <- 2.2",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "8 / 4 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "4 * 1 = 4 (left: 4 4 8)",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)"
            ]
        },
        "step_3": {
            "steps": [
                "8 / 4 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "4 * 1 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 + 8 = 11 (left: 8 11)",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 8 24)",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 8 24)"
            ],
            "values": [
                0.003,
                20.002,
                0.001,
                0.003,
                1.001
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 2.4",
                "2 <- 1.4",
                "3 <- 2.4",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "8 / 4 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "4 * 1 = 4 (left: 4 4 8)",
                "8 / 4 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                ""
            ]
        },
        "step_4": {
            "steps": [
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 8 24)",
                "8 / 4 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n6 - 1 = 5 (left: 5 6)",
                "4 * 1 = 4 (left: 4 4 8)\n8 - 4 = 4 (left: 4 8)",
                "8 / 4 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "4 * 2 = 8 (left: 1 8 8)"
            ],
            "values": [
                0.003,
                1.002,
                21.001,
                20.002,
                1.002
            ],
            "resampled": [
                "0 <- 1.4",
                "1 <- 2.2",
                "2 <- 3.1",
                "3 <- 2.4",
                "4 <- 2.2"
            ],
            "resampled_steps": [
                "4 * 1 = 4 (left: 4 4 8)",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)",
                "8 / 4 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)"
            ]
        },
        "step_5": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 8 24)",
                "4 * 1 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)\n1 + 8 = 9 (left: 8 9)",
                "8 / 4 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)"
            ],
            "values": [
                20.002,
                1.002,
                1.002,
                0.003,
                20.0
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 2.1",
                "2 <- 5.4",
                "3 <- 5.4",
                "4 <- 1.4"
            ],
            "resampled_steps": [
                "4 * 1 = 4 (left: 4 4 8)\n8 - 4 = 4 (left: 4 8)",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "4 * 1 = 4 (left: 4 4 8)"
            ]
        },
        "step_6": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8)\n8 - 4 = 4 (left: 4 8)\n8 - 4 = 4 (left: 4 8)",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (1 + 8 / 4) * 8 = 24",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (1 + 8 / 4) * 8 = 24",
                "4 * 1 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)"
            ],
            "values": [
                1.001,
                1.002,
                60.0,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- 2.2",
                "2 <- 6.3",
                "3 <- 5.0",
                "4 <- 6.1"
            ],
            "resampled_steps": [
                "8 / 4 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (1 + 8 / 4) * 8 = 24",
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)"
            ]
        },
        "step_7": {
            "steps": [
                "8 / 4 = 2 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 8 24)",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (1 + 8 / 4) * 8 = 24\nInput: 3 3 7 8\nSteps:\n3 * 7 = 21 (left: 3 8 21)\n21 - 3 = 18 (left: 8 18)\n18 / 8 = 2.25 (left: 2.25)\n2.25 * 3 = 24 (left: 24)\nAnswer: ((3 * 7) - 3) / 8 * 3 = 24",
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 * 8 = 128 (left: 8 128)",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n8 - 5 = 3 (left: 3 8)"
            ],
            "values": [
                0.002,
                0.003,
                20.0,
                20.002,
                60.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 7.4",
                "2 <- 6.3",
                "3 <- 6.3",
                "4 <- 7.2"
            ],
            "resampled_steps": [
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n8 - 5 = 3 (left: 3 8)",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (1 + 8 / 4) * 8 = 24",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (1 + 8 / 4) * 8 = 24",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (1 + 8 / 4) * 8 = 24\nInput: 3 3 7 8\nSteps:\n3 * 7 = 21 (left: 3 8 21)\n21 - 3 = 18 (left: 8 18)\n18 / 8 = 2.25 (left: 2.25)\n2.25 * 3 = 24 (left: 24)\nAnswer: ((3 * 7) - 3) / 8 * 3 = 24"
            ]
        },
        "step_8": {
            "steps": [
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n8 - 5 = 3 (left: 3 8)\n3 + 8 = 11 (left: 8 11)",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (1 + 8 / 4) * 8 = 24\nInput: 3 3 6 8\nSteps:\n3 + 6 = 9 (left: 3 8 9)\n9 * 8 = 72 (left: 72)\n72 / 3 = 24 (left: 24)\nAnswer: ((3 + 6) * 8) / 3 = 24",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (1 + 8 / 4) * 8 = 24\n\nInput: 3 3 3 3\nSteps:\n3 * 3 = 9 (left: 3 3 9)\n3 - 3 = 0 (left: 0 9)\n9 * 0 = 0 (left: 0)\nAnswer: (3 * 3) * (3 - 3) = 24",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (1 + 8 / 4) * 8 = 24\nInput: 3 3 7 8\nSteps:\n3 * 7 = 21 (left: 3 8 21)\n21 - 3 = 18 (left: 8 18)\n18 / 8 = 2.25 (left: 2.25)\n2.25 * 3 = 24 (left: 24)\nAnswer: ((3 * 7) - 3) / 8 * 3 = 24\nInput: 2 2 3 4\nSteps:\n2 * 3 = 6 (left: 2 4 6)\n6 * 4 = 24 (left: 24)\nAnswer: (2 * 3) * 4 = 24"
            ],
            "values": [
                3.0,
                0.002,
                40.0,
                40.0,
                40.0
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 8.2",
                "2 <- 8.3",
                "3 <- 6.3",
                "4 <- 2.2"
            ],
            "resampled_steps": [
                "4 * 1 = 4 (left: 4 4 8)\n4 - 4 = 0 (left: 0 8)",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (1 + 8 / 4) * 8 = 24\nInput: 3 3 6 8\nSteps:\n3 + 6 = 9 (left: 3 8 9)\n9 * 8 = 72 (left: 72)\n72 / 3 = 24 (left: 24)\nAnswer: ((3 + 6) * 8) / 3 = 24",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (1 + 8 / 4) * 8 = 24\n\nInput: 3 3 3 3\nSteps:\n3 * 3 = 9 (left: 3 3 9)\n3 - 3 = 0 (left: 0 9)\n9 * 0 = 0 (left: 0)\nAnswer: (3 * 3) * (3 - 3) = 24",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (1 + 8 / 4) * 8 = 24",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)"
            ]
        },
        "step_9": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8)\n4 - 4 = 0 (left: 0 8)\n8 / 0 = undefined (cannot divide by 0)",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (1 + 8 / 4) * 8 = 24\nInput: 3 3 6 8\nSteps:\n3 + 6 = 9 (left: 3 8 9)\n9 * 8 = 72 (left: 72)\n72 / 3 = 24 (left: 24)\nAnswer: ((3 + 6) * 8) / 3 = 24\nInput: 2 2 6 8\nSteps:\n2 * 2 = 4 (left: 4 6 8)\n4 * 6 = 24 (left: 24)\nAnswer: (2 * 2) * 6 = 24",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (1 + 8 / 4) * 8 = 24\n\nInput: 3 3 3 3\nSteps:\n3 * 3 = 9 (left: 3 3 9)\n3 - 3 = 0 (left: 0 9)\n9 * 0 = 0 (left: 0)\nAnswer: (3 * 3) * (3 - 3) = 24\nInput: 1 3 5 7\nSteps:\n3 * 7 = 21 (left: 1 5 21)\n21 - 5 = 16 (left: 1 16)\n16 + 1 = 17 (left: 17)\n17 + 7 = 24 (left: 24)\nAnswer: ((3 * 7) - 5) + (1 + 7) = 24",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (1 + 8 / 4) * 8 = 24\n\nInput: 3 3 4 5\nSteps:\n3 + 4 = 7 (left: 3 5 7)\n7 * 5 = 35 (left: 3 35)\n35 - 3 = 32 (left: 32)\nAnswer: (3 + 4) * (5 * 7) = 24",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)"
            ],
            "values": [
                0.003,
                40.0,
                0.0,
                40.0,
                3.0
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 8.4",
                "2 <- 6.3",
                "3 <- 9.1",
                "4 <- 6.2"
            ],
            "resampled_steps": [
                "4 * 1 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (1 + 8 / 4) * 8 = 24\nInput: 3 3 7 8\nSteps:\n3 * 7 = 21 (left: 3 8 21)\n21 - 3 = 18 (left: 8 18)\n18 / 8 = 2.25 (left: 2.25)\n2.25 * 3 = 24 (left: 24)\nAnswer: ((3 * 7) - 3) / 8 * 3 = 24\nInput: 2 2 3 4\nSteps:\n2 * 3 = 6 (left: 2 4 6)\n6 * 4 = 24 (left: 24)\nAnswer: (2 * 3) * 4 = 24",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (1 + 8 / 4) * 8 = 24",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (1 + 8 / 4) * 8 = 24\nInput: 3 3 6 8\nSteps:\n3 + 6 = 9 (left: 3 8 9)\n9 * 8 = 72 (left: 72)\n72 / 3 = 24 (left: 24)\nAnswer: ((3 + 6) * 8) / 3 = 24\nInput: 2 2 6 8\nSteps:\n2 * 2 = 4 (left: 4 6 8)\n4 * 6 = 24 (left: 24)\nAnswer: (2 * 2) * 6 = 24",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (1 + 8 / 4) * 8 = 24"
            ]
        },
        "step_10": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)\n1 + 8 = 9 (left: 9)",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (1 + 8 / 4) * 8 = 24\nInput: 3 3 7 8\nSteps:\n3 * 7 = 21 (left: 3 8 21)\n21 - 3 = 18 (left: 8 18)\n18 / 8 = 2.25 (left: 2.25)\n2.25 * 3 = 24 (left: 24)\nAnswer: ((3 * 7) - 3) / 8 * 3 = 24\nInput: 2 2 3 4\nSteps:\n2 * 3 = 6 (left: 2 4 6)\n6 * 4 = 24 (left: 24)\nAnswer: (2 * 3) * 4 = 24\nInput: 2 3 4 4\nSteps:\n3 + 4 = 7 (left: 2 4 7)\n7 * 4 = 28 (left: 2 28)\n28 - 2 = 26 (left: 26)\n26 / 4 = 6.5 (left: 6.5)\n6.5 * 4 = 26 (left: 26)\nAnswer: ((3 + 4) * 4) - 2 / 4 * 4 = 24",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (1 + 8 / 4) * 8 = 24\n\nInput: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)\n5 * 9 = 45 (left: 45)\n45 - 21 = 24 (left: 24)\nAnswer: ((3 * 3) + (8 - 3)) * 9 - 21 = 24",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (1 + 8 / 4) * 8 = 24\nInput: 3 3 6 8\nSteps:\n3 + 6 = 9 (left: 3 8 9)\n9 * 8 = 72 (left: 72)\n72 / 3 = 24 (left: 24)\nAnswer: ((3 + 6) * 8) / 3 = 24\nInput: 2 2 6 8\nSteps:\n2 * 2 = 4 (left: 4 6 8)\n4 * 6 = 24 (left: 24)\nAnswer: (2 * 2) * 6 = 24\nInput: 1 2 3 4\nSteps:\n3 * 4 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n12 * 3 = 36 (left: 36)\n36 / 4 = 9 (left: 9)\n9 * 2 = 18 (left: 18)\n18 + 1 = 19 (left: 19)\n19 + 9 = 28 (left: 28)\n28 - 2 = 26 (left: 26)\n26 - 12 = 14 (left: 14)\n14 * 2 = 28 (left: 28)\n28 - 4 = 24 (left: 24)\nAnswer: ((((((((3 * 4) * 3) / 4) * 2) + 1) + 9) - 2) - 12) * 2 - 4 = 24",
                "8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (1 + 8 / 4) * 8 = 24\n\nInput: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3 - 3) * 8 = 24"
            ],
            "values": [
                0.003,
                40.0,
                40.0,
                60.0,
                20.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.449213
    },
    "12": {
        "input": "1 1 5 8",
        "step_1": {
            "steps": [
                "8 - 1 = 7 (left: 1 5 7)",
                "1 + 1 = 2 (left: 2 5 8)",
                "1 * 1 = 1 (left: 1 5 8)",
                "1 + 1 = 2 (left: 2 5 8)",
                "1 + 1 = 2 (left: 2 5 8)"
            ],
            "values": [
                3.0,
                3.0,
                3.0,
                2.001,
                3.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                "",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 8)",
                "8 - 5 = 3 (left: 1 5 3)",
                "1 * 5 = 5 (left: 5 1 8)",
                "8 - 1 = 7 (left: 7 5 8)",
                "1 * 5 = 5 (left: 1 5 8)"
            ],
            "values": [
                22.0,
                1.0,
                2.001,
                3.0,
                3.0
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 2.0",
                "3 <- 1.2",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 5 8)",
                "1 * 1 = 1 (left: 1 5 8)",
                "1 * 1 = 1 (left: 1 5 8)",
                "1 * 1 = 1 (left: 1 5 8)",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 8)\n5 / 1 = 5 (left: 5 8)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)",
                "1 * 1 = 1 (left: 1 5 8)\n8 / 1 = 8 (left: 5 8)",
                "1 * 1 = 1 (left: 1 5 8)\n8 - 1 = 7 (left: 7 8)",
                "5 * 1 = 5 (left: 1 5 8)"
            ],
            "values": [
                2.0,
                40.001,
                20.001,
                1.002,
                2.0
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 3.2",
                "2 <- 3.1",
                "3 <- 2.0",
                "4 <- 3.1"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 5 8)",
                "1 * 1 = 1 (left: 1 5 8)\n8 / 1 = 8 (left: 5 8)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)",
                "1 * 1 = 1 (left: 1 5 8)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)"
            ]
        },
        "step_4": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 8)\n8 / 5 = 1.6 (left: 1 1.6)",
                "1 * 1 = 1 (left: 1 5 8)\n8 / 1 = 8 (left: 5 8)\n5 * 8 = 40 (left: 40)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n1 * 40 = 40 (left: 40)",
                "1 * 1 = 1 (left: 1 5 8)\n8 - 5 = 3 (left: 1 3)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)"
            ],
            "values": [
                2.001,
                0.003,
                0.001,
                0.0,
                60.0
            ],
            "resampled": [
                "0 <- 4.4",
                "1 <- 2.0",
                "2 <- 2.0",
                "3 <- 4.4",
                "4 <- 4.0"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)",
                "1 * 1 = 1 (left: 1 5 8)",
                "1 * 1 = 1 (left: 1 5 8)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)",
                "1 * 1 = 1 (left: 1 5 8)\n8 / 5 = 1.6 (left: 1 1.6)"
            ]
        },
        "step_5": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)\n40 - 40 = 0 (left: 1 0)",
                "1 * 1 = 1 (left: 1 5 8)\n5 - 1 = 4 (left: 4 8)",
                "1 * 1 = 1 (left: 1 5 8)\n5 / 1 = 5 (left: 5 8)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)\n40 - 1 = 39 (left: 1 39)",
                "1 * 1 = 1 (left: 1 5 8)\n8 / 5 = 1.6 (left: 1 1.6)\n1 / 1.6 \u2248 0.625 (left: 0.625 1.6)"
            ],
            "values": [
                0.002,
                1.002,
                0.003,
                1.002,
                2.001
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 3.1",
                "2 <- 5.4",
                "3 <- 4.4",
                "4 <- 3.1"
            ],
            "resampled_steps": [
                "1 * 5 = 5 (left: 5 1 8)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)",
                "1 * 1 = 1 (left: 1 5 8)\n8 / 5 = 1.6 (left: 1 1.6)\n1 / 1.6 \u2248 0.625 (left: 0.625 1.6)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)"
            ]
        },
        "step_6": {
            "steps": [
                "1 * 5 = 5 (left: 5 1 8)\n1 - 8 = -7 (left: -7 8)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n5 * 5 = 25 (left: 5 25)",
                "1 * 1 = 1 (left: 1 5 8)\n8 / 5 = 1.6 (left: 1 1.6)\n1 / 1.6 \u2248 0.625 (left: 0.625 1.6)\n1.6 - 0.625 = 0.975 (left: 0.975 1.6)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)\n40 * 1 = 40 (left: 1 40)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n1 * 40 = 40 (left: 40 40)"
            ],
            "values": [
                1.002,
                1.001,
                3.0,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 6.1",
                "1 <- 6.3",
                "2 <- 4.4",
                "3 <- 4.4",
                "4 <- 4.4"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n5 * 5 = 25 (left: 5 25)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)\n40 * 1 = 40 (left: 1 40)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)"
            ]
        },
        "step_7": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n5 * 5 = 25 (left: 5 25)\n25 / 5 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)\n40 * 1 = 40 (left: 1 40)\n1 * 40 = 40 (left: 40 40)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)\n40 / 40 = 1 (left: 1)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)\n1 + 40 = 41 (left: 40 41)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)\n40 - 1 = 39 (left: 1 39)"
            ],
            "values": [
                0.001,
                0.002,
                0.003,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 5.4",
                "2 <- 6.3",
                "3 <- 6.3",
                "4 <- 6.3"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 5 8)\n5 / 1 = 5 (left: 5 8)",
                "1 * 1 = 1 (left: 1 5 8)\n8 / 5 = 1.6 (left: 1 1.6)\n1 / 1.6 \u2248 0.625 (left: 0.625 1.6)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)\n40 * 1 = 40 (left: 1 40)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)\n40 * 1 = 40 (left: 1 40)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)\n40 * 1 = 40 (left: 1 40)"
            ]
        },
        "step_8": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 8)\n5 / 1 = 5 (left: 5 8)\n8 - 5 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 5 8)\n8 / 5 = 1.6 (left: 1 1.6)\n1 / 1.6 \u2248 0.625 (left: 0.625 1.6)\n1.6 + 0.625 = 2.225 (left: 0.625 2.225)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)\n40 * 1 = 40 (left: 1 40)\n40 - 1 = 39 (left: 39)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)\n40 * 1 = 40 (left: 1 40)\n40 - 1 = 39 (left: 1 39)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)\n40 * 1 = 40 (left: 1 40)\n40 - 1 = 39 (left: 1 39)"
            ],
            "values": [
                0.003,
                3.0,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 3.1",
                "3 <- 4.4",
                "4 <- 4.4"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 5 8)",
                "1 * 1 = 1 (left: 1 5 8)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)"
            ]
        },
        "step_9": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 8)\n5 - 1 = 4 (left: 4 8)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n1 * 40 = 40 (left: 40)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)\n40 - 1 = 39 (left: 1 39)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)\n40 - 40 = 0 (left: 1 0)"
            ],
            "values": [
                20.001,
                1.001,
                0.003,
                20.002,
                0.003
            ],
            "resampled": [
                "0 <- 6.3",
                "1 <- 9.3",
                "2 <- 2.1",
                "3 <- 6.3",
                "4 <- 9.3"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)\n40 * 1 = 40 (left: 1 40)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)\n40 - 1 = 39 (left: 1 39)",
                "8 - 5 = 3 (left: 1 5 3)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)\n40 * 1 = 40 (left: 1 40)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)\n40 - 1 = 39 (left: 1 39)"
            ]
        },
        "step_10": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)\n40 * 1 = 40 (left: 1 40)\n1 * 40 = 40 (left: 40)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)\n40 - 1 = 39 (left: 1 39)\n1 + 39 = 40 (left: 39 40)",
                "8 - 5 = 3 (left: 1 5 3)\n1 * 3 = 3 (left: 3 5)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)\n40 * 1 = 40 (left: 1 40)\n1 / 40 = 0.025 (left: 40)",
                "1 * 1 = 1 (left: 1 5 8)\n5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)\n40 - 1 = 39 (left: 1 39)\n1 + 39 = 40 (left: 40)"
            ],
            "values": [
                0.003,
                1.002,
                0.0,
                0.001,
                0.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.4916140000000001
    },
    "13": {
        "input": "4 6 11 11",
        "step_1": {
            "steps": [
                "11 - 4 = 7 (left: 7 11 11)",
                "11 - 6 = 5 (left: 4 5 11)",
                "11 / 4 = 2.75 (left: 2.75 6 11)",
                "4 + 6 = 10 (left: 10 11 11)",
                "11 - 4 = 7 (left: 7 6 11)"
            ],
            "values": [
                0.003,
                1.002,
                3.0,
                0.003,
                21.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.4",
                "3 <- 1.4",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                "11 - 4 = 7 (left: 7 6 11)",
                "11 - 4 = 7 (left: 7 6 11)",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "6 / 4 = 1.5 (left: 4 11 11)",
                "11 / 4 = 2.75 (left: 2.75 11 11)",
                "11 - 4 = 7 (left: 7 6 11)\n7 * 11 = 77 (left: 77)",
                "11 - 4 = 7 (left: 7 6 11)\n11 - 6 = 5 (left: 7 5)",
                "4 + 6 = 10 (left: 10 11 11)"
            ],
            "values": [
                0.003,
                1.002,
                0.003,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 1.4",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "11 - 4 = 7 (left: 7 6 11)",
                "",
                "",
                "",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "11 - 4 = 7 (left: 7 6 11)\nPossible next steps:",
                "11 / 4 = 2.75 (left: 2.75 6 11)",
                "6 - 4 = 2 (left: 2 11 11)",
                "11 - 4 = 7 (left: 7 6 11)",
                "4 + 6 = 10 (left: 10 11 11)"
            ],
            "values": [
                0.003,
                2.001,
                20.002,
                3.0,
                0.003
            ],
            "resampled": [
                "0 <- 3.3",
                "1 <- 1.4",
                "2 <- 1.4",
                "3 <- 3.2",
                "4 <- 1.4"
            ],
            "resampled_steps": [
                "11 - 4 = 7 (left: 7 6 11)",
                "11 - 4 = 7 (left: 7 6 11)",
                "11 - 4 = 7 (left: 7 6 11)",
                "6 - 4 = 2 (left: 2 11 11)",
                "11 - 4 = 7 (left: 7 6 11)"
            ]
        },
        "step_4": {
            "steps": [
                "11 - 4 = 7 (left: 7 6 11)\n6 / 11 = 0.55 (left: 7 0.55)",
                "11 - 4 = 7 (left: 7 6 11)\n11 - 7 = 4 (left: 4)",
                "11 - 4 = 7 (left: 7 6 11)\n7 * 6 = 42 (left: 42 11)",
                "6 - 4 = 2 (left: 2 11 11)\n11 / 2 = 5.5 (left: 5.5 11)",
                "11 - 4 = 7 (left: 7 6 11)\n11 - 6 = 5 (left: 7 5)"
            ],
            "values": [
                2.001,
                0.002,
                0.003,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 3.2",
                "2 <- INIT",
                "3 <- 3.2",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "6 - 4 = 2 (left: 2 11 11)",
                "6 - 4 = 2 (left: 2 11 11)",
                "",
                "6 - 4 = 2 (left: 2 11 11)",
                ""
            ]
        },
        "step_5": {
            "steps": [
                "6 - 4 = 2 (left: 2 11 11)\n11 + 2 = 13 (left: 13 11)",
                "6 - 4 = 2 (left: 2 11 11)\n11 / 2 = 5.5 (left: 5.5 11)",
                "4 * 6 = 24 (left: 24 11 11)",
                "6 - 4 = 2 (left: 2 11 11)\n11 / 2 = 5.5 (left: 5.5 11)",
                "11 / 4 = 2.75 (left: 2.75 6 11)"
            ],
            "values": [
                60.0,
                1.002,
                60.0,
                2.001,
                3.0
            ],
            "resampled": [
                "0 <- 1.4",
                "1 <- 5.2",
                "2 <- 5.0",
                "3 <- 5.2",
                "4 <- 5.0"
            ],
            "resampled_steps": [
                "11 - 4 = 7 (left: 7 6 11)",
                "4 * 6 = 24 (left: 24 11 11)",
                "6 - 4 = 2 (left: 2 11 11)\n11 + 2 = 13 (left: 13 11)",
                "4 * 6 = 24 (left: 24 11 11)",
                "6 - 4 = 2 (left: 2 11 11)\n11 + 2 = 13 (left: 13 11)"
            ]
        },
        "step_6": {
            "steps": [
                "11 - 4 = 7 (left: 7 6 11)\n7 - 6 = 1 (left: 1 11)",
                "4 * 6 = 24 (left: 24 11 11)\n11 * 11 = 121 (left: 24 121)",
                "6 - 4 = 2 (left: 2 11 11)\n11 + 2 = 13 (left: 13 11)\n13 - 11 = 2 (left: 2)",
                "4 * 6 = 24 (left: 24 11 11)\n24 / 11 = 2.18181818182 (left: 2.18181818182 11)",
                "6 - 4 = 2 (left: 2 11 11)\n11 + 2 = 13 (left: 13 11)\n13 - 11 = 2 (left: 2)"
            ],
            "values": [
                1.0,
                20.001,
                0.001,
                41.0,
                0.002
            ],
            "resampled": [
                "0 <- 5.0",
                "1 <- INIT",
                "2 <- 5.0",
                "3 <- 6.1",
                "4 <- 1.4"
            ],
            "resampled_steps": [
                "6 - 4 = 2 (left: 2 11 11)\n11 + 2 = 13 (left: 13 11)",
                "",
                "6 - 4 = 2 (left: 2 11 11)\n11 + 2 = 13 (left: 13 11)",
                "4 * 6 = 24 (left: 24 11 11)\n11 * 11 = 121 (left: 24 121)",
                "11 - 4 = 7 (left: 7 6 11)"
            ]
        },
        "step_7": {
            "steps": [
                "6 - 4 = 2 (left: 2 11 11)\n11 + 2 = 13 (left: 13 11)\n13 * 11 = 143 (left: 143)",
                "11 - 4 = 7 (left: 7 6 11)",
                "6 - 4 = 2 (left: 2 11 11)\n11 + 2 = 13 (left: 13 11)\n11 - 13 = -2 (left: -2)",
                "4 * 6 = 24 (left: 24 11 11)\n11 * 11 = 121 (left: 24 121)\n121 / 24 = 5.04166666667 (left: 5.04166666667)",
                "11 - 4 = 7 (left: 7 6 11)\n7 + 6 = 13 (left: 13 11)"
            ],
            "values": [
                0.002,
                60.0,
                0.001,
                0.002,
                41.0
            ],
            "resampled": [
                "0 <- 5.2",
                "1 <- 7.1",
                "2 <- 7.1",
                "3 <- 3.2",
                "4 <- 5.0"
            ],
            "resampled_steps": [
                "4 * 6 = 24 (left: 24 11 11)",
                "11 - 4 = 7 (left: 7 6 11)",
                "11 - 4 = 7 (left: 7 6 11)",
                "6 - 4 = 2 (left: 2 11 11)",
                "6 - 4 = 2 (left: 2 11 11)\n11 + 2 = 13 (left: 13 11)"
            ]
        },
        "step_8": {
            "steps": [
                "4 * 6 = 24 (left: 24 11 11)\n24 + 11 = 35 (left: 11 11 35)",
                "11 - 4 = 7 (left: 7 6 11)\n11 - 7 = 4 (left: 6 4)",
                "11 - 4 = 7 (left: 7 6 11)\n7 / 6 = 1.1666666666666667 (left: 1.1666666666666667 11)",
                "6 - 4 = 2 (left: 2 11 11)\n11 / 2 = 5.5 (left: 5.5 11)",
                "6 - 4 = 2 (left: 2 11 11)\n11 + 2 = 13 (left: 13 11)\n13 + 11 = 24 (left: 24)"
            ],
            "values": [
                60.0,
                41.0,
                3.0,
                1.002,
                60.0
            ],
            "resampled": [
                "0 <- 8.4",
                "1 <- 8.4",
                "2 <- 8.0",
                "3 <- 8.0",
                "4 <- 8.0"
            ],
            "resampled_steps": [
                "6 - 4 = 2 (left: 2 11 11)\n11 + 2 = 13 (left: 13 11)\n13 + 11 = 24 (left: 24)",
                "6 - 4 = 2 (left: 2 11 11)\n11 + 2 = 13 (left: 13 11)\n13 + 11 = 24 (left: 24)",
                "4 * 6 = 24 (left: 24 11 11)\n24 + 11 = 35 (left: 11 11 35)",
                "4 * 6 = 24 (left: 24 11 11)\n24 + 11 = 35 (left: 11 11 35)",
                "4 * 6 = 24 (left: 24 11 11)\n24 + 11 = 35 (left: 11 11 35)"
            ]
        },
        "step_9": {
            "steps": [
                "6 - 4 = 2 (left: 2 11 11)\n11 + 2 = 13 (left: 13 11)\n13 + 11 = 24 (left: 24)\nAnswer: ((6 - 4) + 11) + 11 = 24",
                "6 - 4 = 2 (left: 2 11 11)\n11 + 2 = 13 (left: 13 11)\n13 + 11 = 24 (left: 24)\nAnswer: ((6 - 4) + 11) + 11 = 24",
                "4 * 6 = 24 (left: 24 11 11)\n24 + 11 = 35 (left: 11 11 35)\n11 * 11 = 121 (left: 121 35)",
                "4 * 6 = 24 (left: 24 11 11)\n24 + 11 = 35 (left: 11 11 35)\n11 + 11 = 22 (left: 22 35)",
                "4 * 6 = 24 (left: 24 11 11)\n24 + 11 = 35 (left: 11 11 35)\n35 - 11 = 24 (left: 11 24)"
            ]
        },
        "results": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.532393
    },
    "14": {
        "input": "1 1 3 12",
        "step_1": {
            "steps": [
                "1 + 1 = 2 (left: 2 3 12)",
                "3 * 4 = 12 (left: 1 3 12)",
                "12 / 3 = 4 (left: 1 3 4)",
                "12 / 4 = 3 (left: 1 1 3)",
                "3 * 4 = 12 (left: 1 3 12)"
            ],
            "values": [
                2.001,
                40.0,
                1.0,
                0.003,
                1.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.1",
                "3 <- 1.1",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "",
                "",
                "3 * 4 = 12 (left: 1 3 12)",
                "3 * 4 = 12 (left: 1 3 12)",
                "3 * 4 = 12 (left: 1 3 12)"
            ]
        },
        "step_2": {
            "steps": [
                "3 * 4 = 12 (left: 1 3 12)",
                "3 + 1 = 4 (left: 4 3 12)",
                "3 * 4 = 12 (left: 1 3 12)\n3 - 1 = 2 (left: 2 12)",
                "3 * 4 = 12 (left: 1 3 12)\n12 / 3 = 4 (left: 4 12)",
                "3 * 4 = 12 (left: 1 3 12)\n12 / 1 = 12 (left: 3 12)"
            ],
            "values": [
                22.0,
                60.0,
                60.0,
                22.0,
                20.002
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- INIT",
                "2 <- 2.1",
                "3 <- 2.1",
                "4 <- 2.4"
            ],
            "resampled_steps": [
                "3 * 4 = 12 (left: 1 3 12)\n3 - 1 = 2 (left: 2 12)",
                "",
                "3 + 1 = 4 (left: 4 3 12)",
                "3 + 1 = 4 (left: 4 3 12)",
                "3 * 4 = 12 (left: 1 3 12)\n12 / 1 = 12 (left: 3 12)"
            ]
        },
        "step_3": {
            "steps": [
                "3 * 4 = 12 (left: 1 3 12)\n3 - 1 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "1 * 3 = 3 (left: 1 3 12)",
                "3 + 1 = 4 (left: 4 3 12)\n3 + 12 = 15 (left: 4 15)",
                "3 + 1 = 4 (left: 4 3 12)\n12 - 3 = 9 (left: 9 12)",
                "3 * 4 = 12 (left: 1 3 12)\n12 / 1 = 12 (left: 3 12)\n3 * 4 = 12 (left: 3 4)"
            ],
            "values": [
                0.003,
                41.0,
                1.001,
                21.0,
                1.002
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 2.4",
                "2 <- INIT",
                "3 <- 2.2",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "3 + 1 = 4 (left: 4 3 12)",
                "3 * 4 = 12 (left: 1 3 12)\n12 / 1 = 12 (left: 3 12)",
                "",
                "3 * 4 = 12 (left: 1 3 12)\n3 - 1 = 2 (left: 2 12)",
                "3 * 4 = 12 (left: 1 3 12)"
            ]
        },
        "step_4": {
            "steps": [
                "3 + 1 = 4 (left: 4 3 12)\n4 / 3 = 1.33 (left: 1.33 12)",
                "3 * 4 = 12 (left: 1 3 12)\n12 / 1 = 12 (left: 3 12)\n3 * 4 = 12 (left: 12)",
                "12 - 3 = 9 (left: 1 3 9)",
                "3 * 4 = 12 (left: 1 3 12)\n3 - 1 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "3 * 4 = 12 (left: 1 3 12)\n12 - 3 = 9 (left: 1 9)"
            ],
            "values": [
                1.002,
                0.002,
                21.001,
                0.002,
                0.002
            ],
            "resampled": [
                "0 <- 2.3",
                "1 <- 3.1",
                "2 <- 2.3",
                "3 <- 2.3",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "3 * 4 = 12 (left: 1 3 12)\n12 / 3 = 4 (left: 4 12)",
                "1 * 3 = 3 (left: 1 3 12)",
                "3 * 4 = 12 (left: 1 3 12)\n12 / 3 = 4 (left: 4 12)",
                "3 * 4 = 12 (left: 1 3 12)\n12 / 3 = 4 (left: 4 12)",
                "3 + 1 = 4 (left: 4 3 12)"
            ]
        },
        "step_5": {
            "steps": [
                "3 * 4 = 12 (left: 1 3 12)\n12 / 3 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)",
                "1 * 3 = 3 (left: 1 3 12)\n3 + 12 = 15 (left: 1 15)",
                "3 * 4 = 12 (left: 1 3 12)\n12 / 3 = 4 (left: 4 12)\n12 / 3 = 4 (left: 4)",
                "3 * 4 = 12 (left: 1 3 12)\n12 / 3 = 4 (left: 4 12)\n4 + 12 = 16 (left: 16)",
                "3 + 1 = 4 (left: 4 3 12)\n4 + 3 = 7 (left: 7 12)"
            ],
            "values": [
                0.003,
                1.001,
                0.003,
                0.002,
                0.002
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 4.2",
                "2 <- 3.1",
                "3 <- 3.1",
                "4 <- 3.1"
            ],
            "resampled_steps": [
                "3 * 4 = 12 (left: 1 3 12)\n3 - 1 = 2 (left: 2 12)",
                "12 - 3 = 9 (left: 1 3 9)",
                "1 * 3 = 3 (left: 1 3 12)",
                "1 * 3 = 3 (left: 1 3 12)",
                "1 * 3 = 3 (left: 1 3 12)"
            ]
        },
        "step_6": {
            "steps": [
                "3 * 4 = 12 (left: 1 3 12)\n3 - 1 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "12 - 3 = 9 (left: 1 3 9)\n9 - 1 = 8 (left: 3 8)",
                "1 * 3 = 3 (left: 1 3 12)\n12 / 4 = 3 (left: 3 12)",
                "1 * 3 = 3 (left: 1 3 12)\n12 - 3 = 9 (left: 1 9)",
                "1 * 3 = 3 (left: 1 3 12)\n12 - 3 = 9 (left: 1 9 12)"
            ],
            "values": [
                0.003,
                60.0,
                0.003,
                0.0,
                1.001
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 4.2",
                "2 <- 2.1",
                "3 <- 2.3",
                "4 <- 6.1"
            ],
            "resampled_steps": [
                "3 + 1 = 4 (left: 4 3 12)",
                "12 - 3 = 9 (left: 1 3 9)",
                "3 + 1 = 4 (left: 4 3 12)",
                "3 * 4 = 12 (left: 1 3 12)\n12 / 3 = 4 (left: 4 12)",
                "12 - 3 = 9 (left: 1 3 9)\n9 - 1 = 8 (left: 3 8)"
            ]
        },
        "step_7": {
            "steps": [
                "3 + 1 = 4 (left: 4 3 12)\n3 + 12 = 15 (left: 4 15)",
                "12 - 3 = 9 (left: 1 3 9)\n9 / 3 = 3 (left: 1 3)",
                "3 + 1 = 4 (left: 4 3 12)\n4 / 3 = 1.33 (left: 1.33 12)",
                "3 * 4 = 12 (left: 1 3 12)\n12 / 3 = 4 (left: 4 12)\n12 - 4 = 8 (left: 8)",
                "12 - 3 = 9 (left: 1 3 9)\n9 - 1 = 8 (left: 3 8)\n8 / 3 = 2.67 (left: 2.67 8)"
            ],
            "values": [
                1.002,
                1.002,
                2.001,
                0.001,
                3.0
            ],
            "resampled": [
                "0 <- 6.1",
                "1 <- 2.2",
                "2 <- 6.1",
                "3 <- 4.2",
                "4 <- 3.3"
            ],
            "resampled_steps": [
                "12 - 3 = 9 (left: 1 3 9)\n9 - 1 = 8 (left: 3 8)",
                "3 * 4 = 12 (left: 1 3 12)\n3 - 1 = 2 (left: 2 12)",
                "12 - 3 = 9 (left: 1 3 9)\n9 - 1 = 8 (left: 3 8)",
                "12 - 3 = 9 (left: 1 3 9)",
                "3 + 1 = 4 (left: 4 3 12)\n12 - 3 = 9 (left: 9 12)"
            ]
        },
        "step_8": {
            "steps": [
                "12 - 3 = 9 (left: 1 3 9)\n9 - 1 = 8 (left: 3 8)\n3 + 8 = 11 (left: 8 11)",
                "3 * 4 = 12 (left: 1 3 12)\n3 - 1 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "12 - 3 = 9 (left: 1 3 9)\n9 - 1 = 8 (left: 3 8)\n3 + 8 = 11 (left: 8 11)",
                "12 - 3 = 9 (left: 1 3 9)\n3 + 9 = 12 (left: 1 12)",
                "3 + 1 = 4 (left: 4 3 12)\n12 - 3 = 9 (left: 9 12)\n12 / 9 = 1.33 (left: 1.33)"
            ],
            "values": [
                0.003,
                0.002,
                1.001,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 6.1",
                "2 <- 2.4",
                "3 <- 2.0",
                "4 <- 6.1"
            ],
            "resampled_steps": [
                "3 * 4 = 12 (left: 1 3 12)\n3 - 1 = 2 (left: 2 12)",
                "12 - 3 = 9 (left: 1 3 9)\n9 - 1 = 8 (left: 3 8)",
                "3 * 4 = 12 (left: 1 3 12)\n12 / 1 = 12 (left: 3 12)",
                "3 * 4 = 12 (left: 1 3 12)",
                "12 - 3 = 9 (left: 1 3 9)\n9 - 1 = 8 (left: 3 8)"
            ]
        },
        "step_9": {
            "steps": [
                "3 * 4 = 12 (left: 1 3 12)\n3 - 1 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "12 - 3 = 9 (left: 1 3 9)\n9 - 1 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5)",
                "3 * 4 = 12 (left: 1 3 12)\n12 / 1 = 12 (left: 3 12)\n3 * 4 = 12 (left: 12)",
                "3 * 4 = 12 (left: 1 3 12)\n12 - 3 = 9 (left: 1 9 12)",
                "12 - 3 = 9 (left: 1 3 9)\n9 - 1 = 8 (left: 3 8)\n8 / 3 = 2.67 (left: 3 2.67)"
            ],
            "values": [
                0.001,
                0.003,
                0.003,
                2.001,
                2.001
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 2.0",
                "2 <- 2.1",
                "3 <- 2.1",
                "4 <- 6.1"
            ],
            "resampled_steps": [
                "3 * 4 = 12 (left: 1 3 12)",
                "3 * 4 = 12 (left: 1 3 12)",
                "3 + 1 = 4 (left: 4 3 12)",
                "3 + 1 = 4 (left: 4 3 12)",
                "12 - 3 = 9 (left: 1 3 9)\n9 - 1 = 8 (left: 3 8)"
            ]
        },
        "step_10": {
            "steps": [
                "3 * 4 = 12 (left: 1 3 12)\n1 + 3 = 4 (left: 4 12)",
                "3 * 4 = 12 (left: 1 3 12)\n12 - 1 = 11 (left: 3 11)",
                "3 + 1 = 4 (left: 4 3 12)\n3 + 12 = 15 (left: 4 15)",
                "3 + 1 = 4 (left: 4 3 12)\n12 - 4 = 8 (left: 3 8)",
                "12 - 3 = 9 (left: 1 3 9)\n9 - 1 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5 8)"
            ],
            "values": [
                1.001,
                1.002,
                0.003,
                60.0,
                2.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.572242
    },
    "15": {
        "input": "2 2 2 12",
        "step_1": {
            "steps": [
                "12 / 2 = 6 (left: 2 2 6)",
                "2 / 2 = 1 (left: 1 2 12)",
                "2 + 12 = 14 (left: 2 14 12)",
                "2 + 2 = 4 (left: 4 2 12)",
                "12 - 2 = 10 (left: 2 10 12)"
            ],
            "values": [
                60.0,
                60.0,
                0.003,
                2.001,
                1.002
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 1.0",
                "2 <- 1.0",
                "3 <- 1.0",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "2 / 2 = 1 (left: 1 2 12)",
                "12 / 2 = 6 (left: 2 2 6)",
                "12 / 2 = 6 (left: 2 2 6)",
                "12 / 2 = 6 (left: 2 2 6)",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "2 / 2 = 1 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)",
                "12 / 2 = 6 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)",
                "12 / 2 = 6 (left: 2 2 6)\n2 / 2 = 1 (left: 1 6)",
                "12 / 2 = 6 (left: 2 2 6)\n2 - 2 = 0 (left: 0 6)",
                "2 + 2 = 4 (left: 2 4 12)"
            ],
            "values": [
                20.001,
                60.0,
                20.0,
                20.002,
                1.002
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 1.4",
                "2 <- 2.0",
                "3 <- INIT",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "12 / 2 = 6 (left: 2 2 6)",
                "12 - 2 = 10 (left: 2 10 12)",
                "2 / 2 = 1 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)",
                "",
                "12 / 2 = 6 (left: 2 2 6)"
            ]
        },
        "step_3": {
            "steps": [
                "12 / 2 = 6 (left: 2 2 6)\n6 - 2 = 4 (left: 2 4)",
                "12 - 2 = 10 (left: 2 10 12)\n10 - 2 = 8 (left: 8 12)",
                "2 / 2 = 1 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n12 - 3 = 9 (left: 9)",
                "2 + 2 = 4 (left: 2 4 12)",
                "12 / 2 = 6 (left: 2 2 6)\n2 * 2 = 4 (left: 4 6)"
            ],
            "values": [
                0.002,
                1.002,
                0.003,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 3.4",
                "2 <- 3.4",
                "3 <- 2.1",
                "4 <- 2.2"
            ],
            "resampled_steps": [
                "",
                "12 / 2 = 6 (left: 2 2 6)\n2 * 2 = 4 (left: 4 6)",
                "12 / 2 = 6 (left: 2 2 6)\n2 * 2 = 4 (left: 4 6)",
                "12 / 2 = 6 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)",
                "12 / 2 = 6 (left: 2 2 6)\n2 / 2 = 1 (left: 1 6)"
            ]
        },
        "step_4": {
            "steps": [
                "2 + 12 = 14 (left: 2 14 12)",
                "12 / 2 = 6 (left: 2 2 6)\n2 * 2 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)",
                "12 / 2 = 6 (left: 2 2 6)\n2 * 2 = 4 (left: 4 6)\n6 / 4 = 1.5 (left: 1.5)",
                "12 / 2 = 6 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)",
                "12 / 2 = 6 (left: 2 2 6)\n2 / 2 = 1 (left: 1 6)\n1 * 6 = 6 (left: 6)"
            ],
            "values": [
                2.001,
                0.001,
                0.002,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 2.1",
                "3 <- 2.1",
                "4 <- 3.4"
            ],
            "resampled_steps": [
                "12 / 2 = 6 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)",
                "12 / 2 = 6 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)",
                "12 / 2 = 6 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)",
                "12 / 2 = 6 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)",
                "12 / 2 = 6 (left: 2 2 6)\n2 * 2 = 4 (left: 4 6)"
            ]
        },
        "step_5": {
            "steps": [
                "12 / 2 = 6 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)\n4 / 6 = 0.6666666666666666 (left: 0.6666666666666666)",
                "12 / 2 = 6 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "12 / 2 = 6 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)\n4 - 6 = -2 (left: -2)",
                "12 / 2 = 6 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)",
                "12 / 2 = 6 (left: 2 2 6)\n2 * 2 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)"
            ],
            "values": [
                0.001,
                40.0,
                0.003,
                0.003,
                0.001
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 3.4",
                "2 <- 1.0",
                "3 <- 5.1",
                "4 <- 4.0"
            ],
            "resampled_steps": [
                "12 / 2 = 6 (left: 2 2 6)",
                "12 / 2 = 6 (left: 2 2 6)\n2 * 2 = 4 (left: 4 6)",
                "12 / 2 = 6 (left: 2 2 6)",
                "12 / 2 = 6 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "2 + 12 = 14 (left: 2 14 12)"
            ]
        },
        "step_6": {
            "steps": [
                "12 / 2 = 6 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)",
                "12 / 2 = 6 (left: 2 2 6)\n2 * 2 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)",
                "12 / 2 = 6 (left: 2 2 6)\n2 - 2 = 0 (left: 0 6)",
                "12 / 2 = 6 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (2 + 2) * (2 + 12 / 2) = 24",
                "2 + 12 = 14 (left: 2 14 12)\n14 - 2 = 12 (left: 2 12)"
            ],
            "values": [
                60.0,
                0.001,
                2.0,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 6.4",
                "1 <- 2.1",
                "2 <- 3.4",
                "3 <- 6.0",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "2 + 12 = 14 (left: 2 14 12)\n14 - 2 = 12 (left: 2 12)",
                "12 / 2 = 6 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)",
                "12 / 2 = 6 (left: 2 2 6)\n2 * 2 = 4 (left: 4 6)",
                "12 / 2 = 6 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)",
                "2 / 2 = 1 (left: 1 2 12)"
            ]
        },
        "step_7": {
            "steps": [
                "2 + 12 = 14 (left: 2 14 12)\n14 - 2 = 12 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "12 / 2 = 6 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)",
                "12 / 2 = 6 (left: 2 2 6)\n2 * 2 = 4 (left: 4 6)\n6 / 4 = 1.5 (left: 1.5)",
                "12 / 2 = 6 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)\n4 - 6 = -2 (left: -2)",
                "2 / 2 = 1 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)"
            ],
            "values": [
                0.002,
                0.001,
                0.002,
                0.002,
                40.0
            ],
            "resampled": [
                "0 <- 6.4",
                "1 <- 1.1",
                "2 <- 1.0",
                "3 <- 6.4",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "2 + 12 = 14 (left: 2 14 12)\n14 - 2 = 12 (left: 2 12)",
                "2 / 2 = 1 (left: 1 2 12)",
                "12 / 2 = 6 (left: 2 2 6)",
                "2 + 12 = 14 (left: 2 14 12)\n14 - 2 = 12 (left: 2 12)",
                "12 / 2 = 6 (left: 2 2 6)"
            ]
        },
        "step_8": {
            "steps": [
                "2 + 12 = 14 (left: 2 14 12)\n14 - 2 = 12 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "2 / 2 = 1 (left: 1 2 12)\n2 - 1 = 1 (left: 1 12)",
                "12 / 2 = 6 (left: 2 2 6)\n2 / 2 = 1 (left: 1 6)",
                "2 + 12 = 14 (left: 2 14 12)\n14 - 2 = 12 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "12 / 2 = 6 (left: 2 2 6)\n2 / 2 = 1 (left: 1 6)"
            ],
            "values": [
                0.003,
                0.003,
                60.0,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 1.3",
                "2 <- 2.1",
                "3 <- 6.0",
                "4 <- 8.4"
            ],
            "resampled_steps": [
                "12 / 2 = 6 (left: 2 2 6)",
                "2 + 2 = 4 (left: 4 2 12)",
                "12 / 2 = 6 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)",
                "12 / 2 = 6 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)",
                "12 / 2 = 6 (left: 2 2 6)\n2 / 2 = 1 (left: 1 6)"
            ]
        },
        "step_9": {
            "steps": [
                "12 / 2 = 6 (left: 2 2 6)\n2 - 2 = 0 (left: 0 6)",
                "2 + 2 = 4 (left: 4 2 12)\n12 / 2 = 6 (left: 4 6)",
                "12 / 2 = 6 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)",
                "12 / 2 = 6 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "12 / 2 = 6 (left: 2 2 6)\n2 / 2 = 1 (left: 1 6)\n1 * 6 = 6 (left: 6)"
            ],
            "values": [
                2.0,
                60.0,
                0.002,
                20.0,
                0.003
            ],
            "resampled": [
                "0 <- 3.4",
                "1 <- 9.3",
                "2 <- 6.0",
                "3 <- 5.1",
                "4 <- 6.4"
            ],
            "resampled_steps": [
                "12 / 2 = 6 (left: 2 2 6)\n2 * 2 = 4 (left: 4 6)",
                "12 / 2 = 6 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "12 / 2 = 6 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)",
                "12 / 2 = 6 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "2 + 12 = 14 (left: 2 14 12)\n14 - 2 = 12 (left: 2 12)"
            ]
        },
        "step_10": {
            "steps": [
                "12 / 2 = 6 (left: 2 2 6)\n2 * 2 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)",
                "12 / 2 = 6 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (2 + 2) * (2 + 12) = 24",
                "12 / 2 = 6 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "12 / 2 = 6 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (2 + 2) * (12 / 2) = 24",
                "2 + 12 = 14 (left: 2 14 12)\n14 - 2 = 12 (left: 2 12)\n2 + 12 = 14 (left: 14)"
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ],
        "cost": 0.612511
    },
    "16": {
        "input": "1 1 4 12",
        "step_1": {
            "steps": [
                "4 * 3 = 12 (left: 1 4 12)",
                "12 / 4 = 3 (left: 1 3 12)",
                "12 - 4 = 8 (left: 1 4 8)",
                "12 - 4 = 8 (left: 1 8 12)",
                "4 + 8 = 12 (left: 1 12 12)"
            ],
            "values": [
                0.002,
                41.0,
                0.003,
                2.001,
                20.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.4",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "4 + 8 = 12 (left: 1 12 12)",
                "",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "12 - 4 = 8 (left: 1 8 12)",
                "4 + 8 = 12 (left: 1 12 12)\n12 - 1 = 11 (left: 11 12)",
                "4 + 1 = 5 (left: 5 4 12)",
                "1 + 1 = 2 (left: 2 4 12)",
                "4 * 3 = 12 (left: 1 4 12)"
            ],
            "values": [
                2.001,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- INIT",
                "2 <- 1.1",
                "3 <- 1.1",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "12 / 4 = 3 (left: 1 3 12)",
                "",
                "12 / 4 = 3 (left: 1 3 12)",
                "12 / 4 = 3 (left: 1 3 12)",
                "12 / 4 = 3 (left: 1 3 12)"
            ]
        },
        "step_3": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12)\n3 * 1 = 3 (left: 3 12)",
                "12 - 1 = 11 (left: 1 4 11)",
                "12 / 4 = 3 (left: 1 3 12)\n12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 1 3 12)\n3 * 4 = 12 (left: 12 12)",
                "12 / 4 = 3 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4 12)"
            ],
            "values": [
                21.001,
                0.003,
                0.001,
                20.002,
                1.002
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 1.1",
                "2 <- 3.0",
                "3 <- 3.0",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "12 / 4 = 3 (left: 1 3 12)",
                "12 / 4 = 3 (left: 1 3 12)",
                "12 / 4 = 3 (left: 1 3 12)\n3 * 1 = 3 (left: 3 12)",
                "12 / 4 = 3 (left: 1 3 12)\n3 * 1 = 3 (left: 3 12)",
                "12 / 4 = 3 (left: 1 3 12)"
            ]
        },
        "step_4": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12)\n1 + 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 1 3 12)\n3 / 12 = 0.25 (left: 1 0.25)",
                "12 / 4 = 3 (left: 1 3 12)\n3 * 1 = 3 (left: 3 12)\n12 / 3 = 4 (left: 4)",
                "12 / 4 = 3 (left: 1 3 12)\n3 * 1 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36) ",
                "12 / 4 = 3 (left: 1 3 12)\n1 + 3 = 4 (left: 4 12)"
            ],
            "values": [
                20.002,
                1.001,
                0.001,
                20.0,
                0.002
            ],
            "resampled": [
                "0 <- 4.3",
                "1 <- 4.3",
                "2 <- 3.3",
                "3 <- 4.0",
                "4 <- 3.3"
            ],
            "resampled_steps": [
                "12 / 4 = 3 (left: 1 3 12)\n3 * 1 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36) ",
                "12 / 4 = 3 (left: 1 3 12)\n3 * 1 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36) ",
                "12 / 4 = 3 (left: 1 3 12)\n3 * 4 = 12 (left: 12 12)",
                "12 / 4 = 3 (left: 1 3 12)\n1 + 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 1 3 12)\n3 * 4 = 12 (left: 12 12)"
            ]
        },
        "step_5": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12)\n3 * 1 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36) \n36 * 2 = 72 (left: 72)",
                "12 / 4 = 3 (left: 1 3 12)\n3 * 1 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36) \n36 / 2 = 18",
                "12 / 4 = 3 (left: 1 3 12)\n3 * 4 = 12 (left: 12 12)\n12 * 12 = 144 (left: 12 144)",
                "12 / 4 = 3 (left: 1 3 12)\n1 + 3 = 4 (left: 4 12)\n12 - 4 = 8 (left: 8)",
                "12 / 4 = 3 (left: 1 3 12)\n3 * 4 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)"
            ],
            "values": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 1.4",
                "2 <- 4.3",
                "3 <- 3.3",
                "4 <- 3.4"
            ],
            "resampled_steps": [
                "12 / 4 = 3 (left: 1 3 12)\n3 * 1 = 3 (left: 3 12)",
                "4 + 8 = 12 (left: 1 12 12)",
                "12 / 4 = 3 (left: 1 3 12)\n3 * 1 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36) ",
                "12 / 4 = 3 (left: 1 3 12)\n3 * 4 = 12 (left: 12 12)",
                "12 / 4 = 3 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4 12)"
            ]
        },
        "step_6": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12)\n3 * 1 = 3 (left: 3 12)\n12 / 3 = 4 (left: 4 12)",
                "4 + 8 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "12 / 4 = 3 (left: 1 3 12)\n3 * 1 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36) \n36 + 2 = 38 (left: 38)",
                "12 / 4 = 3 (left: 1 3 12)\n3 * 4 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "12 / 4 = 3 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4 12)\n12 / 4 = 3 (left: 1 3)"
            ],
            "values": [
                2.001,
                21.001,
                0.002,
                0.001,
                0.0
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 4.0",
                "2 <- 6.1",
                "3 <- 6.1",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "12 / 4 = 3 (left: 1 3 12)",
                "12 / 4 = 3 (left: 1 3 12)\n1 + 3 = 4 (left: 4 12)",
                "4 + 8 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "4 + 8 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "12 / 4 = 3 (left: 1 3 12)"
            ]
        },
        "step_7": {
            "steps": [
                "12 / 4 = 3 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4 12)",
                "12 / 4 = 3 (left: 1 3 12)\n1 + 3 = 4 (left: 4 12)\n12 - 4 = 8 (left: 4 8)",
                "4 + 8 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "4 + 8 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "12 / 4 = 3 (left: 1 3 12)\n1 + 3 = 4 (left: 4 12)"
            ],
            "values": [
                0.003,
                20.001,
                40.0,
                20.001,
                1.002
            ],
            "resampled": [
                "0 <- 7.2",
                "1 <- 7.3",
                "2 <- 7.2",
                "3 <- 4.1",
                "4 <- 7.3"
            ],
            "resampled_steps": [
                "4 + 8 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "4 + 8 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "4 + 8 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "12 / 4 = 3 (left: 1 3 12)\n3 / 12 = 0.25 (left: 1 0.25)",
                "4 + 8 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)"
            ]
        },
        "step_8": {
            "steps": [
                "4 + 8 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((1 + 4) + 12) * 12 = 24",
                "4 + 8 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)\nThere are no possible next steps because there are no numbers to operate on.",
                "4 + 8 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((1 + 1) + 4) * 12 = 24",
                "12 / 4 = 3 (left: 1 3 12)\n3 / 12 = 0.25 (left: 1 0.25)\n1 - 0.25 = 0.75 (left: 0.75)",
                "4 + 8 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)\nThere are no possible next steps because there are no numbers to operate on."
            ],
            "values": [
                60.0,
                0.003,
                60.0,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 7.2",
                "1 <- 7.3",
                "2 <- 7.3",
                "3 <- 8.0",
                "4 <- 6.1"
            ],
            "resampled_steps": [
                "4 + 8 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "4 + 8 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "4 + 8 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "4 + 8 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((1 + 4) + 12) * 12 = 24",
                "4 + 8 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)"
            ]
        },
        "step_9": {
            "steps": [
                "4 + 8 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (4 + 8) / 1 + 12 = 24",
                "4 + 8 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)\nThere are no possible next steps as there are no numbers provided to perform any operations on.",
                "4 + 8 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)\nThere are no possible next steps with the input of 0.",
                "4 + 8 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((1 + 4) + 12) * 12 = 24\nInput: 3 3 6 8\nSteps:\n3 * 3 = 9 (left: 6 8 9)\n9 - 6 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (3 * 3) * (6 - 8) = 24",
                "4 + 8 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                20.0,
                0.003
            ],
            "resampled": [
                "0 <- 7.3",
                "1 <- 7.1",
                "2 <- 7.2",
                "3 <- 8.0",
                "4 <- 8.2"
            ],
            "resampled_steps": [
                "4 + 8 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "12 / 4 = 3 (left: 1 3 12)\n1 + 3 = 4 (left: 4 12)\n12 - 4 = 8 (left: 4 8)",
                "4 + 8 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "4 + 8 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((1 + 4) + 12) * 12 = 24",
                "4 + 8 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((1 + 1) + 4) * 12 = 24"
            ]
        },
        "step_10": {
            "steps": [
                "4 + 8 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)\nThere are no possible next steps as there are no numbers to perform operations on.",
                "12 / 4 = 3 (left: 1 3 12)\n1 + 3 = 4 (left: 4 12)\n12 - 4 = 8 (left: 4 8)\n8 - 4 = 4 (left: 4 8)",
                "4 + 8 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 + 4 + 8) + 12 = 24",
                "4 + 8 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((1 + 4) + 12) * 12 = 24\nInput: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6 24)\n6 / 3 = 2 (left: 2 24)\n2 * 24 = 48 (left: 48)\nAnswer: (3 * 8) / (6 / 3) = 24",
                "4 + 8 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((1 + 1) + 4) * 12 = 24\n\nInput: 3 3 4 5\nSteps:\n4 + 5 = 9 (left: 3 3 9)\n3 * 3 = 9 (left: 9 9)\n9 + 9 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((3 * 3) + (4 + 5)) + 6 = 24"
            ],
            "values": [
                0.003,
                2.001,
                0.003,
                20.0,
                40.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.651203
    },
    "17": {
        "input": "1 1 12 12",
        "step_1": {
            "steps": [
                "12 / 1 = 12 (left: 1 12 12)",
                "1 + 1 = 2 (left: 2 12 12)",
                "1 * 1 = 1 (left: 1 12 12)",
                "12 + 1 = 13 (left: 1 12 13)",
                "12 / 1 = 12 (left: 1 12 12)"
            ],
            "values": [
                20.002,
                60.0,
                1.002,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 1.1",
                "2 <- 1.1",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 12 12)",
                "1 + 1 = 2 (left: 2 12 12)",
                "1 + 1 = 2 (left: 2 12 12)",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "1 + 1 = 2 (left: 2 12 12)\n2 * 12 = 24 (left: 12 24)",
                "1 + 1 = 2 (left: 2 12 12)\n2 * 12 = 24 (left: 12 24)",
                "1 + 1 = 2 (left: 2 12 12)\n12 - 2 = 10 (left: 10 12)",
                "12 - 1 = 11 (left: 1 11 12)",
                "1 + 1 = 2 (left: 2 12 12)"
            ],
            "values": [
                0.003,
                0.003,
                0.002,
                0.003,
                20.002
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 1.0",
                "2 <- 1.0",
                "3 <- 2.4",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 12 12)",
                "12 / 1 = 12 (left: 1 12 12)",
                "12 / 1 = 12 (left: 1 12 12)",
                "1 + 1 = 2 (left: 2 12 12)",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "1 + 1 = 2 (left: 2 12 12)\n12 - 2 = 10 (left: 10 12)",
                "12 / 1 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "12 / 1 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "1 + 1 = 2 (left: 2 12 12)\n12 + 2 = 14 (left: 2 12 14)",
                "1 * 1 = 1 (left: 1 12 12)"
            ],
            "values": [
                0.003,
                40.001,
                21.001,
                40.001,
                1.002
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 1.1",
                "2 <- 3.1",
                "3 <- 1.1",
                "4 <- 3.3"
            ],
            "resampled_steps": [
                "12 / 1 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "1 + 1 = 2 (left: 2 12 12)",
                "12 / 1 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "1 + 1 = 2 (left: 2 12 12)",
                "1 + 1 = 2 (left: 2 12 12)\n12 + 2 = 14 (left: 2 12 14)"
            ]
        },
        "step_4": {
            "steps": [
                "12 / 1 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "1 + 1 = 2 (left: 2 12 12)\n12 - 12 = 0 (left: 2 0)",
                "12 / 1 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 12 12)\n2 + 12 = 14 (left: 12 14)",
                "1 + 1 = 2 (left: 2 12 12)\n12 + 2 = 14 (left: 2 12 14)\n12 / 2 = 6 (left: 6 14)"
            ],
            "values": [
                0.003,
                2.001,
                60.0,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 3.2",
                "2 <- 1.1",
                "3 <- 3.1",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 12 12)",
                "12 / 1 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "1 + 1 = 2 (left: 2 12 12)",
                "12 / 1 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "12 / 1 = 12 (left: 1 12 12)"
            ]
        },
        "step_5": {
            "steps": [
                "1 + 1 = 2 (left: 2 12 12)\nInput: 6 6 10",
                "12 / 1 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "1 + 1 = 2 (left: 2 12 12)\n12 / 2 = 6 (left: 6 12)",
                "12 / 1 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 12 24)",
                "12 / 1 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)"
            ],
            "values": [
                0.003,
                0.0,
                0.003,
                0.003,
                20.001
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 3.1",
                "2 <- 3.1",
                "3 <- 3.1",
                "4 <- 4.2"
            ],
            "resampled_steps": [
                "12 / 1 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "12 / 1 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "12 / 1 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "12 / 1 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "12 / 1 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)"
            ]
        },
        "step_6": {
            "steps": [
                "12 / 1 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / 1) + (12 / 1) = 24",
                "12 / 1 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "12 / 1 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "12 / 1 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24) ",
                "12 / 1 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / 1) * (12 / 1) + 12 = 24"
            ]
        },
        "results": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.6764600000000001
    },
    "18": {
        "input": "3 3 3 8",
        "step_1": {
            "steps": [
                "3 * 3 = 9 (left: 9 3 8)",
                "3 + 8 = 11 (left: 3 3 11)",
                "8 - 3 = 5 (left: 3 3 5)",
                "3 / 3 = 1 (left: 1 3 8)",
                "8 - 3 = 5 (left: 3 5 3)"
            ],
            "values": [
                3.0,
                60.0,
                2.001,
                60.0,
                22.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.3",
                "3 <- 1.1",
                "4 <- 1.2"
            ],
            "resampled_steps": [
                "",
                "",
                "3 / 3 = 1 (left: 1 3 8)",
                "3 + 8 = 11 (left: 3 3 11)",
                "8 - 3 = 5 (left: 3 3 5)"
            ]
        },
        "step_2": {
            "steps": [
                "8 - 3 = 5 (left: 3 5 3)",
                "3 + 8 = 11 (left: 3 3 11)",
                "3 / 3 = 1 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)",
                "3 + 8 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)",
                "8 - 3 = 5 (left: 3 3 5)\n3 / 3 = 1 (left: 1 5)"
            ],
            "values": [
                3.0,
                41.0,
                60.0,
                60.0,
                40.0
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 2.3",
                "2 <- 2.3",
                "3 <- 2.1",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "3 + 8 = 11 (left: 3 3 11)",
                "3 + 8 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)",
                "3 + 8 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)",
                "3 + 8 = 11 (left: 3 3 11)",
                "3 / 3 = 1 (left: 1 3 8)"
            ]
        },
        "step_3": {
            "steps": [
                "3 + 8 = 11 (left: 3 3 11)\n3 * 3 = 9 (left: 9 11)",
                "3 + 8 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "3 + 8 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)\n3 + 8 = 11 (left: 8 11)",
                "3 + 8 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)",
                "3 / 3 = 1 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)"
            ],
            "values": [
                0.002,
                60.0,
                1.002,
                60.0,
                40.0
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- 2.2",
                "2 <- 1.1",
                "3 <- 1.3",
                "4 <- 3.3"
            ],
            "resampled_steps": [
                "8 - 3 = 5 (left: 3 3 5)\n3 / 3 = 1 (left: 1 5)",
                "3 / 3 = 1 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)",
                "3 + 8 = 11 (left: 3 3 11)",
                "3 / 3 = 1 (left: 1 3 8)",
                "3 + 8 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)"
            ]
        },
        "step_4": {
            "steps": [
                "8 - 3 = 5 (left: 3 3 5)\n3 / 3 = 1 (left: 1 5)\n1 + 5 = 6 (left: 5 6)",
                "3 / 3 = 1 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)\n3 * 8 = 24 (left: 8 24)",
                "3 + 8 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)",
                "3 + 8 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5 8)"
            ],
            "values": [
                0.003,
                0.003,
                60.0,
                60.0,
                2.001
            ],
            "resampled": [
                "0 <- 2.3",
                "1 <- 4.3",
                "2 <- 1.1",
                "3 <- INIT",
                "4 <- 4.3"
            ],
            "resampled_steps": [
                "3 + 8 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)",
                "3 + 8 = 11 (left: 3 3 11)",
                "",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)"
            ]
        },
        "step_5": {
            "steps": [
                "3 + 8 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)\n8 / 3 = 2.67 (left: 2.67 8)",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 8 24)",
                "3 + 8 = 11 (left: 3 3 11)\n3 * 3 = 9 (left: 9 11)",
                "3 * 3 = 9 (left: 9 3 8)",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24 8)"
            ],
            "values": [
                3.0,
                0.002,
                0.001,
                2.001,
                60.0
            ],
            "resampled": [
                "0 <- 5.4",
                "1 <- 2.4",
                "2 <- 4.2",
                "3 <- 4.3",
                "4 <- 4.2"
            ],
            "resampled_steps": [
                "3 / 3 = 1 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24 8)",
                "8 - 3 = 5 (left: 3 3 5)\n3 / 3 = 1 (left: 1 5)",
                "3 + 8 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)",
                "3 + 8 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)"
            ]
        },
        "step_6": {
            "steps": [
                "3 / 3 = 1 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24 8)\n24 / 8 = 3 (left: 3 8)",
                "8 - 3 = 5 (left: 3 3 5)\n3 / 3 = 1 (left: 1 5)\n1 * 5 = 5 (left: 5 5)",
                "3 + 8 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)\n8 / 3 = 2.67 (left: 2.67 8)",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n3 ^ 8 = 6561 (left: 8 6561)",
                "3 + 8 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)\n8 + 3 = 11 (left: 3 11)"
            ],
            "values": [
                60.0,
                0.003,
                3.0,
                20.002,
                0.003
            ],
            "resampled": [
                "0 <- 3.3",
                "1 <- 2.2",
                "2 <- 5.4",
                "3 <- 5.4",
                "4 <- 6.0"
            ],
            "resampled_steps": [
                "3 + 8 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)",
                "3 / 3 = 1 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24 8)",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24 8)",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24 8)\n24 / 8 = 3 (left: 3 8)"
            ]
        },
        "step_7": {
            "steps": [
                "3 + 8 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)\n3 * 8 = 24 (left: 8 24)",
                "3 / 3 = 1 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)\n3 + 8 = 11 (left: 8 11)",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24 8)\n24 + 8 = 32 (left: 32)",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24 8)\n24 / 8 = 3 (left: 3 8)",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24 8)\n24 / 8 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)"
            ],
            "values": [
                1.002,
                0.002,
                0.002,
                60.0,
                0.002
            ],
            "resampled": [
                "0 <- 1.4",
                "1 <- 6.3",
                "2 <- 2.3",
                "3 <- 3.3",
                "4 <- 7.3"
            ],
            "resampled_steps": [
                "8 - 3 = 5 (left: 3 5 3)",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n3 ^ 8 = 6561 (left: 8 6561)",
                "3 + 8 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)",
                "3 + 8 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24 8)\n24 / 8 = 3 (left: 3 8)"
            ]
        },
        "step_8": {
            "steps": [
                "8 - 3 = 5 (left: 3 5 3)\n3 + 5 = 8 (left: 8 3)",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n3 ^ 8 = 6561 (left: 8 6561)\n8 + 6561 = 6569 (left: 6569)",
                "3 + 8 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)\n8 / 3 = 2.67 (left: 2.67 8)",
                "3 + 8 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5 8)",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24 8)\n24 / 8 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)"
            ],
            "values": [
                60.0,
                0.001,
                3.0,
                0.001,
                0.003
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 3.4",
                "2 <- 6.0",
                "3 <- 4.3",
                "4 <- 3.3"
            ],
            "resampled_steps": [
                "3 + 8 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)",
                "3 / 3 = 1 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24 8)\n24 / 8 = 3 (left: 3 8)",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)",
                "3 + 8 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)"
            ]
        },
        "step_9": {
            "steps": [
                "3 + 8 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)\n3 + 8 = 11 (left: 8 11)",
                "3 / 3 = 1 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)\n5 / 1 = 5 (left: 1 5)",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24 8)\n24 / 8 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)",
                "3 + 8 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)\n3 + 8 = 11 (left: 8 11)"
            ],
            "values": [
                20.001,
                40.0,
                1.002,
                1.002,
                1.001
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- 2.3",
                "2 <- 9.1",
                "3 <- 3.1",
                "4 <- 3.3"
            ],
            "resampled_steps": [
                "8 - 3 = 5 (left: 3 3 5)\n3 / 3 = 1 (left: 1 5)",
                "3 + 8 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)",
                "3 / 3 = 1 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)\n5 / 1 = 5 (left: 1 5)",
                "3 + 8 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "3 + 8 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)"
            ]
        },
        "step_10": {
            "steps": [
                "8 - 3 = 5 (left: 3 3 5)\n3 / 3 = 1 (left: 1 5)\n5 - 1 = 4 (left: 4 5)",
                "3 + 8 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)\n3 * 8 = 24 (left: 8 24)",
                "3 / 3 = 1 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)\n5 / 1 = 5 (left: 1 5)\n1 + 5 = 6 (left: 5 6)",
                "3 + 8 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (3 + 8) * 3 * 3 = 24",
                "3 + 8 = 11 (left: 3 3 11)\n11 - 3 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5)"
            ],
            "values": [
                21.0,
                0.003,
                1.002,
                60.0,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.715354
    },
    "19": {
        "input": "1 1 2 6",
        "step_1": {
            "steps": [
                "1 * 2 = 2 (left: 2 2 6)",
                "2 * 1 = 2 (left: 2 2 6)",
                "2 * 2 = 4 (left: 4 2 6)",
                "2 * 6 = 12 (left: 1 2 12)",
                "6 - 1 = 5 (left: 1 2 5)"
            ],
            "values": [
                41.0,
                41.0,
                1.002,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 1.0",
                "2 <- INIT",
                "3 <- 1.3",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "2 * 1 = 2 (left: 2 2 6)",
                "1 * 2 = 2 (left: 2 2 6)",
                "",
                "2 * 6 = 12 (left: 1 2 12)",
                "2 * 6 = 12 (left: 1 2 12)"
            ]
        },
        "step_2": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)",
                "1 * 2 = 2 (left: 2 2 6)\n2 - 2 = 0 (left: 0 6)",
                "2 - 1 = 1 (left: 1 1 6)",
                "2 * 6 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "2 * 6 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)"
            ],
            "values": [
                60.0,
                21.0,
                2.001,
                60.0,
                41.0
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 1.3",
                "2 <- 1.1",
                "3 <- 1.3",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "1 * 2 = 2 (left: 2 2 6)",
                "2 * 6 = 12 (left: 1 2 12)",
                "2 * 1 = 2 (left: 2 2 6)",
                "2 * 6 = 12 (left: 1 2 12)",
                "1 * 2 = 2 (left: 2 2 6)"
            ]
        },
        "step_3": {
            "steps": [
                "1 * 2 = 2 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)",
                "2 * 6 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)",
                "2 * 1 = 2 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)",
                "2 * 6 = 12 (left: 1 2 12)\n2 + 12 = 14 (left: 1 14)",
                "1 * 2 = 2 (left: 2 2 6)\n2 * 2 = 4 (left: 4 6)"
            ],
            "values": [
                41.0,
                20.002,
                60.0,
                1.001,
                60.0
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 2.1",
                "2 <- 3.1",
                "3 <- 1.1",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "2 * 1 = 2 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)",
                "1 * 2 = 2 (left: 2 2 6)\n2 - 2 = 0 (left: 0 6)",
                "2 * 6 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)",
                "2 * 1 = 2 (left: 2 2 6)",
                "2 * 6 = 12 (left: 1 2 12)"
            ]
        },
        "step_4": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)",
                "1 * 2 = 2 (left: 2 2 6)\n2 - 2 = 0 (left: 0 6)\n0 + 6 = 6 (left: 6)",
                "2 * 6 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n12 - 3 = 9 (left: 9 12)",
                "2 * 1 = 2 (left: 2 2 6)\n2 * 2 = 4 (left: 4 6)",
                "2 * 6 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)"
            ],
            "values": [
                0.001,
                0.003,
                0.002,
                60.0,
                21.001
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 4.4",
                "2 <- 3.2",
                "3 <- 1.3",
                "4 <- 3.0"
            ],
            "resampled_steps": [
                "2 * 1 = 2 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)",
                "2 * 6 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)",
                "2 * 1 = 2 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)",
                "2 * 6 = 12 (left: 1 2 12)",
                "1 * 2 = 2 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)"
            ]
        },
        "step_5": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)",
                "2 * 6 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n12 / 3 = 4 (left: 4)",
                "2 * 1 = 2 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 6 24)",
                "2 * 6 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "1 * 2 = 2 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)"
            ],
            "values": [
                0.003,
                0.002,
                1.002,
                60.0,
                0.0
            ],
            "resampled": [
                "0 <- 5.3",
                "1 <- 1.3",
                "2 <- 4.3",
                "3 <- 3.4",
                "4 <- 5.3"
            ],
            "resampled_steps": [
                "2 * 6 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "2 * 6 = 12 (left: 1 2 12)",
                "2 * 1 = 2 (left: 2 2 6)\n2 * 2 = 4 (left: 4 6)",
                "1 * 2 = 2 (left: 2 2 6)\n2 * 2 = 4 (left: 4 6)",
                "2 * 6 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)"
            ]
        },
        "step_6": {
            "steps": [
                "2 * 6 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)",
                "2 * 6 = 12 (left: 1 2 12)\n12 + 1 = 13 (left: 2 13)",
                "2 * 1 = 2 (left: 2 2 6)\n2 * 2 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)",
                "1 * 2 = 2 (left: 2 2 6)\n2 * 2 = 4 (left: 4 6)\n4 - 6 = -2 (left: -2)",
                "2 * 6 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)"
            ],
            "values": [
                60.0,
                1.002,
                0.003,
                0.002,
                40.0
            ],
            "resampled": [
                "0 <- 6.4",
                "1 <- 1.3",
                "2 <- 6.0",
                "3 <- 5.3",
                "4 <- 3.4"
            ],
            "resampled_steps": [
                "2 * 6 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)",
                "2 * 6 = 12 (left: 1 2 12)",
                "2 * 6 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)",
                "2 * 6 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "1 * 2 = 2 (left: 2 2 6)\n2 * 2 = 4 (left: 4 6)"
            ]
        },
        "step_7": {
            "steps": [
                "2 * 6 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)\nAnswer: (1 * 2 * 6) * 2 = 24",
                "2 * 6 = 12 (left: 1 2 12)\n12 * 2 = 24 (left: 1 24)",
                "2 * 6 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)\nAnswer: (1 * 2 * 6) * 2 = 24",
                "2 * 6 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)",
                "1 * 2 = 2 (left: 2 2 6)\n2 * 2 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)"
            ],
            "values": [
                60.0,
                60.0,
                40.001,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 5.3",
                "1 <- 2.3",
                "2 <- 6.4",
                "3 <- 6.0",
                "4 <- 3.4"
            ],
            "resampled_steps": [
                "2 * 6 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "2 * 6 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "2 * 6 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)",
                "2 * 6 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)",
                "1 * 2 = 2 (left: 2 2 6)\n2 * 2 = 4 (left: 4 6)"
            ]
        },
        "step_8": {
            "steps": [
                "2 * 6 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)",
                "2 * 6 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "2 * 6 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)\nAnswer: (1 * 2 * 6) * (1 * 24) = 24",
                "2 * 6 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)\nAnswer: 2 * (6 * 2) = 24",
                "1 * 2 = 2 (left: 2 2 6)\n2 * 2 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)"
            ],
            "values": [
                0.001,
                0.002,
                0.003,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 7.0",
                "2 <- 2.3",
                "3 <- 7.0",
                "4 <- 2.0"
            ],
            "resampled_steps": [
                "2 * 1 = 2 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)",
                "2 * 6 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)\nAnswer: (1 * 2 * 6) * 2 = 24",
                "2 * 6 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "2 * 6 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)\nAnswer: (1 * 2 * 6) * 2 = 24",
                "2 * 1 = 2 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)"
            ]
        },
        "step_9": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "2 * 6 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)\nAnswer: (1 * 2 * 6) * 2 = 24\nInput: 3 3 4 6\nSteps:\n3 * 4 = 12 (left: 3 6 12)\n6 * 2 = 24 (left: 24)\nAnswer: (3 * 4) * (6 * 2) = 24",
                "2 * 6 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "2 * 6 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)\nAnswer: (1 * 2 * 6) * 2 = 24\nInput: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\n48 / 2 = 24 (left: 24)\nAnswer: ((3 * 3) - 3) * 8 / 2 = 24",
                "2 * 1 = 2 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)"
            ],
            "values": [
                40.0,
                0.0,
                0.003,
                0.0,
                0.002
            ],
            "resampled": [
                "0 <- 9.0",
                "1 <- 2.4",
                "2 <- 2.0",
                "3 <- 9.0",
                "4 <- 3.4"
            ],
            "resampled_steps": [
                "2 * 1 = 2 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "2 * 6 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "2 * 1 = 2 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)",
                "2 * 1 = 2 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "1 * 2 = 2 (left: 2 2 6)\n2 * 2 = 4 (left: 4 6)"
            ]
        },
        "step_10": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (2 * 1) + (2 + 1) * 6 = 24",
                "2 * 6 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "2 * 1 = 2 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)",
                "2 * 1 = 2 (left: 2 2 6)\n2 + 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (2 * 1) + (2 + 6) = 24",
                "1 * 2 = 2 (left: 2 2 6)\n2 * 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)"
            ],
            "values": [
                60.0,
                0.001,
                0.003,
                0.003,
                40.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.7552960000000001
    },
    "20": {
        "input": "1 1 2 11",
        "step_1": {
            "steps": [
                "11 - 2 = 9 (left: 1 1 9)",
                "11 - 2 = 9 (left: 1 2 9)",
                "2 * 2 = 4 (left: 4 4 11)",
                "2 + 1 = 3 (left: 1 3 11)",
                "1 * 2 = 2 (left: 2 2 11)"
            ],
            "values": [
                0.003,
                0.003,
                1.002,
                21.001,
                2.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.3",
                "3 <- 1.3",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                "2 + 1 = 3 (left: 1 3 11)",
                "2 + 1 = 3 (left: 1 3 11)",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 11)",
                "2 + 1 = 3 (left: 3 2 11)",
                "2 + 1 = 3 (left: 1 3 11)\n1 * 3 = 3 (left: 3 11)",
                "2 + 1 = 3 (left: 1 3 11)\n3 * 11 = 33 (left: 1 33)",
                "1 * 2 = 2 (left: 2 2 11)"
            ],
            "values": [
                0.003,
                1.002,
                0.003,
                2.001,
                0.002
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 1.2",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "2 + 1 = 3 (left: 1 3 11)",
                "",
                "",
                "2 * 2 = 4 (left: 4 4 11)",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "2 + 1 = 3 (left: 1 3 11)\n3 * 11 = 33 (left: 1 33)",
                "2 + 11 = 13 (left: 1 1 13)",
                "1 + 1 = 2 (left: 2 2 11)",
                "2 * 2 = 4 (left: 4 4 11)\n4 * 4 = 16 (left: 16 11)",
                "2 + 1 = 3 (left: 1 3 11)"
            ],
            "values": [
                0.003,
                20.002,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 1.3",
                "2 <- 1.4",
                "3 <- INIT",
                "4 <- 3.1"
            ],
            "resampled_steps": [
                "2 + 1 = 3 (left: 1 3 11)",
                "2 + 1 = 3 (left: 1 3 11)",
                "1 * 2 = 2 (left: 2 2 11)",
                "",
                "2 + 11 = 13 (left: 1 1 13)"
            ]
        },
        "step_4": {
            "steps": [
                "2 + 1 = 3 (left: 1 3 11)\n11 - 3 = 8 (left: 1 8)",
                "2 + 1 = 3 (left: 1 3 11)\n11 / 3 = 3.67 (left: 1 3.67)",
                "1 * 2 = 2 (left: 2 2 11)\n11 - 2 = 9 (left: 2 9)",
                "11 - 2 = 9 (left: 1 1 9)",
                "2 + 11 = 13 (left: 1 1 13)\n1 + 1 = 2 (left: 2 13)"
            ],
            "values": [
                0.002,
                2.0,
                1.001,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- INIT",
                "2 <- 1.3",
                "3 <- INIT",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "2 + 11 = 13 (left: 1 1 13)",
                "",
                "2 + 1 = 3 (left: 1 3 11)",
                "",
                "2 + 1 = 3 (left: 1 3 11)"
            ]
        },
        "step_5": {
            "steps": [
                "2 + 11 = 13 (left: 1 1 13)\n1 - 1 = 0 (left: 0 13)",
                "11 - 2 = 9 (left: 1 2 9)",
                "2 + 1 = 3 (left: 1 3 11)\n3 * 11 = 33 (left: 1 33)",
                "1 * 1 = 1 (left: 1 2 11)",
                "2 + 1 = 3 (left: 1 3 11)\n11 - 1 = 10 (left: 3 10)"
            ],
            "values": [
                1.002,
                0.003,
                2.001,
                1.002,
                0.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 2.3",
                "2 <- 3.1",
                "3 <- 5.3",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "",
                "2 + 1 = 3 (left: 1 3 11)\n3 * 11 = 33 (left: 1 33)",
                "2 + 11 = 13 (left: 1 1 13)",
                "1 * 1 = 1 (left: 1 2 11)",
                "2 + 1 = 3 (left: 1 3 11)"
            ]
        },
        "step_6": {
            "steps": [
                "2 + 2 = 4 (left: 4 2 11)",
                "2 + 1 = 3 (left: 1 3 11)\n3 * 11 = 33 (left: 1 33)\n33 / 1 = 33 (left: 33)",
                "2 + 11 = 13 (left: 1 1 13)\n13 + 1 = 14 (left: 1 14)",
                "1 * 1 = 1 (left: 1 2 11)\n1 * 11 = 11 (left: 2 11)",
                "2 + 1 = 3 (left: 1 3 11)\n11 - 3 = 8 (left: 1 8)"
            ],
            "values": [
                1.002,
                0.002,
                1.002,
                2.0,
                21.001
            ],
            "resampled": [
                "0 <- 6.4",
                "1 <- 3.1",
                "2 <- 4.2",
                "3 <- 6.4",
                "4 <- 6.4"
            ],
            "resampled_steps": [
                "2 + 1 = 3 (left: 1 3 11)\n11 - 3 = 8 (left: 1 8)",
                "2 + 11 = 13 (left: 1 1 13)",
                "1 * 2 = 2 (left: 2 2 11)\n11 - 2 = 9 (left: 2 9)",
                "2 + 1 = 3 (left: 1 3 11)\n11 - 3 = 8 (left: 1 8)",
                "2 + 1 = 3 (left: 1 3 11)\n11 - 3 = 8 (left: 1 8)"
            ]
        },
        "step_7": {
            "steps": [
                "2 + 1 = 3 (left: 1 3 11)\n11 - 3 = 8 (left: 1 8)\n8 / 1 = 8 (left: 8)",
                "2 + 11 = 13 (left: 1 1 13)\n1 - 1 = 0 (left: 0 13)",
                "1 * 2 = 2 (left: 2 2 11)\n11 - 2 = 9 (left: 2 9)\n2 * 9 = 18 (left: 9 18)",
                "2 + 1 = 3 (left: 1 3 11)\n11 - 3 = 8 (left: 1 8)\n8 / 1 = 8 (left: 8)",
                "2 + 1 = 3 (left: 1 3 11)\n11 - 3 = 8 (left: 1 8)\n8 - 1 = 7"
            ],
            "values": [
                0.001,
                0.003,
                0.003,
                0.001,
                0.003
            ],
            "resampled": [
                "0 <- 6.2",
                "1 <- 1.3",
                "2 <- 5.0",
                "3 <- INIT",
                "4 <- 6.4"
            ],
            "resampled_steps": [
                "2 + 11 = 13 (left: 1 1 13)\n13 + 1 = 14 (left: 1 14)",
                "2 + 1 = 3 (left: 1 3 11)",
                "2 + 11 = 13 (left: 1 1 13)\n1 - 1 = 0 (left: 0 13)",
                "",
                "2 + 1 = 3 (left: 1 3 11)\n11 - 3 = 8 (left: 1 8)"
            ]
        },
        "step_8": {
            "steps": [
                "2 + 11 = 13 (left: 1 1 13)\n13 + 1 = 14 (left: 1 14)\n14 / 1 = 14 (left: 14)",
                "2 + 1 = 3 (left: 1 3 11)\n1 + 3 = 4 (left: 4 11)",
                "2 + 11 = 13 (left: 1 1 13)\n1 - 1 = 0 (left: 0 13)\n13 / 0 = undefined (left: undefined)",
                "1 + 1 = 2 (left: 2 2 11)",
                "2 + 1 = 3 (left: 1 3 11)\n11 - 3 = 8 (left: 1 8)\n1 + 8 = 9 (left: 9)"
            ],
            "values": [
                0.002,
                2.001,
                1.0,
                2.0,
                0.002
            ],
            "resampled": [
                "0 <- 6.4",
                "1 <- 1.3",
                "2 <- 6.4",
                "3 <- 6.4",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "2 + 1 = 3 (left: 1 3 11)\n11 - 3 = 8 (left: 1 8)",
                "2 + 1 = 3 (left: 1 3 11)",
                "2 + 1 = 3 (left: 1 3 11)\n11 - 3 = 8 (left: 1 8)",
                "2 + 1 = 3 (left: 1 3 11)\n11 - 3 = 8 (left: 1 8)",
                "2 + 1 = 3 (left: 1 3 11)"
            ]
        },
        "step_9": {
            "steps": [
                "2 + 1 = 3 (left: 1 3 11)\n11 - 3 = 8 (left: 1 8)\n8 / 1 = 8 (left: 8 8)",
                "2 + 1 = 3 (left: 1 3 11)\n11 - 3 = 8 (left: 1 8)",
                "2 + 1 = 3 (left: 1 3 11)\n11 - 3 = 8 (left: 1 8)\n1 + 8 = 9 (left: 9)",
                "2 + 1 = 3 (left: 1 3 11)\n11 - 3 = 8 (left: 1 8)\n8 - 1 = 7 (left: 7)",
                "2 + 1 = 3 (left: 1 3 11)\n11 - 3 = 8 (left: 1 8)"
            ],
            "values": [
                1.002,
                20.0,
                0.002,
                0.001,
                21.0
            ],
            "resampled": [
                "0 <- 9.0",
                "1 <- 8.1",
                "2 <- 9.1",
                "3 <- 9.0",
                "4 <- 8.2"
            ],
            "resampled_steps": [
                "2 + 1 = 3 (left: 1 3 11)\n11 - 3 = 8 (left: 1 8)\n8 / 1 = 8 (left: 8 8)",
                "2 + 1 = 3 (left: 1 3 11)\n1 + 3 = 4 (left: 4 11)",
                "2 + 1 = 3 (left: 1 3 11)\n11 - 3 = 8 (left: 1 8)",
                "2 + 1 = 3 (left: 1 3 11)\n11 - 3 = 8 (left: 1 8)\n8 / 1 = 8 (left: 8 8)",
                "2 + 11 = 13 (left: 1 1 13)\n1 - 1 = 0 (left: 0 13)\n13 / 0 = undefined (left: undefined)"
            ]
        },
        "step_10": {
            "steps": [
                "2 + 1 = 3 (left: 1 3 11)\n11 - 3 = 8 (left: 1 8)\n8 / 1 = 8 (left: 8 8)\n8 + 8 = 16 (left: 16)",
                "2 + 1 = 3 (left: 1 3 11)\n1 + 3 = 4 (left: 4 11)\n11 - 4 = 7 (left: 4 7)",
                "2 + 1 = 3 (left: 1 3 11)\n11 - 3 = 8 (left: 1 8)\n1 * 8 = 8 (left: 8)",
                "2 + 1 = 3 (left: 1 3 11)\n11 - 3 = 8 (left: 1 8)\n8 / 1 = 8 (left: 8 8)\n8 + 8 = 16 (left: 16)",
                "2 + 11 = 13 (left: 1 1 13)\n1 - 1 = 0 (left: 0 13)\n13 / 0 = undefined (left: undefined)\nI'm sorry, I cannot provide possible next steps without a specific input. Can you please provide a set of numbers for me to calculate the possible next steps?"
            ],
            "values": [
                0.003,
                1.002,
                0.003,
                0.002,
                0.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.797861
    },
    "21": {
        "input": "1 2 3 4",
        "step_1": {
            "steps": [
                "1 + 2 = 3 (left: 3 3 4)",
                "4 / 2 = 2 (left: 1 2 2)",
                "2 * 3 = 6 (left: 1 6 4)",
                "3 + 4 = 7 (left: 1 2 7)",
                "4 - 3 = 1 (left: 1 2 1)"
            ],
            "values": [
                1.002,
                21.001,
                60.0,
                1.002,
                2.001
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 1.1",
                "2 <- 1.2",
                "3 <- 1.2",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "2 * 3 = 6 (left: 1 6 4)",
                "4 / 2 = 2 (left: 1 2 2)",
                "2 * 3 = 6 (left: 1 6 4)",
                "2 * 3 = 6 (left: 1 6 4)",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "2 * 3 = 6 (left: 1 6 4)\n3 * 9 = 27 (left: 27 5)",
                "4 / 2 = 2 (left: 1 2 2)\n2 * 2 = 4 (left: 1 4)",
                "2 * 3 = 6 (left: 1 6 4)\n4 - 1 = 3 (left: 3 6)",
                "2 * 3 = 6 (left: 1 6 4)\n4 - 1 = 3 (left: 3 6)",
                "3 - 2 = 1 (left: 1 1 4)"
            ],
            "values": [
                0.002,
                60.0,
                1.001,
                0.002,
                1.002
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 2.1",
                "2 <- 2.1",
                "3 <- 2.1",
                "4 <- 1.2"
            ],
            "resampled_steps": [
                "2 * 3 = 6 (left: 1 6 4)",
                "4 / 2 = 2 (left: 1 2 2)\n2 * 2 = 4 (left: 1 4)",
                "4 / 2 = 2 (left: 1 2 2)\n2 * 2 = 4 (left: 1 4)",
                "4 / 2 = 2 (left: 1 2 2)\n2 * 2 = 4 (left: 1 4)",
                "2 * 3 = 6 (left: 1 6 4)"
            ]
        },
        "step_3": {
            "steps": [
                "2 * 3 = 6 (left: 1 6 4)\n1 * 6 = 6 (left: 6 4)",
                "4 / 2 = 2 (left: 1 2 2)\n2 * 2 = 4 (left: 1 4)\n4 - 1 = 3 (left: 3)",
                "4 / 2 = 2 (left: 1 2 2)\n2 * 2 = 4 (left: 1 4)\n4 / 1 = 4 (left: 4)",
                "4 / 2 = 2 (left: 1 2 2)\n2 * 2 = 4 (left: 1 4)\n4 - 1 = 3 (left: 3)",
                "2 * 3 = 6 (left: 1 6 4)\n6 - 1 = 5 (left: 5 4)"
            ],
            "values": [
                60.0,
                0.001,
                0.002,
                0.001,
                3.0
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 3.0",
                "2 <- 3.0",
                "3 <- 3.0",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "4 / 2 = 2 (left: 1 2 2)\n2 * 2 = 4 (left: 1 4)",
                "2 * 3 = 6 (left: 1 6 4)\n1 * 6 = 6 (left: 6 4)",
                "2 * 3 = 6 (left: 1 6 4)\n1 * 6 = 6 (left: 6 4)",
                "2 * 3 = 6 (left: 1 6 4)\n1 * 6 = 6 (left: 6 4)",
                ""
            ]
        },
        "step_4": {
            "steps": [
                "4 / 2 = 2 (left: 1 2 2)\n2 * 2 = 4 (left: 1 4)\n4 - 1 = 3 (left: 3)",
                "2 * 3 = 6 (left: 1 6 4)\n1 * 6 = 6 (left: 6 4)\n6 + 4 = 10 (left: 10)",
                "2 * 3 = 6 (left: 1 6 4)\n1 * 6 = 6 (left: 6 4)\n6 / 4 = 1.5 (left: 1.5)",
                "2 * 3 = 6 (left: 1 6 4)\n1 * 6 = 6 (left: 6 4)\n6 / 4 = 1.5 (left: 1.5)",
                "3 + 4 = 7 (left: 1 2 7)"
            ],
            "values": [
                0.002,
                0.002,
                0.002,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 3.0",
                "2 <- 1.0",
                "3 <- 2.1",
                "4 <- 3.0"
            ],
            "resampled_steps": [
                "2 * 3 = 6 (left: 1 6 4)\n1 * 6 = 6 (left: 6 4)",
                "2 * 3 = 6 (left: 1 6 4)\n1 * 6 = 6 (left: 6 4)",
                "1 + 2 = 3 (left: 3 3 4)",
                "4 / 2 = 2 (left: 1 2 2)\n2 * 2 = 4 (left: 1 4)",
                "2 * 3 = 6 (left: 1 6 4)\n1 * 6 = 6 (left: 6 4)"
            ]
        },
        "step_5": {
            "steps": [
                "2 * 3 = 6 (left: 1 6 4)\n1 * 6 = 6 (left: 6 4)\n6 - 4 = 2 (left: 2)",
                "2 * 3 = 6 (left: 1 6 4)\n1 * 6 = 6 (left: 6 4)\n6 - 4 = 2 (left: 2)",
                "1 + 2 = 3 (left: 3 3 4)\n4 + 3 = 7 (left: 3 7)",
                "4 / 2 = 2 (left: 1 2 2)\n2 * 2 = 4 (left: 1 4)\n1 * 4 = 4 (left: 4)",
                "2 * 3 = 6 (left: 1 6 4)\n1 * 6 = 6 (left: 6 4)\n6 + 4 = 10 (left: 10)"
            ],
            "values": [
                0.0,
                0.0,
                0.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 3.0",
                "2 <- 1.2",
                "3 <- 1.1",
                "4 <- 3.0"
            ],
            "resampled_steps": [
                "4 / 2 = 2 (left: 1 2 2)\n2 * 2 = 4 (left: 1 4)",
                "2 * 3 = 6 (left: 1 6 4)\n1 * 6 = 6 (left: 6 4)",
                "2 * 3 = 6 (left: 1 6 4)",
                "4 / 2 = 2 (left: 1 2 2)",
                "2 * 3 = 6 (left: 1 6 4)\n1 * 6 = 6 (left: 6 4)"
            ]
        },
        "step_6": {
            "steps": [
                "4 / 2 = 2 (left: 1 2 2)\n2 * 2 = 4 (left: 1 4)\n1 + 4 = 5 (left: 4 5)",
                "2 * 3 = 6 (left: 1 6 4)\n1 * 6 = 6 (left: 6 4)\n6 + 4 = 10 (left: 10)",
                "2 * 3 = 6 (left: 1 6 4)\n1 * 4 = 4 (left: 4 4)",
                "4 / 2 = 2 (left: 1 2 2)\n2 - 1 = 1 (left: 1 2)",
                "2 * 3 = 6 (left: 1 6 4)\n1 * 6 = 6 (left: 6 4)\n6 * 4 = 24 (left: 24)"
            ],
            "values": [
                2.0,
                0.003,
                1.0,
                40.001,
                60.0
            ],
            "resampled": [
                "0 <- 6.4",
                "1 <- 6.3",
                "2 <- 6.4",
                "3 <- 6.3",
                "4 <- 1.4"
            ],
            "resampled_steps": [
                "2 * 3 = 6 (left: 1 6 4)\n1 * 6 = 6 (left: 6 4)\n6 * 4 = 24 (left: 24)",
                "4 / 2 = 2 (left: 1 2 2)\n2 - 1 = 1 (left: 1 2)",
                "2 * 3 = 6 (left: 1 6 4)\n1 * 6 = 6 (left: 6 4)\n6 * 4 = 24 (left: 24)",
                "4 / 2 = 2 (left: 1 2 2)\n2 - 1 = 1 (left: 1 2)",
                "4 - 3 = 1 (left: 1 2 1)"
            ]
        },
        "step_7": {
            "steps": [
                "2 * 3 = 6 (left: 1 6 4)\n1 * 6 = 6 (left: 6 4)\n6 * 4 = 24 (left: 24)\nAnswer: (1 * 6) * (2 * 3) = 24",
                "4 / 2 = 2 (left: 1 2 2)\n2 - 1 = 1 (left: 1 2)\n1 * 2 = 2 (left: 2)",
                "2 * 3 = 6 (left: 1 6 4)\n1 * 6 = 6 (left: 6 4)\n6 * 4 = 24 (left: 24)\nAnswer: (1 * 2 * 3) * 4 = 24",
                "4 / 2 = 2 (left: 1 2 2)\n2 - 1 = 1 (left: 1 2)\n1 * 2 = 2 (left: 2)",
                "4 - 3 = 1 (left: 1 2 1)\n2 / 1 = 2 (left: 1 2)"
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.8261499999999999
    },
    "22": {
        "input": "11 11 12 12",
        "step_1": {
            "steps": [
                "12 - 11 = 1 (left: 11 1 12)",
                "12 / 11 = 1.09 (left: 11 12 1.09)",
                "11 / 11 = 1 (left: 1 12 12)",
                "12 - 11 = 1 (left: 11 12 1)",
                "11 / 11 = 1 (left: 1 12 12)"
            ],
            "values": [
                2.001,
                21.0,
                0.003,
                20.002,
                0.003
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 1.1",
                "2 <- INIT",
                "3 <- 1.3",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "12 / 11 = 1.09 (left: 11 12 1.09)",
                "12 / 11 = 1.09 (left: 11 12 1.09)",
                "",
                "12 - 11 = 1 (left: 11 12 1)",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "12 / 11 = 1.09 (left: 11 12 1.09)\n11 + 12 = 23 (left: 23 1.09)",
                "12 / 11 = 1.09 (left: 11 12 1.09)\n11 * 12 = 132 (left: 132 1.09)",
                "12 - 11 = 1 (left: 11 12 1)",
                "12 - 11 = 1 (left: 11 12 1)\n12 - 1 = 11 (left: 11 1)",
                "12 - 11 = 1 (left: 1 12 12)"
            ],
            "values": [
                2.0,
                0.003,
                40.001,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 2.2",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "12 - 11 = 1 (left: 11 12 1)",
                "",
                "",
                "12 - 11 = 1 (left: 11 12 1)",
                "12 / 11 = 1.09 (left: 11 12 1.09)"
            ]
        },
        "step_3": {
            "steps": [
                "12 - 11 = 1 (left: 11 12 1)\n12 - 11 = 1 (left: 1 1)",
                "12 - 11 = 1 (left: 11 1 12)",
                "11 + 11 = 22 (left: 12 12 22)",
                "12 - 11 = 1 (left: 11 12 1)\n11 - 12 = -1 (left: -1 1)",
                "12 / 11 = 1.09 (left: 11 12 1.09)\n11 * 12 = 132 (left: 132 1.09)"
            ],
            "values": [
                1.002,
                1.002,
                0.003,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 1.1",
                "2 <- 1.3",
                "3 <- 1.1",
                "4 <- 2.2"
            ],
            "resampled_steps": [
                "12 - 11 = 1 (left: 11 12 1)",
                "12 / 11 = 1.09 (left: 11 12 1.09)",
                "12 - 11 = 1 (left: 11 12 1)",
                "12 / 11 = 1.09 (left: 11 12 1.09)",
                "12 - 11 = 1 (left: 11 12 1)"
            ]
        },
        "step_4": {
            "steps": [
                "12 - 11 = 1 (left: 11 12 1)\n11 / 12 = 0.91666666667 (left: 0.91666666667 1)",
                "12 / 11 = 1.09 (left: 11 12 1.09)\n11 / 12 = 0.91666666667 (left: 0.91666666667 1.09)",
                "12 - 11 = 1 (left: 11 12 1)\n12 / 11 = 1.0909 (left: 1.0909 1)",
                "12 / 11 = 1.09 (left: 11 12 1.09)\n12 - 11 = 1 (left: 1 1.09)",
                "12 - 11 = 1 (left: 11 12 1)\n11 * 12 = 132 (left: 132 1)"
            ],
            "values": [
                1.001,
                1.002,
                0.0,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.1",
                "2 <- 2.2",
                "3 <- 2.2",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "",
                "12 / 11 = 1.09 (left: 11 12 1.09)",
                "12 - 11 = 1 (left: 11 12 1)",
                "12 - 11 = 1 (left: 11 12 1)",
                "12 / 11 = 1.09 (left: 11 12 1.09)"
            ]
        },
        "step_5": {
            "steps": [
                "12 - 11 = 1 (left: 11 12 1)",
                "12 / 11 = 1.09 (left: 11 12 1.09)\n11 / 1.09 = 10.09174312 (left: 10.09174312 12)",
                "12 - 11 = 1 (left: 11 12 1)\n12 / 11 = 1.0909 (left: 1.0909 1)",
                "12 - 11 = 1 (left: 11 12 1)\n11 / 12 = 0.9166666666666666 (left: 0.9166666666666666 1)",
                "12 / 11 = 1.09 (left: 11 12 1.09)\n11 * 12 = 132 (left: 132 1.09)"
            ],
            "values": [
                40.001,
                0.001,
                0.0,
                3.0,
                0.002
            ],
            "resampled": [
                "0 <- 5.0",
                "1 <- 5.0",
                "2 <- 5.0",
                "3 <- 1.3",
                "4 <- 5.0"
            ],
            "resampled_steps": [
                "12 - 11 = 1 (left: 11 12 1)",
                "12 - 11 = 1 (left: 11 12 1)",
                "12 - 11 = 1 (left: 11 12 1)",
                "12 - 11 = 1 (left: 11 12 1)",
                "12 - 11 = 1 (left: 11 12 1)"
            ]
        },
        "step_6": {
            "steps": [
                "12 - 11 = 1 (left: 11 12 1)\n11 * 12 = 132 (left: 132 1)",
                "12 - 11 = 1 (left: 11 12 1)\n11 / 12 = 0.9167 (left: 0.9167 1)",
                "12 - 11 = 1 (left: 11 12 1)\n11 * 12 = 132 (left: 132 1)",
                "12 - 11 = 1 (left: 11 12 1)\n12 + 1 = 13 (left: 11 13)",
                "12 - 11 = 1 (left: 11 12 1)\n11 - 12 = -1 (left: -1 1)"
            ],
            "values": [
                40.0,
                3.0,
                40.001,
                60.0,
                1.002
            ],
            "resampled": [
                "0 <- 6.3",
                "1 <- INIT",
                "2 <- 5.0",
                "3 <- 1.1",
                "4 <- 6.0"
            ],
            "resampled_steps": [
                "12 - 11 = 1 (left: 11 12 1)\n12 + 1 = 13 (left: 11 13)",
                "",
                "12 - 11 = 1 (left: 11 12 1)",
                "12 / 11 = 1.09 (left: 11 12 1.09)",
                "12 - 11 = 1 (left: 11 12 1)\n11 * 12 = 132 (left: 132 1)"
            ]
        },
        "step_7": {
            "steps": [
                "12 - 11 = 1 (left: 11 12 1)\n12 + 1 = 13 (left: 11 13)\n11 - 13 = -2 (left: -2)",
                "11 + 11 = 22 (left: 12 12 22)",
                "12 - 11 = 1 (left: 11 12 1)\n12 / 11 = 1.09 (left: 1 1)",
                "12 / 11 = 1.09 (left: 11 12 1.09)\n12 - 11 = 1 (left: 1 1.09)",
                "12 - 11 = 1 (left: 11 12 1)\n11 * 12 = 132 (left: 132 1)\n132 - 1 = 131 (left: 131)"
            ],
            "values": [
                0.001,
                1.002,
                2.001,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- 5.0",
                "1 <- 6.3",
                "2 <- 6.0",
                "3 <- 6.2",
                "4 <- 6.0"
            ],
            "resampled_steps": [
                "12 - 11 = 1 (left: 11 12 1)",
                "12 - 11 = 1 (left: 11 12 1)\n12 + 1 = 13 (left: 11 13)",
                "12 - 11 = 1 (left: 11 12 1)\n11 * 12 = 132 (left: 132 1)",
                "12 - 11 = 1 (left: 11 12 1)\n11 * 12 = 132 (left: 132 1)",
                "12 - 11 = 1 (left: 11 12 1)\n11 * 12 = 132 (left: 132 1)"
            ]
        },
        "step_8": {
            "steps": [
                "12 - 11 = 1 (left: 11 12 1)\n11 - 12 = -1 (left: -1 1)",
                "12 - 11 = 1 (left: 11 12 1)\n12 + 1 = 13 (left: 11 13)\n13 / 11 = 1.18181818182 (left: 1.18181818182)",
                "12 - 11 = 1 (left: 11 12 1)\n11 * 12 = 132 (left: 132 1)\n132 * 1 = 132 (left: 132)",
                "12 - 11 = 1 (left: 11 12 1)\n11 * 12 = 132 (left: 132 1)\n132 + 1 = 133 (left: 133)",
                "12 - 11 = 1 (left: 11 12 1)\n11 * 12 = 132 (left: 132 1)\n132 / 1 = 132 (left: 132)"
            ],
            "values": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 6.1",
                "1 <- 6.3",
                "2 <- 6.0",
                "3 <- 6.3",
                "4 <- 6.3"
            ],
            "resampled_steps": [
                "12 - 11 = 1 (left: 11 12 1)\n11 / 12 = 0.9167 (left: 0.9167 1)",
                "12 - 11 = 1 (left: 11 12 1)\n12 + 1 = 13 (left: 11 13)",
                "12 - 11 = 1 (left: 11 12 1)\n11 * 12 = 132 (left: 132 1)",
                "12 - 11 = 1 (left: 11 12 1)\n12 + 1 = 13 (left: 11 13)",
                "12 - 11 = 1 (left: 11 12 1)\n12 + 1 = 13 (left: 11 13)"
            ]
        },
        "step_9": {
            "steps": [
                "12 - 11 = 1 (left: 11 12 1)\n11 / 12 = 0.9167 (left: 0.9167 1)\n0.9167 * 1 = 0.9167 (left: 0.9167)",
                "12 - 11 = 1 (left: 11 12 1)\n12 + 1 = 13 (left: 11 13)\n11 - 13 = -2 (left: -2)",
                "12 - 11 = 1 (left: 11 12 1)\n11 * 12 = 132 (left: 132 1)\n132 * 1 = 132 (left: 132)",
                "12 - 11 = 1 (left: 11 12 1)\n12 + 1 = 13 (left: 11 13)\n13 / 11 = 1.18181818182 (left: 1.18181818182)",
                "12 - 11 = 1 (left: 11 12 1)\n12 + 1 = 13 (left: 11 13)\n11 + 13 = 24 (left: 24)"
            ],
            "values": [
                0.0,
                0.002,
                0.002,
                0.002,
                60.0
            ],
            "resampled": [
                "0 <- 4.3",
                "1 <- 6.0",
                "2 <- 6.3",
                "3 <- 9.4",
                "4 <- 9.4"
            ],
            "resampled_steps": [
                "12 / 11 = 1.09 (left: 11 12 1.09)\n12 - 11 = 1 (left: 1 1.09)",
                "12 - 11 = 1 (left: 11 12 1)\n11 * 12 = 132 (left: 132 1)",
                "12 - 11 = 1 (left: 11 12 1)\n12 + 1 = 13 (left: 11 13)",
                "12 - 11 = 1 (left: 11 12 1)\n12 + 1 = 13 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "12 - 11 = 1 (left: 11 12 1)\n12 + 1 = 13 (left: 11 13)\n11 + 13 = 24 (left: 24)"
            ]
        },
        "step_10": {
            "steps": [
                "12 / 11 = 1.09 (left: 11 12 1.09)\n12 - 11 = 1 (left: 1 1.09)\n1 - 1.09 = -0.09 (left: -0.09)",
                "12 - 11 = 1 (left: 11 12 1)\n11 * 12 = 132 (left: 132 1)\n132 - 1 = 131 (left: 131)",
                "12 - 11 = 1 (left: 11 12 1)\n12 + 1 = 13 (left: 11 13)\n13 - 11 = 2 (left: 2)",
                "12 - 11 = 1 (left: 11 12 1)\n12 + 1 = 13 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: (11 + (12 + 1)) + 13 = 24",
                "12 - 11 = 1 (left: 11 12 1)\n12 + 1 = 13 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: (11 + (12 - 11)) + 12 = 24"
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ],
        "cost": 0.8673000000000001
    },
    "23": {
        "input": "3 7 7 8",
        "step_1": {
            "steps": [
                "3 + 7 = 10 (left: 7 10 8)",
                "7 + 3 = 10 (left: 10 7 8)",
                "7 - 3 = 4 (left: 4 7 8)",
                "8 - 7 = 1 (left: 3 1 8)",
                "3 + 7 = 10 (left: 7 10 8)"
            ],
            "values": [
                3.0,
                22.0,
                22.0,
                60.0,
                22.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.3",
                "3 <- INIT",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "",
                "",
                "8 - 7 = 1 (left: 3 1 8)",
                "",
                "8 - 7 = 1 (left: 3 1 8)"
            ]
        },
        "step_2": {
            "steps": [
                "8 - 7 = 1 (left: 3 1 8)",
                "7 - 3 = 4 (left: 4 7 8)",
                "8 - 7 = 1 (left: 3 1 8)\n8 - 3 = 5 (left: 5 8)",
                "8 - 7 = 1 (left: 3 1 7)",
                "8 - 7 = 1 (left: 3 1 8)\n8 - 1 = 7 (left: 3 7)"
            ],
            "values": [
                3.0,
                22.0,
                1.0,
                3.0,
                1.0
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- INIT",
                "3 <- 1.3",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "7 - 3 = 4 (left: 4 7 8)",
                "7 - 3 = 4 (left: 4 7 8)",
                "",
                "8 - 7 = 1 (left: 3 1 8)",
                "8 - 7 = 1 (left: 3 1 8)"
            ]
        },
        "step_3": {
            "steps": [
                "7 - 3 = 4 (left: 4 7 8)\n8 / 4 = 2 (left: 2 7)",
                "7 - 3 = 4 (left: 4 7 8)\n7 / 4 = 1.75 (left: 1.75 8)",
                "3 * 7 = 21 (left: 21 7 8)",
                "8 - 7 = 1 (left: 3 1 8)\n1 - 3 = -2 (left: -2 8)",
                "8 - 7 = 1 (left: 3 1 8)\n8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)"
            ],
            "values": [
                1.001,
                2.001,
                22.0,
                3.0,
                0.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.2",
                "2 <- 2.3",
                "3 <- 1.1",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "",
                "7 - 3 = 4 (left: 4 7 8)",
                "8 - 7 = 1 (left: 3 1 7)",
                "7 + 3 = 10 (left: 10 7 8)",
                "7 - 3 = 4 (left: 4 7 8)"
            ]
        },
        "step_4": {
            "steps": [
                "7 / 3 = 2 (left: 2 7 8)",
                "7 - 3 = 4 (left: 4 7 8)\n7 + 8 = 15 (left: 4 15)",
                "8 - 7 = 1 (left: 3 1 7)\n3 - 1 = 2 (left: 2 7)",
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)",
                "7 - 3 = 4 (left: 4 7 8)\n4 * 7 = 28 (left: 28 8)"
            ],
            "values": [
                3.0,
                3.0,
                0.003,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 4.3",
                "2 <- 1.1",
                "3 <- 4.3",
                "4 <- 4.3"
            ],
            "resampled_steps": [
                "7 - 3 = 4 (left: 4 7 8)",
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)",
                "7 + 3 = 10 (left: 10 7 8)",
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)",
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)"
            ]
        },
        "step_5": {
            "steps": [
                "7 - 3 = 4 (left: 4 7 8)\n8 / 7 = 1.14 (left: 4 1.14)",
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)\n8 / 3 = 2.67 (left: 2.67 8)",
                "7 + 3 = 10 (left: 10 7 8)\n10 + 7 = 17 (left: 17 8)",
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)\n3 + 8 = 11 (left: 8 11)",
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)"
            ],
            "values": [
                2.001,
                3.0,
                0.003,
                21.001,
                20.0
            ],
            "resampled": [
                "0 <- 4.3",
                "1 <- 1.3",
                "2 <- 5.4",
                "3 <- 3.2",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)",
                "8 - 7 = 1 (left: 3 1 8)",
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "3 * 7 = 21 (left: 21 7 8)",
                "8 - 7 = 1 (left: 3 1 8)"
            ]
        },
        "step_6": {
            "steps": [
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)",
                "8 - 7 = 1 (left: 3 1 8)\n1 / 3 = 0.333 (left: 0.333 8)",
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (7 + 3) * 8 = 24",
                "3 * 7 = 21 (left: 21 7 8)\n7 * 8 = 56 (left: 21 56)",
                "8 - 7 = 1 (left: 3 1 8)\n3 - 8 = -5 (left: -5)"
            ],
            "values": [
                0.002,
                2.001,
                60.0,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 1.4",
                "2 <- 6.2",
                "3 <- 6.1",
                "4 <- 4.3"
            ],
            "resampled_steps": [
                "7 + 3 = 10 (left: 10 7 8)",
                "3 + 7 = 10 (left: 7 10 8)",
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (7 + 3) * 8 = 24",
                "8 - 7 = 1 (left: 3 1 8)\n1 / 3 = 0.333 (left: 0.333 8)",
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)"
            ]
        },
        "step_7": {
            "steps": [
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)",
                "3 + 7 = 10 (left: 7 10 8)\n7 + 10 = 17 (left: 17 8)",
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (7 + 3) * 8 = 24\nInput: 1 3 4 6\nSteps:\n3 * 4 = 12 (left: 1 6 12)\n6 * 1 = 6 (left: 6 12)\n12 - 6 = 6 (left: 6 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((3 * 4) * 1) - 6 = 24",
                "8 - 7 = 1 (left: 3 1 8)\n1 / 3 = 0.333 (left: 0.333 8)\n8 * 0.333 = 2.664 (left: 2.664 8)",
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)\n3 + 8 = 11 (left: 8 11)"
            ],
            "values": [
                60.0,
                0.003,
                40.0,
                3.0,
                0.001
            ],
            "resampled": [
                "0 <- 7.0",
                "1 <- 7.2",
                "2 <- 4.3",
                "3 <- 1.3",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)",
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (7 + 3) * 8 = 24\nInput: 1 3 4 6\nSteps:\n3 * 4 = 12 (left: 1 6 12)\n6 * 1 = 6 (left: 6 12)\n12 - 6 = 6 (left: 6 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((3 * 4) * 1) - 6 = 24",
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)",
                "8 - 7 = 1 (left: 3 1 8)",
                "7 - 3 = 4 (left: 4 7 8)"
            ]
        },
        "step_8": {
            "steps": [
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24 8)",
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (7 + 3) * 8 = 24\nInput: 1 3 4 6\nSteps:\n3 * 4 = 12 (left: 1 6 12)\n6 * 1 = 6 (left: 6 12)\n12 - 6 = 6 (left: 6 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((3 * 4) * 1) - 6 = 24\nInput: 2 3 6 7\nSteps:\n6 * 3 = 18 (left: 2 7 18)\n18 - 7 = 11 (left: 2 11)\n11 * 2 = 22 (left: 22)\n22 + 2 = 24 (left: 24)\nAnswer: ((6 * 3) - 7) + 2 = 24",
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)\n8 / 3 = 2.6667 (left: 2.6667 8)",
                "8 - 7 = 1 (left: 3 1 8)\n3 + 1 = 4 (left: 4 8)",
                "7 - 3 = 4 (left: 4 7 8)\n8 - 4 = 4 (left: 4 4)"
            ],
            "values": [
                0.003,
                20.0,
                3.0,
                41.0,
                1.001
            ],
            "resampled": [
                "0 <- 8.3",
                "1 <- 7.2",
                "2 <- 7.0",
                "3 <- 8.3",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "8 - 7 = 1 (left: 3 1 8)\n3 + 1 = 4 (left: 4 8)",
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (7 + 3) * 8 = 24\nInput: 1 3 4 6\nSteps:\n3 * 4 = 12 (left: 1 6 12)\n6 * 1 = 6 (left: 6 12)\n12 - 6 = 6 (left: 6 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((3 * 4) * 1) - 6 = 24",
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)",
                "8 - 7 = 1 (left: 3 1 8)\n3 + 1 = 4 (left: 4 8)",
                "7 - 3 = 4 (left: 4 7 8)"
            ]
        },
        "step_9": {
            "steps": [
                "8 - 7 = 1 (left: 3 1 8)\n3 + 1 = 4 (left: 4 8)\n8 / 4 = 2 (left: 2 8)",
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (7 + 3) * 8 = 24\nInput: 1 3 4 6\nSteps:\n3 * 4 = 12 (left: 1 6 12)\n6 * 1 = 6 (left: 6 12)\n12 - 6 = 6 (left: 6 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((3 * 4) * 1) - 6 = 24\nInput: 2 3 5 8\nSteps:\n5 * 3 = 15 (left: 2 8 15)\n8 - 2 = 6 (left: 6 15)\n15 - 6 = 9 (left: 9)\n9 * 2 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: (5 * 3) + ((8 - 2) + 9) * 2 = 24",
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)\n3 + 8 = 11 (left: 8 11)",
                "8 - 7 = 1 (left: 3 1 8)\n3 + 1 = 4 (left: 4 8)\n4 + 8 = 12 (left: 8 12)",
                "7 - 3 = 4 (left: 4 7 8)\n4 + 7 = 11 (left: 11 8)"
            ],
            "values": [
                2.0,
                40.0,
                0.003,
                2.001,
                1.002
            ],
            "resampled": [
                "0 <- 7.0",
                "1 <- 7.2",
                "2 <- 6.2",
                "3 <- 8.3",
                "4 <- 9.1"
            ],
            "resampled_steps": [
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)",
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (7 + 3) * 8 = 24\nInput: 1 3 4 6\nSteps:\n3 * 4 = 12 (left: 1 6 12)\n6 * 1 = 6 (left: 6 12)\n12 - 6 = 6 (left: 6 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((3 * 4) * 1) - 6 = 24",
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (7 + 3) * 8 = 24",
                "8 - 7 = 1 (left: 3 1 8)\n3 + 1 = 4 (left: 4 8)",
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (7 + 3) * 8 = 24\nInput: 1 3 4 6\nSteps:\n3 * 4 = 12 (left: 1 6 12)\n6 * 1 = 6 (left: 6 12)\n12 - 6 = 6 (left: 6 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((3 * 4) * 1) - 6 = 24\nInput: 2 3 5 8\nSteps:\n5 * 3 = 15 (left: 2 8 15)\n8 - 2 = 6 (left: 6 15)\n15 - 6 = 9 (left: 9)\n9 * 2 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: (5 * 3) + ((8 - 2) + 9) * 2 = 24"
            ]
        },
        "step_10": {
            "steps": [
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)\n3 + 8 = 11 (left: 8 11)",
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (7 + 3) * 8 = 24\nInput: 1 3 4 6\nSteps:\n3 * 4 = 12 (left: 1 6 12)\n6 * 1 = 6 (left: 6 12)\n12 - 6 = 6 (left: 6 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((3 * 4) * 1) - 6 = 24\nInput: 2 3 5 8\nSteps:\n5 * 3 = 15 (left: 2 8 15)\n15 - 2 = 13 (left: 13 8)\n13 + 8 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: ((5 * 3) - 2) + 8 + 3 = 24",
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (7 + 3) * 8 = 24\nInput: 3 6 7 8\nSteps:\n6 * 7 = 42 (left: 3 8 42)\n42 / 3 = 14 (left: 8 14)\n14 - 8 = 6 (left: 6 14)\n6 * 14 = 84 (left: 84)\n84 / 4 = 24 (left: 24)\nAnswer: ((6 * 7) / 3) * (14 - 8) = 24",
                "8 - 7 = 1 (left: 3 1 8)\n3 + 1 = 4 (left: 4 8)\n4 * 8 = 32 (left: 8 32)",
                "7 + 3 = 10 (left: 10 7 8)\n10 - 7 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (7 + 3) * 8 = 24\nInput: 1 3 4 6\nSteps:\n3 * 4 = 12 (left: 1 6 12)\n6 * 1 = 6 (left: 6 12)\n12 - 6 = 6 (left: 6 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((3 * 4) * 1) - 6 = 24\nInput: 2 3 5 8\nSteps:\n5 * 3 = 15 (left: 2 8 15)\n8 - 2 = 6 (left: 6 15)\n15 - 6 = 9 (left: 9)\n9 * 2 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: (5 * 3) + ((8 - 2) + 9) * 2 = 24\nInput: 1 4 5 6\nSteps:\n5 * 4 = 20 (left: 1 6 20)\n6 - 1 = 5 (left: 5 20)\n20 / 5 = 4 (left: 4 4)\n4 * 6 = 24 (left: 24)\nAnswer: ((5 * 4) / (6 - 1)) * 4 = 24"
            ],
            "values": [
                20.001,
                20.0,
                40.0,
                1.002,
                40.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.9117599999999999
    },
    "24": {
        "input": "1 1 13 13",
        "step_1": {
            "steps": [
                "13 + 1 = 14 (left: 1 13 14)",
                "13 / 1 = 13 (left: 1 13 13)",
                "1 * 1 = 1 (left: 1 13 13)",
                "13 / 1 = 13 (left: 1 13 13)",
                "13 - 1 = 12 (left: 1 12 13)"
            ],
            "values": [
                20.002,
                0.003,
                0.002,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- INIT",
                "2 <- 1.0",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "13 + 1 = 14 (left: 1 13 14)",
                "",
                "13 + 1 = 14 (left: 1 13 14)",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "13 + 1 = 14 (left: 1 13 14)\n13 + 1 = 14 (left: 1 14 14)",
                "13 / 1 = 13 (left: 1 13 13)",
                "13 + 1 = 14 (left: 1 13 14)\n13 / 1 = 13 (left: 13 14)",
                "13 / 1 = 13 (left: 1 13 13)",
                "13 - 1 = 12 (left: 1 12 13)"
            ],
            "values": [
                0.003,
                20.002,
                0.002,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.0",
                "3 <- 2.1",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                "13 + 1 = 14 (left: 1 13 14)",
                "13 / 1 = 13 (left: 1 13 13)",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "13 + 1 = 14 (left: 1 13 14)",
                "13 - 1 = 12 (left: 1 12 13)",
                "13 + 1 = 14 (left: 1 13 14)\n13 + 1 = 14 (left: 1 14 14)",
                "13 / 1 = 13 (left: 1 13 13)\n1 * 13 = 13 (left: 13 13)",
                "1 + 1 = 2 (left: 2 13 13)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                40.001
            ],
            "resampled": [
                "0 <- 3.4",
                "1 <- INIT",
                "2 <- 3.4",
                "3 <- INIT",
                "4 <- 3.4"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 13 13)",
                "",
                "1 + 1 = 2 (left: 2 13 13)",
                "",
                "1 + 1 = 2 (left: 2 13 13)"
            ]
        },
        "step_4": {
            "steps": [
                "1 + 1 = 2 (left: 2 13 13)\n2 + 13 = 15 (left: 13 15)",
                "13 - 1 = 12 (left: 1 13 12)",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)",
                "13 - 1 = 12 (left: 1 12 13)",
                "1 + 1 = 2 (left: 2 13 13)\n2 + 13 = 15 (left: 13 15)"
            ],
            "values": [
                0.003,
                1.002,
                60.0,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 3.4",
                "1 <- 4.2",
                "2 <- 4.2",
                "3 <- 1.0",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 13 13)",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)",
                "13 + 1 = 14 (left: 1 13 14)",
                "13 / 1 = 13 (left: 1 13 13)"
            ]
        },
        "step_5": {
            "steps": [
                "1 + 1 = 2 (left: 2 13 13)\n2 + 13 = 15 (left: 13 15)",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 - 13 = -2 (left: -2)",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "13 + 1 = 14 (left: 1 13 14)\n7 / 3 = 2.33 (left: 2.33 5)",
                "13 / 1 = 13 (left: 1 13 13)\n13 / 1 = 13 (left: 13 13)"
            ],
            "values": [
                0.003,
                0.003,
                40.0,
                0.001,
                0.003
            ],
            "resampled": [
                "0 <- 5.2",
                "1 <- 1.0",
                "2 <- 3.4",
                "3 <- 4.2",
                "4 <- 5.2"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "13 + 1 = 14 (left: 1 13 14)",
                "1 + 1 = 2 (left: 2 13 13)",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)"
            ]
        },
        "step_6": {
            "steps": [
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 13) + 13 = 24",
                "13 + 1 = 14 (left: 1 13 14)\n1 * 13 = 13 (left: 13 14)",
                "1 + 1 = 2 (left: 2 13 13)\n2 + 13 = 15 (left: 13 15)",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n13 / 11 = 1.18181818182 (left: 1.18181818182)",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: (1 + 1) + (13 - 13) = 24"
            ],
            "values": [
                60.0,
                0.003,
                1.002,
                0.003,
                20.002
            ],
            "resampled": [
                "0 <- 5.2",
                "1 <- 6.0",
                "2 <- 6.0",
                "3 <- 6.0",
                "4 <- 6.0"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 13) + 13 = 24",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 13) + 13 = 24",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 13) + 13 = 24",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 13) + 13 = 24"
            ]
        },
        "step_7": {
            "steps": [
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: (1 + 1) + (13 - 13) = 24",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 13) + 13 = 24\nIn all the given inputs, we used numbers and basic arithmetic operations to obtain 24.",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 13) + 13 = 24\nInput: 3 3 7 9\nSteps:\n3 + 7 = 10 (left: 3 9 10)\n10 - 9 = 1 (left: 1 3)\n3 * 1 = 3 (left: 3)\n3 * 3 = 24 (left: 24)\nAnswer: (3 * (3 + 7)) * 9 = 24",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 13) + 13 = 24\nIn the given examples, I used basic arithmetic operations to obtain the number 24 using the given numbers.",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 13) + 13 = 24\nInput: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) - (9 - 6) = 24"
            ],
            "values": [
                0.003,
                0.003,
                0.0,
                0.003,
                40.0
            ],
            "resampled": [
                "0 <- 6.0",
                "1 <- 2.1",
                "2 <- 3.4",
                "3 <- INIT",
                "4 <- 6.4"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 13) + 13 = 24",
                "13 / 1 = 13 (left: 1 13 13)",
                "1 + 1 = 2 (left: 2 13 13)",
                "",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: (1 + 1) + (13 - 13) = 24"
            ]
        },
        "step_8": {
            "steps": [
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 13) + 13 = 24\n\nInput: 3 3 7 11\nSteps:\n3 * 7 = 21 (left: 3 11 21)\n21 - 11 = 10 (left: 3 10)\n10 + 3 = 13 (left: 13)\n13 * 2 = 24 (left: 24)\nAnswer: ((3 * 7) - 11) + 3 * 2 = 24",
                "13 / 1 = 13 (left: 1 13 13)\n1 + 13 = 14 (left: 13 14)",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)",
                "1 + 1 = 2 (left: 2 13 13)",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: (1 + 1) + (13 - 13) = 24\n\nAll possible answers have been exhausted."
            ],
            "values": [
                20.0,
                0.003,
                60.0,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 8.2",
                "2 <- 7.4",
                "3 <- 7.4",
                "4 <- 8.0"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 13) + 13 = 24\nInput: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) - (9 - 6) = 24",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 13) + 13 = 24\nInput: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) - (9 - 6) = 24",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 13) + 13 = 24\n\nInput: 3 3 7 11\nSteps:\n3 * 7 = 21 (left: 3 11 21)\n21 - 11 = 10 (left: 3 10)\n10 + 3 = 13 (left: 13)\n13 * 2 = 24 (left: 24)\nAnswer: ((3 * 7) - 11) + 3 * 2 = 24"
            ]
        },
        "step_9": {
            "steps": [
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n13 - 11 = 2 (left: 2)",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n13 - 11 = 2 (left: 2)",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 13) + 13 = 24\nInput: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) - (9 - 6) = 24\nInput: 3 3 8 9\nSteps:\n3 * 8 = 24 (left: 3 9 24)\n9 - 3 = 6 (left: 6 24)\n6 * 24 = 144 (left: 144)\nAnswer: (3 * 8) - (9 - 6) = 24",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 13) + 13 = 24\nInput: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) - (9 - 6) = 24\nInput: 2 3 3 4\nSteps:\n3 * 3 = 9 (left: 2 4 9)\n9 - 4 = 5 (left: 2 5)\n5 * 2 = 10 (left: 10)\n10 + 14 = 24 (left: 24)\nAnswer: ((3 * 3) - 4) * 2 + 14 = 24",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 13) + 13 = 24\n\nInput: 3 3 7 11\nSteps:\n3 * 7 = 21 (left: 3 11 21)\n21 - 11 = 10 (left: 3 10)\n10 + 3 = 13 (left: 13)\n13 * 2 = 24 (left: 24)\nAnswer: ((3 * 7) - 11) + 3 * 2 = 24\nInput: 2 3 5 6\nSteps:\n5 - 3 = 2 (left: 2 6)\n2 * 6 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((5 - 3) * 6) * 2 = 24"
            ],
            "values": [
                0.002,
                0.002,
                40.0,
                60.0,
                20.0
            ],
            "resampled": [
                "0 <- 9.2",
                "1 <- 6.0",
                "2 <- 6.0",
                "3 <- 9.2",
                "4 <- 9.3"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 13) + 13 = 24\nInput: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) - (9 - 6) = 24\nInput: 3 3 8 9\nSteps:\n3 * 8 = 24 (left: 3 9 24)\n9 - 3 = 6 (left: 6 24)\n6 * 24 = 144 (left: 144)\nAnswer: (3 * 8) - (9 - 6) = 24",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 13) + 13 = 24",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 13) + 13 = 24",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 13) + 13 = 24\nInput: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) - (9 - 6) = 24\nInput: 3 3 8 9\nSteps:\n3 * 8 = 24 (left: 3 9 24)\n9 - 3 = 6 (left: 6 24)\n6 * 24 = 144 (left: 144)\nAnswer: (3 * 8) - (9 - 6) = 24",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 13) + 13 = 24\nInput: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) - (9 - 6) = 24\nInput: 2 3 3 4\nSteps:\n3 * 3 = 9 (left: 2 4 9)\n9 - 4 = 5 (left: 2 5)\n5 * 2 = 10 (left: 10)\n10 + 14 = 24 (left: 24)\nAnswer: ((3 * 3) - 4) * 2 + 14 = 24"
            ]
        },
        "step_10": {
            "steps": [
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 13) + 13 = 24\nInput: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) - (9 - 6) = 24\nInput: 3 3 8 9\nSteps:\n3 * 8 = 24 (left: 3 9 24)\n9 - 3 = 6 (left: 6 24)\n6 * 24 = 144 (left: 144)\nAnswer: (3 * 8) - (9 - 6) = 24\n\nInput: 2 2 3 4\nSteps:\n2 * 3 = 6 (left: 2 4 6)\n6 * 4 = 24 (left: 24)\nAnswer: (2 * 3) * 4 = 24",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 13) + 13 = 24\nInput: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n9 * 1 = 9 (left: 9)\nAnswer: (3 * 3) - 8 + 9 = 24",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 13) + 13 = 24\nInput: 3 3 4 6\nSteps:\n3 * 4 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nAnswer: (3 * 4) * (6 - 3) = 24",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 13) + 13 = 24\nInput: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) - (9 - 6) = 24\nInput: 3 3 8 9\nSteps:\n3 * 8 = 24 (left: 3 9 24)\n9 - 3 = 6 (left: 6 24)\n6 * 24 = 144 (left: 144)\nAnswer: (3 * 8) - (9 - 6) = 24\nInput: 2 2 6 8\nSteps:\n2 * 2 = 4 (left: 4 6 8)\n6 - 4 = 2 (left: 2 8)\n2 * 8 = 16 (left: 16)\nAnswer: (2 * 2) * (6 - 4) = 24",
                "1 + 1 = 2 (left: 2 13 13)\n13 - 2 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((1 + 1) + 13) + 13 = 24\nInput: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 * 3) - (9 - 6) = 24\nInput: 2 3 3 4\nSteps:\n3 * 3 = 9 (left: 2 4 9)\n9 - 4 = 5 (left: 2 5)\n5 * 2 = 10 (left: 10)\n10 + 14 = 24 (left: 24)\nAnswer: ((3 * 3) - 4) * 2 + 14 = 24\nInput: 2 3 3 4\nSteps:\n3 * 3 = 9 (left: 2 4 9)\n9 - 4 = 5 (left: 2 5)\n5 * 2 = 10 (left: 10)\n10 + 14 = 24 (left: 24)\nAnswer: ((3 * 3) - 4) * 2 + 14 = 24"
            ],
            "values": [
                20.0,
                60.0,
                60.0,
                60.0,
                40.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.958735
    },
    "25": {
        "input": "1 2 4 12",
        "step_1": {
            "steps": [
                "4 * 3 = 12 (left: 1 2 12)",
                "12 / 2 = 6 (left: 1 2 6)",
                "12 - 4 = 8 (left: 1 2 8)",
                "12 - 4 = 8 (left: 1 2 8)",
                "4 * 3 = 12 (left: 1 12 12)"
            ],
            "values": [
                60.0,
                1.002,
                60.0,
                22.0,
                1.002
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 1.2",
                "2 <- 1.2",
                "3 <- 1.0",
                "4 <- 1.2"
            ],
            "resampled_steps": [
                "4 * 3 = 12 (left: 1 2 12)",
                "12 - 4 = 8 (left: 1 2 8)",
                "12 - 4 = 8 (left: 1 2 8)",
                "4 * 3 = 12 (left: 1 2 12)",
                "12 - 4 = 8 (left: 1 2 8)"
            ]
        },
        "step_2": {
            "steps": [
                "4 * 3 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "12 - 4 = 8 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "12 - 4 = 8 (left: 1 2 8)\n2 * 8 = 16 (left: 1 16)",
                "4 * 3 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "12 - 4 = 8 (left: 1 2 8)\n2 * 8 = 16 (left: 1 16)"
            ],
            "values": [
                20.0,
                60.0,
                2.0,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 2.1",
                "2 <- 2.1",
                "3 <- 2.1",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "",
                "12 - 4 = 8 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "12 - 4 = 8 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "12 - 4 = 8 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "4 * 3 = 12 (left: 1 2 12)"
            ]
        },
        "step_3": {
            "steps": [
                "2 * 4 = 8 (left: 1 8 12)",
                "12 - 4 = 8 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "12 - 4 = 8 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 + 8 = 11 (left: 8 11)",
                "12 - 4 = 8 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n8 / 3 = 2.6667 (left: 2.6667 8)",
                "4 * 3 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)"
            ],
            "values": [
                20.002,
                20.0,
                0.003,
                2.001,
                41.0
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 1.3",
                "2 <- 1.1",
                "3 <- 1.0",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "2 * 4 = 8 (left: 1 8 12)",
                "12 - 4 = 8 (left: 1 2 8)",
                "12 / 2 = 6 (left: 1 2 6)",
                "4 * 3 = 12 (left: 1 2 12)",
                "4 * 3 = 12 (left: 1 2 12)"
            ]
        },
        "step_4": {
            "steps": [
                "2 * 4 = 8 (left: 1 8 12)\n8 * 1 = 8 (left: 8 12)",
                "12 - 4 = 8 (left: 1 2 8)\n2 / 1 = 2 (left: 2 8)",
                "12 / 2 = 6 (left: 1 2 6)\n2 * 6 = 12 (left: 1 12)",
                "4 * 3 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "4 * 3 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)"
            ],
            "values": [
                0.001,
                1.001,
                1.002,
                20.0,
                20.001
            ],
            "resampled": [
                "0 <- 4.4",
                "1 <- 1.0",
                "2 <- 4.4",
                "3 <- 4.3",
                "4 <- 1.2"
            ],
            "resampled_steps": [
                "4 * 3 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "4 * 3 = 12 (left: 1 2 12)",
                "4 * 3 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "4 * 3 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "12 - 4 = 8 (left: 1 2 8)"
            ]
        },
        "step_5": {
            "steps": [
                "4 * 3 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "4 * 3 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "4 * 3 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 / 1 = 10 (left: 1 10)",
                "4 * 3 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n1 + 10 = 11 (left: 11)",
                "12 - 4 = 8 (left: 1 2 8)\n8 - 1 = 7 (left: 2 7)"
            ],
            "values": [
                0.002,
                60.0,
                60.0,
                0.001,
                0.001
            ],
            "resampled": [
                "0 <- 3.4",
                "1 <- 1.2",
                "2 <- 5.1",
                "3 <- 4.3",
                "4 <- 1.2"
            ],
            "resampled_steps": [
                "4 * 3 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)",
                "12 - 4 = 8 (left: 1 2 8)",
                "4 * 3 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "4 * 3 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "12 - 4 = 8 (left: 1 2 8)"
            ]
        },
        "step_6": {
            "steps": [
                "4 * 3 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n3 * 4 = 12 (left: 12)",
                "12 - 4 = 8 (left: 1 2 8)\n8 / 1 = 8 (left: 2 8)",
                "4 * 3 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "4 * 3 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 - 1 = 9 (left: 1 9)",
                "12 - 4 = 8 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)"
            ],
            "values": [
                0.003,
                0.003,
                0.002,
                0.001,
                60.0
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 5.1",
                "2 <- 5.2",
                "3 <- 5.1",
                "4 <- 3.4"
            ],
            "resampled_steps": [
                "12 - 4 = 8 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "4 * 3 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "4 * 3 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 / 1 = 10 (left: 1 10)",
                "4 * 3 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "4 * 3 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)"
            ]
        },
        "step_7": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)",
                "4 * 3 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n6 / 1 = 6 (left: 6 6)",
                "4 * 3 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 / 1 = 10 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "4 * 3 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n6 - 1 = 5 (left: 5)",
                "4 * 3 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n12 / 3 = 4 (left: 4)"
            ],
            "values": [
                0.001,
                0.003,
                0.002,
                0.003,
                0.0
            ],
            "resampled": [
                "0 <- 6.4",
                "1 <- 6.4",
                "2 <- 5.1",
                "3 <- 2.1",
                "4 <- 5.1"
            ],
            "resampled_steps": [
                "12 - 4 = 8 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "12 - 4 = 8 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "4 * 3 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "12 - 4 = 8 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "4 * 3 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)"
            ]
        },
        "step_8": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)",
                "12 - 4 = 8 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n8 / 3 = 2.67 (left: 2.67 8)",
                "4 * 3 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "12 - 4 = 8 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)",
                "4 * 3 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n1 + 6 = 7 (left: 7)"
            ],
            "values": [
                1.001,
                3.0,
                0.003,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- 5.1",
                "1 <- 1.0",
                "2 <- 1.2",
                "3 <- 5.2",
                "4 <- 5.2"
            ],
            "resampled_steps": [
                "4 * 3 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "4 * 3 = 12 (left: 1 2 12)",
                "12 - 4 = 8 (left: 1 2 8)",
                "4 * 3 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 / 1 = 10 (left: 1 10)",
                "4 * 3 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 / 1 = 10 (left: 1 10)"
            ]
        },
        "step_9": {
            "steps": [
                "4 * 3 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "4 * 3 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "12 - 4 = 8 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)",
                "4 * 3 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 / 1 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "4 * 3 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 / 1 = 10 (left: 1 10)\n1 + 10 = 11 (left: 11)"
            ],
            "values": [
                0.002,
                21.0,
                60.0,
                0.003,
                0.001
            ],
            "resampled": [
                "0 <- 5.1",
                "1 <- 1.0",
                "2 <- 2.3",
                "3 <- 5.2",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "4 * 3 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "4 * 3 = 12 (left: 1 2 12)",
                "4 * 3 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "4 * 3 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 / 1 = 10 (left: 1 10)",
                "12 - 4 = 8 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)"
            ]
        },
        "step_10": {
            "steps": [
                "4 * 3 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "4 * 3 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "4 * 3 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)",
                "4 * 3 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 / 1 = 10 (left: 1 10)\n10 + 1 = 11 (left: 11)",
                "12 - 4 = 8 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 8 24)"
            ],
            "values": [
                0.002,
                22.0,
                0.003,
                0.002,
                1.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.9977200000000002
    },
    "26": {
        "input": "1 1 3 6",
        "step_1": {
            "steps": [
                "3 + 3 = 6 (left: 1 6 6)",
                "3 + 1 = 4 (left: 1 4 6)",
                "6 / 3 = 2 (left: 1 2 3)",
                "3 + 1 = 4 (left: 1 4 6)",
                "6 - 3 = 3 (left: 1 3 6)"
            ],
            "values": [
                21.001,
                60.0,
                0.003,
                60.0,
                2.0
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 1.3",
                "2 <- 1.1",
                "3 <- INIT",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "3 + 3 = 6 (left: 1 6 6)",
                "3 + 1 = 4 (left: 1 4 6)",
                "3 + 1 = 4 (left: 1 4 6)",
                "",
                "3 + 1 = 4 (left: 1 4 6)"
            ]
        },
        "step_2": {
            "steps": [
                "3 + 3 = 6 (left: 1 6 6)\n6 * 1 = 6 (left: 6 6)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "3 + 1 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)",
                "1 * 1 = 1 (left: 1 3 6)",
                "3 + 1 = 4 (left: 1 4 6)\n1 + 4 = 5 (left: 5 6)"
            ],
            "values": [
                21.001,
                60.0,
                60.0,
                1.0,
                2.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 2.1",
                "2 <- INIT",
                "3 <- 1.0",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "",
                "3 + 3 = 6 (left: 1 6 6)",
                "3 + 1 = 4 (left: 1 4 6)"
            ]
        },
        "step_3": {
            "steps": [
                "6 - 3 = 3 (left: 1 3 3)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)",
                "3 * 3 = 9 (left: 1 9 6)",
                "3 + 3 = 6 (left: 1 6 6)\n6 / 1 = 6 (left: 6 6)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)"
            ],
            "values": [
                0.002,
                0.002,
                2.001,
                40.001,
                60.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 1.1",
                "2 <- 2.2",
                "3 <- 3.3",
                "4 <- 2.2"
            ],
            "resampled_steps": [
                "3 + 1 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)",
                "3 + 1 = 4 (left: 1 4 6)",
                "3 + 1 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)",
                "3 + 3 = 6 (left: 1 6 6)\n6 / 1 = 6 (left: 6 6)",
                "3 + 1 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)"
            ]
        },
        "step_4": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)",
                "3 + 1 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)",
                "3 + 1 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)",
                "3 + 3 = 6 (left: 1 6 6)\n6 / 1 = 6 (left: 6 6)\n6 / 6 = 1 (left: 1)",
                "3 + 1 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n6 / 4 = 1.5 (left: 1.5)"
            ],
            "values": [
                0.003,
                60.0,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 1.1",
                "2 <- 4.1",
                "3 <- 1.1",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "3 + 1 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)",
                "3 + 1 = 4 (left: 1 4 6)",
                "3 + 1 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)",
                "3 + 1 = 4 (left: 1 4 6)",
                "3 + 3 = 6 (left: 1 6 6)"
            ]
        },
        "step_5": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 - 6 = -2 (left: -2)",
                "3 + 1 = 4 (left: 1 4 6)\n6 - 4 = 2 (left: 1 2)",
                "3 + 1 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 - 6 = -2 (left: -2)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "3 + 3 = 6 (left: 1 6 6)\n1 * 6 = 6 (left: 6 6)"
            ],
            "values": [
                0.001,
                0.003,
                0.001,
                60.0,
                2.001
            ],
            "resampled": [
                "0 <- 4.1",
                "1 <- 3.3",
                "2 <- 4.1",
                "3 <- 4.1",
                "4 <- 5.3"
            ],
            "resampled_steps": [
                "3 + 1 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)",
                "3 + 3 = 6 (left: 1 6 6)\n6 / 1 = 6 (left: 6 6)",
                "3 + 1 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)",
                "3 + 1 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)"
            ]
        },
        "step_6": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n6 / 2 = 3 (left: 3)",
                "3 + 3 = 6 (left: 1 6 6)\n6 / 1 = 6 (left: 6 6)\n6 + 6 = 12 (left: 6 12)",
                "3 + 1 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n6 / 4 = 1.5 (left: 1.5)",
                "3 + 1 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n6 / 4 = 1.5 (left: 1.5)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24 24)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.002,
                60.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 3.4",
                "2 <- 3.4",
                "3 <- 2.2",
                "4 <- 6.4"
            ],
            "resampled_steps": [
                "3 + 1 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "3 + 1 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24 24)"
            ]
        },
        "step_7": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 * 1 = 24 (left: 24)",
                "3 + 1 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24 24)\n24 * 24 = 576 (left: 576)"
            ],
            "values": [
                0.003,
                40.0,
                40.0,
                40.0,
                0.002
            ],
            "resampled": [
                "0 <- 7.3",
                "1 <- 5.3",
                "2 <- 7.1",
                "3 <- 6.4",
                "4 <- 7.2"
            ],
            "resampled_steps": [
                "3 + 1 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24 24)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 * 1 = 24 (left: 24)"
            ]
        },
        "step_8": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 * (3 + 1)) * 6 = 24",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 + 1) * 6 / 1 = 24",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24 24)\n24 - 24 = 0 (left: 0)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 * 1 = 24 (left: 24)\nAnswer: (3 + 1) * 6 = 24"
            ]
        },
        "results": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.030726
    },
    "27": {
        "input": "1 1 3 9",
        "step_1": {
            "steps": [
                "3 - 1 = 2 (left: 2 3 9)",
                "9 - 3 = 6 (left: 1 6 9)",
                "3 * 1 = 3 (left: 3 3 9)",
                "9 - 3 = 6 (left: 1 3 6)",
                "3 + 1 = 4 (left: 1 4 9)"
            ],
            "values": [
                0.002,
                2.001,
                1.002,
                3.0,
                2.001
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 1.3",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "9 - 3 = 6 (left: 1 6 9)",
                "",
                "",
                "9 - 3 = 6 (left: 1 3 6)",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "9 - 3 = 6 (left: 1 6 9)\n6 / 1 = 6 (left: 6 9)",
                "1 + 1 = 2 (left: 2 3 9)",
                "1 * 3 = 3 (left: 3 3 9)",
                "9 - 3 = 6 (left: 1 3 6)\n6 - 3 = 3 (left: 1 3)",
                "1 + 1 = 2 (left: 2 3 9)"
            ],
            "values": [
                1.002,
                1.002,
                20.002,
                20.001,
                2.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 2.3",
                "2 <- INIT",
                "3 <- 2.2",
                "4 <- 2.2"
            ],
            "resampled_steps": [
                "",
                "9 - 3 = 6 (left: 1 3 6)\n6 - 3 = 3 (left: 1 3)",
                "",
                "1 * 3 = 3 (left: 3 3 9)",
                "1 * 3 = 3 (left: 3 3 9)"
            ]
        },
        "step_3": {
            "steps": [
                "3 * 3 = 9 (left: 1 9 9)",
                "9 - 3 = 6 (left: 1 3 6)\n6 - 3 = 3 (left: 1 3)\n3 - 1 = 2 (left: 2)",
                "9 / 3 = 3 (left: 1 3 9)",
                "1 * 3 = 3 (left: 3 3 9)\n9 - 3 = 6 (left: 3 6)",
                "1 * 3 = 3 (left: 3 3 9)\n3 + 3 = 6 (left: 6 9)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                2.0,
                1.002
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 2.2",
                "2 <- 2.2",
                "3 <- 2.3",
                "4 <- 2.3"
            ],
            "resampled_steps": [
                "1 * 3 = 3 (left: 3 3 9)",
                "1 * 3 = 3 (left: 3 3 9)",
                "1 * 3 = 3 (left: 3 3 9)",
                "9 - 3 = 6 (left: 1 3 6)\n6 - 3 = 3 (left: 1 3)",
                "9 - 3 = 6 (left: 1 3 6)\n6 - 3 = 3 (left: 1 3)"
            ]
        },
        "step_4": {
            "steps": [
                "1 * 3 = 3 (left: 3 3 9)\n9 - 3 = 6 (left: 3 6)",
                "1 * 3 = 3 (left: 3 3 9)\n9 / 3 = 3 (left: 3 3)",
                "1 * 3 = 3 (left: 3 3 9)\n9 - 3 = 6 (left: 3 6)",
                "9 - 3 = 6 (left: 1 3 6)\n6 - 3 = 3 (left: 1 3)\n3 / 1 = 3 (left: 3)",
                "9 - 3 = 6 (left: 1 3 6)\n6 - 3 = 3 (left: 1 3)\n3 - 1 = 2 (left: 2)"
            ],
            "values": [
                0.002,
                1.002,
                0.002,
                0.001,
                0.002
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 2.2",
                "2 <- 2.3",
                "3 <- 2.2",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "1 * 3 = 3 (left: 3 3 9)",
                "1 * 3 = 3 (left: 3 3 9)",
                "9 - 3 = 6 (left: 1 3 6)\n6 - 3 = 3 (left: 1 3)",
                "1 * 3 = 3 (left: 3 3 9)",
                ""
            ]
        },
        "step_5": {
            "steps": [
                "1 * 3 = 3 (left: 3 3 9)\n3 * 3 = 9 (left: 9 9)",
                "1 * 3 = 3 (left: 3 3 9)\n3 * 9 = 27 (left: 3 27)",
                "9 - 3 = 6 (left: 1 3 6)\n6 - 3 = 3 (left: 1 3)\n3 / 1 = 3 (left: 1 3)",
                "1 * 3 = 3 (left: 3 3 9)\n3 * 9 = 27 (left: 3 27)",
                "1 + 1 = 2 (left: 2 3 9)"
            ],
            "values": [
                0.003,
                40.001,
                1.001,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 5.1",
                "1 <- 5.1",
                "2 <- 5.1",
                "3 <- 2.2",
                "4 <- 5.1"
            ],
            "resampled_steps": [
                "1 * 3 = 3 (left: 3 3 9)\n3 * 9 = 27 (left: 3 27)",
                "1 * 3 = 3 (left: 3 3 9)\n3 * 9 = 27 (left: 3 27)",
                "1 * 3 = 3 (left: 3 3 9)\n3 * 9 = 27 (left: 3 27)",
                "1 * 3 = 3 (left: 3 3 9)",
                "1 * 3 = 3 (left: 3 3 9)\n3 * 9 = 27 (left: 3 27)"
            ]
        },
        "step_6": {
            "steps": [
                "1 * 3 = 3 (left: 3 3 9)\n3 * 9 = 27 (left: 3 27)\n3 * 27 = 81 (left: 27 81)",
                "1 * 3 = 3 (left: 3 3 9)\n3 * 9 = 27 (left: 3 27)\n27 / 3 = 9 (left: 3 9)",
                "1 * 3 = 3 (left: 3 3 9)\n3 * 9 = 27 (left: 3 27)\n27 / 3 = 9 (left: 9)",
                "1 * 3 = 3 (left: 3 3 9)\n9 / 3 = 3 (left: 3 3)",
                "1 * 3 = 3 (left: 3 3 9)\n3 * 9 = 27 (left: 3 27)\n27 - 3 = 24 (left: 24)"
            ],
            "values": [
                0.002,
                0.002,
                0.001,
                2.001,
                40.0
            ],
            "resampled": [
                "0 <- 6.4",
                "1 <- 5.1",
                "2 <- 6.4",
                "3 <- 6.4",
                "4 <- 2.2"
            ],
            "resampled_steps": [
                "1 * 3 = 3 (left: 3 3 9)\n3 * 9 = 27 (left: 3 27)\n27 - 3 = 24 (left: 24)",
                "1 * 3 = 3 (left: 3 3 9)\n3 * 9 = 27 (left: 3 27)",
                "1 * 3 = 3 (left: 3 3 9)\n3 * 9 = 27 (left: 3 27)\n27 - 3 = 24 (left: 24)",
                "1 * 3 = 3 (left: 3 3 9)\n3 * 9 = 27 (left: 3 27)\n27 - 3 = 24 (left: 24)",
                "1 * 3 = 3 (left: 3 3 9)"
            ]
        },
        "step_7": {
            "steps": [
                "1 * 3 = 3 (left: 3 3 9)\n3 * 9 = 27 (left: 3 27)\n27 - 3 = 24 (left: 24)\nAnswer: (1 * 3) * (9 - 1) = 24",
                "1 * 3 = 3 (left: 3 3 9)\n3 * 9 = 27 (left: 3 27)\n3 * 3 = 9 (left: 9 27)",
                "1 * 3 = 3 (left: 3 3 9)\n3 * 9 = 27 (left: 3 27)\n27 - 3 = 24 (left: 24)\nAnswer: (1 * 3) * (9 - 1) = 24",
                "1 * 3 = 3 (left: 3 3 9)\n3 * 9 = 27 (left: 3 27)\n27 - 3 = 24 (left: 24)\nAnswer: (1 * 3) * (9 - 1) = 24",
                "1 * 3 = 3 (left: 3 3 9)\n3 * 9 = 27 (left: 3 27)"
            ]
        },
        "results": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ],
        "cost": 1.059446
    },
    "28": {
        "input": "7 7 12 12",
        "step_1": {
            "steps": [
                "12 + 7 = 19 (left: 7 12 19)",
                "7 + 7 = 14 (left: 12 14 12)",
                "12 + 7 = 19 (left: 7 19 12)",
                "7 * 7 = 49 (left: 12 49 12)",
                "7 / 7 = 1 (left: 1 12 12)"
            ],
            "values": [
                2.001,
                60.0,
                3.0,
                1.002,
                1.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.1",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "",
                "7 + 7 = 14 (left: 12 14 12)",
                "",
                "",
                "7 + 7 = 14 (left: 12 14 12)"
            ]
        },
        "step_2": {
            "steps": [
                "12 - 7 = 5 (left: 5 12 12)",
                "7 + 7 = 14 (left: 12 14 12)\n14 / 12 = 1.1667 (left: 12 1.1667 12)",
                "12 / 7 = 1.71 (left: 7 1.71 12)",
                "7 + 7 = 14 (left: 12 14 12)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)"
            ],
            "values": [
                2.001,
                2.001,
                3.0,
                3.0,
                60.0
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 1.2",
                "2 <- 1.1",
                "3 <- 1.1",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "12 - 7 = 5 (left: 5 12 12)",
                "12 + 7 = 19 (left: 7 19 12)",
                "7 + 7 = 14 (left: 12 14 12)",
                "7 + 7 = 14 (left: 12 14 12)",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "12 - 7 = 5 (left: 5 12 12)\n12 - 5 = 7 (left: 7 12)",
                "12 + 7 = 19 (left: 7 19 12)\n7 * 19 = 133 (left: 133 12)",
                "7 + 7 = 14 (left: 12 14 12)\n12 + 14 = 26 (left: 26 12)",
                "7 + 7 = 14 (left: 12 14 12)\n14 / 12 = 1.167 (left: 12 1.167 12)",
                "12 / 7 = 1 (left: 1 12 12)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                2.001,
                1.002
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- 1.1",
                "2 <- INIT",
                "3 <- 2.4",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)",
                "7 + 7 = 14 (left: 12 14 12)",
                "",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)",
                "7 + 7 = 14 (left: 12 14 12)"
            ]
        },
        "step_4": {
            "steps": [
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "7 + 7 = 14 (left: 12 14 12)\n12 + 14 = 26 (left: 12 26)",
                "7 * 7 = 49 (left: 12 12 49)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "7 + 7 = 14 (left: 12 14 12)\n12 - 2 = 10 (left: 10 12)"
            ],
            "values": [
                0.001,
                0.003,
                2.001,
                60.0,
                0.002
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 1.1",
                "2 <- 1.1",
                "3 <- 2.4",
                "4 <- 4.3"
            ],
            "resampled_steps": [
                "7 + 7 = 14 (left: 12 14 12)",
                "7 + 7 = 14 (left: 12 14 12)",
                "7 + 7 = 14 (left: 12 14 12)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)"
            ]
        },
        "step_5": {
            "steps": [
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 12 2)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)",
                "7 + 7 = 14 (left: 12 14 12)\n12 - 14 = -2 (left: -2 12)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (7 + 7) * (12 - 12) = 24"
            ],
            "values": [
                60.0,
                60.0,
                20.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 4.3",
                "1 <- 5.2",
                "2 <- 1.1",
                "3 <- 4.3",
                "4 <- 5.1"
            ],
            "resampled_steps": [
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "7 + 7 = 14 (left: 12 14 12)\n12 - 14 = -2 (left: -2 12)",
                "7 + 7 = 14 (left: 12 14 12)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)"
            ]
        },
        "step_6": {
            "steps": [
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (7 + 7) * (12 - 12) = 24",
                "7 + 7 = 14 (left: 12 14 12)\n12 - 14 = -2 (left: -2 12)\n12 / (-2) = -6 (left: -6)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (7 + 7) * (12 - 12) = 24",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)"
            ],
            "values": [
                60.0,
                0.0,
                60.0,
                20.002,
                0.003
            ],
            "resampled": [
                "0 <- 5.1",
                "1 <- 2.4",
                "2 <- 2.4",
                "3 <- 5.0",
                "4 <- 4.3"
            ],
            "resampled_steps": [
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 12 2)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)"
            ]
        },
        "step_7": {
            "steps": [
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 12 2)\n12 / 2 = 6 (left: 6)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (7 + 7) - 12) * 12 = 24"
            ],
            "values": [
                0.001,
                0.003,
                0.001,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 6.2",
                "1 <- 2.4",
                "2 <- 5.1",
                "3 <- 6.2",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)",
                "7 + 7 = 14 (left: 12 14 12)"
            ]
        },
        "step_8": {
            "steps": [
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "7 + 7 = 14 (left: 12 14 12)\n12 * 14 = 168 (left: 12 168)"
            ],
            "values": [
                0.002,
                0.002,
                0.003,
                20.0,
                0.003
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- 5.0",
                "2 <- 6.2",
                "3 <- 6.3",
                "4 <- 6.0"
            ],
            "resampled_steps": [
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 12 2)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (7 + 7) * (12 - 12) = 24",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (7 + 7) * (12 - 12) = 24"
            ]
        },
        "step_9": {
            "steps": [
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 12 2)\n12 + 2 = 14 (left: 2 14)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (7 + 7) * (12 - 12) = 24\nInput: 3 3 5 7\nSteps:\n5 - 3 = 2 (left: 3 2 7)\n3 * 2 = 6 (left: 6 7)\n6 * 7 = 42 (left: 42)\n42 / 2 = 21 (left: 21)\n21 - 7 = 14 (left: 14)\n14 + 3 = 17 (left: 17)\n17 + 3 = 20 (left: 20)\n20 + 5 = 25 (left: 25)\n25 - 21 = 4 (left: 4)\n4 * 24 = 96 (left: 96)\n96 / 24 = 4 (left: 4)\n4 * 6 = 24 (left: 24)\nAnswer: (((3 * 2) * 7) / 2) - 7 + 3 + 3 + 5 = 24",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (7 + 7) * (12 - 12) = 24\nInput: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n6 * 3 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: (3 * 8) + (6 * 3) = 24"
            ],
            "values": [
                0.0,
                0.003,
                0.002,
                40.0,
                20.0
            ],
            "resampled": [
                "0 <- 6.2",
                "1 <- 5.1",
                "2 <- 6.2",
                "3 <- 6.2",
                "4 <- 6.2"
            ],
            "resampled_steps": [
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)"
            ]
        },
        "step_10": {
            "steps": [
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)"
            ],
            "values": [
                0.002,
                0.001,
                40.0,
                40.0,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.0994860000000002
    },
    "29": {
        "input": "4 6 7 7",
        "step_1": {
            "steps": [
                "6 - 4 = 2 (left: 2 7 7)",
                "4 + 6 = 10 (left: 7 10 7)",
                "4 * 6 = 24 (left: 24 7 7)",
                "6 + 4 = 10 (left: 7 10 7)",
                "4 * 6 = 24 (left: 7 7 24)"
            ],
            "values": [
                3.0,
                3.0,
                22.0,
                60.0,
                3.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- 1.3",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "",
                "6 + 4 = 10 (left: 7 10 7)",
                "6 + 4 = 10 (left: 7 10 7)",
                "6 + 4 = 10 (left: 7 10 7)",
                "6 + 4 = 10 (left: 7 10 7)"
            ]
        },
        "step_2": {
            "steps": [
                "6 / 4 = 1.5 (left: 1.5 7 7)",
                "6 + 4 = 10 (left: 7 10 7)\n10 - 7 = 3 (left: 3 7)",
                "6 + 4 = 10 (left: 7 10 7)\n7 + 10 = 17 (left: 17 7)",
                "6 + 4 = 10 (left: 7 10 7)\n7 + 10 = 17 (left: 17 7)",
                "6 + 4 = 10 (left: 7 10 7)\n7 / 10 = 0.7 (left: 0.7 7)"
            ],
            "values": [
                3.0,
                0.001,
                60.0,
                60.0,
                2.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 2.3",
                "2 <- INIT",
                "3 <- 1.3",
                "4 <- 1.2"
            ],
            "resampled_steps": [
                "6 + 4 = 10 (left: 7 10 7)\n7 + 10 = 17 (left: 17 7)",
                "6 + 4 = 10 (left: 7 10 7)\n7 + 10 = 17 (left: 17 7)",
                "",
                "6 + 4 = 10 (left: 7 10 7)",
                "4 * 6 = 24 (left: 24 7 7)"
            ]
        },
        "step_3": {
            "steps": [
                "6 + 4 = 10 (left: 7 10 7)\n7 + 10 = 17 (left: 17 7)\n17 - 7 = 10 (left: 10)",
                "6 + 4 = 10 (left: 7 10 7)\n7 + 10 = 17 (left: 17 7)\n17 * 7 = 119 (left: 119)",
                "7 / 4 = 1.75 (left: 1.75 6 7)",
                "6 + 4 = 10 (left: 7 10 7)\n7 / 10 = 0.7 (left: 0.7 7)",
                "4 * 6 = 24 (left: 24 7 7)\n24 + 7 = 31 (left: 7 31)"
            ],
            "values": [
                0.001,
                0.002,
                3.0,
                2.0,
                1.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 2.3",
                "2 <- 2.3",
                "3 <- 2.2",
                "4 <- 1.2"
            ],
            "resampled_steps": [
                "",
                "6 + 4 = 10 (left: 7 10 7)\n7 + 10 = 17 (left: 17 7)",
                "6 + 4 = 10 (left: 7 10 7)\n7 + 10 = 17 (left: 17 7)",
                "6 + 4 = 10 (left: 7 10 7)\n7 + 10 = 17 (left: 17 7)",
                "4 * 6 = 24 (left: 24 7 7)"
            ]
        },
        "step_4": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7)",
                "6 + 4 = 10 (left: 7 10 7)\n7 + 10 = 17 (left: 17 7)\n17 / 7 = 2.42857142857 (left: 2.42857142857)",
                "6 + 4 = 10 (left: 7 10 7)\n7 + 10 = 17 (left: 17 7)\n17 - 7 = 10 (left: 10)",
                "6 + 4 = 10 (left: 7 10 7)\n7 + 10 = 17 (left: 17 7)\n17 / 7 = 2.428571 (left: 2.428571)",
                "4 * 6 = 24 (left: 24 7 7)\n7 - 24 = -17 (left: -17 7)"
            ],
            "values": [
                22.0,
                0.002,
                0.003,
                0.0,
                0.003
            ],
            "resampled": [
                "0 <- 2.3",
                "1 <- 2.2",
                "2 <- 1.3",
                "3 <- 2.2",
                "4 <- 2.3"
            ],
            "resampled_steps": [
                "6 + 4 = 10 (left: 7 10 7)\n7 + 10 = 17 (left: 17 7)",
                "6 + 4 = 10 (left: 7 10 7)\n7 + 10 = 17 (left: 17 7)",
                "6 + 4 = 10 (left: 7 10 7)",
                "6 + 4 = 10 (left: 7 10 7)\n7 + 10 = 17 (left: 17 7)",
                "6 + 4 = 10 (left: 7 10 7)\n7 + 10 = 17 (left: 17 7)"
            ]
        },
        "step_5": {
            "steps": [
                "6 + 4 = 10 (left: 7 10 7)\n7 + 10 = 17 (left: 17 7)\n17 - 7 = 10 (left: 10)",
                "6 + 4 = 10 (left: 7 10 7)\n7 + 10 = 17 (left: 17 7)\n17 - 7 = 10 (left: 10)",
                "6 + 4 = 10 (left: 7 10 7)\n7 * 10 = 70 (left: 70 7)",
                "6 + 4 = 10 (left: 7 10 7)\n7 + 10 = 17 (left: 17 7)\n17 - 7 = 10 (left: 10 7)",
                "6 + 4 = 10 (left: 7 10 7)\n7 + 10 = 17 (left: 17 7)\n17 + 7 = 24 (left: 24)"
            ],
            "values": [
                0.003,
                0.002,
                40.0,
                1.002,
                60.0
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 5.2",
                "2 <- 4.0",
                "3 <- 5.2",
                "4 <- 5.4"
            ],
            "resampled_steps": [
                "6 + 4 = 10 (left: 7 10 7)",
                "6 + 4 = 10 (left: 7 10 7)\n7 * 10 = 70 (left: 70 7)",
                "7 - 4 = 3 (left: 3 7 7)",
                "6 + 4 = 10 (left: 7 10 7)\n7 * 10 = 70 (left: 70 7)",
                "6 + 4 = 10 (left: 7 10 7)\n7 + 10 = 17 (left: 17 7)\n17 + 7 = 24 (left: 24)"
            ]
        },
        "step_6": {
            "steps": [
                "6 + 4 = 10 (left: 7 10 7)\n7 * 10 = 70 (left: 70 7)",
                "6 + 4 = 10 (left: 7 10 7)\n7 * 10 = 70 (left: 70 7)\n70 / 7 = 10 (left: 10)",
                "7 - 4 = 3 (left: 3 7 7)\n3 + 7 = 10 (left: 7 10)",
                "6 + 4 = 10 (left: 7 10 7)\n7 * 10 = 70 (left: 70 7)\n70 + 7 = 77 (left: 7 77)",
                "6 + 4 = 10 (left: 7 10 7)\n7 + 10 = 17 (left: 17 7)\n17 + 7 = 24 (left: 24)\nAnswer: ((6 + 4) + 7) + 7 = 24"
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ],
        "cost": 1.125029
    },
    "30": {
        "input": "1 1 2 13",
        "step_1": {
            "steps": [
                "13 - 1 = 12 (left: 1 2 12)",
                "1 + 1 = 2 (left: 2 2 13)",
                "2 + 1 = 3 (left: 1 3 13)",
                "1 * 2 = 2 (left: 2 2 13)",
                "1 + 1 = 2 (left: 2 2 13)"
            ],
            "values": [
                40.0,
                21.001,
                2.0,
                1.002,
                20.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.0",
                "3 <- 1.0",
                "4 <- 1.4"
            ],
            "resampled_steps": [
                "",
                "",
                "13 - 1 = 12 (left: 1 2 12)",
                "13 - 1 = 12 (left: 1 2 12)",
                "1 + 1 = 2 (left: 2 2 13)"
            ]
        },
        "step_2": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 13)",
                "13 - 1 = 12 (left: 1 2 12)",
                "13 - 1 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "13 - 1 = 12 (left: 1 2 12)\n12 - 1 = 11 (left: 2 11)",
                "1 + 1 = 2 (left: 2 2 13)\n13 + 2 = 15 (left: 2 15)"
            ],
            "values": [
                1.002,
                60.0,
                60.0,
                1.002,
                1.002
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 2.2",
                "2 <- 2.2",
                "3 <- 2.1",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "13 - 1 = 12 (left: 1 2 12)",
                "13 - 1 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "13 - 1 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "13 - 1 = 12 (left: 1 2 12)",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "13 - 1 = 12 (left: 1 2 12)\n12 / 1 = 12 (left: 2 12)",
                "13 - 1 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "13 - 1 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n6 - 1 = 5 (left: 5)",
                "13 - 1 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "13 - 1 = 12 (left: 1 2 12)"
            ],
            "values": [
                60.0,
                0.003,
                0.001,
                40.0,
                60.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 3.0",
                "2 <- 2.1",
                "3 <- 2.2",
                "4 <- 3.4"
            ],
            "resampled_steps": [
                "13 - 1 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "13 - 1 = 12 (left: 1 2 12)\n12 / 1 = 12 (left: 2 12)",
                "13 - 1 = 12 (left: 1 2 12)",
                "13 - 1 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "13 - 1 = 12 (left: 1 2 12)"
            ]
        },
        "step_4": {
            "steps": [
                "13 - 1 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "13 - 1 = 12 (left: 1 2 12)\n12 / 1 = 12 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)",
                "13 - 1 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)"
            ],
            "values": [
                0.003,
                0.002,
                20.002,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 3.4",
                "2 <- 3.0",
                "3 <- 2.2",
                "4 <- 3.3"
            ],
            "resampled_steps": [
                "13 - 1 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "13 - 1 = 12 (left: 1 2 12)",
                "13 - 1 = 12 (left: 1 2 12)\n12 / 1 = 12 (left: 2 12)",
                "13 - 1 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "13 - 1 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)"
            ]
        },
        "step_5": {
            "steps": [
                "13 - 1 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "13 - 1 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "13 - 1 = 12 (left: 1 2 12)\n12 / 1 = 12 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "13 - 1 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "13 - 1 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10 10)"
            ],
            "values": [
                0.002,
                60.0,
                0.002,
                0.003,
                1.001
            ],
            "resampled": [
                "0 <- 5.1",
                "1 <- 3.0",
                "2 <- 3.3",
                "3 <- 3.4",
                "4 <- 3.0"
            ],
            "resampled_steps": [
                "13 - 1 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "13 - 1 = 12 (left: 1 2 12)\n12 / 1 = 12 (left: 2 12)",
                "13 - 1 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "13 - 1 = 12 (left: 1 2 12)",
                "13 - 1 = 12 (left: 1 2 12)\n12 / 1 = 12 (left: 2 12)"
            ]
        },
        "step_6": {
            "steps": [
                "13 - 1 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)",
                "13 - 1 = 12 (left: 1 2 12)\n12 / 1 = 12 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "13 - 1 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n1 + 10 = 11 (left: 10 11)",
                "13 - 1 = 12 (left: 1 2 12)\n12 / 1 = 12 (left: 2 12)",
                "13 - 1 = 12 (left: 1 2 12)\n12 / 1 = 12 (left: 2 12)\n12 - 2 = 10 (left: 10)"
            ],
            "values": [
                0.0,
                0.002,
                2.001,
                60.0,
                0.002
            ],
            "resampled": [
                "0 <- 5.1",
                "1 <- 5.1",
                "2 <- 6.3",
                "3 <- 2.2",
                "4 <- 3.4"
            ],
            "resampled_steps": [
                "13 - 1 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "13 - 1 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "13 - 1 = 12 (left: 1 2 12)\n12 / 1 = 12 (left: 2 12)",
                "13 - 1 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "13 - 1 = 12 (left: 1 2 12)"
            ]
        },
        "step_7": {
            "steps": [
                "13 - 1 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)",
                "13 - 1 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "13 - 1 = 12 (left: 1 2 12)\n12 / 1 = 12 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "13 - 1 = 12 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)"
            ],
            "values": [
                0.001,
                20.0,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 7.1",
                "1 <- 1.0",
                "2 <- 3.4",
                "3 <- 1.0",
                "4 <- 5.1"
            ],
            "resampled_steps": [
                "13 - 1 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "13 - 1 = 12 (left: 1 2 12)",
                "13 - 1 = 12 (left: 1 2 12)",
                "13 - 1 = 12 (left: 1 2 12)",
                "13 - 1 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)"
            ]
        },
        "step_8": {
            "steps": [
                "13 - 1 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (13 - 1) * 2 * 1 = 24",
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)",
                "13 - 1 = 12 (left: 1 2 12)\n12 - 1 = 11 (left: 2 11)",
                "13 - 1 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "13 - 1 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)"
            ]
        },
        "results": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.153966
    },
    "31": {
        "input": "1 1 5 6",
        "step_1": {
            "steps": [
                "5 + 1 = 6 (left: 1 6 6)",
                "6 / 1 = 6 (left: 1 5 6)",
                "5 + 1 = 6 (left: 1 6 6)",
                "6 - 1 = 5 (left: 1 5 6)",
                "6 / 1 = 6 (left: 1 5 6)"
            ],
            "values": [
                22.0,
                22.0,
                20.002,
                41.0,
                3.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.4",
                "2 <- INIT",
                "3 <- 1.3",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "",
                "6 / 1 = 6 (left: 1 5 6)",
                "",
                "6 - 1 = 5 (left: 1 5 6)",
                "6 / 1 = 6 (left: 1 5 6)"
            ]
        },
        "step_2": {
            "steps": [
                "1 + 1 = 2 (left: 2 5 6)",
                "6 / 1 = 6 (left: 1 5 6)\n1 * 5 = 5 (left: 5 6)",
                "6 - 1 = 5 (left: 1 5 6)",
                "6 - 1 = 5 (left: 1 5 6)\n6 - 1 = 5 (left: 5 6)",
                "6 / 1 = 6 (left: 1 5 6)\n6 - 5 = 1 (left: 1 6)"
            ],
            "values": [
                2.001,
                0.002,
                3.0,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 2.4",
                "2 <- 2.4",
                "3 <- INIT",
                "4 <- 2.4"
            ],
            "resampled_steps": [
                "5 + 1 = 6 (left: 1 6 6)",
                "6 / 1 = 6 (left: 1 5 6)\n6 - 5 = 1 (left: 1 6)",
                "6 / 1 = 6 (left: 1 5 6)\n6 - 5 = 1 (left: 1 6)",
                "",
                "6 / 1 = 6 (left: 1 5 6)\n6 - 5 = 1 (left: 1 6)"
            ]
        },
        "step_3": {
            "steps": [
                "5 + 1 = 6 (left: 1 6 6)\n1 * 6 = 6 (left: 6 6)",
                "6 / 1 = 6 (left: 1 5 6)\n6 - 5 = 1 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "6 / 1 = 6 (left: 1 5 6)\n6 - 5 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "6 / 5 = 1.2 (not possible)",
                "6 / 1 = 6 (left: 1 5 6)\n6 - 5 = 1 (left: 1 6)\n1 * 6 = 6 (left: 6 6)"
            ],
            "values": [
                21.001,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 3.0",
                "2 <- 2.4",
                "3 <- 1.4",
                "4 <- 2.4"
            ],
            "resampled_steps": [
                "6 - 1 = 5 (left: 1 5 6)",
                "5 + 1 = 6 (left: 1 6 6)\n1 * 6 = 6 (left: 6 6)",
                "6 / 1 = 6 (left: 1 5 6)\n6 - 5 = 1 (left: 1 6)",
                "6 / 1 = 6 (left: 1 5 6)",
                "6 / 1 = 6 (left: 1 5 6)\n6 - 5 = 1 (left: 1 6)"
            ]
        },
        "step_4": {
            "steps": [
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)",
                "5 + 1 = 6 (left: 1 6 6)\n1 * 6 = 6 (left: 6 6)\n6 / 6 = 1 (left: 1)",
                "6 / 1 = 6 (left: 1 5 6)\n6 - 5 = 1 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "6 / 1 = 6 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)",
                "6 / 1 = 6 (left: 1 5 6)\n6 - 5 = 1 (left: 1 6)\n6 - 1 = 5 (left: 5)"
            ],
            "values": [
                21.001,
                0.003,
                0.002,
                2.001,
                0.0
            ],
            "resampled": [
                "0 <- 4.0",
                "1 <- 2.4",
                "2 <- 2.4",
                "3 <- 3.0",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)",
                "6 / 1 = 6 (left: 1 5 6)\n6 - 5 = 1 (left: 1 6)",
                "6 / 1 = 6 (left: 1 5 6)\n6 - 5 = 1 (left: 1 6)",
                "5 + 1 = 6 (left: 1 6 6)\n1 * 6 = 6 (left: 6 6)",
                "6 - 1 = 5 (left: 1 5 6)"
            ]
        },
        "step_5": {
            "steps": [
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)\n6 / 6 = 1 (left: 1)",
                "6 / 1 = 6 (left: 1 5 6)\n6 - 5 = 1 (left: 1 6)\n6 - 1 = 5 (left: 5)",
                "6 / 1 = 6 (left: 1 5 6)\n6 - 5 = 1 (left: 1 6)\n6 - 1 = 5 (left: 5)",
                "5 + 1 = 6 (left: 1 6 6)\n1 * 6 = 6 (left: 6 6)\n6 + 6 = 12 (left: 12)",
                "6 - 1 = 5 (left: 1 5 6)\n6 / 1 = 6 (left: 6 6)"
            ],
            "values": [
                0.003,
                0.001,
                0.001,
                0.0,
                21.001
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- 4.0",
                "2 <- INIT",
                "3 <- 5.4",
                "4 <- 2.4"
            ],
            "resampled_steps": [
                "6 / 1 = 6 (left: 1 5 6)\n6 - 5 = 1 (left: 1 6)",
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)",
                "",
                "6 - 1 = 5 (left: 1 5 6)\n6 / 1 = 6 (left: 6 6)",
                "6 / 1 = 6 (left: 1 5 6)\n6 - 5 = 1 (left: 1 6)"
            ]
        },
        "step_6": {
            "steps": [
                "6 / 1 = 6 (left: 1 5 6)\n6 - 5 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)\n6 / 6 = 1 (left: 1 6)",
                "1 * 6 = 6 (left: 5 6 6)",
                "6 - 1 = 5 (left: 1 5 6)\n6 / 1 = 6 (left: 6 6)\n6 - 6 = 0 (left: 0)",
                "6 / 1 = 6 (left: 1 5 6)\n6 - 5 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7)"
            ],
            "values": [
                0.003,
                60.0,
                3.0,
                0.0,
                0.003
            ],
            "resampled": [
                "0 <- 6.1",
                "1 <- 1.3",
                "2 <- 2.4",
                "3 <- 6.1",
                "4 <- 2.4"
            ],
            "resampled_steps": [
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)\n6 / 6 = 1 (left: 1 6)",
                "6 - 1 = 5 (left: 1 5 6)",
                "6 / 1 = 6 (left: 1 5 6)\n6 - 5 = 1 (left: 1 6)",
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)\n6 / 6 = 1 (left: 1 6)",
                "6 / 1 = 6 (left: 1 5 6)\n6 - 5 = 1 (left: 1 6)"
            ]
        },
        "step_7": {
            "steps": [
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)\n6 / 6 = 1 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)",
                "6 / 1 = 6 (left: 1 5 6)\n6 - 5 = 1 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)\n6 / 6 = 1 (left: 1 6)\n6 - 1 = 5 (left: 5)",
                "6 / 1 = 6 (left: 1 5 6)\n6 - 5 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7) "
            ],
            "values": [
                0.003,
                21.001,
                0.003,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 5.4",
                "1 <- 3.0",
                "2 <- 7.1",
                "3 <- 6.1",
                "4 <- 3.0"
            ],
            "resampled_steps": [
                "6 - 1 = 5 (left: 1 5 6)\n6 / 1 = 6 (left: 6 6)",
                "5 + 1 = 6 (left: 1 6 6)\n1 * 6 = 6 (left: 6 6)",
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)",
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)\n6 / 6 = 1 (left: 1 6)",
                "5 + 1 = 6 (left: 1 6 6)\n1 * 6 = 6 (left: 6 6)"
            ]
        },
        "step_8": {
            "steps": [
                "6 - 1 = 5 (left: 1 5 6)\n6 / 1 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36)",
                "5 + 1 = 6 (left: 1 6 6)\n1 * 6 = 6 (left: 6 6)\n6 / 6 = 1 (left: 1)",
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)\n6 / 6 = 1 (left: 1)",
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)\n6 / 6 = 1 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "5 + 1 = 6 (left: 1 6 6)\n1 * 6 = 6 (left: 6 6)\n6 / 6 = 1 (left: 1)"
            ],
            "values": [
                40.0,
                0.003,
                0.003,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 7.1",
                "1 <- 7.1",
                "2 <- 1.0",
                "3 <- 1.2",
                "4 <- 7.1"
            ],
            "resampled_steps": [
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)",
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)",
                "5 + 1 = 6 (left: 1 6 6)",
                "5 + 1 = 6 (left: 1 6 6)",
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)"
            ]
        },
        "step_9": {
            "steps": [
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36)",
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)\n6 + 6 = 12 (left: 12)",
                "5 + 1 = 6 (left: 1 6 6)\n1 * 6 = 6 (left: 6 6)",
                "5 + 1 = 6 (left: 1 6 6)\n6 - 1 = 5 (left: 5 6)",
                "6 - 1 = 5 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)\n6 + 6 = 12 (left: 12)"
            ],
            "values": [
                0.001,
                0.001,
                0.003,
                1.001,
                0.002
            ],
            "resampled": [
                "0 <- 8.0",
                "1 <- 5.4",
                "2 <- 8.0",
                "3 <- 1.3",
                "4 <- 8.0"
            ],
            "resampled_steps": [
                "6 - 1 = 5 (left: 1 5 6)\n6 / 1 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36)",
                "6 - 1 = 5 (left: 1 5 6)\n6 / 1 = 6 (left: 6 6)",
                "6 - 1 = 5 (left: 1 5 6)\n6 / 1 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36)",
                "6 - 1 = 5 (left: 1 5 6)",
                "6 - 1 = 5 (left: 1 5 6)\n6 / 1 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36)"
            ]
        },
        "step_10": {
            "steps": [
                "6 - 1 = 5 (left: 1 5 6)\n6 / 1 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36)\n36 + 2 = 38 (left: 38)",
                "6 - 1 = 5 (left: 1 5 6)\n6 / 1 = 6 (left: 6 6)\n6 + 6 = 12 (left: 12)",
                "6 - 1 = 5 (left: 1 5 6)\n6 / 1 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36)\n36 * 2 = 72 (left: 72)",
                "6 - 1 = 5 (left: 1 5 6)\n1 * 5 = 5 (left: 5 6)",
                "6 - 1 = 5 (left: 1 5 6)\n6 / 1 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36)\nsqrt(36) = 6 (left: 6)"
            ],
            "values": [
                0.002,
                0.001,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.191095
    },
    "32": {
        "input": "1 1 11 13",
        "step_1": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 13)",
                "11 + 2 = 13 (left: 1 13 13)",
                "11 - 1 = 10 (left: 1 10 13)",
                "11 + 1 = 12 (left: 1 12 13)",
                "1 * 1 = 1 (left: 1 11 13)"
            ],
            "values": [
                1.002,
                21.001,
                0.003,
                0.003,
                20.002
            ],
            "resampled": [
                "0 <- 1.4",
                "1 <- 1.4",
                "2 <- INIT",
                "3 <- 1.4",
                "4 <- 1.4"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 11 13)",
                "1 * 1 = 1 (left: 1 11 13)",
                "",
                "1 * 1 = 1 (left: 1 11 13)",
                "1 * 1 = 1 (left: 1 11 13)"
            ]
        },
        "step_2": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)",
                "1 * 1 = 1 (left: 1 11 13)\n11 - 1 = 10 (left: 10 13)",
                "1 + 1 = 2 (left: 2 11 13)",
                "1 * 1 = 1 (left: 1 11 13)\n1 + 11 = 12 (left: 12 13)",
                "1 * 1 = 1 (left: 1 11 13)\n13 / 11 = 1.18 (left: 1 1.18 13)"
            ],
            "values": [
                40.001,
                0.003,
                0.003,
                0.003,
                2.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.1",
                "2 <- 1.4",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "11 + 2 = 13 (left: 1 13 13)",
                "1 * 1 = 1 (left: 1 11 13)",
                "",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "11 + 2 = 13 (left: 1 13 13)",
                "11 + 2 = 13 (left: 1 13 13)\n13 / 1 = 13 (left: 1 13)",
                "1 * 1 = 1 (left: 1 11 13)\n11 - 1 = 10 (left: 10 13)",
                "1 + 1 = 2 (left: 2 11 13)",
                "13 - 11 = 2 (left: 1 1 2)"
            ],
            "values": [
                21.001,
                2.0,
                0.003,
                20.002,
                21.001
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 1.4",
                "2 <- 3.4",
                "3 <- 2.0",
                "4 <- 3.4"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)",
                "1 * 1 = 1 (left: 1 11 13)",
                "13 - 11 = 2 (left: 1 1 2)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)",
                "13 - 11 = 2 (left: 1 1 2)"
            ]
        },
        "step_4": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 + 3 = 6 (left: 6 27)",
                "1 * 1 = 1 (left: 1 11 13)\n13 / 1 = 13 (left: 1, 13)",
                "13 - 11 = 2 (left: 1 1 2)\n2 - 1 = 1 (left: 1 2)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)",
                "13 - 11 = 2 (left: 1 1 2)\n1 + 1 = 2 (left: 2 2)"
            ],
            "values": [
                0.003,
                0.001,
                20.0,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 1.4",
                "2 <- INIT",
                "3 <- 2.0",
                "4 <- 4.2"
            ],
            "resampled_steps": [
                "11 + 2 = 13 (left: 1 13 13)",
                "1 * 1 = 1 (left: 1 11 13)",
                "",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)",
                "13 - 11 = 2 (left: 1 1 2)\n2 - 1 = 1 (left: 1 2)"
            ]
        },
        "step_5": {
            "steps": [
                "11 + 2 = 13 (left: 1 13 13)\n1 + 13 = 14 (left: 13 14)",
                "1 * 1 = 1 (left: 1 11 13)\n13 - 11 = 2 (left: 1 2)",
                "11 + 1 = 12 (left: 1 12 13)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 + 3 = 6 (left: 6 27)",
                "13 - 11 = 2 (left: 1 1 2)\n2 - 1 = 1 (left: 1 2)\n2 - 1 = 1 (left: 1)"
            ],
            "values": [
                0.003,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 2.0",
                "2 <- 4.2",
                "3 <- 2.0",
                "4 <- 2.0"
            ],
            "resampled_steps": [
                "11 + 2 = 13 (left: 1 13 13)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)",
                "13 - 11 = 2 (left: 1 1 2)\n2 - 1 = 1 (left: 1 2)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)"
            ]
        },
        "step_6": {
            "steps": [
                "11 + 2 = 13 (left: 1 13 13)\n1 + 13 = 14 (left: 13 14)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n27 - 3 = 24 (left: 3 24)",
                "13 - 11 = 2 (left: 1 1 2)\n2 - 1 = 1 (left: 1 2)\n2 / 1 = 2 (left: 2)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 ^ 3 = 27 (left: 3 27)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)"
            ],
            "values": [
                0.002,
                0.003,
                0.003,
                1.002,
                20.002
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 2.0",
                "2 <- 3.0",
                "3 <- 6.4",
                "4 <- 6.4"
            ],
            "resampled_steps": [
                "11 + 2 = 13 (left: 1 13 13)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)",
                "11 + 2 = 13 (left: 1 13 13)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)"
            ]
        },
        "step_7": {
            "steps": [
                "11 + 2 = 13 (left: 1 13 13)\n13 - 1 = 12 (left: 12 13)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)",
                "11 + 2 = 13 (left: 1 13 13)\n1 * 13 = 13 (left: 13 13)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)\n27 - 9 = 18 (left: 18)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)\n27 - 9 = 18 (left: 18)"
            ],
            "values": [
                0.003,
                40.001,
                0.003,
                0.0,
                0.003
            ],
            "resampled": [
                "0 <- 3.4",
                "1 <- 7.1",
                "2 <- 6.4",
                "3 <- 7.1",
                "4 <- 6.4"
            ],
            "resampled_steps": [
                "13 - 11 = 2 (left: 1 1 2)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)"
            ]
        },
        "step_8": {
            "steps": [
                "13 - 11 = 2 (left: 1 1 2)\n1 * 1 = 1 (left: 1 2)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)\n9 + 27 = 36 (left: 36)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)\n9 * 27 = 243 (left: 243)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)\n9 * 3 = 27 (left: 27)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)\n27 - 9 = 18 (left: 18)"
            ],
            "values": [
                0.001,
                40.0,
                20.001,
                20.002,
                0.001
            ],
            "resampled": [
                "0 <- 7.1",
                "1 <- 1.4",
                "2 <- 8.2",
                "3 <- 2.0",
                "4 <- 8.2"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)",
                "1 * 1 = 1 (left: 1 11 13)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)\n9 * 27 = 243 (left: 243)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)\n9 * 27 = 243 (left: 243)"
            ]
        },
        "step_9": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)\n27 / 9 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 11 13)\n1 + 11 = 12 (left: 12 13)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)\n9 * 27 = 243 (left: 243)\n2 + 4 + 3 = 9 (left: 4 3 9)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n27 / 3 = 9 (left: 3 9)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)\n9 * 27 = 243 (left: 243)\n24 - 2 = 22 (left: 22)"
            ],
            "values": [
                0.001,
                0.003,
                22.0,
                0.003,
                0.0
            ],
            "resampled": [
                "0 <- 7.1",
                "1 <- 9.2",
                "2 <- 8.2",
                "3 <- 7.1",
                "4 <- 3.4"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)\n9 * 27 = 243 (left: 243)\n2 + 4 + 3 = 9 (left: 4 3 9)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)\n9 * 27 = 243 (left: 243)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)",
                "13 - 11 = 2 (left: 1 1 2)"
            ]
        },
        "step_10": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)\n9 * 3 = 27 (left: 27)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)\n9 * 27 = 243 (left: 243)\n2 + 4 + 3 = 9 (left: 4 3 9)\n3 + 9 = 12 (left: 4 12)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)\n9 * 27 = 243 (left: 243)\n243 / 3 = 81 (left: 81 243)",
                "1 * 1 = 1 (left: 1 11 13)\n27 / 9 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)\n9 * 3 = 27 (left: 27)",
                "13 - 11 = 2 (left: 1 1 2)\n2 / 1 = 2 (left: 1 2)"
            ],
            "values": [
                0.001,
                20.001,
                0.003,
                0.001,
                1.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.233326
    },
    "33": {
        "input": "1 6 6 12",
        "step_1": {
            "steps": [
                "12 - 6 = 6 (left: 1 6 6)",
                "6 - 1 = 5 (left: 5 6 12)",
                "12 / 6 = 2 (left: 1 6 2)",
                "12 / 6 = 2 (left: 1 2 6)",
                "1 + 6 = 7 (left: 6 7 12)"
            ],
            "values": [
                20.002,
                3.0,
                1.002,
                1.002,
                3.0
            ],
            "resampled": [
                "0 <- 1.4",
                "1 <- INIT",
                "2 <- 1.0",
                "3 <- 1.0",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "1 + 6 = 7 (left: 6 7 12)",
                "",
                "12 - 6 = 6 (left: 1 6 6)",
                "12 - 6 = 6 (left: 1 6 6)",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "1 + 6 = 7 (left: 6 7 12)\n6 - 7 = -1 (left: -1 12)",
                "12 - 6 = 6 (left: 1 6 6)",
                "12 - 6 = 6 (left: 1 6 6)\n6 * 1 = 6 (left: 6 6)",
                "12 - 6 = 6 (left: 1 6 6)\n1 * 6 = 6 (left: 6 6)",
                "12 / 6 = 2 (left: 1 6 2)"
            ],
            "values": [
                0.003,
                20.001,
                0.003,
                20.002,
                3.0
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 1.1",
                "2 <- 1.0",
                "3 <- 2.3",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "12 - 6 = 6 (left: 1 6 6)",
                "6 - 1 = 5 (left: 5 6 12)",
                "12 - 6 = 6 (left: 1 6 6)",
                "12 - 6 = 6 (left: 1 6 6)\n1 * 6 = 6 (left: 6 6)",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "12 - 6 = 6 (left: 1 6 6)\n6 - 1 = 5 (left: 5 6)",
                "6 - 1 = 5 (left: 5 6 12)\n6 - 5 = 1 (left: 1 12)",
                "12 - 6 = 6 (left: 1 6 6)\n6 - 1 = 5 (left: 5 6)",
                "12 - 6 = 6 (left: 1 6 6)\n1 * 6 = 6 (left: 6 6)\n6 / 6 = 1 (left: 1)",
                "12 - 6 = 6 (left: 1 6 6)"
            ],
            "values": [
                1.002,
                1.001,
                1.002,
                0.003,
                21.001
            ],
            "resampled": [
                "0 <- 3.4",
                "1 <- 1.0",
                "2 <- 2.1",
                "3 <- 2.4",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "12 - 6 = 6 (left: 1 6 6)",
                "12 - 6 = 6 (left: 1 6 6)",
                "12 - 6 = 6 (left: 1 6 6)",
                "12 / 6 = 2 (left: 1 6 2)",
                ""
            ]
        },
        "step_4": {
            "steps": [
                "12 - 6 = 6 (left: 1 6 6)\n1 + 6 = 7 (left: 6 7)",
                "12 - 6 = 6 (left: 1 6 6)\n1 + 6 = 7 (left: 6 7)",
                "12 - 6 = 6 (left: 1 6 6)\n6 * 1 = 6 (left: 6 6)",
                "12 / 6 = 2 (left: 1 6 2)\n1 * 6 = 6 (left: 6 2)",
                "6 / 1 = 6 (left: 6 6 12)"
            ],
            "values": [
                0.003,
                1.002,
                0.003,
                0.0,
                60.0
            ],
            "resampled": [
                "0 <- 4.4",
                "1 <- 2.1",
                "2 <- 4.4",
                "3 <- 4.4",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "6 / 1 = 6 (left: 6 6 12)",
                "12 - 6 = 6 (left: 1 6 6)",
                "6 / 1 = 6 (left: 6 6 12)",
                "6 / 1 = 6 (left: 6 6 12)",
                "12 - 6 = 6 (left: 1 6 6)"
            ]
        },
        "step_5": {
            "steps": [
                "6 / 1 = 6 (left: 6 6 12)\n12 - 6 = 6 (left: 6 6)",
                "12 - 6 = 6 (left: 1 6 6)\n1 + 6 = 7 (left: 6 7)",
                "6 / 1 = 6 (left: 6 6 12)\n6 - 6 = 0 (left: 0 12)",
                "6 / 1 = 6 (left: 6 6 12)\n6 / 6 = 1 (left: 1 12)",
                "12 - 6 = 6 (left: 1 6 6)\n6 - 1 = 5 (left: 5 6)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                1.0,
                1.002
            ],
            "resampled": [
                "0 <- 4.4",
                "1 <- 3.4",
                "2 <- 3.4",
                "3 <- 4.4",
                "4 <- 4.4"
            ],
            "resampled_steps": [
                "6 / 1 = 6 (left: 6 6 12)",
                "12 - 6 = 6 (left: 1 6 6)",
                "12 - 6 = 6 (left: 1 6 6)",
                "6 / 1 = 6 (left: 6 6 12)",
                "6 / 1 = 6 (left: 6 6 12)"
            ]
        },
        "step_6": {
            "steps": [
                "6 / 1 = 6 (left: 6 6 12)\n12 - 6 = 6 (left: 6 6)",
                "12 - 6 = 6 (left: 1 6 6)\n6 / 1 = 6 (left: 6 6)",
                "12 - 6 = 6 (left: 1 6 6)\n1 + 6 = 7 (left: 6 7)",
                "6 / 1 = 6 (left: 6 6 12)\n12 - 6 = 6 (left: 6 6)",
                "6 / 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)"
            ],
            "values": [
                1.002,
                20.001,
                0.003,
                0.003,
                20.002
            ],
            "resampled": [
                "0 <- 6.4",
                "1 <- 4.4",
                "2 <- 3.1",
                "3 <- 6.1",
                "4 <- 6.0"
            ],
            "resampled_steps": [
                "6 / 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "6 / 1 = 6 (left: 6 6 12)",
                "6 - 1 = 5 (left: 5 6 12)\n6 - 5 = 1 (left: 1 12)",
                "12 - 6 = 6 (left: 1 6 6)\n6 / 1 = 6 (left: 6 6)",
                "6 / 1 = 6 (left: 6 6 12)\n12 - 6 = 6 (left: 6 6)"
            ]
        },
        "step_7": {
            "steps": [
                "6 / 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "6 / 1 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)",
                "6 - 1 = 5 (left: 5 6 12)\n6 - 5 = 1 (left: 1 12)\n1 + 12 = 13 (left: 13)",
                "12 - 6 = 6 (left: 1 6 6)\n6 / 1 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36)",
                "6 / 1 = 6 (left: 6 6 12)\n12 - 6 = 6 (left: 6 6)\n6 - 6 = 0 (left: 0)"
            ],
            "values": [
                0.002,
                60.0,
                0.003,
                40.0,
                0.0
            ],
            "resampled": [
                "0 <- 7.1",
                "1 <- 7.1",
                "2 <- 6.1",
                "3 <- 7.1",
                "4 <- 7.3"
            ],
            "resampled_steps": [
                "6 / 1 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)",
                "6 / 1 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)",
                "12 - 6 = 6 (left: 1 6 6)\n6 / 1 = 6 (left: 6 6)",
                "6 / 1 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)",
                "12 - 6 = 6 (left: 1 6 6)\n6 / 1 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36)"
            ]
        },
        "step_8": {
            "steps": [
                "6 / 1 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 + 12 = 48 (left: 48)",
                "6 / 1 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 / 12 = 3 (left: 3)",
                "12 - 6 = 6 (left: 1 6 6)\n6 / 1 = 6 (left: 6 6)\n6 ^ 6 = 46656 (left: 6 46656)",
                "6 / 1 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 - 12 = 24 (left: 24)",
                "12 - 6 = 6 (left: 1 6 6)\n6 / 1 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36)\n36 + 2 = 38 (left: 2 36 38)"
            ],
            "values": [
                0.003,
                0.002,
                40.001,
                60.0,
                1.002
            ],
            "resampled": [
                "0 <- 7.1",
                "1 <- 8.2",
                "2 <- 7.3",
                "3 <- 8.2",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "6 / 1 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)",
                "12 - 6 = 6 (left: 1 6 6)\n6 / 1 = 6 (left: 6 6)\n6 ^ 6 = 46656 (left: 6 46656)",
                "12 - 6 = 6 (left: 1 6 6)\n6 / 1 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36)",
                "12 - 6 = 6 (left: 1 6 6)\n6 / 1 = 6 (left: 6 6)\n6 ^ 6 = 46656 (left: 6 46656)",
                "12 - 6 = 6 (left: 1 6 6)"
            ]
        },
        "step_9": {
            "steps": [
                "6 / 1 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 * 12 = 432 (left: 432)",
                "12 - 6 = 6 (left: 1 6 6)\n6 / 1 = 6 (left: 6 6)\n6 ^ 6 = 46656 (left: 6 46656)\n6 * 6 * 6 * 6 = 1296 (left: 1296 46656)",
                "12 - 6 = 6 (left: 1 6 6)\n6 / 1 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36)\n36 * 2 = 72 (left: 72)",
                "12 - 6 = 6 (left: 1 6 6)\n6 / 1 = 6 (left: 6 6)\n6 ^ 6 = 46656 (left: 6 46656)\n6 ^ 3 = 216 (left: 216 46656)",
                "12 - 6 = 6 (left: 1 6 6)\n6 / 1 = 6 (left: 6 6)"
            ],
            "values": [
                0.001,
                0.003,
                0.001,
                60.0,
                1.002
            ],
            "resampled": [
                "0 <- 4.4",
                "1 <- 9.3",
                "2 <- 6.1",
                "3 <- 6.1",
                "4 <- 9.3"
            ],
            "resampled_steps": [
                "6 / 1 = 6 (left: 6 6 12)",
                "12 - 6 = 6 (left: 1 6 6)\n6 / 1 = 6 (left: 6 6)\n6 ^ 6 = 46656 (left: 6 46656)\n6 ^ 3 = 216 (left: 216 46656)",
                "12 - 6 = 6 (left: 1 6 6)\n6 / 1 = 6 (left: 6 6)",
                "12 - 6 = 6 (left: 1 6 6)\n6 / 1 = 6 (left: 6 6)",
                "12 - 6 = 6 (left: 1 6 6)\n6 / 1 = 6 (left: 6 6)\n6 ^ 6 = 46656 (left: 6 46656)\n6 ^ 3 = 216 (left: 216 46656)"
            ]
        },
        "step_10": {
            "steps": [
                "6 / 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "12 - 6 = 6 (left: 1 6 6)\n6 / 1 = 6 (left: 6 6)\n6 ^ 6 = 46656 (left: 6 46656)\n6 ^ 3 = 216 (left: 216 46656)\n46656 - 216 = 46440 (left: 216 46440)",
                "12 - 6 = 6 (left: 1 6 6)\n6 / 1 = 6 (left: 6 6)\n6 + 6 = 12 (left: 6 12)",
                "12 - 6 = 6 (left: 1 6 6)\n6 / 1 = 6 (left: 6 6)\n6 + 6 = 12 (left: 12)",
                "12 - 6 = 6 (left: 1 6 6)\n6 / 1 = 6 (left: 6 6)\n6 ^ 6 = 46656 (left: 6 46656)\n6 ^ 3 = 216 (left: 216 46656)\n216 * 216 = 46656 (left: 46656 46872)"
            ],
            "values": [
                60.0,
                20.002,
                0.003,
                0.001,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.274769
    },
    "34": {
        "input": "4 5 12 12",
        "step_1": {
            "steps": [
                "4 + 5 = 9 (left: 9 12 12)",
                "12 - 4 = 8 (left: 8 5 12)",
                "12 / 4 = 3 (left: 3 5 12)",
                "5 * 4 = 20 (left: 20 12 12)",
                "12 - 5 = 7 (left: 4 7 12)"
            ],
            "values": [
                3.0,
                3.0,
                0.003,
                0.003,
                3.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                "",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "5 * 12 = 60 (left: 4 60 12)",
                "12 - 5 = 7 (left: 4 7 12)",
                "12 - 4 = 8 (left: 8 5 12)",
                "12 - 4 = 8 (left: 5 8 12)",
                "12 - 5 = 7 (left: 4 7 12)"
            ],
            "values": [
                2.0,
                3.0,
                2.001,
                0.003,
                2.001
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 1.4",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "12 - 5 = 7 (left: 4 7 12)",
                "12 - 5 = 7 (left: 4 7 12)",
                "",
                "",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "12 - 5 = 7 (left: 4 7 12)\n4 * 7 = 28 (left: 28 12)",
                "12 - 5 = 7 (left: 4 7 12)\n7 - 4 = 3 (left: 3 12)",
                "4 + 5 = 9 (left: 9 12 12)",
                "5 * 12 = 60 (left: 4 60 12)",
                "12 - 5 = 7 (left: 4 7 12)"
            ],
            "values": [
                0.003,
                1.001,
                22.0,
                41.0,
                2.0
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 2.2",
                "2 <- 3.2",
                "3 <- 3.3",
                "4 <- 3.3"
            ],
            "resampled_steps": [
                "4 + 5 = 9 (left: 9 12 12)",
                "12 - 4 = 8 (left: 8 5 12)",
                "4 + 5 = 9 (left: 9 12 12)",
                "5 * 12 = 60 (left: 4 60 12)",
                "5 * 12 = 60 (left: 4 60 12)"
            ]
        },
        "step_4": {
            "steps": [
                "4 + 5 = 9 (left: 9 12 12)\n12 / 9 = 1.33 (left: 1.33 12)",
                "12 - 4 = 8 (left: 8 5 12)\n5 * 12 = 60 (left: 8 60)",
                "4 + 5 = 9 (left: 9 12 12)\n9 * 12 = 108 (left: 12 108)",
                "5 * 12 = 60 (left: 4 60 12)\n60 - 4 = 56 (left: 56 12)",
                "5 * 12 = 60 (left: 4 60 12)\n4 + 56 = 60 (left: 60 12)"
            ],
            "values": [
                3.0,
                0.001,
                20.002,
                0.002,
                21.0
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 1.4",
                "2 <- 3.3",
                "3 <- 4.2",
                "4 <- 3.3"
            ],
            "resampled_steps": [
                "12 - 5 = 7 (left: 4 7 12)\n7 - 4 = 3 (left: 3 12)",
                "12 - 5 = 7 (left: 4 7 12)",
                "5 * 12 = 60 (left: 4 60 12)",
                "4 + 5 = 9 (left: 9 12 12)\n9 * 12 = 108 (left: 12 108)",
                "5 * 12 = 60 (left: 4 60 12)"
            ]
        },
        "step_5": {
            "steps": [
                "12 - 5 = 7 (left: 4 7 12)\n7 - 4 = 3 (left: 3 12)\n3 + 12 = 15 (left: 15)",
                "12 - 5 = 7 (left: 4 7 12)\n7 + 12 = 19 (left: 4 19)",
                "5 * 12 = 60 (left: 4 60 12)\n60 - 12 = 48 (left: 4 48)",
                "4 + 5 = 9 (left: 9 12 12)\n9 * 12 = 108 (left: 12 108)\n12 * 108 = 1296 (left: 108 1296)",
                "5 * 12 = 60 (left: 4 60 12)\n60 / 12 = 5 (left: 5 4)"
            ],
            "values": [
                0.001,
                0.003,
                1.002,
                0.001,
                3.0
            ],
            "resampled": [
                "0 <- 3.3",
                "1 <- 3.3",
                "2 <- 5.4",
                "3 <- 3.3",
                "4 <- 3.3"
            ],
            "resampled_steps": [
                "5 * 12 = 60 (left: 4 60 12)",
                "5 * 12 = 60 (left: 4 60 12)",
                "5 * 12 = 60 (left: 4 60 12)\n60 / 12 = 5 (left: 5 4)",
                "5 * 12 = 60 (left: 4 60 12)",
                "5 * 12 = 60 (left: 4 60 12)"
            ]
        },
        "step_6": {
            "steps": [
                "5 * 12 = 60 (left: 4 60 12)\n60 - 12 = 48 (left: 4 48)",
                "5 * 12 = 60 (left: 4 60 12)\n4 + 12 = 16 (left: 16 60)",
                "5 * 12 = 60 (left: 4 60 12)\n60 / 12 = 5 (left: 5 4)\n5 - 4 = 1 (left: 1 4)",
                "5 * 12 = 60 (left: 4 60 12)\n60 / 4 = 15 (left: 15 12)",
                "5 * 12 = 60 (left: 4 60 12)\n60 / 4 = 15 (left: 15 12)"
            ],
            "values": [
                1.002,
                1.002,
                40.0,
                0.001,
                0.003
            ],
            "resampled": [
                "0 <- 6.2",
                "1 <- 6.2",
                "2 <- 1.0",
                "3 <- 3.3",
                "4 <- 3.2"
            ],
            "resampled_steps": [
                "5 * 12 = 60 (left: 4 60 12)\n60 / 12 = 5 (left: 5 4)\n5 - 4 = 1 (left: 1 4)",
                "5 * 12 = 60 (left: 4 60 12)\n60 / 12 = 5 (left: 5 4)\n5 - 4 = 1 (left: 1 4)",
                "4 + 5 = 9 (left: 9 12 12)",
                "5 * 12 = 60 (left: 4 60 12)",
                "4 + 5 = 9 (left: 9 12 12)"
            ]
        },
        "step_7": {
            "steps": [
                "5 * 12 = 60 (left: 4 60 12)\n60 / 12 = 5 (left: 5 4)\n5 - 4 = 1 (left: 1 4)\n4 - 1 = 3 (left: 3 4)",
                "5 * 12 = 60 (left: 4 60 12)\n60 / 12 = 5 (left: 5 4)\n5 - 4 = 1 (left: 1 4)\n4 - 1 = 3 (left: 3)",
                "4 + 5 = 9 (left: 9 12 12)\n12 / 9 = 1.33 (left: 1.33 12)",
                "5 * 12 = 60 (left: 4 60 12)\n4 * 60 = 240 (left: 240 12)",
                "4 + 5 = 9 (left: 9 12 12)\n9 + 12 = 21 (left: 12 21)"
            ],
            "values": [
                1.001,
                0.002,
                1.002,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 7.3",
                "2 <- 1.4",
                "3 <- 4.4",
                "4 <- 7.3"
            ],
            "resampled_steps": [
                "4 + 5 = 9 (left: 9 12 12)",
                "5 * 12 = 60 (left: 4 60 12)\n4 * 60 = 240 (left: 240 12)",
                "12 - 5 = 7 (left: 4 7 12)",
                "5 * 12 = 60 (left: 4 60 12)\n4 + 56 = 60 (left: 60 12)",
                "5 * 12 = 60 (left: 4 60 12)\n4 * 60 = 240 (left: 240 12)"
            ]
        },
        "step_8": {
            "steps": [
                "4 + 5 = 9 (left: 9 12 12)\n12 - 9 = 3 (left: 3 12)",
                "5 * 12 = 60 (left: 4 60 12)\n4 * 60 = 240 (left: 240 12)\n240 * 12 = 2880 (left: 2880)",
                "12 - 5 = 7 (left: 4 7 12)\n12 / 4 = 3 (left: 3 7)",
                "5 * 12 = 60 (left: 4 60 12)\n4 + 56 = 60 (left: 60 12)\n60 / 12 = 5 (left: 5)",
                "5 * 12 = 60 (left: 4 60 12)\n4 * 60 = 240 (left: 240 12)\n240 + 12 = 252 (left: 252)"
            ],
            "values": [
                0.003,
                0.002,
                0.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 5.4",
                "1 <- 3.3",
                "2 <- 6.2",
                "3 <- 3.2",
                "4 <- 7.3"
            ],
            "resampled_steps": [
                "5 * 12 = 60 (left: 4 60 12)\n60 / 12 = 5 (left: 5 4)",
                "5 * 12 = 60 (left: 4 60 12)",
                "5 * 12 = 60 (left: 4 60 12)\n60 / 12 = 5 (left: 5 4)\n5 - 4 = 1 (left: 1 4)",
                "4 + 5 = 9 (left: 9 12 12)",
                "5 * 12 = 60 (left: 4 60 12)\n4 * 60 = 240 (left: 240 12)"
            ]
        },
        "step_9": {
            "steps": [
                "5 * 12 = 60 (left: 4 60 12)\n60 / 12 = 5 (left: 5 4)\n5 / 4 = 1.25 (left: 1.25)",
                "5 * 12 = 60 (left: 4 60 12)\n12 * 4 = 48 (left: 48 12)",
                "5 * 12 = 60 (left: 4 60 12)\n60 / 12 = 5 (left: 5 4)\n5 - 4 = 1 (left: 1 4)\n1 * 4 = 4 (left: 4)",
                "4 + 5 = 9 (left: 9 12 12)\n12 / 3 = 4 (left: 4 12)",
                "5 * 12 = 60 (left: 4 60 12)\n4 * 60 = 240 (left: 240 12)\n240 + 12 = 252 (left: 252)"
            ],
            "values": [
                0.003,
                1.002,
                0.003,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 7.3",
                "2 <- 3.2",
                "3 <- 6.2",
                "4 <- 3.3"
            ],
            "resampled_steps": [
                "4 + 5 = 9 (left: 9 12 12)\n9 * 12 = 108 (left: 12 108)",
                "5 * 12 = 60 (left: 4 60 12)\n4 * 60 = 240 (left: 240 12)",
                "4 + 5 = 9 (left: 9 12 12)",
                "5 * 12 = 60 (left: 4 60 12)\n60 / 12 = 5 (left: 5 4)\n5 - 4 = 1 (left: 1 4)",
                "5 * 12 = 60 (left: 4 60 12)"
            ]
        },
        "step_10": {
            "steps": [
                "4 + 5 = 9 (left: 9 12 12)\n9 * 12 = 108 (left: 12 108)\n108 - 12 = 96 (left: 96)",
                "5 * 12 = 60 (left: 4 60 12)\n4 * 60 = 240 (left: 240 12)\n240 + 12 = 252 (left: 252)",
                "4 + 5 = 9 (left: 9 12 12)\n12 / 9 = 1.33 (left: 1.33 12)",
                "5 * 12 = 60 (left: 4 60 12)\n60 / 12 = 5 (left: 5 4)\n5 - 4 = 1 (left: 1 4)\n1 + 4 = 5 (left: 5)",
                "5 * 12 = 60 (left: 4 60 12)\n60 / 4 = 15 (left: 15 12)"
            ],
            "values": [
                0.001,
                0.002,
                0.003,
                0.002,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.318546
    },
    "35": {
        "input": "4 6 13 13",
        "step_1": {
            "steps": [
                "6 - 4 = 2 (left: 2 6 13)",
                "6 / 4 = 1.5 (left: 1.5 13 13)",
                "13 - 6 = 7 (left: 4 7 13)",
                "13 - 4 = 9 (left: 6 9 13)",
                "6 / 4 = 1.5 (left: 1.5 13 13)"
            ],
            "values": [
                0.003,
                2.001,
                22.0,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- INIT",
                "2 <- 1.2",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "13 - 4 = 9 (left: 6 9 13)",
                "",
                "13 - 6 = 7 (left: 4 7 13)",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "13 - 4 = 9 (left: 6 9 13)\n6 * 9 = 54 (left: 54 13)",
                "13 - 4 = 9 (left: 6 9 13)",
                "13 - 6 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)",
                "4 + 6 = 10 (left: 10 13 13)",
                "4 * 6 = 24 (left: 24 13 13)"
            ],
            "values": [
                0.003,
                3.0,
                60.0,
                0.003,
                40.001
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 2.4",
                "2 <- 2.1",
                "3 <- 2.2",
                "4 <- 2.2"
            ],
            "resampled_steps": [
                "13 - 6 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)",
                "4 * 6 = 24 (left: 24 13 13)",
                "13 - 4 = 9 (left: 6 9 13)",
                "13 - 6 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)",
                "13 - 6 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)"
            ]
        },
        "step_3": {
            "steps": [
                "13 - 6 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 + 6 = 10 (left: 10)",
                "4 * 6 = 24 (left: 24 13 13)\n13 / 24 = 0.54 (left: 0.54 13)",
                "13 - 4 = 9 (left: 6 9 13)\n13 - 6 = 7 (left: 6 7)",
                "13 - 6 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "13 - 6 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n6 / 4 = 1.5 (left: 1.5)"
            ],
            "values": [
                0.001,
                1.001,
                2.001,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.2",
                "2 <- 1.2",
                "3 <- 3.3",
                "4 <- 3.3"
            ],
            "resampled_steps": [
                "",
                "13 - 6 = 7 (left: 4 7 13)",
                "13 - 6 = 7 (left: 4 7 13)",
                "13 - 6 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "13 - 6 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)"
            ]
        },
        "step_4": {
            "steps": [
                "13 + 4 = 17 (left: 6 13 17)",
                "13 - 6 = 7 (left: 4 7 13)\n4 * 7 = 28 (left: 28 13)",
                "13 - 6 = 7 (left: 4 7 13)\n13 - 4 = 9 (left: 7 9)",
                "13 - 6 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * (13 - (13 - 6)) = 24",
                "13 - 6 = 7 (left: 4 7 13)\n13 - 7 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * (13 - (13 - 6)) = 24"
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            }
        ],
        "cost": 1.337444
    },
    "36": {
        "input": "12 12 12 12",
        "step_1": {
            "steps": [
                "12 * 12 = 144 (left: 12 144 12)",
                "12 * 12 = 144 (left: 12 144 12)",
                "12 * 12 = 144 (left: 12 144 12)",
                "12 - 12 = 0 (left: 0 12 12)",
                "12 + 12 = 24 (left: 12 24 12)"
            ],
            "values": [
                20.002,
                40.001,
                60.0,
                60.0,
                21.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.1",
                "2 <- 1.2",
                "3 <- 1.3",
                "4 <- 1.4"
            ],
            "resampled_steps": [
                "",
                "12 * 12 = 144 (left: 12 144 12)",
                "12 * 12 = 144 (left: 12 144 12)",
                "12 - 12 = 0 (left: 0 12 12)",
                "12 + 12 = 24 (left: 12 24 12)"
            ]
        },
        "step_2": {
            "steps": [
                "12 / 12 = 1 (left: 1 12 12)",
                "12 * 12 = 144 (left: 12 144 12)\n12 * 12 = 144 (left: 144 12)",
                "12 * 12 = 144 (left: 12 144 12)\n12 + 12 = 24 (left: 24 12)",
                "12 - 12 = 0 (left: 0 12 12)\n12 - 12 = 0 (left: 0 12 0)",
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)"
            ],
            "values": [
                20.001,
                60.0,
                20.001,
                2.001,
                60.0
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- 1.3",
                "2 <- 2.4",
                "3 <- INIT",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)",
                "12 - 12 = 0 (left: 0 12 12)",
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)",
                "",
                "12 - 12 = 0 (left: 0 12 12)"
            ]
        },
        "step_3": {
            "steps": [
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)\n24 / 12 = 2 (left: 2 12)",
                "12 - 12 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)",
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)\n12 / 12 = 1 (left: 1 12 12)",
                "12 * 12 = 144 (left: 12 144 12)",
                "12 - 12 = 0 (left: 0 12 12)\n0 * 12 = 0 (left: 0 12)"
            ],
            "values": [
                40.001,
                40.001,
                20.002,
                41.0,
                20.001
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 2.4",
                "2 <- 2.2",
                "3 <- 2.4",
                "4 <- 2.4"
            ],
            "resampled_steps": [
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)\n24 / 12 = 2 (left: 2 12)",
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)",
                "12 * 12 = 144 (left: 12 144 12)\n12 + 12 = 24 (left: 24 12)",
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)",
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)"
            ]
        },
        "step_4": {
            "steps": [
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)\n24 / 12 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)\n12 / 12 = 1 (left: 1)",
                "12 * 12 = 144 (left: 12 144 12)\n12 + 12 = 24 (left: 24 12)\n24 - 12 = 12 (left: 12)",
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)\n12 + 12 = 24 (left: 24 24)",
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 24 12)"
            ],
            "values": [
                0.003,
                0.003,
                0.001,
                40.001,
                40.0
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 2.4",
                "2 <- 2.2",
                "3 <- 2.0",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "12 * 12 = 144 (left: 12 144 12)\n12 * 12 = 144 (left: 144 12)",
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)",
                "12 * 12 = 144 (left: 12 144 12)\n12 + 12 = 24 (left: 24 12)",
                "12 / 12 = 1 (left: 1 12 12)",
                "12 * 12 = 144 (left: 12 144 12)\n12 * 12 = 144 (left: 144 12)"
            ]
        },
        "step_5": {
            "steps": [
                "12 * 12 = 144 (left: 12 144 12)\n12 * 12 = 144 (left: 144 12)\n144 / 12 = 12 (left: 12 12)",
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)\n12 / 12 = 1 (left: 1 12)",
                "12 * 12 = 144 (left: 12 144 12)\n12 + 12 = 24 (left: 24 12)\n24 * 12 = 288 (left: 288)",
                "12 / 12 = 1 (left: 1 12 12)\n12 - 1 = 11 (left: 11 12)",
                "12 * 12 = 144 (left: 12 144 12)\n12 * 12 = 144 (left: 144 12)\n144 - 12 = 132 (left: 132)"
            ],
            "values": [
                60.0,
                1.001,
                0.001,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 4.4",
                "1 <- 5.0",
                "2 <- 3.0",
                "3 <- 5.0",
                "4 <- 2.2"
            ],
            "resampled_steps": [
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 24 12)",
                "12 * 12 = 144 (left: 12 144 12)\n12 * 12 = 144 (left: 144 12)\n144 / 12 = 12 (left: 12 12)",
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)\n24 / 12 = 2 (left: 2 12)",
                "12 * 12 = 144 (left: 12 144 12)\n12 * 12 = 144 (left: 144 12)\n144 / 12 = 12 (left: 12 12)",
                "12 * 12 = 144 (left: 12 144 12)\n12 + 12 = 24 (left: 24 12)"
            ]
        },
        "step_6": {
            "steps": [
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 24 12)\n24 * 12 = 288 (left: 288)",
                "12 * 12 = 144 (left: 12 144 12)\n12 * 12 = 144 (left: 144 12)\n144 / 12 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)\n24 / 12 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "12 * 12 = 144 (left: 12 144 12)\n12 * 12 = 144 (left: 144 12)\n144 / 12 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "12 * 12 = 144 (left: 12 144 12)\n12 + 12 = 24 (left: 24 12)\n24 * 12 = 288 (left: 288)"
            ],
            "values": [
                0.002,
                0.001,
                0.003,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 5.0",
                "1 <- 2.4",
                "2 <- 5.0",
                "3 <- 1.3",
                "4 <- 3.2"
            ],
            "resampled_steps": [
                "12 * 12 = 144 (left: 12 144 12)\n12 * 12 = 144 (left: 144 12)\n144 / 12 = 12 (left: 12 12)",
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)",
                "12 * 12 = 144 (left: 12 144 12)\n12 * 12 = 144 (left: 144 12)\n144 / 12 = 12 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12)",
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)\n12 / 12 = 1 (left: 1 12 12)"
            ]
        },
        "step_7": {
            "steps": [
                "12 * 12 = 144 (left: 12 144 12)\n12 * 12 = 144 (left: 144 12)\n144 / 12 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)",
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)\n24 / 12 = 2 (left: 12 2)",
                "12 * 12 = 144 (left: 12 144 12)\n12 * 12 = 144 (left: 144 12)\n144 / 12 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "12 - 12 = 0 (left: 0 12 12)\n12 - 12 = 0 (left: 0 12)",
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)\n12 / 12 = 1 (left: 1 12 12)\n12 - 12 = 0 (left: 1 0)"
            ],
            "values": [
                0.003,
                60.0,
                0.0,
                20.002,
                0.003
            ],
            "resampled": [
                "0 <- 4.3",
                "1 <- 2.4",
                "2 <- 7.3",
                "3 <- 3.3",
                "4 <- 7.3"
            ],
            "resampled_steps": [
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)\n12 + 12 = 24 (left: 24 24)",
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)",
                "12 - 12 = 0 (left: 0 12 12)\n12 - 12 = 0 (left: 0 12)",
                "12 * 12 = 144 (left: 12 144 12)",
                "12 - 12 = 0 (left: 0 12 12)\n12 - 12 = 0 (left: 0 12)"
            ]
        },
        "step_8": {
            "steps": [
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)\n12 + 12 = 24 (left: 24 24)\n24 / 24 = 1 (left: 1)",
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)\n12 - 2 = 10 (left: 10 12)",
                "12 - 12 = 0 (left: 0 12 12)\n12 - 12 = 0 (left: 0 12)\n0 * 12 = 0 (left: 0)",
                "12 * 12 = 144 (left: 12 144 12)\n12 / 12 = 1 (left: 144 1)",
                "12 - 12 = 0 (left: 0 12 12)\n12 - 12 = 0 (left: 0 12)\n12 - 0 = 12 (left: 12)"
            ],
            "values": [
                0.003,
                0.001,
                20.001,
                60.0,
                0.002
            ],
            "resampled": [
                "0 <- 7.1",
                "1 <- 3.3",
                "2 <- 3.1",
                "3 <- 4.4",
                "4 <- 4.3"
            ],
            "resampled_steps": [
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)\n24 / 12 = 2 (left: 12 2)",
                "12 * 12 = 144 (left: 12 144 12)",
                "12 - 12 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)",
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 24 12)",
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)\n12 + 12 = 24 (left: 24 24)"
            ]
        },
        "step_9": {
            "steps": [
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)\n24 / 12 = 2 (left: 12 2)\n12 * 2 = 24 (left: 2 24)",
                "12 * 12 = 144 (left: 12 144 12)\n12 + 12 = 24 (left: 24 12)",
                "12 - 12 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)",
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 24 12)\n24 - 12 = 12 (left: 12 12)",
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)\n12 + 12 = 24 (left: 24 24)\n24 * 24 = 576 (left: 576)"
            ],
            "values": [
                0.003,
                60.0,
                0.003,
                60.0,
                0.002
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 4.3",
                "2 <- 9.1",
                "3 <- 8.3",
                "4 <- 3.1"
            ],
            "resampled_steps": [
                "12 / 12 = 1 (left: 1 12 12)",
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)\n12 + 12 = 24 (left: 24 24)",
                "12 * 12 = 144 (left: 12 144 12)\n12 + 12 = 24 (left: 24 12)",
                "12 * 12 = 144 (left: 12 144 12)\n12 / 12 = 1 (left: 144 1)",
                "12 - 12 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)"
            ]
        },
        "step_10": {
            "steps": [
                "12 / 12 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "12 + 12 = 24 (left: 12 24 12)\n12 * 2 = 24 (left: 12 24 12)\n12 + 12 = 24 (left: 24 24)\n24 - 24 = 0 (left: 0)",
                "12 * 12 = 144 (left: 12 144 12)\n12 + 12 = 24 (left: 24 12)\n24 / 12 = 2 (left: 2)",
                "12 * 12 = 144 (left: 12 144 12)\n12 / 12 = 1 (left: 144 1)\n144 - 1 = 143 (left: 143 1)",
                "12 - 12 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)"
            ],
            "values": [
                60.0,
                0.001,
                0.001,
                2.0,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.373853
    },
    "37": {
        "input": "2 11 11 12",
        "step_1": {
            "steps": [
                "12 - 2 = 10 (left: 11 11 10)",
                "11 - 2 = 9 (left: 9 11 12)",
                "2 + 11 = 13 (left: 11 13 12)",
                "11 - 2 = 9 (left: 9 11 12)",
                "2 + 11 = 13 (left: 11 13 12)"
            ],
            "values": [
                0.003,
                21.001,
                60.0,
                20.002,
                41.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.1",
                "3 <- INIT",
                "4 <- 1.4"
            ],
            "resampled_steps": [
                "",
                "",
                "11 - 2 = 9 (left: 9 11 12)",
                "",
                "2 + 11 = 13 (left: 11 13 12)"
            ]
        },
        "step_2": {
            "steps": [
                "2 + 11 = 13 (left: 11 13 12)",
                "11 - 2 = 9 (left: 9 11 12)",
                "11 - 2 = 9 (left: 9 11 12)\n9 + 11 = 20 (left: 20 12)",
                "11 + 2 = 13 (left: 11 13 12)",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)"
            ],
            "values": [
                60.0,
                0.003,
                0.003,
                41.0,
                60.0
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 2.4",
                "2 <- 1.2",
                "3 <- 1.2",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "2 + 11 = 13 (left: 11 13 12)",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)",
                "2 + 11 = 13 (left: 11 13 12)",
                "2 + 11 = 13 (left: 11 13 12)",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "2 + 11 = 13 (left: 11 13 12)\n11 * 13 = 143 (left: 143 12)",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "2 + 11 = 13 (left: 11 13 12)\n12 * 11 = 132 (left: 13 132)",
                "2 + 11 = 13 (left: 11 13 12)\n11 * 13 = 143 (left: 143 12)",
                "11 / 2 = 5.5 (left: 5.5 11 12)"
            ],
            "values": [
                0.003,
                0.003,
                20.002,
                21.0,
                2.001
            ],
            "resampled": [
                "0 <- 3.3",
                "1 <- 1.2",
                "2 <- 3.3",
                "3 <- 1.2",
                "4 <- 2.4"
            ],
            "resampled_steps": [
                "2 + 11 = 13 (left: 11 13 12)\n11 * 13 = 143 (left: 143 12)",
                "2 + 11 = 13 (left: 11 13 12)",
                "2 + 11 = 13 (left: 11 13 12)\n11 * 13 = 143 (left: 143 12)",
                "2 + 11 = 13 (left: 11 13 12)",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)"
            ]
        },
        "step_4": {
            "steps": [
                "2 + 11 = 13 (left: 11 13 12)\n11 * 13 = 143 (left: 143 12)\n143 * 12 = 1716 (left: 1716)",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 12 = 1 (left: 1 12)",
                "2 + 11 = 13 (left: 11 13 12)\n11 * 13 = 143 (left: 143 12)\n12 / 143 = 0.08391608391608392 (left: 0.08391608391608392)",
                "2 + 11 = 13 (left: 11 13 12)\n11 - 13 = -2 (left: -2 12)",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10 12)"
            ],
            "values": [
                0.002,
                0.0,
                0.001,
                2.0,
                1.002
            ],
            "resampled": [
                "0 <- 1.4",
                "1 <- 3.3",
                "2 <- 3.2",
                "3 <- 1.4",
                "4 <- 3.3"
            ],
            "resampled_steps": [
                "2 + 11 = 13 (left: 11 13 12)",
                "2 + 11 = 13 (left: 11 13 12)\n11 * 13 = 143 (left: 143 12)",
                "2 + 11 = 13 (left: 11 13 12)\n12 * 11 = 132 (left: 13 132)",
                "2 + 11 = 13 (left: 11 13 12)",
                "2 + 11 = 13 (left: 11 13 12)\n11 * 13 = 143 (left: 143 12)"
            ]
        },
        "step_5": {
            "steps": [
                "2 + 11 = 13 (left: 11 13 12)\n13 / 11 = 1.1818 (left: 1.1818 12)",
                "2 + 11 = 13 (left: 11 13 12)\n11 * 13 = 143 (left: 143 12)\n143 * 12 = 1716 (left: 1716)",
                "2 + 11 = 13 (left: 11 13 12)\n12 * 11 = 132 (left: 13 132)\n13 * 132 = 1716 (left: 132 1716)",
                "2 + 11 = 13 (left: 11 13 12)\n12 * 13 = 156 (left: 156)",
                "2 + 11 = 13 (left: 11 13 12)\n11 * 13 = 143 (left: 143 12)\n143 / 12 = 11.9167 (left: 11.9167)"
            ],
            "values": [
                3.0,
                0.003,
                1.002,
                0.003,
                0.0
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 2.3",
                "2 <- 1.2",
                "3 <- 2.4",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "2 + 11 = 13 (left: 11 13 12)\n12 * 11 = 132 (left: 13 132)",
                "11 + 2 = 13 (left: 11 13 12)",
                "2 + 11 = 13 (left: 11 13 12)",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)",
                "11 - 2 = 9 (left: 9 11 12)"
            ]
        },
        "step_6": {
            "steps": [
                "2 + 11 = 13 (left: 11 13 12)\n12 * 11 = 132 (left: 13 132)\n13 + 132 = 145 (left: 132 145)",
                "11 + 2 = 13 (left: 11 13 12)\n11 / 13 = 0.84615384615 (left: 0.84615384615 12)",
                "2 + 11 = 13 (left: 11 13 12)\n11 + 13 = 24 (left: 24 12)",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "11 - 2 = 9 (left: 9 11 12)\n9 / 11 = 0.81 (left: 0.81 12)"
            ],
            "values": [
                0.003,
                1.001,
                40.0,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 6.2",
                "1 <- 2.4",
                "2 <- 2.4",
                "3 <- 3.2",
                "4 <- 2.0"
            ],
            "resampled_steps": [
                "2 + 11 = 13 (left: 11 13 12)\n11 + 13 = 24 (left: 24 12)",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)",
                "2 + 11 = 13 (left: 11 13 12)\n12 * 11 = 132 (left: 13 132)",
                "2 + 11 = 13 (left: 11 13 12)"
            ]
        },
        "step_7": {
            "steps": [
                "2 + 11 = 13 (left: 11 13 12)\n11 + 13 = 24 (left: 24 12)\n24 + 12 = 36 (left: 36)",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "2 + 11 = 13 (left: 11 13 12)\n12 * 11 = 132 (left: 13 132)\n132 / 13 = 10 (left: 10)",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)"
            ],
            "values": [
                20.0,
                0.003,
                40.0,
                0.002,
                60.0
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 1.2",
                "2 <- 7.4",
                "3 <- 7.4",
                "4 <- 2.4"
            ],
            "resampled_steps": [
                "2 + 11 = 13 (left: 11 13 12)",
                "2 + 11 = 13 (left: 11 13 12)",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)"
            ]
        },
        "step_8": {
            "steps": [
                "2 + 11 = 13 (left: 11 13 12)\n11 + 13 = 24 (left: 24 12)",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n12 - 12 = 0 (left: 0)"
            ],
            "values": [
                21.001,
                60.0,
                0.002,
                0.001,
                0.0
            ],
            "resampled": [
                "0 <- 7.4",
                "1 <- 7.0",
                "2 <- 8.0",
                "3 <- 8.1",
                "4 <- 7.2"
            ],
            "resampled_steps": [
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)",
                "2 + 11 = 13 (left: 11 13 12)\n11 + 13 = 24 (left: 24 12)\n24 + 12 = 36 (left: 36)",
                "2 + 11 = 13 (left: 11 13 12)\n11 + 13 = 24 (left: 24 12)",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)"
            ]
        },
        "step_9": {
            "steps": [
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "2 + 11 = 13 (left: 11 13 12)\n11 + 13 = 24 (left: 24 12)\n24 + 12 = 36 (left: 36)\n36 - 1 = 35 ",
                "2 + 11 = 13 (left: 11 13 12)\n11 + 13 = 24 (left: 24 12)\n24 / 2 = 12 (left: 12)",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (2 + 11) * (11 - 12) = 24"
            ],
            "values": [
                0.003,
                0.003,
                0.002,
                20.002,
                60.0
            ],
            "resampled": [
                "0 <- 8.0",
                "1 <- 9.4",
                "2 <- 9.4",
                "3 <- 8.1",
                "4 <- 9.4"
            ],
            "resampled_steps": [
                "2 + 11 = 13 (left: 11 13 12)\n11 + 13 = 24 (left: 24 12)",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (2 + 11) * (11 - 12) = 24",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (2 + 11) * (11 - 12) = 24",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (2 + 11) * (11 - 12) = 24"
            ]
        },
        "step_10": {
            "steps": [
                "2 + 11 = 13 (left: 11 13 12)\n11 + 13 = 24 (left: 24 12)\n24 / 12 = 2 (left: 2)",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (2 + 11) * (11 - 12) = 24\nInput: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n9 * 1 = 9 (left: 9)\nAnswer: (3 * 3) - 8 + 9 = 24",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (2 + 11) * (11 - 12) = 24\nInput: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n9 * 1 = 9 (left: 9)\nAnswer: (3 * 3) * (8 - 9) = 24",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "2 + 11 = 13 (left: 11 13 12)\n13 - 11 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (2 + 11) * (11 - 12) = 24\nInput: 3 3 7 7\nSteps:\n3 * 7 = 21 (left: 3 7 21)\n7 - 3 = 4 (left: 4 21)\n21 - 4 = 17 (left: 17)\n17 + 7 = 24 (left: 24)\nAnswer: ((3 * 7) - 3) + 7 = 24"
            ],
            "values": [
                0.003,
                40.0,
                40.0,
                0.002,
                20.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.4165280000000002
    },
    "38": {
        "input": "4 4 4 6",
        "step_1": {
            "steps": [
                "6 + 4 = 10 (left: 4 4 10)",
                "4 - 4 = 0 (left: 0 4 6)",
                "6 - 4 = 2 (left: 4 4 2)",
                "4 - 4 = 0 (left: 0 4 6)",
                "6 - 4 = 2 (left: 4 4 2)"
            ],
            "values": [
                20.0,
                21.001,
                1.002,
                40.001,
                1.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- INIT",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "",
                "4 - 4 = 0 (left: 0 4 6)",
                "4 - 4 = 0 (left: 0 4 6)",
                "",
                "6 + 4 = 10 (left: 4 4 10)"
            ]
        },
        "step_2": {
            "steps": [
                "6 + 4 = 10 (left: 4 4 10)",
                "4 - 4 = 0 (left: 0 4 6)\n0 + 4 = 4 (left: 4 6)",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)",
                "6 - 4 = 2 (left: 4 4 2)",
                "6 + 4 = 10 (left: 4 4 10)\n4 / 4 = 1 (left: 1 10)"
            ],
            "values": [
                20.0,
                60.0,
                60.0,
                22.0,
                60.0
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 2.3",
                "2 <- 2.4",
                "3 <- 2.2",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "4 - 4 = 0 (left: 0 4 6)\n0 + 4 = 4 (left: 4 6)",
                "6 - 4 = 2 (left: 4 4 2)",
                "6 + 4 = 10 (left: 4 4 10)\n4 / 4 = 1 (left: 1 10)",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)",
                "6 + 4 = 10 (left: 4 4 10)"
            ]
        },
        "step_3": {
            "steps": [
                "4 - 4 = 0 (left: 0 4 6)\n0 + 4 = 4 (left: 4 6)\nInput: 10 5 3",
                "6 - 4 = 2 (left: 4 4 2)\n4 + 4 = 8 (left: 8 2)",
                "6 + 4 = 10 (left: 4 4 10)\n4 / 4 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10 10)",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)\n0 + 24 = 24 (left: 24)",
                "6 + 4 = 10 (left: 4 4 10)\n10 + 4 = 14 (left: 4 14)"
            ],
            "values": [
                0.003,
                2.001,
                0.002,
                20.0,
                20.001
            ],
            "resampled": [
                "0 <- 1.4",
                "1 <- 2.2",
                "2 <- 2.3",
                "3 <- 2.4",
                "4 <- 3.3"
            ],
            "resampled_steps": [
                "6 - 4 = 2 (left: 4 4 2)",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)",
                "6 - 4 = 2 (left: 4 4 2)",
                "6 + 4 = 10 (left: 4 4 10)\n4 / 4 = 1 (left: 1 10)",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)\n0 + 24 = 24 (left: 24)"
            ]
        },
        "step_4": {
            "steps": [
                "6 - 4 = 2 (left: 4 4 2)\n4 - 2 = 2 (left: 2 2)",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)\n24 - 0 = 24 (left: 24)",
                "6 - 4 = 2 (left: 4 4 2)\n4 + 4 = 8 (left: 2 8)",
                "6 + 4 = 10 (left: 4 4 10)\n4 / 4 = 1 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)\n0 + 24 = 24 (left: 24)\nAnswer: (4 - 4) * 6 + 4 = 24"
            ],
            "values": [
                2.001,
                20.0,
                1.001,
                0.001,
                20.002
            ],
            "resampled": [
                "0 <- 3.4",
                "1 <- 2.2",
                "2 <- 2.1",
                "3 <- 1.1",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "6 + 4 = 10 (left: 4 4 10)\n10 + 4 = 14 (left: 4 14)",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)",
                "4 - 4 = 0 (left: 0 4 6)\n0 + 4 = 4 (left: 4 6)",
                "4 - 4 = 0 (left: 0 4 6)",
                "6 + 4 = 10 (left: 4 4 10)"
            ]
        },
        "step_5": {
            "steps": [
                "6 + 4 = 10 (left: 4 4 10)\n10 + 4 = 14 (left: 4 14)\n14 / 4 = 3.5 (left: 3.5)",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)\n0 * 24 = 0 (left: 0)",
                "4 - 4 = 0 (left: 0 4 6)\n0 + 4 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)",
                "4 - 4 = 0 (left: 0 4 6)\n6 - 4 = 2 (left: 0 2)",
                "6 + 4 = 10 (left: 4 4 10)\n4 * 4 = 16 (left: 16 10)"
            ],
            "values": [
                0.003,
                0.001,
                0.002,
                1.001,
                0.002
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 2.4",
                "2 <- 2.4",
                "3 <- 4.1",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "4 - 4 = 0 (left: 0 4 6)",
                "6 + 4 = 10 (left: 4 4 10)\n4 / 4 = 1 (left: 1 10)",
                "6 + 4 = 10 (left: 4 4 10)\n4 / 4 = 1 (left: 1 10)",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)\n24 - 0 = 24 (left: 24)",
                "4 - 4 = 0 (left: 0 4 6)\n0 + 4 = 4 (left: 4 6)"
            ]
        },
        "step_6": {
            "steps": [
                "4 - 4 = 0 (left: 0 4 6)\n6 + 4 = 10 (left: 0 10)",
                "6 + 4 = 10 (left: 4 4 10)\n4 / 4 = 1 (left: 1 10)\n10 + 1 = 11 (left: 1 11)",
                "6 + 4 = 10 (left: 4 4 10)\n4 / 4 = 1 (left: 1 10)\n1 + 10 = 11 (left: 11)",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)\n24 - 0 = 24 (left: 24)\nAnswer: (4 - 4) * 6 * 0 = 24",
                "4 - 4 = 0 (left: 0 4 6)\n0 + 4 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)"
            ],
            "values": [
                0.003,
                1.001,
                0.002,
                0.003,
                20.0
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- 2.0",
                "2 <- 4.4",
                "3 <- 2.2",
                "4 <- 2.2"
            ],
            "resampled_steps": [
                "6 + 4 = 10 (left: 4 4 10)\n4 / 4 = 1 (left: 1 10)",
                "6 + 4 = 10 (left: 4 4 10)",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)\n0 + 24 = 24 (left: 24)\nAnswer: (4 - 4) * 6 + 4 = 24",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)"
            ]
        },
        "step_7": {
            "steps": [
                "6 + 4 = 10 (left: 4 4 10)\n4 / 4 = 1 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "6 + 4 = 10 (left: 4 4 10)\n10 - 4 = 6 (left: 4 6)",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)\n0 + 24 = 24 (left: 24)\nAnswer: (4 - 4) * 6 + 4 = 24\n\nGreat job! Those are all correct ways to obtain 24 using the given numbers and basic arithmetic operations.",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)\n24 + 0 = 24 (left: 24)",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)\n24 - 0 = 24 (left: 24)"
            ],
            "values": [
                0.003,
                60.0,
                40.0,
                20.0,
                20.0
            ],
            "resampled": [
                "0 <- 4.4",
                "1 <- 7.2",
                "2 <- 2.2",
                "3 <- 7.2",
                "4 <- 4.4"
            ],
            "resampled_steps": [
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)\n0 + 24 = 24 (left: 24)\nAnswer: (4 - 4) * 6 + 4 = 24",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)\n0 + 24 = 24 (left: 24)\nAnswer: (4 - 4) * 6 + 4 = 24\n\nGreat job! Those are all correct ways to obtain 24 using the given numbers and basic arithmetic operations.",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)\n0 + 24 = 24 (left: 24)\nAnswer: (4 - 4) * 6 + 4 = 24\n\nGreat job! Those are all correct ways to obtain 24 using the given numbers and basic arithmetic operations.",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)\n0 + 24 = 24 (left: 24)\nAnswer: (4 - 4) * 6 + 4 = 24"
            ]
        },
        "step_8": {
            "steps": [
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)\n0 + 24 = 24 (left: 24)\nAnswer: (4 - 4) * 6 + 4 = 24\n\nInput: 3 3 3 8\nSteps:\n3 * 8 = 24 (left: 3 3 24)\n3 * 3 = 9 (left: 9 24)\n24 / 9 = 24/9 = 8/3 = 2.666666667 (left: 2.666666667)\nAnswer: (3 * 8) / 3 * 3 = 24/9",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)\n0 + 24 = 24 (left: 24)\nAnswer: (4 - 4) * 6 + 4 = 24\n\nGreat job! Those are all correct ways to obtain 24 using the given numbers and basic arithmetic operations.\nWell done! You have found all the different ways to obtain the number 24 using the given numbers and basic arithmetic operations. Keep up the good work!",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)\n24 / 0 = undefined (cannot divide by 0)",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)\n0 + 24 = 24 (left: 24)\nAnswer: (4 - 4) * 6 + 4 = 24\n\nGreat job! Those are all correct ways to obtain 24 using the given numbers and basic arithmetic operations.\nWell done! It looks like you've got a good handle on how to manipulate the numbers to obtain the desired result. Keep up the good work!",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)\n0 + 24 = 24 (left: 24)\nAnswer: (4 - 4) * 6 + 4 = 24\nInput: 3 3 8 9\nSteps:\n3 * 8 = 24 (left: 3 9 24)\n9 - 3 = 6 (left: 6 24)\n6 * 24 = 144 (left: 144)\nAnswer: (3 * 8) * (9 - 3) = 24"
            ],
            "values": [
                40.0,
                0.003,
                0.003,
                0.003,
                20.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 2.3",
                "2 <- 2.2",
                "3 <- 7.4",
                "4 <- 2.3"
            ],
            "resampled_steps": [
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)",
                "6 - 4 = 2 (left: 4 4 2)",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)\n24 - 0 = 24 (left: 24)",
                "6 - 4 = 2 (left: 4 4 2)"
            ]
        },
        "step_9": {
            "steps": [
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)\n0 * 24 = 0 (left: 0)",
                "6 - 4 = 2 (left: 4 4 2)\n4 + 4 = 8 (left: 8 2)",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)\n24 / 0 = undefined (left: undefined)",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)\n24 - 0 = 24 (left: 24)\nAnswer: (4 - 4) * 6 * 0 = 24",
                "6 - 4 = 2 (left: 4 4 2)\n4 / 4 = 1 (left: 1 2)"
            ],
            "values": [
                0.002,
                1.001,
                0.0,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 4.0",
                "2 <- 7.3",
                "3 <- 2.2",
                "4 <- 8.0"
            ],
            "resampled_steps": [
                "4 - 4 = 0 (left: 0 4 6)",
                "6 - 4 = 2 (left: 4 4 2)\n4 - 2 = 2 (left: 2 2)",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)\n24 + 0 = 24 (left: 24)",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)\n0 + 24 = 24 (left: 24)\nAnswer: (4 - 4) * 6 + 4 = 24\n\nInput: 3 3 3 8\nSteps:\n3 * 8 = 24 (left: 3 3 24)\n3 * 3 = 9 (left: 9 24)\n24 / 9 = 24/9 = 8/3 = 2.666666667 (left: 2.666666667)\nAnswer: (3 * 8) / 3 * 3 = 24/9"
            ]
        },
        "step_10": {
            "steps": [
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)",
                "6 - 4 = 2 (left: 4 4 2)\n4 - 2 = 2 (left: 2 2)\n2 + 2 = 4 (left: 4)",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)\n24 + 0 = 24 (left: 24)\nAnswer: (4 - 4) * 6 + 0 = 24",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)\n24 - 0 = 24 (left: 24)",
                "4 - 4 = 0 (left: 0 4 6)\n4 * 6 = 24 (left: 0 24)\n0 + 24 = 24 (left: 24)\nAnswer: (4 - 4) * 6 + 4 = 24\n\nInput: 3 3 3 8\nSteps:\n3 * 8 = 24 (left: 3 3 24)\n3 * 3 = 9 (left: 9 24)\n24 / 9 = 24/9 = 8/3 = 2.666666667 (left: 2.666666667)\nAnswer: (3 * 8) / 3 * 3 = 24/9\n = 2.666666667"
            ],
            "values": [
                60.0,
                0.0,
                40.001,
                40.0,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.45727
    },
    "39": {
        "input": "1 1 1 11",
        "step_1": {
            "steps": [
                "11 - 1 = 10 (left: 1 1 10)",
                "1 + 1 = 2 (left: 1 2 11)",
                "1 + 1 = 2 (left: 1 2 11)",
                "11 - 1 = 10 (left: 1 1 10)",
                "1 * 1 = 1 (left: 1 1 11)"
            ],
            "values": [
                1.002,
                2.001,
                1.002,
                0.0,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                "",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "1 / 1 = 1 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1 11)",
                "1 + 1 = 2 (left: 1 2 11)",
                "1 + 1 = 2 (left: 1 2 11)",
                "1 * 1 = 1 (left: 1 1 11)"
            ],
            "values": [
                0.003,
                0.003,
                0.002,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 1.0",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                "",
                "11 - 1 = 10 (left: 1 1 10)",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 11)",
                "1 * 1 = 1 (left: 1 1 11)",
                "1 + 1 = 2 (left: 1 2 11)",
                "11 - 1 = 10 (left: 1 1 10)\n1 + 1 = 2 (left: 2 10)",
                "11 - 1 = 10 (left: 1 1 10)"
            ],
            "values": [
                1.002,
                0.003,
                1.002,
                0.0,
                2.001
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 3.4",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 3.4"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 1 2 11)",
                "11 - 1 = 10 (left: 1 1 10)",
                "",
                "",
                "11 - 1 = 10 (left: 1 1 10)"
            ]
        },
        "step_4": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 11)\n1 * 11 = 11 (left: 2 11)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 2 1 11)",
                "1 + 1 = 2 (left: 1 2 11)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)"
            ],
            "values": [
                1.002,
                41.0,
                1.001,
                0.003,
                40.0
            ],
            "resampled": [
                "0 <- 4.4",
                "1 <- INIT",
                "2 <- 4.1",
                "3 <- 4.4",
                "4 <- 4.4"
            ],
            "resampled_steps": [
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)",
                "",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)"
            ]
        },
        "step_5": {
            "steps": [
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n10 + 1 = 11 (left: 1 11)",
                "11 - 1 = 10 (left: 1 1 10)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n1 + 10 = 11 (left: 10 11)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n1 + 10 = 11 (left: 10 11)"
            ],
            "values": [
                20.002,
                1.001,
                1.0,
                0.003,
                2.0
            ],
            "resampled": [
                "0 <- 4.4",
                "1 <- 4.1",
                "2 <- 5.0",
                "3 <- 4.1",
                "4 <- 4.4"
            ],
            "resampled_steps": [
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n10 + 1 = 11 (left: 1 11)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)"
            ]
        },
        "step_6": {
            "steps": [
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9 10)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n10 + 1 = 11 (left: 1 11)\n11 - 1 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n10 + 1 = 11 (left: 10 11)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)"
            ],
            "values": [
                0.003,
                0.002,
                0.003,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- 5.0",
                "1 <- 4.4",
                "2 <- 5.0",
                "3 <- 4.1",
                "4 <- 5.0"
            ],
            "resampled_steps": [
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n10 + 1 = 11 (left: 1 11)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n10 + 1 = 11 (left: 1 11)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n10 + 1 = 11 (left: 1 11)"
            ]
        },
        "step_7": {
            "steps": [
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n10 + 1 = 11 (left: 1 11)\n1 + 11 = 12 (left: 12)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n1 + 10 = 11 (left: 11)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n10 + 1 = 11 (left: 1 11)\n11 - 1 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n10 + 1 = 11 (left: 1 11)\n11 / 1 = 11 (left: 11)"
            ],
            "values": [
                0.001,
                0.003,
                0.003,
                0.002,
                0.001
            ],
            "resampled": [
                "0 <- 4.4",
                "1 <- 4.4",
                "2 <- 4.4",
                "3 <- 4.4",
                "4 <- 4.4"
            ],
            "resampled_steps": [
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)"
            ]
        },
        "step_8": {
            "steps": [
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10 10)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n10 - 10 = 0 (left: 1 0)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n10 / 1 = 10 (left: 1 10)"
            ],
            "values": [
                0.003,
                41.0,
                0.002,
                0.002,
                40.0
            ],
            "resampled": [
                "0 <- 5.4",
                "1 <- 5.0",
                "2 <- 8.1",
                "3 <- 8.1",
                "4 <- 4.4"
            ],
            "resampled_steps": [
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n1 + 10 = 11 (left: 10 11)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n10 + 1 = 11 (left: 1 11)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10 10)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10 10)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)"
            ]
        },
        "step_9": {
            "steps": [
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n1 + 10 = 11 (left: 10 11)\n10 - 11 = -1 (left: -1)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n10 + 1 = 11 (left: 1 11)\n11 - 1 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10 10)\n10 / 10 = 1 (left: 1)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10 10)\n10 + 10 = 20 (left: 10 20)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n10 / 1 = 10 (left: 10)"
            ],
            "values": [
                0.0,
                0.002,
                0.003,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 4.1",
                "1 <- 5.0",
                "2 <- 8.4",
                "3 <- 8.1",
                "4 <- 4.4"
            ],
            "resampled_steps": [
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n10 + 1 = 11 (left: 1 11)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n10 / 1 = 10 (left: 1 10)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10 10)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)"
            ]
        },
        "step_10": {
            "steps": [
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n10 + 1 = 11 (left: 1 11)\n11 / 1 = 11 (left: 11)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n10 / 1 = 10 (left: 1 10)\n10 / 1 = 10 (left: 1 10)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10 10)\n10 + 10 = 20 (left: 20)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n10 - 10 = 0 (left: 0)"
            ],
            "values": [
                0.003,
                0.002,
                41.0,
                0.003,
                0.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.498034
    },
    "40": {
        "input": "1 1 11 12",
        "step_1": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 12)",
                "11 - 1 = 10 (left: 1 10 12)",
                "1 * 11 = 11 (left: 1 11 12)",
                "12 - 11 = 1 (left: 1 1 1)",
                "11 - 1 = 10 (left: 1 10 12)"
            ],
            "values": [
                1.002,
                1.002,
                60.0,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.2",
                "2 <- 1.2",
                "3 <- 1.2",
                "4 <- 1.2"
            ],
            "resampled_steps": [
                "",
                "1 * 11 = 11 (left: 1 11 12)",
                "1 * 11 = 11 (left: 1 11 12)",
                "1 * 11 = 11 (left: 1 11 12)",
                "1 * 11 = 11 (left: 1 11 12)"
            ]
        },
        "step_2": {
            "steps": [
                "1 * 11 = 11 (left: 1 11 12)",
                "1 * 11 = 11 (left: 1 11 12)\n1 * 11 = 11 (left: 11 12)",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)",
                "1 * 11 = 11 (left: 1 11 12)\n11 - 1 = 10 (left: 10 12)",
                "1 * 11 = 11 (left: 1 11 12)\n11 / 1 = 11 (left: 1 11)"
            ],
            "values": [
                21.001,
                0.003,
                41.0,
                0.003,
                20.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 1.2",
                "2 <- 2.4",
                "3 <- 1.2",
                "4 <- 2.2"
            ],
            "resampled_steps": [
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)",
                "1 * 11 = 11 (left: 1 11 12)",
                "1 * 11 = 11 (left: 1 11 12)\n11 / 1 = 11 (left: 1 11)",
                "1 * 11 = 11 (left: 1 11 12)",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)"
            ]
        },
        "step_3": {
            "steps": [
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)",
                "1 * 11 = 11 (left: 1 11 12)\n11 - 1 = 10 (left: 10 12)",
                "1 * 11 = 11 (left: 1 11 12)\n11 / 1 = 11 (left: 1 11)\n11 - 1 = 10 (left: 10)",
                "1 * 11 = 11 (left: 1 11 12)\n11 / 1 = 11 (left: 11 12)",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)"
            ],
            "values": [
                0.003,
                0.002,
                0.002,
                0.003,
                40.0
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 1.2",
                "2 <- 2.4",
                "3 <- 1.2",
                "4 <- 2.4"
            ],
            "resampled_steps": [
                "1 * 11 = 11 (left: 1 11 12)",
                "1 * 11 = 11 (left: 1 11 12)",
                "1 * 11 = 11 (left: 1 11 12)\n11 / 1 = 11 (left: 1 11)",
                "1 * 11 = 11 (left: 1 11 12)",
                "1 * 11 = 11 (left: 1 11 12)\n11 / 1 = 11 (left: 1 11)"
            ]
        },
        "step_4": {
            "steps": [
                "1 * 11 = 11 (left: 1 11 12)\n1 * 11 = 11 (left: 11 12)",
                "1 * 11 = 11 (left: 1 11 12)\n11 - 1 = 10 (left: 10 12)",
                "1 * 11 = 11 (left: 1 11 12)\n11 / 1 = 11 (left: 1 11)\n11 - 1 = 10 (left: 1 10)",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)",
                "1 * 11 = 11 (left: 1 11 12)\n11 / 1 = 11 (left: 1 11)\n11 - 1 = 10 (left: 10)"
            ],
            "values": [
                0.003,
                0.003,
                0.001,
                1.002,
                0.002
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 3.4",
                "2 <- 2.0",
                "3 <- 2.2",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "1 * 11 = 11 (left: 1 11 12)",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)",
                ""
            ]
        },
        "step_5": {
            "steps": [
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24",
                "1 * 11 = 11 (left: 1 11 12)\n11 / 1 = 11 (left: 11 12)",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "11 / 1 = 11 (left: 1 11 12)"
            ],
            "values": [
                40.0,
                60.0,
                0.003,
                0.001,
                2.001
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 5.0",
                "2 <- 5.0",
                "3 <- 2.4",
                "4 <- 3.4"
            ],
            "resampled_steps": [
                "1 * 11 = 11 (left: 1 11 12)",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "1 * 11 = 11 (left: 1 11 12)\n11 / 1 = 11 (left: 1 11)",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)"
            ]
        },
        "step_6": {
            "steps": [
                "1 * 11 = 11 (left: 1 11 12)\n11 - 1 = 10 (left: 10 12)",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24",
                "1 * 11 = 11 (left: 1 11 12)\n11 / 1 = 11 (left: 1 11)\n1 * 11 = 11 (left: 11)",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24"
            ],
            "values": [
                1.001,
                60.0,
                60.0,
                0.002,
                60.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 5.0",
                "2 <- 6.2",
                "3 <- 3.4",
                "4 <- 6.2"
            ],
            "resampled_steps": [
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24"
            ]
        },
        "step_7": {
            "steps": [
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24\n\nInput: 3 3 3 8\nSteps:\n3 + 3 = 6 (left: 3 8 6)\n8 - 6 = 2 (left: 3 2)\n3 * 2 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((3 + 3) * (8 - 6)) * 3 = 24",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24\nInput: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)\n5 * 9 = 45 (left: 45)\nAnswer: (3 * 3) * (8 - 3) = 24"
            ],
            "values": [
                0.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 6.2",
                "1 <- 7.1",
                "2 <- 7.3",
                "3 <- 6.1",
                "4 <- 7.3"
            ],
            "resampled_steps": [
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24"
            ]
        },
        "step_8": {
            "steps": [
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24\nInput: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n3 * 6 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: (3 * 8) / (3 * 6) = 24",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24\nInput: 3 3 8 11\nSteps:\n3 * 8 = 24 (left: 3 11 24)\n11 - 3 = 8 (left: 8 24)\n24 - 8 = 16 (left: 16)\nAnswer: (3 * 8) - (11 - 3) = 24",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24\n\nGreat! All of these are valid ways to obtain the number 24 using the given numbers and the basic arithmetic operations. Well done!",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24\nInput: 3 3 7 9\nSteps:\n3 * 7 = 21 (left: 3 9 21)\n9 - 3 = 6 (left: 6 21)\n21 - 6 = 15 (left: 15)\n15 + 9 = 24 (left: 24)\nAnswer: ((3 * 7) - (9 - 3)) + 9 = 24",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24\nInput: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n9 * 1 = 9 (left: 24)\nAnswer: ((3 * 3) - 8) * 9 = 24"
            ],
            "values": [
                60.0,
                40.0,
                60.0,
                40.0,
                60.0
            ],
            "resampled": [
                "0 <- 8.1",
                "1 <- 6.2",
                "2 <- 8.2",
                "3 <- 7.3",
                "4 <- 7.2"
            ],
            "resampled_steps": [
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24\nInput: 3 3 8 11\nSteps:\n3 * 8 = 24 (left: 3 11 24)\n11 - 3 = 8 (left: 8 24)\n24 - 8 = 16 (left: 16)\nAnswer: (3 * 8) - (11 - 3) = 24",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24\n\nGreat! All of these are valid ways to obtain the number 24 using the given numbers and the basic arithmetic operations. Well done!",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24\n\nInput: 3 3 3 8\nSteps:\n3 + 3 = 6 (left: 3 8 6)\n8 - 6 = 2 (left: 3 2)\n3 * 2 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((3 + 3) * (8 - 6)) * 3 = 24"
            ]
        },
        "step_9": {
            "steps": [
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24\nInput: 3 3 8 11\nSteps:\n3 * 8 = 24 (left: 3 11 24)\n11 - 3 = 8 (left: 8 24)\n24 - 8 = 16 (left: 16)\nAnswer: (3 * 8) - (11 - 3) = 24\nInput: 7 3 4 5\nSteps:\n7 - 3 = 4 (left: 4 4 5)\n4 * 4 = 16 (left: 16 5)\n16 + 5 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: ((7 - 3) * 4) + 5 + 3 = 24",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24\nInput: 3 3 8 8\nSteps:\n3 * 8 = 24 (left: 3 8 8)\n8 - 3 = 5 (left: 5 8)\n5 * 8 = 40 (left: 40)\nAnswer: (3 * 8) - (8 - 3) = 24",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24\n\nGreat! All of these are valid ways to obtain the number 24 using the given numbers and the basic arithmetic operations. Well done!\nThank you! I'm glad I could help.",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24\nInput: 3 3 8 8\nSteps:\n3 * 8 = 24 (left: 3 8 24)\n8 - 3 = 5 (left: 5 24)\n5 * 24 = 120 (left: 120)\nAnswer: (3 * 8) - (8 - 3) = 24",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24\n\nInput: 3 3 3 8\nSteps:\n3 + 3 = 6 (left: 3 8 6)\n8 - 6 = 2 (left: 3 2)\n3 * 2 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((3 + 3) * (8 - 6)) * 3 = 24\nInput: 7 2 3 9\nSteps:\n7 * 3 = 21 (left: 2 9 21)\n21 - 9 = 12 (left: 2 12)\n12 * 2 = 24 (left: 24)\nAnswer: (7 * 3) - (9 - 2) * 2 = 24"
            ],
            "values": [
                60.0,
                20.0,
                0.003,
                40.0,
                40.0
            ],
            "resampled": [
                "0 <- 7.3",
                "1 <- 7.2",
                "2 <- 7.2",
                "3 <- 2.4",
                "4 <- 9.3"
            ],
            "resampled_steps": [
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24\n\nInput: 3 3 3 8\nSteps:\n3 + 3 = 6 (left: 3 8 6)\n8 - 6 = 2 (left: 3 2)\n3 * 2 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((3 + 3) * (8 - 6)) * 3 = 24",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24\n\nInput: 3 3 3 8\nSteps:\n3 + 3 = 6 (left: 3 8 6)\n8 - 6 = 2 (left: 3 2)\n3 * 2 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((3 + 3) * (8 - 6)) * 3 = 24",
                "1 * 11 = 11 (left: 1 11 12)\n11 / 1 = 11 (left: 1 11)",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24\nInput: 3 3 8 8\nSteps:\n3 * 8 = 24 (left: 3 8 24)\n8 - 3 = 5 (left: 5 24)\n5 * 24 = 120 (left: 120)\nAnswer: (3 * 8) - (8 - 3) = 24"
            ]
        },
        "step_10": {
            "steps": [
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24\nInput: 3 3 8 4\nSteps:\n3 + 8 = 11 (left: 3 11 4)\n11 - 3 = 8 (left: 8 4)\n8 * 4 = 32 (left: 32)\nAnswer: (3 + 8) - (3 * 4) = 24",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24\n\nInput: 3 3 3 8\nSteps:\n3 + 3 = 6 (left: 3 8 6)\n8 - 6 = 2 (left: 3 2)\n3 * 2 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((3 + 3) * (8 - 6)) * 3 = 24\nInput: 3 6 6 8\nSteps:\n3 * 6 = 18 (left: 6 8 18)\n8 - 6 = 2 (left: 2 18)\n2 * 18 = 36 (left: 36)\n36 / 6 = 24 (left: 24)\nAnswer: ((3 * 6) * (8 - 6)) / 6 = 24",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24\n\nInput: 3 3 3 8\nSteps:\n3 + 3 = 6 (left: 3 8 6)\n8 - 6 = 2 (left: 3 2)\n3 * 2 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((3 + 3) * (8 - 6)) * 3 = 24\nInput: 3 3 5 7\nSteps:\n3 + 5 = 8 (left: 3 7 8)\n7 + 8 = 15 (left: 15)\n15 - 3 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: (((3 + 5) + 7) - 3) * 2 = 24",
                "1 * 11 = 11 (left: 1 11 12)\n11 / 1 = 11 (left: 1 11)\n11 - 1 = 10 (left: 1 10)",
                "1 * 11 = 11 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (1 * 11) + (1 + 11) = 24\nInput: 3 3 8 8\nSteps:\n3 * 8 = 24 (left: 3 8 24)\n8 - 3 = 5 (left: 5 24)\n5 * 24 = 120 (left: 120)\nAnswer: (3 * 8) - (8 - 3) = 24\nInput: 2 3 4 6\nSteps:\n3 * 6 = 18 (left: 2 4 18)\n18 - 2 = 16 (left: 4 16)\n16 + 4 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((3 * 6) - 2) + 4 = 24"
            ],
            "values": [
                40.0,
                40.0,
                60.0,
                20.0,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.543548
    },
    "41": {
        "input": "2 7 7 12",
        "step_1": {
            "steps": [
                "12 - 7 = 5 (left: 2 5 7)",
                "7 - 2 = 5 (left: 5 7 12)",
                "2 * 7 = 14 (left: 7 14 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12)",
                "12 + 2 = 14 (left: 7 7 14)"
            ],
            "values": [
                3.0,
                0.002,
                3.0,
                3.0,
                2.001
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 1.4"
            ],
            "resampled_steps": [
                "2 * 7 = 14 (left: 7 14 12)",
                "",
                "",
                "",
                "12 + 2 = 14 (left: 7 7 14)"
            ]
        },
        "step_2": {
            "steps": [
                "2 * 7 = 14 (left: 7 14 12)\n7 + 14 = 21 (left: 12 21)",
                "7 - 2 = 5 (left: 5 7 12)",
                "12 - 2 = 10 (left: 7 7 10)",
                "2 + 7 = 9 (left: 7 9 12)",
                "12 + 2 = 14 (left: 7 7 14)\n14 - 7 = 7 (left: 7 7)"
            ],
            "values": [
                1.002,
                22.0,
                22.0,
                3.0,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 2.2",
                "2 <- 2.1",
                "3 <- INIT",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "",
                "12 - 2 = 10 (left: 7 7 10)",
                "7 - 2 = 5 (left: 5 7 12)",
                "",
                "7 / 2 = 3.5 (left: 3.5 7 12)"
            ]
        },
        "step_3": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12)",
                "12 - 2 = 10 (left: 7 7 10)\n7 - 10 = -3 (left: -3)",
                "7 - 2 = 5 (left: 5 7 12)\n12 / 5 = 2.4 (left: 2.4 7)",
                "12 - 2 = 10 (left: 7 10 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 - 3.5 = 8.5 (left: 8.5 7)"
            ],
            "values": [
                22.0,
                0.002,
                3.0,
                2.001,
                3.0
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 1.0",
                "2 <- 3.0",
                "3 <- 2.1",
                "4 <- 3.0"
            ],
            "resampled_steps": [
                "7 - 2 = 5 (left: 5 7 12)",
                "12 - 7 = 5 (left: 2 5 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12)",
                "7 - 2 = 5 (left: 5 7 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12)"
            ]
        },
        "step_4": {
            "steps": [
                "7 - 2 = 5 (left: 5 7 12)\n12 - 7 = 5 (left: 5 7)",
                "12 - 7 = 5 (left: 2 5 7)\n2 + 5 = 7 (left: 7 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)",
                "7 - 2 = 5 (left: 5 7 12)\n5 * 7 = 35 (left: 35 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)"
            ],
            "values": [
                0.003,
                0.003,
                41.0,
                0.002,
                40.0
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 4.2",
                "2 <- 2.1",
                "3 <- 2.2",
                "4 <- 2.3"
            ],
            "resampled_steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)",
                "7 - 2 = 5 (left: 5 7 12)",
                "12 - 2 = 10 (left: 7 7 10)",
                "2 + 7 = 9 (left: 7 9 12)"
            ]
        },
        "step_5": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)\n3.43 + 7 = 10.43 (left: 7 10.43)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)\n7 * 3.43 = 24.01 (left: 24.01)",
                "7 - 2 = 5 (left: 5 7 12)\n12 / 5 = 2.4 (left: 2.4 7)",
                "12 - 2 = 10 (left: 7 7 10)\n10 / 7 = 1.43 (left: 7 1.43)",
                "2 + 7 = 9 (left: 7 9 12)\n9 / 7 = 1.29 (left: 1.29 12)"
            ],
            "values": [
                3.0,
                0.003,
                2.001,
                1.001,
                1.002
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 3.0",
                "2 <- 3.0",
                "3 <- 4.2",
                "4 <- 4.2"
            ],
            "resampled_steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)"
            ]
        },
        "step_6": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)\n7 / 3.43 = 2.04 (left: 2.04)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n3.5 * 7 = 24.5 (left: 24.5 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)\n3.43 * 7 = 24.01 (left: 24.01)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)\n3.43 * 7 = 24.01 (left: 24.01)"
            ],
            "values": [
                0.003,
                40.0,
                0.003,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 3.4",
                "1 <- 3.0",
                "2 <- 6.1",
                "3 <- 6.1",
                "4 <- 4.2"
            ],
            "resampled_steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 - 3.5 = 8.5 (left: 8.5 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)"
            ]
        },
        "step_7": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 - 3.5 = 8.5 (left: 8.5 7)\n8.5 - 7 = 1.5 (left: 1.5)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 - 3.5 = 8.5 (left: 7 8.5)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)\n7 - 3.43 = 3.57 (left: 3.57)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)\n7 + 3.43 = 10.43 (left: 10.43)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)\n3.43 + 7 = 10.43 (left: 10.43)"
            ],
            "values": [
                0.002,
                1.002,
                0.001,
                0.0,
                0.002
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 2.1",
                "2 <- 2.1",
                "3 <- 1.3",
                "4 <- 4.4"
            ],
            "resampled_steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)",
                "7 - 2 = 5 (left: 5 7 12)",
                "7 - 2 = 5 (left: 5 7 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)"
            ]
        },
        "step_8": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)\n7 / 3.43 = 2.04 (left: 2.04)",
                "7 - 2 = 5 (left: 5 7 12)\n5 * 7 = 35 (left: 35 12)",
                "7 - 2 = 5 (left: 5 7 12)\n5 * 7 = 35 (left: 35 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n3.5 * 2 = 7 (left: 7 7 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)\n3.43 + 7 = 10.43 (left: 10.43)"
            ],
            "values": [
                0.003,
                1.0,
                1.001,
                1.002,
                0.001
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 4.2",
                "2 <- 4.4",
                "3 <- 1.0",
                "4 <- 4.2"
            ],
            "resampled_steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)",
                "12 - 7 = 5 (left: 2 5 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)"
            ]
        },
        "step_9": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)\n7 / 3.43 = 2.04 (left: 2.04)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)\n7 - 3.43 = 3.57 (left: 3.57)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)\n3.43 + 7 = 10.43 (left: 10.43)",
                "12 - 7 = 5 (left: 2 5 7)\n3 + 9 = 12 (left: 12 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)\n3.43 + 7 = 10.43 (left: 10.43)"
            ],
            "values": [
                0.002,
                0.003,
                0.0,
                21.001,
                0.002
            ],
            "resampled": [
                "0 <- 6.1",
                "1 <- 4.2",
                "2 <- 4.2",
                "3 <- 4.4",
                "4 <- 4.2"
            ],
            "resampled_steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)"
            ]
        },
        "step_10": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)\n7 - 3.43 \u2248 3.57 (left: 3.57 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)\n3.43 + 7 = 10.43 (left: 10.43)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)\n3.43 + 7 = 10.43 (left: 10.43)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)\n3.43 + 7 = 10.43 (left: 10.43)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 / 3.5 = 3.43 (left: 3.43 7)\n3.43 * 7 = 24.01 (left: 24.01)"
            ],
            "values": [
                1.001,
                0.002,
                0.003,
                0.001,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.588387
    },
    "42": {
        "input": "1 5 7 12",
        "step_1": {
            "steps": [
                "5 + 7 = 12 (left: 1 12 12)",
                "5 + 7 = 12 (left: 1 12 12)",
                "5 * 7 = 35 (left: 1 35 12)",
                "5 + 7 = 12 (left: 1 12 12)",
                "5 * 7 = 35 (left: 1 35 12)"
            ],
            "values": [
                0.003,
                21.001,
                22.0,
                1.002,
                1.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.1",
                "3 <- 1.2",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                "5 + 7 = 12 (left: 1 12 12)",
                "5 * 7 = 35 (left: 1 35 12)",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "1 * 5 = 5 (left: 5 7 12)",
                "1 + 5 = 6 (left: 6 7 12)",
                "5 + 7 = 12 (left: 1 12 12)\n1 + 12 = 13 (left: 12 13)",
                "5 * 7 = 35 (left: 1 35 12)\n12 / 1 = 12 (left: 35 12)",
                "7 - 5 = 2 (left: 1 2 12)"
            ],
            "values": [
                2.001,
                2.001,
                0.002,
                0.002,
                60.0
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 1.1",
                "2 <- 2.4",
                "3 <- 2.4",
                "4 <- 2.4"
            ],
            "resampled_steps": [
                "5 * 7 = 35 (left: 1 35 12)",
                "5 + 7 = 12 (left: 1 12 12)",
                "7 - 5 = 2 (left: 1 2 12)",
                "7 - 5 = 2 (left: 1 2 12)",
                "7 - 5 = 2 (left: 1 2 12)"
            ]
        },
        "step_3": {
            "steps": [
                "5 * 7 = 35 (left: 1 35 12)\n35 - 1 = 34 (left: 34 12)",
                "5 + 7 = 12 (left: 1 12 12)\n1 + 12 = 13 (left: 12 13)",
                "7 - 5 = 2 (left: 1 2 12)\n12 - 1 = 11 (left: 2 11)",
                "7 - 5 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "7 - 5 = 2 (left: 1 2 12)\n1 * 12 = 12 (left: 12)"
            ],
            "values": [
                0.003,
                0.003,
                0.002,
                40.0,
                0.001
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- 3.3",
                "2 <- 2.4",
                "3 <- 3.3",
                "4 <- 2.4"
            ],
            "resampled_steps": [
                "7 - 5 = 2 (left: 1 2 12)",
                "7 - 5 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "7 - 5 = 2 (left: 1 2 12)",
                "7 - 5 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "7 - 5 = 2 (left: 1 2 12)"
            ]
        },
        "step_4": {
            "steps": [
                "7 - 5 = 2 (left: 1 2 12)\n12 * 2 = 24 (left: 1 24)",
                "7 - 5 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "7 - 5 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "7 - 5 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n1 + 10 = 11 (left: 11)",
                "7 - 5 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)"
            ],
            "values": [
                60.0,
                0.001,
                60.0,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 4.0",
                "1 <- 4.4",
                "2 <- 4.2",
                "3 <- 3.3",
                "4 <- 2.0"
            ],
            "resampled_steps": [
                "7 - 5 = 2 (left: 1 2 12)\n12 * 2 = 24 (left: 1 24)",
                "7 - 5 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "7 - 5 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "7 - 5 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "1 * 5 = 5 (left: 5 7 12)"
            ]
        },
        "step_5": {
            "steps": [
                "7 - 5 = 2 (left: 1 2 12)\n12 * 2 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)",
                "7 - 5 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9 10)",
                "7 - 5 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n1 + 10 = 11 (left: 11)",
                "7 - 5 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n1 + 10 = 11 (left: 11)",
                "1 * 5 = 5 (left: 5 7 12)\n7 - 12 = -5 (left: -5)"
            ],
            "values": [
                60.0,
                0.001,
                0.003,
                0.001,
                0.003
            ],
            "resampled": [
                "0 <- 4.0",
                "1 <- 1.1",
                "2 <- 4.0",
                "3 <- 4.0",
                "4 <- 4.2"
            ],
            "resampled_steps": [
                "7 - 5 = 2 (left: 1 2 12)\n12 * 2 = 24 (left: 1 24)",
                "5 + 7 = 12 (left: 1 12 12)",
                "7 - 5 = 2 (left: 1 2 12)\n12 * 2 = 24 (left: 1 24)",
                "7 - 5 = 2 (left: 1 2 12)\n12 * 2 = 24 (left: 1 24)",
                "7 - 5 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)"
            ]
        },
        "step_6": {
            "steps": [
                "7 - 5 = 2 (left: 1 2 12)\n12 * 2 = 24 (left: 1 24)\n1 / 24 = 0.0416667 (left: 24 0.0416667)",
                "5 + 7 = 12 (left: 1 12 12)\n12 + 1 = 13 (left: 1 13)",
                "7 - 5 = 2 (left: 1 2 12)\n12 * 2 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)",
                "7 - 5 = 2 (left: 1 2 12)\n12 * 2 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)",
                "7 - 5 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n1 + 10 = 11 (left: 11)"
            ],
            "values": [
                60.0,
                2.001,
                60.0,
                40.0,
                0.002
            ],
            "resampled": [
                "0 <- 6.3",
                "1 <- 4.4",
                "2 <- 3.3",
                "3 <- 6.0",
                "4 <- 5.0"
            ],
            "resampled_steps": [
                "7 - 5 = 2 (left: 1 2 12)\n12 * 2 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)",
                "7 - 5 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "7 - 5 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "7 - 5 = 2 (left: 1 2 12)\n12 * 2 = 24 (left: 1 24)\n1 / 24 = 0.0416667 (left: 24 0.0416667)",
                "7 - 5 = 2 (left: 1 2 12)\n12 * 2 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)"
            ]
        },
        "step_7": {
            "steps": [
                "7 - 5 = 2 (left: 1 2 12)\n12 * 2 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)\nAnswer: 1 * (7 - 5) * 12 = 24",
                "7 - 5 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n1 + 10 = 11 (left: 11)",
                "7 - 5 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "7 - 5 = 2 (left: 1 2 12)\n12 * 2 = 24 (left: 1 24)\n1 / 24 = 0.0416667 (left: 24 0.0416667)\n24 + 0.0416667 = 24.0416667 (left: 24.0416667)",
                "7 - 5 = 2 (left: 1 2 12)\n12 * 2 = 24 (left: 1 24)\n24 / 1 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)"
            ]
        },
        "results": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.6176469999999998
    },
    "43": {
        "input": "10 10 12 12",
        "step_1": {
            "steps": [
                "12 - 10 = 2 (left: 2 12 12)",
                "12 / 10 = 1.2 (left: 1.2 10 12)",
                "12 / 10 = 1.2 (left: 1.2 12 12)",
                "10 + 10 = 20 (left: 12 20 12)",
                "12 - 10 = 2 (left: 10 2 12)"
            ],
            "values": [
                40.001,
                3.0,
                1.002,
                2.001,
                40.001
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 1.4",
                "2 <- INIT",
                "3 <- 1.0",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "12 - 10 = 2 (left: 2 12 12)",
                "12 - 10 = 2 (left: 10 2 12)",
                "",
                "12 - 10 = 2 (left: 2 12 12)",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "12 - 10 = 2 (left: 2 12 12)\n2 * 12 = 24 (left: 12 24)",
                "12 - 10 = 2 (left: 10 2 12)\n10 / 2 = 5 (left: 5 2 12)",
                "10 + 10 = 20 (left: 20 12 12)",
                "12 - 10 = 2 (left: 2 12 12)\n12 - 2 = 10 (left: 10 12)",
                "12 - 10 = 2 (left: 10 2 12)"
            ],
            "values": [
                0.003,
                3.0,
                1.002,
                1.001,
                60.0
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 1.3",
                "2 <- 1.4",
                "3 <- 2.1",
                "4 <- 2.4"
            ],
            "resampled_steps": [
                "12 - 10 = 2 (left: 2 12 12)",
                "10 + 10 = 20 (left: 12 20 12)",
                "12 - 10 = 2 (left: 10 2 12)",
                "12 - 10 = 2 (left: 10 2 12)\n10 / 2 = 5 (left: 5 2 12)",
                "12 - 10 = 2 (left: 10 2 12)"
            ]
        },
        "step_3": {
            "steps": [
                "12 - 10 = 2 (left: 2 12 12)\n12 - 2 = 10 (left: 10 12)",
                "10 + 10 = 20 (left: 12 20 12)\n12 + 20 = 32 (left: 32 12)",
                "12 - 10 = 2 (left: 10 2 12)\n10 * 2 = 20 (left: 20 12)",
                "12 - 10 = 2 (left: 10 2 12)\n10 / 2 = 5 (left: 5 2 12)\n2 - 12 = -10 (left: 5 -10)",
                "12 - 10 = 2 (left: 10 2 12)\n10 + 2 = 12 (left: 2 12 12)"
            ],
            "values": [
                1.002,
                20.002,
                0.003,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 1.4",
                "1 <- 1.4",
                "2 <- 3.1",
                "3 <- 1.4",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "12 - 10 = 2 (left: 10 2 12)",
                "12 - 10 = 2 (left: 10 2 12)",
                "10 + 10 = 20 (left: 12 20 12)\n12 + 20 = 32 (left: 32 12)",
                "12 - 10 = 2 (left: 10 2 12)",
                ""
            ]
        },
        "step_4": {
            "steps": [
                "12 - 10 = 2 (left: 10 2 12)\n12 * 2 = 24 (left: 10 24)",
                "12 - 10 = 2 (left: 10 2 12)\n12 / 2 = 6 (left: 6 12)",
                "10 + 10 = 20 (left: 12 20 12)\n12 + 20 = 32 (left: 32 12)\n32 * 12 = 384 (left: 384)",
                "12 - 10 = 2 (left: 10 2 12)\n12 + 2 = 14 (left: 10 14)",
                "12 / 10 = 1.2 (left: 10 1.2 12)"
            ],
            "values": [
                1.002,
                0.003,
                0.001,
                60.0,
                22.0
            ],
            "resampled": [
                "0 <- 4.3",
                "1 <- 1.0",
                "2 <- 3.1",
                "3 <- 4.3",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "12 - 10 = 2 (left: 10 2 12)\n12 + 2 = 14 (left: 10 14)",
                "12 - 10 = 2 (left: 2 12 12)",
                "10 + 10 = 20 (left: 12 20 12)\n12 + 20 = 32 (left: 32 12)",
                "12 - 10 = 2 (left: 10 2 12)\n12 + 2 = 14 (left: 10 14)",
                "12 - 10 = 2 (left: 10 2 12)\n10 / 2 = 5 (left: 5 2 12)"
            ]
        },
        "step_5": {
            "steps": [
                "12 - 10 = 2 (left: 10 2 12)\n12 + 2 = 14 (left: 10 14)\n10 + 14 = 24 (left: 24)",
                "12 - 10 = 2 (left: 2 12 12)\n12 / 2 = 6 (left: 6 6 12)",
                "10 + 10 = 20 (left: 12 20 12)\n12 + 20 = 32 (left: 32 12)\n32 + 12 = 44 (left: 44)",
                "12 - 10 = 2 (left: 10 2 12)\n12 + 2 = 14 (left: 10 14)\n10 * 14 = 140 (left: 140)",
                "12 - 10 = 2 (left: 10 2 12)\n10 / 2 = 5 (left: 5 2 12)\n5 * 2 = 10 (left: 10 12)"
            ],
            "values": [
                40.0,
                60.0,
                0.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 4.3",
                "2 <- 4.3",
                "3 <- 3.1",
                "4 <- 5.0"
            ],
            "resampled_steps": [
                "12 - 10 = 2 (left: 2 12 12)",
                "12 - 10 = 2 (left: 10 2 12)\n12 + 2 = 14 (left: 10 14)",
                "12 - 10 = 2 (left: 10 2 12)\n12 + 2 = 14 (left: 10 14)",
                "10 + 10 = 20 (left: 12 20 12)\n12 + 20 = 32 (left: 32 12)",
                "12 - 10 = 2 (left: 10 2 12)\n12 + 2 = 14 (left: 10 14)\n10 + 14 = 24 (left: 24)"
            ]
        },
        "step_6": {
            "steps": [
                "12 - 10 = 2 (left: 2 12 12)\n2 + 12 = 14 (left: 12 14)",
                "12 - 10 = 2 (left: 10 2 12)\n12 + 2 = 14 (left: 10 14)\n14 - 10 = 4 (left: 4 14)",
                "12 - 10 = 2 (left: 10 2 12)\n12 + 2 = 14 (left: 10 14)\n10 / 14 = 0.71428571429 (left: 0.71428571429 14)",
                "10 + 10 = 20 (left: 12 20 12)\n12 + 20 = 32 (left: 32 12)\n32 - 12 = 20 (left: 20)",
                "12 - 10 = 2 (left: 10 2 12)\n12 + 2 = 14 (left: 10 14)\n10 + 14 = 24 (left: 24)\nAnswer: 10 + (10 + (12 - 10)) = 24"
            ],
            "values": [
                0.003,
                21.001,
                1.002,
                0.001,
                60.0
            ],
            "resampled": [
                "0 <- 6.1",
                "1 <- 5.0",
                "2 <- 6.4",
                "3 <- 1.4",
                "4 <- 5.0"
            ],
            "resampled_steps": [
                "12 - 10 = 2 (left: 10 2 12)\n12 + 2 = 14 (left: 10 14)\n14 - 10 = 4 (left: 4 14)",
                "12 - 10 = 2 (left: 10 2 12)\n12 + 2 = 14 (left: 10 14)\n10 + 14 = 24 (left: 24)",
                "12 - 10 = 2 (left: 10 2 12)\n12 + 2 = 14 (left: 10 14)\n10 + 14 = 24 (left: 24)\nAnswer: 10 + (10 + (12 - 10)) = 24",
                "12 - 10 = 2 (left: 10 2 12)",
                "12 - 10 = 2 (left: 10 2 12)\n12 + 2 = 14 (left: 10 14)\n10 + 14 = 24 (left: 24)"
            ]
        },
        "step_7": {
            "steps": [
                "12 - 10 = 2 (left: 10 2 12)\n12 + 2 = 14 (left: 10 14)\n14 - 10 = 4 (left: 4 14)\n4 * 14 = 56 (left: 56)",
                "12 - 10 = 2 (left: 10 2 12)\n12 + 2 = 14 (left: 10 14)\n10 + 14 = 24 (left: 24)\nAnswer: (10 + (12 - 10)) + 12 = 24",
                "12 - 10 = 2 (left: 10 2 12)\n12 + 2 = 14 (left: 10 14)\n10 + 14 = 24 (left: 24)\nAnswer: 10 + (10 + (12 - 10)) = 24\nInput: 3 3 8 8\nSteps:\n3 * 3 = 9 (left: 8 8 9)\n8 - 8 = 0 (left: 0 9)\n9 * 0 = 0 (left: 0)\nAnswer: (3 * 3) * (8 - 8) = 24",
                "12 - 10 = 2 (left: 10 2 12)\n2 * 12 = 24 (left: 10 24)",
                "12 - 10 = 2 (left: 10 2 12)\n12 + 2 = 14 (left: 10 14)\n10 + 14 = 24 (left: 24)\nAnswer: 10 + (12 - 10) + 12 = 24"
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ],
        "cost": 1.646344
    },
    "44": {
        "input": "1 8 8 8",
        "step_1": {
            "steps": [
                "8 * 1 = 8 (left: 8 8 8)",
                "8 - 1 = 7 (left: 7 8 8)",
                "8 / 1 = 8 (left: 8 8 8)",
                "8 / 1 = 8 (left: 8 8 8)",
                "8 - 1 = 7 (left: 7 8 8)"
            ],
            "values": [
                21.001,
                3.0,
                21.001,
                1.002,
                3.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.0",
                "3 <- 1.0",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "",
                "",
                "8 * 1 = 8 (left: 8 8 8)",
                "8 * 1 = 8 (left: 8 8 8)",
                "8 * 1 = 8 (left: 8 8 8)"
            ]
        },
        "step_2": {
            "steps": [
                "8 * 1 = 8 (left: 8 8 8)",
                "8 - 1 = 7 (left: 1 7 8)",
                "8 * 1 = 8 (left: 8 8 8)\n8 * 8 = 64 (left: 64 8)",
                "8 * 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)",
                "8 * 1 = 8 (left: 8 8 8)\n8 * 8 = 64 (left: 8 64)"
            ],
            "values": [
                0.003,
                1.002,
                40.001,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 2.2",
                "2 <- INIT",
                "3 <- 2.2",
                "4 <- 1.2"
            ],
            "resampled_steps": [
                "8 / 1 = 8 (left: 8 8 8)",
                "8 * 1 = 8 (left: 8 8 8)\n8 * 8 = 64 (left: 64 8)",
                "",
                "8 * 1 = 8 (left: 8 8 8)\n8 * 8 = 64 (left: 64 8)",
                "8 / 1 = 8 (left: 8 8 8)"
            ]
        },
        "step_3": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8)\n8 * 8 = 64 (left: 8 64)",
                "8 * 1 = 8 (left: 8 8 8)\n8 * 8 = 64 (left: 64 8)\n64 * 8 = 512 (left: 8 512)",
                "1 * 8 = 8 (left: 8 8 8)",
                "8 * 1 = 8 (left: 8 8 8)\n8 * 8 = 64 (left: 64 8)\n64 / 8 = 8 (left: 8 8)",
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)"
            ],
            "values": [
                0.003,
                0.0,
                41.0,
                0.003,
                21.001
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 3.2",
                "2 <- 1.0",
                "3 <- INIT",
                "4 <- 3.2"
            ],
            "resampled_steps": [
                "8 * 1 = 8 (left: 8 8 8)\n8 * 8 = 64 (left: 64 8)",
                "1 * 8 = 8 (left: 8 8 8)",
                "8 * 1 = 8 (left: 8 8 8)",
                "",
                "1 * 8 = 8 (left: 8 8 8)"
            ]
        },
        "step_4": {
            "steps": [
                "8 * 1 = 8 (left: 8 8 8)\n8 * 8 = 64 (left: 64 8)\n64 - 8 = 56 (left: 8 56)",
                "1 * 8 = 8 (left: 8 8 8)\n8 * 8 = 64 (left: 8 64)",
                "8 * 1 = 8 (left: 8 8 8)\n8 - 8 = 0 (left: 0)",
                "8 / 1 = 8 (left: 8 8 8)",
                "1 * 8 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)"
            ],
            "values": [
                0.002,
                0.003,
                0.0,
                1.002,
                0.002
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 1.4",
                "2 <- 3.2",
                "3 <- INIT",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "1 * 8 = 8 (left: 8 8 8)",
                "8 - 1 = 7 (left: 7 8 8)",
                "1 * 8 = 8 (left: 8 8 8)",
                "",
                "8 * 1 = 8 (left: 8 8 8)"
            ]
        },
        "step_5": {
            "steps": [
                "1 * 8 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)",
                "8 - 1 = 7 (left: 7 8 8)\n8 * 7 = 56 (left: 56 8)",
                "1 * 8 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)",
                "8 / 1 = 8 (left: 8 8 8)",
                "8 * 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)"
            ],
            "values": [
                0.002,
                0.002,
                21.001,
                60.0,
                40.0
            ],
            "resampled": [
                "0 <- 5.3",
                "1 <- 1.2",
                "2 <- 2.2",
                "3 <- 3.2",
                "4 <- 5.3"
            ],
            "resampled_steps": [
                "8 / 1 = 8 (left: 8 8 8)",
                "8 / 1 = 8 (left: 8 8 8)",
                "8 * 1 = 8 (left: 8 8 8)\n8 * 8 = 64 (left: 64 8)",
                "1 * 8 = 8 (left: 8 8 8)",
                "8 / 1 = 8 (left: 8 8 8)"
            ]
        },
        "step_6": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8)\n8 - 8 = 0 (left: 0 8)",
                "8 / 1 = 8 (left: 8 8 8)\n8 - 8 = 0 (left: 0)",
                "8 * 1 = 8 (left: 8 8 8)\n8 * 8 = 64 (left: 64 8)\n64 / 8 = 8 (left: 8 8)",
                "1 * 8 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)",
                "8 / 1 = 8 (left: 8 8 8)\nThere are multiple possible next steps for the input 8 8 8."
            ],
            "values": [
                21.001,
                0.0,
                1.002,
                21.001,
                0.003
            ],
            "resampled": [
                "0 <- 6.0",
                "1 <- 2.2",
                "2 <- 5.4",
                "3 <- 6.3",
                "4 <- 3.2"
            ],
            "resampled_steps": [
                "8 / 1 = 8 (left: 8 8 8)\n8 - 8 = 0 (left: 0 8)",
                "8 * 1 = 8 (left: 8 8 8)\n8 * 8 = 64 (left: 64 8)",
                "8 * 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)",
                "1 * 8 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)",
                "1 * 8 = 8 (left: 8 8 8)"
            ]
        },
        "step_7": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8)\n8 - 8 = 0 (left: 0 8)\n0 * 8 = 0 (left: 0)",
                "8 * 1 = 8 (left: 8 8 8)\n8 * 8 = 64 (left: 64 8)\n64 + 8 = 72 (left: 8 72)",
                "8 * 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)\n1 + 8 = 9 (left: 9)",
                "1 * 8 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)\n1 * 8 = 8 (left: 8)",
                "1 * 8 = 8 (left: 8 8 8)\n8 - 8 = 0 (left: 0 8)"
            ],
            "values": [
                0.001,
                0.003,
                0.002,
                0.002,
                21.001
            ],
            "resampled": [
                "0 <- 5.3",
                "1 <- 5.4",
                "2 <- 6.0",
                "3 <- 5.4",
                "4 <- 5.4"
            ],
            "resampled_steps": [
                "8 / 1 = 8 (left: 8 8 8)",
                "8 * 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)",
                "8 / 1 = 8 (left: 8 8 8)\n8 - 8 = 0 (left: 0 8)",
                "8 * 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)",
                "8 * 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)"
            ]
        },
        "step_8": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8)\n8 - 8 = 0 (left: 0)",
                "8 * 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)\n8 - 1 = 7 (left: 7)",
                "8 / 1 = 8 (left: 8 8 8)\n8 - 8 = 0 (left: 0 8)\n0 + 8 = 8 (left: 8)",
                "8 * 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)\n8 - 1 = 7 (left: 7 8)",
                "8 * 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)\n1 + 8 = 9 (left: 8 9)"
            ],
            "values": [
                0.001,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 5.3",
                "1 <- 1.2",
                "2 <- 5.4",
                "3 <- 2.2",
                "4 <- 5.3"
            ],
            "resampled_steps": [
                "8 / 1 = 8 (left: 8 8 8)",
                "8 / 1 = 8 (left: 8 8 8)",
                "8 * 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)",
                "8 * 1 = 8 (left: 8 8 8)\n8 * 8 = 64 (left: 64 8)",
                "8 / 1 = 8 (left: 8 8 8)"
            ]
        },
        "step_9": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)",
                "8 / 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)",
                "8 * 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)\n1 + 8 = 9 (left: 8 9)",
                "8 * 1 = 8 (left: 8 8 8)\n8 * 8 = 64 (left: 64 8)\n64 - 8 = 56 (left: 56 8)",
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)"
            ],
            "values": [
                2.0,
                20.0,
                0.003,
                0.003,
                3.0
            ],
            "resampled": [
                "0 <- 6.3",
                "1 <- 7.4",
                "2 <- 9.1",
                "3 <- 9.1",
                "4 <- 3.4"
            ],
            "resampled_steps": [
                "1 * 8 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)",
                "1 * 8 = 8 (left: 8 8 8)\n8 - 8 = 0 (left: 0 8)",
                "8 / 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)",
                "8 / 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)",
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)"
            ]
        },
        "step_10": {
            "steps": [
                "1 * 8 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)\n8 / 1 = 8 (left: 1 8)",
                "1 * 8 = 8 (left: 8 8 8)\n8 - 8 = 0 (left: 0 8)\n0 * 8 = 0 (left: 8)",
                "8 / 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)\n1 + 8 = 9 (left: 8 9)",
                "8 / 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)\n8 / 1 = 8 (left: 8)",
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)\n16 - 8 = 8 (left: 8)"
            ],
            "values": [
                1.001,
                0.003,
                0.003,
                0.002,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.683157
    },
    "45": {
        "input": "2 2 3 8",
        "step_1": {
            "steps": [
                "2 + 2 = 4 (left: 3 4 8)",
                "2 + 2 = 4 (left: 3 4 8)",
                "2 * 3 = 6 (left: 6 2 8)",
                "2 + 2 = 4 (left: 4 3 8)",
                "8 - 3 = 5 (left: 2 5 8)"
            ],
            "values": [
                0.003,
                1.002,
                1.002,
                3.0,
                2.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "",
                "",
                "",
                "",
                "2 + 2 = 4 (left: 3 4 8)"
            ]
        },
        "step_2": {
            "steps": [
                "8 - 3 = 5 (left: 2 5 8)",
                "8 - 2 = 6 (left: 2 3 6)",
                "8 - 2 = 6 (left: 3 6 8)",
                "2 + 2 = 4 (left: 3 4 8)",
                "2 + 2 = 4 (left: 3 4 8)\n8 - 3 = 5 (left: 5 4)"
            ],
            "values": [
                3.0,
                40.001,
                2.0,
                1.002,
                2.0
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 1.4",
                "2 <- 2.1",
                "3 <- INIT",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "8 - 2 = 6 (left: 2 3 6)",
                "8 - 3 = 5 (left: 2 5 8)",
                "8 - 2 = 6 (left: 2 3 6)",
                "",
                "8 - 2 = 6 (left: 2 3 6)"
            ]
        },
        "step_3": {
            "steps": [
                "8 - 2 = 6 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)",
                "8 - 3 = 5 (left: 2 5 8)\n8 - 5 = 3 (left: 2 3)",
                "8 - 2 = 6 (left: 2 3 6)\n6 - 3 = 3 (left: 2 3)",
                "8 - 2 = 6 (left: 2 3 6)",
                "8 - 2 = 6 (left: 2 3 6)\n3 * 2 = 6 (left: 6 6)"
            ],
            "values": [
                0.001,
                1.001,
                0.0,
                41.0,
                0.003
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- INIT",
                "2 <- 2.1",
                "3 <- 2.1",
                "4 <- 3.3"
            ],
            "resampled_steps": [
                "8 - 2 = 6 (left: 2 3 6)",
                "",
                "8 - 2 = 6 (left: 2 3 6)",
                "8 - 2 = 6 (left: 2 3 6)",
                "8 - 2 = 6 (left: 2 3 6)"
            ]
        },
        "step_4": {
            "steps": [
                "8 - 2 = 6 (left: 2 3 6)\n2 + 3 = 5 (left: 5 6)",
                "8 - 3 = 5 (left: 2 5 8)",
                "8 - 2 = 6 (left: 2 3 6)\n2 * 3 = 6 (left: 6)",
                "8 - 2 = 6 (left: 2 3 6)\n3 * 2 = 6 (left: 6 6)",
                "8 - 2 = 6 (left: 2 3 6)\n2 + 3 = 5 (left: 5 6)"
            ],
            "values": [
                2.0,
                3.0,
                0.003,
                1.001,
                0.002
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 3.1",
                "3 <- 2.1",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "8 - 2 = 6 (left: 2 3 6)",
                "8 - 2 = 6 (left: 2 3 6)",
                "8 - 3 = 5 (left: 2 5 8)\n8 - 5 = 3 (left: 2 3)",
                "8 - 2 = 6 (left: 2 3 6)",
                "8 - 2 = 6 (left: 2 3 6)"
            ]
        },
        "step_5": {
            "steps": [
                "8 - 2 = 6 (left: 2 3 6)\n6 / 3 = 2 (left: 2 6)",
                "8 - 2 = 6 (left: 2 3 6)\n3 * 2 = 6 (left: 6 6)",
                "8 - 3 = 5 (left: 2 5 8)\n8 - 5 = 3 (left: 2 3)\n3 - 2 = 1 (left: 1 3)",
                "8 - 2 = 6 (left: 2 3 6)\n6 / 2 = 3 (left: 3 3)",
                "8 - 2 = 6 (left: 2 3 6)\n6 - 2 = 4 (left: 2 4)"
            ],
            "values": [
                1.001,
                0.003,
                0.001,
                0.001,
                0.001
            ],
            "resampled": [
                "0 <- 3.3",
                "1 <- 4.1",
                "2 <- INIT",
                "3 <- 2.1",
                "4 <- 3.3"
            ],
            "resampled_steps": [
                "8 - 2 = 6 (left: 2 3 6)",
                "8 - 3 = 5 (left: 2 5 8)",
                "",
                "8 - 2 = 6 (left: 2 3 6)",
                "8 - 2 = 6 (left: 2 3 6)"
            ]
        },
        "step_6": {
            "steps": [
                "8 - 2 = 6 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)",
                "8 - 3 = 5 (left: 2 5 8)\n2 + 5 = 7 (left: 7 8)",
                "8 - 3 = 5 (left: 2 5 8)",
                "8 - 2 = 6 (left: 2 3 6)\n2 + 3 = 5 (left: 5 6)",
                "8 - 2 = 6 (left: 2 3 6)\n2 + 3 = 5 (left: 5 6)"
            ],
            "values": [
                2.0,
                0.002,
                3.0,
                1.001,
                1.001
            ],
            "resampled": [
                "0 <- 3.3",
                "1 <- 2.0",
                "2 <- 3.3",
                "3 <- 3.3",
                "4 <- 2.3"
            ],
            "resampled_steps": [
                "8 - 2 = 6 (left: 2 3 6)",
                "8 - 3 = 5 (left: 2 5 8)",
                "8 - 2 = 6 (left: 2 3 6)",
                "8 - 2 = 6 (left: 2 3 6)",
                "2 + 2 = 4 (left: 3 4 8)"
            ]
        },
        "step_7": {
            "steps": [
                "8 - 2 = 6 (left: 2 3 6)\n2 + 3 = 5 (left: 5 6)",
                "8 - 3 = 5 (left: 2 5 8)\n2 * 5 = 10 (left: 10 8)",
                "8 - 2 = 6 (left: 2 3 6)\n6 - 3 = 3 (left: 2 3)",
                "8 - 2 = 6 (left: 2 3 6)\n3 * 2 = 6 (left: 6 6)",
                "2 + 2 = 4 (left: 3 4 8)\n3 * 4 = 12 (left: 12 8)"
            ],
            "values": [
                0.003,
                0.002,
                0.002,
                1.002,
                0.001
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 3.3",
                "3 <- 6.2",
                "4 <- 3.3"
            ],
            "resampled_steps": [
                "8 - 2 = 6 (left: 2 3 6)",
                "8 - 2 = 6 (left: 2 3 6)",
                "8 - 2 = 6 (left: 2 3 6)",
                "8 - 3 = 5 (left: 2 5 8)",
                "8 - 2 = 6 (left: 2 3 6)"
            ]
        },
        "step_8": {
            "steps": [
                "8 - 2 = 6 (left: 2 3 6)\n6 - 3 = 3 (left: 2 3)",
                "8 - 2 = 6 (left: 2 3 6)\n6 - 3 = 3 (left: 3)",
                "8 - 2 = 6 (left: 2 3 6)\n3 * 2 = 6 (left: 6 6)",
                "8 - 3 = 5 (left: 2 5 8)\n8 - 5 = 3 (left: 2 3)",
                "8 - 2 = 6 (left: 2 3 6)\n6 - 3 = 3 (left: 2 3)"
            ],
            "values": [
                0.002,
                0.001,
                20.002,
                0.002,
                0.0
            ],
            "resampled": [
                "0 <- 8.2",
                "1 <- 8.2",
                "2 <- 6.2",
                "3 <- 2.1",
                "4 <- 6.0"
            ],
            "resampled_steps": [
                "8 - 2 = 6 (left: 2 3 6)\n3 * 2 = 6 (left: 6 6)",
                "8 - 2 = 6 (left: 2 3 6)\n3 * 2 = 6 (left: 6 6)",
                "8 - 3 = 5 (left: 2 5 8)",
                "8 - 2 = 6 (left: 2 3 6)",
                "8 - 2 = 6 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)"
            ]
        },
        "step_9": {
            "steps": [
                "8 - 2 = 6 (left: 2 3 6)\n3 * 2 = 6 (left: 6 6)\n6 + 6 = 12 (left: 12)",
                "8 - 2 = 6 (left: 2 3 6)\n3 * 2 = 6 (left: 6 6)\n6 / 6 = 1 (left: 1)",
                "8 - 3 = 5 (left: 2 5 8)\n5 + 8 = 13 (left: 2 13)",
                "8 - 2 = 6 (left: 2 3 6)\n2 + 3 = 5 (left: 5 6)",
                "8 - 2 = 6 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)\n6 / 3 = 2 (left: 2)"
            ],
            "values": [
                0.0,
                0.003,
                1.002,
                1.0,
                0.002
            ],
            "resampled": [
                "0 <- 5.0",
                "1 <- 6.2",
                "2 <- 9.3",
                "3 <- 3.3",
                "4 <- 3.3"
            ],
            "resampled_steps": [
                "8 - 2 = 6 (left: 2 3 6)\n6 / 3 = 2 (left: 2 6)",
                "8 - 3 = 5 (left: 2 5 8)",
                "8 - 2 = 6 (left: 2 3 6)\n2 + 3 = 5 (left: 5 6)",
                "8 - 2 = 6 (left: 2 3 6)",
                "8 - 2 = 6 (left: 2 3 6)"
            ]
        },
        "step_10": {
            "steps": [
                "8 - 2 = 6 (left: 2 3 6)\n6 / 3 = 2 (left: 2 6)\n2 * 6 = 12 (left: 12)",
                "8 - 3 = 5 (left: 2 5 8)\n8 - 5 = 3 (left: 2 3)",
                "8 - 2 = 6 (left: 2 3 6)\n2 + 3 = 5 (left: 5 6)\n5 / 6 = 0.8333 (left: 0.8333)",
                "8 - 2 = 6 (left: 2 3 6)\n3 * 2 = 6 (left: 6 6)",
                "8 - 2 = 6 (left: 2 3 6)\n3 * 2 = 6 (left: 6 6)"
            ],
            "values": [
                0.001,
                1.0,
                0.002,
                0.003,
                20.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.7255629999999997
    },
    "46": {
        "input": "2 9 9 12",
        "step_1": {
            "steps": [
                "2 + 9 = 11 (left: 9 11 12)",
                "9 - 2 = 7 (left: 7 9 12)",
                "9 - 2 = 7 (left: 7 9 12)",
                "12 - 9 = 3 (left: 2 3 9)",
                "9 / 2 = 4.5 (left: 4.5 9 12)"
            ],
            "values": [
                2.001,
                3.0,
                2.001,
                0.003,
                3.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.1",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                "9 - 2 = 7 (left: 7 9 12)",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "12 - 9 = 3 (left: 2 3 9)",
                "2 * 9 = 18 (left: 9 12 18)",
                "9 - 2 = 7 (left: 7 9 12)\n9 + 12 = 21 (left: 7 21)",
                "9 + 2 = 11 (left: 11 9 12)",
                "9 - 2 = 7 (left: 7 9 12)"
            ],
            "values": [
                1.001,
                2.001,
                0.002,
                1.002,
                2.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                "",
                "",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "9 - 2 = 7 (left: 7 9 12)",
                "9 - 2 = 7 (left: 7 9 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12)",
                "12 - 2 = 10 (left: 9 10 12)",
                "9 * 2 = 18 (left: 18 9 12)"
            ],
            "values": [
                3.0,
                3.0,
                3.0,
                2.001,
                41.0
            ],
            "resampled": [
                "0 <- 3.3",
                "1 <- INIT",
                "2 <- 3.1",
                "3 <- 3.4",
                "4 <- 3.4"
            ],
            "resampled_steps": [
                "12 - 2 = 10 (left: 9 10 12)",
                "",
                "9 - 2 = 7 (left: 7 9 12)",
                "9 * 2 = 18 (left: 18 9 12)",
                "9 * 2 = 18 (left: 18 9 12)"
            ]
        },
        "step_4": {
            "steps": [
                "12 - 2 = 10 (left: 9 10 12)\n9 * 10 = 90 (left: 90 12)",
                "9 - 2 = 7 (left: 7 9 12)",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)",
                "9 * 2 = 18 (left: 18 9 12)\n9 - 12 = -3 (left: 18 -3)",
                "9 * 2 = 18 (left: 18 9 12)\n18 + 9 = 27 (left: 27 12)"
            ],
            "values": [
                0.002,
                3.0,
                60.0,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 4.2",
                "2 <- INIT",
                "3 <- 4.2",
                "4 <- 3.4"
            ],
            "resampled_steps": [
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)",
                "",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)",
                "9 * 2 = 18 (left: 18 9 12)"
            ]
        },
        "step_5": {
            "steps": [
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "9 - 2 = 7 (left: 7 9 12)",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "9 * 2 = 18 (left: 18 9 12)\n12 - 9 = 3 (left: 3 12)"
            ],
            "values": [
                20.0,
                0.002,
                3.0,
                0.001,
                1.002
            ],
            "resampled": [
                "0 <- 3.4",
                "1 <- 4.2",
                "2 <- 3.4",
                "3 <- 3.4",
                "4 <- 4.2"
            ],
            "resampled_steps": [
                "9 * 2 = 18 (left: 18 9 12)",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)",
                "9 * 2 = 18 (left: 18 9 12)",
                "9 * 2 = 18 (left: 18 9 12)",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)"
            ]
        },
        "step_6": {
            "steps": [
                "9 * 2 = 18 (left: 18 9 12)\n9 * 12 = 108 (left: 18 108)",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "9 * 2 = 18 (left: 18 9 12)\n9 * 12 = 108 (left: 18 108)",
                "9 * 2 = 18 (left: 18 9 12)\n18 - 9 = 9 (left: 9 12)",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)"
            ],
            "values": [
                0.003,
                40.0,
                0.002,
                1.002,
                0.002
            ],
            "resampled": [
                "0 <- 6.1",
                "1 <- 4.2",
                "2 <- 3.4",
                "3 <- 6.1",
                "4 <- 3.1"
            ],
            "resampled_steps": [
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)",
                "9 * 2 = 18 (left: 18 9 12)",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "9 - 2 = 7 (left: 7 9 12)"
            ]
        },
        "step_7": {
            "steps": [
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 - 2) * (9 - 7) * 12 = 24",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "9 * 2 = 18 (left: 18 9 12)\n18 * 9 = 162 (left: 162 12)",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 - 2) * (9 - 7) * 12 = 24",
                "9 - 2 = 7 (left: 7 9 12)\n9 + 12 = 21 (left: 7 21)"
            ],
            "values": [
                0.003,
                40.0,
                21.001,
                0.003,
                0.0
            ],
            "resampled": [
                "0 <- 7.2",
                "1 <- 7.2",
                "2 <- 7.2",
                "3 <- 4.2",
                "4 <- 4.2"
            ],
            "resampled_steps": [
                "9 * 2 = 18 (left: 18 9 12)\n18 * 9 = 162 (left: 162 12)",
                "9 * 2 = 18 (left: 18 9 12)\n18 * 9 = 162 (left: 162 12)",
                "9 * 2 = 18 (left: 18 9 12)\n18 * 9 = 162 (left: 162 12)",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)"
            ]
        },
        "step_8": {
            "steps": [
                "9 * 2 = 18 (left: 18 9 12)\n18 * 9 = 162 (left: 162 12)\n162 / 12 = 13.5 (left: 13.5 12)",
                "9 * 2 = 18 (left: 18 9 12)\n18 * 9 = 162 (left: 162 12)\n162 / 12 = 13.5 (left: 13.5)",
                "9 * 2 = 18 (left: 18 9 12)\n18 * 9 = 162 (left: 162 12)\n162 + 12 = 174 (left: 12 174)",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)"
            ],
            "values": [
                1.002,
                0.002,
                0.003,
                0.002,
                40.0
            ],
            "resampled": [
                "0 <- 6.1",
                "1 <- 4.2",
                "2 <- 7.1",
                "3 <- 8.4",
                "4 <- 7.1"
            ],
            "resampled_steps": [
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)"
            ]
        },
        "step_9": {
            "steps": [
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 - 2) * (9 - 7) * 12 = 24",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 - 2) * (9 - 7) * 12 = 24",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: 2 * (9 - (9 - 2)) * 12 = 24",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 - 2) * (9 - 7) * 12 = 24"
            ],
            "values": [
                0.003,
                0.002,
                20.002,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 8.4",
                "1 <- 7.2",
                "2 <- 9.2",
                "3 <- 9.3",
                "4 <- 7.2"
            ],
            "resampled_steps": [
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "9 * 2 = 18 (left: 18 9 12)\n18 * 9 = 162 (left: 162 12)",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 - 2) * (9 - 7) * 12 = 24",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: 2 * (9 - (9 - 2)) * 12 = 24",
                "9 * 2 = 18 (left: 18 9 12)\n18 * 9 = 162 (left: 162 12)"
            ]
        },
        "step_10": {
            "steps": [
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 - 2) * (9 - 7) * 12 = 24",
                "9 * 2 = 18 (left: 18 9 12)\n18 * 9 = 162 (left: 162 12)\n12 * 2 = 24 (left: 24 162)",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 - 2) * (9 - 7) * 12 = 24\nInput: 3 3 8 8\nSteps:\n3 * 8 = 24 (left: 3 8 24)\n8 - 3 = 5 (left: 5 24)\n5 * 24 = 120 (left: 120)\nAnswer: (3 * 8) - (8 - 3) = 24",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: 2 * (9 - (9 - 2)) * 12 = 24\nInput: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 + 3 = 19 (left: 19)\n19 + 5 = 24 (left: 24)\nAnswer: ((3 * 7) - 5) + 3 + 5 = 24",
                "9 * 2 = 18 (left: 18 9 12)\n18 * 9 = 162 (left: 162 12)\n162 + 12 = 174 (left: 174)"
            ],
            "values": [
                0.003,
                0.003,
                20.0,
                60.0,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.769702
    },
    "47": {
        "input": "11 11 11 12",
        "step_1": {
            "steps": [
                "11 * 11 = 121 (left: 11 121 12)",
                "11 - 11 = 0 (left: 0 11 12)",
                "11 + 11 = 22 (left: 11 22 12)",
                "11 - 1 = 10 (left: 10 11 12)",
                "11 * 11 = 121 (left: 11 121 12)"
            ],
            "values": [
                2.0,
                2.0,
                1.002,
                1.002,
                0.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.3",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "11 - 1 = 10 (left: 10 11 12)",
                "",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "11 + 11 = 22 (left: 11 22 12)",
                "11 - 1 = 10 (left: 10 11 12)\n12 / 10 = 1.2 (left: 1.2 11)",
                "12 - 11 = 1 (left: 11 11 1)",
                "12 - 11 = 1 (left: 11 11 1)",
                "11 / 11 = 1 (left: 1 11 12)"
            ],
            "values": [
                0.003,
                2.0,
                0.003,
                1.002,
                2.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                "",
                "",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "11 / 11 = 1 (left: 1 11 12)",
                "11 / 11 = 1 (left: 1 11 12)",
                "11 + 1 = 12 (left: 11 12 12)",
                "11 * 11 = 121 (left: 121 11 12)",
                "12 - 11 = 1 (left: 11 11 1)"
            ],
            "values": [
                0.003,
                1.002,
                0.003,
                2.001,
                1.0
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 1.0",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "11 * 11 = 121 (left: 11 121 12)",
                "11 * 11 = 121 (left: 11 121 12)",
                "",
                "",
                ""
            ]
        },
        "step_4": {
            "steps": [
                "11 * 11 = 121 (left: 11 121 12)\n12 - 11 = 1 (left: 11 1)",
                "11 * 11 = 121 (left: 11 121 12)\n12 - 11 = 1 (left: 1 1)",
                "11 + 11 = 22 (left: 11 22 12)",
                "11 + 1 = 12 (left: 11 12 12)",
                "11 * 11 = 121 (left: 11 121 12)"
            ],
            "values": [
                2.001,
                0.003,
                1.002,
                0.003,
                1.001
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 3.3",
                "2 <- 2.1",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "11 + 11 = 22 (left: 11 22 12)",
                "11 * 11 = 121 (left: 121 11 12)",
                "11 - 1 = 10 (left: 10 11 12)\n12 / 10 = 1.2 (left: 1.2 11)",
                "",
                ""
            ]
        },
        "step_5": {
            "steps": [
                "11 + 11 = 22 (left: 11 22 12)\n11 - 2 = 9 (left: 9 22 12)",
                "11 * 11 = 121 (left: 121 11 12)\n12 - 11 = 1 (left: 121 1)",
                "11 - 1 = 10 (left: 10 11 12)\n12 / 10 = 1.2 (left: 1.2 11)\n11 - 1.2 = 9.8 (left: 9.8)",
                "11 / 11 = 1 (left: 1 11 12)",
                "11 / 11 = 1 (left: 1 11 12)"
            ],
            "values": [
                3.0,
                21.0,
                0.003,
                0.002,
                1.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 4.0",
                "2 <- 2.4",
                "3 <- 5.1",
                "4 <- 5.0"
            ],
            "resampled_steps": [
                "",
                "11 * 11 = 121 (left: 11 121 12)\n12 - 11 = 1 (left: 11 1)",
                "11 / 11 = 1 (left: 1 11 12)",
                "11 * 11 = 121 (left: 121 11 12)\n12 - 11 = 1 (left: 121 1)",
                "11 + 11 = 22 (left: 11 22 12)\n11 - 2 = 9 (left: 9 22 12)"
            ]
        },
        "step_6": {
            "steps": [
                "11 + 11 = 22 (left: 11 22 12)",
                "11 * 11 = 121 (left: 11 121 12)\n12 - 11 = 1 (left: 11 1)\n11 + 1 = 12 (left: 12)",
                "11 / 11 = 1 (left: 1 11 12)\n1 * 11 = 11 (left: 11 12)",
                "11 * 11 = 121 (left: 121 11 12)\n12 - 11 = 1 (left: 121 1)\n121 - 1 = 120 (left: 1 120)",
                "11 + 11 = 22 (left: 11 22 12)\n11 - 2 = 9 (left: 9 22 12)\n22 - 12 = 10 (left: 9 10)"
            ],
            "values": [
                2.001,
                0.002,
                0.003,
                0.001,
                1.002
            ],
            "resampled": [
                "0 <- 5.1",
                "1 <- 5.4",
                "2 <- 3.4",
                "3 <- 5.1",
                "4 <- 6.0"
            ],
            "resampled_steps": [
                "11 * 11 = 121 (left: 121 11 12)\n12 - 11 = 1 (left: 121 1)",
                "11 / 11 = 1 (left: 1 11 12)",
                "12 - 11 = 1 (left: 11 11 1)",
                "11 * 11 = 121 (left: 121 11 12)\n12 - 11 = 1 (left: 121 1)",
                "11 + 11 = 22 (left: 11 22 12)"
            ]
        },
        "step_7": {
            "steps": [
                "11 * 11 = 121 (left: 121 11 12)\n12 - 11 = 1 (left: 121 1)\n121 + 1 = 122 (left: 1 122)",
                "11 / 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 11 11 1)\n11 * 11 = 121 (left: 121 1)",
                "11 * 11 = 121 (left: 121 11 12)\n12 - 11 = 1 (left: 121 1)\n121 - 1 = 120 (left: 1 120)",
                "11 + 11 = 22 (left: 11 22 12)\n11 / 22 = 0.5 (left: 0.5 12)"
            ],
            "values": [
                0.002,
                60.0,
                20.001,
                0.003,
                22.0
            ],
            "resampled": [
                "0 <- 7.1",
                "1 <- 7.1",
                "2 <- 7.1",
                "3 <- 7.1",
                "4 <- 7.1"
            ],
            "resampled_steps": [
                "11 / 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)",
                "11 / 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)",
                "11 / 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)",
                "11 / 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)",
                "11 / 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)"
            ]
        },
        "step_8": {
            "steps": [
                "11 / 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0 12)",
                "11 / 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "11 / 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)",
                "11 / 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "11 / 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)"
            ],
            "values": [
                0.003,
                0.002,
                0.003,
                20.0,
                0.001
            ],
            "resampled": [
                "0 <- 7.4",
                "1 <- 8.3",
                "2 <- 8.3",
                "3 <- 8.3",
                "4 <- 7.4"
            ],
            "resampled_steps": [
                "11 + 11 = 22 (left: 11 22 12)\n11 / 22 = 0.5 (left: 0.5 12)",
                "11 / 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "11 / 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "11 / 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "11 + 11 = 22 (left: 11 22 12)\n11 / 22 = 0.5 (left: 0.5 12)"
            ]
        },
        "step_9": {
            "steps": [
                "11 + 11 = 22 (left: 11 22 12)\n11 / 22 = 0.5 (left: 0.5 12)\n12 / 0.5 = 24 (left: 24)",
                "11 / 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (11 / 11) * (11 + 12) = 24",
                "11 / 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (11 / 11) * (11 + 12) = 24",
                "11 / 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (11 / 11) * (11 + 12) = 24",
                "11 + 11 = 22 (left: 11 22 12)\n11 / 22 = 0.5 (left: 0.5 12)\n12 - 0.5 = 11.5 (left: 11.5)"
            ],
            "values": [
                40.0,
                60.0,
                60.0,
                40.001,
                0.001
            ],
            "resampled": [
                "0 <- 9.2",
                "1 <- 5.0",
                "2 <- 9.2",
                "3 <- 9.2",
                "4 <- 9.3"
            ],
            "resampled_steps": [
                "11 / 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (11 / 11) * (11 + 12) = 24",
                "11 + 11 = 22 (left: 11 22 12)\n11 - 2 = 9 (left: 9 22 12)",
                "11 / 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (11 / 11) * (11 + 12) = 24",
                "11 / 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (11 / 11) * (11 + 12) = 24",
                "11 / 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (11 / 11) * (11 + 12) = 24"
            ]
        },
        "step_10": {
            "steps": [
                "11 / 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (11 / 11) * (11 + 12) = 24\nInput: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n9 * 1 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\n27 - 9 = 18 (left: 18)\n18 / 9 = 2 (left: 2)\n8 * 2 = 16 (left: 16)\n16 + 9 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 + 3 = ",
                "11 + 11 = 22 (left: 11 22 12)\n11 - 2 = 9 (left: 9 22 12)\n12 * 9 = 108 (left: 108 22)",
                "11 / 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (11 / 11) * (11 + 12) = 24\nInput: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n9 * 1 = 9 (left: 9)\nAnswer: (3 * 3) - (8 - 9) = 24",
                "11 / 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (11 / 11) * (11 + 12) = 24\nInput: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n9 * 1 = 9 (left: 9)\nAnswer: (3 * 3) * (8 - 9) = 24",
                "11 / 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (11 / 11) * (11 + 12) = 24\nInput: 3 3 8 8\nSteps:\n3 * 8 = 24 (left: 3 8 24)\n3 * 8 = 24 (left: 24)\nAnswer: 3 * 8 = 24"
            ],
            "values": [
                60.0,
                0.003,
                40.0,
                20.0,
                20.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.815423
    },
    "48": {
        "input": "3 8 13 13",
        "step_1": {
            "steps": [
                "8 - 3 = 5 (left: 5 8 13)",
                "3 / 8 = 0.375 (left: 0.375 13 13)",
                "8 - 3 = 5 (left: 5 8 13)",
                "13 - 8 = 5 (left: 3 5 13)",
                "8 - 3 = 5 (left: 5 13 13)"
            ],
            "values": [
                1.002,
                1.002,
                2.001,
                21.001,
                3.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                "",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "8 / 3 = 2.67 (left: 2.67 8 13)",
                "13 / 3 = 4.333333333333333 (left: 4.333333333333333 8 13)",
                "3 + 8 = 11 (left: 11 13 13)",
                "8 - 3 = 5 (left: 5 8 13)",
                "13 / 8 = 1.625 (left: 3 13 13)"
            ],
            "values": [
                2.001,
                3.0,
                1.002,
                3.0,
                2.001
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 2.0",
                "2 <- 2.1",
                "3 <- 1.1",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "13 - 8 = 5 (left: 3 5 13)",
                "8 / 3 = 2.67 (left: 2.67 8 13)",
                "13 / 3 = 4.333333333333333 (left: 4.333333333333333 8 13)",
                "3 / 8 = 0.375 (left: 0.375 13 13)",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "13 - 8 = 5 (left: 3 5 13)\n5 * 3 = 15 (left: 15 13)",
                "8 / 3 = 2.67 (left: 2.67 8 13)\n13 / 2.67 = 4.87 (left: 4.87 8)",
                "13 / 3 = 4.333333333333333 (left: 4.333333333333333 8 13)\n8 * 4.333333333333333 = 34.666666666666664 (left: 34.666666666666664 13)",
                "3 / 8 = 0.375 (left: 0.375 13 13)\n13 / 0.375 = 34.667 (left: 34.667 13)",
                "8 / 3 = 2.67 (left: 2.67 8 13)"
            ],
            "values": [
                0.003,
                1.002,
                0.003,
                0.001,
                2.001
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- INIT",
                "2 <- 1.3",
                "3 <- 3.4",
                "4 <- 3.4"
            ],
            "resampled_steps": [
                "13 / 3 = 4.333333333333333 (left: 4.333333333333333 8 13)",
                "",
                "13 - 8 = 5 (left: 3 5 13)",
                "8 / 3 = 2.67 (left: 2.67 8 13)",
                "8 / 3 = 2.67 (left: 2.67 8 13)"
            ]
        },
        "step_4": {
            "steps": [
                "13 / 3 = 4.333333333333333 (left: 4.333333333333333 8 13)\n13 - 8 = 5 (left: 4.333333333333333 5)",
                "8 - 3 = 5 (left: 5 8 13)",
                "13 - 8 = 5 (left: 3 5 13)\n3 + 5 = 8 (left: 8 13)",
                "8 / 3 = 2.67 (left: 2.67 8 13)\n13 - 2.67 \u2248 10.33 (left: 8 10.33)",
                "8 / 3 = 2.67 (left: 2.67 8 13)\n2.67 + 8 = 10.67 (left: 10.67 13)"
            ],
            "values": [
                0.001,
                0.003,
                1.001,
                0.001,
                1.002
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- INIT",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "13 - 8 = 5 (left: 3 5 13)",
                "13 - 8 = 5 (left: 3 5 13)",
                "13 - 8 = 5 (left: 3 5 13)",
                "",
                "3 / 8 = 0.375 (left: 0.375 13 13)"
            ]
        },
        "step_5": {
            "steps": [
                "13 - 8 = 5 (left: 3 5 13)\n5 * 3 = 15 (left: 15 13)",
                "13 - 8 = 5 (left: 3 5 13)\n3 + 5 = 8 (left: 8 13)",
                "13 - 8 = 5 (left: 3 5 13)\n5 * 3 = 15 (left: 15 13)",
                "13 - 8 = 5 (left: 3 5 13)",
                "3 / 8 = 0.375 (left: 0.375 13 13)\n13 - 0.375 = 12.625 (left: 12.625 13)"
            ],
            "values": [
                0.003,
                1.001,
                0.003,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 5.3",
                "1 <- 5.3",
                "2 <- 1.2",
                "3 <- 5.3",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "13 - 8 = 5 (left: 3 5 13)",
                "13 - 8 = 5 (left: 3 5 13)",
                "8 - 3 = 5 (left: 5 8 13)",
                "13 - 8 = 5 (left: 3 5 13)",
                "13 / 3 = 4.333333333333333 (left: 4.333333333333333 8 13)"
            ]
        },
        "step_6": {
            "steps": [
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)",
                "13 - 8 = 5 (left: 3 5 13)\n5 + 3 = 8 (left: 8 13)",
                "8 - 3 = 5 (left: 5 8 13)\n13 - 5 = 8 (left: 8 13)",
                "13 - 8 = 5 (left: 3 5 13)\n5 * 3 = 15 (left: 15 13)",
                "13 / 3 = 4.333333333333333 (left: 4.333333333333333 8 13)\n13 - 8 = 5 (left: 4.333333333333333 5)"
            ],
            "values": [
                60.0,
                1.002,
                0.002,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 5.3",
                "1 <- 6.0",
                "2 <- 1.3",
                "3 <- 6.0",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "13 - 8 = 5 (left: 3 5 13)",
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)",
                "13 - 8 = 5 (left: 3 5 13)",
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)",
                "13 - 8 = 5 (left: 3 5 13)"
            ]
        },
        "step_7": {
            "steps": [
                "13 - 8 = 5 (left: 3 5 13)\n5 * 3 = 15 (left: 15 13)",
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)\n3 * 8 = 24 (left: 8 24)",
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)",
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5)",
                "13 - 8 = 5 (left: 3 5 13)\n13 + 3 = 16 (left: 5 16)"
            ],
            "values": [
                0.003,
                0.003,
                60.0,
                0.002,
                1.0
            ],
            "resampled": [
                "0 <- 7.2",
                "1 <- 6.0",
                "2 <- 7.2",
                "3 <- 5.3",
                "4 <- 7.2"
            ],
            "resampled_steps": [
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)",
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)",
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)",
                "13 - 8 = 5 (left: 3 5 13)",
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)"
            ]
        },
        "step_8": {
            "steps": [
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)\n3 * 8 = 24 (left: 8 24)",
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)\n3 * 8 = 24 (left: 8 24)",
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5 8)",
                "13 - 8 = 5 (left: 3 5 13)\n3 + 5 = 8 (left: 8 13)",
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5 8)"
            ],
            "values": [
                1.002,
                0.003,
                0.002,
                1.002,
                2.001
            ],
            "resampled": [
                "0 <- 6.0",
                "1 <- 5.3",
                "2 <- 7.2",
                "3 <- 6.0",
                "4 <- 6.0"
            ],
            "resampled_steps": [
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)",
                "13 - 8 = 5 (left: 3 5 13)",
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)",
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)",
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)"
            ]
        },
        "step_9": {
            "steps": [
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)\n3 + 8 = 11 (left: 11)",
                "13 - 8 = 5 (left: 3 5 13)\n13 - 3 = 10 (left: 5 10)",
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)\n3 + 8 = 11 (left: 8 11)",
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)\n8 / 3 = 2.67 (left: 2.67 8)",
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)\n3 * 8 = 24 (left: 8 24)"
            ],
            "values": [
                0.002,
                0.0,
                0.002,
                3.0,
                1.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 6.0",
                "2 <- 7.2",
                "3 <- 5.3",
                "4 <- 5.3"
            ],
            "resampled_steps": [
                "",
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)",
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)",
                "13 - 8 = 5 (left: 3 5 13)",
                "13 - 8 = 5 (left: 3 5 13)"
            ]
        },
        "step_10": {
            "steps": [
                "3 * 8 = 24 (left: 24 13 13)",
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5 8)",
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)",
                "13 - 8 = 5 (left: 3 5 13)\n5 * 13 = 65 (left: 3 65)"
            ],
            "values": [
                20.001,
                40.0,
                0.003,
                60.0,
                2.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.862653
    },
    "49": {
        "input": "9 9 12 12",
        "step_1": {
            "steps": [
                "12 - 9 = 3 (left: 9 3 12)",
                "12 - 9 = 3 (left: 9 3 12)",
                "12 - 9 = 3 (left: 9 3 12)",
                "9 / 9 = 1 (left: 1 12 12)",
                "12 - 9 = 3 (left: 3 9 12)"
            ],
            "values": [
                2.001,
                3.0,
                2.001,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "",
                "",
                "",
                "",
                "12 - 9 = 3 (left: 9 3 12)"
            ]
        },
        "step_2": {
            "steps": [
                "9 / 9 = 1 (left: 1 12 12)",
                "12 - 9 = 3 (left: 9 12 3)",
                "12 - 9 = 3 (left: 3 9 12)",
                "12 - 9 = 3 (left: 9 12 3)",
                "12 - 9 = 3 (left: 9 3 12)\n9 / 3 = 3 (left: 3 12)"
            ],
            "values": [
                20.002,
                2.001,
                0.003,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- INIT",
                "2 <- 2.0",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "9 / 9 = 1 (left: 1 12 12)",
                "",
                "9 / 9 = 1 (left: 1 12 12)",
                "",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "12 + 9 = 21 (left: 9 21 12)",
                "9 / 9 = 1 (left: 1 12 12)\n12 - 12 = 0 (left: 1 0)",
                "12 / 9 = 1.33 (left: 9 12 1.33)",
                "12 - 9 = 3 (left: 3 9 12)"
            ],
            "values": [
                21.001,
                21.001,
                2.0,
                1.002,
                1.002
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 3.0",
                "2 <- 3.1",
                "3 <- 3.1",
                "4 <- 2.0"
            ],
            "resampled_steps": [
                "12 + 9 = 21 (left: 9 21 12)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "12 + 9 = 21 (left: 9 21 12)",
                "12 + 9 = 21 (left: 9 21 12)",
                "9 / 9 = 1 (left: 1 12 12)"
            ]
        },
        "step_4": {
            "steps": [
                "12 + 9 = 21 (left: 9 21 12)\n12 - 9 = 3 (left: 3 21)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "12 + 9 = 21 (left: 9 21 12)\n21 / 3 = 7 (left: 9 7 12)",
                "12 + 9 = 21 (left: 9 21 12)\n9 * 21 = 189 (left: 189 12)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)"
            ],
            "values": [
                0.003,
                0.002,
                3.0,
                0.003,
                41.0
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 2.0",
                "2 <- 4.4",
                "3 <- 4.4",
                "4 <- 4.2"
            ],
            "resampled_steps": [
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "9 / 9 = 1 (left: 1 12 12)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "12 + 9 = 21 (left: 9 21 12)\n21 / 3 = 7 (left: 9 7 12)"
            ]
        },
        "step_5": {
            "steps": [
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1 12)",
                "9 / 9 = 1 (left: 1 12 12)\n12 - 1 = 11 (left: 11 12)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "12 + 9 = 21 (left: 9 21 12)\n21 / 3 = 7 (left: 9 7 12)\n7 + 12 = 19 (left: 9 19)"
            ],
            "values": [
                2.001,
                0.003,
                0.002,
                0.0,
                0.003
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 1.2",
                "2 <- 4.4",
                "3 <- 3.0",
                "4 <- 4.4"
            ],
            "resampled_steps": [
                "9 / 9 = 1 (left: 1 12 12)",
                "12 - 9 = 3 (left: 9 3 12)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)"
            ]
        },
        "step_6": {
            "steps": [
                "9 / 9 = 1 (left: 1 12 12)\n12 - 1 = 11 (left: 11 12)",
                "12 - 9 = 3 (left: 9 3 12)\n12 - 9 = 3 (left: 3 3)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)"
            ],
            "values": [
                0.002,
                0.002,
                0.0,
                20.001,
                0.001
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 6.3",
                "2 <- 6.3",
                "3 <- 6.3",
                "4 <- 3.0"
            ],
            "resampled_steps": [
                "9 / 9 = 1 (left: 1 12 12)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)"
            ]
        },
        "step_7": {
            "steps": [
                "9 / 9 = 1 (left: 1 12 12)\n1 + 12 = 13 (left: 12 13)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)\n- 144 / 16 = 9",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)\n12 * 12 = 144 (left: 12 12)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)\n144 - 2 = 142 (left: 2 144 142)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)"
            ],
            "values": [
                0.003,
                0.003,
                20.002,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- 4.4",
                "1 <- 3.1",
                "2 <- 7.2",
                "3 <- 4.2",
                "4 <- 5.0"
            ],
            "resampled_steps": [
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "12 + 9 = 21 (left: 9 21 12)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)\n12 * 12 = 144 (left: 12 12)",
                "12 + 9 = 21 (left: 9 21 12)\n21 / 3 = 7 (left: 9 7 12)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1 12)"
            ]
        },
        "step_8": {
            "steps": [
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "12 + 9 = 21 (left: 9 21 12)\n21 - 9 = 12 (left: 12 12)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)\n12 * 12 = 144 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "12 + 9 = 21 (left: 9 21 12)\n21 / 3 = 7 (left: 9 7 12)\n7 + 12 = 19 (left: 9 19)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1 12)\n1 + 12 = 13 (left: 13)"
            ],
            "values": [
                0.002,
                60.0,
                60.0,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 7.2",
                "1 <- 3.0",
                "2 <- 8.1",
                "3 <- 6.3",
                "4 <- 8.2"
            ],
            "resampled_steps": [
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)\n12 * 12 = 144 (left: 12 12)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "12 + 9 = 21 (left: 9 21 12)\n21 - 9 = 12 (left: 12 12)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)\n12 * 12 = 144 (left: 12 12)\n12 + 12 = 24 (left: 24)"
            ]
        },
        "step_9": {
            "steps": [
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)\n12 * 12 = 144 (left: 12 12)\n12 / 12 = 1 (left: 1)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "12 + 9 = 21 (left: 9 21 12)\n21 - 9 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)\n144 - 12 = 132 (left: 12 132)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)\n12 * 12 = 144 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((9 / 9) * 12) + (12 + 12) = 24"
            ],
            "values": [
                0.003,
                20.0,
                0.003,
                0.003,
                40.001
            ],
            "resampled": [
                "0 <- 8.2",
                "1 <- 3.0",
                "2 <- 6.3",
                "3 <- 8.2",
                "4 <- 7.2"
            ],
            "resampled_steps": [
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)\n12 * 12 = 144 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)\n12 * 12 = 144 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)\n12 * 12 = 144 (left: 12 12)"
            ]
        },
        "step_10": {
            "steps": [
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)\n12 * 12 = 144 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((9 / 9) * 12) + (12 + 12) = 24",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)\n12 * 12 = 144 (left: 12 12)",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)\n12 * 12 = 144 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((9 / 9) * 12) + (12 * 12) = 24",
                "9 / 9 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)\n12 * 12 = 144 (left: 12 12)\n12 * 12 = 144 (left: 144)"
            ],
            "values": [
                60.0,
                0.003,
                60.0,
                20.002,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.9057240000000002
    }
}