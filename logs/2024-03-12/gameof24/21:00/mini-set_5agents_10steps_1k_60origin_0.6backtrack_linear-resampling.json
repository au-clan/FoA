{
    "0": {
        "puzzle": "1 1 4 6",
        "Step 0": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6)",
                "1 * 4 = 4 (left: 4 4 6)",
                "6 - 1 = 5 (left: 1 4 5)",
                "6 - 4 = 2 (left: 1 2 6)",
                "6 - 1 = 5 (left: 1 4 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                40.0,
                3.0,
                3.0,
                0.003,
                2.0
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.0",
                "2 <- 0.0",
                "3 <- 0.0",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6)",
                "1 * 1 = 1 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6)",
                "4 - 1 = 3 (left: 1 3 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.2",
                "2 <- 1.4",
                "3 <- 1.4",
                "4 <- 0.0"
            ]
        },
        "Step 2": {
            "steps": [
                "4 - 1 = 3 (left: 1 3 6) || 3 * 6 = 18 (left: 1 18)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 - 1 = 23 (left: 23)",
                "4 - 1 = 3 (left: 1 3 6) || 5",
                "4 - 1 = 3 (left: 1 3 6) || 1 * 3 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.0,
                0.003,
                0.003,
                0.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.4",
                "2 <- 1.0",
                "3 <- 1.3",
                "4 <- 1.2"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 / 24 = 0.04166666667 (left: 0.04166666667)",
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 + 24 = 25 (left: 25)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                0.003,
                0.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.0",
                "1 <- 1.4",
                "2 <- 2.4",
                "3 <- 3.0",
                "4 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 6) || 1 * 4 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "4 - 1 = 3 (left: 1 3 6) || 1 * 6 = 6 (left: 6",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: 1 * (4 * 6) = 24",
                "1 * 1 = 1 (left: 1 4 6) || 4 * 6 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24) || Answer: (1 * 1) * (4 * 6) = 24"
            ]
        },
        "Input": "1 1 4 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 1
            }
        ]
    },
    "1": {
        "puzzle": "1 1 11 11",
        "Step 0": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11)",
                "1 * 1 = 1 (left: 1 11 11)",
                "11 * 1 = 11 (left: 1 11 11)",
                "11 / 1 = 11 (left: 1 11 ",
                "11 * 1 = 11 (left: 1 11 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                1.002,
                1.002,
                40.0,
                1.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.3",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11)",
                "11 / 1 = 11 (left: 1 11  || 1 + 11 = 12 (left: 12)",
                "11 / 1 = 11 (left: 1 11 11)",
                "1 + 1 = 2 (left: 2 11 11)",
                "11 - 1 = 10 (left: 1 10 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                1.002,
                20.002,
                1.002
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- INIT",
                "2 <- 0.3",
                "3 <- 1.2",
                "4 <- INIT"
            ]
        },
        "Step 2": {
            "steps": [
                "11 / 1 = 11 (left: 1 11  || 11 + 1 = 12 (left: 12)",
                "1 * 1 = 1 (left: 1 11 11)",
                "11 / 1 = 11 (left: 1 11  || 11 / 1 = 11 (left: 11)",
                "11 / 1 = 11 (left: 1 11 11) || 11 - 1 = 10 (left: 10 11 11)",
                "1 + 1 = 2 (left: 2 11 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.3",
                "2 <- 0.3",
                "3 <- 1.3",
                "4 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "11 / 1 = 11 (left: 1 11 ",
                "1 + 1 = 2 (left: 2 11 11) || 11 - 2 = 9 (left: 2 9 11)",
                "11 / 1 = 11 (left: 1 11  || 11 - 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 2 11 11) || Input: 3 6 12",
                "1 + 1 = 2 (left: 2 11 11) || 11 - 2 = 9 (left: 9 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                1.002,
                0.003,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 3.1",
                "1 <- 0.3",
                "2 <- 3.1",
                "3 <- 1.3",
                "4 <- 1.3"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 11) || 11 - 2 = 9 (left: 2 9 11) || 11 - 2 = 9 (left: 9 11)",
                "11 / 1 = 11 (left: 1 11  || 11 / 1 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 11 11) || 11 - 2 = 9 (left: 2 9 11) || 11 - 9 = 2 (left: 2 11)",
                "1 + 1 = 2 (left: 2 11 11) || 11 * 2 = 22 (left: 11 22)",
                "1 + 1 = 2 (left: 2 11 11) || 11 * 2 = 22 (left: 11 11 22)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.3",
                "2 <- 0.3",
                "3 <- 1.3",
                "4 <- INIT"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 11) || 6 - 10 = -4 (",
                "11 / 1 = 11 (left: 1 11  || 11 - 1 = 10 (left: 10)",
                "11 / 1 = 11 (left: 1 11  || 11 / 1 = 11 (left: 11)",
                "1 + 1 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13)",
                "1 + 1 = 2 (left: 2 11 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.002,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 5.3",
                "2 <- 5.3",
                "3 <- 5.3",
                "4 <- 1.3"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 13 - 11 = 2 (left: 2)",
                "1 + 1 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 13 - 11 = 2 (left: 2)",
                "1 + 1 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 + 1 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 + 1 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 11 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.001,
                0.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 5.3",
                "2 <- 5.3",
                "3 <- 5.3",
                "4 <- 5.3"
            ]
        },
        "Step 7": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 + 13 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 - 13 = -2 (left: -2)",
                "1 + 1 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 + 13 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 * 13 = 143 (left: 143)",
                "1 + 1 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 * 13 = 143 (left: 143)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.002,
                60.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 7.2",
                "1 <- 7.0",
                "2 <- 7.2",
                "3 <- 7.0",
                "4 <- 7.0"
            ]
        },
        "Step 8": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((1 + 1) + 11) + 11 = 24",
                "1 + 1 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((1 + 1) + 11) + 11 = 24",
                "1 + 1 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((1 + 1) + 11) + 11 = 24",
                "1 + 1 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((1 + 1) + 11) + 11 = 24",
                "1 + 1 = 2 (left: 2 11 11) || 2 + 11 = 13 (left: 11 13) || 11 + 13 = 24 (left: 24) || Answer: ((1 + 1) + 11) + 11 = 24"
            ]
        },
        "Input": "1 1 11 11",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            }
        ]
    },
    "2": {
        "puzzle": "1 1 3 8",
        "Step 0": {
            "steps": [
                "8 - 1 = 7 (left: 1 3 7)",
                "8 - 3 = 5 (left: 1 5 8)",
                "3 + 1 = 4 (left: 4 1 8)",
                "1 + 1 = 2 (left: 2 3 8)",
                "3 + 1 = 4 (left: 1 4 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                3.0,
                3.0,
                1.002,
                1.002,
                1.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "8 - 3 = 5 (left: 1 3 5)",
                "8 / 3 = 2 (left: 1 2 ",
                "8 - 3 = 5 (left: 1 5 8)",
                "1 * 1 = 1 (left: 1 3 8)",
                "8 - 1 = 7 (left: 1 3 7)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.001,
                1.002,
                3.0,
                60.0,
                22.0
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- INIT",
                "4 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8) || 8 / 3 = 2.66667 (left: 1 2.66667)",
                "1 * 1 = 1 (left: 1 3 8) || 8 / 1 = 8 (left: 8)",
                "1 * 1 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5)",
                "8 - 3 = 5 (left: 1 3 5)",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.001,
                0.001,
                60.0,
                2.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.4",
                "2 <- 2.4",
                "3 <- 2.4",
                "4 <- INIT"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 5 / 1 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5 8)",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 4 + 10 = 14 (left: 10)",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 + 8 = 11 (left: 8)",
                "1 * 1 = 1 (left: 1 3 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                1.002,
                0.002,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 3.4",
                "2 <- 3.4",
                "3 <- 1.3",
                "4 <- 2.2"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 1 + 5 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 3 8) || 1 + 3 = 4 (left: 4 8)",
                "1 * 1 = 1 (left: 1 3 8) || 1 + 3 = 4 (left: 4 8)",
                "1 * 1 = 1 (left: 1 3 8) || 8 / 3 = 2 (left: 1 2)",
                "1 * 1 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 1 * 5 = 5 (left: 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.002
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 3.4",
                "2 <- 3.4",
                "3 <- 3.4",
                "4 <- 3.4"
            ]
        },
        "Step 5": {
            "steps": [
                "8 - 1 = 7 (left: 1 3 7) || 3 * 7 = 21 (left: 1 21)",
                "1 * 1 = 1 (left: 1 3 8) || 3 - 1 = 2 (left: 2 8)",
                "1 * 1 = 1 (left: 1 3 8) || 8 - 1 = 7 (left: 3 7)",
                "1 * 1 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)",
                "1 * 1 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.002,
                21.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 5.3",
                "2 <- 5.2",
                "3 <- 5.4",
                "4 <- 2.4"
            ]
        },
        "Step 6": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 8 / 3 = 2.67 (left: 2.67)",
                "1 * 1 = 1 (left: 1 3 8) || 8 - 1 = 7 (left: 3 7) || 3 * 7 = 21 (left: 21)",
                "1 * 1 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                0.003,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 3.4",
                "2 <- 2.4",
                "3 <- 3.4",
                "4 <- 2.2"
            ]
        },
        "Step 7": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 1 = 3 (left: 3 8) || 3 * 8 = 24 (left: 8)",
                "1 * 1 = 1 (left: 1 3 8) || 8 - 1 = 7 (left: 3 7)",
                "1 * 1 = 1 (left: 1 3 8) || 8 - 3 = 5 (left: 1 5) || 1 + 5 = 6 (left: 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                60.0,
                0.002,
                2.0,
                0.002
            ],
            "Resampling": [
                "0 <- 7.0",
                "1 <- 7.0",
                "2 <- 7.1",
                "3 <- 7.0",
                "4 <- 7.1"
            ]
        },
        "Step 8": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 1) * (3 * 8) = 24",
                "1 * 1 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 1) * (3 * 8) = 24",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 24 / 1 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 3 8) || 1 * 3 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 * 1) * (3 * 8) = 24",
                "1 * 1 = 1 (left: 1 3 8) || 3 * 8 = 24 (left: 1 24) || 1 * 24 = 24 (left: 24)"
            ]
        },
        "Input": "1 1 3 8",
        "Verifications": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ]
    },
    "3": {
        "puzzle": "1 1 1 8",
        "Step 0": {
            "steps": [
                "8 / 1 = 8 (left: 1 1 ",
                "1 + 1 = 2 (left: 1 2 8)",
                "8 - 1 = 7 (left: 1 1 7)",
                "1 + 1 = 2 (left: 1 2 8)",
                "1 * 1 = 1 (left: 1 1 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                41.0,
                3.0,
                60.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.2",
                "1 <- 0.3",
                "2 <- 0.1",
                "3 <- 0.1",
                "4 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "8 - 1 = 7 (left: 1 1 7) || 7 / 1 = 7 (left: 1 7)",
                "1 + 1 = 2 (left: 1 2 8) || 2 * 8 = 16 (left: 1 16)",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 1 2 8) || Possible next steps:",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                21.0,
                0.001,
                60.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 0.1",
                "2 <- 1.2",
                "3 <- 1.2",
                "4 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8)",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 / 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                60.0,
                0.003,
                0.002,
                0.001
            ],
            "Resampling": [
                "0 <- 2.1",
                "1 <- 1.2",
                "2 <- 0.3",
                "3 <- 2.1",
                "4 <- 2.1"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 * 1 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 + 8 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 8 - 3 = 5 (left: 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.001,
                60.0,
                0.003,
                0.001
            ],
            "Resampling": [
                "0 <- 0.3",
                "1 <- 3.0",
                "2 <- 3.2",
                "3 <- 1.2",
                "4 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 8) || 8 / 2 = 4 (left: 1 4)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: (1 + 1) * (1 + 8) = 24",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 10 - 1 = 9 (left: 9)",
                "1 + 1 = 2 (left: 1 2 8) || 2 + 8 = 10 (left: 1 10) || 1 + 10 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 8) || 1 + 2 = 3 (left: 3 8) || 3 * 8 = 24 (left: 24) || Answer: ((1 + 1) + 1) * 8 = 24"
            ]
        },
        "Input": "1 1 1 8",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": -1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "4": {
        "puzzle": "6 6 6 6",
        "Step 0": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 / 6 = 1 (left: 6 1 6)",
                "6 + 6 = 12 (left: 6 6 12)",
                "6 - 6 = 0 (left: 0 6 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                22.0,
                41.0,
                60.0,
                60.0,
                21.001
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 0.2",
                "2 <- 0.4",
                "3 <- 0.3",
                "4 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "6 - 6 = 0 (left: 0 6 6) || 6 / 6 = 1 (left: 1 6)",
                "6 / 6 = 1 (left: 6 1 6) || Possible next steps:",
                "6 - 6 = 0 (left: 0 6 6) || 3 + 5 = 8 (left: 1 4 8",
                "6 + 6 = 12 (left: 6 6 12) || 6 * 6 = 36 (left: 12 36)",
                "6 + 6 = 12 (left: 6 6 12) || 12 - 6 = 6 (left: 6 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                1.002,
                20.002,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 0.3",
                "2 <- 0.2",
                "3 <- 1.0",
                "4 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "6 + 6 = 12 (left: 6 6 12) || 6 * 6 = 36 (left: 12 36) || 24 - 3 = 21 (left: 21)",
                "6 + 6 = 12 (left: 6 6 12) || Input: 0 12",
                "6 / 6 = 1 (left: 6 1 6) || 6 - 1 = 5 (left: 5 6)",
                "6 - 6 = 0 (left: 0 6 6) || 6 / 6 = 1 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 36)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                0.002,
                0.001,
                40.0
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 0.2",
                "2 <- 0.1",
                "3 <- 0.2",
                "4 <- 0.0"
            ]
        },
        "Step 3": {
            "steps": [
                "6 - 6 = 0 (left: 0 6 6) || 3 + 5 = 8 (left: 1 4 8 || 8 - 4 = 4 (left: 1 4)",
                "6 / 6 = 1 (left: 6 1 6) || 6 + 1 = 7 (left: 7 6)",
                "6 * 6 = 36 (left: 6 6 36) || 36 / 6 = 6 (left: 6 6)",
                "6 / 6 = 1 (left: 6 1 6) || 1 + 6 = 7 (left: 7 6)",
                "6 + 6 = 12 (left: 6 12 6) || 6 / 12 = 0.5 (left: 0.5 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                0.002,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 1.3",
                "2 <- 3.0",
                "3 <- 1.0",
                "4 <- 3.0"
            ]
        },
        "Step 4": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 36) || 36 / 2 = 18",
                "6 + 6 = 12 (left: 6 6 12) || 6 * 6 = 36 (left: 12 36) || 12 * 36 = 432 (left: 432)",
                "6 - 6 = 0 (left: 0 6 6) || 3 + 5 = 8 (left: 1 4 8 || 8 - 4 = 4 (left: 1 4) || 1 + 4 = 5 (left: 5)",
                "6 - 6 = 0 (left: 0 6 6) || 6 / 6 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "6 - 6 = 0 (left: 0 6 6) || 3 + 5 = 8 (left: 1 4 8 || 8 - 4 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)"
            ],
            "Pruning": [
                "2<-3.0",
                "4<-1.0"
            ],
            "Evaluation": [
                0.003,
                0.002,
                41.0,
                0.002,
                60.0
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- 0.0",
                "2 <- 4.4",
                "3 <- 2.4",
                "4 <- 3.0"
            ]
        },
        "Step 5": {
            "steps": [
                "6 - 6 = 0 (left: 0 6 6) || 3 + 5 = 8 (left: 1 4 8 || 8 - 4 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 18",
                "6 - 6 = 0 (left: 0 6 6) || 6 / 6 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 36) || None, as there is only one number provided.",
                "6 - 6 = 0 (left: 0 6 6) || 3 + 5 = 8 (left: 1 4 8 || 8 - 4 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)"
            ],
            "Pruning": [
                "0<-4.4",
                "4<-4.4"
            ],
            "Evaluation": [
                60.0,
                20.0,
                0.003,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 5.1",
                "2 <- 5.0",
                "3 <- 2.4",
                "4 <- 5.0"
            ]
        },
        "Step 6": {
            "steps": [
                "6 - 6 = 0 (left: 0 6 6) || 6 / 6 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 18 || There are no possible next steps with the input of 18.",
                "6 - 6 = 0 (left: 0 6 6) || 6 / 6 = 1 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "6 * 6 = 36 (left: 6 6 36) || 6 * 6 = 36 (left: 36) || There are no possible next steps with just the number 36.",
                "6 - 6 = 0 (left: 0 6 6) || 6 / 6 = 1 (left: 1 6) || 1 + 6 = 7"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- 3.0",
                "2 <- 5.0",
                "3 <- 4.4",
                "4 <- 5.1"
            ]
        },
        "Step 7": {
            "steps": [
                "6 - 6 = 0 (left: 0 6 6) || 6 / 6 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "6 - 6 = 0 (left: 0 6 6) || 3 + 5 = 8 (left: 1 4 8 || 8 - 4 = 4 (left: 1 4) || 1 * 4 = 4 (left: 4)",
                "6 - 6 = 0 (left: 0 6 6) || 6 / 6 = 1 (left: 1 6) || 1 + 6 = 7 (left: 7)",
                "6 - 6 = 0 (left: 0 6 6) || 6 / 6 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "6 + 6 = 12 (left: 6 12 6) || 6 + 12 = 18 (left: 18 || There are no possible next steps with just one number."
            ],
            "Pruning": [
                "1<-0.2"
            ],
            "Evaluation": [
                0.003,
                22.0,
                0.002,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 5.0",
                "1 <- 5.0",
                "2 <- 5.4",
                "3 <- 5.4",
                "4 <- 3.0"
            ]
        },
        "Step 8": {
            "steps": [
                "6 - 6 = 0 (left: 0 6 6) || 6 / 6 = 1 (left: 1 6) || 6 / 1 = 6 (left: 6)",
                "6 - 6 = 0 (left: 0 6 6) || 6 / 6 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "6 - 6 = 0 (left: 0 6 6) || 6 / 6 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "6 - 6 = 0 (left: 0 6 6) || 6 / 6 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "6 - 6 = 0 (left: 0 6 6) || 3 + 5 = 8 (left: 1 4 8 || 8 - 4 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)"
            ],
            "Pruning": [
                "4<-7.1"
            ],
            "Evaluation": [
                0.003,
                0.002,
                0.001,
                0.003,
                21.001
            ],
            "Resampling": [
                "0 <- 3.0",
                "1 <- 5.0",
                "2 <- 8.4",
                "3 <- 5.4",
                "4 <- 3.0"
            ]
        },
        "Step 9": {
            "steps": [
                "6 - 6 = 0 (left: 0 6 6) || 3 + 5 = 8 (left: 1 4 8 || 8 - 4 = 4 (left: 1 4) || 4 - 1 = 3 (left: 3)",
                "6 - 6 = 0 (left: 0 6 6) || 6 / 6 = 1 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "6 / 6 = 1 (left: 6 1 6) || 6 - 1 = 5 (left: 5 6)",
                "6 - 6 = 0 (left: 0 6 6) || 6 / 6 = 1 (left: 1 6) || 1 * 6 = 6 (left: 6)",
                "6 - 6 = 0 (left: 0 6 6) || 3 + 5 = 8 (left: 1 4 8 || 8 - 4 = 4 (left: 1 4) || 4 / 1 = 4 (left: 4)"
            ],
            "Pruning": [
                "0<-8.4",
                "4<-3.0"
            ]
        },
        "Input": "6 6 6 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "5": {
        "puzzle": "1 1 2 12",
        "Step 0": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 12)",
                "1 + 1 = 2 (left: 2 2 12)",
                "1 + 1 = 2 (left: 2 2 12)",
                "2 + 1 = 3 (left: 3 2 12)",
                "1 + 1 = 2 (left: 2 2 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                40.001,
                21.001,
                0.003,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.2",
                "2 <- INIT",
                "3 <- 0.2",
                "4 <- 0.1"
            ]
        },
        "Step 1": {
            "steps": [
                "12 - 1 = 11 (left: 1 2 ",
                "1 + 1 = 2 (left: 2 2 12) || 2 / 2 = 1 (left: 1 12)",
                "1 * 1 = 1 (left: 1 2 12)",
                "1 + 1 = 2 (left: 2 2 12) || 12 - 2 = 10 (left: 2 10)",
                "1 + 1 = 2 (left: 2 2 12) || 2 + 2 = 4 (left: 4 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.001,
                60.0,
                0.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- 0.1",
                "3 <- 1.2",
                "4 <- 0.1"
            ]
        },
        "Step 2": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 12 / 1 = 12 (left:",
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "1 + 1 = 2 (left: 2 2 12) || ",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6)",
                "1 + 1 = 2 (left: 2 2 12) || 2 * 12 = 24 (left: 2 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.003,
                20.002,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 2.0",
                "2 <- 2.2",
                "3 <- 1.2",
                "4 <- 2.3"
            ]
        },
        "Step 3": {
            "steps": [
                "12 - 2 = 10 (left: 1 2 10)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 1 = 12 (left: || 12 + 1 = 13 (left: 13)",
                "1 + 1 = 2 (left: 2 2 12) ||  || There are no possible next steps with the given input.",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.001,
                0.003,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 3.3",
                "1 <- 3.3",
                "2 <- 1.2",
                "3 <- 2.3",
                "4 <- 2.0"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 2 12) || 1 + 2 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 1 = 12 (left: || There are no possible next steps as the equation is already completed."
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                1.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 2.3",
                "2 <- 4.1",
                "3 <- 4.1",
                "4 <- 4.1"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 12) || 12 - 1 = 11 (left: 2 11)",
                "1 * 1 = 1 (left: 1 2 12) || 12 / 2 = 6 (left: 1 6) || 6 - 1 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (2 * 12) = 24",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (2 * 12) = 24",
                "1 * 1 = 1 (left: 1 2 12) || 2 * 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 * 1) * (2 * 12) = 24"
            ]
        },
        "Input": "1 1 2 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 1
            }
        ]
    },
    "6": {
        "puzzle": "1 2 2 6",
        "Step 0": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6)",
                "6 - 1 = 5 (left: 2 5 6)",
                "2 * 2 = 4 (left: 4 2 6)",
                "6 - 2 = 4 (left: 2 4 ",
                "2 * 2 = 4 (left: 4 2 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                2.0,
                1.002,
                2.0,
                2.001
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- INIT",
                "2 <- 0.0",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6)",
                "6 - 2 = 4 (left: 1 4 6)",
                "6 - 2 = 4 (left: 1 4 6) || 1 + 4 = 5 (left: 5 6)",
                "6 / 2 = 3 (left: 2 3 6)",
                "6 - 2 = 4 (left: 1 4 6)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                60.0,
                0.003,
                3.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.1",
                "2 <- 0.0",
                "3 <- 1.1",
                "4 <- 1.4"
            ]
        },
        "Step 2": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 1 + 4 = 5 (left: 5 6)",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6)",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                60.0,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 2.2",
                "2 <- INIT",
                "3 <- 1.1",
                "4 <- 1.4"
            ]
        },
        "Step 3": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 1 + 4 = 5 (left: 5 6)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 5 - 10 = -5 (left: -5)",
                "2 * 2 = 4 (left: 4 2 6)",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 4 = 1.5 (left: 1 1.5)",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 4 = 2 (left: 1 2)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.0,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 2.2",
                "1 <- 2.2",
                "2 <- 1.4",
                "3 <- 0.0",
                "4 <- 0.0"
            ]
        },
        "Step 4": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 + 6 = 10 (left: 10)",
                "6 - 2 = 4 (left: 1 4 6) || Possible",
                "6 - 2 = 4 (left: 1 4 6) || Input: 3 5",
                "6 - 2 = 4 (left: 1 4 6) || 6 - 1 = "
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.002,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 2.2",
                "2 <- 1.0",
                "3 <- 4.0",
                "4 <- 0.0"
            ]
        },
        "Step 5": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 2) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6) || 4 / 1 = 4 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (2 * 1) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6)"
            ],
            "Pruning": [
                "0<-4.0",
                "3<-4.0"
            ],
            "Evaluation": [
                60.0,
                60.0,
                0.0,
                40.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.4",
                "1 <- INIT",
                "2 <- 2.2",
                "3 <- 1.1",
                "4 <- 5.3"
            ]
        },
        "Step 6": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 6 / 4 = 1.5 (left: 1.5)",
                "1 + 2 = 3 (left: 2 3 6)",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6) || 1 - 4 = -",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 2) = 24"
            ],
            "Pruning": [
                "4<-4.0"
            ],
            "Evaluation": [
                0.0,
                22.0,
                40.0,
                0.003,
                60.0
            ],
            "Resampling": [
                "0 <- 5.3",
                "1 <- 5.0",
                "2 <- 5.1",
                "3 <- 6.2",
                "4 <- 6.1"
            ]
        },
        "Step 7": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 + 2) * 4 = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 2) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 + 2) * 6 = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 + 2) * 4 = 24",
                "1 + 2 = 3 (left: 2 3 6) || 2 + 3 = 5 (left: 5 6)"
            ],
            "Pruning": [
                "0<-6.4",
                "1<-6.4",
                "2<-6.4",
                "3<-6.4"
            ],
            "Evaluation": [
                60.0,
                60.0,
                60.0,
                60.0,
                1.0
            ],
            "Resampling": [
                "0 <- 7.1",
                "1 <- 5.4",
                "2 <- 4.0",
                "3 <- 7.0",
                "4 <- 7.0"
            ]
        },
        "Step 8": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 2) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 6 / 1 = 6 (left: 4 6) || 5",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 4) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 2) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 2) = 24"
            ],
            "Pruning": [
                "0<-2.2",
                "2<-7.1",
                "3<-6.4",
                "4<-5.1"
            ],
            "Evaluation": [
                40.0,
                0.003,
                60.0,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 5.1",
                "1 <- 8.4",
                "2 <- 7.0",
                "3 <- 8.2",
                "4 <- 0.0"
            ]
        },
        "Step 9": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 4) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 2) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 2) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 4 * 1 = 4 (left: 4 6) || 4 * 6 = 24 (left: 24) || Answer: (6 - 2) * (1 * 4) = 24",
                "6 - 2 = 4 (left: 1 4 6) || 1 + 4 = 5 (left: 5 6)"
            ],
            "Pruning": [
                "0<-7.3",
                "1<-8.4",
                "2<-4.0",
                "3<-6.2"
            ]
        },
        "Input": "1 2 2 6",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "7": {
        "puzzle": "1 1 10 12",
        "Step 0": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12)",
                "1 + 1 = 2 (left: 2 10 12)",
                "1 + 1 = 2 (left: 2 10 12)",
                "1 + 10 = 11 (left: 11 10 12)",
                "1 + 1 = 2 (left: 2 10 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                21.001,
                0.003,
                20.002,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.2",
                "2 <- INIT",
                "3 <- 0.2",
                "4 <- 0.3"
            ]
        },
        "Step 1": {
            "steps": [
                "1 * 1 = 1 (left: 1 10 12)",
                "1 + 1 = 2 (left: 2 10 12) || 12 - 10 = 2 (left: 2 2 12)",
                "12 - 1 = 11 (left: 1 10 11)",
                "1 + 1 = 2 (left: 2 10 12) || 2 + 10 = 12 (left: 12 12)",
                "1 + 10 = 11 (left: 11 10 12) || 10 + 12 = 22 (left: 11)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.0,
                20.002,
                1.002,
                60.0,
                0.002
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 0.0",
                "2 <- 1.1",
                "3 <- 0.3",
                "4 <- 1.3"
            ]
        },
        "Step 2": {
            "steps": [
                "1 + 1 = 2 (left: 2 10 12) || 12 - 10 = 2 (left: 2 2 12) || 12 / 2 = 6 (left: 2 6 12)",
                "10 + 1 = 11 (left: 1 11 12) || 11 / 1 = 11 (left: 11 12)",
                "1 + 1 = 2 (left: 2 10 12) || 12 - 10 = 2 (left: 2 2 12) || 12 / 2 = 6 (left: 2 6)",
                "1 + 10 = 11 (left: 11 10 12) || 11 / 10 = 1.1 (left: 1.1 12)",
                "1 + 1 = 2 (left: 2 10 12) || 2 + 10 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.003,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 1.1",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 1.3"
            ]
        },
        "Step 3": {
            "steps": [
                "1 + 1 = 2 (left: 2 10 12) || 2 + 10 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 + 1 = 2 (left: 2 10 12) || 12 - 10 = 2 (left: 2 2 12) || 2 + 2 = 4 (left: 4 12)",
                "1 - 1 = 0 (left: 0 10 12)",
                "1 * 10 = 10 (left: 10 1 12)",
                "1 + 1 = 2 (left: 2 10 12) || 2 + 10 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                1.002,
                0.003,
                3.0,
                0.003
            ],
            "Resampling": [
                "0 <- 0.0",
                "1 <- 0.2",
                "2 <- 3.1",
                "3 <- 1.3",
                "4 <- 1.3"
            ]
        },
        "Step 4": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "1 + 1 = 2 (left: 2 10 12) || 10 + 2 = 12 (left: 2 12 12)",
                "1 + 1 = 2 (left: 2 10 12) || 12 - 10 = 2 (left: 2 2 12) || 2 + 2 = 4 (left: 4 12) || 12 - 4 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 10 12) || 2 + 10 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 + 1 = 2 (left: 2 10 12) || 2 + 10 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Pruning": [
                "2<-3.1"
            ],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 0.0",
                "2 <- 0.2",
                "3 <- INIT",
                "4 <- 1.3"
            ]
        },
        "Step 5": {
            "steps": [
                "1 + 1 = 2 (left: 2 10 12) || 12 - 10 = 2 (left: 2 2 12) || 2 + 2 = 4 (left: 4 12)",
                "10 + 1 = 11 (left: 1 11 12) || 1 * 11 = 11 (left: 11 12)",
                "1 + 1 = 2 (left: 2 10 12) || 12 / 2 = 6 (left: 10 6)",
                "1 * 1 = 1 (left: 1 10 12)",
                "1 + 1 = 2 (left: 2 10 12) || 2 + 10 = 12 (left: 12 12) || 12 + 12 = 24"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.002,
                0.002,
                2.0,
                0.003
            ],
            "Resampling": [
                "0 <- 1.3",
                "1 <- 5.3",
                "2 <- 0.2",
                "3 <- 1.3",
                "4 <- 1.1"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 1 = 2 (left: 2 10 12) || 2 + 10 = 12 (left: 12 12) || 12 / 12 = 1 (left: 1)",
                "1 * 1 = 1 (left: 1 10 12) || 1 + 10 = 11 (left: 11 12)",
                "1 + 1 = 2 (left: 2 10 12) || 12 + 2 = 14 (left:",
                "1 + 1 = 2 (left: 2 10 12) || 2 + 10 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "1 + 1 = 2 (left: 2 10 12) || 12 - 10 = 2 (left: 2 2 12) || 2 + 12 = 14 (left: 2 14)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.0,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- 0.0",
                "4 <- 5.3"
            ]
        },
        "Step 7": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12)",
                "1 + 1 = 2 (left: 2 10 12) || 2 + 10 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 + 1 = 2 (left: 2 10 12) || 2 + 10 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "10 + 1 = 11 (left: 1 11 12) || 12 / 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 10 12) || 10 - 1 = 9 (left: 9 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 7.0",
                "1 <- 3.3",
                "2 <- 0.2",
                "3 <- 1.3",
                "4 <- 1.1"
            ]
        },
        "Step 8": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12) || 1 * 11 = 11 (left: 11)",
                "1 * 10 = 10 (left: 10 1 12) || 12 / 1 = 12 (left: 12 12)",
                "1 + 1 = 2 (left: 2 10 12) || 2 + 10 = 12 (left: 12 12)",
                "1 + 1 = 2 (left: 2 10 12) || 2 + 10 = 12 (left: 12 12) || 12 * 12 = 144 (left: 144)",
                "1 + 1 = 2 (left: 2 10 12) || 12 - 10 = 2 (left: 2 2 12) || 2 + 2 = 4 (left: 4 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                40.001,
                20.002,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 8.1",
                "1 <- 8.1",
                "2 <- 8.1",
                "3 <- 8.2",
                "4 <- 8.2"
            ]
        },
        "Step 9": {
            "steps": [
                "1 * 10 = 10 (left: 10 1 12) || 12 / 1 = 12 (left: 12 12) || 12 + 12 = 24",
                "1 * 10 = 10 (left: 10 1 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "1 * 10 = 10 (left: 10 1 12) || 12 / 1 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "1 + 1 = 2 (left: 2 10 12) || 2 + 10 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)",
                "1 + 1 = 2 (left: 2 10 12) || 2 + 10 = 12 (left: 12 12) || 12 - 12 = 0 (left: 0)"
            ],
            "Pruning": []
        },
        "Input": "1 1 10 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "8": {
        "puzzle": "2 2 10 10",
        "Step 0": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 * 2 = 20 (left: 2 10 20)",
                "10 - 2 = 8 (left: 2 8 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                3.0,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.3",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "2 * 2 = 4 (left: 4 10 10)",
                "10 * 2 = 20 (left: 2 10 20) || 10 + 2 = 12 (left: 12 20)",
                "2 + 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)",
                "10 - 2 = 8 (left: 2 10 8)"
            ],
            "Pruning": [],
            "Evaluation": [
                21.001,
                0.003,
                21.001,
                40.001,
                1.002
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.0",
                "2 <- 1.2",
                "3 <- INIT",
                "4 <- 1.2"
            ]
        },
        "Step 2": {
            "steps": [
                "10 / 2 = 5 (left: 2 5 10)",
                "2 * 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14)"
            ],
            "Pruning": [],
            "Evaluation": [
                2.001,
                2.001,
                0.002,
                2.001,
                0.003
            ],
            "Resampling": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- 1.3",
                "3 <- 1.3",
                "4 <- 1.2"
            ]
        },
        "Step 3": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.002,
                0.003,
                1.002,
                2.001,
                1.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 1.2",
                "2 <- 1.3",
                "3 <- 1.2",
                "4 <- 1.0"
            ]
        },
        "Step 4": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14)",
                "2 + 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 40)",
                "2 * 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                20.002,
                2.001,
                20.002,
                40.0,
                3.0
            ],
            "Resampling": [
                "0 <- 4.2",
                "1 <- INIT",
                "2 <- 4.3",
                "3 <- 4.0",
                "4 <- 4.2"
            ]
        },
        "Step 5": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14) || 14 - 10 = 4 (left: 10 4)",
                "10 / 2 = 5 (left: 2 5 10)",
                "2 + 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 40) || 40 - 10 = 30 (left: 30 40)",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14) || 14 + 10 = 24 (left: 10 24)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                2.001,
                0.003,
                1.002,
                1.002
            ],
            "Resampling": [
                "0 <- 4.3",
                "1 <- 4.3",
                "2 <- 4.3",
                "3 <- 4.3",
                "4 <- 4.2"
            ]
        },
        "Step 6": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 40) || 10 * 40 = 400 (left: 400)",
                "2 + 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 40) || 10 * 4 = 40 (left: 40)",
                "2 + 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 40) || 5 * 25 = 125",
                "2 + 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 40) || 40 - 10 = 30 (left: 10 30)",
                "2 + 2 = 4 (left: 4 10 10) || 4 + 10 = 14 (left: 10 10 14) || 10 + 10 = 20 (left: 20 14)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "Resampling": [
                "0 <- 4.0",
                "1 <- 4.3",
                "2 <- 4.3",
                "3 <- INIT",
                "4 <- 4.3"
            ]
        },
        "Step 7": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 40) || 10 * 40 = 400 (left: 40)",
                "2 + 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 40) || 10 * 4 = 40 (left: 40)",
                "2 + 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 4 * 10 = 40 (left: 10 40) || 40 - 10 = 30 (left: 30)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.001,
                0.002,
                0.003,
                40.001,
                0.002
            ],
            "Resampling": [
                "0 <- 7.3",
                "1 <- 7.3",
                "2 <- 7.0",
                "3 <- 4.0",
                "4 <- 7.3"
            ]
        },
        "Step 8": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2",
                "2 + 2 = 4 (left: 4 10 10) || 10 - 4 = 6 (left: 6 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 2.5 + 10 = 12.5 (left: 10 12.5)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 * 4 = 40"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                2.001,
                2.001,
                1.0,
                0.003
            ],
            "Resampling": [
                "0 <- 8.2",
                "1 <- 7.3",
                "2 <- 7.3",
                "3 <- 7.3",
                "4 <- 7.3"
            ]
        },
        "Step 9": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10) || 2.5 + 10 = 12.5 (left: 10 12.5) || 10 * 12.5 = 125 (left: 125)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10)",
                "2 + 2 = 4 (left: 4 10 10) || 10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 + 2 = 4 (left: 4 10 10) || Input:",
                "2 + 2 = 4 (left: 4 10 10) || Input:"
            ],
            "Pruning": [
                "0<-7.3"
            ]
        },
        "Input": "2 2 10 10",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ]
    },
    "9": {
        "puzzle": "1 1 1 12",
        "Step 0": {
            "steps": [
                "12 - 1 = 11 (left: 1 1 11)",
                "1 + 1 = 2 (left: 1 2 12)",
                "1 * 1 = 1 (left: 1 1 12)",
                "1 + 12 = 13 (left: 1 1 13)",
                "1 * 1 = 1 (left: 1 1 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                60.0,
                20.002,
                21.001,
                40.001
            ],
            "Resampling": [
                "0 <- INIT",
                "1 <- 0.1",
                "2 <- 0.1",
                "3 <- INIT",
                "4 <- INIT"
            ]
        },
        "Step 1": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12)",
                "1 + 1 = 2 (left: 1 2 12) || 2 + 12 = 14 (left: 1 14)",
                "1 * 1 = 1 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                60.0,
                0.002,
                41.0,
                60.0
            ],
            "Resampling": [
                "0 <- 1.4",
                "1 <- 1.1",
                "2 <- 1.1",
                "3 <- 1.4",
                "4 <- 0.2"
            ]
        },
        "Step 2": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 + 2 = 14 (left: 14)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                0.002,
                0.002,
                60.0,
                60.0
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 2.0",
                "2 <- 1.3",
                "3 <- 2.3",
                "4 <- 2.0"
            ]
        },
        "Step 3": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)",
                "12 / 1 = 12 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "12 / 1 = 12 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)"
            ],
            "Pruning": [],
            "Evaluation": [
                0.003,
                60.0,
                60.0,
                0.003,
                0.002
            ],
            "Resampling": [
                "0 <- 0.4",
                "1 <- 1.1",
                "2 <- 2.0",
                "3 <- 2.0",
                "4 <- 0.3"
            ]
        },
        "Step 4": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 12) || 12 / 1 = 12 (left: 1 12)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "12 / 1 = 12 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 + 12 = 14",
                "12 / 1 = 12 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 + 12 = 14 (left: 14)",
                "1 + 12 = 13 (left: 1 1 13) || 1 * 1 = 1 (left: 1 13)"
            ],
            "Pruning": [],
            "Evaluation": [
                1.002,
                0.003,
                0.003,
                0.002,
                1.001
            ],
            "Resampling": [
                "0 <- 2.4",
                "1 <- 1.0",
                "2 <- 1.3",
                "3 <- 2.3",
                "4 <- 3.2"
            ]
        },
        "Step 5": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "1 + 1 = 2 (left: 1 2 12) || 12 / 1 = 12 (left:",
                "1 * 1 = 1 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 11 / 1 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 12 - 2 = 10 (left: 10)"
            ],
            "Pruning": [],
            "Evaluation": [
                60.0,
                20.001,
                0.001,
                0.003,
                0.003
            ],
            "Resampling": [
                "0 <- 1.1",
                "1 <- 2.3",
                "2 <- 3.2",
                "3 <- 1.1",
                "4 <- 3.1"
            ]
        },
        "Step 6": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24)",
                "12 / 1 = 12 (left: 1 1 12) || 12 - 1 = 11 (left: 1 11) || 1 * 11 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "1 + 1 = 2 (left: 1 2 12) || 1 * 2 = 2 (left: 2 12) || 12 / 2 = 6 (left: 6)",
                "12 / 1 = 12 (left: 1 1 12) || 1 + 1 = 2 (left: 2 12) || 2 * 12 = 24 (left: 24) || Answer: (1 + 1) * (12 / 1) = 24"
            ]
        },
        "Input": "1 1 1 12",
        "Verifications": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ]
    },
    "Cost": {
        "input_tokens": 0,
        "output_tokens": 47577.0,
        "total_cost": 0.0713655
    }
}