{
    "0": {
        "input": "1 1 4 6",
        "step_1": {
            "steps": [
                "6 - 1 = 5 (left: 1 4 5)",
                "6 - 1 = 5 (left: 1 4 6)",
                "4 * 1 = 4 (left: 4 4 6)",
                "6 - 1 = 5 (left: 4 5 6)",
                "9 / 3 = 3 (left: 3 5 9)"
            ],
            "values": [
                2.001,
                40.001,
                3.0,
                2.0,
                22.0
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 1.4",
                "2 <- 1.1",
                "3 <- INIT",
                "4 <- 1.4"
            ],
            "resampled_steps": [
                "6 - 1 = 5 (left: 1 4 6)",
                "9 / 3 = 3 (left: 3 5 9)",
                "6 - 1 = 5 (left: 1 4 6)",
                "",
                "9 / 3 = 3 (left: 3 5 9)"
            ]
        },
        "step_2": {
            "steps": [
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "9 / 3 = 3 (left: 3 5 9)\n4 + 6 = 10 (left: 10 10 12)",
                "6 - 1 = 5 (left: 1 4 6)\n1 + 4 = 5 (left: 5 6)",
                "1 + 1 = 2 (left: 2 4 6)",
                "9 / 3 = 3 (left: 3 5 9)\n6 / 4 = 1.5 (left: 1.5 10)"
            ],
            "values": [
                60.0,
                0.003,
                0.003,
                0.003,
                0.001
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 1.4",
                "2 <- 2.0",
                "3 <- 1.1",
                "4 <- 2.0"
            ],
            "resampled_steps": [
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "9 / 3 = 3 (left: 3 5 9)",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "6 - 1 = 5 (left: 1 4 6)",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)"
            ]
        },
        "step_3": {
            "steps": [
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)",
                "9 / 3 = 3 (left: 3 5 9)\n6 * 2 = 12 (left: 12 12 4)",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)",
                "6 - 1 = 5 (left: 1 4 6)\n1 + 4 = 5 (left: 5 6)",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n1 + 24 = 25"
            ],
            "values": [
                0.003,
                2.001,
                0.003,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- INIT",
                "3 <- 1.1",
                "4 <- 2.0"
            ],
            "resampled_steps": [
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "",
                "6 - 1 = 5 (left: 1 4 6)",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)"
            ]
        },
        "step_4": {
            "steps": [
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 4 6)",
                "6 - 1 = 5 (left: 1 4 6)\n1 + 4 = 5 (left: 5 6)",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)"
            ],
            "values": [
                20.001,
                60.0,
                60.0,
                0.003,
                40.0
            ],
            "resampled": [
                "0 <- 4.4",
                "1 <- 2.0",
                "2 <- 2.0",
                "3 <- 4.2",
                "4 <- 4.0"
            ],
            "resampled_steps": [
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 4 6)",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)"
            ]
        },
        "step_5": {
            "steps": [
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (6 - 1) * (4 * 1) = 24",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n1 / 24 = 0.041666666666666664 (left: 24 0.041666666666666664)",
                "1 * 1 = 1 (left: 1 4 6)\nPossible next steps:",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)\nThere are no possible next steps with the input of 23."
            ],
            "values": [
                60.0,
                0.002,
                60.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 5.0",
                "1 <- 4.4",
                "2 <- 2.0",
                "3 <- 1.4",
                "4 <- 4.2"
            ],
            "resampled_steps": [
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (6 - 1) * (4 * 1) = 24",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "9 / 3 = 3 (left: 3 5 9)",
                "1 * 1 = 1 (left: 1 4 6)"
            ]
        },
        "step_6": {
            "steps": [
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (6 - 1) * (4 * 1) = 24\nInput: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6 24)\n6 - 3 = 3 (left: 3 24)\n3 * 24 = 24 (left: 24)\nAnswer: (3 * 8) - (6 - 3) = 24",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (4 * 6) / (1 + 1) = 24",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)",
                "9 / 3 = 3 (left: 3 5 9)\n5 * 9 = 45 (left: 3 45)",
                "1 * 1 = 1 (left: 1 4 6)\n4 - 1 = 3 (left: 3)"
            ],
            "values": [
                60.0,
                60.0,
                0.002,
                20.001,
                0.0
            ],
            "resampled": [
                "0 <- 5.0",
                "1 <- 6.0",
                "2 <- 4.2",
                "3 <- 6.3",
                "4 <- 6.1"
            ],
            "resampled_steps": [
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (6 - 1) * (4 * 1) = 24",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (6 - 1) * (4 * 1) = 24\nInput: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6 24)\n6 - 3 = 3 (left: 3 24)\n3 * 24 = 24 (left: 24)\nAnswer: (3 * 8) - (6 - 3) = 24",
                "1 * 1 = 1 (left: 1 4 6)",
                "9 / 3 = 3 (left: 3 5 9)\n5 * 9 = 45 (left: 3 45)",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (4 * 6) / (1 + 1) = 24"
            ]
        },
        "step_7": {
            "steps": [
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (6 - 1) * (4 * 1) = 24\nInput: 3 3 7 8\nSteps:\n3 * 8 = 24 (left: 3 7 24)\n7 - 3 = 4 (left: 4 24)\n4 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (7 - 3) = 24",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (6 - 1) * (4 * 1) = 24\nInput: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6 24)\n6 - 3 = 3 (left: 3 24)\n3 * 24 = 24 (left: 24)\nAnswer: (3 * 8) - (6 - 3) = 24\nInput: 2 3 5 10\nSteps:\n10 - 5 = 5 (left: 2 3 5)\n5 * 3 = 15 (left: 2 15)\n2 * 15 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((10 - 5) * 3) - 6 = 24",
                "1 * 1 = 1 (left: 1 4 6)\n6 - 1 = 5 (left: 4 5)",
                "9 / 3 = 3 (left: 3 5 9)\n5 * 9 = 45 (left: 3 45)\n3 * 45 = 135 (left: 135)",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (4 * 6) / (1 + 1) = 24\nInput: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n5 - 3 = 2 (left: 2 21)\n2 * 21 = 42 (left: 42)\n42 / 7 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((3 * 7) * (5 - 3)) / 7 = 24"
            ],
            "values": [
                60.0,
                40.0,
                2.001,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 7.0",
                "1 <- 6.1",
                "2 <- 4.0",
                "3 <- 1.4",
                "4 <- 6.3"
            ],
            "resampled_steps": [
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (6 - 1) * (4 * 1) = 24\nInput: 3 3 7 8\nSteps:\n3 * 8 = 24 (left: 3 7 24)\n7 - 3 = 4 (left: 4 24)\n4 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (7 - 3) = 24",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (4 * 6) / (1 + 1) = 24",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)",
                "9 / 3 = 3 (left: 3 5 9)",
                "9 / 3 = 3 (left: 3 5 9)\n5 * 9 = 45 (left: 3 45)"
            ]
        },
        "step_8": {
            "steps": [
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (6 - 1) * (4 * 1) = 24\nInput: 3 3 7 8\nSteps:\n3 * 8 = 24 (left: 3 7 24)\n7 - 3 = 4 (left: 4 24)\n4 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (7 - 3) = 24\nInput: 2 3 5 6\nSteps:\n5 + 3 = 8 (left: 2 6 8)\n6 * 2 = 12 (left: 12 8)\n12 - 8 = 4 (left: 4)\n4 * 3 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((5 + 3) * 6) - 8 = 24",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (4 * 6) / (1 + 1) = 24\nInput: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9 9)\n9 * 1 = 9 (left: 9 9)\n9 * 9 = 81 (left: 81)\nAnswer: ((3 * 3) - 8) * 9 = 24",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)\n23 * 2 = 46 (left: 46)",
                "9 / 3 = 3 (left: 3 5 9)\n5 / 9 = 0.55555555556 (left: 3 0.55555555556)",
                "9 / 3 = 3 (left: 3 5 9)\n5 * 9 = 45 (left: 3 45)\n27 - 6 = 21 (left: 9 21)"
            ],
            "values": [
                60.0,
                40.0,
                0.003,
                2.001,
                0.002
            ],
            "resampled": [
                "0 <- 4.4",
                "1 <- 8.0",
                "2 <- 7.1",
                "3 <- 2.0",
                "4 <- 4.1"
            ],
            "resampled_steps": [
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (6 - 1) * (4 * 1) = 24\nInput: 3 3 7 8\nSteps:\n3 * 8 = 24 (left: 3 7 24)\n7 - 3 = 4 (left: 4 24)\n4 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (7 - 3) = 24\nInput: 2 3 5 6\nSteps:\n5 + 3 = 8 (left: 2 6 8)\n6 * 2 = 12 (left: 12 8)\n12 - 8 = 4 (left: 4)\n4 * 3 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((5 + 3) * 6) - 8 = 24",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (6 - 1) * (4 * 1) = 24\nInput: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6 24)\n6 - 3 = 3 (left: 3 24)\n3 * 24 = 24 (left: 24)\nAnswer: (3 * 8) - (6 - 3) = 24\nInput: 2 3 5 10\nSteps:\n10 - 5 = 5 (left: 2 3 5)\n5 * 3 = 15 (left: 2 15)\n2 * 15 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((10 - 5) * 3) - 6 = 24",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)"
            ]
        },
        "step_9": {
            "steps": [
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (4 * 6) / (1 + 1) = 24",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (6 - 1) * (4 * 1) = 24\nInput: 3 3 7 8\nSteps:\n3 * 8 = 24 (left: 3 7 24)\n7 - 3 = 4 (left: 4 24)\n4 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (7 - 3) = 24\nInput: 2 3 5 6\nSteps:\n5 + 3 = 8 (left: 2 6 8)\n6 * 2 = 12 (left: 12 8)\n12 - 8 = 4 (left: 4)\n4 * 3 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((5 + 3) * 6) - 8 = 24\nInput: 3 3 6 7\nSteps:\n3 * 7 = 21 (left: 3 6 21)\n6 - 3 = 3 (left: 3 21)\n3 * 21 = 63 (left: 63)\n63 / 3 = 21 (left: 21)\n21 + 21 = 42 (left: 42)\n42 - 18 = 24 (left: 24)\nAnswer: (((3 * 7) - 3) * 21) + 21 - 18 = 24",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (6 - 1) * (4 * 1) = 24\nInput: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6 24)\n6 - 3 = 3 (left: 3 24)\n3 * 24 = 24 (left: 24)\nAnswer: (3 * 8) - (6 - 3) = 24\nInput: 2 3 5 10\nSteps:\n10 - 5 = 5 (left: 2 3 5)\n5 * 3 = 15 (left: 2 15)\n2 * 15 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((10 - 5) * 3) - 6 = 24\nInput: 2 2 6 8\n\n2 * 8 = 16 (left: 2 6 16)\n\n6 + 2 = 8 (left: 8 16)\n\n16 - 8 = 8 (left: 8 8)\n\n8 * 3 = 24 (left: 24)\n\nAnswer: ((2 * 8) + (6 + 2)) * 3 = 24",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (4 * 6) / (1 - 1) = 24"
            ],
            "values": [
                60.0,
                60.0,
                60.0,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 9.2",
                "1 <- 9.0",
                "2 <- 6.1",
                "3 <- 5.0",
                "4 <- 8.0"
            ],
            "resampled_steps": [
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (6 - 1) * (4 * 1) = 24\nInput: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6 24)\n6 - 3 = 3 (left: 3 24)\n3 * 24 = 24 (left: 24)\nAnswer: (3 * 8) - (6 - 3) = 24\nInput: 2 3 5 10\nSteps:\n10 - 5 = 5 (left: 2 3 5)\n5 * 3 = 15 (left: 2 15)\n2 * 15 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((10 - 5) * 3) - 6 = 24\nInput: 2 2 6 8\n\n2 * 8 = 16 (left: 2 6 16)\n\n6 + 2 = 8 (left: 8 16)\n\n16 - 8 = 8 (left: 8 8)\n\n8 * 3 = 24 (left: 24)\n\nAnswer: ((2 * 8) + (6 + 2)) * 3 = 24",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (4 * 6) / (1 + 1) = 24",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (4 * 6) / (1 + 1) = 24",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (6 - 1) * (4 * 1) = 24",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (6 - 1) * (4 * 1) = 24\nInput: 3 3 7 8\nSteps:\n3 * 8 = 24 (left: 3 7 24)\n7 - 3 = 4 (left: 4 24)\n4 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (7 - 3) = 24\nInput: 2 3 5 6\nSteps:\n5 + 3 = 8 (left: 2 6 8)\n6 * 2 = 12 (left: 12 8)\n12 - 8 = 4 (left: 4)\n4 * 3 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((5 + 3) * 6) - 8 = 24"
            ]
        },
        "step_10": {
            "steps": [
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (6 - 1) * (4 * 1) = 24\nInput: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6 24)\n6 - 3 = 3 (left: 3 24)\n3 * 24 = 24 (left: 24)\nAnswer: (3 * 8) - (6 - 3) = 24\nInput: 2 3 5 10\nSteps:\n10 - 5 = 5 (left: 2 3 5)\n5 * 3 = 15 (left: 2 15)\n2 * 15 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((10 - 5) * 3) - 6 = 24\nInput: 2 2 6 8\n\n2 * 8 = 16 (left: 2 6 16)\n\n6 + 2 = 8 (left: 8 16)\n\n16 - 8 = 8 (left: 8 8)\n\n8 * 3 = 24 (left: 24)\n\nAnswer: ((2 * 8) + (6 + 2)) * 3 = 24\nInput: 1 3 5 7\nSteps:\n1 * 7 = 7 (left: 3 5 7)\n7 - 5 = 2 (left: 3 2)\n3 * 2 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((1 * 7) - (5 - 3)) * 4 = 24",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (4 * 6) / (1 + 1) = 24\nInput: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n3 + 4 = 7 (left: 7 8)\n7 * 8 = 56 (left: 56)\n56 / 2 = 28 (left: 28)\n28 / 4 = 7 (left: 7)\n7 * 3 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: ((3 + 5) * (4 + 3) / 2) / 4 + 3 = 24",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (4 * 6) / (1 + 1) = 24\nInput: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\n48 / 2 = 24 (left: 24)\nAnswer: ((3 * 3) - 3) * 8 / 2 = 24",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (6 - 1) * (4 * 1) = 24\nInput: 3 3 4 7\nSteps:\n3 + 4 = 7 (left: 3 7 7)\n7 - 3 = 4 (left: 4 7)\n4 * 7 = 28 (left: 28)\n28 - 7 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: ((3 + 4) * (7 - 3)) + 3 = 24",
                "6 - 1 = 5 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (6 - 1) * (4 * 1) = 24\nInput: 3 3 7 8\nSteps:\n3 * 8 = 24 (left: 3 7 24)\n7 - 3 = 4 (left: 4 24)\n4 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (7 - 3) = 24\nInput: 2 3 5 6\nSteps:\n5 + 3 = 8 (left: 2 6 8)\n6 * 2 = 12 (left: 12 8)\n12 - 8 = 4 (left: 4)\n4 * 3 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((5 + 3) * 6) - 8 = 24\nInput: 2 4 6 8\nSteps:\n4 * 6 = 24 (left: 2 8 24)\n2 * 8 = 16 (left: 16 24)\n16 + 24 = 40 (left: 40)\n40 - 8 = 32 (left: 32)\n32 / 2 = 16 (left: 16)\n16 * 1 = 16 (left: 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((2 * 4) + 6) - 8 = 24"
            ],
            "values": [
                60.0,
                60.0,
                60.0,
                60.0,
                40.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.026319500000000003
    },
    "1": {
        "input": "1 1 11 11",
        "step_1": {
            "steps": [
                "11 - 1 = 10 (left: 1 10 11)",
                "1 + 1 = 2 (left: 2 11 11)",
                "1 + 1 = 2 (left: 2 11 11)",
                "11 - 1 = 10 (left: 1 10 11)",
                "11 - 1 = 10 (left: 1 10 11)"
            ],
            "values": [
                0.002,
                20.002,
                0.003,
                1.002,
                1.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.1",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "1 + 1 = 2 (left: 2 11 11)",
                "",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "11 / 1 = 11 (left: 1 11 11)",
                "1 + 1 = 2 (left: 2 11 11)\n9 - 2 = 7 (left: 7 9)",
                "11 + 1 = 12 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 11 11)",
                "1 + 1 = 2 (left: 2 11 11)"
            ],
            "values": [
                0.003,
                1.001,
                40.001,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 2.2",
                "2 <- 2.2",
                "3 <- 1.1",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "11 - 1 = 10 (left: 1 10 11)",
                "11 + 1 = 12 (left: 1 11 12)",
                "11 + 1 = 12 (left: 1 11 12)",
                "1 + 1 = 2 (left: 2 11 11)",
                "1 + 1 = 2 (left: 2 11 11)"
            ]
        },
        "step_3": {
            "steps": [
                "11 - 1 = 10 (left: 1 10 11)\n1 * 10 = 10 (left: 10 11)",
                "11 + 1 = 12 (left: 1 11 12)\n11 / 1 = 11 (left: 11 12)",
                "11 + 1 = 12 (left: 1 11 12)\n11 * 1 = 11 (left: 11 12)",
                "1 + 1 = 2 (left: 2 11 11)\n5 / 4 = 1.25 (left: 1.25 5)",
                "1 + 1 = 2 (left: 2 11 11)\n2 * 11 = 22 (left: 11 11 22)"
            ],
            "values": [
                0.002,
                20.001,
                0.002,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.1",
                "2 <- INIT",
                "3 <- 2.2",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "",
                "1 + 1 = 2 (left: 2 11 11)",
                "",
                "11 + 1 = 12 (left: 1 11 12)",
                "1 + 1 = 2 (left: 2 11 11)"
            ]
        },
        "step_4": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12)",
                "1 + 1 = 2 (left: 2 11 11)\n3 + 3 = 6 (left: 6 7)",
                "1 * 1 = 1 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)",
                "1 + 1 = 2 (left: 2 11 11)\nPossible next steps:"
            ],
            "values": [
                2.001,
                0.003,
                1.001,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.1",
                "2 <- 4.3",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "1 + 1 = 2 (left: 2 11 11)",
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)",
                "",
                ""
            ]
        },
        "step_5": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 11)",
                "1 + 1 = 2 (left: 2 11 11)\n11 / 2 = 5.5 (left: 5.5 11 11)",
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24",
                "11 / 1 = 11 (left: 1 11 11)",
                "1 * 1 = 1 (left: 1 11 11)"
            ],
            "values": [
                0.002,
                3.0,
                60.0,
                21.0,
                0.003
            ],
            "resampled": [
                "0 <- 5.2",
                "1 <- 3.1",
                "2 <- 5.3",
                "3 <- 4.0",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12)\n11 / 1 = 11 (left: 11 12)",
                "11 / 1 = 11 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12)",
                ""
            ]
        },
        "step_6": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24\n24 + 12 = 36 (left: 24 36)",
                "11 + 1 = 12 (left: 1 11 12)\n11 / 1 = 11 (left: 11 12)\n11 - 12 = -1 (left: -1)",
                "11 / 1 = 11 (left: 1 11 11)\n11 / 1 = 11 (left: 11 11)",
                "11 + 1 = 12 (left: 1 11 12)\n12 - 11 = 1 (left: 1)",
                "1 * 1 = 1 (left: 1 11 11)"
            ],
            "values": [
                20.002,
                0.0,
                0.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 5.2",
                "1 <- 2.2",
                "2 <- 6.0",
                "3 <- 4.3",
                "4 <- 5.2"
            ],
            "resampled_steps": [
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12)",
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24\n24 + 12 = 36 (left: 24 36)",
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24"
            ]
        },
        "step_7": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24\n12 * 12 = 144 (left: 144)",
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 1 12)",
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24\n24 + 12 = 36 (left: 24 36)\n24 * 36 = 864 (left: 864)",
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)  ",
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24\n12 - 12 = 0 (left: 0 24)"
            ],
            "values": [
                0.003,
                0.003,
                0.002,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 5.2",
                "2 <- 7.3",
                "3 <- 7.3",
                "4 <- 7.3"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 11 11)",
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)  ",
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)  ",
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)  "
            ]
        },
        "step_8": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)",
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24\n12 * 12 = 144 (left: 144)",
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)  \nAnswer: ((11 + 1) / 1) + 11 = 24",
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)  \nAnswer: ((11 + 1) / 1) + 11 = 24",
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)  \nAnswer: ((11 + 1) / 1) + 11 = 24"
            ],
            "values": [
                60.0,
                0.003,
                60.0,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 8.0",
                "1 <- 7.4",
                "2 <- 5.3",
                "3 <- 8.2",
                "4 <- 3.1"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)",
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24\n12 - 12 = 0 (left: 0 24)",
                "11 / 1 = 11 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)  \nAnswer: ((11 + 1) / 1) + 11 = 24",
                "11 + 1 = 12 (left: 1 11 12)\n11 / 1 = 11 (left: 11 12)"
            ]
        },
        "step_9": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 13)\n11 / 13 = 0.8461538461538461 (left: 0.8461538461538461)",
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24\n12 - 12 = 0 (left: 0 24)\n24 - 0 = 24 (left: 24)",
                "11 / 1 = 11 (left: 1 11 11)\n1 + 11 = 12 (left: 11 11 12)",
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)  \nAnswer: ((11 + 1) / 1) + 11 = 24\nInput: 3 3 8 8\nSteps:\n3 * 8 = 24 (left: 3 8 24)\n3 + 8 = 11 (left: 11 24)\n11 * 24 = 264 (left: 264)\nAnswer: (3 * 8) + (3 + 8) = 24",
                "11 + 1 = 12 (left: 1 11 12)\n11 / 1 = 11 (left: 11 12)\n11 - 12 = -1 (left: -1)"
            ],
            "values": [
                0.001,
                40.0,
                0.003,
                60.0,
                0.0
            ],
            "resampled": [
                "0 <- 4.3",
                "1 <- 5.2",
                "2 <- 8.4",
                "3 <- 7.3",
                "4 <- 8.2"
            ],
            "resampled_steps": [
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)",
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24",
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)  \nAnswer: ((11 + 1) / 1) + 11 = 24",
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)  ",
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)  \nAnswer: ((11 + 1) / 1) + 11 = 24"
            ]
        },
        "step_10": {
            "steps": [
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24\n24 / 12 = 2 (left: 2 24)",
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)  \nAnswer: ((11 + 1) / 1) + 11 = 24\nInput: 3 3 7 9\nSteps:\n7 - 3 = 4 (left: 3 4 9)\n9 - 4 = 5 (left: 3 5)\n3 * 5 = 15 (left: 15)\n15 + 9 = 24 (left: 24)\nAnswer: ((7 - 3) * (9 - 4)) + 3 = 24",
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)  \nAnswer: (11 + 1) * (11 + 1) = 24",
                "11 + 1 = 12 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)  \nAnswer: ((11 + 1) / 1) + 11 = 24\nInput: 3 3 5 7\nSteps:\n3 + 7 = 10 (left: 3 5 10)\n10 - 5 = 5 (left: 3 5)\n3 * 5 = 15 (left: 15)\n15 + 9 = 24 (left: 24)\nAnswer: (3 + 7) * (10 - 5) = 24"
            ],
            "values": [
                60.0,
                1.002,
                60.0,
                0.003,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.0522285
    },
    "2": {
        "input": "1 1 3 8",
        "step_1": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8)",
                "5 * 2 = 10 (left: 10 3 8)",
                "5 * 2 = 10 (left: 10 10 3)",
                "3 * 1 = 3 (left: 1 3 8)",
                "1 * 1 = 1 (left: 1 3 8)"
            ],
            "values": [
                60.0,
                2.001,
                1.002,
                60.0,
                40.001
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 1.4",
                "2 <- 1.4",
                "3 <- 1.4",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 3 8)",
                "1 * 1 = 1 (left: 1 3 8)",
                "1 * 1 = 1 (left: 1 3 8)",
                "1 * 1 = 1 (left: 1 3 8)",
                "3 * 1 = 3 (left: 1 3 8)"
            ]
        },
        "step_2": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8)\n1 + 3 = 4 (left: 4 8)",
                "1 * 1 = 1 (left: 1 3 8)\n8 / 3 = 2 (left: 1 2)",
                "1 * 1 = 1 (left: 1 3 8)\n3 - 1 = 2 (left: 2 8)",
                "1 * 1 = 1 (left: 1 3 8)\n1 + 3 = 4 (left: 4 8)",
                "3 * 1 = 3 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)"
            ],
            "values": [
                20.002,
                41.0,
                0.002,
                0.003,
                40.001
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 1.4",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "3 * 1 = 3 (left: 1 3 8)",
                "1 * 1 = 1 (left: 1 3 8)",
                "",
                "",
                "1 * 1 = 1 (left: 1 3 8)\n8 / 3 = 2 (left: 1 2)"
            ]
        },
        "step_3": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8)\n4 * 6 = 24 (left: 2 24)",
                "1 * 1 = 1 (left: 1 3 8)\n1 + 3 = 4 (left: 4 8)",
                "8 / 3 = 2 (left: 1 2 8)",
                "8 - 3 = 5 (left: 1 5 8)",
                "1 * 1 = 1 (left: 1 3 8)\n8 / 3 = 2 (left: 1 2)\n1 + 2 = 3 (left: 3)"
            ],
            "values": [
                0.003,
                0.003,
                22.0,
                3.0,
                0.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 2.4",
                "2 <- 1.0",
                "3 <- 2.1",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "",
                "3 * 1 = 3 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)",
                "1 * 1 = 1 (left: 1 3 8)",
                "1 * 1 = 1 (left: 1 3 8)\n8 / 3 = 2 (left: 1 2)",
                "1 * 1 = 1 (left: 1 3 8)\n8 / 3 = 2 (left: 1 2)"
            ]
        },
        "step_4": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 8)",
                "3 * 1 = 3 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)\n9 * 3 = 27 (left: 27 27)",
                "1 * 1 = 1 (left: 1 3 8)\n10 - 5 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 3 8)\n8 / 3 = 2 (left: 1 2)\n2 - 1 = 1 (left: 1)",
                "1 * 1 = 1 (left: 1 3 8)\n8 / 3 = 2 (left: 1 2)\n1 * 2 = 2 (left: 2)"
            ],
            "values": [
                1.002,
                0.003,
                0.003,
                0.002,
                0.001
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 1.0",
                "2 <- 1.3",
                "3 <- 1.4",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "3 * 1 = 3 (left: 1 3 8)",
                "1 * 1 = 1 (left: 1 3 8)",
                "3 * 1 = 3 (left: 1 3 8)",
                "1 * 1 = 1 (left: 1 3 8)",
                "1 * 1 = 1 (left: 1 3 8)"
            ]
        },
        "step_5": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)",
                "1 * 1 = 1 (left: 1 3 8)\n8 - 1 = 7 (left: 7 3)",
                "3 * 1 = 3 (left: 1 3 8)\n8 - 1 = 7 (left: 3 7)",
                "1 * 1 = 1 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)",
                "1 * 1 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)"
            ],
            "values": [
                60.0,
                1.001,
                0.001,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 1.4",
                "1 <- 3.2",
                "2 <- 2.4",
                "3 <- 5.3",
                "4 <- 2.4"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 3 8)",
                "8 / 3 = 2 (left: 1 2 8)",
                "3 * 1 = 3 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)",
                "1 * 1 = 1 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)",
                "3 * 1 = 3 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)"
            ]
        },
        "step_6": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)",
                "8 / 3 = 2 (left: 1 2 8)\n8 - 1 = 7 (left: 2 7)",
                "3 * 1 = 3 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)\n1 + 5 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)\n1 + 5 = 6 (left: 6)",
                "3 * 1 = 3 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)\n1 + 5 = 6 (left: 6)"
            ],
            "values": [
                60.0,
                0.002,
                0.003,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 6.0",
                "1 <- 2.4",
                "2 <- 6.0",
                "3 <- 5.3",
                "4 <- 2.4"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)",
                "3 * 1 = 3 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)",
                "1 * 1 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)",
                "3 * 1 = 3 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)"
            ]
        },
        "step_7": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)",
                "3 * 1 = 3 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)\n1 * 5 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n27 / 9 = 3 (left: 3 27)",
                "1 * 1 = 1 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)\n1 + 5 = 6",
                "3 * 1 = 3 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)\n5 + 1 = 6 (left: 6)"
            ],
            "values": [
                0.002,
                0.002,
                20.002,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 5.3",
                "1 <- 7.2",
                "2 <- 5.3",
                "3 <- 5.3",
                "4 <- 5.3"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)",
                "1 * 1 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n27 / 9 = 3 (left: 3 27)",
                "1 * 1 = 1 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)",
                "1 * 1 = 1 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)",
                "1 * 1 = 1 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)"
            ]
        },
        "step_8": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)\n5 / 1 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n27 / 9 = 3 (left: 3 27)\n3 * 27 = 81 (left: 81)",
                "1 * 1 = 1 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)\n1 + 5 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)\n1 * 5 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)\n1 - 5 = -4 (left: -4)"
            ],
            "values": [
                0.001,
                0.003,
                0.003,
                0.002,
                0.001
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 5.3",
                "2 <- 1.3",
                "3 <- 2.4",
                "4 <- 2.4"
            ],
            "resampled_steps": [
                "3 * 1 = 3 (left: 1 3 8)",
                "1 * 1 = 1 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)",
                "3 * 1 = 3 (left: 1 3 8)",
                "3 * 1 = 3 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)",
                "3 * 1 = 3 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)"
            ]
        },
        "step_9": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8)\n8 / 3 = 2.67 (left: 1 2.67)",
                "1 * 1 = 1 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)\n5 / 1 = 5 (left: 5)",
                "3 * 1 = 3 (left: 1 3 8)\n1 + 3 = 4 (left: 4 8)",
                "3 * 1 = 3 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)\n1 + 5 = 6 (left: 6)",
                "3 * 1 = 3 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)\n1 * 5 = 5 (left: 5)"
            ],
            "values": [
                1.001,
                0.002,
                0.003,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 5.3",
                "2 <- 1.3",
                "3 <- 5.0",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "5 * 2 = 10 (left: 10 3 8)",
                "1 * 1 = 1 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)",
                "3 * 1 = 3 (left: 1 3 8)",
                "3 * 1 = 3 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)",
                "1 * 1 = 1 (left: 1 3 8)"
            ]
        },
        "step_10": {
            "steps": [
                "5 * 2 = 10 (left: 10 3 8)\n10 - 3 = 7 (left: 7 8)",
                "1 * 1 = 1 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)\n1 * 5 = 5 (left: 5)",
                "3 * 1 = 3 (left: 1 3 8)\nPossible next steps:",
                "3 * 1 = 3 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)"
            ],
            "values": [
                1.002,
                0.003,
                0.003,
                60.0,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.0772725
    },
    "3": {
        "input": "1 1 1 8",
        "step_1": {
            "steps": [
                "1 * 8 = 8 (left: 1 1 8)",
                "8 / 1 = 8 (left: 1 1 8)",
                "8 - 1 = 7 (left: 1 1 7)",
                "8 / 1 = 8 (left: 1 1 8)",
                "1 + 1 = 2 (left: 2 1 8)"
            ],
            "values": [
                1.002,
                2.0,
                0.002,
                2.001,
                41.0
            ],
            "resampled": [
                "0 <- 1.4",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 1.4",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 1 8)",
                "",
                "",
                "1 + 1 = 2 (left: 2 1 8)",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 8)\n5 + 4 = 9 (left: 9)",
                "1 + 1 = 2 (left: 1 2 8)",
                "8 / 1 = 8 (left: 1 1 8)",
                "1 + 1 = 2 (left: 2 1 8)\n1 * 8 = 8 (left: 8)",
                "8 - 1 = 7 (left: 1 1 7)"
            ],
            "values": [
                0.003,
                3.0,
                1.001,
                0.001,
                1.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.4",
                "2 <- INIT",
                "3 <- 1.4",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "",
                "1 + 1 = 2 (left: 2 1 8)",
                "",
                "1 + 1 = 2 (left: 2 1 8)",
                "8 / 1 = 8 (left: 1 1 8)"
            ]
        },
        "step_3": {
            "steps": [
                "8 - 1 = 7 (left: 1 1 7)",
                "1 + 1 = 2 (left: 2 1 8)\n2 * 1 = 2 (left: 2 8)",
                "1 * 1 = 1 (left: 1 1 8)",
                "1 + 1 = 2 (left: 2 1 8)\n3 - 4 = -1 (left: -1 7 9)",
                "8 / 1 = 8 (left: 1 1 8)\n5 + 3 = 8 (left: 8 7)"
            ],
            "values": [
                3.0,
                1.001,
                0.003,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.4",
                "2 <- 3.1",
                "3 <- 1.1",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "1 + 1 = 2 (left: 2 1 8)",
                "1 + 1 = 2 (left: 2 1 8)\n2 * 1 = 2 (left: 2 8)",
                "8 / 1 = 8 (left: 1 1 8)",
                ""
            ]
        },
        "step_4": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 8)",
                "1 + 1 = 2 (left: 2 1 8)\n1 * 8 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8)\n2 * 1 = 2 (left: 2 8)\n2 * 8 = 16 (left: 16)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)",
                "1 * 1 = 1 (left: 1 1 8)"
            ],
            "values": [
                1.002,
                0.001,
                0.002,
                60.0,
                1.0
            ],
            "resampled": [
                "0 <- 4.3",
                "1 <- 3.1",
                "2 <- 1.4",
                "3 <- 1.4",
                "4 <- 4.3"
            ],
            "resampled_steps": [
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)",
                "1 + 1 = 2 (left: 2 1 8)\n2 * 1 = 2 (left: 2 8)",
                "1 + 1 = 2 (left: 2 1 8)",
                "1 + 1 = 2 (left: 2 1 8)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)"
            ]
        },
        "step_5": {
            "steps": [
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)\n1 + 8 = 9 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8)\n2 * 1 = 2 (left: 2 8)\n8 - 2 = 6 (left: 6)",
                "1 + 1 = 2 (left: 2 1 8)\n1 + 8 = 9 (left: 2 9)",
                "1 + 1 = 2 (left: 2 1 8)\n2 / 1 = 2 (left: 2 8)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)\n1 * 8 = 8 (left: 8)"
            ],
            "values": [
                0.002,
                0.002,
                0.001,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 1.4",
                "1 <- 4.3",
                "2 <- 1.3",
                "3 <- 4.3",
                "4 <- 4.3"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 1 8)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)",
                "8 / 1 = 8 (left: 1 1 8)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)"
            ]
        },
        "step_6": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 8)\n8 - 2 = 6 (left: 2 6)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)\n8 - 1 = 7 (left: 7)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)\n8 - 1 = 7 (left: 7)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)\n1 + 8 = 9"
            ],
            "values": [
                1.001,
                0.003,
                60.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 4.3",
                "1 <- 6.2",
                "2 <- 6.2",
                "3 <- 4.3",
                "4 <- 6.2"
            ],
            "resampled_steps": [
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)"
            ]
        },
        "step_7": {
            "steps": [
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)\n1 + 8 = 9 (left: 9)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)\n1 * 8 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)\n8 / 1 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)\n1 * 8 = 8 (left: 8 8)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)\n8 / 1 = 8 (left: 8)"
            ],
            "values": [
                0.002,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 6.2",
                "1 <- 6.2",
                "2 <- 6.2",
                "3 <- 6.2",
                "4 <- 4.3"
            ],
            "resampled_steps": [
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)"
            ]
        },
        "step_8": {
            "steps": [
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)\n1 + 8 = 9 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)\n8 / 1 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)\n8 / 1 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)\n1 + 8 = 9 (left: 8 9)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)\n8 - 1 = 7 (left: 7 8)"
            ],
            "values": [
                0.002,
                0.001,
                0.001,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 4.3",
                "1 <- 4.3",
                "2 <- 4.3",
                "3 <- 4.3",
                "4 <- 6.2"
            ],
            "resampled_steps": [
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)"
            ]
        },
        "step_9": {
            "steps": [
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)\n8 * 1 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)\n1 * 8 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)\n8 - 1 = 7 (left: 7)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)\n8 / 1 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)\n8 - 1 = 7 (left: 7)"
            ],
            "values": [
                0.003,
                0.003,
                0.001,
                0.0,
                0.002
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 6.2",
                "2 <- 1.4",
                "3 <- 6.2",
                "4 <- 6.2"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 1 8)\n2 * 1 = 2 (left: 2 8)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)",
                "1 + 1 = 2 (left: 2 1 8)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)"
            ]
        },
        "step_10": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 8)\n2 * 1 = 2 (left: 2 8)\n8 / 2 = 4 (left: 4)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)\n8 - 1 = 7 (left: 7)",
                "1 + 1 = 2 (left: 2 1 8)\nInput: 4 2 6 3",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)\n8 / 1 = 8 (left: 8)",
                "8 / 1 = 8 (left: 1 1 8)\n8 / 1 = 8 (left: 1 8)\n1 * 8 = 8 (left: 8)"
            ],
            "values": [
                0.003,
                0.0,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.102708
    },
    "4": {
        "input": "6 6 6 6",
        "step_1": {
            "steps": [
                "6 + 6 = 12 (left: 6 6 12)",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 / 6 = 1 (left: 1 6 6)",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 * 6 = 36 (left: 6 36 6)"
            ],
            "values": [
                40.001,
                60.0,
                60.0,
                60.0,
                41.0
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 1.4",
                "2 <- 1.1",
                "3 <- 1.0",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "6 + 6 = 12 (left: 6 12 6)",
                "6 * 6 = 36 (left: 6 36 6)",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 + 6 = 12 (left: 6 6 12)",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6)\n6 * 12 = 72 (left: 72 6)",
                "6 * 6 = 36 (left: 6 36 6)\n6 * 6 = 36 (left: 36 6)",
                "6 + 6 = 12 (left: 6 12 6)\n12 / 6 = 2 (left: 6 2)",
                "6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36)"
            ],
            "values": [
                21.0,
                41.0,
                0.001,
                40.0,
                60.0
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 2.4",
                "2 <- 2.3",
                "3 <- INIT",
                "4 <- 2.0"
            ],
            "resampled_steps": [
                "6 + 6 = 12 (left: 6 12 6)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 36)",
                "",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 12 = 72 (left: 72 6)"
            ]
        },
        "step_3": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6)\nInput: 18 6 2 72 6 6",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)",
                "6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 36)\nThere are no possible next steps for the number 36 as it is not a combination of the numbers given in the previous steps.",
                "6 / 6 = 1 (left: 6 1 6)",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 12 = 72 (left: 72 6)\n72 - 6 = 66 (left: 66)"
            ],
            "values": [
                0.003,
                41.0,
                0.003,
                22.0,
                0.003
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- 2.0",
                "2 <- 3.1",
                "3 <- 1.1",
                "4 <- 2.0"
            ],
            "resampled_steps": [
                "6 * 6 = 36 (left: 6 6 36)",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 12 = 72 (left: 72 6)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 12 = 72 (left: 72 6)"
            ]
        },
        "step_4": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36)\n21 - 7 = 14 (left: 3 14)",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 12 = 72 (left: 72 6)\n72 * 6 = 432 (left: 432)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n36 / 1 = 36 (left: 36)",
                "6 + 6 = 12 (left: 6 12 6)\nInput: 0.5 6 18 72",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 12 = 72 (left: 72 6)\n72 + 6 = 78 (left: 78)"
            ],
            "values": [
                0.003,
                0.003,
                40.0,
                40.001,
                0.003
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 1.3",
                "2 <- 2.4",
                "3 <- 2.1",
                "4 <- 2.4"
            ],
            "resampled_steps": [
                "6 + 6 = 12 (left: 6 6 12)",
                "6 + 6 = 12 (left: 6 12 6)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 * 6 = 36 (left: 6 36 6)\n6 * 6 = 36 (left: 36 6)",
                "6 * 6 = 36 (left: 6 6 36)"
            ]
        },
        "step_5": {
            "steps": [
                "6 + 6 = 12 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "6 + 6 = 12 (left: 6 12 6)\n12 / 6 = 2 (left: 2 6)",
                "6 * 6 = 36 (left: 6 6 36)\n36 / 6 = 6 (left: 6 6)",
                "6 * 6 = 36 (left: 6 36 6)\n6 * 6 = 36 (left: 36 6)\n36 - 6 = 30 (left: 30)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)"
            ],
            "values": [
                60.0,
                1.002,
                20.002,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 2.3",
                "2 <- 2.4",
                "3 <- 2.1",
                "4 <- 5.4"
            ],
            "resampled_steps": [
                "6 * 6 = 36 (left: 6 36 6)\n6 * 6 = 36 (left: 36 6)",
                "6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 * 6 = 36 (left: 6 36 6)\n6 * 6 = 36 (left: 36 6)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)"
            ]
        },
        "step_6": {
            "steps": [
                "6 * 6 = 36 (left: 6 36 6)\n6 * 6 = 36 (left: 36 6)\n36 / 6 = 6 (left: 6)",
                "6 + 6 = 12 (left: 6 6 12)\n6 * 6 = 36 (left: 36)\n36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36)\n20 / 4 = 5 (left: 5 20)",
                "6 * 6 = 36 (left: 6 36 6)\n6 * 6 = 36 (left: 36 6)\n5 + 10 = 15 (left: 3 15)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n1 + 36 = 37 (left: 37)"
            ],
            "values": [
                0.002,
                0.003,
                60.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 5.4",
                "1 <- 5.2",
                "2 <- 5.4",
                "3 <- 5.4",
                "4 <- 2.0"
            ],
            "resampled_steps": [
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)",
                "6 * 6 = 36 (left: 6 6 36)\n36 / 6 = 6 (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 12 = 72 (left: 72 6)"
            ]
        },
        "step_7": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n1 * 36 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36)\n36 / 6 = 6 (left: 6 6)\n6 / 6 = 1 (left: 1)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n1 + 36 = 37 (left: 37)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n1 + 36 = 37 (left: 37)",
                "6 + 6 = 12 (left: 6 12 6)\n6 * 12 = 72 (left: 72 6)\n72 + 6 = 78 (left: 78)"
            ],
            "values": [
                60.0,
                0.003,
                0.002,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 5.4",
                "1 <- 5.0",
                "2 <- 7.0",
                "3 <- 7.0",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)",
                "6 + 6 = 12 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n1 * 36 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n1 * 36 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 36 6)\n6 * 6 = 36 (left: 36 6)"
            ]
        },
        "step_8": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n36 - 1 = 35 (left: 35)",
                "6 + 6 = 12 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n1 * 36 = 36 (left: 36)\n36 + 8 = 44",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n1 * 36 = 36 (left: 36)\n36 / 2 = 18",
                "6 * 6 = 36 (left: 6 36 6)\n6 * 6 = 36 (left: 36 6)\n6 - 36 = -30 (left: -30)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.001
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 5.2",
                "2 <- 1.0",
                "3 <- 7.0",
                "4 <- 4.3"
            ],
            "resampled_steps": [
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n36 / 1 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36)\n36 / 6 = 6 (left: 6 6)",
                "6 + 6 = 12 (left: 6 6 12)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n1 * 36 = 36 (left: 36)",
                "6 + 6 = 12 (left: 6 12 6)\nInput: 0.5 6 18 72"
            ]
        },
        "step_9": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n36 / 1 = 36 (left: 36)\nThere are no possible next steps for the number 36 as it is a single number and not a mathematical expression.",
                "6 * 6 = 36 (left: 6 6 36)\n36 / 6 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36)",
                "6 + 6 = 12 (left: 6 6 12)\n12 - 6 = 6 (left: 6 6)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n1 * 36 = 36 (left: 36)\n36 / 2 = 18",
                "6 + 6 = 12 (left: 6 12 6)\nInput: 0.5 6 18 72\n0.5 * 6 = 3 (left: 3 18 72)"
            ],
            "values": [
                0.003,
                40.0,
                0.003,
                0.003,
                21.001
            ],
            "resampled": [
                "0 <- 9.4",
                "1 <- 7.0",
                "2 <- 7.0",
                "3 <- 6.2",
                "4 <- 9.1"
            ],
            "resampled_steps": [
                "6 + 6 = 12 (left: 6 12 6)\nInput: 0.5 6 18 72\n0.5 * 6 = 3 (left: 3 18 72)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n1 * 36 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n1 * 36 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36)\n20 / 4 = 5 (left: 5 20)",
                "6 * 6 = 36 (left: 6 6 36)\n36 / 6 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36)"
            ]
        },
        "step_10": {
            "steps": [
                "6 + 6 = 12 (left: 6 12 6)\nInput: 0.5 6 18 72\n0.5 * 6 = 3 (left: 3 18 72)\n18 * 3 = 54 (left: 54 72)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n1 * 36 = 36 (left: 36)\nThere are no possible next steps for the input 36 as it is the final result.",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n1 * 36 = 36 (left: 36)\n36 / 2 = 18",
                "6 * 6 = 36 (left: 6 6 36)\n20 / 4 = 5 (left: 5 20)\n20 / 5 = 4 (left: 5 4)",
                "6 * 6 = 36 (left: 6 6 36)\n36 / 6 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36)\nThere is only one number, so there are no possible next steps. The final result is 36."
            ],
            "values": [
                1.001,
                60.0,
                0.003,
                22.0,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.123652
    },
    "5": {
        "input": "1 1 2 12",
        "step_1": {
            "steps": [
                "12 - 2 = 10 (left: 1 10 12)",
                "1 + 1 = 2 (left: 2 2 12)",
                "1 + 1 = 2 (left: 2 2 12)",
                "12 - 2 = 10 (left: 1 2 10)",
                "12 - 2 = 10 (left: 1 1 10)"
            ],
            "values": [
                0.003,
                20.002,
                20.002,
                3.0,
                1.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.2",
                "2 <- 1.2",
                "3 <- INIT",
                "4 <- 1.2"
            ],
            "resampled_steps": [
                "",
                "1 + 1 = 2 (left: 2 2 12)",
                "1 + 1 = 2 (left: 2 2 12)",
                "",
                "1 + 1 = 2 (left: 2 2 12)"
            ]
        },
        "step_2": {
            "steps": [
                "12 / 2 = 6 (left: 1 2 6)",
                "1 + 1 = 2 (left: 2 2 12)\n12 - 2 = 10 (left: 2 10)",
                "1 + 1 = 2 (left: 2 2 12)\nInput: 1 10 or 2 10 or 4 12 or 2 6",
                "12 - 2 = 10 (left: 1 2 10)",
                "1 + 1 = 2 (left: 2 2 12)\n12 - 2 = 10 (left: 2 10)"
            ],
            "values": [
                0.002,
                2.0,
                0.003,
                2.001,
                1.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.2",
                "2 <- 1.2",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "1 + 1 = 2 (left: 2 2 12)",
                "1 + 1 = 2 (left: 2 2 12)",
                "",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "12 - 2 = 10 (left: 1 2 10)",
                "1 + 1 = 2 (left: 2 2 12)\n12 - 2 = 10 (left: 2 10)",
                "1 + 1 = 2 (left: 2 2 12)\n12 / 2 = 6 (left: 2 6)",
                "2 * 12 = 24 (left: 1 24)",
                "12 - 1 = 11 (left: 1 2 11)"
            ],
            "values": [
                3.0,
                0.0,
                0.002,
                60.0,
                0.002
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 1.2",
                "2 <- 1.2",
                "3 <- 3.3",
                "4 <- 3.3"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 2 12)",
                "1 + 1 = 2 (left: 2 2 12)",
                "1 + 1 = 2 (left: 2 2 12)",
                "2 * 12 = 24 (left: 1 24)",
                "2 * 12 = 24 (left: 1 24)"
            ]
        },
        "step_4": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 12)\n12 - 2 = 10 (left: 2 10 12)",
                "1 + 1 = 2 (left: 2 2 12)\n12 - 2 = 10 (left: 2 10)",
                "1 + 1 = 2 (left: 2 2 12)\n12 / 2 = 6 (left: 2 6)",
                "2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "2 * 12 = 24 (left: 1 24)\n24 + 1 = 25 (left: 25)"
            ],
            "values": [
                1.002,
                1.0,
                1.002,
                60.0,
                40.001
            ],
            "resampled": [
                "0 <- 4.3",
                "1 <- 1.1",
                "2 <- 3.0",
                "3 <- 4.3",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 2 12)",
                "12 - 2 = 10 (left: 1 2 10)",
                "2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                ""
            ]
        },
        "step_5": {
            "steps": [
                "2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (1 / 1) * (2 * 12) = 24",
                "1 + 1 = 2 (left: 2 2 12)\n2 * 2 = 4 (left: 4 12)",
                "12 - 2 = 10 (left: 1 2 10)\n2 * 10 = 20 (left: 1 20)",
                "2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (1 * 2) * 12 = 24",
                "1 * 1 = 1 (left: 1 2 12)"
            ]
        },
        "results": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.137018
    },
    "6": {
        "input": "1 2 2 6",
        "step_1": {
            "steps": [
                "Input: 3 9 11 22",
                "1 + 2 = 3 (left: 2 3 6)",
                "6 - 2 = 4 (left: 1 4 6)",
                "6 - 2 = 4 (left: 1 4 6)",
                "1 + 2 = 3 (left: 2 2 6)"
            ],
            "values": [
                0.002,
                22.0,
                60.0,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 1.4",
                "2 <- 1.3",
                "3 <- 1.4",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "6 - 2 = 4 (left: 1 4 6)",
                "1 + 2 = 3 (left: 2 2 6)",
                "6 - 2 = 4 (left: 1 4 6)",
                "1 + 2 = 3 (left: 2 2 6)",
                "6 - 2 = 4 (left: 1 4 6)"
            ]
        },
        "step_2": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)",
                "1 + 2 = 3 (left: 2 2 6)\n4 * 10 = 40 (left: 10 10 40)",
                "6 - 2 = 4 (left: 1 4 6)\n6 - 4 = 2 (left: 1 2)",
                "1 + 2 = 3 (left: 2 2 6)\n6 / 2 = 3 (left: 2 3)",
                "6 - 2 = 4 (left: 1 4 6)\n10 / 5 = 2 (left: 2 10)"
            ],
            "values": [
                60.0,
                0.002,
                41.0,
                60.0,
                0.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 2.3",
                "2 <- 1.2",
                "3 <- 2.3",
                "4 <- 2.3"
            ],
            "resampled_steps": [
                "",
                "1 + 2 = 3 (left: 2 2 6)\n6 / 2 = 3 (left: 2 3)",
                "6 - 2 = 4 (left: 1 4 6)",
                "1 + 2 = 3 (left: 2 2 6)\n6 / 2 = 3 (left: 2 3)",
                "1 + 2 = 3 (left: 2 2 6)\n6 / 2 = 3 (left: 2 3)"
            ]
        },
        "step_3": {
            "steps": [
                "6 - 2 = 4 (left: 1 2 4)",
                "1 + 2 = 3 (left: 2 2 6)\n6 / 2 = 3 (left: 2 3)\nPossible next steps:",
                "6 - 2 = 4 (left: 1 4 6)\n9 - 5 = 4 (left: 3 4 1)",
                "1 + 2 = 3 (left: 2 2 6)\n6 / 2 = 3 (left: 2 3)\n3 / 2 = 1.5 (left: 1.5)",
                "1 + 2 = 3 (left: 2 2 6)\n6 / 2 = 3 (left: 2 3)\n2 + 3 = 5 (left: 5)"
            ],
            "values": [
                2.0,
                0.003,
                2.001,
                0.003,
                0.001
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 2.0",
                "2 <- 2.3",
                "3 <- 1.3",
                "4 <- 2.0"
            ],
            "resampled_steps": [
                "6 - 2 = 4 (left: 1 4 6)\n6 - 4 = 2 (left: 1 2)",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)",
                "1 + 2 = 3 (left: 2 2 6)\n6 / 2 = 3 (left: 2 3)",
                "6 - 2 = 4 (left: 1 4 6)",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)"
            ]
        },
        "step_4": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6)\n6 - 4 = 2 (left: 1 2)\n1 / 2 = 0.5 (left: 0.5)",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "1 + 2 = 3 (left: 2 2 6)\n6 / 2 = 3 (left: 2 3)\n10 * 5 = 50 (left: 50)",
                "6 - 2 = 4 (left: 1 4 6)\nPossible next steps:",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)"
            ],
            "values": [
                0.0,
                40.0,
                0.003,
                0.003,
                40.0
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 2.2",
                "2 <- 4.1",
                "3 <- 4.4",
                "4 <- 1.2"
            ],
            "resampled_steps": [
                "6 - 2 = 4 (left: 1 4 6)",
                "6 - 2 = 4 (left: 1 4 6)\n6 - 4 = 2 (left: 1 2)",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6)"
            ]
        },
        "step_5": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6)\n3 + 9 = 12 (left: 12 15)",
                "6 - 2 = 4 (left: 1 4 6)\n6 - 4 = 2 (left: 1 2)\n1 * 2 = 2 (left: 2)",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 / 1) * 6 = 24",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 + 1) * 4 = 24",
                "6 - 2 = 4 (left: 1 4 6)\n20 / 10 = 2 (left: 2 30)"
            ],
            "values": [
                0.003,
                0.002,
                60.0,
                20.002,
                1.0
            ],
            "resampled": [
                "0 <- 5.2",
                "1 <- 1.4",
                "2 <- 5.2",
                "3 <- 2.2",
                "4 <- 1.4"
            ],
            "resampled_steps": [
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 / 1) * 6 = 24",
                "1 + 2 = 3 (left: 2 2 6)",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 / 1) * 6 = 24",
                "6 - 2 = 4 (left: 1 4 6)\n6 - 4 = 2 (left: 1 2)",
                "1 + 2 = 3 (left: 2 2 6)"
            ]
        },
        "step_6": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 / 1) * 6 = 24\nInput: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n4 - 3 = 1 (left: 1 8)\n1 * 8 = 8 (left: 8)\nAnswer: (3 + 5) * (4 - 3) * 8 = 24",
                "1 + 2 = 3 (left: 2 2 6)\n6 - 2 = 4 (left: 2 4)",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 / 1) * 6 = 24\nInput: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n9 * 1 = 9 (left: 9)\n9 * 9 = 81 (left: 81)\nAnswer: (3 * 3) * (8 - 9) * 9 = 24",
                "6 - 2 = 4 (left: 1 4 6)\n6 - 4 = 2 (left: 1 2)\n2 / 1 = 2 (left: 2)",
                "1 + 2 = 3 (left: 2 2 6)\nInput: 1 3"
            ],
            "values": [
                60.0,
                0.003,
                60.0,
                0.001,
                0.003
            ],
            "resampled": [
                "0 <- 6.2",
                "1 <- 4.1",
                "2 <- 4.1",
                "3 <- 6.2",
                "4 <- 6.0"
            ],
            "resampled_steps": [
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 / 1) * 6 = 24\nInput: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n9 * 1 = 9 (left: 9)\n9 * 9 = 81 (left: 81)\nAnswer: (3 * 3) * (8 - 9) * 9 = 24",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 / 1) * 6 = 24\nInput: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n9 * 1 = 9 (left: 9)\n9 * 9 = 81 (left: 81)\nAnswer: (3 * 3) * (8 - 9) * 9 = 24",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 / 1) * 6 = 24\nInput: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n4 - 3 = 1 (left: 1 8)\n1 * 8 = 8 (left: 8)\nAnswer: (3 + 5) * (4 - 3) * 8 = 24"
            ]
        },
        "step_7": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 / 1) * 6 = 24\nInput: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n9 * 1 = 9 (left: 9)\n9 * 9 = 81 (left: 81)\nAnswer: (3 * 3) * (8 - 9) * 9 = 24\nInput: 2 3 4 8\nSteps:\n3 + 4 = 7 (left: 2 7 8)\n7 - 2 = 5 (left: 5 8)\n5 * 8 = 40 (left: 40)\n40 / 8 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: ((2 + 3) * 4) / 8 * (5 - 1) = 24",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 + 2) = 24",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (4 / 1) = 24",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 / 1) * 6 = 24\nInput: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n9 * 1 = 9 (left: 9)\n9 * 9 = 81 (left: 81)\nAnswer: (3 * 3) * (8 - 9) * 9 = 24\nThere is no solution using the numbers 3, 3, 8, and 9 to obtain 24.",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 / 1) * 6 = 24\nInput: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n4 - 3 = 1 (left: 1 8)\n1 * 8 = 8 (left: 8)\nAnswer: (3 + 5) * (4 - 3) * 8 = 24\nInput: 2 3 8 9\nSteps:\n3 * 8 = 24 (left: 2 9 24)\n2 + 9 = 11 (left: 11 24)\n11 - 24 = -13 (left: -13)\nAnswer: (2 + 9) * (3 * 8) = 24"
            ],
            "values": [
                60.0,
                60.0,
                60.0,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 7.1",
                "1 <- 1.4",
                "2 <- 5.2",
                "3 <- 7.4",
                "4 <- 5.2"
            ],
            "resampled_steps": [
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 + 2) = 24",
                "1 + 2 = 3 (left: 2 2 6)",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 / 1) * 6 = 24",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 / 1) * 6 = 24\nInput: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n4 - 3 = 1 (left: 1 8)\n1 * 8 = 8 (left: 8)\nAnswer: (3 + 5) * (4 - 3) * 8 = 24\nInput: 2 3 8 9\nSteps:\n3 * 8 = 24 (left: 2 9 24)\n2 + 9 = 11 (left: 11 24)\n11 - 24 = -13 (left: -13)\nAnswer: (2 + 9) * (3 * 8) = 24",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 / 1) * 6 = 24"
            ]
        },
        "step_8": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 + 2) = 24\nInput: 3 3 3 8\nSteps:\n3 + 3 = 6 (left: 3 6 8)\n6 + 8 = 14 (left: 3 14)\n3 * 14 = 42 (left: 42)\nAnswer: (3 + 3) * (3 + 8) = 24",
                "1 + 2 = 3 (left: 2 2 6)\n1 + 1 = 2 (left: 2 5)",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 / 1) * 6 = 24\nInput: 3 3 5 7\nSteps:\n3 + 5 = 8 (left: 3 7 8)\n8 - 7 = 1 (left: 1 8)\n1 * 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (3 + 5) * ((8 - 7) * 3) = 24",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 / 1) * 6 = 24\nInput: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n4 - 3 = 1 (left: 1 8)\n1 * 8 = 8 (left: 8)\nAnswer: (3 + 5) * (4 - 3) * 8 = 24\nInput: 2 3 8 9\nSteps:\n3 * 8 = 24 (left: 2 9 24)\n2 + 9 = 11 (left: 11 24)\n11 - 24 = -13 (left: -13)\nAnswer: (2 + 9) * (3 * 8) = 24\nInput: 4 5 5 6\nSteps:\n5 * 5 = 25 (left: 4 6 25)\n4 + 6 = 10 (left: 10 25)\n10 - 25 = -15 (left: -15)\nAnswer: (4 + 6) * (5 * 5) = 24",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 / 1) * 6 = 24\nInput: 3 3 6 8\nSteps:\n3 + 6 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 + 6) * (8 - 3) = 24"
            ],
            "values": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 8.3",
                "1 <- 4.4",
                "2 <- 8.0",
                "3 <- 7.4",
                "4 <- 8.2"
            ],
            "resampled_steps": [
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 / 1) * 6 = 24\nInput: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n4 - 3 = 1 (left: 1 8)\n1 * 8 = 8 (left: 8)\nAnswer: (3 + 5) * (4 - 3) * 8 = 24\nInput: 2 3 8 9\nSteps:\n3 * 8 = 24 (left: 2 9 24)\n2 + 9 = 11 (left: 11 24)\n11 - 24 = -13 (left: -13)\nAnswer: (2 + 9) * (3 * 8) = 24\nInput: 4 5 5 6\nSteps:\n5 * 5 = 25 (left: 4 6 25)\n4 + 6 = 10 (left: 10 25)\n10 - 25 = -15 (left: -15)\nAnswer: (4 + 6) * (5 * 5) = 24",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 + 2) = 24\nInput: 3 3 3 8\nSteps:\n3 + 3 = 6 (left: 3 6 8)\n6 + 8 = 14 (left: 3 14)\n3 * 14 = 42 (left: 42)\nAnswer: (3 + 3) * (3 + 8) = 24",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 / 1) * 6 = 24\nInput: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n4 - 3 = 1 (left: 1 8)\n1 * 8 = 8 (left: 8)\nAnswer: (3 + 5) * (4 - 3) * 8 = 24\nInput: 2 3 8 9\nSteps:\n3 * 8 = 24 (left: 2 9 24)\n2 + 9 = 11 (left: 11 24)\n11 - 24 = -13 (left: -13)\nAnswer: (2 + 9) * (3 * 8) = 24",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 / 1) * 6 = 24\nInput: 3 3 5 7\nSteps:\n3 + 5 = 8 (left: 3 7 8)\n8 - 7 = 1 (left: 1 8)\n1 * 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (3 + 5) * ((8 - 7) * 3) = 24"
            ]
        },
        "step_9": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 / 1) * 6 = 24\nInput: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n4 - 3 = 1 (left: 1 8)\n1 * 8 = 8 (left: 8)\nAnswer: (3 + 5) * (4 - 3) * 8 = 24\nInput: 2 3 8 9\nSteps:\n3 * 8 = 24 (left: 2 9 24)\n2 + 9 = 11 (left: 11 24)\n11 - 24 = -13 (left: -13)\nAnswer: (2 + 9) * (3 * 8) = 24\nInput: 4 5 5 6\nSteps:\n5 * 5 = 25 (left: 4 6 25)\n4 + 6 = 10 (left: 10 25)\n10 - 25 = -15 (left: -15)\nAnswer: (4 + 6) * (5 * 5) = 24\nInput: 2 3 4 6\nSteps:\n3 + 4 = 7 (left: 2 6 7)\n7 * 6 = 42 (left: 2 42)\n2 * 42 = 84 (left: 84)\nAnswer: (2 * (3 + 4)) * 6 = 24",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 + 2) = 24",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 + 2) = 24\nInput: 3 3 3 8\nSteps:\n3 + 3 = 6 (left: 3 6 8)\n6 + 8 = 14 (left: 3 14)\n3 * 14 = 42 (left: 42)\nAnswer: (3 + 3) * (3 + 8) = 24\nThere is no way to obtain 24 using the numbers 3, 3, 3, and 8.",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 / 1) * 6 = 24\nInput: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n4 - 3 = 1 (left: 1 8)\n1 * 8 = 8 (left: 8)\nAnswer: (3 + 5) * (4 - 3) * 8 = 24\nInput: 2 3 8 9\nSteps:\n3 * 8 = 24 (left: 2 9 24)\n2 + 9 = 11 (left: 11 24)\n11 - 24 = -13 (left: -13)\nAnswer: (2 + 9) * (3 * 8) = 24\nInput: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n3 * 6 = 18 (left: 12 18)\n18 - 12 = 6 (left: 6)\nAnswer: (5 + 7) * (3 * 6) = 24",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 / 1) * 6 = 24\nInput: 3 3 5 7\nSteps:\n3 + 5 = 8 (left: 3 7 8)\n8 - 7 = 1 (left: 1 8)\n1 * 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (3 + 5) * ((8 - 7) * 3) = 24\nInput: 2 3 4 6\nSteps:\n4 * 6 = 24 (left: 2 3 24)\n3 + 2 = 5 (left: 5 24)\n5 * 24 = 120 (left: 120)\nAnswer: (4 * 6) / (3 + 2) * 24 = 24"
            ],
            "values": [
                60.0,
                60.0,
                0.003,
                40.0,
                60.0
            ],
            "resampled": [
                "0 <- 7.1",
                "1 <- 6.2",
                "2 <- 8.0",
                "3 <- 8.4",
                "4 <- 9.0"
            ],
            "resampled_steps": [
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 + 2) = 24",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 / 1) * 6 = 24\nInput: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n9 * 1 = 9 (left: 9)\n9 * 9 = 81 (left: 81)\nAnswer: (3 * 3) * (8 - 9) * 9 = 24",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 + 2) = 24\nInput: 3 3 3 8\nSteps:\n3 + 3 = 6 (left: 3 6 8)\n6 + 8 = 14 (left: 3 14)\n3 * 14 = 42 (left: 42)\nAnswer: (3 + 3) * (3 + 8) = 24",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 / 1) * 6 = 24\nInput: 3 3 6 8\nSteps:\n3 + 6 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 + 6) * (8 - 3) = 24",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 / 1) * 6 = 24\nInput: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n4 - 3 = 1 (left: 1 8)\n1 * 8 = 8 (left: 8)\nAnswer: (3 + 5) * (4 - 3) * 8 = 24\nInput: 2 3 8 9\nSteps:\n3 * 8 = 24 (left: 2 9 24)\n2 + 9 = 11 (left: 11 24)\n11 - 24 = -13 (left: -13)\nAnswer: (2 + 9) * (3 * 8) = 24\nInput: 4 5 5 6\nSteps:\n5 * 5 = 25 (left: 4 6 25)\n4 + 6 = 10 (left: 10 25)\n10 - 25 = -15 (left: -15)\nAnswer: (4 + 6) * (5 * 5) = 24\nInput: 2 3 4 6\nSteps:\n3 + 4 = 7 (left: 2 6 7)\n7 * 6 = 42 (left: 2 42)\n2 * 42 = 84 (left: 84)\nAnswer: (2 * (3 + 4)) * 6 = 24"
            ]
        },
        "step_10": {
            "steps": [
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 + 2) = 24\nInput: 3 3 4 5\nSteps:\n3 * 5 = 15 (left: 3 4 15)\n4 - 3 = 1 (left: 1 15)\n1 * 15 = 15 (left: 15)\n15 + 15 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((3 * 5) + (4 - 3)) - 6 = 24",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 / 1) * 6 = 24\nInput: 3 3 8 9\nSteps:\n3 * 3 = 9 (left: 8 9 9)\n9 - 8 = 1 (left: 1 9)\n9 * 1 = 9 (left: 9)\n9 * 9 = 81 (left: 81)\nAnswer: (3 * 3) * (8 - 9) * 9 = 24\nInput: 2 3 5 6\nSteps:\n5 + 3 = 8 (left: 2 6 8)\n8 - 6 = 2 (left: 2 2)\n2 * 2 = 4 (left: 4)\n4 * 6 = 24 (left: 24)\nAnswer: ((5 + 3) - 6) * (2 * 2) = 24",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 + 2) = 24\nInput: 3 3 3 8\nSteps:\n3 + 3 = 6 (left: 3 6 8)\n6 + 8 = 14 (left: 3 14)\n3 * 14 = 42 (left: 42)\nAnswer: (3 + 3) * (3 + 8) = 24\nThere is no possible way to obtain 24 using the numbers 3, 3, 3, and 8.",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 / 1) * 6 = 24\nInput: 3 3 6 8\nSteps:\n3 + 6 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (3 + 6) * (8 - 3) = 24\nInput: 8 3 3 3\nSteps:\n8 / 3 = 2 (left: 2 3 3)\n3 + 3 = 6 (left: 2 6)\n6 * 3 = 18 (left: 18)\n2 * 18 = 24 (left: 24)\nAnswer: (8 / 3) * (3 + 3) * 3 = 24",
                "6 - 2 = 4 (left: 1 4 6)\n4 / 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 - 2) * (2 / 1) * 6 = 24\nInput: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n4 - 3 = 1 (left: 1 8)\n1 * 8 = 8 (left: 8)\nAnswer: (3 + 5) * (4 - 3) * 8 = 24\nInput: 2 3 8 9\nSteps:\n3 * 8 = 24 (left: 2 9 24)\n2 + 9 = 11 (left: 11 24)\n11 - 24 = -13 (left: -13)\nAnswer: (2 + 9) * (3 * 8) = 24\nInput: 4 5 5 6\nSteps:\n5 * 5 = 25 (left: 4 6 25)\n4 + 6 = 10 (left: 10 25)\n10 - 25 = -15 (left: -15)\nAnswer: (4 + 6) * (5 * 5) = 24\nInput: 2 3 4 6\nSteps:\n3 + 4 = 7 (left: 2 6 7)\n7 * 6 = 42 (left: 2 42)\n2 * 42 = 84 (left: 84)\nAnswer: (2 * (3 + 4)) * 6 = 24\nInput: 2 4 8 9\nSteps:\n8 / 4 = 2 (left: 2 9 2)\n2 * 9 = 18 (left: 18 2)\n18 - 2 = 16 (left: 16)\nAnswer: (8 / 4) * (2 * 9) = 24"
            ],
            "values": [
                40.0,
                40.0,
                0.003,
                60.0,
                20.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.16417500000000002
    },
    "7": {
        "input": "1 1 10 12",
        "step_1": {
            "steps": [
                "1 - 1 = 0 (left: 0 10 12)",
                "12 + 1 = 13 (left: 1 13 12)",
                "1 + 10 = 11 (left: 11 1 12)",
                "10 - 1 = 9 (left: 1 9 12)",
                "12 - 1 = 11 (left: 1 10 11)"
            ],
            "values": [
                1.002,
                0.002,
                41.0,
                2.001,
                1.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.2",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                "1 + 10 = 11 (left: 11 1 12)",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "1 + 1 = 2 (left: 2 10 12)",
                "12 - 10 = 2 (left: 1 2 12)",
                "1 + 10 = 11 (left: 11 1 12)\n5 - 5 = 0 (left: 0 2)",
                "10 - 1 = 9 (left: 1 9 12)",
                "10 / 1 = 10 (left: 10 1 12)"
            ],
            "values": [
                0.003,
                60.0,
                40.001,
                1.002,
                2.001
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 2.2",
                "2 <- 2.1",
                "3 <- 1.2",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "1 + 10 = 11 (left: 11 1 12)",
                "1 + 10 = 11 (left: 11 1 12)\n5 - 5 = 0 (left: 0 2)",
                "12 - 10 = 2 (left: 1 2 12)",
                "1 + 10 = 11 (left: 11 1 12)",
                "12 - 10 = 2 (left: 1 2 12)"
            ]
        },
        "step_3": {
            "steps": [
                "1 + 10 = 11 (left: 11 1 12)\n11 * 1 = 11 (left: 11 12)",
                "1 + 10 = 11 (left: 11 1 12)\n5 - 5 = 0 (left: 0 2)\n2 - 0 = 2 (left: 2)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "1 + 10 = 11 (left: 11 1 12)\n9 + 3 = 12 (left: 12 27)",
                "12 - 10 = 2 (left: 1 2 12)\nInput: 3 10"
            ],
            "values": [
                0.003,
                0.0,
                40.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2.3",
                "1 <- 2.2",
                "2 <- 2.1",
                "3 <- 1.2",
                "4 <- 1.2"
            ],
            "resampled_steps": [
                "10 - 1 = 9 (left: 1 9 12)",
                "1 + 10 = 11 (left: 11 1 12)\n5 - 5 = 0 (left: 0 2)",
                "12 - 10 = 2 (left: 1 2 12)",
                "1 + 10 = 11 (left: 11 1 12)",
                "1 + 10 = 11 (left: 11 1 12)"
            ]
        },
        "step_4": {
            "steps": [
                "10 - 1 = 9 (left: 1 9 12)\n9 / 1 = 9 (left: 9 12)",
                "1 + 10 = 11 (left: 11 1 12)\n5 - 5 = 0 (left: 0 2)\n5 / 3 = 1.6666666666666667 (left: 1.6666666666666667)",
                "12 - 10 = 2 (left: 1 2 12)\n3 + 5 = 8 (left: 7 8 9)",
                "1 + 10 = 11 (left: 11 1 12)\n11 + 1 = 12 (left: 1 12)",
                "1 + 10 = 11 (left: 11 1 12)\n4 * 8 = 32 (left: 10 2 32)"
            ],
            "values": [
                0.002,
                0.002,
                2.001,
                0.003,
                22.0
            ],
            "resampled": [
                "0 <- 4.4",
                "1 <- 2.1",
                "2 <- 2.2",
                "3 <- 3.2",
                "4 <- 3.2"
            ],
            "resampled_steps": [
                "1 + 10 = 11 (left: 11 1 12)\n4 * 8 = 32 (left: 10 2 32)",
                "12 - 10 = 2 (left: 1 2 12)",
                "1 + 10 = 11 (left: 11 1 12)\n5 - 5 = 0 (left: 0 2)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)"
            ]
        },
        "step_5": {
            "steps": [
                "1 + 10 = 11 (left: 11 1 12)\n4 * 8 = 32 (left: 10 2 32)\n32 / 2 = 16 (left: 10 16)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "1 + 10 = 11 (left: 11 1 12)\n5 - 5 = 0 (left: 0 2)\n2 / 0 = undefined",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)"
            ],
            "values": [
                0.003,
                60.0,
                0.003,
                0.003,
                0.0
            ],
            "resampled": [
                "0 <- 5.1",
                "1 <- 2.1",
                "2 <- 2.2",
                "3 <- 2.1",
                "4 <- 2.2"
            ],
            "resampled_steps": [
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "12 - 10 = 2 (left: 1 2 12)",
                "1 + 10 = 11 (left: 11 1 12)\n5 - 5 = 0 (left: 0 2)",
                "12 - 10 = 2 (left: 1 2 12)",
                "1 + 10 = 11 (left: 11 1 12)\n5 - 5 = 0 (left: 0 2)"
            ]
        },
        "step_6": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "1 + 10 = 11 (left: 11 1 12)\n5 - 5 = 0 (left: 0 2)\n0 + 2 = 2 (left: 2) ",
                "12 - 10 = 2 (left: 1 2 12)\n2 + 12 = 14 (left: 1 14)",
                "1 + 10 = 11 (left: 11 1 12)\n5 - 5 = 0 (left: 0 2)\n2 - 0 = 2 (left: 2)"
            ],
            "values": [
                0.001,
                60.0,
                0.002,
                40.0,
                0.001
            ],
            "resampled": [
                "0 <- 5.1",
                "1 <- 5.1",
                "2 <- 6.3",
                "3 <- 1.2",
                "4 <- 6.1"
            ],
            "resampled_steps": [
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "12 - 10 = 2 (left: 1 2 12)\n2 + 12 = 14 (left: 1 14)",
                "1 + 10 = 11 (left: 11 1 12)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)"
            ]
        },
        "step_7": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12)\n2 + 12 = 14 (left: 1 14)\n14 * 1 = 14 (left: 14 14)",
                "1 + 10 = 11 (left: 11 1 12)\n4 / 3 = 1 (left: 1 7)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 / 1 = 10 (left: 10)"
            ],
            "values": [
                0.003,
                0.001,
                0.003,
                1.001,
                0.002
            ],
            "resampled": [
                "0 <- 5.1",
                "1 <- 6.1",
                "2 <- 7.3",
                "3 <- 6.3",
                "4 <- 5.1"
            ],
            "resampled_steps": [
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "1 + 10 = 11 (left: 11 1 12)\n4 / 3 = 1 (left: 1 7)",
                "12 - 10 = 2 (left: 1 2 12)\n2 + 12 = 14 (left: 1 14)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)"
            ]
        },
        "step_8": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "1 + 10 = 11 (left: 11 1 12)\n4 / 3 = 1 (left: 1 7)\n1 * 7 = 7 (left: 7)",
                "12 - 10 = 2 (left: 1 2 12)\n2 + 12 = 14 (left: 1 14)\n1 + 14 = 15 (left: 15)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 / 1 = 10 (left: 10)"
            ],
            "values": [
                0.002,
                0.002,
                0.001,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 6.1",
                "1 <- 3.2",
                "2 <- 3.2",
                "3 <- 6.1",
                "4 <- 5.1"
            ],
            "resampled_steps": [
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)"
            ]
        },
        "step_9": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n1 + 10 = 11 (left: 11)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n1 + 10 = 11 (left: 10 11)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n5 / 5 = 1 (left: 1)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9)"
            ],
            "values": [
                0.002,
                0.0,
                0.001,
                0.0,
                0.002
            ],
            "resampled": [
                "0 <- 6.1",
                "1 <- 4.4",
                "2 <- 1.2",
                "3 <- 2.1",
                "4 <- 4.4"
            ],
            "resampled_steps": [
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "1 + 10 = 11 (left: 11 1 12)\n4 * 8 = 32 (left: 10 2 32)",
                "1 + 10 = 11 (left: 11 1 12)",
                "12 - 10 = 2 (left: 1 2 12)",
                "1 + 10 = 11 (left: 11 1 12)\n4 * 8 = 32 (left: 10 2 32)"
            ]
        },
        "step_10": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "1 + 10 = 11 (left: 11 1 12)\n4 * 8 = 32 (left: 10 2 32)\nPossible next steps:",
                "1 + 10 = 11 (left: 11 1 12)\n4 - 6 = -2 (left: -2)",
                "12 - 10 = 2 (left: 1 2 12)\n12 - 2 = 10 (left: 2 10)",
                "1 + 10 = 11 (left: 11 1 12)\n4 * 8 = 32 (left: 10 2 32)\n10 / 2 = 5 (left: 5 32)"
            ],
            "values": [
                0.003,
                0.003,
                0.002,
                0.0,
                1.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.192596
    },
    "8": {
        "input": "2 2 10 10",
        "step_1": {
            "steps": [
                "10 + 2 = 12 (left: 2 10 12)",
                "10 / 2 = 5 (left: 2 5 10)",
                "2 + 2 = 4 (left: 4 10 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "10 - 2 = 8 (left: 2 8 10)"
            ],
            "values": [
                2.001,
                1.002,
                1.002,
                0.003,
                2.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                "",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "10 - 2 = 8 (left: 2 8 10)",
                "10 / 2 = 5 (left: 2 5 10)",
                "2 * 2 = 4 (left: 4 10 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 + 2 = 12 (left: 2 10 12)"
            ],
            "values": [
                0.003,
                2.001,
                40.001,
                20.002,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 2.3",
                "4 <- 2.3"
            ],
            "resampled_steps": [
                "",
                "",
                "",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10)"
            ]
        },
        "step_3": {
            "steps": [
                "10 + 2 = 12 (left: 2 12 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 10 8)",
                "10 - 2 = 8 (left: 2 8 10)\n10 - 2 = 8 (left: 8 8)",
                "10 - 2 = 8 (left: 2 8 10)\n2 + 8 = 10 (left: 10 10)"
            ],
            "values": [
                60.0,
                0.003,
                2.001,
                0.003,
                0.001
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 3.0",
                "2 <- 3.0",
                "3 <- 2.3",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "10 + 2 = 12 (left: 2 12 10)",
                "10 + 2 = 12 (left: 2 12 10)",
                "10 + 2 = 12 (left: 2 12 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                ""
            ]
        },
        "step_4": {
            "steps": [
                "10 + 2 = 12 (left: 2 12 10)\n2 * 12 = 24 (left: 10 24)",
                "10 + 2 = 12 (left: 2 12 10)\n12 - 2 = 10 (left: 10 10)",
                "10 + 2 = 12 (left: 2 12 10)\n12 - 2 = 10 (left: 10 10)",
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)",
                "10 - 2 = 8 (left: 2 8 10)"
            ],
            "values": [
                0.003,
                21.001,
                0.0,
                20.001,
                1.002
            ],
            "resampled": [
                "0 <- 4.3",
                "1 <- 4.1",
                "2 <- 4.3",
                "3 <- 4.3",
                "4 <- 3.0"
            ],
            "resampled_steps": [
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)",
                "10 + 2 = 12 (left: 2 12 10)\n12 - 2 = 10 (left: 10 10)",
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)",
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)",
                "10 + 2 = 12 (left: 2 12 10)"
            ]
        },
        "step_5": {
            "steps": [
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)\n5 * 10 = 50 (left: 50)",
                "10 + 2 = 12 (left: 2 12 10)\n12 - 2 = 10 (left: 10 10)\n10 + 10 = 20",
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)\n16 / 4 = 4 (left: 4 64)",
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)\n5 + 10 = 15 (left: 15)",
                "10 + 2 = 12 (left: 2 12 10)\n12 / 2 = 6 (left: 6 10)"
            ],
            "values": [
                0.002,
                0.003,
                60.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 2.3",
                "2 <- 5.2",
                "3 <- 2.2",
                "4 <- 2.3"
            ],
            "resampled_steps": [
                "10 + 2 = 12 (left: 2 12 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)\n16 / 4 = 4 (left: 4 64)",
                "2 * 2 = 4 (left: 4 10 10)",
                "10 - 2 = 8 (left: 2 8 10)"
            ]
        },
        "step_6": {
            "steps": [
                "10 + 2 = 12 (left: 2 12 10)\n12 - 2 = 10 (left: 10 10)",
                "10 - 2 = 8 (left: 2 8 10)\nInput: 4 10",
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)\n16 / 4 = 4 (left: 4 64)\n64 - 4 = 60 (left: 60)",
                "2 * 2 = 4 (left: 4 10 10)\n8 - 6 = 2 (left: 2 8)",
                "10 - 2 = 8 (left: 2 8 10)\n2 * 8 = 16 (left: 16 10)"
            ],
            "values": [
                0.002,
                0.003,
                0.002,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 4.3",
                "1 <- 5.2",
                "2 <- 2.2",
                "3 <- 2.3",
                "4 <- 3.0"
            ],
            "resampled_steps": [
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)",
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)\n16 / 4 = 4 (left: 4 64)",
                "2 * 2 = 4 (left: 4 10 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 + 2 = 12 (left: 2 12 10)"
            ]
        },
        "step_7": {
            "steps": [
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)\n5 * 10 = 50 (left: 50)",
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)\n16 / 4 = 4 (left: 4 64)\n9 * 3 = 27 (left: 3 27)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10)",
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)",
                "10 + 2 = 12 (left: 2 12 10)\n12 / 2 = 6 (left: 6 10)"
            ],
            "values": [
                0.003,
                40.001,
                0.003,
                20.002,
                0.003
            ],
            "resampled": [
                "0 <- 5.2",
                "1 <- 4.3",
                "2 <- 7.1",
                "3 <- 7.3",
                "4 <- 7.1"
            ],
            "resampled_steps": [
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)\n16 / 4 = 4 (left: 4 64)",
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)",
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)\n16 / 4 = 4 (left: 4 64)\n9 * 3 = 27 (left: 3 27)",
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)",
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)\n16 / 4 = 4 (left: 4 64)\n9 * 3 = 27 (left: 3 27)"
            ]
        },
        "step_8": {
            "steps": [
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)\n16 / 4 = 4 (left: 4 64)\n10 + 5 = 15 (left: 15 15 20)",
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)\n9 / 3 = 3 (left: 3)",
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)\n16 / 4 = 4 (left: 4 64)\n9 * 3 = 27 (left: 3 27)\n3 / 27 = 0.1111111111111111 (left: 0.1111111111111111 27)",
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)\n3 * 9 = 27 (left: 27 27)",
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)\n16 / 4 = 4 (left: 4 64)\n9 * 3 = 27 (left: 3 27)\n27 / 3 = 9 (left: 9 27)"
            ],
            "values": [
                0.003,
                0.003,
                21.0,
                0.003,
                20.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 2.3",
                "2 <- 7.1",
                "3 <- 3.0",
                "4 <- 8.2"
            ],
            "resampled_steps": [
                "",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)\n16 / 4 = 4 (left: 4 64)\n9 * 3 = 27 (left: 3 27)",
                "10 + 2 = 12 (left: 2 12 10)",
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)\n16 / 4 = 4 (left: 4 64)\n9 * 3 = 27 (left: 3 27)\n3 / 27 = 0.1111111111111111 (left: 0.1111111111111111 27)"
            ]
        },
        "step_9": {
            "steps": [
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10)\n2 + 8 = 10 (left: 10 10)",
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)\n16 / 4 = 4 (left: 4 64)\n9 * 3 = 27 (left: 3 27)\n27 / 3 = 9 (left: 9)",
                "10 + 2 = 12 (left: 2 12 10)\n10 - 2 = 8 (left: 8 10)",
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)\n16 / 4 = 4 (left: 4 64)\n9 * 3 = 27 (left: 3 27)\n3 / 27 = 0.1111111111111111 (left: 0.1111111111111111 27)\n27 / 0.1111111111111111 = 243 (left: 243)"
            ],
            "values": [
                1.002,
                0.002,
                0.003,
                40.0,
                0.003
            ],
            "resampled": [
                "0 <- 8.2",
                "1 <- 2.3",
                "2 <- 8.4",
                "3 <- 9.3",
                "4 <- 9.3"
            ],
            "resampled_steps": [
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)\n16 / 4 = 4 (left: 4 64)\n9 * 3 = 27 (left: 3 27)\n3 / 27 = 0.1111111111111111 (left: 0.1111111111111111 27)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)\n16 / 4 = 4 (left: 4 64)\n9 * 3 = 27 (left: 3 27)\n27 / 3 = 9 (left: 9 27)",
                "10 + 2 = 12 (left: 2 12 10)\n10 - 2 = 8 (left: 8 10)",
                "10 + 2 = 12 (left: 2 12 10)\n10 - 2 = 8 (left: 8 10)"
            ]
        },
        "step_10": {
            "steps": [
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)\n16 / 4 = 4 (left: 4 64)\n9 * 3 = 27 (left: 3 27)\n3 / 27 = 0.1111111111111111 (left: 0.1111111111111111 27)\n10 - 5 = 5 (left: 5 3)",
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)",
                "10 - 2 = 8 (left: 2 8 10)\n10 / 2 = 5 (left: 5 10)\n16 / 4 = 4 (left: 4 64)\n9 * 3 = 27 (left: 3 27)\n27 / 3 = 9 (left: 9 27)\n27 / 9 = 3 (left: 3 27)",
                "10 + 2 = 12 (left: 2 12 10)\n10 - 2 = 8 (left: 8 10)\n18 - 2 = 16 (left: 16)",
                "10 + 2 = 12 (left: 2 12 10)\n10 - 2 = 8 (left: 8 10)\n8 * 10 = 80 (left: 80)"
            ],
            "values": [
                2.0,
                0.0,
                40.001,
                0.0,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.22075499999999998
    },
    "9": {
        "input": "1 1 1 12",
        "step_1": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 12)",
                "1 * 1 = 1 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "12 - 1 = 11 (left: 1 1 11)",
                "12 - 1 = 11 (left: 1 1 11)"
            ],
            "values": [
                41.0,
                60.0,
                40.001,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 1.0",
                "2 <- 1.2",
                "3 <- 1.0",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "12 / 1 = 12 (left: 1 1 12)",
                "1 * 1 = 1 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "1 * 1 = 1 (left: 1 1 12)",
                "1 * 1 = 1 (left: 1 1 12)"
            ]
        },
        "step_2": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12)\n1 * 1 = 1 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12)\n1 / 1 = 1 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12)\n7 / 5 = 1.4 (left: 5 1.4)",
                "1 * 1 = 1 (left: 1 1 12)\n1 + 12 = 13 (left: 1 13)",
                "1 * 1 = 1 (left: 1 1 12)\n1 * 1 = 1 (left: 1 12)"
            ],
            "values": [
                1.001,
                1.002,
                0.002,
                1.002,
                1.002
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 1.1",
                "2 <- 1.0",
                "3 <- 1.1",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 1 12)",
                "1 * 1 = 1 (left: 1 1 12)",
                "1 * 1 = 1 (left: 1 1 12)",
                "1 * 1 = 1 (left: 1 1 12)",
                "1 * 1 = 1 (left: 1 1 12)\n1 / 1 = 1 (left: 1 12)"
            ]
        },
        "step_3": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 12)\n12 / 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12)\n3 + 5 = 8 (left: 7 8 10)",
                "1 * 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)",
                "1 * 1 = 1 (left: 1 1 12)\n3 + 5 = 8 (left: 2 8 7)",
                "1 * 1 = 1 (left: 1 1 12)\n1 / 1 = 1 (left: 1 12)\n1 / 12 = 0.0833 (left: 0.0833)"
            ],
            "values": [
                20.001,
                41.0,
                60.0,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 3.2",
                "2 <- 3.0",
                "3 <- 3.2",
                "4 <- 3.2"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 1 12)\n3 + 5 = 8 (left: 7 8 10)",
                "1 * 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)",
                "1 * 1 = 1 (left: 1 1 12)\n12 / 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)",
                "1 * 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)"
            ]
        },
        "step_4": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 12)\n3 + 5 = 8 (left: 7 8 10)\n7 * 10 = 70 (left: 8 70)",
                "1 * 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n2 - 2 = 0 (left: 0 2 2)",
                "1 * 1 = 1 (left: 1 1 12)\n12 / 1 = 12 (left: 1 12)\n1 * 12 = 12 (left: 12)",
                "1 * 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)"
            ],
            "values": [
                0.001,
                20.001,
                0.001,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 3.2",
                "2 <- 3.2",
                "3 <- 3.0",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 1 12)\n3 + 5 = 8 (left: 7 8 10)",
                "1 * 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)",
                "1 * 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)",
                "1 * 1 = 1 (left: 1 1 12)\n12 / 1 = 12 (left: 1 12)",
                "1 * 1 = 1 (left: 1 1 12)"
            ]
        },
        "step_5": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 12)\n3 + 5 = 8 (left: 7 8 10)\n7 + 8 = 15 (left: 10 15)",
                "1 * 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "1 * 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 1 12)\n12 / 1 = 12 (left: 1 12)\n12 / 1 = 12 (left: 12)",
                "1 * 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)"
            ],
            "values": [
                0.003,
                0.002,
                0.003,
                0.002,
                60.0
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 3.1",
                "2 <- 5.4",
                "3 <- 1.0",
                "4 <- 1.2"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 1 12)",
                "1 * 1 = 1 (left: 1 1 12)\n3 + 5 = 8 (left: 7 8 10)",
                "1 * 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)",
                "1 * 1 = 1 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12)"
            ]
        },
        "step_6": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 12)\n3 / 3 = 1 (left: 1 6)",
                "1 * 1 = 1 (left: 1 1 12)\n3 + 5 = 8 (left: 7 8 10)\n8 - 7 = 1 (left: 1 8 10)",
                "1 * 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 12)\n1 * 1 = 1 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12)\n1 * 1 = 1 (left: 1 12)"
            ],
            "values": [
                60.0,
                2.001,
                0.003,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 6.0",
                "1 <- 6.0",
                "2 <- 3.2",
                "3 <- 3.1",
                "4 <- 3.2"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 1 12)\n3 / 3 = 1 (left: 1 6)",
                "1 * 1 = 1 (left: 1 1 12)\n3 / 3 = 1 (left: 1 6)",
                "1 * 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)",
                "1 * 1 = 1 (left: 1 1 12)\n3 + 5 = 8 (left: 7 8 10)",
                "1 * 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)"
            ]
        },
        "step_7": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 12)\n3 / 3 = 1 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 1 12)\n3 / 3 = 1 (left: 1 6)\n1 + 6 = 7",
                "1 * 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 1 12)\n3 + 5 = 8 (left: 7 8 10)\n10 / 7 = 1.43 (left: 1.43 8)",
                "1 * 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)"
            ],
            "values": [
                0.002,
                0.003,
                40.0,
                1.002,
                0.002
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 3.2",
                "2 <- 6.0",
                "3 <- 6.0",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)",
                "1 * 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)",
                "1 * 1 = 1 (left: 1 1 12)\n3 / 3 = 1 (left: 1 6)",
                "1 * 1 = 1 (left: 1 1 12)\n3 / 3 = 1 (left: 1 6)",
                "1 * 1 = 1 (left: 1 1 12)"
            ]
        },
        "step_8": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "1 * 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 1 12)\n3 / 3 = 1 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 1 12)\n3 / 3 = 1 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 1 12)\n12 / 1 = 12 (left: 1 12)"
            ],
            "values": [
                0.003,
                0.003,
                0.002,
                0.002,
                1.002
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 3.1",
                "2 <- 3.2",
                "3 <- 7.2",
                "4 <- 6.0"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 1 12)\n3 + 5 = 8 (left: 7 8 10)",
                "1 * 1 = 1 (left: 1 1 12)\n3 + 5 = 8 (left: 7 8 10)",
                "1 * 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)",
                "1 * 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 1 12)\n3 / 3 = 1 (left: 1 6)"
            ]
        },
        "step_9": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 12)\n3 + 5 = 8 (left: 7 8 10)\nInput: 1.1428571428571428 3 10",
                "1 * 1 = 1 (left: 1 1 12)\n3 + 5 = 8 (left: 7 8 10)\n7 * 8 = 56 (left: 10 56)",
                "1 * 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 * 1) + (1 + 12) = 24",
                "1 * 1 = 1 (left: 1 1 12)\n3 / 3 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7)"
            ],
            "values": [
                0.003,
                0.002,
                0.003,
                60.0,
                0.001
            ],
            "resampled": [
                "0 <- 9.3",
                "1 <- 1.1",
                "2 <- 7.2",
                "3 <- 1.1",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 * 1) + (1 + 12) = 24",
                "1 * 1 = 1 (left: 1 1 12)",
                "1 * 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 1 12)",
                ""
            ]
        },
        "step_10": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 * 1) + (1 + 12) = 24\nInput: 3 3 8 2\nSteps:\n3 + 3 = 6 (left: 6 8 2)\n6 + 2 = 8 (left: 8 8)\n8 * 8 = 64 (left: 64)\nAnswer: (3 + 3) * (8 + 2) = 24",
                "1 * 1 = 1 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)",
                "1 * 1 = 1 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (1 * 1) * (1 + 12) = 24",
                "1 * 1 = 1 (left: 1 1 12)\n1 - 1 = 0 (left: 0 12)",
                "1 + 1 = 2 (left: 1 2 12)"
            ],
            "values": [
                60.0,
                40.0,
                60.0,
                20.0,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.24620599999999998
    },
    "10": {
        "input": "1 1 2 8",
        "step_1": {
            "steps": [
                "2 + 1 = 3 (left: 1 3 8)",
                "8 - 1 = 7 (left: 1 2 7)",
                "1 * 1 = 1 (left: 1 2 8)",
                "8 - 1 = 7 (left: 1 2 7)",
                "8 - 1 = 7 (left: 1 2 7)"
            ],
            "values": [
                21.001,
                1.001,
                41.0,
                1.002,
                2.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.0",
                "2 <- 1.2",
                "3 <- 1.0",
                "4 <- 1.4"
            ],
            "resampled_steps": [
                "",
                "2 + 1 = 3 (left: 1 3 8)",
                "1 * 1 = 1 (left: 1 2 8)",
                "2 + 1 = 3 (left: 1 3 8)",
                "8 - 1 = 7 (left: 1 2 7)"
            ]
        },
        "step_2": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 8)",
                "2 + 1 = 3 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)",
                "1 * 1 = 1 (left: 1 2 8)\n2 * 8 = 16 (left: 1 16)",
                "2 + 1 = 3 (left: 1 3 8)\n3 - 1 = 2 (left: 2 8)",
                "8 - 1 = 7 (left: 1 2 7)\n7 / 2 = 3.5 (left: 1 3.5)"
            ],
            "values": [
                41.0,
                60.0,
                0.001,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- 1.0",
                "3 <- 1.2",
                "4 <- 2.0"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 2 8)",
                "1 * 1 = 1 (left: 1 2 8)",
                "2 + 1 = 3 (left: 1 3 8)",
                "1 * 1 = 1 (left: 1 2 8)",
                "1 * 1 = 1 (left: 1 2 8)"
            ]
        },
        "step_3": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 8)\n1 + 8 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "2 + 1 = 3 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)",
                "1 * 1 = 1 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "1 * 1 = 1 (left: 1 2 8)\n5 + 7 = 12 (left: 3 12)"
            ],
            "values": [
                0.001,
                60.0,
                60.0,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 3.2",
                "2 <- 3.3",
                "3 <- 3.2",
                "4 <- 3.2"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 2 8)",
                "2 + 1 = 3 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)",
                "1 * 1 = 1 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "2 + 1 = 3 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)",
                "2 + 1 = 3 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)"
            ]
        },
        "step_4": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "2 + 1 = 3 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)\n8 / 3 = 2.67 (left: 2.67)",
                "1 * 1 = 1 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "2 + 1 = 3 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)\n8 / 3 = 2.67 (left: 2.67 8)",
                "2 + 1 = 3 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)\n8 / 3 = 2.6667 (left: 2.6667)"
            ],
            "values": [
                60.0,
                0.003,
                0.002,
                1.002,
                0.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 2.1",
                "2 <- 3.3",
                "3 <- 2.0",
                "4 <- 3.3"
            ],
            "resampled_steps": [
                "",
                "2 + 1 = 3 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)",
                "1 * 1 = 1 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "1 * 1 = 1 (left: 1 2 8)",
                "1 * 1 = 1 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)"
            ]
        },
        "step_5": {
            "steps": [
                "8 / 1 = 8 (left: 1 2 8)",
                "2 + 1 = 3 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n8 / 3 = 2.67 (left: 2.67)",
                "1 * 1 = 1 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 2 8)\n2 * 6 = 12 (left: 4 12)",
                "1 * 1 = 1 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)"
            ],
            "values": [
                41.0,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 3.1",
                "2 <- 3.1",
                "3 <- 3.2",
                "4 <- 3.2"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 2 8)",
                "1 * 1 = 1 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "1 * 1 = 1 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "2 + 1 = 3 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)",
                "2 + 1 = 3 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)"
            ]
        },
        "step_6": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 8)\n4 * 8 = 32 (left: 1 32)",
                "1 * 1 = 1 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n3 + 9 = 12 (left: 12)",
                "1 * 1 = 1 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "2 + 1 = 3 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5)",
                "2 + 1 = 3 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)"
            ],
            "values": [
                20.001,
                0.003,
                0.003,
                0.001,
                60.0
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 3.2",
                "2 <- 3.2",
                "3 <- 5.0",
                "4 <- 5.0"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 2 8)",
                "2 + 1 = 3 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)",
                "2 + 1 = 3 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)",
                "8 / 1 = 8 (left: 1 2 8)",
                "8 / 1 = 8 (left: 1 2 8)"
            ]
        },
        "step_7": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 8)\nInput: 3 5 7",
                "2 + 1 = 3 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)\n3 + 8 = 11 (left: 11)",
                "2 + 1 = 3 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)\n3 + 8 = 11 (left: 11)",
                "8 / 1 = 8 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "8 / 1 = 8 (left: 1 2 8)\n2 * 8 = 16 (left: 1 16)"
            ],
            "values": [
                0.003,
                0.002,
                0.001,
                40.0,
                0.002
            ],
            "resampled": [
                "0 <- 3.3",
                "1 <- 7.3",
                "2 <- 7.3",
                "3 <- 7.3",
                "4 <- 6.0"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "8 / 1 = 8 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "8 / 1 = 8 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "8 / 1 = 8 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "1 * 1 = 1 (left: 1 2 8)\n4 * 8 = 32 (left: 1 32)"
            ]
        },
        "step_8": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "8 / 1 = 8 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n6 - 1 = 5 (left: 5)",
                "8 / 1 = 8 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "8 / 1 = 8 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n1 + 6 = 7",
                "1 * 1 = 1 (left: 1 2 8)\n4 * 8 = 32 (left: 1 32)\n1 * 32 = 32 (left: 32)"
            ],
            "values": [
                0.0,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 6.4",
                "2 <- 5.0",
                "3 <- 7.3",
                "4 <- 5.0"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "2 + 1 = 3 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "8 / 1 = 8 (left: 1 2 8)",
                "8 / 1 = 8 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "8 / 1 = 8 (left: 1 2 8)"
            ]
        },
        "step_9": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "2 + 1 = 3 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (2 + 1) * (8 / 1) = 24",
                "8 / 1 = 8 (left: 1 2 8)\n2 - 1 = 1 (left: 1 8)",
                "8 / 1 = 8 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n6 - 1 = 5 (left: 5)",
                "8 / 1 = 8 (left: 1 2 8)\n7 - 3 = 4 (left: 1 4 5)"
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.269836
    },
    "11": {
        "input": "1 1 4 8",
        "step_1": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 8)",
                "1 * 1 = 1 (left: 1 4 8)",
                "4 - 1 = 3 (left: 1 3 8)",
                "8 - 1 = 7 (left: 1 4 7)",
                "1 * 1 = 1 (left: 1 4 8)"
            ],
            "values": [
                1.002,
                20.002,
                60.0,
                2.001,
                1.002
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- 1.1",
                "3 <- 1.2",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "4 - 1 = 3 (left: 1 3 8)",
                "4 - 1 = 3 (left: 1 3 8)",
                "1 * 1 = 1 (left: 1 4 8)",
                "4 - 1 = 3 (left: 1 3 8)",
                "1 * 1 = 1 (left: 1 4 8)"
            ]
        },
        "step_2": {
            "steps": [
                "4 - 1 = 3 (left: 1 3 8)\n10 / 5 = 2 (left: 5 2)",
                "4 - 1 = 3 (left: 1 3 8)\n1 + 3 = 4 (left: 4 8)",
                "1 * 1 = 1 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)",
                "4 - 1 = 3 (left: 1 3 8)\n10 - 5 = 5 (left: 5 2)",
                "1 * 1 = 1 (left: 1 4 8)\n1 + 4 = 5 (left: 5 8)"
            ],
            "values": [
                60.0,
                0.003,
                60.0,
                40.0,
                1.002
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 2.2",
                "2 <- 1.1",
                "3 <- 2.0",
                "4 <- 2.3"
            ],
            "resampled_steps": [
                "4 - 1 = 3 (left: 1 3 8)\n10 / 5 = 2 (left: 5 2)",
                "1 * 1 = 1 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)",
                "1 * 1 = 1 (left: 1 4 8)",
                "4 - 1 = 3 (left: 1 3 8)\n10 / 5 = 2 (left: 5 2)",
                "4 - 1 = 3 (left: 1 3 8)\n10 - 5 = 5 (left: 5 2)"
            ]
        },
        "step_3": {
            "steps": [
                "4 - 1 = 3 (left: 1 3 8)\n10 / 5 = 2 (left: 5 2)\n5 - 2 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)\n1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 4 8)\n4 / 1 = 4 (left: 4 8)",
                "4 - 1 = 3 (left: 1 3 8)\n10 / 5 = 2 (left: 5 2)\n5 * 2 = 10 (left: 10)",
                "4 - 1 = 3 (left: 1 3 8)\n10 - 5 = 5 (left: 5 2)\n5 / 2 = 2.5 (left: 2.5)"
            ],
            "values": [
                0.0,
                0.001,
                0.002,
                0.003,
                0.0
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 2.2",
                "2 <- 2.2",
                "3 <- 2.3",
                "4 <- 2.0"
            ],
            "resampled_steps": [
                "4 - 1 = 3 (left: 1 3 8)",
                "1 * 1 = 1 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)",
                "1 * 1 = 1 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)",
                "4 - 1 = 3 (left: 1 3 8)\n10 - 5 = 5 (left: 5 2)",
                "4 - 1 = 3 (left: 1 3 8)\n10 / 5 = 2 (left: 5 2)"
            ]
        },
        "step_4": {
            "steps": [
                "4 - 1 = 3 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)",
                "1 * 1 = 1 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)\n4 / 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)\n1 * 4 = 4 (left: 4)",
                "4 - 1 = 3 (left: 1 3 8)\n10 - 5 = 5 (left: 5 2)\n5 - 2 = 3 (left: 3)",
                "4 - 1 = 3 (left: 1 3 8)\n10 / 5 = 2 (left: 5 2)\n5 * 2 = 10 (left: 10)"
            ],
            "values": [
                60.0,
                0.002,
                0.003,
                0.002,
                0.002
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 4.0",
                "2 <- 1.2",
                "3 <- 4.0",
                "4 <- 2.3"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)",
                "4 - 1 = 3 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)",
                "4 - 1 = 3 (left: 1 3 8)",
                "4 - 1 = 3 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)",
                "4 - 1 = 3 (left: 1 3 8)\n10 - 5 = 5 (left: 5 2)"
            ]
        },
        "step_5": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)\n1 + 4 = 5 (left: 5)",
                "4 - 1 = 3 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)\n4 * 7 = 28 (left: 28)",
                "4 - 1 = 3 (left: 1 3 8)\n9 - 5 = 4 (left: 4 7)",
                "4 - 1 = 3 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)",
                "4 - 1 = 3 (left: 1 3 8)\n10 - 5 = 5 (left: 5 2)\n5 * 2 = 10 (left: 10)"
            ],
            "values": [
                0.002,
                0.003,
                1.0,
                0.002,
                0.002
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 2.3",
                "2 <- 2.0",
                "3 <- 2.2",
                "4 <- 2.0"
            ],
            "resampled_steps": [
                "4 - 1 = 3 (left: 1 3 8)\n10 / 5 = 2 (left: 5 2)",
                "4 - 1 = 3 (left: 1 3 8)\n10 - 5 = 5 (left: 5 2)",
                "4 - 1 = 3 (left: 1 3 8)\n10 / 5 = 2 (left: 5 2)",
                "1 * 1 = 1 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)",
                "4 - 1 = 3 (left: 1 3 8)\n10 / 5 = 2 (left: 5 2)"
            ]
        },
        "step_6": {
            "steps": [
                "4 - 1 = 3 (left: 1 3 8)\n10 / 5 = 2 (left: 5 2)\n5 - 2 = 3 (left: 3)",
                "4 - 1 = 3 (left: 1 3 8)\n10 - 5 = 5 (left: 5 2)\n3 / 9 = 0.3333 (left: 0.3333)",
                "4 - 1 = 3 (left: 1 3 8)\n10 / 5 = 2 (left: 5 2)\n5 * 2 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)\n1 * 4 = 4 (left: 4)",
                "4 - 1 = 3 (left: 1 3 8)\n10 / 5 = 2 (left: 5 2)\n5 + 2 = 7 (left: 7)"
            ],
            "values": [
                0.002,
                0.003,
                0.003,
                0.0,
                0.001
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 1.2",
                "2 <- 2.0",
                "3 <- 2.2",
                "4 <- 1.2"
            ],
            "resampled_steps": [
                "4 - 1 = 3 (left: 1 3 8)\n10 / 5 = 2 (left: 5 2)",
                "4 - 1 = 3 (left: 1 3 8)",
                "4 - 1 = 3 (left: 1 3 8)\n10 / 5 = 2 (left: 5 2)",
                "1 * 1 = 1 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)",
                "4 - 1 = 3 (left: 1 3 8)"
            ]
        },
        "step_7": {
            "steps": [
                "4 - 1 = 3 (left: 1 3 8)\n10 / 5 = 2 (left: 5 2)\n5 + 2 = 7",
                "4 - 1 = 3 (left: 1 3 8)\n10 - 2 = 8 (left: 8 5)",
                "4 - 1 = 3 (left: 1 3 8)\n10 / 5 = 2 (left: 5 2)\n5 / 2 = 2.5 (left: 2.5)",
                "1 * 1 = 1 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)\n4 / 1 = 4 (left: 4)",
                "4 - 1 = 3 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)"
            ],
            "values": [
                0.003,
                20.002,
                0.001,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 7.1",
                "1 <- 2.3",
                "2 <- 1.2",
                "3 <- 7.4",
                "4 <- 7.4"
            ],
            "resampled_steps": [
                "4 - 1 = 3 (left: 1 3 8)\n10 - 2 = 8 (left: 8 5)",
                "4 - 1 = 3 (left: 1 3 8)\n10 - 5 = 5 (left: 5 2)",
                "4 - 1 = 3 (left: 1 3 8)",
                "4 - 1 = 3 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)",
                "4 - 1 = 3 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)"
            ]
        },
        "step_8": {
            "steps": [
                "4 - 1 = 3 (left: 1 3 8)\n10 - 2 = 8 (left: 8 5)\n8 + 5 = 13 (left: 13)",
                "4 - 1 = 3 (left: 1 3 8)\n10 - 5 = 5 (left: 5 2)\n5 - 2 = 3 (left: 3)",
                "4 - 1 = 3 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)",
                "4 - 1 = 3 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "4 - 1 = 3 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)"
            ],
            "values": [
                0.003,
                0.002,
                60.0,
                40.0,
                0.001
            ],
            "resampled": [
                "0 <- 8.3",
                "1 <- 1.0",
                "2 <- 7.4",
                "3 <- 7.4",
                "4 <- 8.2"
            ],
            "resampled_steps": [
                "4 - 1 = 3 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 4 8)",
                "4 - 1 = 3 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)",
                "4 - 1 = 3 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)",
                "4 - 1 = 3 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)"
            ]
        },
        "step_9": {
            "steps": [
                "4 - 1 = 3 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (4 - 1) * 8 = 24",
                "1 * 1 = 1 (left: 1 4 8)\n1 + 4 = 5 (left: 5 8)",
                "4 - 1 = 3 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 + 1 = 25 (left: 25)",
                "4 - 1 = 3 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "4 - 1 = 3 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)"
            ],
            "values": [
                60.0,
                0.002,
                60.0,
                60.0,
                0.002
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 9.3",
                "2 <- 9.2",
                "3 <- 9.0",
                "4 <- 7.4"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)",
                "4 - 1 = 3 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "4 - 1 = 3 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 + 1 = 25 (left: 25)",
                "4 - 1 = 3 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (4 - 1) * 8 = 24",
                "4 - 1 = 3 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)"
            ]
        },
        "step_10": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 8)\n8 - 4 = 4 (left: 1 4)\n4 / 1 = 4 (left: 4)",
                "4 - 1 = 3 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (4 - 1) * 8 = 24",
                "4 - 1 = 3 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 + 1 = 25 (left: 25)\n25 - 2 = 23 (left: 2)",
                "4 - 1 = 3 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (4 - 1) * 8 = 24\nInput: 3 3 6 9\nSteps:\n6 + 9 = 15 (left: 3 3 15)\n3 * 3 = 9 (left: 9 15)\n9 * 15 = 135 (left: 135)\nAnswer: 3 * (3 + 6 * 9) = 24",
                "4 - 1 = 3 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)"
            ],
            "values": [
                0.002,
                60.0,
                0.001,
                60.0,
                40.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.29223750000000004
    },
    "12": {
        "input": "1 1 5 8",
        "step_1": {
            "steps": [
                "4 * 3 = 12 (left: 12 12 4)",
                "3 + 3 = 6 (left: 6 7 9)",
                "5 - 1 = 4 (left: 1 4 8)",
                "5 * 1 = 5 (left: 5 5 8)",
                "8 - 1 = 7 (left: 1 5 7)"
            ],
            "values": [
                40.001,
                3.0,
                0.002,
                3.0,
                2.001
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 1.0",
                "2 <- 1.0",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "4 * 3 = 12 (left: 12 12 4)",
                "4 * 3 = 12 (left: 12 12 4)",
                "4 * 3 = 12 (left: 12 12 4)",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "4 * 3 = 12 (left: 12 12 4)\n4 + 12 = 16 (left: 12 16)",
                "4 * 3 = 12 (left: 12 12 4)\n12 + 12 = 24 (left: 4 24)",
                "4 * 3 = 12 (left: 12 12 4)\n12 / 12 = 1 (left: 1 4)",
                "12 / 3 = 4 (left: 4 6 9)",
                "5 * 8 = 40 (left: 1 40)"
            ],
            "values": [
                0.003,
                40.0,
                20.0,
                41.0,
                60.0
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 2.2",
                "2 <- INIT",
                "3 <- 2.1",
                "4 <- 2.2"
            ],
            "resampled_steps": [
                "5 * 1 = 5 (left: 5 5 8)",
                "4 * 3 = 12 (left: 12 12 4)\n12 / 12 = 1 (left: 1 4)",
                "",
                "4 * 3 = 12 (left: 12 12 4)\n12 + 12 = 24 (left: 4 24)",
                "4 * 3 = 12 (left: 12 12 4)\n12 / 12 = 1 (left: 1 4)"
            ]
        },
        "step_3": {
            "steps": [
                "5 * 1 = 5 (left: 5 5 8)\n5 - 5 = 0 (left: 0 8)",
                "4 * 3 = 12 (left: 12 12 4)\n12 / 12 = 1 (left: 1 4)\n1 * 4 = 4 (left: 4)",
                "8 - 1 = 7 (left: 1 5 7)",
                "4 * 3 = 12 (left: 12 12 4)\n12 + 12 = 24 (left: 4 24)\n4 + 20 = 24 (left: 20)",
                "4 * 3 = 12 (left: 12 12 4)\n12 / 12 = 1 (left: 1 4)\n4 - 1 = 3 (left: 3)"
            ],
            "values": [
                21.0,
                0.0,
                2.001,
                0.002,
                0.0
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 2.1",
                "2 <- 2.4",
                "3 <- 2.3",
                "4 <- 3.0"
            ],
            "resampled_steps": [
                "5 * 1 = 5 (left: 5 5 8)\n5 - 5 = 0 (left: 0 8)",
                "4 * 3 = 12 (left: 12 12 4)\n12 + 12 = 24 (left: 4 24)",
                "5 * 8 = 40 (left: 1 40)",
                "12 / 3 = 4 (left: 4 6 9)",
                "5 * 1 = 5 (left: 5 5 8)\n5 - 5 = 0 (left: 0 8)"
            ]
        },
        "step_4": {
            "steps": [
                "5 * 1 = 5 (left: 5 5 8)\n5 - 5 = 0 (left: 0 8)\n8 - 0 = 8 (left: 8)",
                "4 * 3 = 12 (left: 12 12 4)\n12 + 12 = 24 (left: 4 24)\n24 / 24 = 1 (left: 1)",
                "5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 40)",
                "12 / 3 = 4 (left: 4 6 9)\n6 / 4 = 1.5 (left: 1.5 9)",
                "5 * 1 = 5 (left: 5 5 8)\n5 - 5 = 0 (left: 0 8)\n0 + 8 = 8 (left: 8)"
            ],
            "values": [
                0.001,
                0.001,
                0.003,
                0.003,
                0.001
            ],
            "resampled": [
                "0 <- 2.3",
                "1 <- 2.3",
                "2 <- 2.1",
                "3 <- 1.4",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "12 / 3 = 4 (left: 4 6 9)",
                "12 / 3 = 4 (left: 4 6 9)",
                "4 * 3 = 12 (left: 12 12 4)\n12 + 12 = 24 (left: 4 24)",
                "8 - 1 = 7 (left: 1 5 7)",
                "4 * 3 = 12 (left: 12 12 4)\n12 + 12 = 24 (left: 4 24)"
            ]
        },
        "step_5": {
            "steps": [
                "12 / 3 = 4 (left: 4 6 9)\nInput: 10 20 30",
                "12 / 3 = 4 (left: 4 6 9)\n6 + 9 = 15 (left: 4 15)",
                "4 * 3 = 12 (left: 12 12 4)\n12 + 12 = 24 (left: 4 24)\n6 / 3 = 2 (left: 9 2)",
                "8 - 1 = 7 (left: 1 5 7)\n5 - 1 = 4 (left: 4 7)",
                "4 * 3 = 12 (left: 12 12 4)\n12 + 12 = 24 (left: 4 24)\n20 / 4 = 5 (left: 5)"
            ],
            "values": [
                0.003,
                0.002,
                0.002,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 3.0",
                "2 <- 2.4",
                "3 <- 2.2",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "5 * 1 = 5 (left: 5 5 8)\n5 - 5 = 0 (left: 0 8)",
                "5 * 1 = 5 (left: 5 5 8)\n5 - 5 = 0 (left: 0 8)",
                "5 * 8 = 40 (left: 1 40)",
                "4 * 3 = 12 (left: 12 12 4)\n12 / 12 = 1 (left: 1 4)",
                "4 * 3 = 12 (left: 12 12 4)\n12 + 12 = 24 (left: 4 24)"
            ]
        },
        "step_6": {
            "steps": [
                "5 * 1 = 5 (left: 5 5 8)\n5 - 5 = 0 (left: 0 8)\n5 - 3 = 2 (left: 2 8)",
                "5 * 1 = 5 (left: 5 5 8)\n5 - 5 = 0 (left: 0 8)\nPossible next steps:",
                "5 * 8 = 40 (left: 1 40)\n1 * 40 = 40 (left: 40)",
                "4 * 3 = 12 (left: 12 12 4)\n12 / 12 = 1 (left: 1 4)\n4 / 1 = 4 (left: 4)",
                "4 * 3 = 12 (left: 12 12 4)\n12 + 12 = 24 (left: 4 24)\n24 / 4 = 6 (left: 6)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.001,
                0.003
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 2.3",
                "2 <- 2.4",
                "3 <- 2.1",
                "4 <- 2.4"
            ],
            "resampled_steps": [
                "4 * 3 = 12 (left: 12 12 4)",
                "12 / 3 = 4 (left: 4 6 9)",
                "5 * 8 = 40 (left: 1 40)",
                "4 * 3 = 12 (left: 12 12 4)\n12 + 12 = 24 (left: 4 24)",
                "5 * 8 = 40 (left: 1 40)"
            ]
        },
        "step_7": {
            "steps": [
                "4 * 3 = 12 (left: 12 12 4)\nPossible next steps:",
                "12 / 3 = 4 (left: 4 6 9)\nInput: 3 5 7 9",
                "5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 40)",
                "4 * 3 = 12 (left: 12 12 4)\n12 + 12 = 24 (left: 4 24)\n4 * 6 = 24 (left: 6)",
                "5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 1 40)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- 2.4",
                "2 <- 2.1",
                "3 <- 3.2",
                "4 <- 3.0"
            ],
            "resampled_steps": [
                "5 * 8 = 40 (left: 1 40)",
                "5 * 8 = 40 (left: 1 40)",
                "4 * 3 = 12 (left: 12 12 4)\n12 + 12 = 24 (left: 4 24)",
                "8 - 1 = 7 (left: 1 5 7)",
                "5 * 1 = 5 (left: 5 5 8)\n5 - 5 = 0 (left: 0 8)"
            ]
        },
        "step_8": {
            "steps": [
                "5 * 8 = 40 (left: 1 40)\n1 * 40 = 40 (left: 40)",
                "5 * 8 = 40 (left: 1 40)\n1 + 40 = 41 (left: 40)",
                "4 * 3 = 12 (left: 12 12 4)\n12 + 12 = 24 (left: 4 24)\n24 - 4 = 20 (left: 20)",
                "8 - 1 = 7 (left: 1 5 7)\nPossible next steps:",
                "5 * 1 = 5 (left: 5 5 8)\n5 - 5 = 0 (left: 0 8)\n3 * 6 = 18 (left: 5 18)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- INIT",
                "2 <- 3.2",
                "3 <- 2.3",
                "4 <- 3.0"
            ],
            "resampled_steps": [
                "5 * 8 = 40 (left: 1 40)",
                "",
                "8 - 1 = 7 (left: 1 5 7)",
                "12 / 3 = 4 (left: 4 6 9)",
                "5 * 1 = 5 (left: 5 5 8)\n5 - 5 = 0 (left: 0 8)"
            ]
        },
        "step_9": {
            "steps": [
                "5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 40)",
                "5 - 1 = 4 (left: 1 4 8)",
                "8 - 1 = 7 (left: 1 5 7)\n1 * 5 = 5 (left: 5 7)",
                "12 / 3 = 4 (left: 4 6 9)\nInput: 3 5 7 10",
                "5 * 1 = 5 (left: 5 5 8)\n5 - 5 = 0 (left: 0 8)\n8 / 0 = undefined (cannot divide by zero)"
            ],
            "values": [
                0.003,
                0.003,
                0.001,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 2.4",
                "2 <- 2.3",
                "3 <- 2.1",
                "4 <- 2.4"
            ],
            "resampled_steps": [
                "5 * 1 = 5 (left: 5 5 8)\n5 - 5 = 0 (left: 0 8)",
                "5 * 8 = 40 (left: 1 40)",
                "12 / 3 = 4 (left: 4 6 9)",
                "4 * 3 = 12 (left: 12 12 4)\n12 + 12 = 24 (left: 4 24)",
                "5 * 8 = 40 (left: 1 40)"
            ]
        },
        "step_10": {
            "steps": [
                "5 * 1 = 5 (left: 5 5 8)\n5 - 5 = 0 (left: 0 8)\n8 / 0 = undefined",
                "5 * 8 = 40 (left: 1 40)\n1 * 40 = 40 (left: 40)",
                "12 / 3 = 4 (left: 4 6 9)\n6 - 4 = 2 (left: 2 9)",
                "4 * 3 = 12 (left: 12 12 4)\n12 + 12 = 24 (left: 4 24)\n4 + 24 = 28 (left: 28)",
                "5 * 8 = 40 (left: 1 40)\n40 / 1 = 40 (left: 40)"
            ],
            "values": [
                0.003,
                0.003,
                0.001,
                0.002,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.319211
    },
    "13": {
        "input": "4 6 11 11",
        "step_1": {
            "steps": [
                "11 + 4 = 15 (left: 6 11 15)",
                "11 / 4 = 2.75 (left: 6 11 2.75)",
                "11 + 4 = 15 (left: 6 11 15)",
                "6 + 11 = 17 (left: 4 17 11)",
                "11 - 4 = 7 (left: 7 11 11)"
            ],
            "values": [
                1.002,
                22.0,
                1.002,
                2.001,
                1.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.1",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "11 / 4 = 2.75 (left: 6 11 2.75)",
                "",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "11 - 6 = 5 (left: 4 5 11)",
                "11 / 4 = 2.75 (left: 6 11 2.75)\n3 * 10 = 30 (left: 30 7 5)",
                "6 / 4 = 1.5 (left: 1.5 11 11)",
                "6 / 4 = 1.5 (left: 1.5 11 11)",
                "11 - 4 = 7 (left: 7 11 11)"
            ],
            "values": [
                2.001,
                3.0,
                0.003,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "11 / 4 = 2.75 (left: 6 11 2.75)",
                "",
                "",
                "",
                "11 / 4 = 2.75 (left: 6 11 2.75)\n3 * 10 = 30 (left: 30 7 5)"
            ]
        },
        "step_3": {
            "steps": [
                "11 / 4 = 2.75 (left: 6 11 2.75)\n6 - 2.75 = 3.25 (left: 3.25 11)",
                "6 * 11 = 66 (left: 4 66 11)",
                "6 - 4 = 2 (left: 2 11 11)",
                "11 - 6 = 5 (left: 4 5 11)",
                "11 / 4 = 2.75 (left: 6 11 2.75)\n3 * 10 = 30 (left: 30 7 5)\n30 / 7 = 4.28571428571 (left: 4.28571428571 5)"
            ],
            "values": [
                1.002,
                1.002,
                0.003,
                0.003,
                2.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 2.1",
                "2 <- INIT",
                "3 <- 2.1",
                "4 <- 2.0"
            ],
            "resampled_steps": [
                "",
                "11 / 4 = 2.75 (left: 6 11 2.75)\n3 * 10 = 30 (left: 30 7 5)",
                "",
                "11 / 4 = 2.75 (left: 6 11 2.75)\n3 * 10 = 30 (left: 30 7 5)",
                "11 - 6 = 5 (left: 4 5 11)"
            ]
        },
        "step_4": {
            "steps": [
                "6 / 4 = 1.5 (left: 1.5 11 11)",
                "11 / 4 = 2.75 (left: 6 11 2.75)\n3 * 10 = 30 (left: 30 7 5)\n7 + 5 = 12 (left: 12)",
                "11 / 6 = 1 (left: 4 1 11)",
                "11 / 4 = 2.75 (left: 6 11 2.75)\n3 * 10 = 30 (left: 30 7 5)\n30 / 7 = 4.28571428571 (left: 4.28571428571 5)",
                "11 - 6 = 5 (left: 4 5 11)\n4 * 5 = 20 (left: 20 11)"
            ],
            "values": [
                2.001,
                0.003,
                3.0,
                3.0,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 3.4",
                "2 <- INIT",
                "3 <- 1.1",
                "4 <- 2.4"
            ],
            "resampled_steps": [
                "",
                "11 / 4 = 2.75 (left: 6 11 2.75)\n3 * 10 = 30 (left: 30 7 5)\n30 / 7 = 4.28571428571 (left: 4.28571428571 5)",
                "",
                "11 / 4 = 2.75 (left: 6 11 2.75)",
                "11 - 4 = 7 (left: 7 11 11)"
            ]
        },
        "step_5": {
            "steps": [
                "6 / 4 = 1.5 (left: 1.5 11 11)",
                "11 / 4 = 2.75 (left: 6 11 2.75)\n3 * 10 = 30 (left: 30 7 5)\n30 / 7 = 4.28571428571 (left: 4.28571428571 5)\n5 / 4.28571428571 = 1.16666666667 (left: 1.16666666667 5)",
                "11 - 4 = 7 (left: 6 7 11)",
                "11 / 4 = 2.75 (left: 6 11 2.75)\n11 - 6 = 5 (left: 5 2.75)",
                "11 - 4 = 7 (left: 7 11 11)\n11 - 7 = 4 (left: 4 11)"
            ],
            "values": [
                2.001,
                2.001,
                41.0,
                1.002,
                0.001
            ],
            "resampled": [
                "0 <- 5.2",
                "1 <- 5.2",
                "2 <- 5.2",
                "3 <- 5.2",
                "4 <- 5.2"
            ],
            "resampled_steps": [
                "11 - 4 = 7 (left: 6 7 11)",
                "11 - 4 = 7 (left: 6 7 11)",
                "11 - 4 = 7 (left: 6 7 11)",
                "11 - 4 = 7 (left: 6 7 11)",
                "11 - 4 = 7 (left: 6 7 11)"
            ]
        },
        "step_6": {
            "steps": [
                "11 - 4 = 7 (left: 6 7 11)\n11 - 6 = 5 (left: 5 7)",
                "11 - 4 = 7 (left: 6 7 11)\n11 - 7 = 4 (left: 6 4)",
                "11 - 4 = 7 (left: 6 7 11)\n5 - 9 = -4 (left: -4 1 10)",
                "11 - 4 = 7 (left: 6 7 11)\nInput: 3 5 8 13",
                "11 - 4 = 7 (left: 6 7 11)\n5 / 3 = 1.66666666667 (left: 1.66666666667 7)"
            ],
            "values": [
                0.003,
                60.0,
                2.001,
                0.003,
                2.001
            ],
            "resampled": [
                "0 <- 6.1",
                "1 <- 6.1",
                "2 <- 2.1",
                "3 <- 5.2",
                "4 <- 6.1"
            ],
            "resampled_steps": [
                "11 - 4 = 7 (left: 6 7 11)\n11 - 7 = 4 (left: 6 4)",
                "11 - 4 = 7 (left: 6 7 11)\n11 - 7 = 4 (left: 6 4)",
                "11 / 4 = 2.75 (left: 6 11 2.75)\n3 * 10 = 30 (left: 30 7 5)",
                "11 - 4 = 7 (left: 6 7 11)",
                "11 - 4 = 7 (left: 6 7 11)\n11 - 7 = 4 (left: 6 4)"
            ]
        },
        "step_7": {
            "steps": [
                "11 - 4 = 7 (left: 6 7 11)\n11 - 7 = 4 (left: 6 4)\n6 * 4 = 24 (left: 24)",
                "11 - 4 = 7 (left: 6 7 11)\n11 - 7 = 4 (left: 6 4)\n6 - 4 = 2 (left: 2)",
                "11 / 4 = 2.75 (left: 6 11 2.75)\n3 * 10 = 30 (left: 30 7 5)\n7 - 5 = 2 (left: 30 2)",
                "11 - 4 = 7 (left: 6 7 11)\n6 / 7 = 0.857143 (left: 11)",
                "11 - 4 = 7 (left: 6 7 11)\n11 - 7 = 4 (left: 6 4)\n6 * 4 = 24 (left: 24)"
            ],
            "values": [
                40.0,
                0.0,
                40.0,
                0.001,
                60.0
            ],
            "resampled": [
                "0 <- 7.2",
                "1 <- 7.0",
                "2 <- 6.1",
                "3 <- 5.2",
                "4 <- 7.4"
            ],
            "resampled_steps": [
                "11 / 4 = 2.75 (left: 6 11 2.75)\n3 * 10 = 30 (left: 30 7 5)\n7 - 5 = 2 (left: 30 2)",
                "11 - 4 = 7 (left: 6 7 11)\n11 - 7 = 4 (left: 6 4)\n6 * 4 = 24 (left: 24)",
                "11 - 4 = 7 (left: 6 7 11)\n11 - 7 = 4 (left: 6 4)",
                "11 - 4 = 7 (left: 6 7 11)",
                "11 - 4 = 7 (left: 6 7 11)\n11 - 7 = 4 (left: 6 4)\n6 * 4 = 24 (left: 24)"
            ]
        },
        "step_8": {
            "steps": [
                "11 / 4 = 2.75 (left: 6 11 2.75)\n3 * 10 = 30 (left: 30 7 5)\n7 - 5 = 2 (left: 30 2)\n30 + 2 = 32 (left: 32)",
                "11 - 4 = 7 (left: 6 7 11)\n11 - 7 = 4 (left: 6 4)\n6 * 4 = 24 (left: 24)\nAnswer: (11 - 4) * (11 - 7) = 24",
                "11 - 4 = 7 (left: 6 7 11)\n11 - 7 = 4 (left: 6 4)\n6 / 4 = 1.5 (left: 1.5)",
                "11 - 4 = 7 (left: 6 7 11)\nInput: 1 5 5 12",
                "11 - 4 = 7 (left: 6 7 11)\n11 - 7 = 4 (left: 6 4)\n6 * 4 = 24 (left: 24)\nAnswer: 6 * (11 - (11 - 4)) = 24"
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ],
        "cost": 0.345422
    },
    "14": {
        "input": "1 1 3 12",
        "step_1": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12)",
                "1 + 3 = 4 (left: 1 4 12)",
                "1 + 1 = 2 (left: 2 3 12)",
                "5 * 6 = 30 (left: 4 7 30)",
                "1 * 1 = 1 (left: 1 3 12)"
            ],
            "values": [
                40.001,
                1.002,
                0.003,
                1.0,
                60.0
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 1.4",
                "2 <- 1.4",
                "3 <- 1.4",
                "4 <- 1.4"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 3 12)",
                "1 * 1 = 1 (left: 1 3 12)",
                "1 * 1 = 1 (left: 1 3 12)",
                "1 * 1 = 1 (left: 1 3 12)",
                "1 * 1 = 1 (left: 1 3 12)"
            ]
        },
        "step_2": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12)\n4 / 4 = 1 (left: 1 10)",
                "1 * 1 = 1 (left: 1 3 12)\n3 * 1 = 3 (left: 3 12)",
                "1 * 1 = 1 (left: 1 3 12)\n12 - 1 = 11 (left: 3 11)",
                "1 * 1 = 1 (left: 1 3 12)\n12 - 1 = 11 (left: 3 11)",
                "1 * 1 = 1 (left: 1 3 12)\n12 - 5 = 7 (left: 5 7)"
            ],
            "values": [
                60.0,
                0.003,
                0.002,
                0.003,
                0.001
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 2.0",
                "2 <- 1.4",
                "3 <- INIT",
                "4 <- 2.0"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 3 12)",
                "1 * 1 = 1 (left: 1 3 12)\n4 / 4 = 1 (left: 1 10)",
                "1 * 1 = 1 (left: 1 3 12)",
                "",
                "1 * 1 = 1 (left: 1 3 12)\n4 / 4 = 1 (left: 1 10)"
            ]
        },
        "step_3": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12)\n1 + 3 = 4 (left: 4 12)",
                "1 * 1 = 1 (left: 1 3 12)\n4 / 4 = 1 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)",
                "1 * 1 = 1 (left: 1 3 12)",
                "1 * 1 = 1 (left: 1 3 12)\n4 / 4 = 1 (left: 1 10)\n10 / 1 = 10 (left: 10)"
            ],
            "values": [
                0.003,
                0.002,
                60.0,
                41.0,
                0.003
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 3.2",
                "2 <- 3.2",
                "3 <- 1.4",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)",
                "1 * 1 = 1 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)",
                "1 * 1 = 1 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)",
                "1 * 1 = 1 (left: 1 3 12)",
                ""
            ]
        },
        "step_4": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)\n1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)\n4 - 1 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)\n1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 12)\n3 * 12 = 36 (left: 1 36)",
                "1 + 1 = 2 (left: 2 3 12)"
            ],
            "values": [
                0.002,
                0.001,
                0.001,
                60.0,
                2.001
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 3.3",
                "2 <- 1.0",
                "3 <- 1.0",
                "4 <- 3.3"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 3 12)\n4 / 4 = 1 (left: 1 10)",
                "1 * 1 = 1 (left: 1 3 12)",
                "1 * 1 = 1 (left: 1 3 12)",
                "1 * 1 = 1 (left: 1 3 12)",
                "1 * 1 = 1 (left: 1 3 12)"
            ]
        },
        "step_5": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12)\n4 / 4 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 3 12)\n8 - 2 = 6 (left: 4 6)",
                "1 * 1 = 1 (left: 1 3 12)\n12 - 1 = 11 (left: 3 11)",
                "1 * 1 = 1 (left: 1 3 12)\n8 - 6 = 2 (left: 2 4 2)",
                "1 * 1 = 1 (left: 1 3 12)\n20 * 10 = 200 (left: 30 200)"
            ],
            "values": [
                0.003,
                40.0,
                0.003,
                2.001,
                20.002
            ],
            "resampled": [
                "0 <- 5.1",
                "1 <- 1.0",
                "2 <- 4.3",
                "3 <- 1.4",
                "4 <- 3.2"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 3 12)\n8 - 2 = 6 (left: 4 6)",
                "1 * 1 = 1 (left: 1 3 12)",
                "1 * 1 = 1 (left: 1 3 12)\n3 * 12 = 36 (left: 1 36)",
                "1 * 1 = 1 (left: 1 3 12)",
                "1 * 1 = 1 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)"
            ]
        },
        "step_6": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12)\n8 - 2 = 6 (left: 4 6)\n4 + 6 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 3 12)\n7 / 5 = 1.4 (left: 1.4 9 13)",
                "1 * 1 = 1 (left: 1 3 12)\n3 * 12 = 36 (left: 1 36)\n1 / 36 = 0.027777777777777776 (left: 0.027777777777777776)",
                "1 * 1 = 1 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)",
                "1 * 1 = 1 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)\n4 - 1 = 3 (left: 3)"
            ],
            "values": [
                0.002,
                2.001,
                0.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 1.4",
                "2 <- 3.3",
                "3 <- 4.4",
                "4 <- 3.2"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 3 12)\n4 / 4 = 1 (left: 1 10)",
                "1 * 1 = 1 (left: 1 3 12)",
                "1 * 1 = 1 (left: 1 3 12)",
                "1 + 1 = 2 (left: 2 3 12)",
                "1 * 1 = 1 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)"
            ]
        },
        "step_7": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12)\n4 / 4 = 1 (left: 1 10)\n1 / 10 = 0.1 (left: 0.1)",
                "1 * 1 = 1 (left: 1 3 12)\n1 + 3 = 4 (left: 4 12)",
                "1 * 1 = 1 (left: 1 3 12)\n3 + 1 = 4 (left: 4 12)",
                "1 + 1 = 2 (left: 2 3 12)\nPossible next steps:",
                "1 * 1 = 1 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)\n4 / 1 = 4 (left: 4)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.001
            ],
            "resampled": [
                "0 <- 4.4",
                "1 <- 2.0",
                "2 <- 4.3",
                "3 <- 3.3",
                "4 <- 1.4"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 3 12)",
                "1 * 1 = 1 (left: 1 3 12)\n4 / 4 = 1 (left: 1 10)",
                "1 * 1 = 1 (left: 1 3 12)\n3 * 12 = 36 (left: 1 36)",
                "1 * 1 = 1 (left: 1 3 12)",
                "1 * 1 = 1 (left: 1 3 12)"
            ]
        },
        "step_8": {
            "steps": [
                "1 + 1 = 2 (left: 2 3 12)\n3 * 2 = 6 (left: 6 12)",
                "1 * 1 = 1 (left: 1 3 12)\n4 / 4 = 1 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 3 12)\n3 * 12 = 36 (left: 1 36)\n36 - 1 = 35 (left: 35)",
                "1 * 1 = 1 (left: 1 3 12)\n12 / 1 = 12 (left: 12)",
                "1 * 1 = 1 (left: 1 3 12)\n12 - 3 = 9 (left: 3 9)"
            ],
            "values": [
                0.003,
                0.003,
                0.002,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 4.3",
                "1 <- 3.2",
                "2 <- 3.2",
                "3 <- 5.4",
                "4 <- 5.1"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 3 12)\n3 * 12 = 36 (left: 1 36)",
                "1 * 1 = 1 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)",
                "1 * 1 = 1 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)",
                "1 * 1 = 1 (left: 1 3 12)\n20 * 10 = 200 (left: 30 200)",
                "1 * 1 = 1 (left: 1 3 12)\n8 - 2 = 6 (left: 4 6)"
            ]
        },
        "step_9": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12)\n3 * 12 = 36 (left: 1 36)\n1 + 36 = 37 (left: 37)",
                "1 * 1 = 1 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)\n4 / 1 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)\n1 + 4 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 3 12)\n20 * 10 = 200 (left: 30 200)\n30 * 200 = 6000 (left: 6000)",
                "1 * 1 = 1 (left: 1 3 12)\n8 - 2 = 6 (left: 4 6)\n4 + 6 = 10 (left: 10)"
            ],
            "values": [
                0.003,
                0.001,
                0.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 4.3",
                "1 <- 6.1",
                "2 <- 3.2",
                "3 <- 3.2",
                "4 <- 5.1"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 3 12)\n3 * 12 = 36 (left: 1 36)",
                "1 * 1 = 1 (left: 1 3 12)\n7 / 5 = 1.4 (left: 1.4 9 13)",
                "1 * 1 = 1 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)",
                "1 * 1 = 1 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)",
                "1 * 1 = 1 (left: 1 3 12)\n8 - 2 = 6 (left: 4 6)"
            ]
        },
        "step_10": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 12)\n3 * 12 = 36 (left: 1 36)\n1 + 36 = 37 (left: 37)",
                "1 * 1 = 1 (left: 1 3 12)\n7 / 5 = 1.4 (left: 1.4 9 13)\n13 / 1.4 = 9.28571 (left: 9.28571)",
                "1 * 1 = 1 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)\n1 + 4 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)\n1 * 4 = 4 (left: 4)",
                "1 * 1 = 1 (left: 1 3 12)\n8 - 2 = 6 (left: 4 6)\n6 / 4 = 1.5 (left: 1.5)"
            ],
            "values": [
                0.003,
                0.002,
                0.003,
                0.0,
                0.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.37087800000000004
    },
    "15": {
        "input": "2 2 2 12",
        "step_1": {
            "steps": [
                "2 + 2 = 4 (left: 2 4 12)",
                "2 / 2 = 1 (left: 1 2 12)",
                "12 - 2 = 10 (left: 2 2 10)",
                "7 - 3 = 4 (left: 4 5 9)",
                "2 * 2 = 4 (left: 4 2 12)"
            ],
            "values": [
                3.0,
                40.001,
                2.001,
                2.0,
                3.0
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 1.1",
                "2 <- 1.1",
                "3 <- 1.2",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "2 / 2 = 1 (left: 1 2 12)",
                "2 / 2 = 1 (left: 1 2 12)",
                "2 / 2 = 1 (left: 1 2 12)",
                "12 - 2 = 10 (left: 2 2 10)",
                "2 / 2 = 1 (left: 1 2 12)"
            ]
        },
        "step_2": {
            "steps": [
                "2 / 2 = 1 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)",
                "2 / 2 = 1 (left: 1 2 12)\n1 * 2 = 2 (left: 2 12)",
                "2 / 2 = 1 (left: 1 2 12)\n2 - 1 = 1 (left: 1 12)",
                "12 - 2 = 10 (left: 2 2 10)\n2 / 2 = 1 (left: 1 10)",
                "2 / 2 = 1 (left: 1 2 12)\nInput: 5 5 10"
            ],
            "values": [
                20.002,
                60.0,
                0.003,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 2.3",
                "1 <- 1.1",
                "2 <- 2.3",
                "3 <- 1.1",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "12 - 2 = 10 (left: 2 2 10)\n2 / 2 = 1 (left: 1 10)",
                "2 / 2 = 1 (left: 1 2 12)",
                "12 - 2 = 10 (left: 2 2 10)\n2 / 2 = 1 (left: 1 10)",
                "2 / 2 = 1 (left: 1 2 12)",
                "2 / 2 = 1 (left: 1 2 12)\n1 * 2 = 2 (left: 2 12)"
            ]
        },
        "step_3": {
            "steps": [
                "12 - 2 = 10 (left: 2 2 10)\n2 / 2 = 1 (left: 1 10)\n1 + 10 = 11 (left: 11)",
                "2 / 2 = 1 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "12 - 2 = 10 (left: 2 2 10)\n2 / 2 = 1 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "2 / 2 = 1 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)",
                "2 / 2 = 1 (left: 1 2 12)\n1 * 2 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)"
            ],
            "values": [
                0.003,
                60.0,
                0.003,
                21.001,
                60.0
            ],
            "resampled": [
                "0 <- 2.3",
                "1 <- 2.1",
                "2 <- 2.3",
                "3 <- 2.3",
                "4 <- 3.1"
            ],
            "resampled_steps": [
                "12 - 2 = 10 (left: 2 2 10)\n2 / 2 = 1 (left: 1 10)",
                "2 / 2 = 1 (left: 1 2 12)\n1 * 2 = 2 (left: 2 12)",
                "12 - 2 = 10 (left: 2 2 10)\n2 / 2 = 1 (left: 1 10)",
                "12 - 2 = 10 (left: 2 2 10)\n2 / 2 = 1 (left: 1 10)",
                "2 / 2 = 1 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)"
            ]
        },
        "step_4": {
            "steps": [
                "12 - 2 = 10 (left: 2 2 10)\n2 / 2 = 1 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "2 / 2 = 1 (left: 1 2 12)\n1 * 2 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "12 - 2 = 10 (left: 2 2 10)\n2 / 2 = 1 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "12 - 2 = 10 (left: 2 2 10)\n2 / 2 = 1 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "2 / 2 = 1 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n1 + 6 = 7"
            ],
            "values": [
                0.001,
                60.0,
                0.001,
                0.0,
                0.003
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 3.4",
                "2 <- 3.1",
                "3 <- 3.3",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "2 / 2 = 1 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "2 / 2 = 1 (left: 1 2 12)\n1 * 2 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "2 / 2 = 1 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "2 / 2 = 1 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)",
                "2 / 2 = 1 (left: 1 2 12)\n1 * 2 = 2 (left: 2 12)"
            ]
        },
        "step_5": {
            "steps": [
                "2 / 2 = 1 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "2 / 2 = 1 (left: 1 2 12)\n1 * 2 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (2 / 2) * (2 * 12) = 24",
                "2 / 2 = 1 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "2 / 2 = 1 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\nInput: 4 16",
                "2 / 2 = 1 (left: 1 2 12)\n1 * 2 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)"
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.3829035
    },
    "16": {
        "input": "1 1 4 12",
        "step_1": {
            "steps": [
                "12 - 1 = 11 (left: 1 4 11)",
                "1 + 1 = 2 (left: 2 4 12)",
                "12 - 4 = 8 (left: 1 8 12)",
                "4 + 1 = 5 (left: 1 5 12)",
                "1 * 1 = 1 (left: 1 4 12)"
            ],
            "values": [
                22.0,
                2.001,
                0.003,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.0",
                "2 <- INIT",
                "3 <- 1.0",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "12 - 1 = 11 (left: 1 4 11)",
                "",
                "12 - 1 = 11 (left: 1 4 11)",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "12 - 4 = 8 (left: 1 8 12)",
                "12 - 1 = 11 (left: 1 4 11)\n11 - 4 = 7 (left: 1 7)",
                "4 + 1 = 5 (left: 5 4 12)",
                "12 - 1 = 11 (left: 1 4 11)\nPossible next steps:",
                "4 + 1 = 5 (left: 1 5 12)"
            ],
            "values": [
                2.001,
                40.0,
                0.003,
                0.003,
                21.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 2.1",
                "3 <- 2.1",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "",
                "",
                "12 - 1 = 11 (left: 1 4 11)\n11 - 4 = 7 (left: 1 7)",
                "12 - 1 = 11 (left: 1 4 11)\n11 - 4 = 7 (left: 1 7)",
                "12 - 1 = 11 (left: 1 4 11)\n11 - 4 = 7 (left: 1 7)"
            ]
        },
        "step_3": {
            "steps": [
                "1 * 1 = 1 (left: 1 4 12)",
                "12 - 4 = 8 (left: 1 8 12)",
                "12 - 1 = 11 (left: 1 4 11)\n11 - 4 = 7 (left: 1 7)\n1 + 7 = 8",
                "12 - 1 = 11 (left: 1 4 11)\n11 - 4 = 7 (left: 1 7)\n1 * 7 = 7 (left: 7)",
                "12 - 1 = 11 (left: 1 4 11)\n11 - 4 = 7 (left: 1 7)\n1 + 7 = 8 (left: 8)"
            ],
            "values": [
                0.003,
                0.002,
                0.003,
                0.001,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.0",
                "2 <- 1.0",
                "3 <- INIT",
                "4 <- 2.4"
            ],
            "resampled_steps": [
                "",
                "12 - 1 = 11 (left: 1 4 11)",
                "12 - 1 = 11 (left: 1 4 11)",
                "",
                "4 + 1 = 5 (left: 1 5 12)"
            ]
        },
        "step_4": {
            "steps": [
                "12 / 1 = 12 (left: 1 4 12)",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)",
                "12 - 1 = 11 (left: 1 4 11)\n11 - 4 = 7 (left: 1 7)",
                "1 * 1 = 1 (left: 1 4 12)",
                "4 + 1 = 5 (left: 1 5 12)\n5 - 1 = 4 (left: 4 12)"
            ],
            "values": [
                0.003,
                40.001,
                0.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 2.1",
                "2 <- 1.0",
                "3 <- 4.1",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "12 - 1 = 11 (left: 1 4 11)",
                "12 - 1 = 11 (left: 1 4 11)\n11 - 4 = 7 (left: 1 7)",
                "12 - 1 = 11 (left: 1 4 11)",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)",
                ""
            ]
        },
        "step_5": {
            "steps": [
                "12 - 1 = 11 (left: 1 4 11)\n5 - 3 = 2 (left: 2 7)",
                "12 - 1 = 11 (left: 1 4 11)\n11 - 4 = 7 (left: 1 7)\n1 * 7 = 7 (left: 7)",
                "12 - 1 = 11 (left: 1 4 11)\n11 / 4 = 2.75 (left: 1 2.75)",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)\n44 / 1 = 44 (left: 44)",
                "12 * 1 = 12 (left: 1 4 12)"
            ],
            "values": [
                0.003,
                0.002,
                1.002,
                0.002,
                1.002
            ],
            "resampled": [
                "0 <- 4.1",
                "1 <- 4.1",
                "2 <- 2.1",
                "3 <- 1.0",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)",
                "12 - 1 = 11 (left: 1 4 11)\n11 - 4 = 7 (left: 1 7)",
                "12 - 1 = 11 (left: 1 4 11)",
                "12 - 1 = 11 (left: 1 4 11)"
            ]
        },
        "step_6": {
            "steps": [
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)\n1 + 44 = 45 (left: 45)",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)\n44 - 1 = 43 (left: 43)",
                "12 - 1 = 11 (left: 1 4 11)\n11 - 4 = 7 (left: 1 7)\n1 + 7 = 8 (left: 8)",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)",
                "12 - 1 = 11 (left: 1 4 11)\nInput: 10 5 2"
            ],
            "values": [
                0.003,
                0.002,
                0.002,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 4.1",
                "1 <- 6.3",
                "2 <- 4.1",
                "3 <- 6.3",
                "4 <- 4.1"
            ],
            "resampled_steps": [
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)"
            ]
        },
        "step_7": {
            "steps": [
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)\n1 + 44 = 45 (left: 45)",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)\n1 + 44 = 45 (left: 44 45)",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)\n44 / 1 = 44 (left: 44)",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)\n44 - 1 = 43 (left: 43)",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)\n1 * 44 = 44 (left: 44)"
            ],
            "values": [
                0.003,
                0.002,
                0.003,
                0.002,
                0.002
            ],
            "resampled": [
                "0 <- 6.3",
                "1 <- 6.3",
                "2 <- 2.1",
                "3 <- 6.3",
                "4 <- 6.3"
            ],
            "resampled_steps": [
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)",
                "12 - 1 = 11 (left: 1 4 11)\n11 - 4 = 7 (left: 1 7)",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)"
            ]
        },
        "step_8": {
            "steps": [
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)\n1 * 44 = 44 (left: 44)",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)\n1 * 44 = 44 (left: 44)",
                "12 - 1 = 11 (left: 1 4 11)\n11 - 4 = 7 (left: 1 7)\n1 + 7 = 8 (left: 8)",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)\n1 + 44 = 45 (left: 45)",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)\n1 + 44 = 45 (left: 45)"
            ],
            "values": [
                0.001,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 6.3",
                "2 <- 2.1",
                "3 <- 4.1",
                "4 <- 4.1"
            ],
            "resampled_steps": [
                "",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)",
                "12 - 1 = 11 (left: 1 4 11)\n11 - 4 = 7 (left: 1 7)",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)"
            ]
        },
        "step_9": {
            "steps": [
                "12 * 1 = 12 (left: 1 4 12)",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)\n1 * 44 = 44 (left: 44)",
                "12 - 1 = 11 (left: 1 4 11)\n11 - 4 = 7 (left: 1 7)\n7 / 1 = 7 (left: 7)",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)\n1 + 44 = 45",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)\n44 - 1 = 43 (left: 43)"
            ],
            "values": [
                2.001,
                0.003,
                0.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 6.3",
                "1 <- 2.4",
                "2 <- 6.3",
                "3 <- 6.3",
                "4 <- 6.3"
            ],
            "resampled_steps": [
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)",
                "4 + 1 = 5 (left: 1 5 12)",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)"
            ]
        },
        "step_10": {
            "steps": [
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)\n1 + 44 = 45 (left: 45)",
                "4 + 1 = 5 (left: 1 5 12)\nInput: 7 7 7",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)\n44 / 1 = 44 (left: 44)",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)\n1 + 44 = 45 (left: 45)",
                "12 - 1 = 11 (left: 1 4 11)\n4 * 11 = 44 (left: 1 44)\n44 - 1 = 43 (left: 43)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.408219
    },
    "17": {
        "input": "1 1 12 12",
        "step_1": {
            "steps": [
                "12 + 1 = 13 (left: 1 12 13)",
                "5 - 3 = 2 (left: 2 5 5)",
                "1 - 1 = 0 (left: 0 12 12)",
                "1 + 1 = 2 (left: 2 12 12)",
                "1 + 1 = 2 (left: 2 12 12)"
            ],
            "values": [
                0.003,
                1.002,
                60.0,
                1.002,
                20.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.2",
                "3 <- 1.2",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                "1 - 1 = 0 (left: 0 12 12)",
                "1 - 1 = 0 (left: 0 12 12)",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "1 * 1 = 1 (left: 1 12 12)",
                "12 - 1 = 11 (left: 1 11 12)",
                "1 - 1 = 0 (left: 0 12 12)\n12 / 0 is undefined",
                "1 - 1 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)",
                "1 + 1 = 2 (left: 2 12 12)"
            ],
            "values": [
                2.001,
                1.001,
                0.003,
                40.001,
                20.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 2.3",
                "2 <- 2.4",
                "3 <- 2.4",
                "4 <- 1.2"
            ],
            "resampled_steps": [
                "",
                "1 - 1 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)",
                "1 + 1 = 2 (left: 2 12 12)",
                "1 + 1 = 2 (left: 2 12 12)",
                "1 - 1 = 0 (left: 0 12 12)"
            ]
        },
        "step_3": {
            "steps": [
                "5 - 3 = 2 (left: 2 5 5)",
                "1 - 1 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)\n12 + 12 = 24",
                "1 + 1 = 2 (left: 2 12 12)\n12 / 2 = 6 (left: 6 12)",
                "1 + 1 = 2 (left: 2 12 12)\n12 - 2 = 10 (left: 10 12)",
                "1 - 1 = 0 (left: 0 12 12)\n12 / 12 = 1 (left: 0 1)"
            ],
            "values": [
                2.001,
                40.001,
                0.003,
                1.002,
                60.0
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- 2.4",
                "3 <- 3.4",
                "4 <- 3.4"
            ],
            "resampled_steps": [
                "1 - 1 = 0 (left: 0 12 12)",
                "1 - 1 = 0 (left: 0 12 12)",
                "1 + 1 = 2 (left: 2 12 12)",
                "1 - 1 = 0 (left: 0 12 12)\n12 / 12 = 1 (left: 0 1)",
                "1 - 1 = 0 (left: 0 12 12)\n12 / 12 = 1 (left: 0 1)"
            ]
        },
        "step_4": {
            "steps": [
                "1 - 1 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)",
                "1 - 1 = 0 (left: 0 12 12)\n12 / 12 = 1 (left: 0 1)",
                "1 + 1 = 2 (left: 2 12 12)\n12 - 2 = 10 (left: 10 12)",
                "1 - 1 = 0 (left: 0 12 12)\n12 / 12 = 1 (left: 0 1)\n0 / 1 = 0 (left: 0)",
                "1 - 1 = 0 (left: 0 12 12)\n12 / 12 = 1 (left: 0 1)\n1 + 0 = 1 (left: 1)"
            ],
            "values": [
                40.001,
                40.001,
                0.002,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 1.2",
                "2 <- 3.4",
                "3 <- 4.0",
                "4 <- 1.4"
            ],
            "resampled_steps": [
                "1 - 1 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)\n12 + 12 = 24",
                "1 - 1 = 0 (left: 0 12 12)",
                "1 - 1 = 0 (left: 0 12 12)\n12 / 12 = 1 (left: 0 1)",
                "1 - 1 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)",
                "1 + 1 = 2 (left: 2 12 12)"
            ]
        },
        "step_5": {
            "steps": [
                "1 - 1 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)\n12 + 12 = 24\n12 / 2 = 6 (left: 6 12 12)",
                "1 - 1 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)",
                "1 - 1 = 0 (left: 0 12 12)\n12 / 12 = 1 (left: 0 1)\n0 + 1 = 1 (left: 1)",
                "1 - 1 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 + 12 = 24",
                "1 + 1 = 2 (left: 2 12 12)\n12 - 2 = 10 (left: 10 12)"
            ],
            "values": [
                20.002,
                20.002,
                0.003,
                20.002,
                0.001
            ],
            "resampled": [
                "0 <- 5.1",
                "1 <- 5.0",
                "2 <- 4.0",
                "3 <- 5.3",
                "4 <- 3.4"
            ],
            "resampled_steps": [
                "1 - 1 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)",
                "1 - 1 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)\n12 + 12 = 24\n12 / 2 = 6 (left: 6 12 12)",
                "1 - 1 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)",
                "1 - 1 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 + 12 = 24",
                "1 - 1 = 0 (left: 0 12 12)\n12 / 12 = 1 (left: 0 1)"
            ]
        },
        "step_6": {
            "steps": [
                "1 - 1 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)",
                "1 - 1 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)\n12 + 12 = 24\n12 / 2 = 6 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)",
                "1 - 1 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)",
                "1 - 1 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 + 12 = 24\n24 * 12 = 288 (left: 24 288)",
                "1 - 1 = 0 (left: 0 12 12)\n12 / 12 = 1 (left: 0 1)\n0 + 1 = 1 (left: 1)"
            ],
            "values": [
                0.001,
                60.0,
                0.003,
                40.0,
                0.003
            ],
            "resampled": [
                "0 <- 6.3",
                "1 <- 4.0",
                "2 <- 6.1",
                "3 <- 6.1",
                "4 <- 4.1"
            ],
            "resampled_steps": [
                "1 - 1 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 + 12 = 24\n24 * 12 = 288 (left: 24 288)",
                "1 - 1 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)",
                "1 - 1 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)\n12 + 12 = 24\n12 / 2 = 6 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)",
                "1 - 1 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)\n12 + 12 = 24\n12 / 2 = 6 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)",
                "1 - 1 = 0 (left: 0 12 12)\n12 / 12 = 1 (left: 0 1)"
            ]
        },
        "step_7": {
            "steps": [
                "1 - 1 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 + 12 = 24\n24 * 12 = 288 (left: 24 288)\n288 / 24 = 12 (left: 12)",
                "1 - 1 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "1 - 1 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)\n12 + 12 = 24\n12 / 2 = 6 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "1 - 1 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)\n12 + 12 = 24\n12 / 2 = 6 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "1 - 1 = 0 (left: 0 12 12)\n12 / 12 = 1 (left: 0 1)\n1 * 0 = 0 (left: 0)"
            ],
            "values": [
                0.002,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 6.3",
                "1 <- 6.1",
                "2 <- 5.3",
                "3 <- 3.4",
                "4 <- 6.3"
            ],
            "resampled_steps": [
                "1 - 1 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 + 12 = 24\n24 * 12 = 288 (left: 24 288)",
                "1 - 1 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)\n12 + 12 = 24\n12 / 2 = 6 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)",
                "1 - 1 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 + 12 = 24",
                "1 - 1 = 0 (left: 0 12 12)\n12 / 12 = 1 (left: 0 1)",
                "1 - 1 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 + 12 = 24\n24 * 12 = 288 (left: 24 288)"
            ]
        },
        "step_8": {
            "steps": [
                "1 - 1 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 + 12 = 24\n24 * 12 = 288 (left: 24 288)\n288 / 12 = 24 (left: 24 288)",
                "1 - 1 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)\n12 + 12 = 24\n12 / 2 = 6 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "1 - 1 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 + 12 = 24\n24 - 12 = 12 (left: 12 24)",
                "1 - 1 = 0 (left: 0 12 12)\n12 / 12 = 1 (left: 0 1)\n1 / 0 = undefined",
                "1 - 1 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 + 12 = 24\n24 * 12 = 288 (left: 24 288)\n24 - 288 = -264 (left: -264)"
            ],
            "values": [
                60.0,
                0.002,
                0.003,
                0.003,
                0.0
            ],
            "resampled": [
                "0 <- 6.1",
                "1 <- 8.0",
                "2 <- 3.4",
                "3 <- 8.0",
                "4 <- 4.1"
            ],
            "resampled_steps": [
                "1 - 1 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)\n12 + 12 = 24\n12 / 2 = 6 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)",
                "1 - 1 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 + 12 = 24\n24 * 12 = 288 (left: 24 288)\n288 / 12 = 24 (left: 24 288)",
                "1 - 1 = 0 (left: 0 12 12)\n12 / 12 = 1 (left: 0 1)",
                "1 - 1 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 + 12 = 24\n24 * 12 = 288 (left: 24 288)\n288 / 12 = 24 (left: 24 288)",
                "1 - 1 = 0 (left: 0 12 12)\n12 / 12 = 1 (left: 0 1)"
            ]
        },
        "step_9": {
            "steps": [
                "1 - 1 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)\n12 + 12 = 24\n12 / 2 = 6 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "1 - 1 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 + 12 = 24\n24 * 12 = 288 (left: 24 288)\n288 / 12 = 24 (left: 24 288)\n288 / 24 = 12 (left: 12 12)",
                "1 - 1 = 0 (left: 0 12 12)\n12 / 12 = 1 (left: 0 1)\n7 + 5 = 12 (left: 3 12)",
                "1 - 1 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 + 12 = 24\n24 * 12 = 288 (left: 24 288)\n288 / 12 = 24 (left: 24 288)\n288 / 24 = 12 (left: 12 288)",
                "1 - 1 = 0 (left: 0 12 12)\n12 / 12 = 1 (left: 0 1)\n1 - 0 = 1 (left: 1)"
            ],
            "values": [
                0.002,
                40.001,
                20.002,
                60.0,
                0.001
            ],
            "resampled": [
                "0 <- 9.3",
                "1 <- 4.0",
                "2 <- 6.1",
                "3 <- 3.4",
                "4 <- 6.1"
            ],
            "resampled_steps": [
                "1 - 1 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 + 12 = 24\n24 * 12 = 288 (left: 24 288)\n288 / 12 = 24 (left: 24 288)\n288 / 24 = 12 (left: 12 288)",
                "1 - 1 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)",
                "1 - 1 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)\n12 + 12 = 24\n12 / 2 = 6 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)",
                "1 - 1 = 0 (left: 0 12 12)\n12 / 12 = 1 (left: 0 1)",
                "1 - 1 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)\n12 + 12 = 24\n12 / 2 = 6 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)"
            ]
        },
        "step_10": {
            "steps": [
                "1 - 1 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 + 12 = 24\n24 * 12 = 288 (left: 24 288)\n288 / 12 = 24 (left: 24 288)\n288 / 24 = 12 (left: 12 288)\n288 - 12 = 276 (left: 276)",
                "1 - 1 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 + 12 = 24",
                "1 - 1 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)\n12 + 12 = 24\n12 / 2 = 6 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "1 - 1 = 0 (left: 0 12 12)\n12 / 12 = 1 (left: 0 1)\n1 - 0 = 1 (left: 1)",
                "1 - 1 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)\n12 + 12 = 24\n12 / 2 = 6 (left: 6 12 12)\n12 / 6 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)"
            ],
            "values": [
                0.002,
                0.003,
                0.001,
                0.003,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.4306605
    },
    "18": {
        "input": "3 3 3 8",
        "step_1": {
            "steps": [
                "8 - 3 = 5 (left: 3 3 5)",
                "3 * 3 = 9 (left: 9 3 8)",
                "3 + 3 = 6 (left: 6 3 8)",
                "3 * 3 = 9 (left: 3 9 8)",
                "3 - 3 = 0 (left: 0 3 8)"
            ],
            "values": [
                1.002,
                3.0,
                3.0,
                2.001,
                20.002
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 1.4",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "3 + 3 = 6 (left: 6 3 8)",
                "",
                "",
                "3 - 3 = 0 (left: 0 3 8)",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "3 + 3 = 6 (left: 6 3 8)\n6 * 3 = 18 (left: 8 18)",
                "3 * 3 = 9 (left: 9 3 8)",
                "8 / 3 = 2 (left: 2 3 8)",
                "3 - 3 = 0 (left: 0 3 8)\n3 * 8 = 24 (left: 0 24)",
                "3 - 3 = 0 (left: 0 3 8)"
            ],
            "values": [
                0.003,
                3.0,
                0.003,
                40.001,
                21.001
            ],
            "resampled": [
                "0 <- 2.3",
                "1 <- INIT",
                "2 <- 2.3",
                "3 <- 1.4",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "3 - 3 = 0 (left: 0 3 8)\n3 * 8 = 24 (left: 0 24)",
                "",
                "3 - 3 = 0 (left: 0 3 8)\n3 * 8 = 24 (left: 0 24)",
                "3 - 3 = 0 (left: 0 3 8)",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "3 - 3 = 0 (left: 0 3 8)\n3 * 8 = 24 (left: 0 24)\n24 / 0 = undefined (cannot divide by zero)",
                "3 / 3 = 1 (left: 1 3 8)",
                "3 - 3 = 0 (left: 0 3 8)\n3 * 8 = 24 (left: 0 24)\n24 / 0 = undefined",
                "3 - 3 = 0 (left: 0 3 8)\n3 - 8 = -5 (left: -5)",
                "3 + 3 = 6 (left: 3 6 8)"
            ],
            "values": [
                0.003,
                60.0,
                0.003,
                0.0,
                21.001
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- INIT",
                "2 <- 1.4",
                "3 <- 3.1",
                "4 <- 3.1"
            ],
            "resampled_steps": [
                "3 / 3 = 1 (left: 1 3 8)",
                "",
                "3 - 3 = 0 (left: 0 3 8)",
                "3 / 3 = 1 (left: 1 3 8)",
                "3 / 3 = 1 (left: 1 3 8)"
            ]
        },
        "step_4": {
            "steps": [
                "3 / 3 = 1 (left: 1 3 8)\n1 + 3 = 4 (left: 4 8)",
                "8 / 3 = 2.67 (left: 3 3 2.67)",
                "3 - 3 = 0 (left: 0 3 8)\n3 * 0 = 0 (left: 0 8)",
                "3 / 3 = 1 (left: 1 3 8)\n1 + 3 = 4 (left: 4 8)",
                "3 / 3 = 1 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)"
            ],
            "values": [
                20.002,
                60.0,
                20.001,
                0.001,
                60.0
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 2.4",
                "2 <- 4.4",
                "3 <- 4.4",
                "4 <- 4.2"
            ],
            "resampled_steps": [
                "3 * 3 = 9 (left: 9 3 8)",
                "3 - 3 = 0 (left: 0 3 8)",
                "3 / 3 = 1 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)",
                "3 / 3 = 1 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)",
                "3 - 3 = 0 (left: 0 3 8)\n3 * 0 = 0 (left: 0 8)"
            ]
        },
        "step_5": {
            "steps": [
                "3 * 3 = 9 (left: 9 3 8)\n9 / 3 = 3 (left: 3 8)",
                "3 - 3 = 0 (left: 0 3 8)\n5 * 7 = 35 (left: 1 35 9)",
                "3 / 3 = 1 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "3 / 3 = 1 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "3 - 3 = 0 (left: 0 3 8)\n3 * 0 = 0 (left: 0 8)\n8 - 0 = 8 (left: 8)"
            ],
            "values": [
                60.0,
                3.0,
                40.0,
                60.0,
                0.002
            ],
            "resampled": [
                "0 <- 4.1",
                "1 <- 4.2",
                "2 <- 4.1",
                "3 <- 4.2",
                "4 <- 2.3"
            ],
            "resampled_steps": [
                "8 / 3 = 2.67 (left: 3 3 2.67)",
                "3 - 3 = 0 (left: 0 3 8)\n3 * 0 = 0 (left: 0 8)",
                "8 / 3 = 2.67 (left: 3 3 2.67)",
                "3 - 3 = 0 (left: 0 3 8)\n3 * 0 = 0 (left: 0 8)",
                "3 - 3 = 0 (left: 0 3 8)\n3 * 8 = 24 (left: 0 24)"
            ]
        },
        "step_6": {
            "steps": [
                "8 / 3 = 2.67 (left: 3 3 2.67)\n3 + 3 = 6 (left: 2.67 6)",
                "3 - 3 = 0 (left: 0 3 8)\n3 * 0 = 0 (left: 0 8)\n7 - 5 = 2 (left: 2 7)",
                "8 / 3 = 2.67 (left: 3 3 2.67)\n3 - 3 = 0 (left: 0 2.67)",
                "3 - 3 = 0 (left: 0 3 8)\n3 * 0 = 0 (left: 0 8)\n8 - 0 = 8 (left: 8)",
                "3 - 3 = 0 (left: 0 3 8)\n3 * 8 = 24 (left: 0 24)\n0 - 24 = -24 (left: -24)"
            ],
            "values": [
                1.0,
                0.002,
                0.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 4.1",
                "1 <- 2.4",
                "2 <- 4.1",
                "3 <- 2.3",
                "4 <- 5.2"
            ],
            "resampled_steps": [
                "8 / 3 = 2.67 (left: 3 3 2.67)",
                "3 - 3 = 0 (left: 0 3 8)",
                "8 / 3 = 2.67 (left: 3 3 2.67)",
                "3 - 3 = 0 (left: 0 3 8)\n3 * 8 = 24 (left: 0 24)",
                "3 / 3 = 1 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)"
            ]
        },
        "step_7": {
            "steps": [
                "8 / 3 = 2.67 (left: 3 3 2.67)\n3 - 2.67 = 0.33 (left: 0.33)",
                "3 - 3 = 0 (left: 0 3 8)\n9 / 3 = 3 (left: 6 3)",
                "8 / 3 = 2.67 (left: 3 3 2.67)\n7 - 2 = 5 (left: 5 5)",
                "3 - 3 = 0 (left: 0 3 8)\n3 * 8 = 24 (left: 0 24)\n24 - 0 = 24 (left: 24)",
                "3 / 3 = 1 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (3 / 3) * (3 * 8) = 24"
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ],
        "cost": 0.4494005
    },
    "19": {
        "input": "1 1 2 6",
        "step_1": {
            "steps": [
                "1 / 1 = 1 (left: 1 2 6)",
                "1 * 1 = 1 (left: 1 2 6)",
                "1 + 1 = 2 (left: 2 2 6)",
                "5 + 7 = 12 (left: 3 4 12)",
                "6 / 2 = 3 (left: 1 3 6)"
            ],
            "values": [
                0.003,
                2.001,
                60.0,
                41.0,
                21.001
            ],
            "resampled": [
                "0 <- 1.4",
                "1 <- 1.2",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "6 / 2 = 3 (left: 1 3 6)",
                "1 + 1 = 2 (left: 2 2 6)",
                "",
                "",
                "5 + 7 = 12 (left: 3 4 12)"
            ]
        },
        "step_2": {
            "steps": [
                "6 / 2 = 3 (left: 1 3 6)\n9 - 4 = 5 (left: 5 10)",
                "1 + 1 = 2 (left: 2 2 6)\nInput: 1 1 2 3",
                "3 + 5 = 8 (left: 6 8 8)",
                "1 + 1 = 2 (left: 2 2 6)",
                "5 + 7 = 12 (left: 3 4 12)\n3 + 4 = 7 (left: 7 12)"
            ],
            "values": [
                0.003,
                0.003,
                22.0,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 1.4",
                "2 <- 2.3",
                "3 <- 2.3",
                "4 <- 2.2"
            ],
            "resampled_steps": [
                "5 + 7 = 12 (left: 3 4 12)",
                "6 / 2 = 3 (left: 1 3 6)",
                "1 + 1 = 2 (left: 2 2 6)",
                "1 + 1 = 2 (left: 2 2 6)",
                "3 + 5 = 8 (left: 6 8 8)"
            ]
        },
        "step_3": {
            "steps": [
                "5 + 7 = 12 (left: 3 4 12)\n3 + 4 = 7 (left: 7 12)",
                "6 / 2 = 3 (left: 1 3 6)\n3 * 6 = 18 (left: 1 18)",
                "1 + 1 = 2 (left: 2 2 6)\n2 * 2 = 4 (left: 4 6)",
                "1 + 1 = 2 (left: 2 2 6)\n2 / 2 = 1 (left: 1 6)",
                "3 + 5 = 8 (left: 6 8 8)\n6 + 8 = 14 (left: 8 8 14)"
            ],
            "values": [
                0.003,
                0.003,
                60.0,
                41.0,
                0.003
            ],
            "resampled": [
                "0 <- 2.3",
                "1 <- 1.3",
                "2 <- 3.2",
                "3 <- 3.3",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 2 6)",
                "5 + 7 = 12 (left: 3 4 12)",
                "1 + 1 = 2 (left: 2 2 6)\n2 * 2 = 4 (left: 4 6)",
                "1 + 1 = 2 (left: 2 2 6)\n2 / 2 = 1 (left: 1 6)",
                "5 + 7 = 12 (left: 3 4 12)"
            ]
        },
        "step_4": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 6)\n3 / 1 = 3 (left: 1 3)",
                "5 + 7 = 12 (left: 3 4 12)\n3 * 4 = 12 (left: 12 12)",
                "1 + 1 = 2 (left: 2 2 6)\n2 * 2 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)",
                "1 + 1 = 2 (left: 2 2 6)\n2 / 2 = 1 (left: 1 6)\n1 + 6 = 7 (left: 7) ",
                "5 + 7 = 12 (left: 3 4 12)\n3 / 4 = 0.75 (left: 0.75 12)"
            ],
            "values": [
                0.002,
                40.001,
                0.001,
                0.003,
                0.001
            ],
            "resampled": [
                "0 <- 3.3",
                "1 <- 3.3",
                "2 <- 1.2",
                "3 <- 4.1",
                "4 <- 3.3"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 2 6)\n2 / 2 = 1 (left: 1 6)",
                "1 + 1 = 2 (left: 2 2 6)\n2 / 2 = 1 (left: 1 6)",
                "1 + 1 = 2 (left: 2 2 6)",
                "5 + 7 = 12 (left: 3 4 12)\n3 * 4 = 12 (left: 12 12)",
                "1 + 1 = 2 (left: 2 2 6)\n2 / 2 = 1 (left: 1 6)"
            ]
        },
        "step_5": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 6)\n2 / 2 = 1 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "1 + 1 = 2 (left: 2 2 6)\n2 / 2 = 1 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "1 + 1 = 2 (left: 2 2 6)\nInput: 4 2 3",
                "5 + 7 = 12 (left: 3 4 12)\n3 * 4 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 2 6)\n2 / 2 = 1 (left: 1 6)\n6 - 1 = 5 (left: 5)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                60.0,
                0.002
            ],
            "resampled": [
                "0 <- 5.3",
                "1 <- 2.3",
                "2 <- 5.3",
                "3 <- 3.3",
                "4 <- 1.2"
            ],
            "resampled_steps": [
                "5 + 7 = 12 (left: 3 4 12)\n3 * 4 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 2 6)",
                "5 + 7 = 12 (left: 3 4 12)\n3 * 4 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 2 6)\n2 / 2 = 1 (left: 1 6)",
                "1 + 1 = 2 (left: 2 2 6)"
            ]
        },
        "step_6": {
            "steps": [
                "5 + 7 = 12 (left: 3 4 12)\n3 * 4 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((1 + 1) + 2) * 6 = 24",
                "1 + 1 = 2 (left: 2 2 6)\n2 / 2 = 1 (left: 1 6)",
                "5 + 7 = 12 (left: 3 4 12)\n3 * 4 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (3 * 4) + (5 + 7) = 24",
                "1 + 1 = 2 (left: 2 2 6)\n2 / 2 = 1 (left: 1 6)\n6 - 1 = 5 (left: 5)",
                "1 + 1 = 2 (left: 2 2 6)\n2 * 2 = 4 (left: 4 6)"
            ]
        },
        "results": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.464773
    },
    "20": {
        "input": "1 1 2 11",
        "step_1": {
            "steps": [
                "2 + 1 = 3 (left: 1 3 11)",
                "11 - 1 = 10 (left: 1 2 10)",
                "11 - 2 = 9 (left: 1 2 9)",
                "1 * 1 = 1 (left: 1 2 11)",
                "1 * 1 = 1 (left: 1 2 11)"
            ],
            "values": [
                2.001,
                1.002,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                "",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 11)",
                "11 - 2 = 9 (left: 1 2 9)",
                "11 - 2 = 9 (left: 1 2 9)",
                "2 + 1 = 3 (left: 1 3 11)",
                "11 - 1 = 10 (left: 1 2 10)"
            ],
            "values": [
                0.003,
                3.0,
                0.003,
                1.002,
                20.002
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- 2.4",
                "2 <- 2.4",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "11 - 1 = 10 (left: 1 2 10)",
                "11 - 1 = 10 (left: 1 2 10)",
                "11 - 1 = 10 (left: 1 2 10)",
                "",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)",
                "11 - 1 = 10 (left: 1 2 10)\n10 - 1 = 9 (left: 2 9)",
                "11 - 1 = 10 (left: 1 2 10)\n1 + 2 = 3 (left: 3 10)",
                "1 * 1 = 1 (left: 1 2 11)",
                "11 - 2 = 9 (left: 1 2 9)"
            ],
            "values": [
                60.0,
                1.0,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- INIT",
                "2 <- 2.4",
                "3 <- 3.0",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "11 - 1 = 10 (left: 1 2 10)",
                "",
                "11 - 1 = 10 (left: 1 2 10)",
                "11 - 1 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)",
                ""
            ]
        },
        "step_4": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)",
                "2 * 1 = 2 (left: 2 2 11)",
                "11 - 1 = 10 (left: 1 2 10)\n10 - 1 = 9 (left: 2 9)",
                "11 - 1 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)\n1 * 8 = 8 (left: 8 8)",
                "11 - 1 = 10 (left: 1 2 10)"
            ],
            "values": [
                3.0,
                21.001,
                1.0,
                0.003,
                1.001
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 4.1",
                "2 <- 4.1",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "11 - 1 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)",
                "2 * 1 = 2 (left: 2 2 11)",
                "2 * 1 = 2 (left: 2 2 11)",
                "",
                ""
            ]
        },
        "step_5": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)\n8 - 1 = 7 (left: 7)",
                "2 * 1 = 2 (left: 2 2 11)\n9 + 3 = 12 (left: 6 12)",
                "2 * 1 = 2 (left: 2 2 11)\nInput: 3 3 9",
                "2 * 1 = 2 (left: 2 2 11)",
                "11 - 1 = 10 (left: 1 2 10)"
            ],
            "values": [
                0.001,
                0.003,
                0.003,
                41.0,
                0.003
            ],
            "resampled": [
                "0 <- 5.3",
                "1 <- 3.0",
                "2 <- 3.0",
                "3 <- 3.0",
                "4 <- 3.0"
            ],
            "resampled_steps": [
                "2 * 1 = 2 (left: 2 2 11)",
                "11 - 1 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)",
                "11 - 1 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)",
                "11 - 1 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)",
                "11 - 1 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)"
            ]
        },
        "step_6": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 11)\n8 / 2 = 4 (left: 3 4 8)",
                "11 - 1 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)\n8 / 1 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)\n1 * 8 = 8 (left: 8)",
                "11 - 1 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)\n8 - 1 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)\n1 + 8 = 9 (left: 9)"
            ],
            "values": [
                21.001,
                0.002,
                0.002,
                0.001,
                0.002
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- INIT",
                "2 <- 6.0",
                "3 <- 5.3",
                "4 <- 3.0"
            ],
            "resampled_steps": [
                "11 - 1 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)",
                "",
                "2 * 1 = 2 (left: 2 2 11)\n8 / 2 = 4 (left: 3 4 8)",
                "2 * 1 = 2 (left: 2 2 11)",
                "11 - 1 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)"
            ]
        },
        "step_7": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)\n1 + 8 = 9 (left: 8)",
                "2 * 1 = 2 (left: 2 2 11)",
                "2 * 1 = 2 (left: 2 2 11)\n8 / 2 = 4 (left: 3 4 8)\n8 - 3 = 5 (left: 5 8)",
                "2 * 1 = 2 (left: 2 2 11)\n2 + 2 = 4 (left: 4 11)",
                "11 - 1 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)\n8 - 1 = 7 (left: 7)"
            ],
            "values": [
                0.002,
                20.002,
                0.002,
                0.002,
                0.001
            ],
            "resampled": [
                "0 <- 5.3",
                "1 <- 2.3",
                "2 <- 4.0",
                "3 <- 4.1",
                "4 <- 6.0"
            ],
            "resampled_steps": [
                "2 * 1 = 2 (left: 2 2 11)",
                "2 + 1 = 3 (left: 1 3 11)",
                "11 - 1 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)",
                "2 * 1 = 2 (left: 2 2 11)",
                "2 * 1 = 2 (left: 2 2 11)\n8 / 2 = 4 (left: 3 4 8)"
            ]
        },
        "step_8": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 11)\n2 * 11 = 22 (left: 2 22)",
                "2 + 1 = 3 (left: 1 3 11)\n10 - 4 = 6 (left: 6 15)",
                "11 - 1 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n2 + 10 = 12 (left: 12)",
                "2 * 1 = 2 (left: 2 2 11)\n2 - 2 = 0 (left: 0 11)",
                "2 * 1 = 2 (left: 2 2 11)\n8 / 2 = 4 (left: 3 4 8)\n8 - 3 = 5 (left: 5 8)"
            ],
            "values": [
                0.003,
                0.002,
                0.003,
                0.0,
                0.003
            ],
            "resampled": [
                "0 <- 4.1",
                "1 <- 5.3",
                "2 <- 3.1",
                "3 <- 7.1",
                "4 <- 7.1"
            ],
            "resampled_steps": [
                "2 * 1 = 2 (left: 2 2 11)",
                "2 * 1 = 2 (left: 2 2 11)",
                "11 - 1 = 10 (left: 1 2 10)\n10 - 1 = 9 (left: 2 9)",
                "2 * 1 = 2 (left: 2 2 11)",
                "2 * 1 = 2 (left: 2 2 11)"
            ]
        },
        "step_9": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 11)\n2 * 2 = 4 (left: 4 11)",
                "2 * 1 = 2 (left: 2 2 11)\n11 / 2 = 5.5 (left: 2 5.5)",
                "11 - 1 = 10 (left: 1 2 10)\n10 - 1 = 9 (left: 2 9)\n2 * 9 = 18 (left: 18)",
                "2 * 1 = 2 (left: 2 2 11)\n2 * 11 = 22 (left: 2 22)",
                "2 * 1 = 2 (left: 2 2 11)\n11 / 2 = 5.5 (left: 5.5)"
            ],
            "values": [
                0.002,
                0.003,
                20.0,
                20.002,
                0.003
            ],
            "resampled": [
                "0 <- 4.1",
                "1 <- 9.2",
                "2 <- 5.3",
                "3 <- 9.2",
                "4 <- 9.3"
            ],
            "resampled_steps": [
                "2 * 1 = 2 (left: 2 2 11)",
                "11 - 1 = 10 (left: 1 2 10)\n10 - 1 = 9 (left: 2 9)\n2 * 9 = 18 (left: 18)",
                "2 * 1 = 2 (left: 2 2 11)",
                "11 - 1 = 10 (left: 1 2 10)\n10 - 1 = 9 (left: 2 9)\n2 * 9 = 18 (left: 18)",
                "2 * 1 = 2 (left: 2 2 11)\n2 * 11 = 22 (left: 2 22)"
            ]
        },
        "step_10": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 11)\n2 + 11 = 13 (left: 2 13)",
                "11 - 1 = 10 (left: 1 2 10)\n10 - 1 = 9 (left: 2 9)\n2 * 9 = 18 (left: 18)\nThere are no possible next steps with the input 18 as there are no other numbers to perform operations on.",
                "2 * 1 = 2 (left: 2 2 11)\n11 / 2 = 5.5 (left: 2 5.5)",
                "11 - 1 = 10 (left: 1 2 10)\n10 - 1 = 9 (left: 2 9)\n2 * 9 = 18 (left: 18)\nThere are no possible next steps with the input of 18.",
                "2 * 1 = 2 (left: 2 2 11)\n2 * 11 = 22 (left: 2 22)\n2 * 22 = 44 (left: 44)"
            ],
            "values": [
                0.003,
                0.003,
                1.001,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.4914945
    },
    "21": {
        "input": "1 2 3 4",
        "step_1": {
            "steps": [
                "4 - 2 = 2 (left: 1 3 4)",
                "2 - 3 = -1 (left: 1 -1 4)",
                "15 - 10 = 5 (left: 5 5 20)",
                "1 * 2 = 2 (left: 2 3 4)",
                "4 - 1 = 3 (left: 2 3 4)"
            ],
            "values": [
                2.0,
                60.0,
                2.001,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 1.1",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 1.4"
            ],
            "resampled_steps": [
                "2 - 3 = -1 (left: 1 -1 4)",
                "2 - 3 = -1 (left: 1 -1 4)",
                "",
                "",
                "4 - 1 = 3 (left: 2 3 4)"
            ]
        },
        "step_2": {
            "steps": [
                "2 - 3 = -1 (left: 1 -1 4)\n5 / 3 = 1.67 (left: 1.67 8 9)",
                "2 - 3 = -1 (left: 1 -1 4)\n1 - (-1) = 2 (left: 2 4)",
                "4 / 2 = 2 (left: 1 2 4)",
                "1 * 2 = 2 (left: 2 3 4)",
                "4 - 1 = 3 (left: 2 3 4)\n4 / 2 = 2 (left: 2 2)"
            ],
            "values": [
                2.001,
                0.002,
                0.003,
                60.0,
                1.002
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 2.3",
                "2 <- 1.1",
                "3 <- 1.4",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "1 * 2 = 2 (left: 2 3 4)",
                "1 * 2 = 2 (left: 2 3 4)",
                "2 - 3 = -1 (left: 1 -1 4)",
                "4 - 1 = 3 (left: 2 3 4)",
                "2 - 3 = -1 (left: 1 -1 4)"
            ]
        },
        "step_3": {
            "steps": [
                "1 * 2 = 2 (left: 2 3 4)\n2 + 3 = 5 (left: 4 5)",
                "1 * 2 = 2 (left: 2 3 4)\n4 - 2 = 2 (left: 2 3)",
                "2 - 3 = -1 (left: 1 -1 4)\n-1 + 4 = 3 (left: 1 3)",
                "4 - 1 = 3 (left: 2 3 4)\n5 + 10 = 15 (left: 15 15)",
                "2 - 3 = -1 (left: 1 -1 4)\n2 + 10 = 12 (left: 5 12)"
            ],
            "values": [
                60.0,
                20.001,
                41.0,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 1.1",
                "2 <- 3.2",
                "3 <- 3.0",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "1 * 2 = 2 (left: 2 3 4)",
                "2 - 3 = -1 (left: 1 -1 4)",
                "2 - 3 = -1 (left: 1 -1 4)\n-1 + 4 = 3 (left: 1 3)",
                "1 * 2 = 2 (left: 2 3 4)\n2 + 3 = 5 (left: 4 5)",
                ""
            ]
        },
        "step_4": {
            "steps": [
                "1 * 2 = 2 (left: 2 3 4)\n2 + 3 = 5 (left: 4 5)",
                "2 - 3 = -1 (left: 1 -1 4)\n1 * (-1) = -1 (left: -1 4)",
                "2 - 3 = -1 (left: 1 -1 4)\n-1 + 4 = 3 (left: 1 3)\n1 + 3 = 4 (left: 4)",
                "1 * 2 = 2 (left: 2 3 4)\n2 + 3 = 5 (left: 4 5)\n3 - 10 = -7 (left: -7)",
                "3 + 1 = 4 (left: 2 4 4)"
            ],
            "values": [
                3.0,
                2.001,
                0.003,
                0.001,
                1.002
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- INIT",
                "4 <- 3.0"
            ],
            "resampled_steps": [
                "1 * 2 = 2 (left: 2 3 4)",
                "1 * 2 = 2 (left: 2 3 4)",
                "1 * 2 = 2 (left: 2 3 4)",
                "",
                "1 * 2 = 2 (left: 2 3 4)\n2 + 3 = 5 (left: 4 5)"
            ]
        },
        "step_5": {
            "steps": [
                "1 * 2 = 2 (left: 2 3 4)\n10 / 5 = 2 (left: 2 15)",
                "1 * 2 = 2 (left: 2 3 4)\n3 * 4 = 12 (left: 2 12)",
                "1 * 2 = 2 (left: 2 3 4)\n2 + 5 = 7 (left: 7 7)",
                "10 * 15 = 150 (left: 5 150 20)",
                "1 * 2 = 2 (left: 2 3 4)\n2 + 3 = 5 (left: 4 5)\n27 - 9 = 18 (left: 3 18)"
            ],
            "values": [
                0.003,
                40.001,
                0.003,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 3.2",
                "2 <- 1.2",
                "3 <- 5.1",
                "4 <- 3.2"
            ],
            "resampled_steps": [
                "1 * 2 = 2 (left: 2 3 4)\n2 + 3 = 5 (left: 4 5)",
                "2 - 3 = -1 (left: 1 -1 4)\n-1 + 4 = 3 (left: 1 3)",
                "15 - 10 = 5 (left: 5 5 20)",
                "1 * 2 = 2 (left: 2 3 4)\n3 * 4 = 12 (left: 2 12)",
                "2 - 3 = -1 (left: 1 -1 4)\n-1 + 4 = 3 (left: 1 3)"
            ]
        },
        "step_6": {
            "steps": [
                "1 * 2 = 2 (left: 2 3 4)\n2 + 3 = 5 (left: 4 5)\n4 + 5 = 9 (left: 9)",
                "2 - 3 = -1 (left: 1 -1 4)\n-1 + 4 = 3 (left: 1 3)\n3 / 1 = 3 (left: 3)",
                "15 - 10 = 5 (left: 5 5 20)\n20 / 5 = 4 (left: 4 5 20)",
                "1 * 2 = 2 (left: 2 3 4)\n3 * 4 = 12 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "2 - 3 = -1 (left: 1 -1 4)\n-1 + 4 = 3 (left: 1 3)\n1 + 3 = 4 (left: 4)"
            ],
            "values": [
                0.0,
                0.003,
                41.0,
                0.003,
                0.001
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 5.1",
                "2 <- 1.4",
                "3 <- 3.2",
                "4 <- 5.1"
            ],
            "resampled_steps": [
                "2 - 3 = -1 (left: 1 -1 4)\n-1 + 4 = 3 (left: 1 3)",
                "1 * 2 = 2 (left: 2 3 4)\n3 * 4 = 12 (left: 2 12)",
                "4 - 1 = 3 (left: 2 3 4)",
                "2 - 3 = -1 (left: 1 -1 4)\n-1 + 4 = 3 (left: 1 3)",
                "1 * 2 = 2 (left: 2 3 4)\n3 * 4 = 12 (left: 2 12)"
            ]
        },
        "step_7": {
            "steps": [
                "2 - 3 = -1 (left: 1 -1 4)\n-1 + 4 = 3 (left: 1 3)\n1 + 3 = 4 (left: 4)",
                "1 * 2 = 2 (left: 2 3 4)\n3 * 4 = 12 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "4 - 1 = 3 (left: 2 3 4)\n7 - 5 = 2 (left: 2 9)",
                "2 - 3 = -1 (left: 1 -1 4)\n-1 + 4 = 3 (left: 1 3)\n3 - 1 = 2 (left: 2)",
                "1 * 2 = 2 (left: 2 3 4)\n3 * 4 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)"
            ],
            "values": [
                0.001,
                0.003,
                0.0,
                0.0,
                60.0
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- INIT",
                "2 <- 1.4",
                "3 <- 1.1",
                "4 <- 7.4"
            ],
            "resampled_steps": [
                "2 - 3 = -1 (left: 1 -1 4)\n-1 + 4 = 3 (left: 1 3)",
                "",
                "4 - 1 = 3 (left: 2 3 4)",
                "2 - 3 = -1 (left: 1 -1 4)",
                "1 * 2 = 2 (left: 2 3 4)\n3 * 4 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)"
            ]
        },
        "step_8": {
            "steps": [
                "2 - 3 = -1 (left: 1 -1 4)\n-1 + 4 = 3 (left: 1 3)\n1 + 3 = 4 (left: 4)",
                "3 + 4 = 7 (left: 1 2 7)",
                "4 - 1 = 3 (left: 2 3 4)\n12 - 18 = -6 (left: 6 -6)",
                "2 - 3 = -1 (left: 1 -1 4)\n1 - (-1) = 2 (left: 2 4)",
                "1 * 2 = 2 (left: 2 3 4)\n3 * 4 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: 1 * (2 * (3 * 4)) = 24"
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ],
        "cost": 0.515886
    },
    "22": {
        "input": "11 11 12 12",
        "step_1": {
            "steps": [
                "12 - 11 = 1 (left: 1 12 1)",
                "11 + 11 = 22 (left: 12 12 22)",
                "12 - 11 = 1 (left: 1 11 12)",
                "11 + 11 = 22 (left: 12 12 22)",
                "12 / 11 = 1 (left: 11 1 12)"
            ],
            "values": [
                3.0,
                0.003,
                21.001,
                1.002,
                21.001
            ],
            "resampled": [
                "0 <- 1.4",
                "1 <- 1.2",
                "2 <- 1.4",
                "3 <- INIT",
                "4 <- 1.4"
            ],
            "resampled_steps": [
                "12 / 11 = 1 (left: 11 1 12)",
                "12 - 11 = 1 (left: 1 11 12)",
                "12 / 11 = 1 (left: 11 1 12)",
                "",
                "12 / 11 = 1 (left: 11 1 12)"
            ]
        },
        "step_2": {
            "steps": [
                "12 / 11 = 1 (left: 11 1 12)\n11 - 1 = 10 (left: 10 12)",
                "12 - 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)",
                "12 / 11 = 1 (left: 11 1 12)\n5 / 5 = 1 (left: 1 10 20)",
                "12 + 11 = 23 (left: 11 12 23)",
                "12 / 11 = 1 (left: 11 1 12)\nInput: 3 7 21"
            ],
            "values": [
                0.001,
                20.002,
                0.003,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- INIT",
                "2 <- 2.1",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "12 - 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)",
                "",
                "12 - 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)",
                "",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)",
                "12 - 11 = 1 (left: 1 12 12)",
                "12 - 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "12 - 11 = 1 (left: 11 1 12)",
                "11 - 11 = 0 (left: 0 12 12)"
            ],
            "values": [
                0.002,
                21.001,
                60.0,
                40.001,
                40.0
            ],
            "resampled": [
                "0 <- 3.3",
                "1 <- 3.4",
                "2 <- 3.3",
                "3 <- 3.4",
                "4 <- 1.2"
            ],
            "resampled_steps": [
                "12 - 11 = 1 (left: 11 1 12)",
                "11 - 11 = 0 (left: 0 12 12)",
                "12 - 11 = 1 (left: 11 1 12)",
                "11 - 11 = 0 (left: 0 12 12)",
                "12 - 11 = 1 (left: 1 11 12)"
            ]
        },
        "step_4": {
            "steps": [
                "12 - 11 = 1 (left: 11 1 12)\n11 / 1 = 11 (left: 11 12)",
                "11 - 11 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 11 1 12)\n7 - 2 = 5 (left: 5 5 2)",
                "11 - 11 = 0 (left: 0 12 12)\n12 / 12 = 1 (left: 0 1)",
                "12 - 11 = 1 (left: 1 11 12)\n11 - 1 = 10 (left: 10 12)"
            ],
            "values": [
                0.001,
                40.001,
                2.001,
                40.0,
                0.002
            ],
            "resampled": [
                "0 <- 1.4",
                "1 <- 3.4",
                "2 <- 3.4",
                "3 <- 4.3",
                "4 <- 3.3"
            ],
            "resampled_steps": [
                "12 / 11 = 1 (left: 11 1 12)",
                "11 - 11 = 0 (left: 0 12 12)",
                "11 - 11 = 0 (left: 0 12 12)",
                "11 - 11 = 0 (left: 0 12 12)\n12 / 12 = 1 (left: 0 1)",
                "12 - 11 = 1 (left: 11 1 12)"
            ]
        },
        "step_5": {
            "steps": [
                "12 / 11 = 1 (left: 11 1 12)\n11 / 1 = 11 (left: 11 12)",
                "11 - 11 = 0 (left: 0 12 12)\nPossible next steps:",
                "11 - 11 = 0 (left: 0 12 12)\nInput: 10 2 3 5",
                "11 - 11 = 0 (left: 0 12 12)\n12 / 12 = 1 (left: 0 1)\n1 / 0 is undefined.",
                "12 - 11 = 1 (left: 11 1 12)\n1 / 11 = 0.09090909090909091 (left: 0.09090909090909091 12)"
            ],
            "values": [
                0.002,
                0.003,
                0.003,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 3.3",
                "1 <- 3.2",
                "2 <- 1.2",
                "3 <- 3.2",
                "4 <- 3.1"
            ],
            "resampled_steps": [
                "12 - 11 = 1 (left: 11 1 12)",
                "12 - 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "12 - 11 = 1 (left: 1 11 12)",
                "12 - 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "12 - 11 = 1 (left: 1 12 12)"
            ]
        },
        "step_6": {
            "steps": [
                "12 - 11 = 1 (left: 11 1 12)\n11 + 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24",
                "12 - 11 = 1 (left: 1 11 12)\n11 / 1 = 11 (left: 11 12)",
                "12 - 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24",
                "12 - 11 = 1 (left: 1 12 12)\n12 - 12 = 0 (left: 1 0)"
            ],
            "values": [
                0.003,
                60.0,
                0.003,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 4.1",
                "1 <- 4.3",
                "2 <- 2.1",
                "3 <- 6.3",
                "4 <- 6.1"
            ],
            "resampled_steps": [
                "11 - 11 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)",
                "11 - 11 = 0 (left: 0 12 12)\n12 / 12 = 1 (left: 0 1)",
                "12 - 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24",
                "12 - 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24"
            ]
        },
        "step_7": {
            "steps": [
                "11 - 11 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "11 - 11 = 0 (left: 0 12 12)\n12 / 12 = 1 (left: 0 1)\nInput: 5 3",
                "12 - 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "12 - 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24\nInput: 2 3 6 8\nSteps:\n6 / 3 = 2 (left: 2 2 8)\n2 + 2 = 4 (left: 4 8)\n4 * 8 = 32 (left: 32)\nAnswer: (2 * (6 / 3)) + 8 = 24",
                "12 - 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24\nInput: 3 3 5 8\nSteps:\n3 * 5 = 15 (left: 3 8 15)\n8 - 3 = 5 (left: 5 15)\n5 * 15 = 75 (left: 75)\nAnswer: (8 - 3) * (3 * 5) = 24"
            ],
            "values": [
                60.0,
                0.003,
                0.0,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 6.1",
                "1 <- 4.1",
                "2 <- 4.3",
                "3 <- 7.0",
                "4 <- 4.1"
            ],
            "resampled_steps": [
                "12 - 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24",
                "11 - 11 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)",
                "11 - 11 = 0 (left: 0 12 12)\n12 / 12 = 1 (left: 0 1)",
                "11 - 11 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "11 - 11 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)"
            ]
        },
        "step_8": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24\nInput: 3 5 7 8\nSteps:\n7 - 3 = 4 (left: 4 5 8)\n8 - 4 = 4 (left: 4 5)\n4 * 5 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((7 - 3) * (8 - 4)) + 5 = 24",
                "11 - 11 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "11 - 11 = 0 (left: 0 12 12)\n12 / 12 = 1 (left: 0 1)\n0 - 1 = -1 (left: -1)",
                "11 - 11 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (11 - 11) * (12 + 12) = 24",
                "11 - 11 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 + 12 = 24"
            ],
            "values": [
                60.0,
                0.003,
                0.001,
                60.0,
                20.002
            ],
            "resampled": [
                "0 <- 8.0",
                "1 <- 8.3",
                "2 <- 7.3",
                "3 <- 3.2",
                "4 <- 4.1"
            ],
            "resampled_steps": [
                "12 - 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24\nInput: 3 5 7 8\nSteps:\n7 - 3 = 4 (left: 4 5 8)\n8 - 4 = 4 (left: 4 5)\n4 * 5 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((7 - 3) * (8 - 4)) + 5 = 24",
                "11 - 11 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (11 - 11) * (12 + 12) = 24",
                "12 - 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24\nInput: 2 3 6 8\nSteps:\n6 / 3 = 2 (left: 2 2 8)\n2 + 2 = 4 (left: 4 8)\n4 * 8 = 32 (left: 32)\nAnswer: (2 * (6 / 3)) + 8 = 24",
                "12 - 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "11 - 11 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)"
            ]
        },
        "step_9": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24\nInput: 3 5 7 8\nSteps:\n7 - 3 = 4 (left: 4 5 8)\n8 - 4 = 4 (left: 4 5)\n4 * 5 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((7 - 3) * (8 - 4)) + 5 = 24\nInput: 2 3 5 11\nSteps:\n5 - 3 = 2 (left: 2 2 11)\n2 * 2 = 4 (left: 4 11)\n4 * 11 = 44 (left: 44)\n44 - 20 = 24 (left: 24)\nAnswer: ((5 - 3) * (2 * 2)) + 11 = 24",
                "11 - 11 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (11 - 11) * (12 + 12) = 24\nInput: 3 3 3 3\nSteps:\n3 * 3 = 9 (left: 3 3 9)\n9 + 3 = 12 (left: 3 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((3 * 3) + 3) * 2 = 24",
                "12 - 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24\nInput: 2 3 6 8\nSteps:\n6 / 3 = 2 (left: 2 2 8)\n2 + 2 = 4 (left: 4 8)\n4 * 8 = 32 (left: 32)\nAnswer: (2 * (6 / 3)) + 8 = 24\nSorry, it seems that it is not possible to obtain 24 using the numbers 2, 3, 6, and 8 with the given restrictions.",
                "12 - 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24",
                "11 - 11 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 + 12 = 24"
            ],
            "values": [
                60.0,
                60.0,
                0.003,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 3.3",
                "1 <- 6.1",
                "2 <- 3.4",
                "3 <- 4.1",
                "4 <- 8.0"
            ],
            "resampled_steps": [
                "12 - 11 = 1 (left: 11 1 12)",
                "12 - 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24",
                "11 - 11 = 0 (left: 0 12 12)",
                "11 - 11 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24\nInput: 3 5 7 8\nSteps:\n7 - 3 = 4 (left: 4 5 8)\n8 - 4 = 4 (left: 4 5)\n4 * 5 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((7 - 3) * (8 - 4)) + 5 = 24"
            ]
        },
        "step_10": {
            "steps": [
                "12 - 11 = 1 (left: 11 1 12)\n12 * 11 = 132 (left: 132)",
                "12 - 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24\nInput: 3 6 7 8\nSteps:\n6 + 7 = 13 (left: 3 8 13)\n13 - 3 = 10 (left: 8 10)\n10 * 8 = 80 (left: 80)\n80 / 10 = 8 (left: 8)\n8 * 3 = 24 (left: 24)\nAnswer: ((6 + 7) - 3) * 8 / 10 * 3 = 24",
                "11 - 11 = 0 (left: 0 12 12)\n2 * 5 = 10 (left: 10 10)",
                "11 - 11 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "12 - 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24\nInput: 3 5 7 8\nSteps:\n7 - 3 = 4 (left: 4 5 8)\n8 - 4 = 4 (left: 4 5)\n4 * 5 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((7 - 3) * (8 - 4)) + 5 = 24\nInput: 2 3 4 6\nSteps:\n3 * 6 = 18 (left: 2 4 18)\n18 - 4 = 14 (left: 2 14)\n14 + 2 = 16 (left: 16)\n16 + 4 = 20 (left: 20)\n20 + 4 = 24 (left: 24)\nAnswer: ((2 + 14) + 4) + 6 = 24"
            ],
            "values": [
                0.003,
                60.0,
                0.003,
                0.002,
                40.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.5443279999999999
    },
    "23": {
        "input": "3 7 7 8",
        "step_1": {
            "steps": [
                "7 - 3 = 4 (left: 4 7 8)",
                "7 + 7 = 14 (left: 3 8 14)",
                "7 - 3 = 4 (left: 4 7 8)",
                "3 + 7 = 10 (left: 7 7 8)",
                "3 + 7 = 10 (left: 7 7 8)"
            ],
            "values": [
                2.001,
                60.0,
                2.0,
                3.0,
                3.0
            ],
            "resampled": [
                "0 <- 1.4",
                "1 <- INIT",
                "2 <- 1.1",
                "3 <- 1.1",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "3 + 7 = 10 (left: 7 7 8)",
                "",
                "7 + 7 = 14 (left: 3 8 14)",
                "7 + 7 = 14 (left: 3 8 14)",
                "7 + 7 = 14 (left: 3 8 14)"
            ]
        },
        "step_2": {
            "steps": [
                "3 + 7 = 10 (left: 7 7 8)\n7 / 7 = 1 (left: 1 8)",
                "7 / 3 = 2 (left: 2 7 8)",
                "7 + 7 = 14 (left: 3 8 14)\n14 / 3 = 4.66667 (left: 4.66667 14)",
                "7 + 7 = 14 (left: 3 8 14)\n4 + 8 = 12 (left: 12 14)",
                "7 + 7 = 14 (left: 3 8 14)\n14 / 3 = 4.67 (left: 4.67 8 14)"
            ],
            "values": [
                40.0,
                3.0,
                1.001,
                0.003,
                3.0
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- INIT",
                "2 <- 1.1",
                "3 <- 1.1",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "3 + 7 = 10 (left: 7 7 8)\n7 / 7 = 1 (left: 1 8)",
                "",
                "7 + 7 = 14 (left: 3 8 14)",
                "7 + 7 = 14 (left: 3 8 14)",
                "7 + 7 = 14 (left: 3 8 14)"
            ]
        },
        "step_3": {
            "steps": [
                "3 + 7 = 10 (left: 7 7 8)\n7 / 7 = 1 (left: 1 8)\n1 + 8 = 9 (left: 9)",
                "7 / 3 = 2 (left: 2 7 8)",
                "7 + 7 = 14 (left: 3 8 14)\n14 - 8 = 6 (left: 3 6)",
                "7 + 7 = 14 (left: 3 8 14)\nInput: 4 6 8",
                "7 + 7 = 14 (left: 3 8 14)\nInput: 5 8 14"
            ],
            "values": [
                0.003,
                3.0,
                22.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 1.1",
                "3 <- 1.1",
                "4 <- 3.2"
            ],
            "resampled_steps": [
                "3 + 7 = 10 (left: 7 7 8)\n7 / 7 = 1 (left: 1 8)",
                "3 + 7 = 10 (left: 7 7 8)\n7 / 7 = 1 (left: 1 8)",
                "7 + 7 = 14 (left: 3 8 14)",
                "7 + 7 = 14 (left: 3 8 14)",
                "7 + 7 = 14 (left: 3 8 14)\n14 - 8 = 6 (left: 3 6)"
            ]
        },
        "step_4": {
            "steps": [
                "3 + 7 = 10 (left: 7 7 8)\n7 / 7 = 1 (left: 1 8)\n8 - 1 = 7 (left: 7)",
                "3 + 7 = 10 (left: 7 7 8)\n7 / 7 = 1 (left: 1 8)\n1 + 8 = 9 (left: 9)",
                "7 + 7 = 14 (left: 3 8 14)\n14 / 3 = 4.67 (left: 4.67 8)",
                "7 + 7 = 14 (left: 3 8 14)\n8 / 3 = 2.667 (left: 2.667 14)",
                "7 + 7 = 14 (left: 3 8 14)\n14 - 8 = 6 (left: 3 6)\n6 / 3 = 2 (left: 2)"
            ],
            "values": [
                0.001,
                0.0,
                1.001,
                0.002,
                0.002
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 1.1",
                "2 <- INIT",
                "3 <- 1.1",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "3 + 7 = 10 (left: 7 7 8)\n7 / 7 = 1 (left: 1 8)",
                "7 + 7 = 14 (left: 3 8 14)",
                "",
                "7 + 7 = 14 (left: 3 8 14)",
                "7 + 7 = 14 (left: 3 8 14)"
            ]
        },
        "step_5": {
            "steps": [
                "3 + 7 = 10 (left: 7 7 8)\n7 / 7 = 1 (left: 1 8)\n1 * 8 = 8 (left: 8)",
                "7 + 7 = 14 (left: 3 8 14)\n3 * 8 = 24 (left: 24 14)",
                "7 - 3 = 4 (left: 4 7 8)",
                "7 + 7 = 14 (left: 3 8 14)\n8 - 3 = 5 (left: 5 14)",
                "7 + 7 = 14 (left: 3 8 14)\n3 * 8 = 24 (left: 24 14)"
            ],
            "values": [
                0.001,
                0.003,
                22.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 1.1",
                "2 <- 1.1",
                "3 <- 3.2",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "7 + 7 = 14 (left: 3 8 14)",
                "7 + 7 = 14 (left: 3 8 14)",
                "7 + 7 = 14 (left: 3 8 14)",
                "7 + 7 = 14 (left: 3 8 14)\n14 - 8 = 6 (left: 3 6)",
                ""
            ]
        },
        "step_6": {
            "steps": [
                "7 + 7 = 14 (left: 3 8 14)\nInput: 4 8 14",
                "7 + 7 = 14 (left: 3 8 14)\n3 * 8 = 24 (left: 24 14)",
                "7 + 7 = 14 (left: 3 8 14)\n14 / 3 = 4.67 (left: 4.67 8)",
                "7 + 7 = 14 (left: 3 8 14)\n14 - 8 = 6 (left: 3 6)\n6 / 3 = 2 (left: 2)",
                "7 / 3 = 2 (left: 2 7 8)"
            ],
            "values": [
                0.003,
                20.002,
                0.003,
                0.001,
                2.001
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 5.2",
                "3 <- 3.2",
                "4 <- 2.0"
            ],
            "resampled_steps": [
                "3 + 7 = 10 (left: 7 7 8)\n7 / 7 = 1 (left: 1 8)",
                "3 + 7 = 10 (left: 7 7 8)\n7 / 7 = 1 (left: 1 8)",
                "7 - 3 = 4 (left: 4 7 8)",
                "7 + 7 = 14 (left: 3 8 14)\n14 - 8 = 6 (left: 3 6)",
                "3 + 7 = 10 (left: 7 7 8)\n7 / 7 = 1 (left: 1 8)"
            ]
        },
        "step_7": {
            "steps": [
                "3 + 7 = 10 (left: 7 7 8)\n7 / 7 = 1 (left: 1 8)\n8 - 1 = 7 (left: 7)",
                "3 + 7 = 10 (left: 7 7 8)\n7 / 7 = 1 (left: 1 8)\n8 / 1 = 8 (left: 8)",
                "7 - 3 = 4 (left: 4 7 8)\nPossible next steps:",
                "7 + 7 = 14 (left: 3 8 14)\n14 - 8 = 6 (left: 3 6)\n3 * 6 = 18 (left: 18)",
                "3 + 7 = 10 (left: 7 7 8)\n7 / 7 = 1 (left: 1 8)\n8 / 1 = 8 (left: 8)"
            ],
            "values": [
                0.001,
                0.001,
                0.003,
                0.001,
                0.001
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 1.1",
                "2 <- 1.0",
                "3 <- 1.1",
                "4 <- 2.0"
            ],
            "resampled_steps": [
                "7 + 7 = 14 (left: 3 8 14)",
                "7 + 7 = 14 (left: 3 8 14)",
                "7 - 3 = 4 (left: 4 7 8)",
                "7 + 7 = 14 (left: 3 8 14)",
                "3 + 7 = 10 (left: 7 7 8)\n7 / 7 = 1 (left: 1 8)"
            ]
        },
        "step_8": {
            "steps": [
                "7 + 7 = 14 (left: 3 8 14)\nInput: 5 10 15",
                "7 + 7 = 14 (left: 3 8 14)\n3 * 8 = 24 (left: 24 14)",
                "7 - 3 = 4 (left: 4 7 8)\n7 - 4 = 3 (left: 3 8)",
                "7 + 7 = 14 (left: 3 8 14)\n14 - 3 = 11 (left: 8 11)",
                "3 + 7 = 10 (left: 7 7 8)\n7 / 7 = 1 (left: 1 8)\n8 / 1 = 8 (left: 8)"
            ],
            "values": [
                0.003,
                20.002,
                60.0,
                1.0,
                0.001
            ],
            "resampled": [
                "0 <- 8.2",
                "1 <- 8.2",
                "2 <- 8.1",
                "3 <- 8.2",
                "4 <- 5.2"
            ],
            "resampled_steps": [
                "7 - 3 = 4 (left: 4 7 8)\n7 - 4 = 3 (left: 3 8)",
                "7 - 3 = 4 (left: 4 7 8)\n7 - 4 = 3 (left: 3 8)",
                "7 + 7 = 14 (left: 3 8 14)\n3 * 8 = 24 (left: 24 14)",
                "7 - 3 = 4 (left: 4 7 8)\n7 - 4 = 3 (left: 3 8)",
                "7 - 3 = 4 (left: 4 7 8)"
            ]
        },
        "step_9": {
            "steps": [
                "7 - 3 = 4 (left: 4 7 8)\n7 - 4 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "7 - 3 = 4 (left: 4 7 8)\n7 - 4 = 3 (left: 3 8)\n3 + 8 = 11 (left: 8 11)",
                "7 + 7 = 14 (left: 3 8 14)\n3 * 8 = 24 (left: 24 14)\n24 * 14 = 336 (left: 336)",
                "7 - 3 = 4 (left: 4 7 8)\n7 - 4 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)",
                "7 - 3 = 4 (left: 4 7 8)\n4 + 7 = 11 (left: 8 11)"
            ],
            "values": [
                40.0,
                0.002,
                0.002,
                0.002,
                20.0
            ],
            "resampled": [
                "0 <- 8.2",
                "1 <- 2.0",
                "2 <- 9.0",
                "3 <- INIT",
                "4 <- 5.2"
            ],
            "resampled_steps": [
                "7 - 3 = 4 (left: 4 7 8)\n7 - 4 = 3 (left: 3 8)",
                "3 + 7 = 10 (left: 7 7 8)\n7 / 7 = 1 (left: 1 8)",
                "7 - 3 = 4 (left: 4 7 8)\n7 - 4 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "",
                "7 - 3 = 4 (left: 4 7 8)"
            ]
        },
        "step_10": {
            "steps": [
                "7 - 3 = 4 (left: 4 7 8)\n7 - 4 = 3 (left: 3 8)\n3 + 8 = 11 (left: 8)",
                "3 + 7 = 10 (left: 7 7 8)\n7 / 7 = 1 (left: 1 8)\n8 - 1 = 7 (left: 7)",
                "7 - 3 = 4 (left: 4 7 8)\n7 - 4 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (7 - 3) * (7 - 4) * 8 = 24",
                "7 / 3 = 2 (left: 2 7 8)",
                "7 - 3 = 4 (left: 4 7 8)\n4 + 7 = 11 (left: 8 11)"
            ],
            "values": [
                0.003,
                0.0,
                0.003,
                1.002,
                2.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.5707065
    },
    "24": {
        "input": "1 1 13 13",
        "step_1": {
            "steps": [
                "13 - 1 = 12 (left: 1 13 12)",
                "13 / 1 = 13 (left: 1 13 13)",
                "13 * 1 = 13 (left: 1 13 13)",
                "13 / 1 = 13 (left: 1 13 13)",
                "1 * 1 = 1 (left: 1 13 13)"
            ],
            "values": [
                21.001,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.0",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                "13 - 1 = 12 (left: 1 13 12)",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "1 + 1 = 2 (left: 2 13 13)",
                "4 * 4 = 16 (left: 8 8 16)",
                "13 - 1 = 12 (left: 1 13 12)\n4 + 6 = 10 (left: 10 10 2)",
                "13 + 1 = 14 (left: 1 13 14)",
                "13 - 1 = 12 (left: 1 12 13)"
            ],
            "values": [
                0.003,
                20.002,
                1.002,
                21.001,
                21.001
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- INIT",
                "2 <- 2.3",
                "3 <- 2.4",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "13 - 1 = 12 (left: 1 12 13)",
                "",
                "13 + 1 = 14 (left: 1 13 14)",
                "13 - 1 = 12 (left: 1 12 13)",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "13 - 1 = 12 (left: 1 12 13)\n12 - 1 = 11 (left: 11 13)",
                "13 - 1 = 12 (left: 1 12 13)",
                "13 + 1 = 14 (left: 1 13 14)\n10 / 5 = 2 (left: 2 3 5)",
                "13 - 1 = 12 (left: 1 12 13)\n12 / 1 = 12 (left: 12 13)",
                "13 * 1 = 13 (left: 13 13 13)"
            ],
            "values": [
                60.0,
                0.003,
                3.0,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 2.1",
                "2 <- 3.0",
                "3 <- INIT",
                "4 <- 3.0"
            ],
            "resampled_steps": [
                "13 - 1 = 12 (left: 1 12 13)\n12 - 1 = 11 (left: 11 13)",
                "4 * 4 = 16 (left: 8 8 16)",
                "13 - 1 = 12 (left: 1 12 13)\n12 - 1 = 11 (left: 11 13)",
                "",
                "13 - 1 = 12 (left: 1 12 13)\n12 - 1 = 11 (left: 11 13)"
            ]
        },
        "step_4": {
            "steps": [
                "13 - 1 = 12 (left: 1 12 13)\n12 - 1 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "4 * 4 = 16 (left: 8 8 16)\n8 - 8 = 0 (left: 0 16)",
                "13 - 1 = 12 (left: 1 12 13)\n12 - 1 = 11 (left: 11 13)\n11 * 13 = 143 (left: 143)",
                "13 * 1 = 13 (left: 13 13 13)",
                "13 - 1 = 12 (left: 1 12 13)\n12 - 1 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)"
            ],
            "values": [
                60.0,
                20.001,
                0.003,
                1.002,
                40.0
            ],
            "resampled": [
                "0 <- 4.4",
                "1 <- 4.0",
                "2 <- 3.0",
                "3 <- 2.4",
                "4 <- 4.1"
            ],
            "resampled_steps": [
                "13 - 1 = 12 (left: 1 12 13)\n12 - 1 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "13 - 1 = 12 (left: 1 12 13)\n12 - 1 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "13 - 1 = 12 (left: 1 12 13)\n12 - 1 = 11 (left: 11 13)",
                "13 - 1 = 12 (left: 1 12 13)",
                "4 * 4 = 16 (left: 8 8 16)\n8 - 8 = 0 (left: 0 16)"
            ]
        },
        "step_5": {
            "steps": [
                "13 - 1 = 12 (left: 1 12 13)\n12 - 1 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((13 - 1) - 1) + 13 = 24",
                "13 - 1 = 12 (left: 1 12 13)\n12 - 1 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: (13 - 1) * (1 + 11) = 24",
                "13 - 1 = 12 (left: 1 12 13)\n12 - 1 = 11 (left: 11 13)\n11 * 13 = 143 (left: 143)",
                "13 - 1 = 12 (left: 1 12 13)\n12 + 1 = 13 (left: 1 13)",
                "4 * 4 = 16 (left: 8 8 16)\n8 - 8 = 0 (left: 0 16)\n15 - 10 = 5 (left: 5)"
            ]
        },
        "results": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.5860685
    },
    "25": {
        "input": "1 2 4 12",
        "step_1": {
            "steps": [
                "12 - 2 = 10 (left: 1 4 10)",
                "12 - 4 = 8 (left: 1 2 8)",
                "12 - 4 = 8 (left: 1 2 8)",
                "1 + 2 = 3 (left: 3 4 12)",
                "10 - 6 = 4 (left: 3 4 8)"
            ],
            "values": [
                21.001,
                60.0,
                41.0,
                41.0,
                21.001
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- INIT",
                "2 <- 1.1",
                "3 <- 1.1",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "1 + 2 = 3 (left: 3 4 12)",
                "",
                "12 - 4 = 8 (left: 1 2 8)",
                "12 - 4 = 8 (left: 1 2 8)",
                "12 - 2 = 10 (left: 1 4 10)"
            ]
        },
        "step_2": {
            "steps": [
                "1 + 2 = 3 (left: 3 4 12)\n3 * 4 = 12 (left: 12 12)",
                "2 * 4 = 8 (left: 1 8 12)",
                "12 - 4 = 8 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "12 - 4 = 8 (left: 1 2 8)\n7 / 5 = 1.4 (left: 1.4 11)",
                "12 - 2 = 10 (left: 1 4 10)\n10 - 4 = 6 (left: 1 6)"
            ],
            "values": [
                21.001,
                2.001,
                60.0,
                0.002,
                60.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 1.1",
                "2 <- 1.2",
                "3 <- 1.3",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "12 - 4 = 8 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "12 - 4 = 8 (left: 1 2 8)",
                "12 - 4 = 8 (left: 1 2 8)",
                "1 + 2 = 3 (left: 3 4 12)",
                "12 - 4 = 8 (left: 1 2 8)"
            ]
        },
        "step_3": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "12 - 4 = 8 (left: 1 2 8)\nInput: 3 7 9",
                "12 - 4 = 8 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "1 + 2 = 3 (left: 3 4 12)\n3 * 4 = 12 (left: 12 12)",
                "12 - 4 = 8 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)"
            ],
            "values": [
                0.002,
                0.003,
                60.0,
                40.001,
                60.0
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 2.0",
                "2 <- 2.2",
                "3 <- INIT",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "12 - 4 = 8 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "1 + 2 = 3 (left: 3 4 12)\n3 * 4 = 12 (left: 12 12)",
                "12 - 4 = 8 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "",
                "12 - 4 = 8 (left: 1 2 8)"
            ]
        },
        "step_4": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n8 / 3 = 2.67 (left: 2.67)",
                "1 + 2 = 3 (left: 3 4 12)\n3 * 4 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "12 - 4 = 8 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n1 + 10 = 11",
                "12 - 2 = 10 (left: 1 4 10)",
                "12 - 4 = 8 (left: 1 2 8)\n1 * 2 = 2 (left: 2 8)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 3.4",
                "2 <- 3.3",
                "3 <- 3.4",
                "4 <- 2.2"
            ],
            "resampled_steps": [
                "12 - 4 = 8 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "12 - 4 = 8 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "1 + 2 = 3 (left: 3 4 12)\n3 * 4 = 12 (left: 12 12)",
                "12 - 4 = 8 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "12 - 4 = 8 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)"
            ]
        },
        "step_5": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "12 - 4 = 8 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "1 + 2 = 3 (left: 3 4 12)\n3 * 4 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)",
                "12 - 4 = 8 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n1 / 6 = 0.1667 (left: 0.1667)",
                "12 - 4 = 8 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n1 + 10 = 11 (left: 11)"
            ],
            "values": [
                0.002,
                0.001,
                0.001,
                0.003,
                0.001
            ],
            "resampled": [
                "0 <- 3.4",
                "1 <- 2.2",
                "2 <- 2.2",
                "3 <- 1.1",
                "4 <- 3.3"
            ],
            "resampled_steps": [
                "12 - 4 = 8 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "12 - 4 = 8 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "12 - 4 = 8 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "12 - 4 = 8 (left: 1 2 8)",
                "1 + 2 = 3 (left: 3 4 12)\n3 * 4 = 12 (left: 12 12)"
            ]
        },
        "step_6": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "12 - 4 = 8 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\nPossible next steps:",
                "12 - 4 = 8 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "12 - 4 = 8 (left: 1 2 8)\n1 * 2 = 2 (left: 2 8)",
                "1 + 2 = 3 (left: 3 4 12)\n3 * 4 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)"
            ],
            "values": [
                0.002,
                0.003,
                0.0,
                1.001,
                0.003
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 1.0",
                "2 <- 2.4",
                "3 <- 3.2",
                "4 <- 2.2"
            ],
            "resampled_steps": [
                "12 - 4 = 8 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "12 - 2 = 10 (left: 1 4 10)",
                "12 - 2 = 10 (left: 1 4 10)\n10 - 4 = 6 (left: 1 6)",
                "12 - 4 = 8 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "12 - 4 = 8 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)"
            ]
        },
        "step_7": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n10 / 5 = 2 (left: 2 10)",
                "12 - 2 = 10 (left: 1 4 10)\n1 * 4 = 4 (left: 4 10)",
                "12 - 2 = 10 (left: 1 4 10)\n10 - 4 = 6 (left: 1 6)\n6 - 1 = 5 (left: 5)",
                "12 - 4 = 8 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\nPossible next steps:",
                "12 - 4 = 8 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9)"
            ],
            "values": [
                1.0,
                40.0,
                0.002,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 3.4",
                "2 <- 7.1",
                "3 <- 2.4",
                "4 <- 7.1"
            ],
            "resampled_steps": [
                "12 - 4 = 8 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "12 - 4 = 8 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "12 - 2 = 10 (left: 1 4 10)\n1 * 4 = 4 (left: 4 10)",
                "12 - 2 = 10 (left: 1 4 10)\n10 - 4 = 6 (left: 1 6)",
                "12 - 2 = 10 (left: 1 4 10)\n1 * 4 = 4 (left: 4 10)"
            ]
        },
        "step_8": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n5 * 15 = 75 (left: 10 75)",
                "12 - 4 = 8 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "12 - 2 = 10 (left: 1 4 10)\n1 * 4 = 4 (left: 4 10)\n10 / 4 = 2.5 (left: 2.5)",
                "12 - 2 = 10 (left: 1 4 10)\n10 - 4 = 6 (left: 1 6)\n1 + 6 = 7",
                "12 - 2 = 10 (left: 1 4 10)\n1 * 4 = 4 (left: 4 10)\n4 + 10 = 14 (left: 14)"
            ],
            "values": [
                0.003,
                0.001,
                0.0,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- 2.2",
                "2 <- 2.4",
                "3 <- 3.4",
                "4 <- 1.2"
            ],
            "resampled_steps": [
                "12 - 2 = 10 (left: 1 4 10)\n10 - 4 = 6 (left: 1 6)",
                "12 - 4 = 8 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "12 - 2 = 10 (left: 1 4 10)\n10 - 4 = 6 (left: 1 6)",
                "12 - 4 = 8 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "12 - 4 = 8 (left: 1 2 8)"
            ]
        },
        "step_9": {
            "steps": [
                "12 - 2 = 10 (left: 1 4 10)\n10 - 4 = 6 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "12 - 4 = 8 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n1 + 10 = 11 (left: 11)",
                "12 - 2 = 10 (left: 1 4 10)\n10 - 4 = 6 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "12 - 4 = 8 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "12 - 4 = 8 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)"
            ],
            "values": [
                0.003,
                0.002,
                0.002,
                0.0,
                60.0
            ],
            "resampled": [
                "0 <- 3.4",
                "1 <- 3.4",
                "2 <- 2.4",
                "3 <- 3.2",
                "4 <- 2.2"
            ],
            "resampled_steps": [
                "12 - 4 = 8 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "12 - 4 = 8 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "12 - 2 = 10 (left: 1 4 10)\n10 - 4 = 6 (left: 1 6)",
                "12 - 4 = 8 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)",
                "12 - 4 = 8 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)"
            ]
        },
        "step_10": {
            "steps": [
                "12 - 4 = 8 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n6 - 1 = 5 (left: 5)",
                "12 - 4 = 8 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "12 - 2 = 10 (left: 1 4 10)\n10 - 4 = 6 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "12 - 4 = 8 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)",
                "12 - 4 = 8 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n1 + 10 = 11 (left: 11)"
            ],
            "values": [
                0.003,
                0.0,
                0.002,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.6087290000000001
    },
    "26": {
        "input": "1 1 3 6",
        "step_1": {
            "steps": [
                "6 - 3 = 3 (left: 1 3 3)",
                "6 / 1 = 6 (left: 1 3 6)",
                "5 / 4 = 1.25 (left: 1.25 7 2)",
                "3 + 1 = 4 (left: 1 4 6)",
                "1 + 3 = 4 (left: 1 4 6)"
            ],
            "values": [
                1.002,
                21.0,
                3.0,
                60.0,
                41.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.3",
                "2 <- 1.1",
                "3 <- 1.4",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "",
                "3 + 1 = 4 (left: 1 4 6)",
                "6 / 1 = 6 (left: 1 3 6)",
                "1 + 3 = 4 (left: 1 4 6)",
                "3 + 1 = 4 (left: 1 4 6)"
            ]
        },
        "step_2": {
            "steps": [
                "1 + 1 = 2 (left: 2 3 6)",
                "3 + 1 = 4 (left: 1 4 6)\n6 / 4 = 1.5 (left: 1 1.5)",
                "6 / 1 = 6 (left: 1 3 6)\n5 + 2 = 7 (left: 7 10)",
                "1 + 3 = 4 (left: 1 4 6)\n4 - 6 = -2 (left: 1 -2)",
                "3 + 1 = 4 (left: 1 4 6)\n6 / 4 = 1.5 (left: 1.5)"
            ],
            "values": [
                41.0,
                0.003,
                1.002,
                1.001,
                0.0
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- INIT",
                "2 <- 1.3",
                "3 <- 1.3",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 3 6)",
                "",
                "3 + 1 = 4 (left: 1 4 6)",
                "3 + 1 = 4 (left: 1 4 6)",
                "6 / 1 = 6 (left: 1 3 6)"
            ]
        },
        "step_3": {
            "steps": [
                "1 + 1 = 2 (left: 2 3 6)\nInput: 5 7 9",
                "1 * 1 = 1 (left: 1 3 6)",
                "3 + 1 = 4 (left: 1 4 6)\nPossible next steps:",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "6 / 1 = 6 (left: 1 3 6)\n15 - 10 = 5 (left: 5 5)"
            ],
            "values": [
                0.003,
                3.0,
                0.003,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- INIT",
                "2 <- 1.3",
                "3 <- 2.0",
                "4 <- 3.3"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 3 6)",
                "",
                "3 + 1 = 4 (left: 1 4 6)",
                "1 + 1 = 2 (left: 2 3 6)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)"
            ]
        },
        "step_4": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 6)\nInput: 7 2 12",
                "6 - 3 = 3 (left: 1 3 6)",
                "3 + 1 = 4 (left: 1 4 6)\n1 + 4 = 5 (left: 5 6)",
                "1 + 1 = 2 (left: 2 3 6)\n3 * 2 = 6 (left: 6 6)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 - 24 = 0 (left: 0)"
            ],
            "values": [
                0.003,
                21.001,
                1.001,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1.4",
                "1 <- 3.3",
                "2 <- 3.3",
                "3 <- 3.3",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "1 + 3 = 4 (left: 1 4 6)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "6 / 1 = 6 (left: 1 3 6)"
            ]
        },
        "step_5": {
            "steps": [
                "1 + 3 = 4 (left: 1 4 6)\n12 - 6 = 6 (left: 6 6)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n1 * 24 = 24 (left: 24)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)",
                "6 / 1 = 6 (left: 1 3 6)\n3 * 1 = 3 (left: 3 6)"
            ],
            "values": [
                60.0,
                40.0,
                60.0,
                40.001,
                21.0
            ],
            "resampled": [
                "0 <- 3.3",
                "1 <- 5.3",
                "2 <- 5.2",
                "3 <- 5.0",
                "4 <- 5.3"
            ],
            "resampled_steps": [
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "1 + 3 = 4 (left: 1 4 6)\n12 - 6 = 6 (left: 6 6)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)"
            ]
        },
        "step_6": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 + 1 = 25 (left: 25)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)\n23 * 2 = 46 (left: 2)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 + 1) * 6 = 24",
                "1 + 3 = 4 (left: 1 4 6)\n12 - 6 = 6 (left: 6 6)\n6 + 6 = 12 (left: 12)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)\n23 / 8 = 2.875 (left: 8)"
            ],
            "values": [
                20.002,
                0.003,
                60.0,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 5.4",
                "1 <- 6.2",
                "2 <- 6.2",
                "3 <- 6.0",
                "4 <- 2.0"
            ],
            "resampled_steps": [
                "6 / 1 = 6 (left: 1 3 6)\n3 * 1 = 3 (left: 3 6)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 + 1) * 6 = 24",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 + 1) * 6 = 24",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 + 1 = 25 (left: 25)",
                "1 + 1 = 2 (left: 2 3 6)"
            ]
        },
        "step_7": {
            "steps": [
                "6 / 1 = 6 (left: 1 3 6)\n3 * 1 = 3 (left: 3 6)\n6 - 3 = 3 (left: 3)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 + 1) * 6 = 24\nInput: 3 3 5 7\nSteps:\n3 + 7 = 10 (left: 3 5 10)\n5 * 3 = 15 (left: 10 15)\n10 - 15 = -5 (left: -5)\n-5 * -5 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: ((3 + 7) * 3) - 1 = 24",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 + 1) * 6 = 24\nInput: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n8 * 3 = 24 (left: 24)\nAnswer: (2 * 6) + (12 - 4) = 24",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 + 1 = 25 (left: 25)\n25 + 1 = 26",
                "1 + 1 = 2 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)"
            ],
            "values": [
                0.002,
                60.0,
                60.0,
                0.003,
                2.0
            ],
            "resampled": [
                "0 <- 7.2",
                "1 <- 7.1",
                "2 <- 5.3",
                "3 <- 4.1",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 + 1) * 6 = 24\nInput: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n8 * 3 = 24 (left: 24)\nAnswer: (2 * 6) + (12 - 4) = 24",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 + 1) * 6 = 24\nInput: 3 3 5 7\nSteps:\n3 + 7 = 10 (left: 3 5 10)\n5 * 3 = 15 (left: 10 15)\n10 - 15 = -5 (left: -5)\n-5 * -5 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: ((3 + 7) * 3) - 1 = 24",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)",
                "6 - 3 = 3 (left: 1 3 6)",
                "3 + 1 = 4 (left: 1 4 6)"
            ]
        },
        "step_8": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 + 1) * 6 = 24\nInput: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n8 * 3 = 24 (left: 24)\nAnswer: (2 * 6) + (12 - 4) = 24\nInput: 7 8 3 5\nSteps:\n7 + 8 = 15 (left: 3 5 15)\n15 - 5 = 10 (left: 3 10)\n3 * 10 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((7 + 8) - 5) * (3 * 10) = 24",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 + 1) * 6 = 24\nInput: 3 3 5 7\nSteps:\n3 + 7 = 10 (left: 3 5 10)\n5 * 3 = 15 (left: 10 15)\n10 - 15 = -5 (left: -5)\n-5 * -5 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: ((3 + 7) * 3) - 1 = 24\nInput: 2 3 4 5\nSteps:\n4 * 5 = 20 (left: 2 3 20)\n20 - 2 = 18 (left: 3 18)\n18 / 3 = 6 (left: 6 20)\n20 - 6 = 14 (left: 14)\n14 + 10 = 24 (left: 24)\nAnswer: (((4 * 5) - 2) / 3) + 10 = 24",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)\n23 + 2 = 25",
                "6 - 3 = 3 (left: 1 3 6)\n27 - 3 = 24 (left: 9 24)",
                "3 + 1 = 4 (left: 1 4 6)\nInput: 2 3 6 9"
            ],
            "values": [
                60.0,
                60.0,
                0.003,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 7.2",
                "1 <- 8.1",
                "2 <- 7.2",
                "3 <- 8.1",
                "4 <- 6.2"
            ],
            "resampled_steps": [
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 + 1) * 6 = 24\nInput: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n8 * 3 = 24 (left: 24)\nAnswer: (2 * 6) + (12 - 4) = 24",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 + 1) * 6 = 24\nInput: 3 3 5 7\nSteps:\n3 + 7 = 10 (left: 3 5 10)\n5 * 3 = 15 (left: 10 15)\n10 - 15 = -5 (left: -5)\n-5 * -5 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: ((3 + 7) * 3) - 1 = 24\nInput: 2 3 4 5\nSteps:\n4 * 5 = 20 (left: 2 3 20)\n20 - 2 = 18 (left: 3 18)\n18 / 3 = 6 (left: 6 20)\n20 - 6 = 14 (left: 14)\n14 + 10 = 24 (left: 24)\nAnswer: (((4 * 5) - 2) / 3) + 10 = 24",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 + 1) * 6 = 24\nInput: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n8 * 3 = 24 (left: 24)\nAnswer: (2 * 6) + (12 - 4) = 24",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 + 1) * 6 = 24\nInput: 3 3 5 7\nSteps:\n3 + 7 = 10 (left: 3 5 10)\n5 * 3 = 15 (left: 10 15)\n10 - 15 = -5 (left: -5)\n-5 * -5 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: ((3 + 7) * 3) - 1 = 24\nInput: 2 3 4 5\nSteps:\n4 * 5 = 20 (left: 2 3 20)\n20 - 2 = 18 (left: 3 18)\n18 / 3 = 6 (left: 6 20)\n20 - 6 = 14 (left: 14)\n14 + 10 = 24 (left: 24)\nAnswer: (((4 * 5) - 2) / 3) + 10 = 24",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 + 1) * 6 = 24"
            ]
        },
        "step_9": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 + 1) * 6 = 24\nInput: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n8 * 3 = 24 (left: 24)\nAnswer: (2 * 6) + (12 - 4) = 24\nInput: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n3 * 6 = 18 (left: 12 18)\n18 - 12 = 6 (left: 6 24)\nAnswer: (5 + 7) * (3 * 6) = 24",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 + 1) * 6 = 24\nInput: 3 3 5 7\nSteps:\n3 + 7 = 10 (left: 3 5 10)\n5 * 3 = 15 (left: 10 15)\n10 - 15 = -5 (left: -5)\n-5 * -5 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: ((3 + 7) * 3) - 1 = 24\nInput: 2 3 4 5\nSteps:\n4 * 5 = 20 (left: 2 3 20)\n20 - 2 = 18 (left: 3 18)\n18 / 3 = 6 (left: 6 20)\n20 - 6 = 14 (left: 14)\n14 + 10 = 24 (left: 24)\nAnswer: (((4 * 5) - 2) / 3) + 10 = 24\nInput: 2 2 3 4\nSteps:\n2 * 4 = 8 (left: 2 3 8)\n3 + 8 = 11 (left: 2 11)\n11 * 2 = 22 (left: 22)\n22 + 2 = 24 (left: 24)\nAnswer: ((2 * 4) + 3) + 2 = 24",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 + 1) * 6 = 24\nInput: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n8 * 3 = 24 (left: 24)\nAnswer: (2 * 6) + (12 - 4) = 24\nInput: 3 5 7 8\nSteps:\n5 + 7 = 12 (left: 3 8 12)\n12 - 8 = 4 (left: 3 4)\n4 * 3 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((5 + 7) - 8) * (3 * 2) = 24",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 + 1) * 6 = 24\nInput: 3 3 5 7\nSteps:\n3 + 7 = 10 (left: 3 5 10)\n5 * 3 = 15 (left: 10 15)\n10 - 15 = -5 (left: -5)\n-5 * -5 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: ((3 + 7) * 3) - 1 = 24\nInput: 2 3 4 5\nSteps:\n4 * 5 = 20 (left: 2 3 20)\n20 - 2 = 18 (left: 3 18)\n18 / 3 = 6 (left: 6 20)\n20 - 6 = 14 (left: 14)\n14 + 10 = 24 (left: 24)\nAnswer: (((4 * 5) - 2) / 3) + 10 = 24\nInput: 1 2 3 4\nSteps:\n3 + 4 = 7 (left: 1 2 7)\n2 * 7 = 14 (left: 1 14)\n14 * 1 = 14 (left: 14)\n14 + 10 = 24 (left: 24)\nAnswer: ((3 + 4) * 2) + 10 = 24",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 + 1) * 6 = 24\nInput: 2 3 4 6\nSteps:\n3 * 4 = 12 (left: 2 6 12)\n6 - 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\n48 / 2 = 24 (left: 24)\nAnswer: ((3 * 4) - 2) * 6 = 24"
            ],
            "values": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 6.2",
                "1 <- 3.3",
                "2 <- 9.2",
                "3 <- 9.0",
                "4 <- 9.0"
            ],
            "resampled_steps": [
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 + 1) * 6 = 24",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 + 1) * 6 = 24\nInput: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n8 * 3 = 24 (left: 24)\nAnswer: (2 * 6) + (12 - 4) = 24\nInput: 3 5 7 8\nSteps:\n5 + 7 = 12 (left: 3 8 12)\n12 - 8 = 4 (left: 3 4)\n4 * 3 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((5 + 7) - 8) * (3 * 2) = 24",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 + 1) * 6 = 24\nInput: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n8 * 3 = 24 (left: 24)\nAnswer: (2 * 6) + (12 - 4) = 24\nInput: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n3 * 6 = 18 (left: 12 18)\n18 - 12 = 6 (left: 6 24)\nAnswer: (5 + 7) * (3 * 6) = 24",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 + 1) * 6 = 24\nInput: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n8 * 3 = 24 (left: 24)\nAnswer: (2 * 6) + (12 - 4) = 24\nInput: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n3 * 6 = 18 (left: 12 18)\n18 - 12 = 6 (left: 6 24)\nAnswer: (5 + 7) * (3 * 6) = 24"
            ]
        },
        "step_10": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 + 1) * 6 = 24\nInput: 2 3 4 6\nSteps:\n2 * 4 = 8 (left: 3 6 8)\n3 + 6 = 9 (left: 8 9)\n8 * 9 = 72 (left: 72)\n72 / 3 = 24 (left: 24)\nAnswer: ((2 * 4) * (3 + 6)) / 3 = 24",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 * 1 = 24 (left: 24)",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 + 1) * 6 = 24\nInput: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n8 * 3 = 24 (left: 24)\nAnswer: (2 * 6) + (12 - 4) = 24\nInput: 3 5 7 8\nSteps:\n5 + 7 = 12 (left: 3 8 12)\n12 - 8 = 4 (left: 3 4)\n4 * 3 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((5 + 7) - 8) * (3 * 2) = 24\nInput: 2 3 5 6\nSteps:\n3 + 5 = 8 (left: 2 6 8)\n8 - 6 = 2 (left: 2 2)\n2 * 2 * 6 = 24 (left: 24)\nAnswer: ((3 + 5) - 6) * 2 * 2 = 24",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 + 1) * 6 = 24\nInput: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n8 * 3 = 24 (left: 24)\nAnswer: (2 * 6) + (12 - 4) = 24\nInput: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n3 * 6 = 18 (left: 12 18)\n18 - 12 = 6 (left: 6 24)\nAnswer: (5 + 7) * (3 * 6) = 24\nInput: 2 2 4 6\nSteps:\n2 * 6 = 12 (left: 2 4 12)\n4 * 2 = 8 (left: 8 12)\n12 - 8 = 4 (left: 4 24)\nAnswer: (2 * 6) - (4 * 2) = 24",
                "3 + 1 = 4 (left: 1 4 6)\n4 * 6 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 + 1) * 6 = 24\nInput: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n12 - 4 = 8 (left: 3 8)\n8 * 3 = 24 (left: 24)\nAnswer: (2 * 6) + (12 - 4) = 24\nInput: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n3 * 6 = 18 (left: 12 18)\n18 - 12 = 6 (left: 6 24)\nAnswer: (5 + 7) * (3 * 6) = 24\nInput: 2 4 5 7\nSteps:\n4 * 7 = 28 (left: 2 5 28)\n28 - 5 = 23 (left: 2 23)\n23 - 2 = 21 (left: 21)\nAnswer: ((4 * 7) - 5) - 2 = 24"
            ],
            "values": [
                60.0,
                60.0,
                40.0,
                60.0,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.637786
    },
    "27": {
        "input": "1 1 3 9",
        "step_1": {
            "steps": [
                "9 - 3 = 6 (left: 1 3 6)",
                "1 + 3 = 4 (left: 4 4 9)",
                "1 * 1 = 1 (left: 1 3 9)",
                "1 + 1 = 2 (left: 2 3 9)",
                "3 + 1 = 4 (left: 1 4 9)"
            ],
            "values": [
                22.0,
                21.001,
                0.003,
                1.002,
                21.001
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 1.0",
                "2 <- 1.4",
                "3 <- 1.1",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "1 + 3 = 4 (left: 4 4 9)",
                "9 - 3 = 6 (left: 1 3 6)",
                "3 + 1 = 4 (left: 1 4 9)",
                "1 + 3 = 4 (left: 4 4 9)",
                "9 - 3 = 6 (left: 1 3 6)"
            ]
        },
        "step_2": {
            "steps": [
                "1 + 3 = 4 (left: 4 4 9)\n9 / 4 = 2.25 (left: 2.25 4)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)",
                "3 + 1 = 4 (left: 1 4 9)\n12 - 6 = 6 (left: 3 9 6)",
                "1 + 3 = 4 (left: 4 4 9)\nInput: 3 5 7",
                "9 - 3 = 6 (left: 1 3 6)\n6 - 3 = 3 (left: 1 3)"
            ],
            "values": [
                1.001,
                20.0,
                3.0,
                0.003,
                20.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.0",
                "2 <- 1.1",
                "3 <- 1.0",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "",
                "9 - 3 = 6 (left: 1 3 6)",
                "1 + 3 = 4 (left: 4 4 9)",
                "9 - 3 = 6 (left: 1 3 6)",
                "1 + 3 = 4 (left: 4 4 9)"
            ]
        },
        "step_3": {
            "steps": [
                "1 + 1 = 2 (left: 2 3 9)",
                "9 - 3 = 6 (left: 1 3 6)\n3 * 6 = 18 (left: 1 18)",
                "1 + 3 = 4 (left: 4 4 9)\nInput: 3 5 7",
                "9 - 3 = 6 (left: 1 3 6)\n12 / 3 = 4 (left: 4)",
                "1 + 3 = 4 (left: 4 4 9)\n4 + 4 = 8 (left: 8 9)"
            ],
            "values": [
                1.002,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 1.4",
                "1 <- 1.0",
                "2 <- 1.4",
                "3 <- 1.1",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "3 + 1 = 4 (left: 1 4 9)",
                "9 - 3 = 6 (left: 1 3 6)",
                "3 + 1 = 4 (left: 1 4 9)",
                "1 + 3 = 4 (left: 4 4 9)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)"
            ]
        },
        "step_4": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 9)\n3 + 7 = 10 (left: 10)",
                "9 - 3 = 6 (left: 1 3 6)\n9 + 4 = 13 (left: 4 13)",
                "3 + 1 = 4 (left: 1 4 9)\n12 / 3 = 4 (left: 6 9 12)",
                "1 + 3 = 4 (left: 4 4 9)\n7 + 3 = 10 (left: 10 5 10)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)"
            ],
            "values": [
                0.002,
                0.003,
                41.0,
                20.001,
                40.001
            ],
            "resampled": [
                "0 <- 4.4",
                "1 <- 4.2",
                "2 <- 4.2",
                "3 <- 2.1",
                "4 <- 1.4"
            ],
            "resampled_steps": [
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)",
                "3 + 1 = 4 (left: 1 4 9)\n12 / 3 = 4 (left: 6 9 12)",
                "3 + 1 = 4 (left: 1 4 9)\n12 / 3 = 4 (left: 6 9 12)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)",
                "3 + 1 = 4 (left: 1 4 9)"
            ]
        },
        "step_5": {
            "steps": [
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n4 ^ 4 = 256 (left: 4 256)",
                "3 + 1 = 4 (left: 1 4 9)\n12 / 3 = 4 (left: 6 9 12)\n6 + 9 = 15 (left: 15 12)",
                "3 + 1 = 4 (left: 1 4 9)\n12 / 3 = 4 (left: 6 9 12)\n12 + 6 = 18 (left: 9 18)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n20 - 5 = 15 (left: 15 20)",
                "3 + 1 = 4 (left: 1 4 9)\n1 + 4 = 5 (left: 5 9)"
            ],
            "values": [
                60.0,
                0.002,
                0.003,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 4.4",
                "1 <- 5.0",
                "2 <- 5.0",
                "3 <- 4.4",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n4 ^ 4 = 256 (left: 4 256)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n4 ^ 4 = 256 (left: 4 256)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)"
            ]
        },
        "step_6": {
            "steps": [
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n27 - 3 = 24 (left: 3 24)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n4 ^ 4 = 256 (left: 4 256)\n256 - 4 = 252 (left: 252)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n4 ^ 4 = 256 (left: 4 256)\n256 / 4 = 64 (left: 64)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n3 + 3 = 6 (left: 6 27)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n27 - 9 = 18 (left: 3 18)"
            ],
            "values": [
                40.001,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 5.0",
                "2 <- 4.4",
                "3 <- 4.4",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "3 + 1 = 4 (left: 1 4 9)\n12 / 3 = 4 (left: 6 9 12)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n4 ^ 4 = 256 (left: 4 256)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)",
                "1 + 3 = 4 (left: 4 4 9)"
            ]
        },
        "step_7": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 9)\n12 / 3 = 4 (left: 6 9 12)\n6 * 9 = 54 (left: 54 12)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n4 ^ 4 = 256 (left: 4 256)\n4 ^ 256 = 115792089237316195423570985008687907853269984665640564039457584007913129639936 (left: 115792089237316195423570985008687907853269984665640564039457584007913129639936)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n27 / 3 = 9 (left: 3 9)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)",
                "1 + 3 = 4 (left: 4 4 9)\n3 * 5 = 15 (left: 15 7)"
            ],
            "values": [
                0.003,
                0.002,
                0.002,
                20.002,
                1.002
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 6.0",
                "2 <- 1.0",
                "3 <- 5.0",
                "4 <- 4.2"
            ],
            "resampled_steps": [
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n27 - 3 = 24 (left: 3 24)",
                "9 - 3 = 6 (left: 1 3 6)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n4 ^ 4 = 256 (left: 4 256)",
                "3 + 1 = 4 (left: 1 4 9)\n12 / 3 = 4 (left: 6 9 12)"
            ]
        },
        "step_8": {
            "steps": [
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n27 / 3 = 9 (left: 9 27)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n27 - 3 = 24 (left: 3 24)\n24 - 3 = 21 (left: 21)",
                "9 - 3 = 6 (left: 1 3 6)\n3 * 1 = 3 (left: 3 6)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n4 ^ 4 = 256 (left: 4 256)\n256 / 4 = 64 (left: 64 256)",
                "3 + 1 = 4 (left: 1 4 9)\n12 / 3 = 4 (left: 6 9 12)\n9 / 6 = 1.5 (left: 1.5 12)"
            ],
            "values": [
                21.001,
                0.002,
                2.0,
                41.0,
                0.003
            ],
            "resampled": [
                "0 <- 8.3",
                "1 <- 8.3",
                "2 <- 6.0",
                "3 <- 7.3",
                "4 <- 4.4"
            ],
            "resampled_steps": [
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n4 ^ 4 = 256 (left: 4 256)\n256 / 4 = 64 (left: 64 256)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n4 ^ 4 = 256 (left: 4 256)\n256 / 4 = 64 (left: 64 256)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n27 - 3 = 24 (left: 3 24)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)"
            ]
        },
        "step_9": {
            "steps": [
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n4 ^ 4 = 256 (left: 4 256)\n256 / 4 = 64 (left: 64 256)\n256 - 64 = 192 (left: 192)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n4 ^ 4 = 256 (left: 4 256)\n256 / 4 = 64 (left: 64 256)\n64 + 256 = 320 (left: 320)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n27 - 3 = 24 (left: 3 24)\n15 - 10 = 5 (left: 5 15)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n3 * 3 = 9 (left: 9 27)\n10 + 5 = 15 (left: 15 15)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n27 / 3 = 9 (left: 3 9)"
            ],
            "values": [
                0.002,
                0.001,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 8.3",
                "1 <- 6.0",
                "2 <- 5.0",
                "3 <- 6.0",
                "4 <- 5.0"
            ],
            "resampled_steps": [
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n4 ^ 4 = 256 (left: 4 256)\n256 / 4 = 64 (left: 64 256)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n27 - 3 = 24 (left: 3 24)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n4 ^ 4 = 256 (left: 4 256)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n27 - 3 = 24 (left: 3 24)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n4 ^ 4 = 256 (left: 4 256)"
            ]
        },
        "step_10": {
            "steps": [
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n4 ^ 4 = 256 (left: 4 256)\n256 / 4 = 64 (left: 64 256)\nInput: 10 5 20 100",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n27 - 3 = 24 (left: 3 24)\n3 / 24 = 0.125 (left: 0.125 24)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n4 ^ 4 = 256 (left: 4 256)\n256 / 4 = 64 (left: 64)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n27 - 3 = 24 (left: 3 24)\n24 / 3 = 8 (left: 8)",
                "9 - 3 = 6 (left: 1 3 6)\n2 * 10 = 20 (left: 5 20)\n9 / 3 = 3 (left: 3 3 27)\n4 ^ 4 = 256 (left: 4 256)\n256 / 4 = 64 (left: 64)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.66961
    },
    "28": {
        "input": "7 7 12 12",
        "step_1": {
            "steps": [
                "12 - 7 = 5 (left: 5 12 12)",
                "12 - 7 = 5 (left: 5 12 12)",
                "7 * 7 = 49 (left: 12 49 12)",
                "7 / 7 = 1 (left: 1 12 12)",
                "12 + 7 = 19 (left: 5 12 19)"
            ],
            "values": [
                2.0,
                1.002,
                40.0,
                0.003,
                2.001
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- 1.2",
                "3 <- 1.2",
                "4 <- 1.2"
            ],
            "resampled_steps": [
                "7 * 7 = 49 (left: 12 49 12)",
                "7 * 7 = 49 (left: 12 49 12)",
                "7 * 7 = 49 (left: 12 49 12)",
                "7 * 7 = 49 (left: 12 49 12)",
                "7 * 7 = 49 (left: 12 49 12)"
            ]
        },
        "step_2": {
            "steps": [
                "7 * 7 = 49 (left: 12 49 12)\nPossible next steps:",
                "7 * 7 = 49 (left: 12 49 12)\n12 + 49 = 61 (left: 61 12)",
                "7 * 7 = 49 (left: 12 49 12)\n49 + 12 = 61 (left: 12 61)",
                "7 * 7 = 49 (left: 12 49 12)\n49 + 12 = 61 (left: 61 12)",
                "7 * 7 = 49 (left: 12 49 12)\n37 + 5 = 42 (left: 8 2 42)"
            ],
            "values": [
                0.003,
                0.002,
                0.003,
                0.002,
                2.001
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- INIT",
                "2 <- 2.4",
                "3 <- 1.2",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "7 * 7 = 49 (left: 12 49 12)",
                "",
                "7 * 7 = 49 (left: 12 49 12)\n37 + 5 = 42 (left: 8 2 42)",
                "7 * 7 = 49 (left: 12 49 12)",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "7 * 7 = 49 (left: 12 49 12)\n49 - 12 = 37 (left: 12 37 12)",
                "7 + 7 = 14 (left: 12 14 12)",
                "7 * 7 = 49 (left: 12 49 12)\n37 + 5 = 42 (left: 8 2 42)\n8 / 2 = 4 (left: 4 42)",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)",
                "12 + 7 = 19 (left: 7 12 19)"
            ],
            "values": [
                3.0,
                22.0,
                0.003,
                41.0,
                3.0
            ],
            "resampled": [
                "0 <- 3.3",
                "1 <- 3.1",
                "2 <- 1.2",
                "3 <- 3.3",
                "4 <- 3.1"
            ],
            "resampled_steps": [
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)",
                "7 + 7 = 14 (left: 12 14 12)",
                "7 * 7 = 49 (left: 12 49 12)",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)",
                "7 + 7 = 14 (left: 12 14 12)"
            ]
        },
        "step_4": {
            "steps": [
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)",
                "7 * 7 = 49 (left: 12 49 12)\n1 - 2 = -1 (left: -1 3 4)",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n588 - 12 = 576 (left: 576)",
                "7 + 7 = 14 (left: 12 14 12)\n12 + 14 = 26 (left: 12 26)"
            ],
            "values": [
                60.0,
                60.0,
                2.001,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 4.0",
                "1 <- 4.1",
                "2 <- 3.3",
                "3 <- 4.0",
                "4 <- 4.1"
            ],
            "resampled_steps": [
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)"
            ]
        },
        "step_5": {
            "steps": [
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: (7 * 7) * (12 * 49 / 24) = 24",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n12 * 588 = 7056 (left: 7056)",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: ((7 * 7) * 12) / 12 = 24",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)"
            ],
            "values": [
                60.0,
                60.0,
                0.003,
                60.0,
                0.002
            ],
            "resampled": [
                "0 <- 4.0",
                "1 <- 5.0",
                "2 <- 5.3",
                "3 <- 5.1",
                "4 <- 5.0"
            ],
            "resampled_steps": [
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: (7 * 7) * (12 * 49 / 24) = 24",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: ((7 * 7) * 12) / 12 = 24",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: (7 * 7) * (12 * 49 / 24) = 24"
            ]
        },
        "step_6": {
            "steps": [
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: ((7 * 7) * 12) / 12 = 24",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: (7 * 7) * (12 * 49 / 24) = 24\nInput: 3 3 8 9\n\n3 * 9 = 27 (left: 3 8 27)\n27 - 8 = 19 (left: 3 19)\n19 - 3 = 16 (left: 16)\n16 / 2 = 24 (left: 24)\n\nAnswer: ((3 * 9) - 8) - 3 / 2 = 24",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: ((7 * 7) * 12) / 12 = 24\nInput: 3 3 6 8\nSteps:\n3 + 6 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\n48 / 2 = 24 (left: 24)\nAnswer: ((3 + 6) - 3) * 8 / 2 = 24",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (7 + 7) * (12 - 12) = 24",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: (7 * 7) * (12 * 49 / 24) = 24\nInput: 3 3 5 9\nSteps:\n3 * 9 = 27 (left: 3 5 27)\n5 - 3 = 2 (left: 2 27)\n2 * 27 = 54 (left: 54)\n54 / 2 = 27 (left: 27)\nAnswer: ((3 * 9) - (5 - 3)) / 2 = 24"
            ],
            "values": [
                60.0,
                60.0,
                60.0,
                20.002,
                60.0
            ],
            "resampled": [
                "0 <- 6.3",
                "1 <- 4.0",
                "2 <- 4.0",
                "3 <- 6.3",
                "4 <- 6.4"
            ],
            "resampled_steps": [
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (7 + 7) * (12 - 12) = 24",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (7 + 7) * (12 - 12) = 24",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: (7 * 7) * (12 * 49 / 24) = 24\nInput: 3 3 5 9\nSteps:\n3 * 9 = 27 (left: 3 5 27)\n5 - 3 = 2 (left: 2 27)\n2 * 27 = 54 (left: 54)\n54 / 2 = 27 (left: 27)\nAnswer: ((3 * 9) - (5 - 3)) / 2 = 24"
            ]
        },
        "step_7": {
            "steps": [
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (7 + 7) * (12 - 12) = 24\nInput: 3 5 6 7\nSteps:\n3 * 7 = 21 (left: 5 6 21)\n5 + 6 = 11 (left: 11 21)\n11 + 21 = 32 (left: 32)\nAnswer: ((3 * 7) + (5 + 6)) = 24",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: ((7 * 7) * 12) / 12 = 24",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: ((7 * 7) * 12) / 12 = 24",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (7 + 7) * (12 - 12) = 24\nInput: 3 3 8 9\n\n3 * 8 = 24 (left: 3 9 24)\n\n9 - 3 = 6 (left: 6 24)\n\n6 * 24 = 24\n\nAnswer: ((3 * 8) + 3) * 9 = 24",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: (7 * 7) * (12 * 49 / 24) = 24\nInput: 3 3 5 9\nSteps:\n3 * 9 = 27 (left: 3 5 27)\n5 - 3 = 2 (left: 2 27)\n2 * 27 = 54 (left: 54)\n54 / 2 = 27 (left: 27)\nAnswer: ((3 * 9) - (5 - 3)) / 2 = 24\nInput: 4 5 6 7\nSteps:\n4 * 6 = 24 (left: 5 7 24)\n7 - 5 = 2 (left: 2 24)\n2 * 24 = 48 (left: 48)\n48 / 2 = 24 (left: 24)\nAnswer: (4 * 6) / (7 - 5) = 24"
            ],
            "values": [
                60.0,
                60.0,
                60.0,
                40.0,
                40.0
            ],
            "resampled": [
                "0 <- 7.1",
                "1 <- 7.2",
                "2 <- 7.4",
                "3 <- 6.1",
                "4 <- 5.0"
            ],
            "resampled_steps": [
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: ((7 * 7) * 12) / 12 = 24",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: ((7 * 7) * 12) / 12 = 24",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: (7 * 7) * (12 * 49 / 24) = 24\nInput: 3 3 5 9\nSteps:\n3 * 9 = 27 (left: 3 5 27)\n5 - 3 = 2 (left: 2 27)\n2 * 27 = 54 (left: 54)\n54 / 2 = 27 (left: 27)\nAnswer: ((3 * 9) - (5 - 3)) / 2 = 24\nInput: 4 5 6 7\nSteps:\n4 * 6 = 24 (left: 5 7 24)\n7 - 5 = 2 (left: 2 24)\n2 * 24 = 48 (left: 48)\n48 / 2 = 24 (left: 24)\nAnswer: (4 * 6) / (7 - 5) = 24",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: (7 * 7) * (12 * 49 / 24) = 24\nInput: 3 3 8 9\n\n3 * 9 = 27 (left: 3 8 27)\n27 - 8 = 19 (left: 3 19)\n19 - 3 = 16 (left: 16)\n16 / 2 = 24 (left: 24)\n\nAnswer: ((3 * 9) - 8) - 3 / 2 = 24",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: (7 * 7) * (12 * 49 / 24) = 24"
            ]
        },
        "step_8": {
            "steps": [
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: ((7 * 7) * 12) / 12 = 24\nInput: 3 3 4 8\nSteps:\n3 * 3 = 9 (left: 4 8 9)\n9 - 4 = 5 (left: 5 8)\n5 * 8 = 40 (left: 40)\nAnswer: ((3 * 3) - 4) * 8 = 24",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: ((7 * 7) * 12) / 12 = 24\nInput: 3 3 7 8\nSteps:\n3 * 8 = 24 (left: 3 7 24)\n7 - 3 = 4 (left: 4 24)\n4 * 24 = 96 (left: 96)\nAnswer: (3 * 8) - (7 - 3) = 24",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: (7 * 7) * (12 * 49 / 24) = 24\nInput: 3 3 5 9\nSteps:\n3 * 9 = 27 (left: 3 5 27)\n5 - 3 = 2 (left: 2 27)\n2 * 27 = 54 (left: 54)\n54 / 2 = 27 (left: 27)\nAnswer: ((3 * 9) - (5 - 3)) / 2 = 24\nInput: 4 5 6 7\nSteps:\n4 * 6 = 24 (left: 5 7 24)\n7 - 5 = 2 (left: 2 24)\n2 * 24 = 48 (left: 48)\n48 / 2 = 24 (left: 24)\nAnswer: (4 * 6) / (7 - 5) = 24\nInput: 2 3 6 9\nSteps:\n3 * 9 = 27 (left: 2 6 27)\n2 + 6 = 8 (left: 8 27)\n27 - 8 = 19 (left: 19)\n19 + 6 = 25 (left: 25)\n25 - 2 = 23 (left: 23)\n23 + 9 = 32 (left: 32)\n32 - 6 = 26 (left: 26)\n26 - 19 = 7 (left: 7)\n7 * 3 = 21 (left: 21)\n21 + 8 = 29 (left: 29)\n29 + 27 = 56 (left: 56)\n56 - 25 = 31 (left: 31)\n31 - 23 = 8 (left: 8)\n8 + 32 = 40 (left: 40)\n40 - 26 = 14 (left: 14)\n14 / 7 = 2 (left: 2 2)\n2 * 29 = 58 (left: 58)\n58 / 31 = 2 (left: 2)\n2 * 56 = 112 (left: 112)\n112 / 40 = 2 (left: 2)\n2 * 14 = 28 (left: 28)\n28 + 8 = 36 (left: 36)\n36 / 2 = 18 (left: 18)\n18 + 2 = 20 (left: 20)\n20 * 2 = 40 (left: 40)\n40 / 31 = 1.2903 (left: 1.2903)\n1.2903 * 112 = 144 (left: 144)\n144 / 58 = 2.4828 (left: 2.4828)\n2.4828 * 36 = 89.22 (left: 89.22)\n89.22 - 18 = 71.22 (left: 71.22)\n71.22 + 20 = 91.22 (left: 91.22)\n91.22 - 40 = 51.22 (left: 51.22)\n51.22 / 31 = 1.65 (left: 1.65)\n1.65 * 144 = 237.6 (left: 237.6)\n237.6 / 89.22 = 2.6667 (left: 2.6667)\n2.6667 * 71.22 = 189.9 (left: 189.9)\n189.9 + 51.22 = 241.12 (left: 241.12)\n241.12 / 237.6 = 1.013 (left: 1.013)\n1.013 * 2.6667 = 2.7 (left: 2.7)\n2.7 + 189.9 = 192.6 (left: 192.6)\n192.6 - 241.12 = -48.52 (left: -48.52)\n-48.52 + 1.013 = -47.507 (left: -47.507)\n-47.507 * 2.7 = -128.1849 (left: -128.1849)\n-128.1849 + 192.6 = 64.4151 (left: 64.4151)\n64.4151 / -48.52 = -1.3255 (left: -1.3255)\n-1.3255 + 1.013 = -0.3125 (left: -0.3125)\n-0.3125 * 2.7 = -0.8438 (left: -0.8438)\n-0.8438 + 64.4151 = 63.5713 (left: 63.5713)\n63.5713 / -1.3255 = -47.872 (left: -47.872)\n-47.872 + 1.013 = -46.859 (left: -46.859)\n-46.859 * 2.7 = -126.4853 (left: -126.4853)\n-126.4853 + 63.5713 = -62.914 (left: -62.914)\n-62.914 / -1.3255 = 47.4146 (left: 47.4146)\n47.4146 + 1.013 = 48.4276 (left: 48.4276)\n48.4276 * 2.7 = 130.7745 (left: 130.",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: (7 * 7) * (12 * 49 / 24) = 24\nInput: 3 3 8 9\n\n3 * 9 = 27 (left: 3 8 27)\n27 - 8 = 19 (left: 3 19)\n19 - 3 = 16 (left: 16)\n16 / 2 = 24 (left: 24)\n\nAnswer: ((3 * 9) - 8) - 3 / 2 = 24\nInput: 3 3 5 7\n\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 - 3 = 13 (left: 13)\n13 * 2 = 26 (left: 26)\n26 - 2 = 24 (left: 24)\n\nAnswer: (((3 * 7) - 5) - 3) * 2 - 2 = 24",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: (7 * 7) * (12 * 49 / 24) = 24\n\nInput: 3 3 5 5\nSteps:\n3 + 5 = 8 (left: 3 8 5)\n3 * 5 = 15 (left: 8 15)\n15 - 8 = 7 (left: 7)\n7 * 3 = 21 (left: 21)\n21 + 5 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 - 5 = 18 (left: 18)\n18 / 3 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((((3 + 5) * 3) - 8) + 5) - 4 = 24"
            ],
            "values": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 8.4",
                "1 <- 7.0",
                "2 <- 7.1",
                "3 <- 5.0",
                "4 <- 8.4"
            ],
            "resampled_steps": [
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: (7 * 7) * (12 * 49 / 24) = 24\n\nInput: 3 3 5 5\nSteps:\n3 + 5 = 8 (left: 3 8 5)\n3 * 5 = 15 (left: 8 15)\n15 - 8 = 7 (left: 7)\n7 * 3 = 21 (left: 21)\n21 + 5 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 - 5 = 18 (left: 18)\n18 / 3 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((((3 + 5) * 3) - 8) + 5) - 4 = 24",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (7 + 7) * (12 - 12) = 24\nInput: 3 5 6 7\nSteps:\n3 * 7 = 21 (left: 5 6 21)\n5 + 6 = 11 (left: 11 21)\n11 + 21 = 32 (left: 32)\nAnswer: ((3 * 7) + (5 + 6)) = 24",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: ((7 * 7) * 12) / 12 = 24",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: (7 * 7) * (12 * 49 / 24) = 24",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: (7 * 7) * (12 * 49 / 24) = 24\n\nInput: 3 3 5 5\nSteps:\n3 + 5 = 8 (left: 3 8 5)\n3 * 5 = 15 (left: 8 15)\n15 - 8 = 7 (left: 7)\n7 * 3 = 21 (left: 21)\n21 + 5 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 - 5 = 18 (left: 18)\n18 / 3 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((((3 + 5) * 3) - 8) + 5) - 4 = 24"
            ]
        },
        "step_9": {
            "steps": [
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: (7 * 7) * (12 * 49 / 24) = 24\n\nInput: 3 3 5 5\nSteps:\n3 + 5 = 8 (left: 3 8 5)\n3 * 5 = 15 (left: 8 15)\n15 - 8 = 7 (left: 7)\n7 * 3 = 21 (left: 21)\n21 + 5 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 - 5 = 18 (left: 18)\n18 / 3 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((((3 + 5) * 3) - 8) + 5) - 4 = 24\nInput: 2 3 4 6\nSteps:\n2 * 3 = 6 (left: 4 6 6)\n4 + 6 = 10 (left: 10 6)\n10 * 6 = 60 (left: 60)\n60 / 2 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: (((2 * 3) + 4) * 6) / 2 = 24",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (7 + 7) * (12 - 12) = 24\nInput: 3 5 6 7\nSteps:\n3 * 7 = 21 (left: 5 6 21)\n5 + 6 = 11 (left: 11 21)\n11 + 21 = 32 (left: 32)\nAnswer: ((3 * 7) + (5 + 6)) = 24\nInput: 2 3 5 8\nSteps:\n8 - 5 = 3 (left: 2 3 3)\n3 * 3 = 9 (left: 2 9)\n9 * 2 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((8 - 5) * (3 * 3)) + 6 = 24",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: ((7 * 7) * 12) / 12 = 24\nInput: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n5 - 3 = 2 (left: 2 21)\n21 / 2 = 10.5 (left: 10.5)\n10.5 + 3 = 13.5 (left: 13.5)\n13.5 * 3 = 40.5 (left: 40.5)\n40.5 - 16.5 = 24 (left: 24)\nAnswer: ((3 * 7) / 2) + (3 * 3) - 16.5 = 24",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: (7 * 7) * (12 * 49 / 24) = 24\nInput: 3 3 8 8\nSteps:\n3 * 8 = 24 (left: 3 8 24)\n3 * 8 = 24 (left: 24)\nAnswer: (3 * 8) * (3 * 8) = 24",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: (7 * 7) * (12 * 49 / 24) = 24\n\nInput: 3 3 5 5\nSteps:\n3 + 5 = 8 (left: 3 8 5)\n3 * 5 = 15 (left: 8 15)\n15 - 8 = 7 (left: 7)\n7 * 3 = 21 (left: 21)\n21 + 5 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 - 5 = 18 (left: 18)\n18 / 3 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((((3 + 5) * 3) - 8) + 5) - 4 = 24\nInput: 1 2 3 4\nSteps:\n1 * 2 = 2 (left: 3 4 2)\n2 + 3 = 5 (left: 5 4)\n5 * 4 = 20 (left: 20)\n20 + 1 = 21 (left: 21)\n21 + 4 = 25 (left: 25)\n25 - 3 = 22 (left: 22)\n22 - 2 = 20 (left: 20)\n20 * 4 = 80 (left: 80)\n80 / 4 = 20 (left: 20)\nAnswer: (((1 * 2) + 3) * 4) / 4 = 20"
            ],
            "values": [
                60.0,
                60.0,
                60.0,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 8.2",
                "1 <- 5.0",
                "2 <- 1.2",
                "3 <- 8.0",
                "4 <- 4.1"
            ],
            "resampled_steps": [
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: (7 * 7) * (12 * 49 / 24) = 24\nInput: 3 3 5 9\nSteps:\n3 * 9 = 27 (left: 3 5 27)\n5 - 3 = 2 (left: 2 27)\n2 * 27 = 54 (left: 54)\n54 / 2 = 27 (left: 27)\nAnswer: ((3 * 9) - (5 - 3)) / 2 = 24\nInput: 4 5 6 7\nSteps:\n4 * 6 = 24 (left: 5 7 24)\n7 - 5 = 2 (left: 2 24)\n2 * 24 = 48 (left: 48)\n48 / 2 = 24 (left: 24)\nAnswer: (4 * 6) / (7 - 5) = 24\nInput: 2 3 6 9\nSteps:\n3 * 9 = 27 (left: 2 6 27)\n2 + 6 = 8 (left: 8 27)\n27 - 8 = 19 (left: 19)\n19 + 6 = 25 (left: 25)\n25 - 2 = 23 (left: 23)\n23 + 9 = 32 (left: 32)\n32 - 6 = 26 (left: 26)\n26 - 19 = 7 (left: 7)\n7 * 3 = 21 (left: 21)\n21 + 8 = 29 (left: 29)\n29 + 27 = 56 (left: 56)\n56 - 25 = 31 (left: 31)\n31 - 23 = 8 (left: 8)\n8 + 32 = 40 (left: 40)\n40 - 26 = 14 (left: 14)\n14 / 7 = 2 (left: 2 2)\n2 * 29 = 58 (left: 58)\n58 / 31 = 2 (left: 2)\n2 * 56 = 112 (left: 112)\n112 / 40 = 2 (left: 2)\n2 * 14 = 28 (left: 28)\n28 + 8 = 36 (left: 36)\n36 / 2 = 18 (left: 18)\n18 + 2 = 20 (left: 20)\n20 * 2 = 40 (left: 40)\n40 / 31 = 1.2903 (left: 1.2903)\n1.2903 * 112 = 144 (left: 144)\n144 / 58 = 2.4828 (left: 2.4828)\n2.4828 * 36 = 89.22 (left: 89.22)\n89.22 - 18 = 71.22 (left: 71.22)\n71.22 + 20 = 91.22 (left: 91.22)\n91.22 - 40 = 51.22 (left: 51.22)\n51.22 / 31 = 1.65 (left: 1.65)\n1.65 * 144 = 237.6 (left: 237.6)\n237.6 / 89.22 = 2.6667 (left: 2.6667)\n2.6667 * 71.22 = 189.9 (left: 189.9)\n189.9 + 51.22 = 241.12 (left: 241.12)\n241.12 / 237.6 = 1.013 (left: 1.013)\n1.013 * 2.6667 = 2.7 (left: 2.7)\n2.7 + 189.9 = 192.6 (left: 192.6)\n192.6 - 241.12 = -48.52 (left: -48.52)\n-48.52 + 1.013 = -47.507 (left: -47.507)\n-47.507 * 2.7 = -128.1849 (left: -128.1849)\n-128.1849 + 192.6 = 64.4151 (left: 64.4151)\n64.4151 / -48.52 = -1.3255 (left: -1.3255)\n-1.3255 + 1.013 = -0.3125 (left: -0.3125)\n-0.3125 * 2.7 = -0.8438 (left: -0.8438)\n-0.8438 + 64.4151 = 63.5713 (left: 63.5713)\n63.5713 / -1.3255 = -47.872 (left: -47.872)\n-47.872 + 1.013 = -46.859 (left: -46.859)\n-46.859 * 2.7 = -126.4853 (left: -126.4853)\n-126.4853 + 63.5713 = -62.914 (left: -62.914)\n-62.914 / -1.3255 = 47.4146 (left: 47.4146)\n47.4146 + 1.013 = 48.4276 (left: 48.4276)\n48.4276 * 2.7 = 130.7745 (left: 130.",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: (7 * 7) * (12 * 49 / 24) = 24",
                "7 * 7 = 49 (left: 12 49 12)",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: ((7 * 7) * 12) / 12 = 24\nInput: 3 3 4 8\nSteps:\n3 * 3 = 9 (left: 4 8 9)\n9 - 4 = 5 (left: 5 8)\n5 * 8 = 40 (left: 40)\nAnswer: ((3 * 3) - 4) * 8 = 24",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)"
            ]
        },
        "step_10": {
            "steps": [
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: (7 * 7) * (12 * 49 / 24) = 24\nInput: 3 3 5 9\nSteps:\n3 * 9 = 27 (left: 3 5 27)\n5 - 3 = 2 (left: 2 27)\n2 * 27 = 54 (left: 54)\n54 / 2 = 27 (left: 27)\nAnswer: ((3 * 9) - (5 - 3)) / 2 = 24\nInput: 4 5 6 7\nSteps:\n4 * 6 = 24 (left: 5 7 24)\n7 - 5 = 2 (left: 2 24)\n2 * 24 = 48 (left: 48)\n48 / 2 = 24 (left: 24)\nAnswer: (4 * 6) / (7 - 5) = 24\nInput: 2 3 6 9\nSteps:\n3 * 9 = 27 (left: 2 6 27)\n2 + 6 = 8 (left: 8 27)\n27 - 8 = 19 (left: 19)\n19 + 6 = 25 (left: 25)\n25 - 2 = 23 (left: 23)\n23 + 9 = 32 (left: 32)\n32 - 6 = 26 (left: 26)\n26 - 19 = 7 (left: 7)\n7 * 3 = 21 (left: 21)\n21 + 8 = 29 (left: 29)\n29 + 27 = 56 (left: 56)\n56 - 25 = 31 (left: 31)\n31 - 23 = 8 (left: 8)\n8 + 32 = 40 (left: 40)\n40 - 26 = 14 (left: 14)\n14 / 7 = 2 (left: 2 2)\n2 * 29 = 58 (left: 58)\n58 / 31 = 2 (left: 2)\n2 * 56 = 112 (left: 112)\n112 / 40 = 2 (left: 2)\n2 * 14 = 28 (left: 28)\n28 + 8 = 36 (left: 36)\n36 / 2 = 18 (left: 18)\n18 + 2 = 20 (left: 20)\n20 * 2 = 40 (left: 40)\n40 / 31 = 1.2903 (left: 1.2903)\n1.2903 * 112 = 144 (left: 144)\n144 / 58 = 2.4828 (left: 2.4828)\n2.4828 * 36 = 89.22 (left: 89.22)\n89.22 - 18 = 71.22 (left: 71.22)\n71.22 + 20 = 91.22 (left: 91.22)\n91.22 - 40 = 51.22 (left: 51.22)\n51.22 / 31 = 1.65 (left: 1.65)\n1.65 * 144 = 237.6 (left: 237.6)\n237.6 / 89.22 = 2.6667 (left: 2.6667)\n2.6667 * 71.22 = 189.9 (left: 189.9)\n189.9 + 51.22 = 241.12 (left: 241.12)\n241.12 / 237.6 = 1.013 (left: 1.013)\n1.013 * 2.6667 = 2.7 (left: 2.7)\n2.7 + 189.9 = 192.6 (left: 192.6)\n192.6 - 241.12 = -48.52 (left: -48.52)\n-48.52 + 1.013 = -47.507 (left: -47.507)\n-47.507 * 2.7 = -128.1849 (left: -128.1849)\n-128.1849 + 192.6 = 64.4151 (left: 64.4151)\n64.4151 / -48.52 = -1.3255 (left: -1.3255)\n-1.3255 + 1.013 = -0.3125 (left: -0.3125)\n-0.3125 * 2.7 = -0.8438 (left: -0.8438)\n-0.8438 + 64.4151 = 63.5713 (left: 63.5713)\n63.5713 / -1.3255 = -47.872 (left: -47.872)\n-47.872 + 1.013 = -46.859 (left: -46.859)\n-46.859 * 2.7 = -126.4853 (left: -126.4853)\n-126.4853 + 63.5713 = -62.914 (left: -62.914)\n-62.914 / -1.3255 = 47.4146 (left: 47.4146)\n47.4146 + 1.013 = 48.4276 (left: 48.4276)\n48.4276 * 2.7 = 130.7745 (left: 130.\n7745)\n130.7745 - 126.4853 = 4.2892 (left: 4.2892)\n4.2892 + 47.4146 = 51.7038 (left: 51.7038)\n51.7038 / 48.4276 = 1.0675 (left: 1.0675)\n1.0675 * 130.7745 = 139.4461 (left: 139.4461)\n139.4461 - 51.7038 = 87.7423 (left: 87.7423)\n87.7423 / 4.2892 = 20.4676 (left: 20.4676)\n20.4676 + 1.0675 = 21.5351 (left: 21.5351)\n21.5351 * 139.4461 = 2999.9994 (left: 2999.9994)\n2999.9994 / 87.7423 = 34.2582 (left: 34.2582)\n34.2582 - 20.4676 = 13.7906 (left: 13.7906)\n13.7906 + 21.5351 = 35.3257 (left: 35.3257)\n35.3257 * 34.2582 = 1210.701 (left: 1210.701)\n1210.701 / 13.7906 = 87.7003 (left: 87.7003)\n87.7003 + 35.3257 = 123.026 (left: 123.026)\n123.026 / 1210.701 = 0.1015 (left: 0.1015)\n0.1015 * 87.7003 = 8.9033 (left: 8.9033)\n8.9033 + 123.026 = 131.9293 (left: 131.9293)\n131.9293 / 35.3257 = 3.7384 (left: 3.7384)\n3.7384 + 0.1015 = 3.8399 (left: 3.8399)\n3.8399 * 8.9033 = 34.2582 (left: 34.2582)\n34.2582 / 131.9293 = 0.2597 (left: 0.2597)\n0.2597 * 3.7384 = 0.9729 (left: 0.9729)\n0.9729 + 3.8399 = 4.8128 (left: 4.8128)\n4.8128 * 34.2582 = 165.0152 (left: 165.0152)\n165.0152 / 131.9293 = 1.2503 (left: 1.2503)\n1.2503 * 0.9729 = 1.2191 (left: 1.2191)\n1.2191 + 4.8128 = 6.0319 (left: 6.0319)\n6.0319 * 165.0152 = 996.0001 (left: 996.0001)\n996.0001 / 131.9293 = 7.5417 (left: 7.5417)\n7.5417 - 1.2503 = 6.2914 (left: 6.2914)\n6.2914 + 1.2191 = 7.5105 (left: 7.5105)\n7.5105 * 6.0319 = 45.3523 (left: 45.3523)\n45.3523 - 996.0001 = -950.6478 (left: -950.6478)\n-950.6478 / 7.5417 = -126.0001 (left: -126.0001)\n-126.0001 + 1.2503 = -124.7498 (left: -124.7498)\n-124.7498 * 6.2914 = -784.9999 (left: -784.9999)\n-784.9999 + 45.3523 = -739.6476 (left: -739.6476)\n-739.6476 / -950.6478 = 0.7774 (left: 0.7774)\n0.7774 + 7.5105 = 8.2879 (left: 8.2879)\n8.2879 * 6.0319 = 50.0001 (left",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: (7 * 7) * (12 * 49 / 24) = 24\nInput: 3 3 6 8\nSteps:\n3 + 8 = 11 (left: 3 6 11)\n6 - 3 = 3 (left: 3 11)\n3 * 11 = 33 (left: 33)\n33 - 9 = 24 (left: 24)\nAnswer: ((3 + 8) - 6) * 11 - 3 = 24",
                "7 * 7 = 49 (left: 12 49 12)\n12 + 49 = 61 (left: 61 12)",
                "7 * 7 = 49 (left: 12 49 12)\n12 * 49 = 588 (left: 12 588)\n576 / 24 = 24 (left: 24)\nAnswer: ((7 * 7) * 12) / 12 = 24\nInput: 3 3 4 8\nSteps:\n3 * 3 = 9 (left: 4 8 9)\n9 - 4 = 5 (left: 5 8)\n5 * 8 = 40 (left: 40)\nAnswer: ((3 * 3) - 4) * 8 = 24\nInput: 2 3 5 9\nSteps:\n2 * 9 = 18 (left: 3 5 18)\n5 - 3 = 2 (left: 2 18)\n2 * 18 = 36 (left: 36)\n36 / 1.5 = 24 (left: 24)\nAnswer: ((2 * 9) - (5 - 3)) / 1.5 = 24",
                "7 + 7 = 14 (left: 12 14 12)\n14 - 12 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)"
            ],
            "values": [
                60.0,
                60.0,
                1.002,
                60.0,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.70221
    },
    "29": {
        "input": "4 6 7 7",
        "step_1": {
            "steps": [
                "7 + 4 = 11 (left: 6 7 11)",
                "4 + 6 = 10 (left: 7 7 10)",
                "7 - 6 = 1 (left: 1 7 7)",
                "7 - 4 = 3 (left: 3 6 7)",
                "6 / 4 = 1.5 (left: 1.5 7 7)"
            ],
            "values": [
                41.0,
                41.0,
                2.001,
                21.001,
                3.0
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 1.3",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "7 + 4 = 11 (left: 6 7 11)",
                "",
                "",
                "7 - 4 = 3 (left: 3 6 7)",
                "7 + 4 = 11 (left: 6 7 11)"
            ]
        },
        "step_2": {
            "steps": [
                "7 + 4 = 11 (left: 6 7 11)\n7 + 11 = 18 (left: 6)",
                "7 - 6 = 1 (left: 1 7 7)",
                "7 - 4 = 3 (left: 3 7 7)",
                "7 - 4 = 3 (left: 3 6 7)\n6 - 3 = 3 (left: 3 7)",
                "7 + 4 = 11 (left: 6 7 11)\nPossible next steps:"
            ],
            "values": [
                0.003,
                3.0,
                60.0,
                20.0,
                0.003
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 2.2",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "7 + 4 = 11 (left: 6 7 11)",
                "",
                "",
                "7 - 4 = 3 (left: 3 7 7)",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "7 + 4 = 11 (left: 6 7 11)\n8 - 1 = 7 (left: 5 6 7)",
                "6 / 4 = 1.5 (left: 1.5 7 7)",
                "7 - 4 = 3 (left: 3 7 7)",
                "7 - 4 = 3 (left: 3 7 7)\n3 + 7 = 10 (left: 7 10)",
                "4 * 6 = 24 (left: 7 7 24)"
            ],
            "values": [
                3.0,
                2.001,
                60.0,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 2.2",
                "2 <- 1.3",
                "3 <- 2.2",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "7 - 4 = 3 (left: 3 7 7)",
                "7 - 4 = 3 (left: 3 7 7)",
                "7 - 4 = 3 (left: 3 6 7)",
                "7 - 4 = 3 (left: 3 7 7)",
                "7 - 4 = 3 (left: 3 6 7)"
            ]
        },
        "step_4": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7)\n7 / 3 = 2.3333 (left: 2.3333 7)",
                "7 - 4 = 3 (left: 3 7 7)\n7 - 3 = 4 (left: 4 7)",
                "7 - 4 = 3 (left: 3 6 7)\nInput: 4 5 2 3",
                "7 - 4 = 3 (left: 3 7 7)\n3 + 7 = 10 (left: 7 10)",
                "7 - 4 = 3 (left: 3 6 7)\n6 - 3 = 3 (left: 3 7)"
            ],
            "values": [
                2.0,
                0.001,
                0.003,
                1.001,
                0.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 3.2",
                "2 <- 3.2",
                "3 <- 1.1",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "7 - 4 = 3 (left: 3 7 7)",
                "7 - 4 = 3 (left: 3 7 7)",
                "7 - 4 = 3 (left: 3 7 7)",
                "4 + 6 = 10 (left: 7 7 10)",
                "4 + 6 = 10 (left: 7 7 10)"
            ]
        },
        "step_5": {
            "steps": [
                "7 - 4 = 3 (left: 3 7 7)\nPossible next steps:",
                "7 - 4 = 3 (left: 3 7 7)\nPossible next steps:",
                "7 - 4 = 3 (left: 3 7 7)\nInput: 4 5 6 7",
                "4 + 6 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)",
                "4 + 6 = 10 (left: 7 7 10)\n7 * 7 = 49 (left: 10 49)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                60.0,
                0.002
            ],
            "resampled": [
                "0 <- 5.3",
                "1 <- 5.3",
                "2 <- 2.2",
                "3 <- 1.0",
                "4 <- 2.2"
            ],
            "resampled_steps": [
                "4 + 6 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)",
                "4 + 6 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)",
                "7 - 4 = 3 (left: 3 7 7)",
                "7 + 4 = 11 (left: 6 7 11)",
                "7 - 4 = 3 (left: 3 7 7)"
            ]
        },
        "step_6": {
            "steps": [
                "4 + 6 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)\n1 + 10 = 11 (left: 11)",
                "4 + 6 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "7 - 4 = 3 (left: 3 7 7)\n7 / 3 = 2 (left: 2 7)",
                "7 + 4 = 11 (left: 6 7 11)\n11 - 6 = 5 (left: 5 7)",
                "7 - 4 = 3 (left: 3 7 7)\n5 + 9 = 14 (left: 9 14 15)"
            ],
            "values": [
                0.002,
                0.001,
                0.001,
                2.0,
                2.001
            ],
            "resampled": [
                "0 <- 5.3",
                "1 <- 1.0",
                "2 <- 1.3",
                "3 <- 5.3",
                "4 <- 3.2"
            ],
            "resampled_steps": [
                "4 + 6 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)",
                "7 + 4 = 11 (left: 6 7 11)",
                "7 - 4 = 3 (left: 3 6 7)",
                "4 + 6 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)",
                "7 - 4 = 3 (left: 3 7 7)"
            ]
        },
        "step_7": {
            "steps": [
                "4 + 6 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "7 + 4 = 11 (left: 6 7 11)\n3.4 * 43.16666666666667 = 146.33333333333334 (left: 146.33333333333334 73 85)",
                "7 - 4 = 3 (left: 3 6 7)\n6 - 3 = 3 (left: 3 6)",
                "4 + 6 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)\n1 + 10 = 11 (left: 11)",
                "7 - 4 = 3 (left: 3 7 7)\n7 / 3 = 2 (left: 2 7)"
            ],
            "values": [
                0.001,
                1.001,
                1.0,
                0.002,
                0.002
            ],
            "resampled": [
                "0 <- 5.3",
                "1 <- 3.2",
                "2 <- 1.0",
                "3 <- 1.1",
                "4 <- 5.3"
            ],
            "resampled_steps": [
                "4 + 6 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)",
                "7 - 4 = 3 (left: 3 7 7)",
                "7 + 4 = 11 (left: 6 7 11)",
                "4 + 6 = 10 (left: 7 7 10)",
                "4 + 6 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)"
            ]
        },
        "step_8": {
            "steps": [
                "4 + 6 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "7 - 4 = 3 (left: 3 7 7)\n3 + 7 = 10 (left: 7 10)",
                "7 + 4 = 11 (left: 6 7 11)\n11 / 6 = 1.83 (left: 1.83 7)",
                "4 + 6 = 10 (left: 7 7 10)\n10 + 7 = 17 (left: 7 17)",
                "4 + 6 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)\n10 - 1 = 9 (left: 9)"
            ],
            "values": [
                0.003,
                0.003,
                0.002,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 8.3",
                "1 <- 3.2",
                "2 <- 1.1",
                "3 <- 5.3",
                "4 <- 3.2"
            ],
            "resampled_steps": [
                "4 + 6 = 10 (left: 7 7 10)\n10 + 7 = 17 (left: 7 17)",
                "7 - 4 = 3 (left: 3 7 7)",
                "4 + 6 = 10 (left: 7 7 10)",
                "4 + 6 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)",
                "7 - 4 = 3 (left: 3 7 7)"
            ]
        },
        "step_9": {
            "steps": [
                "4 + 6 = 10 (left: 7 7 10)\n10 + 7 = 17 (left: 7 17)\n7 * 17 = 119 (left: 119)",
                "7 - 4 = 3 (left: 3 7 7)\nInput: 4 5",
                "4 + 6 = 10 (left: 7 7 10)\nInput: 3 5 7 9",
                "4 + 6 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "7 - 4 = 3 (left: 3 7 7)\n7 - 3 = 4 (left: 4 7 7)"
            ],
            "values": [
                0.002,
                0.003,
                0.003,
                0.002,
                3.0
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 1.3",
                "2 <- 8.3",
                "3 <- 3.2",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "7 - 4 = 3 (left: 3 6 7)",
                "7 - 4 = 3 (left: 3 6 7)",
                "4 + 6 = 10 (left: 7 7 10)\n10 + 7 = 17 (left: 7 17)",
                "7 - 4 = 3 (left: 3 7 7)",
                "7 + 4 = 11 (left: 6 7 11)"
            ]
        },
        "step_10": {
            "steps": [
                "7 - 4 = 3 (left: 3 6 7)\n6 - 3 = 3 (left: 3 7)",
                "7 - 4 = 3 (left: 3 6 7)\n7 / 3 = 2 (left: 2 6)",
                "4 + 6 = 10 (left: 7 7 10)\n10 + 7 = 17 (left: 7 17)\n17 - 7 = 10 (left: 10)",
                "7 - 4 = 3 (left: 3 7 7)\n7 + 3 = 10 (left: 7 10)",
                "7 + 4 = 11 (left: 6 7 11)\n6 + 7 = 13 (left: 13 11)"
            ],
            "values": [
                2.0,
                1.0,
                0.003,
                0.002,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.735152
    },
    "30": {
        "input": "1 1 2 13",
        "step_1": {
            "steps": [
                "7 / 5 = 1 (left: 1 5 7)",
                "12 - 6 = 6 (left: 3 6 6)",
                "2 * 5 = 10 (left: 3 7 10)",
                "Possible next steps:",
                "2 + 1 = 3 (left: 3 2 13)"
            ],
            "values": [
                2.001,
                22.0,
                0.003,
                0.003,
                1.001
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 1.4",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "12 - 6 = 6 (left: 3 6 6)",
                "2 + 1 = 3 (left: 3 2 13)",
                "",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "12 - 6 = 6 (left: 3 6 6)\n3 / 6 = 0.5 (left: 0.5 6)",
                "2 + 1 = 3 (left: 3 2 13)\nPossible next steps:",
                "13 - 2 = 11 (left: 1 1 11)",
                "13 - 1 = 12 (left: 1 2 12)",
                "13 - 1 = 12 (left: 1 1 12)"
            ],
            "values": [
                2.0,
                0.003,
                0.003,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 2.3",
                "2 <- 2.4",
                "3 <- 2.3",
                "4 <- 2.4"
            ],
            "resampled_steps": [
                "",
                "13 - 1 = 12 (left: 1 2 12)",
                "13 - 1 = 12 (left: 1 1 12)",
                "13 - 1 = 12 (left: 1 2 12)",
                "13 - 1 = 12 (left: 1 1 12)"
            ]
        },
        "step_3": {
            "steps": [
                "2 + 1 = 3 (left: 1 3 13)",
                "13 - 1 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "13 - 1 = 12 (left: 1 1 12)\n12 / 1 = 12 (left: 1 12)",
                "13 - 1 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "13 - 1 = 12 (left: 1 1 12)\n12 + 1 = 13 (left: 1 13)"
            ],
            "values": [
                3.0,
                40.0,
                0.003,
                60.0,
                0.002
            ],
            "resampled": [
                "0 <- 2.3",
                "1 <- 3.1",
                "2 <- 2.4",
                "3 <- 3.3",
                "4 <- 3.1"
            ],
            "resampled_steps": [
                "13 - 1 = 12 (left: 1 2 12)",
                "13 - 1 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "13 - 1 = 12 (left: 1 1 12)",
                "13 - 1 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "13 - 1 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)"
            ]
        },
        "step_4": {
            "steps": [
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)",
                "13 - 1 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "13 - 1 = 12 (left: 1 1 12)\n1 * 1 = 1 (left: 1 12)",
                "13 - 1 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)",
                "13 - 1 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n3 + 9 = 12 (left: 12)"
            ],
            "values": [
                0.003,
                0.001,
                21.0,
                40.0,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 2.4",
                "2 <- 1.1",
                "3 <- 3.3",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "",
                "13 - 1 = 12 (left: 1 1 12)",
                "12 - 6 = 6 (left: 3 6 6)",
                "13 - 1 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "12 - 6 = 6 (left: 3 6 6)"
            ]
        },
        "step_5": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 13)",
                "13 - 1 = 12 (left: 1 1 12)\n12 / 1 = 12 (left: 1 12)",
                "12 - 6 = 6 (left: 3 6 6)\n6 - 3 = 3 (left: 3 6)",
                "13 - 1 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)",
                "12 - 6 = 6 (left: 3 6 6)\n3 * 6 = 18 (left: 6 18)"
            ],
            "values": [
                21.001,
                0.003,
                22.0,
                40.001,
                40.001
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- 4.3",
                "2 <- 3.1",
                "3 <- 3.1",
                "4 <- 5.4"
            ],
            "resampled_steps": [
                "13 - 1 = 12 (left: 1 1 12)",
                "13 - 1 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)",
                "13 - 1 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "13 - 1 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)",
                "12 - 6 = 6 (left: 3 6 6)\n3 * 6 = 18 (left: 6 18)"
            ]
        },
        "step_6": {
            "steps": [
                "13 - 1 = 12 (left: 1 1 12)\nInput: 3 5 10",
                "13 - 1 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)\n23 / 2 = 11.5 (left: 11.5)",
                "13 - 1 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "13 - 1 = 12 (left: 1 2 12)\n12 - 2 = 10 (left: 1 10)\n10 - 10 = 0 (left: 0)",
                "12 - 6 = 6 (left: 3 6 6)\n3 * 6 = 18 (left: 6 18)\n6 * 18 = 108 (left: 108)"
            ],
            "values": [
                0.003,
                0.003,
                0.002,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- 5.3",
                "2 <- 3.3",
                "3 <- 5.0",
                "4 <- 4.2"
            ],
            "resampled_steps": [
                "13 - 1 = 12 (left: 1 1 12)",
                "13 - 1 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)",
                "13 - 1 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "1 + 1 = 2 (left: 2 2 13)",
                "13 - 1 = 12 (left: 1 1 12)\n1 * 1 = 1 (left: 1 12)"
            ]
        },
        "step_7": {
            "steps": [
                "13 - 1 = 12 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)",
                "13 - 1 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)\n25 + 25 = 50",
                "13 - 1 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "1 + 1 = 2 (left: 2 2 13)\n2 / 2 = 1 (left: 1 13)",
                "13 - 1 = 12 (left: 1 1 12)\n1 * 1 = 1 (left: 1 12)\n1 * 12 = 12 (left: 12)"
            ],
            "values": [
                20.0,
                0.003,
                60.0,
                0.001,
                0.002
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- 2.4",
                "2 <- 7.2",
                "3 <- 3.3",
                "4 <- 5.0"
            ],
            "resampled_steps": [
                "13 - 1 = 12 (left: 1 1 12)",
                "13 - 1 = 12 (left: 1 1 12)",
                "13 - 1 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "13 - 1 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "1 + 1 = 2 (left: 2 2 13)"
            ]
        },
        "step_8": {
            "steps": [
                "13 - 1 = 12 (left: 1 1 12)\n10 + 5 = 15 (left: 7 15)",
                "13 - 1 = 12 (left: 1 1 12)\n1 * 1 = 1 (left: 1 12)",
                "13 - 1 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (13 - 1) * (2 * 1) = 24",
                "13 - 1 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)",
                "1 + 1 = 2 (left: 2 2 13)\n2 * 2 = 4 (left: 4 13)"
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.7573775
    },
    "31": {
        "input": "1 1 5 6",
        "step_1": {
            "steps": [
                "1 + 5 = 6 (left: 6 1 6)",
                "1 * 1 = 1 (left: 1 5 6)",
                "6 / 1 = 6 (left: 1 5 6)",
                "3 + 9 = 12 (left: 2 12 1)",
                "12 / 6 = 2 (left: 2 3 9)"
            ],
            "values": [
                22.0,
                2.001,
                0.002,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 1.3",
                "2 <- 1.0",
                "3 <- 1.3",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "3 + 9 = 12 (left: 2 12 1)",
                "3 + 9 = 12 (left: 2 12 1)",
                "1 + 5 = 6 (left: 6 1 6)",
                "3 + 9 = 12 (left: 2 12 1)",
                "1 + 5 = 6 (left: 6 1 6)"
            ]
        },
        "step_2": {
            "steps": [
                "3 + 9 = 12 (left: 2 12 1)\n12 / 2 = 6 (left: 6 1)",
                "3 + 9 = 12 (left: 2 12 1)\n1 + 2 = 3 (left: 3)",
                "1 + 5 = 6 (left: 6 1 6)\n6 * 1 = 6 (left: 6 6)",
                "3 + 9 = 12 (left: 2 12 1)\n8 - 6 = 2 (left: 2 7)",
                "1 + 5 = 6 (left: 6 1 6)\n6 + 1 = 7 (left: 7 6)"
            ],
            "values": [
                40.0,
                0.003,
                20.001,
                0.001,
                1.002
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 1.0",
                "2 <- 2.0",
                "3 <- 1.3",
                "4 <- 2.0"
            ],
            "resampled_steps": [
                "3 + 9 = 12 (left: 2 12 1)",
                "1 + 5 = 6 (left: 6 1 6)",
                "3 + 9 = 12 (left: 2 12 1)\n12 / 2 = 6 (left: 6 1)",
                "3 + 9 = 12 (left: 2 12 1)",
                "3 + 9 = 12 (left: 2 12 1)\n12 / 2 = 6 (left: 6 1)"
            ]
        },
        "step_3": {
            "steps": [
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)",
                "1 + 5 = 6 (left: 6 1 6)\n6 / 1 = 6 (left: 6 6)",
                "3 + 9 = 12 (left: 2 12 1)\n12 / 2 = 6 (left: 6 1)\n6 + 1 = 7 (left: 7)",
                "3 + 9 = 12 (left: 2 12 1)\n12 - 2 = 10 (left: 10 2)",
                "3 + 9 = 12 (left: 2 12 1)\n12 / 2 = 6 (left: 6 1)\n6 + 1 = 7"
            ],
            "values": [
                60.0,
                0.003,
                0.0,
                1.001,
                0.003
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 2.0",
                "2 <- INIT",
                "3 <- 2.0",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "3 + 9 = 12 (left: 2 12 1)",
                "3 + 9 = 12 (left: 2 12 1)\n12 / 2 = 6 (left: 6 1)",
                "",
                "3 + 9 = 12 (left: 2 12 1)\n12 / 2 = 6 (left: 6 1)",
                "1 + 5 = 6 (left: 6 1 6)"
            ]
        },
        "step_4": {
            "steps": [
                "3 + 9 = 12 (left: 2 12 1)\n2 + 12 = 14 (left: 1 14)",
                "3 + 9 = 12 (left: 2 12 1)\n12 / 2 = 6 (left: 6 1)\n6 / 1 = 6 (left: 6)",
                "1 * 1 = 1 (left: 1 5 6)",
                "3 + 9 = 12 (left: 2 12 1)\n12 / 2 = 6 (left: 6 1)\n6 / 1 = 6 (left: 6)",
                "1 + 5 = 6 (left: 6 1 6)\n6 - 1 = 5 (left: 5 6)"
            ],
            "values": [
                21.001,
                0.001,
                21.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 2.2",
                "2 <- 1.1",
                "3 <- 1.0",
                "4 <- 2.0"
            ],
            "resampled_steps": [
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)",
                "1 + 5 = 6 (left: 6 1 6)\n6 * 1 = 6 (left: 6 6)",
                "1 * 1 = 1 (left: 1 5 6)",
                "1 + 5 = 6 (left: 6 1 6)",
                "3 + 9 = 12 (left: 2 12 1)\n12 / 2 = 6 (left: 6 1)"
            ]
        },
        "step_5": {
            "steps": [
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "1 + 5 = 6 (left: 6 1 6)\n6 * 1 = 6 (left: 6 6)\n6 - 6 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 5 6)\n27 - 3 = 24 (left: 9 24)",
                "1 + 5 = 6 (left: 6 1 6)\n10 - 5 = 5 (left: 5 2)",
                "3 + 9 = 12 (left: 2 12 1)\n12 / 2 = 6 (left: 6 1)\n6 / 1 = 6 (left: 6)"
            ],
            "values": [
                60.0,
                0.003,
                0.002,
                20.001,
                0.003
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 3.0",
                "2 <- 4.2",
                "3 <- 5.3",
                "4 <- 2.0"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 5 6)",
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)",
                "1 * 1 = 1 (left: 1 5 6)",
                "1 + 5 = 6 (left: 6 1 6)\n10 - 5 = 5 (left: 5 2)",
                "3 + 9 = 12 (left: 2 12 1)\n12 / 2 = 6 (left: 6 1)"
            ]
        },
        "step_6": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 6)\n1 / 5 = 0.2 (left: 0.2 6)",
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)\n24 + 1 = 25 (left: 25)",
                "1 * 1 = 1 (left: 1 5 6)\n3 + 9 = 12 (left: 12)",
                "1 + 5 = 6 (left: 6 1 6)\n10 - 5 = 5 (left: 5 2)\n5 * 2 = 10 (left: 10)",
                "3 + 9 = 12 (left: 2 12 1)\n12 / 2 = 6 (left: 6 1)\n6 * 1 = 6 (left: 6)"
            ],
            "values": [
                1.002,
                20.001,
                0.003,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 5.0",
                "2 <- 4.2",
                "3 <- 1.3",
                "4 <- 5.0"
            ],
            "resampled_steps": [
                "3 + 9 = 12 (left: 2 12 1)",
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 5 6)",
                "3 + 9 = 12 (left: 2 12 1)",
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)"
            ]
        },
        "step_7": {
            "steps": [
                "3 + 9 = 12 (left: 2 12 1)\n1 + 2 = 3 (left: 3)",
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: ((1 + 1) + 5) * 6 = 24",
                "1 * 1 = 1 (left: 1 5 6)\nInput: 3 9 12",
                "3 + 9 = 12 (left: 2 12 1)\n1 + 2 = 3 (left: 3)",
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: ((1 + 1) * 5) * 6 = 24"
            ],
            "values": [
                0.002,
                60.0,
                0.003,
                0.001,
                60.0
            ],
            "resampled": [
                "0 <- 7.4",
                "1 <- 2.2",
                "2 <- 7.1",
                "3 <- 7.1",
                "4 <- 5.0"
            ],
            "resampled_steps": [
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: ((1 + 1) * 5) * 6 = 24",
                "1 + 5 = 6 (left: 6 1 6)\n6 * 1 = 6 (left: 6 6)",
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: ((1 + 1) + 5) * 6 = 24",
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: ((1 + 1) + 5) * 6 = 24",
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)"
            ]
        },
        "step_8": {
            "steps": [
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: ((1 + 1) * 5) * 6 = 24\nInput: 3 3 3 3\nSteps:\n3 + 3 = 6 (left: 3 3 6)\n3 * 3 = 9 (left: 9 6)\n9 * 6 = 54 (left: 54)\nAnswer: (3 + 3) * (3 * 3) = 24",
                "1 + 5 = 6 (left: 6 1 6)\n6 * 1 = 6 (left: 6 6)\n6 + 6 = 12 (left: 12)",
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: ((1 + 1) + 5) * 6 = 24\nInput: 3 3 8 9\nSteps:\n3 * 8 = 24 (left: 3 9 24)\n9 - 3 = 6 (left: 6 24)\n6 * 24 = 24 (left: 24)\nAnswer: (3 * 8) * (9 - 3) = 24",
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: ((1 + 1) + 5) * 6 = 24\nInput: 3 3 4 6\nSteps:\n3 * 4 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nAnswer: 3 * (3 * (4 + 6)) = 24",
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (1 * (1 + 5)) * 6 = 24"
            ],
            "values": [
                60.0,
                0.003,
                60.0,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 7.1",
                "2 <- 3.0",
                "3 <- 2.0",
                "4 <- 7.4"
            ],
            "resampled_steps": [
                "3 + 9 = 12 (left: 2 12 1)",
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: ((1 + 1) + 5) * 6 = 24",
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)",
                "3 + 9 = 12 (left: 2 12 1)\n12 / 2 = 6 (left: 6 1)",
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: ((1 + 1) * 5) * 6 = 24"
            ]
        },
        "step_9": {
            "steps": [
                "3 + 9 = 12 (left: 2 12 1)\nInput: 3 6 2",
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: ((1 + 1) + 5) * 6 = 24\nInput: 3 3 3 3\nSteps:\n3 * 3 = 9 (left: 3 3 9)\n3 + 9 = 12 (left: 3 12)\n3 * 12 = 36 (left: 36)\n36 / 3 = 12 (left: 12)\nAnswer: ((3 * 3) + 3) * 3 = 24",
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "3 + 9 = 12 (left: 2 12 1)\n12 / 2 = 6 (left: 6 1)\n6 / 1 = 6 (left: 6)",
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: ((1 + 1) * 5) * 6 = 24\nInput: 3 3 6 7\nSteps:\n3 + 7 = 10 (left: 3 6 10)\n6 - 3 = 3 (left: 3 10)\n3 * 10 = 30 (left: 30)\n30 - 6 = 24 (left: 24)\nAnswer: ((3 + 7) * (6 - 3)) - 6 = 24"
            ],
            "values": [
                0.003,
                60.0,
                60.0,
                0.003,
                40.0
            ],
            "resampled": [
                "0 <- 9.1",
                "1 <- 8.4",
                "2 <- 3.0",
                "3 <- 9.2",
                "4 <- 5.0"
            ],
            "resampled_steps": [
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: ((1 + 1) + 5) * 6 = 24\nInput: 3 3 3 3\nSteps:\n3 * 3 = 9 (left: 3 3 9)\n3 + 9 = 12 (left: 3 12)\n3 * 12 = 36 (left: 36)\n36 / 3 = 12 (left: 12)\nAnswer: ((3 * 3) + 3) * 3 = 24",
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (1 * (1 + 5)) * 6 = 24",
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)",
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)"
            ]
        },
        "step_10": {
            "steps": [
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: ((1 + 1) + 5) * 6 = 24\nInput: 3 3 3 3\nSteps:\n3 * 3 = 9 (left: 3 3 9)\n3 + 9 = 12 (left: 3 12)\n3 * 12 = 36 (left: 36)\n36 / 3 = 12 (left: 12)\nAnswer: ((3 * 3) + 3) * 3 = 24\nInput: 2 3 4 6\nSteps:\n4 * 6 = 24 (left: 2 3 24)\n3 - 2 = 1 (left: 1 24)\n1 * 24 = 24 (left: 24)\nAnswer: (2 * 3) * (4 + 6) = 24",
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (1 * (1 + 5)) * 6 = 24\nInput: 2 3 4 6\nSteps:\n2 * 4 = 8 (left: 3 6 8)\n3 + 6 = 9 (left: 8 9)\n8 * 9 = 72 (left: 72)\nAnswer: (2 * 4) * (3 + 6) = 72\nInput: 3 5 5 6\nSteps:\n5 * 5 = 25 (left: 3 6 25)\n3 + 6 = 9 (left: 25 9)\n25 - 9 = 16 (left: 16)\nAnswer: (3 + 5 * 5) - 6 = 16",
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)\n24 - 1 = 23 (left: 23)",
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 + 9) * (1 * 5 + 6) = 24",
                "3 + 9 = 12 (left: 2 12 1)\n2 * 12 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: ((1 + 1) * 5) * 6 = 24"
            ],
            "values": [
                60.0,
                60.0,
                0.002,
                0.003,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.782304
    },
    "32": {
        "input": "1 1 11 13",
        "step_1": {
            "steps": [
                "8 - 6 = 2 (left: 2 4 12)",
                "13 - 11 = 2 (left: 1 2 13)",
                "11 + 1 = 12 (left: 1 12 13)",
                "9 - 3 = 6 (left: 5 6 12)",
                "Input: 3 5 7 10"
            ],
            "values": [
                2.001,
                2.001,
                0.003,
                2.0,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                "",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 13)",
                "Possible next steps:",
                "1 - 1 = 0 (left: 0 11 13)",
                "13 - 1 = 12 (left: 1 11 12)",
                "10 - 5 = 5 (left: 3 5 5)"
            ],
            "values": [
                0.003,
                0.003,
                60.0,
                2.001,
                3.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 2.2",
                "2 <- 2.3",
                "3 <- 2.2",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "1 - 1 = 0 (left: 0 11 13)",
                "1 - 1 = 0 (left: 0 11 13)",
                "13 - 1 = 12 (left: 1 11 12)",
                "1 - 1 = 0 (left: 0 11 13)",
                "13 - 11 = 2 (left: 1 2 13)"
            ]
        },
        "step_3": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 13)\n0 + 11 = 11 (left: 11 13)",
                "1 - 1 = 0 (left: 0 11 13)\n5 - 5 = 0 (left: 0 5)",
                "13 - 1 = 12 (left: 1 11 12)\n11 - 1 = 10 (left: 10 12)",
                "1 - 1 = 0 (left: 0 11 13)\n11 * 13 = 143 (left: 0 143)",
                "13 - 11 = 2 (left: 1 2 13)\nPossible next steps:"
            ],
            "values": [
                60.0,
                20.001,
                1.0,
                0.0,
                0.003
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 3.0",
                "2 <- 2.2",
                "3 <- 1.0",
                "4 <- 2.2"
            ],
            "resampled_steps": [
                "1 - 1 = 0 (left: 0 11 13)\n0 + 11 = 11 (left: 11 13)",
                "1 - 1 = 0 (left: 0 11 13)\n0 + 11 = 11 (left: 11 13)",
                "1 - 1 = 0 (left: 0 11 13)",
                "8 - 6 = 2 (left: 2 4 12)",
                "1 - 1 = 0 (left: 0 11 13)"
            ]
        },
        "step_4": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 13)\n0 + 11 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "1 - 1 = 0 (left: 0 11 13)\n0 + 11 = 11 (left: 11 13)\n11 / 13 = 0.8461538461538461 (left: 0.8461538461538461)",
                "1 - 1 = 0 (left: 0 11 13)\n11 + 13 = 24 (left: 0 24)",
                "8 - 6 = 2 (left: 2 4 12)\n2 * 4 = 8 (left: 8 12)",
                "1 - 1 = 0 (left: 0 11 13)\n11 + 13 = 24 (left: 0 24)"
            ],
            "values": [
                60.0,
                0.001,
                60.0,
                2.001,
                40.001
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 4.0",
                "2 <- 3.0",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "1 - 1 = 0 (left: 0 11 13)\n11 + 13 = 24 (left: 0 24)",
                "1 - 1 = 0 (left: 0 11 13)\n0 + 11 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "1 - 1 = 0 (left: 0 11 13)\n0 + 11 = 11 (left: 11 13)",
                "",
                ""
            ]
        },
        "step_5": {
            "steps": [
                "1 - 1 = 0 (left: 0 11 13)\n11 + 13 = 24 (left: 0 24)\n9 * 3 = 27 (left: 3 27)",
                "1 - 1 = 0 (left: 0 11 13)\n0 + 11 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: (1 - 1 + 11) + 13 = 24",
                "1 - 1 = 0 (left: 0 11 13)\n0 + 11 = 11 (left: 11 13)\n11 / 13 = 0.8461538461538461 (left: 0.8461538461538461)",
                "13 - 11 = 2 (left: 1 2 13)",
                "9 / 3 = 3 (left: 3 5 9)"
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.7978784999999999
    },
    "33": {
        "input": "1 6 6 12",
        "step_1": {
            "steps": [
                "6 / 1 = 6 (left: 6 6 12)",
                "6 * 1 = 6 (left: 6 6 12)",
                "12 - 6 = 6 (left: 1 6 12)",
                "6 / 1 = 6 (left: 6 6 12)",
                "6 / 1 = 6 (left: 6 6 12)"
            ],
            "values": [
                60.0,
                60.0,
                1.002,
                60.0,
                22.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.3",
                "2 <- 1.3",
                "3 <- INIT",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "",
                "6 / 1 = 6 (left: 6 6 12)",
                "6 / 1 = 6 (left: 6 6 12)",
                "",
                "6 / 1 = 6 (left: 6 6 12)"
            ]
        },
        "step_2": {
            "steps": [
                "6 + 1 = 7 (left: 6 6 12)",
                "6 / 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "6 / 1 = 6 (left: 6 6 12)\n12 - 6 = 6 (left: 6 12)",
                "12 / 6 = 2 (left: 1 6 2)",
                "6 / 1 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)"
            ],
            "values": [
                41.0,
                40.001,
                1.002,
                2.001,
                40.0
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- 2.0",
                "2 <- 1.4",
                "3 <- 1.3",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "6 / 1 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)",
                "6 + 1 = 7 (left: 6 6 12)",
                "6 / 1 = 6 (left: 6 6 12)",
                "6 / 1 = 6 (left: 6 6 12)",
                "6 / 1 = 6 (left: 6 6 12)"
            ]
        },
        "step_3": {
            "steps": [
                "6 / 1 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 + 12 = 48 (left: 48)",
                "6 + 1 = 7 (left: 6 6 12)\n72 / 6 = 12 (left: 12 6)",
                "6 / 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "6 / 1 = 6 (left: 6 6 12)\n12 - 6 = 6 (left: 6 6)",
                "6 / 1 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)"
            ],
            "values": [
                0.003,
                0.003,
                60.0,
                0.003,
                21.001
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- INIT",
                "2 <- 2.1",
                "3 <- 1.1",
                "4 <- 2.4"
            ],
            "resampled_steps": [
                "6 / 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "",
                "6 / 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "6 * 1 = 6 (left: 6 6 12)",
                "6 / 1 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)"
            ]
        },
        "step_4": {
            "steps": [
                "6 / 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24) ",
                "12 / 6 = 2 (left: 1 2 6)",
                "6 / 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)",
                "6 * 1 = 6 (left: 6 6 12)\n12 - 6 = 6 (left: 6 12)",
                "6 / 1 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 / 12 = 3 (left: 3)"
            ],
            "values": [
                60.0,
                1.002,
                0.002,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 4.0",
                "2 <- 1.1",
                "3 <- 3.2",
                "4 <- 2.0"
            ],
            "resampled_steps": [
                "6 / 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "6 / 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24) ",
                "6 * 1 = 6 (left: 6 6 12)",
                "6 / 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "6 + 1 = 7 (left: 6 6 12)"
            ]
        },
        "step_5": {
            "steps": [
                "6 / 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "6 / 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24) \nAnswer: (6 / 1) + (6 + 6) = 24",
                "6 * 1 = 6 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)",
                "6 / 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)",
                "6 + 1 = 7 (left: 6 6 12)\nInput: 3 6 6 12"
            ],
            "values": [
                0.003,
                60.0,
                60.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 4.0",
                "1 <- 2.4",
                "2 <- 4.0",
                "3 <- 2.4",
                "4 <- 4.0"
            ],
            "resampled_steps": [
                "6 / 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24) ",
                "6 / 1 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)",
                "6 / 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24) ",
                "6 / 1 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)",
                "6 / 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24) "
            ]
        },
        "step_6": {
            "steps": [
                "6 / 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24) \nAnswer: ((6 / 1) + 6) + 12 = 24",
                "6 / 1 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 - 12 = 24 (left: 24)",
                "6 / 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24) \nAnswer: ((6 / 1) + 6) + 12 = 24",
                "6 / 1 = 6 (left: 6 6 12)\n6 * 6 = 36 (left: 36 12)\n36 - 12 = 24 (left: 24)",
                "6 / 1 = 6 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24) \nAnswer: ((6 / 1) + 6) + 12 = 24"
            ]
        },
        "results": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ],
        "cost": 0.8115094999999999
    },
    "34": {
        "input": "4 5 12 12",
        "step_1": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12)",
                "12 - 4 = 8 (left: 8 5 12)",
                "12 - 5 = 7 (left: 4 7 12)",
                "12 / 4 = 3 (left: 3 12 12)",
                "12 / 5 = 2.4 (left: 4 2.4 12)"
            ],
            "values": [
                60.0,
                2.001,
                2.001,
                60.0,
                3.0
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 1.0",
                "2 <- 1.2",
                "3 <- 1.0",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "12 / 4 = 3 (left: 3 12 12)",
                "12 / 4 = 3 (left: 3 12 12)",
                "12 - 5 = 7 (left: 4 7 12)",
                "12 / 4 = 3 (left: 3 12 12)",
                "12 / 4 = 3 (left: 3 12 12)"
            ]
        },
        "step_2": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12)\n12 * 3 = 36 (left: 12 36)",
                "12 / 4 = 3 (left: 3 12 12)\n3 + 12 = 15 (left: 12 15)",
                "12 - 5 = 7 (left: 4 7 12)\n12 / 4 = 3 (left: 3 7)",
                "12 / 4 = 3 (left: 3 12 12)\n12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 12 12)\n12 - 3 = 9 (left: 9 12)"
            ],
            "values": [
                0.003,
                0.003,
                0.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 1.0",
                "2 <- 1.0",
                "3 <- 1.3",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "12 / 4 = 3 (left: 3 12 12)",
                "12 / 4 = 3 (left: 3 12 12)",
                "12 / 4 = 3 (left: 3 12 12)",
                "12 / 4 = 3 (left: 3 12 12)",
                "12 / 4 = 3 (left: 3 12 12)"
            ]
        },
        "step_3": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12)\n3 * 12 = 36 (left: 12 36)",
                "12 / 4 = 3 (left: 3 12 12)\n12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 3 12 12)\n3 + 12 = 15 (left: 12 15)",
                "12 / 4 = 3 (left: 3 12 12)\n12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 12 12)\n12 - 3 = 9 (left: 9 12)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 1.0",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "12 / 4 = 3 (left: 3 12 12)",
                "12 / 4 = 3 (left: 3 12 12)",
                "",
                "",
                "12 / 4 = 3 (left: 3 12 12)"
            ]
        },
        "step_4": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12)\n3 * 12 = 36 (left: 12 36)",
                "12 / 4 = 3 (left: 3 12 12)\n3 + 12 = 15 (left: 12 15)",
                "12 / 4 = 3 (left: 3 5 12)",
                "4 + 5 = 9 (left: 9 12 12)",
                "12 / 4 = 3 (left: 3 12 12)\n12 / 3 = 4 (left: 4 12)"
            ],
            "values": [
                0.003,
                0.003,
                1.002,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.0",
                "2 <- 1.0",
                "3 <- 1.0",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "12 / 4 = 3 (left: 3 12 12)",
                "12 / 4 = 3 (left: 3 12 12)",
                "12 / 4 = 3 (left: 3 12 12)",
                ""
            ]
        },
        "step_5": {
            "steps": [
                "12 - 5 = 7 (left: 4 7 12)",
                "12 / 4 = 3 (left: 3 12 12)\n12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 12 12)\n12 - 4 = 8 (left: 8 12)",
                "12 / 4 = 3 (left: 3 12 12)\n12 / 3 = 4 (left: 4 12)",
                "12 - 4 = 8 (left: 8 12 12)"
            ],
            "values": [
                3.0,
                0.003,
                0.0,
                0.002,
                1.002
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 1.3",
                "2 <- 1.0",
                "3 <- 1.3",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "12 / 4 = 3 (left: 3 12 12)",
                "12 / 4 = 3 (left: 3 12 12)",
                "12 / 4 = 3 (left: 3 12 12)",
                "12 / 4 = 3 (left: 3 12 12)",
                "12 / 4 = 3 (left: 3 12 12)"
            ]
        },
        "step_6": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12)\n12 - 3 = 9 (left: 9 12 12)",
                "12 / 4 = 3 (left: 3 12 12)\n12 / 12 = 1 (left: 1)",
                "12 / 4 = 3 (left: 3 12 12)\n12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 3 12 12)\n12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 3 12 12)\n12 - 3 = 9 (left: 9 12)"
            ],
            "values": [
                1.002,
                0.003,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 5.0",
                "2 <- INIT",
                "3 <- 1.0",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "12 / 4 = 3 (left: 3 12 12)",
                "12 - 5 = 7 (left: 4 7 12)",
                "",
                "12 / 4 = 3 (left: 3 12 12)",
                "12 / 4 = 3 (left: 3 12 12)"
            ]
        },
        "step_7": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12)\n3 * 12 = 36 (left: 12 12 36)",
                "12 - 5 = 7 (left: 4 7 12)\n7 - 4 = 3 (left: 3 12)",
                "12 - 5 = 7 (left: 4 7 12)",
                "12 / 4 = 3 (left: 3 12 12)\n3 + 12 = 15 (left: 12 15)",
                "12 / 4 = 3 (left: 3 12 12)\n12 - 3 = 9 (left: 9 12)"
            ],
            "values": [
                41.0,
                0.003,
                2.001,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 7.0",
                "1 <- 1.3",
                "2 <- 1.0",
                "3 <- 7.0",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "12 / 4 = 3 (left: 3 12 12)\n3 * 12 = 36 (left: 12 12 36)",
                "12 / 4 = 3 (left: 3 12 12)",
                "12 / 4 = 3 (left: 3 12 12)",
                "12 / 4 = 3 (left: 3 12 12)\n3 * 12 = 36 (left: 12 12 36)",
                "12 / 4 = 3 (left: 3 12 12)"
            ]
        },
        "step_8": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12)\n3 * 12 = 36 (left: 12 12 36)\n20 - 5 = 15 (left: 15 25)",
                "12 / 4 = 3 (left: 3 12 12)\n12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 3 12 12)\n12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 3 12 12)\n3 * 12 = 36 (left: 12 12 36)\n36 - 12 = 24 (left: 12 24)",
                "12 / 4 = 3 (left: 3 12 12)\n12 - 12 = 0 (left: 3 0)"
            ],
            "values": [
                0.003,
                20.002,
                0.003,
                0.003,
                20.002
            ],
            "resampled": [
                "0 <- 8.1",
                "1 <- 8.1",
                "2 <- 7.0",
                "3 <- 1.0",
                "4 <- 8.4"
            ],
            "resampled_steps": [
                "12 / 4 = 3 (left: 3 12 12)\n12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 3 12 12)\n12 / 3 = 4 (left: 4 12)",
                "12 / 4 = 3 (left: 3 12 12)\n3 * 12 = 36 (left: 12 12 36)",
                "12 / 4 = 3 (left: 3 12 12)",
                "12 / 4 = 3 (left: 3 12 12)\n12 - 12 = 0 (left: 3 0)"
            ]
        },
        "step_9": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12)\n12 / 3 = 4 (left: 4 12)\n16 - 24 = -8 (left: -8)",
                "12 / 4 = 3 (left: 3 12 12)\n12 / 3 = 4 (left: 4 12)\n12 / 4 = 3 (left: 4 3)",
                "12 / 4 = 3 (left: 3 12 12)\n3 * 12 = 36 (left: 12 12 36)\n36 / 12 = 3 (left: 3 12)",
                "12 / 4 = 3 (left: 3 12 12)\n12 - 3 = 9 (left: 9 12)",
                "12 / 4 = 3 (left: 3 12 12)\n12 - 12 = 0 (left: 3 0)\n3 + 0 = 3 (left: 3)"
            ],
            "values": [
                0.001,
                2.0,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 7.0",
                "2 <- 1.0",
                "3 <- INIT",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "12 / 4 = 3 (left: 3 12 12)",
                "12 / 4 = 3 (left: 3 12 12)\n3 * 12 = 36 (left: 12 12 36)",
                "12 / 4 = 3 (left: 3 12 12)",
                "",
                "12 / 4 = 3 (left: 3 12 12)"
            ]
        },
        "step_10": {
            "steps": [
                "12 / 4 = 3 (left: 3 12 12)\n12 / 12 = 1 (left: 1 12 12)",
                "12 / 4 = 3 (left: 3 12 12)\n3 * 12 = 36 (left: 12 12 36)\n24 + 24 = 48 (left: 48 48 48)",
                "12 / 4 = 3 (left: 3 12 12)\nInput: 4 9",
                "12 / 4 = 3 (left: 3 5 12)",
                "12 / 4 = 3 (left: 3 12 12)\n12 - 3 = 9 (left: 9 12)"
            ],
            "values": [
                41.0,
                20.002,
                0.003,
                2.001,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.8388665
    },
    "35": {
        "input": "4 6 13 13",
        "step_1": {
            "steps": [
                "4 + 6 = 10 (left: 10 13 13)",
                "13 + 4 = 17 (left: 6 13 17)",
                "4 * 6 = 24 (left: 24 13 13)",
                "13 - 6 = 7 (left: 4 7 13)",
                "7 + 10 = 17 (left: 3 17 15)"
            ],
            "values": [
                0.003,
                1.002,
                0.003,
                21.001,
                3.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.3",
                "2 <- INIT",
                "3 <- 1.4",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "13 - 6 = 7 (left: 4 7 13)",
                "",
                "7 + 10 = 17 (left: 3 17 15)",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "13 / 4 = 3.25 (left: 3.25 13 13)",
                "13 - 6 = 7 (left: 4 7 13)\n6 + 10 = 16 (left: 16 16)",
                "13 / 4 = 3.25 (left: 3.25 13 13)",
                "7 + 10 = 17 (left: 3 17 15)\nInput: 4 6 9 12",
                "4 + 6 = 10 (left: 10 13 13)"
            ],
            "values": [
                1.001,
                1.001,
                2.001,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "13 - 6 = 7 (left: 4 7 13)",
                "",
                "",
                "",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "13 - 6 = 7 (left: 4 7 13)\n9 - 5 = 4 (left: 2 4 12)",
                "1 + 5 = 6 (left: 6 5 7)",
                "13 / 4 = 3.25 (left: 3.25 13 13)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)",
                "6 + 13 = 19 (left: 4 19 13)"
            ],
            "values": [
                1.001,
                3.0,
                2.001,
                22.0,
                40.001
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 3.4",
                "2 <- 3.3",
                "3 <- 3.3",
                "4 <- 3.3"
            ],
            "resampled_steps": [
                "13 - 6 = 7 (left: 4 7 13)",
                "6 + 13 = 19 (left: 4 19 13)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)"
            ]
        },
        "step_4": {
            "steps": [
                "13 - 6 = 7 (left: 4 7 13)\n13 - 4 = 9 (left: 4 9)",
                "6 + 13 = 19 (left: 4 19 13)\n19 / 4 = 4.75 (left: 4.75 13)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)\n4 + 2.16666666667 = 6.16666666667 (left: 6.16666666667 13)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)\n9 + 5 = 14 (left: 2 9 14)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)\n2.16666666667 + 13 = 15.1666666667 (left: 4 15.1666666667)"
            ],
            "values": [
                1.0,
                1.001,
                3.0,
                0.003,
                2.0
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 3.2",
                "2 <- 3.3",
                "3 <- 3.4",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "13 / 4 = 3.25 (left: 3.25 13 13)",
                "13 / 4 = 3.25 (left: 3.25 13 13)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)",
                "6 + 13 = 19 (left: 4 19 13)",
                ""
            ]
        },
        "step_5": {
            "steps": [
                "13 / 4 = 3.25 (left: 3.25 13 13)\n13 + 3.25 = 16.25 (left: 13 16.25)",
                "13 / 4 = 3.25 (left: 3.25 13 13)\n13 - 3.25 = 9.75 (left: 9.75 13)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)\n5 * 6 = 30 (left: 30 12)",
                "6 + 13 = 19 (left: 4 19 13)\n19 / 4 = 4.75 (left: 4.75 13)",
                "4 * 6 = 24 (left: 24 13 13)"
            ],
            "values": [
                0.003,
                0.002,
                0.003,
                3.0,
                0.003
            ],
            "resampled": [
                "0 <- 3.3",
                "1 <- 5.3",
                "2 <- 3.0",
                "3 <- 3.3",
                "4 <- 3.1"
            ],
            "resampled_steps": [
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)",
                "6 + 13 = 19 (left: 4 19 13)\n19 / 4 = 4.75 (left: 4.75 13)",
                "13 - 6 = 7 (left: 4 7 13)\n9 - 5 = 4 (left: 2 4 12)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)",
                "1 + 5 = 6 (left: 6 5 7)"
            ]
        },
        "step_6": {
            "steps": [
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)\n13 / 4 = 3.25 (left: 2.16666666667 3.25)",
                "6 + 13 = 19 (left: 4 19 13)\n19 / 4 = 4.75 (left: 4.75 13)\n13 - 4.75 = 8.25 (left: 8.25)",
                "13 - 6 = 7 (left: 4 7 13)\n9 - 5 = 4 (left: 2 4 12)\n12 + 2 = 14 (left: 4 14)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)\n13 - 2.16666666667 = 10.8333333333 (left: 4 10.8333333333)",
                "1 + 5 = 6 (left: 6 5 7)\n9 - 12 = -3 (left: -3)"
            ],
            "values": [
                2.001,
                0.001,
                1.001,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- 3.4",
                "1 <- 3.3",
                "2 <- 3.3",
                "3 <- 1.3",
                "4 <- 4.2"
            ],
            "resampled_steps": [
                "6 + 13 = 19 (left: 4 19 13)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)",
                "13 - 6 = 7 (left: 4 7 13)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)\n4 + 2.16666666667 = 6.16666666667 (left: 6.16666666667 13)"
            ]
        },
        "step_7": {
            "steps": [
                "6 + 13 = 19 (left: 4 19 13)\n9 / 1 = 9 (left: 7 3 9)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)\n25 - 5 = 20 (left: 5 20)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)\n13 - 2.16666666667 = 10.8333333333 (left: 4 10.8333333333)",
                "13 - 6 = 7 (left: 4 7 13)\n9 + 3 = 12 (left: 5 6 12)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)\n4 + 2.16666666667 = 6.16666666667 (left: 6.16666666667 13)\n6.16666666667 * 13 = 80 (left: 80)"
            ],
            "values": [
                3.0,
                40.0,
                2.001,
                3.0,
                0.003
            ],
            "resampled": [
                "0 <- 3.4",
                "1 <- 3.4",
                "2 <- 3.4",
                "3 <- 7.1",
                "4 <- 7.1"
            ],
            "resampled_steps": [
                "6 + 13 = 19 (left: 4 19 13)",
                "6 + 13 = 19 (left: 4 19 13)",
                "6 + 13 = 19 (left: 4 19 13)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)\n25 - 5 = 20 (left: 5 20)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)\n25 - 5 = 20 (left: 5 20)"
            ]
        },
        "step_8": {
            "steps": [
                "6 + 13 = 19 (left: 4 19 13)\n19 - 4 = 15 (left: 15 13)",
                "6 + 13 = 19 (left: 4 19 13)\n13 - 4 = 9 (left: 9 13)",
                "6 + 13 = 19 (left: 4 19 13)\n4 * 19 = 76 (left: 76 13)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)\n25 - 5 = 20 (left: 5 20)\n5 + 20 = 25 (left: 25)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)\n25 - 5 = 20 (left: 5 20)\n3 + 9 = 12 (left: 12 27)"
            ],
            "values": [
                0.003,
                0.001,
                0.003,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 7.1",
                "1 <- 7.1",
                "2 <- 1.3",
                "3 <- 7.1",
                "4 <- 8.4"
            ],
            "resampled_steps": [
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)\n25 - 5 = 20 (left: 5 20)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)\n25 - 5 = 20 (left: 5 20)",
                "13 - 6 = 7 (left: 4 7 13)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)\n25 - 5 = 20 (left: 5 20)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)\n25 - 5 = 20 (left: 5 20)\n3 + 9 = 12 (left: 12 27)"
            ]
        },
        "step_9": {
            "steps": [
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)\n25 - 5 = 20 (left: 5 20)\n5 + 20 = 25 (left: 25)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)\n25 - 5 = 20 (left: 5 20)\n20 - 5 = 15 (left: 15)",
                "13 - 6 = 7 (left: 4 7 13)\nPossible next steps:",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)\n25 - 5 = 20 (left: 5 20)\n27 / 3 = 9 (left: 9 27)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)\n25 - 5 = 20 (left: 5 20)\n3 + 9 = 12 (left: 12 27)\n12 * 27 = 324 (left: 324)"
            ],
            "values": [
                20.001,
                0.003,
                0.003,
                40.0,
                0.003
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 7.1",
                "2 <- 7.3",
                "3 <- 9.3",
                "4 <- 9.0"
            ],
            "resampled_steps": [
                "13 - 6 = 7 (left: 4 7 13)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)\n25 - 5 = 20 (left: 5 20)",
                "13 - 6 = 7 (left: 4 7 13)\n9 + 3 = 12 (left: 5 6 12)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)\n25 - 5 = 20 (left: 5 20)\n27 / 3 = 9 (left: 9 27)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)\n25 - 5 = 20 (left: 5 20)\n5 + 20 = 25 (left: 25)"
            ]
        },
        "step_10": {
            "steps": [
                "13 - 6 = 7 (left: 4 7 13)\n13 - 4 = 9 (left: 7 9)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)\n25 - 5 = 20 (left: 5 20)\n27 - 9 = 18 (left: 3 18)",
                "13 - 6 = 7 (left: 4 7 13)\n9 + 3 = 12 (left: 5 6 12)\n12 / 6 = 2 (left: 2 12)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)\n25 - 5 = 20 (left: 5 20)\n27 / 3 = 9 (left: 9 27)\n20 * 5 = 100 (left: 100)",
                "13 / 6 = 2.16666666667 (left: 4 2.16666666667 13)\n25 - 5 = 20 (left: 5 20)\n5 + 20 = 25 (left: 25)\nThere are no possible next steps with the input 25."
            ],
            "values": [
                0.003,
                0.003,
                60.0,
                0.002,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.8752265
    },
    "36": {
        "input": "12 12 12 12",
        "step_1": {
            "steps": [
                "12 / 12 = 1 (left: 1 12 12)",
                "12 - 12 = 0 (left: 0 12 12)",
                "12 * 12 = 144 (left: 12 12 144)",
                "12 - 12 = 0 (left: 0 12 12)",
                "12 / 12 = 1 (left: 12 12 1)"
            ],
            "values": [
                20.002,
                60.0,
                0.003,
                60.0,
                21.001
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 1.3",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "12 - 12 = 0 (left: 0 12 12)",
                "",
                "",
                "12 - 12 = 0 (left: 0 12 12)",
                "12 - 12 = 0 (left: 0 12 12)"
            ]
        },
        "step_2": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12)\n12 + 12 = 24 (left: 0 24)",
                "12 + 12 = 24 (left: 12 24 12)",
                "3 - 3 = 0 (left: 0 3 3)",
                "12 - 12 = 0 (left: 0 12 12)\nPossible next steps:",
                "12 - 12 = 0 (left: 0 12 12)\n6 / 3 = 2 (left: 2 9)"
            ],
            "values": [
                60.0,
                40.001,
                22.0,
                0.003,
                1.0
            ],
            "resampled": [
                "0 <- 1.4",
                "1 <- 2.2",
                "2 <- 2.0",
                "3 <- INIT",
                "4 <- 2.0"
            ],
            "resampled_steps": [
                "12 / 12 = 1 (left: 12 12 1)",
                "3 - 3 = 0 (left: 0 3 3)",
                "12 - 12 = 0 (left: 0 12 12)\n12 + 12 = 24 (left: 0 24)",
                "",
                "12 - 12 = 0 (left: 0 12 12)\n12 + 12 = 24 (left: 0 24)"
            ]
        },
        "step_3": {
            "steps": [
                "12 / 12 = 1 (left: 12 12 1)\n12 - 12 = 0 (left: 0 1)",
                "3 - 3 = 0 (left: 0 3 3)\n3 * 3 = 9 (left: 0 3 9)",
                "12 - 12 = 0 (left: 0 12 12)\n12 + 12 = 24 (left: 0 24)\n0 * 24 = 0 (left: 24)",
                "12 - 12 = 0 (left: 0 12 12)",
                "12 - 12 = 0 (left: 0 12 12)\n12 + 12 = 24 (left: 0 24)\n9 + 3 = 12 (left: 12 27)"
            ],
            "values": [
                60.0,
                21.001,
                60.0,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 3.3",
                "2 <- 1.1",
                "3 <- 3.2",
                "4 <- 2.2"
            ],
            "resampled_steps": [
                "12 - 12 = 0 (left: 0 12 12)\n12 + 12 = 24 (left: 0 24)",
                "12 - 12 = 0 (left: 0 12 12)",
                "12 - 12 = 0 (left: 0 12 12)",
                "12 - 12 = 0 (left: 0 12 12)\n12 + 12 = 24 (left: 0 24)\n0 * 24 = 0 (left: 24)",
                "3 - 3 = 0 (left: 0 3 3)"
            ]
        },
        "step_4": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12)\n12 + 12 = 24 (left: 0 24)\n24 / 24 = 1 (left: 1)",
                "12 - 12 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12)\n12 - 12 = 0 (left: 0 0)",
                "12 - 12 = 0 (left: 0 12 12)\n12 + 12 = 24 (left: 0 24)\n0 * 24 = 0 (left: 24)\nAnswer: (12 - 12) + (12 + 12) = 24",
                "3 - 3 = 0 (left: 0 3 3)\n3 / 3 = 1 (left: 1)"
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ],
        "cost": 0.8864989999999999
    },
    "37": {
        "input": "2 11 11 12",
        "step_1": {
            "steps": [
                "12 - 2 = 10 (left: 10 11 12)",
                "12 / 2 = 6 (left: 11 6 12)",
                "11 - 2 = 9 (left: 9 11 12)",
                "Input: 3 7 7 15",
                "12 + 2 = 14 (left: 11 11 14)"
            ],
            "values": [
                0.003,
                1.002,
                2.001,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.1",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                "12 / 2 = 6 (left: 11 6 12)",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "11 - 2 = 9 (left: 9 11 12)",
                "2 + 11 = 13 (left: 11 12 13)",
                "12 / 2 = 6 (left: 11 6 12)\n6 + 12 = 18 (left: 11 18)",
                "12 + 2 = 14 (left: 11 11 14)",
                "11 - 11 = 0 (left: 0 11 12)"
            ],
            "values": [
                1.002,
                40.001,
                0.003,
                0.003,
                0.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 2.1",
                "2 <- 2.1",
                "3 <- 2.1",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "2 + 11 = 13 (left: 11 12 13)",
                "2 + 11 = 13 (left: 11 12 13)",
                "2 + 11 = 13 (left: 11 12 13)",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "12 - 2 = 10 (left: 11 11 10)",
                "2 + 11 = 13 (left: 11 12 13)\n12 / 11 = 1.09 (left: 1.09 13)",
                "2 + 11 = 13 (left: 11 12 13)\n12 / 11 = 1.0909090909090908 (left: 1.0909090909090908 13)",
                "2 + 11 = 13 (left: 11 12 13)\n7 - 5 = 2 (left: 2 9)",
                "12 - 2 = 10 (left: 11 11 10)"
            ],
            "values": [
                0.002,
                1.001,
                2.0,
                0.0,
                0.003
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 3.1",
                "2 <- INIT",
                "3 <- 2.1",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "2 + 11 = 13 (left: 11 12 13)",
                "2 + 11 = 13 (left: 11 12 13)\n12 / 11 = 1.09 (left: 1.09 13)",
                "",
                "2 + 11 = 13 (left: 11 12 13)",
                ""
            ]
        },
        "step_4": {
            "steps": [
                "2 + 11 = 13 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)",
                "2 + 11 = 13 (left: 11 12 13)\n12 / 11 = 1.09 (left: 1.09 13)\n13 / 1.09 = 11.93 (left: 11.93)",
                "12 - 2 = 10 (left: 11 11 10)",
                "2 + 11 = 13 (left: 11 12 13)\n10 - 5 = 5 (left: 5 15 20)",
                "11 - 2 = 9 (left: 9 11 12)"
            ],
            "values": [
                60.0,
                0.003,
                0.003,
                2.001,
                1.002
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 4.0",
                "2 <- 4.4",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "2 + 11 = 13 (left: 11 12 13)",
                "2 + 11 = 13 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)",
                "11 - 2 = 9 (left: 9 11 12)",
                "",
                ""
            ]
        },
        "step_5": {
            "steps": [
                "2 + 11 = 13 (left: 11 12 13)\n9 * 10 = 90",
                "2 + 11 = 13 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "11 - 2 = 9 (left: 9 11 12)\n12 / 9 = 1.33 (left: 1.33 11)",
                "2 * 11 = 22 (left: 11 12 22)",
                "9 / 3 = 3 (left: 3 3 3)"
            ],
            "values": [
                0.003,
                0.003,
                1.002,
                1.002,
                1.002
            ],
            "resampled": [
                "0 <- 4.0",
                "1 <- 4.0",
                "2 <- 1.2",
                "3 <- 4.0",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "2 + 11 = 13 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)",
                "2 + 11 = 13 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)",
                "11 - 2 = 9 (left: 9 11 12)",
                "2 + 11 = 13 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)",
                "2 + 11 = 13 (left: 11 12 13)"
            ]
        },
        "step_6": {
            "steps": [
                "2 + 11 = 13 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "2 + 11 = 13 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "11 - 2 = 9 (left: 9 11 12)\n11 + 9 = 20 (left: 20 12)",
                "2 + 11 = 13 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "2 + 11 = 13 (left: 11 12 13)\n5 - 2 = 3 (left: 10 3)"
            ],
            "values": [
                0.003,
                0.001,
                0.003,
                0.002,
                0.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 2.0",
                "2 <- 4.0",
                "3 <- 4.0",
                "4 <- 4.0"
            ],
            "resampled_steps": [
                "",
                "11 - 2 = 9 (left: 9 11 12)",
                "2 + 11 = 13 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)",
                "2 + 11 = 13 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)",
                "2 + 11 = 13 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)"
            ]
        },
        "step_7": {
            "steps": [
                "2 + 11 = 13 (left: 11 12 13)",
                "11 - 2 = 9 (left: 9 11 12)\n12 - 9 = 3 (left: 9 3)",
                "2 + 11 = 13 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "2 + 11 = 13 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "2 + 11 = 13 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)"
            ],
            "values": [
                40.001,
                0.003,
                0.001,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 7.0",
                "1 <- 2.1",
                "2 <- 2.1",
                "3 <- 7.0",
                "4 <- 7.0"
            ],
            "resampled_steps": [
                "2 + 11 = 13 (left: 11 12 13)",
                "2 + 11 = 13 (left: 11 12 13)",
                "2 + 11 = 13 (left: 11 12 13)",
                "2 + 11 = 13 (left: 11 12 13)",
                "2 + 11 = 13 (left: 11 12 13)"
            ]
        },
        "step_8": {
            "steps": [
                "2 + 11 = 13 (left: 11 12 13)\n12 - 11 = 1 (left: 1 13)",
                "2 + 11 = 13 (left: 11 12 13)\n7 / 4 = 1.75 (left: 11)",
                "2 + 11 = 13 (left: 11 12 13)\n13 / 11 = 1.18 (left: 1.18 12)",
                "2 + 11 = 13 (left: 11 12 13)\n12 / 13 = 0.9230769230769231 (left: 11 0.9230769230769231)",
                "2 + 11 = 13 (left: 11 12 13)\n11 * 12 = 132 (left: 13 132)"
            ],
            "values": [
                0.003,
                0.003,
                1.001,
                2.0,
                20.002
            ],
            "resampled": [
                "0 <- 8.4",
                "1 <- 8.4",
                "2 <- 7.0",
                "3 <- 7.0",
                "4 <- 7.0"
            ],
            "resampled_steps": [
                "2 + 11 = 13 (left: 11 12 13)\n11 * 12 = 132 (left: 13 132)",
                "2 + 11 = 13 (left: 11 12 13)\n11 * 12 = 132 (left: 13 132)",
                "2 + 11 = 13 (left: 11 12 13)",
                "2 + 11 = 13 (left: 11 12 13)",
                "2 + 11 = 13 (left: 11 12 13)"
            ]
        },
        "step_9": {
            "steps": [
                "2 + 11 = 13 (left: 11 12 13)\n11 * 12 = 132 (left: 13 132)\n13 - 132 = -119 (left: -119)",
                "2 + 11 = 13 (left: 11 12 13)\n11 * 12 = 132 (left: 13 132)\n13 * 132 = 1716 (left: 1716)",
                "2 + 11 = 13 (left: 11 12 13)\n10 * 3 = 30 (left: 5 7 30)",
                "2 + 11 = 13 (left: 11 12 13)\n11 * 12 = 132 (left: 13 132)",
                "2 + 11 = 13 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)"
            ],
            "values": [
                0.001,
                0.003,
                3.0,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 8.4",
                "1 <- 9.2",
                "2 <- 9.4",
                "3 <- 8.4",
                "4 <- 8.4"
            ],
            "resampled_steps": [
                "2 + 11 = 13 (left: 11 12 13)\n11 * 12 = 132 (left: 13 132)",
                "2 + 11 = 13 (left: 11 12 13)\n10 * 3 = 30 (left: 5 7 30)",
                "2 + 11 = 13 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)",
                "2 + 11 = 13 (left: 11 12 13)\n11 * 12 = 132 (left: 13 132)",
                "2 + 11 = 13 (left: 11 12 13)\n11 * 12 = 132 (left: 13 132)"
            ]
        },
        "step_10": {
            "steps": [
                "2 + 11 = 13 (left: 11 12 13)\n11 * 12 = 132 (left: 13 132)\n13 * 132 = 1716 (left: 1716)",
                "2 + 11 = 13 (left: 11 12 13)\n10 * 3 = 30 (left: 5 7 30)\n30 / 5 = 6 (left: 7 6)",
                "2 + 11 = 13 (left: 11 12 13)\n13 - 11 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "2 + 11 = 13 (left: 11 12 13)\n11 * 12 = 132 (left: 13 132)\n132 / 13 = 10 (left: 10)",
                "2 + 11 = 13 (left: 11 12 13)\n11 * 12 = 132 (left: 13 132)\n132 - 13 = 119 (left: 119)"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.001,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.9158354999999999
    },
    "38": {
        "input": "4 4 4 6",
        "step_1": {
            "steps": [
                "4 + 4 = 8 (left: 4 6 8)",
                "6 - 4 = 2 (left: 4 2 2)",
                "6 - 4 = 2 (left: 4 4 2)",
                "4 / 4 = 1 (left: 1 4 6)",
                "6 - 4 = 2 (left: 4 2 6)"
            ],
            "values": [
                60.0,
                1.002,
                1.002,
                60.0,
                1.002
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- INIT",
                "2 <- 1.3",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "4 / 4 = 1 (left: 1 4 6)",
                "",
                "4 / 4 = 1 (left: 1 4 6)",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "4 / 4 = 1 (left: 1 4 6)\n1 + 4 = 5 (left: 5 6)",
                "4 / 4 = 1 (left: 4 4 6)",
                "4 / 4 = 1 (left: 1 4 6)\nPossible next steps:",
                "6 / 4 = 1.5 (left: 1.5 4 4)",
                "4 / 4 = 1 (left: 4 4 6)"
            ],
            "values": [
                0.003,
                22.0,
                0.003,
                60.0,
                3.0
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 2.3",
                "2 <- 1.0",
                "3 <- 2.3",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "4 / 4 = 1 (left: 1 4 6)",
                "6 / 4 = 1.5 (left: 1.5 4 4)",
                "4 + 4 = 8 (left: 4 6 8)",
                "6 / 4 = 1.5 (left: 1.5 4 4)",
                "4 + 4 = 8 (left: 4 6 8)"
            ]
        },
        "step_3": {
            "steps": [
                "4 / 4 = 1 (left: 1 4 6)\n9 / 3 = 3 (left: 7 5 3)",
                "6 / 4 = 1.5 (left: 1.5 4 4)\n4 * 1.5 = 6 (left: 4 6)",
                "4 + 4 = 8 (left: 4 6 8)\n6 * 8 = 48 (left: 4 48)",
                "6 / 4 = 1.5 (left: 1.5 4 4)\n9 / 3 = 3 (left: 3 27)",
                "4 + 4 = 8 (left: 4 6 8)\n10 - 7 = 3 (left: 1 5 3)"
            ],
            "values": [
                3.0,
                60.0,
                20.002,
                40.001,
                41.0
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 3.4",
                "2 <- INIT",
                "3 <- 1.3",
                "4 <- 3.1"
            ],
            "resampled_steps": [
                "4 / 4 = 1 (left: 1 4 6)",
                "4 + 4 = 8 (left: 4 6 8)\n10 - 7 = 3 (left: 1 5 3)",
                "",
                "4 / 4 = 1 (left: 1 4 6)",
                "6 / 4 = 1.5 (left: 1.5 4 4)\n4 * 1.5 = 6 (left: 4 6)"
            ]
        },
        "step_4": {
            "steps": [
                "4 / 4 = 1 (left: 1 4 6)\n6 / 4 = 1.5 (left: 1 1.5)",
                "4 + 4 = 8 (left: 4 6 8)\n10 - 7 = 3 (left: 1 5 3)\n5 - 1 = 4 (left: 4 3)",
                "4 * 4 = 16 (left: 16 4 6)",
                "4 / 4 = 1 (left: 1 4 6)\n9 - 3 = 6 (left: 6 27)",
                "6 / 4 = 1.5 (left: 1.5 4 4)\n4 * 1.5 = 6 (left: 4 6)\n6 - 4 = 2 (left: 2)"
            ],
            "values": [
                0.001,
                2.0,
                40.001,
                0.003,
                0.001
            ],
            "resampled": [
                "0 <- 3.4",
                "1 <- 3.4",
                "2 <- 2.1",
                "3 <- 3.3",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "4 + 4 = 8 (left: 4 6 8)\n10 - 7 = 3 (left: 1 5 3)",
                "4 + 4 = 8 (left: 4 6 8)\n10 - 7 = 3 (left: 1 5 3)",
                "4 / 4 = 1 (left: 4 4 6)",
                "6 / 4 = 1.5 (left: 1.5 4 4)\n9 / 3 = 3 (left: 3 27)",
                "4 + 4 = 8 (left: 4 6 8)"
            ]
        },
        "step_5": {
            "steps": [
                "4 + 4 = 8 (left: 4 6 8)\n10 - 7 = 3 (left: 1 5 3)\n5 / 1 = 5 (left: 5 3)",
                "4 + 4 = 8 (left: 4 6 8)\n10 - 7 = 3 (left: 1 5 3)\n3 - 2 = 1 (left: 1 3)",
                "4 / 4 = 1 (left: 4 4 6)\n4 * 4 = 16 (left: 16 6)",
                "6 / 4 = 1.5 (left: 1.5 4 4)\n9 / 3 = 3 (left: 3 27)\n27 / 3 = 9 (left: 9 27)",
                "4 + 4 = 8 (left: 4 6 8)\n8 - 4 = 4 (left: 4 6)"
            ],
            "values": [
                0.001,
                60.0,
                0.003,
                20.002,
                40.0
            ],
            "resampled": [
                "0 <- 5.3",
                "1 <- 5.1",
                "2 <- 1.0",
                "3 <- 3.1",
                "4 <- 3.4"
            ],
            "resampled_steps": [
                "6 / 4 = 1.5 (left: 1.5 4 4)\n9 / 3 = 3 (left: 3 27)\n27 / 3 = 9 (left: 9 27)",
                "4 + 4 = 8 (left: 4 6 8)\n10 - 7 = 3 (left: 1 5 3)\n3 - 2 = 1 (left: 1 3)",
                "4 + 4 = 8 (left: 4 6 8)",
                "6 / 4 = 1.5 (left: 1.5 4 4)\n4 * 1.5 = 6 (left: 4 6)",
                "4 + 4 = 8 (left: 4 6 8)\n10 - 7 = 3 (left: 1 5 3)"
            ]
        },
        "step_6": {
            "steps": [
                "6 / 4 = 1.5 (left: 1.5 4 4)\n9 / 3 = 3 (left: 3 27)\n27 / 3 = 9 (left: 9 27)\n27 - 9 = 18 (left: 18)",
                "4 + 4 = 8 (left: 4 6 8)\n10 - 7 = 3 (left: 1 5 3)\n3 - 2 = 1 (left: 1 3)\n1 * 3 = 3 (left: 3)",
                "4 + 4 = 8 (left: 4 6 8)\n8 - 4 = 4 (left: 4 6)",
                "6 / 4 = 1.5 (left: 1.5 4 4)\n4 * 1.5 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "4 + 4 = 8 (left: 4 6 8)\n10 - 7 = 3 (left: 1 5 3)\n10 - 4 = 6 (left: 6 6)"
            ],
            "values": [
                20.001,
                0.003,
                60.0,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 6.2",
                "2 <- 6.0",
                "3 <- 6.0",
                "4 <- 2.3"
            ],
            "resampled_steps": [
                "6 / 4 = 1.5 (left: 1.5 4 4)\n4 * 1.5 = 6 (left: 4 6)",
                "4 + 4 = 8 (left: 4 6 8)\n8 - 4 = 4 (left: 4 6)",
                "6 / 4 = 1.5 (left: 1.5 4 4)\n9 / 3 = 3 (left: 3 27)\n27 / 3 = 9 (left: 9 27)\n27 - 9 = 18 (left: 18)",
                "6 / 4 = 1.5 (left: 1.5 4 4)\n9 / 3 = 3 (left: 3 27)\n27 / 3 = 9 (left: 9 27)\n27 - 9 = 18 (left: 18)",
                "6 / 4 = 1.5 (left: 1.5 4 4)"
            ]
        },
        "step_7": {
            "steps": [
                "6 / 4 = 1.5 (left: 1.5 4 4)\n4 * 1.5 = 6 (left: 4 6)\n6 - 4 = 2 (left: 2)",
                "4 + 4 = 8 (left: 4 6 8)\n8 - 4 = 4 (left: 4 6)\n9 / 3 = 3 (left: 3)",
                "6 / 4 = 1.5 (left: 1.5 4 4)\n9 / 3 = 3 (left: 3 27)\n27 / 3 = 9 (left: 9 27)\n27 - 9 = 18 (left: 18)\nThere is only one possible next step: 18 / 2 = 9 (left: 9)",
                "6 / 4 = 1.5 (left: 1.5 4 4)\n9 / 3 = 3 (left: 3 27)\n27 / 3 = 9 (left: 9 27)\n27 - 9 = 18 (left: 18)\n18 + 8 = 26",
                "6 / 4 = 1.5 (left: 1.5 4 4)\n4 - 1.5 = 2.5 (left: 2.5 4)"
            ],
            "values": [
                0.002,
                0.001,
                0.002,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 6.2",
                "2 <- 1.0",
                "3 <- 7.4",
                "4 <- 7.4"
            ],
            "resampled_steps": [
                "6 / 4 = 1.5 (left: 1.5 4 4)\n4 * 1.5 = 6 (left: 4 6)",
                "4 + 4 = 8 (left: 4 6 8)\n8 - 4 = 4 (left: 4 6)",
                "4 + 4 = 8 (left: 4 6 8)",
                "6 / 4 = 1.5 (left: 1.5 4 4)\n4 - 1.5 = 2.5 (left: 2.5 4)",
                "6 / 4 = 1.5 (left: 1.5 4 4)\n4 - 1.5 = 2.5 (left: 2.5 4)"
            ]
        },
        "step_8": {
            "steps": [
                "6 / 4 = 1.5 (left: 1.5 4 4)\n4 * 1.5 = 6 (left: 4 6)\n6 - 4 = 2 (left: 2)",
                "4 + 4 = 8 (left: 4 6 8)\n8 - 4 = 4 (left: 4 6)\n6 / 4 = 1.5 (left: 1.5)",
                "4 + 4 = 8 (left: 4 6 8)\n6 * 4 = 24 (left: 8 24)",
                "6 / 4 = 1.5 (left: 1.5 4 4)\n4 - 1.5 = 2.5 (left: 2.5 4)\n2.5 + 4 = 6.5 (left: 6.5)",
                "6 / 4 = 1.5 (left: 1.5 4 4)\n4 - 1.5 = 2.5 (left: 2.5 4)\n2.5 * 4 = 10 (left: 10)"
            ],
            "values": [
                0.001,
                0.001,
                20.002,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 8.2",
                "1 <- 5.1",
                "2 <- 5.1",
                "3 <- 2.4",
                "4 <- 6.3"
            ],
            "resampled_steps": [
                "4 + 4 = 8 (left: 4 6 8)\n6 * 4 = 24 (left: 8 24)",
                "4 + 4 = 8 (left: 4 6 8)\n10 - 7 = 3 (left: 1 5 3)\n3 - 2 = 1 (left: 1 3)",
                "4 + 4 = 8 (left: 4 6 8)\n10 - 7 = 3 (left: 1 5 3)\n3 - 2 = 1 (left: 1 3)",
                "4 / 4 = 1 (left: 4 4 6)",
                "6 / 4 = 1.5 (left: 1.5 4 4)\n4 * 1.5 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)"
            ]
        },
        "step_9": {
            "steps": [
                "4 + 4 = 8 (left: 4 6 8)\n6 * 4 = 24 (left: 8 24)\n3 + 15 = 18 (left: 18)",
                "4 + 4 = 8 (left: 4 6 8)\n10 - 7 = 3 (left: 1 5 3)\n3 - 2 = 1 (left: 1 3)\nInput: 5 10",
                "4 + 4 = 8 (left: 4 6 8)\n10 - 7 = 3 (left: 1 5 3)\n3 - 2 = 1 (left: 1 3)\n1 * 3 = 3 (left: 3)",
                "4 / 4 = 1 (left: 4 4 6)\n3 * 5 = 15 (left: 7 15)",
                "6 / 4 = 1.5 (left: 1.5 4 4)\n4 * 1.5 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 / 4) * (4 * 4) = 24"
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ],
        "cost": 0.940151
    },
    "39": {
        "input": "1 1 1 11",
        "step_1": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 11)",
                "1 + 1 = 2 (left: 1 2 11)",
                "1 * 1 = 1 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1 11)",
                "1 + 1 = 2 (left: 2 1 11)"
            ],
            "values": [
                0.003,
                0.002,
                2.001,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                "",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "11 - 1 = 10 (left: 1 1 10)",
                "1 + 1 = 2 (left: 1 2 11)",
                "11 - 1 = 10 (left: 1 1 10)",
                "1 / 1 = 1 (left: 1 1 11)",
                "1 * 1 = 1 (left: 1 1 11)"
            ],
            "values": [
                0.003,
                0.003,
                1.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.2",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                "1 * 1 = 1 (left: 1 1 11)",
                "",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "11 - 1 = 10 (left: 1 1 10)",
                "1 + 1 = 2 (left: 1 2 11)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)",
                "1 * 1 = 1 (left: 1 1 11)",
                "11 - 1 = 10 (left: 1 1 10)"
            ],
            "values": [
                2.001,
                1.002,
                40.001,
                1.001,
                2.001
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- INIT",
                "2 <- 3.2",
                "3 <- 3.2",
                "4 <- 3.2"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)",
                "",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)"
            ]
        },
        "step_4": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)\n5 - 2 = 3 (left: 3)",
                "1 + 1 = 2 (left: 1 2 11)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)\n6 + 3 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)\n5 / 2 = 2.5 (left: 2.5)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)\n5 / 2 = 2.5 (left: 2.5)"
            ],
            "values": [
                0.003,
                0.003,
                0.001,
                0.0,
                0.0
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 3.0",
                "2 <- 3.2",
                "3 <- 3.2",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)",
                "11 - 1 = 10 (left: 1 1 10)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)",
                ""
            ]
        },
        "step_5": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)\n5 / 2 = 2.5 (left: 2.5)",
                "11 - 1 = 10 (left: 1 1 10)\n7 - 5 = 2 (left: 2 5 7)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)\n5 - 2 = 3 (left: 3)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)\n2 * 5 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 11)"
            ],
            "values": [
                0.002,
                3.0,
                0.002,
                0.0,
                0.003
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 3.2",
                "2 <- 3.2",
                "3 <- 3.2",
                "4 <- 3.2"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)"
            ]
        },
        "step_6": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)\n2 * 5 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)\n2 * 5 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)\n6 / 4 = 1.5 (left: 1.5)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)\n2 * 5 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)\n2 + 5 = 7 (left: 7)"
            ],
            "values": [
                0.003,
                0.002,
                0.0,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 3.2",
                "2 <- 3.2",
                "3 <- 3.2",
                "4 <- 3.2"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)"
            ]
        },
        "step_7": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)\n5 / 2 = 2.5 (left: 2.5)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)\n2 + 5 = 7 (left: 7)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)\n3 * 9 = 27 (left: 27)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)\n5 * 3 = 15 (left: 3 15)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)\n5 - 2 = 3 (left: 3)"
            ],
            "values": [
                0.002,
                0.001,
                0.002,
                0.003,
                0.0
            ],
            "resampled": [
                "0 <- 3.4",
                "1 <- 3.2",
                "2 <- 3.2",
                "3 <- 3.2",
                "4 <- 5.1"
            ],
            "resampled_steps": [
                "11 - 1 = 10 (left: 1 1 10)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)",
                "11 - 1 = 10 (left: 1 1 10)\n7 - 5 = 2 (left: 2 5 7)"
            ]
        },
        "step_8": {
            "steps": [
                "11 - 1 = 10 (left: 1 1 10)\n1 * 1 = 1 (left: 1 10)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)\n2 + 5 = 7 (left: 7)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)\n2 * 5 = 10 (left: 10)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)\n2 + 5 = 7 (left: 7)",
                "11 - 1 = 10 (left: 1 1 10)\n7 - 5 = 2 (left: 2 5 7)\n7 - 2 = 5 (left: 5 7)"
            ],
            "values": [
                40.001,
                0.001,
                0.001,
                0.002,
                2.0
            ],
            "resampled": [
                "0 <- 3.4",
                "1 <- 3.2",
                "2 <- 8.0",
                "3 <- 3.2",
                "4 <- 8.0"
            ],
            "resampled_steps": [
                "11 - 1 = 10 (left: 1 1 10)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)",
                "11 - 1 = 10 (left: 1 1 10)\n1 * 1 = 1 (left: 1 10)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)",
                "11 - 1 = 10 (left: 1 1 10)\n1 * 1 = 1 (left: 1 10)"
            ]
        },
        "step_9": {
            "steps": [
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)\n5 / 2 = 2.5 (left: 2.5)",
                "11 - 1 = 10 (left: 1 1 10)\n1 * 1 = 1 (left: 1 10)\n1 + 10 = 11 (left: 11)",
                "1 * 1 = 1 (left: 1 1 11)\n7 / 3 = 2 (left: 2 5)\n2 * 5 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10)\n1 * 1 = 1 (left: 1 10)\n10 / 1 = 10 (left: 10)"
            ],
            "values": [
                60.0,
                0.0,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 9.0",
                "1 <- 9.0",
                "2 <- 8.0",
                "3 <- 9.0",
                "4 <- 9.0"
            ],
            "resampled_steps": [
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)",
                "11 - 1 = 10 (left: 1 1 10)\n1 * 1 = 1 (left: 1 10)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)"
            ]
        },
        "step_10": {
            "steps": [
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\nInput: 4 2 1",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10)\n1 * 1 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "11 - 1 = 10 (left: 1 1 10)\n10 / 1 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9)"
            ],
            "values": [
                0.003,
                0.001,
                0.002,
                0.002,
                0.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.9635735000000001
    },
    "40": {
        "input": "1 1 11 12",
        "step_1": {
            "steps": [
                "11 * 1 = 11 (left: 1 11 12)",
                "12 / 1 = 12 (left: 1 11 12)",
                "10 / 6 = 1.6666666666666667 (left: 4 1.6666666666666667 15)",
                "12 / 1 = 12 (left: 1 11 12)",
                "11 - 1 = 10 (left: 1 10 12)"
            ],
            "values": [
                0.003,
                40.001,
                3.0,
                21.001,
                0.003
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 1.1",
                "2 <- 1.1",
                "3 <- 1.1",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "12 / 1 = 12 (left: 1 11 12)",
                "12 / 1 = 12 (left: 1 11 12)",
                "12 / 1 = 12 (left: 1 11 12)",
                "12 / 1 = 12 (left: 1 11 12)",
                "12 / 1 = 12 (left: 1 11 12)"
            ]
        },
        "step_2": {
            "steps": [
                "12 / 1 = 12 (left: 1 11 12)\n12 - 1 = 11 (left: 11 11)",
                "12 / 1 = 12 (left: 1 11 12)\n11 - 1 = 10 (left: 10)",
                "12 / 1 = 12 (left: 1 11 12)\n12 + 1 = 13 (left: 11 13)",
                "12 / 1 = 12 (left: 1 11 12)\n1 * 11 = 11 (left: 11 12)",
                "12 / 1 = 12 (left: 1 11 12)\n6 + 2 = 8 (left: 3 8 9)"
            ],
            "values": [
                0.003,
                0.003,
                60.0,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- 2.2",
                "2 <- 2.4",
                "3 <- 2.4",
                "4 <- 2.4"
            ],
            "resampled_steps": [
                "12 / 1 = 12 (left: 1 11 12)\n6 + 2 = 8 (left: 3 8 9)",
                "12 / 1 = 12 (left: 1 11 12)\n12 + 1 = 13 (left: 11 13)",
                "12 / 1 = 12 (left: 1 11 12)\n6 + 2 = 8 (left: 3 8 9)",
                "12 / 1 = 12 (left: 1 11 12)\n6 + 2 = 8 (left: 3 8 9)",
                "12 / 1 = 12 (left: 1 11 12)\n6 + 2 = 8 (left: 3 8 9)"
            ]
        },
        "step_3": {
            "steps": [
                "12 / 1 = 12 (left: 1 11 12)\n6 + 2 = 8 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)",
                "12 / 1 = 12 (left: 1 11 12)\n12 + 1 = 13 (left: 11 13)\n11 / 13 \u2248 0.846 (left: 0.846)",
                "12 / 1 = 12 (left: 1 11 12)\n6 + 2 = 8 (left: 3 8 9)\n9 - 3 = 6 (left: 8 6)",
                "12 / 1 = 12 (left: 1 11 12)\n6 + 2 = 8 (left: 3 8 9)\n3 + 8 = 11 (left: 9 11)",
                "12 / 1 = 12 (left: 1 11 12)\n6 + 2 = 8 (left: 3 8 9)\n5 + 7 = 12 (left: 2 12)"
            ],
            "values": [
                0.003,
                0.002,
                0.003,
                1.001,
                60.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.1",
                "2 <- 3.4",
                "3 <- 2.2",
                "4 <- 2.4"
            ],
            "resampled_steps": [
                "",
                "12 / 1 = 12 (left: 1 11 12)",
                "12 / 1 = 12 (left: 1 11 12)\n6 + 2 = 8 (left: 3 8 9)\n5 + 7 = 12 (left: 2 12)",
                "12 / 1 = 12 (left: 1 11 12)\n12 + 1 = 13 (left: 11 13)",
                "12 / 1 = 12 (left: 1 11 12)\n6 + 2 = 8 (left: 3 8 9)"
            ]
        },
        "step_4": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 12)",
                "12 / 1 = 12 (left: 1 11 12)\n13 - 8 = 5 (left: 5 8 13)",
                "12 / 1 = 12 (left: 1 11 12)\n6 + 2 = 8 (left: 3 8 9)\n5 + 7 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "12 / 1 = 12 (left: 1 11 12)\n12 + 1 = 13 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "12 / 1 = 12 (left: 1 11 12)\n6 + 2 = 8 (left: 3 8 9)\n12 - 7 = 5 (left: 5 9 12)"
            ],
            "values": [
                1.002,
                1.002,
                60.0,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 4.3",
                "1 <- 4.2",
                "2 <- 3.4",
                "3 <- 2.4",
                "4 <- 3.4"
            ],
            "resampled_steps": [
                "12 / 1 = 12 (left: 1 11 12)\n12 + 1 = 13 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "12 / 1 = 12 (left: 1 11 12)\n6 + 2 = 8 (left: 3 8 9)\n5 + 7 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "12 / 1 = 12 (left: 1 11 12)\n6 + 2 = 8 (left: 3 8 9)\n5 + 7 = 12 (left: 2 12)",
                "12 / 1 = 12 (left: 1 11 12)\n6 + 2 = 8 (left: 3 8 9)",
                "12 / 1 = 12 (left: 1 11 12)\n6 + 2 = 8 (left: 3 8 9)\n5 + 7 = 12 (left: 2 12)"
            ]
        },
        "step_5": {
            "steps": [
                "12 / 1 = 12 (left: 1 11 12)\n12 + 1 = 13 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: (12 / 1) + (11 + 1) = 24",
                "12 / 1 = 12 (left: 1 11 12)\n6 + 2 = 8 (left: 3 8 9)\n5 + 7 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: ((12 / 1) - 3) * (8 + 9) = 24",
                "12 / 1 = 12 (left: 1 11 12)\n6 + 2 = 8 (left: 3 8 9)\n5 + 7 = 12 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "12 / 1 = 12 (left: 1 11 12)\n6 + 2 = 8 (left: 3 8 9)\n7 - 6 = 1 (left: 4 5 1)",
                "12 / 1 = 12 (left: 1 11 12)\n6 + 2 = 8 (left: 3 8 9)\n5 + 7 = 12 (left: 2 12)\n12 - 2 = 10 (left: 10)"
            ]
        },
        "results": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.978259
    },
    "41": {
        "input": "2 7 7 12",
        "step_1": {
            "steps": [
                "7 - 2 = 5 (left: 5 7 12)",
                "7 - 2 = 5 (left: 5 7 12)",
                "12 / 2 = 6 (left: 6 7 7)",
                "7 / 2 = 3.5 (left: 3.5 7 12)",
                "7 - 2 = 5 (left: 5 7 12)"
            ],
            "values": [
                21.001,
                3.0,
                2.001,
                21.001,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "",
                "",
                "",
                "",
                "7 / 2 = 3.5 (left: 3.5 7 12)"
            ]
        },
        "step_2": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12)",
                "2 + 7 = 9 (left: 7 9 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n7 - 3.5 = 3.5 (left: 3.5 12)"
            ],
            "values": [
                41.0,
                60.0,
                2.001,
                41.0,
                0.003
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 2.3",
                "2 <- INIT",
                "3 <- 2.0",
                "4 <- 2.0"
            ],
            "resampled_steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12)",
                "",
                "7 / 2 = 3.5 (left: 3.5 7 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12)"
            ]
        },
        "step_3": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12)\n10 - 4 = 6 (left: 6 10 10)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\nPossible next steps:",
                "12 - 2 = 10 (left: 7 7 10)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n3.5 + 7 = 10.5 (left: 10.5 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 - 3.5 = 8.5 (left: 7 8.5)"
            ],
            "values": [
                3.0,
                0.003,
                60.0,
                0.003,
                2.001
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 3.2",
                "2 <- 2.0",
                "3 <- 2.1",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "12 - 2 = 10 (left: 7 7 10)",
                "12 - 2 = 10 (left: 7 7 10)",
                "7 / 2 = 3.5 (left: 3.5 7 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12)"
            ]
        },
        "step_4": {
            "steps": [
                "12 - 2 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)",
                "12 - 2 = 10 (left: 7 7 10)\n10 + 7 = 17 (left: 7 17)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n12 - 7 = 5 (left: 3.5 5)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n3 * 2 = 6 (left: 6 6 8)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n7 - 3.5 = 3.5 (left: 3.5 12)"
            ],
            "values": [
                41.0,
                60.0,
                1.001,
                3.0,
                0.003
            ],
            "resampled": [
                "0 <- 4.0",
                "1 <- 3.2",
                "2 <- 4.0",
                "3 <- 3.2",
                "4 <- 3.2"
            ],
            "resampled_steps": [
                "12 - 2 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)",
                "12 - 2 = 10 (left: 7 7 10)",
                "12 - 2 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)",
                "12 - 2 = 10 (left: 7 7 10)",
                "12 - 2 = 10 (left: 7 7 10)"
            ]
        },
        "step_5": {
            "steps": [
                "12 - 2 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)\n1 + 10 = 11 (left: 10)",
                "12 - 2 = 10 (left: 7 7 10)\n3 + 4 = 7 (left: 1 2 7)",
                "12 - 2 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "12 - 2 = 10 (left: 7 7 10)\n7 * 7 = 49 (left: 10 49)",
                "12 - 2 = 10 (left: 7 7 10)\nInput: 1 3 7"
            ],
            "values": [
                0.003,
                0.003,
                0.003,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 4.1",
                "2 <- 1.0",
                "3 <- 4.3",
                "4 <- 4.1"
            ],
            "resampled_steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12)",
                "12 - 2 = 10 (left: 7 7 10)\n10 + 7 = 17 (left: 7 17)",
                "7 - 2 = 5 (left: 5 7 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n3 * 2 = 6 (left: 6 6 8)",
                "12 - 2 = 10 (left: 7 7 10)\n10 + 7 = 17 (left: 7 17)"
            ]
        },
        "step_6": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12)\n7 * 3.5 = 24.5 (left: 12 24.5)",
                "12 - 2 = 10 (left: 7 7 10)\n10 + 7 = 17 (left: 7 17)\n17 / 7 = 2.42857142857 (left: 2.42857142857)",
                "7 - 2 = 5 (left: 5 7 12)\n5 / 7 = 0.714 (left: 0.714 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n3 * 2 = 6 (left: 6 6 8)\n8 / 6 is not a whole number, so it is not a valid next step.",
                "12 - 2 = 10 (left: 7 7 10)\n10 + 7 = 17 (left: 7 17)\n17 / 7 = 2.43 (left: 2.43)"
            ],
            "values": [
                0.003,
                0.003,
                1.001,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 4.0",
                "3 <- 4.1",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12)",
                "12 - 2 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)",
                "12 - 2 = 10 (left: 7 7 10)\n10 + 7 = 17 (left: 7 17)",
                "7 / 2 = 3.5 (left: 3.5 7 12)"
            ]
        },
        "step_7": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12)\n4 + 5 = 9 (left: 6.5 9)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n6 / 3 = 2 (left: 9 27 2)",
                "12 - 2 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "12 - 2 = 10 (left: 7 7 10)\n10 + 7 = 17 (left: 7 17)\n7 * 17 = 119 (left: 119)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n4 * 5 = 20 (left: 20 20)"
            ],
            "values": [
                0.003,
                22.0,
                0.002,
                0.002,
                20.002
            ],
            "resampled": [
                "0 <- 4.0",
                "1 <- 4.1",
                "2 <- 2.0",
                "3 <- 2.1",
                "4 <- 3.2"
            ],
            "resampled_steps": [
                "12 - 2 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)",
                "12 - 2 = 10 (left: 7 7 10)\n10 + 7 = 17 (left: 7 17)",
                "7 / 2 = 3.5 (left: 3.5 7 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12)",
                "12 - 2 = 10 (left: 7 7 10)"
            ]
        },
        "step_8": {
            "steps": [
                "12 - 2 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "12 - 2 = 10 (left: 7 7 10)\n10 + 7 = 17 (left: 7 17)\n7 + 17 = 24 (left: 24)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n3.5 + 7 = 10.5 (left: 10.5 12)",
                "7 / 2 = 3.5 (left: 3.5 7 12)\n6 / 4 = 1.5 (left: 1.5 9 15)",
                "12 - 2 = 10 (left: 7 7 10)\n7 * 7 = 49 (left: 10 49)"
            ],
            "values": [
                0.003,
                40.0,
                1.002,
                3.0,
                0.002
            ],
            "resampled": [
                "0 <- 7.1",
                "1 <- 3.2",
                "2 <- 8.1",
                "3 <- 8.1",
                "4 <- 8.1"
            ],
            "resampled_steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12)\n6 / 3 = 2 (left: 9 27 2)",
                "12 - 2 = 10 (left: 7 7 10)",
                "12 - 2 = 10 (left: 7 7 10)\n10 + 7 = 17 (left: 7 17)\n7 + 17 = 24 (left: 24)",
                "12 - 2 = 10 (left: 7 7 10)\n10 + 7 = 17 (left: 7 17)\n7 + 17 = 24 (left: 24)",
                "12 - 2 = 10 (left: 7 7 10)\n10 + 7 = 17 (left: 7 17)\n7 + 17 = 24 (left: 24)"
            ]
        },
        "step_9": {
            "steps": [
                "7 / 2 = 3.5 (left: 3.5 7 12)\n6 / 3 = 2 (left: 9 27 2)\nPossible next steps:",
                "12 - 2 = 10 (left: 7 7 10)\n7 - 7 = 0 (left: 0 10)",
                "12 - 2 = 10 (left: 7 7 10)\n10 + 7 = 17 (left: 7 17)\n7 + 17 = 24 (left: 24)\nAnswer: ((12 - 2) + 7) + 17 = 24",
                "12 - 2 = 10 (left: 7 7 10)\n10 + 7 = 17 (left: 7 17)\n7 + 17 = 24 (left: 24)\nAnswer: ((12 - 2) + 7) + 7 = 24",
                "12 - 2 = 10 (left: 7 7 10)\n10 + 7 = 17 (left: 7 17)\n7 + 17 = 24 (left: 24)\nAnswer: ((12 - 2) + 7) + 7 = 24"
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            }
        ],
        "cost": 1.005029
    },
    "42": {
        "input": "1 5 7 12",
        "step_1": {
            "steps": [
                "5 * 7 = 35 (left: 1 35 12)",
                "12 - 5 = 7 (left: 1 7 12)",
                "1 * 5 = 5 (left: 5 7 12)",
                "1 + 5 = 6 (left: 6 7 12)",
                "1 + 5 = 6 (left: 6 7 12)"
            ],
            "values": [
                1.001,
                3.0,
                22.0,
                2.001,
                3.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- 1.2",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "",
                "",
                "",
                "1 * 5 = 5 (left: 5 7 12)",
                "12 - 5 = 7 (left: 1 7 12)"
            ]
        },
        "step_2": {
            "steps": [
                "3 + 9 = 12 (left: 5 12 15)",
                "5 / 1 = 5 (left: 5 7 12)",
                "12 - 7 = 5 (left: 1 5 5)",
                "1 * 5 = 5 (left: 5 7 12)\n7 / 5 = 1.4 (left: 1.4 12)",
                "12 - 5 = 7 (left: 1 7 12)\n12 - 7 = 5 (left: 1 5 12)"
            ],
            "values": [
                0.003,
                22.0,
                60.0,
                0.002,
                1.002
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 2.2",
                "2 <- 2.2",
                "3 <- 2.2",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "12 - 7 = 5 (left: 1 5 5)",
                "12 - 7 = 5 (left: 1 5 5)",
                "12 - 7 = 5 (left: 1 5 5)",
                "12 - 7 = 5 (left: 1 5 5)",
                "5 / 1 = 5 (left: 5 7 12)"
            ]
        },
        "step_3": {
            "steps": [
                "12 - 7 = 5 (left: 1 5 5)\n5 - 1 = 4 (left: 4 5 5)",
                "12 - 7 = 5 (left: 1 5 5)\n1 - 5 = -4 (left: -4 5 5)",
                "12 - 7 = 5 (left: 1 5 5)\n5 - 1 = 4 (left: 4 5)",
                "12 - 7 = 5 (left: 1 5 5)\n1 + 5 = 6 (left: 5 6)",
                "5 / 1 = 5 (left: 5 7 12)\n5 * 7 = 35 (left: 35 12)"
            ],
            "values": [
                2.001,
                3.0,
                21.0,
                1.002,
                0.002
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 2.1",
                "2 <- 2.2",
                "3 <- 2.2",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "12 - 7 = 5 (left: 1 5 5)",
                "5 / 1 = 5 (left: 5 7 12)",
                "12 - 7 = 5 (left: 1 5 5)",
                "12 - 7 = 5 (left: 1 5 5)",
                ""
            ]
        },
        "step_4": {
            "steps": [
                "12 - 7 = 5 (left: 1 5 5)\n1 + 5 = 6 (left: 5 6)",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)",
                "12 - 7 = 5 (left: 1 5 5)\n1 * 5 = 5 (left: 5 5)",
                "12 - 7 = 5 (left: 1 5 5)\n5 / 1 = 5 (left: 5 5)",
                "5 + 7 = 12 (left: 1 12 12)"
            ],
            "values": [
                0.002,
                60.0,
                0.003,
                0.003,
                20.002
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 4.1",
                "2 <- 4.1",
                "3 <- 2.2",
                "4 <- 4.1"
            ],
            "resampled_steps": [
                "12 - 7 = 5 (left: 1 5 5)\n5 - 1 = 4 (left: 4 5)",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)",
                "12 - 7 = 5 (left: 1 5 5)",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)"
            ]
        },
        "step_5": {
            "steps": [
                "12 - 7 = 5 (left: 1 5 5)\n5 - 1 = 4 (left: 4 5)\n5 / 4 = 1.25 (left: 1.25)",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "12 - 7 = 5 (left: 1 5 5)\n5 * 1 = 5 (left: 5 5 5)",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)"
            ],
            "values": [
                0.002,
                0.003,
                0.002,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 4.1",
                "1 <- 4.1",
                "2 <- 3.1",
                "3 <- 4.1",
                "4 <- 4.1"
            ],
            "resampled_steps": [
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)",
                "12 - 7 = 5 (left: 1 5 5)\n1 - 5 = -4 (left: -4 5 5)",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)"
            ]
        },
        "step_6": {
            "steps": [
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n12 * 2 = 24 (left: 24)",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "12 - 7 = 5 (left: 1 5 5)\n1 - 5 = -4 (left: -4 5 5)\n3 - 9 = -6 (left: -6 3)",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)"
            ],
            "values": [
                60.0,
                20.0,
                0.003,
                0.001,
                0.001
            ],
            "resampled": [
                "0 <- 4.1",
                "1 <- 3.2",
                "2 <- 6.0",
                "3 <- 1.2",
                "4 <- 6.1"
            ],
            "resampled_steps": [
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)",
                "12 - 7 = 5 (left: 1 5 5)\n5 - 1 = 4 (left: 4 5)",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n12 * 2 = 24 (left: 24)",
                "1 * 5 = 5 (left: 5 7 12)",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)"
            ]
        },
        "step_7": {
            "steps": [
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "12 - 7 = 5 (left: 1 5 5)\n5 - 1 = 4 (left: 4 5)\n4 / 5 = 0.8 (left: 0.8)",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n12 * 2 = 24 (left: 24)\nAnswer: (5 / 1) * (7 - 2) = 24",
                "1 * 5 = 5 (left: 5 7 12)\n7 / 5 = 1.4 (left: 1.4 12)",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (5 / 1) * (7 - 12) = 24"
            ],
            "values": [
                60.0,
                0.002,
                20.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 7.0",
                "1 <- 7.0",
                "2 <- 4.1",
                "3 <- 4.1",
                "4 <- 7.0"
            ],
            "resampled_steps": [
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)"
            ]
        },
        "step_8": {
            "steps": [
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (5 / 1) * (7 - 12) = 24",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (5 / 1) * (7 - 2) = 24",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (5 / 1) * (7 - 12) = 24"
            ],
            "values": [
                40.001,
                0.003,
                0.002,
                0.003,
                40.001
            ],
            "resampled": [
                "0 <- 8.4",
                "1 <- 8.0",
                "2 <- 8.4",
                "3 <- 8.4",
                "4 <- 2.2"
            ],
            "resampled_steps": [
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (5 / 1) * (7 - 12) = 24",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (5 / 1) * (7 - 12) = 24",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (5 / 1) * (7 - 12) = 24",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (5 / 1) * (7 - 12) = 24",
                "12 - 7 = 5 (left: 1 5 5)"
            ]
        },
        "step_9": {
            "steps": [
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (5 / 1) * (7 - 12) = 24\nInput: 3 6 7 8\nSteps:\n6 * 3 = 18 (left: 7 8 18)\n7 + 8 = 15 (left: 15 18)\n15 + 18 = 33 (left: 33)\nAnswer: (6 * 3) + (7 + 8) = 24",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (5 / 1) * (7 - 12) = 24\nInput: 3 6 7 8\nSteps:\n6 + 8 = 14 (left: 3 7 14)\n7 - 3 = 4 (left: 4 14)\n4 * 14 = 56 (left: 56)\nAnswer: (3 + 6 + 7) * 8 = 24",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (5 / 1) * (7 - 12) = 24\nInput: 3 3 3 8\nSteps:\n3 * 3 = 9 (left: 3 8 9)\n9 - 8 = 1 (left: 1 9)\n1 * 24 = 24 (left: 24)\nAnswer: (3 * 3) - (8 - 9) = 24",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (5 / 1) * (7 - 12) = 24\nInput: 3 3 4 8\nSteps:\n3 + 8 = 11 (left: 3 4 11)\n11 - 4 = 7 (left: 3 7)\n3 * 7 = 21 (left: 21)\n21 + 3 = 24 (left: 24)\nAnswer: ((3 + 8) - 4) * (3 + 7) = 24",
                "12 - 7 = 5 (left: 1 5 5)\n5 / 1 = 5 (left: 5 5)"
            ],
            "values": [
                60.0,
                60.0,
                40.0,
                40.0,
                0.003
            ],
            "resampled": [
                "0 <- 9.0",
                "1 <- 9.0",
                "2 <- 2.2",
                "3 <- 8.4",
                "4 <- 7.0"
            ],
            "resampled_steps": [
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (5 / 1) * (7 - 12) = 24\nInput: 3 6 7 8\nSteps:\n6 * 3 = 18 (left: 7 8 18)\n7 + 8 = 15 (left: 15 18)\n15 + 18 = 33 (left: 33)\nAnswer: (6 * 3) + (7 + 8) = 24",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (5 / 1) * (7 - 12) = 24\nInput: 3 6 7 8\nSteps:\n6 * 3 = 18 (left: 7 8 18)\n7 + 8 = 15 (left: 15 18)\n15 + 18 = 33 (left: 33)\nAnswer: (6 * 3) + (7 + 8) = 24",
                "12 - 7 = 5 (left: 1 5 5)",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (5 / 1) * (7 - 12) = 24",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)"
            ]
        },
        "step_10": {
            "steps": [
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (5 / 1) * (7 - 12) = 24\nInput: 3 6 7 8\nSteps:\n6 * 3 = 18 (left: 7 8 18)\n7 + 8 = 15 (left: 15 18)\n15 + 18 = 33 (left: 33)\nAnswer: (6 * 3) + (7 + 8) = 24\nInput: 3 3 6 6\nSteps:\n3 + 3 = 6 (left: 6 6 6)\n6 * 6 = 36 (left: 36)\n36 / 6 = 24 (left: 24)\nAnswer: ((3 + 3) * 6) / 6 = 24",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (5 / 1) * (7 - 12) = 24\nInput: 3 6 7 8\nSteps:\n6 * 3 = 18 (left: 7 8 18)\n7 + 8 = 15 (left: 15 18)\n15 + 18 = 33 (left: 33)\nAnswer: (6 * 3) + (7 + 8) = 24\nInput: 2 3 4 5\nSteps:\n3 + 5 = 8 (left: 2 4 8)\n4 * 2 = 8 (left: 8 8)\n8 * 8 = 64 (left: 64)\nAnswer: (2 * 4) * (3 + 5) = 24",
                "12 - 7 = 5 (left: 1 5 5)\n3 + 9 = 12 (left: 12 27)",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (5 / 1) * (7 - 12) = 24\nInput: 3 5 6 7\nSteps:\n5 * 7 = 35 (left: 3 6 35)\n6 - 3 = 3 (left: 3 35)\n3 * 35 = 105 (left: 105)\n105 / 5 = 21 (left: 21)\n21 - 6 = 15 (left: 15)\n15 - 7 = 8 (left: 8)\n8 * 3 = 24 (left: 24)\nAnswer: (((3 * 5) * 7) / 5) - 6 + 7 - 3 = 24",
                "5 / 1 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (5 / 1) * (7 - 2) = 24"
            ],
            "values": [
                60.0,
                60.0,
                0.003,
                60.0,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.0306425000000001
    },
    "43": {
        "input": "10 10 12 12",
        "step_1": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12)",
                "10 + 10 = 20 (left: 12 12 20)",
                "12 - 10 = 2 (left: 2 12 12)",
                "10 + 10 = 20 (left: 12 12 20)",
                "10 / 10 = 1 (left: 1 12 12)"
            ],
            "values": [
                40.001,
                0.003,
                0.003,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.0",
                "2 <- 1.0",
                "3 <- 1.0",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "",
                "10 / 10 = 1 (left: 1 12 12)",
                "10 / 10 = 1 (left: 1 12 12)",
                "10 / 10 = 1 (left: 1 12 12)",
                "10 / 10 = 1 (left: 1 12 12)"
            ]
        },
        "step_2": {
            "steps": [
                "10 + 10 = 20 (left: 12 12 20)",
                "10 / 10 = 1 (left: 1 12 12)\n1 * 12 = 12 (left: 12 12)",
                "10 / 10 = 1 (left: 1 12 12)\n12 - 1 = 11 (left: 11 12)",
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "10 / 10 = 1 (left: 1 12 12)\n12 + 1 = 13 (left: 12 13)"
            ],
            "values": [
                0.003,
                60.0,
                0.003,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- INIT",
                "3 <- 2.3",
                "4 <- 2.3"
            ],
            "resampled_steps": [
                "10 / 10 = 1 (left: 1 12 12)\n1 * 12 = 12 (left: 12 12)",
                "10 / 10 = 1 (left: 1 12 12)\n1 * 12 = 12 (left: 12 12)",
                "",
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)"
            ]
        },
        "step_3": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12)\n1 * 12 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "10 / 10 = 1 (left: 1 12 12)\n1 * 12 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "12 - 10 = 2 (left: 10 12 2)",
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)",
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)"
            ],
            "values": [
                0.002,
                0.003,
                41.0,
                0.003,
                40.0
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 2.1",
                "2 <- 3.2",
                "3 <- 2.3",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "10 / 10 = 1 (left: 1 12 12)",
                "10 / 10 = 1 (left: 1 12 12)\n1 * 12 = 12 (left: 12 12)",
                "12 - 10 = 2 (left: 10 12 2)",
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "10 / 10 = 1 (left: 1 12 12)"
            ]
        },
        "step_4": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12)\n12 / 12 = 1 (left: 1)",
                "10 / 10 = 1 (left: 1 12 12)\n1 * 12 = 12 (left: 12 12)\n12 + 12 = 24",
                "12 - 10 = 2 (left: 10 12 2)\n10 / 2 = 5 (left: 5 12)",
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "10 / 10 = 1 (left: 1 12 12)\n1 + 12 = 13 (left: 12 13)"
            ],
            "values": [
                0.002,
                40.001,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2.3",
                "1 <- 2.1",
                "2 <- 2.3",
                "3 <- 3.2",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "10 / 10 = 1 (left: 1 12 12)\n1 * 12 = 12 (left: 12 12)",
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "12 - 10 = 2 (left: 10 12 2)",
                ""
            ]
        },
        "step_5": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24",
                "10 / 10 = 1 (left: 1 12 12)\n1 * 12 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)",
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)",
                "12 - 10 = 2 (left: 10 12 2)\n12 / 2 = 6 (left: 6 10)",
                "10 + 10 = 20 (left: 12 12 20)"
            ],
            "values": [
                20.002,
                0.002,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 5.0",
                "1 <- 2.3",
                "2 <- 2.1",
                "3 <- 1.0",
                "4 <- 3.2"
            ],
            "resampled_steps": [
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24",
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "10 / 10 = 1 (left: 1 12 12)\n1 * 12 = 12 (left: 12 12)",
                "10 / 10 = 1 (left: 1 12 12)",
                "12 - 10 = 2 (left: 10 12 2)"
            ]
        },
        "step_6": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24\n24 / 12 = 2 (left: 2 24)",
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "10 / 10 = 1 (left: 1 12 12)\n1 * 12 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "10 / 10 = 1 (left: 1 12 12)\n12 - 1 = 11 (left: 11 12)",
                "12 - 10 = 2 (left: 10 12 2)\n10 + 12 = 22 (left: 2 22)"
            ],
            "values": [
                20.002,
                0.003,
                0.002,
                0.002,
                20.002
            ],
            "resampled": [
                "0 <- 6.0",
                "1 <- 3.4",
                "2 <- 2.1",
                "3 <- 2.3",
                "4 <- 6.4"
            ],
            "resampled_steps": [
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24\n24 / 12 = 2 (left: 2 24)",
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "10 / 10 = 1 (left: 1 12 12)\n1 * 12 = 12 (left: 12 12)",
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "12 - 10 = 2 (left: 10 12 2)\n10 + 12 = 22 (left: 2 22)"
            ]
        },
        "step_7": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24\n24 / 12 = 2 (left: 2 24)\n24 + 2 = 26 (left: 26)",
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (10 / 10) * (12 + 12) = 24",
                "10 / 10 = 1 (left: 1 12 12)\n1 * 12 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)",
                "12 - 10 = 2 (left: 10 12 2)\n10 + 12 = 22 (left: 2 22)\n22 - 2 = 20 (left: 20)"
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.0469080000000002
    },
    "44": {
        "input": "1 8 8 8",
        "step_1": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8)",
                "8 - 1 = 7 (left: 7 8 8)",
                "1 + 8 = 9 (left: 8 8 9)",
                "8 - 1 = 7 (left: 7 8 8)",
                "8 + 1 = 9 (left: 8 8 9)"
            ],
            "values": [
                40.001,
                2.0,
                2.001,
                2.001,
                1.002
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 1.0",
                "2 <- 1.0",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "8 / 1 = 8 (left: 8 8 8)",
                "8 / 1 = 8 (left: 8 8 8)",
                "8 / 1 = 8 (left: 8 8 8)",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)",
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)",
                "8 / 1 = 8 (left: 8 8 8)\n8 - 8 = 0 (left: 0)",
                "8 * 1 = 8 (left: 8 8 8)",
                "8 / 8 = 1 (left: 1 8 8)"
            ],
            "values": [
                40.001,
                20.002,
                0.002,
                41.0,
                1.002
            ],
            "resampled": [
                "0 <- 2.3",
                "1 <- 1.0",
                "2 <- 2.3",
                "3 <- 1.0",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "8 * 1 = 8 (left: 8 8 8)",
                "8 / 1 = 8 (left: 8 8 8)",
                "8 * 1 = 8 (left: 8 8 8)",
                "8 / 1 = 8 (left: 8 8 8)",
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)"
            ]
        },
        "step_3": {
            "steps": [
                "8 * 1 = 8 (left: 8 8 8)\nPossible next steps:",
                "8 / 1 = 8 (left: 8 8 8)\n10 / 5 = 2 (left: 2 3)",
                "8 * 1 = 8 (left: 8 8 8)\n8 - 1 = 7 (left: 7)",
                "8 / 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)",
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)\n8 + 16 = 24 (left: 24)"
            ],
            "values": [
                0.003,
                0.002,
                0.003,
                60.0,
                40.0
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- INIT",
                "2 <- 2.3",
                "3 <- 2.3",
                "4 <- 3.3"
            ],
            "resampled_steps": [
                "8 / 1 = 8 (left: 8 8 8)",
                "",
                "8 * 1 = 8 (left: 8 8 8)",
                "8 * 1 = 8 (left: 8 8 8)",
                "8 / 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)"
            ]
        },
        "step_4": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8)\nInput: 8",
                "8 * 1 = 8 (left: 8 8 8)",
                "8 * 1 = 8 (left: 8 8 8)\n8 - 8 = 0 (left: 0 8)",
                "8 * 1 = 8 (left: 8 8 8)\n24 * 8 = 192 (left: 192)",
                "8 / 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)\n8 / 1 = 8 (left: 8)"
            ],
            "values": [
                0.003,
                22.0,
                41.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 3.3",
                "3 <- 3.3",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)",
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)",
                "8 / 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)",
                "8 / 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)",
                "8 / 1 = 8 (left: 8 8 8)"
            ]
        },
        "step_5": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)\n16 + 8 = 24 (left: 24)",
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)\n8 * 16 = 128 (left: 128)",
                "8 / 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)\n8 - 1 = 7 (left: 7)",
                "8 / 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)\n1 + 8 = 9 (left: 9)",
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)"
            ],
            "values": [
                60.0,
                0.003,
                0.001,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 3.4",
                "1 <- 5.0",
                "2 <- 1.0",
                "3 <- 3.4",
                "4 <- 5.0"
            ],
            "resampled_steps": [
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)\n8 + 16 = 24 (left: 24)",
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)\n16 + 8 = 24 (left: 24)",
                "8 / 1 = 8 (left: 8 8 8)",
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)\n8 + 16 = 24 (left: 24)",
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)\n16 + 8 = 24 (left: 24)"
            ]
        },
        "step_6": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)\n8 + 16 = 24 (left: 24)\nAnswer: (8 + 8 / 1) + 8 = 24",
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)\n16 + 8 = 24 (left: 24)\nAnswer: (8 / 1) + (8 + 8) = 24",
                "8 / 1 = 8 (left: 8 8 8)\n8 - 8 = 0 (left: 0)",
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)\n8 + 16 = 24 (left: 24)\nAnswer: (8 / 1) * (8 + 8) = 24",
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)\n16 + 8 = 24 (left: 24)\nAnswer: ((8 / 1) + 8) + 8 = 24"
            ]
        },
        "results": [
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ],
        "cost": 1.0597975
    },
    "45": {
        "input": "2 2 3 8",
        "step_1": {
            "steps": [
                "3 / 2 is not possible",
                "3 / 2 = 1.5 (left: 1.5 2 8)",
                "2 / 2 = 1 (left: 1 3 8)",
                "8 - 3 = 5 (left: 5 2 8)",
                "3 * 2 = 6 (left: 6 2 8)"
            ],
            "values": [
                0.003,
                60.0,
                60.0,
                3.0,
                1.002
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- 1.1",
                "3 <- 1.2",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "2 / 2 = 1 (left: 1 3 8)",
                "2 / 2 = 1 (left: 1 3 8)",
                "3 / 2 = 1.5 (left: 1.5 2 8)",
                "2 / 2 = 1 (left: 1 3 8)",
                "3 / 2 = 1.5 (left: 1.5 2 8)"
            ]
        },
        "step_2": {
            "steps": [
                "2 / 2 = 1 (left: 1 3 8)\n3 - 1 = 2 (left: 2 8)",
                "2 / 2 = 1 (left: 1 3 8)\n1 + 3 = 4 (left: 4 8)",
                "3 / 2 = 1.5 (left: 1.5 2 8)\n1.5 / 2 = 0.75 (left: 0.75 8)",
                "2 / 2 = 1 (left: 1 3 8)\n10 - 5 = 5 (left: 5 5)",
                "3 / 2 = 1.5 (left: 1.5 2 8)\n2 * 1.5 = 3 (left: 3 8)"
            ],
            "values": [
                0.001,
                0.003,
                0.001,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 1.1"
            ],
            "resampled_steps": [
                "3 / 2 = 1.5 (left: 1.5 2 8)\n2 * 1.5 = 3 (left: 3 8)",
                "",
                "",
                "",
                "3 / 2 = 1.5 (left: 1.5 2 8)"
            ]
        },
        "step_3": {
            "steps": [
                "3 / 2 = 1.5 (left: 1.5 2 8)\n2 * 1.5 = 3 (left: 3 8)\n4 * 7 = 28 (left: 7 28)",
                "2 * 3 = 6 (left: 6 2 8)",
                "6 + 3 = 9 (left: 9 7 1)",
                "3 / 2 = 1.5 (left: 1.5 2 8)",
                "3 / 2 = 1.5 (left: 1.5 2 8)\n1.5 + 2 = 3.5 (left: 3.5 8)"
            ],
            "values": [
                0.002,
                2.001,
                3.0,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 2.4",
                "1 <- 1.2",
                "2 <- 1.2",
                "3 <- 2.4",
                "4 <- 2.4"
            ],
            "resampled_steps": [
                "3 / 2 = 1.5 (left: 1.5 2 8)\n2 * 1.5 = 3 (left: 3 8)",
                "2 / 2 = 1 (left: 1 3 8)",
                "2 / 2 = 1 (left: 1 3 8)",
                "3 / 2 = 1.5 (left: 1.5 2 8)\n2 * 1.5 = 3 (left: 3 8)",
                "3 / 2 = 1.5 (left: 1.5 2 8)\n2 * 1.5 = 3 (left: 3 8)"
            ]
        },
        "step_4": {
            "steps": [
                "3 / 2 = 1.5 (left: 1.5 2 8)\n2 * 1.5 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)",
                "2 / 2 = 1 (left: 1 3 8)\n5 - 4 = 1 (left: 1 7)",
                "2 / 2 = 1 (left: 1 3 8)\n1 + 8 = 9 (left: 9)",
                "3 / 2 = 1.5 (left: 1.5 2 8)\n2 * 1.5 = 3 (left: 3 8)\n8 / 3 = 2.66666666667 (left: 2.66666666667)",
                "3 / 2 = 1.5 (left: 1.5 2 8)\n2 * 1.5 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)"
            ],
            "values": [
                0.001,
                0.0,
                0.002,
                0.0,
                0.001
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 3.3",
                "2 <- 3.3",
                "3 <- 3.3",
                "4 <- 2.4"
            ],
            "resampled_steps": [
                "2 / 2 = 1 (left: 1 3 8)",
                "3 / 2 = 1.5 (left: 1.5 2 8)",
                "3 / 2 = 1.5 (left: 1.5 2 8)",
                "3 / 2 = 1.5 (left: 1.5 2 8)",
                "3 / 2 = 1.5 (left: 1.5 2 8)\n2 * 1.5 = 3 (left: 3 8)"
            ]
        },
        "step_5": {
            "steps": [
                "2 / 2 = 1 (left: 1 3 8)\n8 - 1 = 7 (left: 7)",
                "3 / 2 = 1.5 (left: 1.5 2 8)\n1.5 / 2 = 0.75 (left: 0.75 8)",
                "3 / 2 = 1.5 (left: 1.5 2 8)\n8 / 1.5 = 5.33 (left: 5.33 8)",
                "3 / 2 = 1.5 (left: 1.5 2 8)\n8 - 1.5 = 6.5 (left: 1.5 6.5)",
                "3 / 2 = 1.5 (left: 1.5 2 8)\n2 * 1.5 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)"
            ],
            "values": [
                0.0,
                0.001,
                1.001,
                1.002,
                60.0
            ],
            "resampled": [
                "0 <- 5.4",
                "1 <- 1.1",
                "2 <- 5.4",
                "3 <- 5.4",
                "4 <- 5.4"
            ],
            "resampled_steps": [
                "3 / 2 = 1.5 (left: 1.5 2 8)\n2 * 1.5 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "3 / 2 = 1.5 (left: 1.5 2 8)",
                "3 / 2 = 1.5 (left: 1.5 2 8)\n2 * 1.5 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "3 / 2 = 1.5 (left: 1.5 2 8)\n2 * 1.5 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "3 / 2 = 1.5 (left: 1.5 2 8)\n2 * 1.5 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)"
            ]
        },
        "step_6": {
            "steps": [
                "3 / 2 = 1.5 (left: 1.5 2 8)\n2 * 1.5 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (3 / 2) * 8 = 24",
                "3 / 2 = 1.5 (left: 1.5 2 8)\n9 - 3 = 6 (left: 3 6)",
                "3 / 2 = 1.5 (left: 1.5 2 8)\n2 * 1.5 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (3 * (2 * (3 / 2))) * 8 = 24",
                "3 / 2 = 1.5 (left: 1.5 2 8)\n2 * 1.5 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (3 * 8) = 24",
                "3 / 2 = 1.5 (left: 1.5 2 8)\n2 * 1.5 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (3 / 2) * 2 * 8 = 24"
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ],
        "cost": 1.0757995
    },
    "46": {
        "input": "2 9 9 12",
        "step_1": {
            "steps": [
                "9 - 2 = 7 (left: 7 9 12)",
                "12 - 2 = 10 (left: 9 10 12)",
                "9 - 2 = 7 (left: 7 9 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12)",
                "12 - 2 = 10 (left: 9 10 12)"
            ],
            "values": [
                2.001,
                2.001,
                1.002,
                3.0,
                2.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.1",
                "3 <- 1.4",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                "12 - 2 = 10 (left: 9 10 12)",
                "12 - 2 = 10 (left: 9 10 12)",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "12 - 2 = 10 (left: 9 10 12)",
                "12 - 9 = 3 (left: 2 9 3)",
                "12 - 2 = 10 (left: 9 10 12)\n9 + 10 = 19 (left: 12 19)",
                "12 - 2 = 10 (left: 9 10 12)\n12 / 9 = 1.33 (left: 1.33 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12)"
            ],
            "values": [
                1.002,
                2.001,
                0.003,
                0.001,
                3.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 2.0",
                "3 <- INIT",
                "4 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                "12 - 2 = 10 (left: 9 10 12)",
                "",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "9 - 2 = 7 (left: 7 9 12)",
                "9 + 2 = 11 (left: 11 9 12)",
                "12 - 2 = 10 (left: 9 10 12)\n10 / 9 = 1.11 (left: 1.11 12)",
                "9 - 2 = 7 (left: 7 9 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12)"
            ],
            "values": [
                3.0,
                21.001,
                0.002,
                22.0,
                0.003
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 3.3",
                "2 <- 1.1",
                "3 <- 3.3",
                "4 <- 3.1"
            ],
            "resampled_steps": [
                "9 + 2 = 11 (left: 11 9 12)",
                "9 - 2 = 7 (left: 7 9 12)",
                "12 - 2 = 10 (left: 9 10 12)",
                "9 - 2 = 7 (left: 7 9 12)",
                "9 + 2 = 11 (left: 11 9 12)"
            ]
        },
        "step_4": {
            "steps": [
                "9 + 2 = 11 (left: 11 9 12)\n9 / 12 = 0.75 (left: 0.75 12)",
                "9 - 2 = 7 (left: 7 9 12)\n12 / 9 = 1.33 (left: 7 1.33)",
                "12 - 2 = 10 (left: 9 10 12)\n9 / 10 = 0.9 (left: 0.9 12)",
                "9 - 2 = 7 (left: 7 9 12)\n12 - 7 = 5 (left: 5)",
                "9 + 2 = 11 (left: 11 9 12)\n11 + 9 = 20 (left: 20 12)"
            ],
            "values": [
                0.001,
                2.001,
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1.3",
                "1 <- 1.3",
                "2 <- 2.1",
                "3 <- 3.1",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12)",
                "12 - 9 = 3 (left: 2 9 3)",
                "9 + 2 = 11 (left: 11 9 12)",
                "9 - 2 = 7 (left: 7 9 12)"
            ]
        },
        "step_5": {
            "steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12)\n12 - 4.5 = 7.5 (left: 7.5 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)",
                "12 - 9 = 3 (left: 2 9 3)\n2 * 5 = 10 (left: 3 10)",
                "9 + 2 = 11 (left: 11 9 12)\n11 * 9 = 99 (left: 12)",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)"
            ],
            "values": [
                0.003,
                60.0,
                0.002,
                0.002,
                60.0
            ],
            "resampled": [
                "0 <- 5.1",
                "1 <- 5.1",
                "2 <- 5.4",
                "3 <- 5.1",
                "4 <- 5.1"
            ],
            "resampled_steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)"
            ]
        },
        "step_6": {
            "steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)"
            ],
            "values": [
                60.0,
                0.003,
                0.003,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 5.4",
                "1 <- 6.0",
                "2 <- 6.0",
                "3 <- 5.4",
                "4 <- 6.0"
            ],
            "resampled_steps": [
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)"
            ]
        },
        "step_7": {
            "steps": [
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 / 2) * (9 / (9 / 2)) = 24",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 / 2) * (9 / (9 / 2)) = 24",
                "9 - 2 = 7 (left: 7 9 12)\n9 - 7 = 2 (left: 2 12)\n12 + 2 = 14 (left: 14)",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 / 2) * (9 / (9 / 2)) = 24"
            ],
            "values": [
                0.003,
                40.001,
                60.0,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 7.2",
                "1 <- 7.1",
                "2 <- 5.1",
                "3 <- 6.0",
                "4 <- 6.3"
            ],
            "resampled_steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 / 2) * (9 / (9 / 2)) = 24",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 / 2) * (9 / (9 / 2)) = 24",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)"
            ]
        },
        "step_8": {
            "steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 / 2) * (9 / (9 / 2)) = 24\nInput: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n8 - 4 = 4 (left: 3 4)\n3 * 4 = 12 (left: 12)\n12 / 4 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 4 = 36 (left: 36)\n36 / 3 = 12 (left: 12)\nAnswer: ((3 * 4) - 8) + ((3 * 3) + 9) = 24",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 / 2) * (9 / (9 / 2)) = 24\nInput: 3 4 5 6\nSteps:\n4 + 6 = 10 (left: 3 5 10)\n3 * 5 = 15 (left: 10 15)\n15 - 10 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\nAnswer: ((3 * 5) - (4 + 6)) * 5 = 24",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 / (9 / 2)) * 12 = 24",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 / (9 / 2)) * 12 = 24"
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            }
        ],
        "cost": 1.0969025000000001
    },
    "47": {
        "input": "11 11 11 12",
        "step_1": {
            "steps": [
                "12 - 11 = 1 (left: 11 11 1)",
                "11 / 11 = 1 (left: 1 11 12)",
                "12 - 11 = 1 (left: 11 1 12)",
                "12 - 11 = 1 (left: 11 11 1)",
                "11 + 11 = 22 (left: 11 22 12)"
            ],
            "values": [
                1.001,
                20.002,
                60.0,
                1.001,
                0.003
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- 1.2",
                "3 <- INIT",
                "4 <- 1.2"
            ],
            "resampled_steps": [
                "12 - 11 = 1 (left: 11 1 12)",
                "12 - 11 = 1 (left: 11 1 12)",
                "12 - 11 = 1 (left: 11 1 12)",
                "",
                "12 - 11 = 1 (left: 11 1 12)"
            ]
        },
        "step_2": {
            "steps": [
                "12 - 11 = 1 (left: 11 1 12)\n11 - 1 = 10 (left: 10 12)",
                "12 - 11 = 1 (left: 11 1 12)\n1 / 11 = 0.09090909090909091 (left: 0.09090909090909091 12)",
                "12 - 11 = 1 (left: 11 1 12)\n11 / 1 = 11 (left: 11 12)",
                "12 - 11 = 1 (left: 11 1 12)",
                "12 - 11 = 1 (left: 11 1 12)\n7 / 9 = 0.7778 (left: 0.7778 5)"
            ],
            "values": [
                0.001,
                1.002,
                0.0,
                21.001,
                3.0
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- INIT",
                "2 <- 1.2",
                "3 <- 2.3",
                "4 <- 1.2"
            ],
            "resampled_steps": [
                "12 - 11 = 1 (left: 11 1 12)",
                "",
                "12 - 11 = 1 (left: 11 1 12)",
                "12 - 11 = 1 (left: 11 1 12)",
                "12 - 11 = 1 (left: 11 1 12)"
            ]
        },
        "step_3": {
            "steps": [
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)",
                "11 / 11 = 1 (left: 1 11 12)",
                "12 - 11 = 1 (left: 11 1 12)\n1 / 12 = 0.08333 (left: 0.08333 12)",
                "12 - 11 = 1 (left: 11 1 12)\n3 * 15 = 45 (left: 5 45 2)",
                "12 - 11 = 1 (left: 11 1 12)\n11 * 1 = 11 (left: 11 12)"
            ],
            "values": [
                60.0,
                1.002,
                1.002,
                3.0,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 3.3",
                "2 <- 3.0",
                "3 <- INIT",
                "4 <- 2.4"
            ],
            "resampled_steps": [
                "",
                "12 - 11 = 1 (left: 11 1 12)\n3 * 15 = 45 (left: 5 45 2)",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)",
                "",
                "12 - 11 = 1 (left: 11 1 12)\n7 / 9 = 0.7778 (left: 0.7778 5)"
            ]
        },
        "step_4": {
            "steps": [
                "11 * 11 = 121 (left: 11 121 12)",
                "12 - 11 = 1 (left: 11 1 12)\n3 * 15 = 45 (left: 5 45 2)\n45 / 5 = 9 (left: 9 2)",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)",
                "9 / 3 = 3 (left: 3 3 12)",
                "12 - 11 = 1 (left: 11 1 12)\n7 / 9 = 0.7778 (left: 0.7778 5)\n0.7778 + 5 = 5.7778 (left: 5.7778)"
            ],
            "values": [
                1.001,
                0.002,
                0.002,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- 2.3",
                "1 <- 3.0",
                "2 <- 3.0",
                "3 <- 3.0",
                "4 <- 2.4"
            ],
            "resampled_steps": [
                "12 - 11 = 1 (left: 11 1 12)",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 11 1 12)\n7 / 9 = 0.7778 (left: 0.7778 5)"
            ]
        },
        "step_5": {
            "steps": [
                "12 - 11 = 1 (left: 11 1 12)\n12 - 11 = 1 (left: 1 12)",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "12 - 11 = 1 (left: 11 1 12)\n7 / 9 = 0.7778 (left: 0.7778 5)\n5 / 0.7778 = 6.4286 (left: 6.4286)"
            ],
            "values": [
                2.001,
                60.0,
                60.0,
                20.002,
                0.003
            ],
            "resampled": [
                "0 <- 5.2",
                "1 <- 5.2",
                "2 <- 5.1",
                "3 <- 5.1",
                "4 <- 5.2"
            ],
            "resampled_steps": [
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)"
            ]
        },
        "step_6": {
            "steps": [
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (11 / (11 - 11)) + 12 = 24",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 + (12 / (11 - 11))) = 24",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24"
            ],
            "values": [
                40.001,
                60.0,
                60.0,
                20.002,
                60.0
            ],
            "resampled": [
                "0 <- 6.1",
                "1 <- 5.2",
                "2 <- 6.4",
                "3 <- 6.1",
                "4 <- 3.0"
            ],
            "resampled_steps": [
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)"
            ]
        },
        "step_7": {
            "steps": [
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24\nInput: 3 3 5 7\nSteps:\n3 + 7 = 10 (left: 3 5 10)\n10 - 5 = 5 (left: 3 5)\n5 * 3 = 15 (left: 15)\n15 + 9 = 24 (left: 24)\nAnswer: ((3 + 7) - 5) * 3 = 24",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24\nInput: 3 3 7 8\nSteps:\n3 + 7 = 10 (left: 3 8 10)\n8 - 3 = 5 (left: 5 10)\n5 * 10 = 50 (left: 50)\n50 / 2 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: ((3 + 7) * 10 / 2) - 1 = 24",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24\nInput: 3 4 5 6\nSteps:\n4 + 6 = 10 (left: 3 5 10)\n5 - 3 = 2 (left: 2 10)\n2 * 10 = 20 (left: 20)\n20 + 5 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: ((4 + 6) * (5 - 3)) + 1 = 24",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)"
            ],
            "values": [
                60.0,
                60.0,
                40.0,
                60.0,
                0.002
            ],
            "resampled": [
                "0 <- 5.2",
                "1 <- 5.1",
                "2 <- 6.2",
                "3 <- 6.1",
                "4 <- 5.1"
            ],
            "resampled_steps": [
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)"
            ]
        },
        "step_8": {
            "steps": [
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (11 - 11) / (11 / 12) = 24",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((11 - 11) / 1) + 12 = 24",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24\nInput: 3 3 7 8\nSteps:\n7 + 8 = 15 (left: 3 3 15)\n3 * 3 = 9 (left: 9 15)\n15 - 9 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((3 * 3) + (7 + 8)) * 4 = 24",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24\nInput: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n5 - 3 = 2 (left: 2 21)\n21 + 2 = 23 (left 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24"
            ],
            "values": [
                40.001,
                60.0,
                40.0,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 8.4",
                "1 <- 8.4",
                "2 <- 8.2",
                "3 <- 8.3",
                "4 <- 6.4"
            ],
            "resampled_steps": [
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24\nInput: 3 3 7 8\nSteps:\n7 + 8 = 15 (left: 3 3 15)\n3 * 3 = 9 (left: 9 15)\n15 - 9 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((3 * 3) + (7 + 8)) * 4 = 24",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24\nInput: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n5 - 3 = 2 (left: 2 21)\n21 + 2 = 23 (left 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24"
            ]
        },
        "step_9": {
            "steps": [
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24\nInput: 3 3 6 8\n\nSteps:\n3 * 8 = 24 (left: 3 6 24)\n6 - 3 = 3 (left: 3 3)\n3 * 3 = 9 (left: 9)\n9 * 24 = 24 (left: 24)\n\nAnswer: (3 * 8) + (6 - 3) = 24",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24\nInput: 3 3 7 9\nSteps:\n7 - 3 = 4 (left: 3 4 9)\n9 - 4 = 5 (left: 3 5)\n3 * 5 = 15 (left: 15)\n15 + 9 = 24 (left: 24)\nAnswer: (3 * (9 - (7 - 3))) + 5 = 24",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24\nInput: 3 3 7 8\nSteps:\n7 + 8 = 15 (left: 3 3 15)\n3 * 3 = 9 (left: 9 15)\n15 - 9 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((3 * 3) + (7 + 8)) * 4 = 24\nInput: 2 2 2 12\nSteps:\n2 * 2 = 4 (left: 4 2 12)\n4 + 2 = 6 (left: 6 12)\n6 * 12 = 72 (left: 72)\nAnswer: (2 * (2 + 2)) * 12 = 24",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24\nInput: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n5 - 3 = 2 (left: 2 21)\n21 + 2 = 23 (left 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26 (left: 26)\n26 - 3 = 23 (left: 23)\n23 + 3 = 26\nAnswer: There is no possible way to obtain 24 using the numbers 3, 3, 5, 7 and the basic arithmetic operations.",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24\nInput: 3 5 6 7\nSteps:\n7 - 6 = 1 (left: 3 5 1)\n5 + 1 = 6 (left: 3 6)\n6 * 3 = 18 (left: 18)\n18 + 6 = 24 (left: 24)\nAnswer: ((5 - 6) + 3) * 6 = 24"
            ],
            "values": [
                60.0,
                60.0,
                60.0,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 9.2",
                "1 <- 7.0",
                "2 <- 7.3",
                "3 <- 8.4",
                "4 <- 8.4"
            ],
            "resampled_steps": [
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24\nInput: 3 3 7 8\nSteps:\n7 + 8 = 15 (left: 3 3 15)\n3 * 3 = 9 (left: 9 15)\n15 - 9 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((3 * 3) + (7 + 8)) * 4 = 24\nInput: 2 2 2 12\nSteps:\n2 * 2 = 4 (left: 4 2 12)\n4 + 2 = 6 (left: 6 12)\n6 * 12 = 72 (left: 72)\nAnswer: (2 * (2 + 2)) * 12 = 24",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24\nInput: 3 3 5 7\nSteps:\n3 + 7 = 10 (left: 3 5 10)\n10 - 5 = 5 (left: 3 5)\n5 * 3 = 15 (left: 15)\n15 + 9 = 24 (left: 24)\nAnswer: ((3 + 7) - 5) * 3 = 24",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24\nInput: 3 4 5 6\nSteps:\n4 + 6 = 10 (left: 3 5 10)\n5 - 3 = 2 (left: 2 10)\n2 * 10 = 20 (left: 20)\n20 + 5 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: ((4 + 6) * (5 - 3)) + 1 = 24",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24"
            ]
        },
        "step_10": {
            "steps": [
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24\nInput: 3 3 7 8\nSteps:\n7 + 8 = 15 (left: 3 3 15)\n3 * 3 = 9 (left: 9 15)\n15 - 9 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((3 * 3) + (7 + 8)) * 4 = 24\nInput: 2 2 2 12\nSteps:\n2 * 2 = 4 (left: 4 2 12)\n4 + 2 = 6 (left: 6 12)\n6 * 12 = 72 (left: 72)\nAnswer: (2 * (2 + 2)) * 12 = 24\nInput: 1 4 5 6\nSteps:\n4 + 5 = 9 (left: 1 6 9)\n6 - 1 = 5 (left: 5 9)\n5 * 9 = 45 (left: 45)\n45 - 21 = 24 (left: 24)\nAnswer: ((4 + 5) - 1) * 9 = 24",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24\nInput: 3 3 5 7\nSteps:\n3 + 7 = 10 (left: 3 5 10)\n10 - 5 = 5 (left: 3 5)\n5 * 3 = 15 (left: 15)\n15 + 9 = 24 (left: 24)\nAnswer: ((3 + 7) - 5) * 3 = 24\nInput: 2 3 4 9\nSteps:\n3 * 9 = 27 (left: 2 4 27)\n4 + 27 = 31 (left: 2 31)\n31 - 2 = 29 (left: 29)\nAnswer: (3 * 9) + (4 - 2) = 24",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24\nInput: 3 4 5 6\nSteps:\n4 + 6 = 10 (left: 3 5 10)\n5 - 3 = 2 (left: 2 10)\n2 * 10 = 20 (left: 20)\n20 + 5 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: ((4 + 6) * (5 - 3)) + 1 = 24\nInput: 2 3 5 7\nSteps:\n3 + 7 = 10 (left: 2 5 10)\n5 * 2 = 10 (left: 10 10)\n10 + 10 = 20 (left: 20)\n20 + 5 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: ((3 + 7) * (5 * 2)) + 1 = 24",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24\nInput: 3 3 5 7\n\n5 - 3 = 2 (left: 2 3 7)\n7 - 3 = 4 (left: 2 4)\n2 * 4 = 8 (left: 8)\n8 * 3 = 24 (left: 24)\n\nAnswer: ((5 - 3) * (7 - 3)) * 3 = 24",
                "12 - 11 = 1 (left: 11 1 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (12 / (12 - 11)) + 11 = 24\nInput: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n8 - 4 = 4 (left: 3 4)\n4 * 3 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((3 + 5) - 4) * (3 * 2) = 24"
            ],
            "values": [
                40.0,
                60.0,
                60.0,
                60.0,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.126053
    },
    "48": {
        "input": "3 8 13 13",
        "step_1": {
            "steps": [
                "13 / 3 = 4.33 (left: 4.33 13 13)",
                "8 / 3 = 2.66666666667 (left: 2.66666666667 8 13)",
                "13 - 8 = 5 (left: 3 5 13)",
                "13 - 8 = 5 (left: 3 5 13)",
                "13 - 8 = 5 (left: 3 5 13)"
            ],
            "values": [
                3.0,
                1.002,
                40.001,
                20.002,
                1.002
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- INIT",
                "2 <- 1.2",
                "3 <- 1.3",
                "4 <- 1.2"
            ],
            "resampled_steps": [
                "13 - 8 = 5 (left: 3 5 13)",
                "",
                "13 - 8 = 5 (left: 3 5 13)",
                "13 - 8 = 5 (left: 3 5 13)",
                "13 - 8 = 5 (left: 3 5 13)"
            ]
        },
        "step_2": {
            "steps": [
                "13 - 8 = 5 (left: 3 5 13)\n6 - 4 = 2 (left: 2 9)",
                "3 + 8 = 11 (left: 11 13 13)",
                "13 - 8 = 5 (left: 3 5 13)\nInput: 1 3 9",
                "13 - 8 = 5 (left: 3 5 13)\n3 + 5 = 8 (left: 8 13)",
                "13 - 8 = 5 (left: 3 5 13)\n9 / 4 = 2.25 (left: 6 2.25)"
            ],
            "values": [
                0.001,
                0.003,
                0.003,
                0.001,
                0.003
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- 1.3",
                "3 <- INIT",
                "4 <- 1.3"
            ],
            "resampled_steps": [
                "13 - 8 = 5 (left: 3 5 13)",
                "13 - 8 = 5 (left: 3 5 13)",
                "13 - 8 = 5 (left: 3 5 13)",
                "",
                "13 - 8 = 5 (left: 3 5 13)"
            ]
        },
        "step_3": {
            "steps": [
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)",
                "13 - 8 = 5 (left: 3 5 13)\n5 * 3 = 15 (left: 15 13)",
                "13 - 8 = 5 (left: 3 5 13)\n5 - 3 = 2 (left: 2 13)",
                "8 - 3 = 5 (left: 5 8 13)",
                "13 - 8 = 5 (left: 3 5 13)\n6 + 9 = 15 (left: 15 15 21)"
            ],
            "values": [
                60.0,
                0.003,
                0.003,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 3.0",
                "2 <- 3.0",
                "3 <- INIT",
                "4 <- 3.0"
            ],
            "resampled_steps": [
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)",
                "",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)"
            ]
        },
        "step_4": {
            "steps": [
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n12 / 6 = 2 (left: 4 2)",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n12 - 4 = 8 (left: 8 6)",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 / 4 = 1.5 (left: 1.5 12)",
                "13 - 8 = 5 (left: 3 5 13)",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 / 4 = 1.5 (left: 1.5 6)"
            ],
            "values": [
                0.001,
                0.003,
                0.001,
                20.002,
                1.0
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 1.2",
                "2 <- 3.3",
                "3 <- 3.0",
                "4 <- 4.3"
            ],
            "resampled_steps": [
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)",
                "13 - 8 = 5 (left: 3 5 13)",
                "8 - 3 = 5 (left: 5 8 13)",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)",
                "13 - 8 = 5 (left: 3 5 13)"
            ]
        },
        "step_5": {
            "steps": [
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)",
                "13 - 8 = 5 (left: 3 5 13)\n13 / 3 = 4 (left: 5 4)",
                "8 - 3 = 5 (left: 5 8 13)\n8 + 5 = 13 (left: 5 13)",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 / 4 = 1.5 (left: 1.5 12)",
                "13 - 8 = 5 (left: 3 5 13)\n3 + 5 = 8 (left: 8 13)"
            ],
            "values": [
                60.0,
                1.0,
                0.002,
                0.002,
                0.001
            ],
            "resampled": [
                "0 <- 5.0",
                "1 <- 5.0",
                "2 <- 3.0",
                "3 <- 5.0",
                "4 <- 5.0"
            ],
            "resampled_steps": [
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)"
            ]
        },
        "step_6": {
            "steps": [
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)\nAnswer: (13 - 8) * (8 - 4) = 24",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)\nAnswer: 6 * (8 - (13 - 13)) = 24",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n1.5 * 10 = 15 (left: 15 24)",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)\nAnswer: (13 - 8) * (5 + 13) = 24",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)\nAnswer: 4 * (8 - (13 - 13)) = 24"
            ],
            "values": [
                0.003,
                60.0,
                0.003,
                20.002,
                0.003
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 1.2",
                "2 <- 1.2",
                "3 <- 6.1",
                "4 <- 6.1"
            ],
            "resampled_steps": [
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)",
                "13 - 8 = 5 (left: 3 5 13)",
                "13 - 8 = 5 (left: 3 5 13)",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)\nAnswer: 6 * (8 - (13 - 13)) = 24",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)\nAnswer: 6 * (8 - (13 - 13)) = 24"
            ]
        },
        "step_7": {
            "steps": [
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\nNo more possible next steps.",
                "13 - 8 = 5 (left: 3 5 13)\n13 - 3 = 10 (left: 5 10)",
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)\nAnswer: 6 * (8 - (13 - 13)) = 24\nInput: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n12 * 3 = 36 (left: 36)\n36 / 6 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((5 + 7) - (6 - 3)) * 6 = 24",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)\nAnswer: 6 * (8 - (13 - 13)) = 24\nInput: 2 3 4 6\nSteps:\n3 + 4 = 7 (left: 2 6 7)\n7 - 2 = 5 (left: 5 6)\n5 * 6 = 30 (left: 30)\nAnswer: (3 + 4) * (2 + 6) = 24"
            ],
            "values": [
                0.003,
                21.001,
                60.0,
                40.0,
                60.0
            ],
            "resampled": [
                "0 <- 6.1",
                "1 <- 5.0",
                "2 <- 7.3",
                "3 <- 3.0",
                "4 <- 7.4"
            ],
            "resampled_steps": [
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)\nAnswer: 6 * (8 - (13 - 13)) = 24",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)\nAnswer: 6 * (8 - (13 - 13)) = 24\nInput: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n12 * 3 = 36 (left: 36)\n36 / 6 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((5 + 7) - (6 - 3)) * 6 = 24",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)\nAnswer: 6 * (8 - (13 - 13)) = 24\nInput: 2 3 4 6\nSteps:\n3 + 4 = 7 (left: 2 6 7)\n7 - 2 = 5 (left: 5 6)\n5 * 6 = 30 (left: 30)\nAnswer: (3 + 4) * (2 + 6) = 24"
            ]
        },
        "step_8": {
            "steps": [
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)\nAnswer: 6 * (8 - (13 - 13)) = 24\nInput: 3 7 8 9\nSteps:\n7 + 8 = 15 (left: 3 9 15)\n9 - 3 = 6 (left: 6 15)\n15 - 6 = 9 (left: 9)\n9 * 3 = 27 (left: 27)\nAnswer: ((7 + 8) - 9) * 3 = 24",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)\nAnswer: (13 - 8) * (8 - 4) = 24",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)\nAnswer: 6 * (8 - (13 - 13)) = 24\nInput: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n12 * 3 = 36 (left: 36)\n36 / 6 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((5 + 7) - (6 - 3)) * 6 = 24\nInput: 1 3 7 8\nSteps:\n7 + 8 = 15 (left: 1 3 15)\n15 - 3 = 12 (left: 1 12)\n12 * 1 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: (1 + (7 + 8)) * 2 = 24",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n36 - (-10.5) = 46.5 (left: 46.5 34.5)",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)\nAnswer: 6 * (8 - (13 - 13)) = 24\nInput: 2 3 4 6\nSteps:\n3 + 4 = 7 (left: 2 6 7)\n7 - 2 = 5 (left: 5 6)\n5 * 6 = 30 (left: 30)\nAnswer: (3 + 4) * (2 + 6) = 24\nSorry, there is no solution using the numbers 2, 3, 4, and 6 to get the result of 24."
            ],
            "values": [
                60.0,
                0.003,
                60.0,
                2.0,
                0.003
            ],
            "resampled": [
                "0 <- 7.4",
                "1 <- 6.1",
                "2 <- 7.4",
                "3 <- 7.1",
                "4 <- 7.4"
            ],
            "resampled_steps": [
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)\nAnswer: 6 * (8 - (13 - 13)) = 24\nInput: 2 3 4 6\nSteps:\n3 + 4 = 7 (left: 2 6 7)\n7 - 2 = 5 (left: 5 6)\n5 * 6 = 30 (left: 30)\nAnswer: (3 + 4) * (2 + 6) = 24",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)\nAnswer: 6 * (8 - (13 - 13)) = 24",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)\nAnswer: 6 * (8 - (13 - 13)) = 24\nInput: 2 3 4 6\nSteps:\n3 + 4 = 7 (left: 2 6 7)\n7 - 2 = 5 (left: 5 6)\n5 * 6 = 30 (left: 30)\nAnswer: (3 + 4) * (2 + 6) = 24",
                "13 - 8 = 5 (left: 3 5 13)\n13 - 3 = 10 (left: 5 10)",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)\nAnswer: 6 * (8 - (13 - 13)) = 24\nInput: 2 3 4 6\nSteps:\n3 + 4 = 7 (left: 2 6 7)\n7 - 2 = 5 (left: 5 6)\n5 * 6 = 30 (left: 30)\nAnswer: (3 + 4) * (2 + 6) = 24"
            ]
        },
        "step_9": {
            "steps": [
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)\nAnswer: 6 * (8 - (13 - 13)) = 24\nInput: 2 3 4 6\nSteps:\n3 + 4 = 7 (left: 2 6 7)\n7 - 2 = 5 (left: 5 6)\n5 * 6 = 30 (left: 30)\nAnswer: (3 + 4) * (2 + 6) = 24\nInput: 1 3 5 7\nSteps:\n3 * 7 = 21 (left: 1 5 21)\n5 - 1 = 4 (left: 4 21)\n21 - 4 = 17 (left: 17)\n17 + 7 = 24 (left: 24)\nAnswer: ((5 - 1) * 7) + 3 = 24",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)\nAnswer: 6 * (8 - (13 - 13)) = 24\nInput: 3 6 7 8\nSteps:\n7 + 8 = 15 (left: 3 6 15)\n15 - 6 = 9 (left: 3 9)\n9 * 3 = 27 (left: 27)\nAnswer: (3 * (7 + 8)) - 6 = 24",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)\nAnswer: 6 * (8 - (13 - 13)) = 24\nInput: 2 3 4 6\nSteps:\n3 + 4 = 7 (left: 2 6 7)\n7 - 2 = 5 (left: 5 6)\n5 * 6 = 30 (left: 30)\nAnswer: (3 + 4) * (2 + 6) = 24\nThere is no way to obtain 24 using the numbers 2, 3, 4, and 6 with the given arithmetic operations.",
                "13 - 8 = 5 (left: 3 5 13)\n13 - 3 = 10 (left: 5 10)\nInput: 4 16 64",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)\nAnswer: 6 * (8 - (13 - 13)) = 24\nInput: 2 3 4 6\nSteps:\n3 + 4 = 7 (left: 2 6 7)\n7 - 2 = 5 (left: 5 6)\n5 * 6 = 30 (left: 30)\nAnswer: (3 + 4) * (2 + 6) = 24\nInput: 3 5 7 8\nSteps:\n7 - 5 = 2 (left: 2 3 8)\n2 * 3 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\nAnswer: (7 - 5) * (3 * 8) = 24"
            ],
            "values": [
                40.0,
                60.0,
                0.003,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 9.1",
                "1 <- 9.0",
                "2 <- 4.3",
                "3 <- 7.4",
                "4 <- 8.2"
            ],
            "resampled_steps": [
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)\nAnswer: 6 * (8 - (13 - 13)) = 24\nInput: 3 6 7 8\nSteps:\n7 + 8 = 15 (left: 3 6 15)\n15 - 6 = 9 (left: 3 9)\n9 * 3 = 27 (left: 27)\nAnswer: (3 * (7 + 8)) - 6 = 24",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)\nAnswer: 6 * (8 - (13 - 13)) = 24\nInput: 2 3 4 6\nSteps:\n3 + 4 = 7 (left: 2 6 7)\n7 - 2 = 5 (left: 5 6)\n5 * 6 = 30 (left: 30)\nAnswer: (3 + 4) * (2 + 6) = 24\nInput: 1 3 5 7\nSteps:\n3 * 7 = 21 (left: 1 5 21)\n5 - 1 = 4 (left: 4 21)\n21 - 4 = 17 (left: 17)\n17 + 7 = 24 (left: 24)\nAnswer: ((5 - 1) * 7) + 3 = 24",
                "13 - 8 = 5 (left: 3 5 13)",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)\nAnswer: 6 * (8 - (13 - 13)) = 24\nInput: 2 3 4 6\nSteps:\n3 + 4 = 7 (left: 2 6 7)\n7 - 2 = 5 (left: 5 6)\n5 * 6 = 30 (left: 30)\nAnswer: (3 + 4) * (2 + 6) = 24",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)\nAnswer: 6 * (8 - (13 - 13)) = 24\nInput: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n12 * 3 = 36 (left: 36)\n36 / 6 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((5 + 7) - (6 - 3)) * 6 = 24\nInput: 1 3 7 8\nSteps:\n7 + 8 = 15 (left: 1 3 15)\n15 - 3 = 12 (left: 1 12)\n12 * 1 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: (1 + (7 + 8)) * 2 = 24"
            ]
        },
        "step_10": {
            "steps": [
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)\nAnswer: 6 * (8 - (13 - 13)) = 24\nInput: 3 6 7 8\nSteps:\n7 + 8 = 15 (left: 3 6 15)\n15 - 6 = 9 (left: 3 9)\n9 * 3 = 27 (left: 27)\nAnswer: (3 * (7 + 8)) - 6 = 24\nInput: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n4 - 3 = 1 (left: 1 12)\n1 * 12 = 12 (left: 12)\n12 * 2 = 24\nAnswer: ((2 * 6) * (4 - 3)) * 2 = 24",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)\nAnswer: 6 * (8 - (13 - 13)) = 24\nInput: 2 3 4 6\nSteps:\n3 + 4 = 7 (left: 2 6 7)\n7 - 2 = 5 (left: 5 6)\n5 * 6 = 30 (left: 30)\nAnswer: (3 + 4) * (2 + 6) = 24\nInput: 1 3 5 7\nSteps:\n3 * 7 = 21 (left: 1 5 21)\n5 - 1 = 4 (left: 4 21)\n21 - 4 = 17 (left: 17)\n17 + 7 = 24 (left: 24)\nAnswer: ((5 - 1) * 7) + 3 = 24\nInput: 2 4 6 9\nSteps:\n4 * 6 = 24 (left: 2 9 24)\n9 - 2 = 7 (left: 7 24)\n7 * 24 = 168 (left: 168)\nAnswer: (4 * 6) * (9 - 2) = 24",
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)\nAnswer: 6 * (8 - (13 - 13)) = 24\nInput: 2 3 4 6\nSteps:\n3 + 4 = 7 (left: 2 6 7)\n7 - 2 = 5 (left: 5 6)\n5 * 6 = 30 (left: 30)\nAnswer: (3 + 4) * (2 + 6) = 24\nThere is no solution with the given numbers to obtain 24 using basic arithmetic operations.",
                "13 - 8 = 5 (left: 3 5 13)\n8 - 4 = 4 (left: 4 6 12)\n6 * 4 = 24 (left: 24)\nAnswer: 6 * (8 - (13 - 13)) = 24\nInput: 3 5 6 7\nSteps:\n5 + 7 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n12 * 3 = 36 (left: 36)\n36 / 6 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: ((5 + 7) - (6 - 3)) * 6 = 24\nInput: 1 3 7 8\nSteps:\n7 + 8 = 15 (left: 1 3 15)\n15 - 3 = 12 (left: 1 12)\n12 * 1 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: (1 + (7 + 8)) * 2 = 24\nInput: 2 3 6 8\nSteps:\n6 + 8 = 14 (left: 2 3 14)\n14 - 3 = 11 (left: 2 11)\n11 * 2 = 22 (left: 22)\n22 + 2 = 24 (left: 24)\nAnswer: ((6 + 8) - 3) * 2 + 2 = 24"
            ],
            "values": [
                60.0,
                60.0,
                60.0,
                0.003,
                40.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.1566865
    },
    "49": {
        "input": "9 9 12 12",
        "step_1": {
            "steps": [
                "5 + 3 = 8 (left: 8 5 7)",
                "9 * 9 = 81 (left: 12 12 81)",
                "9 * 9 = 81 (left: 12 12 81)",
                "9 / 9 = 1 (left: 1 12 12)",
                "9 - 9 = 0 (left: 0 12 12)"
            ],
            "values": [
                3.0,
                2.001,
                1.002,
                0.002,
                60.0
            ],
            "resampled": [
                "0 <- 1.4",
                "1 <- INIT",
                "2 <- INIT",
                "3 <- INIT",
                "4 <- 1.0"
            ],
            "resampled_steps": [
                "9 - 9 = 0 (left: 0 12 12)",
                "",
                "",
                "",
                "5 + 3 = 8 (left: 8 5 7)"
            ]
        },
        "step_2": {
            "steps": [
                "9 - 9 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)",
                "12 - 9 = 3 (left: 3 12 12)",
                "12 - 9 = 3 (left: 3 12 12)",
                "12 - 9 = 3 (left: 3 12 12)",
                "5 + 3 = 8 (left: 8 5 7)\n5 + 7 = 12 (left: 8 12)"
            ],
            "values": [
                20.002,
                40.001,
                60.0,
                41.0,
                0.003
            ],
            "resampled": [
                "0 <- 1.4",
                "1 <- 2.2",
                "2 <- 2.0",
                "3 <- 2.1",
                "4 <- 2.1"
            ],
            "resampled_steps": [
                "9 - 9 = 0 (left: 0 12 12)",
                "12 - 9 = 3 (left: 3 12 12)",
                "9 - 9 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)",
                "12 - 9 = 3 (left: 3 12 12)",
                "12 - 9 = 3 (left: 3 12 12)"
            ]
        },
        "step_3": {
            "steps": [
                "9 - 9 = 0 (left: 0 12 12)\n12 / 0 is undefined",
                "12 - 9 = 3 (left: 3 12 12)\n12 / 3 = 4 (left: 4 12)",
                "9 - 9 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "12 - 9 = 3 (left: 3 12 12)\n3 + 12 = 15 (left: 12 15)",
                "12 - 9 = 3 (left: 3 12 12)\n12 - 12 = 0 (left: 3 0)"
            ],
            "values": [
                0.003,
                0.003,
                0.002,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 2.2",
                "2 <- 2.3",
                "3 <- 1.4",
                "4 <- 1.4"
            ],
            "resampled_steps": [
                "12 - 9 = 3 (left: 3 12 12)",
                "12 - 9 = 3 (left: 3 12 12)",
                "12 - 9 = 3 (left: 3 12 12)",
                "9 - 9 = 0 (left: 0 12 12)",
                "9 - 9 = 0 (left: 0 12 12)"
            ]
        },
        "step_4": {
            "steps": [
                "12 - 9 = 3 (left: 3 12 12)\n3 + 12 = 15 (left: 12 15)",
                "12 - 9 = 3 (left: 3 12 12)\n3 * 12 = 36 (left: 12 12 36)",
                "12 - 9 = 3 (left: 3 12 12)\n12 - 3 = 9 (left: 9 12)",
                "9 - 9 = 0 (left: 0 12 12)\n0 * 12 = 0 (left: 12 12)",
                "9 - 9 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)"
            ],
            "values": [
                0.003,
                41.0,
                0.003,
                60.0,
                40.001
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 4.4",
                "2 <- 2.3",
                "3 <- 4.3",
                "4 <- 2.3"
            ],
            "resampled_steps": [
                "12 - 9 = 3 (left: 3 12 12)",
                "9 - 9 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)",
                "12 - 9 = 3 (left: 3 12 12)",
                "9 - 9 = 0 (left: 0 12 12)\n0 * 12 = 0 (left: 12 12)",
                "12 - 9 = 3 (left: 3 12 12)"
            ]
        },
        "step_5": {
            "steps": [
                "12 - 9 = 3 (left: 3 12 12)\n3 * 12 = 36 (left: 12 36)",
                "9 - 9 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "12 - 9 = 3 (left: 3 12 12)\n12 / 4 = 3 (left: 3 12)",
                "9 - 9 = 0 (left: 0 12 12)\n0 * 12 = 0 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "12 - 9 = 3 (left: 3 12 12)\n3 * 12 = 36 (left: 12 36)"
            ],
            "values": [
                20.002,
                0.001,
                40.001,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 5.2",
                "1 <- 4.4",
                "2 <- 4.4",
                "3 <- 5.0",
                "4 <- 2.2"
            ],
            "resampled_steps": [
                "12 - 9 = 3 (left: 3 12 12)\n12 / 4 = 3 (left: 3 12)",
                "9 - 9 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)",
                "9 - 9 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)",
                "12 - 9 = 3 (left: 3 12 12)\n3 * 12 = 36 (left: 12 36)",
                "12 - 9 = 3 (left: 3 12 12)"
            ]
        },
        "step_6": {
            "steps": [
                "12 - 9 = 3 (left: 3 12 12)\n12 / 4 = 3 (left: 3 12)\n12 - 3 = 9 (left: 9 12)",
                "9 - 9 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "9 - 9 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "12 - 9 = 3 (left: 3 12 12)\n3 * 12 = 36 (left: 12 36)\n36 / 12 = 3 (left: 3 12)",
                "12 - 9 = 3 (left: 3 12 12)\n12 - 3 = 9 (left: 9 12)"
            ],
            "values": [
                1.002,
                0.003,
                60.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 6.2",
                "2 <- 6.2",
                "3 <- 2.3",
                "4 <- 4.3"
            ],
            "resampled_steps": [
                "12 - 9 = 3 (left: 3 12 12)",
                "9 - 9 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "9 - 9 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "12 - 9 = 3 (left: 3 12 12)",
                "9 - 9 = 0 (left: 0 12 12)\n0 * 12 = 0 (left: 12 12)"
            ]
        },
        "step_7": {
            "steps": [
                "12 - 9 = 3 (left: 3 12 12)\nPossible next steps:",
                "9 - 9 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((9 - 9) + 12) + 12 = 24",
                "9 - 9 = 0 (left: 0 12 12)\n0 + 12 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((9 - 9) + 12) + 12 = 24",
                "12 - 9 = 3 (left: 3 12 12)\n12 / 3 = 4 (left: 4 12)",
                "9 - 9 = 0 (left: 0 12 12)\n0 * 12 = 0 (left: 12 12)\n12 + 12 = 24 (left: 24)"
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 1.174844
    }
}