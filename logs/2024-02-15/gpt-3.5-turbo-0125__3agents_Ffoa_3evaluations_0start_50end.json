{
    "0": {
        "input": "1 1 4 6",
        "step_1": {
            "steps": [
                "6 / 1 = 6 (left: 1 4 6)",
                "6 - 4 = 2 (left: 1 2 6)",
                "Possible next steps:"
            ],
            "values": [
                60.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 1.0",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "6 / 1 = 6 (left: 1 4 6)",
                "6 / 1 = 6 (left: 1 4 6)",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "6 / 1 = 6 (left: 1 4 6)\n6 - 4 = 2 (left: 2 6)",
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)",
                "6 - 1 = 5 (left: 1 4 5)"
            ],
            "values": [
                2.0,
                60.0,
                3.0
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 1.0",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)",
                "6 / 1 = 6 (left: 1 4 6)",
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)"
            ]
        },
        "step_3": {
            "steps": [
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "6 / 1 = 6 (left: 1 4 6)\n10 / 2 = 5 (left: 4 6 5)",
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)"
            ],
            "values": [
                0.001,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- INIT",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "6 / 1 = 6 (left: 1 4 6)\n10 / 2 = 5 (left: 4 6 5)",
                "",
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)"
            ]
        },
        "step_4": {
            "steps": [
                "6 / 1 = 6 (left: 1 4 6)\n10 / 2 = 5 (left: 4 6 5)\n4 * 6 = 24 (left: 5 24)",
                "4 * 1 = 4 (left: 1 4 6)",
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)\n1 + 10 = 11 (left: 11) "
            ],
            "values": [
                0.0,
                60.0,
                0.001
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- INIT",
                "2 <- 3.1"
            ],
            "resampled_steps": [
                "6 / 1 = 6 (left: 1 4 6)\n10 / 2 = 5 (left: 4 6 5)",
                "",
                "6 / 1 = 6 (left: 1 4 6)\n10 / 2 = 5 (left: 4 6 5)"
            ]
        },
        "step_5": {
            "steps": [
                "6 / 1 = 6 (left: 1 4 6)\n10 / 2 = 5 (left: 4 6 5)\n9 / 3 = 3 (left: 3 12 4)",
                "12 - 3 = 9 (left: 9 9 4)",
                "6 / 1 = 6 (left: 1 4 6)\n10 / 2 = 5 (left: 4 6 5)\n9 - 2 = 7 (left: 3 7 7)"
            ],
            "values": [
                22.0,
                3.0,
                60.0
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 3.1",
                "2 <- 4.1"
            ],
            "resampled_steps": [
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)",
                "6 / 1 = 6 (left: 1 4 6)\n10 / 2 = 5 (left: 4 6 5)",
                "4 * 1 = 4 (left: 1 4 6)"
            ]
        },
        "step_6": {
            "steps": [
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)\n1 + 10 = 11 (left: 11)",
                "6 / 1 = 6 (left: 1 4 6)\n10 / 2 = 5 (left: 4 6 5)\n9 / 3 = 3 (left: 3 12 4)",
                "4 * 1 = 4 (left: 1 4 6)\n1 + 4 = 5 (left: 5 6)"
            ],
            "values": [
                0.002,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 6.1",
                "1 <- 6.1",
                "2 <- 4.1"
            ],
            "resampled_steps": [
                "6 / 1 = 6 (left: 1 4 6)\n10 / 2 = 5 (left: 4 6 5)\n9 / 3 = 3 (left: 3 12 4)",
                "6 / 1 = 6 (left: 1 4 6)\n10 / 2 = 5 (left: 4 6 5)\n9 / 3 = 3 (left: 3 12 4)",
                "4 * 1 = 4 (left: 1 4 6)"
            ]
        },
        "step_7": {
            "steps": [
                "6 / 1 = 6 (left: 1 4 6)\n10 / 2 = 5 (left: 4 6 5)\n9 / 3 = 3 (left: 3 12 4)\n3 * 4 = 12 (left: 12 12)",
                "6 / 1 = 6 (left: 1 4 6)\n10 / 2 = 5 (left: 4 6 5)\n9 / 3 = 3 (left: 3 12 4)\n4 * 3 = 12 (left: 12)",
                "4 * 1 = 4 (left: 1 4 6)\n5 * 3 = 15 (left: 15 12)"
            ],
            "values": [
                20.002,
                0.002,
                0.002
            ],
            "resampled": [
                "0 <- 5.0",
                "1 <- 6.1",
                "2 <- 5.2"
            ],
            "resampled_steps": [
                "6 / 1 = 6 (left: 1 4 6)\n10 / 2 = 5 (left: 4 6 5)\n9 / 3 = 3 (left: 3 12 4)",
                "6 / 1 = 6 (left: 1 4 6)\n10 / 2 = 5 (left: 4 6 5)\n9 / 3 = 3 (left: 3 12 4)",
                "6 / 1 = 6 (left: 1 4 6)\n10 / 2 = 5 (left: 4 6 5)\n9 - 2 = 7 (left: 3 7 7)"
            ]
        },
        "step_8": {
            "steps": [
                "6 / 1 = 6 (left: 1 4 6)\n10 / 2 = 5 (left: 4 6 5)\n9 / 3 = 3 (left: 3 12 4)\n12 - 3 = 9 (left: 9 4)",
                "6 / 1 = 6 (left: 1 4 6)\n10 / 2 = 5 (left: 4 6 5)\n9 / 3 = 3 (left: 3 12 4)\n12 / 3 = 4 (left: 4 4)",
                "6 / 1 = 6 (left: 1 4 6)\n10 / 2 = 5 (left: 4 6 5)\n9 - 2 = 7 (left: 3 7 7)\n7 / 3 = 2.33 (left: 2.33 7)"
            ],
            "values": [
                41.0,
                2.001,
                0.002
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 5.2",
                "2 <- 5.2"
            ],
            "resampled_steps": [
                "6 / 1 = 6 (left: 1 4 6)",
                "6 / 1 = 6 (left: 1 4 6)\n10 / 2 = 5 (left: 4 6 5)\n9 - 2 = 7 (left: 3 7 7)",
                "6 / 1 = 6 (left: 1 4 6)\n10 / 2 = 5 (left: 4 6 5)\n9 - 2 = 7 (left: 3 7 7)"
            ]
        },
        "step_9": {
            "steps": [
                "6 / 1 = 6 (left: 1 4 6)\n30 - 25 = 5 (left: 5 30)",
                "6 / 1 = 6 (left: 1 4 6)\n10 / 2 = 5 (left: 4 6 5)\n9 - 2 = 7 (left: 3 7 7)\n5 + 5 = 10 (left: 5 10 5)",
                "6 / 1 = 6 (left: 1 4 6)\n10 / 2 = 5 (left: 4 6 5)\n9 - 2 = 7 (left: 3 7 7)\n9 - 4 = 5 (left: 5 9 9)"
            ],
            "values": [
                1.002,
                22.0,
                3.0
            ],
            "resampled": [
                "0 <- 4.1",
                "1 <- 2.1",
                "2 <- 8.0"
            ],
            "resampled_steps": [
                "4 * 1 = 4 (left: 1 4 6)",
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)",
                "6 / 1 = 6 (left: 1 4 6)\n10 / 2 = 5 (left: 4 6 5)\n9 / 3 = 3 (left: 3 12 4)\n12 - 3 = 9 (left: 9 4)"
            ]
        },
        "step_10": {
            "steps": [
                "4 * 1 = 4 (left: 1 4 6)\n20 / 5 = 4 (left: 4 20)",
                "6 / 1 = 6 (left: 1 4 6)\n4 + 6 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "6 / 1 = 6 (left: 1 4 6)\n10 / 2 = 5 (left: 4 6 5)\n9 / 3 = 3 (left: 3 12 4)\n12 - 3 = 9 (left: 9 4)\n9 + 4 = 13 (left: 13)"
            ],
            "values": [
                60.0,
                0.002,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.0199
    },
    "1": {
        "input": "1 1 11 11",
        "step_1": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 11)",
                "1 * 1 = 1 (left: 1 11 11)",
                "1 + 1 = 2 (left: 2 11 11)"
            ],
            "values": [
                20.001,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- INIT",
                "2 <- 1.0"
            ],
            "resampled_steps": [
                "11 + 1 = 12 (left: 1 12 11)",
                "",
                "11 + 1 = 12 (left: 1 12 11)"
            ]
        },
        "step_2": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 11)\nPossible next steps:",
                "11 / 1 = 11 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 12 11)\n11 / 1 = 11 (left: 11 11)"
            ],
            "values": [
                0.003,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.0",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "11 + 1 = 12 (left: 1 12 11)",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "11 / 1 = 11 (left: 1 11 11)",
                "11 + 1 = 12 (left: 1 12 11)\n3 - 8 = -5 (left: -5 8)",
                "11 - 1 = 10 (left: 1 11 10)"
            ],
            "values": [
                1.002,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 3.1",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "11 + 1 = 12 (left: 1 12 11)\n3 - 8 = -5 (left: -5 8)",
                "11 + 1 = 12 (left: 1 12 11)\n3 - 8 = -5 (left: -5 8)",
                ""
            ]
        },
        "step_4": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 11)\n3 - 8 = -5 (left: -5 8)\n-5 + 8 = 3 (left: 3)",
                "11 + 1 = 12 (left: 1 12 11)\n3 - 8 = -5 (left: -5 8)\n-5 * 8 = -40 (left: -40)",
                "1 + 1 = 2 (left: 2 11 11)"
            ],
            "values": [
                20.0,
                0.001,
                20.002
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 1.0",
                "2 <- 4.0"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 11 11)",
                "11 + 1 = 12 (left: 1 12 11)",
                "11 + 1 = 12 (left: 1 12 11)\n3 - 8 = -5 (left: -5 8)\n-5 + 8 = 3 (left: 3)"
            ]
        },
        "step_5": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 11)\n11 - 2 = 9 (left: 9 11)",
                "11 + 1 = 12 (left: 1 12 11)\n12 - 11 = 1 (left: 1 11)",
                "11 + 1 = 12 (left: 1 12 11)\n3 - 8 = -5 (left: -5 8)\n-5 + 8 = 3 (left: 3)\n3 * 3 = 9 (left: 9)"
            ],
            "values": [
                0.002,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 4.0",
                "1 <- 4.2",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "11 + 1 = 12 (left: 1 12 11)\n3 - 8 = -5 (left: -5 8)\n-5 + 8 = 3 (left: 3)",
                "1 + 1 = 2 (left: 2 11 11)",
                ""
            ]
        },
        "step_6": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 11)\n3 - 8 = -5 (left: -5 8)\n-5 + 8 = 3 (left: 3)\n7 - 8 = -1 (left: -1)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 7 = 9 (left: 7 9)",
                "11 / 1 = 11 (left: 1 11 11)"
            ],
            "values": [
                0.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 4.0",
                "1 <- 1.0",
                "2 <- 4.0"
            ],
            "resampled_steps": [
                "11 + 1 = 12 (left: 1 12 11)\n3 - 8 = -5 (left: -5 8)\n-5 + 8 = 3 (left: 3)",
                "11 + 1 = 12 (left: 1 12 11)",
                "11 + 1 = 12 (left: 1 12 11)\n3 - 8 = -5 (left: -5 8)\n-5 + 8 = 3 (left: 3)"
            ]
        },
        "step_7": {
            "steps": [
                "11 + 1 = 12 (left: 1 12 11)\n3 - 8 = -5 (left: -5 8)\n-5 + 8 = 3 (left: 3)\n3 + 8 = 11 (left: 11 11)",
                "11 + 1 = 12 (left: 1 12 11)\n7 * 3 = 21 (left: 5 21)",
                "11 + 1 = 12 (left: 1 12 11)\n3 - 8 = -5 (left: -5 8)\n-5 + 8 = 3 (left: 3)\nThere are no possible next steps with only one number provided."
            ],
            "values": [
                0.002,
                1.001,
                0.003
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 4.2",
                "2 <- 4.0"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 11 11)",
                "1 + 1 = 2 (left: 2 11 11)",
                "11 + 1 = 12 (left: 1 12 11)\n3 - 8 = -5 (left: -5 8)\n-5 + 8 = 3 (left: 3)"
            ]
        },
        "step_8": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 11 13)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 13 11)",
                "11 + 1 = 12 (left: 1 12 11)\n3 - 8 = -5 (left: -5 8)\n-5 + 8 = 3 (left: 3)\nThere are no possible next steps with the input of 3."
            ],
            "values": [
                0.003,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 4.2",
                "2 <- 4.2"
            ],
            "resampled_steps": [
                "11 / 1 = 11 (left: 1 11 11)",
                "1 + 1 = 2 (left: 2 11 11)",
                "1 + 1 = 2 (left: 2 11 11)"
            ]
        },
        "step_9": {
            "steps": [
                "11 / 1 = 11 (left: 1 11 11)\n11 + 1 = 12 (left: 11 12)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 11 11 13)",
                "1 + 1 = 2 (left: 2 11 11)\nInput: 4 6 8 10"
            ],
            "values": [
                0.002,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- 8.1",
                "1 <- 4.0",
                "2 <- 8.1"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 13 11)",
                "11 + 1 = 12 (left: 1 12 11)\n3 - 8 = -5 (left: -5 8)\n-5 + 8 = 3 (left: 3)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 13 11)"
            ]
        },
        "step_10": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 13 11)\n13 / 11 = 1.1818181818181819 (left: 1.1818181818181819)",
                "11 + 1 = 12 (left: 1 12 11)\n3 - 8 = -5 (left: -5 8)\n-5 + 8 = 3 (left: 3)\n3 / 2 = 1.5 (left: 1.5)",
                "1 + 1 = 2 (left: 2 11 11)\n2 + 11 = 13 (left: 13 11)\n13 - 11 = 2 (left: 2)"
            ],
            "values": [
                0.002,
                0.001,
                0.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.037269
    },
    "2": {
        "input": "1 1 3 8",
        "step_1": {
            "steps": [
                "8 - 3 = 5 (left: 1 5 8)",
                "1 + 1 = 2 (left: 2 3 8)",
                "3 * 1 = 3 (left: 1 3 8)"
            ],
            "values": [
                2.001,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "5 + 2 = 7 (left: 5 7 10)",
                "3 + 1 = 4 (left: 1 4 8)",
                "1 * 1 = 1 (left: 1 3 8)"
            ],
            "values": [
                3.0,
                20.002,
                60.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 2.1",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 3 8)",
                "3 + 1 = 4 (left: 1 4 8)",
                "3 + 1 = 4 (left: 1 4 8)"
            ]
        },
        "step_3": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8)\n8 - 5 = 3 (left: 2 3 3)",
                "3 + 1 = 4 (left: 1 4 8)\n3 * 9 = 27 (left: 27 27)",
                "3 + 1 = 4 (left: 1 4 8)\n3 * 5 = 15 (left: 15 7)"
            ],
            "values": [
                1.001,
                0.003,
                0.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 3 8)",
                "",
                ""
            ]
        },
        "step_4": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)",
                "9 - 3 = 6 (left: 3 6 9)",
                "8 - 3 = 5 (left: 1 3 5)"
            ],
            "values": [
                60.0,
                2.001,
                2.001
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 4.0",
                "2 <- 4.2"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 3 8)",
                "1 * 1 = 1 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)",
                "8 - 3 = 5 (left: 1 3 5)"
            ]
        },
        "step_5": {
            "steps": [
                "1 * 1 = 1 (left: 1 3 8)\n8 - 1 = 7 (left: 3 7)",
                "1 * 1 = 1 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)\n8 / 3 = 2.66667 (left: 2.66667)",
                "8 - 3 = 5 (left: 1 3 5)\n3 * 5 = 15 (left: 1 15)"
            ],
            "values": [
                1.0,
                0.0,
                0.002
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 4.0",
                "2 <- 4.0"
            ],
            "resampled_steps": [
                "3 + 1 = 4 (left: 1 4 8)",
                "1 * 1 = 1 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)",
                "1 * 1 = 1 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)"
            ]
        },
        "step_6": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 8)\n1 + 4 = 5 (left: 5 8)",
                "1 * 1 = 1 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)\n3 - 8 = -5 (left: -5)",
                "1 * 1 = 1 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)\n8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)"
            ],
            "values": [
                1.002,
                0.0,
                0.001
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 2.1",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "3 * 1 = 3 (left: 1 3 8)",
                "3 + 1 = 4 (left: 1 4 8)",
                "1 * 1 = 1 (left: 1 3 8)"
            ]
        },
        "step_7": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)",
                "3 + 1 = 4 (left: 1 4 8)\n4 - 1 = 3 (left: 3 8)",
                "1 * 1 = 1 (left: 1 3 8)\n3 - 1 = 2 (left: 2 8)"
            ],
            "values": [
                60.0,
                60.0,
                1.001
            ],
            "resampled": [
                "0 <- 7.0",
                "1 <- 7.0",
                "2 <- 4.0"
            ],
            "resampled_steps": [
                "3 * 1 = 3 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)",
                "1 * 1 = 1 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)"
            ]
        },
        "step_8": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)",
                "3 * 1 = 3 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)",
                "1 * 1 = 1 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)\n3 + 8 = 11 (left: 11)"
            ],
            "values": [
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 7.0",
                "1 <- 7.0",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "3 * 1 = 3 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)",
                "3 * 1 = 3 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)",
                "1 * 1 = 1 (left: 1 3 8)"
            ]
        },
        "step_9": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n8 / 3 = 2.67 (left: 2.67)",
                "3 * 1 = 3 (left: 1 3 8)\n3 * 1 = 3 (left: 3 8)\n8 / 3 = 2.6666666666666665 (left: 2.6666666666666665)",
                "1 * 1 = 1 (left: 1 3 8)\n3 + 1 = 4 (left: 4 8)"
            ],
            "values": [
                0.002,
                0.001,
                0.002
            ],
            "resampled": [
                "0 <- 7.1",
                "1 <- 4.0",
                "2 <- 7.1"
            ],
            "resampled_steps": [
                "3 + 1 = 4 (left: 1 4 8)\n4 - 1 = 3 (left: 3 8)",
                "1 * 1 = 1 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)",
                "3 + 1 = 4 (left: 1 4 8)\n4 - 1 = 3 (left: 3 8)"
            ]
        },
        "step_10": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 8)\n4 - 1 = 3 (left: 3 8)\n8 / 3 = 2.67 (left: 2.67)",
                "1 * 1 = 1 (left: 1 3 8)\n8 / 1 = 8 (left: 3 8)\n8 / 3 = 2.67 (left: 2.67)",
                "3 + 1 = 4 (left: 1 4 8)\n4 - 1 = 3 (left: 3 8)\n9 / 4 = 2.25 (left: 2.25)"
            ],
            "values": [
                0.002,
                0.002,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.054602
    },
    "3": {
        "input": "1 1 1 8",
        "step_1": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 8)",
                "1 * 1 = 1 (left: 1 1 8)",
                "8 / 1 = 8 (left: 1 1 8)"
            ],
            "values": [
                2.001,
                1.0,
                2.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.0",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "1 * 1 = 1 (left: 1 1 8)",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "8 - 1 = 7 (left: 1 1 7)",
                "1 * 1 = 1 (left: 1 1 8)\n1 + 1 = 2 (left: 2 8)",
                "8 - 1 = 7 (left: 1 1 7)"
            ],
            "values": [
                1.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 8)",
                "1 * 1 = 1 (left: 1 1 8)",
                "1 * 8 = 8 (left: 1 1 8)"
            ],
            "values": [
                60.0,
                1.002,
                1.001
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 3.0",
                "2 <- 3.0"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 1 8)",
                "1 + 1 = 2 (left: 2 1 8)",
                "1 + 1 = 2 (left: 2 1 8)"
            ]
        },
        "step_4": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 8)\n5 + 2 = 7 (left: 3 7 1)",
                "1 + 1 = 2 (left: 2 1 8)\n1 * 8 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8)\n1 - 8 = -7 (left: -7)"
            ],
            "values": [
                1.002,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 3.0",
                "2 <- 3.0"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 1 8)",
                "1 + 1 = 2 (left: 2 1 8)",
                "1 + 1 = 2 (left: 2 1 8)"
            ]
        },
        "step_5": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 8)\n2 - 1 = 1 (left: 1 8)",
                "1 + 1 = 2 (left: 2 1 8)\n7 / 2 = 3.5 (left: 5 3 3.5)",
                "1 + 1 = 2 (left: 2 1 8)\n1 * 8 = 8 (left: 8)"
            ],
            "values": [
                60.0,
                3.0,
                0.003
            ],
            "resampled": [
                "0 <- 5.0",
                "1 <- 5.0",
                "2 <- 5.0"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 1 8)\n2 - 1 = 1 (left: 1 8)",
                "1 + 1 = 2 (left: 2 1 8)\n2 - 1 = 1 (left: 1 8)",
                "1 + 1 = 2 (left: 2 1 8)\n2 - 1 = 1 (left: 1 8)"
            ]
        },
        "step_6": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 8)\n2 - 1 = 1 (left: 1 8)\n8 / 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8)\n2 - 1 = 1 (left: 1 8)\n1 * 8 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8)\n2 - 1 = 1 (left: 1 8)\n1 + 8 = 9 (left: 9)"
            ],
            "values": [
                0.002,
                0.0,
                0.002
            ],
            "resampled": [
                "0 <- 5.0",
                "1 <- 5.0",
                "2 <- 1.0"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 1 8)\n2 - 1 = 1 (left: 1 8)",
                "1 + 1 = 2 (left: 2 1 8)\n2 - 1 = 1 (left: 1 8)",
                "1 * 1 = 1 (left: 1 1 8)"
            ]
        },
        "step_7": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 8)\n2 - 1 = 1 (left: 1 8)\n8 / 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8)\n2 - 1 = 1 (left: 1 8)\n8 / 1 = 8 (left: 8)",
                "1 * 1 = 1 (left: 1 1 8)\n10 * 15 = 150 (left: 5 150)"
            ],
            "values": [
                0.002,
                0.0,
                21.0
            ],
            "resampled": [
                "0 <- 5.0",
                "1 <- 5.0",
                "2 <- 5.0"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 1 8)\n2 - 1 = 1 (left: 1 8)",
                "1 + 1 = 2 (left: 2 1 8)\n2 - 1 = 1 (left: 1 8)",
                "1 + 1 = 2 (left: 2 1 8)\n2 - 1 = 1 (left: 1 8)"
            ]
        },
        "step_8": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 8)\n2 - 1 = 1 (left: 1 8)\n8 - 1 = 7 (left: 7)",
                "1 + 1 = 2 (left: 2 1 8)\n2 - 1 = 1 (left: 1 8)\n8 + 1 = 9 (left: 8 9)",
                "1 + 1 = 2 (left: 2 1 8)\n2 - 1 = 1 (left: 1 8)\n8 / 1 = 8 (left: 8)"
            ],
            "values": [
                0.0,
                0.003,
                0.001
            ],
            "resampled": [
                "0 <- 5.0",
                "1 <- 3.0",
                "2 <- 3.0"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 1 8)\n2 - 1 = 1 (left: 1 8)",
                "1 + 1 = 2 (left: 2 1 8)",
                "1 + 1 = 2 (left: 2 1 8)"
            ]
        },
        "step_9": {
            "steps": [
                "1 + 1 = 2 (left: 2 1 8)\n2 - 1 = 1 (left: 1 8)\n8 / 1 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 1 8)\n8 / 2 = 4 (left: 4 8)",
                "1 + 1 = 2 (left: 2 1 8)\n6 + 3 = 9 (left: 4 2 9)"
            ],
            "values": [
                0.0,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 7.2",
                "1 <- 5.0",
                "2 <- 7.2"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 1 8)\n10 * 15 = 150 (left: 5 150)",
                "1 + 1 = 2 (left: 2 1 8)\n2 - 1 = 1 (left: 1 8)",
                "1 * 1 = 1 (left: 1 1 8)\n10 * 15 = 150 (left: 5 150)"
            ]
        },
        "step_10": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 8)\n10 * 15 = 150 (left: 5 150)\n150 / 5 = 30 (left: 30)",
                "1 + 1 = 2 (left: 2 1 8)\n2 - 1 = 1 (left: 1 8)\n8 / 1 = 8 (left: 8 8)",
                "1 * 1 = 1 (left: 1 1 8)\n10 * 15 = 150 (left: 5 150)\n5 * 150 = 750 (left: 150)"
            ],
            "values": [
                20.002,
                0.002,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.07048600000000001
    },
    "4": {
        "input": "6 6 6 6",
        "step_1": {
            "steps": [
                "6 / 6 = 1 (left: 6 1 6)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 * 6 = 36 (left: 6 6 36)"
            ],
            "values": [
                22.0,
                21.001,
                60.0
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- 1.2"
            ],
            "resampled_steps": [
                "6 * 6 = 36 (left: 6 6 36)",
                "6 * 6 = 36 (left: 6 6 36)",
                "6 * 6 = 36 (left: 6 6 36)"
            ]
        },
        "step_2": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)",
                "6 * 6 = 36 (left: 6 6 36)\n6 + 6 = 12 (left: 12 36)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)"
            ],
            "values": [
                60.0,
                20.002,
                60.0
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 2.2",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)"
            ]
        },
        "step_3": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n1 + 36 = 37 (left: 37)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n1 + 36 = 37 (left: 37)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n1 * 36 = 36 (left: 36)"
            ],
            "values": [
                0.003,
                0.002,
                40.0
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 3.2"
            ],
            "resampled_steps": [
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n1 * 36 = 36 (left: 36)"
            ]
        },
        "step_4": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n36 - 1 = 35 (left: 35)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n1 - 36 = -35 (left: -35)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n1 * 36 = 36 (left: 36)\nThere is only one possible step: 36 / 2 = 18"
            ],
            "values": [
                0.003,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 3.2"
            ],
            "resampled_steps": [
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n1 * 36 = 36 (left: 36)"
            ]
        },
        "step_5": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n1 * 36 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n1 + 36 = 37 (left: 37)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n1 * 36 = 36 (left: 36)\n6 * 6 = 36"
            ],
            "values": [
                60.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 1.1",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)",
                "6 - 6 = 0 (left: 0 6 6)",
                "6 * 6 = 36 (left: 6 6 36)\n6 + 6 = 12 (left: 12 36)"
            ]
        },
        "step_6": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n1 * 36 = 36 (left: 36)",
                "6 - 6 = 0 (left: 0 6 6)\n5 - 4 = 1 (left: 1 5)",
                "6 * 6 = 36 (left: 6 6 36)\n6 + 6 = 12 (left: 12 36)\n12 - 36 = -24 (left: -24)"
            ],
            "values": [
                40.0,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 6.0",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "6 * 6 = 36 (left: 6 6 36)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n1 * 36 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)"
            ]
        },
        "step_7": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n1 * 36 = 36 (left: 36)\n36 / 2 = 18 (left: 18)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n36 - 1 = 35 (left: 35)"
            ],
            "values": [
                60.0,
                0.001,
                0.003
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 7.0",
                "2 <- 7.0"
            ],
            "resampled_steps": [
                "6 * 6 = 36 (left: 6 6 36)\n6 + 6 = 12 (left: 12 36)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)"
            ]
        },
        "step_8": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36)\n6 + 6 = 12 (left: 12 36)\n36 / 3 = 12 (left: 12)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n36 - 1 = 35 (left: 35)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n36 - 1 = 35 (left: 35)"
            ],
            "values": [
                0.003,
                0.001,
                0.003
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 6.1",
                "2 <- 7.0"
            ],
            "resampled_steps": [
                "6 - 6 = 0 (left: 0 6 6)",
                "6 - 6 = 0 (left: 0 6 6)\n5 - 4 = 1 (left: 1 5)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)"
            ]
        },
        "step_9": {
            "steps": [
                "6 - 6 = 0 (left: 0 6 6)\n5 * 7 = 35 (left: 3 35 9)",
                "6 - 6 = 0 (left: 0 6 6)\n5 - 4 = 1 (left: 1 5)\n5 - 1 = 4 (left: 4)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n36 / 1 = 36 (left: 36)"
            ],
            "values": [
                3.0,
                0.001,
                40.0
            ],
            "resampled": [
                "0 <- 7.0",
                "1 <- 2.0",
                "2 <- 9.2"
            ],
            "resampled_steps": [
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n36 / 1 = 36 (left: 36)"
            ]
        },
        "step_10": {
            "steps": [
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n36 - 1 = 35 (left: 35)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n1 * 36 = 36 (left: 36)",
                "6 * 6 = 36 (left: 6 6 36)\n6 / 6 = 1 (left: 1 36)\n36 / 1 = 36 (left: 36)\nThere are no possible next steps with the input 36."
            ],
            "values": [
                0.003,
                20.001,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.083124
    },
    "5": {
        "input": "1 1 2 12",
        "step_1": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 12)",
                "12 - 2 = 10 (left: 1 2 10)",
                "12 - 2 = 10 (left: 1 2 10)"
            ],
            "values": [
                1.002,
                1.001,
                2.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "12 - 2 = 10 (left: 1 10 12)",
                "12 - 1 = 11 (left: 1 2 11)",
                "1 + 1 = 2 (left: 2 2 12)"
            ],
            "values": [
                2.001,
                0.003,
                41.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 2.2",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 2 12)",
                "1 + 1 = 2 (left: 2 2 12)",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 12)\n2 / 2 = 1 (left: 1 12)",
                "1 + 1 = 2 (left: 2 2 12)\nPossible next steps:",
                "12 / 2 = 6 (left: 1 2 6)"
            ],
            "values": [
                40.001,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 2.2",
                "2 <- 3.0"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 2 12)\n2 / 2 = 1 (left: 1 12)",
                "1 + 1 = 2 (left: 2 2 12)",
                "1 + 1 = 2 (left: 2 2 12)\n2 / 2 = 1 (left: 1 12)"
            ]
        },
        "step_4": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 12)\n2 / 2 = 1 (left: 1 12)\n1 * 12 = 12 (left: 12)",
                "1 + 1 = 2 (left: 2 2 12)\n12 - 2 = 10 (left: 2 10)",
                "1 + 1 = 2 (left: 2 2 12)\n2 / 2 = 1 (left: 1 12)\n12 - 1 = 11 (left: 11)"
            ],
            "values": [
                0.002,
                3.0,
                0.001
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 4.1",
                "2 <- 1.1"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 2 12)\n2 / 2 = 1 (left: 1 12)",
                "1 + 1 = 2 (left: 2 2 12)\n12 - 2 = 10 (left: 2 10)",
                "12 - 2 = 10 (left: 1 2 10)"
            ]
        },
        "step_5": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 12)\n2 / 2 = 1 (left: 1 12)\n12 / 1 = 12 (left: 12)",
                "1 + 1 = 2 (left: 2 2 12)\n12 - 2 = 10 (left: 2 10)\n2 + 10 = 12 (left: 10)",
                "12 - 2 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)"
            ],
            "values": [
                0.003,
                0.003,
                40.001
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 1.0",
                "2 <- 3.0"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 2 12)",
                "2 * 1 = 2 (left: 2 2 12)",
                "1 + 1 = 2 (left: 2 2 12)\n2 / 2 = 1 (left: 1 12)"
            ]
        },
        "step_6": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 12)\n2 * 2 = 4 (left: 4 12)",
                "2 * 1 = 2 (left: 2 2 12)\n2 * 2 = 4 (left: 4 12)",
                "1 + 1 = 2 (left: 2 2 12)\n2 / 2 = 1 (left: 1 12)\n12 / 1 = 12 (left: 12)"
            ],
            "values": [
                0.003,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 5.2",
                "2 <- 5.2"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 2 12)\n2 / 2 = 1 (left: 1 12)",
                "12 - 2 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)",
                "12 - 2 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)"
            ]
        },
        "step_7": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 12)\n2 / 2 = 1 (left: 1 12)\n1 * 12 = 12 (left: 12)",
                "12 - 2 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)\n8 / 1 = 8 (left: 8)",
                "12 - 2 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)\n1 * 8 = 8 (left: 8)"
            ],
            "values": [
                0.001,
                0.0,
                0.001
            ],
            "resampled": [
                "0 <- 5.2",
                "1 <- 5.2",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "12 - 2 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)",
                "12 - 2 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)",
                "1 + 1 = 2 (left: 2 2 12)"
            ]
        },
        "step_8": {
            "steps": [
                "12 - 2 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)\n1 + 8 = 9",
                "12 - 2 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)\n8 - 1 = 7 (left: 7)",
                "1 + 1 = 2 (left: 2 2 12)\n12 / 2 = 6 (left: 2 6)"
            ],
            "values": [
                0.003,
                0.001,
                0.0
            ],
            "resampled": [
                "0 <- 5.2",
                "1 <- 5.2",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "12 - 2 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)",
                "12 - 2 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)",
                "1 + 1 = 2 (left: 2 2 12)"
            ]
        },
        "step_9": {
            "steps": [
                "12 - 2 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)\n8 - 1 = 7 (left: 7)",
                "12 - 2 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)\n1 * 8 = 8 (left: 8)",
                "1 + 1 = 2 (left: 2 2 12)\n2 / 12 = 0.16666666667 (left: 0.16666666667 12)"
            ],
            "values": [
                0.002,
                0.002,
                1.0
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 3.0",
                "2 <- 5.2"
            ],
            "resampled_steps": [
                "12 - 2 = 10 (left: 1 10 12)",
                "1 + 1 = 2 (left: 2 2 12)\n2 / 2 = 1 (left: 1 12)",
                "12 - 2 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)"
            ]
        },
        "step_10": {
            "steps": [
                "12 - 2 = 10 (left: 1 10 12)\n12 - 1 = 11 (left: 10 11)",
                "1 + 1 = 2 (left: 2 2 12)\n2 / 2 = 1 (left: 1 12)\n1 + 12 = 13 (left: 12)",
                "12 - 2 = 10 (left: 1 2 10)\n10 - 2 = 8 (left: 1 8)\n1 + 8 = 9 (left: 9)"
            ],
            "values": [
                0.002,
                0.003,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.0965135
    },
    "6": {
        "input": "1 2 2 6",
        "step_1": {
            "steps": [
                "2 * 2 = 4 (left: 4 2 6)",
                "6 / 2 = 3 (left: 3 2 6)",
                "6 - 2 = 4 (left: 1 2 4)"
            ],
            "values": [
                2.001,
                41.0,
                1.002
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "6 - 2 = 4 (left: 1 2 4)",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "6 - 2 = 4 (left: 1 2 4)\n10 / 5 = 2 (left: 2 15)",
                "1 + 2 = 3 (left: 2 3 6)",
                "2 + 2 = 4 (left: 4 6)"
            ],
            "values": [
                0.003,
                22.0,
                60.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 1.1",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "2 + 2 = 4 (left: 4 6)",
                "6 / 2 = 3 (left: 3 2 6)",
                "1 + 2 = 3 (left: 2 3 6)"
            ]
        },
        "step_3": {
            "steps": [
                "2 + 2 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)",
                "6 / 2 = 3 (left: 3 2 6)\n2 + 6 = 8 (left: 3 8)",
                "1 + 2 = 3 (left: 2 3 6)\n3 * 2 = 6 (left: 6 6)"
            ],
            "values": [
                0.002,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "6 / 2 = 3 (left: 3 2 6)\n2 + 6 = 8 (left: 3 8)",
                "",
                ""
            ]
        },
        "step_4": {
            "steps": [
                "6 / 2 = 3 (left: 3 2 6)\n2 + 6 = 8 (left: 3 8)\n3 * 8 = 24 (left: 8)",
                "1 + 2 = 3 (left: 2 3 6)",
                "6 / 2 = 3 (left: 2 3 6)"
            ],
            "values": [
                0.002,
                22.0,
                41.0
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 4.2",
                "2 <- 3.1"
            ],
            "resampled_steps": [
                "6 / 2 = 3 (left: 2 3 6)",
                "6 / 2 = 3 (left: 2 3 6)",
                "6 / 2 = 3 (left: 3 2 6)\n2 + 6 = 8 (left: 3 8)"
            ]
        },
        "step_5": {
            "steps": [
                "6 / 2 = 3 (left: 2 3 6)\n3 * 9 = 27 (left: 27 27)",
                "6 / 2 = 3 (left: 2 3 6)\n4 * 1 = 4 (left: 4 7)",
                "6 / 2 = 3 (left: 3 2 6)\n2 + 6 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5)"
            ],
            "values": [
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 4.2",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "6 / 2 = 3 (left: 3 2 6)",
                "6 / 2 = 3 (left: 2 3 6)",
                "2 + 2 = 4 (left: 4 6)"
            ]
        },
        "step_6": {
            "steps": [
                "6 / 2 = 3 (left: 3 2 6)\n6 - 2 = 4 (left: 3 4)",
                "6 / 2 = 3 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)",
                "2 + 2 = 4 (left: 4 6)\n4 / 6 = 0.6667 (left: 0.6667)"
            ],
            "values": [
                1.0,
                1.0,
                0.003
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 3.1",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "2 + 2 = 4 (left: 4 6)",
                "6 / 2 = 3 (left: 3 2 6)\n2 + 6 = 8 (left: 3 8)",
                "2 + 2 = 4 (left: 4 6)"
            ]
        },
        "step_7": {
            "steps": [
                "2 + 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "6 / 2 = 3 (left: 3 2 6)\n2 + 6 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "2 + 2 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)"
            ],
            "values": [
                60.0,
                60.0,
                0.002
            ],
            "resampled": [
                "0 <- 7.1",
                "1 <- 7.1",
                "2 <- 7.0"
            ],
            "resampled_steps": [
                "6 / 2 = 3 (left: 3 2 6)\n2 + 6 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "6 / 2 = 3 (left: 3 2 6)\n2 + 6 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "2 + 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)"
            ]
        },
        "step_8": {
            "steps": [
                "6 / 2 = 3 (left: 3 2 6)\n2 + 6 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (6 / 2) * (2 + 8) = 24",
                "6 / 2 = 3 (left: 3 2 6)\n2 + 6 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (6 / 2) * (2 + 8) = 24",
                "2 + 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 + 2) * (2 * 6) = 24"
            ],
            "values": [
                0.003,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 4.1",
                "1 <- 6.1",
                "2 <- 8.2"
            ],
            "resampled_steps": [
                "1 + 2 = 3 (left: 2 3 6)",
                "6 / 2 = 3 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)",
                "2 + 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 + 2) * (2 * 6) = 24"
            ]
        },
        "step_9": {
            "steps": [
                "1 + 2 = 3 (left: 2 3 6)\n2 * 3 = 6 (left: 6 6)",
                "6 / 2 = 3 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)\n6 - 3 = 3 (left: 3)",
                "2 + 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 + 2) * (2 * 6) = 24\nInput: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n4 - 3 = 1 (left: 1 8)\n1 * 8 = 8 (left: 8)\nAnswer: (3 + 5) * (4 - 3) = 24"
            ],
            "values": [
                40.001,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 9.2",
                "2 <- 9.0"
            ],
            "resampled_steps": [
                "6 / 2 = 3 (left: 3 2 6)\n2 + 6 = 8 (left: 3 8)",
                "2 + 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 + 2) * (2 * 6) = 24\nInput: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n4 - 3 = 1 (left: 1 8)\n1 * 8 = 8 (left: 8)\nAnswer: (3 + 5) * (4 - 3) = 24",
                "1 + 2 = 3 (left: 2 3 6)\n2 * 3 = 6 (left: 6 6)"
            ]
        },
        "step_10": {
            "steps": [
                "6 / 2 = 3 (left: 3 2 6)\n2 + 6 = 8 (left: 3 8)\n10 - 5 = 5 (left: 5)",
                "2 + 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 + 2) * (2 * 6) = 24\nInput: 3 3 4 5\nSteps:\n3 + 5 = 8 (left: 3 4 8)\n4 - 3 = 1 (left: 1 8)\n1 * 8 = 8 (left: 8)\nAnswer: (3 + 5) * (4 - 3) = 24\nInput: 2 3 5 7\nSteps:\n5 * 7 = 35 (left: 2 3 35)\n3 - 2 = 1 (left: 1 35)\n1 * 35 = 35 (left: 35)\nAnswer: (2 * 3) * (5 + 7) = 24",
                "1 + 2 = 3 (left: 2 3 6)\n2 * 3 = 6 (left: 6 6)\n6 + 6 = 12 (left: 12)"
            ],
            "values": [
                0.003,
                60.0,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.1123605
    },
    "7": {
        "input": "1 1 10 12",
        "step_1": {
            "steps": [
                "1 * 1 = 1 (left: 1 10 12)",
                "12 - 10 = 2 (left: 1 2 12)",
                "10 + 1 = 11 (left: 1 11 12)"
            ],
            "values": [
                1.002,
                60.0,
                20.002
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 1.2",
                "2 <- 1.2"
            ],
            "resampled_steps": [
                "12 - 10 = 2 (left: 1 2 12)",
                "10 + 1 = 11 (left: 1 11 12)",
                "10 + 1 = 11 (left: 1 11 12)"
            ]
        },
        "step_2": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12)\n9 / 3 = 3 (left: 3 5 9)",
                "10 + 1 = 11 (left: 1 11 12)\n12 - 11 = 1 (left: 1 12)",
                "10 + 1 = 11 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)"
            ],
            "values": [
                21.001,
                1.002,
                40.001
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 1.1",
                "2 <- 1.1"
            ],
            "resampled_steps": [
                "10 + 1 = 11 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)",
                "12 - 10 = 2 (left: 1 2 12)",
                "12 - 10 = 2 (left: 1 2 12)"
            ]
        },
        "step_3": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12)\n2 / 1 = 2 (left: 2 2)",
                "12 - 10 = 2 (left: 1 2 12)\n1 + 12 = 13 (left: 13)"
            ],
            "values": [
                60.0,
                2.001,
                0.002
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 2.0",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "10 + 1 = 11 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "12 - 10 = 2 (left: 1 2 12)\n9 / 3 = 3 (left: 3 5 9)",
                ""
            ]
        },
        "step_4": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((10 + 1) / 1) + 12 = 24",
                "12 - 10 = 2 (left: 1 2 12)\n9 / 3 = 3 (left: 3 5 9)\n9 - 3 = 6 (left: 5 6)",
                "10 / 1 = 10 (left: 1 10 12)"
            ],
            "values": [
                60.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 1.1",
                "2 <- 2.0"
            ],
            "resampled_steps": [
                "12 - 10 = 2 (left: 1 2 12)",
                "12 - 10 = 2 (left: 1 2 12)",
                "12 - 10 = 2 (left: 1 2 12)\n9 / 3 = 3 (left: 3 5 9)"
            ]
        },
        "step_5": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12)\n8 - 4 = 4 (left: 4)",
                "12 - 10 = 2 (left: 1 2 12)\n2 - 1 = 1 (left: 1 12)",
                "12 - 10 = 2 (left: 1 2 12)\n9 / 3 = 3 (left: 3 5 9)\n3 + 5 = 8 (left: 8 9)"
            ],
            "values": [
                0.001,
                1.002,
                1.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 4.0",
                "2 <- 2.0"
            ],
            "resampled_steps": [
                "",
                "10 + 1 = 11 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((10 + 1) / 1) + 12 = 24",
                "12 - 10 = 2 (left: 1 2 12)\n9 / 3 = 3 (left: 3 5 9)"
            ]
        },
        "step_6": {
            "steps": [
                "1 * 10 = 10 (left: 1 10 12)",
                "10 + 1 = 11 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((10 + 1) / 1) + 12 = 24\nInput: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 + 3 = 19 (left: 19)\n19 + 5 = 24 (left: 24)\nAnswer: ((3 * 7) - 5) + 3 + 5 = 24",
                "12 - 10 = 2 (left: 1 2 12)\n9 / 3 = 3 (left: 3 5 9)\n6 * 10 = 60 (left: 4 60)"
            ],
            "values": [
                2.001,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 4.0",
                "2 <- 2.0"
            ],
            "resampled_steps": [
                "10 + 1 = 11 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)",
                "10 + 1 = 11 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((10 + 1) / 1) + 12 = 24",
                "12 - 10 = 2 (left: 1 2 12)\n9 / 3 = 3 (left: 3 5 9)"
            ]
        },
        "step_7": {
            "steps": [
                "10 + 1 = 11 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24",
                "10 + 1 = 11 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((10 + 1) / 1) + 12 = 24\nInput: 3 3 5 7\nSteps:\n5 + 7 = 12 (left: 3 3 12)\n3 + 3 = 6 (left: 6 12)\n6 * 12 = 72 (left: 72)\nAnswer: (3 + 3) * (5 + 7) = 72",
                "12 - 10 = 2 (left: 1 2 12)\n9 / 3 = 3 (left: 3 5 9)\n5 * 3 = 15 (left: 15 9)"
            ],
            "values": [
                0.003,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 6.2",
                "1 <- 7.1",
                "2 <- 6.1"
            ],
            "resampled_steps": [
                "12 - 10 = 2 (left: 1 2 12)\n9 / 3 = 3 (left: 3 5 9)\n6 * 10 = 60 (left: 4 60)",
                "10 + 1 = 11 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((10 + 1) / 1) + 12 = 24\nInput: 3 3 5 7\nSteps:\n5 + 7 = 12 (left: 3 3 12)\n3 + 3 = 6 (left: 6 12)\n6 * 12 = 72 (left: 72)\nAnswer: (3 + 3) * (5 + 7) = 72",
                "10 + 1 = 11 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((10 + 1) / 1) + 12 = 24\nInput: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 + 3 = 19 (left: 19)\n19 + 5 = 24 (left: 24)\nAnswer: ((3 * 7) - 5) + 3 + 5 = 24"
            ]
        },
        "step_8": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12)\n9 / 3 = 3 (left: 3 5 9)\n6 * 10 = 60 (left: 4 60)\n4 * 60 = 240 (left: 240)",
                "10 + 1 = 11 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((10 + 1) / 1) + 12 = 24\nInput: 3 3 5 7\nSteps:\n5 + 7 = 12 (left: 3 3 12)\n3 + 3 = 6 (left: 6 12)\n6 * 12 = 72 (left: 72)\nAnswer: (3 + 3) * (5 + 7) = 72\nThere is no way to obtain 24 using the numbers 3, 3, 5, and 7.",
                "10 + 1 = 11 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((10 + 1) / 1) + 12 = 24\nInput: 3 3 5 7\nSteps:\n3 * 7 = 21 (left: 3 5 21)\n21 - 5 = 16 (left: 3 16)\n16 + 3 = 19 (left: 19)\n19 + 5 = 24 (left: 24)\nAnswer: ((3 * 7) - 5) + 3 + 5 = 24\nInput: 2 4 6 8\nSteps:\n2 * 8 = 16 (left: 4 6 16)\n4 + 6 = 10 (left: 10 16)\n16 - 10 = 6 (left: 6)\n6 * 4 = 24 (left: 24)\nAnswer: (2 * 8) - (4 + 6) * 4 = 24"
            ],
            "values": [
                40.0,
                0.003,
                40.0
            ],
            "resampled": [
                "0 <- 7.2",
                "1 <- 6.2",
                "2 <- 6.2"
            ],
            "resampled_steps": [
                "12 - 10 = 2 (left: 1 2 12)\n9 / 3 = 3 (left: 3 5 9)\n5 * 3 = 15 (left: 15 9)",
                "12 - 10 = 2 (left: 1 2 12)\n9 / 3 = 3 (left: 3 5 9)\n6 * 10 = 60 (left: 4 60)",
                "12 - 10 = 2 (left: 1 2 12)\n9 / 3 = 3 (left: 3 5 9)\n6 * 10 = 60 (left: 4 60)"
            ]
        },
        "step_9": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12)\n9 / 3 = 3 (left: 3 5 9)\n5 * 3 = 15 (left: 15 9)\n15 * 9 = 135 (left: 135)",
                "12 - 10 = 2 (left: 1 2 12)\n9 / 3 = 3 (left: 3 5 9)\n6 * 10 = 60 (left: 4 60)\nPossible next steps:",
                "12 - 10 = 2 (left: 1 2 12)\n9 / 3 = 3 (left: 3 5 9)\n6 * 10 = 60 (left: 4 60)\n60 / 4 = 15 (left: 15 60)"
            ],
            "values": [
                0.003,
                0.003,
                20.001
            ],
            "resampled": [
                "0 <- 6.2",
                "1 <- 7.1",
                "2 <- 6.2"
            ],
            "resampled_steps": [
                "12 - 10 = 2 (left: 1 2 12)\n9 / 3 = 3 (left: 3 5 9)\n6 * 10 = 60 (left: 4 60)",
                "10 + 1 = 11 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((10 + 1) / 1) + 12 = 24\nInput: 3 3 5 7\nSteps:\n5 + 7 = 12 (left: 3 3 12)\n3 + 3 = 6 (left: 6 12)\n6 * 12 = 72 (left: 72)\nAnswer: (3 + 3) * (5 + 7) = 72",
                "12 - 10 = 2 (left: 1 2 12)\n9 / 3 = 3 (left: 3 5 9)\n6 * 10 = 60 (left: 4 60)"
            ]
        },
        "step_10": {
            "steps": [
                "12 - 10 = 2 (left: 1 2 12)\n9 / 3 = 3 (left: 3 5 9)\n6 * 10 = 60 (left: 4 60)\nPossible next steps:",
                "10 + 1 = 11 (left: 1 11 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((10 + 1) / 1) + 12 = 24\nInput: 3 3 5 7\nSteps:\n5 + 7 = 12 (left: 3 3 12)\n3 + 3 = 6 (left: 6 12)\n6 * 12 = 72 (left: 72)\nAnswer: (3 + 3) * (5 + 7) = 72\nThere is no solution to obtain 24 using the numbers 3, 3, 5, and 7.",
                "12 - 10 = 2 (left: 1 2 12)\n9 / 3 = 3 (left: 3 5 9)\n6 * 10 = 60 (left: 4 60)\n4 * 60 = 240 (left: 240)"
            ],
            "values": [
                0.003,
                0.003,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.12933050000000001
    },
    "8": {
        "input": "2 2 10 10",
        "step_1": {
            "steps": [
                "10 - 2 = 8 (left: 2 8 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 / 2 = 5 (left: 2 5 10)"
            ],
            "values": [
                1.002,
                1.002,
                3.0
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "10 - 2 = 8 (left: 2 8 10)",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "10 - 2 = 8 (left: 2 8 10)\n2 + 8 = 10 (left: 10 10)",
                "2 + 2 = 4 (left: 4 10 10)",
                "10 - 2 = 8 (left: 2 8 10)"
            ],
            "values": [
                0.001,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.2"
            ],
            "resampled_steps": [
                "",
                "",
                "10 / 2 = 5 (left: 2 5 10)"
            ]
        },
        "step_3": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)",
                "10 - 2 = 8 (left: 2 8 10)",
                "10 / 2 = 5 (left: 2 5 10)\n5 * 2 = 10 (left: 10 10)"
            ],
            "values": [
                21.001,
                1.002,
                1.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                ""
            ]
        },
        "step_4": {
            "steps": [
                "10 - 2 = 8 (left: 2 8 10)",
                "2 + 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)"
            ],
            "values": [
                0.003,
                1.002,
                2.001
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- INIT",
                "2 <- 3.0"
            ],
            "resampled_steps": [
                "2 + 2 = 4 (left: 4 10 10)",
                "",
                "2 + 2 = 4 (left: 4 10 10)"
            ]
        },
        "step_5": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 10 14)",
                "2 + 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 14)"
            ],
            "values": [
                1.002,
                40.001,
                20.0
            ],
            "resampled": [
                "0 <- 5.1",
                "1 <- INIT",
                "2 <- 5.1"
            ],
            "resampled_steps": [
                "2 + 2 = 4 (left: 4 10 10)",
                "",
                "2 + 2 = 4 (left: 4 10 10)"
            ]
        },
        "step_6": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 10 14)",
                "2 * 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 10 14)"
            ],
            "values": [
                0.003,
                21.001,
                0.003
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 6.1",
                "2 <- 5.1"
            ],
            "resampled_steps": [
                "2 + 2 = 4 (left: 4 10 10)",
                "2 * 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)"
            ]
        },
        "step_7": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)\n10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 * 2 = 4 (left: 4 10 10)\n10 / 4 = 2.5 (left: 2.5 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 / 4 = 2.5 (left: 2.5 10 10)"
            ],
            "values": [
                1.002,
                0.001,
                1.001
            ],
            "resampled": [
                "0 <- 5.2",
                "1 <- INIT",
                "2 <- 5.1"
            ],
            "resampled_steps": [
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 14)",
                "",
                "2 + 2 = 4 (left: 4 10 10)"
            ]
        },
        "step_8": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 14)\n10 - 14 = -4 (left: -4)",
                "2 + 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10)"
            ],
            "values": [
                0.003,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 5.1",
                "1 <- 6.1",
                "2 <- 6.1"
            ],
            "resampled_steps": [
                "2 + 2 = 4 (left: 4 10 10)",
                "2 * 2 = 4 (left: 4 10 10)",
                "2 * 2 = 4 (left: 4 10 10)"
            ]
        },
        "step_9": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 10 14)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)",
                "2 * 2 = 4 (left: 4 10 10)\n10 - 4 = 6 (left: 6 10 10)"
            ],
            "values": [
                0.003,
                3.0,
                3.0
            ],
            "resampled": [
                "0 <- 5.2",
                "1 <- 3.0",
                "2 <- 5.1"
            ],
            "resampled_steps": [
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 14)",
                "2 + 2 = 4 (left: 4 10 10)",
                "2 + 2 = 4 (left: 4 10 10)"
            ]
        },
        "step_10": {
            "steps": [
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 14)\n14 - 10 = 4 (left: 4)",
                "2 + 2 = 4 (left: 4 10 10)\n10 / 4 = 2.5 (left: 2.5 10 10)",
                "2 + 2 = 4 (left: 4 10 10)\n4 + 10 = 14 (left: 10 10 14)"
            ],
            "values": [
                0.002,
                1.002,
                21.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.1461575
    },
    "9": {
        "input": "1 1 1 12",
        "step_1": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12)",
                "12 - 1 = 11 (left: 1 11 12)",
                "12 / 1 = 12 (left: 1 1 12)"
            ],
            "values": [
                41.0,
                21.001,
                40.001
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 1.0",
                "2 <- 1.2"
            ],
            "resampled_steps": [
                "12 / 1 = 12 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12)"
            ]
        },
        "step_2": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12)\n1 - 1 = 0 (left: 0 12)",
                "12 / 1 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)",
                "12 / 1 = 12 (left: 1 1 12)\n12 / 1 = 12 (left: 1 12)"
            ],
            "values": [
                20.0,
                60.0,
                0.001
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 1.2",
                "2 <- 1.2"
            ],
            "resampled_steps": [
                "12 / 1 = 12 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12)"
            ]
        },
        "step_3": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)",
                "12 / 1 = 12 (left: 1 1 12)\n12 - 1 = 11 (left: 1 11)",
                "12 / 1 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)"
            ],
            "values": [
                60.0,
                0.0,
                60.0
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 1.1",
                "2 <- 3.0"
            ],
            "resampled_steps": [
                "12 / 1 = 12 (left: 1 1 12)",
                "12 - 1 = 11 (left: 1 11 12)",
                "12 / 1 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)"
            ]
        },
        "step_4": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12)\n12 / 1 = 12 (left: 1 12)",
                "12 - 1 = 11 (left: 1 11 12)\nInput: 3 5 8",
                "12 / 1 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)"
            ],
            "values": [
                1.001,
                0.003,
                0.001
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- 1.2"
            ],
            "resampled_steps": [
                "12 / 1 = 12 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12)"
            ]
        },
        "step_5": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12)\n11 / 7 = 1 (left: 3 5 11)",
                "12 / 1 = 12 (left: 1 1 12)\n12 / 1 = 12 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12)\nInput: 4 4 16"
            ],
            "values": [
                3.0,
                0.001,
                0.003
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 1.2",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "12 / 1 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)"
            ]
        },
        "step_6": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "12 / 1 = 12 (left: 1 1 12)\n1 / 1 = 1 (left: 1 12)",
                "12 / 1 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)"
            ],
            "values": [
                0.003,
                20.001,
                0.003
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 2.0",
                "2 <- 6.1"
            ],
            "resampled_steps": [
                "12 / 1 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)",
                "12 / 1 = 12 (left: 1 1 12)\n1 - 1 = 0 (left: 0 12)",
                "12 / 1 = 12 (left: 1 1 12)\n1 / 1 = 1 (left: 1 12)"
            ]
        },
        "step_7": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "12 / 1 = 12 (left: 1 1 12)\n1 - 1 = 0 (left: 0 12)\n0 + 12 = 12 (left: 12)",
                "12 / 1 = 12 (left: 1 1 12)\n1 / 1 = 1 (left: 1 12)\n12 - 1 = 11 (left: 11)"
            ],
            "values": [
                0.001,
                0.002,
                0.001
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 2.1",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "12 / 1 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)",
                "12 / 1 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)",
                "12 / 1 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)"
            ]
        },
        "step_8": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "12 / 1 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "12 / 1 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)"
            ],
            "values": [
                0.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 1.0",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "12 / 1 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)",
                "12 / 1 = 12 (left: 1 1 12)",
                "12 / 1 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)"
            ]
        },
        "step_9": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "12 / 1 = 12 (left: 1 1 12)\n12 * 1 = 12 (left: 12)",
                "12 / 1 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)"
            ],
            "values": [
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 3.0",
                "2 <- 3.2"
            ],
            "resampled_steps": [
                "12 / 1 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)",
                "12 / 1 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)",
                "12 / 1 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)"
            ]
        },
        "step_10": {
            "steps": [
                "12 / 1 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "12 / 1 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "12 / 1 = 12 (left: 1 1 12)\n1 + 1 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)"
            ],
            "values": [
                60.0,
                0.003,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.159974
    },
    "10": {
        "input": "1 1 2 8",
        "step_1": {
            "steps": [
                "8 / 2 = 4 (left: 1 4 6)",
                "1 + 1 = 2 (left: 2 2 8)",
                "1 + 1 = 2 (left: 2 2 8)"
            ],
            "values": [
                60.0,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.0",
                "2 <- 1.0"
            ],
            "resampled_steps": [
                "",
                "8 / 2 = 4 (left: 1 4 6)",
                "8 / 2 = 4 (left: 1 4 6)"
            ]
        },
        "step_2": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 8)",
                "8 / 2 = 4 (left: 1 4 6)\n27 / 3 = 9 (left: 9 9)",
                "8 / 2 = 4 (left: 1 4 6)\n7 - 7 = 0 (left: 0 7)"
            ],
            "values": [
                2.001,
                0.003,
                0.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.0",
                "2 <- 1.0"
            ],
            "resampled_steps": [
                "",
                "8 / 2 = 4 (left: 1 4 6)",
                "8 / 2 = 4 (left: 1 4 6)"
            ]
        },
        "step_3": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 8)",
                "8 / 2 = 4 (left: 1 4 6)\n6 - 4 = 2 (left: 1 2)",
                "8 / 2 = 4 (left: 1 4 6)\n3 * 9 = 27 (left: 12 27)"
            ],
            "values": [
                21.001,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.0",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "8 / 2 = 4 (left: 1 4 6)",
                ""
            ]
        },
        "step_4": {
            "steps": [
                "8 - 1 = 7 (left: 1 2 7)",
                "8 / 2 = 4 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)",
                "8 - 2 = 6 (left: 1 2 6)"
            ],
            "values": [
                2.001,
                60.0,
                0.002
            ],
            "resampled": [
                "0 <- 4.1",
                "1 <- 1.0",
                "2 <- 1.0"
            ],
            "resampled_steps": [
                "8 / 2 = 4 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)",
                "8 / 2 = 4 (left: 1 4 6)",
                "8 / 2 = 4 (left: 1 4 6)"
            ]
        },
        "step_5": {
            "steps": [
                "8 / 2 = 4 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)\n6 / 4 = 1.5 (left: 1.5)",
                "8 / 2 = 4 (left: 1 4 6)\n27 - 9 = 18 (left: 3 18)",
                "8 / 2 = 4 (left: 1 4 6)\n7 - 5 = 2 (left: 2 2 9)"
            ],
            "values": [
                0.001,
                0.003,
                3.0
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 3.0",
                "2 <- 4.1"
            ],
            "resampled_steps": [
                "8 / 2 = 4 (left: 1 4 6)",
                "1 + 1 = 2 (left: 2 2 8)",
                "8 / 2 = 4 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)"
            ]
        },
        "step_6": {
            "steps": [
                "8 / 2 = 4 (left: 1 4 6)\n1 + 6 = 7 (left: 4 7)",
                "1 + 1 = 2 (left: 2 2 8)\n2 / 8 = 0.25 (left: 0.25 8)",
                "8 / 2 = 4 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)\n6 / 4 = 1.5 (left: 1.5)"
            ],
            "values": [
                0.001,
                1.001,
                1.0
            ],
            "resampled": [
                "0 <- 4.1",
                "1 <- 4.1",
                "2 <- 4.1"
            ],
            "resampled_steps": [
                "8 / 2 = 4 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)",
                "8 / 2 = 4 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)",
                "8 / 2 = 4 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)"
            ]
        },
        "step_7": {
            "steps": [
                "8 / 2 = 4 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "8 / 2 = 4 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)",
                "8 / 2 = 4 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)"
            ],
            "values": [
                60.0,
                0.003,
                0.001
            ],
            "resampled": [
                "0 <- 4.1",
                "1 <- 4.1",
                "2 <- 4.1"
            ],
            "resampled_steps": [
                "8 / 2 = 4 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)",
                "8 / 2 = 4 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)",
                "8 / 2 = 4 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)"
            ]
        },
        "step_8": {
            "steps": [
                "8 / 2 = 4 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)",
                "8 / 2 = 4 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "8 / 2 = 4 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)"
            ],
            "values": [
                0.001,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 8.1",
                "2 <- 7.0"
            ],
            "resampled_steps": [
                "8 / 2 = 4 (left: 1 4 6)",
                "8 / 2 = 4 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "8 / 2 = 4 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)"
            ]
        },
        "step_9": {
            "steps": [
                "8 / 2 = 4 (left: 1 4 6)\n1 * 4 = 4 (left: 4 6)",
                "8 / 2 = 4 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (8 / 2) * (1 * 6) = 24",
                "8 / 2 = 4 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (8 / 2) * (1 * 6) = 24"
            ],
            "values": [
                40.001,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 7.0",
                "1 <- 7.0",
                "2 <- 7.0"
            ],
            "resampled_steps": [
                "8 / 2 = 4 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "8 / 2 = 4 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "8 / 2 = 4 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)"
            ]
        },
        "step_10": {
            "steps": [
                "8 / 2 = 4 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (8 / 2) * (1 * 6) = 24",
                "8 / 2 = 4 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (1 * (1 * 2)) * 8 = 24",
                "8 / 2 = 4 (left: 1 4 6)\n4 * 1 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (8 / 2) * (1 * 1) = 24"
            ],
            "values": [
                0.003,
                60.0,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.177378
    },
    "11": {
        "input": "1 1 4 8",
        "step_1": {
            "steps": [
                "10 - 2 = 8 (left: 3 5 8)",
                "4 + 1 = 5 (left: 4 5 8)",
                "4 + 1 = 5 (left: 1 4 8)"
            ],
            "values": [
                3.0,
                3.0,
                1.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "1 + 1 = 2 (left: 2 4 8)",
                "8 - 4 = 4 (left: 1 4 4)",
                "4 * 1 = 4 (left: 4 4 8)"
            ],
            "values": [
                0.003,
                1.001,
                60.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 2.2",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "4 * 1 = 4 (left: 4 4 8)",
                "4 * 1 = 4 (left: 4 4 8)",
                "4 * 1 = 4 (left: 4 4 8)"
            ]
        },
        "step_3": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8)\n15 / 3 = 5 (left: 5 9)",
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 - 4 = 0 (left: 0 8)"
            ],
            "values": [
                0.003,
                20.002,
                40.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 3.2",
                "2 <- 3.1"
            ],
            "resampled_steps": [
                "4 * 1 = 4 (left: 4 4 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 - 4 = 0 (left: 0 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)"
            ]
        },
        "step_4": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8)\n5 * 9 = 45 (left: 3 45)",
                "4 * 1 = 4 (left: 4 4 8)\n4 - 4 = 0 (left: 0 8)\nPossible next steps:",
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 * 8 = 128 (left: 8 128)"
            ],
            "values": [
                0.003,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 4.2",
                "2 <- 4.2"
            ],
            "resampled_steps": [
                "",
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 * 8 = 128 (left: 8 128)",
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 * 8 = 128 (left: 8 128)"
            ]
        },
        "step_5": {
            "steps": [
                "1 + 1 = 2 (left: 2 4 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 * 8 = 128 (left: 8 128)\n128 - 16 = 112 (left: 112)",
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 * 8 = 128 (left: 8 128)\n8 * 16 = 128 (left: 16)"
            ],
            "values": [
                1.002,
                0.002,
                0.002
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 2.2",
                "2 <- 3.2"
            ],
            "resampled_steps": [
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)",
                "4 * 1 = 4 (left: 4 4 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 - 4 = 0 (left: 0 8)"
            ]
        },
        "step_6": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 - 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8)\n8 - 4 = 4 (left: 4 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 - 4 = 0 (left: 0 8)\n5 - 3 = 2 (left: 2 1)"
            ],
            "values": [
                0.001,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- INIT",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "4 * 1 = 4 (left: 4 4 8)\n4 - 4 = 0 (left: 0 8)",
                "",
                "4 * 1 = 4 (left: 4 4 8)"
            ]
        },
        "step_7": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8)\n4 - 4 = 0 (left: 0 8)\n0 + 8 = 8 (left: 8)",
                "8 - 4 = 4 (left: 1 4 4)",
                "4 * 1 = 4 (left: 4 4 8)\n4 + 4 = 8 (left: 8 8)"
            ],
            "values": [
                0.002,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 3.2",
                "2 <- 3.2"
            ],
            "resampled_steps": [
                "4 * 1 = 4 (left: 4 4 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 - 4 = 0 (left: 0 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 - 4 = 0 (left: 0 8)"
            ]
        },
        "step_8": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8)\n8 - 4 = 4 (left: 4 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 - 4 = 0 (left: 0 8)\n0 + 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 - 4 = 0 (left: 0 8)\n0 + 8 = 8"
            ],
            "values": [
                0.003,
                0.001,
                0.003
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 2.2",
                "2 <- 1.0"
            ],
            "resampled_steps": [
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 * 8 = 128 (left: 8 128)",
                "4 * 1 = 4 (left: 4 4 8)",
                "10 - 2 = 8 (left: 3 5 8)"
            ]
        },
        "step_9": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 * 8 = 128 (left: 8 128)\n128 + 8 = 136 (left: 136)",
                "4 * 1 = 4 (left: 4 4 8)\n4 + 4 = 8 (left: 8 8)",
                "10 - 2 = 8 (left: 3 5 8)\n3 + 5 = 8 (left: 8 8)"
            ],
            "values": [
                0.003,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 3.2",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 * 8 = 128 (left: 8 128)",
                "4 * 1 = 4 (left: 4 4 8)\n4 - 4 = 0 (left: 0 8)",
                "4 * 1 = 4 (left: 4 4 8)"
            ]
        },
        "step_10": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 8)\n4 * 4 = 16 (left: 16 8)\n16 * 8 = 128 (left: 8 128)\n8 * 8 = 64 (left: 64 128)",
                "4 * 1 = 4 (left: 4 4 8)\n4 - 4 = 0 (left: 0 8)\n0 + 8 = 8 (left: 8)",
                "4 * 1 = 4 (left: 4 4 8)\n4 / 4 = 1 (left: 1 8)"
            ],
            "values": [
                21.001,
                0.003,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.193452
    },
    "12": {
        "input": "1 1 5 8",
        "step_1": {
            "steps": [
                "8 - 1 = 7 (left: 1 5 7)",
                "8 - 1 = 7 (left: 1 5 7)",
                "8 - 5 = 3 (left: 1 3 8)"
            ],
            "values": [
                3.0,
                2.001,
                60.0
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- 1.2"
            ],
            "resampled_steps": [
                "8 - 5 = 3 (left: 1 3 8)",
                "8 - 5 = 3 (left: 1 3 8)",
                "8 - 5 = 3 (left: 1 3 8)"
            ]
        },
        "step_2": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8)\n8 / 3 = 2.67 (left: 1 2.67)",
                "8 - 5 = 3 (left: 1 3 8)\n10 / 5 = 2 (left: 5 2)",
                "8 - 5 = 3 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)"
            ],
            "values": [
                2.001,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 1.2",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "8 - 5 = 3 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)",
                "8 - 5 = 3 (left: 1 3 8)",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)\n1 + 5 = 6 (left: 6)",
                "8 - 5 = 3 (left: 1 3 8)\n3 - 1 = 2 (left: 2 8)",
                "9 + 3 = 12 (left: 6 9 12)"
            ],
            "values": [
                0.003,
                0.002,
                22.0
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 3.2"
            ],
            "resampled_steps": [
                "8 - 5 = 3 (left: 1 3 8)\n10 / 5 = 2 (left: 5 2)",
                "8 - 5 = 3 (left: 1 3 8)\n10 / 5 = 2 (left: 5 2)",
                "9 + 3 = 12 (left: 6 9 12)"
            ]
        },
        "step_4": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8)\n10 / 5 = 2 (left: 5 2)\n5 / 2 = 2.5 (left: 2.5)",
                "8 - 5 = 3 (left: 1 3 8)\n10 / 5 = 2 (left: 5 2)\n5 * 2 = 10 (left: 10)",
                "9 + 3 = 12 (left: 6 9 12)\n9 - 6 = 3 (left: 3 12)"
            ],
            "values": [
                0.001,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 2.1",
                "2 <- 1.2"
            ],
            "resampled_steps": [
                "8 - 5 = 3 (left: 1 3 8)",
                "8 - 5 = 3 (left: 1 3 8)\n10 / 5 = 2 (left: 5 2)",
                "8 - 5 = 3 (left: 1 3 8)"
            ]
        },
        "step_5": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8)\n8 - 1 = 7 (left: 7)",
                "8 - 5 = 3 (left: 1 3 8)\n10 / 5 = 2 (left: 5 2)\n5 - 2 = 3 (left: 3)",
                "8 - 5 = 3 (left: 1 3 8)\n8 / 3 = 2.67 (left: 1 2.67)"
            ],
            "values": [
                0.0,
                0.003,
                2.0
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 1.2",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "8 - 5 = 3 (left: 1 3 8)\n10 / 5 = 2 (left: 5 2)",
                "8 - 5 = 3 (left: 1 3 8)",
                ""
            ]
        },
        "step_6": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8)\n10 / 5 = 2 (left: 5 2)\n5 / 2 = 2.5 (left: 2.5)",
                "8 - 5 = 3 (left: 1 3 8)\n8 * 1 = 8 (left: 3 8)",
                "15 / 9 = 1 (left: 1 15 15)"
            ],
            "values": [
                0.001,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 3.2",
                "2 <- 6.1"
            ],
            "resampled_steps": [
                "8 - 5 = 3 (left: 1 3 8)\n10 / 5 = 2 (left: 5 2)",
                "9 + 3 = 12 (left: 6 9 12)",
                "8 - 5 = 3 (left: 1 3 8)\n8 * 1 = 8 (left: 3 8)"
            ]
        },
        "step_7": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8)\n10 / 5 = 2 (left: 5 2)\n10 - 3 = 7 (left: 7)",
                "9 + 3 = 12 (left: 6 9 12)\n12 - 6 = 6 (left: 6 6)",
                "8 - 5 = 3 (left: 1 3 8)\n8 * 1 = 8 (left: 3 8)\n3 + 8 = 11 (left: 11)"
            ],
            "values": [
                0.002,
                21.001,
                0.002
            ],
            "resampled": [
                "0 <- 6.1",
                "1 <- 2.2",
                "2 <- 6.1"
            ],
            "resampled_steps": [
                "8 - 5 = 3 (left: 1 3 8)\n8 * 1 = 8 (left: 3 8)",
                "8 - 5 = 3 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)",
                "8 - 5 = 3 (left: 1 3 8)\n8 * 1 = 8 (left: 3 8)"
            ]
        },
        "step_8": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8)\n8 * 1 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5)",
                "8 - 5 = 3 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)\n1 * 5 = 5 (left: 5)",
                "8 - 5 = 3 (left: 1 3 8)\n8 * 1 = 8 (left: 3 8)\n3 * 8 = 24 (left: 8)"
            ],
            "values": [
                0.001,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 6.1",
                "1 <- 1.2",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "8 - 5 = 3 (left: 1 3 8)\n8 * 1 = 8 (left: 3 8)",
                "8 - 5 = 3 (left: 1 3 8)",
                "8 - 5 = 3 (left: 1 3 8)\n10 / 5 = 2 (left: 5 2)"
            ]
        },
        "step_9": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8)\n8 * 1 = 8 (left: 3 8)\n3 + 8 = 11 (left: 11)",
                "8 - 5 = 3 (left: 1 3 8)\nPossible next steps:",
                "8 - 5 = 3 (left: 1 3 8)\n10 / 5 = 2 (left: 5 2)\n5 - 2 = 3 (left: 3)"
            ],
            "values": [
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 2.2",
                "2 <- 1.2"
            ],
            "resampled_steps": [
                "8 - 5 = 3 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)",
                "8 - 5 = 3 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)",
                "8 - 5 = 3 (left: 1 3 8)"
            ]
        },
        "step_10": {
            "steps": [
                "8 - 5 = 3 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)\n1 + 5 = 6 (left: 6)",
                "8 - 5 = 3 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)\n1 + 5 = 6 (left: 6)",
                "8 - 5 = 3 (left: 1 3 8)\n9 - 6 = 3 (left: 3 3 12)"
            ],
            "values": [
                0.002,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.2087965
    },
    "13": {
        "input": "4 6 11 11",
        "step_1": {
            "steps": [
                "11 - 6 = 5 (left: 4 5 11)",
                "6 / 4 = 1.5 (left: 1.5 11 11)",
                "11 - 6 = 5 (left: 4 5 11)"
            ],
            "values": [
                20.002,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.0",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "11 - 6 = 5 (left: 4 5 11)",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "11 / 4 = 2.75 (left: 6 2.75 11)",
                "11 - 6 = 5 (left: 4 5 11)\n5 * 11 = 55 (left: 4 55)",
                "6 - 4 = 2 (left: 2 11 11)"
            ],
            "values": [
                2.001,
                60.0,
                20.002
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- INIT",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "11 - 6 = 5 (left: 4 5 11)\n5 * 11 = 55 (left: 4 55)",
                "",
                "6 - 4 = 2 (left: 2 11 11)"
            ]
        },
        "step_3": {
            "steps": [
                "11 - 6 = 5 (left: 4 5 11)\n5 * 11 = 55 (left: 4 55)\n4 * 55 = 220 (left: 220)",
                "4 + 6 = 10 (left: 10 11 11)",
                "6 - 4 = 2 (left: 2 11 11)\n11 / 2 = 5.5 (left: 5.5 11 11)"
            ],
            "values": [
                0.002,
                1.002,
                3.0
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 2.1",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "11 - 6 = 5 (left: 4 5 11)",
                "11 - 6 = 5 (left: 4 5 11)\n5 * 11 = 55 (left: 4 55)",
                "11 - 6 = 5 (left: 4 5 11)\n5 * 11 = 55 (left: 4 55)"
            ]
        },
        "step_4": {
            "steps": [
                "11 - 6 = 5 (left: 4 5 11)\n5 + 11 = 16 (left: 4 16)",
                "11 - 6 = 5 (left: 4 5 11)\n5 * 11 = 55 (left: 4 55)\n4 + 55 = 59 (left: 59)",
                "11 - 6 = 5 (left: 4 5 11)\n5 * 11 = 55 (left: 4 55)\n55 - 4 = 51 (left: 51)"
            ],
            "values": [
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 2.2",
                "2 <- 3.2"
            ],
            "resampled_steps": [
                "11 - 6 = 5 (left: 4 5 11)\n5 * 11 = 55 (left: 4 55)",
                "6 - 4 = 2 (left: 2 11 11)",
                "6 - 4 = 2 (left: 2 11 11)\n11 / 2 = 5.5 (left: 5.5 11 11)"
            ]
        },
        "step_5": {
            "steps": [
                "11 - 6 = 5 (left: 4 5 11)\n5 * 11 = 55 (left: 4 55)\n4 + 55 = 59 (left: 59)",
                "6 - 4 = 2 (left: 2 11 11)\n11 / 2 = 5.5 (left: 5.5 11)",
                "6 - 4 = 2 (left: 2 11 11)\n11 / 2 = 5.5 (left: 5.5 11 11)\n3 * 6 = 18 (left: 6 18)"
            ],
            "values": [
                0.003,
                2.001,
                21.001
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 5.2",
                "2 <- 5.2"
            ],
            "resampled_steps": [
                "11 - 6 = 5 (left: 4 5 11)\n5 * 11 = 55 (left: 4 55)",
                "6 - 4 = 2 (left: 2 11 11)\n11 / 2 = 5.5 (left: 5.5 11 11)\n3 * 6 = 18 (left: 6 18)",
                "6 - 4 = 2 (left: 2 11 11)\n11 / 2 = 5.5 (left: 5.5 11 11)\n3 * 6 = 18 (left: 6 18)"
            ]
        },
        "step_6": {
            "steps": [
                "11 - 6 = 5 (left: 4 5 11)\n5 * 11 = 55 (left: 4 55)\n4 * 55 = 220 (left: 220)",
                "6 - 4 = 2 (left: 2 11 11)\n11 / 2 = 5.5 (left: 5.5 11 11)\n3 * 6 = 18 (left: 6 18)\n18 - 6 = 12 (left: 12 18)",
                "6 - 4 = 2 (left: 2 11 11)\n11 / 2 = 5.5 (left: 5.5 11 11)\n3 * 6 = 18 (left: 6 18)\n6 * 18 = 108 (left: 108)"
            ],
            "values": [
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 5.2",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "11 - 6 = 5 (left: 4 5 11)\n5 * 11 = 55 (left: 4 55)",
                "6 - 4 = 2 (left: 2 11 11)\n11 / 2 = 5.5 (left: 5.5 11 11)\n3 * 6 = 18 (left: 6 18)",
                "6 - 4 = 2 (left: 2 11 11)"
            ]
        },
        "step_7": {
            "steps": [
                "11 - 6 = 5 (left: 4 5 11)\n5 * 11 = 55 (left: 4 55)\n27 - 9 = 18 (left: 3 18)",
                "6 - 4 = 2 (left: 2 11 11)\n11 / 2 = 5.5 (left: 5.5 11 11)\n3 * 6 = 18 (left: 6 18)\n3 * 3 = 9 (left: 9 3 6)",
                "6 - 4 = 2 (left: 2 11 11)\n11 - 2 = 9 (left: 9 11)"
            ],
            "values": [
                0.003,
                3.0,
                0.001
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "11 - 6 = 5 (left: 4 5 11)\n5 * 11 = 55 (left: 4 55)",
                "11 - 6 = 5 (left: 4 5 11)\n5 * 11 = 55 (left: 4 55)",
                "11 - 6 = 5 (left: 4 5 11)\n5 * 11 = 55 (left: 4 55)"
            ]
        },
        "step_8": {
            "steps": [
                "11 - 6 = 5 (left: 4 5 11)\n5 * 11 = 55 (left: 4 55)\n55 / 4 = 13.75 (left: 13.75)",
                "11 - 6 = 5 (left: 4 5 11)\n5 * 11 = 55 (left: 4 55)\n4 + 55 = 59",
                "11 - 6 = 5 (left: 4 5 11)\n5 * 11 = 55 (left: 4 55)\n4 * 55 = 220 (left: 220)"
            ],
            "values": [
                0.003,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "11 - 6 = 5 (left: 4 5 11)\n5 * 11 = 55 (left: 4 55)",
                "11 - 6 = 5 (left: 4 5 11)\n5 * 11 = 55 (left: 4 55)",
                "11 - 6 = 5 (left: 4 5 11)\n5 * 11 = 55 (left: 4 55)"
            ]
        },
        "step_9": {
            "steps": [
                "11 - 6 = 5 (left: 4 5 11)\n5 * 11 = 55 (left: 4 55)\n55 / 4 = 13.75 (left: 13.75)",
                "11 - 6 = 5 (left: 4 5 11)\n5 * 11 = 55 (left: 4 55)\n4 * 55 = 220 (left: 220)",
                "11 - 6 = 5 (left: 4 5 11)\n5 * 11 = 55 (left: 4 55)\n20 / 10 = 2 (left: 2 30)"
            ],
            "values": [
                0.002,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 2.1",
                "2 <- 5.2"
            ],
            "resampled_steps": [
                "11 - 6 = 5 (left: 4 5 11)",
                "11 - 6 = 5 (left: 4 5 11)\n5 * 11 = 55 (left: 4 55)",
                "6 - 4 = 2 (left: 2 11 11)\n11 / 2 = 5.5 (left: 5.5 11 11)\n3 * 6 = 18 (left: 6 18)"
            ]
        },
        "step_10": {
            "steps": [
                "11 - 6 = 5 (left: 4 5 11)\n9 - 3 = 6 (left: 6 7)",
                "11 - 6 = 5 (left: 4 5 11)\n5 * 11 = 55 (left: 4 55)\n4 - 55 = -51 (left: -51)",
                "6 - 4 = 2 (left: 2 11 11)\n11 / 2 = 5.5 (left: 5.5 11 11)\n3 * 6 = 18 (left: 6 18)\n5 + 10 = 15 (left: 15)"
            ],
            "values": [
                0.003,
                0.0,
                0.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.2251
    },
    "14": {
        "input": "1 1 3 12",
        "step_1": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 12)",
                "3 + 1 = 4 (left: 1 4 12)",
                "12 / 1 = 12 (left: 1 3 12)"
            ],
            "values": [
                41.0,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 1.0",
                "2 <- 1.0"
            ],
            "resampled_steps": [
                "3 * 1 = 3 (left: 1 3 12)",
                "3 * 1 = 3 (left: 1 3 12)",
                "3 * 1 = 3 (left: 1 3 12)"
            ]
        },
        "step_2": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 12)\n12 - 1 = 11 (left: 3 11)",
                "3 * 1 = 3 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)",
                "3 * 1 = 3 (left: 1 3 12)\n3 - 1 = 2 (left: 2 12)"
            ],
            "values": [
                0.003,
                21.0,
                60.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.0"
            ],
            "resampled_steps": [
                "",
                "",
                "3 * 1 = 3 (left: 1 3 12)"
            ]
        },
        "step_3": {
            "steps": [
                "3 - 1 = 2 (left: 1 2 12)",
                "3 + 1 = 4 (left: 1 4 12)",
                "3 * 1 = 3 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)"
            ],
            "values": [
                60.0,
                0.003,
                40.001
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- INIT",
                "2 <- 3.0"
            ],
            "resampled_steps": [
                "3 * 1 = 3 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)",
                "",
                "3 - 1 = 2 (left: 1 2 12)"
            ]
        },
        "step_4": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)\n4 / 1 = 4 (left: 4)",
                "1 + 1 = 2 (left: 2 3 12)",
                "3 - 1 = 2 (left: 1 2 12)\nPossible next steps:"
            ],
            "values": [
                1.001,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 1.0",
                "2 <- 1.2"
            ],
            "resampled_steps": [
                "3 * 1 = 3 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)",
                "3 * 1 = 3 (left: 1 3 12)",
                "12 / 1 = 12 (left: 1 3 12)"
            ]
        },
        "step_5": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)\n4 - 1 = 3 (left: 3)",
                "3 * 1 = 3 (left: 1 3 12)\n3 - 1 = 2 (left: 2 12)",
                "12 / 1 = 12 (left: 1 3 12)\n12 - 1 = 11 (left: 3 11)"
            ],
            "values": [
                0.003,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 5.1",
                "1 <- 2.2",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "3 * 1 = 3 (left: 1 3 12)\n3 - 1 = 2 (left: 2 12)",
                "3 * 1 = 3 (left: 1 3 12)\n3 - 1 = 2 (left: 2 12)",
                "3 * 1 = 3 (left: 1 3 12)\n3 - 1 = 2 (left: 2 12)"
            ]
        },
        "step_6": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 12)\n3 - 1 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "3 * 1 = 3 (left: 1 3 12)\n3 - 1 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "3 * 1 = 3 (left: 1 3 12)\n3 - 1 = 2 (left: 2 12)\n12 * 2 = 24 (left: 24)"
            ],
            "values": [
                0.003,
                0.001,
                60.0
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 3.0",
                "2 <- 6.2"
            ],
            "resampled_steps": [
                "3 * 1 = 3 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)",
                "3 - 1 = 2 (left: 1 2 12)",
                "3 * 1 = 3 (left: 1 3 12)\n3 - 1 = 2 (left: 2 12)\n12 * 2 = 24 (left: 24)"
            ]
        },
        "step_7": {
            "steps": [
                "3 * 1 = 3 (left: 1 3 12)\n12 / 3 = 4 (left: 1 4)\n1 + 4 = 5",
                "3 - 1 = 2 (left: 1 2 12)\n12 - 1 = 11 (left: 2 11)",
                "3 * 1 = 3 (left: 1 3 12)\n3 - 1 = 2 (left: 2 12)\n12 * 2 = 24 (left: 24)\nAnswer: (3 * 1) * (12 - 2) = 24"
            ],
            "values": [
                0.003,
                1.001,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.2",
                "2 <- 6.2"
            ],
            "resampled_steps": [
                "",
                "12 / 1 = 12 (left: 1 3 12)",
                "3 * 1 = 3 (left: 1 3 12)\n3 - 1 = 2 (left: 2 12)\n12 * 2 = 24 (left: 24)"
            ]
        },
        "step_8": {
            "steps": [
                "1 + 1 = 2 (left: 2 3 12)",
                "12 / 1 = 12 (left: 1 3 12)\n12 - 1 = 11 (left: 3 11)",
                "3 * 1 = 3 (left: 1 3 12)\n3 - 1 = 2 (left: 2 12)\n12 * 2 = 24 (left: 24)\nAnswer: (3 * 1) * (12 - 2) = 24"
            ],
            "values": [
                0.003,
                20.002,
                0.003
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 2.2",
                "2 <- 3.0"
            ],
            "resampled_steps": [
                "3 - 1 = 2 (left: 1 2 12)",
                "3 * 1 = 3 (left: 1 3 12)\n3 - 1 = 2 (left: 2 12)",
                "3 - 1 = 2 (left: 1 2 12)"
            ]
        },
        "step_9": {
            "steps": [
                "3 - 1 = 2 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "3 * 1 = 3 (left: 1 3 12)\n3 - 1 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "3 - 1 = 2 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)"
            ],
            "values": [
                60.0,
                0.003,
                20.002
            ],
            "resampled": [
                "0 <- 9.0",
                "1 <- 5.1",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "3 - 1 = 2 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "3 * 1 = 3 (left: 1 3 12)\n3 - 1 = 2 (left: 2 12)",
                "3 * 1 = 3 (left: 1 3 12)\n3 - 1 = 2 (left: 2 12)"
            ]
        },
        "step_10": {
            "steps": [
                "3 - 1 = 2 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n1 * 6 = 6 (left: 6)",
                "3 * 1 = 3 (left: 1 3 12)\n3 - 1 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "3 * 1 = 3 (left: 1 3 12)\n3 - 1 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)"
            ],
            "values": [
                0.002,
                0.002,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.24192950000000002
    },
    "15": {
        "input": "2 2 2 12",
        "step_1": {
            "steps": [
                "2 * 2 = 4 (left: 4 2 12)",
                "2 * 2 = 4 (left: 4 2 12)",
                "2 * 2 = 4 (left: 4 2 12)"
            ],
            "values": [
                2.001,
                2.001,
                1.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "2 + 2 = 4 (left: 4 4 12)",
                "2 + 2 = 4 (left: 2 4 12)",
                "2 * 2 = 4 (left: 4 2 12)"
            ],
            "values": [
                1.002,
                1.002,
                1.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "2 + 2 = 4 (left: 2 4 12)",
                "2 + 2 = 4 (left: 4 2 12)",
                "2 + 2 = 4 (left: 2 4 12)"
            ],
            "values": [
                1.002,
                2.001,
                2.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                ""
            ]
        },
        "step_4": {
            "steps": [
                "2 * 2 = 4 (left: 4 2 12)",
                "12 - 2 = 10 (left: 2 2 10)",
                "2 + 2 = 4 (left: 2 4 12)"
            ],
            "values": [
                2.001,
                22.0,
                2.001
            ],
            "resampled": [
                "0 <- 4.1",
                "1 <- 4.1",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "12 - 2 = 10 (left: 2 2 10)",
                "12 - 2 = 10 (left: 2 2 10)",
                ""
            ]
        },
        "step_5": {
            "steps": [
                "12 - 2 = 10 (left: 2 2 10)\n12 / 2 = 6 (left: 10 6)",
                "12 - 2 = 10 (left: 2 2 10)\n2 + 2 = 4 (left: 4 10)",
                "12 - 2 = 10 (left: 2 2 10)"
            ],
            "values": [
                0.003,
                2.0,
                1.002
            ],
            "resampled": [
                "0 <- 4.0",
                "1 <- 4.1",
                "2 <- 4.1"
            ],
            "resampled_steps": [
                "2 * 2 = 4 (left: 4 2 12)",
                "12 - 2 = 10 (left: 2 2 10)",
                "12 - 2 = 10 (left: 2 2 10)"
            ]
        },
        "step_6": {
            "steps": [
                "2 * 2 = 4 (left: 4 2 12)\n4 + 2 = 6 (left: 6 12)",
                "12 - 2 = 10 (left: 2 2 10)\n10 / 2 = 5 (left: 2 5)",
                "12 - 2 = 10 (left: 2 2 10)\n6 / 4 = 1.5 (left: 1.5 3)"
            ],
            "values": [
                1.002,
                60.0,
                0.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 6.1",
                "2 <- 6.1"
            ],
            "resampled_steps": [
                "",
                "12 - 2 = 10 (left: 2 2 10)\n10 / 2 = 5 (left: 2 5)",
                "12 - 2 = 10 (left: 2 2 10)\n10 / 2 = 5 (left: 2 5)"
            ]
        },
        "step_7": {
            "steps": [
                "2 + 2 = 4 (left: 4 2 12)",
                "12 - 2 = 10 (left: 2 2 10)\n10 / 2 = 5 (left: 2 5)\n2 * 5 = 10 (left: 10)",
                "12 - 2 = 10 (left: 2 2 10)\n10 / 2 = 5 (left: 2 5)\n5 - 2 = 3 (left: 3)"
            ],
            "values": [
                1.002,
                0.003,
                0.0
            ],
            "resampled": [
                "0 <- 6.1",
                "1 <- 4.1",
                "2 <- 6.1"
            ],
            "resampled_steps": [
                "12 - 2 = 10 (left: 2 2 10)\n10 / 2 = 5 (left: 2 5)",
                "12 - 2 = 10 (left: 2 2 10)",
                "12 - 2 = 10 (left: 2 2 10)\n10 / 2 = 5 (left: 2 5)"
            ]
        },
        "step_8": {
            "steps": [
                "12 - 2 = 10 (left: 2 2 10)\n10 / 2 = 5 (left: 2 5)\n2 + 5 = 7 (left: 7)",
                "12 - 2 = 10 (left: 2 2 10)\n2 * 2 = 4 (left: 4 10)",
                "12 - 2 = 10 (left: 2 2 10)\n10 / 2 = 5 (left: 2 5)\n2 + 5 = 7 (left: 7)"
            ],
            "values": [
                0.002,
                40.0,
                0.001
            ],
            "resampled": [
                "0 <- 6.1",
                "1 <- 8.1",
                "2 <- 6.1"
            ],
            "resampled_steps": [
                "12 - 2 = 10 (left: 2 2 10)\n10 / 2 = 5 (left: 2 5)",
                "12 - 2 = 10 (left: 2 2 10)\n2 * 2 = 4 (left: 4 10)",
                "12 - 2 = 10 (left: 2 2 10)\n10 / 2 = 5 (left: 2 5)"
            ]
        },
        "step_9": {
            "steps": [
                "12 - 2 = 10 (left: 2 2 10)\n10 / 2 = 5 (left: 2 5)\n11 / 3 = 3.6667 (left: 3 3.6667)",
                "12 - 2 = 10 (left: 2 2 10)\n2 * 2 = 4 (left: 4 10)\nInput: 7 3",
                "12 - 2 = 10 (left: 2 2 10)\n10 / 2 = 5 (left: 2 5)\n7 + 1 = 8 (left: 8 3)"
            ],
            "values": [
                2.001,
                0.003,
                40.0
            ],
            "resampled": [
                "0 <- 8.1",
                "1 <- 6.1",
                "2 <- 9.2"
            ],
            "resampled_steps": [
                "12 - 2 = 10 (left: 2 2 10)\n2 * 2 = 4 (left: 4 10)",
                "12 - 2 = 10 (left: 2 2 10)\n10 / 2 = 5 (left: 2 5)",
                "12 - 2 = 10 (left: 2 2 10)\n10 / 2 = 5 (left: 2 5)\n7 + 1 = 8 (left: 8 3)"
            ]
        },
        "step_10": {
            "steps": [
                "12 - 2 = 10 (left: 2 2 10)\n2 * 2 = 4 (left: 4 10)\n10 / 4 = 2.5 (left: 2.5)",
                "12 - 2 = 10 (left: 2 2 10)\n10 / 2 = 5 (left: 2 5)\n2 + 5 = 7 (left: 7)",
                "12 - 2 = 10 (left: 2 2 10)\n10 / 2 = 5 (left: 2 5)\n7 + 1 = 8 (left: 8 3)\n8 - 3 = 5 (left: 5)"
            ],
            "values": [
                0.001,
                0.002,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.259133
    },
    "16": {
        "input": "1 1 4 12",
        "step_1": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 12)",
                "1 + 1 = 2 (left: 2 4 12)",
                "12 - 4 = 8 (left: 1 4 8)"
            ],
            "values": [
                2.001,
                2.0,
                2.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "12 - 4 = 8 (left: 1 8 12)",
                "1 + 1 = 2 (left: 2 4 12)",
                "4 + 1 = 5 (left: 1 5 12)"
            ],
            "values": [
                2.001,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "12 - 1 = 11 (left: 1 4 11)",
                "1 + 1 = 2 (left: 2 4 12)",
                "4 * 1 = 4 (left: 4 4 12)"
            ],
            "values": [
                2.001,
                1.002,
                41.0
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- INIT",
                "2 <- 3.2"
            ],
            "resampled_steps": [
                "4 * 1 = 4 (left: 4 4 12)",
                "",
                "4 * 1 = 4 (left: 4 4 12)"
            ]
        },
        "step_4": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 12)\n12 / 4 = 3 (left: 3 4)",
                "4 + 1 = 5 (left: 1 5 12)",
                "4 * 1 = 4 (left: 4 4 12)\n4 / 4 = 1 (left: 1 12)"
            ],
            "values": [
                21.0,
                1.002,
                21.001
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 3.2",
                "2 <- 3.2"
            ],
            "resampled_steps": [
                "4 * 1 = 4 (left: 4 4 12)",
                "4 * 1 = 4 (left: 4 4 12)",
                "4 * 1 = 4 (left: 4 4 12)"
            ]
        },
        "step_5": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 12)\n8 * 8 = 64 (left: 64 16)",
                "4 * 1 = 4 (left: 4 4 12)\n1 + 3 = 4 (left: 4 12)",
                "4 * 1 = 4 (left: 4 4 12)\nInput: 1 3 4 8"
            ],
            "values": [
                22.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 5.0",
                "1 <- 4.2",
                "2 <- 3.2"
            ],
            "resampled_steps": [
                "4 * 1 = 4 (left: 4 4 12)\n8 * 8 = 64 (left: 64 16)",
                "4 * 1 = 4 (left: 4 4 12)\n4 / 4 = 1 (left: 1 12)",
                "4 * 1 = 4 (left: 4 4 12)"
            ]
        },
        "step_6": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 12)\n8 * 8 = 64 (left: 64 16)\n64 * 16 = 1024 (left: 1024)",
                "4 * 1 = 4 (left: 4 4 12)\n4 / 4 = 1 (left: 1 12)\n1 * 12 = 12 (left: 12)",
                "4 * 1 = 4 (left: 4 4 12)\n12 / 4 = 3 (left: 3 4 12)"
            ],
            "values": [
                0.003,
                0.001,
                41.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 4.0"
            ],
            "resampled_steps": [
                "",
                "",
                "4 * 1 = 4 (left: 4 4 12)\n12 / 4 = 3 (left: 3 4)"
            ]
        },
        "step_7": {
            "steps": [
                "4 + 1 = 5 (left: 1 5 12)",
                "1 + 1 = 2 (left: 2 4 12)",
                "4 * 1 = 4 (left: 4 4 12)\n12 / 4 = 3 (left: 3 4)\n3 + 4 = 7 (left: 7)"
            ],
            "values": [
                1.002,
                1.001,
                0.002
            ],
            "resampled": [
                "0 <- 5.0",
                "1 <- 6.2",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "4 * 1 = 4 (left: 4 4 12)\n8 * 8 = 64 (left: 64 16)",
                "4 * 1 = 4 (left: 4 4 12)\n12 / 4 = 3 (left: 3 4 12)",
                ""
            ]
        },
        "step_8": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 12)\n8 * 8 = 64 (left: 64 16)\n64 * 16 = 1024 (left: 1024)",
                "4 * 1 = 4 (left: 4 4 12)\n12 / 4 = 3 (left: 3 4 12)\n12 / 3 = 4 (left: 4 12)",
                "4 - 1 = 3 (left: 3 4 12)"
            ],
            "values": [
                0.003,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 6.2",
                "1 <- 6.2",
                "2 <- 8.2"
            ],
            "resampled_steps": [
                "4 * 1 = 4 (left: 4 4 12)\n12 / 4 = 3 (left: 3 4 12)",
                "4 * 1 = 4 (left: 4 4 12)\n12 / 4 = 3 (left: 3 4 12)",
                "4 - 1 = 3 (left: 3 4 12)"
            ]
        },
        "step_9": {
            "steps": [
                "4 * 1 = 4 (left: 4 4 12)\n12 / 4 = 3 (left: 3 4 12)\n12 - 3 = 9 (left: 4 9)",
                "4 * 1 = 4 (left: 4 4 12)\n12 / 4 = 3 (left: 3 4 12)\n5 + 6 = 11 (left: 7 11 14)",
                "4 - 1 = 3 (left: 3 4 12)\n12 / 4 = 3 (left: 3 12)"
            ],
            "values": [
                20.002,
                1.002,
                40.001
            ],
            "resampled": [
                "0 <- 9.2",
                "1 <- 8.2",
                "2 <- 6.2"
            ],
            "resampled_steps": [
                "4 - 1 = 3 (left: 3 4 12)\n12 / 4 = 3 (left: 3 12)",
                "4 - 1 = 3 (left: 3 4 12)",
                "4 * 1 = 4 (left: 4 4 12)\n12 / 4 = 3 (left: 3 4 12)"
            ]
        },
        "step_10": {
            "steps": [
                "4 - 1 = 3 (left: 3 4 12)\n12 / 4 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)",
                "4 - 1 = 3 (left: 3 4 12)\n12 / 4 = 3 (left: 3 12)",
                "4 * 1 = 4 (left: 4 4 12)\n12 / 4 = 3 (left: 3 4 12)\n3 + 4 = 7 (left: 7 12)"
            ],
            "values": [
                40.0,
                0.003,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.2774125
    },
    "17": {
        "input": "1 1 12 12",
        "step_1": {
            "steps": [
                "12 * 1 = 12 (left: 12 12 12)",
                "12 / 1 = 12 (left: 1 12 12)",
                "12 - 1 = 11 (left: 1 12 11)"
            ],
            "values": [
                0.003,
                21.001,
                40.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.1"
            ],
            "resampled_steps": [
                "",
                "",
                "12 / 1 = 12 (left: 1 12 12)"
            ]
        },
        "step_2": {
            "steps": [
                "12 + 1 = 13 (left: 1 12 13)",
                "1 * 1 = 1 (left: 1 12 12)",
                "12 / 1 = 12 (left: 1 12 12)\n1 + 12 = 13 (left: 12 13)"
            ],
            "values": [
                0.003,
                40.001,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "",
                "",
                "1 * 1 = 1 (left: 1 12 12)"
            ]
        },
        "step_3": {
            "steps": [
                "1 * 1 = 1 (left: 1 12 12)",
                "1 + 1 = 2 (left: 2 12 12)",
                "1 * 1 = 1 (left: 1 12 12)\n12 + 1 = 13 (left: 12 13)"
            ],
            "values": [
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 2.1",
                "2 <- 1.1"
            ],
            "resampled_steps": [
                "",
                "1 * 1 = 1 (left: 1 12 12)",
                "12 / 1 = 12 (left: 1 12 12)"
            ]
        },
        "step_4": {
            "steps": [
                "12 + 1 = 13 (left: 1 12 13)",
                "1 * 1 = 1 (left: 1 12 12)\n1 + 12 = 13 (left: 12 12 13)",
                "12 / 1 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)"
            ],
            "values": [
                0.003,
                0.003,
                40.001
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 12 12)",
                "1 * 1 = 1 (left: 1 12 12)",
                "1 * 1 = 1 (left: 1 12 12)"
            ]
        },
        "step_5": {
            "steps": [
                "1 * 1 = 1 (left: 1 12 12)\n18 - 9 = 9 (left: 4 9 9)",
                "1 * 1 = 1 (left: 1 12 12)\n1 * 0 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)"
            ],
            "values": [
                2.001,
                0.001,
                60.0
            ],
            "resampled": [
                "0 <- 5.2",
                "1 <- 5.2",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "1 * 1 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                ""
            ]
        },
        "step_6": {
            "steps": [
                "1 * 1 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24",
                "1 * 1 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)",
                "12 / 1 = 12 (left: 1 12 12)"
            ],
            "values": [
                20.002,
                0.001,
                20.002
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 6.0"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 12 12)",
                "1 * 1 = 1 (left: 1 12 12)",
                "1 * 1 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24"
            ]
        },
        "step_7": {
            "steps": [
                "1 * 1 = 1 (left: 1 12 12)\n6 / 5 = 1.2 (left: 1.2)",
                "1 * 1 = 1 (left: 1 12 12)\n6 - 3 = 3 (left: 3 9)",
                "1 * 1 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24\n12 - 12 = 0 (left: 0 24)"
            ],
            "values": [
                20.0,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 5.2",
                "1 <- 7.0",
                "2 <- 5.2"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "1 * 1 = 1 (left: 1 12 12)\n6 / 5 = 1.2 (left: 1.2)",
                "1 * 1 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)"
            ]
        },
        "step_8": {
            "steps": [
                "1 * 1 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "1 * 1 = 1 (left: 1 12 12)\n6 / 5 = 1.2 (left: 1.2)\n1 + 2 = 3",
                "1 * 1 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24"
            ],
            "values": [
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 5.2",
                "1 <- 7.2",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "1 * 1 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24\n12 - 12 = 0 (left: 0 24)",
                "1 * 1 = 1 (left: 1 12 12)"
            ]
        },
        "step_9": {
            "steps": [
                "1 * 1 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24",
                "1 * 1 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24\n12 - 12 = 0 (left: 0 24)\nPossible next steps:",
                "1 * 1 = 1 (left: 1 12 12)\n12 - 1 = 11 (left: 11 12)"
            ],
            "values": [
                20.002,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 6.0",
                "1 <- 4.2",
                "2 <- 5.2"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24",
                "12 / 1 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "1 * 1 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)"
            ]
        },
        "step_10": {
            "steps": [
                "1 * 1 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24\n12 - 12 = 0 (left: 0 24)",
                "12 / 1 = 12 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "1 * 1 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)"
            ],
            "values": [
                60.0,
                60.0,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.29278250000000006
    },
    "18": {
        "input": "3 3 3 8",
        "step_1": {
            "steps": [
                "3 + 3 = 6 (left: 6 3 8)",
                "3 + 3 = 6 (left: 3 6 8)",
                "3 / 3 = 1 (left: 1 3 8)"
            ],
            "values": [
                3.0,
                1.002,
                40.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.2",
                "2 <- 1.2"
            ],
            "resampled_steps": [
                "",
                "3 / 3 = 1 (left: 1 3 8)",
                "3 / 3 = 1 (left: 1 3 8)"
            ]
        },
        "step_2": {
            "steps": [
                "3 + 3 = 6 (left: 6 3 8)",
                "3 / 3 = 1 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)"
            ],
            "values": [
                0.003,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 2.2",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "3 / 3 = 1 (left: 1 3 8)",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "3 / 3 = 1 (left: 1 3 8)\n8 - 3 = 5 (left: 5 8)",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n1 + 24 = 25 (left: 25)",
                "10 + 12 = 22 (left: 4 6 22)"
            ],
            "values": [
                0.002,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 1.2",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "3 / 3 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)",
                "3 / 3 = 1 (left: 1 3 8)",
                ""
            ]
        },
        "step_4": {
            "steps": [
                "3 / 3 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "3 / 3 = 1 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)",
                "3 * 3 = 9 (left: 3 8 9)"
            ],
            "values": [
                60.0,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 1.2",
                "2 <- 4.2"
            ],
            "resampled_steps": [
                "3 * 3 = 9 (left: 3 8 9)",
                "3 / 3 = 1 (left: 1 3 8)",
                "3 * 3 = 9 (left: 3 8 9)"
            ]
        },
        "step_5": {
            "steps": [
                "3 * 3 = 9 (left: 3 8 9)\n3 + 8 = 11 (left: 9 11)",
                "3 / 3 = 1 (left: 1 3 8)\n7 - 5 = 2 (left: 2 5)",
                "3 * 3 = 9 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)"
            ],
            "values": [
                0.002,
                60.0,
                1.002
            ],
            "resampled": [
                "0 <- 4.0",
                "1 <- 5.1",
                "2 <- 5.1"
            ],
            "resampled_steps": [
                "3 / 3 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "3 / 3 = 1 (left: 1 3 8)\n7 - 5 = 2 (left: 2 5)",
                "3 / 3 = 1 (left: 1 3 8)\n7 - 5 = 2 (left: 2 5)"
            ]
        },
        "step_6": {
            "steps": [
                "3 / 3 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 / 3) * 8 = 24",
                "3 / 3 = 1 (left: 1 3 8)\n7 - 5 = 2 (left: 2 5)\n3 + 9 = 12 (left: 12)",
                "3 / 3 = 1 (left: 1 3 8)\n7 - 5 = 2 (left: 2 5)\n10 - 4 = 6 (left: 6 10)"
            ],
            "values": [
                60.0,
                0.003,
                2.0
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 6.2",
                "2 <- 4.2"
            ],
            "resampled_steps": [
                "3 / 3 = 1 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)",
                "3 / 3 = 1 (left: 1 3 8)\n7 - 5 = 2 (left: 2 5)\n10 - 4 = 6 (left: 6 10)",
                "3 * 3 = 9 (left: 3 8 9)"
            ]
        },
        "step_7": {
            "steps": [
                "3 / 3 = 1 (left: 1 3 8)\n1 * 3 = 3 (left: 3 8)\n5 + 10 = 15 (left: 10)",
                "3 / 3 = 1 (left: 1 3 8)\n7 - 5 = 2 (left: 2 5)\n10 - 4 = 6 (left: 6 10)\n6 + 10 = 16",
                "3 * 3 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8)"
            ],
            "values": [
                0.003,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 4.0",
                "1 <- 5.1",
                "2 <- 6.0"
            ],
            "resampled_steps": [
                "3 / 3 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)",
                "3 / 3 = 1 (left: 1 3 8)\n7 - 5 = 2 (left: 2 5)",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 / 3) * 8 = 24"
            ]
        },
        "step_8": {
            "steps": [
                "3 / 3 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 / 3) * 8 * 1 = 24",
                "3 / 3 = 1 (left: 1 3 8)\n7 - 5 = 2 (left: 2 5)\n2 * 5 = 10 (left: 10)",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 / 3) * 8 = 24\nInput: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n3 + 4 = 7 (left: 7 12)\n7 * 12 = 84 (left: 84)\nAnswer: (2 * 6) * (3 + 4) = 84"
            ],
            "values": [
                40.001,
                0.002,
                60.0
            ],
            "resampled": [
                "0 <- 5.1",
                "1 <- 4.2",
                "2 <- 8.2"
            ],
            "resampled_steps": [
                "3 / 3 = 1 (left: 1 3 8)\n7 - 5 = 2 (left: 2 5)",
                "3 * 3 = 9 (left: 3 8 9)",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 / 3) * 8 = 24\nInput: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n3 + 4 = 7 (left: 7 12)\n7 * 12 = 84 (left: 84)\nAnswer: (2 * 6) * (3 + 4) = 84"
            ]
        },
        "step_9": {
            "steps": [
                "3 / 3 = 1 (left: 1 3 8)\n7 - 5 = 2 (left: 2 5)\n2 * 5 = 10 (left: 10)",
                "3 * 3 = 9 (left: 3 8 9)\n9 - 3 = 6 (left: 6 8 9)",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 / 3) * 8 = 24\nInput: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n3 + 4 = 7 (left: 7 12)\n7 * 12 = 84 (left: 84)\nAnswer: (2 * 6) * (3 + 4) = 84\nSorry, I couldn't find a way to get 24 using the numbers 2, 3, 4, and 6 with the given rules."
            ],
            "values": [
                0.003,
                3.0,
                0.003
            ],
            "resampled": [
                "0 <- 8.2",
                "1 <- 8.2",
                "2 <- 6.0"
            ],
            "resampled_steps": [
                "3 / 3 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 / 3) * 8 = 24\nInput: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n3 + 4 = 7 (left: 7 12)\n7 * 12 = 84 (left: 84)\nAnswer: (2 * 6) * (3 + 4) = 84",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 / 3) * 8 = 24\nInput: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n3 + 4 = 7 (left: 7 12)\n7 * 12 = 84 (left: 84)\nAnswer: (2 * 6) * (3 + 4) = 84",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 / 3) * 8 = 24"
            ]
        },
        "step_10": {
            "steps": [
                "3 / 3 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 / 3) * 8 = 24\nInput: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n3 + 4 = 7 (left: 7 12)\n7 * 12 = 84 (left: 84)\nAnswer: (2 * 6) * (3 + 4) = 84\nThere is no way to obtain 24 using the numbers 2, 3, 4, and 6 with the given restrictions.",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 / 3) * 8 = 24\nInput: 2 3 4 6\nSteps:\n2 * 6 = 12 (left: 3 4 12)\n3 + 4 = 7 (left: 7 12)\n7 * 12 = 84 (left: 84)\nAnswer: (2 * 6) * (3 + 4) = 84\nSorry, it seems there is no way to obtain 24 using the numbers 2, 3, 4, and 6 with the given restrictions.",
                "3 / 3 = 1 (left: 1 3 8)\n3 * 8 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (3 / 3) * 8 = 24\nInput: 6 6 6 6\nSteps:\n6 * 6 = 36 (left: 6 6 36)\n6 - 6 = 0 (left: 0 36)\n0 + 36 = 36 (left: 36)\nAnswer: (6 * 6) - (6 + 6) = 24"
            ],
            "values": [
                0.003,
                0.003,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.309126
    },
    "19": {
        "input": "1 1 2 6",
        "step_1": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 6)",
                "6 / 1 = 6 (left: 1 2 6)",
                "1 + 1 = 2 (left: 2 2 6)"
            ],
            "values": [
                60.0,
                2.001,
                22.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.2",
                "2 <- 1.2"
            ],
            "resampled_steps": [
                "",
                "1 + 1 = 2 (left: 2 2 6)",
                "1 + 1 = 2 (left: 2 2 6)"
            ]
        },
        "step_2": {
            "steps": [
                "2 * 1 = 2 (left: 2 6 6)",
                "1 + 1 = 2 (left: 2 2 6)\n3 * 7 = 21 (left: 21 21)",
                "1 + 1 = 2 (left: 2 2 6)\n4 * 5 = 20 (left: 20 9)"
            ],
            "values": [
                60.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 1.0",
                "2 <- 2.0"
            ],
            "resampled_steps": [
                "2 * 1 = 2 (left: 2 2 6)",
                "2 * 1 = 2 (left: 2 2 6)",
                "2 * 1 = 2 (left: 2 6 6)"
            ]
        },
        "step_3": {
            "steps": [
                "2 * 1 = 2 (left: 2 2 6)\n2 + 3 = 5 (left: 1 5)",
                "2 * 1 = 2 (left: 2 2 6)\n2 / 2 = 1 (left: 1 6)",
                "2 * 1 = 2 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)"
            ],
            "values": [
                40.0,
                41.0,
                60.0
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 2.0",
                "2 <- 3.2"
            ],
            "resampled_steps": [
                "2 * 1 = 2 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)",
                "2 * 1 = 2 (left: 2 6 6)",
                "2 * 1 = 2 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)"
            ]
        },
        "step_4": {
            "steps": [
                "2 * 1 = 2 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n6 / 4 = 1.5 (left: 1.5)",
                "2 * 1 = 2 (left: 2 6 6)\n6 * 2 = 12 (left: 6 12)",
                "2 * 1 = 2 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)"
            ],
            "values": [
                0.0,
                0.003,
                40.0
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 1.0",
                "2 <- 4.2"
            ],
            "resampled_steps": [
                "2 * 1 = 2 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)",
                "2 * 1 = 2 (left: 2 2 6)",
                "2 * 1 = 2 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)"
            ]
        },
        "step_5": {
            "steps": [
                "2 * 1 = 2 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)",
                "2 * 1 = 2 (left: 2 2 6)\n6 - 2 = 4 (left: 2 4)",
                "2 * 1 = 2 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (2 * 1) * (6 - 1) = 24"
            ],
            "values": [
                0.002,
                0.002,
                60.0
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 1.2",
                "2 <- 4.2"
            ],
            "resampled_steps": [
                "2 * 1 = 2 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)",
                "1 + 1 = 2 (left: 2 2 6)",
                "2 * 1 = 2 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)"
            ]
        },
        "step_6": {
            "steps": [
                "2 * 1 = 2 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n6 / 4 = 1.5 (left: 1.5)",
                "1 + 1 = 2 (left: 2 2 6)\n4 * 4 = 16 (left: 8 16)",
                "2 * 1 = 2 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (2 * 1) * (6 - 1) = 24"
            ],
            "values": [
                0.0,
                40.001,
                60.0
            ],
            "resampled": [
                "0 <- 6.1",
                "1 <- 2.0",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 2 6)\n4 * 4 = 16 (left: 8 16)",
                "2 * 1 = 2 (left: 2 6 6)",
                ""
            ]
        },
        "step_7": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 6)\n4 * 4 = 16 (left: 8 16)\n8 * 16 = 128 (left: 128)",
                "2 * 1 = 2 (left: 2 6 6)\nInput: 3 8 8",
                "6 / 2 = 3 (left: 1 3 6)"
            ],
            "values": [
                0.003,
                0.003,
                22.0
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 3.2",
                "2 <- 3.2"
            ],
            "resampled_steps": [
                "2 * 1 = 2 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)",
                "2 * 1 = 2 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)",
                "2 * 1 = 2 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)"
            ]
        },
        "step_8": {
            "steps": [
                "2 * 1 = 2 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n9 * 3 = 27 (left: 27 5)",
                "2 * 1 = 2 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n10 / 5 = 2 (left: 2 3)",
                "2 * 1 = 2 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n6 / 4 = 1.5 (left: 1.5)"
            ],
            "values": [
                0.001,
                0.002,
                0.002
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 3.2",
                "2 <- 5.2"
            ],
            "resampled_steps": [
                "2 * 1 = 2 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)",
                "2 * 1 = 2 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)",
                "2 * 1 = 2 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (2 * 1) * (6 - 1) = 24"
            ]
        },
        "step_9": {
            "steps": [
                "2 * 1 = 2 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "2 * 1 = 2 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n6 / 4 = 1.5 (left: 1.5)",
                "2 * 1 = 2 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (2 * 1) * (6 - 1) = 24\nInput: 3 3 4 6\nSteps:\n3 * 4 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nAnswer: (3 * 4) * (6 - 3) = 24"
            ],
            "values": [
                60.0,
                0.001,
                60.0
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 9.2",
                "2 <- 9.2"
            ],
            "resampled_steps": [
                "2 * 1 = 2 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)",
                "2 * 1 = 2 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (2 * 1) * (6 - 1) = 24\nInput: 3 3 4 6\nSteps:\n3 * 4 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nAnswer: (3 * 4) * (6 - 3) = 24",
                "2 * 1 = 2 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (2 * 1) * (6 - 1) = 24\nInput: 3 3 4 6\nSteps:\n3 * 4 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nAnswer: (3 * 4) * (6 - 3) = 24"
            ]
        },
        "step_10": {
            "steps": [
                "2 * 1 = 2 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "2 * 1 = 2 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (2 * 1) * (6 - 1) = 24\nInput: 3 3 4 6\nSteps:\n3 * 4 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nAnswer: (3 * 4) * (6 - 3) = 24\nInput: 2 3 5 9\nSteps:\n3 * 5 = 15 (left: 2 9 15)\n15 - 9 = 6 (left: 2 6)\n2 * 6 = 12 (left: 12)\n12 * 2 = 24 (left: 24)\nAnswer: ((3 * 5) - 9) * 2 = 24",
                "2 * 1 = 2 (left: 2 6 6)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (2 * 1) * (6 - 1) = 24\nInput: 3 3 4 6\nSteps:\n3 * 4 = 12 (left: 3 6 12)\n6 - 3 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nAnswer: (3 * 4) * (6 - 3) = 24\nInput: 2 3 5 8\nSteps:\n5 + 3 = 8 (left: 2 8 8)\n8 + 2 = 10 (left: 10 8)\n10 - 8 = 2 (left: 2)\n2 * 12 = 24 (left: 24)\nAnswer: ((5 + 3) + 2) * 8 = 24"
            ],
            "values": [
                60.0,
                60.0,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.32481000000000004
    },
    "20": {
        "input": "1 1 2 11",
        "step_1": {
            "steps": [
                "1 * 1 = 1 (left: 1 1 11)",
                "1 + 1 = 2 (left: 2 2 11)",
                "10 - 3 = 7 (left: 5 7 7)"
            ],
            "values": [
                0.003,
                1.002,
                3.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 11)",
                "5 + 5 = 10 (left: 7 8 10)",
                "2 + 1 = 3 (left: 1 3 11)"
            ],
            "values": [
                0.003,
                3.0,
                2.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10)",
                "11 - 1 = 10 (left: 1 2 10)",
                "2 + 1 = 3 (left: 3 2 11)"
            ],
            "values": [
                2.001,
                1.001,
                3.0
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "11 - 1 = 10 (left: 1 2 10)",
                "",
                ""
            ]
        },
        "step_4": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10)\n3 + 5 = 8 (left: 8 15)",
                "1 * 1 = 1 (left: 1 2 11)",
                "1 + 1 = 2 (left: 2 2 11)"
            ],
            "values": [
                0.003,
                2.0,
                21.001
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 3.0",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "11 - 1 = 10 (left: 1 2 10)",
                "11 - 1 = 10 (left: 1 2 10)",
                ""
            ]
        },
        "step_5": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)",
                "11 - 1 = 10 (left: 1 2 10)\n2 * 4 = 8 (left: 8 8 16)",
                "3 + 5 = 8 (left: 7 8 8)"
            ],
            "values": [
                21.0,
                41.0,
                1.001
            ],
            "resampled": [
                "0 <- 5.1",
                "1 <- 5.1",
                "2 <- 5.1"
            ],
            "resampled_steps": [
                "11 - 1 = 10 (left: 1 2 10)\n2 * 4 = 8 (left: 8 8 16)",
                "11 - 1 = 10 (left: 1 2 10)\n2 * 4 = 8 (left: 8 8 16)",
                "11 - 1 = 10 (left: 1 2 10)\n2 * 4 = 8 (left: 8 8 16)"
            ]
        },
        "step_6": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10)\n2 * 4 = 8 (left: 8 8 16)\n8 / 8 = 1 (left: 1 16)",
                "11 - 1 = 10 (left: 1 2 10)\n2 * 4 = 8 (left: 8 8 16)\n16 - 8 = 8 (left: 8 16)",
                "11 - 1 = 10 (left: 1 2 10)\n2 * 4 = 8 (left: 8 8 16)\n16 - 8 = 8 (left: 8 8)"
            ],
            "values": [
                1.0,
                40.001,
                0.003
            ],
            "resampled": [
                "0 <- 6.1",
                "1 <- 4.2",
                "2 <- 6.1"
            ],
            "resampled_steps": [
                "11 - 1 = 10 (left: 1 2 10)\n2 * 4 = 8 (left: 8 8 16)\n16 - 8 = 8 (left: 8 16)",
                "1 + 1 = 2 (left: 2 2 11)",
                "11 - 1 = 10 (left: 1 2 10)\n2 * 4 = 8 (left: 8 8 16)\n16 - 8 = 8 (left: 8 16)"
            ]
        },
        "step_7": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10)\n2 * 4 = 8 (left: 8 8 16)\n16 - 8 = 8 (left: 8 16)\n16 / 8 = 2 (left: 2)",
                "1 + 1 = 2 (left: 2 2 11)\n2 * 11 = 22 (left: 2 22)",
                "11 - 1 = 10 (left: 1 2 10)\n2 * 4 = 8 (left: 8 8 16)\n16 - 8 = 8 (left: 8 16)\n8 + 16 = 24 (left: 24)"
            ],
            "values": [
                0.001,
                40.001,
                60.0
            ],
            "resampled": [
                "0 <- 6.1",
                "1 <- 2.1",
                "2 <- 7.1"
            ],
            "resampled_steps": [
                "11 - 1 = 10 (left: 1 2 10)\n2 * 4 = 8 (left: 8 8 16)\n16 - 8 = 8 (left: 8 16)",
                "5 + 5 = 10 (left: 7 8 10)",
                "1 + 1 = 2 (left: 2 2 11)\n2 * 11 = 22 (left: 2 22)"
            ]
        },
        "step_8": {
            "steps": [
                "11 - 1 = 10 (left: 1 2 10)\n2 * 4 = 8 (left: 8 8 16)\n16 - 8 = 8 (left: 8 16)\n16 - 8 = 8 (left: 8)",
                "5 + 5 = 10 (left: 7 8 10)\n7 * 8 = 56 (left: 10 56)",
                "1 + 1 = 2 (left: 2 2 11)\n2 * 11 = 22 (left: 2 22)\n2 * 22 = 44 (left: 44)"
            ],
            "values": [
                0.002,
                0.001,
                0.003
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 5.1",
                "2 <- 5.1"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 2 11)",
                "11 - 1 = 10 (left: 1 2 10)\n2 * 4 = 8 (left: 8 8 16)",
                "11 - 1 = 10 (left: 1 2 10)\n2 * 4 = 8 (left: 8 8 16)"
            ]
        },
        "step_9": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 11)\n11 - 2 = 9 (left: 2 9)",
                "11 - 1 = 10 (left: 1 2 10)\n2 * 4 = 8 (left: 8 8 16)\n16 / 8 = 2 (left: 2)",
                "11 - 1 = 10 (left: 1 2 10)\n2 * 4 = 8 (left: 8 8 16)\n16 / 8 = 2 (left: 8 16)"
            ],
            "values": [
                0.001,
                0.002,
                21.001
            ],
            "resampled": [
                "0 <- 7.1",
                "1 <- 5.0",
                "2 <- 6.1"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 2 11)\n2 * 11 = 22 (left: 2 22)",
                "11 - 1 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)",
                "11 - 1 = 10 (left: 1 2 10)\n2 * 4 = 8 (left: 8 8 16)\n16 - 8 = 8 (left: 8 16)"
            ]
        },
        "step_10": {
            "steps": [
                "1 + 1 = 2 (left: 2 2 11)\n2 * 11 = 22 (left: 2 22)\n22 - 2 = 20 (left: 20)",
                "11 - 1 = 10 (left: 1 2 10)\n1 * 2 = 2 (left: 2 10)\n2 + 10 = 12 (left: 12)",
                "11 - 1 = 10 (left: 1 2 10)\n2 * 4 = 8 (left: 8 8 16)\n16 - 8 = 8 (left: 8 16)\n16 * 8 = 128 (left: 128)"
            ],
            "values": [
                0.002,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.342502
    },
    "21": {
        "input": "1 2 3 4",
        "step_1": {
            "steps": [
                "4 - 1 = 3 (left: 2 3 4)",
                "2 * 3 = 6 (left: 1 6 4)",
                "2 * 3 = 6 (left: 1 6 4)"
            ],
            "values": [
                60.0,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 1.0",
                "2 <- 1.1"
            ],
            "resampled_steps": [
                "4 - 1 = 3 (left: 2 3 4)",
                "4 - 1 = 3 (left: 2 3 4)",
                "2 * 3 = 6 (left: 1 6 4)"
            ]
        },
        "step_2": {
            "steps": [
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)",
                "4 - 1 = 3 (left: 2 3 4)\n5 * 7 = 35 (left: 3 35)",
                "2 * 3 = 6 (left: 1 6 4)\n4 + 1 = 5 (left: 5)"
            ],
            "values": [
                60.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.0",
                "2 <- 2.0"
            ],
            "resampled_steps": [
                "",
                "4 - 1 = 3 (left: 2 3 4)",
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)"
            ]
        },
        "step_3": {
            "steps": [
                "1 + 2 = 3 (left: 3 3 4)",
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)",
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n6 / 4 = 1.5 (left: 1.5)"
            ],
            "values": [
                3.0,
                40.0,
                1.0
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 2.0",
                "2 <- 2.0"
            ],
            "resampled_steps": [
                "2 * 3 = 6 (left: 1 6 4)",
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)",
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)"
            ]
        },
        "step_4": {
            "steps": [
                "2 * 3 = 6 (left: 1 6 4)\n4 / 1 = 4 (left: 4 1)",
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n6 - 4 = 2 (left: 2)"
            ],
            "values": [
                20.002,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 4.1",
                "2 <- 4.0"
            ],
            "resampled_steps": [
                "2 * 3 = 6 (left: 1 6 4)",
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)",
                "2 * 3 = 6 (left: 1 6 4)\n4 / 1 = 4 (left: 4 1)"
            ]
        },
        "step_5": {
            "steps": [
                "2 * 3 = 6 (left: 1 6 4)\n3 + 9 = 12 (left: 4 12)",
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 * (2 * (4 - 1))) = 24",
                "2 * 3 = 6 (left: 1 6 4)\n4 / 1 = 4 (left: 4 1)\n3 / 2 = 1.5 (left: 1.5 2)"
            ],
            "values": [
                0.003,
                60.0,
                1.002
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 2.0",
                "2 <- 5.1"
            ],
            "resampled_steps": [
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)",
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)",
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 * (2 * (4 - 1))) = 24"
            ]
        },
        "step_6": {
            "steps": [
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n10 * 3 = 30 (left: 30)",
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n6 + 4 = 10 (left: 10)",
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 * (2 * (4 - 1))) = 24\nInput: 7 8 3 2\n\n3 * 7 = 21 (left: 8 2 21)\n8 + 2 = 10 (left: 10 21)\n10 + 21 = 31 (left: 31)\nAnswer: (3 * 7) + (8 + 2) = 24"
            ],
            "values": [
                0.003,
                0.001,
                60.0
            ],
            "resampled": [
                "0 <- 6.2",
                "1 <- 5.1",
                "2 <- 4.1"
            ],
            "resampled_steps": [
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 * (2 * (4 - 1))) = 24\nInput: 7 8 3 2\n\n3 * 7 = 21 (left: 8 2 21)\n8 + 2 = 10 (left: 10 21)\n10 + 21 = 31 (left: 31)\nAnswer: (3 * 7) + (8 + 2) = 24",
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 * (2 * (4 - 1))) = 24",
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)"
            ]
        },
        "step_7": {
            "steps": [
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 * (2 * (4 - 1))) = 24\nInput: 7 8 3 2\n\n3 * 7 = 21 (left: 8 2 21)\n8 + 2 = 10 (left: 10 21)\n10 + 21 = 31 (left: 31)\nAnswer: (3 * 7) + (8 + 2) = 24\nInput: 3 3 3 9\nSteps:\n3 * 3 = 9 (left: 3 9 9)\n9 - 3 = 6 (left: 6 9)\n6 * 9 = 54 (left: 54)\nAnswer: ((3 * 3) - 3) * 9 = 24",
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 * (2 * (4 - 1))) = 24\nInput: 3 6 7 8\nSteps:\n7 - 3 = 4 (left: 4 6 8)\n6 * 4 = 24 (left: 24 8)\n24 / 8 = 3 (left: 3)\nAnswer: (7 - 3) * (6 * 4) = 24",
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 * (3 - 1)) * 6 = 24"
            ],
            "values": [
                60.0,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 7.0",
                "1 <- 7.0",
                "2 <- 2.0"
            ],
            "resampled_steps": [
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 * (2 * (4 - 1))) = 24\nInput: 7 8 3 2\n\n3 * 7 = 21 (left: 8 2 21)\n8 + 2 = 10 (left: 10 21)\n10 + 21 = 31 (left: 31)\nAnswer: (3 * 7) + (8 + 2) = 24\nInput: 3 3 3 9\nSteps:\n3 * 3 = 9 (left: 3 9 9)\n9 - 3 = 6 (left: 6 9)\n6 * 9 = 54 (left: 54)\nAnswer: ((3 * 3) - 3) * 9 = 24",
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 * (2 * (4 - 1))) = 24\nInput: 7 8 3 2\n\n3 * 7 = 21 (left: 8 2 21)\n8 + 2 = 10 (left: 10 21)\n10 + 21 = 31 (left: 31)\nAnswer: (3 * 7) + (8 + 2) = 24\nInput: 3 3 3 9\nSteps:\n3 * 3 = 9 (left: 3 9 9)\n9 - 3 = 6 (left: 6 9)\n6 * 9 = 54 (left: 54)\nAnswer: ((3 * 3) - 3) * 9 = 24",
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)"
            ]
        },
        "step_8": {
            "steps": [
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 * (2 * (4 - 1))) = 24\nInput: 7 8 3 2\n\n3 * 7 = 21 (left: 8 2 21)\n8 + 2 = 10 (left: 10 21)\n10 + 21 = 31 (left: 31)\nAnswer: (3 * 7) + (8 + 2) = 24\nInput: 3 3 3 9\nSteps:\n3 * 3 = 9 (left: 3 9 9)\n9 - 3 = 6 (left: 6 9)\n6 * 9 = 54 (left: 54)\nAnswer: ((3 * 3) - 3) * 9 = 24\nInput: 6 6 2 2\nSteps:\n6 + 6 = 12 (left: 2 2 12)\n2 * 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (6 + 6) * (2 * 2) = 24",
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 * (2 * (4 - 1))) = 24\nInput: 7 8 3 2\n\n3 * 7 = 21 (left: 8 2 21)\n8 + 2 = 10 (left: 10 21)\n10 + 21 = 31 (left: 31)\nAnswer: (3 * 7) + (8 + 2) = 24\nInput: 3 3 3 9\nSteps:\n3 * 3 = 9 (left: 3 9 9)\n9 - 3 = 6 (left: 6 9)\n6 * 9 = 54 (left: 54)\nAnswer: ((3 * 3) - 3) * 9 = 24\nInput: 6 7 8 9\nSteps:\n9 - 7 = 2 (left: 6 8 2)\n6 * 8 = 48 (left: 48 2)\n48 / 2 = 24 (left: 24)\nAnswer: (6 * 8) / (9 - 7) = 24",
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n6 / 4 = 1.5 (left: 1.5)"
            ],
            "values": [
                40.0,
                60.0,
                0.001
            ],
            "resampled": [
                "0 <- 5.1",
                "1 <- 8.1",
                "2 <- 6.2"
            ],
            "resampled_steps": [
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 * (2 * (4 - 1))) = 24",
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 * (2 * (4 - 1))) = 24\nInput: 7 8 3 2\n\n3 * 7 = 21 (left: 8 2 21)\n8 + 2 = 10 (left: 10 21)\n10 + 21 = 31 (left: 31)\nAnswer: (3 * 7) + (8 + 2) = 24\nInput: 3 3 3 9\nSteps:\n3 * 3 = 9 (left: 3 9 9)\n9 - 3 = 6 (left: 6 9)\n6 * 9 = 54 (left: 54)\nAnswer: ((3 * 3) - 3) * 9 = 24\nInput: 6 7 8 9\nSteps:\n9 - 7 = 2 (left: 6 8 2)\n6 * 8 = 48 (left: 48 2)\n48 / 2 = 24 (left: 24)\nAnswer: (6 * 8) / (9 - 7) = 24",
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 * (2 * (4 - 1))) = 24\nInput: 7 8 3 2\n\n3 * 7 = 21 (left: 8 2 21)\n8 + 2 = 10 (left: 10 21)\n10 + 21 = 31 (left: 31)\nAnswer: (3 * 7) + (8 + 2) = 24"
            ]
        },
        "step_9": {
            "steps": [
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 * (2 * (4 - 1))) = 24\nInput: 3 4 5 6\nSteps:\n4 + 6 = 10 (left: 3 5 10)\n10 - 5 = 5 (left: 3 5)\n3 * 5 = 15 (left: 15)\n15 + 10 = 25 (left: 25)\n25 - 5 = 20 (left: 20)\n20 / 4 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 5 = 20 (left: 20)\n20 - 15 = 5 (left: 5)\n25 / 5 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 20 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 20 = 5 (left: 5)\n25 / 5 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 20 = 5 (left: 5)\n25 / 5 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 20 = 5 (left: 5)\n25 / 5 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 20 = 5 (left: 5)\n25 / 5 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 20 = 5 (left: 5)\n25 / 5 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 20 = 5 (left: 5)\n25 / 5 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 20 = 5 (left: 5)\n25 / 5 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 20 = 5 (left: 5)\n25 / 5 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 20 = 5 (left: 5)\n25 / 5 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 20 = 5 (left: 5)\n25 / 5 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 20 = 5 (left: 5)\n25 / 5 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 20 = 5 (left: 5)\n25 / 5 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 20 = 5 (left: 5)\n25 / 5 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 20 = 5 (left: 5)\n25 / 5 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 20 = 5 (left: 5)\n25 / 5 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 20 = 5 (left: 5)\n25 / 5 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 20 = 5 (left: 5)\n25 / 5 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 20 = 5 (left: 5)\n25 / 5 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 20 = 5 (left: 5)\n25 / 5 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 20 = 5 (left: 5)\n25 / 5 = 5 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 20 = 5 (left: 5)\n25 / 5 = 5 (left: 5)\n5 * 5 = ",
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 * (2 * (4 - 1))) = 24\nInput: 7 8 3 2\n\n3 * 7 = 21 (left: 8 2 21)\n8 + 2 = 10 (left: 10 21)\n10 + 21 = 31 (left: 31)\nAnswer: (3 * 7) + (8 + 2) = 24\nInput: 3 3 3 9\nSteps:\n3 * 3 = 9 (left: 3 9 9)\n9 - 3 = 6 (left: 6 9)\n6 * 9 = 54 (left: 54)\nAnswer: ((3 * 3) - 3) * 9 = 24\nInput: 6 7 8 9\nSteps:\n9 - 7 = 2 (left: 6 8 2)\n6 * 8 = 48 (left: 48 2)\n48 / 2 = 24 (left: 24)\nAnswer: (6 * 8) / (9 - 7) = 24\nInput: 2 3 5 10\nSteps:\n2 * 10 = 20 (left: 3 5 20)\n3 + 5 = 8 (left: 8 20)\n8 - 20 = -12 (left: -12)\nAnswer: (2 * 10) + (3 + 5) = 24",
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 * (2 * (4 - 1))) = 24\nInput: 7 8 3 2\n\n3 * 7 = 21 (left: 8 2 21)\n8 + 2 = 10 (left: 10 21)\n10 + 21 = 31 (left: 31)\nAnswer: (3 * 7) + (8 + 2) = 24\nInput: 3 3 5 7\n\n3 * 7 = 21 (left: 3 5 21)\n3 + 5 = 8 (left: 8 21)\n8 * 21 = 168 (left: 168)\n21 - 8 = 13 (left: 13 168)\n13 - 3 = 10 (left: 10 168)\n10 + 168 = 178 (left: 178)\n178 / 7 = 22 (left: 22)\n22 - 3 = 19 (left: 19)\n19 - 5 = 14 (left: 14)\n14 - 13 = 1 (left: 1)\n1 * 24 = 24 (left: 24)\nAnswer: (((((3 * 7) + (3 + 5)) * 21) - 8) - 3) - 5) - 13) - 24 = 24"
            ],
            "values": [
                60.0,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 9.1",
                "1 <- 8.0",
                "2 <- 7.1"
            ],
            "resampled_steps": [
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 * (2 * (4 - 1))) = 24\nInput: 7 8 3 2\n\n3 * 7 = 21 (left: 8 2 21)\n8 + 2 = 10 (left: 10 21)\n10 + 21 = 31 (left: 31)\nAnswer: (3 * 7) + (8 + 2) = 24\nInput: 3 3 3 9\nSteps:\n3 * 3 = 9 (left: 3 9 9)\n9 - 3 = 6 (left: 6 9)\n6 * 9 = 54 (left: 54)\nAnswer: ((3 * 3) - 3) * 9 = 24\nInput: 6 7 8 9\nSteps:\n9 - 7 = 2 (left: 6 8 2)\n6 * 8 = 48 (left: 48 2)\n48 / 2 = 24 (left: 24)\nAnswer: (6 * 8) / (9 - 7) = 24\nInput: 2 3 5 10\nSteps:\n2 * 10 = 20 (left: 3 5 20)\n3 + 5 = 8 (left: 8 20)\n8 - 20 = -12 (left: -12)\nAnswer: (2 * 10) + (3 + 5) = 24",
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 * (2 * (4 - 1))) = 24\nInput: 7 8 3 2\n\n3 * 7 = 21 (left: 8 2 21)\n8 + 2 = 10 (left: 10 21)\n10 + 21 = 31 (left: 31)\nAnswer: (3 * 7) + (8 + 2) = 24\nInput: 3 3 3 9\nSteps:\n3 * 3 = 9 (left: 3 9 9)\n9 - 3 = 6 (left: 6 9)\n6 * 9 = 54 (left: 54)\nAnswer: ((3 * 3) - 3) * 9 = 24\nInput: 6 6 2 2\nSteps:\n6 + 6 = 12 (left: 2 2 12)\n2 * 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (6 + 6) * (2 * 2) = 24",
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 * (2 * (4 - 1))) = 24\nInput: 3 6 7 8\nSteps:\n7 - 3 = 4 (left: 4 6 8)\n6 * 4 = 24 (left: 24 8)\n24 / 8 = 3 (left: 3)\nAnswer: (7 - 3) * (6 * 4) = 24"
            ]
        },
        "step_10": {
            "steps": [
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 * (2 * (4 - 1))) = 24\nInput: 7 8 3 2\n\n3 * 7 = 21 (left: 8 2 21)\n8 + 2 = 10 (left: 10 21)\n10 + 21 = 31 (left: 31)\nAnswer: (3 * 7) + (8 + 2) = 24\nInput: 3 3 3 9\nSteps:\n3 * 3 = 9 (left: 3 9 9)\n9 - 3 = 6 (left: 6 9)\n6 * 9 = 54 (left: 54)\nAnswer: ((3 * 3) - 3) * 9 = 24\nInput: 6 7 8 9\nSteps:\n9 - 7 = 2 (left: 6 8 2)\n6 * 8 = 48 (left: 48 2)\n48 / 2 = 24 (left: 24)\nAnswer: (6 * 8) / (9 - 7) = 24\nInput: 2 3 5 10\nSteps:\n2 * 10 = 20 (left: 3 5 20)\n3 + 5 = 8 (left: 8 20)\n8 - 20 = -12 (left: -12)\nAnswer: (2 * 10) + (3 + 5) = 24\nInput: 5 6 7 8\nSteps:\n5 * 7 = 35 (left: 6 8 35)\n8 - 6 = 2 (left: 2 35)\n2 * 35 = 70 (left: 70)\n70 / 8 = 24 (left: 24)\nAnswer: ((5 * 7) / (8 - 6)) = 24",
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 * (2 * (4 - 1))) = 24\nInput: 7 8 3 2\n\n3 * 7 = 21 (left: 8 2 21)\n8 + 2 = 10 (left: 10 21)\n10 + 21 = 31 (left: 31)\nAnswer: (3 * 7) + (8 + 2) = 24\nInput: 3 3 3 9\nSteps:\n3 * 3 = 9 (left: 3 9 9)\n9 - 3 = 6 (left: 6 9)\n6 * 9 = 54 (left: 54)\nAnswer: ((3 * 3) - 3) * 9 = 24\nInput: 6 6 2 2\nSteps:\n6 + 6 = 12 (left: 2 2 12)\n2 * 2 = 4 (left: 4 12)\n4 * 12 = 48 (left: 48)\nAnswer: (6 + 6) * (2 * 2) = 24\nInput: 3 6 7 9\nSteps:\n3 * 7 = 21 (left: 6 9 21)\n9 - 6 = 3 (left: 3 21)\n3 * 21 = 63 (left: 63)\nAnswer: (3 * 7) + (9 - 6) = 24",
                "4 - 1 = 3 (left: 2 3 4)\n2 * 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (4 * (2 * (4 - 1))) = 24\nInput: 3 6 7 8\nSteps:\n7 - 3 = 4 (left: 4 6 8)\n6 * 4 = 24 (left: 24 8)\n24 / 8 = 3 (left: 3)\nAnswer: (7 - 3) * (6 * 4) = 24\nInput: 3 5 7 8\nSteps:\n7 - 3 = 4 (left: 4 5 8)\n5 + 4 = 9 (left: 8 9)\n9 * 8 = 72 (left: 72)\n72 / 3 = 24 (left: 24)\nAnswer: ((7 - 3) + (5 + 4)) * (9 * 8) = 24"
            ],
            "values": [
                40.0,
                60.0,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.361313
    },
    "22": {
        "input": "11 11 12 12",
        "step_1": {
            "steps": [
                "11 / 11 = 1 (left: 1 12 12)",
                "9 - 7 = 2 (left: 2 7 9)",
                "12 - 11 = 1 (left: 1 12 12)"
            ],
            "values": [
                1.002,
                3.0,
                20.002
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- INIT",
                "2 <- 1.2"
            ],
            "resampled_steps": [
                "12 - 11 = 1 (left: 1 12 12)",
                "",
                "12 - 11 = 1 (left: 1 12 12)"
            ]
        },
        "step_2": {
            "steps": [
                "12 - 11 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12)",
                "11 / 11 = 1 (left: 1 12 12)",
                "12 - 11 = 1 (left: 1 12 12)\n12 + 1 = 13 (left: 12 13)"
            ],
            "values": [
                0.001,
                21.001,
                0.003
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- INIT",
                "2 <- 1.2"
            ],
            "resampled_steps": [
                "11 / 11 = 1 (left: 1 12 12)",
                "",
                "12 - 11 = 1 (left: 1 12 12)"
            ]
        },
        "step_3": {
            "steps": [
                "11 / 11 = 1 (left: 1 12 12)\n-11 / 13 = -1 (left: -1)",
                "11 + 11 = 22 (left: 12 12 22)",
                "12 - 11 = 1 (left: 1 12 12)\n12 - 1 = 11 (left: 11 12)"
            ],
            "values": [
                0.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 2.1",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "",
                "11 / 11 = 1 (left: 1 12 12)",
                "11 / 11 = 1 (left: 1 12 12)"
            ]
        },
        "step_4": {
            "steps": [
                "12 / 11 = 1 (left: 11 12 1)",
                "11 / 11 = 1 (left: 1 12 12)\n6 / 4 = 1.5 (left: 1.5 8 10)",
                "11 / 11 = 1 (left: 1 12 12)\n1 + 12 = 13 (left: 12 13)"
            ],
            "values": [
                60.0,
                3.0,
                0.003
            ],
            "resampled": [
                "0 <- 4.0",
                "1 <- 4.0",
                "2 <- 4.0"
            ],
            "resampled_steps": [
                "12 / 11 = 1 (left: 11 12 1)",
                "12 / 11 = 1 (left: 11 12 1)",
                "12 / 11 = 1 (left: 11 12 1)"
            ]
        },
        "step_5": {
            "steps": [
                "12 / 11 = 1 (left: 11 12 1)\n3 * 10 = 30 (left: 5 30 7)",
                "12 / 11 = 1 (left: 11 12 1)\n6 - 4 = 2 (left: 2 8 10)",
                "12 / 11 = 1 (left: 11 12 1)\n12 - 11 = 1 (left: 1 1)"
            ],
            "values": [
                2.001,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- 4.0",
                "1 <- 4.0",
                "2 <- 4.0"
            ],
            "resampled_steps": [
                "12 / 11 = 1 (left: 11 12 1)",
                "12 / 11 = 1 (left: 11 12 1)",
                "12 / 11 = 1 (left: 11 12 1)"
            ]
        },
        "step_6": {
            "steps": [
                "12 / 11 = 1 (left: 11 12 1)\n11 * 12 = 132 (left: 1 132)",
                "12 / 11 = 1 (left: 11 12 1)\n11 * 12 = 132 (left: 1 132)",
                "12 / 11 = 1 (left: 11 12 1)\n11 + 12 = 23 (left: 1 23)"
            ],
            "values": [
                0.002,
                21.001,
                40.0
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 6.1",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "11 / 11 = 1 (left: 1 12 12)",
                "12 / 11 = 1 (left: 11 12 1)\n11 * 12 = 132 (left: 1 132)",
                "11 / 11 = 1 (left: 1 12 12)"
            ]
        },
        "step_7": {
            "steps": [
                "11 / 11 = 1 (left: 1 12 12)\n4 * 7 = 28 (left: 28)",
                "12 / 11 = 1 (left: 11 12 1)\n11 * 12 = 132 (left: 1 132)\n1 / 132 = 0.00757576 (left: 0.00757576)",
                "11 / 11 = 1 (left: 1 12 12)\n12 - 1 = 11 (left: 11 12)"
            ],
            "values": [
                0.003,
                0.002,
                0.002
            ],
            "resampled": [
                "0 <- 4.0",
                "1 <- 6.2",
                "2 <- 6.2"
            ],
            "resampled_steps": [
                "12 / 11 = 1 (left: 11 12 1)",
                "12 / 11 = 1 (left: 11 12 1)\n11 + 12 = 23 (left: 1 23)",
                "12 / 11 = 1 (left: 11 12 1)\n11 + 12 = 23 (left: 1 23)"
            ]
        },
        "step_8": {
            "steps": [
                "12 / 11 = 1 (left: 11 12 1)\n9 - 5 = 4 (left: 4 2 9)",
                "12 / 11 = 1 (left: 11 12 1)\n11 + 12 = 23 (left: 1 23)\n23 / 1 = 23 (left: 23)",
                "12 / 11 = 1 (left: 11 12 1)\n11 + 12 = 23 (left: 1 23)\n5 - 5 = 0 (left: 0 5 5)"
            ],
            "values": [
                2.001,
                0.002,
                22.0
            ],
            "resampled": [
                "0 <- 4.0",
                "1 <- 4.0",
                "2 <- 4.0"
            ],
            "resampled_steps": [
                "12 / 11 = 1 (left: 11 12 1)",
                "12 / 11 = 1 (left: 11 12 1)",
                "12 / 11 = 1 (left: 11 12 1)"
            ]
        },
        "step_9": {
            "steps": [
                "12 / 11 = 1 (left: 11 12 1)\n1 / 11 = 0.09 (left: 11 0.09)",
                "12 / 11 = 1 (left: 11 12 1)\n11 + 12 = 23 (left: 1 23)",
                "12 / 11 = 1 (left: 11 12 1)\n9 / 4 = 2.25 (left: 5 7 2.25)"
            ],
            "values": [
                0.001,
                1.0,
                3.0
            ],
            "resampled": [
                "0 <- 6.2",
                "1 <- 6.1",
                "2 <- 8.2"
            ],
            "resampled_steps": [
                "12 / 11 = 1 (left: 11 12 1)\n11 + 12 = 23 (left: 1 23)",
                "12 / 11 = 1 (left: 11 12 1)\n11 * 12 = 132 (left: 1 132)",
                "12 / 11 = 1 (left: 11 12 1)\n11 + 12 = 23 (left: 1 23)\n5 - 5 = 0 (left: 0 5 5)"
            ]
        },
        "step_10": {
            "steps": [
                "12 / 11 = 1 (left: 11 12 1)\n11 + 12 = 23 (left: 1 23)\n23 / 1 = 23 (left: 23)",
                "12 / 11 = 1 (left: 11 12 1)\n11 * 12 = 132 (left: 1 132)\n25 - 5 = 20 (left: 20 30)",
                "12 / 11 = 1 (left: 11 12 1)\n11 + 12 = 23 (left: 1 23)\n5 - 5 = 0 (left: 0 5 5)\n0 + 5 = 5 (left: 5 5)"
            ],
            "values": [
                0.002,
                0.003,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.3826895
    },
    "23": {
        "input": "3 7 7 8",
        "step_1": {
            "steps": [
                "3 + 7 = 10 (left: 7 7 8)",
                "3 * 7 = 21 (left: 21 7 8)",
                "3 + 7 = 10 (left: 7 7 8)"
            ],
            "values": [
                3.0,
                22.0,
                3.0
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 1.1",
                "2 <- 1.1"
            ],
            "resampled_steps": [
                "3 * 7 = 21 (left: 21 7 8)",
                "3 * 7 = 21 (left: 21 7 8)",
                "3 * 7 = 21 (left: 21 7 8)"
            ]
        },
        "step_2": {
            "steps": [
                "3 * 7 = 21 (left: 21 7 8)\n21 - 7 = 14 (left: 14 8)",
                "3 * 7 = 21 (left: 21 7 8)\n7 - 8 = -1 (left: -1)",
                "3 * 7 = 21 (left: 21 7 8)\n10 * 5 = 50 (left: 50 10)"
            ],
            "values": [
                1.002,
                0.0,
                41.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 2.2",
                "2 <- 1.1"
            ],
            "resampled_steps": [
                "3 * 7 = 21 (left: 21 7 8)\n10 * 5 = 50 (left: 50 10)",
                "3 * 7 = 21 (left: 21 7 8)\n10 * 5 = 50 (left: 50 10)",
                "3 * 7 = 21 (left: 21 7 8)"
            ]
        },
        "step_3": {
            "steps": [
                "3 * 7 = 21 (left: 21 7 8)\n10 * 5 = 50 (left: 50 10)\n50 + 10 = 60 (left: 60)",
                "3 * 7 = 21 (left: 21 7 8)\n10 * 5 = 50 (left: 50 10)\n50 * 10 = 500 (left: 500)",
                "3 * 7 = 21 (left: 21 7 8)\n21 / 7 = 3 (left: 3 8)"
            ],
            "values": [
                0.003,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 3.2",
                "2 <- 3.2"
            ],
            "resampled_steps": [
                "",
                "3 * 7 = 21 (left: 21 7 8)\n21 / 7 = 3 (left: 3 8)",
                "3 * 7 = 21 (left: 21 7 8)\n21 / 7 = 3 (left: 3 8)"
            ]
        },
        "step_4": {
            "steps": [
                "7 - 3 = 4 (left: 4 7 8)",
                "3 * 7 = 21 (left: 21 7 8)\n21 / 7 = 3 (left: 3 8)\n8 / 3 = 2.67 (left: 2.67)",
                "3 * 7 = 21 (left: 21 7 8)\n21 / 7 = 3 (left: 3 8)\n8 / 3 = 2.67 (left: 2.67)"
            ],
            "values": [
                22.0,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 4.0",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "3 * 7 = 21 (left: 21 7 8)\n21 / 7 = 3 (left: 3 8)",
                "7 - 3 = 4 (left: 4 7 8)",
                "3 * 7 = 21 (left: 21 7 8)\n10 * 5 = 50 (left: 50 10)"
            ]
        },
        "step_5": {
            "steps": [
                "3 * 7 = 21 (left: 21 7 8)\n21 / 7 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)",
                "7 - 3 = 4 (left: 4 7 8)\nInput: 3 4 8",
                "3 * 7 = 21 (left: 21 7 8)\n10 * 5 = 50 (left: 50 10)\n50 * 10 = 500 (left: 500)"
            ],
            "values": [
                0.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 3.2",
                "2 <- 4.0"
            ],
            "resampled_steps": [
                "3 * 7 = 21 (left: 21 7 8)\n10 * 5 = 50 (left: 50 10)",
                "3 * 7 = 21 (left: 21 7 8)\n21 / 7 = 3 (left: 3 8)",
                "7 - 3 = 4 (left: 4 7 8)"
            ]
        },
        "step_6": {
            "steps": [
                "3 * 7 = 21 (left: 21 7 8)\n10 * 5 = 50 (left: 50 10)\n50 / 10 = 5 (left: 5)",
                "3 * 7 = 21 (left: 21 7 8)\n21 / 7 = 3 (left: 3 8)\n8 * 3 = 24 (left: 24)",
                "7 - 3 = 4 (left: 4 7 8)\n7 + 4 = 11 (left: 8 11)"
            ],
            "values": [
                0.002,
                60.0,
                40.0
            ],
            "resampled": [
                "0 <- 6.2",
                "1 <- 6.1",
                "2 <- 3.2"
            ],
            "resampled_steps": [
                "7 - 3 = 4 (left: 4 7 8)\n7 + 4 = 11 (left: 8 11)",
                "3 * 7 = 21 (left: 21 7 8)\n21 / 7 = 3 (left: 3 8)\n8 * 3 = 24 (left: 24)",
                "3 * 7 = 21 (left: 21 7 8)\n21 / 7 = 3 (left: 3 8)"
            ]
        },
        "step_7": {
            "steps": [
                "7 - 3 = 4 (left: 4 7 8)\n7 + 4 = 11 (left: 8 11)\n8 * 11 = 88 (left: 88)",
                "3 * 7 = 21 (left: 21 7 8)\n21 / 7 = 3 (left: 3 8)\n8 * 3 = 24 (left: 24)\nAnswer: (3 * 7) * (8 / 7) = 24",
                "3 * 7 = 21 (left: 21 7 8)\n21 / 7 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)"
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ],
        "cost": 0.3927165
    },
    "24": {
        "input": "1 1 13 13",
        "step_1": {
            "steps": [
                "5 - 3 = 2 (left: 2 7 7)",
                "13 - 1 = 12 (left: 1 12 13)",
                "13 / 1 = 13 (left: 1 13 13)"
            ],
            "values": [
                2.001,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "1 + 1 = 2 (left: 2 13 13)",
                "1 + 1 = 2 (left: 2 13 13)",
                "9 - 7 = 2 (left: 3 5 2)"
            ],
            "values": [
                0.003,
                0.003,
                2.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "",
                "",
                "9 - 7 = 2 (left: 3 5 2)"
            ]
        },
        "step_3": {
            "steps": [
                "13 - 1 = 12 (left: 1 13 12)",
                "13 + 1 = 14 (left: 1 13 14)",
                "9 - 7 = 2 (left: 3 5 2)\n5 / 2 = 2.5 (left: 3 2.5)"
            ],
            "values": [
                0.002,
                21.001,
                1.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 3.1",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "13 + 1 = 14 (left: 1 13 14)",
                ""
            ]
        },
        "step_4": {
            "steps": [
                "1 + 1 = 2 (left: 2 13 13)",
                "13 + 1 = 14 (left: 1 13 14)\n13 - 1 = 12 (left: 12 14)",
                "13 / 1 = 13 (left: 1 13 13)"
            ],
            "values": [
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 2.2",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "13 + 1 = 14 (left: 1 13 14)",
                "9 - 7 = 2 (left: 3 5 2)",
                ""
            ]
        },
        "step_5": {
            "steps": [
                "13 + 1 = 14 (left: 1 13 14)\n13 / 1 = 13 (left: 1 14)",
                "9 - 7 = 2 (left: 3 5 2)\n5 - 3 = 2 (left: 2 2)",
                "13 / 1 = 13 (left: 1 13 13)"
            ],
            "values": [
                0.001,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 3.1",
                "2 <- 3.2"
            ],
            "resampled_steps": [
                "13 + 1 = 14 (left: 1 13 14)",
                "13 + 1 = 14 (left: 1 13 14)",
                "9 - 7 = 2 (left: 3 5 2)\n5 / 2 = 2.5 (left: 3 2.5)"
            ]
        },
        "step_6": {
            "steps": [
                "13 + 1 = 14 (left: 1 13 14)\n14 - 1 = 13 (left: 13 13)",
                "13 + 1 = 14 (left: 1 13 14)\n13 - 13 = 0 (left: 1 14)",
                "9 - 7 = 2 (left: 3 5 2)\n5 / 2 = 2.5 (left: 3 2.5)\n3 - 2.5 = 0.5 (left: 0.5)"
            ],
            "values": [
                0.003,
                1.001,
                0.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 3.1",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "13 + 1 = 14 (left: 1 13 14)",
                ""
            ]
        },
        "step_7": {
            "steps": [
                "13 + 1 = 14 (left: 1 13 14)",
                "13 + 1 = 14 (left: 1 13 14)\n9 / 3 = 3 (left: 5 9)",
                "13 - 1 = 12 (left: 1 12 13)"
            ],
            "values": [
                1.002,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- 7.0",
                "1 <- 3.1",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "13 + 1 = 14 (left: 1 13 14)",
                "13 + 1 = 14 (left: 1 13 14)",
                ""
            ]
        },
        "step_8": {
            "steps": [
                "13 + 1 = 14 (left: 1 13 14)\n13 - 1 = 12 (left: 12 14)",
                "13 + 1 = 14 (left: 1 13 14)\n14 / 1 = 14 (left: 13 14)",
                "3 * 9 = 27 (left: 27 3 9)"
            ],
            "values": [
                0.003,
                0.003,
                3.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 8.2",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "3 * 9 = 27 (left: 27 3 9)",
                ""
            ]
        },
        "step_9": {
            "steps": [
                "1 + 13 = 14 (left: 1 13 14)",
                "3 * 9 = 27 (left: 27 3 9)\n27 - 3 = 24 (left: 24 9)",
                "13 + 1 = 14 (left: 1 13 14)"
            ],
            "values": [
                1.002,
                20.002,
                1.002
            ],
            "resampled": [
                "0 <- 9.1",
                "1 <- 9.1",
                "2 <- 9.1"
            ],
            "resampled_steps": [
                "3 * 9 = 27 (left: 27 3 9)\n27 - 3 = 24 (left: 24 9)",
                "3 * 9 = 27 (left: 27 3 9)\n27 - 3 = 24 (left: 24 9)",
                "3 * 9 = 27 (left: 27 3 9)\n27 - 3 = 24 (left: 24 9)"
            ]
        },
        "step_10": {
            "steps": [
                "3 * 9 = 27 (left: 27 3 9)\n27 - 3 = 24 (left: 24 9)\n24 + 9 = 33 (left: 33)",
                "3 * 9 = 27 (left: 27 3 9)\n27 - 3 = 24 (left: 24 9)\n24 / 9 = 2.6666666666666665 (left: 2.6666666666666665)",
                "3 * 9 = 27 (left: 27 3 9)\n27 - 3 = 24 (left: 24 9)\n24 * 9 = 216 (left: 216)"
            ],
            "values": [
                0.003,
                0.0,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.4106385
    },
    "25": {
        "input": "1 2 4 12",
        "step_1": {
            "steps": [
                "20 - 10 = 10 (left: 3 5 10)",
                "4 / 2 = 2 (left: 1 2 12)",
                "12 / 4 = 3 (left: 1 2 3)"
            ],
            "values": [
                3.0,
                60.0,
                0.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.1",
                "2 <- 1.1"
            ],
            "resampled_steps": [
                "",
                "4 / 2 = 2 (left: 1 2 12)",
                "4 / 2 = 2 (left: 1 2 12)"
            ]
        },
        "step_2": {
            "steps": [
                "1 + 2 = 3 (left: 3 4 12)",
                "4 / 2 = 2 (left: 1 2 12)\n1 * 12 = 12 (left: 12)",
                "4 / 2 = 2 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)"
            ],
            "values": [
                41.0,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 2.0",
                "2 <- 1.1"
            ],
            "resampled_steps": [
                "4 / 2 = 2 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "1 + 2 = 3 (left: 3 4 12)",
                "4 / 2 = 2 (left: 1 2 12)"
            ]
        },
        "step_3": {
            "steps": [
                "4 / 2 = 2 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "1 + 2 = 3 (left: 3 4 12)\n4 * 3 = 12 (left: 12 12)",
                "4 / 2 = 2 (left: 1 2 12)\n25 * 5 = 125 (left: 5 125)"
            ],
            "values": [
                0.0,
                20.002,
                40.0
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 2.2",
                "2 <- 3.2"
            ],
            "resampled_steps": [
                "4 / 2 = 2 (left: 1 2 12)\n25 * 5 = 125 (left: 5 125)",
                "4 / 2 = 2 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "4 / 2 = 2 (left: 1 2 12)\n25 * 5 = 125 (left: 5 125)"
            ]
        },
        "step_4": {
            "steps": [
                "4 / 2 = 2 (left: 1 2 12)\n25 * 5 = 125 (left: 5 125)\n5 + 125 = 130 (left: 130)",
                "4 / 2 = 2 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "4 / 2 = 2 (left: 1 2 12)\n25 * 5 = 125 (left: 5 125)\n5 * 5 = 25 (left: 25 125)"
            ],
            "values": [
                0.003,
                0.002,
                40.0
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 2.2",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "4 / 2 = 2 (left: 1 2 12)\n25 * 5 = 125 (left: 5 125)\n5 * 5 = 25 (left: 25 125)",
                "4 / 2 = 2 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "4 / 2 = 2 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)"
            ]
        },
        "step_5": {
            "steps": [
                "4 / 2 = 2 (left: 1 2 12)\n25 * 5 = 125 (left: 5 125)\n5 * 5 = 25 (left: 25 125)\n25 * 5 = 125 (left: 125)",
                "4 / 2 = 2 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n1 + 6 = 7 (left: 7)",
                "4 / 2 = 2 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n6 - 1 = 5 (left: 5)"
            ],
            "values": [
                20.001,
                0.001,
                0.001
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 3.2",
                "2 <- 3.1"
            ],
            "resampled_steps": [
                "4 / 2 = 2 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "4 / 2 = 2 (left: 1 2 12)\n25 * 5 = 125 (left: 5 125)",
                "1 + 2 = 3 (left: 3 4 12)\n4 * 3 = 12 (left: 12 12)"
            ]
        },
        "step_6": {
            "steps": [
                "4 / 2 = 2 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "4 / 2 = 2 (left: 1 2 12)\n25 * 5 = 125 (left: 5 125)\n5 * 125 = 625 (left: 625)",
                "1 + 2 = 3 (left: 3 4 12)\n4 * 3 = 12 (left: 12 12)\n12 + 12 = 24"
            ],
            "values": [
                0.001,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 5.0",
                "1 <- 5.0",
                "2 <- 3.2"
            ],
            "resampled_steps": [
                "4 / 2 = 2 (left: 1 2 12)\n25 * 5 = 125 (left: 5 125)\n5 * 5 = 25 (left: 25 125)\n25 * 5 = 125 (left: 125)",
                "4 / 2 = 2 (left: 1 2 12)\n25 * 5 = 125 (left: 5 125)\n5 * 5 = 25 (left: 25 125)\n25 * 5 = 125 (left: 125)",
                "4 / 2 = 2 (left: 1 2 12)\n25 * 5 = 125 (left: 5 125)"
            ]
        },
        "step_7": {
            "steps": [
                "4 / 2 = 2 (left: 1 2 12)\n25 * 5 = 125 (left: 5 125)\n5 * 5 = 25 (left: 25 125)\n25 * 5 = 125 (left: 125)\n125 - 5 = 120 (left: 120)",
                "4 / 2 = 2 (left: 1 2 12)\n25 * 5 = 125 (left: 5 125)\n5 * 5 = 25 (left: 25 125)\n25 * 5 = 125 (left: 125)\n125 - 25 = 100 (left: 100)",
                "4 / 2 = 2 (left: 1 2 12)\n25 * 5 = 125 (left: 5 125)\n125 / 5 = 25 (left: 25 125)"
            ],
            "values": [
                0.003,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 5.0",
                "2 <- 3.2"
            ],
            "resampled_steps": [
                "4 / 2 = 2 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)",
                "4 / 2 = 2 (left: 1 2 12)\n25 * 5 = 125 (left: 5 125)\n5 * 5 = 25 (left: 25 125)\n25 * 5 = 125 (left: 125)",
                "4 / 2 = 2 (left: 1 2 12)\n25 * 5 = 125 (left: 5 125)"
            ]
        },
        "step_8": {
            "steps": [
                "4 / 2 = 2 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n6 / 1 = 6 (left: 6)",
                "4 / 2 = 2 (left: 1 2 12)\n25 * 5 = 125 (left: 5 125)\n5 * 5 = 25 (left: 25 125)\n25 * 5 = 125 (left: 125)\n125 * 5 = 625 (left: 625)",
                "4 / 2 = 2 (left: 1 2 12)\n25 * 5 = 125 (left: 5 125)\n5 * 125 = 625 (left: 625)"
            ],
            "values": [
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 7.2",
                "1 <- 1.1",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "4 / 2 = 2 (left: 1 2 12)\n25 * 5 = 125 (left: 5 125)\n125 / 5 = 25 (left: 25 125)",
                "4 / 2 = 2 (left: 1 2 12)",
                "4 / 2 = 2 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)"
            ]
        },
        "step_9": {
            "steps": [
                "4 / 2 = 2 (left: 1 2 12)\n25 * 5 = 125 (left: 5 125)\n125 / 5 = 25 (left: 25 125)\n125 / 25 = 5 (left: 5)",
                "4 / 2 = 2 (left: 1 2 12)\n2 + 12 = 14 (left: 1 14)",
                "4 / 2 = 2 (left: 1 2 12)\n12 / 2 = 6 (left: 1 6)\n6 - 1 = 5 (left: 5)"
            ],
            "values": [
                0.001,
                21.0,
                0.003
            ],
            "resampled": [
                "0 <- 5.0",
                "1 <- 9.1",
                "2 <- 2.0"
            ],
            "resampled_steps": [
                "4 / 2 = 2 (left: 1 2 12)\n25 * 5 = 125 (left: 5 125)\n5 * 5 = 25 (left: 25 125)\n25 * 5 = 125 (left: 125)",
                "4 / 2 = 2 (left: 1 2 12)\n2 + 12 = 14 (left: 1 14)",
                "1 + 2 = 3 (left: 3 4 12)"
            ]
        },
        "step_10": {
            "steps": [
                "4 / 2 = 2 (left: 1 2 12)\n25 * 5 = 125 (left: 5 125)\n5 * 5 = 25 (left: 25 125)\n25 * 5 = 125 (left: 125)\n125 + 5 = 130 (left: 5 130)",
                "4 / 2 = 2 (left: 1 2 12)\n2 + 12 = 14 (left: 1 14)\n1 + 14 = 15 (left: 15)",
                "1 + 2 = 3 (left: 3 4 12)\n12 / 3 = 4 (left: 4 12)"
            ],
            "values": [
                20.0,
                0.003,
                1.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.42417550000000004
    },
    "26": {
        "input": "1 1 3 6",
        "step_1": {
            "steps": [
                "1 * 3 = 3 (left: 3 1 6)",
                "1 + 1 = 2 (left: 2 3 6)",
                "3 + 1 = 4 (left: 1 4 6)"
            ],
            "values": [
                2.0,
                41.0,
                60.0
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 1.1",
                "2 <- 1.2"
            ],
            "resampled_steps": [
                "3 + 1 = 4 (left: 1 4 6)",
                "1 + 1 = 2 (left: 2 3 6)",
                "3 + 1 = 4 (left: 1 4 6)"
            ]
        },
        "step_2": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 6)\n3 + 5 = 8 (left: 2 8)",
                "1 + 1 = 2 (left: 2 3 6)\n2 + 3 = 5 (left: 5 6)",
                "3 + 1 = 4 (left: 1 4 6)\n5 - 3 = 2 (left: 2 7)"
            ],
            "values": [
                2.001,
                0.002,
                0.001
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 1.1",
                "2 <- 1.1"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 3 6)",
                "1 + 1 = 2 (left: 2 3 6)",
                "1 + 1 = 2 (left: 2 3 6)"
            ]
        },
        "step_3": {
            "steps": [
                "1 + 1 = 2 (left: 2 3 6)\n6 - 3 = 3 (left: 2 3)",
                "1 + 1 = 2 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)",
                "1 + 1 = 2 (left: 2 3 6)\n3 - 2 = 1 (left: 1)"
            ],
            "values": [
                0.002,
                41.0,
                0.002
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 3.1",
                "2 <- 1.1"
            ],
            "resampled_steps": [
                "3 + 1 = 4 (left: 1 4 6)",
                "1 + 1 = 2 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)",
                "1 + 1 = 2 (left: 2 3 6)"
            ]
        },
        "step_4": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 6)\nInput: 3 9 12",
                "1 + 1 = 2 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)",
                "1 + 1 = 2 (left: 2 3 6)\n2 * 3 = 6 (left: 6)"
            ],
            "values": [
                0.003,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 3.1",
                "2 <- 1.1"
            ],
            "resampled_steps": [
                "3 + 1 = 4 (left: 1 4 6)",
                "1 + 1 = 2 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)",
                "1 + 1 = 2 (left: 2 3 6)"
            ]
        },
        "step_5": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 6)\n1 + 4 = 5 (left: 5 6)",
                "1 + 1 = 2 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)",
                "1 + 1 = 2 (left: 2 3 6)\n6 - 3 = 3 (left: 2 3)"
            ],
            "values": [
                0.002,
                40.0,
                0.001
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 5.1",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "3 + 1 = 4 (left: 1 4 6)",
                "1 + 1 = 2 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)",
                ""
            ]
        },
        "step_6": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 6)\n9 - 3 = 6 (left: 6 11 15)",
                "1 + 1 = 2 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)\nThere are no possible next steps for the number 18 as it is a prime number and cannot be further manipulated using the operations provided.",
                "6 / 1 = 6 (left: 1 3 6)"
            ],
            "values": [
                1.002,
                0.003,
                3.0
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 5.1",
                "2 <- 3.1"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)",
                "1 + 1 = 2 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)",
                "1 + 1 = 2 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)"
            ]
        },
        "step_7": {
            "steps": [
                "1 + 1 = 2 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)",
                "1 + 1 = 2 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)\nNone",
                "1 + 1 = 2 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)\n6 / 3 = 2 (left: 2)"
            ],
            "values": [
                40.0,
                0.003,
                0.001
            ],
            "resampled": [
                "0 <- 5.1",
                "1 <- 5.1",
                "2 <- 4.1"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)",
                "1 + 1 = 2 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)",
                "1 + 1 = 2 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)"
            ]
        },
        "step_8": {
            "steps": [
                "1 + 1 = 2 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)\nThere are no possible next steps with the input 18.",
                "1 + 1 = 2 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)\nThere are no possible next steps as there are no other numbers to operate with. The result is 18.",
                "1 + 1 = 2 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)\n18 + 8 = 26 (left: 8)"
            ],
            "values": [
                0.003,
                0.003,
                0.001
            ],
            "resampled": [
                "0 <- 5.1",
                "1 <- 7.0",
                "2 <- 4.1"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)",
                "1 + 1 = 2 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)",
                "1 + 1 = 2 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)"
            ]
        },
        "step_9": {
            "steps": [
                "1 + 1 = 2 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)\nThere are no possible next steps as there are no other numbers provided to perform operations with.",
                "1 + 1 = 2 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)\nThere are no possible next steps with the input 18.",
                "1 + 1 = 2 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)\nThere are no possible next steps with the input 18."
            ],
            "values": [
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 5.1",
                "1 <- 6.2",
                "2 <- 4.1"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)",
                "6 / 1 = 6 (left: 1 3 6)",
                "1 + 1 = 2 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)"
            ]
        },
        "step_10": {
            "steps": [
                "1 + 1 = 2 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)\nThere are no possible next steps for the number 18.",
                "6 / 1 = 6 (left: 1 3 6)\n3 * 6 = 18 (left: 1 18)",
                "1 + 1 = 2 (left: 2 3 6)\n6 / 2 = 3 (left: 3 6)\n3 * 6 = 18 (left: 18)\nThere are no possible next steps with the input 18."
            ],
            "values": [
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.43854250000000006
    },
    "27": {
        "input": "1 1 3 9",
        "step_1": {
            "steps": [
                "6 - 4 = 2 (left: 2 5 12)",
                "3 + 1 = 4 (left: 1 4 9)",
                "6 + 7 = 13 (left: 4 13 9)"
            ],
            "values": [
                0.003,
                41.0,
                3.0
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 1.1",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "3 + 1 = 4 (left: 1 4 9)",
                "3 + 1 = 4 (left: 1 4 9)",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 9)\nPossible next steps:",
                "3 + 1 = 4 (left: 1 4 9)\n9 - 1 = 8 (left: 4 8)",
                "9 / 3 = 3 (left: 1 3 9)"
            ],
            "values": [
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.1"
            ],
            "resampled_steps": [
                "",
                "",
                "3 + 1 = 4 (left: 1 4 9)"
            ]
        },
        "step_3": {
            "steps": [
                "2 * 4 = 8 (left: 5 8 1)",
                "3 * 1 = 3 (left: 3 1 9)",
                "3 + 1 = 4 (left: 1 4 9)\n3 * 7 = 21 (left: 7 21 21)"
            ],
            "values": [
                1.002,
                1.002,
                22.0
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 3.2",
                "2 <- 3.1"
            ],
            "resampled_steps": [
                "3 + 1 = 4 (left: 1 4 9)",
                "3 + 1 = 4 (left: 1 4 9)\n3 * 7 = 21 (left: 7 21 21)",
                "3 * 1 = 3 (left: 3 1 9)"
            ]
        },
        "step_4": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 9)\n4 - 1 = 3 (left: 3 9)",
                "3 + 1 = 4 (left: 1 4 9)\n3 * 7 = 21 (left: 7 21 21)\n4 * 4 = 16 (left: 16 64)",
                "3 * 1 = 3 (left: 3 1 9)\n9 - 1 = 8 (left: 3 8)"
            ],
            "values": [
                0.003,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 4.1",
                "2 <- 1.1"
            ],
            "resampled_steps": [
                "3 * 1 = 3 (left: 3 1 9)\n9 - 1 = 8 (left: 3 8)",
                "3 + 1 = 4 (left: 1 4 9)\n3 * 7 = 21 (left: 7 21 21)\n4 * 4 = 16 (left: 16 64)",
                "3 + 1 = 4 (left: 1 4 9)"
            ]
        },
        "step_5": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 9)\n9 - 1 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5)",
                "3 + 1 = 4 (left: 1 4 9)\n3 * 7 = 21 (left: 7 21 21)\n4 * 4 = 16 (left: 16 64)\n64 / 16 = 4 (left: 4 64)",
                "3 + 1 = 4 (left: 1 4 9)\n7 / 5 = 1 (left: 3 1)"
            ],
            "values": [
                0.003,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 5.2",
                "2 <- 5.2"
            ],
            "resampled_steps": [
                "3 + 1 = 4 (left: 1 4 9)\n3 * 7 = 21 (left: 7 21 21)",
                "3 + 1 = 4 (left: 1 4 9)\n7 / 5 = 1 (left: 3 1)",
                "3 + 1 = 4 (left: 1 4 9)\n7 / 5 = 1 (left: 3 1)"
            ]
        },
        "step_6": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 9)\n3 * 7 = 21 (left: 7 21 21)\n21 / 7 = 3 (left: 3 21)",
                "3 + 1 = 4 (left: 1 4 9)\n7 / 5 = 1 (left: 3 1)\n3 * 1 = 3 (left: 3)",
                "3 + 1 = 4 (left: 1 4 9)\n7 / 5 = 1 (left: 3 1)\n3 + 1 = 4 (left: 4)"
            ],
            "values": [
                0.002,
                0.0,
                0.002
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 5.1",
                "2 <- 4.1"
            ],
            "resampled_steps": [
                "3 * 1 = 3 (left: 3 1 9)\n9 - 1 = 8 (left: 3 8)",
                "3 + 1 = 4 (left: 1 4 9)\n3 * 7 = 21 (left: 7 21 21)\n4 * 4 = 16 (left: 16 64)\n64 / 16 = 4 (left: 4 64)",
                "3 + 1 = 4 (left: 1 4 9)\n3 * 7 = 21 (left: 7 21 21)\n4 * 4 = 16 (left: 16 64)"
            ]
        },
        "step_7": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 9)\n9 - 1 = 8 (left: 3 8)\nInput: 5 10",
                "3 + 1 = 4 (left: 1 4 9)\n3 * 7 = 21 (left: 7 21 21)\n4 * 4 = 16 (left: 16 64)\n64 / 16 = 4 (left: 4 64)\n4 * 64 = 256 (left: 256)",
                "3 + 1 = 4 (left: 1 4 9)\n3 * 7 = 21 (left: 7 21 21)\n4 * 4 = 16 (left: 16 64)\n64 / 16 = 4 (left: 4)"
            ],
            "values": [
                0.003,
                0.003,
                0.0
            ],
            "resampled": [
                "0 <- 4.1",
                "1 <- 5.1",
                "2 <- 4.2"
            ],
            "resampled_steps": [
                "3 + 1 = 4 (left: 1 4 9)\n3 * 7 = 21 (left: 7 21 21)\n4 * 4 = 16 (left: 16 64)",
                "3 + 1 = 4 (left: 1 4 9)\n3 * 7 = 21 (left: 7 21 21)\n4 * 4 = 16 (left: 16 64)\n64 / 16 = 4 (left: 4 64)",
                "3 * 1 = 3 (left: 3 1 9)\n9 - 1 = 8 (left: 3 8)"
            ]
        },
        "step_8": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 9)\n3 * 7 = 21 (left: 7 21 21)\n4 * 4 = 16 (left: 16 64)\n16 + 48 = 64 (left: 64)",
                "3 + 1 = 4 (left: 1 4 9)\n3 * 7 = 21 (left: 7 21 21)\n4 * 4 = 16 (left: 16 64)\n64 / 16 = 4 (left: 4 64)\n64 + 4 = 68 (left: 68)",
                "3 * 1 = 3 (left: 3 1 9)\n9 - 1 = 8 (left: 3 8)\n8 / 3 = 2.67 (left: 2.67)"
            ],
            "values": [
                0.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 5.1",
                "2 <- 5.1"
            ],
            "resampled_steps": [
                "3 * 1 = 3 (left: 3 1 9)\n9 - 1 = 8 (left: 3 8)",
                "3 + 1 = 4 (left: 1 4 9)\n3 * 7 = 21 (left: 7 21 21)\n4 * 4 = 16 (left: 16 64)\n64 / 16 = 4 (left: 4 64)",
                "3 + 1 = 4 (left: 1 4 9)\n3 * 7 = 21 (left: 7 21 21)\n4 * 4 = 16 (left: 16 64)\n64 / 16 = 4 (left: 4 64)"
            ]
        },
        "step_9": {
            "steps": [
                "3 * 1 = 3 (left: 3 1 9)\n9 - 1 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "3 + 1 = 4 (left: 1 4 9)\n3 * 7 = 21 (left: 7 21 21)\n4 * 4 = 16 (left: 16 64)\n64 / 16 = 4 (left: 4 64)\n64 / 4 = 16 (left: 16)",
                "3 + 1 = 4 (left: 1 4 9)\n3 * 7 = 21 (left: 7 21 21)\n4 * 4 = 16 (left: 16 64)\n64 / 16 = 4 (left: 4 64)\n64 / 4 = 16 (left: 16)"
            ],
            "values": [
                60.0,
                20.001,
                0.003
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 9.0",
                "2 <- 4.1"
            ],
            "resampled_steps": [
                "3 + 1 = 4 (left: 1 4 9)\n3 * 7 = 21 (left: 7 21 21)",
                "3 * 1 = 3 (left: 3 1 9)\n9 - 1 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)",
                "3 + 1 = 4 (left: 1 4 9)\n3 * 7 = 21 (left: 7 21 21)\n4 * 4 = 16 (left: 16 64)"
            ]
        },
        "step_10": {
            "steps": [
                "3 + 1 = 4 (left: 1 4 9)\n3 * 7 = 21 (left: 7 21 21)\nInput: 5 5 10",
                "3 * 1 = 3 (left: 3 1 9)\n9 - 1 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (3 * 1) * (9 - 1) = 24",
                "3 + 1 = 4 (left: 1 4 9)\n3 * 7 = 21 (left: 7 21 21)\n4 * 4 = 16 (left: 16 64)\n16 + 64 = 80 (left: 80)"
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 1
            },
            {
                "r": 0
            }
        ],
        "cost": 0.45471150000000005
    },
    "28": {
        "input": "7 7 12 12",
        "step_1": {
            "steps": [
                "12 / 7 = 1 (left: 1 12 12)",
                "7 * 7 = 49 (left: 12 12 49)",
                "12 + 7 = 19 (left: 7 12 19)"
            ],
            "values": [
                21.001,
                2.001,
                1.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.2"
            ],
            "resampled_steps": [
                "",
                "",
                "12 + 7 = 19 (left: 7 12 19)"
            ]
        },
        "step_2": {
            "steps": [
                "7 / 7 = 1 (left: 1 12 12)",
                "12 - 7 = 5 (left: 7 5 12)",
                "12 + 7 = 19 (left: 7 12 19)\n12 - 7 = 5 (left: 5 12 19)"
            ],
            "values": [
                20.002,
                40.001,
                2.001
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 1.0",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "12 - 7 = 5 (left: 7 5 12)",
                "12 / 7 = 1 (left: 1 12 12)",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "12 - 7 = 5 (left: 7 5 12)\n7 - 5 = 2 (left: 2 12)",
                "12 / 7 = 1 (left: 1 12 12)\n12 - 1 = 11 (left: 11 12)",
                "12 / 7 = 1 (left: 7 12 1)"
            ],
            "values": [
                60.0,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 3.0",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "7 / 7 = 1 (left: 1 12 12)",
                "12 - 7 = 5 (left: 7 5 12)\n7 - 5 = 2 (left: 2 12)",
                "12 - 7 = 5 (left: 7 5 12)"
            ]
        },
        "step_4": {
            "steps": [
                "7 / 7 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "12 - 7 = 5 (left: 7 5 12)\n7 - 5 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "12 - 7 = 5 (left: 7 5 12)\n10 - 2 = 8 (left: 8 5)"
            ],
            "values": [
                40.001,
                0.001,
                20.002
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 3.0",
                "2 <- 4.0"
            ],
            "resampled_steps": [
                "12 - 7 = 5 (left: 7 5 12)\n7 - 5 = 2 (left: 2 12)",
                "12 - 7 = 5 (left: 7 5 12)\n7 - 5 = 2 (left: 2 12)",
                "7 / 7 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)"
            ]
        },
        "step_5": {
            "steps": [
                "12 - 7 = 5 (left: 7 5 12)\n7 - 5 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "12 - 7 = 5 (left: 7 5 12)\n7 - 5 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "7 / 7 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)"
            ],
            "values": [
                0.003,
                0.002,
                0.002
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 3.0",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "12 - 7 = 5 (left: 7 5 12)\n7 - 5 = 2 (left: 2 12)",
                "12 - 7 = 5 (left: 7 5 12)\n7 - 5 = 2 (left: 2 12)",
                "12 - 7 = 5 (left: 7 5 12)"
            ]
        },
        "step_6": {
            "steps": [
                "12 - 7 = 5 (left: 7 5 12)\n7 - 5 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "12 - 7 = 5 (left: 7 5 12)\n7 - 5 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "12 - 7 = 5 (left: 7 5 12)\n7 + 5 = 12 (left: 12 12)"
            ],
            "values": [
                0.003,
                0.002,
                40.0
            ],
            "resampled": [
                "0 <- 4.0",
                "1 <- 4.2",
                "2 <- 4.0"
            ],
            "resampled_steps": [
                "7 / 7 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "12 - 7 = 5 (left: 7 5 12)\n10 - 2 = 8 (left: 8 5)",
                "7 / 7 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)"
            ]
        },
        "step_7": {
            "steps": [
                "7 / 7 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)",
                "12 - 7 = 5 (left: 7 5 12)\n10 - 2 = 8 (left: 8 5)\n8 + 5 = 13 (left: 13)",
                "7 / 7 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)"
            ],
            "values": [
                0.003,
                0.002,
                60.0
            ],
            "resampled": [
                "0 <- 7.2",
                "1 <- 6.2",
                "2 <- 7.2"
            ],
            "resampled_steps": [
                "7 / 7 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "12 - 7 = 5 (left: 7 5 12)\n7 + 5 = 12 (left: 12 12)",
                "7 / 7 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)"
            ]
        },
        "step_8": {
            "steps": [
                "7 / 7 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((7 / 7) * 12) + 12 = 24",
                "12 - 7 = 5 (left: 7 5 12)\n7 + 5 = 12 (left: 12 12)\n12 + 12 = 24",
                "7 / 7 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (7 / 7) * (12 + 12) = 24"
            ]
        },
        "results": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ],
        "cost": 0.4660675
    },
    "29": {
        "input": "4 6 7 7",
        "step_1": {
            "steps": [
                "4 + 6 = 10 (left: 7 7 10)",
                "7 - 6 = 1 (left: 1 7 7)",
                "6 + 7 = 13 (left: 4 7 13)"
            ],
            "values": [
                60.0,
                1.002,
                1.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.0",
                "2 <- 1.0"
            ],
            "resampled_steps": [
                "",
                "4 + 6 = 10 (left: 7 7 10)",
                "4 + 6 = 10 (left: 7 7 10)"
            ]
        },
        "step_2": {
            "steps": [
                "4 + 6 = 10 (left: 7 7 10)",
                "4 + 6 = 10 (left: 7 7 10)\n7 * 7 = 49 (left: 10 49)",
                "4 + 6 = 10 (left: 7 7 10)\n10 + 7 = 17 (left: 7 17)"
            ],
            "values": [
                41.0,
                1.002,
                41.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 2.0",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "4 + 6 = 10 (left: 7 7 10)\n10 + 7 = 17 (left: 7 17)",
                "4 + 6 = 10 (left: 7 7 10)",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "4 + 6 = 10 (left: 7 7 10)\n10 + 7 = 17 (left: 7 17)\n17 / 7 = 2.42857142857 (left: 2.42857142857)",
                "4 + 6 = 10 (left: 7 7 10)\n5 - 5 = 0 (left: 0 5 5)",
                "6 * 7 = 42 (left: 4 7 42)"
            ],
            "values": [
                0.003,
                20.002,
                20.002
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 2.2",
                "2 <- 3.2"
            ],
            "resampled_steps": [
                "6 * 7 = 42 (left: 4 7 42)",
                "4 + 6 = 10 (left: 7 7 10)\n10 + 7 = 17 (left: 7 17)",
                "6 * 7 = 42 (left: 4 7 42)"
            ]
        },
        "step_4": {
            "steps": [
                "6 * 7 = 42 (left: 4 7 42)\n7 - 4 = 3 (left: 3 42)",
                "4 + 6 = 10 (left: 7 7 10)\n10 + 7 = 17 (left: 7 17)\n17 - 7 = 10 (left: 10)",
                "6 * 7 = 42 (left: 4 7 42)\n10 * 15 = 150 (left: 5 150 20)"
            ],
            "values": [
                20.001,
                0.002,
                1.002
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 3.1",
                "2 <- 3.2"
            ],
            "resampled_steps": [
                "4 + 6 = 10 (left: 7 7 10)",
                "4 + 6 = 10 (left: 7 7 10)\n5 - 5 = 0 (left: 0 5 5)",
                "6 * 7 = 42 (left: 4 7 42)"
            ]
        },
        "step_5": {
            "steps": [
                "4 + 6 = 10 (left: 7 7 10)\n3 - 1 = 2 (left: 2 9)",
                "4 + 6 = 10 (left: 7 7 10)\n5 - 5 = 0 (left: 0 5 5)\n5 * 5 = 25 (left: 0 25)",
                "6 * 7 = 42 (left: 4 7 42)\n7 * 4 = 28 (left: 28 42)"
            ],
            "values": [
                0.0,
                20.002,
                0.003
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 5.1",
                "2 <- 5.1"
            ],
            "resampled_steps": [
                "4 + 6 = 10 (left: 7 7 10)\n10 + 7 = 17 (left: 7 17)",
                "4 + 6 = 10 (left: 7 7 10)\n5 - 5 = 0 (left: 0 5 5)\n5 * 5 = 25 (left: 0 25)",
                "4 + 6 = 10 (left: 7 7 10)\n5 - 5 = 0 (left: 0 5 5)\n5 * 5 = 25 (left: 0 25)"
            ]
        },
        "step_6": {
            "steps": [
                "4 + 6 = 10 (left: 7 7 10)\n10 + 7 = 17 (left: 7 17)\n36 / 24 = 1.5 (left: 1.5 12)",
                "4 + 6 = 10 (left: 7 7 10)\n5 - 5 = 0 (left: 0 5 5)\n5 * 5 = 25 (left: 0 25)\n10 + 5 = 15 (left: 15)",
                "4 + 6 = 10 (left: 7 7 10)\n5 - 5 = 0 (left: 0 5 5)\n5 * 5 = 25 (left: 0 25)\n0 * 25 = 0 (left: 0)"
            ],
            "values": [
                0.002,
                0.002,
                0.002
            ],
            "resampled": [
                "0 <- 5.1",
                "1 <- INIT",
                "2 <- 3.1"
            ],
            "resampled_steps": [
                "4 + 6 = 10 (left: 7 7 10)\n5 - 5 = 0 (left: 0 5 5)\n5 * 5 = 25 (left: 0 25)",
                "",
                "4 + 6 = 10 (left: 7 7 10)\n5 - 5 = 0 (left: 0 5 5)"
            ]
        },
        "step_7": {
            "steps": [
                "4 + 6 = 10 (left: 7 7 10)\n5 - 5 = 0 (left: 0 5 5)\n5 * 5 = 25 (left: 0 25)\n25 + 0 = 25 (left: 25)",
                "6 / 4 = 1.5 (left: 1.5 7 7)",
                "4 + 6 = 10 (left: 7 7 10)\n5 - 5 = 0 (left: 0 5 5)\n9 + 3 = 12 (left: 12 27)"
            ],
            "values": [
                20.001,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- 7.1",
                "1 <- 2.0",
                "2 <- 7.0"
            ],
            "resampled_steps": [
                "6 / 4 = 1.5 (left: 1.5 7 7)",
                "4 + 6 = 10 (left: 7 7 10)",
                "4 + 6 = 10 (left: 7 7 10)\n5 - 5 = 0 (left: 0 5 5)\n5 * 5 = 25 (left: 0 25)\n25 + 0 = 25 (left: 25)"
            ]
        },
        "step_8": {
            "steps": [
                "6 / 4 = 1.5 (left: 1.5 7 7)\n7 / 1.5 = 4.666666666666667 (left: 4.666666666666667 7)",
                "4 + 6 = 10 (left: 7 7 10)\n6 + 1 = 7 (left: 4 7)",
                "4 + 6 = 10 (left: 7 7 10)\n5 - 5 = 0 (left: 0 5 5)\n5 * 5 = 25 (left: 0 25)\n25 + 0 = 25 (left: 25)\n25 + 25 = 50"
            ],
            "values": [
                3.0,
                1.001,
                0.003
            ],
            "resampled": [
                "0 <- 7.0",
                "1 <- 5.1",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "4 + 6 = 10 (left: 7 7 10)\n5 - 5 = 0 (left: 0 5 5)\n5 * 5 = 25 (left: 0 25)\n25 + 0 = 25 (left: 25)",
                "4 + 6 = 10 (left: 7 7 10)\n5 - 5 = 0 (left: 0 5 5)\n5 * 5 = 25 (left: 0 25)",
                "4 + 6 = 10 (left: 7 7 10)\n10 + 7 = 17 (left: 7 17)"
            ]
        },
        "step_9": {
            "steps": [
                "4 + 6 = 10 (left: 7 7 10)\n5 - 5 = 0 (left: 0 5 5)\n5 * 5 = 25 (left: 0 25)\n25 + 0 = 25 (left: 25)\n25 / 8 = 3.125 (left: 8)",
                "4 + 6 = 10 (left: 7 7 10)\n5 - 5 = 0 (left: 0 5 5)\n5 * 5 = 25 (left: 0 25)\n0 / 25 = 0 (left: 0 25)",
                "4 + 6 = 10 (left: 7 7 10)\n10 + 7 = 17 (left: 7 17)\n7 + 17 = 24"
            ],
            "values": [
                0.001,
                21.0,
                0.003
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 9.1",
                "2 <- 5.1"
            ],
            "resampled_steps": [
                "4 + 6 = 10 (left: 7 7 10)\n10 + 7 = 17 (left: 7 17)",
                "4 + 6 = 10 (left: 7 7 10)\n5 - 5 = 0 (left: 0 5 5)\n5 * 5 = 25 (left: 0 25)\n0 / 25 = 0 (left: 0 25)",
                "4 + 6 = 10 (left: 7 7 10)\n5 - 5 = 0 (left: 0 5 5)\n5 * 5 = 25 (left: 0 25)"
            ]
        },
        "step_10": {
            "steps": [
                "4 + 6 = 10 (left: 7 7 10)\n10 + 7 = 17 (left: 7 17)\n17 / 7 = 2.43 (left: 2.43)",
                "4 + 6 = 10 (left: 7 7 10)\n5 - 5 = 0 (left: 0 5 5)\n5 * 5 = 25 (left: 0 25)\n0 / 25 = 0 (left: 0 25)\n25 - 0 = 25 (left: 25)",
                "4 + 6 = 10 (left: 7 7 10)\n5 - 5 = 0 (left: 0 5 5)\n5 * 5 = 25 (left: 0 25)\n25 / 25 = 1 (left: 1)"
            ],
            "values": [
                0.003,
                0.001,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.4819995
    },
    "30": {
        "input": "1 1 2 13",
        "step_1": {
            "steps": [
                "13 - 1 = 12 (left: 1 2 12)",
                "1 * 1 = 1 (left: 1 2 13)",
                "1 * 1 = 1 (left: 1 2 13)"
            ],
            "values": [
                60.0,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.0",
                "2 <- 1.0"
            ],
            "resampled_steps": [
                "",
                "13 - 1 = 12 (left: 1 2 12)",
                "13 - 1 = 12 (left: 1 2 12)"
            ]
        },
        "step_2": {
            "steps": [
                "1 * 1 = 1 (left: 1 2 13)",
                "13 - 1 = 12 (left: 1 2 12)\n6 - 2 = 4 (left: 4 3)",
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)"
            ],
            "values": [
                0.003,
                21.001,
                20.002
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 2.1",
                "2 <- 1.0"
            ],
            "resampled_steps": [
                "13 - 1 = 12 (left: 1 2 12)",
                "13 - 1 = 12 (left: 1 2 12)\n6 - 2 = 4 (left: 4 3)",
                "13 - 1 = 12 (left: 1 2 12)"
            ]
        },
        "step_3": {
            "steps": [
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)",
                "13 - 1 = 12 (left: 1 2 12)\n6 - 2 = 4 (left: 4 3)\n4 / 3 = 1.33333333333 (left: 1.33333333333)",
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)"
            ],
            "values": [
                40.001,
                0.0,
                20.002
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "13 - 1 = 12 (left: 1 2 12)\n6 - 2 = 4 (left: 4 3)",
                "13 - 1 = 12 (left: 1 2 12)\n6 - 2 = 4 (left: 4 3)",
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)"
            ]
        },
        "step_4": {
            "steps": [
                "13 - 1 = 12 (left: 1 2 12)\n6 - 2 = 4 (left: 4 3)\n4 / 3 = 1.33 (left: 1.33)",
                "13 - 1 = 12 (left: 1 2 12)\n6 - 2 = 4 (left: 4 3)\n3 + 4 = 7 (left: 7)",
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)"
            ],
            "values": [
                0.003,
                0.002,
                60.0
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 2.1",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)",
                "13 - 1 = 12 (left: 1 2 12)\n6 - 2 = 4 (left: 4 3)",
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)"
            ]
        },
        "step_5": {
            "steps": [
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\n36 / 2 = 18 (left: 18)",
                "13 - 1 = 12 (left: 1 2 12)\n6 - 2 = 4 (left: 4 3)\n4 + 3 = 7 (left: 7)",
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)"
            ],
            "values": [
                20.0,
                0.002,
                20.0
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 5.0",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "13 - 1 = 12 (left: 1 2 12)\n6 - 2 = 4 (left: 4 3)",
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\n36 / 2 = 18 (left: 18)",
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)"
            ]
        },
        "step_6": {
            "steps": [
                "13 - 1 = 12 (left: 1 2 12)\n6 - 2 = 4 (left: 4 3)\n4 + 3 = 7 (left: 7)",
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\n36 / 2 = 18 (left: 18)\nThere are no possible next steps with the input of 18.",
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n3 + 12 = 15 (left: 15)"
            ],
            "values": [
                0.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 4.2",
                "2 <- 4.2"
            ],
            "resampled_steps": [
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)",
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)",
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)"
            ]
        },
        "step_7": {
            "steps": [
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\n36 / 2 = 18",
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\n36 / 2 = 18",
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nNo possible next steps, 36 is a single number."
            ],
            "values": [
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 4.2",
                "2 <- 5.2"
            ],
            "resampled_steps": [
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)",
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)",
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)"
            ]
        },
        "step_8": {
            "steps": [
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nThere is only one number, so there are no possible next steps.",
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nNo further calculations can be made with the input 36.",
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\nThere is only one possible next step for the input 36:"
            ],
            "values": [
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 2.2",
                "2 <- 5.2"
            ],
            "resampled_steps": [
                "13 - 1 = 12 (left: 1 2 12)\n6 - 2 = 4 (left: 4 3)",
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)",
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)"
            ]
        },
        "step_9": {
            "steps": [
                "13 - 1 = 12 (left: 1 2 12)\n6 - 2 = 4 (left: 4 3)\n4 * 3 = 12 (left: 12)",
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n12 - 3 = 9 (left: 9)",
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\n36 / 2 = 18"
            ],
            "values": [
                0.003,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 3.0",
                "2 <- 5.0"
            ],
            "resampled_steps": [
                "13 - 1 = 12 (left: 1 2 12)",
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)",
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\n36 / 2 = 18 (left: 18)"
            ]
        },
        "step_10": {
            "steps": [
                "13 - 1 = 12 (left: 1 2 12)\n2 * 12 = 24 (left: 1 24)",
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)",
                "13 - 1 = 12 (left: 1 2 12)\n1 + 2 = 3 (left: 3 12)\n3 * 12 = 36 (left: 36)\n36 / 2 = 18 (left: 18)\n18 / 8 = 2.25 (left: 2.25)"
            ],
            "values": [
                60.0,
                0.0,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.494445
    },
    "31": {
        "input": "1 1 5 6",
        "step_1": {
            "steps": [
                "11 - 1 = 10 (left: 3 10 11)",
                "5 + 1 = 6 (left: 1 6 6)",
                "1 * 1 = 1 (left: 1 5 6)"
            ],
            "values": [
                1.002,
                3.0,
                41.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.2"
            ],
            "resampled_steps": [
                "",
                "",
                "1 * 1 = 1 (left: 1 5 6)"
            ]
        },
        "step_2": {
            "steps": [
                "1 + 1 = 2 (left: 2 5 6)",
                "1 * 1 = 1 (left: 1 5 6)",
                "1 * 1 = 1 (left: 1 5 6)\n6 / 1 = 6 (left: 6 6)"
            ],
            "values": [
                1.0,
                41.0,
                0.003
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 1.2"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 5 6)",
                "1 * 1 = 1 (left: 1 5 6)",
                "1 * 1 = 1 (left: 1 5 6)"
            ]
        },
        "step_3": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 6)\n7 / 3 = 2 (left: 2 21)",
                "1 * 1 = 1 (left: 1 5 6)\n10 + 3 = 13 (left: 3 13)",
                "1 * 1 = 1 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)"
            ],
            "values": [
                0.003,
                0.003,
                20.002
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 2.1",
                "2 <- 3.2"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)",
                "1 * 1 = 1 (left: 1 5 6)",
                "1 * 1 = 1 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)"
            ]
        },
        "step_4": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)\n6 + 6 = 12 (left: 12)",
                "1 * 1 = 1 (left: 1 5 6)\n3 / 9 = 0.3333333333333333 (left: 0.3333333333333333 27)",
                "1 * 1 = 1 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)\n6 + 6 = 12 (left: 12)"
            ],
            "values": [
                0.002,
                2.001,
                0.002
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 2.1",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)",
                "1 * 1 = 1 (left: 1 5 6)",
                "1 * 1 = 1 (left: 1 5 6)"
            ]
        },
        "step_5": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)\n6 - 6 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 5 6)\n5 / 1 = 5 (left: 5 6)",
                "1 * 1 = 1 (left: 1 5 6)\n6 / 1 = 6 (left: 6 6)"
            ],
            "values": [
                0.003,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 2.1",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 5 6)",
                "1 * 1 = 1 (left: 1 5 6)",
                "1 * 1 = 1 (left: 1 5 6)"
            ]
        },
        "step_6": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 6)\n6 / 1 = 6 (left: 6 6)",
                "1 * 1 = 1 (left: 1 5 6)\n5 * 1 = 5 (left: 5 6)",
                "1 * 1 = 1 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)"
            ],
            "values": [
                40.001,
                21.0,
                0.003
            ],
            "resampled": [
                "0 <- 6.0",
                "1 <- 6.1",
                "2 <- 6.0"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 5 6)\n6 / 1 = 6 (left: 6 6)",
                "1 * 1 = 1 (left: 1 5 6)\n5 * 1 = 5 (left: 5 6)",
                "1 * 1 = 1 (left: 1 5 6)\n6 / 1 = 6 (left: 6 6)"
            ]
        },
        "step_7": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 6)\n6 / 1 = 6 (left: 6 6)\n6 - 6 = 0 (left: 0)",
                "1 * 1 = 1 (left: 1 5 6)\n5 * 1 = 5 (left: 5 6)\n5 / 6 = 0.8333 (left: 0.8333)",
                "1 * 1 = 1 (left: 1 5 6)\n6 / 1 = 6 (left: 6 6)\n6 - 6 = 0 (left: 0)"
            ],
            "values": [
                0.003,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 6.1",
                "2 <- 6.0"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 5 6)",
                "1 * 1 = 1 (left: 1 5 6)\n5 * 1 = 5 (left: 5 6)",
                "1 * 1 = 1 (left: 1 5 6)\n6 / 1 = 6 (left: 6 6)"
            ]
        },
        "step_8": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 6)\n5 * 1 = 5 (left: 5 6)",
                "1 * 1 = 1 (left: 1 5 6)\n5 * 1 = 5 (left: 5 6)\n10 + 2 = 12 (left: 12)",
                "1 * 1 = 1 (left: 1 5 6)\n6 / 1 = 6 (left: 6 6)\n6 / 6 = 1 (left: 1)"
            ],
            "values": [
                0.002,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 6.0",
                "1 <- INIT",
                "2 <- 4.1"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 5 6)\n6 / 1 = 6 (left: 6 6)",
                "",
                "1 * 1 = 1 (left: 1 5 6)\n3 / 9 = 0.3333333333333333 (left: 0.3333333333333333 27)"
            ]
        },
        "step_9": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 6)\n6 / 1 = 6 (left: 6 6)\n6 / 6 = 1 (left: 1)",
                "27 - 3 = 24 (left: 3 9 24)",
                "1 * 1 = 1 (left: 1 5 6)\n3 / 9 = 0.3333333333333333 (left: 0.3333333333333333 27)\n27 + 0.3333333333333333 = 27.333333333333332 (left: 27.333333333333332)"
            ],
            "values": [
                0.002,
                1.002,
                0.002
            ],
            "resampled": [
                "0 <- 8.0",
                "1 <- 3.2",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 5 6)\n5 * 1 = 5 (left: 5 6)",
                "1 * 1 = 1 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)",
                "1 * 1 = 1 (left: 1 5 6)"
            ]
        },
        "step_10": {
            "steps": [
                "1 * 1 = 1 (left: 1 5 6)\n5 * 1 = 5 (left: 5 6)\n5 - 6 = -1 (left: -1)",
                "1 * 1 = 1 (left: 1 5 6)\n1 + 5 = 6 (left: 6 6)\n6 * 6 = 36 (left: 36)",
                "1 * 1 = 1 (left: 1 5 6)\n5 - 1 = 4 (left: 4 6)"
            ],
            "values": [
                0.0,
                60.0,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.5100739999999999
    },
    "32": {
        "input": "1 1 11 13",
        "step_1": {
            "steps": [
                "9 - 5 = 4 (left: 3 4 9)",
                "11 * 1 = 11 (left: 1 11 13)",
                "13 - 1 = 12 (left: 1 11 12)"
            ],
            "values": [
                20.002,
                1.002,
                60.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.0",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "9 - 5 = 4 (left: 3 4 9)",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 13)",
                "9 - 5 = 4 (left: 3 4 9)\n4 / 3 = 1.33 (left: 1.33 9)",
                "11 + 1 = 12 (left: 1 12 13)"
            ],
            "values": [
                40.001,
                1.001,
                0.003
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- INIT",
                "2 <- 1.2"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 11 13)",
                "",
                "13 - 1 = 12 (left: 1 11 12)"
            ]
        },
        "step_3": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 13)\n11 / 2 = 5.5 (left: 5.5 13)",
                "11 + 1 = 12 (left: 1 12 13)",
                "13 - 1 = 12 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)"
            ],
            "values": [
                2.001,
                1.002,
                40.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 3.2",
                "2 <- 3.2"
            ],
            "resampled_steps": [
                "",
                "13 - 1 = 12 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)",
                "13 - 1 = 12 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)"
            ]
        },
        "step_4": {
            "steps": [
                "Input: 3 6 7 13",
                "13 - 1 = 12 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "13 - 1 = 12 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)"
            ],
            "values": [
                0.003,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 1.0",
                "2 <- 4.1"
            ],
            "resampled_steps": [
                "13 - 1 = 12 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)",
                "9 - 5 = 4 (left: 3 4 9)",
                "13 - 1 = 12 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)"
            ]
        },
        "step_5": {
            "steps": [
                "13 - 1 = 12 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)",
                "9 - 5 = 4 (left: 3 4 9)\n3 + 4 = 7 (left: 7 9)",
                "13 - 1 = 12 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (13 - 1) * (1 + 11) = 24"
            ],
            "values": [
                0.003,
                1.002,
                60.0
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 3.2",
                "2 <- 4.1"
            ],
            "resampled_steps": [
                "13 - 1 = 12 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "13 - 1 = 12 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)",
                "13 - 1 = 12 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)"
            ]
        },
        "step_6": {
            "steps": [
                "13 - 1 = 12 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (13 - 1) + (1 + 11) = 24",
                "13 - 1 = 12 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "13 - 1 = 12 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (13 - 1) + (1 + 11) = 24"
            ]
        },
        "results": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ],
        "cost": 0.5195749999999999
    },
    "33": {
        "input": "1 6 6 12",
        "step_1": {
            "steps": [
                "6 - 1 = 5 (left: 5 6 12)",
                "12 / 6 = 2 (left: 1 6 2)",
                "12 + 1 = 13 (left: 6 6 13)"
            ],
            "values": [
                2.001,
                3.0,
                2.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.2"
            ],
            "resampled_steps": [
                "",
                "",
                "12 + 1 = 13 (left: 6 6 13)"
            ]
        },
        "step_2": {
            "steps": [
                "12 - 1 = 11 (left: 6 6 11)",
                "12 - 6 = 6 (left: 1 6 6)",
                "12 + 1 = 13 (left: 6 6 13)\n6 - 6 = 0 (left: 0 13)"
            ],
            "values": [
                3.0,
                40.001,
                0.001
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "12 - 6 = 6 (left: 1 6 6)",
                "12 - 6 = 6 (left: 1 6 6)",
                "12 - 6 = 6 (left: 1 6 6)"
            ]
        },
        "step_3": {
            "steps": [
                "12 - 6 = 6 (left: 1 6 6)\n1 * 6 = 6 (left: 6 6)",
                "12 - 6 = 6 (left: 1 6 6)\nInput: 3 5 7",
                "12 - 6 = 6 (left: 1 6 6)\n6 / 1 = 6 (left: 6 6)"
            ],
            "values": [
                20.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                ""
            ]
        },
        "step_4": {
            "steps": [
                "6 + 1 = 7 (left: 6 7 12)",
                "12 / 6 = 2 (left: 1 2 6)",
                "12 / 1 = 12 (left: 6 6 12)"
            ],
            "values": [
                3.0,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 2.1",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "12 / 1 = 12 (left: 6 6 12)",
                "12 - 6 = 6 (left: 1 6 6)",
                "12 - 6 = 6 (left: 1 6 6)"
            ]
        },
        "step_5": {
            "steps": [
                "12 / 1 = 12 (left: 6 6 12)\n12 + 6 = 18 (left: 6 18)",
                "12 - 6 = 6 (left: 1 6 6)\n6 / 1 = 6 (left: 6 6)",
                "12 - 6 = 6 (left: 1 6 6)\n6 * 1 = 6 (left: 6 6 6)"
            ],
            "values": [
                20.002,
                20.002,
                0.003
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 2.1",
                "2 <- 4.2"
            ],
            "resampled_steps": [
                "12 / 1 = 12 (left: 6 6 12)",
                "12 - 6 = 6 (left: 1 6 6)",
                "12 / 1 = 12 (left: 6 6 12)"
            ]
        },
        "step_6": {
            "steps": [
                "12 / 1 = 12 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)",
                "12 - 6 = 6 (left: 1 6 6)\n1 * 6 = 6 (left: 6 6)",
                "12 / 1 = 12 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)"
            ],
            "values": [
                60.0,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 4.2",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "12 / 6 = 2 (left: 1 6 2)",
                "12 / 1 = 12 (left: 6 6 12)",
                "12 - 6 = 6 (left: 1 6 6)"
            ]
        },
        "step_7": {
            "steps": [
                "12 / 6 = 2 (left: 1 6 2)\n6 / 2 = 3 (left: 1 3)",
                "12 / 1 = 12 (left: 6 6 12)\n6 / 6 = 1 (left: 1 12)",
                "12 - 6 = 6 (left: 1 6 6)\n1 * 6 = 6 (left: 6 6 6)"
            ],
            "values": [
                40.001,
                0.002,
                22.0
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 6.2",
                "2 <- 7.0"
            ],
            "resampled_steps": [
                "12 - 6 = 6 (left: 1 6 6)\n1 * 6 = 6 (left: 6 6)",
                "12 / 1 = 12 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "12 / 6 = 2 (left: 1 6 2)\n6 / 2 = 3 (left: 1 3)"
            ]
        },
        "step_8": {
            "steps": [
                "12 - 6 = 6 (left: 1 6 6)\n1 * 6 = 6 (left: 6 6)\n6 - 6 = 0 (left: 0)",
                "12 / 1 = 12 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)",
                "12 / 6 = 2 (left: 1 6 2)\n6 / 2 = 3 (left: 1 3)\n1 * 3 = 3 (left: 3)"
            ],
            "values": [
                0.003,
                0.001,
                0.001
            ],
            "resampled": [
                "0 <- 5.0",
                "1 <- 4.2",
                "2 <- 6.0"
            ],
            "resampled_steps": [
                "12 / 1 = 12 (left: 6 6 12)\n12 + 6 = 18 (left: 6 18)",
                "12 / 1 = 12 (left: 6 6 12)",
                "12 / 1 = 12 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)"
            ]
        },
        "step_9": {
            "steps": [
                "12 / 1 = 12 (left: 6 6 12)\n12 + 6 = 18 (left: 6 18)\n18 - 6 = 12 (left: 12 6)",
                "12 / 1 = 12 (left: 6 6 12)\n12 - 6 = 6 (left: 6 6)",
                "12 / 1 = 12 (left: 6 6 12)\n12 / 6 = 2 (left: 2 12)\n10 - 6 = 4 (left: 4)"
            ],
            "values": [
                0.003,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 6.2",
                "1 <- 7.2",
                "2 <- 3.0"
            ],
            "resampled_steps": [
                "12 / 1 = 12 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)",
                "12 - 6 = 6 (left: 1 6 6)\n1 * 6 = 6 (left: 6 6 6)",
                "12 - 6 = 6 (left: 1 6 6)\n1 * 6 = 6 (left: 6 6)"
            ]
        },
        "step_10": {
            "steps": [
                "12 / 1 = 12 (left: 6 6 12)\n6 + 6 = 12 (left: 12 12)\n12 + 12 = 24",
                "12 - 6 = 6 (left: 1 6 6)\n1 * 6 = 6 (left: 6 6 6)\n6 * 6 = 36 (left: 6 36)",
                "12 - 6 = 6 (left: 1 6 6)\n1 * 6 = 6 (left: 6 6)\n6 / 6 = 1 (left: 1)"
            ],
            "values": [
                40.001,
                20.002,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.5345725
    },
    "34": {
        "input": "4 5 12 12",
        "step_1": {
            "steps": [
                "12 - 5 = 7 (left: 4 7 12)",
                "12 + 4 = 16 (left: 5 12 16)",
                "12 / 5 = 2 (left: 2 4 12)"
            ],
            "values": [
                3.0,
                3.0,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "12 - 5 = 7 (left: 4 7 12)",
                "5 * 12 = 60 (left: 4 60 12)",
                "4 + 5 = 9 (left: 9 12 12)"
            ],
            "values": [
                2.0,
                22.0,
                2.001
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "5 * 12 = 60 (left: 4 60 12)",
                "5 * 12 = 60 (left: 4 60 12)",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "5 * 12 = 60 (left: 4 60 12)\n12 + 4 = 16 (left: 60 16)",
                "5 * 12 = 60 (left: 4 60 12)\n10 - 5 = 5 (left: 5 20)",
                "12 - 4 = 8 (left: 5 8 12)"
            ],
            "values": [
                1.002,
                22.0,
                2.001
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 3.1"
            ],
            "resampled_steps": [
                "5 * 12 = 60 (left: 4 60 12)",
                "5 * 12 = 60 (left: 4 60 12)",
                "5 * 12 = 60 (left: 4 60 12)\n10 - 5 = 5 (left: 5 20)"
            ]
        },
        "step_4": {
            "steps": [
                "5 * 12 = 60 (left: 4 60 12)\n12 - 4 = 8 (left: 8 60)",
                "5 * 12 = 60 (left: 4 60 12)\n60 - 4 = 56 (left: 56 12)",
                "5 * 12 = 60 (left: 4 60 12)\n10 - 5 = 5 (left: 5 20)\n9 - 3 = 6 (left: 6 9)"
            ],
            "values": [
                1.001,
                0.001,
                0.002
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- INIT",
                "2 <- 4.0"
            ],
            "resampled_steps": [
                "12 - 5 = 7 (left: 4 7 12)",
                "",
                "5 * 12 = 60 (left: 4 60 12)\n12 - 4 = 8 (left: 8 60)"
            ]
        },
        "step_5": {
            "steps": [
                "12 - 5 = 7 (left: 4 7 12)\n7 + 4 = 11 (left: 11 12)",
                "4 + 5 = 9 (left: 9 12 12)",
                "5 * 12 = 60 (left: 4 60 12)\n12 - 4 = 8 (left: 8 60)\n60 / 8 = 7.5 (left: 7.5 8)"
            ],
            "values": [
                0.003,
                1.002,
                1.002
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- INIT",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "5 * 12 = 60 (left: 4 60 12)\n10 - 5 = 5 (left: 5 20)",
                "",
                "5 * 12 = 60 (left: 4 60 12)"
            ]
        },
        "step_6": {
            "steps": [
                "5 * 12 = 60 (left: 4 60 12)\n10 - 5 = 5 (left: 5 20)\n20 - 5 = 15 (left: 15 20)",
                "12 / 5 = 2.4 (left: 4 12 12)",
                "5 * 12 = 60 (left: 4 60 12)\n60 - 12 = 48 (left: 4 48)"
            ],
            "values": [
                0.003,
                41.0,
                0.003
            ],
            "resampled": [
                "0 <- 6.1",
                "1 <- 6.1",
                "2 <- 6.1"
            ],
            "resampled_steps": [
                "12 / 5 = 2.4 (left: 4 12 12)",
                "12 / 5 = 2.4 (left: 4 12 12)",
                "12 / 5 = 2.4 (left: 4 12 12)"
            ]
        },
        "step_7": {
            "steps": [
                "12 / 5 = 2.4 (left: 4 12 12)\n12 / 4 = 3 (left: 3 12)",
                "12 / 5 = 2.4 (left: 4 12 12)\n12 - 4 = 8 (left: 8 12)",
                "12 / 5 = 2.4 (left: 4 12 12)\n12 - 3 = 9 (left: 9 12)"
            ],
            "values": [
                20.002,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 2.1",
                "2 <- 6.1"
            ],
            "resampled_steps": [
                "4 + 5 = 9 (left: 9 12 12)",
                "5 * 12 = 60 (left: 4 60 12)",
                "12 / 5 = 2.4 (left: 4 12 12)"
            ]
        },
        "step_8": {
            "steps": [
                "4 + 5 = 9 (left: 9 12 12)\n12 / 12 = 1 (left: 1)",
                "5 * 12 = 60 (left: 4 60 12)\nPossible next steps:",
                "12 / 5 = 2.4 (left: 4 12 12)\n12 - 4 = 8 (left: 8 12)"
            ],
            "values": [
                0.002,
                0.003,
                1.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 8.2",
                "2 <- 6.1"
            ],
            "resampled_steps": [
                "",
                "12 / 5 = 2.4 (left: 4 12 12)\n12 - 4 = 8 (left: 8 12)",
                "12 / 5 = 2.4 (left: 4 12 12)"
            ]
        },
        "step_9": {
            "steps": [
                "5 * 4 = 20 (left: 20 12 12)",
                "12 / 5 = 2.4 (left: 4 12 12)\n12 - 4 = 8 (left: 8 12)\n8 - 12 = -4 (left: -4)",
                "12 / 5 = 2.4 (left: 4 12 12)\n12 - 4 = 8 (left: 8 12 12)"
            ],
            "values": [
                1.002,
                0.001,
                2.001
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 6.1",
                "2 <- 6.1"
            ],
            "resampled_steps": [
                "5 * 12 = 60 (left: 4 60 12)\n12 + 4 = 16 (left: 60 16)",
                "12 / 5 = 2.4 (left: 4 12 12)",
                "12 / 5 = 2.4 (left: 4 12 12)"
            ]
        },
        "step_10": {
            "steps": [
                "5 * 12 = 60 (left: 4 60 12)\n12 + 4 = 16 (left: 60 16)\n60 + 16 = 76 (left: 76)",
                "12 / 5 = 2.4 (left: 4 12 12)\n12 - 4 = 8 (left: 8 12)",
                "12 / 5 = 2.4 (left: 4 12 12)\n12 / 4 = 3 (left: 3 12 12)"
            ],
            "values": [
                0.002,
                0.003,
                60.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.5518335
    },
    "35": {
        "input": "4 6 13 13",
        "step_1": {
            "steps": [
                "4 + 6 = 10 (left: 10 13 13)",
                "6 / 4 = 1.5 (left: 1.5 13 13)",
                "6 - 4 = 2 (left: 2 13 13)"
            ],
            "values": [
                0.003,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "9 / 5 = 1.8 (left: 3 7 1.8)",
                "13 * 13 = 169 (left: 4 6 169)",
                "6 - 4 = 2 (left: 2 13 13)"
            ],
            "values": [
                3.0,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "13 / 4 = 3.25 (left: 6 13 13)",
                "13 - 4 = 9 (left: 6 9 13)",
                "6 / 4 = 1.5 (left: 1.5 13 13)"
            ],
            "values": [
                1.002,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 3.0",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "13 / 4 = 3.25 (left: 6 13 13)",
                ""
            ]
        },
        "step_4": {
            "steps": [
                "4 + 6 = 10 (left: 10 13 13)",
                "13 / 4 = 3.25 (left: 6 13 13)\n3 * 9 = 27 (left: 27 12)",
                "4 + 6 = 10 (left: 10 13 13)"
            ],
            "values": [
                0.003,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "9 / 5 = 1.8 (left: 3 7 1.8)",
                "",
                ""
            ]
        },
        "step_5": {
            "steps": [
                "9 / 5 = 1.8 (left: 3 7 1.8)\n7 / 3 = 2.3333333333333335 (left: 2.3333333333333335 1.8)",
                "13 + 4 = 17 (left: 6 17 13)",
                "13 - 6 = 7 (left: 4 7 13)"
            ],
            "values": [
                3.0,
                2.001,
                41.0
            ],
            "resampled": [
                "0 <- 5.2",
                "1 <- 5.2",
                "2 <- 5.2"
            ],
            "resampled_steps": [
                "13 - 6 = 7 (left: 4 7 13)",
                "13 - 6 = 7 (left: 4 7 13)",
                "13 - 6 = 7 (left: 4 7 13)"
            ]
        },
        "step_6": {
            "steps": [
                "13 - 6 = 7 (left: 4 7 13)\n10 / 5 = 2 (left: 3 5 2)",
                "13 - 6 = 7 (left: 4 7 13)\n13 - 4 = 9 (left: 9 13)",
                "13 - 6 = 7 (left: 4 7 13)\n7 + 4 = 11 (left: 11 13)"
            ],
            "values": [
                3.0,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 6.2",
                "1 <- 6.2",
                "2 <- 5.2"
            ],
            "resampled_steps": [
                "13 - 6 = 7 (left: 4 7 13)\n7 + 4 = 11 (left: 11 13)",
                "13 - 6 = 7 (left: 4 7 13)\n7 + 4 = 11 (left: 11 13)",
                "13 - 6 = 7 (left: 4 7 13)"
            ]
        },
        "step_7": {
            "steps": [
                "13 - 6 = 7 (left: 4 7 13)\n7 + 4 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "13 - 6 = 7 (left: 4 7 13)\n7 + 4 = 11 (left: 11 13)\n11 / 13 = 0.84615384615385 (left: 0.84615384615385)",
                "13 - 6 = 7 (left: 4 7 13)\n13 - 4 = 9 (left: 4 9)"
            ],
            "values": [
                60.0,
                0.0,
                20.002
            ],
            "resampled": [
                "0 <- 6.0",
                "1 <- 6.2",
                "2 <- 6.2"
            ],
            "resampled_steps": [
                "13 - 6 = 7 (left: 4 7 13)\n10 / 5 = 2 (left: 3 5 2)",
                "13 - 6 = 7 (left: 4 7 13)\n7 + 4 = 11 (left: 11 13)",
                "13 - 6 = 7 (left: 4 7 13)\n7 + 4 = 11 (left: 11 13)"
            ]
        },
        "step_8": {
            "steps": [
                "13 - 6 = 7 (left: 4 7 13)\n10 / 5 = 2 (left: 3 5 2)\n2 + 3 = 5 (left: 5 2)",
                "13 - 6 = 7 (left: 4 7 13)\n7 + 4 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)",
                "13 - 6 = 7 (left: 4 7 13)\n7 + 4 = 11 (left: 11 13)\n11 * 13 = 143 (left: 143)"
            ],
            "values": [
                40.001,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 8.0",
                "1 <- 5.2",
                "2 <- 8.1"
            ],
            "resampled_steps": [
                "13 - 6 = 7 (left: 4 7 13)\n10 / 5 = 2 (left: 3 5 2)\n2 + 3 = 5 (left: 5 2)",
                "13 - 6 = 7 (left: 4 7 13)",
                "13 - 6 = 7 (left: 4 7 13)\n7 + 4 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)"
            ]
        },
        "step_9": {
            "steps": [
                "13 - 6 = 7 (left: 4 7 13)\n10 / 5 = 2 (left: 3 5 2)\n2 + 3 = 5 (left: 5 2)\n5 + 2 = 7 (left: 7)",
                "13 - 6 = 7 (left: 4 7 13)\n13 - 4 = 9 (left: 9 7)",
                "13 - 6 = 7 (left: 4 7 13)\n7 + 4 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\nAnswer: ((13 - 6) + 4) + 13 = 24"
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ],
        "cost": 0.5687295
    },
    "36": {
        "input": "12 12 12 12",
        "step_1": {
            "steps": [
                "12 * 12 = 144 (left: 12 12 144)",
                "12 - 12 = 0 (left: 0 12 12)",
                "12 - 12 = 0 (left: 0 12 12)"
            ],
            "values": [
                21.001,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 1.0",
                "2 <- 1.1"
            ],
            "resampled_steps": [
                "12 - 12 = 0 (left: 0 12 12)",
                "12 * 12 = 144 (left: 12 12 144)",
                "12 - 12 = 0 (left: 0 12 12)"
            ]
        },
        "step_2": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12)\n3 + 3 = 6 (left: 3 6 3)",
                "12 * 12 = 144 (left: 12 12 144)\n12 * 12 = 144 (left: 12 144)",
                "12 - 12 = 0 (left: 0 12 12)\n0 - 12 = -12 (left: -12 12)"
            ],
            "values": [
                2.001,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 1.2",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "12 - 12 = 0 (left: 0 12 12)",
                "12 - 12 = 0 (left: 0 12 12)",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12)\n12 / 0 = undefined (left: 0 12)",
                "12 - 12 = 0 (left: 0 12 12)\n0 * 12 = 0 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12)"
            ],
            "values": [
                60.0,
                40.001,
                60.0
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 2.0",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "12 - 12 = 0 (left: 0 12 12)\n0 * 12 = 0 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12)\n3 + 3 = 6 (left: 3 6 3)",
                ""
            ]
        },
        "step_4": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12)\n0 * 12 = 0 (left: 12 12)\n12 + 12 = 24",
                "12 - 12 = 0 (left: 0 12 12)\n3 + 3 = 6 (left: 3 6 3)\n3 + 6 = 9 (left: 3 3 9)",
                "12 * 12 = 144 (left: 12 12 144)"
            ],
            "values": [
                40.001,
                22.0,
                20.002
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 3.1",
                "2 <- 3.2"
            ],
            "resampled_steps": [
                "12 - 12 = 0 (left: 0 12 12)\n12 / 0 = undefined (left: 0 12)",
                "12 - 12 = 0 (left: 0 12 12)\n0 * 12 = 0 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12)"
            ]
        },
        "step_5": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12)\n12 / 0 = undefined (left: 0 12)\n12 * 12 = 144 (left: 144)",
                "12 - 12 = 0 (left: 0 12 12)\n0 * 12 = 0 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "12 - 12 = 0 (left: 0 12 12)\n12 / 12 = 1 (left: 1 12)"
            ],
            "values": [
                0.003,
                0.002,
                3.0
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 4.1",
                "2 <- 3.0"
            ],
            "resampled_steps": [
                "12 - 12 = 0 (left: 0 12 12)",
                "12 - 12 = 0 (left: 0 12 12)\n3 + 3 = 6 (left: 3 6 3)\n3 + 6 = 9 (left: 3 3 9)",
                "12 - 12 = 0 (left: 0 12 12)\n12 / 0 = undefined (left: 0 12)"
            ]
        },
        "step_6": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12)\nPossible next steps:",
                "12 - 12 = 0 (left: 0 12 12)\n3 + 3 = 6 (left: 3 6 3)\n3 + 6 = 9 (left: 3 3 9)\n3 + 3 = 6 (left: 6 9)",
                "12 - 12 = 0 (left: 0 12 12)\n12 / 0 = undefined (left: 0 12)\n12 / 0 is undefined as division by zero is not allowed."
            ],
            "values": [
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 3.2",
                "2 <- 4.1"
            ],
            "resampled_steps": [
                "12 - 12 = 0 (left: 0 12 12)",
                "12 - 12 = 0 (left: 0 12 12)",
                "12 - 12 = 0 (left: 0 12 12)\n3 + 3 = 6 (left: 3 6 3)\n3 + 6 = 9 (left: 3 3 9)"
            ]
        },
        "step_7": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12)\n12 * 12 = 144 (left: 144)",
                "12 - 12 = 0 (left: 0 12 12)\n12 / 0 = undefined",
                "12 - 12 = 0 (left: 0 12 12)\n3 + 3 = 6 (left: 3 6 3)\n3 + 6 = 9 (left: 3 3 9)\n10 / 5 = 2 (left: 2 15)"
            ],
            "values": [
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 4.0",
                "2 <- 4.2"
            ],
            "resampled_steps": [
                "12 - 12 = 0 (left: 0 12 12)",
                "12 - 12 = 0 (left: 0 12 12)\n0 * 12 = 0 (left: 12 12)\n12 + 12 = 24",
                "12 * 12 = 144 (left: 12 12 144)"
            ]
        },
        "step_8": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12)\n15 - 5 = 10 (left: 5 10 10)",
                "12 - 12 = 0 (left: 0 12 12)\n0 * 12 = 0 (left: 12 12)\n12 + 12 = 24\n24 * 12 = 288 (left: 288)",
                "12 * 12 = 144 (left: 12 12 144)\n12 * 12 = 144 (left: 12 144)"
            ],
            "values": [
                1.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 3.2",
                "2 <- 1.1"
            ],
            "resampled_steps": [
                "12 - 12 = 0 (left: 0 12 12)\n12 / 0 = undefined (left: 0 12)",
                "12 - 12 = 0 (left: 0 12 12)",
                "12 - 12 = 0 (left: 0 12 12)"
            ]
        },
        "step_9": {
            "steps": [
                "12 - 12 = 0 (left: 0 12 12)\n12 / 0 = undefined (left: 0 12)\n12 - 12 = 0 (left: 0)",
                "12 - 12 = 0 (left: 0 12 12)\n12 + 0 = 12 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12)\n12 - 0 = 12 (left: 12 12)"
            ],
            "values": [
                0.003,
                40.001,
                40.001
            ],
            "resampled": [
                "0 <- 4.2",
                "1 <- 1.0",
                "2 <- 9.1"
            ],
            "resampled_steps": [
                "12 * 12 = 144 (left: 12 12 144)",
                "12 * 12 = 144 (left: 12 12 144)",
                "12 - 12 = 0 (left: 0 12 12)\n12 + 0 = 12 (left: 12 12)"
            ]
        },
        "step_10": {
            "steps": [
                "12 * 12 = 144 (left: 12 12 144)\n1716 / (-132) = -13 (left: -13 1716 144)",
                "12 * 12 = 144 (left: 12 12 144)\n144 / 12 = 12 (left: 12 12)",
                "12 - 12 = 0 (left: 0 12 12)\n12 + 0 = 12 (left: 12 12)\n12 + 12 = 24"
            ],
            "values": [
                2.001,
                40.001,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.584607
    },
    "37": {
        "input": "2 11 11 12",
        "step_1": {
            "steps": [
                "12 - 11 = 1 (left: 2 11 1)",
                "2 * 11 = 22 (left: 11 12 22)",
                "2 * 11 = 22 (left: 11 12 22)"
            ],
            "values": [
                2.0,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "12 - 2 = 10 (left: 11 11 10)",
                "2 + 11 = 13 (left: 11 12 13)",
                "11 - 2 = 9 (left: 9 11 12)"
            ],
            "values": [
                0.003,
                40.001,
                1.001
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "2 + 11 = 13 (left: 11 12 13)",
                "",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "2 + 11 = 13 (left: 11 12 13)\n13 - 11 = 2 (left: 2 13)",
                "11 - 2 = 9 (left: 9 11 12)",
                "12 - 11 = 1 (left: 1 11 12)"
            ],
            "values": [
                0.003,
                1.002,
                20.002
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- INIT",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "12 - 11 = 1 (left: 1 11 12)",
                "",
                "2 + 11 = 13 (left: 11 12 13)"
            ]
        },
        "step_4": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12)\n12 - 1 = 11 (left: 1 11 12)",
                "12 / 2 = 6 (left: 6 11 12)",
                "2 + 11 = 13 (left: 11 12 13)\n11 + 12 = 23 (left: 13)"
            ],
            "values": [
                1.002,
                0.003,
                0.001
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 3.2",
                "2 <- 3.2"
            ],
            "resampled_steps": [
                "2 + 11 = 13 (left: 11 12 13)",
                "12 - 11 = 1 (left: 1 11 12)",
                "12 - 11 = 1 (left: 1 11 12)"
            ]
        },
        "step_5": {
            "steps": [
                "2 + 11 = 13 (left: 11 12 13)\n13 - 12 = 1 (left: 11 1)",
                "12 - 11 = 1 (left: 1 11 12)\n1 * 11 = 11 (left: 11 12)",
                "12 - 11 = 1 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)"
            ],
            "values": [
                0.001,
                0.003,
                20.002
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 3.2",
                "2 <- 5.2"
            ],
            "resampled_steps": [
                "2 + 11 = 13 (left: 11 12 13)",
                "12 - 11 = 1 (left: 1 11 12)",
                "12 - 11 = 1 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)"
            ]
        },
        "step_6": {
            "steps": [
                "2 + 11 = 13 (left: 11 12 13)\n11 + 12 = 23 (left: 13)",
                "12 - 11 = 1 (left: 1 11 12)\n11 + 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 1 11 12)\n1 + 11 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)"
            ],
            "values": [
                0.002,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 6.1",
                "1 <- 3.2",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "12 - 11 = 1 (left: 1 11 12)\n11 + 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 1 11 12)",
                "2 + 11 = 13 (left: 11 12 13)"
            ]
        },
        "step_7": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12)\n11 + 1 = 12 (left: 12 12)\n12 + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12)\n11 - 1 = 10 (left: 10 12)",
                "2 + 11 = 13 (left: 11 12 13)\nInput: 5 9 16"
            ],
            "values": [
                0.003,
                0.001,
                0.003
            ],
            "resampled": [
                "0 <- 6.1",
                "1 <- 2.1",
                "2 <- 6.1"
            ],
            "resampled_steps": [
                "12 - 11 = 1 (left: 1 11 12)\n11 + 1 = 12 (left: 12 12)",
                "2 + 11 = 13 (left: 11 12 13)",
                "12 - 11 = 1 (left: 1 11 12)\n11 + 1 = 12 (left: 12 12)"
            ]
        },
        "step_8": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12)\n11 + 1 = 12 (left: 12 12)\n12 + 12 = 24",
                "2 + 11 = 13 (left: 11 12 13)\n3 + 6 = 9 (left: 9 12)",
                "12 - 11 = 1 (left: 1 11 12)\n11 + 1 = 12 (left: 12 12)\n12 + 12 = 24"
            ],
            "values": [
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 2.1",
                "2 <- 6.1"
            ],
            "resampled_steps": [
                "12 - 11 = 1 (left: 1 11 12)",
                "2 + 11 = 13 (left: 11 12 13)",
                "12 - 11 = 1 (left: 1 11 12)\n11 + 1 = 12 (left: 12 12)"
            ]
        },
        "step_9": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12)\n12 / 1 = 12 (left: 11 12)",
                "2 + 11 = 13 (left: 11 12 13)\n13 - 11 = 2 (left: 12)",
                "12 - 11 = 1 (left: 1 11 12)\n11 + 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)"
            ],
            "values": [
                0.003,
                0.001,
                60.0
            ],
            "resampled": [
                "0 <- 9.2",
                "1 <- 6.1",
                "2 <- 9.2"
            ],
            "resampled_steps": [
                "12 - 11 = 1 (left: 1 11 12)\n11 + 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)",
                "12 - 11 = 1 (left: 1 11 12)\n11 + 1 = 12 (left: 12 12)",
                "12 - 11 = 1 (left: 1 11 12)\n11 + 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)"
            ]
        },
        "step_10": {
            "steps": [
                "12 - 11 = 1 (left: 1 11 12)\n11 + 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: ((2 + 11) + (11 - 12)) + 12 = 24",
                "12 - 11 = 1 (left: 1 11 12)\n11 + 1 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)",
                "12 - 11 = 1 (left: 1 11 12)\n11 + 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24)\nAnswer: (2 + (11 - 11)) + 12 = 24"
            ],
            "values": [
                40.001,
                0.002,
                20.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.6016269999999999
    },
    "38": {
        "input": "4 4 4 6",
        "step_1": {
            "steps": [
                "6 - 4 = 2 (left: 4 4 2)",
                "6 - 4 = 2 (left: 4 4 2)",
                "4 + 4 = 8 (left: 8 4 6)"
            ],
            "values": [
                3.0,
                2.001,
                41.0
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "4 + 4 = 8 (left: 8 4 6)",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "4 + 4 = 8 (left: 8 4 6)\n6 * 8 = 48 (left: 48)",
                "4 - 4 = 0 (left: 0 4 6)",
                "4 * 4 = 16 (left: 4 6 16)"
            ],
            "values": [
                0.003,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 2.2",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "4 * 4 = 16 (left: 4 6 16)",
                "4 * 4 = 16 (left: 4 6 16)",
                "4 * 4 = 16 (left: 4 6 16)"
            ]
        },
        "step_3": {
            "steps": [
                "4 * 4 = 16 (left: 4 6 16)\n16 - 4 = 12 (left: 6 12)",
                "4 * 4 = 16 (left: 4 6 16)\n16 - 4 = 12 (left: 4 12)",
                "4 * 4 = 16 (left: 4 6 16)\nInput: 1.5 24 10"
            ],
            "values": [
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 2.2",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "6 - 4 = 2 (left: 4 4 2)",
                "4 * 4 = 16 (left: 4 6 16)",
                "4 * 4 = 16 (left: 4 6 16)"
            ]
        },
        "step_4": {
            "steps": [
                "6 - 4 = 2 (left: 4 4 2)\n2 + 4 = 6 (left: 4 6)",
                "4 * 4 = 16 (left: 4 6 16)\n16 / 4 = 4 (left: 6 4)",
                "4 * 4 = 16 (left: 4 6 16)\n6 / 4 = 1.5 (left: 1.5 16)"
            ],
            "values": [
                60.0,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 4.0",
                "1 <- 4.1",
                "2 <- 4.2"
            ],
            "resampled_steps": [
                "6 - 4 = 2 (left: 4 4 2)\n2 + 4 = 6 (left: 4 6)",
                "4 * 4 = 16 (left: 4 6 16)\n16 / 4 = 4 (left: 6 4)",
                "4 * 4 = 16 (left: 4 6 16)\n6 / 4 = 1.5 (left: 1.5 16)"
            ]
        },
        "step_5": {
            "steps": [
                "6 - 4 = 2 (left: 4 4 2)\n2 + 4 = 6 (left: 4 6)\n4 + 6 = 10 (left: 10)",
                "4 * 4 = 16 (left: 4 6 16)\n16 / 4 = 4 (left: 6 4)\n6 + 4 = 10 (left: 10)",
                "4 * 4 = 16 (left: 4 6 16)\n6 / 4 = 1.5 (left: 1.5 16)\n16 - 1.5 = 14.5 (left: 14.5)"
            ],
            "values": [
                0.003,
                0.001,
                0.003
            ],
            "resampled": [
                "0 <- 4.1",
                "1 <- 4.1",
                "2 <- 1.2"
            ],
            "resampled_steps": [
                "4 * 4 = 16 (left: 4 6 16)\n16 / 4 = 4 (left: 6 4)",
                "4 * 4 = 16 (left: 4 6 16)\n16 / 4 = 4 (left: 6 4)",
                "4 + 4 = 8 (left: 8 4 6)"
            ]
        },
        "step_6": {
            "steps": [
                "4 * 4 = 16 (left: 4 6 16)\n16 / 4 = 4 (left: 6 4)\n6 * 4 = 24 (left: 24)",
                "4 * 4 = 16 (left: 4 6 16)\n16 / 4 = 4 (left: 6 4)\n6 * 4 = 24 (left: 24)",
                "4 + 4 = 8 (left: 8 4 6)\n6 - 4 = 2 (left: 2)"
            ],
            "values": [
                40.0,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 6.1",
                "1 <- 4.0",
                "2 <- 1.2"
            ],
            "resampled_steps": [
                "4 * 4 = 16 (left: 4 6 16)\n16 / 4 = 4 (left: 6 4)\n6 * 4 = 24 (left: 24)",
                "6 - 4 = 2 (left: 4 4 2)\n2 + 4 = 6 (left: 4 6)",
                "4 + 4 = 8 (left: 8 4 6)"
            ]
        },
        "step_7": {
            "steps": [
                "4 * 4 = 16 (left: 4 6 16)\n16 / 4 = 4 (left: 6 4)\n6 * 4 = 24 (left: 24)\nAnswer: (4 * 4) * (6 / 4) = 24",
                "6 - 4 = 2 (left: 4 4 2)\n2 + 4 = 6 (left: 4 6)\n6 / 4 = 1.5 (left: 1.5)",
                "4 + 4 = 8 (left: 8 4 6)\n8 - 4 = 4 (left: 6 4)"
            ]
        },
        "results": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.611622
    },
    "39": {
        "input": "1 1 1 11",
        "step_1": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 11)",
                "11 - 1 = 10 (left: 1 1 10)",
                "1 * 1 = 1 (left: 1 1 11)"
            ],
            "values": [
                1.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 1 2 11)",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 2 1 11)",
                "11 - 1 = 10 (left: 1 1 10)"
            ],
            "values": [
                60.0,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- INIT",
                "2 <- 2.0"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)",
                "",
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)"
            ]
        },
        "step_3": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)\nPossible next steps:",
                "1 + 1 = 2 (left: 1 2 11)",
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)\n1 + 10 = 11 (left: 11)"
            ],
            "values": [
                0.002,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 3.1",
                "2 <- 2.0"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 1 2 11)",
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)"
            ]
        },
        "step_4": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "1 + 1 = 2 (left: 1 2 11)\n6 / 4 = 1.5 (left: 1.5 10)",
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)"
            ],
            "values": [
                0.001,
                0.002,
                0.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 2.0"
            ],
            "resampled_steps": [
                "",
                "",
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)"
            ]
        },
        "step_5": {
            "steps": [
                "11 - 1 = 10 (left: 1 1 10)",
                "11 / 1 = 11 (left: 1 1 11)",
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)\n10 * 1 = 10 (left: 10)"
            ],
            "values": [
                2.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- INIT",
                "2 <- 2.0"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)",
                "",
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)"
            ]
        },
        "step_6": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 1 11)",
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)"
            ],
            "values": [
                0.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 2.0"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)"
            ]
        },
        "step_7": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)\n1 + 10 = 11 (left: 10)",
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)\n10 / 1 = 10 (left: 10)"
            ],
            "values": [
                0.002,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 2.0",
                "2 <- 2.0"
            ],
            "resampled_steps": [
                "",
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)"
            ]
        },
        "step_8": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 11)",
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)\n1 + 10 = 11 (left: 11)"
            ],
            "values": [
                1.002,
                0.002,
                0.001
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 2.0"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)"
            ]
        },
        "step_9": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)\n1 * 10 = 10 (left: 10)",
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)\n1 + 10 = 11 (left: 11)"
            ],
            "values": [
                0.003,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 2.0"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)",
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)"
            ]
        },
        "step_10": {
            "steps": [
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)\n1 + 10 = 11 (left: 11)",
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "1 + 1 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 1 10)\n10 / 1 = 10 (left: 10)"
            ],
            "values": [
                0.001,
                0.003,
                0.001
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.625642
    },
    "40": {
        "input": "1 1 11 12",
        "step_1": {
            "steps": [
                "5 * 3 = 15 (left: 10 15 15)",
                "1 * 1 = 1 (left: 1 11 12)",
                "1 + 11 = 12 (left: 12 12 12)"
            ],
            "values": [
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "9 - 5 = 4 (left: 3 4 7)",
                "1 + 1 = 2 (left: 2 11 12)",
                "1 * 1 = 1 (left: 1 11 12)"
            ],
            "values": [
                3.0,
                20.002,
                20.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 2.2",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "",
                "1 * 1 = 1 (left: 1 11 12)",
                "1 + 1 = 2 (left: 2 11 12)"
            ]
        },
        "step_3": {
            "steps": [
                "11 / 1 = 11 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 11 12)\n5 * 5 = 25 (left: 5 5 25)",
                "1 + 1 = 2 (left: 2 11 12)\nInput: 2 13 6"
            ],
            "values": [
                0.003,
                21.0,
                0.003
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 3.1",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 11 12)\n5 * 5 = 25 (left: 5 5 25)",
                "1 * 1 = 1 (left: 1 11 12)\n5 * 5 = 25 (left: 5 5 25)",
                ""
            ]
        },
        "step_4": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 12)\n5 * 5 = 25 (left: 5 5 25)\n25 / 5 = 5 (left: 5 5)",
                "1 * 1 = 1 (left: 1 11 12)\n5 * 5 = 25 (left: 5 5 25)\n9 - 3 = 6 (left: 6 9 27)",
                "10 - 3 = 7 (left: 3 7 10)"
            ],
            "values": [
                0.003,
                21.001,
                1.002
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 3.1",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 11 12)",
                "1 * 1 = 1 (left: 1 11 12)\n5 * 5 = 25 (left: 5 5 25)",
                "1 * 1 = 1 (left: 1 11 12)"
            ]
        },
        "step_5": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 12)\n11 / 1 = 11 (left: 11 12)",
                "1 * 1 = 1 (left: 1 11 12)\n5 * 5 = 25 (left: 5 5 25)\n5 + 5 = 10 (left: 10 25)",
                "1 * 1 = 1 (left: 1 11 12)\n12 * 1 = 12 (left: 12)"
            ],
            "values": [
                0.003,
                0.003,
                0.001
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 2.2",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "1 + 1 = 2 (left: 2 11 12)",
                "1 * 1 = 1 (left: 1 11 12)",
                "1 + 1 = 2 (left: 2 11 12)"
            ]
        },
        "step_6": {
            "steps": [
                "1 + 1 = 2 (left: 2 11 12)\n2 * 11 = 22 (left: 12 22)",
                "1 * 1 = 1 (left: 1 11 12)\n4 - 10 = -6 (left: -6 20)",
                "1 + 1 = 2 (left: 2 11 12)\n2 + 11 = 13 (left: 13 12)"
            ],
            "values": [
                0.003,
                0.001,
                0.003
            ],
            "resampled": [
                "0 <- 4.1",
                "1 <- 3.1",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 11 12)\n5 * 5 = 25 (left: 5 5 25)\n9 - 3 = 6 (left: 6 9 27)",
                "1 * 1 = 1 (left: 1 11 12)\n5 * 5 = 25 (left: 5 5 25)",
                ""
            ]
        },
        "step_7": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 12)\n5 * 5 = 25 (left: 5 5 25)\n9 - 3 = 6 (left: 6 9 27)\n9 - 6 = 3 (left: 3 27)",
                "1 * 1 = 1 (left: 1 11 12)\n5 * 5 = 25 (left: 5 5 25)\n3 + 9 = 12 (left: 6 12)",
                "12 - 1 = 11 (left: 1 11 11)"
            ],
            "values": [
                40.001,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 7.0",
                "1 <- 7.0",
                "2 <- 4.1"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 11 12)\n5 * 5 = 25 (left: 5 5 25)\n9 - 3 = 6 (left: 6 9 27)\n9 - 6 = 3 (left: 3 27)",
                "1 * 1 = 1 (left: 1 11 12)\n5 * 5 = 25 (left: 5 5 25)\n9 - 3 = 6 (left: 6 9 27)\n9 - 6 = 3 (left: 3 27)",
                "1 * 1 = 1 (left: 1 11 12)\n5 * 5 = 25 (left: 5 5 25)\n9 - 3 = 6 (left: 6 9 27)"
            ]
        },
        "step_8": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 12)\n5 * 5 = 25 (left: 5 5 25)\n9 - 3 = 6 (left: 6 9 27)\n9 - 6 = 3 (left: 3 27)\n3 * 27 = 81 (left: 81)",
                "1 * 1 = 1 (left: 1 11 12)\n5 * 5 = 25 (left: 5 5 25)\n9 - 3 = 6 (left: 6 9 27)\n9 - 6 = 3 (left: 3 27)\n27 / 3 = 9 (left: 9)",
                "1 * 1 = 1 (left: 1 11 12)\n5 * 5 = 25 (left: 5 5 25)\n9 - 3 = 6 (left: 6 9 27)\n9 * 3 = 27 (left: 6 27)"
            ],
            "values": [
                0.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 7.0",
                "2 <- 3.1"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 11 12)\n5 * 5 = 25 (left: 5 5 25)",
                "1 * 1 = 1 (left: 1 11 12)\n5 * 5 = 25 (left: 5 5 25)\n9 - 3 = 6 (left: 6 9 27)\n9 - 6 = 3 (left: 3 27)",
                "1 * 1 = 1 (left: 1 11 12)\n5 * 5 = 25 (left: 5 5 25)"
            ]
        },
        "step_9": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 12)\n5 * 5 = 25 (left: 5 5 25)\n25 / 5 = 5 (left: 5 5)",
                "1 * 1 = 1 (left: 1 11 12)\n5 * 5 = 25 (left: 5 5 25)\n9 - 3 = 6 (left: 6 9 27)\n9 - 6 = 3 (left: 3 27)\n3 + 27 = 30 (left: 9 30)",
                "1 * 1 = 1 (left: 1 11 12)\n5 * 5 = 25 (left: 5 5 25)\n9 + 3 = 12 (left: 12 27)"
            ],
            "values": [
                1.001,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 7.0",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "1 * 1 = 1 (left: 1 11 12)\n5 * 5 = 25 (left: 5 5 25)",
                "1 * 1 = 1 (left: 1 11 12)\n5 * 5 = 25 (left: 5 5 25)\n9 - 3 = 6 (left: 6 9 27)\n9 - 6 = 3 (left: 3 27)",
                "1 * 1 = 1 (left: 1 11 12)"
            ]
        },
        "step_10": {
            "steps": [
                "1 * 1 = 1 (left: 1 11 12)\n5 * 5 = 25 (left: 5 5 25)\nPossible next steps:",
                "1 * 1 = 1 (left: 1 11 12)\n5 * 5 = 25 (left: 5 5 25)\n9 - 3 = 6 (left: 6 9 27)\n9 - 6 = 3 (left: 3 27)\n3 * 27 = 81 (left: 81)",
                "1 * 1 = 1 (left: 1 11 12)\n11 / 1 = 11 (left: 11 12)"
            ],
            "values": [
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.6440405
    },
    "41": {
        "input": "2 7 7 12",
        "step_1": {
            "steps": [
                "2 + 7 = 9 (left: 7 9 12)",
                "7 - 2 = 5 (left: 5 7 12)",
                "12 - 2 = 10 (left: 7 10 12)"
            ],
            "values": [
                3.0,
                22.0,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "2 * 7 = 14 (left: 7 12 14)",
                "12 - 7 = 5 (left: 2 5 7)",
                "12 - 2 = 10 (left: 7 7 10)"
            ],
            "values": [
                2.001,
                3.0,
                22.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "12 - 2 = 10 (left: 7 7 10)",
                "",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "12 - 2 = 10 (left: 7 7 10)\n7 - 7 = 0 (left: 0 10)",
                "12 + 2 = 14 (left: 7 7 14)",
                "12 - 7 = 5 (left: 2 5 7)"
            ],
            "values": [
                20.0,
                0.003,
                3.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- INIT",
                "2 <- 3.0"
            ],
            "resampled_steps": [
                "12 - 2 = 10 (left: 7 7 10)",
                "",
                "12 - 2 = 10 (left: 7 7 10)\n7 - 7 = 0 (left: 0 10)"
            ]
        },
        "step_4": {
            "steps": [
                "12 - 2 = 10 (left: 7 7 10)\n7 - 7 = 0 (left: 0 10)",
                "12 - 2 = 10 (left: 7 10 12)",
                "12 - 2 = 10 (left: 7 7 10)\n7 - 7 = 0 (left: 0 10)\n0 / 10 = 0 (left: 0)"
            ],
            "values": [
                0.0,
                2.0,
                0.003
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 2.2",
                "2 <- 1.1"
            ],
            "resampled_steps": [
                "12 - 2 = 10 (left: 7 7 10)\n7 - 7 = 0 (left: 0 10)",
                "12 - 2 = 10 (left: 7 7 10)",
                "7 - 2 = 5 (left: 5 7 12)"
            ]
        },
        "step_5": {
            "steps": [
                "12 - 2 = 10 (left: 7 7 10)\n7 - 7 = 0 (left: 0 10)\n5 * 5 = 25 (left: 5 25)",
                "12 - 2 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)",
                "7 - 2 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)"
            ],
            "values": [
                0.002,
                60.0,
                60.0
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 5.2",
                "2 <- 5.2"
            ],
            "resampled_steps": [
                "7 - 2 = 5 (left: 5 7 12)",
                "7 - 2 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)",
                "7 - 2 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)"
            ]
        },
        "step_6": {
            "steps": [
                "7 - 2 = 5 (left: 5 7 12)\n7 * 12 = 84 (left: 84)",
                "7 - 2 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)",
                "7 - 2 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)"
            ],
            "values": [
                0.002,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 5.2",
                "1 <- 3.0",
                "2 <- 5.2"
            ],
            "resampled_steps": [
                "7 - 2 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)",
                "12 - 2 = 10 (left: 7 7 10)\n7 - 7 = 0 (left: 0 10)",
                "7 - 2 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)"
            ]
        },
        "step_7": {
            "steps": [
                "7 - 2 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "12 - 2 = 10 (left: 7 7 10)\n7 - 7 = 0 (left: 0 10)\n10 / 0 = undefined",
                "7 - 2 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)"
            ],
            "values": [
                0.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 5.2",
                "1 <- 2.2",
                "2 <- 5.1"
            ],
            "resampled_steps": [
                "7 - 2 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)",
                "12 - 2 = 10 (left: 7 7 10)",
                "12 - 2 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)"
            ]
        },
        "step_8": {
            "steps": [
                "7 - 2 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 + 12 = 14 (left: 14)",
                "12 - 2 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)",
                "12 - 2 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)\n10 / 1 = 10 (left: 10)"
            ],
            "values": [
                0.003,
                60.0,
                0.002
            ],
            "resampled": [
                "0 <- 5.2",
                "1 <- 8.1",
                "2 <- 6.2"
            ],
            "resampled_steps": [
                "7 - 2 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)",
                "12 - 2 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)",
                "7 - 2 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)"
            ]
        },
        "step_9": {
            "steps": [
                "7 - 2 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "12 - 2 = 10 (left: 7 7 10)\n7 / 7 = 1 (left: 1 10)\n1 + 10 = 11 (left: 11)",
                "7 - 2 = 5 (left: 5 7 12)\n7 - 5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: 2 * (7 - (7 - 12)) = 24"
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ],
        "cost": 0.658048
    },
    "42": {
        "input": "1 5 7 12",
        "step_1": {
            "steps": [
                "12 - 7 = 5 (left: 1 5 12)",
                "9 + 15 = 24 (left: 3 15 24)",
                "7 - 1 = 6 (left: 6 5 12)"
            ],
            "values": [
                1.002,
                3.0,
                3.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 1.1",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "9 + 15 = 24 (left: 3 15 24)",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "7 - 1 = 6 (left: 5 6 12)",
                "9 + 15 = 24 (left: 3 15 24)\n3 * 15 = 45 (left: 24 45)",
                "11 - 9 = 2 (left: 3 4 2)"
            ],
            "values": [
                3.0,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 2.2",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "11 - 9 = 2 (left: 3 4 2)",
                "11 - 9 = 2 (left: 3 4 2)",
                "11 - 9 = 2 (left: 3 4 2)"
            ]
        },
        "step_3": {
            "steps": [
                "11 - 9 = 2 (left: 3 4 2)\n4 - 3 = 1 (left: 1 2)",
                "11 - 9 = 2 (left: 3 4 2)\nPossible next steps:",
                "11 - 9 = 2 (left: 3 4 2)\n10 / 5 = 2 (left: 2 10)"
            ],
            "values": [
                0.001,
                0.003,
                0.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 2.2",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "11 - 9 = 2 (left: 3 4 2)",
                "11 - 9 = 2 (left: 3 4 2)",
                "11 - 9 = 2 (left: 3 4 2)"
            ]
        },
        "step_4": {
            "steps": [
                "11 - 9 = 2 (left: 3 4 2)\n5 * 10 = 50 (left: 5 50)",
                "11 - 9 = 2 (left: 3 4 2)\n4 - 2 = 2 (left: 2 2)",
                "11 - 9 = 2 (left: 3 4 2)\n2 + 3 = 5 (left: 4 5)"
            ],
            "values": [
                60.0,
                0.003,
                22.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 2.2",
                "2 <- 4.2"
            ],
            "resampled_steps": [
                "11 - 9 = 2 (left: 3 4 2)",
                "11 - 9 = 2 (left: 3 4 2)",
                "11 - 9 = 2 (left: 3 4 2)\n2 + 3 = 5 (left: 4 5)"
            ]
        },
        "step_5": {
            "steps": [
                "11 - 9 = 2 (left: 3 4 2)\n3 - 2 = 1 (left: 1 2)",
                "11 - 9 = 2 (left: 3 4 2)\n3 + 4 = 7 (left: 2 7)",
                "11 - 9 = 2 (left: 3 4 2)\n2 + 3 = 5 (left: 4 5)\n4 - 5 = -1 (left: -1)"
            ],
            "values": [
                1.001,
                0.002,
                0.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 1.1",
                "2 <- 1.0"
            ],
            "resampled_steps": [
                "11 - 9 = 2 (left: 3 4 2)",
                "9 + 15 = 24 (left: 3 15 24)",
                "12 - 7 = 5 (left: 1 5 12)"
            ]
        },
        "step_6": {
            "steps": [
                "11 - 9 = 2 (left: 3 4 2)\nInput: 5 10 15",
                "9 + 15 = 24 (left: 3 15 24)\n15 + 9 = 24 (left: 3 24)",
                "12 - 7 = 5 (left: 1 5 12)\nInput: 3 9 27"
            ],
            "values": [
                0.003,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 4.0",
                "2 <- 4.0"
            ],
            "resampled_steps": [
                "11 - 9 = 2 (left: 3 4 2)",
                "11 - 9 = 2 (left: 3 4 2)\n5 * 10 = 50 (left: 5 50)",
                "11 - 9 = 2 (left: 3 4 2)\n5 * 10 = 50 (left: 5 50)"
            ]
        },
        "step_7": {
            "steps": [
                "11 - 9 = 2 (left: 3 4 2)\n2 + 3 = 5 (left: 4 5 2)",
                "11 - 9 = 2 (left: 3 4 2)\n5 * 10 = 50 (left: 5 50)\n50 - 5 = 45 (left: 5 45)",
                "11 - 9 = 2 (left: 3 4 2)\n5 * 10 = 50 (left: 5 50)\n5 * 50 = 250 (left: 250)"
            ],
            "values": [
                3.0,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 2.2",
                "2 <- 5.0"
            ],
            "resampled_steps": [
                "7 - 1 = 6 (left: 6 5 12)",
                "11 - 9 = 2 (left: 3 4 2)",
                "11 - 9 = 2 (left: 3 4 2)\n3 - 2 = 1 (left: 1 2)"
            ]
        },
        "step_8": {
            "steps": [
                "7 - 1 = 6 (left: 6 5 12)\n6 + 5 = 11 (left: 11 12)",
                "11 - 9 = 2 (left: 3 4 2)\nInput: 1 2 3 4",
                "11 - 9 = 2 (left: 3 4 2)\n3 - 2 = 1 (left: 1 2)\n2 / 1 = 2 (left: 2)"
            ],
            "values": [
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 7.1",
                "1 <- 2.2",
                "2 <- 4.0"
            ],
            "resampled_steps": [
                "11 - 9 = 2 (left: 3 4 2)\n5 * 10 = 50 (left: 5 50)\n50 - 5 = 45 (left: 5 45)",
                "11 - 9 = 2 (left: 3 4 2)",
                "11 - 9 = 2 (left: 3 4 2)\n5 * 10 = 50 (left: 5 50)"
            ]
        },
        "step_9": {
            "steps": [
                "11 - 9 = 2 (left: 3 4 2)\n5 * 10 = 50 (left: 5 50)\n50 - 5 = 45 (left: 5 45)\n5 * 45 = 225 (left: 225)",
                "11 - 9 = 2 (left: 3 4 2)\n2 + 3 = 5 (left: 4 5 2)",
                "11 - 9 = 2 (left: 3 4 2)\n5 * 10 = 50 (left: 5 50)\n5 * 50 = 250 (left: 250)"
            ],
            "values": [
                20.002,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- 9.0",
                "1 <- 9.0",
                "2 <- 9.0"
            ],
            "resampled_steps": [
                "11 - 9 = 2 (left: 3 4 2)\n5 * 10 = 50 (left: 5 50)\n50 - 5 = 45 (left: 5 45)\n5 * 45 = 225 (left: 225)",
                "11 - 9 = 2 (left: 3 4 2)\n5 * 10 = 50 (left: 5 50)\n50 - 5 = 45 (left: 5 45)\n5 * 45 = 225 (left: 225)",
                "11 - 9 = 2 (left: 3 4 2)\n5 * 10 = 50 (left: 5 50)\n50 - 5 = 45 (left: 5 45)\n5 * 45 = 225 (left: 225)"
            ]
        },
        "step_10": {
            "steps": [
                "11 - 9 = 2 (left: 3 4 2)\n5 * 10 = 50 (left: 5 50)\n50 - 5 = 45 (left: 5 45)\n5 * 45 = 225 (left: 225)\n2 + 2 + 5 = 9",
                "11 - 9 = 2 (left: 3 4 2)\n5 * 10 = 50 (left: 5 50)\n50 - 5 = 45 (left: 5 45)\n5 * 45 = 225 (left: 225)\n2 * 2 * 5 = 20 (left: 20)",
                "11 - 9 = 2 (left: 3 4 2)\n5 * 10 = 50 (left: 5 50)\n50 - 5 = 45 (left: 5 45)\n5 * 45 = 225 (left: 225)\n225 / 2 = 112.5 (left: 112.5)"
            ],
            "values": [
                0.003,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.6743435
    },
    "43": {
        "input": "10 10 12 12",
        "step_1": {
            "steps": [
                "12 + 10 = 22 (left: 10 12 22)",
                "12 + 10 = 22 (left: 10 12 22)",
                "10 + 10 = 20 (left: 12 12 20)"
            ],
            "values": [
                1.002,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "12 - 10 = 2 (left: 10 12 2)",
                "10 / 10 = 1 (left: 1 12 12)",
                "10 / 10 = 1 (left: 1 12 12)"
            ],
            "values": [
                22.0,
                20.001,
                2.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 2.1",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "10 / 10 = 1 (left: 1 12 12)",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12)",
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "10 * 10 = 100 (left: 12 12 100)"
            ],
            "values": [
                0.003,
                40.001,
                1.002
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- INIT",
                "2 <- 2.0"
            ],
            "resampled_steps": [
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "",
                "12 - 10 = 2 (left: 10 12 2)"
            ]
        },
        "step_4": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 * 12 = 144 (left: 144)",
                "10 * 10 = 100 (left: 12 12 100)",
                "12 - 10 = 2 (left: 10 12 2)\n6 / 5 = 1.2 (left: 5 7 1.2)"
            ],
            "values": [
                0.003,
                2.001,
                3.0
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 3.1",
                "2 <- 4.2"
            ],
            "resampled_steps": [
                "10 / 10 = 1 (left: 1 12 12)",
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "12 - 10 = 2 (left: 10 12 2)\n6 / 5 = 1.2 (left: 5 7 1.2)"
            ]
        },
        "step_5": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 / 12 = 1 (left: 1)",
                "12 - 10 = 2 (left: 10 12 2)\n6 / 5 = 1.2 (left: 5 7 1.2)\n3 + 9 = 12 (left: 12 27)"
            ],
            "values": [
                20.002,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 2.1",
                "1 <- 2.1",
                "2 <- 3.1"
            ],
            "resampled_steps": [
                "10 / 10 = 1 (left: 1 12 12)",
                "10 / 10 = 1 (left: 1 12 12)",
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)"
            ]
        },
        "step_6": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12)\n3 / 3 = 1 (left: 1)",
                "10 / 10 = 1 (left: 1 12 12)\nInput: 3 5 2",
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 - 12 = 0 (left: 0)"
            ],
            "values": [
                0.002,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 5.0",
                "2 <- 5.0"
            ],
            "resampled_steps": [
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)",
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)"
            ]
        },
        "step_7": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24) ",
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24",
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24"
            ],
            "values": [
                60.0,
                0.002,
                40.001
            ],
            "resampled": [
                "0 <- 7.2",
                "1 <- 7.2",
                "2 <- 7.0"
            ],
            "resampled_steps": [
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24",
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24",
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24) "
            ]
        },
        "step_8": {
            "steps": [
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24\n12 / 12 = 1 (left: 1 24)",
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24\n12 / 12 = 1 (left: 1 24)",
                "10 / 10 = 1 (left: 1 12 12)\n12 / 1 = 12 (left: 12 12)\n12 + 12 = 24 (left: 24) \nAnswer: (10 / 10) * (12 + 12) = 24"
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 1
            }
        ],
        "cost": 0.687189
    },
    "44": {
        "input": "1 8 8 8",
        "step_1": {
            "steps": [
                "8 - 1 = 7 (left: 1 8 8)",
                "8 / 1 = 8 (left: 8 8 8)",
                "1 + 8 = 9 (left: 8 8 9)"
            ],
            "values": [
                0.003,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8)",
                "8 / 1 = 8 (left: 8 8 8)",
                "1 + 8 = 9 (left: 8 8 9)"
            ],
            "values": [
                22.0,
                41.0,
                2.001
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 2.0"
            ],
            "resampled_steps": [
                "8 / 1 = 8 (left: 8 8 8)",
                "8 / 1 = 8 (left: 8 8 8)",
                "8 / 1 = 8 (left: 8 8 8)"
            ]
        },
        "step_3": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)",
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)",
                "8 / 1 = 8 (left: 8 8 8)\n8 * 8 = 64 (left: 64)"
            ],
            "values": [
                60.0,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 3.0",
                "2 <- 3.0"
            ],
            "resampled_steps": [
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)",
                "8 / 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)",
                "8 / 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)"
            ]
        },
        "step_4": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)\n16 / 8 = 2 (left: 2)",
                "8 / 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)\n8 - 1 = 7 (left: 7)",
                "8 / 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)\n8 / 1 = 8 (left: 8)"
            ],
            "values": [
                0.001,
                0.001,
                0.002
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 3.1",
                "2 <- 3.1"
            ],
            "resampled_steps": [
                "8 / 1 = 8 (left: 8 8 8)",
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)",
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)"
            ]
        },
        "step_5": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1)",
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)\n8 / 16 = 0.5 (left: 0.5)",
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)\n8 / 16 = 0.5 (left: 0.5)"
            ],
            "values": [
                0.003,
                0.001,
                0.001
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 2.0",
                "2 <- 3.0"
            ],
            "resampled_steps": [
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)",
                "8 / 1 = 8 (left: 8 8 8)",
                "8 / 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)"
            ]
        },
        "step_6": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)\n16 / 8 = 2 (left: 2)",
                "8 / 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)",
                "8 / 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)\n8 - 1 = 7 (left: 7)"
            ],
            "values": [
                0.002,
                40.0,
                0.001
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 6.1",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)",
                "8 / 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)",
                "8 / 1 = 8 (left: 8 8 8)"
            ]
        },
        "step_7": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)\n8 + 16 = 24 (left: 24)",
                "8 / 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)\n8 - 1 = 7 (left: 7)",
                "8 / 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1 8)"
            ],
            "values": [
                60.0,
                0.0,
                60.0
            ],
            "resampled": [
                "0 <- 7.0",
                "1 <- 2.1",
                "2 <- 2.1"
            ],
            "resampled_steps": [
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)\n8 + 16 = 24 (left: 24)",
                "8 / 1 = 8 (left: 8 8 8)",
                "8 / 1 = 8 (left: 8 8 8)"
            ]
        },
        "step_8": {
            "steps": [
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)\n8 + 16 = 24 (left: 24)\nAnswer: (8 / 1) + (8 + 8) = 24",
                "8 / 1 = 8 (left: 8 8 8)\n8 + 8 = 16 (left: 8 16)",
                "8 / 1 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1)"
            ]
        },
        "results": [
            {
                "r": 1
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.6972485
    },
    "45": {
        "input": "2 2 3 8",
        "step_1": {
            "steps": [
                "3 + 2 = 5 (left: 5 2 8)",
                "8 / 3 = 2.6666666666666665 (left: 2.6666666666666665 2 8)",
                "2 * 2 = 4 (left: 4 3 8)"
            ],
            "values": [
                3.0,
                3.0,
                1.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "8 / 2 = 4 (left: 2 4 8)",
                "2 + 2 = 4 (left: 3 4 8)",
                "5 + 7 = 12 (left: 5 12 9)"
            ],
            "values": [
                20.002,
                1.001,
                3.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 2.0",
                "2 <- 2.0"
            ],
            "resampled_steps": [
                "",
                "8 / 2 = 4 (left: 2 4 8)",
                "8 / 2 = 4 (left: 2 4 8)"
            ]
        },
        "step_3": {
            "steps": [
                "3 - 2 = 1 (left: 1 2 8)",
                "8 / 2 = 4 (left: 2 4 8)\nInput: 4 16 4",
                "8 / 2 = 4 (left: 2 4 8)\n2 + 4 = 6 (left: 6 8)"
            ],
            "values": [
                60.0,
                0.003,
                1.001
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 1.2",
                "2 <- 3.0"
            ],
            "resampled_steps": [
                "3 - 2 = 1 (left: 1 2 8)",
                "2 * 2 = 4 (left: 4 3 8)",
                "3 - 2 = 1 (left: 1 2 8)"
            ]
        },
        "step_4": {
            "steps": [
                "3 - 2 = 1 (left: 1 2 8)\n2 * 8 = 16 (left: 1 16)",
                "2 * 2 = 4 (left: 4 3 8)\n4 + 3 = 7 (left: 7 8)",
                "3 - 2 = 1 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)"
            ],
            "values": [
                1.001,
                1.002,
                21.001
            ],
            "resampled": [
                "0 <- 3.0",
                "1 <- 3.0",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "3 - 2 = 1 (left: 1 2 8)",
                "3 - 2 = 1 (left: 1 2 8)",
                ""
            ]
        },
        "step_5": {
            "steps": [
                "3 - 2 = 1 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "3 - 2 = 1 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "2 + 4 = 6 (left: 1 6 8)"
            ],
            "values": [
                60.0,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 5.1",
                "1 <- 3.0",
                "2 <- 5.0"
            ],
            "resampled_steps": [
                "3 - 2 = 1 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "3 - 2 = 1 (left: 1 2 8)",
                "3 - 2 = 1 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)"
            ]
        },
        "step_6": {
            "steps": [
                "3 - 2 = 1 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9)",
                "3 - 2 = 1 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "3 - 2 = 1 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n6 / 1 = 6 (left: 6)"
            ],
            "values": [
                0.003,
                60.0,
                0.003
            ],
            "resampled": [
                "0 <- 5.0",
                "1 <- 3.0",
                "2 <- 6.1"
            ],
            "resampled_steps": [
                "3 - 2 = 1 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)",
                "3 - 2 = 1 (left: 1 2 8)",
                "3 - 2 = 1 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)"
            ]
        },
        "step_7": {
            "steps": [
                "3 - 2 = 1 (left: 1 2 8)\n8 - 2 = 6 (left: 1 6)\n6 - 1 = 5 (left: 5)",
                "3 - 2 = 1 (left: 1 2 8)\n2 * 8 = 16 (left: 1 16)",
                "3 - 2 = 1 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n1 + 10 = 11 (left: 11)"
            ],
            "values": [
                0.001,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 5.1",
                "1 <- 4.2",
                "2 <- 5.1"
            ],
            "resampled_steps": [
                "3 - 2 = 1 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "3 - 2 = 1 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)",
                "3 - 2 = 1 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)"
            ]
        },
        "step_8": {
            "steps": [
                "3 - 2 = 1 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "3 - 2 = 1 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)\n1 * 4 = 4 (left: 4)",
                "3 - 2 = 1 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n10 / 1 = 10 (left: 10)"
            ],
            "values": [
                0.003,
                0.002,
                0.003
            ],
            "resampled": [
                "0 <- 5.1",
                "1 <- 4.2",
                "2 <- 3.0"
            ],
            "resampled_steps": [
                "3 - 2 = 1 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "3 - 2 = 1 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)",
                "3 - 2 = 1 (left: 1 2 8)"
            ]
        },
        "step_9": {
            "steps": [
                "3 - 2 = 1 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n10 / 1 = 10 (left: 10)",
                "3 - 2 = 1 (left: 1 2 8)\n8 / 2 = 4 (left: 1 4)\n1 + 4 = 5",
                "3 - 2 = 1 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)"
            ],
            "values": [
                0.003,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 6.1",
                "1 <- 5.1",
                "2 <- 6.1"
            ],
            "resampled_steps": [
                "3 - 2 = 1 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "3 - 2 = 1 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)",
                "3 - 2 = 1 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)"
            ]
        },
        "step_10": {
            "steps": [
                "3 - 2 = 1 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n5 * 3 = 15 (left: 3)",
                "3 - 2 = 1 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n1 - 10 = -9 (left: -9)",
                "3 - 2 = 1 (left: 1 2 8)\n2 + 8 = 10 (left: 1 10)\n10 - 1 = 9 (left: 9)"
            ],
            "values": [
                0.003,
                0.003,
                0.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.7124615000000001
    },
    "46": {
        "input": "2 9 9 12",
        "step_1": {
            "steps": [
                "12 - 9 = 3 (left: 2 3 9)",
                "9 / 2 = 4.5 (left: 4.5 9 12)",
                "9 - 2 = 7 (left: 7 9 12)"
            ],
            "values": [
                0.003,
                3.0,
                1.002
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "2 * 9 = 18 (left: 9 12 18)",
                "2 + 9 = 11 (left: 9 11 12)",
                "2 + 9 = 11 (left: 9 11 12)"
            ],
            "values": [
                2.001,
                1.002,
                2.001
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- 2.2",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "2 + 9 = 11 (left: 9 11 12)",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "9 - 2 = 7 (left: 7 9 12)",
                "2 + 9 = 11 (left: 9 11 12)\n10 / 5 = 2 (left: 2 10)",
                "9 / 2 = 4.5 (left: 4.5 9 12)"
            ],
            "values": [
                3.0,
                1.0,
                3.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                ""
            ]
        },
        "step_4": {
            "steps": [
                "12 - 2 = 10 (left: 9 10 12)",
                "12 - 2 = 10 (left: 9 10 12)",
                "12 - 9 = 3 (left: 2 3 12)"
            ],
            "values": [
                3.0,
                3.0,
                3.0
            ],
            "resampled": [
                "0 <- 3.2",
                "1 <- 4.1",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12)",
                "12 - 2 = 10 (left: 9 10 12)",
                ""
            ]
        },
        "step_5": {
            "steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)",
                "12 - 2 = 10 (left: 9 10 12)\n10 / 9 = 1.11 (left: 1.11 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12)"
            ],
            "values": [
                60.0,
                0.002,
                3.0
            ],
            "resampled": [
                "0 <- 5.0",
                "1 <- 3.0",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)",
                "9 - 2 = 7 (left: 7 9 12)",
                "2 + 9 = 11 (left: 9 11 12)"
            ]
        },
        "step_6": {
            "steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "9 - 2 = 7 (left: 7 9 12)\n7 + 9 = 16 (left: 16 12)",
                "2 + 9 = 11 (left: 9 11 12)\n9 / 11 = 0.818181818 (left: 0.818181818 12)"
            ],
            "values": [
                0.002,
                0.003,
                0.001
            ],
            "resampled": [
                "0 <- 1.1",
                "1 <- 3.0",
                "2 <- 5.0"
            ],
            "resampled_steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12)",
                "9 - 2 = 7 (left: 7 9 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)"
            ]
        },
        "step_7": {
            "steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 - 4.5 = 4.5 (left: 4.5 12)",
                "9 - 2 = 7 (left: 7 9 12)\n12 - 7 = 5 (left: 7 5)",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)"
            ],
            "values": [
                0.003,
                0.002,
                60.0
            ],
            "resampled": [
                "0 <- 7.2",
                "1 <- 4.2",
                "2 <- 5.0"
            ],
            "resampled_steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "12 - 9 = 3 (left: 2 3 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)"
            ]
        },
        "step_8": {
            "steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 / 2) * (9 / 4.5) * 12 = 24",
                "12 - 9 = 3 (left: 2 3 12)\n5 + 7 = 12 (left: 9 9 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)"
            ],
            "values": [
                40.001,
                0.003,
                0.002
            ],
            "resampled": [
                "0 <- 5.0",
                "1 <- 7.2",
                "2 <- 8.0"
            ],
            "resampled_steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 / 2) * (9 / 4.5) * 12 = 24"
            ]
        },
        "step_9": {
            "steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n12 - 2 = 10 (left: 10)",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 / 2) * (9 / (9 / 2)) = 24",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 / 2) * (9 / 4.5) * 12 = 24\nInput: 3 3 6 8\nSteps:\n3 * 8 = 24 (left: 3 6)\n6 / 3 = 2 (left: 2)\n2 * 24 = 24 (left: 24)\nAnswer: (3 * 8) / (6 / 3) = 24"
            ],
            "values": [
                0.003,
                20.002,
                60.0
            ],
            "resampled": [
                "0 <- 9.1",
                "1 <- 8.0",
                "2 <- 5.0"
            ],
            "resampled_steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 / 2) * (9 / (9 / 2)) = 24",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 / 2) * (9 / 4.5) * 12 = 24",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)"
            ]
        },
        "step_10": {
            "steps": [
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 / 2) * (9 / (9 / 2)) = 24\nInput: 3 3 8 8\nSteps:\n3 + 8 = 11 (left: 3 11 8)\n11 - 3 = 8 (left: 8 8)\n8 * 8 = 64 (left: 64)\nAnswer: (3 + 8) * (8 - 3) = 24",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (9 / 2) * (9 / 4.5) * 12 = 24\nThere is no way to reach 24 using the numbers 2, 9, 9, and 12 with basic arithmetic operations.",
                "9 / 2 = 4.5 (left: 4.5 9 12)\n9 / 4.5 = 2 (left: 2 12)\n12 / 2 = 6 (left: 6)"
            ],
            "values": [
                60.0,
                0.003,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.7306305
    },
    "47": {
        "input": "11 11 11 12",
        "step_1": {
            "steps": [
                "11 / 11 = 1 (left: 1 11 12)",
                "11 * 11 = 121 (left: 121 11 12)",
                "11 * 11 = 121 (left: 121 11 12)"
            ],
            "values": [
                20.002,
                3.0,
                1.001
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 1.0",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "11 / 11 = 1 (left: 1 11 12)",
                "11 / 11 = 1 (left: 1 11 12)",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "11 / 11 = 1 (left: 1 11 12)\n7 - 5 = 2 (left: 4 2 6)",
                "11 / 11 = 1 (left: 1 11 12)\n11 / 1 = 11 (left: 11 12)",
                "11 + 11 = 22 (left: 11 22 12)"
            ],
            "values": [
                0.003,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "",
                "",
                ""
            ]
        },
        "step_3": {
            "steps": [
                "11 / 11 = 1 (left: 1 11 12)",
                "12 - 11 = 1 (left: 11 11 1)",
                "11 + 11 = 22 (left: 11 22 12)"
            ],
            "values": [
                2.001,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- 3.1",
                "1 <- 3.0",
                "2 <- 3.0"
            ],
            "resampled_steps": [
                "12 - 11 = 1 (left: 11 11 1)",
                "11 / 11 = 1 (left: 1 11 12)",
                "11 / 11 = 1 (left: 1 11 12)"
            ]
        },
        "step_4": {
            "steps": [
                "12 - 11 = 1 (left: 11 11 1)\n11 / 11 = 1 (left: 1 1)",
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)",
                "11 / 11 = 1 (left: 1 11 12)\n12 - 1 = 11 (left: 11 11)"
            ],
            "values": [
                0.002,
                41.0,
                1.002
            ],
            "resampled": [
                "0 <- 4.1",
                "1 <- 3.0",
                "2 <- 4.1"
            ],
            "resampled_steps": [
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)",
                "11 / 11 = 1 (left: 1 11 12)",
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)"
            ]
        },
        "step_5": {
            "steps": [
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)\n18 - 3 = 15 (left: 8 15 18)",
                "11 / 11 = 1 (left: 1 11 12)\n5 * 7 = 35 (left: 9 2 35)",
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)\n3 + 8 = 11 (left: 11 18)"
            ],
            "values": [
                2.0,
                2.0,
                0.003
            ],
            "resampled": [
                "0 <- 4.1",
                "1 <- 4.1",
                "2 <- 4.1"
            ],
            "resampled_steps": [
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)",
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)",
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)"
            ]
        },
        "step_6": {
            "steps": [
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)\n8 / 3 = 2.67 (left: 2.67 18)",
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)\n8 * 3 = 24 (left: 24 18)",
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)\n18 - 3 = 15 (left: 3 8 15)"
            ],
            "values": [
                0.002,
                20.002,
                60.0
            ],
            "resampled": [
                "0 <- 6.2",
                "1 <- 4.1",
                "2 <- 4.1"
            ],
            "resampled_steps": [
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)\n18 - 3 = 15 (left: 3 8 15)",
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)",
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)"
            ]
        },
        "step_7": {
            "steps": [
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)\n18 - 3 = 15 (left: 3 8 15)\n10 / 4 = 2.5 (left: 2.5 24)",
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)\n3 * 8 = 24 (left: 8 18 24)",
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)\n18 - 3 = 15 (left: 3 8 15)"
            ],
            "values": [
                0.002,
                2.001,
                60.0
            ],
            "resampled": [
                "0 <- 4.1",
                "1 <- 6.1",
                "2 <- 4.1"
            ],
            "resampled_steps": [
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)",
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)\n8 * 3 = 24 (left: 24 18)",
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)"
            ]
        },
        "step_8": {
            "steps": [
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)\n8 / 3 = 2.6666666666666665 (left: 2.6666666666666665 8 18)",
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)\n8 * 3 = 24 (left: 24 18)\n24 / 18 = 1.33 (left: 1.33)",
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)\n18 / 8 = 2.25 (left: 3 2.25)"
            ],
            "values": [
                21.001,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 7.2",
                "1 <- 6.2",
                "2 <- 4.1"
            ],
            "resampled_steps": [
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)\n18 - 3 = 15 (left: 3 8 15)",
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)\n18 - 3 = 15 (left: 3 8 15)",
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)"
            ]
        },
        "step_9": {
            "steps": [
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)\n18 - 3 = 15 (left: 3 8 15)\n15 / 3 = 5 (left: 5 8)",
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)\n18 - 3 = 15 (left: 3 8 15)\n3 * 8 = 24 (left: 24 15)",
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)\n20 - 4 = 16 (left: 5 16)"
            ],
            "values": [
                0.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 7.2",
                "1 <- 1.0",
                "2 <- 4.1"
            ],
            "resampled_steps": [
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)\n18 - 3 = 15 (left: 3 8 15)",
                "11 / 11 = 1 (left: 1 11 12)",
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)"
            ]
        },
        "step_10": {
            "steps": [
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)\n18 - 3 = 15 (left: 3 8 15)\n3 * 8 = 24 (left: 24 15)",
                "11 / 11 = 1 (left: 1 11 12)\n18 / 6 = 3 (left: 3 18)",
                "11 / 11 = 1 (left: 1 11 12)\n8 + 10 = 18 (left: 3 8 18)\n8 / 3 = 2.66667 (left: 2.66667 8 18)"
            ],
            "values": [
                20.002,
                0.003,
                1.002
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.7498560000000001
    },
    "48": {
        "input": "3 8 13 13",
        "step_1": {
            "steps": [
                "8 - 3 = 5 (left: 5 8 13)",
                "8 / 3 = 2.6667 (left: 2.6667 8 13)",
                "13 + 3 = 16 (left: 8 13 16)"
            ],
            "values": [
                1.002,
                1.002,
                41.0
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 1.2"
            ],
            "resampled_steps": [
                "",
                "",
                "13 + 3 = 16 (left: 8 13 16)"
            ]
        },
        "step_2": {
            "steps": [
                "16 / 4 = 4 (left: 4 10 16)",
                "13 / 3 = 4.33 (approximated) (left: 4.33 13 13)",
                "13 + 3 = 16 (left: 8 13 16)\nPossible next steps:"
            ],
            "values": [
                41.0,
                2.001,
                0.003
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 2.0"
            ],
            "resampled_steps": [
                "16 / 4 = 4 (left: 4 10 16)",
                "16 / 4 = 4 (left: 4 10 16)",
                "16 / 4 = 4 (left: 4 10 16)"
            ]
        },
        "step_3": {
            "steps": [
                "16 / 4 = 4 (left: 4 10 16)\n16 - 4 = 12 (left: 12 16)",
                "16 / 4 = 4 (left: 4 10 16)\n4 / 10 = 0.4 (left: 0.4 16)",
                "16 / 4 = 4 (left: 4 10 16)\n12.5 - 24 = -11.5 (left: -11.5 16)"
            ],
            "values": [
                0.003,
                1.0,
                2.001
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 2.0",
                "2 <- 1.2"
            ],
            "resampled_steps": [
                "16 / 4 = 4 (left: 4 10 16)",
                "16 / 4 = 4 (left: 4 10 16)",
                "13 + 3 = 16 (left: 8 13 16)"
            ]
        },
        "step_4": {
            "steps": [
                "16 / 4 = 4 (left: 4 10 16)\n4 * 10 = 40 (left: 40 16)",
                "16 / 4 = 4 (left: 4 10 16)\n4 + 10 = 14 (left: 14 16)",
                "13 + 3 = 16 (left: 8 13 16)\n16 + 8 = 24 (left: 13 24)"
            ],
            "values": [
                60.0,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 1.2",
                "2 <- 4.0"
            ],
            "resampled_steps": [
                "16 / 4 = 4 (left: 4 10 16)",
                "13 + 3 = 16 (left: 8 13 16)",
                "16 / 4 = 4 (left: 4 10 16)\n4 * 10 = 40 (left: 40 16)"
            ]
        },
        "step_5": {
            "steps": [
                "16 / 4 = 4 (left: 4 10 16)\n16 / 10 = 1.6 (left: 4 1.6)",
                "13 + 3 = 16 (left: 8 13 16)\n13 - 8 = 5 (left: 5 16)",
                "16 / 4 = 4 (left: 4 10 16)\n4 * 10 = 40 (left: 40 16)\n40 / 16 = 2.5 (left: 2.5)"
            ],
            "values": [
                1.002,
                1.002,
                0.001
            ],
            "resampled": [
                "0 <- 4.0",
                "1 <- INIT",
                "2 <- 3.2"
            ],
            "resampled_steps": [
                "16 / 4 = 4 (left: 4 10 16)\n4 * 10 = 40 (left: 40 16)",
                "",
                "16 / 4 = 4 (left: 4 10 16)\n12.5 - 24 = -11.5 (left: -11.5 16)"
            ]
        },
        "step_6": {
            "steps": [
                "16 / 4 = 4 (left: 4 10 16)\n4 * 10 = 40 (left: 40 16)\n40 * 16 = 640 (left: 640)",
                "13 - 8 = 5 (left: 3 5 13)",
                "16 / 4 = 4 (left: 4 10 16)\n12.5 - 24 = -11.5 (left: -11.5 16)\n16 / -11.5 = -1.39130434783 (left: -1.39130434783)"
            ],
            "values": [
                0.002,
                20.002,
                0.0
            ],
            "resampled": [
                "0 <- 2.0",
                "1 <- 4.0",
                "2 <- 2.0"
            ],
            "resampled_steps": [
                "16 / 4 = 4 (left: 4 10 16)",
                "16 / 4 = 4 (left: 4 10 16)\n4 * 10 = 40 (left: 40 16)",
                "16 / 4 = 4 (left: 4 10 16)"
            ]
        },
        "step_7": {
            "steps": [
                "16 / 4 = 4 (left: 4 10 16)\n16 / 4 = 4 (left: 4 10)",
                "16 / 4 = 4 (left: 4 10 16)\n4 * 10 = 40 (left: 40 16)\n40 / 16 = 2.5 (left: 2.5)",
                "16 / 4 = 4 (left: 4 10 16)\n16 / 4 = 4 (left: 4 10 16)"
            ],
            "values": [
                20.0,
                0.001,
                40.001
            ],
            "resampled": [
                "0 <- 7.0",
                "1 <- 4.0",
                "2 <- 7.2"
            ],
            "resampled_steps": [
                "16 / 4 = 4 (left: 4 10 16)\n16 / 4 = 4 (left: 4 10)",
                "16 / 4 = 4 (left: 4 10 16)\n4 * 10 = 40 (left: 40 16)",
                "16 / 4 = 4 (left: 4 10 16)\n16 / 4 = 4 (left: 4 10 16)"
            ]
        },
        "step_8": {
            "steps": [
                "16 / 4 = 4 (left: 4 10 16)\n16 / 4 = 4 (left: 4 10)\n7 * 3 = 21 (left: 21)",
                "16 / 4 = 4 (left: 4 10 16)\n4 * 10 = 40 (left: 40 16)\n40 * 16 = 640 (left: 640)",
                "16 / 4 = 4 (left: 4 10 16)\n16 / 4 = 4 (left: 4 10 16)\n16 - 4 = 12 (left: 10 12)"
            ],
            "values": [
                0.003,
                0.001,
                0.003
            ],
            "resampled": [
                "0 <- 6.1",
                "1 <- 2.0",
                "2 <- 6.1"
            ],
            "resampled_steps": [
                "13 - 8 = 5 (left: 3 5 13)",
                "16 / 4 = 4 (left: 4 10 16)",
                "13 - 8 = 5 (left: 3 5 13)"
            ]
        },
        "step_9": {
            "steps": [
                "13 - 8 = 5 (left: 3 5 13)\n7 - 5 = 2 (left: 4 2 9)",
                "16 / 4 = 4 (left: 4 10 16)\n10 + 16 = 26 (left: 4 26)",
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)"
            ],
            "values": [
                0.003,
                0.001,
                60.0
            ],
            "resampled": [
                "0 <- 9.2",
                "1 <- 2.0",
                "2 <- 9.2"
            ],
            "resampled_steps": [
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)",
                "16 / 4 = 4 (left: 4 10 16)",
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)"
            ]
        },
        "step_10": {
            "steps": [
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5)",
                "16 / 4 = 4 (left: 4 10 16)\n10 / 4 = 2.5 (left: 2.5 16)",
                "13 - 8 = 5 (left: 3 5 13)\n13 - 5 = 8 (left: 3 8)\n8 / 3 = 2.67 (left: 2.67)"
            ],
            "values": [
                0.003,
                20.001,
                0.003
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.7678750000000001
    },
    "49": {
        "input": "9 9 12 12",
        "step_1": {
            "steps": [
                "12 / 9 = 1 (left: 9 12 1)",
                "9 + 9 = 18 (left: 12 18 12)",
                "12 - 9 = 3 (left: 3 12 12)"
            ],
            "values": [
                2.001,
                3.0,
                41.0
            ],
            "resampled": [
                "0 <- 1.2",
                "1 <- 1.2",
                "2 <- INIT"
            ],
            "resampled_steps": [
                "12 - 9 = 3 (left: 3 12 12)",
                "12 - 9 = 3 (left: 3 12 12)",
                ""
            ]
        },
        "step_2": {
            "steps": [
                "12 - 9 = 3 (left: 3 12 12)\n12 - 3 = 9 (left: 9 12)",
                "12 - 9 = 3 (left: 3 12 12)\nPossible next steps:",
                "12 - 9 = 3 (left: 3 12 12)"
            ],
            "values": [
                0.003,
                0.003,
                60.0
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 1.2",
                "2 <- 1.2"
            ],
            "resampled_steps": [
                "12 - 9 = 3 (left: 3 12 12)",
                "12 - 9 = 3 (left: 3 12 12)",
                "12 - 9 = 3 (left: 3 12 12)"
            ]
        },
        "step_3": {
            "steps": [
                "12 - 9 = 3 (left: 3 12 12)\n12 - 3 = 9 (left: 9 12)",
                "12 - 9 = 3 (left: 3 12 12)\n12 - 3 = 9 (left: 9 12)",
                "12 - 9 = 3 (left: 3 12 12)\n12 - 3 = 9 (left: 9 12)"
            ],
            "values": [
                0.002,
                0.003,
                0.003
            ],
            "resampled": [
                "0 <- INIT",
                "1 <- INIT",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "",
                "",
                "12 - 9 = 3 (left: 3 12 12)"
            ]
        },
        "step_4": {
            "steps": [
                "9 * 9 = 81 (left: 12 12 81)",
                "9 / 9 = 1 (left: 1 12 12)",
                "12 - 9 = 3 (left: 3 12 12)\n3 * 12 = 36 (left: 12 36)"
            ],
            "values": [
                1.001,
                1.002,
                0.003
            ],
            "resampled": [
                "0 <- 1.0",
                "1 <- 2.2",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "12 / 9 = 1 (left: 9 12 1)",
                "12 - 9 = 3 (left: 3 12 12)",
                "12 - 9 = 3 (left: 3 12 12)"
            ]
        },
        "step_5": {
            "steps": [
                "12 / 9 = 1 (left: 9 12 1)\n7 + 5 = 12 (left: 3 12)",
                "12 - 9 = 3 (left: 3 12 12)\n12 - 3 = 9 (left: 9 12)",
                "12 - 9 = 3 (left: 3 12 12)\n12 - 3 = 9 (left: 9 12)"
            ],
            "values": [
                20.002,
                0.003,
                1.002
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 5.0",
                "2 <- 5.0"
            ],
            "resampled_steps": [
                "12 - 9 = 3 (left: 3 12 12)",
                "12 / 9 = 1 (left: 9 12 1)\n7 + 5 = 12 (left: 3 12)",
                "12 / 9 = 1 (left: 9 12 1)\n7 + 5 = 12 (left: 3 12)"
            ]
        },
        "step_6": {
            "steps": [
                "12 - 9 = 3 (left: 3 12 12)\n3 * 12 = 36 (left: 12 12 36)",
                "12 / 9 = 1 (left: 9 12 1)\n7 + 5 = 12 (left: 3 12)\n12 - 3 = 9 (left: 9)",
                "12 / 9 = 1 (left: 9 12 1)\n7 + 5 = 12 (left: 3 12)\n12 / 3 = 4 (left: 4)"
            ],
            "values": [
                21.001,
                0.002,
                0.002
            ],
            "resampled": [
                "0 <- 2.2",
                "1 <- 2.2",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "12 - 9 = 3 (left: 3 12 12)",
                "12 - 9 = 3 (left: 3 12 12)",
                "12 - 9 = 3 (left: 3 12 12)"
            ]
        },
        "step_7": {
            "steps": [
                "12 - 9 = 3 (left: 3 12 12)\n12 - 3 = 9 (left: 9 12 12)",
                "12 - 9 = 3 (left: 3 12 12)\n3 * 12 = 36 (left: 12 36)",
                "12 - 9 = 3 (left: 3 12 12)\n3 * 12 = 36 (left: 12 36)"
            ],
            "values": [
                21.001,
                0.003,
                20.002
            ],
            "resampled": [
                "0 <- 6.0",
                "1 <- 7.0",
                "2 <- 1.2"
            ],
            "resampled_steps": [
                "12 - 9 = 3 (left: 3 12 12)\n3 * 12 = 36 (left: 12 12 36)",
                "12 - 9 = 3 (left: 3 12 12)\n12 - 3 = 9 (left: 9 12 12)",
                "12 - 9 = 3 (left: 3 12 12)"
            ]
        },
        "step_8": {
            "steps": [
                "12 - 9 = 3 (left: 3 12 12)\n3 * 12 = 36 (left: 12 12 36)\n36 / 12 = 3 (left: 3 12)",
                "12 - 9 = 3 (left: 3 12 12)\n12 - 3 = 9 (left: 9 12 12)\n9 - 12 = -3 (left: -3 12 12)",
                "12 - 9 = 3 (left: 3 12 12)\n12 / 3 = 4 (left: 4 12)"
            ],
            "values": [
                1.002,
                20.002,
                0.003
            ],
            "resampled": [
                "0 <- 8.1",
                "1 <- 7.0",
                "2 <- 5.2"
            ],
            "resampled_steps": [
                "12 - 9 = 3 (left: 3 12 12)\n12 - 3 = 9 (left: 9 12 12)\n9 - 12 = -3 (left: -3 12 12)",
                "12 - 9 = 3 (left: 3 12 12)\n12 - 3 = 9 (left: 9 12 12)",
                "12 - 9 = 3 (left: 3 12 12)\n12 - 3 = 9 (left: 9 12)"
            ]
        },
        "step_9": {
            "steps": [
                "12 - 9 = 3 (left: 3 12 12)\n12 - 3 = 9 (left: 9 12 12)\n9 - 12 = -3 (left: -3 12 12)\n12 / -3 = -4 (left: -4 12)",
                "12 - 9 = 3 (left: 3 12 12)\n12 - 3 = 9 (left: 9 12 12)\n12 - 9 = 3 (left: 3 12 12)",
                "12 - 9 = 3 (left: 3 12 12)\n12 - 3 = 9 (left: 9 12)\n12 - 9 = 3 (left: 3)"
            ],
            "values": [
                0.002,
                41.0,
                0.002
            ],
            "resampled": [
                "0 <- 5.0",
                "1 <- 9.1",
                "2 <- 2.2"
            ],
            "resampled_steps": [
                "12 / 9 = 1 (left: 9 12 1)\n7 + 5 = 12 (left: 3 12)",
                "12 - 9 = 3 (left: 3 12 12)\n12 - 3 = 9 (left: 9 12 12)\n12 - 9 = 3 (left: 3 12 12)",
                "12 - 9 = 3 (left: 3 12 12)"
            ]
        },
        "step_10": {
            "steps": [
                "12 / 9 = 1 (left: 9 12 1)\n7 + 5 = 12 (left: 3 12)\n3 * 12 = 36 (left: 36)",
                "12 - 9 = 3 (left: 3 12 12)\n12 - 3 = 9 (left: 9 12 12)\n12 - 9 = 3 (left: 3 12 12)\n3 * 12 = 36 (left: 12 12 36)",
                "12 - 9 = 3 (left: 3 12 12)\n12 / 3 = 4 (left: 4 12 12)"
            ],
            "values": [
                20.002,
                40.001,
                3.0
            ]
        },
        "results": [
            {
                "r": 0
            },
            {
                "r": 0
            },
            {
                "r": 0
            }
        ],
        "cost": 0.7836290000000001
    }
}